#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подготавливает показатели расчета по задаче. В зависимости от переданных параметров заполняет
// показатели операции, показатели расчета, показатели уплаты.
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыеПараметрыЗадачи()
//  АдресХранилища  - Строка - адрес хранилища результата
//
Процедура ПоказателиДляРасчетаВФоне(ПараметрыЗадачи, АдресХранилища) Экспорт
	
	ПоместитьВоВременноеХранилище(ПоказателиДляРасчета(ПараметрыЗадачи), АдресХранилища);
	
КонецПроцедуры

// Подготавливает показатели расчета по задаче. В зависимости от переданных параметров заполняет
// показатели операции, показатели расчета, показатели уплаты.
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыеПараметрыЗадачи()
// 
// Возвращаемое значение:
//   Структура - показатели расчета по задаче.
//
Функция ПоказателиДляРасчета(ПараметрыЗадачи) Экспорт
	
	СоставРазделов = ПараметрыЗадачи.СоставРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СоставРазделов", СоставРазделов);
	
	ВозможенКонтрольДолиВычетов = 
		ПараметрыЗадачи.КонецПериода >= УчетНДСКлиентСервер.НачалоРаботыКонтроляДолиВычетов();
	
	Если СоставРазделов.Операции Тогда
		ПоказателиОперации = НовыйПоказателиОперации();
		ЗаполнитьСведенияОбОперациях(ПоказателиОперации, ПараметрыЗадачи);
		
		Если ВозможенКонтрольДолиВычетов Тогда 
			// Контролируем налог к возмещению по текущему кварталу вне зависимости от настройки контроля доли вычетов за год.
			ДоляВычетовЗаКвартал = Отчеты.ОценкаРискаНалоговойПроверки.ДоляВычетовОтНачисленийНДС(
			ПараметрыЗадачи.Организация, ПараметрыЗадачи.КонецПериода, 1);
			НалогКВозмещению = Макс(ДоляВычетовЗаКвартал.ВсегоВычетов - ДоляВычетовЗаКвартал.ВсегоНачислений, 0);
			ПоказателиОперации.Вставить("НалогКВозмещению", НалогКВозмещению);
		Иначе
			ПоказателиОперации.Вставить("НалогКВозмещению", 0);
		КонецЕсли;
		РезультатВыполнения.Вставить("ПоказателиДляОпераций", ПоказателиОперации);
	КонецЕсли;
	
	Если СоставРазделов.Расчет Тогда
		ПоказателиРасчет = Отчеты.РегламентированныйОтчетНДС.ДанныеДляРасчетаНалога(ПараметрыЗадачи.Декларация);
		
		РезультатБыстройПроверкиДанныхНДС =
			БыстраяПроверкаДанныхНДСДетальная(ПараметрыЗадачи.Организация, ПараметрыЗадачи.КонецПериода);
		ПоказателиРасчет.Вставить("ОшибкиПоДаннымНДС", РезультатБыстройПроверкиДанныхНДС.ЕстьОшибкиПоДаннымНДС);
		НалогКВозмещению = Макс(ПоказателиРасчет.ВсегоВычеты - ПоказателиРасчет.ВсегоНачисления, 0);
		ПоказателиРасчет.Вставить("НалогКВозмещению", НалогКВозмещению);
		РезультатВыполнения.Вставить("ПоказателиДляРасчета", ПоказателиРасчет);
		
	КонецЕсли;
	
	Если ПараметрыЗадачи.КонтролироватьДолюВычета Тогда
		ДоляВычетов = Отчеты.ОценкаРискаНалоговойПроверки.ДоляВычетовОтНачисленийНДС(
			ПараметрыЗадачи.Организация, ПараметрыЗадачи.КонецПериода);
		ПоказателиДолиВычетов = Новый Структура();
		ПоказателиДолиВычетов.Вставить("ДоляВычетов", ДоляВычетов.ДоляВычетовНДС);
		ПоказателиДолиВычетов.Вставить("ДоляВычетовПредставление", "" + ДоляВычетов.ДоляВычетовНДС + "%");
		РезультатВыполнения.Вставить("ПоказателиДолиВычетов", ПоказателиДолиВычетов);
	КонецЕсли;
		
	Если СоставРазделов.Уплата Тогда 
		ПоказателиУплата  = НовыйПоказателиУплата();
		ЗаполнитьПлатежиПоДекларации(ПоказателиУплата, ПараметрыЗадачи);
		РезультатВыполнения.Вставить("ПоказателиДляУплаты", ПоказателиУплата);
	КонецЕсли;
		
	Если СоставРазделов.Уведомление Тогда
		ПоказателиУведомление = НовыйПоказателиУведомления();
		ЗаполнитьУведомления(ПоказателиУведомление, ПараметрыЗадачи);
		РезультатВыполнения.Вставить("ПоказателиДляУведомления", ПоказателиУведомление);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает описание действия для подготовки декларации из помощника
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//   ТекстОшибки - Строка - описание ошибки, препятствующей подготовке декларации
//
// Возвращаемое значение:
//   Структура
//     * ИмяФормы - имя формы декларации
//     * ПараметрыФормы - параметры для открытия формы декларации
//   Неопределено - если декларация за указанный период не требуется
//
Функция ОписаниеДействияДекларация(Организация, Период, ТекстОшибки = "") Экспорт
	
	ОписаниеДействия = Неопределено;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала);
	
	Если КонецКвартала(Период) <> НалоговыйПериод.Конец Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	ВидНалога = Перечисления.ВидыНалогов.НДС;
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
	ПорядокПредоставленияОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Отчет", Неопределено);
	
	Если ПорядокПредоставленияОтчета <> Неопределено Тогда
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
			ПорядокПредоставленияОтчета.Правило,
			ПорядокПредоставленияОтчета.ПериодСобытия,
			Организация,
			Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок предоставления отчета не определен'");
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Возвращает признак возможности формирования декларации НДС в форме помощника расчета НДС.
// Помощник расчета применяется только для плательщиков НДС, а формирование декларации 
// через помощник расчета НДС искусственно ограничено отчетностью за 1 кв. 2018 года (не ранее).
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой необходимо выполнить расчет НДС.
//   Период - Дата - дата внутри квартала (налогового периода), за который необходимо выполнить расчет НДС.
// Возвращаемые параметры:
//   Булево - Истина если декларацию необходимо формировать в форме помощника.
Функция ФормироватьДекларациюВПомощнике(Организация, Период) Экспорт
	
	Возврат ПомощникРасчетаНДС.ФормироватьДекларациюВПомощнике(Организация, Период);
	
КонецФункции

// Возвращает ссылку на первичную декларацию и признак "Сдано"
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//
// Возвращаемое значение:
//   Структура
//     * Декларация - ссылка на первичную декларацию за период
//     * ДекларацияСдана - булево, признак того, что декларация сдана
//
Функция СведенияОДекларации(Организация, Период) Экспорт
	
	Сведения = Новый Структура("Декларация, ДекларацияСдана", 
		Неопределено, Ложь);
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет(
		"РегламентированныйОтчетНДС", Организация, КонецКвартала(Период));
	
	Если НЕ Декларация.Пустая() Тогда
		
		Сведения.Декларация = Декларация;
		СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(Сведения.Декларация);
		Сведения.ДекларацияСдана = СостояниеОтправки = "Сдано";
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку статус.
// Добавляет колонку СведенияОРасчетеСуммы и заполняет ее.
//
// Параметры:
//  ПараметрыЗадачи - ТаблицаЗначений - Состав колонок см. НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ТаблицаЗадач) Экспорт
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Если Задача.СтатусУстановленВручную Тогда
			Задача.Статус = Задача.РучнойСтатус;
		Иначе
			ПараметрыЗадачи = НовыеПараметрыЗадачи();
			ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, Задача);
			ПараметрыЗадачи.ЭтоЗадачаОплаты = Истина;
			ПоказателиУплата = НовыйПоказателиУплата();
			ЗаполнитьПлатежиПоДекларации(ПоказателиУплата, ПараметрыЗадачи);
			Задача.Статус = СтатусУплатыНалога(ПоказателиУплата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция-конструктор структуры, описывающей параметры задачи
//
Функция НовыеПараметрыЗадачи() Экспорт
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("СоставРазделов", 
		Новый Структура("Операции, Расчет, Уведомление, Уплата, АктуальностьРасчета", Ложь, Ложь, Ложь, Ложь, Ложь));
	// переопределяется на правило уплаты
	ПараметрыЗадачи.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане"      , Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("ПериодСобытия"                    , '00010101');
	ПараметрыЗадачи.Вставить("НачалоПериода"                    , '00010101');
	ПараметрыЗадачи.Вставить("КонецПериода"                     , '00010101');
	ПараметрыЗадачи.Вставить("Срок"                             , '00010101'); // переопределяется кроме задач оплаты
	ПараметрыЗадачи.Вставить("СрокУплатыНалога"                 , '00010101'); // для ЕНС
	ПараметрыЗадачи.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыЗадачи.Вставить("ЭтоЗадачаОплаты"                  , Ложь);
	ПараметрыЗадачи.Вставить("Декларация"                       , Неопределено);
	// Помощник не поддерживает раздельный учет НДС, передаем всегда Ложь
	ПараметрыЗадачи.Вставить("РаздельныйУчетНДС"                , Ложь);   // параметр для отчета "Анализ НУ по НДС"
	ПараметрыЗадачи.Вставить("УчетНДС2012"                      , Истина); // параметр для отчета "Анализ НУ по НДС"
	ПараметрыЗадачи.Вставить("ТолькоПоказателиДляРасчета"       , Истина); // параметр для отчета "Анализ НУ по НДС"
	ПараметрыЗадачи.Вставить("Статус"                           , "");
	ПараметрыЗадачи.Вставить("СтатусУстановленВручную"          , Ложь);
	ПараметрыЗадачи.Вставить("РучнойСтатус"                     , "");
	ПараметрыЗадачи.Вставить("КонтролироватьДолюВычета"         , Ложь);
	ПараметрыЗадачи.Вставить("Действие"                         , Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка());
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

Функция СрокПодачиОтчета(Период) Экспорт
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	День = 24 * 60 * 60; // количество секунд в одном дне
	
	ДеньПодачиДекларации = НачалоКвартала(Период) + 24*День; // 25 число месяца
	
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат ДеньПодачиДекларации;
	КонецЕсли;
	ДатыДляПроверки = Новый Массив;
	ДатыДляПроверки.Добавить(ДеньПодачиДекларации);
	
	РабочиеДни = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, ДатыДляПроверки);
	Если НЕ ЗначениеЗаполнено(РабочиеДни) Тогда 
		Возврат ДеньПодачиДекларации;
	КонецЕсли;
	
	БлижайшийРабочийДень = РабочиеДни[ДеньПодачиДекларации];
	Если БлижайшийРабочийДень <> Неопределено Тогда
		Возврат БлижайшийРабочийДень;
	КонецЕсли;
	
	Возврат ДеньПодачиДекларации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьОбработкуНомеровСчетовФактур(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоКвартала(Период)));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецКвартала(Период)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	НЕ СчетФактураВыданный.ПометкаУдаления
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		СчетФактураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СчетФактураОбъект.Записать();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать номер счета-фактуры ""%1"" по причине:
					|%2'"), 
					Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("КонецКвартала",           Новый Граница(Период - 1, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Период",                  Период - 1);
	СтруктураПараметров.Вставить("Счета19КВычету",          БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	СтруктураПараметров.Вставить("СубконтоСчета19",         БухгалтерскийУчет.МассивСубконтоСчета19());
	СтруктураПараметров.Вставить("СубконтоСчета1907",       БухгалтерскийУчет.МассивСубконтоСчета1907());
	СтруктураПараметров.Вставить("УчетПоСпособамНаСчете19", БухгалтерскийУчет.УчетПоСпособамНаСчете19());
	СтруктураПараметров.Вставить("Организация",             Организация);
	СтруктураПараметров.Вставить("Счет1907",                ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	СтруктураПараметров.Вставить("ДокументыОперации",       Новый Массив);
	СтруктураПараметров.Вставить("Содержание", 
		НСтр("ru = 'Переход на раздельный учет НДС (на счете 19):
		| регистр бухгалтерии ""Хозрасчетный"": (перевод остатков по счету 19).'"));
	СтруктураПараметров.Вставить("Комментарий", 
		НСтр("ru = '#Документ создан автоматически при переходе 
		|на раздельный учет НДС (на счете 19), операция - ""перевод остатков по счету 19""'"));
	СтруктураПараметров.Вставить("СокращеннаяАналитика", УчетНДСРаздельный.СокращеннаяАналитика(Период));
	
	// Операция 1 - списание НДС с 19 по пустому субконто "Способ учета НДС", формирование прихода
	// по таблице НДСНа19КВычету - со значением "Принимается к вычету" на тот же счет
	// по таблице НДСНа19Экспорт - со значением "Реализация по ставке 0%" на счет 19.03
	
	СформироватьДвиженияПоСчету19(СтруктураПараметров);
	
	// Операция 2 - обнуление регистра НДС по приобретенным ценностям по данным таблицы НДСПоПриобретеннымЦенностям
	// и формирование остатков по регистру "Раздельный учет НДС" по данным таблицы НДСПоПриобретеннымЦенностям
	
	СтруктураПараметров.Содержание  = 
		НСтр("ru = 'Переход на раздельный учет НДС (на счете 19): ввод остатков по специальным регистрам НДС'");
	СтруктураПараметров.Комментарий = 
		НСтр("ru = '#Документ создан автоматически при переходе на раздельный учет НДС (на счете 19),
			| операция - ""ввод остатков по специальным регистрам НДС""'");
	
	СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	// Операция 3 - обнуление остатков по регистру "НДС предъявленный" соответствующих остаткам регистра
	// "НДС предъявленный, реализация 0"
	
	СформироватьДвиженияНДСПредъявленный(СтруктураПараметров);
	
	Для каждого ДокументОперации Из СтруктураПараметров.ДокументыОперации Цикл
	
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(Период,
			Организация,
			ДокументОперации,
			Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19,
			Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период, СообщенияОбОшибках = Неопределено) Экспорт
	
	ПометитьНаУдалениеСозданныеПоОперацииДокументы(
		Организация, 
		Период, 
		Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19,
		СообщенияОбОшибках);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоОтключениюРаздельногоУчетаНДС(Организация, Период) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КонецКвартала",           Новый Граница(Период - 1, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Период",                  Период - 1);
	СтруктураПараметров.Вставить("Счета19КВычету",          БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	СтруктураПараметров.Вставить("СубконтоСчета19",         БухгалтерскийУчет.МассивСубконтоСчета19());
	СтруктураПараметров.Вставить("Организация",             Организация);
	СтруктураПараметров.Вставить("ДокументыОперации",       Новый Массив);
	СтруктураПараметров.Вставить("СокращеннаяАналитика",    Истина);
	
	Если БухгалтерскийУчет.УчетПоСпособамНаСчете19() Тогда
		СтруктураПараметров.Вставить("Содержание", 
			НСтр("ru = 'Отключение раздельного учета НДС: регистр бухгалтерии 
			|""Хозрасчетный"": (перевод остатков по счету 19).'"));
		СтруктураПараметров.Вставить("Комментарий",
			НСтр("ru = '#Документ создан автоматически при отключении раздельного учета НДС,
				| операция - ""перевод остатков по счету 19""'"));
		ОчиститьСубконтоСпособыУчета(СтруктураПараметров);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Содержание", 
		НСтр("ru = 'Отключение раздельного учета НДС: списание остатков по регистрам НДС.'"));
	СтруктураПараметров.Вставить("Комментарий",
		НСтр("ru = '#Документ создан автоматически при отключении раздельного учета НДС, операция - 
			|""списание остатков по регистрам НДС""'"));
	
	СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров);
	СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров);
	СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров);
	
	Для каждого ДокументОперации Из СтруктураПараметров.ДокументыОперации Цикл
		
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
			Период,
			Организация,
			ДокументОперации,
			Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС,
			Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(Организация, Период, СообщенияОбОшибках = Неопределено) Экспорт
	
	ПометитьНаУдалениеСозданныеПоОперацииДокументы(
		Организация, 
		Период, 
		Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС, 
		СообщенияОбОшибках);
	
КонецПроцедуры

Процедура ЗапомнитьПорядокРасчетаНДС(Организация, РассчитыватьНалогАвтоматически) Экспорт 
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаНДС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация            = Организация;
	МенеджерЗаписи.РассчитыватьНДСВручную = НЕ РассчитыватьНалогАвтоматически;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры


#Область РасшифровкаНеПоддерживаемойФункциональности

Процедура СформироватьСписокОбъектовРучныеКорректировки(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовРучныеКорректировки = РезультатыЗапросовРучныеКорректировки(Параметры);
	Выборка = РезультатыЗапросовРучныеКорректировки.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Документы по учету НДС, с откорректированными движениями'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовОбособленныеПодразделения(Параметры, АдресХранилища) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовОбособленныеПодразделения = РезультатЗапросаОбособленныеПодразделения(Параметры);
	Выборка = РезультатыЗапросовОбособленныеПодразделения.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Организации с признаком ""Обособленное подразделение""'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);	
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовВвозТоваровИзЕАЭС(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовИспользуютсяВвозТоваровИзЕАЭС = РезультатыЗапросовИспользуютсяВвозТоваровИзЕАЭС(Параметры);
	Выборка = РезультатыЗапросовИспользуютсяВвозТоваровИзЕАЭС.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Документы ""Заявление о ввозе товаров""'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовИмпортТоваров(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовИспользуетсяИмпортТоваров = РезультатыЗапросовИспользуетсяИмпортТоваров(Параметры);
	Выборка = РезультатыЗапросовИспользуетсяИмпортТоваров.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Документы ""ГТД по импорту""'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовЭкспортТоваров(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовИспользуетсяЭкспортТоваров = РезультатыЗапросовИспользуетсяЭкспортТоваров(Параметры);
	Выборка = РезультатыЗапросовИспользуетсяЭкспортТоваров.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Документы, которыми отражен экспорт товаров'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовНачислениеНДСпоСМР(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовИспользуетсяНачислениеНДСпоСМР = РезультатыЗапросовИспользуетсяНачислениеНДСпоСМР(Параметры);
	Выборка = РезультатыЗапросовИспользуетсяНачислениеНДСпоСМР.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Документы, которыми отражено приобретение строительно-монтажных работ'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовНалоговыйАгентПоНДС(Параметры, АдресХранилища) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовНалоговыйАгентПоНДС = РезультатЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС(Параметры);
	Выборка = РезультатыЗапросовНалоговыйАгентПоНДС.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Список договоров'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаДоговор",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокКомиссияПоПродаже(Параметры, АдресХранилища) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовКомиссияПоПродаже = РезультатЗапросаКомиссияПоПродаже(Параметры);
	Выборка = РезультатыЗапросовКомиссияПоПродаже.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Список договоров'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаДоговор",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокКомиссияПоЗакупке(Параметры, АдресХранилища) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатыЗапросовКомиссияПоЗакупке = РезультатЗапросаКомиссияПоЗакупке(Параметры);
	Выборка = РезультатыЗапросовКомиссияПоЗакупке.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", 
			НСтр("ru='Список договоров'"));
			
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаДоговор",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗадания) Экспорт

	СообщениеОбОшибке = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда 
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке)
	
	Если ИдентификаторЗадания = Неопределено Тогда		
	    Возврат Истина;	
	КонецЕсли;
	
	Попытка
		
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";
		
	Исключение
	    // что-то произошло, нужно сообщить
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
		                    |Подробности см. в Журнале регистрации.
							|" + ОписаниеОшибки() + "'");
		Выполнено = Истина;
		
	КонецПопытки;
	
	Возврат Выполнено;
		
КонецФункции

// Быстрая проверка на ошибки в реквизитах организации
// и на первое вхождение на ошибки по данным НДС.
Функция БыстраяПроверкаДанныхНДСДетальная(Организация, Период) 

	РезультатБыстройПроверкиДанныхНДС = Новый Структура("ЕстьОшибкиПоДаннымНДС",
		 Ложь);
	
	МассивПроверок = Новый Массив();
	МассивПроверок.Добавить("НаличиеСФПолученных");
	МассивПроверок.Добавить("СоответствиеСФиАвансов");
	МассивПроверок.Добавить("НаличиеСФВыданных");
	МассивПроверок.Добавить("СоответствиеВыручкиНалогаСРегистромНДС");
	МассивПроверок.Добавить("ОтрицательныеОстаткиНДС");
	МассивПроверок.Добавить("Соответствие19ИРегистрНДС");


	Для каждого ТекСтрокаМассивПроверок Из МассивПроверок Цикл
	
		РезультатПроверки = ПомощникРасчетаНДС.ПроверитьДанныеНДС(ТекСтрокаМассивПроверок, 
			Организация, Период, Неопределено);
		Если не РезультатПроверки.ПроверкаПройдена Тогда
			РезультатБыстройПроверкиДанныхНДС.ЕстьОшибкиПоДаннымНДС = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Возврат РезультатБыстройПроверкиДанныхНДС;
КонецФункции

Процедура ЗаполнитьСведенияОбОперациях(Показатели, ПараметрыЗадачи)
	
	ПолноеДерево = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗаполнитьЗначенияДереваОпераций();
	ПолноеДерево.Колонки.Добавить("Контроль",          Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Актуальна",         Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Выполнена",         Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("СостояниеОпераций", Новый ОписаниеТипов("ТаблицаЗначений"));
	ПолноеДеревоОпераций = ПолноеДерево.Скопировать( ,"Узел,Связи,Контроль, Актуальна, Выполнена, СостояниеОпераций");
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьНеобходимостьКонтроляОпераций(
		ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, ПолноеДеревоОпераций);
	Показатели.ДеревоОпераций = ПолноеДеревоОпераций;
	
	Показатели.ТребуетсяПерепроведение = (РаботаСПоследовательностями.МоментНачалаПерепроведения(
		ПараметрыЗадачи.Организация, КонецКвартала(ПараметрыЗадачи.ПериодСобытия)) <> Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьПлатежиПоДекларации(Показатели, ПараметрыЗадачи)
	
	ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(ПараметрыЗадачи.Организация);
	СрокиОплатыПеренесены = НЕ ПараметрыПродленияСроков.РаботаетВНерабочиеДни;
	
	ВидНалога = Перечисления.ВидыНалогов.НДС;
	
	ПорядокОтчетаУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		ПараметрыЗадачи.Организация, 
		ВидНалога,
		КонецКвартала(ПараметрыЗадачи.ПериодСобытия), 
		Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		
	ПорядокУплаты           = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Уплата", Неопределено);
	КорректныйПорядокУплаты = КорректныйПорядокУплаты(ПорядокУплаты);
	ПлательщикЕНП           = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.Срок);
	ПростойУчетЕНС          = ПараметрыЗадачи.Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	КоличествоПлатежейПоДекларации = 3;
	Если ПростойУчетЕНС Тогда
		КоличествоПлатежейПоДекларации = 6; // 3 платежа по 1-му и 3 по 2-му разделам декларации НДС
	КонецЕсли;
	
	Платежи = НовыйПлатежи();
	Для НомерПлатежа = 1 По КоличествоПлатежейПоДекларации Цикл
		Если НомерПлатежа > 3 Тогда
			ИндексСрокаПлатежа = НомерПлатежа - 4; // сроки платежей по 2-му разделу декларации совпадают со сроками по 1-му
		Иначе
			ИндексСрокаПлатежа = НомерПлатежа - 1;
		КонецЕсли;
		СтрокаПлатежа      = Платежи.Добавить();
		Если КорректныйПорядокУплаты Тогда
			СтрокаПлатежа.Дата = ПорядокУплаты[ИндексСрокаПлатежа].Срок;
		Иначе
			СтрокаПлатежа.Дата = ДобавитьМесяц(ПараметрыЗадачи.ПериодСобытия, 3 + ИндексСрокаПлатежа) + 24*86400;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыЗадачи.ЭтоЗадачаОплаты Тогда 
		// Срок до получения информации об оплате по декларации
		Показатели.Срок    = Платежи[0].Дата;
	Иначе
		// Для задачи оплаты сразу определен срок
		Показатели.Срок = ПараметрыЗадачи.Срок;
	КонецЕсли;

	ИндексОчередногоПлатежа       = 0;
	ЗачтенныйЕНП                  = 0;
	ЗачтенныйЕНПДоТекущегоПлатежа = 0;
	
	Если ПлательщикЕНП И Не ПростойУчетЕНС Тогда
		СведенияОЗачетеЕНП            = ЗачтенныйЕНП(ПараметрыЗадачи.Организация, ПараметрыЗадачи.Срок);
		ЗачтенныйЕНП                  = СведенияОЗачетеЕНП.ЗачтеннаяСумма;
		ИндексОчередногоПлатежа       = СведенияОЗачетеЕНП.ИндексОчередногоПлатежа;
		СведенияОЗачетеЕНП            = ЗачтенныйЕНП(ПараметрыЗадачи.Организация, Показатели.Срок, Ложь);
		ЗачтенныйЕНПДоТекущегоПлатежа = СведенияОЗачетеЕНП.ЗачтеннаяСумма;
	КонецЕсли;
	
	// Правило уплаты установим по перому платежу.
	Если КорректныйПорядокУплаты Тогда 
		ПравилоУплаты = ПорядокУплаты[0].Правило;
	КонецЕсли;

	Показатели.ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		ПараметрыЗадачи.ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал());
		
	Если ЗначениеЗаполнено(ПравилоУплаты) Тогда 
		ДополнительныеПараметры = Новый Структура("ВключатьПлатежиАгента", ПростойУчетЕНС);
		ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
			ПравилоУплаты,
			ПараметрыЗадачи.Организация,
			ПараметрыЗадачи.РегистрацияВНалоговомОргане,
			ПараметрыЗадачи.ПериодСобытия,
			Показатели.Срок,
			Показатели.ПоказательПериода, 
			ДополнительныеПараметры);
	КонецЕсли;
	
	// Если срок платежа приходится на первую половину месяца, то значит это платеж прошлого месяца,
	// перенесенный из-за выходных и праздничных дней.
	ДеньСерединыМесяца = 15;
	НомерМесяцаПлатежа = ?(День(Показатели.Срок) < ДеньСерединыМесяца, 
		Месяц(Показатели.Срок) - 1, // предыдущий месяц
		Месяц(Показатели.Срок));    // текущий месяц
	
	Если Не ПараметрыЗадачи.ЭтоЗадачаОплаты Тогда
		Показатели.ИндексОчередногоПлатежа = ИндексОчередногоПлатежа;
		Если КорректныйПорядокУплаты Тогда 
			Показатели.Срок = ПорядокУплаты[ИндексОчередногоПлатежа].Срок;
		Иначе
			Показатели.Срок = Платежи[ИндексОчередногоПлатежа].Дата;
		КонецЕсли;
		ПараметрыЗадачи.Срок = Показатели.Срок;
	ИначеЕсли НомерМесяцаПлатежа % 3 = 0 Тогда
		Показатели.ИндексОчередногоПлатежа = 2;
	ИначеЕсли НомерМесяцаПлатежа % 3 = 1 
		ИЛИ ЭтоПервыйПлатежДекларацииЗа1кв2020(СрокиОплатыПеренесены, Показатели.Срок) Тогда
		Показатели.ИндексОчередногоПлатежа = 0;
	ИначеЕсли НомерМесяцаПлатежа % 3 = 2 Тогда
		Показатели.ИндексОчередногоПлатежа = 1;
	КонецЕсли;

	ОсталосьОплатить = 0;
	ДолжноБытьОплаченоНаДатуОчередногоПлатежа = 0;
	Если ДанныеДекларации <> Неопределено
		И ДанныеДекларации.Платежи.Количество() = КоличествоПлатежейПоДекларации Тогда 
		Показатели.Декларация    = ДанныеДекларации.Ссылка;
		Показатели.ПредставлениеДекларации = ПредставлениеДекларации(ДанныеДекларации.Ссылка);
		Показатели.НалогКУплате   = ДанныеДекларации.СуммаНДСПоДекларации;
		Показатели.НалогНАКУплате = ДанныеДекларации.СуммаНДСНАПоДекларации;
		Показатели.ДатаДекларации = ДанныеДекларации.ДатаПодписи;
		
		Если ПлательщикЕНП Тогда
			Для НомерПлатежа = 1 По КоличествоПлатежейПоДекларации Цикл 
				ЗаполнитьЗначенияСвойств(Платежи[НомерПлатежа-1], ДанныеДекларации.Платежи[НомерПлатежа-1]);
			КонецЦикла;
		Иначе
			// До ЕНС всегда 3 платежа по декларации
			ЗаполнитьПлатежиДоЕНС(ДанныеДекларации, ОсталосьОплатить, ПараметрыЗадачи, Платежи, Показатели, СрокиОплатыПеренесены);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаРасчета                               = НовыйТаблицаРасчета();
	ТаблицаНалоговыйАгент                        = НовыйТаблицаНалоговыйАгент();
	ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров = НовыйТаблицаНалоговыйАгентПоОтдельнымВидамТоваров();
	ТаблицаТаможенныйСоюз                        = НовыйТаблицаНалоговыйАгент();
	
	Если ПлательщикЕНП Тогда
		
		Для НомерПлатежа = 1 По 3 Цикл 
			Расчет = ТаблицаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(Расчет, Платежи[НомерПлатежа-1]);
		КонецЦикла;
		ТаблицаРасчета.Свернуть("Дата, ОКАТО, КБК, КодНалоговогоОргана, Налог", "Сумма");
		
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыЗадачи.Организация);
		
		РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
				КонецМесяца(ПараметрыЗадачи.ПериодСобытия));
				
		Если НЕ ПростойУчетЕНС Тогда
			СобратьДанныеНалоговогоАгента(ТаблицаНалоговыйАгент, ПараметрыЗадачи);
			СобратьДанныеНалоговогоАгентаПоОтдельнымВидамТоваров(ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров, ПараметрыЗадачи);
			СобратьДанныеТаможенныйСоюз(ТаблицаТаможенныйСоюз, ПараметрыЗадачи);
			
			Если ПараметрыЗадачи.Срок >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() И НЕ ПростойУчетЕНС Тогда
				
				ДополнитьОплатуНДСНалоговогоАгента(
					ДолжноБытьОплаченоНаДатуОчередногоПлатежа, ПараметрыЗадачи, ТаблицаНалоговыйАгент);
				ДополнитьОплатуНДСНалоговогоАгента(
					ДолжноБытьОплаченоНаДатуОчередногоПлатежа, ПараметрыЗадачи, ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров);
				ДополнитьОплатуНДСНалоговогоАгента(
					ДолжноБытьОплаченоНаДатуОчередногоПлатежа, ПараметрыЗадачи, ТаблицаТаможенныйСоюз);
				
				Показатели.НалогКУплате = Показатели.НалогКУплате
					+ ТаблицаНалоговыйАгент.Итог("Сумма")
					+ ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров.Итог("Сумма")
					+ ТаблицаТаможенныйСоюз.Итог("Сумма");
			КонецЕсли;
			
			Показатели.ОплаченоРанее = ЗачтенныйЕНП;
			
			ОсталосьОплатить = Показатели.НалогКУплате - Показатели.ОплаченоРанее; 
			Показатели.ОсталосьОплатить = ?(ОсталосьОплатить > 0, ОсталосьОплатить, 0);
		КонецЕсли;
	
		Для Каждого Платеж Из Платежи Цикл
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
		КонецЦикла;
		
	КонецЕсли;
	
	// Переопределим правило для очередного платежа
	Если КорректныйПорядокУплаты Тогда 
		ПараметрыЗадачи.Правило = ПорядокУплаты[Показатели.ИндексОчередногоПлатежа].Правило;
		Показатели.Правило      = ПорядокУплаты[Показатели.ИндексОчередногоПлатежа].Правило;
	КонецЕсли;
	
	Если ПростойУчетЕНС Тогда
		ОчереднойПлатеж = Платежи[Показатели.ИндексОчередногоПлатежа].Сумма // платеж по разделу 1 декларации НДС
			+ Платежи[Показатели.ИндексОчередногоПлатежа + 3].Сумма;        // платеж по разделу 2 декларации НДС
		РассчитанныйНалогКУплатеНаДату = ОчереднойПлатеж;
	Иначе
		Для ИндексПлатежа = 0 По Показатели.ИндексОчередногоПлатежа Цикл 
			ДолжноБытьОплаченоНаДатуОчередногоПлатежа = ДолжноБытьОплаченоНаДатуОчередногоПлатежа + Платежи[ИндексПлатежа].Сумма;
		КонецЦикла;
		ОчереднойПлатеж = ДолжноБытьОплаченоНаДатуОчередногоПлатежа - Показатели.ОплаченоРанее;
		РассчитанныйНалогКУплатеНаДату = ДолжноБытьОплаченоНаДатуОчередногоПлатежа - ЗачтенныйЕНПДоТекущегоПлатежа;
	КонецЕсли;
	
	Если Не ПлательщикЕНП Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
		Платежи.ЗаполнитьЗначения(Налог, "Налог");
	КонецЕсли;
	
	Показатели.РассчитанныйНалогКУплатеНаДату = ?(РассчитанныйНалогКУплатеНаДату > 0, РассчитанныйНалогКУплатеНаДату, 0);
	Показатели.ТаблицаРасчет                  = ТаблицаРасчета;
	// Используются до ведения простого учета ЕНС
	Показатели.ОчереднойПлатеж                = ?(ОчереднойПлатеж > 0, ОчереднойПлатеж, 0);
	Показатели.ТаблицаПлатежи                 = Платежи;
	Показатели.ТаблицаНалоговыйАгент          = ТаблицаНалоговыйАгент;
	Показатели.ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров = ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров;
	Показатели.ТаблицаТаможенныйСоюз          = ТаблицаТаможенныйСоюз;
	
КонецПроцедуры

Процедура ДополнитьОплатуНДСНалоговогоАгента(ДолжноБытьОплаченоНаДатуОчередногоПлатежа, ПараметрыЗадачи, ТаблицаНалоговыйАгент)
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговыйАгент Цикл
		Если НачалоМесяца(СтрокаТаблицы.СрокУплаты) <= НачалоМесяца(ПараметрыЗадачи.Срок) Тогда
			ДолжноБытьОплаченоНаДатуОчередногоПлатежа = ДолжноБытьОплаченоНаДатуОчередногоПлатежа + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		Если НачалоКвартала(СтрокаТаблицы.СрокУплаты) <> НачалоКвартала(ПараметрыЗадачи.Срок) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	УдалитьСтрокиТаблицы(СтрокиКУдалению, ТаблицаНалоговыйАгент);

КонецПроцедуры

Процедура ЗаполнитьУведомления(Показатели, ПараметрыЗадачи)
	
	Правило         = ПараметрыЗадачи.Правило;
	Организация     = ПараметрыЗадачи.Организация;
	ПериодСобытия   = НачалоДня(ПараметрыЗадачи.КонецПериода);
	ЭтоЗадачаОплаты = ПараметрыЗадачи.ЭтоЗадачаОплаты;
	СрокУплаты      = ПараметрыЗадачи.СрокУплатыНалога;
	
	Если Не ЗначениеЗаполнено(Правило) Тогда
		ВидНалога = Перечисления.ВидыНалогов.НДС;
		Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация,
			ВидНалога,
			ПериодСобытия,
			Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
			
		ПорядокПредоставленияОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Отчет", Неопределено);
		Если ПорядокПредоставленияОтчета <> Неопределено Тогда
			Правило = ПорядокПредоставленияОтчета.Правило;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУплатыПоПравилуОтчета(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(Правило, Организация, ПериодСобытия));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Организация,
		ПериодСобытия);
	
	ТаблицаУведомления = Уведомления.СкопироватьКолонки();
	
	РасшифровкаУведомлений = ПолучитьРасшифровкуУведомлений(Уведомления);
	
	ПервыйМесяц = НачалоКвартала(СрокУплаты);
	МассивСроков = Новый Массив;
	МассивСроков.Добавить(ПервыйМесяц);
	МассивСроков.Добавить(ДобавитьМесяц(ПервыйМесяц, 1));
	МассивСроков.Добавить(ДобавитьМесяц(ПервыйМесяц, 2));
	
	Для ИндексМесяца = 0 По 2 Цикл
		НоваяСтрока = ТаблицаУведомления.Добавить();
		НоваяСтрока.Дата = МассивСроков[ИндексМесяца];
		Для Каждого СтрокаТаблицы Из РасшифровкаУведомлений Цикл
			Если НачалоМесяца(НоваяСтрока.Дата) = НачалоМесяца(СтрокаТаблицы.СрокУплаты) Тогда
				ДанныеУведомления = Уведомления.Найти(СтрокаТаблицы.Ссылка);
				Если ДанныеУведомления <> Неопределено Тогда
					Если ЭтоЗадачаОплаты Тогда
						Если НачалоМесяца(СтрокаТаблицы.СрокУплаты) = НачалоМесяца(СрокУплаты) Тогда
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеУведомления,,"Дата");
						КонецЕсли;
					Иначе
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеУведомления,,"Дата");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаУведомления.Свернуть("Уведомление, Сумма, Дата",);
	
	Показатели.ТаблицаУведомления = ТаблицаУведомления;
	
КонецПроцедуры

Функция ПолучитьРасшифровкуУведомлений(Уведомления)
	
	МассивНалогов = Новый Массив;
	МассивНалогов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС));
	МассивНалогов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС_ВвозимыеТовары));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомления", Уведомления.ВыгрузитьКолонку("Уведомление"));
	Запрос.УстановитьПараметр("Налоги",      МассивНалогов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка КАК Ссылка,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СрокУплаты КАК СрокУплаты
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка В(&Уведомления)
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог В(&Налоги)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СрокУплаты
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка В(&Уведомления)
	|	И ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог В(&Налоги)";
	
	Расшифровка = Запрос.Выполнить().Выгрузить();
	
	Возврат Расшифровка;
	
КонецФункции

Функция ДокументыУплатыНалога(Организация, Период)
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("НДС");
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДС);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

Процедура РассчитатьНалог(ПараметрыЗадачи, АдресХранилища) Экспорт
	
	ПомощникРасчетаНДС.ОбновитьРасчет(ПараметрыЗадачи);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("РасчетВыполнен", Истина);
	РезультатВыполнения.Вставить("Декларация", ПараметрыЗадачи.Декларация);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Определяет представление декларации на форме (для пользователя).
//
// Параметры:
//  Декларация - ДокументСсылка.РегламентированныйОтчет  - декларация.
// 
// Возвращаемое значение:
//  Строка - представление декларации на форме (для пользователя).
//
Функция ПредставлениеДекларации(Декларация)
	
	ТипДокумента = ТипЗнч(Декларация);
	
	Если ТипДокумента <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(Декларация);
	
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Декларация по НДС (%1)'"),
		СостояниеОтправки);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

Функция ПредставлениеПлатежногоДокумента(ДокументыОплаты, Состояния = Неопределено) Экспорт
	
	ПредставлениеПлатежногоДокумента = Новый Структура("Наименование, Сумма, Оплачено", "", 0, Ложь);
	
	Если ДокументыОплаты.Количество() = 0 Тогда 
		Возврат ПредставлениеПлатежногоДокумента;
	КонецЕсли;
	
	// Представление получаем по первому документу
	ДокументСсылка = ДокументыОплаты[0];
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Номер, СуммаДокумента");
	
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь);
	ДатаДокумента          = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	Если Не ЗначениеЗаполнено(Состояния) Тогда
		СтатусОплаты       = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(ДокументСсылка);
	Иначе
		СтатусОплаты       = Состояния[0];
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = 'Платежное поручение %1 от %2'");
	
	НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		НомерДокумента, ДатаДокумента);
		
	ПредставлениеПлатежногоДокумента.Оплачено = СтатусОплаты = Перечисления.СостоянияБанковскихДокументов.Оплачено;
	Если ДокументыОплаты.Количество() = 1 Тогда
		ШаблонПредставления = НСтр("ru = '%1 на сумму %2'");
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НаименованиеДокумента,
			ОбщегоНазначенияБПВызовСервера.ФорматСумм(РеквизитыДокумента.СуммаДокумента));
		ПредставлениеПлатежногоДокумента.Наименование = НаименованиеДокумента;
		ПредставлениеПлатежногоДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	Иначе
		ИтоговаяСумма = 0;
		СуммыПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыОплаты, "СуммаДокумента");
		Для Каждого СуммаДокумента Из СуммыПоДокументам Цикл
			ИтоговаяСумма = ИтоговаяСумма + СуммаДокумента.Значение;
		КонецЦикла;
		ПредставлениеПлатежногоДокумента.Сумма = ИтоговаяСумма;
		
		ЕщеДокументов = ДокументыОплаты.Количество() - 1;
		ШаблонПредставления = НСтр("ru = '%1 на сумму %2 (%3) и еще %4'");
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НаименованиеДокумента,
			ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтоговаяСумма),
			Строка(СтатусОплаты),
			ЕщеДокументов);
		ПредставлениеПлатежногоДокумента.Наименование = НаименованиеДокумента;
	КонецЕсли;
	
	Возврат ПредставлениеПлатежногоДокумента;
	
КонецФункции

// Функция-конструктор таблицы, описывающей параметры задач
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = Новый ТаблицаЗначений;
	
	Для Каждого ЭлементСтруктуры Из НовыеПараметрыЗадачи() Цикл
		ПараметрыЗадач.Колонки.Добавить(ЭлементСтруктуры.Ключ,
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЭлементСтруктуры.Значение))));
	КонецЦикла;
	
	Возврат ПараметрыЗадач;
	
КонецФункции

Функция НовыйПоказателиОперации()
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("ДеревоОпераций",          Новый ТаблицаЗначений);
	Показатели.Вставить("ТребуетсяПерепроведение", Ложь);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйПоказателиУплата()
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("НалогКУплате",                                 0); // по данным 1 раздела декларации
	Показатели.Вставить("НалогНАКУплате",                               0); // по данным 2 раздела декларации
	Показатели.Вставить("ТаблицаПлатежи",                               Неопределено);
	Показатели.Вставить("ОчереднойПлатеж",                              0);
	Показатели.Вставить("РассчитанныйНалогКУплатеНаДату",               0); // необходимо для помощника ЕНС
	Показатели.Вставить("ОсталосьОплатить",                             0);
	Показатели.Вставить("ОплаченоРанее",                                0);
	Показатели.Вставить("Декларация",                                   Неопределено);
	Показатели.Вставить("ПредставлениеДекларации",                      "");
	Показатели.Вставить("Срок",                                         '00010101');
	Показатели.Вставить("ИндексОчередногоПлатежа",                      0);
	Показатели.Вставить("ПоказательПериода",                            "");
	Показатели.Вставить("ДатаДекларации",                               '00010101'); // дата подписи декларации
	Показатели.Вставить("ТаблицаРасчет",                                Неопределено);
	Показатели.Вставить("ТаблицаНалоговыйАгент",                        Неопределено);
	Показатели.Вставить("ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров", Неопределено);
	Показатели.Вставить("ТаблицаТаможенныйСоюз",                        Неопределено);
	// всегда правило уплаты
	Показатели.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйПлатежи()
	
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	Платежи.Колонки.Добавить("Дата",                      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Платежи.Колонки.Добавить("ПлатежныеПоручения",        Новый ОписаниеТипов("Массив"));
	Платежи.Колонки.Добавить("ПредставлениеПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи.Колонки.Добавить("СуммаПлатежногоПоручения",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Платежи.Колонки.Добавить("Оплачено",                  Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Состояния",                 Новый ОписаниеТипов("Массив"));
	
	Возврат Платежи;
	
КонецФункции

Функция НовыйПоказателиУведомления()
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("ТаблицаУведомления", Неопределено);
	// всегда правило уведомления
	Показатели.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйТаблицаРасчета()
	
	Расчеты = Новый ТаблицаЗначений;
	
	Расчеты.Колонки.Добавить("Сумма",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("Дата",                Новый ОписаниеТипов("Дата"));
	Расчеты.Колонки.Добавить("ОКАТО",               Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Расчеты.Колонки.Добавить("КБК",                 Метаданные.Справочники.ВидыНалоговИПлатежейВБюджет.Реквизиты.КодБК.Тип);
	Расчеты.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка"));
	Расчеты.Колонки.Добавить("Налог",               Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
	Возврат Расчеты;
	
КонецФункции

Функция НовыйТаблицаНалоговыйАгент()
	
	Расчеты = Новый ТаблицаЗначений;
	Расчеты.Колонки.Добавить("СчетУчета",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Расчеты.Колонки.Добавить("Контрагент",       Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Расчеты.Колонки.Добавить("Договор",          Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Расчеты.Колонки.Добавить("ДокументРасчетов", Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов.ТабличныеЧасти.НалоговыйАгентНДС.Реквизиты.ДокументРасчетов.Тип);
	Расчеты.Колонки.Добавить("Сумма",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("СрокУплаты",       Новый ОписаниеТипов("Дата"));
	
	Возврат Расчеты;
	
КонецФункции

Функция НовыйТаблицаНалоговыйАгентПоОтдельнымВидамТоваров()
	
	Расчеты = Новый ТаблицаЗначений;
	Расчеты.Колонки.Добавить("СчетУчета",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Расчеты.Колонки.Добавить("Сумма",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("СрокУплаты",       Новый ОписаниеТипов("Дата"));
	
	Возврат Расчеты;
	
КонецФункции

Функция СтатусУплатыНалога(ПоказателиУплата)
	
	Статус = "";
	
	Платежи = ПоказателиУплата.ТаблицаПлатежи;
	ПлатежиТекущегоМесяца = Платежи[ПоказателиУплата.ИндексОчередногоПлатежа];
	
	Уплачено = ?(ПлатежиТекущегоМесяца.Оплачено, ПлатежиТекущегоМесяца.СуммаПлатежногоПоручения, 0);
	СуммаНалогаКУплате = ПлатежиТекущегоМесяца.Сумма;
	
	Если Уплачено > 0 И Уплачено >= СуммаНалогаКУплате Тогда
		Статус = НСтр("ru='Оплачено'");
	Иначе
		ПлатежныеПоручения = Новый Массив;
		Для Каждого ПлатежноеПоручение Из ПлатежиТекущегоМесяца.ПлатежныеПоручения Цикл
			ПлатежныеПоручения.Добавить(ПлатежноеПоручение);
		КонецЦикла;
		Статус = ПомощникиПоУплатеНалоговИВзносов.СтатусОплатыПлатежныхПоручений(ПлатежныеПоручения);
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#Область ПереходНаРаздельныйУчетНДСНаСчете19

Процедура СформироватьДвиженияПоСчету19(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто2,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто3
	|ПОМЕСТИТЬ ТаблицаПустыхСубконтоПоСчету
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто1
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто2
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто2.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто3
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто3.Ссылка
	|ГДЕ
	|	(Хозрасчетный.Ссылка В (&Счета19КВычету)
	|			ИЛИ Хозрасчетный.Ссылка В (&Счет1907))
	|	И ХозрасчетныйВидыСубконто1.НомерСтроки = 1
	|	И ХозрасчетныйВидыСубконто2.НомерСтроки = 2
	|	И ХозрасчетныйВидыСубконто3.НомерСтроки = 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ХозрасчетныйОстатки.Счет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету) КАК СубконтоДт3,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		КОГДА ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
	|	КОНЕЦ КАК СубконтоКт3,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецКвартала,
	|			Счет В (&Счета19КВычету),
	|			&СубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПустыхСубконтоПоСчету КАК ТаблицаПустыхСубконтоПоСчету
	|		ПО ХозрасчетныйОстатки.Счет = ТаблицаПустыхСубконтоПоСчету.Счет
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		КОГДА ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Организация,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецКвартала, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|		ПО ХозрасчетныйОстатки.Субконто2 = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И ХозрасчетныйОстатки.Субконто3 = НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПустыхСубконтоПоСчету КАК ТаблицаПустыхСубконтоПоСчету
	|		ПО ХозрасчетныйОстатки.Счет = ТаблицаПустыхСубконтоПоСчету.Счет
	|ГДЕ
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ),
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		КОГДА ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецКвартала, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|		ПО ХозрасчетныйОстатки.Субконто2 = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И ХозрасчетныйОстатки.Субконто3 = НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПустыхСубконтоПоСчету КАК ТаблицаПустыхСубконтоПоСчету
	|		ПО ХозрасчетныйОстатки.Счет = ТаблицаПустыхСубконтоПоСчету.Счет
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт - НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.СчетДт КАК СчетДт,
	|	ТаблицаОстатков.СчетКт КАК СчетКт,
	|	ТаблицаОстатков.СубконтоДт1 КАК СубконтоДт1,
	|	ТаблицаОстатков.СубконтоДт2 КАК СубконтоДт2,
	|	ТаблицаОстатков.СубконтоДт3 КАК СубконтоДт3,
	|	ТаблицаОстатков.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаОстатков.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаОстатков.СубконтоКт3 КАК СубконтоКт3,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	СУММА(ТаблицаОстатков.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СводныеОстатки
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.СубконтоКт2,
	|	ТаблицаОстатков.СчетКт,
	|	ТаблицаОстатков.СчетДт,
	|	ТаблицаОстатков.СубконтоКт3,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.СубконтоКт1,
	|	ТаблицаОстатков.СубконтоДт1,
	|	ТаблицаОстатков.СубконтоДт2,
	|	ТаблицаОстатков.СубконтоДт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеОстатки.СчетДт КАК СчетДт,
	|	СводныеОстатки.СчетКт КАК СчетКт,
	|	СводныеОстатки.СубконтоДт1 КАК СубконтоДт1,
	|	СводныеОстатки.СубконтоДт2 КАК СубконтоДт2,
	|	СводныеОстатки.СубконтоДт3 КАК СубконтоДт3,
	|	СводныеОстатки.СубконтоКт1 КАК СубконтоКт1,
	|	СводныеОстатки.СубконтоКт2 КАК СубконтоКт2,
	|	СводныеОстатки.СубконтоКт3 КАК СубконтоКт3,
	|	СводныеОстатки.Организация КАК Организация,
	|	СводныеОстатки.Сумма КАК Сумма
	|ИЗ
	|	СводныеОстатки КАК СводныеОстатки
	|ГДЕ
	|	СводныеОстатки.Сумма <> 0";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Попытка
			ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата          = СтруктураПараметров.Период;
			ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
			ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
			// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
			// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.Период;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.СчетДт;
			Запись.СчетКт = ВыборкаДетальныеЗаписи.СчетКт;
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.СубконтоДт3);
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.СубконтоКт3);
			
			Запись.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			
		КонецЦикла;
		
		Попытка
			
			ОперацияОбъект.Движения.Записать();
			// Запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоСчету19(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Результат = ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров);
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСПредъявленный0.Организация,
	|	НДСПредъявленный0.СчетФактура,
	|	НДСПредъявленный0.ВидЦенности,
	|	НДСПредъявленный0.СтавкаНДС,
	|	НДСПредъявленный0.СчетУчетаНДС,
	|	-НДСПредъявленный0.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	-НДСПредъявленный0.НДСОстаток КАК НДС,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный
	|		ПО НДСПредъявленный0.СчетФактура = НДСПредъявленный.СчетФактура
	|			И НДСПредъявленный0.ВидЦенности = НДСПредъявленный.ВидЦенности
	|			И НДСПредъявленный0.СтавкаНДС = НДСПредъявленный.СтавкаНДС
	|			И НДСПредъявленный0.СчетУчетаНДС = НДСПредъявленный.СчетУчетаНДС
	|ГДЕ
	|	(НДСПредъявленный0.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСПредъявленный0.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтключениеРаздельногоУчетаНДС

Процедура СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров)
	
	Результат = ЗаблокированныйНДСПоТоварам(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуНДСПредъявленный(Результат);
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров)
	
	Результат = ЗаблокированныйНДСПоУслугам(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленныйРеализация0");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуНДСПредъявленный(Результат);
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаблокированныйНДСПоТоварам(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НДСРаздельныйУчет.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСРаздельныйУчет.НДСОстаток КАК НДС,
	|	КлючиАналитикиУчетаНДС.СчетФактура КАК СчетФактура,
	|	КлючиАналитикиУчетаНДС.СчетУчетаНДС КАК СчетУчетаНДС,
	|	КлючиАналитикиУчетаНДС.ВидЦенности КАК ВидЦенности,
	|	КлючиАналитикиУчетаНДС.СтавкаНДС КАК СтавкаНДС,
	|	КлючиАналитикиУчетаНДС.Организация КАК Организация,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.Партия КАК Партия,
	|	НДСРаздельныйУчет.СпособУчетаНДС КАК СпособУчетаНДС,
	|	НДСРаздельныйУчет.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТНДСЗаблокированныйПоТоварам
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(
	|			&КонецКвартала,
	|			Организация = &Организация
	|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0)) КАК НДСРаздельныйУчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНДС КАК КлючиАналитикиУчетаНДС
	|		ПО НДСРаздельныйУчет.АналитикаУчетаНДС = КлючиАналитикиУчетаНДС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючиАналитикиУчетаНДС.СчетФактура,
	|	КлючиАналитикиУчетаНДС.СчетУчетаНДС,
	|	КлючиАналитикиУчетаНДС.ВидЦенности,
	|	КлючиАналитикиУчетаНДС.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(НДСПредъявленный.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(НДСПредъявленный.ДатаОплаты) КАК ДатаОплаты,
	|	МАКСИМУМ(НДСПредъявленный.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|ПОМЕСТИТЬ ДополнительныеСведения
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСЗаблокированныйПоТоварам КАК НДСЗаблокированныйПоТоварам
	|		ПО НДСПредъявленный.СчетФактура = НДСЗаблокированныйПоТоварам.СчетФактура
	|			И НДСПредъявленный.СчетУчетаНДС = НДСЗаблокированныйПоТоварам.СчетУчетаНДС
	|			И НДСПредъявленный.ВидЦенности = НДСЗаблокированныйПоТоварам.ВидЦенности
	|			И НДСПредъявленный.СтавкаНДС = НДСЗаблокированныйПоТоварам.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСЗаблокированныйПоТоварам.Организация,
	|	НДСЗаблокированныйПоТоварам.СчетФактура,
	|	НДСЗаблокированныйПоТоварам.СчетУчетаНДС,
	|	НДСЗаблокированныйПоТоварам.ВидЦенности,
	|	НДСЗаблокированныйПоТоварам.СтавкаНДС,
	|	НДСЗаблокированныйПоТоварам.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСЗаблокированныйПоТоварам.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСЗаблокированныйПоТоварам.Партия КАК Партия,
	|	НДСЗаблокированныйПоТоварам.СпособУчетаНДС КАК СпособУчетаНДС,
	|	- НДСЗаблокированныйПоТоварам.СуммаБезНДС КАК СуммаБезНДС,
	|	- НДСЗаблокированныйПоТоварам.НДС КАК НДС,
	|	- НДСЗаблокированныйПоТоварам.КоличествоОстаток КАК Количество,
	|	НДСЗаблокированныйПоТоварам.СуммаБезНДС КАК СуммаБезНДСПриход,
	|	НДСЗаблокированныйПоТоварам.НДС КАК НДСПриход,
	|	ДополнительныеСведения.Поставщик,
	|	ДополнительныеСведения.ДоговорКонтрагента,
	|	ДополнительныеСведения.ДатаОплаты,
	|	ДополнительныеСведения.ИсправленныйСчетФактура
	|ИЗ
	|	ВТНДСЗаблокированныйПоТоварам КАК НДСЗаблокированныйПоТоварам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.СчетФактура = НДСЗаблокированныйПоТоварам.СчетФактура)
	|			И (ДополнительныеСведения.СчетУчетаНДС = НДСЗаблокированныйПоТоварам.СчетУчетаНДС)
	|			И (ДополнительныеСведения.ВидЦенности = НДСЗаблокированныйПоТоварам.ВидЦенности)
	|			И (ДополнительныеСведения.СтавкаНДС = НДСЗаблокированныйПоТоварам.СтавкаНДС)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Функция ЗаблокированныйНДСПоУслугам(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НДСПредъявленныйРеализация0.Организация,
	|	НДСПредъявленныйРеализация0.СчетФактура,
	|	НДСПредъявленныйРеализация0.Состояние,
	|	НДСПредъявленныйРеализация0.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0.ВидЦенности,
	|	НДСПредъявленныйРеализация0.СтавкаНДС,
	|	НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйРеализация0.НДСОстаток КАК НДС
	|ПОМЕСТИТЬ ВТНДСЗаблокированныйПоУслугам
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&КонецКвартала,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО) КАК НДСПредъявленныйРеализация0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0.СчетФактура,
	|	НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0.ВидЦенности,
	|	НДСПредъявленныйРеализация0.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(НДСПредъявленный.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(НДСПредъявленный.ДатаОплаты) КАК ДатаОплаты,
	|	МАКСИМУМ(НДСПредъявленный.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|ПОМЕСТИТЬ ДополнительныеСведения
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСЗаблокированныйПоУслугам КАК ВТНДСЗаблокированныйПоУслугам
	|		ПО НДСПредъявленный.СчетФактура = ВТНДСЗаблокированныйПоУслугам.СчетФактура
	|			И НДСПредъявленный.СчетУчетаНДС = ВТНДСЗаблокированныйПоУслугам.СчетУчетаНДС
	|			И НДСПредъявленный.ВидЦенности = ВТНДСЗаблокированныйПоУслугам.ВидЦенности
	|			И НДСПредъявленный.СтавкаНДС = ВТНДСЗаблокированныйПоУслугам.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСЗаблокированныйПоУслугам.Организация,
	|	НДСЗаблокированныйПоУслугам.СчетФактура,
	|	НДСЗаблокированныйПоУслугам.Состояние,
	|	НДСЗаблокированныйПоУслугам.ДокументОтгрузки,
	|	НДСЗаблокированныйПоУслугам.ВидЦенности,
	|	НДСЗаблокированныйПоУслугам.СтавкаНДС,
	|	НДСЗаблокированныйПоУслугам.СчетУчетаНДС,
	|	-НДСЗаблокированныйПоУслугам.СуммаБезНДС КАК СуммаБезНДС,
	|	-НДСЗаблокированныйПоУслугам.НДС КАК НДС,
	|	НДСЗаблокированныйПоУслугам.СуммаБезНДС КАК СуммаБезНДСПриход,
	|	НДСЗаблокированныйПоУслугам.НДС КАК НДСПриход,
	|	ДополнительныеСведения.Поставщик,
	|	ДополнительныеСведения.ДоговорКонтрагента,
	|	ДополнительныеСведения.ДатаОплаты,
	|	ДополнительныеСведения.ИсправленныйСчетФактура
	|ИЗ
	|	ВТНДСЗаблокированныйПоУслугам КАК НДСЗаблокированныйПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.СчетФактура = НДСЗаблокированныйПоУслугам.СчетФактура)
	|			И (ДополнительныеСведения.СчетУчетаНДС = НДСЗаблокированныйПоУслугам.СчетУчетаНДС)
	|			И (ДополнительныеСведения.ВидЦенности = НДСЗаблокированныйПоУслугам.ВидЦенности)
	|			И (ДополнительныеСведения.СтавкаНДС = НДСЗаблокированныйПоУслугам.СтавкаНДС)";
		
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуНДСПредъявленный(РезультатЗапроса)

	ТаблицаДвижений = РезультатЗапроса.Выгрузить();
	ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
	ТаблицаДвижений.Колонки.НДС.Имя = "НДССторно";
	ТаблицаДвижений.Колонки.СуммаБезНДСПриход.Имя = "СуммаБезНДС";
	ТаблицаДвижений.Колонки.НДСПриход.Имя = "НДС";
	
	Возврат ТаблицаДвижений;

КонецФункции

Процедура ОчиститьСубконтоСпособыУчета(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто1.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто2.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто2,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)
	|		КОГДА ХозрасчетныйВидыСубконто3.ВидСубконто ЕСТЬ NULL
	|			ТОГДА NULL
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПустоеСубконто3
	|ПОМЕСТИТЬ ТаблицаПустыхСубконтоПоСчету
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто1
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто2
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто2.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто3
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто3.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&Счета19КВычету)
	|	И ХозрасчетныйВидыСубконто1.НомерСтроки = 1
	|	И ХозрасчетныйВидыСубконто2.НомерСтроки = 2
	|	И ХозрасчетныйВидыСубконто3.НомерСтроки = 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка) КАК СубконтоДт3,
	|	ХозрасчетныйОстатки.Счет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто1
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто2
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		КОГДА ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаПустыхСубконтоПоСчету.ПустоеСубконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
	|	КОНЕЦ КАК СубконтоКт3,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецКвартала,
	|			Счет В (&Счета19КВычету),
	|			&СубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 <> ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПустыхСубконтоПоСчету КАК ТаблицаПустыхСубконтоПоСчету
	|		ПО ХозрасчетныйОстатки.Счет = ТаблицаПустыхСубконтоПоСчету.Счет
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.СчетДт КАК СчетДт,
	|	ТаблицаОстатков.СубконтоДт1 КАК СубконтоДт1,
	|	ТаблицаОстатков.СубконтоДт2 КАК СубконтоДт2,
	|	ТаблицаОстатков.СубконтоДт3 КАК СубконтоДт3,
	|	ТаблицаОстатков.СчетКт КАК СчетКт,
	|	ТаблицаОстатков.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаОстатков.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаОстатков.СубконтоКт3 КАК СубконтоКт3,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	СУММА(ТаблицаОстатков.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СводныеОстатки
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.СчетДт,
	|	ТаблицаОстатков.СубконтоДт1,
	|	ТаблицаОстатков.СубконтоДт2,
	|	ТаблицаОстатков.СчетКт,
	|	ТаблицаОстатков.СубконтоДт3,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.СубконтоКт1,
	|	ТаблицаОстатков.СубконтоКт3,
	|	ТаблицаОстатков.СубконтоКт2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеОстатки.СчетДт КАК СчетДт,
	|	СводныеОстатки.СубконтоДт1 КАК СубконтоДт1,
	|	СводныеОстатки.СубконтоДт2 КАК СубконтоДт2,
	|	СводныеОстатки.СубконтоДт3 КАК СубконтоДт3,
	|	СводныеОстатки.СчетКт КАК СчетКт,
	|	СводныеОстатки.СубконтоКт1 КАК СубконтоКт1,
	|	СводныеОстатки.СубконтоКт2 КАК СубконтоКт2,
	|	СводныеОстатки.СубконтоКт3 КАК СубконтоКт3,
	|	СводныеОстатки.Организация КАК Организация,
	|	СводныеОстатки.Сумма КАК Сумма
	|ИЗ
	|	СводныеОстатки КАК СводныеОстатки
	|ГДЕ
	|	СводныеОстатки.Сумма <> 0";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Попытка
			ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата          = СтруктураПараметров.Период;
			ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
			ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
			// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
			// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.Период;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			Запись.Сумма       = ВыборкаДетальныеЗаписи.Сумма;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.СубконтоДт3);
			
			Запись.СчетКт = ВыборкаДетальныеЗаписи.СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.СубконтоКт3);
			
		КонецЦикла;
		
		Попытка
			
			ОперацияОбъект.Движения.Записать();
			// Запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		ОчиститьСубконтоСпособыУчета(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Результат = ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров)

	Результат = ОстаткиНДСРаздельныйУчет(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура УдалитьСтрокиТаблицы(СтрокиКУдалению, ТаблицаНалогов)
	
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ТаблицаНалогов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	СтрокиКУдалению.Очистить();

КонецПроцедуры

Функция РазрешеноИзменениеОперацииБух(Организация, Дата, СообщенияОбОшибках = Неопределено)

	ОперацияОбъект             = Документы.ОперацияБух.СоздатьДокумент();
	ОперацияОбъект.Дата        = Дата;
	ОперацияОбъект.Организация = Организация;
	
	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ОперацияОбъект, Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		СообщенияОбОшибках = ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
		
	Возврат НЕ Отказ;

КонецФункции

Процедура СформироватьДокументОперацияБух(СтруктураПараметров)

	Попытка
		
		ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
		ОперацияОбъект.Дата          = СтруктураПараметров.Период;
		ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
		ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
		ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
		// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
		// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
		ОперацияОбъект.Записать();
		// Запоминаем созданный документ
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
			СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
		КонецЕсли;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	НаборЗаписей = ОперацияОбъект.Движения[СтруктураПараметров.ИмяРегистра];
	НаборЗаписей.Записывать = Истина;
	
	Если СтруктураПараметров.РезультатЗапроса <> Неопределено Тогда
	
		ВыборкаДетальныеЗаписи = СтруктураПараметров.РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	ИначеЕсли СтруктураПараметров.ТаблицаДвижений <> Неопределено Тогда
		
		Для каждого СтрокаДвижения Из СтруктураПараметров.ТаблицаДвижений Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ОперацияОбъект.Движения.Записать();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

Процедура ПометитьНаУдалениеСозданныеПоОперацииДокументы(
	Организация, Период, РегламентнаяОперация, СообщенияОбОшибках = Неопределено)  Экспорт
	
	Если НЕ РазрешеноИзменениеОперацииБух(Организация, Период - 1, СообщенияОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(Период);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	
	НачатьТранзакцию();
	
	ВводОстатковРУ = Перечисления.РегламентныеОперации.ФормированиеНачальныхОстатковДляВеденияРаздельногоУчетаНДС;
	
	Для каждого СтрокаНабора Из Набор Цикл
		
		ДокументОперации = СтрокаНабора.РегламентныйДокумент;
		
		
		Если ЗначениеЗаполнено(ДокументОперации)
			И (ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ОперацияБух") 
				ИЛИ ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ВводНачальныхОстатков")) Тогда
			
			ДокументОбъект = ДокументОперации.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления	 = Истина;
			Попытка
				ДокументОбъект.Заблокировать();
				Если СтрокаНабора.РегламентнаяОперация = ВводОстатковРУ Тогда
					ДокументОбъект.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
				КонецЕсли;
				Если ТипЗнч(ДокументОперации)		 = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли; 
	КонецЦикла;
	
	Набор.Очистить();
	Набор.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Если СтруктураПараметров.СокращеннаяАналитика Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	&Период КАК Период,
		|	НДСПоПриобретеннымЦенностямОстатки.Организация КАК Организация,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.УчитываетсяВCтоимости)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету)
		|	КОНЕЦ КАК СпособУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС КАК СтавкаНДС,
		|	-НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
		|	-НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК СуммаБезНДС,
		|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
		|	ЗНАЧЕНИЕ(Документ.КорректировкаПоступления.ПустаяСсылка) КАК ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
		|ГДЕ
		|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	&Период КАК Период,
		|	НДСПоПриобретеннымЦенностямОстатки.Организация КАК Организация,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.УчитываетсяВCтоимости)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету)
		|	КОНЕЦ КАК СпособУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС КАК СтавкаНДС,
		|	-НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
		|	-НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК СуммаБезНДС,
		|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС
		|ПОМЕСТИТЬ ОстаткиНДСПриобретенныеЦенности
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
		|ГДЕ
		|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик,
		|	МАКСИМУМ(НДСПредъявленный.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
		|	НДСПредъявленный.СчетФактура КАК СчетФактура,
		|	НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленный.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленный.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ДополнительныеСведения
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиНДСПриобретенныеЦенности КАК ОстаткиНДСПриобретенныеЦенности
		|		ПО НДСПредъявленный.СчетФактура = ОстаткиНДСПриобретенныеЦенности.СчетФактура
		|			И НДСПредъявленный.СчетУчетаНДС = ОстаткиНДСПриобретенныеЦенности.СчетУчетаНДС
		|			И НДСПредъявленный.ВидЦенности = ОстаткиНДСПриобретенныеЦенности.ВидЦенности
		|			И НДСПредъявленный.СтавкаНДС = ОстаткиНДСПриобретенныеЦенности.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленный.ВидЦенности,
		|	НДСПредъявленный.СтавкаНДС,
		|	НДСПредъявленный.СчетФактура,
		|	НДСПредъявленный.СчетУчетаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНДСПриобретенныеЦенности.Период КАК Период,
		|	ОстаткиНДСПриобретенныеЦенности.Организация КАК Организация,
		|	ОстаткиНДСПриобретенныеЦенности.СчетУчета КАК СчетУчета,
		|	ОстаткиНДСПриобретенныеЦенности.Номенклатура КАК Номенклатура,
		|	ОстаткиНДСПриобретенныеЦенности.Склад КАК Склад,
		|	ОстаткиНДСПриобретенныеЦенности.Партия КАК Партия,
		|	ОстаткиНДСПриобретенныеЦенности.СчетФактура КАК СчетФактура,
		|	ОстаткиНДСПриобретенныеЦенности.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|	ОстаткиНДСПриобретенныеЦенности.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ОстаткиНДСПриобретенныеЦенности.ВидЦенности КАК ВидЦенности,
		|	ОстаткиНДСПриобретенныеЦенности.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ОстаткиНДСПриобретенныеЦенности.СтавкаНДС КАК СтавкаНДС,
		|	ОстаткиНДСПриобретенныеЦенности.Количество КАК Количество,
		|	ОстаткиНДСПриобретенныеЦенности.Стоимость КАК Стоимость,
		|	ОстаткиНДСПриобретенныеЦенности.СуммаБезНДС КАК СуммаБезНДС,
		|	ОстаткиНДСПриобретенныеЦенности.НДС КАК НДС,
		|	ДополнительныеСведения.Поставщик КАК Поставщик,
		|	ДополнительныеСведения.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
		|ИЗ
		|	ОстаткиНДСПриобретенныеЦенности КАК ОстаткиНДСПриобретенныеЦенности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ОстаткиНДСПриобретенныеЦенности.СчетФактура = ДополнительныеСведения.СчетФактура
		|			И ОстаткиНДСПриобретенныеЦенности.СчетУчетаНДС = ДополнительныеСведения.СчетУчетаНДС
		|			И ОстаткиНДСПриобретенныеЦенности.ВидЦенности = ДополнительныеСведения.ВидЦенности
		|			И ОстаткиНДСПриобретенныеЦенности.СтавкаНДС = ДополнительныеСведения.СтавкаНДС";
	КонецЕсли;
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;

КонецФункции

Функция ОстаткиНДСРаздельныйУчет(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&Период КАК Период,
	|	НДСРаздельныйУчетОстатки.Организация,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаНДС,
	|	НДСРаздельныйУчетОстатки.Партия,
	|	НДСРаздельныйУчетОстатки.СпособУчетаНДС,
	|	-НДСРаздельныйУчетОстатки.КоличествоОстаток КАК Количество,
	|	-НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	-НДСРаздельныйУчетОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСРаздельныйУчетОстатки
	|ГДЕ
	|	(НДСРаздельныйУчетОстатки.КоличествоОстаток <> 0
	|			ИЛИ НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСРаздельныйУчетОстатки.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров)
	
	ПартионныйУчет = 
		УчетнаяПолитика.СпособОценкиМПЗ(СтруктураПараметров.Организация, СтруктураПараметров.Период) =
			Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = СтруктураПараметров.РезультатЗапроса.Выгрузить();

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение");
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));	
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));	

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] =
					 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = 
			Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
		СтрокаТаблицы.Количество  = - СтрокаТаблицы.Количество;
		СтрокаТаблицы.НДС 		  = - СтрокаТаблицы.НДС;
				
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");
	ДанныеДвижений.Колонки.Удалить("Стоимость");
	ДанныеДвижений.Колонки.Удалить("НДСВключенВСтоимость");
	
	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции	

Функция КорректныйПорядокУплаты(ПорядокУплаты)
	
	Если ПорядокУплаты <> Неопределено
		И ТипЗнч(ПорядокУплаты) = Тип("ТаблицаЗначений")
		И ПорядокУплаты.Количество() = 3 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПервыйПлатежДекларацииЗа1кв2020(СрокиОплатыПеренесены, Срок)
	
	ЭтоПеренесенныйПлатеж = Ложь;
	
	// В мае 2020 года в соответствии с указом президента РФ о нерабочих днях 2 платежа.
	// Считаем платеж до 12 мая 2020 года "перенесенным" - первым платежом по декларации за 1 квартал.
	Если СрокиОплатыПеренесены 
		И НачалоДня(Срок) >= Дата(2020, 4, 1)
		И НачалоДня(Срок) <= Дата(2020, 5, 12) Тогда
		ЭтоПеренесенныйПлатеж = Истина;
	КонецЕсли;
	
	Возврат ЭтоПеренесенныйПлатеж;
	
КонецФункции

Функция ЭтоВторойПлатежДекларацииЗа1кв2020(СрокиОплатыПеренесены, Срок)
	
	ЭтоВторойПлатежДекларацииЗа1кв2020 = Ложь;
	
	// В мае 2020 года в соответствии с указом президента РФ о нерабочих днях 2 платежа.
	// Считаем платеж после 12 мая 2020 года вторым платежом по декларации за 1 квартал.
	Если СрокиОплатыПеренесены 
		И НачалоДня(Срок) > Дата(2020, 5, 12)
		И НачалоДня(Срок) <= Дата(2020, 5, 25) Тогда
		ЭтоВторойПлатежДекларацииЗа1кв2020 = Истина;
	КонецЕсли;
	
	Возврат ЭтоВторойПлатежДекларацииЗа1кв2020;
	
КонецФункции

Процедура СобратьДанныеНалоговогоАгента(ТаблицаНалоговыйАгент, ПараметрыЗадачи)
	
	СчетУчета = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("ДатаДокумента",              ПараметрыЗадачи.Срок);
	РеквизитыДокумента.Вставить("Организация",                ПараметрыЗадачи.Организация);
	РеквизитыДокумента.Вставить("ТекущийДокумент",            Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПустаяСсылка());
	РеквизитыДокумента.Вставить("СчетУчета",                  СчетУчета);
	РеквизитыДокумента.Вставить("ОграничитьПериодОсмотра",    Ложь);
	
	Задолженность = УчетНДСБП.ЗадолженностьНалоговогоАгентаПоНДС(РеквизитыДокумента);
	
	Если Задолженность.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из Задолженность Цикл
			НоваяСтрока = ТаблицаНалоговыйАгент.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СчетУчета = СчетУчета;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьДанныеТаможенныйСоюз(ТаблицаТаможенныйСоюз, ПараметрыЗадачи)
	
	СчетУчета = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате;
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("ДатаДокумента",              ПараметрыЗадачи.Срок);
	РеквизитыДокумента.Вставить("Организация",                ПараметрыЗадачи.Организация);
	РеквизитыДокумента.Вставить("ТекущийДокумент",            Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПустаяСсылка());
	РеквизитыДокумента.Вставить("СчетУчета",                  );
	РеквизитыДокумента.Вставить("ОграничитьПериодОсмотра",    Ложь);
	
	Задолженность = УчетНДСБП.ЗадолженностьНалоговогоАгентаПоНДС(РеквизитыДокумента);
	
	Если Задолженность.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из Задолженность Цикл
			НоваяСтрока = ТаблицаТаможенныйСоюз.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СчетУчета = СчетУчета;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьДанныеНалоговогоАгентаПоОтдельнымВидамТоваров(ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров, ПараметрыЗадачи)
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("ДатаДокумента", ПараметрыЗадачи.Срок);
	РеквизитыДокумента.Вставить("Организация",   ПараметрыЗадачи.Организация);
	
	ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров = УчетНДСБП.ЗадолженностьНалоговогоАгентаПоНДСПоОтдельнымВидамТоваров(РеквизитыДокумента);
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров Цикл
		СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.Сумма, 0, РежимОкругления.Окр15как10);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область РасшифровкаНеПоддерживаемойФункциональности

Функция РезультатыЗапросовРучныеКорректировки(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупок.Ссылка КАК Ссылка,
	|	ФормированиеЗаписейКнигиПокупок.Представление КАК Представление
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Проведен
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПокупок.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПродаж.Ссылка,
	|	ФормированиеЗаписейКнигиПродаж.Представление
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродаж.Проведен
	|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПродаж.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Представление
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураПолученный.Организация = ДанныеПервичныхДокументов.Организация
	|			И СчетФактураПолученный.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И СчетФактураПолученный.РучнаяКорректировка
	|	И СчетФактураПолученный.Организация = &Организация
	|	И ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Представление
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураВыданный.Организация = ДанныеПервичныхДокументов.Организация
	|			И СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.РучнаяКорректировка
	|	И СчетФактураВыданный.Организация = &Организация
	|	И ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Параметры.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Параметры.Период));

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаОбособленныеПодразделения(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Параметры.Организация);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатыЗапросовИспользуютсяВвозТоваровИзЕАЭС(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
	|	ЗаявлениеОВвозеТоваров.Представление КАК Представление
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Организация = &Организация
	|	И ЗаявлениеОВвозеТоваров.Проведен";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатыЗапросовИспользуетсяИмпортТоваров(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка КАК Ссылка,
	|	ГТДИмпорт.Представление КАК Представление
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Организация = &Организация
	|	И ГТДИмпорт.Проведен";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатыЗапросовИспользуетсяЭкспортТоваров(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСРеализация0.Регистратор КАК Регистратор,
	|	НДСРеализация0.Регистратор КАК Представление
	|ИЗ
	|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
	|ГДЕ
	|	НДСРеализация0.Организация = &Организация
	|	И НДСРеализация0.Активность";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатыЗапросовИспользуетсяНачислениеНДСпоСМР(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.Регистратор КАК Представление
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|	И ХозрасчетныйСубконто.Вид = &ВидСубконто
	|	И ХозрасчетныйСубконто.Значение = &СпособСтроительства";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	Запрос.УстановитьПараметр("СпособСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Представление КАК Представление
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС
	|	И ДоговорыКонтрагентов.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаКомиссияПоПродаже(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Представление КАК Представление
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаКомиссияПоЗакупке(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Представление КАК Представление
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьПлатежиДоЕНС(ДанныеДекларации, ОсталосьОплатить, ПараметрыЗадачи, Платежи, Показатели, СрокиОплатыПеренесены)
	
	ОплаченоРанее = 0;
	// Получим документы оплаты по налогу.
	// Исчисленный по итогам квартала НДС нужно уплачивать ежемесячно тремя равными долями.
	ДокументыУплаты = ДокументыУплатыНалога(ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия);
	
	Для НомерПлатежа = 1 По 3 Цикл 
		ЗаполнитьЗначенияСвойств(Платежи[НомерПлатежа-1], ДанныеДекларации.Платежи[НомерПлатежа-1]);
		
		// Свяжем платежи с оплатой.
		// В общем случае это одно платежное поручение, но может быть и несколько, например,
		// в случае корректировки декларации и увеличения суммы налога к уплате.
		Для Каждого Документ Из ДокументыУплаты Цикл
			
			ЭтоПервыйПлатежДекларацииЗа1кв2020 = ЭтоПервыйПлатежДекларацииЗа1кв2020(СрокиОплатыПеренесены, Документ.Дата);
			ЭтоВторойПлатежДекларацииЗа1кв2020 = ЭтоВторойПлатежДекларацииЗа1кв2020(СрокиОплатыПеренесены, Документ.Дата);
			
			ДобавитьДокументВПлатежи = Ложь;
			
			Если НачалоМесяца(Документ.Дата) = НачалоМесяца(Платежи[НомерПлатежа-1].Дата) Тогда
				
				Если ЭтоПервыйПлатежДекларацииЗа1кв2020 Тогда
					ДобавитьДокументВПлатежи = НомерПлатежа = 1;
				ИначеЕсли ЭтоВторойПлатежДекларацииЗа1кв2020 Тогда
					ДобавитьДокументВПлатежи = НомерПлатежа = 2;
				Иначе
					ДобавитьДокументВПлатежи = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// Дополнительно привяжем к первому платежу все платежи, которые оплачены раньше или позднее сроков оплаты.
			Если НомерПлатежа = 1 Тогда
				Если НачалоМесяца(Документ.Дата) < НачалоМесяца(Платежи[0].Дата) 
					Или НачалоМесяца(Документ.Дата) > НачалоМесяца(Платежи[2].Дата) Тогда
					ДобавитьДокументВПлатежи = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьДокументВПлатежи Тогда
				Платежи[НомерПлатежа-1].ПлатежныеПоручения.Добавить(Документ.Ссылка);
				Платежи[НомерПлатежа-1].Состояния.Добавить(Документ.Состояние);
			КонецЕсли;
		КонецЦикла;
		
		Если Платежи[НомерПлатежа-1].ПлатежныеПоручения.Количество() > 0 Тогда
			Если Не ПараметрыЗадачи.ЭтоЗадачаОплаты Тогда
				// Считаем очередным платеж, который следует за оплаченным.
				ИндексОчередногоПлатежа = ?(НомерПлатежа < 3, НомерПлатежа, НомерПлатежа-1);
			КонецЕсли;
			ПредставлениеПлатежногоПоручения = ПредставлениеПлатежногоДокумента(Платежи[НомерПлатежа-1].ПлатежныеПоручения,
			Платежи[НомерПлатежа-1].Состояния);
			Платежи[НомерПлатежа-1].ПредставлениеПлатежногоПоручения = ПредставлениеПлатежногоПоручения.Наименование;
			Платежи[НомерПлатежа-1].СуммаПлатежногоПоручения = ПредставлениеПлатежногоПоручения.Сумма;
			ОплаченоРанее = ОплаченоРанее + ПредставлениеПлатежногоПоручения.Сумма;
			// Считаем, что в случае нескольких платежных поручений на уплату налога за один месяц их статусы должны совпадать.
			Платежи[НомерПлатежа-1].Оплачено = ПредставлениеПлатежногоПоручения.Оплачено;
		КонецЕсли;
		Показатели.ОплаченоРанее = ОплаченоРанее;
		ОсталосьОплатить = Показатели.НалогКУплате - ОплаченоРанее;
		Показатели.ОсталосьОплатить = ?(ОсталосьОплатить > 0, ОсталосьОплатить, 0);
	КонецЦикла;

КонецПроцедуры

Функция ЗачтенныйЕНП(Организация, Период, ВесьКвартал = Истина)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериодаОбзора", НачалоКвартала(Период));
	Если ВесьКвартал Тогда
		Запрос.УстановитьПараметр("КонецПериодаОбзора",  КонецКвартала(Период));
	Иначе
		Запрос.УстановитьПараметр("КонецПериодаОбзора",  НачалоМесяца(Период));
	КонецЕсли;
	СчетаУчетаНДС = Новый массив;
	СчетаУчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДС);                      // Кт 68.02
	СчетаУчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);      // Кт 68.32
	СчетаУчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате); // Кт 68.42
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетаУчетаНДС); 

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма) КАК СуммаОплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент КАК Регистратор,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты КАК СрокУплаты
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &НачалоПериодаОбзора
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период <= &КонецПериодаОбзора
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета В (&СчетНачисленияНалога)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация = &Организация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты 
	|УПОРЯДОЧИТЬ ПО
	|	СрокУплаты УБЫВ";
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	ЗачтеннаяСумма = 0;
	ИндексОчередногоПлатежа = 0;
	
	Если Платежи.Количество() > 0 Тогда 
		ЗачтеннаяСумма = Платежи.Итог("СуммаОплаты");
		ИндексОчередногоПлатежа = Месяц(Платежи[0].СрокУплаты) % 3;
	КонецЕсли;
	
	ЗачтенныйЕНП = Новый Структура("ЗачтеннаяСумма, ИндексОчередногоПлатежа", ЗачтеннаяСумма, ИндексОчередногоПлатежа);
	
	Возврат ЗачтенныйЕНП;
	
КонецФункции

#КонецОбласти

#КонецЕсли