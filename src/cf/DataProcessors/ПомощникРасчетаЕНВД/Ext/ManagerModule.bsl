#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Срок",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплаты(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список документов на уплату ЕНВД.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ПериодУплаты - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплаты(Организация, ПериодУплаты, ПравилоУплаты) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.Правило = ПравилоУплаты;
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕНВД);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоКвартала(ПериодУплаты);
	КонецПериода  = КонецКвартала(ПериодУплаты);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, уплачивались ли страховые взносы за сотрудников данной организацией
// хотя бы один раз за указанный период.
//
Функция СтраховыеВзносыЗаСотрудниковНеУплачивались(Организация, НачалоПериода, КонецПериода) Экспорт
	
	УплачиваютсяВзносыЗаСотрудников = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода);
	
	Если Не УплачиваютсяВзносыЗаСотрудников Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетаУчетаВзносов = УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовЗаСотрудниковУменьшающихНалог();
	
	Возврат СтраховыеВзносыНеУплачивались(Организация, НачалоПериода, КонецПериода, СчетаУчетаВзносов);
	
КонецФункции

// Проверяет, уплачивались ли страховые взносы за себя индивидуальным предпринимателем
// хотя бы один раз за указанный период.
//
Функция СтраховыеВзносыИПЗаСебяНеУплачивались(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетаУчетаВзносов = УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовИПЗаСебяУменьшающихНалог();
	
	Возврат СтраховыеВзносыНеУплачивались(Организация, НачалоПериода, КонецПериода, СчетаУчетаВзносов);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтатусУплаты(ПараметрыЗадачи)
	
	Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
		Возврат ПараметрыЗадачи.РучнойСтатус;
	КонецЕсли;
	
	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Правило       = ПараметрыЗадачи.Правило;
	
	КонтекстРасчета = УчетЕНВД.НовыйКонтекстРасчетаНалога(Организация, ПериодСобытия);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПоказателиВидовДеятельности = УчетЕНВД.ПоказателиВидовДеятельности(ПериодСобытия, Организация);
	
	Если ПоказателиВидовДеятельности = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	РасчетНалога = УчетЕНВД.ПолучитьРасчетНалога(КонтекстРасчета, ПоказателиВидовДеятельности);
	
	СуммаНалогаКУплате = РасчетНалога.Итог("СуммаНалогаКУплате");
	
	ДокументыУплаты = ДокументыУплаты(Организация, ПериодСобытия, Правило);
	Уплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ДокументыУплаты);
	
	Если Уплачено > 0 И Уплачено >= СуммаНалогаКУплате Тогда
		Возврат НСтр("ru='Оплачено'");
	КонецЕсли;
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.СтатусОплаты(ДокументыУплаты.ВыгрузитьКолонку("Состояние"));
	
КонецФункции

Функция СтраховыеВзносыНеУплачивались(Организация, НачалоПериода, КонецПериода, СчетаУчетаВзносов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",          КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СчетаУчетаВзносов",     СчетаУчетаВзносов);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина;
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаДенежныхСредств, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьОплатаВзносов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Активность
	|				И Организация = &Организация
	|				И СчетДт В (&СчетаУчетаВзносов)
	|				И СчетКт В (&СчетаУчетаДенежныхСредств)
	|				И ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)
	|				И СубконтоДт1 В (&ВидыНалоговыхПлатежей),
	|			,
	|			1) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОстатокРасчетов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаУчетаВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Возврат Результаты[0].Пустой()   // Взносы еще не уплачивались.
		И Не Результаты[1].Пустой(); // Есть обязательства по взносам на начало периода.
	
КонецФункции

#КонецОбласти

#КонецЕсли