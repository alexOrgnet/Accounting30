
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив Из СправочникСсылка.Организации - ссылки на организации, по которым нужно распечатать документы перехода;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//
// Выходные параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы,
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати        - СписокЗначений  - значение - СправочникСсылка.Организации, ссылка на объект;
//                                            представление - имя области в которой был выведен объект;
//  ПараметрыВывода      - Структура      - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ИмяПечатнойФормы = "Реестр";
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяПечатнойФормы) Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, ИмяПечатнойФормы, НСтр("ru = 'Реестр'"), ПечатьРеестр(МассивОбъектов, ОбъектыПечати), , // Картинка

			ИмяМакетаРеестр(), НСтр("ru = 'Реестр НМА при переходе на ФСБУ 14'"));

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записать данные, необходимые для выполнения регламентной операции "Переход на ФСБУ 14".
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  СведенияОНМА - ТаблицаЗначений
//  СтоимостьАктивовОпределяетсяПоДаннымУчета - Булево
//
Процедура ЗаписатьДанныеДляПерехода(Организация, СведенияОНМА, СтоимостьАктивовОпределяетсяПоДаннымУчета) Экспорт
	
	ПериодПереходаНаФСБУ14 =  УчетНМА.НачалоОбязательногоПримененияФСБУ14();
	
	Для Каждого СтрокаСведений Из СведенияОНМА Цикл
		НематериальныйАктивОбъект = СтрокаСведений.НематериальныйАктив.ПолучитьОбъект();
		НематериальныйАктивОбъект.ВидНематериальногоАктива = СтрокаСведений.ВидНМА;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НематериальныйАктивОбъект, Истина, Ложь);
	КонецЦикла;
	
	ОперацияПерехода = ВыполненнаяРегламентнаяОперацияПереходаНаФСБУ14(Организация, ПериодПереходаНаФСБУ14 - 1);
	Если ЗначениеЗаполнено(ОперацияПерехода) Тогда
		
		РегОперацияОбъект = ОперацияПерехода.ПолучитьОбъект();
		
		ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
			РегОперацияОбъект,
			Ложь,
			РежимЗаписиДокумента.Запись,
			РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
	// Запись в регистры, содержащих информацию о переходе, и действия, связанные с отменой актуальности рег. операции,
	// должны выполняться в одной транзакции.
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
			Организация,
			ПериодПереходаНаФСБУ14 - 1,
			ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ14),
			Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ14,
			Истина);

	РегистрыСведений.СпособПереходаНаФСБУ14.ЗаписатьСпособОпределенияСтоимости(Организация, СтоимостьАктивовОпределяетсяПоДаннымУчета);
	
	НаборЗаписей = РегистрыСведений.НМАПриПереходеНаФСБУ14.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	СчетаКапитальныхВложений = СчетаУчетаНМА().СчетаКапитальныхВложений;
	Для Каждого СтрокаСведений Из СведенияОНМА Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаСведений);
		Запись.ПозицияСписка = СтрокаСведений.НомерСтроки;
		Запись.Организация = Организация;
		Запись.СрокПолезногоИспользования = СтрокаСведений.СрокПолезногоИспользования
			+ Макс(УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(СтрокаСведений.ДатаПринятияКУчету, ПериодПереходаНаФСБУ14 - 1), 0);
			
		Если СтрокаСведений.НеопределенныйСрокПолезногоИспользования
			Или СчетаКапитальныхВложений.Найти(СтрокаСведений.СчетУчета) <> Неопределено Тогда
			Запись.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПустаяСсылка();
			Запись.СрокПолезногоИспользования = 0;
			Запись.ОбъемПродукцииРабот = 0;
			Запись.Коэффициент = 0;
			Запись.ЛиквидационнаяСтоимость = 0;
		ИначеЕсли Запись.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
			Запись.ОбъемПродукцииРабот = 0;
			Запись.Коэффициент = 0
		ИначеЕсли Запись.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			Запись.ОбъемПродукцииРабот = 0;
		ИначеЕсли Запись.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
			Запись.ОбъемПродукцииРабот = СтрокаСведений.КоличествоВыработки + СтрокаСведений.ОбъемПродукцииРабот;
			Запись.СрокПолезногоИспользования = 0;
		КонецЕсли;
		
		Если СтоимостьАктивовОпределяетсяПоДаннымУчета Тогда
			Запись.ПервоначальнаяСтоимость = 0;
			Запись.Амортизация = 0;
			Запись.Обесценение = 0;
			Запись.ОбесценениеДоступноеДляВосстановления = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция СчетаУчетаНМА() Экспорт

	Запрос = Новый Запрос;

	СчетаНМА = Новый Массив;
	СчетаНМА.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаНМА.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СчетаНМА.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);

	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоРасходыНаНИОКР", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	Запрос.УстановитьПараметр("СчетаНМА", СчетаНМА);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК СчетУчета,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконтоНМА,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСчетАмортизации,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСчетКапитальныхВложений
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = &СубконтоНМА
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаНМА)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка,
	|	ХозрасчетныйВидыСубконто.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = &СубконтоРасходыНаНИОКР
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаНМА)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках";

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();

	СчетаСтоимости = Новый Массив;
	СчетаАмортизации = Новый Массив;
	СчетаКапитальныхВложений = Новый Массив;
	Пока ВыборкаСчетов.Следующий() Цикл
		Если ВыборкаСчетов.ЭтоСчетАмортизации Тогда
			СчетаАмортизации.Добавить(ВыборкаСчетов.СчетУчета);
		ИначеЕсли ВыборкаСчетов.ЭтоСчетКапитальныхВложений Тогда
			СчетаКапитальныхВложений.Добавить(ВыборкаСчетов.СчетУчета);
		Иначе
			СчетаСтоимости.Добавить(ВыборкаСчетов.СчетУчета);
		КонецЕсли;
	КонецЦикла;

	СчетаУчетаНМА = Новый Структура;
	СчетаУчетаНМА.Вставить("СчетаСтоимости", СчетаСтоимости);
	СчетаУчетаНМА.Вставить("СчетаКапитальныхВложений", СчетаКапитальныхВложений);
	СчетаУчетаНМА.Вставить("СчетаАмортизации", СчетаАмортизации);
	
	Возврат СчетаУчетаНМА;

КонецФункции

Функция СписокНМА(Организация, Период, ЗаполнитьПоДаннымУчета = Ложь) Экспорт
	
	СтоимостьАктивовОпределяетсяПоДаннымУчета = РегистрыСведений.СпособПереходаНаФСБУ14.СтоимостьОпределяетсяПоДаннымУчета(Организация);
	
	СчетаУчетаНМА = СчетаУчетаНМА();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаСтоимости", СчетаУчетаНМА.СчетаСтоимости);
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаУчетаНМА.СчетаАмортизации);
	Запрос.УстановитьПараметр("СчетаКапитальныхВложений", СчетаУчетаНМА.СчетаКапитальныхВложений);
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоРасходыНаНИОКР", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецГода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Остатки.СчетУчетаНМА) КАК СчетУчетаНМА,
	|	Остатки.НематериальныйАктив КАК НематериальныйАктив,
	|	СУММА(Остатки.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(Остатки.Амортизация) КАК Амортизация,
	|	Остатки.ЭтоСчетКапитальныхВложений КАК ЭтоСчетКапитальныхВложений
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ХозрасчетныйОстатки.Счет
	|		КОНЕЦ КАК СчетУчетаНМА,
	|		ХозрасчетныйОстатки.Субконто1 КАК НематериальныйАктив,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаСтоимости, &СчетаКапитальныхВложений)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПервоначальнаяСтоимость,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Амортизация,
	|		ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений) КАК ЭтоСчетКапитальныхВложений
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаПериода, Счет В (&СчетаСтоимости, &СчетаКапитальныхВложений, &СчетаАмортизации), &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ХозрасчетныйОстатки.Счет
	|		КОНЕЦ,
	|		ХозрасчетныйОстатки.Субконто1,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаСтоимости, &СчетаКапитальныхВложений)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаПериода, Счет В (&СчетаСтоимости, &СчетаКапитальныхВложений, &СчетаАмортизации), &СубконтоРасходыНаНИОКР, Организация = &Организация) КАК ХозрасчетныйОстатки) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.НематериальныйАктив,
	|	Остатки.ЭтоСчетКапитальныхВложений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизацийСрезПоследних.Период) КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&КонецГода,
	|			НЕ Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Остатки.НематериальныйАктив
	|					ИЗ
	|						Остатки КАК Остатки)
	|				И Организация = &Организация
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)) КАК СостоянияНМАОрганизацийСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент КАК Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации - ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК ОстатокОбъемаПродукцииРабот,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК ОбщийСрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК КоличествоВыработки,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетАмортизации
	|ПОМЕСТИТЬ ЭлементыАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецГода,
	|			НЕ Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Остатки.НематериальныйАктив
	|					ИЗ
	|						Остатки КАК Остатки)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаНМА.Обороты(
	|				,
	|				&КонецГода,
	|				,
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							Остатки.НематериальныйАктив
	|						ИЗ
	|							Остатки КАК Остатки)) КАК ВыработкаНМАОбороты
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|				&КонецГода,
	|				НЕ Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|					И Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							Остатки.НематериальныйАктив
	|						ИЗ
	|							Остатки КАК Остатки)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СпособыОтраженияАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецГода,
	|			НЕ Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Остатки.НематериальныйАктив
	|					ИЗ
	|						Остатки КАК Остатки)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.СчетУчетаНМА КАК СчетУчета,
	|	Остатки.НематериальныйАктив КАК НематериальныйАктив,
	|	Остатки.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	Остатки.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьДоПерехода,
	|	Остатки.Амортизация КАК Амортизация,
	|	Остатки.Амортизация КАК АмортизацияДоПерехода,
	|	Остатки.ЭтоСчетКапитальныхВложений КАК ЭтоСчетКапитальныхВложений,
	|	НематериальныеАктивы.ВидНематериальногоАктива КАК ВидНМА,
	|	ЕСТЬNULL(СостоянияНМАОрганизаций.ДатаПринятияКУчету, &КонецГода) КАК ДатаПринятияКУчету,
	|	ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.Подтверждено) КАК ДействиеПриПереходе,
	|	ИСТИНА КАК СуществующееНМА,
	|	1 КАК КартинкаСтатус,
	|	ЕСТЬNULL(НЕ ЭлементыАмортизации.НачислятьАмортизацию, ЛОЖЬ) КАК НеопределенныйСрокПолезногоИспользования,
	|	ЕСТЬNULL(НЕ ЭлементыАмортизации.НачислятьАмортизацию, ЛОЖЬ) КАК НеопределенныйСрокПолезногоИспользованияДоПерехода,
	|	ЕСТЬNULL(ЭлементыАмортизации.ОбщийСрокПолезногоИспользования, 0) КАК ОбщийСрокПолезногоИспользования,
	|	ЕСТЬNULL(ЭлементыАмортизации.ОстатокОбъемаПродукцииРабот, 0) КАК ОбъемПродукцииРабот,
	|	ЭлементыАмортизации.ОстатокОбъемаПродукцииРабот КАК ОбъемПродукцииРаботДоПерехода,
	|	ЭлементыАмортизации.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЭлементыАмортизации.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииДоПерехода,
	|	ЭлементыАмортизации.Коэффициент КАК Коэффициент,
	|	ЭлементыАмортизации.Коэффициент КАК КоэффициентДоПерехода,
	|	СпособыОтраженияАмортизации.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ЭлементыАмортизации.СчетАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ЭлементыАмортизации.КоличествоВыработки, 0) КАК КоличествоВыработки
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ПО Остатки.НематериальныйАктив = НематериальныеАктивы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО Остатки.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО Остатки.НематериальныйАктив = ЭлементыАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияАмортизации КАК СпособыОтраженияАмортизации
	|		ПО Остатки.НематериальныйАктив = СпособыОтраженияАмортизации.НематериальныйАктив
	|ГДЕ
	|	Остатки.ПервоначальнаяСтоимость >= 0";

	СписокНМА = Запрос.Выполнить().Выгрузить();
	СписокНМА.Колонки.Добавить("СрокПолезногоИспользования");
	СписокНМА.Колонки.Добавить("СрокПолезногоИспользованияДоПерехода");

	Для Каждого СведениеНМА Из СписокНМА Цикл
		СведениеНМА.СрокПолезногоИспользования = Макс(СведениеНМА.ОбщийСрокПолезногоИспользования
			- УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
			СведениеНМА.ДатаПринятияКУчету,
			КонецМесяца(Период)), 0);
		СведениеНМА.СрокПолезногоИспользованияДоПерехода = СведениеНМА.СрокПолезногоИспользования;
	КонецЦикла;
		
	Если ЕстьСохраненныеДанные(Организация) И Не ЗаполнитьПоДаннымУчета Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокНМА.ПозицияСписка КАК ПозицияСписка,
		|	СписокНМА.ДействиеПриПереходе КАК ДействиеПриПереходе,
		|	СписокНМА.СчетУчета КАК СчетУчета,
		|	СписокНМА.НематериальныйАктив КАК НематериальныйАктив,
		|	СписокНМА.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
		|	СписокНМА.СчетСписания КАК СчетСписания,
		|	СписокНМА.ПодразделениеСписания КАК ПодразделениеСписания,
		|	СписокНМА.СубконтоСписания1 КАК СубконтоСписания1,
		|	СписокНМА.СубконтоСписания2 КАК СубконтоСписания2,
		|	СписокНМА.СубконтоСписания3 КАК СубконтоСписания3,
		|	СписокНМА.НеопределенныйСрокПолезногоИспользования КАК НеопределенныйСрокПолезногоИспользования,
		|	СписокНМА.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	СписокНМА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	СписокНМА.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	СписокНМА.Коэффициент КАК Коэффициент,
		|	СписокНМА.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	СписокНМА.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
		|	СписокНМА.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	СписокНМА.Амортизация КАК Амортизация,
		|	СписокНМА.Обесценение КАК Обесценение,
		|	СписокНМА.ОбесценениеДоступноеДляВосстановления КАК ОбесценениеДоступноеДляВосстановления,
		|	СписокНМА.СчетАмортизации КАК СчетАмортизации
		|ПОМЕСТИТЬ СохраненныеДанныеПерехода
		|ИЗ
		|	РегистрСведений.НМАПриПереходеНаФСБУ14 КАК СписокНМА
		|ГДЕ
		|	СписокНМА.Организация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетСписания,
		|	ПодразделениеСписания,
		|	СубконтоСписания1,
		|	СубконтоСписания2,
		|	СубконтоСписания3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.УчетПоПодразделениям
		|			ТОГДА ХозрасчетныйОстатки.Подразделение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто1.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
		|	КОНЕЦ КАК Субконто1,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто2.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
		|	КОНЕЦ КАК Субконто2,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто3.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
		|	КОНЕЦ КАК Субконто3
		|ПОМЕСТИТЬ ОстаткиПереклассицированныхНМА
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаПериода,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СохраненныеДанные.СчетСписания
		|				ИЗ
		|					СохраненныеДанныеПерехода КАК СохраненныеДанные
		|				ГДЕ
		|					СохраненныеДанные.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто1
		|		ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйВидыСубконто1.Ссылка
		|			И (ХозрасчетныйВидыСубконто1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто2
		|		ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйВидыСубконто2.Ссылка
		|			И (ХозрасчетныйВидыСубконто2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто3
		|		ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйВидыСубконто3.Ссылка
		|			И (ХозрасчетныйВидыСубконто3.НомерСтроки = 3)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто2.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто1.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйВидыСубконто3.Ссылка ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.УчетПоПодразделениям
		|			ТОГДА ХозрасчетныйОстатки.Подразделение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СохраненныеДанныеПерехода.ПозицияСписка КАК ПозицияСписка,
		|	СохраненныеДанныеПерехода.ДействиеПриПереходе КАК ДействиеПриПереходе,
		|	СохраненныеДанныеПерехода.СчетУчета КАК СчетУчета,
		|	СохраненныеДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
		|	СохраненныеДанныеПерехода.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
		|	СохраненныеДанныеПерехода.СчетСписания КАК СчетСписания,
		|	СохраненныеДанныеПерехода.ПодразделениеСписания КАК ПодразделениеСписания,
		|	СохраненныеДанныеПерехода.СубконтоСписания1 КАК СубконтоСписания1,
		|	СохраненныеДанныеПерехода.СубконтоСписания2 КАК СубконтоСписания2,
		|	СохраненныеДанныеПерехода.СубконтоСписания3 КАК СубконтоСписания3,
		|	СохраненныеДанныеПерехода.НеопределенныйСрокПолезногоИспользования КАК НеопределенныйСрокПолезногоИспользования,
		|	СохраненныеДанныеПерехода.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	СохраненныеДанныеПерехода.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	СохраненныеДанныеПерехода.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	СохраненныеДанныеПерехода.Коэффициент КАК Коэффициент,
		|	СохраненныеДанныеПерехода.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	СохраненныеДанныеПерехода.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
		|	СохраненныеДанныеПерехода.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	СохраненныеДанныеПерехода.Амортизация КАК Амортизация,
		|	СохраненныеДанныеПерехода.Обесценение КАК Обесценение,
		|	СохраненныеДанныеПерехода.ОбесценениеДоступноеДляВосстановления КАК ОбесценениеДоступноеДляВосстановления,
		|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК ПервоначальнаяСтоимостьДоПерехода,
		|	СохраненныеДанныеПерехода.ДействиеПриПереходе.Порядок КАК КартинкаСтатус,
		|	СохраненныеДанныеПерехода.ДействиеПриПереходе.Порядок > 0 КАК СуществующееНМА,
		|	СохраненныеДанныеПерехода.НематериальныйАктив.ВидНематериальногоАктива КАК ВидНМА,
		|	СохраненныеДанныеПерехода.СчетАмортизации КАК СчетАмортизации,
		|	0 КАК КоличествоВыработки
		|ИЗ
		|	СохраненныеДанныеПерехода КАК СохраненныеДанныеПерехода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПереклассицированныхНМА КАК Остатки
		|		ПО СохраненныеДанныеПерехода.СчетСписания = Остатки.Счет
		|			И СохраненныеДанныеПерехода.ПодразделениеСписания = Остатки.Подразделение
		|			И СохраненныеДанныеПерехода.СубконтоСписания1 = Остатки.Субконто1
		|			И СохраненныеДанныеПерехода.СубконтоСписания2 = Остатки.Субконто2
		|			И СохраненныеДанныеПерехода.СубконтоСписания3 = Остатки.Субконто3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияСписка";
		
		Результат = Запрос.Выполнить();
		
		СохраненныйСписокНМА = Результат.Выгрузить();
		СохраненныйСписокНМА.Колонки.Добавить("ИзменениеНераспределеннойПрибыли");
		СписокНМА.Индексы.Добавить("НематериальныйАктив, СчетУчета");

		СписокСвойств = СписокСвойствДанныхУчета();
		МетаданныеОбработки = Метаданные.Обработки.ПомощникПереходаНаФСБУ14.ТабличныеЧасти.СписокНМА.Реквизиты;
		Для Каждого Свойство Из СписокСвойств Цикл
			Если СохраненныйСписокНМА.Колонки.Найти(Свойство) = Неопределено Тогда
				СохраненныйСписокНМА.Колонки.Добавить(Свойство, МетаданныеОбработки[Свойство].Тип);
			КонецЕсли;
		КонецЦикла;

		НачальныеСвойстваДляЗаполнения = СтрСоединить(СписокСвойств, ",");

		Для Каждого СведениеНМА Из СохраненныйСписокНМА Цикл
			СведениеНМА.СрокПолезногоИспользования = Макс(СведениеНМА.СрокПолезногоИспользования
				- УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				СведениеНМА.ДатаПринятияКУчету, КонецМесяца(Период)), 0);
			Если СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации Тогда
				Если СтоимостьАктивовОпределяетсяПоДаннымУчета Тогда
					СведениеНМА.ПервоначальнаяСтоимость = СведениеНМА.ПервоначальнаяСтоимостьДоПерехода;
				КонецЕсли;
				СведениеНМА.АмортизацияДоПерехода = 0;
				СведениеНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СведениеНМА);
				Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("НематериальныйАктив, СчетУчета");
			ЗаполнитьЗначенияСвойств(Отбор, СведениеНМА);
			СтрокиНМАПоДаннымУчета = СписокНМА.НайтиСтроки(Отбор);
			Если СтрокиНМАПоДаннымУчета.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(СведениеНМА, СтрокиНМАПоДаннымУчета[0], НачальныеСвойстваДляЗаполнения);
				СведениеНМА.ДатаПринятияКУчету = СтрокиНМАПоДаннымУчета[0].ДатаПринятияКУчету;
				СведениеНМА.ОбъемПродукцииРабот = СведениеНМА.ОбъемПродукцииРабот - СтрокиНМАПоДаннымУчета[0].КоличествоВыработки;
				СведениеНМА.КоличествоВыработки = СтрокиНМАПоДаннымУчета[0].КоличествоВыработки;
				Если СтоимостьАктивовОпределяетсяПоДаннымУчета Тогда
					СведениеНМА.ПервоначальнаяСтоимость = СведениеНМА.ПервоначальнаяСтоимостьДоПерехода;
					СведениеНМА.Амортизация = СведениеНМА.АмортизацияДоПерехода;
				КонецЕсли;
			КонецЕсли;
			СведениеНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СведениеНМА);
		КонецЦикла;
		
		Возврат СохраненныйСписокНМА;
	КонецЕсли;
	
	Возврат СписокНМА;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполненнаяРегламентнаяОперацияПереходаНаФСБУ14(Организация, Период)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегламентнаяОперация.Ссылка КАК РегламентнаяОперация
		|ИЗ
		|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|ГДЕ
		|	РегламентнаяОперация.Состояние = &Состояние
		|	И РегламентнаяОперация.ВидОперации = &ВидОперации
		|	И РегламентнаяОперация.Организация = &Организация
		|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И НЕ РегламентнаяОперация.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ14);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Документы.РегламентнаяОперация.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Выборка.РегламентнаяОперация;
	
КонецФункции

Функция ЕстьСохраненныеДанные(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СпособПереходаНаФСБУ14.Организация
		|ИЗ
		|	РегистрСведений.СпособПереходаНаФСБУ14 КАК СпособПереходаНаФСБУ14
		|ГДЕ
		|	СпособПереходаНаФСБУ14.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СписокСвойствДанныхУчета()

	СписокНачальныхСвойств = Новый Массив;
	РеквизитыДляЗаполнения = Обработки.ПомощникПереходаНаФСБУ14.Создать().Метаданные().ТабличныеЧасти.СписокНМА.Реквизиты;
	Для Каждого Реквизит Из РеквизитыДляЗаполнения Цикл
		Если СтрЗаканчиваетсяНа(Реквизит.Имя, "ДоПерехода") Тогда
			СписокНачальныхСвойств.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНачальныхСвойств;
	
КонецФункции

Функция ИзменениеНераспределеннойПрибыли(ДанныеНМА)
	Если ДанныеНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию") Тогда
		Возврат - (ДанныеНМА.ПервоначальнаяСтоимостьДоПерехода - ДанныеНМА.АмортизацияДоПерехода);
	Иначе
		Возврат (ДанныеНМА.ПервоначальнаяСтоимость - ДанныеНМА.Амортизация - ДанныеНМА.Обесценение) 
			- (ДанныеНМА.ПервоначальнаяСтоимостьДоПерехода - ДанныеНМА.АмортизацияДоПерехода);
	КонецЕсли;
КонецФункции

#Область ПечатьРеестра

Функция ИмяМакетаРеестр()
	
	Возврат "Обработка.ПомощникПереходаНаФСБУ14.ПФ_MXL_Реестр";
	
КонецФункции

Функция ПечатьРеестр(ДляПечати, Напечатано)
	
	Результат = Новый ТабличныйДокумент;
	
	Результат.АвтоМасштаб          = Истина;
	Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Ландшафт;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПомощникПереходаНаФСБУ14_Реестр";
	
	ПервыйДокумент = Истина;
	КешМакетов = Неопределено;
	
	Для Каждого Организация Из ДляПечати Цикл
		
		Если Напечатано.НайтиПоЗначению(Организация) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НачалоДокумента = Результат.ВысотаТаблицы + 1;
		
		ВывестиРеестрПоОрганизации(Результат, Организация, КешМакетов);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоДокумента,
			Напечатано,
			Организация);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиРеестрПоОрганизации(Результат, Организация, КешМакетов)
	
	Период = УчетНМА.НачалоОбязательногоПримененияФСБУ14();
	Данные = ДанныеПечатиРеестра(Организация, Период);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	// В зависимости от фактически указанных способов амортизации, колонки с отдельными элементами амортизации
	// могут оказаться не применимыми. Такие колонки нужно удалить из макета.
	// Для разных организаций набор может быть разным, поэтому для каждого документа может понадобиться пересоздавать макет
	// (или брать из кеша).
	
	ОписаниеНабораКолонок = НаборКолонокДляПечатиРеестра(Данные);
	
	Если КешМакетов = Неопределено Тогда
		КешМакетов = Новый Соответствие;
	КонецЕсли;
	
	Макет = КешМакетов[ОписаниеНабораКолонок.Индекс];
	Если Макет = Неопределено Тогда
		Макет = МакетРеестра(ОписаниеНабораКолонок);
		КешМакетов.Вставить(ОписаниеНабораКолонок.Индекс, Макет);
	КонецЕсли;
	
	// Собственно вывод реестра
	
	ВывестиШапкуПоОрганизации(Результат, Макет, Организация, Период);
	
	Учтенные  = Новый Массив;
	Списанные = Новый Массив;
	РазделитьУчтенныеСписанные(Учтенные, Списанные, Данные);
	
	ПредставленияЗаписей = ПредставленияДанныхДляПечатиРеестра(Данные);
	ПредставленияПериода = Новый Структура;
	ПредставленияПериода.Вставить("НачалоПрименения",  Формат(Период,     "ДЛФ=DD"));
	ПредставленияПериода.Вставить("МежотчетныйПериод", Формат(Период - 1, "ДЛФ=DD"));
	
	МакетПодпись = Макет.ПолучитьОбласть("Подпись");
	
	ВыводТаблицы = НовыйВыводТаблицыУчтенныеСписанные(Макет, ПредставленияПериода, "Учтено", Учтенные, Ложь);
	ВывестиТаблицуУчтенныеСписанные(Результат, ВыводТаблицы, ПредставленияЗаписей, МакетПодпись);
	
	ВыводТаблицы = НовыйВыводТаблицыУчтенныеСписанные(Макет, ПредставленияПериода, "Списано", Списанные, Истина);
	ВывестиТаблицуУчтенныеСписанные(Результат, ВыводТаблицы, ПредставленияЗаписей, МакетПодпись);
	
	ВывестиПодпись(Результат, МакетПодпись, Организация, Период);
	
КонецПроцедуры

Функция ДанныеПечатиРеестра(Организация, Период)
	
	ПрочитанныеДанные = ПрочитатьДанные(Организация, Период);
	
	ПрочитанныеДанные.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Для Каждого Запись Из ПрочитанныеДанные Цикл
		Запись.Идентификатор = ПрочитанныеДанные.Индекс(Запись);
	КонецЦикла;
	
	Возврат ПрочитанныеДанные;
	
КонецФункции

Функция МакетРеестра(ОписаниеНабораКолонок)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакетаРеестр());
	Для Каждого ИмяКолонки Из ОписаниеНабораКолонок.УдаляемыеКолонки Цикл
		ОбластьДляУдаления = Макет.Области.Найти(ИмяКолонки);
		Если ОбластьДляУдаления <> Неопределено Тогда
			Макет.УдалитьОбласть(ОбластьДляУдаления, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макет;
	
КонецФункции

Функция НаборКолонокДляПечатиРеестра(Данные)
	
	НаборКолонок = Новый Структура;
	НаборКолонок.Вставить("УдаляемыеКолонки", Новый Массив);
	НаборКолонок.Вставить("Индекс", 0); // Значение, соответствующее набору колонок; может быть ключем для кеша
	
	// Поля данных - это поля в Данные, хранящие значения способов амортизации.
	// От этих значений зависит наличие колонок в макете:
	// для каждого способа амортизации (значения условия), может быть перечень нужных ему колонок.
	
	УсловныеКолонки = Новый Структура; // поля данных -> значения условия -> колонки макета
	
	ОписаниеУсловий = НовыйОписаниеУсловий();
	Условия = ОписаниеУсловий.УсловияЗначения;

	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.Линейный,
		Новый Структура("СрокПолезногоИспользованияДо"));
	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка,
		Новый Структура("СрокПолезногоИспользованияДо"));
	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции,
		Новый Структура("ОбъемВыработкиДо"));
	УсловныеКолонки.Вставить("СпособНачисленияАмортизацииДоПерехода", ОписаниеУсловий);
	
	ОписаниеУсловий = НовыйОписаниеУсловий();
	Условия = ОписаниеУсловий.УсловияЗначения;

	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.Линейный,
		Новый Структура("СрокПолезногоИспользованияПосле"));
	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка,
		Новый Структура("СрокПолезногоИспользованияПосле"));
	Условия.Вставить(
		Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции,
		Новый Структура("ОбъемВыработкиПосле"));
	УсловныеКолонки.Вставить("СпособНачисленияАмортизации", ОписаниеУсловий);
	
	// Числовая колонка "Ликвидационная стоимость"
	ОписаниеУсловий = НовыйОписаниеУсловий();
	ОписаниеУсловий.ЭтоУсловиеИтога = Истина;
	
	Условия = ОписаниеУсловий.УсловияЗначения;
	Условия.Вставить(
		0,
		Новый Структура("ЛиквидационнаяСтоимость"));
		
	УсловныеКолонки.Вставить("ЛиквидационнаяСтоимость", ОписаниеУсловий);
	
	// Числовая колонка "Обесценение"
	ОписаниеУсловий = НовыйОписаниеУсловий();
	ОписаниеУсловий.ЭтоУсловиеИтога = Истина;
	
	Условия = ОписаниеУсловий.УсловияЗначения;
	Условия.Вставить(
		0,
		Новый Структура("Обесценение"));
		
	УсловныеКолонки.Вставить("Обесценение", ОписаниеУсловий);
	
	// Сократим Данные для оптимизации обработки

	ИменаПолейУсловийЗначений = Новый Массив;
	ИменаПолейУсловийИтога = Новый Массив;
	Для Каждого ОписаниеПоля Из УсловныеКолонки Цикл
		Если Не ОписаниеПоля.Значение.ЭтоУсловиеИтога Тогда
			ИменаПолейУсловийЗначений.Добавить(ОписаниеПоля.Ключ);
		Иначе
			ИменаПолейУсловийИтога.Добавить(ОписаниеПоля.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ИменаКолонокИтогов = СтрСоединить(ИменаПолейУсловийИтога, ",");
	
	Группировка = ОбщегоНазначения.СкопироватьРекурсивно(ИменаПолейУсловийЗначений);
	Группировка.Добавить("ДействиеПриПереходе");
	Группировка = СтрСоединить(Группировка, ",");
	
	УсловияКолонок = Данные.Скопировать(, Группировка + "," + ИменаКолонокИтогов);
	УсловияКолонок.Свернуть(Группировка, ИменаКолонокИтогов);
	
	ОтборЛишнихСтрок = Новый Структура("ДействиеПриПереходе", Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию);
	
	Для Каждого Запись Из УсловияКолонок.НайтиСтроки(ОтборЛишнихСтрок) Цикл
		УсловияКолонок.Удалить(Запись);
	КонецЦикла;
	
	УсловияКолонок.Свернуть(СтрСоединить(ИменаПолейУсловийЗначений, ","), ИменаКолонокИтогов);
		
	// Определим какие колонки нужно удалить: сначала считаем, что все условные колонки не нужны,
	// а потом оказавшиеся нужными исключаем из перечня ненужных.
	
	УдалитьКолонки = Новый Структура;
	Для Каждого ОписаниеПоля Из УсловныеКолонки Цикл
		Для Каждого ОписаниеУсловий Из ОписаниеПоля.Значение.УсловияЗначения Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(УдалитьКолонки, ОписаниеУсловий.Значение, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из УсловныеКолонки Цикл
		ИмяПоля = ОписаниеПоля.Ключ;
		
		Для Каждого Условие Из ОписаниеПоля.Значение.УсловияЗначения Цикл
			
			ЗначениеУсловия = Условие.Ключ;
			Если ОписаниеПоля.Значение.ЭтоУсловиеИтога Тогда
				Если УсловияКолонок.Итог(ОписаниеПоля.Ключ) = ЗначениеУсловия Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если УсловияКолонок.Найти(ЗначениеУсловия, ИмяПоля) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ОписаниеКолонки Из Условие.Значение Цикл
				УдалитьКолонки.Удалить(ОписаниеКолонки.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Перекладываем в коллекцию результата
	
	Если ЗначениеЗаполнено(УдалитьКолонки) Тогда
		
		Для Каждого ОписаниеКолонки Из УдалитьКолонки Цикл
			НаборКолонок.УдаляемыеКолонки.Добавить(ОписаниеКолонки.Ключ);
		КонецЦикла;
		
		Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
		Хеш.Добавить(ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(УдалитьКолонки));
		НаборКолонок.Индекс = Хеш.ХешСумма;
		
	КонецЕсли;
	
	Возврат НаборКолонок;
	
КонецФункции

Функция НовыйОписаниеУсловий()
	
	ОписаниеУсловий = Новый Структура;
	ОписаниеУсловий.Вставить("УсловияЗначения", Новый Соответствие);
	ОписаниеУсловий.Вставить("ЭтоУсловиеИтога", Ложь);
	Возврат ОписаниеУсловий;

КонецФункции

Функция ПредставленияДанныхДляПечатиРеестра(Данные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Данные", Данные);
	
	Запрос.УстановитьПараметр("СпособПоОбъему", Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Идентификатор КАК Идентификатор,
	|	ВЫРАЗИТЬ(Данные.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив,
	|	ВЫРАЗИТЬ(Данные.СпособНачисленияАмортизацииДоПерехода КАК Перечисление.СпособыНачисленияАмортизацииНМА) КАК СпособНачисленияАмортизацииДоПерехода,
	|	ВЫРАЗИТЬ(Данные.СпособНачисленияАмортизации КАК Перечисление.СпособыНачисленияАмортизацииНМА) КАК СпособНачисленияАмортизации,
	|	Данные.НеопределенныйСрокПолезногоИспользованияДоПерехода КАК НеопределенныйСрокПолезногоИспользованияДоПерехода,
	|	Данные.НеопределенныйСрокПолезногоИспользования КАК НеопределенныйСрокПолезногоИспользования,
	|	Данные.СрокПолезногоИспользованияДоПерехода КАК СрокПолезногоИспользованияДоПерехода,
	|	Данные.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	Данные.ОбъемПродукцииРаботДоПерехода КАК ОбъемПродукцииРаботДоПерехода,
	|	Данные.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	Данные.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Идентификатор КАК Идентификатор,
	|	ПРЕДСТАВЛЕНИЕ(Данные.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	Данные.НематериальныйАктив.Код КАК ИнвентарныйНомер,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользованияДоПерехода
	|			ТОГДА """"
	|		ИНАЧЕ Данные.СпособНачисленияАмортизацииДоПерехода
	|	КОНЕЦ КАК СпособНачисленияАмортизацииДоПерехода,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользования
	|			ТОГДА """"
	|		ИНАЧЕ Данные.СпособНачисленияАмортизации
	|	КОНЕЦ КАК СпособНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользованияДоПерехода
	|				ИЛИ Данные.СпособНачисленияАмортизацииДоПерехода = &СпособПоОбъему
	|			ТОГДА """"
	|		ИНАЧЕ Данные.СрокПолезногоИспользованияДоПерехода
	|	КОНЕЦ КАК СрокПолезногоИспользованияДоПерехода,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользования
	|				ИЛИ Данные.СпособНачисленияАмортизации = &СпособПоОбъему
	|			ТОГДА """"
	|		ИНАЧЕ Данные.СрокПолезногоИспользования
	|	КОНЕЦ КАК СрокПолезногоИспользования,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользованияДоПерехода
	|				ИЛИ НЕ Данные.СпособНачисленияАмортизацииДоПерехода = &СпособПоОбъему
	|			ТОГДА """"
	|		ИНАЧЕ Данные.ОбъемПродукцииРаботДоПерехода
	|	КОНЕЦ КАК ОбъемПродукцииРаботДоПерехода,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользования
	|				ИЛИ НЕ Данные.СпособНачисленияАмортизации = &СпособПоОбъему
	|			ТОГДА """"
	|		ИНАЧЕ Данные.ОбъемПродукцииРабот
	|	КОНЕЦ КАК ОбъемПродукцииРабот,
	|	ВЫБОР
	|		КОГДА Данные.НеопределенныйСрокПолезногоИспользования
	|			ТОГДА """"
	|		ИНАЧЕ Данные.ЛиквидационнаяСтоимость
	|	КОНЕЦ КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	Данные КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Представления = Запрос.Выполнить().Выгрузить();
	
	Представления.Индексы.Добавить("Идентификатор");
	
	Возврат Представления;
	
КонецФункции

Процедура РазделитьУчтенныеСписанные(Учтенные, Списанные, Данные)
	
	Для Каждого Запись Из Данные Цикл
		
		Если Запись.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию Тогда
			Списанные.Добавить(Запись);
		Иначе
			Учтенные.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуПоОрганизации(Результат, Макет, Организация, Период)
	
	ДанныеОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);
	НаименованиеДляПечатныхФорм = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(ДанныеОрганизации, "НаименованиеДляПечатныхФорм");
	
	Данные = Новый Структура("Организация", НаименованиеДляПечатныхФорм);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Данные);
	Результат.Вывести(Область);
	
КонецПроцедуры

Функция НовыйВыводТаблицыУчтенныеСписанные(Макет, ПредставленияПериода, НаборМакетов, Данные, ПоследняяТаблица)
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыводТаблицы = Новый Структура;
	ВыводТаблицы.Вставить("Данные",          Данные);
	ВыводТаблицы.Вставить("ПоследняяЗапись", Неопределено);
	ВыводТаблицы.Вставить("Макеты", Новый Структура);
	ВыводТаблицы.Вставить("Итоги",  Новый Структура);
	ВыводТаблицы.Итоги.Вставить("ПервоначальнаяСтоимостьДоПерехода", 0);
	ВыводТаблицы.Итоги.Вставить("АмортизацияДоПерехода",             0);
	ВыводТаблицы.Итоги.Вставить("ПервоначальнаяСтоимость",           0);
	ВыводТаблицы.Итоги.Вставить("Амортизация",                       0);
	ВыводТаблицы.Итоги.Вставить("Обесценение",                       0);
	ВыводТаблицы.Итоги.Вставить("ИзменениеНераспределеннойПрибыли",  0);
	
	// Соответствующие области имеют префикс из НаборМакетов
	ИменаМакетовСтрок = СтрРазделить("Шапка,ШапкаТаблицы,Строка,Итог", ",");
	
	Для Каждого ИмяМакета Из ИменаМакетовСтрок Цикл
		
		АдресМакета = СтрШаблон("%1%2", НаборМакетов, ИмяМакета);
		МакетСтроки = Макет.ПолучитьОбласть(АдресМакета);
		ВыводТаблицы.Макеты.Вставить(ИмяМакета, МакетСтроки);
		
	КонецЦикла;
	
	Если ПоследняяТаблица Тогда
		ВыводТаблицы.ПоследняяЗапись = Данные[Данные.ВГраница()];
	КонецЕсли;
	
	ВыводТаблицы.Макеты.Шапка.Параметры.Заполнить(ПредставленияПериода);
	ВыводТаблицы.Макеты.ШапкаТаблицы.Параметры.Заполнить(ПредставленияПериода);
	
	Возврат ВыводТаблицы;
	
КонецФункции

Процедура ВывестиТаблицуУчтенныеСписанные(Результат, ВыводТаблицы, ПредставленияЗаписей, МакетПодпись)
	
	Если ВыводТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вывести(ВыводТаблицы.Макеты.Шапка);
	
	Результат.Вывести(ВыводТаблицы.Макеты.ШапкаТаблицы);
	
	НомераСтрок = Новый Структура("НомерЗаписи", 0);
	
	НомерПоследнейЗаписи = ВыводТаблицы.Данные.Количество() - 1;
	Для Каждого Запись Из ВыводТаблицы.Данные Цикл
		
		НомераСтрок.НомерЗаписи = НомераСтрок.НомерЗаписи + 1;
		ОбновитьИтогиПоТаблице(ВыводТаблицы.Итоги, Запись);
		
		ПредставленияЗаписи = ПредставленияЗаписей.Найти(Запись.Идентификатор, "Идентификатор");
		ВыводТаблицы.Макеты.Строка.Параметры.Заполнить(Запись);
		ВыводТаблицы.Макеты.Строка.Параметры.Заполнить(ПредставленияЗаписи);
		ВыводТаблицы.Макеты.Строка.Параметры.Заполнить(НомераСтрок);
		
		РазделитьСтраницу(Результат, ВыводТаблицы.Макеты, МакетПодпись, Запись, ВыводТаблицы.ПоследняяЗапись);
		
		Результат.Вывести(ВыводТаблицы.Макеты.Строка);
		
	КонецЦикла;
	
	ВыводТаблицы.Макеты.Итог.Параметры.Заполнить(ВыводТаблицы.Итоги);
	Результат.Вывести(ВыводТаблицы.Макеты.Итог);
	
КонецПроцедуры

Процедура ОбновитьИтогиПоТаблице(Итоги, Запись)
	
	Для Каждого Итог Из Итоги Цикл
		
		Итоги[Итог.Ключ] = Итоги[Итог.Ключ] + Запись[Итог.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазделитьСтраницу(Результат, Макеты, МакетПодпись, Запись, ПоследняяЗапись)
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(Макеты.Строка);
	
	Если Запись = ПоследняяЗапись Тогда
		// Последняя строка должна быть на странице с итогом и подписями
		ВыводимыеОбласти.Добавить(Макеты.Итог);
		ВыводимыеОбласти.Добавить(МакетПодпись);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(Результат, ВыводимыеОбласти) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ВывестиГоризонтальныйРазделительСтраниц();
	Результат.Вывести(Макеты.ШапкаТаблицы);
	
КонецПроцедуры

Процедура ВывестиПодпись(Результат, Макет, Организация, Период)
	
	Данные = Новый Структура;
	Данные.Вставить("ДолжностьПодписавшегоЛица", "");
	Данные.Вставить("ДокументПодписал",          "");

	Пользователь = Пользователи.ТекущийПользователь();
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(ФизическоеЛицо, Организация, Период);
	Данные.ДолжностьПодписавшегоЛица = Полномочия.ДолжностьПредставление;
	Данные.ДокументПодписал          = Полномочия.ФИО.Представление;
	
	Макет.Параметры.Заполнить(Данные);
	Результат.Вывести(Макет);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанных
	
Функция ПрочитатьДанные(Организация, Период)

	ПрочитанныеДанные = СписокНМА(Организация, Период - 1);
		
Возврат ПрочитанныеДанные;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
