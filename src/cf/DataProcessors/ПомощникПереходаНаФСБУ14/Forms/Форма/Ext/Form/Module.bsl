
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	Если Не ЗначениеЗаполнено(Параметры.Период) Тогда
		Объект.Период = УчетНМА.НачалоОбязательногоПримененияФСБУ14() - 1;
	КонецЕсли;
	СтоимостьАктивовОпределяетсяПоДаннымУчета = РегистрыСведений.СпособПереходаНаФСБУ14.СтоимостьОпределяетсяПоДаннымУчета(
		Объект.Организация);
	Объект.СписокНМА.Загрузить(Обработки.ПомощникПереходаНаФСБУ14.СписокНМА(Объект.Организация, Объект.Период, Ложь));
	ЗаполнитьДобавленныеКолонкиСтрок();

	ВариантыСпособУчета = Элементы.СтоимостьАктивовОпределяетсяПоДаннымУчета.СписокВыбора;
	ВариантыСпособУчета.Добавить(Истина, НСтр("ru = 'По данным учета за 2023 год'"));
	ВариантыСпособУчета.Добавить(Ложь, НСтр("ru = 'По иным данным'"));

	ВидыНМА = ВидыНМА(); // Используются при выборе из списка значений при групповом изменении строк.
			
	СубсчетаКапВложений = БухгалтерскийУчет.СформироватьМассивСубсчетов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы));
	СчетаВложенийВоВнеоборотныеАктивы = Новый СписокЗначений;
	СчетаВложенийВоВнеоборотныеАктивы.ЗагрузитьЗначения(СубсчетаКапВложений);
	
	СформироватьСпискиВыбораДействий();

	ОграничитьСписокСчетовУчета();

	УстановитьВидимость(ЭтотОбъект);
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ВопросСохранитьИзменения("ВопросПередЗакрытиемЗавершение");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		
		ТекущиеДанные.СчетСписания = ВыбранноеЗначение.СчетЗатрат;
		ТекущиеДанные.ПодразделениеСписания = ВыбранноеЗначение.ПодразделениеЗатрат;
		ТекущиеДанные.СубконтоСписания1 = ВыбранноеЗначение.Субконто1;
		ТекущиеДанные.СубконтоСписания2 = ВыбранноеЗначение.Субконто2;
		ТекущиеДанные.СубконтоСписания3 = ВыбранноеЗначение.Субконто3;

		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("ПредставлениеАналитикиСписания");
		ДанныеСтроки.Вставить("ПервоначальнаяСтоимость");
		ДанныеСтроки.Вставить("ПервоначальнаяСтоимостьДоПерехода");

		ЗаполнитьДаныеСтрокиПриИзмененииАналитикиСервер(ДанныеСтроки, ВыбранноеЗначение, Объект.Организация,
			Объект.Период);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации"
		И ИсточникВыбора.КлючНазначенияИспользования = "ЭлементыАмортизации" Тогда
		Если ВыбранноеЗначение.ИзменениеНесколькихСтрок Тогда
			ИзменитьЭлементыАмортизацииВыделенныхСтрок(ВыбранноеЗначение.ПараметрыАмортизации);
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение.ПараметрыАмортизации);
			ЗаполнитьПредставлениеЭлементыАмортизацииСтроки(ТекущиеДанные);
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации"
		И ИсточникВыбора.КлючНазначенияИспользования = "ПараметрыНачисленияАмортизации" Тогда
		Если ВыбранноеЗначение.ИзменениеНесколькихСтрок Тогда
			ИзменитьПараметрыНачисленияАмортизацииВыделенныхСтрок(ВыбранноеЗначение.ПараметрыАмортизации);
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение.ПараметрыАмортизации);
			ТекущиеДанные.ПредставлениеПараметрыНачисленияАмортизации = ПредставлениеПараметрыНачисленияАмортизации(ТекущиеДанные);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	Для Каждого СведениеНМА Из Объект.СписокНМА Цикл
		
		// Если не заполнен НМА, сработает стандартная проверка на основании свойств метаданных.
		Если Не ЗначениеЗаполнено(СведениеНМА.НематериальныйАктив) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для списанных НМА проверки не требуются.
		Если СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = Объект.СписокНМА.Индекс(СведениеНМА);
		
		ПроверитьЗаполненностьСчетаУчета(Ошибки, СведениеНМА, ИндексСтроки);
		
		Если СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.Подтверждено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСчетКапитальныхВложений = СчетаВложенийВоВнеоборотныеАктивы.НайтиПоЗначению(СведениеНМА.СчетУчета) <> Неопределено;
		
		// Для новых НМА проверяем аналитику списания.
		Если СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации Тогда
			ПроверитьАналитикуСписания(Ошибки,СведениеНМА, ИндексСтроки);
		КонецЕсли;
		
		// Для вложений во внеоборотные активы проверки, связанные с амортизацией и принятием к учету, не нужны.
		Если Не ЭтоСчетКапитальныхВложений Тогда
			// Проверка счетов амортизации.
			ПроверитьСчетаАмортизации(Ошибки,СведениеНМА, ИндексСтроки);
			// Проверяем заполненность элементов амортизации.
			ПроверитьЭлементыАмортизации(Ошибки,СведениеНМА, ИндексСтроки);
			
			// Для новых НМА, не являющихся кап. вложениями, проверяем дату принятия к учету
			Если СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации Тогда
				
				ПроверитьДатуПринятияКУчету(Ошибки,СведениеНМА, ИндексСтроки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтоимостьАктивовОпределяетсяПоДаннымУчетаПриИзменении(Элемент)
	УстановитьВидимость(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНМА

&НаКлиенте
Процедура СписокНМАДействиеПриПереходеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьИзменениеСтатусаСтроки(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СписокНМАПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ТекущиеДанные.СуществующееНМА Тогда
		ТекущиеДанные.ДействиеПриПереходе = ПредопределенноеЗначение(
			"Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		ТекущиеДанные.СуществующееНМА = Ложь;
		ТекущиеДанные.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации");
		УстановитьКартинкуСтатусов(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАПервоначальнаяСтоимостьПослеПереходаПриИзменении(Элемент)
	ПересчитатитьИзменениеНераспределеннойПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАОбесценениеПриИзменении(Элемент)
	ПересчитатитьИзменениеНераспределеннойПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура СписокНМААмортизацияПослеПереходаПриИзменении(Элемент)
	ПересчитатитьИзменениеНераспределеннойПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАНематериальныйАктивПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ВидНМА = ВидНМА(ТекущиеДанные.НематериальныйАктив);
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если НоваяСтрока И ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДействиеПриПереходе = ПредопределенноеЗначение(
			"Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАДействиеПриПереходеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.СуществующееНМА Тогда
		ДанныеВыбора = СписокВыбораСуществующиеНМА;
	Иначе
		ДанныеВыбора = СписокВыбораНовыеНМА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокНМАПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.СуществующееНМА Тогда
		Отказ = Истина;
		ТекущиеДанные.ДействиеПриПереходе = ПредопределенноеЗначение(
			"Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию");
		УстановитьКартинкуСтатусов(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтоСчетКапитальныхВложений =
		(СчетаВложенийВоВнеоборотныеАктивы.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено);
	Если Поле.Имя = "СписокНМАПредставлениеАналитикиСписания" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СчетЗатрат", ТекущиеДанные.СчетСписания);
		ПараметрыФормы.Вставить("ПодразделениеЗатрат", ТекущиеДанные.ПодразделениеСписания);
		ПараметрыФормы.Вставить("Субконто1", ТекущиеДанные.СубконтоСписания1);
		ПараметрыФормы.Вставить("Субконто2", ТекущиеДанные.СубконтоСписания2);
		ПараметрыФормы.Вставить("Субконто3", ТекущиеДанные.СубконтоСписания3);
		ПараметрыФормы.Вставить("ФормаОткрытаИзШапки", Ложь);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);

		ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

	Если (Поле.Имя = "СписокНМАПредставлениеЭлементыАмортизацииДоПерехода"
		Или Поле.Имя = "СписокНМАПредставлениеЭлементыАмортизацииПослеПерехода") И Не ЭтоСчетКапитальныхВложений Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", Поле.Имя = "СписокНМАПредставлениеЭлементыАмортизацииДоПерехода");
		ЭлементыАмортизации = ЭлементыАмортизации(ТекущиеДанные, Поле.Имя);
		ПараметрыФормы.Вставить("ПараметрыАмортизации", ЭлементыАмортизации);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ЭлементыАмортизации");
		ОткрытьФорму("Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	Если Поле.Имя = "СписокНМАПараметрыНачисленияАмортизации" И Не ЭтоСчетКапитальныхВложений Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТекущиеДанные.СуществующееНМА);
		ПараметрыНачисленияАмортизации = Новый Структура;
		ПараметрыНачисленияАмортизации.Вставить("СчетАмортизации", ТекущиеДанные.СчетАмортизации);
		ПараметрыНачисленияАмортизации.Вставить("СпособОтраженияРасходов", ТекущиеДанные.СпособОтраженияРасходов);
		ПараметрыФормы.Вставить("ПараметрыАмортизации", ПараметрыНачисленияАмортизации);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПараметрыНачисленияАмортизации");
		ОткрытьФорму("Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	// В строках, заполненных по данным учета, нельзя изменить НМА, но при этом может понадобиться посмотреть карточку объета.
	// Признак строк, заполненных по данным учета, - СуществующееНМА = Истина.
	Если Поле.Имя = "СписокНМАНематериальныйАктив" И ТекущиеДанные.СуществующееНМА Тогда
		ПоказатьЗначение( ,ТекущиеДанные.НематериальныйАктив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНМАСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Значения поля "Амортизация" для кап. вложений не отображается и не редактируется, поэтому при изменении
	// счета на счет кап. вложений значение в поле "Амортизация" должно обнуляться и пересчитываться изменение НРП.
	Если СчетаВложенийВоВнеоборотныеАктивы.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
		ТекущиеДанные.Амортизация = 0;
		ТекущиеДанные.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	ЗаполнитьПоДаннымУчетаНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ОчиститьСообщения();
	Если Модифицированность И ПроверитьЗаполнение() Тогда
		ЗаписатьНаСервере();
		Модифицированность = Ложь;
		Оповестить("ОбновитьЗакрытиеМесяца");
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ОчиститьСообщения();
	Если Модифицированность И ПроверитьЗаполнение() Тогда
		ЗаписатьНаСервере();
		Модифицированность = Ложь;
		Оповестить("ОбновитьЗакрытиеМесяца");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидНМА(Команда)
	ИзменитьПоле(ВидыНМА, "ВидНМА");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	ИзменитьПоле(СписокВыбораСуществующиеНМА, "ДействиеПриПереходе");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементыАмортизации(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИзменениеНесколькихСтрок", Истина);
	ЭлементыАмортизации = НовыйЭлементыАмортизации();
	ПараметрыФормы.Вставить("ПараметрыАмортизации", ЭлементыАмортизации);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ЭлементыАмортизации");
	ОткрытьФорму("Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыНачисленияАмортизации(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИзменениеНесколькихСтрок", Истина);
	ПараметрыНачисленияАмортизации = Новый Структура();
	ПараметрыНачисленияАмортизации.Вставить("СчетАмортизации");
	ПараметрыНачисленияАмортизации.Вставить("СпособОтраженияРасходов");
	ПараметрыФормы.Вставить("ПараметрыАмортизации", ПараметрыНачисленияАмортизации);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПараметрыНачисленияАмортизации");
	ОткрытьФорму("Обработка.ПомощникПереходаНаФСБУ14.Форма.ПараметрыАмортизации", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Перед печатью измененные данные следует записать.'"));
		Возврат;
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПомощникПереходаНаФСБУ14", "Реестр", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Объект.Организация), ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Гиперссылка аналитики списания: видимость только у переклассифицируемых НМА
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеАналитикиСписания");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Гиперссылка аналитики списания: незаполненное значение отображается цветом незаполненного реквизита с текстом <...>
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеАналитикиСписания");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ПредставлениеАналитикиСписания", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Гиперссылка элементов амортизации: незаполненное значение отображается цветом незаполненного реквизита с текстом <...>
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеЭлементыАмортизацииПослеПерехода");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ПредставлениеЭлементыАмортизацииПослеПерехода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СчетУчета", ВидСравненияКомпоновкиДанных.НеВСписке, СчетаВложенийВоВнеоборотныеАктивы);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Гиперссылка счета амортизации: незаполненное значение отображается цветом незаполненного реквизита с текстом <...>,
	// за исключение счетов кап. вложений.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПараметрыНачисленияАмортизации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ПредставлениеПараметрыНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СчетУчета", ВидСравненияКомпоновкиДанных.НеВСписке, СчетаВложенийВоВнеоборотныеАктивы);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , Истина));
	
	// Поле "НМА": порядок учета у переклассифицируемых НМА должно быть скрыто
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПорядокУчетаДоПерехода");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Порядок учета до перехода на ФСБУ 14 у существующих НМА
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПорядокУчетаДоПерехода");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'НМА'"));
	
	// Строки списываемых НМА
	// - оформляются шрифтом серого цвета
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМА");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// - отметка незаполненного для списываемых НМА не отображается (такое может быть, если есть остатки
	// на счете амортизации при отсутствии остатком на счете учета НМА)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Декоративные поля "до перехода", "после перехода": отображаются только у пересмотренных НМА.
	// - до перехода
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАНадписьДоПерехода");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.Пересмотрено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'до перехода'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	
	// - после перехода
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАНадписьПослеПерехода");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.Пересмотрено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'после перехода'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	
	// НМА, счет учета, дата принятия к учету и способ отражения амортизации недоступны для редактирования у существующих НМА.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАДатаПринятияКУчету");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПараметрыНачисленияАмортизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАНематериальныйАктив");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Колонки с корректировками сумм и элементов амортизации - только у пересмотренных и переклассифицируемых активов,
	//колонки с начальной суммой и элементами амортизации - только у пересмотренных, списанных и подтвержденных НМА.
	
	// - скрытие полей новых значений:
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеЭлементыАмортизацииПослеПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПервоначальнаяСтоимостьПослеПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМААмортизацияПослеПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАНадписьПослеПерехода");
	
	СписокДействийЗначенияДоПерехода = Новый СписокЗначений();
	СписокДействийЗначенияДоПерехода.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.Подтверждено);
	СписокДействийЗначенияДоПерехода.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.ВСписке, СписокДействийЗначенияДоПерехода);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// - скрытие полей старых значений:
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеЭлементыАмортизацииДоПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАНадписьДоПерехода");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Суммы у "К переклассификации" в случае "По данным учета" отображаются первоначальные
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПервоначальнаяСтоимостьДоПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМААмортизацияДоПерехода");
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор, "ГруппаИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"СтоимостьАктивовОпределяетсяПоДаннымУчета", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Счета учета амортизации оформляются гиперссылкой только у переклассифицируемых НМА
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПараметрыНачисленияАмортизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СуществующееНМА", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ПредставлениеПараметрыНачисленияАмортизации", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , Истина));
	
	// Если НМА подлежит списанию, ВидНМА можно не заполнять.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАВидНМА");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Для счетов капитальных вложений дату принятия к учету можно не указывать
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАДатаПринятияКУчету");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СчетУчета", ВидСравненияКомпоновкиДанных.ВСписке, СчетаВложенийВоВнеоборотныеАктивы);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// В статусе "К списанию" и "Подтверждено" поля обесценения не редактируются
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАОбесценение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАОбесценениеДоступноеДляВосстановления");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.ДействиеПриПереходе", ВидСравненияКомпоновкиДанных.ВСписке, СписокДействийЗначенияДоПерехода);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Для счетов кап. вложений не отображаются и не редактируются элементы амортизации и дата принятия к учету.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАДатаПринятияКУчету");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПредставлениеЭлементыАмортизацииПослеПерехода");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМАПараметрыНачисленияАмортизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНМААмортизацияПослеПерехода");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СписокНМА.СчетУчета", ВидСравненияКомпоновкиДанных.ВСписке, СчетаВложенийВоВнеоборотныеАктивы);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементыАмортизацииВыделенныхСтрок(ЭлементыАмортизации)
	ВыделенныеСтроки = Элементы.СписокНМА.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Объект.СписокНМА.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ВыделеннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ВыделеннаяСтрока.ДействиеПриПереходе <> Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию Тогда
			ЗаполнитьЗначенияСвойств(ВыделеннаяСтрока, ЭлементыАмортизации);
			ЗаполнитьПредставлениеЭлементыАмортизацииСтроки(ВыделеннаяСтрока);
			ИзменитьСтатусПодтвержденоНаПересмотрено(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПодтвержденоНаПересмотрено(ВыделеннаяСтрока)
	Если ВыделеннаяСтрока.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.Подтверждено Тогда
		ВыделеннаяСтрока.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.Пересмотрено;
		УстановитьКартинкуСтатусов(ВыделеннаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыНачисленияАмортизацииВыделенныхСтрок(ПараметрыАмортизации)
	ВыделенныеСтроки = Элементы.СписокНМА.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Объект.СписокНМА.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ВыделеннаяСтрока.СуществующееНМА Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВыделеннаяСтрока, ПараметрыАмортизации);
		ВыделеннаяСтрока.ПредставлениеПараметрыНачисленияАмортизации = ПредставлениеПараметрыНачисленияАмортизации(ВыделеннаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтатусаСтроки(СтрокаНМА)
	Если СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.Подтверждено") Тогда
		СтрокаНМА.ПервоначальнаяСтоимость = СтрокаНМА.ПервоначальнаяСтоимостьДоПерехода;
		СтрокаНМА.Амортизация = СтрокаНМА.АмортизацияДоПерехода;
		СтрокаНМА.Обесценение = 0;
		СтрокаНМА.ОбесценениеДоступноеДляВосстановления = 0;
		СтрокаНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СтрокаНМА);
		СтрокаНМА.Коэффициент = СтрокаНМА.КоэффициентДоПерехода;
		СтрокаНМА.ОбъемПродукцииРабот = СтрокаНМА.ОбъемПродукцииРаботДоПерехода;
		СтрокаНМА.СпособНачисленияАмортизации = СтрокаНМА.СпособНачисленияАмортизацииДоПерехода;
		СтрокаНМА.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияДоПерехода;
		СтрокаНМА.НеопределенныйСрокПолезногоИспользования = СтрокаНМА.НеопределенныйСрокПолезногоИспользованияДоПерехода;
	ИначеЕсли СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.Пересмотрено") Тогда
		ЗаполнитьПредставлениеЭлементыАмортизацииСтроки(СтрокаНМА);
		Элементы.ГруппаНадписи.Видимость = Истина;
	ИначеЕсли СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию") Тогда
		СтрокаНМА.ПервоначальнаяСтоимость = 0;
		СтрокаНМА.Амортизация = 0;
		СтрокаНМА.Обесценение = 0;
		СтрокаНМА.ОбесценениеДоступноеДляВосстановления = 0;
		СтрокаНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СтрокаНМА);
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаНМА.ДействиеПриПереходе) Тогда
		Если СтрокаНМА.СуществующееНМА Тогда
			СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.Подтверждено");
		Иначе
			СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКартинкуСтатусов(СтрокаНМА);

	Если Не СтоимостьАктивовОпределяетсяПоДаннымУчета Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаНМА.ДействиеПриПереходе <> ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию") Тогда
		СтрокаНМА.ПервоначальнаяСтоимость = СтрокаНМА.ПервоначальнаяСтоимостьДоПерехода;
		СтрокаНМА.Амортизация = СтрокаНМА.АмортизацияДоПерехода;
		СтрокаНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СтрокаНМА);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрок()
	ВидимостьКолонкиНадпись = Ложь;
	Для Каждого СведениеНМА Из Объект.СписокНМА Цикл
		
		ЗаполнитьПредставлениеЭлементыАмортизацииСтроки(СведениеНМА);
		СведениеНМА.ПредставлениеПараметрыНачисленияАмортизации = ПредставлениеПараметрыНачисленияАмортизации(СведениеНМА);
		Если СведениеНМА.СуществующееНМА Тогда
			Если Не ВидимостьКолонкиНадпись И СведениеНМА.ДействиеПриПереходе = Перечисления.ДействияПриПереходеНаФСБУ14.Пересмотрено Тогда
				ВидимостьКолонкиНадпись = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СведениеНМА.ПредставлениеАналитикиСписания = ПредставлениеАналитики(СведениеНМА);
		СведениеНМА.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(СведениеНМА);

	КонецЦикла;
	
	Элементы.ГруппаНадписи.Видимость = ВидимостьКолонкиНадпись;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПараметрыНачисленияАмортизации(СведениеНМА)
	
	Если Не ЗначениеЗаполнено(СведениеНМА.СчетАмортизации) И Не ЗначениеЗаполнено(СведениеНМА.СпособОтраженияРасходов) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиПредставления = Новый Массив;
	Если ЗначениеЗаполнено(СведениеНМА.СчетАмортизации) Тогда
		ЧастиПредставления.Добавить(СведениеНМА.СчетАмортизации);
	Иначе
		ЧастиПредставления.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	КонецЕсли;
	Если ЗначениеЗаполнено(СведениеНМА.СпособОтраженияРасходов) Тогда
		ЧастиПредставления.Добавить(СведениеНМА.СпособОтраженияРасходов);
	Иначе
		ЧастиПредставления.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	КонецЕсли;
	Возврат СтрСоединить(ЧастиПредставления, ", ");
	
КонецФункции

&НаСервере
Функция ПредставлениеАналитики(СведениеНМА)
	
	Если СведениеНМА.СуществующееНМА Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеАналитики = Новый Структура;
	ДанныеАналитики.Вставить("Организация", Объект.Организация);
	ДанныеАналитики.Вставить("Дата", Объект.Период);
	ДанныеАналитики.Вставить("РаздельныйУчетНДСНаСчете19", Ложь);
	ДанныеАналитики.Вставить("СчетЗатрат", СведениеНМА.СчетСписания);
	ДанныеАналитики.Вставить("ПодразделениеЗатрат", СведениеНМА.ПодразделениеСписания);
	ДанныеАналитики.Вставить("Субконто1", СведениеНМА.СубконтоСписания1);
	ДанныеАналитики.Вставить("Субконто2", СведениеНМА.СубконтоСписания2);
	ДанныеАналитики.Вставить("Субконто3", СведениеНМА.СубконтоСписания3);
	
	Возврат БухгалтерскийУчет.ПредставлениеАналитикиУчетаЗатрат(ДанныеАналитики);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеЭлементыАмортизацииСтроки(СведениеНМА)
	СведениеНМА.ПредставлениеЭлементыАмортизацииДоПерехода =
		ПредставлениеЭлементовАмортизации(СведениеНМА, ПостфиксЭлементовДоПерехода());
	СведениеНМА.ПредставлениеЭлементыАмортизацииПослеПерехода =
		ПредставлениеЭлементовАмортизации(СведениеНМА);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭлементовАмортизации(СтрокаНМА, Постфикс = "")
	
	Если СтрокаНМА["НеопределенныйСрокПолезногоИспользования" + Постфикс] Тогда
		Возврат НСтр("ru = 'Неопределенный срок полезного использования'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаНМА["СпособНачисленияАмортизации" + Постфикс]) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтрокаНМА["СпособНачисленияАмортизации" + Постфикс]);
	Если СтрокаНМА["СпособНачисленияАмортизации" + Постфикс] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный") Тогда
		ЧастиСтроки.Добавить(Формат(СтрокаНМА["СрокПолезногоИспользования" + Постфикс], "ЧН=0;") + НСтр("ru = ' мес.'"));
	ИначеЕсли СтрокаНМА["СпособНачисленияАмортизации" + Постфикс] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
		ЧастиСтроки.Добавить(Формат(СтрокаНМА["СрокПолезногоИспользования" + Постфикс], "ЧН=0;") + НСтр("ru = ' мес.'"));
		ЧастиСтроки.Добавить(НСтр("ru = 'коэф.'") + " " + Формат(СтрокаНМА["Коэффициент" + Постфикс], "ЧН=0;"));
	ИначеЕсли СтрокаНМА["СпособНачисленияАмортизации" + Постфикс] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции") Тогда
		ЧастиСтроки.Добавить(Формат(СтрокаНМА["ОбъемПродукцииРабот" + Постфикс], "ЧН=0;") + НСтр("ru = ' ед.'"));
	КонецЕсли;
	
	ЛиквидационнаяСтоимость = 0;
	СтрокаНМА.Свойство("ЛиквидационнаяСтоимость" + Постфикс, ЛиквидационнаяСтоимость);
	Если ЗначениеЗаполнено(ЛиквидационнаяСтоимость) Тогда
		ЧастиСтроки.Добавить(Формат(ЛиквидационнаяСтоимость, "ЧФ='Ч руб.';"));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиСтроки, ", ");

КонецФункции

&НаКлиенте
Функция ЭлементыАмортизации(ТекущиеДанные, ИмяПоля)
	ЭлементыАмортизации = НовыйЭлементыАмортизации();
	// Параметры формы заполняются из реквизитов строки, зависящих от того, какое поле расшифровывается - "До перехода" или "После перехода"
	ПостфиксЭлементов = "";
	Если ИмяПоля = "СписокНМАПредставлениеЭлементыАмортизацииДоПерехода" Тогда
		ПостфиксЭлементов = ПостфиксЭлементовДоПерехода();
	КонецЕсли;
	Для Каждого КлючИЗначение Из ЭлементыАмортизации Цикл
		// Ликвидационная стоимость появляется только после перехода, поэтому значения заполняются при условии,
		// что такое свойство в строке есть.
		ЗначениеСвойства = Неопределено;
		ТекущиеДанные.Свойство(КлючИЗначение.Ключ + ПостфиксЭлементов, ЗначениеСвойства);
		ЭлементыАмортизации[КлючИЗначение.Ключ] = ЗначениеСвойства;
	КонецЦикла;
	Возврат ЭлементыАмортизации
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксЭлементовДоПерехода()
	Возврат "ДоПерехода";
КонецФункции

&НаКлиенте
Функция НовыйЭлементыАмортизации()
	ЭлементыАмортизации = Новый Структура;
	ЭлементыАмортизации.Вставить("НеопределенныйСрокПолезногоИспользования", Ложь);
	ЭлементыАмортизации.Вставить("СпособНачисленияАмортизации", ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	ЭлементыАмортизации.Вставить("СрокПолезногоИспользования", 12);
	ЭлементыАмортизации.Вставить("ОбъемПродукцииРабот", 0);
	ЭлементыАмортизации.Вставить("Коэффициент", 1);
	ЭлементыАмортизации.Вставить("ЛиквидационнаяСтоимость", 0);
	Возврат ЭлементыАмортизации;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзменениеНераспределеннойПрибыли(ТекущиеДанные)
	Если ТекущиеДанные.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию") Тогда
		Возврат - (ТекущиеДанные.ПервоначальнаяСтоимостьДоПерехода - ТекущиеДанные.АмортизацияДоПерехода);
	Иначе
		Возврат (ТекущиеДанные.ПервоначальнаяСтоимость - ТекущиеДанные.Амортизация - ТекущиеДанные.Обесценение)
			- (ТекущиеДанные.ПервоначальнаяСтоимостьДоПерехода - ТекущиеДанные.АмортизацияДоПерехода);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПересчитатитьИзменениеНераспределеннойПрибыли()
	ТекущиеДанные = Элементы.СписокНМА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИзменениеНераспределеннойПрибыли = ИзменениеНераспределеннойПрибыли(ТекущиеДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДаныеСтрокиПриИзмененииАналитикиСервер(ДанныеСтроки, Знач ВыбранноеЗначение, Организация, Период)

	ВыбранноеЗначение.Вставить("Организация", Организация);
	ВыбранноеЗначение.Вставить("Дата", Период);
	ВыбранноеЗначение.Вставить("РаздельныйУчетНДСНаСчете19", Ложь);

	ДанныеСтроки.ПредставлениеАналитикиСписания = БухгалтерскийУчет.ПредставлениеАналитикиУчетаЗатрат(ВыбранноеЗначение);

	СуммаЗатрат = СтоимостьЗатратПоАналитикеЗатрат(ВыбранноеЗначение, Организация, Период);

	ДанныеСтроки.ПервоначальнаяСтоимость           = СуммаЗатрат;
	ДанныеСтроки.ПервоначальнаяСтоимостьДоПерехода = СуммаЗатрат;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтоимостьЗатратПоАналитикеЗатрат(Знач ВыбранноеЗначение, Знач Организация, Знач Период)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет = &Счет,
	|			,
	|			Организация = &Организация
	|				И &Условие) КАК ХозрасчетныйОстатки";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет", ВыбранноеЗначение.СчетЗатрат);
	Запрос.УстановитьПараметр("Подразделение", ВыбранноеЗначение.ПодразделениеЗатрат);
	Запрос.УстановитьПараметр("Субконто1", ВыбранноеЗначение.Субконто1);
	Запрос.УстановитьПараметр("Субконто2", ВыбранноеЗначение.Субконто2);
	Запрос.УстановитьПараметр("Субконто3", ВыбранноеЗначение.Субконто3);
	Запрос.УстановитьПараметр("Условие", Истина);
	Запрос.УстановитьПараметр("КонецГода", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ВыбранноеЗначение.СчетЗатрат);
		
	Условия = Новый Массив;
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Условия.Добавить("Подразделение = &Подразделение");
	КонецЕсли;

	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Условия.Добавить("Субконто" + XMLСтрока(НомерСубконто) + "= &Субконто"+ XMLСтрока(НомерСубконто));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Условия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", СтрСоединить(Условия, " И "));
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();

	Если Не Выборка.Следующий() Тогда
		Возврат 0;
	КонецЕсли;

	Возврат Выборка.СуммаЗатрат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма)

	Элементы = Форма.Элементы;

	Элементы.СписокНМАПервоначальнаяСтоимостьПослеПерехода.Видимость = Не Форма.СтоимостьАктивовОпределяетсяПоДаннымУчета;
	Элементы.СписокНМААмортизацияПослеПерехода.Видимость = Не Форма.СтоимостьАктивовОпределяетсяПоДаннымУчета;
	Элементы.СписокНМАОбесценение.Видимость = Не Форма.СтоимостьАктивовОпределяетсяПоДаннымУчета;
	Элементы.СписокНМАОбесценениеДоступноеДляВосстановления.Видимость = Не Форма.СтоимостьАктивовОпределяетсяПоДаннымУчета;

	Элементы.ИтогиОбесценение.Видимость = Не Форма.СтоимостьАктивовОпределяетсяПоДаннымУчета;

КонецПроцедуры

&НаСервере
Процедура ОграничитьСписокСчетовУчета()

	СчетаУчетаНМА = СчетаУчетаНМА();
	СчетаДляВыбора = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДляВыбора, СчетаУчетаНМА.СчетаСтоимости);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДляВыбора, СчетаУчетаНМА.СчетаКапитальныхВложений);

	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаДляВыбора)));

	Элементы.СписокНМАСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбораДействий()

	СписокВыбораСуществующиеНМА = Новый СписокЗначений;
	СписокВыбораСуществующиеНМА.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.Подтверждено, , , БиблиотекаКартинок.Подтверждено);
	СписокВыбораСуществующиеНМА.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.Пересмотрено, , , БиблиотекаКартинок.Пересмотрено);
	СписокВыбораСуществующиеНМА.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.КСписанию, , , БиблиотекаКартинок.КСписанию);

	СписокВыбораНовыеНМА = Новый СписокЗначений;
	СписокВыбораНовыеНМА.Добавить(Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации, , , БиблиотекаКартинок.КПереклассификации);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	Обработки.ПомощникПереходаНаФСБУ14.ЗаписатьДанныеДляПерехода(
		Объект.Организация,
		Объект.СписокНМА.Выгрузить(),
		СтоимостьАктивовОпределяетсяПоДаннымУчета);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымУчетаНаСервере()
	Объект.СписокНМА.Загрузить(Обработки.ПомощникПереходаНаФСБУ14.СписокНМА(
		Объект.Организация,
		Объект.Период,
		Истина));
	ЗаполнитьДобавленныеКолонкиСтрок();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИзменитьПоле(Список, ИмяПоля)
	// Метод ВыбратьИзМенюАсинх вторым параметром имеет элемент формы, рядом с которым будет показан список.
	// При этом в качестве элемента нельзя использовать кнопки или подменю командной панели.
	// Поэтому в качестве интерфейсной привязки используем ближайший подходящий элемент ДекорацияОтступ.
	Обещание = ВыбратьИзМенюАсинх(Список, Элементы.ДекорацияОтступ);
	Результат = Ждать Обещание;
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПолеЗавершение(Результат.Значение, ИмяПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПолеЗавершение(Значение, ИмяПоля)
	
	// В процессе изменения реквизитов может меняться видимость реквизитов, что приводит к нарушению порядка
	// массива идентификаторов выделенных строк.
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Элементы.СписокНМА.ВыделенныеСтроки);
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.СписокНМА.ДанныеСтроки(ИдентификаторСтроки);
		Если ВыделеннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяПоля = "ДействиеПриПереходе" Тогда
			Если ВыделеннаяСтрока.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации") Тогда
				Продолжить;
			КонецЕсли;
			ВыделеннаяСтрока[ИмяПоля] = Значение;
			ОбработатьИзменениеСтатусаСтроки(ВыделеннаяСтрока);
		Иначе
			ВыделеннаяСтрока[ИмяПоля] = Значение;
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ВидыНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНМА.Ссылка КАК ВидНМА
	|ИЗ
	|	Перечисление.ВидыНематериальныхАктивов КАК ВидыНМА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыНМА.Порядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Список = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.ВидНМА);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция СчетаУчетаНМА()
	Возврат Обработки.ПомощникПереходаНаФСБУ14.СчетаУчетаНМА();
КонецФункции

&НаСервереБезКонтекста
Функция ВидНМА(НематериальныйАктив)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НематериальныйАктив, "ВидНематериальногоАктива");
КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзменения(ИмяОповещения)
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаСервере();
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуСтатусов(СтрокаНМА)

	Если СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации") Тогда
		СтрокаНМА.КартинкаСтатус = 0;
	ИначеЕсли СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.Подтверждено") Тогда
		СтрокаНМА.КартинкаСтатус = 1;
	ИначеЕсли СтрокаНМА.ДействиеПриПереходе = ПредопределенноеЗначение("Перечисление.ДействияПриПереходеНаФСБУ14.Пересмотрено") Тогда
		СтрокаНМА.КартинкаСтатус = 2;
	Иначе
		СтрокаНМА.КартинкаСтатус = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАналитикуСписания(Ошибки, СведениеНМА, ИндексСтроки)
	
	// Всегда должен быть заполнен как минимум счет списания.
	// Остальная аналитика может как отсутствовать на счете, так и быть незаполненной.
	
	Если Не ЗначениеЗаполнено(СведениеНМА.СчетСписания) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указан объект учета, в составе которого ранее числился нематериальный актив'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].ПредставлениеАналитикиСписания",
			ТекстОшибки,
			,
			ИндексСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСчетаАмортизации(Ошибки, СведениеНМА, ИндексСтроки)
	
	// Счета амортизации заполняются только для новых НМА.
	Если СведениеНМА.ДействиеПриПереходе <> Перечисления.ДействияПриПереходеНаФСБУ14.КПереклассификации Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведениеНМА.СчетАмортизации) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указан счет амортизации'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].ПредставлениеПараметрыНачисленияАмортизации",
			ТекстОшибки,
			"ПредставлениеПараметрыНачисленияАмортизации",
			ИндексСтроки,
			ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведениеНМА.СпособОтраженияРасходов) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указан способ отражения расходов по амортизации'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].ПредставлениеПараметрыНачисленияАмортизации",
			ТекстОшибки,
			"ПредставлениеПараметрыНачисленияАмортизации",
			ИндексСтроки,
			ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЭлементыАмортизации(Ошибки, СведениеНМА, ИндексСтроки)
	
	Если Не СведениеНМА.НеопределенныйСрокПолезногоИспользования И Не ЗначениеЗаполнено(СведениеНМА.СпособНачисленияАмортизации) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указан способ начисления амортизации'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].ПредставлениеЭлементыАмортизацииПослеПерехода",
			ТекстОшибки,
			,
			ИндексСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуПринятияКУчету(Ошибки, СведениеНМА, ИндексСтроки)
	
	Если Не ЗначениеЗаполнено(СведениеНМА.ДатаПринятияКУчету) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указана дата принятия к учету'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].ДатаПринятияКУчету",
			ТекстОшибки,
			,
			ИндексСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьСчетаУчета(Ошибки, Знач СведениеНМА, Знач ИндексСтроки)
	
	Если Не ЗначениеЗаполнено(СведениеНМА.СчетУчета) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для ""%1"" не указан счет учета нематериального актива'"),
			СведениеНМА.НематериальныйАктив);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СписокНМА[%1].СчетУчета",
			ТекстОшибки,
			,
			ИндексСтроки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
