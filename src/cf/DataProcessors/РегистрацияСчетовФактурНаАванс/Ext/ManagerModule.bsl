#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

// Возвращает структуру параметров, которые используются при заполнении
//
Функция ПараметрыЗаполнения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("НачалоПериода", '0001-01-01');
	Результат.Вставить("КонецПериода", '0001-01-01');
	Результат.Вставить("ЗаТекущийПериод", Ложь);
	Результат.Вставить("НеПередаютсяКонтрагентам", Ложь);
	
	Возврат Результат;

КонецФункции

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт

	ДанныеДляЗаполнения = Новый Структура;

	Список = ЗаполнитьСтроки(СтруктураПараметров);
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Функция ТипыДокументовАванса() Экспорт

	Структура_ТипыДокументовАванса = Новый Структура;
	Структура_ТипыДокументовАванса.Вставить("ВозвратТоваровОтПокупателя",    Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Структура_ТипыДокументовАванса.Вставить("ДокументРасчетовСКонтрагентом", Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") );
	Структура_ТипыДокументовАванса.Вставить("КорректировкаДолга",    		 Тип("ДокументСсылка.КорректировкаДолга"));
	Структура_ТипыДокументовАванса.Вставить("КорректировкаРеализации",       Тип("ДокументСсылка.КорректировкаРеализации"));
	Структура_ТипыДокументовАванса.Вставить("ПоступлениеНаРасчетныйСчет",    Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	Структура_ТипыДокументовАванса.Вставить("ПриходныйКассовыйОрдер",     	 Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Структура_ТипыДокументовАванса.Вставить("ОплатаПлатежнойКартой",     	 Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
	Структура_ТипыДокументовАванса.Вставить("ОтчетОРозничныхПродажах",		 Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	ТипДокументаАвизо = Новый Массив;
	УчетОбособленныхПодразделений.ДобавитьТипДокументаОбособленныхПодразделений(ТипДокументаАвизо, "АвизоРасчетыВходящее");
	Если ТипДокументаАвизо.Количество() <> 0 Тогда
		Структура_ТипыДокументовАванса.Вставить("АвизоРасчетыВходящее", ТипДокументаАвизо[0]);
	КонецЕсли; 
	
	Возврат Структура_ТипыДокументовАванса;

КонецФункции

// Данные для заполнения табличной части обработки.
//
// Параметры:
//	СтруктураПараметров - Структура - Содержит значения параметров для заполнения. См. ПараметрыЗаполнения()
//
// Возвращаемое значение:
//   ТаблицаЗначений - колонки совпадают с колонками табличной части Список у обработки.
//
Функция ЗаполнитьСтроки(СтруктураПараметров) Экспорт
	
	КонтекстВыполнения = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
	КонтекстВыполнения.Вставить("ПорядокРегистрацииСчетовФактурНаАванс",
		УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
	КонтекстВыполнения.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	КонтекстВыполнения.Вставить("ТипОтчетКомиссионераОПродажах", Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	КонтекстВыполнения.Вставить("СравнениеСсылок", Новый СравнениеЗначений);
	
	КонтекстВыполнения.Вставить("СубконтоСчетаРасчетов", Новый Массив);
	КонтекстВыполнения.СубконтоСчетаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонтекстВыполнения.СубконтоСчетаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонтекстВыполнения.СубконтоСчетаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	СчетаРасчетовПоАвансамПолученным = Новый Массив;
	СчетаРасчетовПоАвансамПолученным.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	СчетаРасчетовПоАвансамПолученным.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	СчетаРасчетовПоАвансамПолученным.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаРасчетовПоАвансамПолученным", СчетаРасчетовПоАвансамПолученным);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов",            КонтекстВыполнения.СубконтоСчетаРасчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетовПоАвансамПолученным)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто В (&СубконтоСчетаРасчетов)";
	КонтекстВыполнения.Вставить("СчетаАвансов", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0)); // С учетом пользовательских счетов.
	
	ТаблицаАвансов = ПолучитьТаблицуАвансов(КонтекстВыполнения);
	
	КоличествоСтрок = ТаблицаАвансов.Количество();
	Если КоличествоСтрок = 0 Тогда
		ОбработкаОбъект = Обработки.РегистрацияСчетовФактурНаАванс.Создать();
		Возврат ОбработкаОбъект.Список.Выгрузить();
	КонецЕсли;
	
	КолонкиАвансов = ТаблицаАвансов.Колонки;
	КолонкиАвансов.Добавить("СуммаАванса",            Новый ОписаниеТипов(КолонкиАвансов.КонечныйОстаток.ТипЗначения, , "Null"));
	КолонкиАвансов.Добавить("ВалютнаяСуммаАванса",    Новый ОписаниеТипов(КолонкиАвансов.ВалютныйКонечныйОстаток.ТипЗначения, , "Null"));
	КолонкиАвансов.Добавить("КонецНалоговогоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиАвансов.Добавить("СчетФактура",            Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	КолонкиАвансов.Добавить("ДатаВыписки",            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиАвансов.Добавить("Выставлен",              Новый ОписаниеТипов("Булево"));
	
	ОпределитьРанееВыписанныеСчетаФактуры(КонтекстВыполнения, ТаблицаАвансов);
	
	ЗаполнитьСуммыАвансов(КонтекстВыполнения, ТаблицаАвансов);
	
	ОбработкаОбъект = Обработки.РегистрацияСчетовФактурНаАванс.Создать();
	ТаблицаРезультатов = ОбработкаОбъект.Список.Выгрузить();
	КоличествоСтрок = ТаблицаАвансов.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	ОбработкаОбъект = Неопределено;
	
	ТаблицаАвансов.Сортировать("ДокументОснование,ДатаВыписки", КонтекстВыполнения.СравнениеСсылок);
	РаспределитьАвансы(КонтекстВыполнения, ТаблицаАвансов, ТаблицаРезультатов);
	ТаблицаРезультатов.Сортировать("Дата,ДатаДокументаОснования,ДокументОснование", КонтекстВыполнения.СравнениеСсылок);
	
	Возврат ТаблицаРезультатов;

КонецФункции

Функция ПолучитьТаблицуАвансов(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                                  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", СтруктураПараметров.ПорядокРегистрацииСчетовФактурНаАванс);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",               СтруктураПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("СчетаАвансов",                                 СтруктураПараметров.СчетаАвансов);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов",                        СтруктураПараметров.СубконтоСчетаРасчетов);
	
	Запрос.УстановитьПараметр("КонецПериода",     Новый Граница(КонецДня(СтруктураПараметров.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоДня(СтруктураПараметров.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериодаДата", КонецДня(СтруктураПараметров.КонецПериода));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиУчетаНДС.Период КАК ПериодДействияС,
	|	НастройкиУчетаНДС.ПорядокРегистрацииСчетовФактурНаАванс КАК ПорядокРегистрацииСчетовФактурНаАванс,
	|	МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НастройкиУчетаНДС1.Период, ДЕНЬ, -1), ДЕНЬ), КОНЕЦПЕРИОДА(&КонецПериодаДата, ГОД))) КАК ПериодДействияПо
	|ПОМЕСТИТЬ УчетнаяПолитикаПериоды
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС1
	|		ПО НастройкиУчетаНДС.Период < НастройкиУчетаНДС1.Период
	|			И (НастройкиУчетаНДС1.Организация = &Организация)
	|			И (НастройкиУчетаНДС1.Период <= &КонецПериодаДата)
	|ГДЕ
	|	НастройкиУчетаНДС.Организация = &Организация
	|	И НастройкиУчетаНДС.Период <= &КонецПериодаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиУчетаНДС.ПорядокРегистрацииСчетовФактурНаАванс,
	|	НастройкиУчетаНДС.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументОснование,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И НЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток ЕСТЬ NULL
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	-1 * ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|	-1 * ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток, 0) <> 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток
	|	КОНЕЦ КАК ВалютныйНачальныйОстаток,
	|	-1 * ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК КонечныйОстаток,
	|	-1 * ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0) <> 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	|	КОНЕЦ КАК ВалютныйКонечныйОстаток
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Счет В (&СчетаАвансов),
	|			&СубконтоСчетаРасчетов,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток < 0
	|			ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.ДокументОснование КАК ДокументОснование,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСобытия,
	|	ХозрасчетныйОстатки.Контрагент КАК Контрагент,
	|	ХозрасчетныйОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ХозрасчетныйОстатки.Период КАК Период,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ХозрасчетныйОстатки.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
	|				ИЛИ ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(УчетнаяПолитикаПериоды.ПорядокРегистрацииСчетовФактурНаАванс, &ТекущийПорядокРегистрацииСчетовФактурНаАванс)
	|		ИНАЧЕ ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
	|	КОНЕЦ КАК ПорядокРегистрацииСчетовФактурНаАванс,
	|	ХозрасчетныйОстатки.НачальныйОстаток КАК НачальныйОстаток,
	|	ХозрасчетныйОстатки.ВалютныйНачальныйОстаток КАК ВалютныйНачальныйОстаток,
	|	ХозрасчетныйОстатки.КонечныйОстаток КАК КонечныйОстаток,
	|	ХозрасчетныйОстатки.ВалютныйКонечныйОстаток КАК ВалютныйКонечныйОстаток
	|ПОМЕСТИТЬ ВТРасчеты
	|ИЗ
	|	ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаПериоды КАК УчетнаяПолитикаПериоды
	|		ПО (ХозрасчетныйОстатки.Период МЕЖДУ УчетнаяПолитикаПериоды.ПериодДействияС И УчетнаяПолитикаПериоды.ПериодДействияПо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансыПоДоговорамКомиссии.СчетФактура,
	|	АвансыПоДоговорамКомиссии.ДатаСобытия,
	|	АвансыПоДоговорамКомиссии.Покупатель,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	АвансыПоДоговорамКомиссии.СтавкаНДС,
	|	АвансыПоДоговорамКомиссии.Период,
	|	АвансыПоДоговорамКомиссии.Организация,
	|	&ВалютаРегламентированногоУчета,
	|	ЛОЖЬ,
	|	&ТекущийПорядокРегистрацииСчетовФактурНаАванс,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , Организация = &Организация) КАК АвансыПоДоговорамКомиссии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.ДокументОснование КАК ДокументОснование,
	|	Расчеты.ДатаСобытия КАК ДатаСобытия,
	|	Расчеты.Контрагент КАК Контрагент,
	|	Расчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Расчеты.СтавкаНДС КАК СтавкаНДС,
	|	Расчеты.Период КАК Период,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументАвансаДата,
	|	Расчеты.Организация КАК Организация,
	|	Расчеты.ВалютаРасчетов КАК ВалютаРасчетов,
	|	Расчеты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс КАК ПорядокРегистрацииСчетовФактурНаАванс,
	|	Расчеты.НачальныйОстаток КАК НачальныйОстаток,
	|	Расчеты.ВалютныйНачальныйОстаток КАК ВалютныйНачальныйОстаток,
	|	Расчеты.КонечныйОстаток КАК КонечныйОстаток,
	|	Расчеты.ВалютныйКонечныйОстаток КАК ВалютныйКонечныйОстаток
	|ИЗ
	|	ВТРасчеты КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И Расчеты.ДокументОснование = РеквизитыДокументовОплаты.Документ
	|ГДЕ
	|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс <> ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование,
	|	ДатаСобытия,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	СтавкаНДС,
	|	Период,
	|	ДокументАвансаДата";

	// Обязательно упорядоченье по "ДокументОснование,ДатаСобытия,Контрагент,ДоговорКонтрагента" чтобы было аналогично с ОпределитьРанееВыписанныеСчетаФактуры()
	
	Структура_ТипыДокументовАванса = ТипыДокументовАванса();
	Если Структура_ТипыДокументовАванса.Количество() > 0 Тогда
		
		ОграниченияТиповДокументов = Новый Массив;
		Для Каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
			ОграниченияТиповДокументов.Добавить("Субконто3 ССЫЛКА Документ." + ТипДокументовАванса.Ключ);
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты", 
			"Организация = &Организация
	|				И (" + СтрСоединить(ОграниченияТиповДокументов, "
	|					ИЛИ ") + ")) КАК ХозрасчетныйОстаткиИОбороты");
			
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОпределитьРанееВыписанныеСчетаФактуры(СтруктураПараметров, ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаФактурыНаАванс", Перечисления.ВидСчетаФактурыВыставленного.СчетаФактурыНаАванс());
	Запрос.УстановитьПараметр("ДокументыОснования", ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ) КАК ДатаСобытия,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).ВыписыватьСчетаФактурыСводно, ЛОЖЬ) КАК ВыписыватьСчетаФактурыСводно,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Ссылка.Выставлен КАК Выставлен
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
	|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры В(&СчетаФактурыНаАванс)
	|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование,
	|	ДатаСобытия,
	|	Контрагент,
	|	ДоговорКонтрагента";
	
	// Обязательно упорядоченье по "ДокументОснование,ДатаСобытия,Контрагент,ДоговорКонтрагента" чтобы было аналогично с ПолучитьТаблицуАвансов()
	
	РезультатПоДокументам = Запрос.Выполнить();
	Если РезультатПоДокументам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	СФПоДокументам = РезультатПоДокументам.Выбрать();
	СФПоДокументам.Следующий();
	
	СравнениеСсылок = СтруктураПараметров.СравнениеСсылок;
	Для Каждого ТекущийАванс Из ТаблицаАвансов Цикл
		
		РезультатСравнения = СравнениеСсылок.Сравнить(СФПоДокументам.ДокументОснование, ТекущийАванс.ДокументОснование);
		Если РезультатСравнения > 0
		 Или РезультатСравнения = 0
		    И СФПоДокументам.ДатаСобытия > ТекущийАванс.ДатаСобытия
			И (СФПоДокументам.ВыписыватьСчетаФактурыСводно Или ТекущийАванс.ДатаСобытия <> '00010101') Тогда
			// Пропускаем строку таблицы авансов, т.к. ей нет соответствия среди счетов-фактур.
			Продолжить;
			
		ИначеЕсли РезультатСравнения < 0
		 Или РезультатСравнения = 0 И СФПоДокументам.ДатаСобытия < ТекущийАванс.ДатаСобытия Тогда
			// Подыскиваем подходящий счет-фактуру под следующий аванс.
			НайденСчетФактураКандидат = Ложь;
			Пока СФПоДокументам.Следующий() Цикл
				Если СФПоДокументам.ДатаСобытия >= ТекущийАванс.ДатаСобытия
				   И СравнениеСсылок.Сравнить(СФПоДокументам.ДокументОснование, ТекущийАванс.ДокументОснование) >= 0 Тогда
					НайденСчетФактураКандидат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не НайденСчетФактураКандидат Тогда
				// Мы прошли всю выборку. Для остальных авансов счетов-фактур нет.
				Прервать;
				
			Иначе
				
				РезультатСравнения = СравнениеСсылок.Сравнить(СФПоДокументам.ДокументОснование, ТекущийАванс.ДокументОснование);
				Если РезультатСравнения > 0
				 Или РезультатСравнения = 0
				    И СФПоДокументам.ДатаСобытия > ТекущийАванс.ДатаСобытия
					И (СФПоДокументам.ВыписыватьСчетаФактурыСводно Или ТекущийАванс.ДатаСобытия <> '00010101') Тогда
					// Пропускаем строку таблицы авансов, т.к. ей нет соответствия среди счетов-фактур.
					Продолжить;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Далее сравниваем контрагента и договор.
		
		Если СФПоДокументам.ВыписыватьСчетаФактурыСводно Тогда
			// С любыми контрагентом и договором.
			ТекущийАванс.СчетФактура = СФПоДокументам.СчетФактура;
			ТекущийАванс.ДатаВыписки = СФПоДокументам.ДатаСобытия;
			ТекущийАванс.Выставлен = СФПоДокументам.Выставлен;
			Продолжить;
			
		ИначеЕсли СФПоДокументам.Контрагент = ТекущийАванс.Контрагент
		   И (Не ЗначениеЗаполнено(СФПоДокументам.ДоговорКонтрагента)
			Или СФПоДокументам.ДоговорКонтрагента = ТекущийАванс.ДоговорКонтрагента) Тогда
			// Полностью совпадают.
			ТекущийАванс.СчетФактура = СФПоДокументам.СчетФактура;
			ТекущийАванс.ДатаВыписки = СФПоДокументам.ДатаСобытия;
			ТекущийАванс.Выставлен = СФПоДокументам.Выставлен;
			Продолжить;
			
		КонецЕсли;
		
		РезультатСравнения = СравнениеСсылок.Сравнить(СФПоДокументам.Контрагент, ТекущийАванс.Контрагент);
		РезультатСравненияДоговора = ?(ЗначениеЗаполнено(СФПоДокументам.ДоговорКонтрагента),
			СравнениеСсылок.Сравнить(СФПоДокументам.ДоговорКонтрагента, ТекущийАванс.ДоговорКонтрагента),
			0);
		Если РезультатСравнения > 0
		 Или РезультатСравнения = 0 И РезультатСравненияДоговора > 0 Тогда
			// Пропускаем строку таблицы авансов, т.к. ей нет соответствия среди счетов-фактур.
			Продолжить;
			
		ИначеЕсли РезультатСравнения < 0
		 Или РезультатСравнения = 0 И РезультатСравненияДоговора < 0 Тогда
		    // Подыскиваем подходящий счет-фактуру под следующий аванс.
			НайденСчетФактураКандидат = Ложь;
			Пока СФПоДокументам.Следующий() Цикл
				
				РезультатСравнения = СравнениеСсылок.Сравнить(СФПоДокументам.ДокументОснование, ТекущийАванс.ДокументОснование);
				Если РезультатСравнения > 0
				 Или РезультатСравнения = 0
				    И СФПоДокументам.ДатаСобытия > ТекущийАванс.ДатаСобытия
					И (СФПоДокументам.ВыписыватьСчетаФактурыСводно Или ТекущийАванс.ДатаСобытия <> '00010101') Тогда
					РезультатСравнения = 1;
					НайденСчетФактураКандидат = Истина;
					Прервать;
				КонецЕсли;
				
				РезультатСравнения = СравнениеСсылок.Сравнить(СФПоДокументам.Контрагент, ТекущийАванс.Контрагент);
				Если РезультатСравнения < 0 Тогда
					Продолжить;
				КонецЕсли;
					
				РезультатСравненияДоговора = ?(ЗначениеЗаполнено(СФПоДокументам.ДоговорКонтрагента),
					СравнениеСсылок.Сравнить(СФПоДокументам.ДоговорКонтрагента, ТекущийАванс.ДоговорКонтрагента),
					0);
				Если РезультатСравненияДоговора >= 0 Тогда
					НайденСчетФактураКандидат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Если Не НайденСчетФактураКандидат Тогда
				// Мы прошли всю выборку. Для остальных авансов счетов-фактур нет.
				Прервать;
				
			Иначе
				
				Если РезультатСравнения > 0
				 Или РезультатСравнения = 0 И РезультатСравненияДоговора > 0 Тогда
					// Пропускаем строку таблицы авансов, т.к. ей нет соответствия среди счетов-фактур.
					Продолжить;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Нашли подходящий счет-фактуру.
		ТекущийАванс.СчетФактура = СФПоДокументам.СчетФактура;
		ТекущийАванс.ДатаВыписки = СФПоДокументам.ДатаСобытия;
		ТекущийАванс.Выставлен = СФПоДокументам.Выставлен;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыАвансов(СтруктураПараметров, ТаблицаАвансов)
	
	КоличествоСтрок = ТаблицаАвансов.Количество();
	
	ПоискПартии = Новый Структура("ДокументОснование, ДатаСобытия, ДоговорКонтрагента, СтавкаНДС, Контрагент");
	ТипОтчетКомиссионераОПродажах = СтруктураПараметров.ТипОтчетКомиссионераОПродажах;
	ПропускатьДалее = Ложь;
	Инд = 0;
	Пока Инд < КоличествоСтрок Цикл
		
		ТекущаяСтрока = ТаблицаАвансов[Инд];
		Если ПоискПартии.ДокументОснование = ТекущаяСтрока.ДокументОснование
		   И ПоискПартии.ДатаСобытия = ТекущаяСтрока.ДатаСобытия
		   И ПоискПартии.ДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента
		   И ПоискПартии.СтавкаНДС = ТекущаяСтрока.СтавкаНДС
		   И ПоискПартии.Контрагент = ТекущаяСтрока.Контрагент Тогда
		   
			Если ПропускатьДалее Тогда
				
				ТаблицаАвансов.Удалить(ТекущаяСтрока);
				КоличествоСтрок = КоличествоСтрок - 1;
				Продолжить;
				
			КонецЕсли;
		   
	 	Иначе
			
			ПропускатьДалее = Ложь;
			ПоискПартии.ДокументОснование  = ТекущаяСтрока.ДокументОснование;
			ПоискПартии.ДатаСобытия        = ТекущаяСтрока.ДатаСобытия;
			ПоискПартии.ДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента;
			ПоискПартии.СтавкаНДС          = ТекущаяСтрока.СтавкаНДС;
			ПоискПартии.Контрагент         = ТекущаяСтрока.Контрагент;
			ПорядокРегистрацииСчетовФактурНаАванс = ТекущаяСтрока.ПорядокРегистрацииСчетовФактурНаАванс;
			
		КонецЕсли;
		
		ЭтоОтчетКомиссионераОПродажах = (ТипЗнч(ТекущаяСтрока.ДокументОснование) = ТипОтчетКомиссионераОПродажах);
		ДатаПоступленияАванса = ?(ЭтоОтчетКомиссионераОПродажах, ТекущаяСтрока.ДатаСобытия, ТекущаяСтрока.ДокументАвансаДата);
		Если СтруктураПараметров.ЗаТекущийПериод
		   И (ДатаПоступленияАванса < НачалоДня(СтруктураПараметров.НачалоПериода)
			Или ДатаПоступленияАванса > КонецДня(СтруктураПараметров.КонецПериода)) Тогда
			
			ТаблицаАвансов.Удалить(ТекущаяСтрока);
			КоличествоСтрок = КоличествоСтрок - 1;
			Продолжить;
			
		КонецЕсли;
		
		// Вычислим крайнюю дату зачета аванса
		Если ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
			ДатаЗачетаАванса = ?(КонецДня(ДатаПоступленияАванса + 345600) > КонецКвартала(ДатаПоступленияАванса),
				КонецКвартала(ДатаПоступленияАванса), КонецДня(ДатаПоступленияАванса + 345600));
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
			ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
			ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
			ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
		Иначе
			ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
		КонецЕсли;
		Если ДатаЗачетаАванса < СтруктураПараметров.НачалоПериода Тогда
			ДатаЗачетаАванса = СтруктураПараметров.НачалоПериода;
		КонецЕсли;
		
		Если ДатаЗачетаАванса > КонецДня(ТекущаяСтрока.Период)
		 Или ТекущаяСтрока.КонечныйОстаток = 0 И КонецДня(ДатаЗачетаАванса) = КонецДня(ТекущаяСтрока.Период) Тогда
		 
			ТаблицаАвансов.Удалить(ТекущаяСтрока);
			КоличествоСтрок = КоличествоСтрок - 1;
			Продолжить;
		 
		КонецЕсли;
		
		Если ЭтоОтчетКомиссионераОПродажах Или КонецДня(ДатаЗачетаАванса) = КонецДня(ТекущаяСтрока.Период) Тогда
			СуммаАванса = ТекущаяСтрока.КонечныйОстаток;
			ВалютнаяСуммаАванса = ТекущаяСтрока.ВалютныйКонечныйОстаток;
		Иначе
			СуммаАванса = ТекущаяСтрока.НачальныйОстаток;
			ВалютнаяСуммаАванса = ТекущаяСтрока.ВалютныйНачальныйОстаток;
		КонецЕсли;
		Если СуммаАванса = 0 Тогда
			
			ТаблицаАвансов.Удалить(ТекущаяСтрока);
			КоличествоСтрок = КоличествоСтрок - 1;
			Продолжить;
			
		КонецЕсли;

		Если ТекущаяСтрока.ДатаВыписки = '00010101' Тогда
			ТекущаяСтрока.ДатаВыписки = ?(ДатаЗачетаАванса > ТекущаяСтрока.Период, ТекущаяСтрока.Период, ДатаЗачетаАванса);
		КонецЕсли;
		ТекущаяСтрока.КонецНалоговогоПериода = КонецКвартала(ТекущаяСтрока.ДокументАвансаДата);
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СчетФактура)
		 Или НачалоДня(ТекущаяСтрока.ДатаВыписки) >= НачалоДня(СтруктураПараметров.НачалоПериода) Тогда
			
			ТекущаяСтрока.СуммаАванса = СуммаАванса;
			ТекущаяСтрока.ВалютнаяСуммаАванса = ВалютнаяСуммаАванса;
			
		Иначе
			
			ТаблицаАвансов.Удалить(ТекущаяСтрока);
			КоличествоСтрок = КоличествоСтрок - 1;
			Продолжить;
			
		КонецЕсли;

		Инд = Инд + 1;
		ПропускатьДалее = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДокументовОснований(СтруктураПараметров, ТаблицаАвансов)
	
	ТаблицаУникальныхЗначений = ТаблицаАвансов.Скопировать(, "ДокументОснование,ДоговорКонтрагента");
	ТаблицаУникальныхЗначений.Свернуть("ДокументОснование");
	ДокументыОснования = ТаблицаУникальныхЗначений.ВыгрузитьКолонку(0);
	
	ТипОтчетКомиссионераОПродажах = СтруктураПараметров.ТипОтчетКомиссионераОПродажах;
	
	ЕстьРасшифровкаПлатежа = Ложь;
	ЕстьСчетНаОплату = Ложь;
	ПредыдущийТип = Неопределено;
	ОписаниеТипа = Неопределено;
	
	// Получаем информацию для построения запроса.
	УдаляемыеСтроки = Новый Массив;
	ИспользуемыеТипы = Новый Структура;
	Для Каждого ДокОснование Из ДокументыОснования Цикл
		
		ТипДокумента = ТипЗнч(ДокОснование);
		Если ТипДокумента = ТипОтчетКомиссионераОПродажах Тогда
			ПредыдущийТип = ТипДокумента;
			Продолжить;
		КонецЕсли;
		Если ПредыдущийТип <> ТипДокумента Тогда
			
			ПредыдущийТип = ТипДокумента;
			
			МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
			Если ИспользуемыеТипы.Свойство(МетаданныеДокумента.Имя, ОписаниеТипа) Тогда
				
				СписокДокументовТипа   = ОписаниеТипа.СписокДокументовТипа;
				ЕстьРасшифровкаПлатежа = ОписаниеТипа.ЕстьРасшифровкаПлатежа;
				ЕстьСчетНаОплату       = ОписаниеТипа.ЕстьСчетНаОплату;
				
			Иначе
				
				МетаданныеТЧ = МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа");
				ЕстьРасшифровкаПлатежа = (МетаданныеТЧ <> Неопределено);
				ЕстьСчетНаОплату = ?(ЕстьРасшифровкаПлатежа, МетаданныеТЧ.Реквизиты.Найти("СчетНаОплату") <> Неопределено, Ложь);
				СписокДокументовТипа = Новый Массив;
				
				ОписаниеТипа = Новый Структура;
				ОписаниеТипа.Вставить("СписокДокументовТипа",   СписокДокументовТипа);
				ОписаниеТипа.Вставить("ЕстьРасшифровкаПлатежа", ЕстьРасшифровкаПлатежа);
				ОписаниеТипа.Вставить("ЕстьСчетНаОплату",       ЕстьСчетНаОплату);
				ИспользуемыеТипы.Вставить(МетаданныеДокумента.Имя, ОписаниеТипа);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокДокументовТипа.Добавить(ДокОснование);
		
	КонецЦикла;
	
	// Формируем текст запроса.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаУчетаРасчетовПоАвансам", СтруктураПараметров.СчетаАвансов);
	
	ТекстыЗапросов = Новый Массив;
	ТекстЭталонногоЗапроса =
	"ВЫБРАТЬ
	|	ДокументРасшифровкаПлатежа.Ссылка КАК ДокументОснование,
	|	ДокументРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокументРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ДокументРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ДокументРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ДокументРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ДокументРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументРасшифровкаПлатежа
	|ГДЕ
	|	ДокументРасшифровкаПлатежа.Ссылка В(&Список)";
	Для Каждого Описание Из ИспользуемыеТипы Цикл
		
		ОписаниеТипа = Описание.Значение;
		Если Не ОписаниеТипа.ЕстьРасшифровкаПлатежа Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЭталонногоЗапроса, "ПоступлениеНаРасчетныйСчет", Описание.Ключ);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Список", "&" + Описание.Ключ + "Список");
		Если Не ОписаниеТипа.ЕстьСчетНаОплату Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"ДокументРасшифровкаПлатежа.СчетНаОплату",
				"ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)");
		КонецЕсли;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(Описание.Ключ + "Список", ОписаниеТипа.СписокДокументовТипа);
		
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияИЗ = СтрНайти(ТекстыЗапросов[0], Символы.ПС + "ИЗ");
	ТекстыЗапросов[0] = Лев(ТекстыЗапросов[0], ПозицияИЗ - 1) + "
	|ПОМЕСТИТЬ ДанныеДокументов" + Сред(ТекстыЗапросов[0], ПозицияИЗ);
	
	ТекстыЗапросов[ТекстыЗапросов.ВГраница()] = ТекстыЗапросов[ТекстыЗапросов.ВГраница()] +	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|");
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Ссылка КАК СчетНаОплату,
	|	СчетНаОплатуПокупателюТовары.Ссылка.СуммаСкидки <> 0 КАК ЕстьОбщаяСкидкаПоСчету,
	|	СчетНаОплатуПокупателюТовары.Ссылка.СуммаДокумента КАК СуммаПоСчетуНаОплату,
	|	СУММА(СчетНаОплатуПокупателюТовары.СуммаНДС) КАК СуммаНДСПоСчетуНаОплату
	|ПОМЕСТИТЬ СуммыПоСчетам
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ДанныеДокументов.СчетНаОплату КАК СчетНаОплату
	|			ИЗ
	|				ДанныеДокументов КАК ДанныеДокументов
	|			ГДЕ
	|				ДанныеДокументов.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателюТовары.Ссылка,
	|	СчетНаОплатуПокупателюТовары.Ссылка.СуммаСкидки <> 0,
	|	СчетНаОплатуПокупателюТовары.Ссылка.СуммаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокументов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеДокументов.ДоговорКонтрагента.УчетАгентскогоНДСПокупателем КАК УчетАгентскогоНДСПокупателем,
	|	ДанныеДокументов.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ДанныеДокументов.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеДокументов.СуммаПлатежа КАК СуммаПлатежа,
	|	ДанныеДокументов.СчетНаОплату КАК СчетНаОплату,
	|	СуммыПоСчетам.ЕстьОбщаяСкидкаПоСчету КАК ЕстьОбщаяСкидкаПоСчету,
	|	СуммыПоСчетам.СуммаПоСчетуНаОплату КАК СуммаПоСчетуНаОплату,
	|	СуммыПоСчетам.СуммаНДСПоСчетуНаОплату КАК СуммаНДСПоСчетуНаОплату
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоСчетам КАК СуммыПоСчетам
	|		ПО ДанныеДокументов.СчетНаОплату = СуммыПоСчетам.СчетНаОплату
	|ГДЕ
	|	ДанныеДокументов.СчетУчетаРасчетовПоАвансам В(&СчетаУчетаРасчетовПоАвансам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|ИТОГИ ПО
	|	ДокументОснование";
	
	// Обязательно упорядоченье по "ДокументОснование" чтобы было аналогично с ПолучитьТаблицуАвансов()
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура РаспределитьАвансы(СтруктураПараметров, ТаблицаАвансов, ТаблицаРезультатов)
	
	ОчередностьРаспределения = Новый Массив;
	ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.ПустаяСсылка());
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	КолонкиАвансов = ТаблицаАвансов.Колонки;
	ТаблицаПоСтавкам = Новый ТаблицаЗначений;
	КолонкиСтавок = ТаблицаПоСтавкам.Колонки;
	КолонкиСтавок.Добавить("СпособПогашенияЗадолженности", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПогашенияЗадолженности"));
	КолонкиСтавок.Добавить("СтавкаНДС",                    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	КолонкиСтавок.Добавить("Сумма",                        КолонкиАвансов.СуммаАванса.ТипЗначения);
	КолонкиСтавок.Добавить("ВалютнаяСумма",                КолонкиАвансов.ВалютнаяСуммаАванса.ТипЗначения);
	КолонкиСтавок.Добавить("СчетНаОплату",                 Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	КолонкиСтавок.Добавить("СуммаПоСчетуНаОплату",         КолонкиАвансов.СуммаАванса.ТипЗначения);
	КолонкиСтавок.Добавить("СуммаНДСПоСчетуНаОплату",      КолонкиАвансов.СуммаАванса.ТипЗначения);
	
	ТаблицаПоСтавкамСРаспределением = ТаблицаПоСтавкам.СкопироватьКолонки();
	
	ОтборСтрокПлатежа = Новый Структура("СпособПогашенияЗадолженности");
	УчетАгентскогоНДСПокупателем = Ложь;
	ТипОтчетКомиссионераОПродажах = СтруктураПараметров.ТипОтчетКомиссионераОПродажах;
	ВалютаРегламентированногоУчета = СтруктураПараметров.ВалютаРегламентированногоУчета;
	
	ДанныеОснований = ПолучитьДанныеДокументовОснований(СтруктураПараметров, ТаблицаАвансов);
	Если ДанныеОснований = Неопределено Тогда
		ЕстьДанныеДокументов = Ложь;
	Иначе
		ВыборкаОснований = ДанныеОснований.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЕстьДанныеДокументов = ВыборкаОснований.Следующий();
	КонецЕсли;
	
	СравнениеСсылок = СтруктураПараметров.СравнениеСсылок;
	Для Каждого ТекущаяСтрока Из ТаблицаАвансов Цикл

		ТипДокумента = ТипЗнч(ТекущаяСтрока.ДокументОснование);
		
		ВалютаДокумента = ТекущаяСтрока.ВалютаРасчетов;
		Если Не ЗначениеЗаполнено(ВалютаДокумента)
		 Или ТекущаяСтрока.РасчетыВУсловныхЕдиницах
		 Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКонтрагента) И ТипДокумента <> ТипОтчетКомиссионераОПродажах Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтрПлатежа = Неопределено;
		ЕстьРаспределение = ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование);
		Если ЕстьРаспределение И ТипДокумента <> ТипОтчетКомиссионераОПродажах Тогда 
			
			Пока ЕстьДанныеДокументов Цикл
				
				РезультатСравнения = СравнениеСсылок.Сравнить(ТекущаяСтрока.ДокументОснование, ВыборкаОснований.ДокументОснование);
				Если РезультатСравнения > 0 Тогда // продвигаемся по выборке
					ЕстьДанныеДокументов = ВыборкаОснований.Следующий();
					Продолжить;
				КонецЕсли;
					
				Если РезультатСравнения = 0 Тогда // распределяем
					СтрПлатежа = ВыборкаОснований.Выбрать();
				Иначе // нет данных для распределения
					ЕстьРаспределение = Ложь;
				КонецЕсли;
				Прервать;
				
			КонецЦикла;
			Если Не ЕстьДанныеДокументов Тогда
				ЕстьРаспределение = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЕстьРаспределение Тогда
			
			СтрокаТП                        = ТаблицаРезультатов.Добавить();
			СтрокаТП.Дата                   = ТекущаяСтрока.ДатаВыписки;
			СтрокаТП.ДатаДокументаОснования = ТекущаяСтрока.ДокументАвансаДата;
			СтрокаТП.Контрагент             = ТекущаяСтрока.Контрагент;
			СтрокаТП.ДоговорКонтрагента     = ТекущаяСтрока.ДоговорКонтрагента;
			СтрокаТП.ДокументОснование      = ТекущаяСтрока.ДокументОснование;
			СтрокаТП.ВалютаДокумента        = ВалютаДокумента;
			СтрокаТП.Сумма                  = ТекущаяСтрока.СуммаАванса;
			СтрокаТП.СтавкаНДС              = УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПользователя(ТекущаяСтрока.ДокументАвансаДата);

			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВалютнаяСуммаАванса) 
			 Или ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				СтрокаТП.ВалютнаяСумма      = СтрокаТП.Сумма;
			Иначе
				СтрокаТП.ВалютнаяСумма      = ТекущаяСтрока.ВалютнаяСуммаАванса;
			КонецЕсли;
			СтрокаТП.СчетФактура            = ТекущаяСтрока.СчетФактура;
			СтрокаТП.Выставлен              = ТекущаяСтрока.Выставлен;
			СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс = ТекущаяСтрока.ПорядокРегистрацииСчетовФактурНаАванс;
			СтрокаТП.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				СтрокаТП.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТП.СтавкаНДС));
				
			Продолжить;
			
		КонецЕсли;
		
		Если ТипДокумента = ТипОтчетКомиссионераОПродажах Тогда

			ИндексСтрокиАванса = ТаблицаАвансов.Индекс(ТекущаяСтрока);
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКонтрагента) Тогда
				УчетАгентскогоНДСПокупателем = Ложь;
			ИначеЕсли ИндексСтрокиАванса = 0
			 Или ТекущаяСтрока.ДоговорКонтрагента <> ТаблицаАвансов[ИндексСтрокиАванса - 1].ДоговорКонтрагента Тогда
				// Для оптимизации не делаем запрос, если договор тот же, что раньше
				УчетАгентскогоНДСПокупателем = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ТекущаяСтрока.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
			КонецЕсли;
			
			СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
			СтрокаПоСтавке.СтавкаНДС     = ТекущаяСтрока.СтавкаНДС;
			СтрокаПоСтавке.Сумма         = ТекущаяСтрока.СуммаАванса;
			СтрокаПоСтавке.ВалютнаяСумма = ТекущаяСтрока.СуммаАванса;

		Иначе

			Пока СтрПлатежа.Следующий() Цикл
				
				Если СтрПлатежа.ДоговорКонтрагента <> ТекущаяСтрока.ДоговорКонтрагента Тогда
					Продолжить;
				КонецЕсли;
				
				УчетАгентскогоНДСПокупателем = СтрПлатежа.УчетАгентскогоНДСПокупателем;
				
				ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
				Если ТекСтавкаНДС = Неопределено Тогда
					ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
				КонецЕсли;
				
				СтрокаПоСтавке 				 = ТаблицаПоСтавкам.Добавить();
				СтрокаПоСтавке.СпособПогашенияЗадолженности = СтрПлатежа.СпособПогашенияЗадолженности;
				СтрокаПоСтавке.СтавкаНДС 	 = ТекСтавкаНДС;
				СтрокаПоСтавке.Сумма 		 = СтрПлатежа.СуммаПлатежа;
				СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
				
				Если Не ЗначениеЗаполнено(СтрПлатежа.СчетНаОплату) Тогда
					Продолжить;
				КонецЕсли;
					
				СтрокаПоСтавке.СчетНаОплату            = СтрПлатежа.СчетНаОплату;
				СтрокаПоСтавке.СуммаПоСчетуНаОплату    = СтрПлатежа.СуммаПоСчетуНаОплату;
				СтрокаПоСтавке.СуммаНДСПоСчетуНаОплату = СтрПлатежа.СуммаНДСПоСчетуНаОплату;
				
				Если СтрПлатежа.ЕстьОбщаяСкидкаПоСчету <> Истина Тогда
					Продолжить;
				КонецЕсли;
					
				СтрокаПоСтавке.СуммаНДСПоСчетуНаОплату = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаПоСтавке.СуммаПоСчетуНаОплату, Истина,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПоСтавке.СтавкаНДС));
				
			КонецЦикла;
			Если ТаблицаПоСтавкам.Количество() > 1 Тогда
				ТаблицаПоСтавкам.Свернуть(
					"СпособПогашенияЗадолженности,СтавкаНДС,СчетНаОплату,СуммаПоСчетуНаОплату,СуммаНДСПоСчетуНаОплату",
					"Сумма,ВалютнаяСумма");
			КонецЕсли;
			
		КонецЕсли;
		
		НераспределеннаяСумма    = ТекущаяСтрока.СуммаАванса;
		НераспределеннаяСуммаВал = ТекущаяСтрока.ВалютнаяСуммаАванса;
		РаспределятьСуммуВал = ВалютаДокумента <> ВалютаРегламентированногоУчета И ЗначениеЗаполнено(НераспределеннаяСуммаВал);
		Если ТаблицаПоСтавкам.Итог("Сумма") < НераспределеннаяСумма Тогда
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(НераспределеннаяСумма, ТаблицаПоСтавкам, "Сумма");
		КонецЕсли;
		
		ЕдинственнаяСтрокаРаспределения = (ТаблицаПоСтавкам.Количество() = 1);
		Для каждого СпособПогашения Из ОчередностьРаспределения Цикл
			Если НераспределеннаяСумма <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ЕдинственнаяСтрокаРаспределения Тогда
				// Любой способ погашения.
				СтрПлатежа = ТаблицаПоСтавкам[0];
				
				СтрокаПоСтавке = ТаблицаПоСтавкамСРаспределением.Добавить();
				СтрокаПоСтавке.СтавкаНДС 	                = СтрПлатежа.СтавкаНДС;
				СтрокаПоСтавке.СчетНаОплату                 = СтрПлатежа.СчетНаОплату;
				СтрокаПоСтавке.СуммаПоСчетуНаОплату         = СтрПлатежа.СуммаПоСчетуНаОплату;
				СтрокаПоСтавке.СуммаНДСПоСчетуНаОплату      = СтрПлатежа.СуммаНДСПоСчетуНаОплату;
				
				СтрокаПоСтавке.Сумма = Мин(НераспределеннаяСумма, СтрПлатежа.Сумма);
				СтрокаПоСтавке.ВалютнаяСумма = ?(РаспределятьСуммуВал, Мин(НераспределеннаяСуммаВал, СтрПлатежа.ВалютнаяСумма), СтрокаПоСтавке.Сумма);
				
				Прервать;
				
			КонецЕсли;
			
			ОтборСтрокПлатежа.СпособПогашенияЗадолженности = СпособПогашения;
			ТаблицаПоСпособуПогашения = ТаблицаПоСтавкам.Скопировать(ОтборСтрокПлатежа);
			Если ТаблицаПоСпособуПогашения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РаспределяемаяСумма = Мин(НераспределеннаяСумма, ТаблицаПоСпособуПогашения.Итог("Сумма"));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, ТаблицаПоСпособуПогашения, "Сумма");
			НераспределеннаяСумма = НераспределеннаяСумма - РаспределяемаяСумма;
			Если РаспределятьСуммуВал Тогда
				РаспределяемаяСуммаВал = Мин(НераспределеннаяСуммаВал, ТаблицаПоСпособуПогашения.Итог("ВалютнаяСумма"));
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСуммаВал, ТаблицаПоСпособуПогашения, "ВалютнаяСумма");
				НераспределеннаяСуммаВал = НераспределеннаяСуммаВал - РаспределяемаяСуммаВал;
			Иначе
				ТаблицаПоСпособуПогашения.ЗагрузитьКолонку(ТаблицаПоСпособуПогашения.ВыгрузитьКолонку("Сумма"), "ВалютнаяСумма");
			КонецЕсли;
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоСпособуПогашения, ТаблицаПоСтавкамСРаспределением);
				
		КонецЦикла;
		ТаблицаПоСтавкам.Очистить();
		Если Не ЕдинственнаяСтрокаРаспределения Тогда
			ТаблицаПоСтавкамСРаспределением.Свернуть("СтавкаНДС,СчетНаОплату,СуммаПоСчетуНаОплату,СуммаНДСПоСчетуНаОплату", "Сумма,ВалютнаяСумма");
		КонецЕсли;
		
		Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкамСРаспределением Цикл

			Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			 Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС И Не УчетАгентскогоНДСПокупателем Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТП = ТаблицаРезультатов.Добавить();
			
			Если ТипДокумента = ТипОтчетКомиссионераОПродажах Тогда
				СтрокаТП.ДатаДокументаОснования	= ТекущаяСтрока.ДатаСобытия;
				СтрокаТП.Дата                   = ТекущаяСтрока.ДатаСобытия;
			Иначе
				СтрокаТП.ДатаДокументаОснования	= ТекущаяСтрока.ДокументАвансаДата;
				СтрокаТП.Дата                   = ТекущаяСтрока.ДатаВыписки;
			КонецЕсли;
			
			СтрокаТП.Контрагент         = ТекущаяСтрока.Контрагент;
			СтрокаТП.ДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента;
			СтрокаТП.ДокументОснование  = ТекущаяСтрока.ДокументОснование;
			СтрокаТП.СчетНаОплату       = СтрокаПоСтавке.СчетНаОплату;
			СтрокаТП.ВалютаДокумента    = ВалютаДокумента;
			СтрокаТП.Сумма              = СтрокаПоСтавке.Сумма;
			СтрокаТП.ВалютнаяСумма      = СтрокаПоСтавке.ВалютнаяСумма;
			Если УчетАгентскогоНДСПокупателем Тогда 
				СтрокаТП.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(СтрокаТП.ДатаДокументаОснования);
			Иначе
				СтрокаТП.СтавкаНДС = СтрокаПоСтавке.СтавкаНДС;
			КонецЕсли;
			СтрокаТП.СчетФактура        = ТекущаяСтрока.СчетФактура;
			СтрокаТП.Выставлен          = ТекущаяСтрока.Выставлен;
			
			Если УчетАгентскогоНДСПокупателем Тогда
				// При реализации товаров п.8 ст.161 НК сумма НДС рассчитывается покупателем.
				СтрокаТП.СуммаНДС = 0;
			ИначеЕсли ЗначениеЗаполнено(СтрокаПоСтавке.СчетНаОплату)
			   И СтрокаПоСтавке.Сумма = СтрокаПоСтавке.СуммаПоСчетуНаОплату Тогда
				// 100% оплата по счету, сумму НДС возьмем из счета на оплату.
				СтрокаТП.СуммаНДС = СтрокаПоСтавке.СуммаНДСПоСчетуНаОплату;
			Иначе
				СтрокаТП.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаТП.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТП.СтавкаНДС));
			КонецЕсли;
			
			СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс = ТекущаяСтрока.ПорядокРегистрацииСчетовФактурНаАванс;

		КонецЦикла;
		ТаблицаПоСтавкамСРаспределением.Очистить();

	КонецЦикла;
	
КонецПроцедуры

// ПРОЦЕДУРЫ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

Процедура СформироватьСчетаФактуры(СтруктураПараметров, АдресХранилища) Экспорт

	Список = СтруктураПараметров.ТаблицыСчетовФактур.Список;
	НеиспользуемыеСчетаФактуры = СтруктураПараметров.ТаблицыСчетовФактур.НеиспользуемыеСчетаФактуры;

	ЕстьОшибки = ВыполнитьФормированиеСчетовФактурНаАванс(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры);

	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
					НачалоКвартала(СтруктураПараметров.НачалоПериода),
					СтруктураПараметров.Организация, Неопределено, Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс, НЕ ЕстьОшибки);	
	КонецЕсли; 
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Функция ВыполнитьФормированиеСчетовФактурНаАванс(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры)

	Если СтруктураПараметров.Свойство("ОчиститьСписокНеиспользуемыхСчетовФактур")
		И СтруктураПараметров.ОчиститьСписокНеиспользуемыхСчетовФактур Тогда
		НеиспользуемыеСчетаФактуры.Очистить();
	КонецЕсли;

	Если СтруктураПараметров.Свойство("УстановитьПометкиУдаления")
		И СтруктураПараметров.УстановитьПометкиУдаления Тогда
		УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры);
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ИспользуетсяГособоронзаказ = ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ");
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);

	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	
	КолонкаСчетФактура = Список.ВыгрузитьКолонку("СчетФактура");
	СписокСФ = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(КолонкаСчетФактура , Истина);
	Для Каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			Попытка
				СчФ = СчФ.Ссылка.ПолучитьОбъект();
				СчФ.УстановитьПометкуУдаления(Истина);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Не удалось пометить на удаление счет-фактуру выданный
					|%1'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Пометка на удаление счета-фактуры выданного'"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.СчетФактураВыданный,,
					ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	ТаблицаОснований = Список.Скопировать(, "Дата,ДокументОснование,ДоговорКонтрагента");
	ТаблицаОснований.Колонки.Добавить("КонтрагентСводно", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОснований.Колонки.Добавить("ВыписыватьСчетаФактурыСводно", Новый ОписаниеТипов("Булево"));
	
	// Таблицу "ТаблицаОснований" заполним договором только для документов 
	// по договорам с признаком УчетАгентскогоНДСПокупателем, по таким документам формируем 
	// отдельные счета-фактуры на каждый договор.
	// По прочим основаниям формируем счета-фактуры на аванс без договора.
	ТаблицаОснованийСДоговором = Список.Скопировать(, "ДокументОснование,ДоговорКонтрагента");
	
	ДоговорУчетАгентскогоНДСПокупателем = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Список.ВыгрузитьКолонку("ДоговорКонтрагента"),
		"УчетАгентскогоНДСПокупателем");
	
	// Соберем документы-основания счетов-фактур в которых указан 
	// договор с признаком "УчетАгентскогоНДСПокупателем" (реализация товаров п.8 ст. 161 НК).
	ОснованияУчетАгентскогоНДСПокупателем = Новый Массив; 
	Для Каждого СтрокаТаблицы Из ТаблицаОснованийСДоговором Цикл
		УчетАгентскогоНДСПокупателемПоДоговору = ДоговорУчетАгентскогоНДСПокупателем[СтрокаТаблицы.ДоговорКонтрагента];
		Если УчетАгентскогоНДСПокупателемПоДоговору = Истина Тогда 
			ОснованияУчетАгентскогоНДСПокупателем.Добавить(СтрокаТаблицы.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	// Очистим в таблице "ТаблицаОснований" договор для оснований в которых нет 
	// договора с признаком "УчетАгентскогоНДСПокупателем" (реализация товаров п.8 ст. 161 НК).
	Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ГосударственныйКонтракт");
		Если ОснованияУчетАгентскогоНДСПокупателем.Найти(СтрокаТаблицы.ДокументОснование) = Неопределено 
			И Не ЗначениеЗаполнено(ГосКонтракт) Тогда 
			СтрокаТаблицы.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	// Свернем таблицу оснований по которым будут генерироваться счета-фактуры. 
	ТаблицаОснований.Свернуть("Дата,ДокументОснование,ДоговорКонтрагента,КонтрагентСводно,ВыписыватьСчетаФактурыСводно");
	
	ОтчетыКомиссионера = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОтчетыКомиссионера.Добавить(СтрокаТаблицы.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтчетыКомиссионера);
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтчетыКомиссионера, 
		"Контрагент,ВыписыватьСчетаФактурыСводно");
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		РеквизитыДокумента = РеквизитыДокументов[СтрокаТаблицы.ДокументОснование];
		Если РеквизитыДокумента <> Неопределено Тогда
			СтрокаТаблицы.КонтрагентСводно = РеквизитыДокумента.Контрагент;
			СтрокаТаблицы.ВыписыватьСчетаФактурыСводно = РеквизитыДокумента.ВыписыватьСчетаФактурыСводно;
		КонецЕсли;
	КонецЦикла;
	
	КлючевыеПоля       = "ДокументОснование,Контрагент,Дата";
	КлючевыеПоляСводно = "ДокументОснование,Дата";
	//Для оснований с договором "УчетАгентскогоНДСПокупателем" дополнительно используем договор
	КлючевыеПоляУчетАгентскогоНДСПокупателем = "ДокументОснование,Контрагент,ДоговорКонтрагента,Дата";
	
	СтруктураОтбора       = Новый Структура("ДокументОснование,Контрагент,Дата");
	СтруктураОтбораСводно = Новый Структура("ДокументОснование,Дата");
	//Для оснований с договором "УчетАгентскогоНДСПокупателем" дополнительно используем договор
	СтруктураОтбораУчетАгентскогоНДСПокупателем = Новый Структура("ДокументОснование,Контрагент,ДоговорКонтрагента,Дата");
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	УчетПо84ФЗ    = УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(СтруктураПараметров.КонецПериода);
	Если Не ПлательщикНДС И УчетПо84ФЗ Тогда
		ВидСчетФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
	Иначе
		ВидСчетФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	КонецЕсли;
	
	СчетаФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.СчетаФактурыНаАванс();
	
	Для каждого СтрокаДокумента Из ТаблицаОснований Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда //договор в таблице заполнен только для оснований с договором "УчетАгентскогоНДСПокупателем"
			КлючевыеПоляДокумента = КлючевыеПоляУчетАгентскогоНДСПокупателем;
			СтруктураОтбораСФ     = СтруктураОтбораУчетАгентскогоНДСПокупателем;
		ИначеЕсли СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда 
			КлючевыеПоляДокумента = КлючевыеПоляСводно;
			СтруктураОтбораСФ     = СтруктураОтбораСводно;
		Иначе
			КлючевыеПоляДокумента = КлючевыеПоля;
			СтруктураОтбораСФ     = СтруктураОтбора;
		КонецЕсли;
		
		// Для общего документа-основания 
		// на каждого контрагента и дату аванса выписывается отдельный счет-фактура.
		// По отчету комиссионера может выписываться сводный счет-фактура на каждую дату аванса по всем контрагентам.
		// Если в документе-основании есть договор с признаком "УчетАгентскогоНДСПокупателем", то по такому основанию 
		// будет сгенерировано несколько счетов-фактур на каждый договор.
		ТаблицаКлючевыхПолей = Список.Скопировать(Новый Структура("Дата, ДокументОснование", СтрокаДокумента.Дата, СтрокаДокумента.ДокументОснование),
			КлючевыеПоляДокумента);
		
		ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоляДокумента);
		
		Для каждого СтрокаКлючевыхПолей Из ТаблицаКлючевыхПолей Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораСФ, СтрокаКлючевыхПолей);
			
			СтрокиСФ = Список.НайтиСтроки(СтруктураОтбораСФ);
			
			ТЧАвансыСтарые = Новый Соответствие;
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Для каждого СтрокаСФ Из СтрокиСФ Цикл
				
				Если СчФ = Неопределено
					ИЛИ ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
					И ЗначениеЗаполнено(СтрокаСФ.СчетФактура)
					И СчФ.Ссылка <> СтрокаСФ.СчетФактура Тогда
					
					Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
						И ЗначениеЗаполнено(СтрокаСФ.СчетФактура)
						И СчФ.Ссылка <> СтрокаСФ.СчетФактура Тогда
						ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки);
					КонецЕсли;
					
					// Создать/использовать Счет-фактуру
					Если СтрокаСФ.СчетФактура <> ПустаяСсылкаСФ Тогда
						СчФ = СтрокаСФ.СчетФактура.ПолучитьОбъект();
						
						Если СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
							// Пользователь ранее переквалифицировал данный авансовый платеж в доплату 
							// (в рамках переходных положений по повышению ставки НДС с 18 до 20%),
							// обрабатывать такой документ не нужно.
							СчФ.ПометкаУдаления = Ложь;
							Продолжить;
						КонецЕсли;
						
						ДоговорКонтрагентаПоСчетуФактуре = СчФ.ДоговорКонтрагента;
						// Если счет-фактура выписан по договору и договор счета-фактуры не совпадает с договором из табличной части обработки, 
						// то пропускаем такой счет-фактуру.
						Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
							И СчФ.ДоговорКонтрагента <> СтрокаСФ.ДоговорКонтрагента Тогда 
							Продолжить;
						КонецЕсли;
						
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы Тогда
						СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
						Если СчФ = Неопределено Тогда
							ИспользоватьРанееОбнаруженныеДокументы = Ложь;
							СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
							СчФ.Ответственный = Ответственный;
							Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
								// Договор в таблице заполнен только для оснований с договором "УчетАгентскогоНДСПокупателем"
								ДоговорКонтрагентаПоСчетуФактуре = СтрокаСФ.ДоговорКонтрагента;
							Иначе
								ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
							КонецЕсли;
							
						Иначе
							СчФ.Использован = Истина;
							СчФ = СчФ.Ссылка.ПолучитьОбъект();
							ДоговорКонтрагентаПоСчетуФактуре = СчФ.ДоговорКонтрагента;
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
						Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
							// Договор в таблице заполнен только для оснований с договором "УчетАгентскогоНДСПокупателем"
							ДоговорКонтрагентаПоСчетуФактуре = СтрокаСФ.ДоговорКонтрагента;
						Иначе
							ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
					// Если в счете-фактуре заполнен договор, то перезаполняем его из табличной части обработки, 
					// иначе оставляем пустым
					ИсключаемыеСвойства = ?(ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре), "", "ДоговорКонтрагента");
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаСФ,,ИсключаемыеСвойства);
					СчФ.Организация = СтруктураПараметров.Организация;
					
					Если СчетаФактурыНаАванс.Найти(СчФ.ВидСчетаФактуры) = Неопределено Тогда
						СчФ.ВидСчетаФактуры = ВидСчетФактурыНаАванс;
					КонецЕсли;
					
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					СчФ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
					
					Если УчетНДСПереопределяемый.НаличиеСоглашенияОбменаЭД(СчФ.ДокументОснование) Тогда
						СчФ.КодСпособаВыставления = 2;
						СчФ.Выставлен = Ложь;
						СчФ.ДатаВыставления = '00010101';
					ИначеЕсли СтруктураПараметров.НеПередаютсяКонтрагентам Тогда
						СчФ.КодСпособаВыставления = 1;
						СчФ.Выставлен = Ложь;
						СчФ.ДатаВыставления = '00010101';
					Иначе
						СчФ.КодСпособаВыставления = 1;
						СчФ.Выставлен = Истина;
						СчФ.ДатаВыставления = ?(СчФ.Дата = '00010101', ОбщегоНазначения.ТекущаяДатаПользователя(), СчФ.Дата);
					КонецЕсли;
					
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаСФ.ДокументОснование;
					
					СчФ.СуммаДокумента = СтрокаСФ.ВалютнаяСумма;
					
					СчФ.Авансы.Очистить();
					
					СчФ.ПометкаУдаления = Ложь;
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					ТипОснования = ТипЗнч(СтрокаСФ.ДокументОснование);
					
					СчФ.ПлатежноРасчетныеДокументы.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
						
						СписокРеквизитов = "НомерВходящегоДокумента,ДатаВходящегоДокумента";
						
						ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(СчФ.Дата);
						ЗаполнятьИдентификаторГосКонтракта = ВедетсяУчетНДСПоФЗ56
							И ИспользуетсяГособоронзаказ
							И НЕ ЗначениеЗаполнено(СчФ.ИдентификаторГосКонтракта);
						
						РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчФ.ДокументОснование, СписокРеквизитов);
						СчФ.НомерПлатежноРасчетногоДокумента = РеквизитыДокумента.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента = РеквизитыДокумента.ДатаВходящегоДокумента;
						Если ЗаполнятьИдентификаторГосКонтракта Тогда 
							ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчФ.ДоговорКонтрагента, "ГосударственныйКонтракт");
							Если ЗначениеЗаполнено(ГосКонтракт) Тогда 
								ИдентификаторГосКонтракта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГосКонтракт, "Код");
								СчФ.ИдентификаторГосКонтракта = ИдентификаторГосКонтракта;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
						РеквизитыПРД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчФ.ДокументОснование, 
							"Номер,Дата");
						СчФ.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
							РеквизитыПРД.Номер, Истина, Истина);
						СчФ.ДатаПлатежноРасчетногоДокумента = РеквизитыПРД.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента  = Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ПлатежноРасчетныеДокументы.Добавить();
					СтрокаПРД.ДатаДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерДокумента = СчФ.НомерПлатежноРасчетногоДокумента;
					
				Иначе
					СчФ.Сумма 		   = СчФ.Сумма + СтрокаСФ.Сумма;
					СчФ.СуммаНДС 	   = СчФ.СуммаНДС + СтрокаСФ.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаСФ.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке 	  = СтрокаСФ.Сумма;
				СуммаНДСПоСтроке  = СтрокаСФ.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаСФ.СтавкаНДС;
				
				Если ЗначениеЗаполнено(СтрокаСФ.СчетНаОплату) Тогда
					ТаблицаАвансов = ПолучитьНоменклатуруСчетаНаОплату(
						СтрокаСФ.СчетНаОплату, СтрокаСФ, СчФ.Авансы.ВыгрузитьКолонки());
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, СчФ.Авансы);
					РазницаВСумме    = СчФ.Сумма - СчФ.Авансы.Итог("Сумма");
					РазницаВСуммеНДС = СчФ.СуммаНДС - СчФ.Авансы.Итог("СуммаНДС");
					Если (РазницаВСумме <> 0 ИЛИ РазницаВСуммеНДС <> 0) И СчФ.Авансы.Количество() > 0 Тогда
						СтрокаСМаксимальнойСуммой = СчФ.Авансы[0];
						Для НомерСтроки = 1 По СчФ.Авансы.Количество() - 1 Цикл
							Если СчФ.Авансы[НомерСтроки].Сумма > СтрокаСМаксимальнойСуммой.Сумма Тогда
								СтрокаСМаксимальнойСуммой = СчФ.Авансы[НомерСтроки];
							КонецЕсли;
						КонецЦикла;
						СтрокаСМаксимальнойСуммой.Сумма    = СтрокаСМаксимальнойСуммой.Сумма + РазницаВСумме;
						СтрокаСМаксимальнойСуммой.СуммаНДС = СтрокаСМаксимальнойСуммой.СуммаНДС + РазницаВСуммеНДС;
					КонецЕсли;
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаСФ.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам 			 = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание 	 = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма 		 = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС 	 = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС 	 = СтрокаСФ.СтавкаНДС;
								СуммаПоСтроке 					 = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке 				 = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма 				 = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС 			 = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;
								Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
									НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							НоваяСтрокаПоСуммам 			 = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Сумма 		 = СуммаПоСтроке;
							НоваяСтрокаПоСуммам.СуммаНДС 	 = СуммаНДСПоСтроке;
							НоваяСтрокаПоСуммам.СтавкаНДС 	 = СтрокаСФ.СтавкаНДС;
							НоваяСтрокаПоСуммам.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаСФ.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
							Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
								НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаСФ, , "Контрагент");
						НоваяСтрокаПоСуммам.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							СтрокаСФ.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
						Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
							НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МассивПокупателей = СчФ.Авансы.ВыгрузитьКолонку("Контрагент");
			МассивРазличныхПокупателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПокупателей);
			СчФ.СводныйКомиссионный = МассивРазличныхПокупателей.Количество() > 1;
			
			ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(СчФ.Дата);
			
			Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(СчФ.Дата) Тогда
				Если СчФ.СводныйКомиссионный Тогда
					СчФ.КодВидаОперации = "28";
					Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
						СчФ.Контрагент        = СтрокаДокумента.КонтрагентСводно;
						СчФ.ДоговорКонтрагента = Неопределено;
					КонецЕсли;
				ИначеЕсли СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
					И ВерсияКодовВидовОпераций < 3 Тогда
					СчФ.КодВидаОперации = "05";
				ИначеЕсли ТипЗнч(СчФ.ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					СчФ.КодВидаОперации = "26";
				ИначеЕсли ЗначениеЗаполнено(СчФ.ДоговорКонтрагента)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчФ.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем") = Истина Тогда 
					СчФ.КодВидаОперации = "33";
				Иначе
					СчФ.КодВидаОперации = "02";
				КонецЕсли;
			КонецЕсли;
			
			Если СчФ.ЭтоНовый() Тогда
				ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(СчФ);
			КонецЕсли;
			
			ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;

КонецФункции

Процедура ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки)
	
	Попытка
		СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Для каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре) 
				И СтрокаСФ.ДоговорКонтрагента <> ДоговорКонтрагентаПоСчетуФактуре Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаСФ.СФсформирован = Истина;
			СтрокаСФ.СчетФактура   = СчФ.Ссылка;
		КонецЦикла;
		
	Исключение
		
		Для каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре) 
				И СтрокаСФ.ДоговорКонтрагента <> ДоговорКонтрагентаПоСчетуФактуре Тогда 
				Продолжить;
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось записать счет-фактуру выданный
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Запись счета-фактуры выданного'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СчетФактураВыданный,,
				ТекстСообщения);
			СтрокаСФ.СФсформирован = Ложь;
			СтрокаСФ.СчетФактура   = Неопределено;
			
		КонецЦикла;
		ЕстьОшибки = Истина;
		
	КонецПопытки;

КонецПроцедуры

Процедура УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры)

	Для Каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
		Попытка
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось пометить на удаление счет-фактуру выданный
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Пометка на удаление счета-фактуры выданного'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СчетФактураВыданный,,
				ТекстСообщения);

		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьНоменклатуруСчетаНаОплату(СчетНаОплату, СтрокаОтбора, ТаблицаРезультата)

	Сумма    = СтрокаОтбора.Сумма;
	СуммаНДС = СтрокаОтбора.СуммаНДС;
	
	НаименованиеДляСчетаФактурыНаАванс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтбора.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
	ДокументОснованиеДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтбора.ДокументОснование, "Дата");
	
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);

	СтавкиНДС = Новый СписокЗначений;
	СтавкиНДС.Добавить(СтрокаОтбора.СтавкаНДС);
	СтавкиНДС.Добавить(СоответствиеСтавок[СтрокаОтбора.СтавкаНДС]);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|	КОНЕЦ КАК СуммаБезНДС,
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
	|	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
	|	И СчетНаОплатуПокупателюТовары.СуммаНДС > 0
	|	И СчетНаОплатуПокупателюТовары.Сумма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() И Сумма > 0 Тогда
		
		ТаблицаПоСчетуНаОплату = Результат.Выгрузить();
		ТаблицаПоСчетуНаОплату.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		ТаблицаПоСчетуНаОплату.ЗагрузитьКолонку(
			ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				Сумма, ТаблицаПоСчетуНаОплату.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
				
		МассивРаспределения = Новый Массив;

		Для Каждого СтрокаСчетаНаОплату Из ТаблицаПоСчетуНаОплату Цикл

			СтруктураКурсов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаСчетаНаОплату.ВалютаДокумента, ДокументОснованиеДата);

			Если СтрокаСчетаНаОплату.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				СтрокаСчетаНаОплату.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаСчетаНаОплату.Сумма,
					СтрокаСчетаНаОплату.ВалютаДокумента, 
					Константы.ВалютаРегламентированногоУчета.Получить(),
					СтруктураКурсов.Курс, 1,
					СтруктураКурсов.Кратность, 1);
					
				СтрокаСчетаНаОплату.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаСчетаНаОплату.Сумма, 
					Истина, 
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаСчетаНаОплату.СтавкаНДС));
					
				СтрокаСчетаНаОплату.СуммаБезНДС = СтрокаСчетаНаОплату.Сумма - СтрокаСчетаНаОплату.СуммаНДС;
				
			КонецЕсли;

			МассивРаспределения.Очистить();
			МассивРаспределения.Добавить(СтрокаСчетаНаОплату.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаСчетаНаОплату.СуммаНДС);

			РезультатРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаСчетаНаОплату.СуммаРаспределение, МассивРаспределения);

			Если РезультатРаспределения <> Неопределено Тогда

				СтрокаСчетаНаОплату.СуммаНДС    = Мин(СтрокаСчетаНаОплату.СуммаНДС, РезультатРаспределения[1]);
				СтрокаСчетаНаОплату.СуммаБезНДС = Мин(СтрокаСчетаНаОплату.СуммаБезНДС, РезультатРаспределения[0]);
				СтрокаСчетаНаОплату.Сумма       = СтрокаСчетаНаОплату.СуммаБезНДС + СтрокаСчетаНаОплату.СуммаНДС;

				ДобавитьСтрокуАвансы(
					ТаблицаРезультата, 
					СтрокаСчетаНаОплату.Номенклатура, 
					СтрокаСчетаНаОплату.Содержание, 
					СтрокаСчетаНаОплату.Сумма, 
					СтрокаСчетаНаОплату.СуммаНДС, 
					СтрокаСчетаНаОплату.СтавкаНДС);

				Сумма    = Сумма - СтрокаСчетаНаОплату.Сумма;
				СуммаНДС = СуммаНДС - СтрокаСчетаНаОплату.СуммаНДС;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Сумма <> 0 Тогда
		ДобавитьСтрокуАвансы(
			ТаблицаРезультата, 
			НаименованиеДляСчетаФактурыНаАванс,
			, 
			Сумма, 
			СуммаНДС, 
			СтрокаОтбора.СтавкаНДС);
	КонецЕсли;

	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");

	Возврат ТаблицаРезультата;

КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС)

	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);

	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;

	Если ПустаяСтрока(НоваяСтрока.Содержание)
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
		НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
	КонецЕсли;

	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СоответствиеСтавок[СтавкаНДС];
	
КонецПроцедуры

Процедура СформироватьСчетаФактурыВПомощнике(СтруктураПараметров) Экспорт
	
	Список = ЗаполнитьСтроки(СтруктураПараметров);
	Список = Список.Скопировать(Новый Структура("Выставлен", Ложь));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления)
	|	И НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС
	|	И НЕ СчетФактураВыданный.Выставлен
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления",
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"), Истина));
	
	НеиспользуемыеСчетаФактуры = Запрос.Выполнить().Выгрузить();
	НеиспользуемыеСчетаФактуры.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	ЕстьОшибки = ВыполнитьФормированиеСчетовФактурНаАванс(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры);
	
	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
					НачалоКвартала(СтруктураПараметров.НачалоПериода),
					СтруктураПараметров.Организация, Неопределено, Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс, НЕ ЕстьОшибки);
	КонецЕсли; 
	
КонецПроцедуры

#КонецЕсли