#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНачалоРаботы = ПолучитьФункциональнуюОпцию("НачалоРаботы");
	НавигацияПараметрФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НавигацияПараметрФормы");
	
	Если Параметры.УтратаПраваНПД Тогда
		РежимРаботыПомощника = РежимыРаботыПомощника().УтратаПраваНПД;
	ИначеЕсли ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		РежимРаботыПомощника = РежимыРаботыПомощника().РегистрацияОрганизации;
	ИначеЕсли ЭтоНачалоРаботы И ТарификацияБПВызовСервераПовтИсп.НачинатьРаботуСоСравненияРежимовНалогообложения() Тогда
		РежимРаботыПомощника = РежимыРаботыПомощника().НачалоРаботы;
	Иначе
		РежимРаботыПомощника = РежимыРаботыПомощника().Основной;
	КонецЕсли;
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Параметры,
		"Организация",
		Справочники.Организации.ОрганизацияПоУмолчанию());
	
	РезультатСравненияРежимов = НовыйРезультатСравненияРежимов();
	ЗагрузитьПоставляемыеДанные();
	УстановитьПараметрыФормы();
	ПрочитатьСтавкиНалоговИВзносов();
	ПрочитатьПорогиПрименимостиНалоговыхРежимов();
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаОсновная");
	
	УправлениеФормойПриСозданииНаСервере();
	РазместитьНавигацию("Налоги");
	
	УстановитьПодсказкиДляУСН();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗапроситьДифференциациюПотенциальногоДохода() Тогда
		СравнитьРежимыНалогообложения(ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		Оповестить("ОткрытШагПомощника_УтратаПраваНПД", НавигацияНомерШага, ЭтотОбъект);
	Иначе
		РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
			РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
			НавигацияНомерШага);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПомощникУтратыПраваНПД = ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника);
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" И Не ЭтоПомощникУтратыПраваНПД Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ЭтоПомощникУтратыПраваНПД И ИмяСобытия = "ОткрытШагПомощника_УтратаПраваНПД" Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Или ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Настройки.Удалить("ЮридическоеФизическоеЛицо");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодОКВЭД2) И Настройки["КодОКВЭД2"] <> КодОКВЭД2 Тогда
		Настройки.Удалить("КодОКВЭД2");
		Настройки.Удалить("ВидДеятельностиЕНВД");
	КонецЕсли;
	
	// ВыбранныйРежим сохраняется в данных формы.
	// Восстанавливать сохраненное значение нужно только в том случае, когда форма открыта на начальной странице.
	Если Настройки.Получить("ВыбранныйРежим") <> Неопределено
		И РежимРаботыПомощника <> РежимыРаботыПомощника().НачалоРаботы
		И РежимРаботыПомощника <> РежимыРаботыПомощника().УтратаПраваНПД Тогда
		
		Настройки.Удалить("ВыбранныйРежим");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодРегионаРегистрации) Тогда
		Настройки.Удалить("КодРегионаРегистрации");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СохраненныйРезультат = Настройки.Получить("РезультатСравненияРежимов");
	
	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		СохраненныйРезультатОрганизация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СохраненныйРезультат, "Организация");
		ЗаполнитьСохраненнымиЗначениями = (СохраненныйРезультатОрганизация = Организация);
	Иначе
		ЗаполнитьСохраненнымиЗначениями = Истина;
	КонецЕсли;
	
	Если СохраненныйРезультат <> Неопределено И ЗаполнитьСохраненнымиЗначениями Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныйРезультат);
		
		Если СохраненныйРезультат.Свойство("Ставки") Тогда
			Для Каждого ИмяСтавки Из СтавкиИзменяемыеПользователем() Цикл
				Если СохраненныйРезультат.Ставки[ИмяСтавки] <> СохраненныйРезультат[ИмяСтавки] Тогда
					РезультатСравненияРежимов[ИмяСтавки] = СохраненныйРезультат[ИмяСтавки];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РаскраситьРеквизитыВыбранногоРежима();
	
	СоотнестиВидДеятельностиОКВЭД2иПСН();
	СоотнестиВидДеятельностиОКВЭД2иЕНВД(Истина);
	СоотнестиВидДеятельностиОКВЭД2иНПД();
	СоотнестиВидДеятельностиОКВЭД2иАУСН();
	ВидДеятельностиЕНВДПриИзмененииНаСервере(Ложь);
	
	УстановитьПредставлениеВидаДеятельностиОКВЭД2();
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
			СтруктураНавигацииПомощника = НалогНаПрофессиональныйДоходВызовСервера.НавигацияПомощника(ВыбранныйРежим, Организация);
			Если СтруктураНавигацииПомощника.Свойство(НавигационнаяСсылкаФорматированнойСтроки) Тогда
				РазместитьНавигацию(СтруктураНавигацииПомощника[НавигационнаяСсылкаФорматированнойСтроки].ТекстНавигации);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Иначе
			СохранитьДанныеПомощникаРегистрации();
			РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(
				НавигационнаяСсылкаФорматированнойСтроки,
				СтандартнаяОбработка);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Настройки" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ", Организация), ЭтотОбъект);
		
	Иначе
		
		ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
			НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодРегионаРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаРегистрацииПриИзменении(Элемент)
	
	Если Не ЗапроситьДифференциациюПотенциальногоДохода() Тогда
		СравнитьРежимыНалогообложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторМуниципальногоОбразованияПриИзменении(Элемент)
	
	ЗапроситьРазмерыПотенциальногоДохода();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторМуниципальногоОбразованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторМуниципальногоОбразованияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВидаДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийКод", КодОКВЭД2);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборВидаДеятельностиОКВЭД2Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборВидаДеятельности", ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПатентаПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУзнатьСтоимостьПатентаНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://patent.nalog.ru/info/");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиЕНВДПриИзменении(Элемент)
	
	ВидДеятельностиЕНВДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиПСНПриИзменении(Элемент)
	
	ЗапроситьРазмерыПотенциальногоДохода();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиПСННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресСпискаВидовДеятельности = ПоместитьВоВременноеХранилище(Элементы.КодВидаДеятельностиПСН.СписокВыбора);
	
	ПараметрыВыбораВидаДеятельности = Новый Структура;
	ПараметрыВыбораВидаДеятельности.Вставить("КодВидаДеятельности", КодВидаДеятельностиПСН);
	ПараметрыВыбораВидаДеятельности.Вставить("АдресСпискаВидовДеятельности", АдресСпискаВидовДеятельности);
	
	ОткрытьФорму("ОбщаяФорма.ВыборВидаДеятельностиПатентнойСистемы",
		ПараметрыВыбораВидаДеятельности,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиПСНАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиПСНОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ОбщегоНазначенияБПКлиент.ДанныеВыбораИзСписка(Элемент.СписокВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРегиональныеОсобенностиНалоговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УказатьРегиональныеСтавки" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("УстановкаРегиональныхСтавокЗавершение", ЭтотОбъект);
		ПараметрыФормы = ПараметрыФормыЛьготныеУсловияНалоговыхРежимов();
		ОткрытьФорму("Обработка.СравнениеРежимовНалогообложения.Форма.ФормаСтавкиНалогов",
			ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоДоходыПриИзменении(Элемент)
	
	ДоходыОтЮридическихЛиц = ИтогоДоходы;
	ДоходыОтФизическихЛиц = 0;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыОтЮридическихЛицПриИзменении(Элемент)
	
	ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыОтФизическихЛицПриИзменении(Элемент)
	
	ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	Если Расходы < ФондОплатыТруда Тогда
		ФондОплатыТруда = Расходы;
	КонецЕсли;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФондОплатыТрудаПриИзменении(Элемент)
	
	Если ФондОплатыТруда > Расходы Тогда
		ФондОплатыТруда = Расходы;
		ТекстСообщения = НСтр("ru='Зарплата не может превышать расходы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФондОплатыТруда");
	КонецЕсли;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СредняяЧисленностьРаботниковПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказательПСНПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказательЕНВДПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимОСНОИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыРасходыИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимАУСНДоходыИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();

КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимАУСНДоходыМинусРасходыИППриИзменении(Элемент)

	ПриИзмененииВыбранногоРежима();

КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимЕНВДИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйРежимПСНИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйРежимНПДИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимОСНООООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыРасходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимАУСНДоходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();

КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимАУСНДоходыМинусРасходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();

КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимЕНВДОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеОСНОИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ОСНОИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыРасходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыРасходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеАУСНДоходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("АУСНДоходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеАУСНДоходыМинусРасходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("АУСНДоходыРасходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеЕНВДИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ЕНВДИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеПСНИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ПСНИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеНПДИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("НПДИП");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаОСНОИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаАУСНДоходыИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаАУСНДоходыМинусРасходыИПОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаАУСНДоходыООООчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыРасходыИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаАУСНДоходыМинусРасходыООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаЕНВДИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаПСНИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаНПДИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеОСНООООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ОСНОООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыРасходыОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыРасходыООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеАУСНДоходыОООНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("АУСНДоходыООО");

КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеАУСНДоходыМинусРасходыОООНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("АУСНДоходыРасходыООО");

КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеЕНВДОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ЕНВДООО");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаОСНОООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыРасходыООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаЕНВДООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	ОбновитьПредставлениеПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("СкрытьДоверенностьЭДО", Истина);
	ПараметрыФормы.Вставить("ИмяФормы", "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителяСервисеРегистрации");
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы,
		ЭтотОбъект,
		КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеОПереходеНаУСННажатие(Элемент)
	
	НалогНаПрофессиональныйДоходКлиент.УведомлениеОПереходенНаУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымИнформационннойБазы(Команда)
	
	Если КоличествоОрганизацийДанныеКоторыхДоступныПользователю > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьДаннымиИнформационнойБазыЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.СравнениеРежимовНалогообложения.Форма.ФормаВыбораДанныхЗаполнения", ,
			ЭтотОбъект, , , , ОписаниеОповещения);
	Иначе
		ЗаполнитьПоДаннымИнформационннойБазыНаСервере();
		ЗапроситьДифференциациюПотенциальногоДохода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ВозможныеРежимы = РежимыРаботыПомощника();
	Если РежимРаботыПомощника = ВозможныеРежимы.РегистрацияОрганизации Тогда
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	ИначеЕсли РежимРаботыПомощника = ВозможныеРежимы.НачалоРаботы Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаОсновная");
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли РежимРаботыПомощника = ВозможныеРежимы.УтратаПраваНПД Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаявление Тогда
			ИмяТекущейСтраницы = "Налоги";
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда
			ИмяТекущейСтраницы = "Заявление";
		КонецЕсли;
		
		РазместитьНавигацию(ИмяТекущейСтраницы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбранныйРежим) Тогда
		ТекстСообщения = НСтр("ru = 'Выберите налоговый режим для продолжения регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыбранныйРежим",);
		Возврат;
	КонецЕсли;
	
	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		
		Если НавигацияПараметрФормы = "Заявление" И Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Выберите способ подачи уведомления'"), ,
				"СпособПодачиДокументов");
			Возврат;
		КонецЕсли;
		
		СформироватьДокументы();
		ПриПереходеКСледующемуШагуУтратаПраваНПДНаСервере();
		
		Если ВыбранныйРежим = "ПСНИП" Тогда
			НавигацияПомощниковКлиент.ОбработатьНавигационнуюСсылку(
				НалогНаПрофессиональныйДоходКлиентСервер.НавигационнаяСсылкаШага(НавигацияПараметрФормы),
				НалогНаПрофессиональныйДоходВызовСервера.НавигацияПомощника(ВыбранныйРежим, Организация));
		КонецЕсли;
		
	Иначе
		СохранитьДанныеПомощникаРегистрации();
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодробнееОРежиме(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбранныйРежим) Тогда
		ТекстСообщения = НСтр("ru = 'Выберите налоговый режим для продолжения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыбранныйРежим",);
		Возврат;
	КонецЕсли;
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаПодробнееОРежиме");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	Если ОрганизацияСоздана() Тогда
		Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
		ПодготовитьКонстантыДляНачалаРаботы();
		ОбщегоНазначенияБПКлиент.ОткрытьНачалоРаботыВСервисе();
		ОбновитьИнтерфейс();
	Иначе
		ПараметрыНачалаРаботы = ПараметрыНачалаРаботы();
		СохранитьРежимРаботыБыстрыйСтартНаСервере();
		СохранитьПараметрыНачалаРаботы(ПараметрыНачалаРаботы);
		ОбщегоНазначенияБПКлиент.ОткрытьБыстрыйСтарт(ПараметрыНачалаРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеУСН(Команда)
	
	НалогНаПрофессиональныйДоходКлиент.УведомлениеОПереходенНаУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Организация, , , , , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПодсказкиДляУСН()
	ШаблонПодсказки = НСтр(
	"ru='С 1 января %1 года действуют границы применения УСН:
	| - граница доходов до %2 млн. рублей
	| - граница средней численности работников до %3 человек'");
	
	ГодПримененияГраницы = Формат(ТекущаяДатаСеанса(), "ДФ=yyyy");
	ГраницаПримененияУСН = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияПовышеннойСтавкиУСН(ТекущаяДатаСеанса()) / 1000000;
	ГраницаЧисленностиРаботниковПримененияУСН = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияПовышеннойСтавкиУСН(ТекущаяДатаСеанса());

	ТекстПодсказки = Новый ФорматированнаяСтрока(СтрШаблон(
		ШаблонПодсказки,
		ГодПримененияГраницы,
		ГраницаПримененияУСН,
		ГраницаЧисленностиРаботниковПримененияУСН));
	
	Элементы.ИтогоКУплатеУСНДоходыИП.Подсказка = ТекстПодсказки;
	Элементы.ИтогоКУплатеУСНДоходыРасходыИП.Подсказка = ТекстПодсказки;
	Элементы.ИтогоКУплатеУСНДоходыООО.Подсказка = ТекстПодсказки;
	Элементы.ИтогоКУплатеУСНДоходыРасходыООО.Подсказка = ТекстПодсказки;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоставляемыеДанные()
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru='%1 %2 %3'"); // например: "77 Москва г".
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		КодРегиона = ОписаниеТипаСтрока.ПривестиЗначение(Регион.КодСубъектаРФ);
		Если СтрДлина(КодРегиона) = 1 Тогда
			КодРегиона = "0" + КодРегиона;
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			КодРегиона,
			Регион.Наименование,
			Регион.Сокращение);
		Элементы.КодРегионаРегистрации.СписокВыбора.Добавить(КодРегиона, Представление);
	КонецЦикла;
	
	Элементы.КодРегионаРегистрации.СписокВыбора.СортироватьПоПредставлению();
	
	МакетСоответствияВидовДеятельности =
		Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("СоответствиеВидовДеятельностиОКВЭД2иЕНВД");
	СтрокаXML = МакетСоответствияВидовДеятельности.ПолучитьТекст();
	СоответствиеВидовДеятельности.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML));
	
	МакетКодовОграниченийЕНВД = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("КодыОграниченийЕНВД");
	СтрокаXML = МакетКодовОграниченийЕНВД.ПолучитьТекст();
	КодыОграниченийЕНВД.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML));
	
	Если ВидыДеятельностиПопадающиеПодПСН.Количество() > 0 Тогда
		ВидыДеятельностиПопадающиеПодПСН.Очистить();
	КонецЕсли;
	
	МакетКлассификатора =
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет(
			"КлассификаторВидовПредпринимательскойДеятельностиПСН");
	КлассификаторПСН = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетКлассификатора.ПолучитьТекст());
	Для Каждого СтрокаКлассификатора Из КлассификаторПСН Цикл
		Если ЗначениеЗаполнено(СтрокаКлассификатора.СоответствующиеКодыОКВЭД) Тогда
			Для Каждого СоответствующийКод Из СтрокаКлассификатора.СоответствующиеКодыОКВЭД Цикл
				СтрокаВидовДеятельностиПСН = ВидыДеятельностиПопадающиеПодПСН.Добавить();
				СтрокаВидовДеятельностиПСН.КодОКВЭД2 = СоответствующийКод.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	КлассификаторОКВЭД2 = РегистрыСведений.КлассификаторОКВЭД2.ФиксированноеСоответствиеКодНаименование();
	АдресКлассификатораОКВЭД = ПоместитьВоВременноеХранилище(КлассификаторОКВЭД2, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФормы()
	
	КрасныйЦвет             = ЦветаСтиля.СравнениеРежимовНалогообложенияВысокаяНагрузкаЦвет;
	ЖелтыйЦвет              = ЦветаСтиля.СравнениеРежимовНалогообложенияСредняяНагрузкаЦвет;
	ЗеленыйЦвет             = ЦветаСтиля.СравнениеРежимовНалогообложенияНизкаяНагрузкаЦвет;
	СерыйЦвет               = ЦветаСтиля.СравнениеРежимовНалогообложенияНагрузкаНеРасчитанаЦвет;
	ЦветФонаФормы           = ЦветаСтиля.ЦветФонаФормы;
	ЦветФонаВыбраннойГруппы = ЦветаСтиля.ВыделеннаяКнопкаФон;
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДатаПереходаНаЕдиныйТарифСтраховыхВзносов = УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Параметры,
		"Организация",
		Справочники.Организации.ОрганизацияПоУмолчанию());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПрименяетсяНПД = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(
			Организация,
			ТекущаяДатаПользователя);
	Иначе
		ПрименяетсяНПД = Ложь;
	КонецЕсли;
	
	ЕстьУтратаПраваНПД = (ПрименяетсяНПД И ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника));
	
	НалоговыеРежимы = Новый Структура(); 
	// Ключ - идентификатор режима, значение - досутупен выбор режима (если Ложь, то недоступен, иначе доступен)
	НалоговыеРежимы.Вставить("ОСНОИП");
	НалоговыеРежимы.Вставить("ОСНОООО");
	НалоговыеРежимы.Вставить("УСНДоходыИП");
	НалоговыеРежимы.Вставить("УСНДоходыООО");
	НалоговыеРежимы.Вставить("УСНДоходыРасходыИП");
	НалоговыеРежимы.Вставить("УСНДоходыРасходыООО");
	НалоговыеРежимы.Вставить("АУСНДоходыООО");
	НалоговыеРежимы.Вставить("АУСНДоходыМинусРасходыООО");
	НалоговыеРежимы.Вставить("ЕНВДИП");
	НалоговыеРежимы.Вставить("ЕНВДООО");
	НалоговыеРежимы.Вставить("ПСНИП");
	
	Если Не ЕстьУтратаПраваНПД Тогда
		НалоговыеРежимы.Вставить("АУСНДоходыИП");
		НалоговыеРежимы.Вставить("АУСНДоходыМинусРасходыИП");
		НалоговыеРежимы.Вставить("НПДИП");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ВидОрганизации) Тогда
		ЮридическоеФизическоеЛицо = Параметры.ВидОрганизации;
	КонецЕсли;
	
	Если ЕстьУтратаПраваНПД Тогда
		
		ПараметрыЗаполнения = Новый Структура("Организация, СистемаНалогообложения");
		ПараметрыЗаполнения.Организация = Организация;
		ПараметрыЗаполнения.СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(
			Организация,
			ТекущаяДатаПользователя);
		
		НачалоПериода = НачалоГода(ТекущаяДатаПользователя);
		КонецПериода = КонецМесяца(ТекущаяДатаПользователя);
		
		ИтогоДоходы = НалогНаПрофессиональныйДоходВызовСервера.СуммаДоходов(Организация, НачалоПериода, КонецПериода);
		КодОКВЭД2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД2");
		ЗаполнитьРегионРегистрацииПоАдресу(Организация);
		
		КоличествоОрганизацийДанныеКоторыхДоступныПользователю = 1;
		
		ДанныеУведомленияОПереходеНаУСН = НалогНаПрофессиональныйДоходВызовСервера.УведомлениеОПереходеНаУСНсНПД(Организация);
		Если ДанныеУведомленияОПереходеНаУСН <> Неопределено Тогда
			УведомлениеОПереходеНаУСН = ДанныеУведомленияОПереходеНаУСН.Ссылка;
		КонецЕсли;
		
	Иначе
		
		ВосстановитьДанныеПомощникаРегистрации();
		
		ДоходыОтЮридическихЛиц = 12000000;
		ДоходыОтФизическихЛиц = 0;
		ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
		
		Расходы = 6000000;
		Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо)
			Или ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ФондОплатыТруда = 3000000;
			СредняяЧисленностьРаботников = 10;
		Иначе
			СредняяЧисленностьРаботников = 0;
		КонецЕсли;
		
		ФизическийПоказательПСН = 1;
		ФизическийПоказательЕНВД = 1;
		
		КоличествоОрганизацийДанныеКоторыхДоступныПользователю =
			УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный").Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иЕНВД(ЭтоЗагрузкаДанныхИзНастроек = Ложь)
	
	ВидыДеятельности = НайтиПодходящиеВидыДеятельности("СоответствиеВидовДеятельности");
	
	Если ВидыДеятельности.Количество() = 1 И ЗначениеЗаполнено(ВидыДеятельности[0].КодЕНВД) Тогда
		ВозможноПрименениеЕНВД = Истина;
		ВидДеятельностиЕНВД    = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.НайтиПоКоду(
			ВидыДеятельности[0].КодЕНВД);
		Элементы.ВидДеятельностиЕНВД.СписокВыбора.Очистить();
	ИначеЕсли ВидыДеятельности.Количество() > 1 Тогда
		ВозможноПрименениеЕНВД = Истина;
		Если Не ЭтоЗагрузкаДанныхИзНастроек Тогда
			ВидДеятельностиЕНВД = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ПустаяСсылка();
		КонецЕсли;
		УстановитьСписокВыбораВидовДеятельностиЕНВД(ВидыДеятельности);
	Иначе
		ВозможноПрименениеЕНВД = Ложь;
		ВидДеятельностиЕНВД = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ПустаяСсылка();
		Элементы.ВидДеятельностиЕНВД.СписокВыбора.Очистить();
	КонецЕсли;
	
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД = ВозможноПрименениеЕНВД;
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иПСН()
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПолученыДанныеДляРасчетаПотенциальногоДохода(ЭтотОбъект) Тогда
		ЕстьВидыДеятельностиПСН = Элементы.КодВидаДеятельностиПСН.СписокВыбора.Количество() > 0;
		
		Если Не ЕстьВидыДеятельностиПСН
			И ЭтоПереходныйПериод(ТекущаяДатаПользователя)
			И ЭтоВидДеятельностиПереходногоПериода(КодОКВЭД2) Тогда
			ЕстьВидыДеятельностиПСН = Истина;
			ВидДеятельностиПереходногоПериодаПСН = Истина;
		Иначе
			ВидДеятельностиПереходногоПериодаПСН = Ложь;
		КонецЕсли;
		
		РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН = ЕстьВидыДеятельностиПСН;
	Иначе
		ВидыДеятельности = НайтиПодходящиеВидыДеятельности("ВидыДеятельностиПопадающиеПодПСН");
		РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН = ВидыДеятельности.Количество() > 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иНПД()
	
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД = ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД(КодОКВЭД2);
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иАУСН()
	
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеАУСН = Истина;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Возврат;
	КонецЕсли;
	
	МакетКодыОграниченийАУСН = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("ОграничениеВидовДеятельностиАУСН");
	ТаблицаОграниченийАУСН = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетКодыОграниченийАУСН.ПолучитьТекст());
	
	Для Каждого СтрокаТаблицы Из ТаблицаОграниченийАУСН Цикл
		Если СтрНачинаетсяС(СокрЛП(КодОКВЭД2), СокрЛП(СтрокаТаблицы.Код)) Тогда
			РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеАУСН = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД(Знач КодОКВЭД2)
	
	ВозможноПрименениеНПД = Истина;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Возврат ВозможноПрименениеНПД;
	КонецЕсли;
	
	МакетКодыОграниченийНПД = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("ОграничениеВидовДеятельностиНПД");
	ТаблицаОграниченийНПД = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетКодыОграниченийНПД.ПолучитьТекст());
	
	Для Каждого СтрокаТаблицы Из ТаблицаОграниченийНПД Цикл
		Если СтрНачинаетсяС(СокрЛП(КодОКВЭД2), СокрЛП(СтрокаТаблицы.Код)) Тогда
			ВозможноПрименениеНПД = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможноПрименениеНПД;
	
КонецФункции

&НаСервере
Функция НайтиПодходящиеВидыДеятельности(ИмяТаблицы)
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Возврат Результат;
	КонецЕсли;
	
	КодПоиска = КодОКВЭД2;
	Пока СтрДлина(КодПоиска) > 4 Цикл
		Отбор = Новый Структура("КодОКВЭД2", КодПоиска);
		Результат = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Отбор);
		Если Результат.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
		КодПоиска = Лев(КодПоиска, СтрДлина(КодПоиска) - 1);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСтавкиНалоговИВзносов()
	
	ПрочитатьСтавкиНалогов();
	ПрочитатьТарифыСтраховыхВзносов();
	РассчитатьФиксированныеВзносыИП();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтавкиНалогов()
	
	СтавкиНалоговПоУмолчанию = Новый Структура;
	
	СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ТекущаяДатаПользователя);
	ЗначениеСтавкиНДС = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтавкаНДС);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
	РасчетнаяСтавкаНДС = Строка(ЗначениеСтавкиНДС) + "/" + Строка(100 + ЗначениеСтавкиНДС);
	СтавкиНалоговПоУмолчанию.Вставить("РасчетнаяСтавкаНДС", РасчетнаяСтавкаНДС);
	
	СтавкаНалогаНаПрибыльФедеральная =
		РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюФедеральныйБюджет(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыльФедеральная", СтавкаНалогаНаПрибыльФедеральная);
	СтавкаНалогаНаПрибыльРегиональная =
		РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюРегиональныйБюджет(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыльРегиональная", СтавкаНалогаНаПрибыльРегиональная);
	СтавкаНалогаНаПрибыль = СтавкиНалоговПоУмолчанию.СтавкаНалогаНаПрибыльФедеральная
		+ СтавкиНалоговПоУмолчанию.СтавкаНалогаНаПрибыльРегиональная;
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыль", СтавкаНалогаНаПрибыль);
	
	// Для УСН имеет смысл проверять лимиты на начало действия прогрессивной шкалы УСН.
	ДатаПолученияСтавокУСН = Макс(ТекущаяДатаПользователя, УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы());
	СтавкиУСН = УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию(ДатаПолученияСтавокУСН);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходы", СтавкиУСН.СтавкаУСНДоходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходыПовышенная", СтавкиУСН.СтавкаУСНДоходыПовышенная);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходыРасходы", СтавкиУСН.СтавкаУСНДоходыМинусРасходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходыРасходыПовышенная",
		СтавкиУСН.СтавкаУСНДоходыМинусРасходыПовышенная);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаМинимальногоНалогаУСНДоходыРасходы",
		СтавкиУСН.СтавкаМинимальногоНалогаУСНДоходыМинусРасходы);
	
	СтавкиАУСН = УчетАУСНКлиентСервер.НалоговыеСтавкиАУСН();
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаАУСНДоходы", СтавкиАУСН.СтавкаАУСНДоходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаАУСНДоходыМинусРасходы",
		СтавкиАУСН.СтавкаАУСНДоходыМинусРасходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы",
		СтавкиАУСН.СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы);
	
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаЕНВД", УчетЕНВДКлиентСервер.НалоговаяСтавкаПоУмолчанию());
	СтавкиНалоговПоУмолчанию.Вставить("К1"        , УчетЕНВДКлиентСервер.КоэффициентДефлятор(ТекущаяДатаПользователя));
	СтавкиНалоговПоУмолчанию.Вставить("К2"        , УчетЕНВДКлиентСервер.КорректирующийКоэффициентПоУмолчанию());
	
	СтавкаПСН = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаПСН", СтавкаПСН);
	
	СтавкиНПД = НалогНаПрофессиональныйДоходКлиентСервер.НалоговыеСтавки(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНПД_ДоходыОтФизЛиц", СтавкиНПД.ДоходыОтФизЛиц);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНПД_ДоходыОтЮрЛицИП", СтавкиНПД.ДоходыОтЮрЛицИП);
	
	ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, СтавкиНалоговПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПорогиПрименимостиНалоговыхРежимов()
	
	ПорогиПрименимостиРежимов = Новый Структура;
	
	// Для УСН имеет смысл проверять лимиты на начало действия прогрессивной шкалы УСН.
	ДатаПроверкиЛимитовУСН = Макс(ТекущаяДатаПользователя, УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы());
	
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаДоходовОсновнойСтавки",
		КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияОсновнойСтавкиУСН(ДатаПроверкиЛимитовУСН));
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаДоходовПовышеннойСтавки",
		КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияПовышеннойСтавкиУСН(ДатаПроверкиЛимитовУСН));
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаСтоимостиОС",
		КонтрольПраваПримененияСпецрежима.ГраницаСтоимостиОсновныхСредствОграничивающаяПравоПримененияУСН(ТекущаяДатаПользователя));
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаРаботниковОсновнойСтавки",
		КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН());
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаРаботниковПовышеннойСтавки",
		КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияПовышеннойСтавкиУСН(ДатаПроверкиЛимитовУСН));
	ПорогиПрименимостиРежимов.Вставить("АУСНГраницаДоходовОсновнойСтавки", УчетАУСН.ГраницаДоходов());
	ПорогиПрименимостиРежимов.Вставить("АУСНГраницаРаботниковОсновнойСтавки", УчетАУСН.ГраницаЧисленностиРаботников());
	ПорогиПрименимостиРежимов.Вставить("АУСНГраницаСтоимостиОС", УчетАУСН.ГраницаСтоимостиОсновныхСредств());
	ПорогиПрименимостиРежимов.Вставить("ЕНВДГраницаРаботников",
		КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияЕНВД());
	ПорогиПрименимостиРежимов.Вставить("ПСНГраницаДоходов",
		КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН());
	ПорогиПрименимостиРежимов.Вставить("ПСНГраницаРаботников",
		КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент());
	ПорогиПрименимостиРежимов.Вставить("НПДГраницаДоходов",
		НалогНаПрофессиональныйДоходКлиентСервер.ПределДоходов(ТекущаяДатаПользователя));
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьФиксированныеВзносыИП()
	
	ФиксированныеВзносы = УчетСтраховыхВзносовИП.РассчитатьФиксированныеСтраховыеВзносы(ТекущаяДатаПользователя);
	Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
		РезультатСравненияРежимов.ФиксированныеВзносыВПФРИП  = ФиксированныеВзносы.ПФРВсего;
		РезультатСравненияРежимов.ФиксированныеВзносыВФОМСИП = ФиксированныеВзносы.ФФОМСВсего;
	Иначе
		РезультатСравненияРежимов.ФиксированныеВзносыЕдиныйТарифИП = ФиксированныеВзносы.ЕдиныйТарифВсего;
	КонецЕсли;
	
	ДанныеДляРасчетаВзносовСДоходов = УчетСтраховыхВзносовИП.ДанныеДляРасчетаСтраховыхВзносовСДоходов(ТекущаяДатаПользователя);
	РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП       = ДанныеДляРасчетаВзносовСДоходов.ПроцентВзносов;
	РезультатСравненияРежимов.ПорогДоходаДляРасчетаВзносовВПРФИП = ДанныеДляРасчетаВзносовСДоходов.ПорогДоходов;
	РезультатСравненияРежимов.ПредельнаяСуммаВзносовВПФРИП       = ДанныеДляРасчетаВзносовСДоходов.ПредельнаяСуммаВзноса;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТарифыСтраховыхВзносов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТарифыСтраховыхВзносовОСНО.ПФР КАК ТарифПФРОСНО,
	|	ТарифыСтраховыхВзносовОСНО.ФСС КАК ТарифФССОСНО,
	|	ТарифыСтраховыхВзносовОСНО.ФФОМС КАК ТарифФОМСОСНО,
	|	ТарифыСтраховыхВзносовОСНО.СтавкаЕдиногоТарифа КАК ТарифЕдиныйОСНО,
	|	ТарифыСтраховыхВзносовУСН.ПФР КАК ТарифПФРУСН,
	|	ТарифыСтраховыхВзносовУСН.ФСС КАК ТарифФССУСН,
	|	ТарифыСтраховыхВзносовУСН.ФФОМС КАК ТарифФОМСУСН,
	|	ТарифыСтраховыхВзносовУСН.СтавкаЕдиногоТарифа КАК ТарифЕдиныйУСН,
	|	ТарифыСтраховыхВзносовЕНВД.ПФР КАК ТарифПФРЕНВД,
	|	ТарифыСтраховыхВзносовЕНВД.ФСС КАК ТарифФССЕНВД,
	|	ТарифыСтраховыхВзносовЕНВД.ФФОМС КАК ТарифФОМСЕНВД,
	|	ТарифыСтраховыхВзносовЕНВД.СтавкаЕдиногоТарифа КАК ТарифЕдиныйЕНВД,
	|	ТарифыСтраховыхВзносовПСН.ПФР КАК ЛьготныйТарифПФРПСН,
	|	ТарифыСтраховыхВзносовПСН.ФСС КАК ЛьготныйТарифФССПСН,
	|	ТарифыСтраховыхВзносовПСН.ФФОМС КАК ЛьготныйТарифФОМСПСН,
	|	ТарифыСтраховыхВзносовПСН.СтавкаЕдиногоТарифа КАК ЛьготныйТарифЕдиныйПСН
	|ИЗ
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ТарифыСтраховыхВзносовОСНО,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим)) КАК ТарифыСтраховыхВзносовУСН,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД)) КАК ТарифыСтраховыхВзносовЕНВД,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент)) КАК ТарифыСтраховыхВзносовПСН";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, РезультатЗапроса);
	КонецЕсли;
	
	РезультатСравненияРежимов.ТарифОССНС = 0.2;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиЕНВДПриИзмененииНаСервере(СравнитьРежимы = Истина)
	
	Если ЗначениеЗаполнено(ВидДеятельностиЕНВД)
		И ТипЗнч(ВидДеятельностиЕНВД) = Тип("СправочникСсылка.КлассификаторВидовПредпринимательскойДеятельностиЕНВД") Тогда
		РеквизитыВидаДетяльностиЕНВД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДеятельностиЕНВД,
			"ИмяФизическогоПоказателя, ПодсказкаФизическогоПоказателя, БазоваяДоходность, НаименованиеПолное, Код");
	Иначе
		РеквизитыВидаДетяльностиЕНВД = Новый Структура;
		РеквизитыВидаДетяльностиЕНВД.Вставить("ИмяФизическогоПоказателя", Перечисления.ФизическиеПоказатели.ПустаяСсылка());
		РеквизитыВидаДетяльностиЕНВД.Вставить("ПодсказкаФизическогоПоказателя", "");
		РеквизитыВидаДетяльностиЕНВД.Вставить("БазоваяДоходность", 0);
		РеквизитыВидаДетяльностиЕНВД.Вставить("НаименованиеПолное", "");
		РеквизитыВидаДетяльностиЕНВД.Вставить("Код", "");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, РеквизитыВидаДетяльностиЕНВД);
	
	Если РеквизитыВидаДетяльностиЕНВД.ИмяФизическогоПоказателя = Перечисления.ФизическиеПоказатели.КоличествоРаботниковВключаяИП
		И ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		РезультатСравненияРежимов.ИмяФизическогоПоказателяЕНВД = Перечисления.ФизическиеПоказатели.СредняяЧисленностьНаемныхРаботников;
		
	Иначе
		
		РезультатСравненияРежимов.ИмяФизическогоПоказателяЕНВД = РеквизитыВидаДетяльностиЕНВД.ИмяФизическогоПоказателя;
		
	КонецЕсли;
	
	ПодсказкаФизическогоПоказателя = РеквизитыВидаДетяльностиЕНВД.ПодсказкаФизическогоПоказателя;
	
	Если СравнитьРежимы Тогда
		СравнитьРежимыНалогообложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГраницыФизическогоПоказателяЕНВД(ИмяФизическогоПоказателя)
	
	Если ИмяФизическогоПоказателя = Перечисления.ФизическиеПоказатели.СредняяЧисленностьНаемныхРаботников Тогда
		МинимальноеЗначение = 0;
		МаксимальноеЗначение = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияЕНВД();
	ИначеЕсли ИмяФизическогоПоказателя = Перечисления.ФизическиеПоказатели.КоличествоРаботниковВключаяИП Тогда
		МинимальноеЗначение = 1;
		МаксимальноеЗначение = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияЕНВД() + 1;
	КонецЕсли;
	
	ГраницыФизическогоПоказателя = Новый Структура(
		"МинимальноеЗначение, МаксимальноеЗначение, ИмяФизическогоПоказателя",
		МинимальноеЗначение, МаксимальноеЗначение, ИмяФизическогоПоказателя);
	
	Возврат ГраницыФизическогоПоказателя;
	
КонецФункции

&НаКлиенте
Процедура ВыборВидаДеятельностиОКВЭД2Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодОКВЭД2 = РезультатВыбора.Код;
	
	ПолученыДанныеДляРасчетаПотенциальногоДохода = Ложь;
	
	ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере();
	
	ЗапроситьДифференциациюПотенциальногоДохода();
	
КонецПроцедуры

&НаСервере
Функция УстановитьПредставлениеВидаДеятельностиОКВЭД2()
	
	Если ЗначениеЗаполнено(КодОКВЭД2) И ЭтоАдресВременногоХранилища(АдресКлассификатораОКВЭД) Тогда
		Классификатор = ПолучитьИзВременногоХранилища(АдресКлассификатораОКВЭД);
		ПредставлениеВидаДеятельности = Классификатор.Получить(КодОКВЭД2);
	Иначе
		ПредставлениеВидаДеятельности = "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере(СравнитьРежимы = Истина)
	
	УстановитьПредставлениеВидаДеятельностиОКВЭД2();
	
	СоотнестиВидДеятельностиОКВЭД2иПСН();
	СоотнестиВидДеятельностиОКВЭД2иЕНВД();
	СоотнестиВидДеятельностиОКВЭД2иНПД();
	СоотнестиВидДеятельностиОКВЭД2иАУСН();
	ВидДеятельностиЕНВДПриИзмененииНаСервере(СравнитьРежимы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВидовДеятельностиЕНВД(НайденныеЗначения)
	
	КодыВидовДеятельностиЕНВД = Новый Массив;
	
	Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
		КодыВидовДеятельностиЕНВД.Добавить(НайденноеЗначение.КодЕНВД);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыВидовДеятельностиЕНВД", КодыВидовДеятельностиЕНВД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Ссылка КАК Значение,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Наименование КАК Представление
	|ИЗ
	|	Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельностиЕНВД
	|ГДЕ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Код В(&КодыВидовДеятельностиЕНВД)";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Элементы.ВидДеятельностиЕНВД.СписокВыбора;
	СписокВыбора.Очистить();
	Пока РезультатЗапроса.Следующий() Цикл
		СписокВыбора.Добавить(РезультатЗапроса.Значение, РезультатЗапроса.Представление);
	КонецЦикла;
	
	СписокВыбора.Добавить("Прочее",
		НСтр("ru='Прочее'"));
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыЛьготныеУсловияНалоговыхРежимов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидОрганизации", ЮридическоеФизическоеЛицо);
	
	Результат.Вставить("СтавкаНалогаНаПрибыльРегиональная", РезультатСравненияРежимов.СтавкаНалогаНаПрибыльРегиональная);
	
	Результат.Вставить("СтавкаУСНДоходы"                 , РезультатСравненияРежимов.СтавкаУСНДоходы);
	Результат.Вставить("СтавкаУСНДоходыРасходы"          , РезультатСравненияРежимов.СтавкаУСНДоходыРасходы);
	
	ВозможноПрименениеЕНВД = ВРегионеПрименяетсяЕНВД(ЭтотОбъект)
		И РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД;
	Результат.Вставить("УплачиваетсяЕНВД"                 , ВозможноПрименениеЕНВД);
	Результат.Вставить("СтавкаЕНВД"                       , РезультатСравненияРежимов.СтавкаЕНВД);
	Результат.Вставить("К2"                               , РезультатСравненияРежимов.К2);
	
	ВозможноПрименениеПСН = РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН;
	Результат.Вставить("ПрименяетсяПСН", ВозможноПрименениеПСН);
	Результат.Вставить("КодВидаДеятельностиПСН", КодВидаДеятельностиПСН);
	Результат.Вставить("СтавкаПСН", РезультатСравненияРежимов.СтавкаПСН);
	
	ЭлементСписка = Элементы.КодВидаДеятельностиПСН.СписокВыбора.НайтиПоЗначению(КодВидаДеятельностиПСН);
	Если ЭлементСписка <> Неопределено Тогда
		Результат.Вставить("НаименованиеВидаДеятельностиПСН", ЭлементСписка.Представление);
	Иначе
		Результат.Вставить("НаименованиеВидаДеятельностиПСН", "");
	КонецЕсли;
	
	Результат.Вставить("КодРегиона", КодРегионаРегистрации);
	Результат.Вставить("КодОКВЭД", КодОКВЭД2);
	Результат.Вставить("НаименованиеОКВЭД", ПредставлениеВидаДеятельности);
	
	ЭлементСписка = Элементы.КодРегионаРегистрации.СписокВыбора.НайтиПоЗначению(КодРегионаРегистрации);
	Если ЭлементСписка <> Неопределено Тогда
		Результат.Вставить("НаименованиеРегиона", ЭлементСписка.Представление);
	Иначе
		Результат.Вставить("НаименованиеРегиона", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановкаРегиональныхСтавокЗавершение(СтавкиНалогов, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтавкиНалогов) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	УказаныРегиональныеСтавки = Ложь;
	Для Каждого СтавкаНалога Из СтавкиНалогов Цикл
		Если УказаныРегиональныеСтавки Тогда
			Прервать;
		КонецЕсли;
		Если ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
			И СтавкаНалога.Ключ = "СтавкаНалогаНаПрибыльРегиональная" Тогда
			Продолжить;
		КонецЕсли;
		Если СтавкиНалоговПоУмолчанию[СтавкаНалога.Ключ] <> СтавкаНалога.Значение Тогда
			УказаныРегиональныеСтавки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, СтавкиНалогов);
	РезультатСравненияРежимов.СтавкаНалогаНаПрибыль = СтавкиНалогов.СтавкаНалогаНаПрибыльРегиональная
		+ РезультатСравненияРежимов.СтавкаНалогаНаПрибыльФедеральная;
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиИнформационнойБазыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена
		Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымИнформационннойБазыНаСервере(Результат);
	ЗапроситьДифференциациюПотенциальногоДохода();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымИнформационннойБазыНаСервере(Условия = Неопределено)
	
	Если Условия = Неопределено Тогда
		ПараметрыДоступныхОрганизаций = Обработки.СравнениеРежимовНалогообложения.ПараметрыДоступныхОрганизаций();
		Если ПараметрыДоступныхОрганизаций.Количество() = 1 Тогда
			Условия = Новый Структура;
			Условия.Вставить("Организация"           , ПараметрыДоступныхОрганизаций[0].Организация);
			Условия.Вставить("СистемаНалогообложения", ПараметрыДоступныхОрганизаций[0].СистемаНалогообложения);
			Если Условия.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация применяет особый порядок налогообложения.
					|Автоматическое заполнение возможно только по данным организаций, использующих общую или упрощенную систему'"));
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаПользователя), - 12);
	КонецПериода = НачалоМесяца(ТекущаяДатаПользователя) - 1;
	
	СредняяЧисленностьРаботников = УчетУСН.СредняяЧисленностьРаботников(
		Условия.Организация, НачалоПериода, КонецПериода);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , КонецПериода);
	
	Запрос.УстановитьПараметр("Организация", Условия.Организация);
	
	СчетаДоходов = Новый Массив;
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	СчетаФОТ = Новый Массив;
	СчетаФОТ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	ВсеСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаДоходов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаРасходов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаФОТ);
	
	Запрос.УстановитьПараметр("СчетаДоходов" , СчетаДоходов);
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	Запрос.УстановитьПараметр("СчетаФОТ"     , СчетаФОТ);
	Запрос.УстановитьПараметр("ВсеСчета"     , ВсеСчета);
	Запрос.Текст = ТекстЗапросаДляЗаполненияПоДаннымИнформационнойБазы();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПланируемыеПоказатели = РезультатыЗапроса[0].Выбрать();
	ПланируемыеПоказатели.Следующий();
	ДоходыОтЮридическихЛиц = ПланируемыеПоказатели.Доходы;
	ДоходыОтФизическихЛиц  = 0;
	ИтогоДоходы            = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	Расходы                = ПланируемыеПоказатели.Расходы;
	ФондОплатыТруда        = ПланируемыеПоказатели.ФОТ;
	
	ОрганизацияПрименяетОСНО = Условия.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
		Если ОрганизацияПрименяетОСНО Тогда
			СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифПФРОСНО
			+ РезультатСравненияРежимов.ТарифФССОСНО
			+ РезультатСравненияРежимов.ТарифФОМСОСНО
			+ РезультатСравненияРежимов.ТарифОССНС) / 100;
		Иначе
			СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифПФРУСН
			+ РезультатСравненияРежимов.ТарифФССУСН
			+ РезультатСравненияРежимов.ТарифФОМСУСН
			+ РезультатСравненияРежимов.ТарифОССНС) / 100;
		КонецЕсли;
	Иначе
		Если ОрганизацияПрименяетОСНО Тогда
			СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифЕдиныйОСНО
			+ РезультатСравненияРежимов.ТарифОССНС) / 100;
		Иначе
			СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифЕдиныйУСН
			+ РезультатСравненияРежимов.ТарифОССНС) / 100;
		КонецЕсли;
	КонецЕсли;
	
	Если Расходы > ФондОплатыТруда Тогда
		Расходы = Расходы - СтавкаВзносовФОТ * ФондОплатыТруда;
		Если ОрганизацияПрименяетОСНО Тогда
			//Для общей системы себестоимость продаж без НДС, поэтому его нужно прибавить.
			НДСВходящий = (Расходы - ФондОплатыТруда) * РезультатСравненияРежимов.СтавкаНДС / 100;
			Расходы = Расходы + НДСВходящий;
		КонецЕсли;
	КонецЕсли;
	
	КодОКВЭД2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условия.Организация, "КодОКВЭД2");
	ЗаполнитьРегионРегистрацииПоАдресу(Условия.Организация);
	ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДляЗаполненияПоДаннымИнформационнойБазы()
	
	Результат =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаДоходов)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			КОНЕЦ), 0) КАК Доходы,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаРасходов)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			КОНЕЦ), 0) КАК Расходы,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаФОТ)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			КОНЕЦ), 0) КАК ФОТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&ВсеСчета), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегионРегистрацииПоАдресу(Знач Организация)
	
	КонтактнаяИнформацияОбъектов = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), ,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
	
	Если КонтактнаяИнформацияОбъектов.Количество() > 0 Тогда
		ЗначениеАдресаJSON = КонтактнаяИнформацияОбъектов[0].Значение;
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдресаJSON);
		КодРегионаРегистрации = СведенияОбАдресе.КодРегиона;
	Иначе
		КодРегионаРегистрации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалогНеРассчитан()
	
	Возврат НСтр("ru='Не рассчитан'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалоговыйРежимНеПрименяется()
	
	Возврат НСтр("ru='Не применяется'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьСервисРегиональныеСтавкиНалогов(Форма)
	
	Если Не Форма.ИспользоватьСервисРегиональныеСтавкиНалогов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоПереходныйПериод(Форма.ТекущаяДатаПользователя) Тогда
		Возврат Не Форма.ВидДеятельностиПереходногоПериодаПСН;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВидДеятельностиПереходногоПериода(КодОКВЭД2)
	
	ДлинаКодаГруппировки = 4; // Например, 47.1
	
	Для Каждого КодыОКВЭД Из УчетПСНКлиентСервер.КодыОКВЭДПереходногоПериода() Цикл
		
		Для Каждого Код Из КодыОКВЭД Цикл
			
			Если Код = КодОКВЭД2 Тогда
				// Полное соответствие
				Возврат Истина;
			КонецЕсли;
			
			// Проверим с учетом подчиненности
			
			Код = СокрЛП(Код);
			Если СтрДлина(Код) = ДлинаКодаГруппировки Тогда
				Если СтрНачинаетсяС(КодОКВЭД2, Код) Тогда
					// Например, код 47.11 входит в группировку 47.1
					Возврат Истина;
				КонецЕсли;
			Иначе
				Если СтрНачинаетсяС(КодОКВЭД2, Код + ".") Тогда
					// Например, код 45.20.1 подчинен коду 45.20
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПереходныйПериод(Период)
	
	ПереходныйПериод = УчетПСНКлиентСервер.ПереходныйПериод();
	
	Возврат Период <= ПереходныйПериод.Конец;
	
КонецФункции

#Область ПомощникРегистрации

&НаСервереБезКонтекста
Функция ЭтоИП(Знач ВыбранныйРежим)
	
	Возврат СтрНайти(ВыбранныйРежим, "ИП");
	
КонецФункции

&НаСервере
Процедура ВосстановитьДанныеПомощникаРегистрации()
	
	Если Не ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	// Форма бизнеса
	Если Не ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
		ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	// ОКВЭД
	ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
	Если ЗначениеЗаполнено(ВидДеятельности.ОсновнойКод) Тогда
		КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
		ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере(Ложь);
	КонецЕсли;
	
	// Налоговый режим
	Налоги = ДанныеПомощникаРегистрации.Налоги;
	ВыбранныйРежим = Налоги.ВыбранныйРежим;
	Если ИзмениласьФормаБизнеса(ВыбранныйРежим, ЮридическоеФизическоеЛицо) Тогда
		ВыбранныйРежим = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Налоги.КодРегионаРегистрации) Тогда
		КодРегионаРегистрации = ДанныеПомощникаРегистрации.Налоги.КодРегионаРегистрации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзмениласьФормаБизнеса(ВыбранныйРежим, ЮридическоеФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоИП(ВыбранныйРежим) И ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат Ложь;
	ИначеЕсли Не ЭтоИП(ВыбранныйРежим) И ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидОрганизации(ВыбранныйРежим)
	
	Если ЭтоИП(ВыбранныйРежим) Тогда
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе
		ВидОрганизации = "ЮридическоеЛицо";
	КонецЕсли;
	
	Возврат ВидОрганизации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СистемаНалогообложения(ВыбранныйРежим)
	
	СистемаНалогообложения = Новый Структура;
	СистемаНалогообложения.Вставить("ОсновнойРежим", "");
	СистемаНалогообложения.Вставить("ПлательщикЕНВД", Ложь);
	СистемаНалогообложения.Вставить("ПрименяетсяУСНПатент", Ложь);
	
	Если ВыбранныйРежим = "АУСНДоходыИП" Или ВыбранныйРежим = "АУСНДоходыООО" Тогда
		СистемаНалогообложения.ОсновнойРежим = "АУСНДоходы";
	ИначеЕсли ВыбранныйРежим = "АУСНДоходыМинусРасходыИП" Или ВыбранныйРежим = "АУСНДоходыМинусРасходыООО" Тогда
		СистемаНалогообложения.ОсновнойРежим = "АУСНДоходыМинусРасходы";
	ИначеЕсли СтрНайти(ВыбранныйРежим, "УСНДоходыРасходы") Тогда
		СистемаНалогообложения.ОсновнойРежим = "УпрощеннаяДоходыМинусРасходы";
	ИначеЕсли СтрНайти(ВыбранныйРежим, "УСНДоходы") Тогда
		СистемаНалогообложения.ОсновнойРежим = "УпрощеннаяДоходы";
	ИначеЕсли СтрНайти(ВыбранныйРежим, "ЕНВД") Тогда
		СистемаНалогообложения.ОсновнойРежим = "УпрощеннаяДоходы";
		СистемаНалогообложения.ПлательщикЕНВД = Истина;
	ИначеЕсли СтрНайти(ВыбранныйРежим, "ПСН") Тогда
		СистемаНалогообложения.ОсновнойРежим = "УпрощеннаяДоходы";
		СистемаНалогообложения.ПрименяетсяУСНПатент = Истина;
	ИначеЕсли СтрНайти(ВыбранныйРежим, "НПД") Тогда
		СистемаНалогообложения.ОсновнойРежим = "НалогНаПрофессиональныйДоход";
	Иначе
		СистемаНалогообложения.ОсновнойРежим = "Общая";
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураУчетнойПолитики(Знач ВыбранныйРежим)
	
	СистемаНалогообложения = СистемаНалогообложения(ВыбранныйРежим);
	
	Возврат РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
		ВидОрганизации(ВыбранныйРежим),
		СистемаНалогообложения.ОсновнойРежим,
		СистемаНалогообложения.ПлательщикЕНВД,
		СистемаНалогообложения.ПрименяетсяУСНПатент);
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации()
	
	Если ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
		// Форма бизнеса
		Если ЭтоИП(ВыбранныйРежим) Тогда
			ФормаБизнеса = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			ФормаБизнеса = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		Обработки.РегистрацияОрганизации.СохранитьДанныеФормаБизнеса(ФормаБизнеса);
		
		// Вид деятельности
		Если ЗначениеЗаполнено(КодОКВЭД2) Тогда
			УстановитьПредставлениеВидаДеятельностиОКВЭД2();
			
			ОКВЭД = Новый Структура;
			ОКВЭД.Вставить("Код", КодОКВЭД2);
			ОКВЭД.Вставить("Наименование", ПредставлениеВидаДеятельности);
			Обработки.РегистрацияОрганизации.СохранитьОсновнойОКВЭД(ОКВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	// Налоги
	Структура = Новый Структура;
	Структура.Вставить("ВыбранныйРежим", ВыбранныйРежим);
	Структура.Вставить("СтруктураУчетнойПолитики", СтруктураУчетнойПолитики(ВыбранныйРежим));
	Структура.Вставить("КодРегионаРегистрации", КодРегионаРегистрации);
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеНалоги(Структура);
	
	Если ВыбранныйРежим = "ПСНИП" И ЗначениеЗаполнено(КодВидаДеятельностиПСН) Тогда
		Обработки.РегистрацияОрганизации.СохранитьДанныеПатент(Новый Структура("ПолныйКодВидаДеятельности", КодВидаДеятельностиПСН));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоВыборФормыБизнеса(НавигацияПараметрФормы)

	Возврат НавигацияПараметрФормы = "РежимНалогообложенияИФормаБизнеса";

КонецФункции

#КонецОбласти

#Область Расчет

&НаСервере
Функция НовыйРезультатСравненияРежимов()
	
	Результат = Новый Структура;
	
	// 1. Общие параметры
	Результат.Вставить("ДоходыОтЮридическихЛиц", 0);
	Результат.Вставить("ДоходыОтФизическихЛиц" , 0);
	Результат.Вставить("ИтогоДоходы"           , 0);
	Результат.Вставить("Расходы"               , 0);
	Результат.Вставить("ФондОплатыТруда"       , 0);
	Результат.Вставить("СредняяЧисленностьРаботников", 0);
	
	// 2. Страховые взносы
	Результат.Вставить("ТарифПФРОСНО"                   , 0);
	Результат.Вставить("СтраховыеВзносыВПФРОСНО"        , 0);
	Результат.Вставить("ТарифФССОСНО"                   , 0);
	Результат.Вставить("СтраховыеВзносыВФССОСНО"        , 0);
	Результат.Вставить("ТарифФОМСОСНО"                  , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСОСНО"       , 0);
	Результат.Вставить("СтраховыеВзносыОССНСОСНО"       , 0);
	Результат.Вставить("ТарифЕдиныйОСНО"                , 0);
	Результат.Вставить("СтраховыеВзносыЕдиныйТарифОСНО" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеОСНОИП"   , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеОСНОООО"  , 0);
	
	// Для УСН доходы и УСН доходы минус расходы расчет страховых взносов совпадает.
	Результат.Вставить("ТарифПФРУСН"                    , 0);
	Результат.Вставить("СтраховыеВзносыВПФРУСН"         , 0);
	Результат.Вставить("ТарифФССУСН"                    , 0);
	Результат.Вставить("СтраховыеВзносыВФССУСН"         , 0);
	Результат.Вставить("ТарифФОМСУСН"                   , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСУСН"        , 0);
	Результат.Вставить("СтраховыеВзносыОССНСУСН"        , 0);
	Результат.Вставить("ТарифЕдиныйУСН"                 , 0);
	Результат.Вставить("СтраховыеВзносыЕдиныйТарифУСН"  , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеУСНИП"    , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеУСНООО"   , 0);
	
	Результат.Вставить("ТарифПФРАУСН"                   , 0);
	Результат.Вставить("СтраховыеВзносыВПФРАУСН"        , 0);
	Результат.Вставить("ТарифФССАУСН"                   , 0);
	Результат.Вставить("СтраховыеВзносыВФССАУСН"        , 0);
	Результат.Вставить("ТарифФОМСАУСН"                  , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСАУСН"       , 0);
	Результат.Вставить("СтраховыеВзносыОССНСАУСН"       , 0);
	Результат.Вставить("ТарифЕдиныйАУСН"                , 0);
	Результат.Вставить("СтраховыеВзносыЕдиныйТарифАУСН" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеАУСНИП"   , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеАУСНООО"  , 0);
	Результат.Вставить("ТарифОССНСАУСН"                 , 0);
	
	Результат.Вставить("ТарифПФРЕНВД"                   , 0);
	Результат.Вставить("СтраховыеВзносыВПФРЕНВД"        , 0);
	Результат.Вставить("ТарифФССЕНВД"                   , 0);
	Результат.Вставить("СтраховыеВзносыВФССЕНВД"        , 0);
	Результат.Вставить("ТарифФОМСЕНВД"                  , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСЕНВД"       , 0);
	Результат.Вставить("СтраховыеВзносыОССНСЕНВД"       , 0);
	Результат.Вставить("ТарифЕдиныйЕНВД"                , 0);
	Результат.Вставить("СтраховыеВзносыЕдиныйТарифЕНВД" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеЕНВДИП"   , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеЕНВДООО"  , 0);
	
	Результат.Вставить("ТарифПФРПСН"                    , 0);
	Результат.Вставить("ЛьготныйТарифПФРПСН"            , 0);
	Результат.Вставить("СтраховыеВзносыВПФРПСН"         , 0);
	Результат.Вставить("ТарифФССПСН"                    , 0);
	Результат.Вставить("ЛьготныйТарифФССПСН"            , 0);
	Результат.Вставить("СтраховыеВзносыВФССПСН"         , 0);
	Результат.Вставить("ТарифФОМСПСН"                   , 0);
	Результат.Вставить("ЛьготныйТарифФОМСПСН"           , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСПСН"        , 0);
	Результат.Вставить("СтраховыеВзносыОССНСПСН"        , 0);
	Результат.Вставить("ТарифЕдиныйПСН"                 , 0);
	Результат.Вставить("ЛьготныйТарифЕдиныйПСН"         , 0);
	Результат.Вставить("СтраховыеВзносыЕдиныйТарифПСН"  , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеПСНИП"    , 0);
	
	Результат.Вставить("ТарифОССНС", 0);
	
	Результат.Вставить("ФиксированныеВзносыВПФРИП"         , 0);
	Результат.Вставить("ВзносыСДоходовВПФРОСНОИП"          , 0);
	Результат.Вставить("ВзносыСДоходовВПФРУСНИП"           , 0);
	Результат.Вставить("ВзносыСДоходовВПФРАУСНИП"          , 0);
	Результат.Вставить("ВзносыСДоходовВПФРЕНВДИП"          , 0);
	Результат.Вставить("ВзносыСДоходовВПФРПСНИП"           , 0);
	Результат.Вставить("ФиксированныеВзносыВФОМСИП"        , 0);
	Результат.Вставить("ПроцентВзносовСДоходовВПФРИП"      , 0);
	Результат.Вставить("ПредельнаяСуммаВзносовВПФРИП"      , 0);
	Результат.Вставить("ПорогДоходаДляРасчетаВзносовВПРФИП", 0);
	Результат.Вставить("ФиксированныеВзносыЕдиныйТарифИП"  , 0);
	
	// 3. ОСНО
	Результат.Вставить("РассчитанОСНОИП"                     , Ложь);
	Результат.Вставить("РассчитанОСНОООО"                    , Ложь);
	Результат.Вставить("СтавкаНДС"                           , 0);
	Результат.Вставить("РасчетнаяСтавкаНДС"                  , "");
	Результат.Вставить("НДСВходящий"                         , 0);
	Результат.Вставить("НДСИсходящий"                        , 0);
	Результат.Вставить("НДСКУплате"                          , 0);
	Результат.Вставить("НалогооблагаемыйДоходОСНОИП"         , 0);
	Результат.Вставить("НалогооблагаемыйРасходОСНОИП"        , 0);
	Результат.Вставить("НалогооблагаемыйДоходОСНОООО"        , 0);
	Результат.Вставить("НалогооблагаемыйРасходОСНОООО"       , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыльФедеральная"    , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыльРегиональная"   , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыль"               , 0);
	Результат.Вставить("НачисленоОСНОИП"                     , 0);
	Результат.Вставить("НачисленоОСНОООО"                    , 0);
	Результат.Вставить("ИтогоКУплатеОСНОИП"                  , 0);
	Результат.Вставить("ИтогоКУплатеОСНОООО"                 , 0);
	Результат.Вставить("НалоговаяНагрузкаОСНОИП"             , "");
	Результат.Вставить("НалоговаяНагрузкаОСНОООО"            , "");
	
	// 4. УСН доходы
	Результат.Вставить("РассчитанУСНДоходыИП"             , Ложь);
	Результат.Вставить("РассчитанУСНДоходыООО"            , Ложь);
	Результат.Вставить("ВычетСтраховыхВзносовУСНДоходыИП" , 0);
	Результат.Вставить("ВычетСтраховыхВзносовУСНДоходыООО", 0);
	Результат.Вставить("СтавкаУСНДоходы"                  , 0);
	Результат.Вставить("СтавкаУСНДоходыПовышенная"        , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыОсновная"    , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыПовышенная"  , 0);
	Результат.Вставить("НачисленоНалогУСНДоходы"          , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыИП"         , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыООО"        , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыИП"          , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыООО"         , 0);
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыИП"     , "");
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыООО"    , "");
	
	// 5. УСН доходы минус расходы
	Результат.Вставить("РассчитанУСНДоходыРасходыИП"                          , Ложь);
	Результат.Вставить("РассчитанУСНДоходыРасходыООО"                         , Ложь);
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП" , 0);
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО", 0);
	Результат.Вставить("СтавкаМинимальногоНалогаУСНДоходыРасходы"             , 0);
	Результат.Вставить("МинимальныйНалогУСНДоходыРасходы"                     , 0);
	Результат.Вставить("СтавкаУСНДоходыРасходы"                               , 0);
	Результат.Вставить("СтавкаУСНДоходыРасходыПовышенная"                     , 0);
	Результат.Вставить("НалогУСНДоходыРасходыОсновнаяСтавкаИП"                , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыРасходыОсновнаяИП"               , 0);
	Результат.Вставить("РасходыСтавкаУСНДоходыРасходыОсновнаяИП"              , 0);
	Результат.Вставить("НалогУСНДоходыРасходыПовышеннаяСтавкаИП"              , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыРасходыПовышеннаяИП"             , 0);
	Результат.Вставить("РасходыСтавкаУСНДоходыРасходыПовышеннаяИП"            , 0);
	Результат.Вставить("НачисленоНалогУСНДоходыРасходыИП"                     , 0);
	Результат.Вставить("НалогУСНДоходыРасходыОсновнаяСтавкаООО"               , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыРасходыОсновнаяООО"              , 0);
	Результат.Вставить("РасходыСтавкаУСНДоходыРасходыОсновнаяООО"             , 0);
	Результат.Вставить("НалогУСНДоходыРасходыПовышеннаяСтавкаООО"             , 0);
	Результат.Вставить("ДоходыСтавкаУСНДоходыРасходыПовышеннаяООО"            , 0);
	Результат.Вставить("РасходыСтавкаУСНДоходыРасходыПовышеннаяООО"           , 0);
	Результат.Вставить("НачисленоНалогУСНДоходыРасходыООО"                    , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыРасходыИП"                      , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыРасходыООО"                     , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыРасходыИП"                       , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыРасходыООО"                      , 0);
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыРасходыИП"                  , "");
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыРасходыООО"                 , "");
	
	// 6. Автоматизированная УСН
	Результат.Вставить("РассчитанАУСНДоходыИП"                           , Ложь);
	Результат.Вставить("РассчитанАУСНДоходыМинусРасходыИП"               , Ложь);
	Результат.Вставить("РассчитанАУСНДоходыООО"                          , Ложь);
	Результат.Вставить("РассчитанАУСНДоходыМинусРасходыООО"              , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеАУСН"  , Ложь);
	
	// Расчет по объекту Доходы
	Результат.Вставить("СтавкаАУСНДоходы"                                , 0);
	Результат.Вставить("ДоходыСтавкаАУСНДоходыОсновная"                  , 0);
	Результат.Вставить("НачисленоНалогАУСНДоходы"                        , 0);
	Результат.Вставить("КУплатеНалогаАУСНДоходыИП"                       , 0);
	Результат.Вставить("КУплатеНалогаАУСНДоходыООО"                      , 0);
	
	// Расчет по объекту Доходы минус расходы
	Результат.Вставить("СтавкаАУСНДоходыМинусРасходы"                                , 0);
	Результат.Вставить("СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы"              , 0);	
	Результат.Вставить("МинимальныйНалогАУСНДоходыМинусРасходы"                      , 0);		
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходыИП"  , 0);
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходыООО" , 0);	
	Результат.Вставить("НалогАУСНДоходыМинусРасходыОсновнаяСтавкаИП"                 , 0);
	Результат.Вставить("ДоходыСтавкаАУСНДоходыМинусРасходыОсновнаяИП"                , 0);
	Результат.Вставить("РасходыСтавкаАУСНДоходыМинусРасходыОсновнаяИП"               , 0);
	Результат.Вставить("НалогАУСНДоходыМинусРасходыПовышеннаяСтавкаИП"               , 0);
	Результат.Вставить("ДоходыСтавкаАУСНДоходыМинусРасходыПовышеннаяИП"              , 0);
	Результат.Вставить("РасходыСтавкаАУСНДоходыМинусРасходыПовышеннаяИП"             , 0);
	Результат.Вставить("НачисленоНалогАУСНДоходыМинусРасходыИП"                      , 0);
	Результат.Вставить("НалогАУСНДоходыМинусРасходыОсновнаяСтавкаООО"                , 0);
	Результат.Вставить("ДоходыСтавкаАУСНДоходыМинусРасходыОсновнаяООО"               , 0);
	Результат.Вставить("РасходыСтавкаАУСНДоходыМинусРасходыОсновнаяООО"              , 0);
	Результат.Вставить("НалогАУСНДоходыМинусРасходыПовышеннаяСтавкаООО"              , 0);
	Результат.Вставить("ДоходыСтавкаАУСНДоходыМинусРасходыПовышеннаяООО"             , 0);
	Результат.Вставить("РасходыСтавкаАУСНДоходыМинусРасходыПовышеннаяООО"            , 0);
	Результат.Вставить("НачисленоНалогАУСНДоходыМинусРасходыООО"                     , 0);
	Результат.Вставить("КУплатеНалогаАУСНДоходыМинусРасходыИП"                       , 0);
	Результат.Вставить("КУплатеНалогаАУСНДоходыМинусРасходыООО"                      , 0);
	
	// Итог по наиболее выгодному варианту
	Результат.Вставить("ИтогоКУплатеАУСНДоходыИП"                  , 0);
	Результат.Вставить("ИтогоКУплатеАУСНДоходыМинусРасходыИП"      , 0);
	Результат.Вставить("ИтогоКУплатеАУСНДоходыООО"                 , 0);
	Результат.Вставить("ИтогоКУплатеАУСНДоходыМинусРасходыООО"     , 0);
	Результат.Вставить("НалоговаяНагрузкаАУСНДоходыИП"             , "");
	Результат.Вставить("НалоговаяНагрузкаАУСНДоходыМинусРасходыИП" , "");
	Результат.Вставить("НалоговаяНагрузкаАУСНДоходыООО"            , "");
	Результат.Вставить("НалоговаяНагрузкаАУСНДоходыМинусРасходыООО", "");
	
	// 7. ЕНВД
	Результат.Вставить("РассчитанЕНВДИП"                               , Ложь);
	Результат.Вставить("РассчитанЕНВДООО"                              , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД", Ложь);
	Результат.Вставить("БазоваяДоходность"                             , 0);
	Результат.Вставить("К1"                                            , 0);
	Результат.Вставить("К2"                                            , 0);
	Результат.Вставить("ИмяФизическогоПоказателяЕНВД"                  , Перечисления.ФизическиеПоказатели.ПустаяСсылка());
	Результат.Вставить("ФизическийПоказательЕНВД"                      , 0);
	Результат.Вставить("СтавкаЕНВД"                                    , 0);
	Результат.Вставить("ВмененныйДоход"                                , 0);
	Результат.Вставить("НачисленоЕНВД"                                 , 0);
	Результат.Вставить("ВычетСтраховыхВзносовЕНВДИП"                   , 0);
	Результат.Вставить("ВычетСтраховыхВзносовЕНВДООО"                  , 0);
	Результат.Вставить("КУПлатеЕдиныйНалогИП"                          , 0);
	Результат.Вставить("КУПлатеЕдиныйНалогООО"                         , 0);
	Результат.Вставить("ИтогоКУплатеЕНВДИП"                            , 0);
	Результат.Вставить("ИтогоКУплатеЕНВДООО"                           , 0);
	Результат.Вставить("НалоговаяНагрузкаЕНВДИП"                       , "");
	Результат.Вставить("НалоговаяНагрузкаЕНВДООО"                      , "");
	
	// 8. ПСН
	Результат.Вставить("РассчитанПСНИП"                               , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН", Ложь);
	Результат.Вставить("ИмяОбъектаНалогообложенияПСН"                 , "");
	Результат.Вставить("ИмяФизическогоПоказателяПСН"                  , Перечисления.ФизическиеПоказатели.ПустаяСсылка());
	Результат.Вставить("ФизическийПоказательПСН"                      , 0);
	Результат.Вставить("ПотенциальноВозможныйДоход"                   , 0);
	Результат.Вставить("СтавкаПСН"                                    , 0);
	Результат.Вставить("НачисленоНалогаПСНИП"                         , 0);
	Результат.Вставить("КУПлатеНалогаПСНИП"                           , 0);
	Результат.Вставить("ИтогоКУплатеПСНИП"                            , 0);
	Результат.Вставить("ВычетСтраховыхВзносовПСНИП"                   , 0);
	Результат.Вставить("НалоговаяНагрузкаПСНИП"                       , "");
	
	// 9. НПД
	Результат.Вставить("РассчитанНПДИП"                               , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД", Ложь);
	Результат.Вставить("НалоговыйВычетНПД"                            , 0);
	Результат.Вставить("СтавкаНПД_ДоходыОтФизЛиц"                     , 0);
	Результат.Вставить("СтавкаНПД_ДоходыОтЮрЛицИП"                    , 0);
	Результат.Вставить("СтавкаВычетаНПД_ДоходыОтФизЛиц"               , 0);
	Результат.Вставить("СтавкаВычетаНПД_ДоходыОтЮрЛицИП"              , 0);
	Результат.Вставить("КУПлатеНалогаНПДИП"                           , 0);
	Результат.Вставить("ИтогоКУплатеНПДИП"                            , 0);
	Результат.Вставить("НалоговаяНагрузкаНПДИП"                       , "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СравнитьРежимыНалогообложения(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Для Каждого НалоговыйРежим Из Форма.НалоговыеРежимы Цикл
		Результат["Рассчитан" + НалоговыйРежим.Ключ] = Ложь;
	КонецЦикла;
	
	Форма.ФизическийПоказательЕНВД = ЗначениеФизическогоПоказателяЕНВД(Форма);
	Форма.ФизическийПоказательПСН = ?(РассчитыватьРежим("ИП", Форма), ЗначениеФизическогоПоказателяПСН(Форма), 0);
	
	СписокСвойств = "ДоходыОтЮридическихЛиц, ДоходыОтФизическихЛиц, ИтогоДоходы, Расходы, ФондОплатыТруда,
		|СредняяЧисленностьРаботников, ФизическийПоказательЕНВД, ИмяФизическогоПоказателяПСН, ФизическийПоказательПСН";
	ЗаполнитьЗначенияСвойств(Результат, Форма, СписокСвойств);
	
	РассчитатьСтраховыеВзносы(Форма);
	
	РассчитатьНалоговуюНагрузкуОСНОИП(Форма);
	РассчитатьНалоговуюНагрузкуОСНОООО(Форма);
	
	МожноПрименятьУСН = МожноПрименятьУСН(Форма);
	Если МожноПрименятьУСН Тогда
		РассчитатьНалоговуюНагрузкуУСНДоходыИП(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыООО(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыРасходыИП(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыРасходыООО(Форма);
	КонецЕсли;
	
	Если МожноПрименятьАУСН(Форма) Тогда
		РассчитатьНалоговуюНагрузкуАУСНИП(Форма);
		РассчитатьНалоговуюНагрузкуАУСНООО(Форма);			
	КонецЕсли;
	
	Если МожноПрименятьЕНВД(Форма) Тогда
		РассчитатьНалоговуюНагрузкуЕНВДИП(Форма);
		РассчитатьНалоговуюНагрузкуЕНВДООО(Форма);
	КонецЕсли;
	
	Если МожноПрименятьПСН(Форма) Тогда
		РассчитатьНалоговуюНагрузкуПСНИП(Форма);
	КонецЕсли;
	
	Если МожноПрименятьНПД(Форма) Тогда
		РассчитатьНалоговуюНагрузкуНПДИП(Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	
	Результат.Вставить("Ставки", Форма.СтавкиНалоговПоУмолчанию);
	
	УправлениеФормой(Форма);
	
	УстановитьВидимостьБаннера(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьБаннера(Форма)
	
	Баннер = Форма.Баннер;
	Элементы = Форма.Элементы;
	ИдентификаторБанкиАУСН = ПерсонализированныеПредложенияСервисовКлиентСервер.ИдентификаторБаннераБанкиАУСН();
	Если Баннер = Неопределено Или Баннер.Идентификатор <> ИдентификаторБанкиАУСН Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьБаннер = Ложь;
	НалоговыеРежимы = НалоговыеРежимыАУСН();
	Для Каждого Режим Из НалоговыеРежимы Цикл
		НаименованияЭлемента = СтрШаблон("НалоговаяНагрузка%1", Режим);
		Если Элементы[НаименованияЭлемента].ЦветФона = Форма.ЗеленыйЦвет Тогда
			ПоказатьБаннер = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Баннер.Видимость = ПоказатьБаннер;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеФизическогоПоказателяПСН(Форма)
	
	ИмяФизическогоПоказателяПСН = Форма.ИмяФизическогоПоказателяПСН;
	
	Если ЗначениеЗаполнено(ИмяФизическогоПоказателяПСН) И ИспользуетсяФизическийПоказательЕНВД(Форма) Тогда
		ФизическиеПоказателиИдентичны = ФизическиеПоказателиИдентичны(
			Форма.РезультатСравненияРежимов.ИмяФизическогоПоказателяЕНВД,
			ИмяФизическогоПоказателяПСН);
	Иначе
		ФизическиеПоказателиИдентичны = Ложь;
	КонецЕсли;
	
	Если ИмяФизическогоПоказателяПСН = ИмяФизическогоПоказателяСредняяЧисленностьРаботников() Тогда
		
		ФизическийПоказательПСН = Форма.СредняяЧисленностьРаботников;
		
	ИначеЕсли ИмяФизическогоПоказателяПСН = ИмяФизическогоПоказателяКоличествоРаботников() Тогда
		
		ФизическийПоказательПСН = Форма.СредняяЧисленностьРаботников + 1;
		
	ИначеЕсли ФизическиеПоказателиИдентичны Тогда
		
		ФизическийПоказательПСН = Форма.ФизическийПоказательЕНВД;
		
	Иначе
		
		ФизическийПоказательПСН = Форма.ФизическийПоказательПСН;
		
	КонецЕсли;
	
	Возврат ФизическийПоказательПСН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеФизическогоПоказателяЕНВД(Форма)
	
	ИмяФизическогоПоказателяЕНВД= Форма.РезультатСравненияРежимов.ИмяФизическогоПоказателяЕНВД;
	
	Если ИмяФизическогоПоказателяЕНВД =
		ПредопределенноеЗначение("Перечисление.ФизическиеПоказатели.СредняяЧисленностьНаемныхРаботников") Тогда
		
		ФизическийПоказательЕНВД = Форма.СредняяЧисленностьРаботников;
		
	ИначеЕсли ИмяФизическогоПоказателяЕНВД =
		ПредопределенноеЗначение("Перечисление.ФизическиеПоказатели.КоличествоРаботниковВключаяИП") Тогда
		
		ФизическийПоказательЕНВД= Форма.СредняяЧисленностьРаботников + 1;
		
	Иначе
		
		ФизическийПоказательЕНВД = Форма.ФизическийПоказательЕНВД;
		
	КонецЕсли;
	
	Возврат ФизическийПоказательЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносы(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	ФОТ       = Результат.ФондОплатыТруда;
	
	Результат.СтраховыеВзносыВПФРОСНО        = Окр(ФОТ * Результат.ТарифПФРОСНО / 100, 2);
	Результат.СтраховыеВзносыВФССОСНО        = Окр(ФОТ * Результат.ТарифФССОСНО / 100, 2);
	Результат.СтраховыеВзносыВФОМСОСНО       = Окр(ФОТ * Результат.ТарифФОМСОСНО / 100, 2);
	Результат.СтраховыеВзносыОССНСОСНО       = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	Результат.СтраховыеВзносыЕдиныйТарифОСНО = Окр(ФОТ * Результат.ТарифЕдиныйОСНО / 100, 2);
	
	Результат.СтраховыеВзносыВПФРУСН        = Окр(ФОТ * Результат.ТарифПФРУСН / 100, 2);
	Результат.СтраховыеВзносыВФССУСН        = Окр(ФОТ * Результат.ТарифФССУСН / 100, 2);
	Результат.СтраховыеВзносыВФОМСУСН       = Окр(ФОТ * Результат.ТарифФОМСУСН / 100, 2);
	Результат.СтраховыеВзносыОССНСУСН       = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	Результат.СтраховыеВзносыЕдиныйТарифУСН = Окр(ФОТ * Результат.ТарифЕдиныйУСН / 100, 2);
	
	Результат.СтраховыеВзносыВПФРЕНВД        = Окр(ФОТ * Результат.ТарифПФРЕНВД / 100, 2);
	Результат.СтраховыеВзносыВФССЕНВД        = Окр(ФОТ * Результат.ТарифФССЕНВД / 100, 2);
	Результат.СтраховыеВзносыВФОМСЕНВД       = Окр(ФОТ * Результат.ТарифФОМСЕНВД / 100, 2);
	Результат.СтраховыеВзносыОССНСЕНВД       = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	Результат.СтраховыеВзносыЕдиныйТарифЕНВД = Окр(ФОТ * Результат.ТарифЕдиныйЕНВД / 100, 2);
	
	Результат.СтраховыеВзносыОССНСАУСН = УчетАУСНВызовСервера.СтраховыеВзносыОССНС(Форма.ТекущаяДатаПользователя);
	
	КлассОКВЭД2 = Лев(Форма.КодОКВЭД2, 2);
	Если КлассОКВЭД2 = "45" Или КлассОКВЭД2 = "47" Или КлассОКВЭД2 = "56" Или КлассОКВЭД2 = "68" Тогда
		// Для розничной торговли, операций с недвижимостью и оказанием услуг общепита
		// действуют общие тарифы страховых взносов за работников.
		// п. 14 ч. 1 ст. 58 Федерального закона от 24.07.2009 N 212-ФЗ.
		Результат.ТарифПФРПСН    = Результат.ТарифПФРОСНО;
		Результат.ТарифФССПСН    = Результат.ТарифФССОСНО;
		Результат.ТарифФОМСПСН   = Результат.ТарифФОМСОСНО;
		Результат.ТарифЕдиныйПСН = Результат.ТарифЕдиныйОСНО;
	Иначе
		Результат.ТарифПФРПСН  = Результат.ЛьготныйТарифПФРПСН;
		Результат.ТарифФССПСН  = Результат.ЛьготныйТарифФССПСН;
		Результат.ТарифФОМСПСН = Результат.ЛьготныйТарифФОМСПСН;
		Результат.ТарифЕдиныйПСН = Результат.ЛьготныйТарифЕдиныйПСН;
	КонецЕсли;
	
	Результат.СтраховыеВзносыВПФРПСН        = Окр(ФОТ * Результат.ТарифПФРПСН / 100, 2);
	Результат.СтраховыеВзносыВФССПСН        = Окр(ФОТ * Результат.ТарифФССПСН / 100, 2);
	Результат.СтраховыеВзносыВФОМСПСН       = Окр(ФОТ * Результат.ТарифФОМСПСН / 100, 2);
	Результат.СтраховыеВзносыОССНСПСН       = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	Результат.СтраховыеВзносыЕдиныйТарифПСН = Окр(ФОТ * Результат.ТарифЕдиныйПСН / 100, 2);
	
	Если Форма.ТекущаяДатаПользователя < Форма.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
		Результат.СтраховыеВзносыКУплатеОСНОООО = Результат.СтраховыеВзносыВПФРОСНО
			+ Результат.СтраховыеВзносыВФССОСНО
			+ Результат.СтраховыеВзносыВФОМСОСНО
			+ Результат.СтраховыеВзносыОССНСОСНО;
		
		Результат.СтраховыеВзносыКУплатеУСНООО = Результат.СтраховыеВзносыВПФРУСН
			+ Результат.СтраховыеВзносыВФССУСН
			+ Результат.СтраховыеВзносыВФОМСУСН
			+ Результат.СтраховыеВзносыОССНСУСН;
		
		Результат.СтраховыеВзносыКУплатеЕНВДООО = Результат.СтраховыеВзносыВПФРЕНВД
			+ Результат.СтраховыеВзносыВФССЕНВД
			+ Результат.СтраховыеВзносыВФОМСЕНВД
			+ Результат.СтраховыеВзносыОССНСЕНВД;
			
		Результат.СтраховыеВзносыКУплатеПСНИП = Результат.СтраховыеВзносыВПФРПСН
			+ Результат.СтраховыеВзносыВФССПСН
			+ Результат.СтраховыеВзносыВФОМСПСН
			+ Результат.СтраховыеВзносыОССНСПСН;
	Иначе
		Результат.СтраховыеВзносыКУплатеОСНОООО = Результат.СтраховыеВзносыОССНСОСНО
			+ Результат.СтраховыеВзносыЕдиныйТарифОСНО;
		
		Результат.СтраховыеВзносыКУплатеУСНООО = Результат.СтраховыеВзносыОССНСУСН
			+ Результат.СтраховыеВзносыЕдиныйТарифУСН;
		
		Результат.СтраховыеВзносыКУплатеЕНВДООО = Результат.СтраховыеВзносыОССНСЕНВД
			+ Результат.СтраховыеВзносыЕдиныйТарифЕНВД;
			
		Результат.СтраховыеВзносыКУплатеПСНИП = Результат.СтраховыеВзносыОССНСПСН
			+ Результат.СтраховыеВзносыЕдиныйТарифПСН;
	КонецЕсли;
	
	Результат.СтраховыеВзносыКУплатеАУСНООО = Результат.СтраховыеВзносыОССНСАУСН;
	
	РассчитатьСтраховыеВзносыИП(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИП(Форма)
	
	РассчитатьСтраховыеВзносыИПНаОСНО(Форма);
	РассчитатьСтраховыеВзносыИПНаУСН(Форма);
	РассчитатьСтраховыеВзносыИПНаЕНВД(Форма);
	РассчитатьСтраховыеВзносыИПНаПСН(Форма);
	РассчитатьСтраховыеВзносыИПНаАУСН(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьФиксированныеВзносыИПВПФР(НалоговыйРежим, Форма)
	
	ДанныеДляРасчета = Форма.РезультатСравненияРежимов;
	ФиксированныеВзносыВПФР = ДанныеДляРасчета.ФиксированныеВзносыВПФРИП;
	ФиксированныеВзносыЕДиныйТариф = ДанныеДляРасчета.ФиксированныеВзносыЕдиныйТарифИП;
	Если НалоговыйРежим = "ОСНО" Тогда
		РассчитатьНДС(Форма);
		НалоговаяБаза = (ДанныеДляРасчета.ИтогоДоходы - ДанныеДляРасчета.НДСИсходящий)
			- (ДанныеДляРасчета.Расходы - ДанныеДляРасчета.НДСВходящий)
			- ДанныеДляРасчета.СтраховыеВзносыКУплатеОСНОООО - ФиксированныеВзносыВПФР
			- ДанныеДляРасчета.ФиксированныеВзносыВФОМСИП
			- ФиксированныеВзносыЕДиныйТариф;
		
	ИначеЕсли НалоговыйРежим = "УСН" Тогда
		НалоговаяБаза = ДанныеДляРасчета.ИтогоДоходы;
		
	ИначеЕсли НалоговыйРежим = "ЕНВД" Тогда
		РассчитатьВмененныйДоход(Форма);
		НалоговаяБаза = ДанныеДляРасчета.ВмененныйДоход;
		
	Иначе
		ДанныеДляРасчета.ПотенциальноВозможныйДоход = ПотенциальныйДоход(Форма);
		НалоговаяБаза = ДанныеДляРасчета.ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	Если НалоговаяБаза < ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП Тогда
		ИтогоВзносовВПФР   = ФиксированныеВзносыВПФР + ФиксированныеВзносыЕДиныйТариф;
		ВзносыВПФРСДоходов = 0;
	Иначе
		Если НалоговыйРежим = "ОСНО" Тогда
			ВзносыВПФРСДоходов = (НалоговаяБаза - ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП)
				* ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП / (100 + ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП);
		Иначе
			ВзносыВПФРСДоходов = (НалоговаяБаза - ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП)
				* ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП / 100;
		КонецЕсли;
		Если ФиксированныеВзносыВПФР + ВзносыВПФРСДоходов + ФиксированныеВзносыЕДиныйТариф > ДанныеДляРасчета.ПредельнаяСуммаВзносовВПФРИП Тогда
			ИтогоВзносовВПФР   = ДанныеДляРасчета.ПредельнаяСуммаВзносовВПФРИП;
			ВзносыВПФРСДоходов = ИтогоВзносовВПФР - ФиксированныеВзносыВПФР - ФиксированныеВзносыЕДиныйТариф;
		Иначе
			ИтогоВзносовВПФР = ФиксированныеВзносыВПФР + ВзносыВПФРСДоходов + ФиксированныеВзносыЕДиныйТариф;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ИтогоВзносовВПФР, ВзносыВПФРСДоходов", ИтогоВзносовВПФР, ВзносыВПФРСДоходов);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаОСНО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ОСНО", Форма);
	
	Результат.СтраховыеВзносыКУплатеОСНОИП = Результат.СтраховыеВзносыКУплатеОСНОООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРОСНОИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("УСН", Форма);
	
	Результат.СтраховыеВзносыКУплатеУСНИП = Результат.СтраховыеВзносыКУплатеУСНООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРУСНИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаЕНВД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ЕНВД", Форма);
	
	Результат.СтраховыеВзносыКУплатеЕНВДИП = Результат.СтраховыеВзносыКУплатеЕНВДООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРЕНВДИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаПСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ПСН", Форма);
	
	Результат.СтраховыеВзносыКУплатеПСНИП = Результат.СтраховыеВзносыКУплатеПСНИП
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРПСНИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаАУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Форма.СредняяЧисленностьРаботников = 0 И Форма.ФондОплатыТруда = 0 Тогда
		Результат.СтраховыеВзносыКУплатеАУСНИП = 0;
	Иначе
		Результат.СтраховыеВзносыКУплатеАУСНИП = Результат.СтраховыеВзносыОССНСАУСН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНДС(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	РасчетнаяСтавкаНДС = Результат.СтавкаНДС / (100 + Результат.СтавкаНДС);
	Результат.НДСИсходящий = Окр(Результат.ИтогоДоходы * РасчетнаяСтавкаНДС, 2);
	
	Если Результат.Расходы > Результат.ФондОплатыТруда Тогда
		Результат.НДСВходящий = (Результат.Расходы - Результат.ФондОплатыТруда) * РасчетнаяСтавкаНДС;
	Иначе
		Результат.НДСВходящий = 0;
	КонецЕсли;
	
	Результат.НДСКУплате = Результат.НДСИсходящий - Результат.НДСВходящий;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьРежим(ВидОрганизации, Форма)
	
	Результат = Ложь;
	
	ЮрФизЛицо = Форма.ЮридическоеФизическоеЛицо;
	ВыбранИП = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
		Или Не ЗначениеЗаполнено(ЮрФизЛицо);
	ВыбраноООО = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		Или Не ЗначениеЗаполнено(ЮрФизЛицо);
		
	Если ВидОрганизации = "ИП" И ВыбранИП Тогда
		Результат =  Истина;
	ИначеЕсли ВидОрганизации = "ООО" И ВыбраноООО Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуОСНОИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. НДС.
	РассчитатьНДС(Форма);
	
	// 2. НДФЛ.
	Результат.НалогооблагаемыйДоходОСНОИП  = Результат.ИтогоДоходы - Результат.НДСИсходящий;
	Результат.НалогооблагаемыйРасходОСНОИП = Результат.Расходы - Результат.НДСВходящий + Результат.СтраховыеВзносыКУплатеОСНОИП;
	
	НалоговаяБаза = Результат.НалогооблагаемыйДоходОСНОИП - Результат.НалогооблагаемыйРасходОСНОИП;
	
	Результат.НачисленоОСНОИП = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(
		НалоговаяБаза,
		ПериодРасчетаНДФЛ_ИП(Форма.ТекущаяДатаПользователя));
	
	Если Результат.НачисленоОСНОИП < 0 Тогда
		Результат.НачисленоОСНОИП = 0;
	КонецЕсли;
	
	// 3. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеОСНОИП = Результат.НачисленоОСНОИП + Результат.НДСКУплате + Результат.СтраховыеВзносыКУплатеОСНОИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеОСНОИП / Результат.ИтогоДоходы * 100, 0);
	Если НалоговаяНагрузка < 0 Тогда
		НалоговаяНагрузка = 0;
	КонецЕсли;
	Результат.НалоговаяНагрузкаОСНОИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанОСНОИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуОСНОООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. НДС.
	РассчитатьНДС(Форма);
	
	// 2. Налог на прибыль.
	Результат.НалогооблагаемыйДоходОСНОООО  = Результат.ИтогоДоходы - Результат.НДСИсходящий;
	Результат.НалогооблагаемыйРасходОСНОООО = Результат.Расходы - Результат.НДСВходящий + Результат.СтраховыеВзносыКУплатеОСНОООО;
	Ставка = (Результат.СтавкаНалогаНаПрибыльФедеральная + Результат.СтавкаНалогаНаПрибыльРегиональная) / 100;
	Результат.НачисленоОСНОООО = (Результат.НалогооблагаемыйДоходОСНОООО - Результат.НалогооблагаемыйРасходОСНОООО) * Ставка;
	Если Результат.НачисленоОСНОООО < 0 Тогда
		Результат.НачисленоОСНОООО = 0;
	КонецЕсли;
	
	// 3. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеОСНОООО = Результат.НачисленоОСНОООО + Результат.НДСКУплате + Результат.СтраховыеВзносыКУплатеОСНОООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеОСНОООО / Результат.ИтогоДоходы * 100, 0);
	Если НалоговаяНагрузка < 0 Тогда
		НалоговаяНагрузка = 0;
	КонецЕсли;
	Результат.НалоговаяНагрузкаОСНОООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанОСНОООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыИП(Форма)
	
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;
	ПорогиПрименимостиРежимов = Форма.ПорогиПрименимостиРежимов;
	
	Если Результат.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки
		Или Результат.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		Если Результат.СредняяЧисленностьРаботников <= ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
			СтавкаУСНДоходы = Результат.СтавкаУСНДоходы;
		Иначе
			СтавкаУСНДоходы = Результат.СтавкаУСНДоходыПовышенная;
		КонецЕсли;
		
		// Единый налог УСН доходы.
		Результат.НачисленоНалогУСНДоходы = Результат.ИтогоДоходы * СтавкаУСНДоходы / 100;
		
	Иначе
		
		// Доходы, облагаемые по разным ставкам.
		Результат.ДоходыСтавкаУСНДоходыОсновная =
			Мин(Результат.ИтогоДоходы, ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки);
		
		Результат.ДоходыСтавкаУСНДоходыПовышенная = Результат.ИтогоДоходы - Результат.ДоходыСтавкаУСНДоходыОсновная;
		
		// Единый налог УСН доходы.
		Результат.НачисленоНалогУСНДоходы =
			(Результат.ДоходыСтавкаУСНДоходыОсновная * Результат.СтавкаУСНДоходы / 100)
			+ (Результат.ДоходыСтавкаУСНДоходыПовышенная * Результат.СтавкаУСНДоходыПовышенная / 100);
		
	КонецЕсли;
	
	ОграничениеДолиВычетов = ?(Результат.ФондОплатыТруда > 0, 0.5, 1);
	
	Если Результат.СтраховыеВзносыКУплатеУСНИП > Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовУСНДоходыИП = Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовУСНДоходыИП = Результат.СтраховыеВзносыКУплатеУСНИП;
	КонецЕсли;
	
	Результат.КУПлатеНалогаУСНДоходыИП = Результат.НачисленоНалогУСНДоходы - Результат.ВычетСтраховыхВзносовУСНДоходыИП;
	
	// Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыИП = Результат.КУПлатеНалогаУСНДоходыИП + Результат.СтраховыеВзносыКУплатеУСНИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыООО(Форма)
	
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;
	ПорогиПрименимостиРежимов = Форма.ПорогиПрименимостиРежимов;
	
	Если Результат.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки
		Или Результат.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		Если Результат.СредняяЧисленностьРаботников <= ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
			СтавкаУСНДоходы = Результат.СтавкаУСНДоходы;
		Иначе
			СтавкаУСНДоходы = Результат.СтавкаУСНДоходыПовышенная;
		КонецЕсли;
		
		// Единый налог УСН доходы.
		Результат.НачисленоНалогУСНДоходы = Результат.ИтогоДоходы * СтавкаУСНДоходы / 100;
		
	Иначе
		
		// Доходы, облагаемые по разным ставкам.
		Результат.ДоходыСтавкаУСНДоходыОсновная =
			Мин(Результат.ИтогоДоходы, ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки);
		
		Результат.ДоходыСтавкаУСНДоходыПовышенная = Результат.ИтогоДоходы - Результат.ДоходыСтавкаУСНДоходыОсновная;
		
		// Единый налог УСН доходы.
		Результат.НачисленоНалогУСНДоходы =
			(Результат.ДоходыСтавкаУСНДоходыОсновная * Результат.СтавкаУСНДоходы / 100)
			+ (Результат.ДоходыСтавкаУСНДоходыПовышенная * Результат.СтавкаУСНДоходыПовышенная / 100);
		
	КонецЕсли;
	
	ОграничениеДолиВычетов = 0.5;
	Если Результат.СтраховыеВзносыКУплатеУСНООО > Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовУСНДоходыООО = Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовУСНДоходыООО = Результат.СтраховыеВзносыКУплатеУСНООО;
	КонецЕсли;
	
	Результат.КУПлатеНалогаУСНДоходыООО = Результат.НачисленоНалогУСНДоходы - Результат.ВычетСтраховыхВзносовУСНДоходыООО;
	
	// Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыООО = Результат.КУПлатеНалогаУСНДоходыООО + Результат.СтраховыеВзносыКУплатеУСНООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Результат.СтавкаУСНДоходыРасходы = 0 Тогда
		// Налоговые каникулы.
		Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы = 0;
		Результат.МинимальныйНалогУСНДоходыРасходы = 0;
	Иначе
		Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы = Форма.СтавкиНалоговПоУмолчанию.СтавкаМинимальногоНалогаУСНДоходыРасходы;
		Результат.МинимальныйНалогУСНДоходыРасходы = Результат.ИтогоДоходы * Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы / 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыРасходыИП(Форма)
	
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;
	ПорогиПрименимостиРежимов = Форма.ПорогиПрименимостиРежимов;
	
	// 1. Единый налог УСН доходы минус расходы.
	РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма);
	
	Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП = ?(
		Результат.ИтогоДоходы > (Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНИП),
		Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНИП,
		Результат.ИтогоДоходы);
	
	Если Результат.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки
		Или Результат.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		Если Результат.СредняяЧисленностьРаботников <= ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
			СтавкаУСНДоходыРасходы = Результат.СтавкаУСНДоходыРасходы;
		Иначе
			СтавкаУСНДоходыРасходы = Результат.СтавкаУСНДоходыРасходыПовышенная;
		КонецЕсли;
		
		СуммаНалога = (Результат.ИтогоДоходы - Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП)
			* СтавкаУСНДоходыРасходы / 100;
		
	Иначе
		
		// Доходы, облагаемые по основной ставке.
		Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяИП =
			Мин(Результат.ИтогоДоходы, ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки);
		Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяИП = Окр(
			(Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП
				* Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяИП / Результат.ИтогоДоходы));
		
		Результат.НалогУСНДоходыРасходыОсновнаяСтавкаИП =
			(Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяИП - Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяИП)
			* Результат.СтавкаУСНДоходыРасходы / 100;
		
		// Доходы, облагаемые по повышенной ставке.
		Результат.ДоходыСтавкаУСНДоходыРасходыПовышеннаяИП =
			Результат.ИтогоДоходы - Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяИП;
		Результат.РасходыСтавкаУСНДоходыРасходыПовышеннаяИП = Окр(
			(Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП
				- Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяИП));
		
		Результат.НалогУСНДоходыРасходыПовышеннаяСтавкаИП =
			(Результат.ДоходыСтавкаУСНДоходыРасходыПовышеннаяИП - Результат.РасходыСтавкаУСНДоходыРасходыПовышеннаяИП)
			* Результат.СтавкаУСНДоходыРасходыПовышенная / 100;
		
		Результат.НачисленоНалогУСНДоходыРасходыИП = Результат.НалогУСНДоходыРасходыОсновнаяСтавкаИП
			+ Результат.НалогУСНДоходыРасходыПовышеннаяСтавкаИП;
		
		СуммаНалога = Результат.НачисленоНалогУСНДоходыРасходыИП;
		
	КонецЕсли;
	
	Если СуммаНалога < Результат.МинимальныйНалогУСНДоходыРасходы Тогда
		Результат.КУПлатеНалогаУСНДоходыРасходыИП = Результат.МинимальныйНалогУСНДоходыРасходы;
	Иначе
		Результат.КУПлатеНалогаУСНДоходыРасходыИП = СуммаНалога;
	КонецЕсли;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыРасходыИП = Результат.КУПлатеНалогаУСНДоходыРасходыИП + Результат.СтраховыеВзносыКУплатеУСНИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыРасходыИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыРасходыИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыРасходыИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыРасходыООО(Форма)
	
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;
	ПорогиПрименимостиРежимов = Форма.ПорогиПрименимостиРежимов;
	
	// 1. Единый налог УСН доходы минус расходы.
	РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма);
	
	Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО = ?(
		Результат.ИтогоДоходы > (Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНООО),
		Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНООО,
		Результат.ИтогоДоходы);
	
	Если Результат.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки
		Или Результат.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		Если Результат.СредняяЧисленностьРаботников <= ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
			СтавкаУСНДоходыРасходы = Результат.СтавкаУСНДоходыРасходы;
		Иначе
			СтавкаУСНДоходыРасходы = Результат.СтавкаУСНДоходыРасходыПовышенная;
		КонецЕсли;
		
		СуммаНалога = (Результат.ИтогоДоходы - Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО)
			* СтавкаУСНДоходыРасходы / 100;
		
	Иначе
		
		// Доходы, облагаемые по основной ставке.
		Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяООО =
			Мин(Результат.ИтогоДоходы, ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки);
		Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяООО = Окр(
			(Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО
				* Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяООО / Результат.ИтогоДоходы));
		
		Результат.НалогУСНДоходыРасходыОсновнаяСтавкаООО =
			(Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяООО - Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяООО)
			* Результат.СтавкаУСНДоходыРасходы / 100;
		
		// Доходы, облагаемые по повышенной ставке.
		Результат.ДоходыСтавкаУСНДоходыРасходыПовышеннаяООО =
			Результат.ИтогоДоходы - Результат.ДоходыСтавкаУСНДоходыРасходыОсновнаяООО;
		Результат.РасходыСтавкаУСНДоходыРасходыПовышеннаяООО = Окр(
			(Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО
				- Результат.РасходыСтавкаУСНДоходыРасходыОсновнаяООО));
		
		Результат.НалогУСНДоходыРасходыПовышеннаяСтавкаООО =
			(Результат.ДоходыСтавкаУСНДоходыРасходыПовышеннаяООО - Результат.РасходыСтавкаУСНДоходыРасходыПовышеннаяООО)
			* Результат.СтавкаУСНДоходыРасходыПовышенная / 100;
		
		Результат.НачисленоНалогУСНДоходыРасходыООО = Результат.НалогУСНДоходыРасходыОсновнаяСтавкаООО
			+ Результат.НалогУСНДоходыРасходыПовышеннаяСтавкаООО;
		
		СуммаНалога = Результат.НачисленоНалогУСНДоходыРасходыООО;
		
	КонецЕсли;
		
	Если СуммаНалога < Результат.МинимальныйНалогУСНДоходыРасходы Тогда
		Результат.КУПлатеНалогаУСНДоходыРасходыООО = Результат.МинимальныйНалогУСНДоходыРасходы;
	Иначе
		Результат.КУПлатеНалогаУСНДоходыРасходыООО = СуммаНалога;
	КонецЕсли;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыРасходыООО = Результат.КУПлатеНалогаУСНДоходыРасходыООО + Результат.СтраховыеВзносыКУплатеУСНООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыРасходыООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыРасходыООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыРасходыООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуАУСНИП(Форма)
	
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;

	// ОБЪЕКТ ДОХОДЫ МИНУС РАСХОДЫ
	
	Результат.МинимальныйНалогАУСНДоходыМинусРасходы
		= Результат.ИтогоДоходы
		* Результат.СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы / 100;
	КУплатеНалога = Окр((Результат.ИтогоДоходы - Результат.Расходы)
		* Результат.СтавкаАУСНДоходыМинусРасходы / 100);
	Результат.КУплатеНалогаАУСНДоходыМинусРасходыИП = Макс(
		Результат.МинимальныйНалогАУСНДоходыМинусРасходы, КУплатеНалога);
		
	// ОБЪЕКТ ДОХОДЫ
				
	Результат.КУплатеНалогаАУСНДоходыИП = Результат.ИтогоДоходы * Результат.СтавкаАУСНДоходы / 100;
		
	// Итого к уплате и налоговая нагрузка
	Результат.ИтогоКУплатеАУСНДоходыИП = Результат.КУплатеНалогаАУСНДоходыИП + Результат.СтраховыеВзносыКУплатеАУСНИП;
	Результат.ИтогоКУплатеАУСНДоходыМинусРасходыИП = Результат.КУплатеНалогаАУСНДоходыМинусРасходыИП
		+ Результат.СтраховыеВзносыКУплатеАУСНИП;	
	
	НалоговаяНагрузкаДоходы = ?(
		Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеАУСНДоходыИП / Результат.ИтогоДоходы * 100, 0);
	НалоговаяНагрузкаДоходыМинусРасходы = ?(
		Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеАУСНДоходыМинусРасходыИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаАУСНДоходыИП =
		Формат(НалоговаяНагрузкаДоходы, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.НалоговаяНагрузкаАУСНДоходыМинусРасходыИП =
		Формат(НалоговаяНагрузкаДоходыМинусРасходы, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанАУСНДоходыИП = Истина;
	Результат.РассчитанАУСНДоходыМинусРасходыИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуАУСНООО(Форма)
	
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;

	// ОБЪЕКТ ДОХОДЫ МИНУС РАСХОДЫ
	
	Результат.МинимальныйНалогАУСНДоходыМинусРасходы
		= Результат.ИтогоДоходы
		* Результат.СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы / 100;
	КУплатеНалога = Окр((Результат.ИтогоДоходы - Результат.Расходы)
		* Результат.СтавкаАУСНДоходыМинусРасходы / 100);
	Результат.КУплатеНалогаАУСНДоходыМинусРасходыООО = Макс(
		Результат.МинимальныйНалогАУСНДоходыМинусРасходы, КУплатеНалога);
		
	// ОБЪЕКТ ДОХОДЫ
				
	Результат.КУплатеНалогаАУСНДоходыООО = Результат.ИтогоДоходы * Результат.СтавкаАУСНДоходы / 100;
		
	// Итого к уплате и налоговая нагрузка
	
	Результат.ИтогоКУплатеАУСНДоходыООО = Результат.КУплатеНалогаАУСНДоходыООО
		+ Результат.СтраховыеВзносыКУплатеАУСНООО;
	Результат.ИтогоКУплатеАУСНДоходыМинусРасходыООО = Результат.КУплатеНалогаАУСНДоходыМинусРасходыООО
		+ Результат.СтраховыеВзносыКУплатеАУСНООО;
	
	НалоговаяНагрузкаДоходы = ?(
		Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеАУСНДоходыООО / Результат.ИтогоДоходы * 100, 0);
	НалоговаяНагрузкаДоходыМинусРасходы = ?(
		Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеАУСНДоходыМинусРасходыООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаАУСНДоходыООО =
		Формат(НалоговаяНагрузкаДоходы, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.НалоговаяНагрузкаАУСНДоходыМинусРасходыООО =
		Формат(НалоговаяНагрузкаДоходыМинусРасходы, ФорматнаяСтрокаНалоговойНагрузки()) + "%";

	Результат.РассчитанАУСНДоходыООО = Истина;
	Результат.РассчитанАУСНДоходыМинусРасходыООО = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВмененныйДоход(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Результат.ВмененныйДоход = Результат.БазоваяДоходность
		* Результат.К1
		* Результат.К2
		* Результат.ФизическийПоказательЕНВД
		* 12;
	Результат.НачисленоЕНВД = Результат.ВмененныйДоход * Результат.СтавкаЕНВД / 100;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуЕНВДИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог.
	РассчитатьВмененныйДоход(Форма);
	
	Если Результат.ФондОплатыТруда = 0 Тогда
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДИП;
		ОграничениеДолиВычетов = 1;
	ИначеЕсли Результат.ФондОплатыТруда > 0 И Год(Форма.ТекущаяДатаПользователя) < 2017 Тогда
		// До 2017 года ИП с работниками на ЕНВД не может уменьшить единый налог на сумму фиксированных взносов.
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДООО;
		ОграничениеДолиВычетов = 0.5;
	Иначе
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДИП;
		ОграничениеДолиВычетов = 0.5;
	КонецЕсли;
	
	Если ПотенциальнаяСуммаВычета > Результат.НачисленоЕНВД * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовЕНВДИП = Результат.НачисленоЕНВД * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовЕНВДИП = ПотенциальнаяСуммаВычета;
	КонецЕсли;
	
	Результат.КУПлатеЕдиныйНалогИП = Результат.НачисленоЕНВД - Результат.ВычетСтраховыхВзносовЕНВДИП;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеЕНВДИП = Результат.КУПлатеЕдиныйНалогИП + Результат.СтраховыеВзносыКУплатеЕНВДИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеЕНВДИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаЕНВДИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанЕНВДИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуЕНВДООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог.
	РассчитатьВмененныйДоход(Форма);
	
	ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДООО;
	ОграничениеДолиВычетов = 0.5;
	Если ПотенциальнаяСуммаВычета > Результат.НачисленоЕНВД * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовЕНВДООО = Результат.НачисленоЕНВД * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовЕНВДООО = ПотенциальнаяСуммаВычета;
	КонецЕсли;
	
	Результат.КУПлатеЕдиныйНалогООО = Результат.НачисленоЕНВД - Результат.ВычетСтраховыхВзносовЕНВДООО;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеЕНВДООО = Результат.КУПлатеЕдиныйНалогООО + Результат.СтраховыеВзносыКУплатеЕНВДООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеЕНВДООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаЕНВДООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанЕНВДООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуПСНИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ИмяОбъектаНалогообложенияПСН = Форма.ОбъектНалогообложенияПатента;
	Результат.ИмяФизическогоПоказателяПСН = Форма.ИмяФизическогоПоказателяПСН;
	
	// 1. Налог ПСН.
	Результат.ПотенциальноВозможныйДоход = ПотенциальныйДоход(Форма);
	Результат.НачисленоНалогаПСНИП = СтоимостьПатента(Форма);
	
	// 2. Итого к уплате и налоговая нагрузка.
	Если ПустаяСтрока(Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода) Тогда
		ОграничениеДолиВычетов = ?(Результат.ФондОплатыТруда > 0, 0.5, 1);
		Результат.ВычетСтраховыхВзносовПСНИП = 
			Мин(Результат.НачисленоНалогаПСНИП * ОграничениеДолиВычетов, Результат.СтраховыеВзносыКУплатеПСНИП);
		Результат.КУплатеНалогаПСНИП = Результат.НачисленоНалогаПСНИП - Результат.ВычетСтраховыхВзносовПСНИП;
		Результат.ИтогоКУплатеПСНИП =
			Результат.НачисленоНалогаПСНИП + Результат.СтраховыеВзносыКУплатеПСНИП - Результат.ВычетСтраховыхВзносовПСНИП;
		НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеПСНИП / Результат.ИтогоДоходы * 100, 0);
		Результат.НалоговаяНагрузкаПСНИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
		Результат.РассчитанПСНИП = Истина;
	Иначе
		Результат.ИтогоКУплатеПСНИП = 0;
		Результат.НалоговаяНагрузкаПСНИП = "0%";
		Результат.РассчитанПСНИП = Ложь;
		Форма.НерассчитанныйНалогПСНИП = ПредставлениеНалоговыйРежимНеПрименяется();
		Форма.Элементы.НерассчитанныйНалогПСНИПРасширеннаяПодсказка.Заголовок = Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуНПДИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Налог НПД.
	ПараметрыВычетаНПД = НалогНаПрофессиональныйДоходКлиентСервер.ПараметрыНалоговогоВычета(Форма.ТекущаяДатаПользователя);
	
	Результат.СтавкаВычетаНПД_ДоходыОтФизЛиц = ПараметрыВычетаНПД.СтавкаДоходыОтФизЛиц;
	Результат.СтавкаВычетаНПД_ДоходыОтЮрЛицИП = ПараметрыВычетаНПД.СтавкаДоходыОтЮрЛицИП;
	
	НалоговыйВычетВсего = Окр((Результат.ДоходыОтЮридическихЛиц * Результат.СтавкаВычетаНПД_ДоходыОтЮрЛицИП / 100
			+ Результат.ДоходыОтФизическихЛиц * Результат.СтавкаВычетаНПД_ДоходыОтФизЛиц / 100), 2);
	
	Результат.НалоговыйВычетНПД = Мин(ПараметрыВычетаНПД.Предел, НалоговыйВычетВсего);
	
	НалогКУплатеБезВычета = Окр(
		(Результат.ДоходыОтЮридическихЛиц * Результат.СтавкаНПД_ДоходыОтЮрЛицИП / 100
		+ Результат.ДоходыОтФизическихЛиц * Результат.СтавкаНПД_ДоходыОтФизЛиц / 100), 2);
	
	Результат.КУПлатеНалогаНПДИП = НалогКУплатеБезВычета - Результат.НалоговыйВычетНПД;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеНПДИП = Результат.КУПлатеНалогаНПДИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеНПДИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаНПДИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанНПДИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	Если Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.УСНГраницаДоходовПовышеннойСтавки Тогда
		РасширеннаяПодсказка = НСтр("ru = 'При указанных доходах УСН не применяется'");
	ИначеЕсли Результат.СредняяЧисленностьРаботников > Форма.ПорогиПрименимостиРежимов.УСНГраницаРаботниковПовышеннойСтавки Тогда
		РасширеннаяПодсказка = НСтр("ru = 'При указанной численности работников УСН не применяется'");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Результат.РассчитанУСНДоходыИП                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыИП                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыИП                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыИП                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыООО                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыООО                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыООО                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыРасходыИП                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыРасходыИП                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыРасходыИП                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыРасходыИП                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыРасходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыРасходыООО                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыРасходыООО                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыРасходыООО                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыРасходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыРасходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьАУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	Если Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеАУСН Тогда
		РасширеннаяПодсказка = НСтр("ru = 'Для указанного вида деятельности Автоматизированная УСН не применяется'");	
	ИначеЕсли Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.АУСНГраницаДоходовОсновнойСтавки Тогда
		РасширеннаяПодсказка = НСтр("ru = 'При указанных доходах Автоматизированная УСН не применяется'");
	ИначеЕсли Результат.СредняяЧисленностьРаботников > Форма.ПорогиПрименимостиРежимов.АУСНГраницаРаботниковОсновнойСтавки Тогда
		РасширеннаяПодсказка = НСтр("ru = 'При указанной численности работников Автоматизированная УСН не применяется'");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Результат.РассчитанАУСНДоходыИП                                        = Ложь;
	Результат.ИтогоКУплатеАУСНДоходыИП                                     = 0;
	Результат.НалоговаяНагрузкаАУСНДоходыИП                                = "0%";
	Форма.НерассчитанныйНалогАУСНДоходыИП                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогАУСНДоходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанАУСНДоходыМинусРасходыИП                            = Ложь;
	Результат.ИтогоКУплатеАУСНДоходыМинусРасходыИП                         = 0;
	Результат.НалоговаяНагрузкаАУСНДоходыМинусРасходыИП                    = "0%";
	Форма.НерассчитанныйНалогАУСНДоходыМинусРасходыИП                      = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогАУСНДоходыМинусРасходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанАУСНДоходыООО                                        = Ложь;
	Результат.ИтогоКУплатеАУСНДоходыООО                                     = 0;
	Результат.НалоговаяНагрузкаАУСНДоходыООО                                = "0%";
	Форма.НерассчитанныйНалогАУСНДоходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогАУСНДоходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанАУСНДоходыМинусРасходыООО                                        = Ложь;
	Результат.ИтогоКУплатеАУСНДоходыМинусРасходыООО                                     = 0;
	Результат.НалоговаяНагрузкаАУСНДоходыМинусРасходыООО                                = "0%";
	Форма.НерассчитанныйНалогАУСНДоходыМинусРасходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогАУСНДоходыМинусРасходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьЕНВД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	МожноПрименятьЕНВД = Истина;
	Если Не ВРегионеПрименяетсяЕНВД(Форма) Тогда
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите вид деятельности'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД
		Или ТипЗнч(Форма.ВидДеятельностиЕНВД) = Тип("Строка") Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для указанной деятельности ЕНВД не применяется'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ВидДеятельностиЕНВД) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Уточните вид деятельности'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Результат.ФизическийПоказательЕНВД = 0 И ЗначениеЗаполнено(Результат.ИмяФизическогоПоказателяЕНВД) Тогда
		
		Если Результат.ИмяФизическогоПоказателяЕНВД = ИмяФизическогоПоказателяКоличествоРаботников()
			Или Результат.ИмяФизическогоПоказателяЕНВД = ИмяФизическогоПоказателяСредняяЧисленностьРаботников() Тогда
			РасширеннаяПодсказка = НСтр("ru = 'Укажите значение средней численности работников'");
		Иначе
			РасширеннаяПодсказка = СтрШаблон(НСтр("ru = 'Укажите значение %1'"), Результат.ИмяФизическогоПоказателяЕНВД);
		КонецЕсли;
		
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		МожноПрименятьЕНВД = Ложь;
		
	Иначе
		
		ГраницыФизическогоПоказателя = ГраницыФизическогоПоказателяЕНВД(Результат.ИмяФизическогоПоказателяЕНВД);
		Если ГраницыФизическогоПоказателя.МаксимальноеЗначение <> Неопределено
			И ГраницыФизическогоПоказателя.МаксимальноеЗначение < Результат.ФизическийПоказательЕНВД Тогда
			ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
			РасширеннаяПодсказка = СтрШаблон(НСтр("ru = 'Нарушено условие применения ЕНВД: %1 - не более %2'"),
				ГраницыФизическогоПоказателя.ИмяФизическогоПоказателя,
				ГраницыФизическогоПоказателя.МаксимальноеЗначение);
			МожноПрименятьЕНВД = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не МожноПрименятьЕНВД Тогда
		
		Результат.РассчитанЕНВДИП                                        = Ложь;
		Результат.ИтогоКУплатеЕНВДИП                                     = 0;
		Результат.НалоговаяНагрузкаЕНВДИП                                = "0%";
		Форма.НерассчитанныйНалогЕНВДИП                                  = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
		Результат.РассчитанЕНВДООО                                        = Ложь;
		Результат.ИтогоКУплатеЕНВДООО                                     = 0;
		Результат.НалоговаяНагрузкаЕНВДООО                                = "0%";
		Форма.НерассчитанныйНалогЕНВДООО                                  = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьПСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ПолученыДанныеДляРасчета = ПолученыДанныеДляРасчетаПотенциальногоДохода(Форма);
	
	МожноПрименятьПСН = Истина;
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите регион, в котором осуществлятся деятельность'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите вид деятельности'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Не ПолученыДанныеДляРасчета И Не ПустаяСтрока(Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода;
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для выбранного вида деятельности патентная система не применяется'");
		МожноПрименятьПСН = Ложь;
	
	ИначеЕсли ПолученыДанныеДляРасчета
		И Не ЗначениеЗаполнено(Форма.КодВидаДеятельностиПСН)
		И Форма.Элементы.КодВидаДеятельностиПСН.СписокВыбора.Количество() Тогда
	
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Уточните вид деятельности'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.ПСНГраницаДоходов Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При указанных доходах патентная система не применяется'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Не ПолученыДанныеДляРасчета И Форма.СтоимостьПатента = 0 И Результат.СтавкаПСН > 0 Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите стоимость патента'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли ПолученыДанныеДляРасчета Тогда
		
		ГраницыФизическогоПоказателя = ГраницыФизическогоПоказателяПСН(Результат.ИмяФизическогоПоказателяПСН);
		
		ПредставлениеРезультатаПроверки = "";
		ЗначениеПринадлежитГранице = ЗначениеФизическогоПоказателяПринадлежитГранице(
			Результат.ИмяФизическогоПоказателяПСН,
			Результат.ФизическийПоказательПСН,
			ГраницыФизическогоПоказателя,
			ПредставлениеРезультатаПроверки);
		
		Если Не ЗначениеПринадлежитГранице Тогда
			ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
			РасширеннаяПодсказка = ПредставлениеРезультатаПроверки;
			МожноПрименятьПСН = Ложь;
		КонецЕсли;
		
		Если ИспользуетсяФизическийПоказательЕНВД(Форма)
			И Не ФизическиеПоказателиИдентичны(Результат.ИмяФизическогоПоказателяЕНВД, Результат.ИмяФизическогоПоказателяПСН) Тогда
			
			// Кроме физического показателя ПСН введено значение физического показателя ЕНВД.
			// Это значение также необходимо проверить на выход за границы применимости ПСН.
			
			ГраницыФизическогоПоказателя = ГраницыФизическогоПоказателяПСН(Результат.ИмяФизическогоПоказателяЕНВД);
			
			ПредставлениеРезультатаПроверки = "";
			ЗначениеПринадлежитГранице = ЗначениеФизическогоПоказателяПринадлежитГранице(
				Результат.ИмяФизическогоПоказателяЕНВД,
				Результат.ФизическийПоказательЕНВД,
				ГраницыФизическогоПоказателя,
				ПредставлениеРезультатаПроверки);
			
			Если Не ЗначениеПринадлежитГранице Тогда
				ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
				РасширеннаяПодсказка = ПредставлениеРезультатаПроверки;
				МожноПрименятьПСН = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не МожноПрименятьПСН Тогда
		Результат.РассчитанПСНИП = Ложь;
		Результат.ИтогоКУплатеПСНИП = 0;
		Результат.НалоговаяНагрузкаПСНИП = "0%";
		Форма.НерассчитанныйНалогПСНИП = ПредставлениеНерассчитанногоНалога;
		Форма.Элементы.НерассчитанныйНалогПСНИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьПСН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеФизическогоПоказателяПринадлежитГранице(ИмяФизическогоПоказателя, ФизическийПоказатель, ГраницыФизическогоПоказателя, ПредставлениеРезультатаПроверки = "")
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ИмяФизическогоПоказателя)
		И ГраницыФизическогоПоказателя.МинимальноеЗначение <> Неопределено
		И ФизическийПоказатель < ГраницыФизическогоПоказателя.МинимальноеЗначение Тогда
		
		ПредставлениеРезультатаПроверки = СтрШаблон(НСтр("ru = 'Укажите значение %1'"), ИмяФизическогоПоказателя);
		Результат = Ложь;
		
	Иначе
		
		Если ГраницыФизическогоПоказателя.МаксимальноеЗначение <> Неопределено
			И ГраницыФизическогоПоказателя.МаксимальноеЗначение < ФизическийПоказатель Тогда
			
			ПредставлениеРезультатаПроверки = СтрШаблон(
				НСтр("ru = 'Нарушено условие применения патентной системы налогообложения: %1 - не более %2'"),
				ГраницыФизическогоПоказателя.ИмяФизическогоПоказателя,
				ГраницыФизическогоПоказателя.МаксимальноеЗначение);
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьНПД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	МожноПрименятьНПД = Истина;
	Если Не ПоказыватьРасчетНПД(Форма) Тогда
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли Не ВРегионеПрименяетсяНПД(Форма) Тогда
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ФондОплатыТруда)
		Или ЗначениеЗаполнено(Форма.СредняяЧисленностьРаботников) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При наличии наемных работников ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для выбранного вида деятельности ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
	
	ИначеЕсли Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.НПДГраницаДоходов Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При доходах свыше 2 400 000 рублей ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
		
	КонецЕсли;
	
	Если Не МожноПрименятьНПД Тогда
		Результат.РассчитанНПДИП                                              = Ложь;
		Результат.ИтогоКУплатеНПДИП                                           = 0;
		Результат.НалоговаяНагрузкаНПДИП                                      = "0%";
		Форма.НерассчитанныйНалогНПДИП                                        = ПредставлениеНерассчитанногоНалога;
		Форма.Элементы.НерассчитанныйНалогНПДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьНПД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВРегионеПрименяетсяЕНВД(Форма)
	
	Если Не ПоказыватьРасчетЕНВД(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	ВРегионеПрименяетсяЕНВД = Истина;
	ВсеРегионы = Элементы.КодРегионаРегистрации.СписокВыбора;
	РегионыВКоторыхНеПрименяетсяЕНВД = РегионыВКоторыхНеПрименяетсяЕНВД();
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите регион регистрации, в котором будет осуществляться деятельность. ЕНВД можно применять не везде.'");
		ВРегионеПрименяетсяЕНВД = Ложь;
		
	ИначеЕсли РегионыВКоторыхНеПрименяетсяЕНВД[Форма.КодРегионаРегистрации] <> Неопределено Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'В выбранном регионе ЕНВД не применяется'");
		ВРегионеПрименяетсяЕНВД = Ложь;
		
	КонецЕсли;
	
	Если Не ВРегионеПрименяетсяЕНВД Тогда
		
		Форма.НерассчитанныйНалогЕНВДИП = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		Форма.НерассчитанныйНалогЕНВДООО = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
	КонецЕсли;
	
	Возврат ВРегионеПрименяетсяЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВРегионеПрименяетсяНПД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	ВРегионеПрименяетсяНПД = Истина;
	ВсеРегионы = Элементы.КодРегионаРегистрации.СписокВыбора;
	РегионыВКоторыхНеПрименяетсяНПД = РегионыВКоторыхНеПрименяетсяНПД(Форма.ТекущаяДатаПользователя);
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите регион регистрации, в котором будет осуществляться деятельность. ""Налог на профессиональный доход"" можно применять не везде.'");
		ВРегионеПрименяетсяНПД = Ложь;
		
	ИначеЕсли РегионыВКоторыхНеПрименяетсяНПД[Форма.КодРегионаРегистрации] <> Неопределено Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'В выбранном регионе ""Налог на профессиональный доход"" не применяется'");
		ВРегионеПрименяетсяНПД = Ложь;
		
	КонецЕсли;
	
	Если Не ВРегионеПрименяетсяНПД Тогда
		
		Форма.НерассчитанныйНалогНПДИП = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогНПДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
	КонецЕсли;
	
	Возврат ВРегионеПрименяетсяНПД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегионыВКоторыхНеПрименяетсяЕНВД()
	
	Результат = Новый Соответствие();
	Результат.Вставить("77", "Москва");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегионыВКоторыхНеПрименяетсяНПД(ТекущаяДатаПользователя)
	
	Результат = Новый Соответствие();
	
	// Применяется с 3 июля 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 7, 3);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("01", "Республика Адыгея"); // Закон от 02.06.2020 № 346
	КонецЕсли;
	
	// Применяется с 9 июля 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 7, 9);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("17", "Республика Тыва"); // Закон от 27.05.2020 № 608-ЗРТ
		Результат.Вставить("73", "Ульяновская область"); // Закон от 04.06.2020 № 52-ЗО
	КонецЕсли;
	
	// Закон Республики Северная Осетия - Алания от 22.06.2020 № 33-РЗ. Опубликован 23.06.2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 7, 24);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("15", "Республика Северная Осетия - Алания");
	КонецЕсли;
	
	// Применяется с 1 августа 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 8, 1);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("08", "Республика Калмыкия"); // Закон от 10.06.2020 № 105-VI-З
		Результат.Вставить("35", "Вологодская область"); // Закон от 29.06.2020 № 4728-ОЗ
		Результат.Вставить("49", "Магаданская область"); // Закон от 16.06.2020 № 2502-ОЗ
	КонецЕсли;
	
	// Применяется с 1 сентября 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 9, 1);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("09", "Карачаево-Черкесская Республика"); // Закон от 13.07.2020 № 42-РЗ
		Результат.Вставить("20", "Чеченская Республика"); // Закон от 23.07.2020 № 49-рз
		Результат.Вставить("75", "Забайкальский край"); // Закон от 16.07.2020 № 1839-ЗЗК
		Результат.Вставить("80", "Забайкальский край Агинский Бурятский округ"); // Закон от 16.07.2020 № 1839-ЗЗК
	КонецЕсли;
	
	// Применяется с 5 сентября 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 9, 5);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("68", "Тамбовская область"); // Закон от 03.08.2020 № 514-З. Опубликован 04.08.2020 г.
	КонецЕсли;
	
	// Применяется с 6 сентября 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 9, 6);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("12", "Республика Марий Эл"); // Закон от 03.08.2020 № 20-З. Опубликован 05.08.2020 г.
	КонецЕсли;
	
	// Применяется с 19 октября 2020 г.
	ДатаНачалаДействияНПД = Дата(2020, 10, 19);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("06", "Республика Ингушетия"); // Закон от 31.08.2020 № 30-рз в редакции Закона от 18.09.2020 № 33-рз
	КонецЕсли;
	
	// Применяется с 1 января 2023 г.
	ДатаНачалаДействияНПД = Дата(2023, 1, 1);
	Если ТекущаяДатаПользователя < ДатаНачалаДействияНПД Тогда
		Результат.Вставить("99", "Байконур"); // Закон от 21.11.2022 № 441-ФЗ
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматнаяСтрокаНалоговойНагрузки()
	
	Возврат "ЧЦ=5; ЧДЦ=2; ЧН=0";
	
КонецФункции

&НаСервереБезКонтекста
Функция СтавкиИзменяемыеПользователем()
	
	Результат = Новый Массив;
	
	Результат.Добавить("СтавкаЕНВД");
	Результат.Добавить("К2");
	Результат.Добавить("СтавкаУСНДоходы");
	Результат.Добавить("СтавкаУСНДоходыРасходы");
	Результат.Добавить("СтавкаНалогаНаПрибыльРегиональная");
	Результат.Добавить("СтавкаПСН");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

&НаСервере
Функция ТабличныеДокументыРазделов(ИменаРазделов)
	
	Результат = Новый Структура;
	
	Для Каждого ИмяРаздела Из ИменаРазделов Цикл
		ТабличныйДокумент = ТабличныйДокументРасшифровки(ИмяРаздела);
		
		ТабличныйДокумент.ТолькоПросмотр      = Истина;
		ТабличныйДокумент.ОтображатьСетку     = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		Результат.Вставить(ИмяРаздела, ТабличныйДокумент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровки(ИмяРаздела)
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("РасшифровкаРасчета");
	Если ИмяРаздела = "ОСНОИП" Тогда
		Результат = ТабличныйДокументРасшифровкиОСНОИП(Макет);
	ИначеЕсли ИмяРаздела = "ОСНОООО" Тогда
		Результат = ТабличныйДокументРасшифровкиОСНОООО(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыИП(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыООО" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыООО(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыРасходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыРасходыИП(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыРасходыООО" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыРасходыООО(Макет);
	ИначеЕсли ИмяРаздела = "АУСНДоходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиАУСНДоходыИП(Макет);
	ИначеЕсли ИмяРаздела = "АУСНДоходыРасходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиАУСНДоходыРасходыИП(Макет);
	ИначеЕсли ИмяРаздела = "АУСНДоходыООО" Тогда
		Результат = ТабличныйДокументРасшифровкиАУСНДоходыООО(Макет);
	ИначеЕсли ИмяРаздела = "АУСНДоходыРасходыООО" Тогда
	 	Результат = ТабличныйДокументРасшифровкиАУСНДоходыРасходыООО(Макет);
	ИначеЕсли ИмяРаздела = "ЕНВДИП" Тогда
		Результат = ТабличныйДокументРасшифровкиЕНВДИП(Макет);
	ИначеЕсли ИмяРаздела = "ЕНВДООО" Тогда
		Результат = ТабличныйДокументРасшифровкиЕНВДООО(Макет);
	ИначеЕсли ИмяРаздела = "ПСНИП" Тогда
		Результат = ТабличныйДокументРасшифровкиПСНИП(Макет);
	ИначеЕсли ИмяРаздела = "НПДИП" Тогда
		Результат = ТабличныйДокументРасшифровкиНПДИП(Макет);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиОСНОИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Общий режим налогообложения (ОСНО)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ОСНО", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	НДС = Макет.ПолучитьОбласть("НДС");
	ПрисвоитьНомерРазделу(НДС, НомерРаздела, ФормулаРасчетаИтогов);
	НДС.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДС);
	
	ПараметрыЗаполнения_ПовышеннаяСтавка = ПараметрыЗаполненияНДФЛИП_ПовышеннаяСтавка(
		РезультатСравненияРежимов.НалогооблагаемыйДоходОСНОИП - РезультатСравненияРежимов.НалогооблагаемыйРасходОСНОИП,
		ТекущаяДатаПользователя);
	
	Если ПараметрыЗаполнения_ПовышеннаяСтавка.СтавкаНДФЛПовышенная <> Неопределено
		И ПараметрыЗаполнения_ПовышеннаяСтавка.НалоговаяБаза > ПараметрыЗаполнения_ПовышеннаяСтавка.ПредельнаяСуммаНалоговойБазыНДФЛ Тогда
		
		НДФЛИП = Макет.ПолучитьОбласть("НДФЛИП_ПовышеннаяСтавка");
	Иначе
		НДФЛИП = Макет.ПолучитьОбласть("НДФЛИП");
	КонецЕсли;
	
	НДФЛИП.Параметры.Заполнить(ПараметрыЗаполнения_ПовышеннаяСтавка);
	
	ПрисвоитьНомерРазделу(НДФЛИП, НомерРаздела, ФормулаРасчетаИтогов);
	НДФЛИП.Параметры.НомерРазделаНДС = НДС.Параметры.НомерРаздела;
	НДФЛИП.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	НДФЛИП.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДФЛИП);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ОСНО", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиОСНОООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Общий режим налогообложения (ОСНО)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ОСНО", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	НДС = Макет.ПолучитьОбласть("НДС");
	ПрисвоитьНомерРазделу(НДС, НомерРаздела, ФормулаРасчетаИтогов);
	НДС.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДС);
	
	НалогНаПрибыль = Макет.ПолучитьОбласть("НалогНаПрибыль");
	ПрисвоитьНомерРазделу(НалогНаПрибыль, НомерРаздела, ФормулаРасчетаИтогов);
	НалогНаПрибыль.Параметры.НомерРазделаНДС = НДС.Параметры.НомерРаздела;
	НалогНаПрибыль.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	НалогНаПрибыль.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НалогНаПрибыль);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ОСНО", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='УСН (доходы)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходыПовышенная;
		
	ИначеЕсли РезультатСравненияРежимов.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки Тогда
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходы;
		
	Иначе
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходыПовышенная");
		УСНДоходы.Параметры.УСНГраницаДоходовОсновнойСтавкиВМиллионах =
			ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки / 1000000;
		
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходы;
		
	КонецЕсли;
	
	ПрисвоитьНомерРазделу(УСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	Если РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = "";
	Иначе
		УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = "50% от ";
	КонецЕсли;
	УСНДоходы.Параметры.ВычетСтраховыхВзносовУСНДоходы = РезультатСравненияРежимов.ВычетСтраховыхВзносовУСНДоходыИП;
	УСНДоходы.Параметры.КУплатеНалогаУСНДоходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыИП;
	УСНДоходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	УСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	УСНДоходы.Параметры.СтавкаУСНДоходы = СтавкаУСНДоходы;
	Результат.Вывести(УСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Истина);
	Результат.Вывести(Примечание);
	
	ВывестиПримечаниеПовышеннаяСтавкаНалогаУСН(Макет, Результат, "УСНДоходы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='УСН (доходы)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходыПовышенная;
		
	ИначеЕсли РезультатСравненияРежимов.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки Тогда
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходы;
		
	Иначе
		
		УСНДоходы = Макет.ПолучитьОбласть("УСНДоходыПовышенная");
		УСНДоходы.Параметры.УСНГраницаДоходовОсновнойСтавкиВМиллионах =
			ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки / 1000000;
		
		СтавкаУСНДоходы = РезультатСравненияРежимов.СтавкаУСНДоходы;
		
	КонецЕсли;
	
	ПрисвоитьНомерРазделу(УСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = "50% от ";
	УСНДоходы.Параметры.ВычетСтраховыхВзносовУСНДоходы = РезультатСравненияРежимов.ВычетСтраховыхВзносовУСНДоходыООО;
	УСНДоходы.Параметры.КУплатеНалогаУСНДоходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыООО;
	УСНДоходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	УСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	УСНДоходы.Параметры.СтавкаУСНДоходы = СтавкаУСНДоходы;
	Результат.Вывести(УСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	// Примечание про ограничения применения спец. режима.
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Ложь);
	Результат.Вывести(Примечание);
	
	ВывестиПримечаниеПовышеннаяСтавкаНалогаУСН(Макет, Результат, "УСНДоходы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыРасходыИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='УСН (доходы - расходы)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходыПовышенная;
		
	ИначеЕсли РезультатСравненияРежимов.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки Тогда
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходы;
		
	Иначе
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходыПовышенная");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходы;
		
		ЗначенияДополнительныхПараметров = Новый Структура;
		ЗначенияДополнительныхПараметров.Вставить("НалогУСНДоходыРасходыОсновнаяСтавка",
			РезультатСравненияРежимов.НалогУСНДоходыРасходыОсновнаяСтавкаИП);
		ЗначенияДополнительныхПараметров.Вставить("ДоходыСтавкаУСНДоходыРасходыОсновная",
			РезультатСравненияРежимов.ДоходыСтавкаУСНДоходыРасходыОсновнаяИП);
		ЗначенияДополнительныхПараметров.Вставить("РасходыСтавкаУСНДоходыРасходыОсновная",
			РезультатСравненияРежимов.РасходыСтавкаУСНДоходыРасходыОсновнаяИП);
		ЗначенияДополнительныхПараметров.Вставить("НалогУСНДоходыРасходыПовышеннаяСтавка",
			РезультатСравненияРежимов.НалогУСНДоходыРасходыПовышеннаяСтавкаИП);
		ЗначенияДополнительныхПараметров.Вставить("ДоходыСтавкаУСНДоходыРасходыПовышенная",
			РезультатСравненияРежимов.ДоходыСтавкаУСНДоходыРасходыПовышеннаяИП);
		ЗначенияДополнительныхПараметров.Вставить("РасходыСтавкаУСНДоходыРасходыПовышенная",
			РезультатСравненияРежимов.РасходыСтавкаУСНДоходыРасходыПовышеннаяИП);
		ЗначенияДополнительныхПараметров.Вставить("НачисленоНалогУСНДоходыРасходы",
			РезультатСравненияРежимов.НачисленоНалогУСНДоходыРасходыИП);
		ЗначенияДополнительныхПараметров.Вставить("УСНГраницаДоходовОсновнойСтавкиВМиллионах",
			ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки / 1000000);
		
		УСНДоходыРасходы.Параметры.Заполнить(ЗначенияДополнительныхПараметров);
		
	КонецЕсли;
	
	ПрисвоитьНомерРазделу(УСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходыРасходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП;
	УСНДоходыРасходы.Параметры.КУплатеНалогаУСНДоходыРасходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыРасходыИП;
	УСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	УСНДоходыРасходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	УСНДоходыРасходы.Параметры.СтавкаУСНДоходыРасходы = СтавкаУСНДоходыРасходы;
	Результат.Вывести(УСНДоходыРасходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходыРасходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Истина);
	Результат.Вывести(Примечание);
	
	ВывестиПримечаниеПовышеннаяСтавкаНалогаУСН(Макет, Результат, "УСНДоходыРасходы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыРасходыООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='УСН (доходы - расходы)'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходыПовышенная;
		
	ИначеЕсли РезультатСравненияРежимов.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки Тогда
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходы;
		
	Иначе
		
		УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходыПовышенная");
		СтавкаУСНДоходыРасходы = РезультатСравненияРежимов.СтавкаУСНДоходыРасходы;
		
		ЗначенияДополнительныхПараметров = Новый Структура;
		ЗначенияДополнительныхПараметров.Вставить("НалогУСНДоходыРасходыОсновнаяСтавка",
			РезультатСравненияРежимов.НалогУСНДоходыРасходыОсновнаяСтавкаООО);
		ЗначенияДополнительныхПараметров.Вставить("ДоходыСтавкаУСНДоходыРасходыОсновная",
			РезультатСравненияРежимов.ДоходыСтавкаУСНДоходыРасходыОсновнаяООО);
		ЗначенияДополнительныхПараметров.Вставить("РасходыСтавкаУСНДоходыРасходыОсновная",
			РезультатСравненияРежимов.РасходыСтавкаУСНДоходыРасходыОсновнаяООО);
		ЗначенияДополнительныхПараметров.Вставить("НалогУСНДоходыРасходыПовышеннаяСтавка",
			РезультатСравненияРежимов.НалогУСНДоходыРасходыПовышеннаяСтавкаООО);
		ЗначенияДополнительныхПараметров.Вставить("ДоходыСтавкаУСНДоходыРасходыПовышенная",
			РезультатСравненияРежимов.ДоходыСтавкаУСНДоходыРасходыПовышеннаяООО);
		ЗначенияДополнительныхПараметров.Вставить("РасходыСтавкаУСНДоходыРасходыПовышенная",
			РезультатСравненияРежимов.РасходыСтавкаУСНДоходыРасходыПовышеннаяООО);
		ЗначенияДополнительныхПараметров.Вставить("НачисленоНалогУСНДоходыРасходы",
			РезультатСравненияРежимов.НачисленоНалогУСНДоходыРасходыООО);
		ЗначенияДополнительныхПараметров.Вставить("УСНГраницаДоходовОсновнойСтавкиВМиллионах",
			ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки / 1000000);
		
		УСНДоходыРасходы.Параметры.Заполнить(ЗначенияДополнительныхПараметров);
		
	КонецЕсли;
	
	ПрисвоитьНомерРазделу(УСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходыРасходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО;
	УСНДоходыРасходы.Параметры.КУплатеНалогаУСНДоходыРасходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыРасходыООО;
	УСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	УСНДоходыРасходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	УСНДоходыРасходы.Параметры.СтавкаУСНДоходыРасходы = СтавкаУСНДоходыРасходы;
	Результат.Вывести(УСНДоходыРасходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходыРасходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Ложь);
	Результат.Вывести(Примечание);
	
	ВывестиПримечаниеПовышеннаяСтавкаНалогаУСН(Макет, Результат, "УСНДоходыРасходы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиАУСНДоходыИП(Макет)
	
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Автоматизированная УСН'"));
	НомерРаздела = 0;
	ФормулаРасчетаИтогов = Новый Массив;
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("АУСН", "ИП")); 
	
	Результат.Вывести(СтраховыеВзносы);
	
	АУСНДоходы = Макет.ПолучитьОбласть("АУСНДоходы");
		
	ПрисвоитьНомерРазделу(АУСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	АУСНДоходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	АУСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	АУСНДоходы.Параметры.НачисленоНалогАУСНДоходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыИП;
	АУСНДоходы.Параметры.КУплатеНалогаАУСНДоходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыИП;
	Результат.Вывести(АУСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("АУСНДоходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(
		Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияАУСН(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиАУСНДоходыРасходыИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Автоматизированная УСН'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов); 
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("АУСН", "ИП"));
	
	Результат.Вывести(СтраховыеВзносы);
	
	АУСНДоходыРасходы = Макет.ПолучитьОбласть("АУСНДоходыРасходы");
	
	РасходыАУСН = Мин(РезультатСравненияРежимов.Расходы, РезультатСравненияРежимов.ИтогоДоходы);
	
	ПрисвоитьНомерРазделу(АУСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	АУСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходыИП;
	АУСНДоходыРасходы.Параметры.КУплатеНалогаАУСНДоходыМинусРасходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыМинусРасходыИП;
	АУСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	АУСНДоходыРасходы.Параметры.Заполнить(ПорогиПрименимостиРежимов); 
	АУСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходы = РасходыАУСН;
	АУСНДоходыРасходы.Параметры.КУплатеНалогаАУСНДоходыМинусРасходы = 
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыМинусРасходыИП;
	Результат.Вывести(АУСНДоходыРасходы); 
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("АУСНДоходыМинусРасходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(
		Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияАУСН(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиАУСНДоходыООО(Макет)
	
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Автоматизированная УСН'"));
	НомерРаздела = 0;
	ФормулаРасчетаИтогов = Новый Массив;
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("АУСН", "ООО")); 
	
	Результат.Вывести(СтраховыеВзносы);
	
	АУСНДоходы = Макет.ПолучитьОбласть("АУСНДоходы");
		
	ПрисвоитьНомерРазделу(АУСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	АУСНДоходы.Параметры.Заполнить(ПорогиПрименимостиРежимов);
	АУСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	АУСНДоходы.Параметры.НачисленоНалогАУСНДоходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыООО;
	АУСНДоходы.Параметры.КУплатеНалогаАУСНДоходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыООО;
	Результат.Вывести(АУСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("АУСНДоходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(
		Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияАУСН(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиАУСНДоходыРасходыООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Автоматизированная УСН'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов); 
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("АУСН", "ООО"));
	
	Результат.Вывести(СтраховыеВзносы);
	
	АУСНДоходыРасходы = Макет.ПолучитьОбласть("АУСНДоходыРасходы");
	
	РасходыАУСН = Мин(РезультатСравненияРежимов.Расходы, РезультатСравненияРежимов.ИтогоДоходы);
	
	ПрисвоитьНомерРазделу(АУСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	АУСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходыООО;
	АУСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	АУСНДоходыРасходы.Параметры.Заполнить(ПорогиПрименимостиРежимов); 
	АУСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюАУСНДоходыМинусРасходы = РасходыАУСН;
	АУСНДоходыРасходы.Параметры.КУплатеНалогаАУСНДоходыМинусРасходы =
		РезультатСравненияРежимов.КУплатеНалогаАУСНДоходыМинусРасходыООО;
	Результат.Вывести(АУСНДоходыРасходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("АУСНДоходыМинусРасходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(
		Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияАУСН(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиЕНВДИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='ЕНВД'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ЕНВД", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ЕНВД = Макет.ПолучитьОбласть("ЕНВД");
	ПрисвоитьНомерРазделу(ЕНВД, НомерРаздела, ФормулаРасчетаИтогов);
	ЕНВД.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	Если РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = "";
	Иначе
		ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = "50% от ";
	КонецЕсли;
	Если РезультатСравненияРежимов.ФондОплатыТруда > 0
		И Год(ТекущаяДатаПользователя) < 2017 Тогда
		ЕНВД.Параметры.ВЧастиВзносовЗаРаботников = НСтр("ru='в части взносов за работников,'");
	Иначе
		ЕНВД.Параметры.ВЧастиВзносовЗаРаботников = "";
	КонецЕсли;
	ЕНВД.Параметры.ВычетСтраховыхВзносовЕНВД = РезультатСравненияРежимов.ВычетСтраховыхВзносовЕНВДИП;
	ЕНВД.Параметры.КУплатеЕдиныйНалог = РезультатСравненияРежимов.КУплатеЕдиныйНалогИП;
	ЕНВД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(ЕНВД);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ЕНВД", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияЕНВД(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиЕНВДООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='ЕНВД'"));
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ЕНВД", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ЕНВД = Макет.ПолучитьОбласть("ЕНВД");
	ПрисвоитьНомерРазделу(ЕНВД, НомерРаздела, ФормулаРасчетаИтогов);
	ЕНВД.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = "50% от ";
	ЕНВД.Параметры.ВычетСтраховыхВзносовЕНВД = РезультатСравненияРежимов.ВычетСтраховыхВзносовЕНВДООО;
	ЕНВД.Параметры.КУплатеЕдиныйНалог = РезультатСравненияРежимов.КУплатеЕдиныйНалогООО;
	ЕНВД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(ЕНВД);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ЕНВД", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияЕНВД(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиПСНИП(Макет)
	
	ВидДеятельностиПСН = Элементы.КодВидаДеятельностиПСН.СписокВыбора.НайтиПоЗначению(КодВидаДеятельностиПСН);
	Подзаголовок = ?(ВидДеятельностиПСН <> Неопределено, ВидДеятельностиПСН.Представление, "");
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(Макет, НСтр("ru='Патент'"), Подзаголовок);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ПСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ПСН = Макет.ПолучитьОбласть("ПСН");
	ПрисвоитьНомерРазделу(ПСН, НомерРаздела, ФормулаРасчетаИтогов);
	
	Если РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		ПСН.Параметры.ПредельнаяДоляСтраховыхВычетов = "";
	Иначе
		ПСН.Параметры.ПредельнаяДоляСтраховыхВычетов = "50% от ";
	КонецЕсли;
	
	ПСН.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	
	ПСН.Параметры.Заполнить(РезультатСравненияРежимов);
	Если ЗначениеЗаполнено(РезультатСравненияРежимов.ИмяОбъектаНалогообложенияПСН) Тогда
		ПСН.Параметры.ИмяОбъектаНалогообложенияПСН = СтрШаблон("(%1)", РезультатСравненияРежимов.ИмяОбъектаНалогообложенияПСН);
	КонецЕсли;
	
	Результат.Вывести(ПСН);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ПСН", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияПСН();
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиНПДИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(
		Макет,
		НСтр("ru = 'Налог на профессиональный доход (""самозанятые"")'"),
		,
		"Шапка_НПД");
	
	НПД = Макет.ПолучитьОбласть("НПД");
	ПрисвоитьНомерРазделу(НПД, НомерРаздела, ФормулаРасчетаИтогов);
	НПД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НПД);
	
	ФормулаРасчетаИтогов.Очистить();
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("НПД", "ИП");
	ИтоговыеДанныеДляЗаполненияРасшифровки.Вставить("ФормулаИтогоДоходов", НСтр("ru = '(ЮЛ + ФЛ)'"));
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(
		Результат,
		Макет,
		НомерРаздела,
		ФормулаРасчетаИтогов,
		ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияНПД();
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияУСН(ЭтоИП)
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться, если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- сумма доходов более %1 млн. рублей'"),
		ПорогиПрименимостиРежимов.УСНГраницаДоходовПовышеннойСтавки / 1000000); // в млн. рублей
	ТекстПримечания.Добавить(ТекстОграничения);
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность наемных работников более %1 человек'"),
		ПорогиПрименимостиРежимов.УСНГраницаРаботниковПовышеннойСтавки);
	ТекстПримечания.Добавить(ТекстОграничения);
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- стоимость основных средств более %1 млн. рублей'"),
		ПорогиПрименимостиРежимов.УСНГраницаСтоимостиОС / 1000000); // в млн. рублей
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Если Не ЭтоИП Тогда
		ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания);
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияАУСН(ЭтоИП)
	
	Миллион = 1000000;
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться, если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- сумма доходов более %1 млн. рублей'"),
		ПорогиПрименимостиРежимов.АУСНГраницаДоходовОсновнойСтавки / Миллион); // в млн. рублей
	ТекстПримечания.Добавить(ТекстОграничения);
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграниченияРаботники = СтрШаблон(НСтр("ru='- среднесписочная численность наемных работников за год более %1 человек'"),
		ПорогиПрименимостиРежимов.АУСНГраницаРаботниковОсновнойСтавки);
	ТекстПримечания.Добавить(ТекстОграниченияРаботники);
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграниченияОС = СтрШаблон(НСтр("ru='- стоимость основных средств более %1 млн. рублей'"),
		ПорогиПрименимостиРежимов.АУСНГраницаСтоимостиОС / Миллион); // в млн. рублей
	ТекстПримечания.Добавить(ТекстОграниченияОС);
		
	Если Не ЭтоИП Тогда
		ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания);
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияЕНВД(ЭтоИП)
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться, если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность сотрудников более %1 человек'"),
		ПорогиПрименимостиРежимов.ЕНВДГраницаРаботников);
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Если Не ЭтоИП Тогда
		ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания);
	КонецЕсли;
	
	ДобавитьОграниченияЕНВДПоВыбранномуВидуДеятельности(ТекстПримечания);
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияПСН()
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться, если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность сотрудников более %1 человек'"),
		ПорогиПрименимостиРежимов.ПСНГраницаРаботников);
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияНПД()
	
	Возврат НСтр("ru='Налоговый режим не может применяться, если:
		|- используется труд наемных работников
		|- продаются подакцизные или маркируемые товары
		|- продаются приобретенные товары или имущественные права, за исключением продажи имущества, использовавшегося для личных, домашних и (или) иных подобных нужд
		|- добываются или продаются полезные ископаемые
		|- годовой доход превышает 2 400 000 рублей'");
	
КонецФункции

&НаСервере
Процедура ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания)
	
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстПримечания.Добавить(НСтр("ru='- организация имеет зарегистрированные филиалы'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстПримечания.Добавить(НСтр("ru='- доля участия других организаций превышает 25%'"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОграниченияЕНВДПоВыбранномуВидуДеятельности(ТекстПримечания)
	
	ВидыДеятельности = НайтиПодходящиеВидыДеятельности("СоответствиеВидовДеятельности");
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	
	Если ЗначениеЗаполнено(ВидДеятельностиЕНВД)
		И ТипЗнч(ВидДеятельностиЕНВД) = Тип("СправочникСсылка.КлассификаторВидовПредпринимательскойДеятельностиЕНВД") Тогда
		
		КодЕНВД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельностиЕНВД, "Код");
		Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
			Если ЗначениеЗаполнено(ВидДеятельности.КодОграниченияЕНВД) И КодЕНВД = ВидДеятельности.КодЕНВД Тогда
				НайденноеЗначение = ВидДеятельности;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НайденноеЗначение <> Неопределено Тогда
		КодыОграничений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НайденноеЗначение.КодОграниченияЕНВД, ",");
		Отбор = Новый Структура("Код");
		Для Каждого КодОграничения Из КодыОграничений Цикл
			Отбор.Код = КодОграничения;
			НайденноеЗначение = КодыОграниченийЕНВД.НайтиСтроки(Отбор)[0];
			ТекстПримечания.Добавить(Символы.ПС);
			ТекстПримечания.Добавить(НайденноеЗначение.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПримечаниеПовышеннаяСтавкаНалогаУСН(Макет, ТабличныйДокумент, НалоговыйРежим)
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников <= ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки
		И РезультатСравненияРежимов.ИтогоДоходы <= ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки Тогда
		Возврат;
	КонецЕсли;
	
	Если НалоговыйРежим = "УСНДоходыРасходы" Тогда
		ОсновнаяСтавка = РезультатСравненияРежимов.СтавкаУСНДоходыРасходы;
		ПовышеннаяСтавка = РезультатСравненияРежимов.СтавкаУСНДоходыРасходыПовышенная;
	Иначе
		ОсновнаяСтавка = РезультатСравненияРежимов.СтавкаУСНДоходы;
		ПовышеннаяСтавка = РезультатСравненияРежимов.СтавкаУСНДоходыПовышенная;
	КонецЕсли;
	
	Если РезультатСравненияРежимов.СредняяЧисленностьРаботников > ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки Тогда
		ТекстПримечания = СтрШаблон(НСтр("ru = 'В расчете принято допущение, что средняя численность наемных работников превысила %1 человек с начала года и все доходы облагаются по повышенной ставке %2%%'"),
			ПорогиПрименимостиРежимов.УСНГраницаРаботниковОсновнойСтавки,
			ПовышеннаяСтавка);
	Иначе
		ТекстПримечания = СтрШаблон(НСтр("ru = 'В расчете принято допущение, что превышение границы доходов в %1 млн. рублей произошло в начале 4 квартала.
			|Сумма доходов, не превышающая %1 млн. рублей, облагается по ставке %2%%, а оставшаяся сумма доходов облагается по повышенной ставке %3%%'"),
			ПорогиПрименимостиРежимов.УСНГраницаДоходовОсновнойСтавки / 1000000, // в млн. рублей
			ОсновнаяСтавка, ПовышеннаяСтавка);
	КонецЕсли;
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстПримечания;
	ТабличныйДокумент.Вывести(Примечание);
	
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьНомерРазделу(Раздел, Номер, ФормулаРасчетаИтогов)
	
	Номер = Номер + 1;
	Раздел.Параметры.НомерРаздела = Номер;
	ФормулаРасчетаИтогов.Добавить("(" + Номер + ")");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки)
	
	ИтогоКУплате = Макет.ПолучитьОбласть("ИтогоКУплате");
	ИтогоКУплате.Параметры.ФормулаРасчета = СтрСоединить(ФормулаРасчетаИтогов, " + ");
	ПрисвоитьНомерРазделу(ИтогоКУплате, НомерРаздела, ФормулаРасчетаИтогов);
	ИтогоКУплате.Параметры.Заполнить(ИтоговыеДанныеДляЗаполненияРасшифровки);
	Результат.Вывести(ИтогоКУплате);
	
	НалоговаяНагрузка = Макет.ПолучитьОбласть("НалоговаяНагрузка");
	НалоговаяНагрузка.Параметры.НомерРазделаИтогоКУплате = ИтогоКУплате.Параметры.НомерРаздела;
	НалоговаяНагрузка.Параметры.Заполнить(ИтоговыеДанныеДляЗаполненияРасшифровки);
	Результат.Вывести(НалоговаяНагрузка);
	
КонецПроцедуры

&НаСервере
Функция СоздатьШапкуРасшифровки(Макет, Заголовок, Подзаголовок = "", ОбластьШапки = "Шапка")
	
	Результат = Новый ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заголовок = Заголовок;
		Результат.Вывести(ОбластьЗаголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подзаголовок) Тогда
		ОбластьПодзаголовок = Макет.ПолучитьОбласть("Подзаголовок");
		ОбластьПодзаголовок.Параметры.Подзаголовок = Подзаголовок;
		Результат.Вывести(ОбластьПодзаголовок);
	КонецЕсли;
	
	Шапка = Макет.ПолучитьОбласть(ОбластьШапки);
	Шапка.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(Шапка);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбластьСтраховыхВзносов(Макет, ЭтоИП)
	
	Если ЭтоИП И РезультатСравненияРежимов.ФондОплатыТруда > 0 Тогда
		Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
			Результат = Макет.ПолучитьОбласть("СтраховыеВзносыИПСРаботниками");
		Иначе
			Результат = Макет.ПолучитьОбласть("СтраховыеВзносыИПСРаботниками2023");
		КонецЕсли;
	ИначеЕсли ЭтоИП И РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
			Результат = Макет.ПолучитьОбласть("ФиксированныеСтраховыеВзносыИП");
		Иначе
			Результат = Макет.ПолучитьОбласть("ФиксированныеСтраховыеВзносыИП2023");
		КонецЕсли;
	Иначе
		Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйТарифСтраховыхВзносов Тогда
			Результат = Макет.ПолучитьОбласть("СтраховыеВзносыЮрЛица");
		Иначе
			Результат = Макет.ПолучитьОбласть("СтраховыеВзносыЮрЛица2023");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки(РежимНалогообложения, ВидОрганизации)
	
	Результат = Новый Структура;
	Суффикс = РежимНалогообложения + ВидОрганизации;
	
	Для Каждого КлючЗначение Из РезультатСравненияРежимов Цикл
		ИмяКлюча = КлючЗначение.Ключ;
		ДлинаКлюча = СтрДлина(ИмяКлюча);
		Если СтрНайти(ИмяКлюча, "СтраховыеВзносы") > 0
			И СтрНайти(ИмяКлюча, РежимНалогообложения) > 0
			Или СтрНайти(ИмяКлюча, "Тариф") > 0
			И СтрНайти(ИмяКлюча, РежимНалогообложения) > 0 Тогда
			Результат.Вставить(Лев(ИмяКлюча, ДлинаКлюча - СтрДлина(РежимНалогообложения)), КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("СтраховыеВзносыКУплате",
		РезультатСравненияРежимов["СтраховыеВзносыКУплате" + Суффикс]);
		
	Если ВидОрганизации = "ИП" Тогда
		Результат.Вставить("ВзносыСДоходовВПФРИП", РезультатСравненияРежимов["ВзносыСДоходовВПФР" + Суффикс]);
	КонецЕсли;
	
	Если ВидОрганизации = "ИП" Тогда
		
		Шаблон = Неопределено;
		
		Если РежимНалогообложения = "ЕНВД" Тогда
			Шаблон = НСтр("ru='[(2.5) - %1] * %2'");
		ИначеЕсли РежимНалогообложения = "ПСН" Тогда
			Шаблон = НСтр("ru='[(2.1) - %1] * %2'");
		ИначеЕсли РежимНалогообложения = "ОСНО" Тогда
			Если РезультатСравненияРежимов.ФондОплатыТруда > 0 Тогда
				Шаблон = НСтр("ru='[(Д) - (Р) - (1.1) - (1.2) -
					|- (1.3) - (1.4) - (1.5) - (1.6) - (2) -
					|- %1] * %2'")
			Иначе
				Шаблон = НСтр("ru='[(Д) - (Р) - (1.1) - (1.2) - (2) -
					|- %1] * %2'")
			КонецЕсли;
		ИначеЕсли РежимНалогообложения = "УСН" Тогда
			Шаблон = НСтр("ru='[(Д) - %1] * %2'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ФормулаНалоговойБазы = СтрШаблон(Шаблон,
				РезультатСравненияРежимов.ПорогДоходаДляРасчетаВзносовВПРФИП,
				ПредставлениеПроцентаВзносаСДоходовВПФРИП(РежимНалогообложения));
		Иначе
			ФормулаНалоговойБазы = "";
		КонецЕсли;
		
		Результат.Вставить("ФормулаНалоговойБазы", ФормулаНалоговойБазы);
	КонецЕсли;
	
	Если РежимНалогообложения = "АУСН" Тогда
		ФормулаОССНС = "";
	Иначе
		ФормулаОССНС = СтрШаблон(НСтр("ru = '(ФОТ) * %1%%'"), РезультатСравненияРежимов.ТарифОССНС);
	КонецЕсли;
	
	Результат.Вставить("ФормулаОССНС", ФормулаОССНС);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеДляЗаполненияРасшифровки(РежимНалогообложения, ВидОрганизации)
	
	Результат = Новый Структура;
	Суффикс = РежимНалогообложения + ВидОрганизации;
	ДлинаСуффикса = СтрДлина(Суффикс);
	
	Результат.Вставить("ФормулаИтогоДоходов", НСтр("ru = '(Д)'"));
	
	Для Каждого КлючЗначение Из РезультатСравненияРежимов Цикл
		ИмяКлюча = КлючЗначение.Ключ;
		ДлинаКлюча = СтрДлина(ИмяКлюча);
		Если СтрНайти(ИмяКлюча, "ИтогоКУплате" + Суффикс) > 0
			Или СтрНайти(ИмяКлюча, "НалоговаяНагрузка" + Суффикс) > 0 Тогда
			Результат.Вставить(Лев(ИмяКлюча, ДлинаКлюча - ДлинаСуффикса), КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьРасшифровкуРасчетаНалоговойНагрузки(НалоговыйРежим)
	
	ИмяРаздела = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НалоговыйРежим);
	Расшифровка = ТабличныеДокументыРазделов(ИмяРаздела);
	
	ЗаголовокРасшифровки = НСтр("ru='Расчет налоговой нагрузки'");
	Расшифровка[НалоговыйРежим].Показать(ЗаголовокРасшифровки);
	
КонецФункции

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	ЭтотОбъект.ИспользоватьСервисРегиональныеСтавкиНалогов =
		ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегиональныеСтавкиНалогов");
	
	Элементы.ПотенциальныйДоход.Видимость = ЭтотОбъект.ИспользоватьСервисРегиональныеСтавкиНалогов
		И РегиональныеСтавкиНалогов.РежимОтладки();
	
	Элементы.ЗаполнитьПоДаннымИнформационнойБазы.Видимость = ПравоДоступа("Чтение", Метаданные.Справочники.Организации)
		И КоличествоОрганизацийДанныеКоторыхДоступныПользователю > 0;
	
	ДоступенВыборРежима = РежимРаботыПомощника <> РежимыРаботыПомощника().Основной;
	
	Элементы.ГруппаКнопки.Видимость = ДоступенВыборРежима;
	
	Для Каждого НалоговыйРежим Из НалоговыеРежимы Цикл
		ДоступенВыборТекущегоРежима = ДоступенВыборРежима И (НалоговыйРежим.Значение <> Ложь);
		Элементы["ВыбранРежим" + НалоговыйРежим.Ключ].Видимость = ДоступенВыборРежима;
		Элементы["ВыбранРежим" + НалоговыйРежим.Ключ].Доступность = ДоступенВыборТекущегоРежима;
		Элементы["Надпись" + НалоговыйРежим.Ключ].Видимость = Не ДоступенВыборРежима;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Элементы.РасчетИП.Видимость  = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Элементы.РасчетООО.Видимость = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		Элементы.ЗаполнитьПоДаннымИнформационнойБазы.Видимость = Ложь;
	КонецЕсли;
	
	КоличествоШагов = НавигацияПомощниковКлиентСервер.МаксимальноеЧислоШагов();
	ОбновитьНавигациюФормы();
	
	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		
		ТекстПереходаВПриложение = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Перейдите в личный кабинет <a href=""%1"">Мой налог</a>.'"),
			ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса());
		
		Элементы.ПереходНаУСНШаг1Пояснение.Заголовок = ТекстПереходаВПриложение;
		Элементы.ПереходНаОСНШаг1Пояснение.Заголовок = ТекстПереходаВПриложение;
		Элементы.РасчетООО.Видимость = Ложь;
		
		ОбновитьПредставлениеПредставителя();
		
		КоманднаяПанель.Видимость = Ложь;
		
		Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
		ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация,
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
		
		СпособСдачиОтчетности = "Интернет";
		Элементы.ГруппаПояснениеУтратаПраваНПД.Видимость = Истина;
		Заголовок = НалогНаПрофессиональныйДоходКлиентСервер.ЗаголовокПомощникаУтратыНПД();
		
	Иначе
		
		ЭтоСценарийРегистрации = ЗначениеЗаполнено(НавигацияПараметрФормы);
		Если ЭтоСценарийРегистрации И Не ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
			Элементы.ПредставлениеВидаДеятельности.Вид = ВидПоляФормы.ПолеНадписи;
		КонецЕсли;
		КоманднаяПанель.Видимость = Не ЭтоСценарийРегистрации;
		Элементы.ГруппаПояснениеУтратаПраваНПД.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		// Помощник открыт в процессе регистрации организации/ИП
		РегистрацияОрганизацииСервер.УстановитьПросмотрЭлементовФормы(
			ЭтотОбъект,
			Не РегистрацияОрганизацииСервер.ДоступенПомощникРегистрацииНовогоБизнеса());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		
		ЭтоСценарийРегистрации = ЗначениеЗаполнено(Форма.НавигацияПараметрФормы);
		ДоступенВыборРежима = Форма.РежимРаботыПомощника <> РежимыРаботыПомощника().Основной;
		
		Элементы.ЗаполнитьПоДаннымИнформационнойБазы.Видимость = Не ДоступенВыборРежима;
		Элементы.ЗаполнитьПоДаннымИнформационнойБазы.КнопкаПоУмолчанию = Не ДоступенВыборРежима;
		
		Элементы.КомандаДалее.Видимость = ЭтоСценарийРегистрации;
		Элементы.КомандаНазад.Видимость = ЭтоСценарийРегистрации;
		Элементы.КомандаДалее.КнопкаПоУмолчанию = ЭтоСценарийРегистрации;
		
		Элементы.КомандаПодробнееОРежиме.Видимость =
			(Форма.РежимРаботыПомощника = РежимыРаботыПомощника().НачалоРаботы);
		Элементы.КомандаПодробнееОРежиме.КнопкаПоУмолчанию =
			(Форма.РежимРаботыПомощника = РежимыРаботыПомощника().НачалоРаботы);
		
		Элементы.ГруппаПереход.Видимость = Ложь;
		
		УправлениеНадписьюРегиональныеОсобенностиНалогов(Форма);
		УправлениеПолямиЕНВД(Форма);
		УправлениеПолямиНПД(Форма);
		УправлениеПолямиПСН(Форма);
		УправлениеПолямиАУСН(Форма);
		
		Для Каждого НалоговыйРежим Из Форма.НалоговыеРежимы Цикл
			Элементы["ИтогоКУплате" + НалоговыйРежим.Ключ].Видимость         = Результат["Рассчитан" + НалоговыйРежим.Ключ];
			Элементы["НерассчитанныйНалог" + НалоговыйРежим.Ключ].Видимость  = Не Результат["Рассчитан" + НалоговыйРежим.Ключ];
		КонецЦикла;
		
		РаскраситьПоляНалоговойНагрузки(Форма);
		
	Иначе
		
		ОписаниеНалога = ОписаниеНалоговогоРежима(Форма.ВыбранныйРежим);
		
		Элементы.ВыбранныйРежимПредставление.Заголовок = ОписаниеНалога.Представление;
		
		// Выводим плюсы.
		Для Индекс = 1 По 8 Цикл
			Элементы[СтрШаблон("ПлюсыОписание%1", Индекс)].Видимость = Ложь;
		КонецЦикла;
		
		МассивПлюсов = СтрРазделить(ОписаниеНалога.Плюсы, Символы.ПС);
		Для Индекс = 1 По МассивПлюсов.Количество() Цикл
			Элементы[СтрШаблон("ПлюсыОписание%1", Индекс)].Видимость = Истина;
			Элементы[СтрШаблон("ПлюсыОписание%1", Индекс)].Заголовок = МассивПлюсов[Индекс - 1];
		КонецЦикла;
		
		// Выводим минусы.
		Для Индекс = 1 По 8 Цикл
			Элементы[СтрШаблон("МинусыОписание%1", Индекс)].Видимость = Ложь;
		КонецЦикла;
		
		МассивМинусов = СтрРазделить(ОписаниеНалога.Минусы, Символы.ПС);
		Для Индекс = 1 По МассивМинусов.Количество() Цикл
			Элементы[СтрШаблон("МинусыОписание%1", Индекс)].Видимость = Истина;
			Элементы[СтрШаблон("МинусыОписание%1", Индекс)].Заголовок = МассивМинусов[Индекс - 1];
		КонецЦикла;
		
		Для НомерЭтапа = 1 По 4 Цикл
			Элементы[СтрШаблон("ГруппаИнструкцияЭтап%1", НомерЭтапа)].Видимость = Ложь;
			Элементы[СтрШаблон("ГруппаИнструкцияПояснениеЭтап%1", НомерЭтапа)].Видимость = Ложь;
			Для НомерПояснения = 1 По 3 Цикл
				Элементы[СтрШаблон("Пояснение%1ИнструкцияЭтап%2", НомерПояснения, НомерЭтапа)].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
		
		// Выводим инструкцию по переходу.
		Элементы.ГруппаПереход.Видимость = Истина;
		
		СтрокиИнструкции = СтрРазделить(ОписаниеНалога.КакПерейти, Символы.ПС);
		НомерЭтапа = 0;
		НомерПояснения = 0;
		Для Индекс = 0 По СтрокиИнструкции.Количество() - 1 Цикл
			
			СтрокаИнструкции = СтрокиИнструкции[Индекс];
			Если СтрНачинаетсяС(СтрокаИнструкции, "<Этап>") Тогда
				
				НомерПояснения = 0;
				НомерЭтапа = НомерЭтапа + 1;
				
				Элементы[СтрШаблон("ГруппаИнструкцияЭтап%1", НомерЭтапа)].Видимость = Истина;
				Элементы[СтрШаблон("ЗаголовокИнструкцияЭтап%1", НомерЭтапа)].Заголовок =
					СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрЗаменить(СтрокаИнструкции, "<Этап>", ""));
				
			ИначеЕсли СтрНачинаетсяС(СтрокаИнструкции, "<br>") Тогда
				
				НомерПояснения = НомерПояснения + 1;
				
				Элементы[СтрШаблон("ГруппаИнструкцияПояснениеЭтап%1", НомерЭтапа)].Видимость = Истина;
				Элементы[СтрШаблон("Пояснение%1ИнструкцияЭтап%2", НомерПояснения, НомерЭтапа)].Видимость = Истина;
				Элементы[СтрШаблон("Пояснение%1ИнструкцияЭтап%2", НомерПояснения, НомерЭтапа)].Заголовок =
					СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрЗаменить(СтрокаИнструкции, "<br>", ""));
				
			Иначе
				
				Элементы[СтрШаблон("Пояснение%1ИнструкцияЭтап%2", НомерПояснения, НомерЭтапа)].Заголовок =
					Новый ФорматированнаяСтрока(
						Элементы[СтрШаблон("Пояснение%1ИнструкцияЭтап%2", НомерПояснения, НомерЭтапа)].Заголовок,
						Символы.ПС,
						СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрокаИнструкции));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.НачатьРаботу.Видимость = (Форма.ВыбранныйРежим <> "АУСНИП" И Форма.ВыбранныйРежим <> "АУСНООО");
		
		Если ЭтоПомощникУтратыПраваНПД(Форма.РежимРаботыПомощника) Тогда
			
			ЭтоОбщийРежим = (Форма.ВыбранныйРежим = "ОСНОИП");
			Если Форма.ВыбранныйРежим = "УСНДоходыРасходыИП" Или Форма.ВыбранныйРежим = "УСНДоходыИП" Тогда
				Элементы.ГруппаЗаявлениеУСН.Видимость = Истина;
				Элементы.ГруппаОСН.Видимость = Ложь;
			Иначе
				Элементы.ГруппаЗаявлениеУСН.Видимость = Ложь;
				Элементы.ГруппаОСН.Видимость = Истина;
			КонецЕсли;
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
				Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
			ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаявление Тогда
				Элементы.КомандаЗаявлениеДалее.КнопкаПоУмолчанию = Не ЭтоОбщийРежим;
				Элементы.КомандаЗаявлениеГотово.КнопкаПоУмолчанию = ЭтоОбщийРежим;
				Элементы.КомандаЗаявлениеДалее.Видимость = Не ЭтоОбщийРежим;
				Элементы.КомандаЗаявлениеГотово.Видимость = ЭтоОбщийРежим;
			ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда
				Элементы.КомандаДокументыГотово.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.УведомлениеОПереходеНаУСН) Тогда
				Элементы.КартинкаЗаявлениеФормируется.Видимость = Ложь;
				Элементы.КартинкаЗаявлениеОПереходеНаУСН.Видимость = Истина;
				Элементы.ЗаявлениеФормируется.Видимость = Ложь;
			Иначе
				Элементы.КартинкаЗаявлениеФормируется.Видимость = Истина;
				Элементы.КартинкаЗаявлениеОПереходеНаУСН.Видимость = Ложь;
				Элементы.ЗаявлениеФормируется.Видимость = Истина;
			КонецЕсли;
			
			Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование);
			Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
			
			Если Форма.Используется1СОтчетность Тогда
				Элементы.Группа1СОтчетность.Видимость = Истина;
				Элементы.ЗаголовокПодключить1СОтчетность.Видимость = Не Форма.ЭлектронныйДокументооборотДоступен;
				Элементы.ОписаниеПодключить1СОтчетность.Видимость  = Не Форма.ЭлектронныйДокументооборотДоступен;
				Элементы.Подключить1СОтчетность.Видимость          = Не Форма.ЭлектронныйДокументооборотДоступен;
				Элементы.Открыть1СОтчетность.Видимость             = Форма.ЭлектронныйДокументооборотДоступен;
			Иначе
				Элементы.Группа1СОтчетность.Видимость = Ложь;
			КонецЕсли;
			Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РаскраситьПоляНалоговойНагрузки(Форма)
	
	НалоговаяНагрузка = Новый СписокЗначений;
	Для Каждого КлючЗначение Из Форма.НалоговыеРежимы Цикл
		НалоговаяНагрузка.Добавить(Форма["ИтогоКУплате" + КлючЗначение.Ключ], КлючЗначение.Ключ);
	КонецЦикла;
	
	НалоговаяНагрузка.СортироватьПоЗначению();
	
	Цвета = Новый Массив;
	Цвета.Добавить(Форма.ЗеленыйЦвет);
	Цвета.Добавить(Форма.ЖелтыйЦвет);
	Цвета.Добавить(Форма.КрасныйЦвет);
	
	Счетчик = -1;
	СуммаНалоговНаПредыдущейИтерации = -1;
	Для Каждого Элемент Из НалоговаяНагрузка Цикл
		Если Не Форма.РезультатСравненияРежимов["Рассчитан" + Элемент.Представление]
			Или Не ЗначениеЗаполнено(Форма.ИтогоДоходы) Тогда
			Форма.Элементы["НалоговаяНагрузка" + Элемент.Представление].ЦветФона = Форма.СерыйЦвет;
		Иначе
			Если Элемент.Значение <> СуммаНалоговНаПредыдущейИтерации Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			Форма.Элементы["НалоговаяНагрузка" + Элемент.Представление].ЦветФона = ?(Счетчик < Цвета.ВГраница(),
				Цвета[Счетчик],
				Цвета[Цвета.ВГраница()]);
				
			СуммаНалоговНаПредыдущейИтерации = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеНадписьюРегиональныеОсобенностиНалогов(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		Элементы.НадписьРегиональныеОсобенностиНалогов.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.НадписьРегиональныеОсобенностиНалогов.Видимость = Истина;
	КонецЕсли;
	
	Заголовок = Новый Массив;
	
	Если Форма.УказаныРегиональныеСтавки Тогда
		Заголовок.Добавить(нСтр("ru='Сумма налогов рассчитана с учетом льготных'"));
		Заголовок.Добавить(" ");
		Заголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='ставок налогов'"), , , , "УказатьРегиональныеСтавки"));
	Иначе
		НачалоЗаголовка = НСтр("ru='В регионе могут применяться льготные'");
		Заголовок.Добавить(НачалоЗаголовка);
		Заголовок.Добавить(" ");
		Заголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='ставки налогов'"), , , , "УказатьРегиональныеСтавки"));
	КонецЕсли;
	
	Элементы.НадписьРегиональныеОсобенностиНалогов.Заголовок = Новый ФорматированнаяСтрока(Заголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиЕНВД(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	ЕстьЕНВД = ПоказыватьРасчетЕНВД(Форма);
	
	Элементы.РасчетЕНВДИП.Видимость = ЕстьЕНВД;
	Элементы.РасчетЕНВДООО.Видимость = ЕстьЕНВД;
	
	ЭтоПоказательКоличествоРаботников = 
		(Результат.ИмяФизическогоПоказателяЕНВД = ИмяФизическогоПоказателяКоличествоРаботников())
		Или (Результат.ИмяФизическогоПоказателяЕНВД = ИмяФизическогоПоказателяСредняяЧисленностьРаботников());
	
	Элементы.ФизическийПоказательЕНВД.Видимость = ИспользуетсяФизическийПоказательЕНВД(Форма)
		И Не ЭтоПоказательКоличествоРаботников;
	Элементы.ВидДеятельностиЕНВД.Видимость = ВРегионеПрименяетсяЕНВД(Форма) 
		И Элементы.ВидДеятельностиЕНВД.СписокВыбора.Количество() > 0;
	
	Элементы.ФизическийПоказательЕНВД.Заголовок                     = Результат.ИмяФизическогоПоказателяЕНВД;
	Элементы.ФизическийПоказательЕНВДРасширеннаяПодсказка.Заголовок = Форма.ПодсказкаФизическогоПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяФизическийПоказательЕНВД(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.ВидДеятельностиЕНВД)
		И ТипЗнч(Форма.ВидДеятельностиЕНВД) <> Тип("Строка")
		И ВРегионеПрименяетсяЕНВД(Форма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиНПД(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	ЕстьНПД = ПоказыватьРасчетНПД(Форма);
	
	Элементы.РасчетНПДИП.Видимость = ЕстьНПД;
	
	МожноРассчитыватьНПД = ЕстьНПД
		И ВРегионеПрименяетсяНПД(Форма)
		И Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД
		И (Не ЗначениеЗаполнено(Форма.ЮридическоеФизическоеЛицо)
			Или Форма.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	
	Если МожноРассчитыватьНПД Тогда
		Элементы.ИтогоДоходы.Видимость = Ложь;
		Элементы.ДоходыОтЮридическихЛиц.Видимость = Истина;
		Элементы.ДоходыОтФизическихЛиц.Видимость = Истина;
	Иначе
		Элементы.ИтогоДоходы.Видимость = Истина;
		Элементы.ДоходыОтЮридическихЛиц.Видимость = Ложь;
		Элементы.ДоходыОтФизическихЛиц.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиАУСН(Форма)
	
	Элементы  = Форма.Элементы;
	
	Элементы.РасчетАУСНДоходыИП.Видимость = Форма.НалоговыеРежимы.Свойство("АУСНДоходыИП");
	Элементы.РасчетАУСНДоходыМинусРасходыИП.Видимость = Форма.НалоговыеРежимы.Свойство("АУСНДоходыМинусРасходыИП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиПСН(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	ВозможноПрименениеПСН = Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН;
	ПолученыДанныеДляРасчета = ПолученыДанныеДляРасчетаПотенциальногоДохода(Форма);
	ВыполняетсяЗапросСервисаПатент = ЗначениеЗаполнено(Форма.ИдентификаторЗадания_ДифференциацияПотенциальногоДохода)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗадания_РазмерыПотенциальногоДохода);
	
	Элементы.ИдентификаторМуниципальногоОбразования.Видимость = ВозможноПрименениеПСН
		И Элементы.ИдентификаторМуниципальногоОбразования.СписокВыбора.Количество() > 1;
	
	Элементы.КодВидаДеятельностиПСН.Видимость = ВозможноПрименениеПСН
		И Элементы.КодВидаДеятельностиПСН.СписокВыбора.Количество() > 1;
	
	Элементы.ГруппаСтоимостьПатента.Видимость = ВозможноПрименениеПСН
		И Не ПолученыДанныеДляРасчета
		И Не ВыполняетсяЗапросСервисаПатент
		И Результат.СтавкаПСН > 0;
	
	Если ЗначениеЗаполнено(Результат.ИмяФизическогоПоказателяПСН) Тогда
		// Если физический показатель ЕНВД идентичен физическому показателю Патента, 
		// значение для патента будем определять исходя из физического показателя ЕНВД.
		ФизическиеПоказателиИдентичны = ИспользуетсяФизическийПоказательЕНВД(Форма)
			И ФизическиеПоказателиИдентичны(Результат.ИмяФизическогоПоказателяЕНВД, Результат.ИмяФизическогоПоказателяПСН);
		Элементы.ФизическийПоказательПСН.Видимость = Не ФизическиеПоказателиИдентичны;
	Иначе
		Элементы.ФизическийПоказательПСН.Видимость = Ложь;
	КонецЕсли;
	Элементы.ФизическийПоказательПСН.Заголовок = Строка(Результат.ИмяФизическогоПоказателяПСН);
	
	Если Результат.ИмяФизическогоПоказателяПСН = ИмяФизическогоПоказателяКоличествоРаботников()
		Или Результат.ИмяФизическогоПоказателяПСН = ИмяФизическогоПоказателяСредняяЧисленностьРаботников() Тогда
		Элементы.ФизическийПоказательПСН.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.ОбъектНалогообложенияПатента) Тогда
		ЗаголовокПСН = СтрШаблон(НСтр("ru = 'Патент (%1)'"), Форма.ОбъектНалогообложенияПатента);
	Иначе
		ЗаголовокПСН = НСтр("ru = 'Патент'");
	КонецЕсли;
	Элементы.ВыбранРежимПСНИП.Заголовок = ЗаголовокПСН;
	Элементы.НадписьПСНИП.Заголовок = ЗаголовокПСН;
	
	Элементы.ВыполняетсяЗапросСервисаПатент.Видимость = ВыполняетсяЗапросСервисаПатент;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическиеПоказателиИдентичны(Знач Показатель1, Знач Показатель2)
	
	Возврат Перечисления.ФизическиеПоказатели.ПоказателиИдентичны(Показатель1, Показатель2);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФизическогоПоказателяКоличествоРаботников()
	
	Возврат ПредопределенноеЗначение("Перечисление.ФизическиеПоказатели.КоличествоРаботниковВключаяИП");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФизическогоПоказателяСредняяЧисленностьРаботников()
	
	Возврат ПредопределенноеЗначение("Перечисление.ФизическиеПоказатели.СредняяЧисленностьНаемныхРаботников");
	
КонецФункции

&НаСервере
Процедура ПриИзмененииВыбранногоРежима()
	
	РаскраситьРеквизитыВыбранногоРежима();
	
	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьРеквизитыВыбранногоРежима()
	
	Для Каждого НалоговыйРежим Из НалоговыеРежимы Цикл
		Элементы["РаскрашиваемыеРеквизиты" + НалоговыйРежим.Ключ].ЦветФона = ЦветФонаФормы;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыбранныйРежим) Тогда
		Элементы["РаскрашиваемыеРеквизиты" + ВыбранныйРежим].ЦветФона = ЦветФонаВыбраннойГруппы;
		ОбновитьНавигациюФормы();
	КонецЕсли;
	
	Если РежимРаботыПомощника = РежимыРаботыПомощника().НачалоРаботы Тогда
		Элементы.КомандаПодробнееОРежиме.Заголовок = ЗаголовокКнопкиПодробнееОРежиме(ВыбранныйРежим);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовокКнопкиПодробнееОРежиме(ВыбранныйРежим)
	
	Если СтрНачинаетсяС(ВыбранныйРежим, "НПД") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про НПД >'");
	ИначеЕсли СтрНачинаетсяС(ВыбранныйРежим, "УСНДоходыРасходы") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про УСН (доходы - расходы) >'");
	ИначеЕсли СтрНачинаетсяС(ВыбранныйРежим, "УСНДоходы") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про УСН (доходы) >'");
	ИначеЕсли СтрНачинаетсяС(ВыбранныйРежим, "АУСН") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про АУСН >'");	
	ИначеЕсли СтрНачинаетсяС(ВыбранныйРежим, "ПСН") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про Патент >'");
	ИначеЕсли СтрНачинаетсяС(ВыбранныйРежим, "ОСНО") Тогда
		Возврат НСтр("ru = 'Узнать подробнее про общий режим >'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьНавигациюФормы()
	
	Если Не ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		Обработки.РегистрацияОрганизации.ОбновитьНавигациюФормы(ЭтаФорма, ВыбранныйРежим = "ПСНИП");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПроцентаВзносаСДоходовВПФРИП(РежимНалогообложения)
	
	Если РежимНалогообложения = "ОСНО" Тогда
		Возврат Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП)
			+ "/" + Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП + 100);
	Иначе
		Возврат Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП) + "%";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьРасчетНПД(Форма)
	
	Если Не Форма.НалоговыеРежимы.Свойство("НПДИП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Форма.ТекущаяДатаПользователя >= НалогНаПрофессиональныйДоходКлиентСервер.ДатаНачалаЭксперимента());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьРасчетЕНВД(Форма)
	
	ПоказыватьЕНВД = (Форма.ТекущаяДатаПользователя < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД())
		И (Форма.РежимРаботыПомощника <> РежимыРаботыПомощника().НачалоРаботы);
	
	Возврат ПоказыватьЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимыРаботыПомощника()
	
	РежимыРаботы = Новый Структура;
	РежимыРаботы.Вставить("Основной", "Основной");
	РежимыРаботы.Вставить("РегистрацияОрганизации", "РегистрацияОрганизации");
	РежимыРаботы.Вставить("НачалоРаботы", "НачалоРаботы");
	РежимыРаботы.Вставить("УтратаПраваНПД", "УтратаПраваНПД");
	
	Возврат РежимыРаботы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПерейтиНаСтраницу(Форма, ИмяСтраницы)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

#КонецОбласти

#Область ПотенциальныйДоход

&НаКлиенте
Функция ЗапроситьДифференциациюПотенциальногоДохода()
	
	ЗапросВыполнен = Ложь;
	
	Если Не ИспользоватьСервисРегиональныеСтавкиНалогов(ЭтотОбъект)
		Или ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗаполнитьСписокВыбораКодВидаДеятельностиПСН(Неопределено);
		ЗаполнитьСписокВыбораМуниципальныхОбразований(Неопределено);
		УправлениеФормой(ЭтотОбъект);
		Возврат ЗапросВыполнен;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("КодРегиона", КодРегионаРегистрации);
	ПараметрыПроцедуры.Вставить("КодОКВЭД", КодОКВЭД2);
	ПараметрыПроцедуры.Вставить("Период", ТекущаяДатаПользователя);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания_ДифференциацияПотенциальногоДохода);
	ПараметрыОперации.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОперации.Вставить("ИмяПроцедуры", "РегиональныеСтавкиНалогов.ДифференциацияПотенциальногоДохода");
	ПараметрыОперации.Вставить("ПараметрыПроцедуры", ПараметрыПроцедуры);
	ПараметрыОперации.Вставить("НаименованиеФоновогоЗадания",
		НСтр("ru = 'Получение данных сервиса: дифференциация потенциального дохода'"));
	
	ДлительнаяОперация = ДлительнаяОперацияПолученияДанных(ПараметрыОперации);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ИдентификаторЗадания_ДифференциацияПотенциальногоДохода = ДлительнаяОперация.ИдентификаторЗадания;
		
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("ПриПолученииДифференциацииПотенциальногоДохода", ЭтотОбъект, ПараметрыПроцедуры),
				ПараметрыОжидания);
			
			ЗапросВыполнен = Истина;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			ПриПолученииДифференциацииПотенциальногоДохода(ДлительнаяОперация, ПараметрыПроцедуры);
			
			ЗапросВыполнен = Истина;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат ЗапросВыполнен;
	
КонецФункции

&НаКлиенте
Функция ЗапроситьРазмерыПотенциальногоДохода()
	
	ЗапросВыполнен = Ложь;
	
	Если Не ИспользоватьСервисРегиональныеСтавкиНалогов(ЭтотОбъект)
		Или ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Возврат ЗапросВыполнен;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДляРасчетаПотенциальногоДохода) Тогда
		УдалитьИзВременногоХранилища(АдресДанныхДляРасчетаПотенциальногоДохода);
	КонецЕсли;
	АдресДанныхДляРасчетаПотенциальногоДохода = "";
	ПолученыДанныеДляРасчетаПотенциальногоДохода = Ложь;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("КодВидаДеятельности", КодВидаДеятельностиПСН);
	ПараметрыПроцедуры.Вставить("ИдентификаторТерритории", ИдентификаторМуниципальногоОбразования);
	ПараметрыПроцедуры.Вставить("Период", ТекущаяДатаПользователя);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания_РазмерыПотенциальногоДохода);
	ПараметрыОперации.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОперации.Вставить("ИмяПроцедуры", "РегиональныеСтавкиНалогов.РазмерыПотенциальногоДохода");
	ПараметрыОперации.Вставить("ПараметрыПроцедуры", ПараметрыПроцедуры);
	ПараметрыОперации.Вставить("НаименованиеФоновогоЗадания",
		НСтр("ru = 'Получение данных сервиса: размеры потенциального дохода'"));
	
	ДлительнаяОперация = ДлительнаяОперацияПолученияДанных(ПараметрыОперации);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ИдентификаторЗадания_РазмерыПотенциальногоДохода = ДлительнаяОперация.ИдентификаторЗадания;
		
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("ПриПолученииРазмеровПотенциальногоДохода", ЭтотОбъект, ПараметрыПроцедуры),
				ПараметрыОжидания);
			
			ЗапросВыполнен = Истина;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			ПриПолученииРазмеровПотенциальногоДохода(ДлительнаяОперация, ПараметрыПроцедуры);
			
			ЗапросВыполнен = Истина;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат ЗапросВыполнен;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДлительнаяОперацияПолученияДанных(Знач ПараметрыОперации)
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыОперации.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОперации.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыОперации.НаименованиеФоновогоЗадания;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		ПараметрыОперации.ИмяПроцедуры,
		ПараметрыОперации.ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПриПолученииДифференциацииПотенциальногоДохода(ДлительнаяОперация, ПараметрыЗапроса) Экспорт
	
	ИдентификаторЗадания_ДифференциацияПотенциальногоДохода = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата)
				И ПараметрыЗапроса.КодРегиона = КодРегионаРегистрации
				И ПараметрыЗапроса.КодОКВЭД = КодОКВЭД2 Тогда
				
				Если ПрочитатьДифференциациюПотенциальногоДохода(ДлительнаяОперация.АдресРезультата) Тогда
					ЗапроситьРазмерыПотенциальногоДохода();
				Иначе
					// Обновлем данные сравнения
					СравнитьРежимыНалогообложения(ЭтотОбъект);
					УправлениеФормой(ЭтотОбъект);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРазмеровПотенциальногоДохода(ДлительнаяОперация, ПараметрыЗапроса) Экспорт
	
	ИдентификаторЗадания_РазмерыПотенциальногоДохода = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата)
				И ПараметрыЗапроса.КодВидаДеятельности = КодВидаДеятельностиПСН
				И ПараметрыЗапроса.ИдентификаторТерритории = ИдентификаторМуниципальногоОбразования Тогда
				
				ПрочитатьРазмерыПотенциальногоДохода(ДлительнаяОперация.АдресРезультата);
				
			КонецЕсли;
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДифференциациюПотенциальногоДохода(АдресДанныхДляРасчета)
	
	Перем ВидыДеятельности, Территории;
	
	ДифференциацияПотенциальногоДохода = Неопределено;
	ОписаниеОшибкиРасчетаПотенциальногоДохода = "";
	
	РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресДанныхДляРасчета);
	УдалитьИзВременногоХранилища(АдресДанныхДляРасчета);
	
	Если РезультатЗапроса <> Неопределено Тогда
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			ДифференциацияПотенциальногоДохода = РезультатЗапроса.Ответ;
			Если ДифференциацияПотенциальногоДохода.Свойство("ВидыДеятельности") Тогда
				ВидыДеятельности = ДифференциацияПотенциальногоДохода.ВидыДеятельности;
			КонецЕсли;
			Если ДифференциацияПотенциальногоДохода.Свойство("Территории") Тогда
				Территории = ДифференциацияПотенциальногоДохода.Территории;
			КонецЕсли;
		ИначеЕсли РезультатЗапроса.КодСостояния = 400 Тогда
			ОписаниеОшибкиРасчетаПотенциальногоДохода = РезультатЗапроса.ОписаниеОшибки;
		ИначеЕсли РезультатЗапроса.КодСостояния = 500 Тогда
			ОписаниеОшибкиРасчетаПотенциальногоДохода = НСтр("ru = 'Сервис временно недоступен'");
			ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапроса.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем списки выбора дополнительных параметров
	ЗаполнитьСписокВыбораКодВидаДеятельностиПСН(ВидыДеятельности);
	ЗаполнитьСписокВыбораМуниципальныхОбразований(Территории);
	
	Возврат ДифференциацияПотенциальногоДохода <> Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораКодВидаДеятельностиПСН(ВидыДеятельности)
	
	СписокВыбора = Элементы.КодВидаДеятельностиПСН.СписокВыбора;
	
	СписокВыбора.Очистить();
	Если ВидыДеятельности <> Неопределено Тогда
		Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
			СписокВыбора.Добавить(ВидДеятельности.Код, ВидДеятельности.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 0 Тогда
		КодВидаДеятельностиПСН = "";
	КонецЕсли;
	
	Если СписокВыбора.Количество() <> 0 И СписокВыбора.НайтиПоЗначению(КодВидаДеятельностиПСН) = Неопределено Тогда
		КодВидаДеятельностиПСН = СписокВыбора[0].Значение;
	КонецЕсли;
	
	СписокВыбора.СортироватьПоЗначению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораМуниципальныхОбразований(Территории)
	
	СписокВыбора = Элементы.ИдентификаторМуниципальногоОбразования.СписокВыбора;
	
	СписокВыбора.Очистить();
	Если Территории <> Неопределено Тогда
		Для Каждого Территория Из Территории Цикл
			СписокВыбора.Добавить(Территория.Идентификатор, Территория.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 0 Тогда
		ИдентификаторМуниципальногоОбразования = "";
	КонецЕсли;
	
	Если СписокВыбора.Количество() <> 0
		И СписокВыбора.НайтиПоЗначению(ИдентификаторМуниципальногоОбразования) = Неопределено Тогда
		// Если выбрана основная организация, попробуем определить муниципальное образование по юр.адресу
		ИдентификаторМуниципальногоОбразования =
			РегиональныеСтавкиНалогов.МуниципальноеОбразованиеПоАдресуРегистрацииОрганизацииПоУмолчанию(КодРегионаРегистрации, СписокВыбора);
	КонецЕсли;
	
	Если СписокВыбора.Количество() <> 0
		И СписокВыбора.НайтиПоЗначению(ИдентификаторМуниципальногоОбразования) = Неопределено Тогда
		ИдентификаторМуниципальногоОбразования = СписокВыбора[0].Значение;
	КонецЕсли;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазмерыПотенциальногоДохода(АдресДанныхДляРасчета)
	
	ОписаниеОшибкиРасчетаПотенциальногоДохода = "";
	
	ИмяФизическогоПоказателяПСН = Перечисления.ФизическиеПоказатели.ПустаяСсылка();
	ОбъектНалогообложенияПатента = "";
	
	РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресДанныхДляРасчета);
	УдалитьИзВременногоХранилища(АдресДанныхДляРасчета);
	
	Если РезультатЗапроса <> Неопределено Тогда
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Ответ = РезультатЗапроса.Ответ;
			Если Ответ.Свойство("ИмяФизическогоПоказателя") И Не ПустаяСтрока(Ответ.ИмяФизическогоПоказателя) Тогда
				ИмяФизическогоПоказателяПСН = ПредопределенноеЗначение(
					СтрШаблон("Перечисление.ФизическиеПоказатели.%1", Ответ.ИмяФизическогоПоказателя));
			КонецЕсли;
			Если Ответ.Свойство("ОбъектНалогообложения") Тогда
				ОбъектНалогообложенияПатента = Ответ.ОбъектНалогообложения;
			КонецЕсли;
			Если Ответ.Свойство("РазмерыПотенциальногоДохода") Тогда
				ПолученыДанныеДляРасчетаПотенциальногоДохода = (Ответ.РазмерыПотенциальногоДохода.Количество() > 0);
				АдресДанныхДляРасчетаПотенциальногоДохода = ПоместитьВоВременноеХранилище(Ответ, УникальныйИдентификатор);
			КонецЕсли;
		ИначеЕсли РезультатЗапроса.КодСостояния = 400 Тогда
			ОписаниеОшибкиРасчетаПотенциальногоДохода = РезультатЗапроса.ОписаниеОшибки;
		ИначеЕсли РезультатЗапроса.КодСостояния = 500 Тогда
			ОписаниеОшибкиРасчетаПотенциальногоДохода = НСтр("ru = 'Сервис временно недоступен'");
			ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапроса.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Обновляем флаг доступности ПСН
	СоотнестиВидДеятельностиОКВЭД2иПСН();
	
	// Обновлем данные сравнения
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГраницыФизическогоПоказателяПСН(ИмяФизическогоПоказателя)
	
	Если ЗначениеЗаполнено(ИмяФизическогоПоказателя) Тогда
		Если ИмяФизическогоПоказателя = Перечисления.ФизическиеПоказатели.СредняяЧисленностьНаемныхРаботников Тогда
			МинимальноеЗначение = 0;
			МаксимальноеЗначение = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент();
		ИначеЕсли ИмяФизическогоПоказателя = Перечисления.ФизическиеПоказатели.КоличествоРаботниковВключаяИП Тогда
			МинимальноеЗначение = 1;
			МаксимальноеЗначение = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент() + 1;
		Иначе
			МинимальноеЗначение = 1; // Дробные значения не поддерживаются
			МаксимальноеЗначение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ГраницыФизическогоПоказателя = Новый Структура(
		"МинимальноеЗначение, МаксимальноеЗначение, ИмяФизическогоПоказателя",
		МинимальноеЗначение, МаксимальноеЗначение, ИмяФизическогоПоказателя);
	
	Возврат ГраницыФизическогоПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПотенциальныйДоход(Форма)
	
	Перем ФизическийПоказатель;
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если ПолученыДанныеДляРасчетаПотенциальногоДохода(Форма) Тогда
		Форма.ПотенциальныйДоход = РегиональныеСтавкиНалоговКлиентСервер.ПотенциальныйДоход(
			Форма.АдресДанныхДляРасчетаПотенциальногоДохода,
			Результат.ФизическийПоказательПСН,
			Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода);
	Иначе
		// Рассчитывается в зависимости от стоимости патента
		Если Результат.СтавкаПСН <> 0 Тогда
			Форма.ПотенциальныйДоход = Окр(Форма.СтоимостьПатента / (Результат.СтавкаПСН / 100), 2);
		Иначе
			Форма.ПотенциальныйДоход = 0; // Не можем определить, т.к. нет данных
		КонецЕсли;
		Форма.ОписаниеОшибкиРасчетаПотенциальногоДохода = "";
	КонецЕсли;
	
	Возврат Форма.ПотенциальныйДоход;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтоимостьПатента(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	СтоимостьПатента = Неопределено;
	
	Если ПолученыДанныеДляРасчетаПотенциальногоДохода(Форма) Тогда
		СтоимостьПатента = Окр(Результат.ПотенциальноВозможныйДоход * Результат.СтавкаПСН / 100, 0);
	КонецЕсли;
	
	Если СтоимостьПатента = Неопределено Тогда
		// Указывается вручную
		СтоимостьПатента = ?(Результат.СтавкаПСН = 0, 0, Форма.СтоимостьПатента);
	КонецЕсли;
	
	Возврат СтоимостьПатента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолученыДанныеДляРасчетаПотенциальногоДохода(Форма)
	
	Возврат ИспользоватьСервисРегиональныеСтавкиНалогов(Форма) И
		Форма.ПолученыДанныеДляРасчетаПотенциальногоДохода;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Сравнение режимов налогообложения'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.СравнениеРежимовНалогообложения,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПараметрыЗаполненияНДФЛИП_ПовышеннаяСтавка(НалоговаяБаза, ТекущаяДатаПользователя)
	
	Результат = Новый Структура;
	СтавкиНалоговПоУмолчанию = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию(
		ПериодРасчетаНДФЛ_ИП(ТекущаяДатаПользователя));
	
	Результат.Вставить("СтавкаНДФЛ", СтавкиНалоговПоУмолчанию.СтавкаНДФЛ);
	Результат.Вставить("СтавкаНДФЛПовышенная", СтавкиНалоговПоУмолчанию.СтавкаНДФЛПовышенная);
	
	Результат.Вставить("ПредельнаяСуммаНалоговойБазыНДФЛ",
		УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки());
	
	Результат.Вставить("ПредельнаяСуммаНДФЛОбычнаяСтавка",
		Результат.ПредельнаяСуммаНалоговойБазыНДФЛ * СтавкиНалоговПоУмолчанию.СтавкаНДФЛ / 100);
	
	Результат.Вставить("НалоговаяБаза", НалоговаяБаза);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПериодРасчетаНДФЛ_ИП(ТекущаяДатаПользователя)
	
	ДатаНачалаПрогрессивнойШкалы = УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы();
	Если ТекущаяДатаПользователя < ДатаНачалаПрогрессивнойШкалы
		И ТекущаяДатаПользователя >= ДобавитьМесяц(ДатаНачалаПрогрессивнойШкалы, - 1) Тогда
		
		// Если ИП создается в период времени с 1 декабря по 31 декабря одного календарного года,
		// то налоговый период будет с даты регистрации по декабрь следующего года (п. 2 ст. 55 НК РФ)
		Возврат ДатаНачалаПрогрессивнойШкалы;
	Иначе
		Возврат ТекущаяДатаПользователя;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНалоговогоРежима(ВыбранныйРежим)
	
	Описание = Новый Структура;
	Описание.Вставить("Представление", "");
	Описание.Вставить("Плюсы", "");
	Описание.Вставить("Минусы", "");
	Описание.Вставить("КакПерейти", "");
	
	МакетСОписаниями = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("ОписаниеНалоговыхРежимов");
	
	ОбластьНалоговыйРежим = МакетСОписаниями.ПолучитьОбласть(ВыбранныйРежим);
	Если ОбластьНалоговыйРежим = Неопределено Тогда
		Возврат Описание;
	КонецЕсли;
	
	Описание.Представление = СтроковыеФункции.ФорматированнаяСтрока(ОбластьНалоговыйРежим.Область(1, 2).Текст);
	Описание.Плюсы = СтроковыеФункции.ФорматированнаяСтрока(ОбластьНалоговыйРежим.Область(1, 3).Текст);
	Описание.Минусы = СтроковыеФункции.ФорматированнаяСтрока(ОбластьНалоговыйРежим.Область(1, 4).Текст);
	Описание.КакПерейти = ОбластьНалоговыйРежим.Область(1, 5).Текст;
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияСравненияСистемНалогообложения());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	УстановитьВидимостьБаннера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалоговыеРежимыАУСН()
	
	НалоговыеРежимы = Новый Массив;
	НалоговыеРежимы.Добавить("АУСНДоходыИП");
	НалоговыеРежимы.Добавить("АУСНДоходыМинусРасходыИП");
	НалоговыеРежимы.Добавить("АУСНДоходыООО");
	НалоговыеРежимы.Добавить("АУСНДоходыМинусРасходыООО");
	
	Возврат НалоговыеРежимы;
	
КонецФункции

#Область НачалоРаботы

&НаСервереБезКонтекста
Функция ОрганизацияСоздана()
	
	Возврат (Справочники.Организации.КоличествоОрганизаций() > 0);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодготовитьКонстантыДляНачалаРаботы()
	
	Константы.НачалоРаботы.Установить(Ложь);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьРежимРаботыБыстрыйСтартНаСервере()
	
	РежимыРаботыПользователя = Обработки.НачалоРаботы.НовыйРежимРаботыПользователя();
	Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.БыстрыйСтарт);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНачалаРаботы()
	
	ПараметрыНачалаРаботы = Новый Структура;
	
	ПараметрыНачалаРаботы.Вставить("ВыбранныйРежим", ВыбранныйРежим);
	ПараметрыНачалаРаботы.Вставить("ВидОрганизации", ВидОрганизации(ВыбранныйРежим));
	
	СистемаНалогообложения = СистемаНалогообложения(ВыбранныйРежим);
	ПараметрыНачалаРаботы.Вставить("СистемаНалогообложения", СистемаНалогообложения.ОсновнойРежим);
	ПараметрыНачалаРаботы.Вставить("ПлательщикЕНВД", СистемаНалогообложения.ПлательщикЕНВД);
	ПараметрыНачалаРаботы.Вставить("ПрименяетсяУСНПатент", СистемаНалогообложения.ПрименяетсяУСНПатент);
	ПараметрыНачалаРаботы.Вставить("ПрименяетсяЕНВДдо2021", Истина);
	ПараметрыНачалаРаботы.Вставить("ИспользуетсяТрудНаемныхРаботников",
		ФондОплатыТруда > 0 Или СредняяЧисленностьРаботников > 0);
	
	Возврат ПараметрыНачалаРаботы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьПараметрыНачалаРаботы(Параметры)
	
	Обработки.СравнениеРежимовНалогообложения.СохранитьПараметрыНачалаРаботы(Параметры);
	
КонецПроцедуры

#Область УтратаПраваНПД

&НаСервере
Процедура РазместитьНавигацию(ИмяТекущейСтраницы)

	Если ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника) Тогда
		
		НавигацияПараметрФормы = ИмяТекущейСтраницы;
		СтруктураНавигацииПомощника = НалогНаПрофессиональныйДоходВызовСервера.НавигацияПомощника(ВыбранныйРежим, Организация);
		НавигацияПомощников.РазместитьНавигацию(ЭтотОбъект, СтруктураНавигацииПомощника, Параметры);
		
		Если НавигацияПараметрФормы = "Налоги" Тогда
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаОсновная");
		ИначеЕсли НавигацияПараметрФормы = "Заявление" Тогда
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаЗаявление");
		Иначе
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаДокументы");
		КонецЕсли;
		
	Иначе
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПомощникУтратыПраваНПД(РежимРаботыПомощника)
	
	Возврат РежимРаботыПомощника = РежимыРаботыПомощника().УтратаПраваНПД;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеПредставителя()
	
	Если Не Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
		
		РегистрацияНУОбъект = Организация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		ПредставлениеПредставителя  = РегистрацияВНалоговомОргане.Представитель;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя  = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = (СпособПодачиДокументов = 
		НалогНаПрофессиональныйДоходКлиентСервер.СпособыПодачиЗаявленияОбУтратеПраваНПД().ИФНСпредставитель);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТерриториальнуюНалоговуюИнспекцию()
	
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодНалоговогоОргана");
	
	РеквизитыНалоговойИнспекции = Обработки.РегистрацияОрганизации.РеквизитыНалоговойИнспекции(КодНалоговогоОргана);
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияИнформация   = РеквизитыНалоговойИнспекции.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПереходеКСледующемуШагуУтратаПраваНПДНаСервере()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		ИмяТекущейСтраницы = "Заявление";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаявление Тогда
		ИмяТекущейСтраницы = "Документы";
	КонецЕсли;
		
	ОпределитьТерриториальнуюНалоговуюИнспекцию();
	РазместитьНавигацию(ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы()
	
	Если Не Модифицированность И ЗначениеЗаполнено(УведомлениеОПереходеНаУСН)
		Или НавигацияПараметрФормы <> "Заявление" Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеПредставителя = НалогНаПрофессиональныйДоходКлиентСервер.НовыеДанныеПредставителя();
	ЗаполнитьЗначенияСвойств(ДанныеПредставителя, РегистрацияВНалоговомОргане);
	
	ДлительнаяОперация = НалогНаПрофессиональныйДоходВызовСервера.СформироватьУведомлениеОПереходеНаУСНВФоне(
		Организация,
		УникальныйИдентификатор,
		ВыбранныйРежим,
		ДанныеПредставителя);
	
	Если ДлительнаяОперация = Неопределено Тогда
		// Ошибка проверки заполнения.
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		НалогНаПрофессиональныйДоходКлиент.ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
	Иначе
		НалогНаПрофессиональныйДоходКлиент.ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	УведомлениеОПереходеНаУСН = РезультатВыполнения.Заявление;
	
	Модифицированность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
