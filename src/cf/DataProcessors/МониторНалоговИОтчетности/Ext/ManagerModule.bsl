#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает и заполняет модель налоговых и отчетных индикаторов монитора.
// 
// Параметры:
//  Параметры - Структура - структура со свойствами:
//   * Организация                     - СправочникСсылка.Организация - организация, для которой формируются индикаторы.
//   * Текущий день                    - Дата - день на который формируются индикаторы.
//   * ОтсутствуютПатенты              - Булево - признак того, что для ИП, применяющего патент, нет введены патенты.
//                                                Для остальных лиц должен быть ЛОЖЬ.
//   * ОтсутствуютВидыДеятельностиЕНВД - Булево - признак того, что для организации, применяющей ЕНВД, не введены виды деятельности
//                                                Для остальных лиц должен быть ЛОЖЬ.
//   * УпрощеннаяНулеваяОтчетность     - Булево - упрощенный режим формирования индикаторов при нулевой деятельности.
//                                                Если ИСТИНА - деятельность по организации отсутствует,
//                                                налоговые и отчетные индикаторы сворачиваются в общий "Нулевая отчетность".
//                                                Если ЛОЖЬ - ведется регулярная деятельность, индикаторы формируются развернуто.
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
// 
// Возвращаемое значение:
//  ХранилищеЗначения - сформированная модель монитора, включающая данные для каждого из столбцов формы монитора.
//                      Хранилище содержит структуру со следующими ключами:
//   * ВключенныеЗадачи    - ТаблицаЗначений - см функцию НовыйВключенныеЗадачи().
//   * НалоговыеИндикаторы - ТаблицаЗначений - см функцию НовыйТаблицаНалоговыхИндикаторов().
//   * ОтчетныеИндикаторы  - ТаблицаЗначений - см. функцию НовыйТаблицаОтчетныхИндикаторов().
//
Функция СформироватьПоказателиМонитораВФоне(Параметры, АдресРезультата) Экспорт
	
	ИндикаторыМонитора = СформироватьПоказателиМонитора(Параметры);

	Хранилище = Новый ХранилищеЗначения(ИндикаторыМонитора);
	ПоместитьВоВременноеХранилище(Хранилище, АдресРезультата);

КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт

	Возврат "tax_and_reporting_monitor";

КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//
// Возвращаемое значение:
//   Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	
	Возврат Настройки;
	
КонецФункции

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru='Монитор налогов и отчетности'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru='Монитор налогов и отчетности.'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.МониторНалоговИОтчетности;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Не переданы входящие настройки для отчета.'");
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	НастройкиСтрока = ПолучитьСтрокуИзДвоичныхДанных(Параметры);
	НастройкиМонитора = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрока);

	Если НастройкиМонитора.Свойство("organization") Тогда
		
		Если НастройкиМонитора.organization.Свойство("inn") Тогда
			
			КПП = Неопределено;
			НастройкиМонитора.organization.Свойство("kpp", КПП);
			Организация = Справочники.Организации.НайтиОрганизацию(
							НастройкиМонитора.organization.inn, КПП, Ложь);
			Если Организация.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru = 'Организация с ИНН %1 КПП %2 отсутствует в информационной базе.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке,
					НастройкиМонитора.organization.inn, НастройкиМонитора.organization.kpp);
			КонецЕсли;
			
		Иначе
			
			СообщениеОбОшибке = НСтр("ru = 'В настройках группа organization должна содержать поля inn и kpp.'");
			
		КонецЕсли;
		
	Иначе
		
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru = 'В информационной базе не задана организация по-умолчанию.'");
		КонецЕсли;
		
	КонецЕсли;
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТекущийДень = ТекущаяДатаМонитора();
	
	// Для актуальности публикуемых показателей монитора достаточно, чтобы был актуален предыдущий квартал.
	// Расчет налога за текущий квартал не требуется - монитор, в отличие от помощников уплаты налогов, не обучен смотреть "в будущее".
	ГраницаАктуальности = НачалоКвартала(ТекущийДень) - 1;
	Если НЕ ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, ГраницаАктуальности, СообщениеОбОшибке) Тогда
		
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Получение информации монитора.
	ПараметрыМонитора = ПараметрыПубликацииМонитора(Организация, ТекущийДень);
	
	Монитор = Новый Структура;
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	ПараметрыПубликации.ИмяФормы = "Обработка.МониторНалоговИОтчетности.Форма";
	ПараметрыПубликации.Организация = Организация;
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Монитор налогов и отчетности'"),
		РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации));
	Монитор.Вставить("link", ОписаниеСсылкиПереход);
	
	Монитор.Вставить("rows", Новый Массив);
	
	Строка = Новый Структура("item, title, report, tax", 0, "");
	
	// Заголовок отчетов.
	Ячейка = Новый Структура;
	Ячейка.Вставить("type", ТипЗаголовок());
	Ячейка.Вставить("title", ЗаголовокСдачаОтчетности());
	Строка.report = Ячейка;
	
	// Заголовок налогов.
	Ячейка = Новый Структура;
	Ячейка.Вставить("type", ТипЗаголовок());
	Ячейка.Вставить("title", ЗаголовокОплатаНалогов());
	Строка.tax = Ячейка;
	Монитор.rows.Добавить(Строка);
	
	ИндикаторыМонитора = СформироватьПоказателиМонитора(ПараметрыМонитора);
	
	ВключенныеЗадачи    = ИндикаторыМонитора.ВключенныеЗадачи;
	НалоговыеИндикаторы = ИндикаторыМонитора.НалоговыеИндикаторы;
	ОтчетныеИндикаторы  = ИндикаторыМонитора.ОтчетныеИндикаторы;
	
	РядыБлоков = СформироватьРядыБлоков(ВключенныеЗадачи, НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	СчРяд = 1;
	Для Каждого Ряд Из РядыБлоков Цикл
	
		Строка = Новый Структура("item, title, report, tax", СчРяд);
		Монитор.rows.Добавить(Строка);
		СчРяд = СчРяд + 1;

		Строка.title = Ряд.СтрокаЗадачи.ИмяЗадачи;
		
		Блок = СоздатьЭкземплярБлока(Ряд, Ложь, ПараметрыМонитора);
		Строка.report = СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПереход);
		
		Блок = СоздатьЭкземплярБлока(Ряд, Истина, ПараметрыМонитора);
		Строка.tax = СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПереход);
		
	КонецЦикла;
	
	// Определение необходимости выполнить сверку с ФНС
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияИнтерфейсБанка());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПерсонализированныеПредложенияСервисов.ПолучитьБаннер(СтруктураПараметров, АдресХранилища);
	Баннер = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если Баннер = Неопределено Тогда
		НужноЗапроситьСверку = Ложь;
	Иначе
		НужноЗапроситьСверку = Истина;
	КонецЕсли;
	Монитор.Вставить("check", НужноЗапроситьСверку);
	
	// Единый налоговый счет
	Монитор.Вставить("ens", ДанныеЕНСВСтруктуруОтвета(ИндикаторыМонитора.ЕдиныйНалоговыйСчет, ПараметрыМонитора));
	
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	
	ДанныеОтчета = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Монитор);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	
КонецФункции

// Возвращает дату, начиная с которой монитор отображает задачи.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Организация, для которой нужно вернуть дату начала обзора отчетности.
//  ТекущийДень	 - Дата - Дата, для которой нужно вернуть дату начала обзора отчетности.
// 
// Возвращаемое значение:
//   - Дата
//
Функция НачалоОбзораОтчетности(Организация, ТекущийДень) Экспорт
	
	// Обзор отчетности выполняем с начала периода исковой давности по налогам.
	// Срок исковой давности по налогу истекает через 3 года после начала налогового периода,
	// следующего за периодом, в котором необходимо уплатить налог или сдать отчет.
	// Например, для отчетности за 2015 год начало отсчета периода исковой давности
	// начинается 1 января 2017 года: отчетность за 2015 сдается в 2016 году, и срок
	// исковой давности отсчитывается с начала следующего года.
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	НачалоИнтервала = Макс(ДобавитьМесяц(НачалоГода(ТекущийДень) + 1, -48), ДатаНачалаДеятельности);
	
	Возврат НачалоИнтервала;
	
КонецФункции

// Возвращает признак, нужно ли запускать тест отчетности прошлых периодов по УСН.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Ссылка на организацию, для которой нужно проверить условия запуска теста.
//  ЭтоНулевка	 - Булево, признак работы в сервисе нулевой отчетности.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ТребуетсяТестОтчетностиПрошлыхПериодовПоУСН(Организация, ЭтоНулевка = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрлицо(Организация) И НЕ ЭтоНулевка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у организации в базе указаны разные системы налогообложения,
	// то им опрос не нужен. Он показывается только в том случае, если организация на УСН только начала вести учет.
	Если ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация).Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатыТеста = Обработки.МониторНалоговИОтчетности.РезультатПроверкиОтчетностиПрошлыхПериодов(Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	Если РезультатыТеста.ПроверкаВыполнена Тогда
		// Тест уже пройден, второй раз его показывать не требуется.
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если с даты начала работы в программе прошло три года - то тест не нужен.
	Если ГраницаОтчетностиПрошлыхПериодов <= НачалоОбзораОтчетности(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Правило = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ПравилоДляПомощникаПодготовкиОтчетности(Организация);
	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервыйФинансовыйПериод = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(Правило, Организация);
	
	// Если учет в программе ведется с первого налогового периода - прошлые периоды отсутствуют, тест не нужен.
	Если ЗначениеЗаполнено(ПервыйФинансовыйПериод) И ГраницаОтчетностиПрошлыхПериодов < ПервыйФинансовыйПериод Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтчетныйПериодДляЗапускаТеста = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ОтчетныйПериодДляЗапускаТеста(
		Правило, Организация);
		
	// Отчетный период для запуска теста не определен,
	// поэтому и тест запускать не нужно.
	Если Не ЗначениеЗаполнено(ОтчетныйПериодДляЗапускаТеста) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Отчетный период для запуска теста определяет, с какого периода не нужно спрашивать про отчетность.
	// Если ОтчетныйПериодДляЗапускаТеста = 01.01.2018, то нужно спрашивать про 2018 год.
	// Если он Совпадает с первым финансовым периодом, то отчет запускать нет смысла,
	// так как раньше ничего не было - мы хотим опрашивать пользователя о периоде, который был до первого. А такого быть не может.
	Если ПервыйФинансовыйПериод >= ОтчетныйПериодДляЗапускаТеста Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВведеныНачальныеОстаткиПоУСН(Организация) Тогда
		// Пользователь уже ввел начальные остатки по УСН (счет 68.12).
		// Основная цель опроса - помочь ему это сделать.
		// Если он смог ввести остатки сам - не нужно ему дополнительно помогать.
		Возврат Ложь;
	КонецЕсли;
	
	Если СозданыДекларацииПоНалогу(Организация, "РегламентированныйОтчетУСН") Тогда
		// Пользователь уже создал декларацию по УСН, значит он уже давно работает,
		// не нужно его спрашивать про старые периоды.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак, нужно ли запускать тест отчетности прошлых периодов по НДФЛ Предпринимателя.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - Ссылка на организацию, для которой нужно проверить условия запуска теста.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ТребуетсяТестОтчетностиПрошлыхПериодовПоНДФЛ_ИП(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрлицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у организации в базе указаны разные системы налогообложения,
	// то им опрос не нужен. Он показывается только в том случае, если организация на НДФЛ только начала вести учет.
	Если ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация).Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатыТеста = Обработки.МониторНалоговИОтчетности.РезультатПроверкиОтчетностиПрошлыхПериодов(Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	Если РезультатыТеста.ПроверкаВыполнена Тогда
		// Тест уже пройден, второй раз его показывать не требуется.
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если с даты начала работы в программе прошло три года - то тест не нужен.
	Если ГраницаОтчетностиПрошлыхПериодов <= НачалоОбзораОтчетности(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Правило = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ПравилоДляПомощникаПодготовкиОтчетности(Организация);
	
	ПервыйФинансовыйПериод = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(
		Правило, Организация);
	
	// Если учет в программе ведется с первого налогового периода - прошлые периоды отсутствуют, тест не нужен.
	Если ЗначениеЗаполнено(ПервыйФинансовыйПериод) И ГраницаОтчетностиПрошлыхПериодов < ПервыйФинансовыйПериод Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВведеныНачальныеОстаткиПоНДФЛ_ИП(Организация) Тогда
		// Пользователь уже ввел начальные остатки по НДФЛ (счет 68.21).
		Возврат Ложь;
	КонецЕсли;
	
	Если СозданыДекларацииПоНалогу(Организация, "РегламентированныйОтчет3НДФЛ") Тогда
		// Пользователь уже создал декларацию по НДФЛ, значит он уже давно работает,
		// не нужно его спрашивать про старые периоды.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак, нужно ли запускать тест по налогам и взносам прошлых периодов.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Ссылка на организацию, для которой нужно проверить условия запуска теста.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, КодЗадачи)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрлицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Опрос запускается только у плательщиков УСН и ИП на НДФЛ.
	// Опрос по фиксированным страховым взносам ИП запускается всегда, кроме ИП на АУСН.
	Если Не ЭтоЗадачаВзносовИП(КодЗадачи)
		И Не УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДатаМонитора())
		И Не УчетнаяПолитика.ПлательщикНДФЛ(Организация, ТекущаяДатаМонитора())
		Или УчетнаяПолитика.ПрименяетсяАУСН(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПройденОпросПоНалогу = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(Организация, КодЗадачи);
	Если ПройденОпросПоНалогу Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у организации в базе указаны разные системы налогообложения,
	// то им опрос не нужен. Он показывается только в том случае, если организация на УСН только начала вести учет.
	Если ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация).Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		// Пользователь начал вести учет, в том же году, что и зарегистрировался, тест не нужен.
		Возврат Ложь;
	КонецЕсли;
	
	// Если с даты начала работы в программе прошло три года - то тест не нужен.
	Если ГраницаОтчетностиПрошлыхПериодов <= НачалоОбзораОтчетности(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Основная цель опроса - помочь пользователю ввести начальные остатки по налогам и взносам.
	// Если он смог ввести остатки сам - не нужно ему дополнительно помогать.
	Если ЭтоЗадачаУСН(КодЗадачи) И ВведеныНачальныеОстаткиПоУСН(Организация) Тогда
		// Пользователь уже ввел начальные остатки по УСН (счет 68.12).
		Возврат Ложь;
	ИначеЕсли ЭтоЗадачаВзносовИП(КодЗадачи) И ВведеныНачальныеОстаткиПоВзносамИП(Организация) Тогда
		// Пользователь уже ввел начальные остатки по взносам ИП (счета 69.06.3, 69.06.5).
		Возврат Ложь;
	ИначеЕсли ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) И ВведеныНачальныеОстаткиПоНДФЛ_ИП(Организация) Тогда
		// Пользователь уже ввел начальные остатки по взносам ИП (счет 68.21).
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает сумму, доступную к списанию с ЕНС по налогу или взносу
//
// Параметры:
//  Организация   - СправочникСсылка.Организация - Ссылка на организацию
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило для идентификации налога
//  ПериодСобытия - Дата - Период, за который необходимо рассчитать налог
//  БезУчетаДолга - Булево - если истина - возвращает только сумму текущего налога, иначе сумму текущего плюс недоимка
// 
// Возвращаемое значение:
//  Число - Сумма доступного остатка с ЕНС
//
Функция СуммаЕНСКЗачетуПоНалогуВзносу(Организация, Правило, ПериодСобытия, БезУчетаДолга = Ложь) Экспорт
	
	ТекущийДень = ТекущаяДатаМонитора();
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("ТекущийДень", ТекущийДень);
	// Параметры, зависимые от организации
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормирования,
		ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень),
		Истина);
		
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоПатенту",            Истина);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНДС",                Истина);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНалогамНаИмущество", Истина);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНалогуНаПрибыль",    Истина);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачиПоРегистру(Организация, ТекущийДень, Ложь);
	
	// Подготовка налоговых индикаторов для расчета суммы
	НалоговыеИндикаторы = НовыйПоказателиМонитора().НалоговыеИндикаторы;
	ИндикаторВзносовИП  = Неопределено;
	ПодготовитьНалоговыеИндикаторы(НалоговыеИндикаторы, ЗадачиОрганизации, ИндикаторВзносовИП, ПараметрыФормирования);
	
	ОтборНалога = Новый Структура;
	ОтборНалога.Вставить("Правило", Правило);
	ОтборНалога.Вставить("ПериодСобытия", КонецДня(ПериодСобытия));
	СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ОтборНалога);
	Если СтрокиНалога.Количество() > 0 Тогда
		Если БезУчетаДолга Тогда
			Возврат СтрокиНалога[0].ДоступноСЕНСТекущий;
		Иначе
			Возврат СтрокиНалога[0].ДоступноСЕНСТекущий + СтрокиНалога[0].ДоступноСЕНСДолг;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Возвращает сумму единого налогового платежа по всем налогам на текущий день
// для указанной организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Организация, для которой нужно вернуть сумму.
// 
// Возвращаемое значение:
//  Число - Сумма единого налогового платежа
//
Функция СуммаЕдиногоНалоговоПлатежа(Организация) Экспорт
	ТекущийДень = ТекущаяДатаМонитора();
	ПараметрыМонитора = ПараметрыПубликацииМонитора(Организация, ТекущийДень);
	ИндикаторыМонитора = СформироватьПоказателиМонитора(ПараметрыМонитора);
	Возврат ИндикаторыМонитора.ЕдиныйНалоговыйСчет.НужноОплатить;
КонецФункции

// Возвращает сумму, доступную к списанию с ЕНС по налогу или взносу
//
// Параметры:
//  Организация   - СправочникСсылка.Организация - Ссылка на организацию
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило для идентификации налога
//  ПериодСобытия - Дата - Период, за который необходимо рассчитать налог
// 
// Возвращаемое значение:
//  Число - Сумма доступного остатка с ЕНС
//
Функция СуммыЕНСКЗачетуПоНалогамВзносамНаДату(Организация, НаДату) Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("ТекущийДень", НаДату);
	
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоПатенту",            Ложь);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНДС",                Истина);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНалогамНаИмущество", Истина);
	ПараметрыФормирования.Вставить("ФормироватьСуммыПоНалогуНаПрибыль",    Истина);
	
	// Параметры, зависимые от организации
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормирования,
		ПараметрыЗависимыеОтОрганизации(Организация, НаДату),
		Истина);
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачиПоРегистру(Организация, НаДату, Ложь);
	
	// Подготовка налоговых индикаторов для расчета суммы
	НалоговыеИндикаторы = НовыйПоказателиМонитора().НалоговыеИндикаторы;
	ИндикаторВзносовИП  = Неопределено;
	ПодготовитьНалоговыеИндикаторы(НалоговыеИндикаторы, ЗадачиОрганизации, ИндикаторВзносовИП, ПараметрыФормирования);
	
	Возврат НалоговыеИндикаторы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет параметры формирования монитора, зависимые от организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - организация для определения значений параметров.
//  ТекущийДень - Дата - дата для определения значений параметров.
//
// Возвращаемое значение:
//   Структура - параметры монитора, зависимые от организации:
//      * ДатаНачалаДеятельности - Дата
//      * ОтсутствуютВидыДеятельностиЕНВД - Булево  
//      * ОтсутствуютПатенты - Булево 
//      * УпрощеннаяНулеваяОтчетность - Булево 
//      * ЭтоИПНулевка - Булево
//
Функция ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень) Экспорт
	
	ПараметрыМонитора = Новый Структура;
	
	ПараметрыМонитора.Вставить("ДатаНачалаДеятельности", КалендарьБухгалтера.ДатаНачалаДеятельности(Организация));
	
	ПараметрыМонитора.Вставить("ОтсутствуютВидыДеятельностиЕНВД",
		УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущийДень)
		И УчетЕНВД.ОтсутствуютДействующиеВидыДеятельности(Организация, ТекущийДень));
	
	ПараметрыМонитора.Вставить("ОтсутствуютПатенты",
		Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень)
		И УчетПСН.ВидыДеятельностиПоПатентуОрганизации(Организация, ТекущийДень).Количество() = 0);
	
	ПараметрыМонитора.Вставить("УпрощеннаяНулеваяОтчетность",
		НулеваяОтчетность.ДоступноУпрощенноеФормирование(Организация, ТекущийДень));
	
	ЭтоИПНулевка = Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	ПараметрыМонитора.Вставить("ЭтоИПНулевка", ЭтоИПНулевка);
	
	ПараметрыМонитора.Вставить("ПлательщикЕНП", УчетнаяПолитика.ПлательщикЕНП(Организация, ТекущийДень));
	
	ПараметрыМонитора.Вставить("НастроенОбменССервисомАУСН",
		РегистрыСведений.СостоянияИнтеграцииАУСН.БанковскийСчетПодключенКСервису(Организация));
	
	Возврат ПараметрыМонитора;
	
КонецФункции

// Задает параметры оформления для отображения монитора.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - по какой организации задаем параметры.
//  ТекущийДень  - Дата - на какой день задаем параметры.
//
// Возвращаемое значение:
//  Структура - получатель устанавливаемых параметров:
//      * МаксДата
//      * МинДата
//      * РадостныйСмайлик
//      * ЦветСерыйБлок
//      * ЦветЗеленыйБлок
//      * ЦветЖелтыйБлок
//      * ЦветКрасныйБлок
//      * ШрифтТекста
//      * ШрифтСсылок
//      * ШрифтЗаголовков
//
Функция ПараметрыПубликацииМонитора(Организация, ТекущийДень)
	
	ПараметрыМонитора = Новый Структура;
	ПараметрыМонитора.Вставить("УникальныйИдентификатор");
	ПараметрыМонитора.Вставить("Организация", Организация);
	ПараметрыМонитора.Вставить("ТекущийДень", ТекущийДень);
	
	// Параметры, зависимые от организации
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМонитора,
		ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень),
		Истина);
	
	// Параметры оформления
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Индикаторы = СостоянияИндикаторов();
	ПараметрыМонитора.Вставить("МаксДата",         ДобавитьМесяц(КорректныйПериод.КонецКорректногоПериода, 24));
	ПараметрыМонитора.Вставить("МинДата",          ДобавитьМесяц(КорректныйПериод.НачалоКорректногоПериода, - 24));
	ПараметрыМонитора.Вставить("ШрифтСсылок",      Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11));
	ПараметрыМонитора.Вставить("ШрифтЗаголовков",  Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 14));
	ПараметрыМонитора.Вставить("ЦветСерыйБлок",    Индикаторы.Серый);
	ПараметрыМонитора.Вставить("ЦветЗеленыйБлок",  Индикаторы.Зеленый);
	ПараметрыМонитора.Вставить("ЦветЖелтыйБлок",   Индикаторы.Желтый);
	ПараметрыМонитора.Вставить("ЦветКрасныйБлок",  Индикаторы.Красный);
	ПараметрыМонитора.Вставить("ЦветПустойБлок",   Индикаторы.Пустой);
	ПараметрыМонитора.Вставить("РадостныйСмайлик", Смайлик());
	
	ПараметрыМонитора.Вставить("ОстатокЕНС", 0);
	ПараметрыМонитора.Вставить("НужноОплатить", 0);
	ПараметрыМонитора.Вставить("ВходящийОстатокЕНС", 0);
	ПараметрыМонитора.Вставить("ПростойУчетЕНС", ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета());
	
	Возврат ПараметрыМонитора;
	
КонецФункции

Функция ЗаголовокОплатаНалогов() Экспорт
	
	Возврат НСтр("ru='Оплата налогов'");
	
КонецФункции

Функция ЗаголовокСдачаОтчетности() Экспорт
	
	Возврат НСтр("ru='Сдача отчетности'");
	
КонецФункции

Функция ЛимитСсылокИндикатора() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ТекущаяДатаМонитора() Экспорт
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

Функция НавигационнаяСсылкаДляОткрытияМонитораНалоговИОтчетов() Экспорт
	
	Возврат "e1cib/command/ОбщаяКоманда.МониторНалоговИОтчетности";
	
КонецФункции

Функция ФорматДата()
	Возврат "ДЛФ=ДД";
КонецФункции

Функция СоздатьЭкземплярБлока(Ряд, ЭтоНалог, ПараметрыМонитора) Экспорт
	
	СтрокаЗадачи = Ряд.СтрокаЗадачи;
	
	Если ЭтоНалог Тогда
		СтрокиИндикатора = Ряд.СтрокиНалога;
		ВыводитьПустойБлок = Ряд.ПустойБлокНалога;
	Иначе
		СтрокиИндикатора = Ряд.СтрокиОтчетов;
		ВыводитьПустойБлок = Ряд.ПустойБлокОтчетов;
	КонецЕсли;
	
	Индикаторы = Новый Массив;
	Для каждого Задача Из СтрокиИндикатора Цикл
		Индикаторы.Добавить(Задача.Индикатор);
	КонецЦикла;
	Индикатор = СамыйКритичныйИндикатор(Индикаторы);
	
	ЦветаИндикаторов = ЦветаИндикаторов();
	
	Блок = Неопределено;
	Если ВыводитьПустойБлок Тогда
		Блок = ПустойБлок(ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Серый Тогда
		Блок = НенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	ИначеЕсли (ЭтоНалог И Не ПоддерживаетсяУплатаНалогаПоЗадаче(СтрокаЗадачи.КодЗадачи) И Не ПараметрыМонитора.ПростойУчетЕНС)
		Или ЭтоЗадачаБухгалтерскаяОтчетность(СтрокаЗадачи.КодЗадачи)
		Или (ЭтоНалог И ЭтоЗадачаПатент(СтрокаЗадачи.КодЗадачи)) Тогда
		Блок = СерыйБлок(СтрокаЗадачи, ЭтоНалог, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Зеленый Тогда
		Блок = ЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Желтый Тогда
		Блок = ЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Красный Тогда
		Блок = КрасныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция СформироватьРядыБлоков(ВключенныеЗадачи, НалоговыеИндикаторы, ОтчетныеИндикаторы) Экспорт

	РядыБлоков = Новый ТаблицаЗначений;
	РядыБлоков.Колонки.Добавить("СтрокаЗадачи");
	РядыБлоков.Колонки.Добавить("СтрокиНалога");
	РядыБлоков.Колонки.Добавить("СтрокиОтчетов");
	РядыБлоков.Колонки.Добавить("ПустойБлокНалога", Новый ОписаниеТипов("Булево"));
	РядыБлоков.Колонки.Добавить("ПустойБлокОтчетов", Новый ОписаниеТипов("Булево"));
	
	ОтборНуженПомощникОтчетовПрошлыхПериодов = Новый Структура("НуженПомощникОтчетовПрошлыхПериодов", Истина);
	
	ИндикаторыТребуетсяПомощникОтчетовПрошлыхПериодов = ОтчетныеИндикаторы.НайтиСтроки(ОтборНуженПомощникОтчетовПрошлыхПериодов);
	ЗадачиТребуетсяПомощникОтчетовПрошлыхПериодов
		= ОбщегоНазначения.ВыгрузитьКолонку(ИндикаторыТребуетсяПомощникОтчетовПрошлыхПериодов, "Владелец", Истина);
	КодыЗадачТребуетсяПомощникОтчетовПрошлыхПериодов
		= ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗадачиТребуетсяПомощникОтчетовПрошлыхПериодов, "Код");
	
	ПропускаемыеЗадачи = Новый Массив;
	Для Каждого СтрокаЗадачи Из ВключенныеЗадачи Цикл
		
		Если ПропускаемыеЗадачи.Найти(СтрокаЗадачи.КодЗадачи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НуженПомощникОтчетовПрошлыхПериодов = Ложь;
		Если СтрокаЗадачи.КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН()
				Или СтрокаЗадачи.КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель() Тогда
			
			Для Каждого ЭлементКоллекции Из КодыЗадачТребуетсяПомощникОтчетовПрошлыхПериодов Цикл
				Если ЭлементКоллекции.Значение = СтрокаЗадачи.КодЗадачи Тогда
					НуженПомощникОтчетовПрошлыхПериодов = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПоискПоВладельцу = Новый Структура("Владелец");
		ПоискПоВладельцуИПолучателю = Новый Структура("Владелец, Получатель");
		Если ЭтоЗадачаНДФЛПоУплате(СтрокаЗадачи.КодЗадачи) Тогда
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			СтрокаПары = ВключенныеЗадачи.Найти(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету());
			ПоискПоВладельцу.Владелец = ?(СтрокаПары = Неопределено, СтрокаЗадачи.Владелец, СтрокаПары.Владелец);
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
		ИначеЕсли ЭтоЗадачаНДФЛПоОтчету(СтрокаЗадачи.КодЗадачи) Тогда
			
			СтрокаПары = ВключенныеЗадачи.Найти(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате());
			ПоискПоВладельцу.Владелец = ?(СтрокаПары = Неопределено, СтрокаЗадачи.Владелец, СтрокаПары.Владелец);
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
		ИначеЕсли ЭтоЗадачаСтраховыхВзносовТравматизм(СтрокаЗадачи.КодЗадачи) Тогда
			
			ПоискПоКодуПравила = Новый Структура("КодПравила", КодПравилаУплатаТравматизм());
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоКодуПравила);
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоКодуПравила);
			
		ИначеЕсли ЭтоЗадачаВзносыНаВНиМ(СтрокаЗадачи.КодЗадачи) Тогда
			
			ПоискПоКодуПравила = Новый Структура("КодПравила", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ());
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоКодуПравила);
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоКодуПравила);
			
		Иначе
			
			Если ЭтоЗадачаНулеваяОтчетность(СтрокаЗадачи.КодЗадачи) Тогда
				ПоискПоВладельцуИПолучателю.Владелец   = СтрокаЗадачи.Владелец;
				ПоискПоВладельцуИПолучателю.Получатель = СтрокаЗадачи.Получатель;
				
				СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцуИПолучателю);
				СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцуИПолучателю);
			Иначе
				
				СтрокиНалога = НайтиСтрокиПоВладельцу(НалоговыеИндикаторы, СтрокаЗадачи.Владелец, СтрокаЗадачи.КодЗадачи);
				СтрокиОтчетов = НайтиСтрокиПоВладельцу(ОтчетныеИндикаторы, СтрокаЗадачи.Владелец, СтрокаЗадачи.КодЗадачи);
				
			КонецЕсли;
			
			СтрокаПары = Неопределено;
			
		КонецЕсли;
		
		Если ЭтоЗадачаСтраховыхВзносов(СтрокаЗадачи.КодЗадачи) Тогда
			ИндексТравматизм = -1;
			Для Индекс = 0 По СтрокиНалога.Количество()-1 Цикл
				Если ВыделятьВОтдельныйПоказатель(СтрокиНалога[Индекс].КодПравила) Тогда
					ИндексТравматизм = Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИндексТравматизм <> -1 Тогда
				СтрокиНалога.Удалить(ИндексТравматизм);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПары <> Неопределено Тогда
			ПропускаемыеЗадачи.Добавить(СтрокаПары.КодЗадачи);
		КонецЕсли;
		
		// Определим необходимость вывода нового ряда.
		НеобходимоРазместитьНовыйРяд = Ложь;
		Если ЭтоЗадачаВзносовИП(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаПатент(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаНулеваяОтчетность(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаТорговыйСбор(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаНалогНаПрофессиональныйДоход(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаСтраховыхВзносовТравматизм(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаВзносыНаВНиМ(СтрокаЗадачи.КодЗадачи)
		 Или СтрокиОтчетов.Количество() > 0 Тогда
			// Задачи по патенту, страховым взносам ИП за себя и торговому сбору выводим всегда, даже если по ним нулевые суммы
			// налога, такое может быть, например, в случае, когда данные еще не введены в программу.
			// Задача "Нулевая отчетность" формируется и выводится при соответствующем режиме работы приложения.
			НеобходимоРазместитьНовыйРяд = Истина;

		Иначе
			// Если отчетности по налогу предоставлять не требуется и задолженности к уплате нет, 
			// то не выводим блок.
			Для Каждого СтрокаНалога Из СтрокиНалога Цикл
				Если СтрокаНалога.КУплатеДолг <> 0 Или СтрокаНалога.КУплатеТекущий <> 0 Тогда
					НеобходимоРазместитьНовыйРяд = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НеобходимоРазместитьНовыйРяд Тогда
			
			Ряд = РядыБлоков.Добавить();
			Ряд.СтрокаЗадачи = СтрокаЗадачи;
			
			Ряд.СтрокиНалога = НалоговыеИндикаторы.Скопировать(СтрокиНалога);
			Ряд.СтрокиНалога.Сортировать("Срок");
			Ряд.ПустойБлокНалога = НуженПомощникОтчетовПрошлыхПериодов;
			
			Ряд.СтрокиОтчетов = ОтчетныеИндикаторы.Скопировать(СтрокиОтчетов);
			Ряд.СтрокиОтчетов.Сортировать("Срок");
			Ряд.ПустойБлокОтчетов = НуженПомощникОтчетовПрошлыхПериодов
				И Ряд.СтрокиОтчетов.НайтиСтроки(ОтборНуженПомощникОтчетовПрошлыхПериодов).Количество() = 0
				И Не ЭтоЗадачаВзносовИП(СтрокаЗадачи.КодЗадачи);
			
		КонецЕсли;
		
		// Удаляем обработанные строки налогов и отчетов.
		УдалитьСтрокиТаблицы(НалоговыеИндикаторы, СтрокиНалога);
		УдалитьСтрокиТаблицы(ОтчетныеИндикаторы, СтрокиОтчетов);
		
	КонецЦикла;
	
	Возврат РядыБлоков;
	
КонецФункции

#Область ТестПрошлыхПериодов

Функция РезультатПроверкиОтчетностиПрошлыхПериодов(Организация, ГосударственныйОрган = Неопределено) Экспорт
	
	Результат = НовыйРезультатПроверкиПрошлыхПериодов();
	
	Результат.ПроверкаВыполнена =
		РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ПроверкаВыполнена(Организация, ГосударственныйОрган);
	
	Если Результат.ПроверкаВыполнена Тогда
		Результат.ДобавленныеПериоды =
			РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Организация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатПроверкиПрошлыхПериодов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПроверкаВыполнена",  Ложь);
	Результат.Вставить("ДобавленныеПериоды", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеРезультатовПроверкиПрошлыхПериодов(ПроверкаПрошлыхПериодовВыполнена, ПериодыДобавленныеПроверкой) Экспорт
	
	// Сначала самые простые варианты
	
	МассивСтрок = Новый Массив;
	Если НЕ ПроверкаПрошлыхПериодовВыполнена Тогда
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Возможно, надо сдавать отчеты за предыдущие периоды. '")));
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
		Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	Если ПериодыДобавленныеПроверкой.Количество() = 0 Тогда
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Вы указали, что все отчеты за прошлые периоды сданы. '")));
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить еще раз'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
		Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	// Выявляем добавленные тестом периоды и отчеты за эти периоды
	
	ОтчетныеГоды = Новый Массив;
	
	Для Каждого ДобавленныйПериод Из ПериодыДобавленныеПроверкой Цикл
		
		Если НЕ ДобавленныйПериод.Требуется Тогда
			Продолжить;
		КонецЕсли;
		
		ОтчетныйГод = Год(ДобавленныйПериод.НачалоПериода);
		Если ОтчетныеГоды.Найти(ОтчетныйГод) = Неопределено Тогда
			ОтчетныеГоды.Добавить(ОтчетныйГод);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаЗаголовок = "";
	СтрокаОписания   = "";
	Если ОтчетныеГоды.Количество() = 1 Тогда
		СтрокаЗаголовок = НСтр("ru = 'По вашим ответам добавлены отчеты за %1 год. '");
		СтрокаОписания = Формат(ОтчетныеГоды[0], "ЧГ=");
	ИначеЕсли ОтчетныеГоды.Количество() > 1 Тогда
		СтрокаЗаголовок = НСтр("ru = 'По вашим ответам добавлены отчеты за %1 годы. '");
		МинимальныйГод  = ОтчетныеГоды[0];
		МаксимальныйГод = ОтчетныеГоды[0];
		Для Каждого ОтчетныйГод Из ОтчетныеГоды Цикл
			МинимальныйГод = Мин(МинимальныйГод, ОтчетныйГод);
			МаксимальныйГод = Макс(МинимальныйГод, ОтчетныйГод);
		КонецЦикла;
		СтрокаОписания = СтрШаблон(НСтр("ru = '%1-%2'"), Формат(МинимальныйГод, "ЧГ="), Формат(МаксимальныйГод, "ЧГ="));
	КонецЕсли;
	
	Если СтрокаЗаголовок = "" Тогда
		Описание = "";
	Иначе
		Описание = СтрШаблон(СтрокаЗаголовок, СтрокаОписания);
	КонецЕсли;
	
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(Описание));
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить еще раз'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация = &Организация";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СистемаНалогообложения");
	
КонецФункции

#КонецОбласти

Функция МинимальныйОтчетныйПериод(ЗначенияПериодов) Экспорт
	
	Период = Перечисления.Периодичность.Месяц;
	Если ЗначенияПериодов.Найти(Период) = Неопределено Тогда
		Период = Перечисления.Периодичность.Квартал;
		Если ЗначенияПериодов.Найти(Период) = Неопределено Тогда
			Период = Перечисления.Периодичность.Год;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтроковыеКонстанты

Функция ТипЗаголовок()
	
	Возврат "header";
	
КонецФункции

Функция Смайлик()
	
	Возврат "{{smile}}";
	
КонецФункции

Функция ЦветаИндикаторов()
	
	Индикаторы = Новый Структура;
	Индикаторы.Вставить("Зеленый", "Зеленый");
	Индикаторы.Вставить("Желтый",  "Желтый");
	Индикаторы.Вставить("Красный", "Красный");
	Индикаторы.Вставить("Серый",   "Ненастроенный");
	Индикаторы.Вставить("Пустой",  "");
	
	Возврат Индикаторы;
	
КонецФункции

Функция СостоянияИндикаторов()
	
	Индикаторы = Новый Структура;
	Индикаторы.Вставить("Зеленый", "success");
	Индикаторы.Вставить("Желтый",  "warning");
	Индикаторы.Вставить("Красный", "danger");
	Индикаторы.Вставить("Серый",   "undeclared");
	Индикаторы.Вставить("Пустой",  "null");
	
	Возврат Индикаторы;
	
КонецФункции

Функция СамыйКритичныйИндикатор(Индикаторы)
	
	Индикатор = ЦветаИндикаторов().Зеленый;
	
	Для каждого ТекИндикатор Из Индикаторы Цикл 
		
		Если ТекИндикатор = ЦветаИндикаторов().Серый
		 Или ТекИндикатор = ЦветаИндикаторов().Красный Тогда 
		 
			Индикатор = ТекИндикатор;
			Прервать;
			
		ИначеЕсли ТекИндикатор = ЦветаИндикаторов().Желтый Тогда
			
			Индикатор = ТекИндикатор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Индикатор;
	
КонецФункции

Функция ПоддерживаетсяУплатаНалогаПоЗадаче(КодЗадачи)
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодыСПоддержкой = Новый Массив;
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиЕНВД());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиТорговыйСбор());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛ());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиАУСН());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыАУСН());
	КодыСПоддержкой.Добавить(КодСтрокиМонитораСтраховыеВзносыТравматизм());
	КодыСПоддержкой.Добавить(КодСтрокиМонитораСтраховыеВзносыИП_ВНиМ());
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход());
	КонецЕсли;
	
	Возврат КодыСПоддержкой.Найти(КодЗадачи) <> Неопределено;
	
КонецФункции

Функция КодЗадачиНулеваяОтчетность(Получатель)
	
	Возврат "НулеваяОтчетность" + Получатель;
	
КонецФункции

Функция ЭтоЗадачаУСН(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН();
	
КонецФункции

Функция ЭтоЗадачаАУСН(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиАУСН();
	
КонецФункции

Функция ЭтоЗадачаВзносовИП(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП();
	
КонецФункции

Функция ЭтоЗадачаЕНВД(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЕНВД();
	
КонецФункции

Функция ЭтоЗадачаПатент(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент();
	
КонецФункции

Функция ЭтоЗадачаСтраховыхВзносов(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы();
	
КонецФункции

Функция ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, КодПравила)
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = КодПравилаУплатаВзносовЗаКвартал();
	
КонецФункции

Функция ЭтоЗадачаФиксированныхВзносовИП(КодЗадачи, КодПравила)
	
	КодыЗадач = Новый Массив;
	КодыЗадач.Добавить("2013_Уплата");
	КодыЗадач.Добавить(КодПравилаУплатаВзносовЗаКвартал());
	КодыЗадач.Добавить("2022_УплатаАУСН");
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодыЗадач.Найти(КодПравила) <> Неопределено;
		
КонецФункции

Функция ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, КодПравила)
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = "2013_Уплата_СДоходов";
	
КонецФункции

Функция ЭтоЗадачаТорговыйСбор(КодЗадачи)

	Возврат КодЗадачи = "ТорговыйСбор";

КонецФункции

Функция ЭтоЗадачаПроверкиСтатистики(КодЗадачи, КодПравила)
	
	Если ЭтоЗадачаСтатистики(КодЗадачи)
		И (КодПравила = "ПроверитьПереченьФормФизлица" Или КодПравила = "ПроверитьПереченьФормЮрлица") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоЗадачаНДФЛПоУплате(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате();
	
КонецФункции

Функция ЭтоЗадачаНДФЛПоОтчету(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету();
	
КонецФункции

Функция ЭтоЗадачаНДФЛПредприниматель(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель();
	
КонецФункции

Функция ЭтоЗадачаСтатистики(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика();
	
КонецФункции

Функция ЭтоЗадачаНулеваяОтчетность(КодЗадачи)
	
	Возврат СтрНайти(КодЗадачи, КодЗадачиНулеваяОтчетность("")) <> 0;
	
КонецФункции

Функция ИмяЗадачиНулеваяОтчетность(ИмяПолучателя = "")
	
	Если ЗначениеЗаполнено(ИмяПолучателя) Тогда
		Возврат СтрШаблон(НСтр("ru = 'Нулевая отчетность в %1'"), ИмяПолучателя);
	Иначе
		Возврат НСтр("ru = 'Нулевая отчетность'");
	КонецЕсли;
	
КонецФункции

Функция ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход();
	
КонецФункции

Функция ЭтоЗадачаСтраховыхВзносовАУСН(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыАУСН();
	
КонецФункции

Функция КодПравилаУплатаТравматизмАУСН()
	
	Возврат "2022_Уплата_ФСС_НС_АУСН";
	
КонецФункции

Функция ЭтоЗадачаПередачиСведенийОСотрудникахДляАУСН(КодЗадачи, КодПравила)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету()
		И КодПравила = ВыполнениеЗадачБухгалтера.ИдентификаторПравилаПередачаСведенийОСотрудникахАУСН();
	
КонецФункции

Функция ЭтоПравилоЗаявлениеЗачетВзносов(КодПравила)
	
	Возврат КодПравила = КодПравилаЗаявлениеЗачетВзносов();
	
КонецФункции

Функция ЭтоЗадачаБухгалтерскаяОтчетность(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиБухгалтерскаяОтчетность();
	
КонецФункции

Функция КодПравилаЗаявлениеЗачетВзносов()
	
	Возврат "2023_ЕНП_ЗаявлениеЗачетВзносов";
	
КонецФункции

Функция КодПравилаУплатаВзносовЗаКвартал() Экспорт
	
	Возврат "2013_УплатаКвартал";
	
КонецФункции

Функция КодПравилаУплатаСтраховыеВзносы()
	
	Возврат "2023_УплатаСтраховыеВзносы";
	
КонецФункции

Функция КодПравилаУплатаТравматизм() Экспорт
	
	Возврат "2023_Уплата_Травматизм";
	
КонецФункции

Функция КодПравилаУплатаАвансаУСН() Экспорт
	
	Возврат "2023_УплатаАвансов";
	
КонецФункции

Функция ЭтоЗадачаСтраховыхВзносовТравматизм(КодЗадачи)
	
	Возврат КодЗадачи = КодСтрокиМонитораСтраховыеВзносыТравматизм();
	
КонецФункции

Функция КодСтрокиМонитораСтраховыеВзносыТравматизм()
	
	Возврат "СтраховыеВзносыТравматизм";
	
КонецФункции

Функция КодПравилаУплатаИПУСН() Экспорт
	
	Возврат "2013_УплатаПредприниматель";
	
КонецФункции

Функция ПравилаНалогаНаПрибыльАвансМесяц() 
	
	Правила = Новый Массив;
	Правила.Добавить(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НалогНаПрибыль", "2013_АвансыМесяц"));
	Правила.Добавить(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НалогНаПрибыль", "2023_АвансыМесяц_ЕдиныйПомощник"));
	
	Возврат Правила;
	
КонецФункции

Функция КодПравилаУплатаСтраховыеВзносыЕдиныйПомощник()
	
	Возврат "2023_УплатаСтраховыеВзносы_ЕдиныйПомощник";
	
КонецФункции

#КонецОбласти

#Область ФабрикаИндикаторов

Функция НенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	Если ЭтоНалог И ЭтоЗадачаЕНВД(КодЗадачи) Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного вида деятельности'");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ПараметрыМонитора.ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Виды деятельности'"), ПараметрыМонитора.ШрифтСсылок,
													,, "e1cib/list/Справочник.ВидыДеятельностиЕНВД");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыМонитора.Организация);
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ИмяФормы", "Справочник.ВидыДеятельностиЕНВД.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли ЭтоНалог И ЭтоЗадачаПатент(КодЗадачи) Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного патента '");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ПараметрыМонитора.ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Патенты'"), ПараметрыМонитора.ШрифтСсылок,,, "e1cib/list/Документ.ОперацияСПатентом");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		
		ОписаниеДействия = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ПараметрыМонитора.Организация);
		ОписаниеДействия.Вставить("ИмяФормы", "Документ.ОперацияСПатентом.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы",  Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли СтрокиИндикатора.Количество() > 0 Тогда
		
		ДанныеИндикатора = СтрокиИндикатора[0];
		
		Блок.Строка0 = ИмяЗадачи;
		ДобавитьСтроку1(Блок, ДанныеИндикатора.Наименование);
		
		ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
		НадписьПросрочено = НСтр("ru = 'Выполнить задачу'");
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция ЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЗеленыйБлок;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьЗеленыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если Не ИнтерфейсИнтеграцииСБанками И ЭтоНалог И ПараметрыМонитора.НужноОплатить > 0 И ЗадачаОплатыСЕНС(КодЗадачи) И ПараметрыМонитора.ВходящийОстатокЕНС < 0 Тогда
		ЗаполнитьБлокДолгПоЕНС(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если СтрокиИндикатора.Количество() > 0 Тогда
		
		МинПериодСобытия = ПараметрыМонитора.МаксДата;
		МинПериодичность = Перечисления.Периодичность.Год;
		ЭтоТекущаяЗадача = Ложь;
		Правило          = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.ПериодСобытия < МинПериодСобытия Тогда
				МинПериодСобытия = Индикатор.ПериодСобытия;
				МинПериодичность = Индикатор.Периодичность;
				ЭтоТекущаяЗадача = Индикатор.ЭтоТекущаяЗадача;
				Правило          = Индикатор.Правило;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПравила = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
		ЗаполнитьЗначенияСвойств(ДанныеПравила, Индикатор);
		
		ПервыйПериодПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(ДанныеПравила,
			ПараметрыМонитора.Организация, ПараметрыМонитора.ДатаНачалаДеятельности);
		
		Если ЭтоТекущаяЗадача Тогда
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(МинПериодичность, ПервыйПериодПравила);
		Иначе
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(МинПериодичность, ПервыйПериодПравила);
		КонецЕсли;
		
		ЭтоПерваяЗадача = (ПериодПервойЗадачи >= МинПериодСобытия);
		Если Не ЭтоПерваяЗадача Тогда
			Блок.Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Зеленый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Иначе
			Блок.Строка0 = ЗаголовокНалогаОтчета(Неопределено, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		КонецЕсли;
		
		Строка1 = ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача, ПараметрыМонитора);
		ДобавитьСтроку1(Блок, Строка1);
		
		// Для вывода ссылок на помощники при нулевой сумме исчисленного налога.
		ДобавитьСсылкиНаТекущиеНулевыеНалоги(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора);
		
		Если ЭтоЗадачаАУСН(КодЗадачи) И Не ЭтоНалог Тогда
			
			Если СтрокиИндикатора.Количество() > 0 Тогда
				НаименованиеСсылки = СтрШаблон(НСтр("ru = 'Банковские операции за %1'"),
					КалендарьБухгалтера.ПредставлениеПериодаСобытия(
						СтрокиИндикатора[0].НачалоПериодаСобытия, СтрокиИндикатора[0].ПериодСобытия));
				ПараметрыСсылки = СФормироватьПараметрыСсылки(СтрокиИндикатора[0], КодЗадачи, Истина, ПараметрыМонитора);
				ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Блок.Строка0 = "";
		Блок.ЦветФона = ПараметрыМонитора.ЦветПустойБлок;
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция ЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьЖелтыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	// Страховые взносы ИП для нулевки.
	Если ЭтоЗадачаВзносовИП(КодЗадачи) И (ПараметрыМонитора.ЭтоИПНулевка) Тогда
		
		ЗаполнитьЖелтыйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) Тогда
		ЗаполнитьЖелтыйБлокНалогНаПрофессиональныйДоход(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		
		УточнитьЦветБлока(Блок, КодЗадачи, ПараметрыМонитора);
		
		Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		ИтогКУплатеТекущий = 0;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
		КонецЦикла;
		
		Если НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
			Блок.Строка0 = Строка0;
		Иначе
			Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеТекущий);
		КонецЕсли;
		
	Иначе
		
		Блок.Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый,
			ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
	КонецЕсли;
	
	Если НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		ДобавитьСсылкуНаПомощникОтчетовПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора);
	ИначеЕсли НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		ДобавитьСсылкуНаПомощникОплатыНалоговПрошлыхПериодов(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
	Иначе
		// Доступно к списанию с ЕНС
		Если ЭтоНалог И ЗадачаОплатыСЕНС(КодЗадачи) И Не ПараметрыМонитора.ПростойУчетЕНС Тогда
			ЗаполнитьСсылкуДоступноСЕНС(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора);
			ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора), Истина);
		Иначе
			ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора));
		КонецЕсли;
		Если Не ЭтоНалог Или (ЭтоНалог И ПоддерживаетсяУплатаНалогаПоЗадаче(КодЗадачи)) Тогда
			ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		КонецЕсли;
		Если Не ИнтерфейсИнтеграцииСБанками И ЭтоНалог И ЗадачаОплатыСЕНС(КодЗадачи) И ПараметрыМонитора.НужноОплатить <> 0 Тогда
			ДобавитьСтрокуОплатаЕНС(Блок, ОписаниеСсылкиНаОплатуЕНС(ПараметрыМонитора));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция КрасныйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветКрасныйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	// Страховые взносы ИП для нулевки.
	Если ЭтоЗадачаВзносовИП(КодЗадачи)
		И ПараметрыМонитора.ЭтоИПНулевка Тогда
		
		ЗаполнитьКрасныйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьКрасныйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		ИтогКУплатеТекущий = СтрокиИндикатора.Итог("КУплатеТекущий");
		ИтогКУплатеДолг    = СтрокиИндикатора.Итог("КУплатеДолг");
		
		// Заголовок.
		ИндикаторДляЗаголовка = ?(ИтогКУплатеТекущий > 0, ЦветаИндикаторов().Желтый, ЦветаИндикаторов().Красный);
		ШаблонЗаголовка = ЗаголовокНалогаОтчета(ИндикаторДляЗаголовка, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		СуммаКУплате = ИтогКУплатеТекущий + ИтогКУплатеДолг;
		Блок.Строка0 = ОтформатироватьСтрокуСуммы(ШаблонЗаголовка, СуммаКУплате);
		
		// Описание.
		Если ИтогКУплатеТекущий > 0 Тогда
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		Иначе
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		КонецЕсли;
		// Доступно к списанию с ЕНС
		Если ЗадачаОплатыСЕНС(КодЗадачи) И Не ПараметрыМонитора.ПростойУчетЕНС Тогда
			ЗаполнитьСсылкуДоступноСЕНС(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора);
			ДобавитьСтроку1(Блок, Строка1, Истина);
		Иначе
			ДобавитьСтроку1(Блок, Строка1);
		КонецЕсли;
		
		// Ссылки на просроченные платежи. Для некоторых задач формируются особым образом.
		Если ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
			ЗаполнитьСсылкиНаУплатуЗадолженностиПоВзносамИП(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора);
		ИначеЕсли ЭтоЗадачаУСН(КодЗадачи) Или ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) Тогда
			ЗаполнитьСсылкиНаУплатуЗадолженностиПоНалогу(Блок, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		ИначеЕсли ЭтоЗадачаАУСН(КодЗадачи) Тогда
			ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		Иначе
			// Ссылки текущих платежей.
			ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
			
			Если ИтогКУплатеТекущий = 0 Тогда // Ссылка на текущий платеж отсутствует.
				
				// Для перехода к оплате задолженности требуется вывести отдельную ссылку на обслуживающий помощник.
				ДанныеИндикатора = СтрокиИндикатора[0];
				
				Если Не (ИтогКУплатеТекущий = 0 И ДанныеИндикатора.ЭтоТекущаяЗадача) Тогда
					ПериодСобытия = Мин(ПараметрыМонитора.ТекущийДень, ДанныеИндикатора.ПериодСобытия);
					КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, ПериодСобытия) - 1;
					НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
				Иначе
					КонецПериода  = ДанныеИндикатора.ПериодСобытия;
					НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
				КонецЕсли;
				
				ДанныеИндикатора.ПериодСобытия = КонецПериода;
				ДанныеИндикатора.НачалоПериодаСобытия = НачалоПериода;
				
				ДанныеИндикатора.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ДанныеИндикатора.НаименованиеЗадачи,
					ДанныеИндикатора.НачалоПериодаСобытия, ДанныеИндикатора.ПериодСобытия);
				
				ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				
				Если ЭтоЗадачаСтраховыхВзносовТравматизм(КодЗадачи)
					Или ЭтоЗадачаСтраховыхВзносовАУСН(КодЗадачи)
					Или ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) Тогда
					НадписьПросрочено = НСтр("ru = 'Оплата задолженности'");
				Иначе
					НадписьПросрочено = НСтр("ru = 'Расчет задолженности'");
				КонецЕсли;
				ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЕстьТекущаяЗадача = Ложь;
		МинСрокТекущаяЗадача = ПараметрыМонитора.МаксДата;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл 
			Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				МинСрокТекущаяЗадача = Мин(Индикатор.Срок, МинСрокТекущаяЗадача);
				ЕстьТекущаяЗадача = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Заголовок и описание.
		Если ЕстьТекущаяЗадача Тогда
			Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		Иначе
			Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Красный, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		КонецЕсли;
		Блок.Строка0 = Строка0;
		ДобавитьСтроку1(Блок, Строка1);
		
		// Ссылки текущих отчетов.
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		
		СсылкиНаПросроченныеОтчеты = СсылкиНаПросроченныеОтчеты(ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		Если ЗначениеЗаполнено(СсылкиНаПросроченныеОтчеты) Тогда
			ДобавитьСсылкиНаПросроченныеОтчеты(Блок, ЕстьТекущаяЗадача, СсылкиНаПросроченныеОтчеты);
		КонецЕсли;
		
		ДобавитьСсылкиНаОтчетыПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция СерыйБлок(СтрокаЗадачи, ЭтоНалог, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	
	Если ЭтоНалог И ЭтоЗадачаБухгалтерскаяОтчетность(СтрокаЗадачи.КодЗадачи) Тогда
		СтрокаСсылка = "";
		Блок.Строка0 = "";
		Возврат Блок;
	КонецЕсли;

	Строка0 = ?(ЭтоНалог, ЗаголовокОплатаНалогов(), ЗаголовокСдачаОтчетности());
	
	Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтСсылок);
	СтрокаСсылка = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков,,, 
                                               "e1cib/command/ОбщаяКоманда.СписокЗадач");
	Блок.Строка0 = СтрокаСсылка;
	
	Если ЭтоЗадачаПатент(СтрокаЗадачи.КодЗадачи) Тогда
		Правила = УчетПСН.ВидыДеятельностиПоПатентуОрганизации(ПараметрыМонитора.Организация, ПараметрыМонитора.ТекущийДень);
	Иначе
		Правила = ?(ЭтоНалог, СтрокаЗадачи.ПравилоНалог, СтрокаЗадачи.ПравилоОтчет);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация,Правило", ПараметрыМонитора.Организация, Правила);
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.СписокЗадач");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
	
	Возврат Блок;
	
КонецФункции

Функция ПустойБлок(ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветПустойБлок;
	
	Возврат Блок;
	
КонецФункции

Функция БазовыйБлок(ПараметрыМонитора)
	
	Свойства = Новый Структура;
	Свойства.Вставить("Доступность", Истина);
	Свойства.Вставить("ЦветФона", ПараметрыМонитора.ЦветСерыйБлок);
	Свойства.Вставить("Строка0", Новый ФорматированнаяСтрока(""));
	Свойства.Вставить("СтрокаВидимость0", Истина);
	Свойства.Вставить("КолвоСтрок", 1);
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#Область НулевыеИндикаторы

Процедура ЗаполнитьЗеленыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	Если ЭтоНалог Тогда
		Блок.Строка0 = НулевойНалогЗаголовок(ПараметрыМонитора);
		ДобавитьСтроку1(Блок, НулевойНалогОписание());
	ИначеЕсли СтрокиИндикатора.Количество() > 0 Тогда
		Индикатор = СтрокиИндикатора[0]; // Всегда единственный
		Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
		
		ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
		ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, Индикатор);
		
		Если ПравилаРазовыхЗадач().Найти(Индикатор.Правило) <> Неопределено
			И Индикатор.ТекущийОтчетЕстьВБазе Тогда
			СледующийОтчетСдаетсяВпервые = Ложь;
		Иначе
			СледующийОтчетСдаетсяВпервые = ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(ПараметрыМонитора.Организация,
				Индикатор.БудущаяЗадача.НачалоПериодаСобытия, ОсобенностиОтчета, ПараметрыМонитора.ДатаНачалаДеятельности)
				И РегистрыСведений.ПерваяОтчетнаяКампания.ЭтоПерваяОтчетнаяКампания(ПараметрыМонитора.Организация,
					ПараметрыМонитора.ТекущийДень, Индикатор.Периодичность);
		КонецЕсли;
		
		ДобавитьСтроку1(Блок, ОписаниеСледующегоНулевогоОтчета(Индикатор, СледующийОтчетСдаетсяВпервые));
		
		ДобавитьСтрокуСоСсылкой(Блок,
			НСтр("ru = 'Подробнее'"),
			ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора, Индикатор.Получатель));
	Иначе
		Блок.Строка0 = "";
		Блок.ЦветФона = ПараметрыМонитора.ЦветПустойБлок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЖелтыйБлокНулеваяОтчетность(Блок, СтрокиИНдикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи)
	
	Если ЭтоНалог Тогда
		// Желтый блок налога при нулевой отчетности невозможен.
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат;
	КонецЕсли;
	
	Индикатор = СтрокиИНдикатора[0]; // Всегда единственный
	Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
	
	Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.НуженПомощникОтчетовПрошлыхПериодов Тогда
		
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИНдикатора, Ложь, ПараметрыМонитора));
		
		Если Индикатор.ТекущийОтчетЕстьВБазе Тогда
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Подробнее'"),
				ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора, Индикатор.Получатель));
		Иначе
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Подготовить нулевую отчетность'"),
				ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора, Индикатор.Получатель));
		КонецЕсли;
		
	Иначе
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		// Ссылка ведет к тесту на отчетность прошлых периодов.
		ОписаниеДействия = ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(
			ПараметрыМонитора.Организация,
			Индикатор,
			Индикатор.НачалоПериодаСобытия,
			ПараметрыМонитора.УпрощеннаяНулеваяОтчетность);
		ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКрасныйБлокНулеваяОтчетность(Блок, СтрокиИНдикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи)
	
	Если ЭтоНалог Тогда
		// Красный блок налога при нулевой отчетности невозможен.
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат;
	КонецЕсли;
	
	Индикатор = СтрокиИНдикатора[0]; // Всегда единственный
	
	Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
	
	ДобавитьСтроку1(Блок, ОписаниеПросроченногоНалогаОтчета(СтрокиИНдикатора, Ложь, ПараметрыМонитора));
	
	ТекстСсылки = НСтр("ru = 'Подготовить нулевую отчетность'");
	ОписаниеДействияСсылки = ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора, Индикатор.Получатель);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Процедура ЗаполнитьБлокДолгПоЕНС(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	Если ЭтоНалог Тогда
		Блок.Строка0 = ОписаниеСсылкиНаОплатуЕНС(ПараметрыМонитора);
		Если ПараметрыМонитора.РассчитаноНалогов <= 0 Или ПараметрыМонитора.ОстатокЕНС - ПараметрыМонитора.НужноОплатить < 0 Тогда
			Блок.ЦветФона = ПараметрыМонитора.ЦветКрасныйБлок;
		Иначе // точно просрочка
			Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
		КонецЕсли;
	Иначе
		Блок.Строка0 = "";
		Блок.ЦветФона = ПараметрыМонитора.ЦветПустойБлок;
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьЦветБлока(Блок, КодЗадачи, ПараметрыМонитора)
	
	// При применении ЕНС нет сведений о прошлых расчетах по налогу - только по совокупной обязанности.
	// Поэтому если есть долг по ЕНС на начало и на конец - то блок однозначно красный, но менять его содержание не требуется.
		
	Если ЗадачаОплатыСЕНС(КодЗадачи)
		И ПараметрыМонитора.НужноОплатить > 0 И ПараметрыМонитора.ВходящийОстатокЕНС < 0 И ПараметрыМонитора.ОстатокЕНС - ПараметрыМонитора.НужноОплатить < 0 Тогда
			Блок.ЦветФона = ПараметрыМонитора.ЦветКрасныйБлок;
		КонецЕсли;

КонецПроцедуры

Функция НулевойНалогЗаголовок(ПараметрыМонитора)
	
	ЭлементыЗаголовка = Новый Массив;
	
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Платить не требуется'"), ПараметрыМонитора.ШрифтЗаголовков));
	ЭлементыЗаголовка.Добавить(" ");
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик));
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
	
КонецФункции

Функция НулевойНалогОписание()
	
	Возврат НСтр("ru = 'Налоги не уплачиваются, если деятельность отсутствует'");
	
КонецФункции

Функция НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора)
	
	ЭлементыЗаголовка = Новый Массив;
	
	Если Индикатор.Индикатор = ЦветаИндикаторов().Зеленый Тогда
		
		ТекстЗаголовка = ?(Индикатор.ТекущийОтчетСдан,
			НСтр("ru ='Отчетность сдана'"),
			НСтр("ru ='Сдавать отчеты не требуется'"));
		
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка, ПараметрыМонитора.ШрифтЗаголовков));
		ЭлементыЗаголовка.Добавить(" ");
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик));
		
	ИначеЕсли Индикатор.Индикатор = ЦветаИндикаторов().Желтый Тогда
		
		Если Индикатор.ЭтоТекущаяЗадача Тогда
			ТекстЗаголовка = "";
			
			Если Индикатор.ТекущийОтчетЕстьВБазе Тогда
				// Отчеты уже подготовлены.
				ТекстЗаголовка = Нстр("ru = 'Отчетность подготовлена'");
			Иначе
				// Имеются отчеты, которые нужно сдать сейчас.
				ТекстЗаголовка = НСтр("ru ='Пора сдавать нулевую отчетность'");
			КонецЕсли;
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка, ПараметрыМонитора.ШрифтЗаголовков));
		Иначе
			// Сейчас сдавать отчеты не требуется, но нужно проверить, есть ли не сданные в прошлом.
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте, нужно ли сдать отчеты'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'за прошлые периоды'"), ПараметрыМонитора.ШрифтЗаголовков));
		КонецЕсли;
		
	ИначеЕсли Индикатор.Индикатор = ЦветаИндикаторов().Красный Тогда
		
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Отчетность просрочена'"), ПараметрыМонитора.ШрифтЗаголовков));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
	
КонецФункции

Функция ОписаниеСледующегоНулевогоОтчета(Индикатор, ЭтоПервыйОтчет)
	
	ШаблонОписания = НСтр("ru = '%1 отчет не позднее %2'");
		
	ВидОтчетаПредставление = ?(ЭтоПервыйОтчет, НСтр("ru = 'Первый'"), НСтр("ru = 'Следующий'"));
	
	СвойстваЗадачи = Индикатор.БудущаяЗадача;
	
	СрокПредставление = Формат(СвойстваЗадачи.Срок, ФорматДата());
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания,
		ВидОтчетаПредставление,
		СрокПредставление);
	
КонецФункции

Функция ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора, Получатель)
	
	ИндикаторыМонитора = ПолучитьИзВременногоХранилища(ПараметрыМонитора.АдресРезультата);
	ИндикаторыМонитора = ИндикаторыМонитора.Получить(); // получение из хранилища значения.
	СтрокиПоПолучателю = ИндикаторыМонитора.ОтчетныеИндикаторы.НайтиСтроки(Новый Структура("Получатель", Получатель));
	ПросроченныеОтчеты = СтрокиПоПолучателю[0].ПросроченныеОтчеты;
	
	АдресПросроченныхОтчетов = ПоместитьВоВременноеХранилище(ПросроченныеОтчеты, Новый УникальныйИдентификатор);
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",              ПараметрыМонитора.Организация);
	ПараметрыФормы.Вставить("ГосударственныйОрган",     Получатель);
	ПараметрыФормы.Вставить("АдресПросроченныхОтчетов", АдресПросроченныхОтчетов);
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПодготовкаНулевойОтчетности.Форма.Форма");
	ОписаниеДействия.Вставить("ИдентификаторФормы", ПараметрыМонитора.УникальныйИдентификатор);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(Организация, Индикатор, ОтчетныйПериод, УпрощеннаяНулеваяОтчетность)
	
	ОписаниеДействия = Новый Структура;
	
	Правила = ПоместитьВоВременноеХранилище(Индикатор.ПравилаПрошлыхПериодов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Организация);
	ПараметрыФормы.Вставить("Правило",                     Индикатор.Правило);
	ПараметрыФормы.Вставить("Правила",                     Правила);
	ПараметрыФормы.Вставить("ОтчетныйПериод",              ОтчетныйПериод);
	ПараметрыФормы.Вставить("ГосударственныйОрган",        Индикатор.Получатель);
	ПараметрыФормы.Вставить("УпрощеннаяНулеваяОтчетность", УпрощеннаяНулеваяОтчетность);

	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПрошлыхПериодов");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеБлоков

Процедура УдалитьСтрокиТаблицы(ТаблицаИсточник, УдаляемыеСтроки)
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаИсточник.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ДекапитализироватьСтроку(ИсхСтрока)
	
	// от французского décapitalizer
	
	// В общем случае применять этот прием нельзя, так как первая бука может быть заглавной не только,
	// потому что это начало предложения. Например, если это имя собственное.
	
	ПерваяБуква = НРег(Лев(ИсхСтрока, 1));
	Остальное = Сред(ИсхСтрока, 2);
	Возврат ПерваяБуква + Остальное;
	
КонецФункции

Функция ЗаголовокНалогаОтчета(ТипБлока, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	Результат = Новый ФорматированнаяСтрока("");
	
	Если ТипБлока = ЦветаИндикаторов().Зеленый Тогда
		
		Если ЭтоНалог И ТребуетсяПоказатьРасчетНулевогоНалога(СтрокиИндикатора, КодЗадачи, ПараметрыМонитора)
			И Не ЭтоЗадачаАУСН(КодЗадачи) Тогда
			Строка0 = НСтр("ru = 'Оплата не требуется '");
		ИначеЕсли ЭтоНалог Тогда
			Строка0 = НСтр("ru = 'Налоги оплачены '");
		ИначеЕсли ЭтоЗадачаАУСН(КодЗадачи) Тогда
			Строка0 = НСтр("ru = 'Проверка банковских операций '");
		Иначе
			Строка0 = НСтр("ru = 'Отчетность сдана '");
		КонецЕсли;
		
		Строка0   = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		Смайлик   = Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик);
		Результат = Новый ФорматированнаяСтрока(Строка0, Смайлик);
		
	ИначеЕсли ТипБлока = ЦветаИндикаторов().Желтый Тогда
		Если ЭтоНалог Тогда
			Если ЭтоЗадачаАУСН(КодЗадачи) Тогда
				Строка0 = Нстр("ru = 'Рассчитан налог'");
			ИначеЕсли ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) Тогда
				Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
			ИначеЕсли НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
				Шаблон = Нстр("ru = 'Проверьте, нет ли задолженности по %1 за прошлые годы'");
				Строка0 = СтрШаблон(Шаблон, ?(ЭтоЗадачаВзносовИП(КодЗадачи),
					НСтр("ru = 'взносам'"), НСтр("ru = 'налогу'")));
			Иначе
				Строка0 = Нстр("ru = 'Рассчитана сумма %1 руб.'");
			КонецЕсли;
		Иначе
			
			Если НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
				Строка0 = Нстр("ru = 'Проверьте, нужно ли сдать отчеты за прошлые периоды'");
			ИначеЕсли ОтчетностьПодготовлена(СтрокиИндикатора, ПараметрыМонитора) Тогда
				Строка0 = Нстр("ru = 'Отчетность подготовлена'");
			ИначеЕсли ЭтоЗадачаАУСН(КодЗадачи) Тогда
				Строка0 = Нстр("ru = 'Проверка банковских операций'");
			Иначе
				Строка0 = Нстр("ru = 'Пора сдавать отчетность'");
			КонецЕсли;
			
		КонецЕсли;
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	ИначеЕсли ТипБлока = ЦветаИндикаторов().Красный Тогда
		
		Если ЭтоЗадачаАУСН(КодЗадачи) Тогда
			Строка0 = ?(ЭтоНалог, Нстр("ru = 'Рассчитан налог'"), Нстр("ru = 'Проверка банковских операций'"));
		ИначеЕсли ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) Тогда
			Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
		Иначе
			Строка0 = ?(ЭтоНалог, Нстр("ru = 'Рассчитана сумма %1 руб.'"), Нстр("ru = 'Отчетность просрочена'"));
		КонецЕсли;
		
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	ИначеЕсли ТипБлока = "Ошибка" Тогда
		ВызватьИсключение Нстр("ru = 'Непредвиденная ошибка. Попробуйте сформировать монитор еще раз'");
	Иначе
		Строка0 = ?(ЭтоНалог, НСтр("ru = 'Налоги еще не оплачивались'"), НСтр("ru = 'Отчетность еще не сдавалась'"));
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтчетностьПодготовлена(СтрокиИндикатора, ПараметрыМонитора)
	
	ВсеОтчетыЕстьВБазе = Истина;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетЕстьВБазе Тогда
			ВсеОтчетыЕстьВБазе = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеОтчетыЕстьВБазе;
	
КонецФункции

Функция ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача, ПараметрыМонитора)
	
	Если Не ЭтоНалог И ЭтоЗадачаАУСН(КодЗадачи) Тогда
		
		ШаблонТекста = ?(ЭтоПерваяЗадача,
			НСтр("ru = 'Первая проверка не позднее %1'"),
			НСтр("ru = 'Следующая проверка не позднее %1'"));
		СвойстваЗадачи = СтрокиИндикатора[0].БудущаяЗадача;
		СрокЗадачи = Формат(СвойстваЗадачи.Срок, ФорматДата());
		Возврат СтрШаблон(ШаблонТекста, СрокЗадачи);
		
	КонецЕсли;
	
	Результат = "";
	Параметр2КакИмя = Ложь;
	Если ЭтоНалог Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый платеж не позднее %1'"), НСтр("ru = 'Следующий платеж не позднее %1'"));
	ИначеЕсли ЭтоЗадачаУСН(КодЗадачи) Или ЭтоЗадачаЕНВД(КодЗадачи) тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первая декларация не позднее %1'"), НСтр("ru = 'Следующая декларация не позднее %1'"));
	ИначеЕсли ЭтоЗадачаСтраховыхВзносов(КодЗадачи) Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первые отчеты в фонды не позднее %1'"), НСтр("ru = 'Следующие отчеты в фонды не позднее %1'"));
	Иначе
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый отчет не позднее %1'"), НСтр("ru = 'Следующий отчет не позднее %1'"));
		Параметр2КакИмя = Истина;
	КонецЕсли;
	
	ШаблонТекста = ШаблонТекста + Символы.ПС + "(%2)";

	Если СтрокиИндикатора.Количество() = 1 Тогда
		
		СвойстваЗадачи = СтрокиИндикатора[0].БудущаяЗадача;
		Параметр1      = Формат(СвойстваЗадачи.Срок, ФорматДата());
		
		Если Параметр2КакИмя Тогда
			Параметр2 = СвойстваЗадачи.Наименование;
		ИначеЕсли ЗначениеЗаполнено(СвойстваЗадачи.НачалоПериодаСобытия) Тогда
			Параметр2 = Нстр("ru = 'за '") + КалендарьБухгалтера.ПредставлениеПериодаСобытия(СвойстваЗадачи.НачалоПериодаСобытия, СвойстваЗадачи.ПериодСобытия);
		Иначе
			Параметр2 = "";
		КонецЕсли;
		
		Если Не (ЭтоЗадачаНДФЛПоОтчету(КодЗадачи) Или ЭтоЗадачаНДФЛПоУплате(КодЗадачи)) Тогда
			Параметр2 = ДекапитализироватьСтроку(Параметр2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр2) Тогда
			Результат = СтрШаблон(ШаблонТекста, Параметр1, Параметр2);
		КонецЕсли;
		
	Иначе
		
		//Сначала находим минимальные задачи по периоду события.
		МинПериодСобытия = ПараметрыМонитора.МаксДата;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если НЕ ЗначениеЗаполнено(Индикатор.БудущаяЗадача.Срок) Тогда
				// Будущей задачи нет, пропускаем такие.
				Продолжить;
			КонецЕсли;
			Если Не (Индикатор.БудущаяЗадача.НачалоВыполнения > ПараметрыМонитора.ТекущийДень 
					 И Индикатор.БудущаяЗадача.Срок < ПараметрыМонитора.ТекущийДень) Тогда
				МинПериодСобытия = Мин(МинПериодСобытия, Индикатор.БудущаяЗадача.ПериодСобытия);
			КонецЕсли;
		КонецЦикла;
		
		ОтобранныеПоПериодуСобытия = Новый Массив;
		
		// Отбираем задачи с минимальным периодом события.
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если МинПериодСобытия = Индикатор.БудущаяЗадача.ПериодСобытия Тогда
				ОтобранныеПоПериодуСобытия.Добавить(Индикатор);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобранныеПоПериодуСобытия.Количество() = 1 Тогда
			
			Событие = ОтобранныеПоПериодуСобытия[0];                                              
			
			Если Не (ЭтоЗадачаНДФЛПоОтчету(КодЗадачи) Или ЭтоЗадачаНДФЛПоУплате(КодЗадачи)) Тогда
				Параметр2 = ДекапитализироватьСтроку(Событие.БудущаяЗадача.Наименование);
			Иначе
				Параметр2 = Событие.БудущаяЗадача.Наименование;
			КонецЕсли;
			Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()), Параметр2);
			
		Иначе
			
			// Теперь находим минимальные задачи по сроку выполнения
			МинСрок = ПараметрыМонитора.МаксДата;
			Для Каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				МинСрок = Мин(МинСрок, Событие.БудущаяЗадача.Срок);
			КонецЦикла;
			
			// Подсчитываем количество задач с минимальным сроком выполнения.
			ОтобранныеПоСроку = Новый Массив;
			Для Каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				Если МинСрок = Событие.БудущаяЗадача.Срок Тогда
					ОтобранныеПоСроку.Добавить(Событие);
				КонецЕсли;
			КонецЦикла;
			
			Если ОтобранныеПоСроку.Количество() = 1 Тогда
				
				Событие = ОтобранныеПоСроку[0];  
				
				Если Не (ЭтоЗадачаНДФЛПоОтчету(КодЗадачи) Или ЭтоЗадачаНДФЛПоУплате(КодЗадачи)) Тогда
					Параметр2 = ДекапитализироватьСтроку(Событие.БудущаяЗадача.Наименование);
				Иначе
					Параметр2 = Событие.БудущаяЗадача.Наименование;
				КонецЕсли;
				Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()), Параметр2);
				
			Иначе
				
				Если ЭтоПерваяЗадача Тогда
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Первые налоги не позднее %1: %2'"), 
						НСтр("ru = 'Первые отчеты не позднее %1: %2'"));
				Иначе
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Следующие налоги не позднее %1: %2'"), 
						НСтр("ru = 'Следующие отчеты не позднее %1: %2'"));
				КонецЕсли;
				
				ГруппировкаДат = Новый Соответствие;
				Для Каждого Событие Из ОтобранныеПоСроку Цикл
						
					СтрокаОписания = ГруппировкаДат.Получить(Событие.Срок);
					Если СтрокаОписания = Неопределено Тогда
						СтрокаОписания = "";
					КонецЕсли;
					
					СтрокаОписания = СтрокаОписания + Символы.ПС + "- " + Событие.Наименование;
					ГруппировкаДат.Вставить(Событие.БудущаяЗадача.Срок, СтрокаОписания);
						
				КонецЦикла;
				
				Для Каждого КлючИЗначение Из ГруппировкаДат Цикл
					СтрокаОписания = СтрШаблон(ШаблонТекста, Формат(КлючИЗначение.Ключ, ФорматДата()), КлючИЗначение.Значение);
					Результат = Результат + ? (ПустаяСтрока(Результат), СтрокаОписания, Символы.ПС + СтрокаОписания);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	Если СтрокиИндикатора.Количество() > 0
		И ПравилоОплатыСЕНС(СтрокиИндикатора[0].КодПравила)
		Или ЭтоПравилоВзносыНаВНиМ(СтрокиИндикатора[0].КодПравила) Тогда
		
		ШаблонТекста = Нстр("ru = 'Не позднее %1'");
	Иначе
		ШаблонТекста = Нстр("ru = 'Срок списания %1'");
	КонецЕсли;

	Результат = "";
	
	Если СтрокиИндикатора.Количество() = 1 Тогда
		СвойстваЗадачи = СтрокиИндикатора[0];
		Результат = СтрШаблон(ШаблонТекста,  Формат(СвойстваЗадачи.Срок, ФорматДата()));
	ИначеЕсли СтрокиИндикатора.Количество() > 1 Тогда
		
		МинСрок = ПараметрыМонитора.МаксДата;
		КолВоРазныхСроковТекущихЗадач = 0;
		СчетчикТекущихОтчетов = 0;
		НаименованиеЗадачиСМинСроком = "";
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если ЭтоНалог И Индикатор.ЭтоТекущаяЗадача Тогда
				Если Индикатор.КУплатеТекущий > 0 Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
				КонецЕсли;
			ИначеЕсли Не ЭтоНалог И Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
				Если СчетчикТекущихОтчетов >= ЛимитСсылокИндикатора() Тогда
					Прервать;
				КонецЕсли;
				Если МинСрок <> Индикатор.Срок Тогда
					КолВоРазныхСроковТекущихЗадач = КолВоРазныхСроковТекущихЗадач + 1;
				КонецЕсли;
				Если МинСрок > Индикатор.Срок Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
					НаименованиеЗадачиСМинСроком = Индикатор.Наименование;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоНалог И КолВоРазныхСроковТекущихЗадач > 1 Тогда
			ШаблонТекста = Нстр("ru = '%1 не позднее %2'");
			Результат = СтрШаблон(ШаблонТекста, НаименованиеЗадачиСМинСроком, Формат(МинСрок, ФорматДата()));
		Иначе
			Результат = СтрШаблон(ШаблонТекста, Формат(МинСрок, ФорматДата()));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	Результат = "";
	
	Если ЭтоНалог Тогда
		
		Результат = НСтр("ru = 'Задолженность могла образоваться за один или несколько прошлых периодов'");
		
	Иначе
		
		ПоследнийСрок = ПараметрыМонитора.МинДата;
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			МаксимальныйСрокПросроченногоОтчета = МаксимальныйСрокПросроченногоОтчетаИндикатора(Индикатор);
			Если ЗначениеЗаполнено(МаксимальныйСрокПросроченногоОтчета)
				И МаксимальныйСрокПросроченногоОтчета > ПоследнийСрок Тогда
				ПоследнийСрок = МаксимальныйСрокПросроченногоОтчета;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонТекста = Нстр("ru = 'С %1'");
		
		Сутки = 86400;
		Результат = СтрШаблон(ШаблонТекста, Формат(ПоследнийСрок + Сутки, ФорматДата())); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСсылкиТекущегоНалогаОтчета(СтрокаИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	НаименованиеСсылки = "";
	Если ЭтоНалог Или ПустаяСтрока(СтрокаИндикатора.СтатусТекущегоОтчета) Тогда
		НаименованиеСсылки = СтрокаИндикатора.Наименование;
	Иначе
		НаименованиеСсылки = СтрШаблон("%1 (%2)", СтрокаИндикатора.Наименование, СтрокаИндикатора.СтатусТекущегоОтчета);
	КонецЕсли;
	
	Если ПравилоОплатыСЕНС(СтрокаИндикатора.КодПравила) Тогда
		Если Не (ВыполнениеЗадачБухгалтера.ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(СтрокаИндикатора.Правило)
			Или ВыполнениеЗадачБухгалтера.ПравилоВыполняетсяПомощникомУплатыНПД(СтрокаИндикатора.Правило)
			Или (ВыполнениеЗадачБухгалтера.ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(СтрокаИндикатора.Правило)
			И СтрокаИндикатора.ПериодСобытия = КонецГода(СтрокаИндикатора.ПериодСобытия))) Тогда
			НаименованиеСсылки = СтрЗаменить(НаименованиеСсылки, НСтр("ru = 'Оплата'"), НСтр("ru = 'Уведомление'"));
		КонецЕсли;
	КонецЕсли;

	Возврат НаименованиеСсылки;
	
КонецФункции

Функция ЗаменитьВНаименованииПериод(ИсхНаименование, НачалоПериода, КонецПериода)
	
	Результат = "";
	ВыражениеПоиска = Нстр("ru = ' за '");
	КонПоз = СтрНайти(ВРег(ИсхНаименование), ВРег(ВыражениеПоиска));
	Если КонПоз = 0 Тогда
		Результат = ИсхНаименование;
	Иначе
		Результат = Лев(ИсхНаименование, КонПоз - 1);
	КонецЕсли;
	
	Возврат Результат + ВыражениеПоиска + КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
КонецФункции

Функция СформироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора)
	
	ПараметрыКоманды                      = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ПараметрыКоманды.Задача               = ДанныеИндикатора.Владелец;
	ПараметрыКоманды.ИдентификаторЗадачи  = КодЗадачи;
	ПараметрыКоманды.Организация          = ПараметрыМонитора.Организация;
	ПараметрыКоманды.Срок                 = ДанныеИндикатора.Срок;
	ПараметрыКоманды.Правило              = ДанныеИндикатора.Правило;
	ПараметрыКоманды.ИдентификаторПравила = ДанныеИндикатора.КодПравила;
	ПараметрыКоманды.ПериодСобытия        = ДанныеИндикатора.ПериодСобытия;
	ПараметрыКоманды.Периодичность        = ДанныеИндикатора.Периодичность;
	ПараметрыКоманды.Наименование         = ДанныеИндикатора.НаименованиеЗадачи; // В обслуживающий помощник передаем полное наименование из списка задач.
	ПараметрыКоманды.Действие             = ?(ЭтоНалог, Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога,
		Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПараметрыКоманды.ВыполнитьЕдинымПомощником = Ложь;
	Иначе
		ПараметрыКоманды.ВыполнитьЕдинымПомощником = ДанныеИндикатора.Правило.ВыполняетсяЕдинымПомощником;
	КонецЕсли;
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	// Для того, чтобы помощники по УСН и ЕНВД открывались с возможностью переключить период.
	Если НЕ ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи)
		И Не ЭтоЗадачаАУСН(КодЗадачи)
		И Не ЭтоЗадачаПередачиСведенийОСотрудникахДляАУСН(КодЗадачи, ДанныеИндикатора.КодПравила)
		И Не ЭтоЗадачаВзносовИП(КодЗадачи)
		И Не ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, ДанныеИндикатора.КодПравила)
		И ОписаниеДействия.Свойство("ПараметрыФормы") Тогда
		
		Если ОписаниеДействия.ПараметрыФормы.Свойство("ВызовИзСпискаЗадач") Тогда
			ОписаниеДействия.ПараметрыФормы.ВызовИзСпискаЗадач = Ложь;
		КонецЕсли;
		Если ОписаниеДействия.ПараметрыФормы.Свойство("КонтекстныйВызов") Тогда
			ОписаниеДействия.ПараметрыФормы.КонтекстныйВызов = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДобавитьСтрокуСоСсылкой(Блок, Наименование, ПараметрыСсылки, СмещениеСч = Неопределено)
	
	Если СмещениеСч = Неопределено Тогда
		СмещениеСч = Строка(Блок.КолвоСтрок);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	КонецЕсли;
	
	Блок.Вставить("Строка" + СмещениеСч, Наименование);
	Блок.Вставить("СтрокаПараметрыСсылки" + СмещениеСч, ПараметрыСсылки);
	Блок.Вставить("СтрокаВидимость" + СмещениеСч, Истина);
	
КонецПроцедуры

Процедура ДобавитьСтроку1(Блок, Текст, ЕстьЕНС = Ложь)
	
	Если ЕстьЕНС Тогда
		Блок.Вставить("Строка2", Текст);
		Блок.Вставить("СтрокаВидимость2", Истина);
	Иначе
		Блок.Вставить("Строка1", Текст);
		Блок.Вставить("СтрокаВидимость1", Истина);
	КонецЕсли;
	
	Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	
КонецПроцедуры

Процедура ДобавитьСтрокуОплатаЕНС(Блок, Текст)
	
	
	Блок.Вставить("Строка" + Блок.КолвоСтрок, Текст);
	Блок.Вставить("СтрокаВидимость" + Блок.КолвоСтрок, Истина);
	
	Блок.КолвоСтрок = Блок.КолвоСтрок + 1;

КонецПроцедуры

Функция ОписаниеСсылкиНаОплатуЕНС(ПараметрыМонитора)
	
	Возврат Новый ФорматированнаяСтрока(Нстр("ru = 'Пополнить ЕНС'"), ПараметрыМонитора.ШрифтСсылок, , , "ПополнитьЕНС");
	
КонецФункции

Процедура ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Если ЭтоНалог Тогда
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если ЭтоЗадачаАУСН(КодЗадачи) Тогда
				НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			ИначеЕсли Индикатор.КУплатеТекущий > 0 Тогда
				Если ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, Индикатор.КодПравила) Тогда
					ПериодичностьНаДатуМонитора = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
						ПараметрыМонитора.Организация, КонецКвартала(ПараметрыМонитора.ТекущийДень));
					Если ПериодичностьНаДатуМонитора = Перечисления.Периодичность.Квартал Тогда
						Индикатор.ПериодСобытия = КонецКвартала(ПараметрыМонитора.ТекущийДень);
					КонецЕсли;
				КонецЕсли;
				Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(ПараметрыМонитора.Организация, КодЗадачи)
					И ЭтоОплатаНалогаЗаПрошлыйПериод(ПараметрыМонитора.Организация, Индикатор.ПериодСобытия, Индикатор.Периодичность) Тогда
					
					НаименованиеСсылки = НСтр("ru = 'Расчет задолженности за прошлые годы'");
				Иначе
					НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
				КонецЕсли;
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекущиеОтчеты = Новый Массив;
		СчетчикТекущихОтчетов = 0;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Не Индикатор.ТекущийОтчетСдан И Индикатор.ЭтоТекущаяЗадача Тогда
				
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				
				ПредставлениеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
				
				ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
				ПараметрыСсылки.Вставить("Срок", Индикатор.Срок);
				ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
				ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Истина);
				
				Если СчетчикТекущихОтчетов < ЛимитСсылокИндикатора() Тогда
					ДобавитьСтрокуСоСсылкой(Блок, ПредставлениеСсылки, ПараметрыСсылки);
				Иначе
					ТекущиеОтчеты.Добавить(ПараметрыСсылки);
				КонецЕсли;
				
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеОтчеты.Количество() > 0 Тогда
			НадписьТекущиеОтчеты = СтрШаблон(НСтр("ru = 'Еще (%1)'"), ТекущиеОтчеты.Количество());
			ДобавитьСтрокуСоСсылкой(Блок, НадписьТекущиеОтчеты, ТекущиеОтчеты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаТекущиеНулевыеНалоги(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	Если Не ЭтоНалог Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяПоказатьРасчетНулевогоНалога(СтрокиИндикатора, КодЗадачи, ПараметрыМонитора) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборТекущаяЗадача = Новый Структура("ЭтоТекущаяЗадача", Истина);
	ТекущиеЗадачи = СтрокиИндикатора.НайтиСтроки(ОтборТекущаяЗадача);
	
	Если ТекущиеЗадачи.Количество() = 0
		И ЗначениеЗаполнено(СтрокиИндикатора)
		И СтрокиИндикатора.Итог("Начислено") = 0 Тогда
		
		КонецПериода = КонецДня(ДобавитьМесяц(СтрокиИндикатора[0].ПериодСобытия, - 3));
		НаименованиеСсылки = СтрШаблон(
			НСтр("ru = 'Проверить расчет налога за %1'"),
			КалендарьБухгалтера.ПредставлениеПериодаСобытия(
				НачалоДня(ДобавитьМесяц(СтрокиИндикатора[0].НачалоПериодаСобытия, -3)),
				КонецПериода));
		ПараметрыСсылки = СФормироватьПараметрыСсылки(СтрокиИндикатора[0], КодЗадачи, Истина, ПараметрыМонитора);
		Если ПараметрыСсылки.ПараметрыФормы.Свойство("КонецПериода") Тогда
			ПараметрыСсылки.ПараметрыФормы.КонецПериода = КонецПериода;
		КонецЕсли;
		ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
		
	Иначе
		
		Для Каждого Индикатор Из ТекущиеЗадачи Цикл
			
			Если Индикатор.Начислено = 0 Тогда
				
				НаименованиеСсылки = СтрШаблон(
					НСтр("ru = 'Проверить расчет налога за %1'"),
					КалендарьБухгалтера.ПредставлениеПериодаСобытия(
						НачалоДня(Индикатор.НачалоПериодаСобытия),
						КонецДня(Индикатор.ПериодСобытия)));
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, Истина, ПараметрыМонитора);
				ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаОтчетыПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Если Не ЭтоНалог Тогда
		
		ЕстьОтчетностьПрошлыхПериодов = Ложь;
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.ОтчетыПрошлыхПериодов.Количество() > 0 Тогда
				ЕстьОтчетностьПрошлыхПериодов = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОтчетностьПрошлыхПериодов Тогда
			Событие = Новый Структура("Организация", ПараметрыМонитора.Организация);
			ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие);
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Отчетность прошлых периодов'"), ОписаниеДействия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаПросроченныеОтчеты(Блок, ЕстьТекущаяЗадача, СсылкиНаПросроченныеОтчеты)
	
	Если Не ЗначениеЗаполнено(СсылкиНаПросроченныеОтчеты) Тогда
		Возврат;
	КонецЕсли;
	
	СортироватьПоВозрастанию(СсылкиНаПросроченныеОтчеты, "Срок");
	
	НадписьПросрочено = СтрШаблон(НСтр("ru = 'Просроченные отчеты (%1)'"), СсылкиНаПросроченныеОтчеты.Количество());
	Если СсылкиНаПросроченныеОтчеты.Количество() <= 2 И Не ЕстьТекущаяЗадача Тогда
		Пока СсылкиНаПросроченныеОтчеты.Количество() > 0 Цикл
			ПоследнийПросроченный = ВытащитьИзСтека(СсылкиНаПросроченныеОтчеты);
			ДобавитьСтрокуСоСсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
		КонецЦикла;
	ИначеЕсли СсылкиНаПросроченныеОтчеты.Количество() > 2 И Не ЕстьТекущаяЗадача Тогда
		ПоследнийПросроченный = СсылкиНаПросроченныеОтчеты[СсылкиНаПросроченныеОтчеты.ВГраница()];
		ДобавитьСтрокуСоСсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, СсылкиНаПросроченныеОтчеты);
	Иначе
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, СсылкиНаПросроченныеОтчеты);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкиНаПросроченныеОтчеты(ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	СсылкиНаПросроченныеОтчеты = Новый Массив();
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Для Сч = 0 По Индикатор.ПросроченныеОтчеты.Количество() - 1 Цикл
			
			СтрокаПросрОтчета = Индикатор.ПросроченныеОтчеты[Сч];
			
			КонецПериода  = КонецДня(СтрокаПросрОтчета.ПериодСобытия);
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Индикатор.Периодичность, КонецПериода);
			ПредставлениеСсылки = ЗаменитьВНаименованииПериод(Индикатор.Наименование, НачалоПериода, КонецПериода);
			
			Если Не ПустаяСтрока(СтрокаПросрОтчета.Статус) Тогда
				ПредставлениеСсылки  = ПредставлениеСсылки +" (" + СтрокаПросрОтчета.Статус + ")";
			КонецЕсли;
			
			ПредставлениеЗадачи = ЗаменитьВНаименованииПериод(Индикатор.НаименованиеЗадачи, НачалоПериода, КонецПериода);
			
			ДанныеИндикатора = Новый Структура;
			ДанныеИндикатора.Вставить("Владелец", Индикатор.Владелец);
			ДанныеИндикатора.Вставить("КодПравила", Индикатор.КодПравила);
			ДанныеИндикатора.Вставить("ПериодСобытия", КонецПериода);
			ДанныеИндикатора.Вставить("Наименование", ПредставлениеСсылки);
			ДанныеИндикатора.Вставить("НаименованиеЗадачи", ПредставлениеЗадачи);
			ДанныеИндикатора.Вставить("Срок", СтрокаПросрОтчета.Срок);
			ДанныеИндикатора.Вставить("Правило", Индикатор.Правило);
			ДанныеИндикатора.Вставить("Периодичность", Индикатор.Периодичность);
			
			ПараметрыСсылки = СформироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
			ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
			ПараметрыСсылки.Вставить("Срок", СтрокаПросрОтчета.Срок);
			ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
			ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Ложь);
			СсылкиНаПросроченныеОтчеты.Добавить(ПараметрыСсылки);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СсылкиНаПросроченныеОтчеты;
	
КонецФункции

Процедура ЗаполнитьСсылкиНаУплатуЗадолженностиПоВзносамИП(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора)
	
	// Текущие платежи.
	
	// Платеж по взносам с доходов за прошлый год обслуживается тем же помощником, что и уплата просроченных фиксированных взносов.
	// Поэтому наличие платежа с доходов просто запоминаем, а ссылку не выводим - она будет выведена вместе с просроченным платежом.
	
	ЕстьТекущаяУплатаСДоходов = Ложь;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		
		Если Индикатор.КУплатеТекущий > 0 Тогда
			
			Если Индикатор.Периодичность = Перечисления.Периодичность.Квартал Тогда // Ежеквартальная уплата текущих взносов.
				
				Индикатор.ПериодСобытия = КонецКвартала(ПараметрыМонитора.ТекущийДень);
				
			ИначеЕсли Индикатор.Периодичность = Перечисления.Периодичность.Год
				И ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, Индикатор.КодПравила) Тогда // Уплата взносов с доходов за прошлый год.
				
				ЕстьТекущаяУплатаСДоходов = Истина;
				Продолжить;
				
			КонецЕсли;
			
			НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, Истина, ПараметрыМонитора);
			ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, Истина, ПараметрыМонитора);
			ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Просроченный платеж.
	
	ИсточникПараметровСсылки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокиИндикатора[0]);
	
	ИсточникПараметровСсылки.ПериодСобытия        = НачалоГода(ПараметрыМонитора.ТекущийДень) - 1;
	ИсточникПараметровСсылки.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		Перечисления.Периодичность.Год, ИсточникПараметровСсылки.ПериодСобытия);
	
	ИсточникПараметровСсылки.Наименование = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.Наименование,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	ИсточникПараметровСсылки.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.НаименованиеЗадачи,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	
	ПараметрыСсылки = СФормироватьПараметрыСсылки(ИсточникПараметровСсылки, КодЗадачи, Истина, ПараметрыМонитора);
	
	ПредставлениеПериодаСобытия = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
		
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(ПараметрыМонитора.Организация, КодЗадачи)
			И ЭтоОплатаНалогаЗаПрошлыйПериод(ПараметрыМонитора.Организация,
				ИсточникПараметровСсылки.ПериодСобытия,
				ИсточникПараметровСсылки.Периодичность) Тогда
		
		ЗаголовокСсылки = НСтр("ru = 'Оплата задолженности за прошлые годы'");
	ИначеЕсли ЕстьТекущаяУплатаСДоходов Тогда
		ЗаголовокСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата задолженности и взносов с доходов за %1'"),
				ПредставлениеПериодаСобытия);
	Иначе
		ЗаголовокСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата задолженности за %1'"),
				ПредставлениеПериодаСобытия);
	КонецЕсли;
	
	ДобавитьСтрокуСоСсылкой(Блок, ЗаголовокСсылки, ПараметрыСсылки);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаУплатуЗадолженностиПоНалогу(Блок, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	// Текущие платежи.
	
	ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, Истина, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
	
	// Просроченные платежи.
	
	ПериодСобытияАвансовогоПлатежа = ПараметрыМонитора.ТекущийДень;
	ПериодСобытияГодовогоПлатежа   = ПараметрыМонитора.ТекущийДень;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.Периодичность = Перечисления.Периодичность.Квартал
			И КонецКвартала(Индикатор.ПериодСобытия) <> КонецГода(Индикатор.ПериодСобытия) Тогда
			ПериодСобытияАвансовогоПлатежа = Индикатор.ПериодСобытия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПериодСобытия = Мин(ПараметрыМонитора.ТекущийДень, ПериодСобытияАвансовогоПлатежа);
	
	НачалоПериодаСобытияСсылки = Неопределено;
	КонецПериодаСобытияСсылки  = Неопределено;
	
	ДатаСобытияСсылки          = Неопределено;
	ПериодичностьСобытияСсылки = Неопределено;
	
	Если НачалоГода(ПериодСобытия) < НачалоКвартала(ПериодСобытия) Тогда
		
		// Если текущее событие не в первом квартале, выведем ссылку на оплату налога за предыдущий квартал.
		ДатаСобытияСсылки          = НачалоКвартала(ПериодСобытия) - 1;
		ПериодичностьСобытияСсылки = Перечисления.Периодичность.Квартал;
	ИначеЕсли НЕ УплачиваетсяТекущийГодовойНалог(СтрокиИндикатора) Тогда
		
		// В первом квартале требуется вывести ссылку на помощник за прошлый год, если еще не выведена.
		ДатаСобытияСсылки = НачалоГода(ПериодСобытия) - 1;
		ПериодичностьСобытияСсылки = Перечисления.Периодичность.Год;
	ИначеЕсли ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) Тогда
		
		// В первом квартале требуется вывести ссылку на помощник за 3-й квартал.
		ДатаСобытияСсылки = НачалоКвартала(НачалоГода(ПериодСобытия) - 1) - 1;
		ПериодичностьСобытияСсылки = Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
	Если ДатаСобытияСсылки = Неопределено Тогда
		// Отдельная ссылка для оплаты долга не требуется.
		Возврат;
	КонецЕсли;
	
	ПериодСобытияСсылки
		= РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(ПериодичностьСобытияСсылки, ДатаСобытияСсылки);
	НачалоПериодаСобытияСсылки
		= ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьСобытияСсылки, ДатаСобытияСсылки);
		
	ДанныеИндикатораДолг = Неопределено;
	Для Каждого ТекущийИндикатор Из СтрокиИндикатора Цикл
		Если ТекущийИндикатор.КУплатеДолг > 0 Тогда
			ДанныеИндикатораДолг = ТекущийИндикатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеИндикатораДолг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для НДФЛ ИП сумма задолженности выводится в помощнике авансовых платежей
	Если ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) И ДанныеИндикатораДолг.КУплатеТекущий > 0
		И ДанныеИндикатораДолг.Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Возврат;
	КонецЕсли;
	
	// Задолженность по уплате НДФЛ за прошлые годы выводим в отдельном помощнике для случаев:
	// - если ИП начал вести свою деятельность
	// - если ИП вел деятельность до 01.01.2020 г. и это первый квартал 2020 г.
	// Задолженность в данном случае рассчитывается до начала периода события по уплате налога за предыдущий год.
	Если ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) И ДанныеИндикатораДолг.НуженПомощникНалоговПрошлыхПериодов Тогда
		ДатаНачалаВеденияУчета = Справочники.Организации.ДатаНачалаВеденияУчета(ПараметрыМонитора.Организация);
		ПериодСобытияСсылки = Макс(НачалоГода(ДанныеИндикатораДолг.НачалоПериодаСобытия) - 1, ДатаНачалаВеденияУчета - 1);
		ПараметрыСсылки = ОписаниеДействияОплатитьНалогиПрошлыхПериодов(ПараметрыМонитора,
			ДанныеИндикатораДолг.Правило, КодЗадачи, ПериодСобытияСсылки);
	Иначе
	
		ИсточникПараметровСсылки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеИндикатораДолг);
		
		ИсточникПараметровСсылки.ПериодСобытия        = КонецДня(ПериодСобытияСсылки);
		ИсточникПараметровСсылки.НачалоПериодаСобытия = НачалоПериодаСобытияСсылки;
		
		ИсточникПараметровСсылки.Наименование = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.Наименование,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
		ИсточникПараметровСсылки.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.НаименованиеЗадачи,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
		
		ПараметрыСсылки = СФормироватьПараметрыСсылки(ИсточникПараметровСсылки, КодЗадачи, Истина, ПараметрыМонитора);
	
	КонецЕсли;
	
	ЗаголовокСсылки = НСтр("ru = 'Расчет задолженности'");
	
	ДобавитьСтрокуСоСсылкой(Блок, ЗаголовокСсылки, ПараметрыСсылки);
	
КонецПроцедуры

Функция УплачиваетсяТекущийГодовойНалог(НалоговыеИндикаторы)
	
	Для Каждого Индикатор Из НалоговыеИндикаторы Цикл
		Если КонецКвартала(Индикатор.ПериодСобытия) = КонецГода(Индикатор.ПериодСобытия)
			И Индикатор.ЭтоТекущаяЗадача
			И Индикатор.КУплатеТекущий > 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТребуетсяПоказатьРасчетНулевогоНалога(НалоговыеИндикаторы, КодЗадачи, ПараметрыМонитора)
	
	// Расшифровка налога при нулевой сумме начисления поддерживается только для УСН.
	Если Не ЭтоЗадачаУСН(КодЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборТекущаяЗадача = Новый Структура("ЭтоТекущаяЗадача", Истина);
	ТекущиеЗадачи = НалоговыеИндикаторы.НайтиСтроки(ОтборТекущаяЗадача);
	
	ИтогоКОплате = НалоговыеИндикаторы.Итог("КУплатеТекущий") + НалоговыеИндикаторы.Итог("КУплатеДолг");
	ЕстьТекущиеНулевыеНачисления = Ложь;
	
	Если ТекущиеЗадачи.Количество() = 0 Тогда
		
		// Если текущих задач нет, то следует проверить нулевой налог за прошлый период
		
		ПредыдущийПериод = НачалоКвартала(ПараметрыМонитора.ТекущийДень) - 1;
		ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(ПараметрыМонитора.Организация, ПредыдущийПериод);
		Если ПрименяетсяУСН И Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(
				ПараметрыМонитора.Организация,
				ПредыдущийПериод).НалогКУплате = 0 Тогда
			
			ЕстьТекущиеНулевыеНачисления = Истина;
		КонецЕсли;
		
	Иначе
		
		// Расшифровку нулевого налога показываем, если во всех текущих задачах нулевая сумма к уплате
		// и при этом хотя бы в одной из них отсутствует исчисленная сумма налога.
		// То есть когда налог к оплате по одной из задач нулевой в силу расчета, а не из-за того, что уже оплачен.
		
		Для Каждого Индикатор Из ТекущиеЗадачи Цикл
			Если Индикатор.Начислено = 0 Тогда
				ЕстьТекущиеНулевыеНачисления = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьТекущиеНулевыеНачисления И (ИтогоКОплате = 0);
	
КонецФункции

Процедура ЗаполнитьСсылкуДоступноСЕНС(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора)
	
	ДоступноСЕНСДолг    = СтрокиИндикатора.Итог("ДоступноСЕНСДолг");
	ДоступноСЕНСТекущий = СтрокиИндикатора.Итог("ДоступноСЕНСТекущий");
	СуммаДолг           = СтрокиИндикатора.Итог("КУплатеДолг");
	СуммаТекущий        = СтрокиИндикатора.Итог("КУплатеТекущий");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Наименование", СтрокиИндикатора[0].Владелец.Наименование);
	ПараметрыФормы.Вставить("ОстатокЕНС", ПараметрыМонитора.ОстатокЕНС);
	ПараметрыФормы.Вставить("ПредыдущиеПлатежи", СтрокиИндикатора.Итог("ПредыдущиеПлатежи"));
	ПараметрыФормы.Вставить("ДоступноКСписанию", ДоступноСЕНСДолг + ДоступноСЕНСТекущий);
	ПараметрыФормы.Вставить("СуммаНалога", СуммаДолг + СуммаТекущий);
	
	ПараметрыСсылки = Новый Структура;
	ПараметрыСсылки.Вставить("ИмяФормы", "Обработка.МониторНалоговИОтчетности.Форма.ФормаРасшифровкаСписанияЕНС");
	ПараметрыСсылки.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	НадписьДоступноКСписанию = СтрШаблон(НСтр("ru = 'Доступно к списанию с ЕНС %1 руб.'"),
		ДоступноСЕНСДолг + ДоступноСЕНСТекущий);
	Блок.Вставить("СтрокаВидимостьЕНС", Истина);
	ДобавитьСтрокуСоСсылкой(Блок, НадписьДоступноКСписанию, ПараметрыСсылки);
		
КонецПроцедуры

#КонецОбласти

#Область НулевкаВзносыЗаСебяИП

Процедура ЗаполнитьЖелтыйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
		ПараметрыМонитора.Организация, ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Индикатор = СтрокиИндикатора[0];
	Если СведенияОбОрганизации.РегистрацияВЭтомГоду
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены // удалены документы оплаты
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолговЗаПрошлыеГодыНет Тогда
		
		Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, Истина, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		Если НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, Истина) Тогда
			Блок.Строка0 = Строка0;
		Иначе
			Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, Индикатор.КУплатеТекущий);
		КонецЕсли;
		
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, Истина, ПараметрыМонитора));
		ТекстСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, Истина, ПараметрыМонитора);
	
	Иначе
		
		// Заголовок в 2 строки без описания.
		ЭлементыЗаголовка = Новый Массив;
		
		Если СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПодготовленоЗаявлениеВНалоговую 
			ИЛИ СведенияОбОрганизации.СостояниеПомощника
				= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ЗапрошенаСправкаОСостоянииРасчетов
			ИЛИ СведенияОбОрганизации.СостояниеПомощника
				= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолученаСправкаОСостоянииРасчетов Тогда
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите задолженность'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'из справки о состоянии расчетов'"), ПараметрыМонитора.ШрифтЗаголовков));
			Блок.Строка0 = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		
			// Выводим только заголовок, строка пояснения не требуется.
			Блок.Вставить("Строка1", "");
			Блок.Вставить("СтрокаВидимость1", Ложь);
			Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
			
			ТекстСсылки = НСтр("ru = 'Указать'");
			
		Иначе
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте, нет ли задолженности'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'по взносам за прошлые годы'"), ПараметрыМонитора.ШрифтЗаголовков));
			Блок.Строка0 = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		
			// Выводим только заголовок, строка пояснения не требуется.
			Блок.Вставить("Строка1", "");
			Блок.Вставить("СтрокаВидимость1", Ложь);
			Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
			
			ТекстСсылки = НСтр("ru = 'Проверить'");
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеДействияСсылки = ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Индикатор.Правило, ПараметрыМонитора);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Процедура ЗаполнитьКрасныйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора)
	
	СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(ПараметрыМонитора.Организация,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Индикатор = СтрокиИндикатора[0];
	Строка0 = Новый ФорматированнаяСтрока(НСтр("ru = 'Мы должны %1 руб.'"), ПараметрыМонитора.ШрифтЗаголовков);
	Блок.Строка0 = СтрШаблон(Строка0, Формат(Индикатор.КУплатеДолг + Индикатор.КУплатеТекущий, "ЧДЦ=2"));
	
	Строка1 = НСтр("ru = 'Просрочено %1 руб.'");
	ДобавитьСтроку1(Блок, СтрШаблон(Строка1, Формат(Индикатор.КУплатеДолг, "ЧДЦ=2")));
	
	ТекстСсылки = НСтр("ru = 'Оплата взносов'");
	ОписаниеДействияСсылки = ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Индикатор.Правило, ПараметрыМонитора);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Функция ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Правило, ПараметрыМонитора)
	
	ПараметрыФормы = Новый Структура;
	
	СведенияОбОрганизации.Вставить("Правило", Правило);
	АдресСведенийОбОрганизации = ПоместитьВоВременноеХранилище(
		СведенияОбОрганизации, ПараметрыМонитора.УникальныйИдентификатор);
	Если СведенияОбОрганизации.РегистрацияВЭтомГоду 
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.СостояниеПомощника) Тогда
		
		ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма.ФормаВзносыИПНулевка";
	Иначе
		ИмяФормыПомощника = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды";
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы.Вставить("АдресСведенийОбОрганизации", АдресСведенийОбОрганизации);
	ПараметрыФормы.Вставить("Правило", Правило);
	
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПомощника);
	ОписаниеДействия.Вставить("ИдентификаторФормы", ПараметрыМонитора.УникальныйИдентификатор);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

Функция СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПоУмолчанию)
	
	Ячейка = Новый Структура;
	Если ЗначениеЗаполнено(Блок.ЦветФона) Тогда
		Ячейка.Вставить("type", Блок.ЦветФона);
	Иначе
		Ячейка.Вставить("type", СостоянияИндикаторов().Пустой);
	КонецЕсли;
	Если Ячейка.type = СостоянияИндикаторов().Пустой Тогда
		Возврат Ячейка;
	КонецЕсли;
	
	ВидимостьСтроки = Ложь;
	Если Блок.Свойство("СтрокаВидимость0", ВидимостьСтроки) И ВидимостьСтроки Тогда
		Ячейка.Вставить("title", Строка(Блок.Строка0));
	КонецЕсли;
	Если Блок.Свойство("СтрокаВидимость1", ВидимостьСтроки) И ВидимостьСтроки Тогда
		Если Блок.Свойство("СтрокаВидимостьЕНС", ВидимостьСтроки) И ВидимостьСтроки Тогда
			Ячейка.Вставить("description", Строка(Блок.Строка2));
		Иначе
			Ячейка.Вставить("description", Строка(Блок.Строка1));
		КонецЕсли;
	КонецЕсли;
	
	Ячейка.Вставить("links", Новый Массив);
	ПараметрыСсылок = Неопределено;
	ПараметрыФормы = Неопределено;
	Для НомерСтроки = 2 По Блок.КолвоСтрок - 1 Цикл
		
		Если Не (Блок.Свойство("СтрокаВидимость" + НомерСтроки, ВидимостьСтроки) И ВидимостьСтроки
			И Блок.Свойство("СтрокаПараметрыСсылки" + НомерСтроки, ПараметрыСсылок) И ЗначениеЗаполнено(ПараметрыСсылок)) Тогда
			Продолжить;
		КонецЕсли;
		   
		Если ТипЗнч(ПараметрыСсылок) = Тип("Структура") Тогда
			ПараметрыСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСсылок);
		КонецЕсли;
		Для Каждого ПараметрыСсылки Из ПараметрыСсылок Цикл
		
			Если ПараметрыСсылки.Свойство("ПубликуемыйИдентификатор") Тогда
				
				ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
					ПараметрыСсылки.ПубликуемыйИдентификатор,
					Блок["Строка" + НомерСтроки],
					ИнтеграцияСБанками.АдресСервисаПубликацияОтчетов() + "/" + ПараметрыСсылки.ПубликуемыйИдентификатор,
					ПараметрыСсылки.ВходящиеНастройкиПубликуемыхДанных);
				
			ИначеЕсли ПараметрыСсылки.Свойство("ИмяФормы") И ПараметрыСсылки.Свойство("ПараметрыФормы") Тогда
				
				ПубликуемаяСсылкаНаФорму = РегистрыСведений.ПубликуемыеНавигационныеСсылки.СсылкаНаФорму(
					ПараметрыСсылки.ИмяФормы, ПараметрыСсылки.ПараметрыФормы);
				ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки(
					"goto1C", Блок["Строка" + НомерСтроки], ПубликуемаяСсылкаНаФорму);
				
			Иначе
				// Ссылка на этот объект не поддерживается. Возвращаем ссылку на монитор.
				ОписаниеСсылки = ОписаниеСсылкиПоУмолчанию;
				
			КонецЕсли;
				
			Ячейка.links.Добавить(ОписаниеСсылки);
		
		КонецЦикла;

	КонецЦикла;
	
	Возврат Ячейка;
	
КонецФункции

Функция ВытащитьИзСтека(Массив)
	
	ПоследнийЭлемент = Массив[Массив.ВГраница()];
	Массив.Удалить(Массив.ВГраница());
	
	Возврат ПоследнийЭлемент;
	
КонецФункции

Процедура СортироватьПоВозрастанию(Массив, Столбец)
	// Сортируем  по алгоритму insertion sort, т.к. идеально подходит для маленьких массивов (не создает промежуточные массивы).
	Для ВнешнийСчетчик = 1 По Массив.ВГраница() Цикл
		СортируемаяСтрока = Массив[ВнешнийСчетчик];
		ВнутреннийСчетчик = ВнешнийСчетчик - 1;
		Пока ВнутреннийСчетчик >= 0 И Массив[ВнутреннийСчетчик][Столбец] > СортируемаяСтрока[Столбец] Цикл
			Массив[ВнутреннийСчетчик + 1] = Массив[ВнутреннийСчетчик];
			ВнутреннийСчетчик = ВнутреннийСчетчик - 1;
		КонецЦикла;
		Массив[ВнутреннийСчетчик + 1] = СортируемаяСтрока;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтформатироватьСтрокуСуммы(ИсходнаяСтрока, Сумма)
	
	Если Сумма = Цел(Сумма) Тогда
		ФорматСуммы = "";
	Иначе
		ФорматСуммы = "ЧДЦ=2";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, Формат(Сумма, ФорматСуммы));
	
КонецФункции

Функция СформироватьПоказателиМонитора(Параметры)
	
	Если Параметры.УпрощеннаяНулеваяОтчетность Тогда
		Возврат СформироватьПоказателиМонитораДеятельностьОтсутствует(Параметры);
	Иначе
		Возврат СформироватьПоказателиМонитораРегулярнаяДеятельность(Параметры);
	КонецЕсли;
	
КонецФункции

Функция СформироватьПоказателиМонитораРегулярнаяДеятельность(Параметры)
	
	Результат = НовыйПоказателиМонитора();
	
	Организация = Параметры.Организация;
	ТекущийДень = Параметры.ТекущийДень;
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если СписокОрганизаций.Количество() = 0 Тогда
		// Нет смысла проверять задачи - отсутствует доступ.
		Возврат Результат;
	КонецЕсли;
	
	// Доступ уже проверен, для быстродействия получаем данные без контроля доступа.
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	// Сначала обновим список задач при необходимости.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, Ложь);
	
	// Подготовка налоговых индикаторов.
	НалоговыеИндикаторы = Результат.НалоговыеИндикаторы;
	ИндикаторВзносовИП = Неопределено;
	ПодготовитьНалоговыеИндикаторы(НалоговыеИндикаторы, ЗадачиОрганизации, ИндикаторВзносовИП, Параметры);

	// Подготовка отчетных индикаторов.
	ОтчетныеИндикаторы = Результат.ОтчетныеИндикаторы;
	
	ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам);
	
	ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам,
		Организация, ТекущийДень, Ложь, ДатаНачалаДеятельности, ИндикаторВзносовИП);
	
	ОтчетныеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	ЗаполнитьДанныеЕНС(ТекущийДень, Организация, НалоговыеИндикаторы, Результат.ЕдиныйНалоговыйСчет);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ВключенныеЗадачи   = ЗадачиОрганизации.ВключенныеЗадачи;
	Результат.ВсеЗадачиВыполнены = ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	Возврат Результат
	
КонецФункции

Функция СформироватьПоказателиМонитораДеятельностьОтсутствует(Параметры)
	
	Результат = НовыйПоказателиМонитораДеятельностьОтсутствует();
	
	Организация                        = Параметры.Организация;
	ТекущийДень                        = Параметры.ТекущийДень;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	ЭтоПерваяОтчетнаяКампания =
		РегистрыСведений.ПерваяОтчетнаяКампания.ЭтоПерваяОтчетнаяКампания(Организация, ТекущийДень, Перечисления.Периодичность.Месяц);
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если СписокОрганизаций.Количество() = 0 Тогда
		// Нет смысла проверять задачи - отсутствует доступ.
		Возврат Результат;
	КонецЕсли;
	
	// Доступ уже проверен, для быстродействия получаем данные без контроля доступа.
	УстановитьПривилегированныйРежим(Истина);
	
	// Сначала обновим список задач при необходимости.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, Истина);
	
	СчетаУчетаЗадач   = ПоддерживаемыеСчетаУчетаЗадач(ТекущийДень);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	ТаблицаПолучателей = ПолучитьТаблицуПолучателейОтчетности(ЗадачиОрганизации);

	// Подготовка индикаторов при нулевой деятельности.
	//
	// Особенности формирования налоговых индикаторов:
	//    - индикатор по фиксированным взносам ИП выводим всегда - их уплата не зависит от деятельности;
	//    - индикаторы для остальных налогов не формируем, т.к. уплачивать ничего не требуется;
	//    - индикатор по отчетности группируем по получателям.
	//
	// Особенности формирования отчетных индикаторов:
	//    - индикатор по статистике не выводим;
	//    - индикаторы регулярных отчетов "сворачиваем" в один, отображающий самые критичные статус и срок.

	НалоговыеИндикаторы = Результат.НалоговыеИндикаторы;
	
	// Сначала строим отчетные индикаторы в развернутом виде.
	ОтчетныеИндикаторыРазвернутые = НоваяТаблицаИндикаторовДеятельностьОтсутствует();
	
	ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторыРазвернутые, ЗадачиОрганизации.ЗадачиПоОтчетам,
		Организация, ТекущийДень, Истина, ДатаНачалаДеятельности);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Сформируем результирующий набор индикаторов.
	ОтчетныеИндикаторы = Результат.ОтчетныеИндикаторы;
	
	ИндикаторВзносовИП = ПрименитьАлгоритмДляВзносовИП(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Параметры, СчетаУчетаЗадач, СчетаУчетаДС);
		
	ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС);
	
	// Свернем отчетные индикаторы и поместим в результирующий набор.
	ДобавитьИндикаторНулеваяОтчетность(ОтчетныеИндикаторы, ОтчетныеИндикаторыРазвернутые, Организация, ТекущийДень, ТаблицаПолучателей, ЗадачиОрганизации.ЗадачиПоПрошлымОтчетам);
	
	ОтчетныеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	ДобавитьЗадачуНулеваяОтчетность(ЗадачиОрганизации.ВключенныеЗадачи, ТаблицаПолучателей);
	
	Результат.ВключенныеЗадачи   = ЗадачиОрганизации.ВключенныеЗадачи;
	Результат.ВсеЗадачиВыполнены = ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	Возврат Результат;
	
КонецФункции

Функция ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы)
	
	НалогиУплачены = НалоговыеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЦветаИндикаторов().Зеленый)).Количество()
		= НалоговыеИндикаторы.Количество();
		
	ОтчетыСданы = ОтчетныеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЦветаИндикаторов().Зеленый)).Количество()
		= ОтчетныеИндикаторы.Количество();
		
	Возврат НалогиУплачены И ОтчетыСданы;
	
КонецФункции

Функция НовыйПоказателиМонитора()
	
	Результат = Новый Структура;
	
	НалоговыеИндикаторы = НоваяТаблицаИндикаторов();
	ДополнитьТаблицуНалоговыхИндикаторов(НалоговыеИндикаторы);
	ОтчетныеИндикаторы = НоваяТаблицаИндикаторов();
	ДополнитьТаблицуОтчетныхИндикаторов(ОтчетныеИндикаторы);
	
	Результат.Вставить("НалоговыеИндикаторы", НалоговыеИндикаторы);
	Результат.Вставить("ОтчетныеИндикаторы",  ОтчетныеИндикаторы);
	Результат.Вставить("ВключенныеЗадачи",    НовыйВключенныеЗадачи());
	Результат.Вставить("ВсеЗадачиВыполнены",  Ложь);
	Результат.Вставить("ЕдиныйНалоговыйСчет", НовыйЕдиныйНалоговыйСчет());
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьТаблицуНалоговыхИндикаторов(ТаблицаИндикаторов)
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаИндикаторов.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы); // Сумма начисленного налога без учета оплаты. Не заполняется, если срок уплаты еще не наступил.
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы); // Текущая сумма налога к уплате. Не заполняется, если срок уплаты еще не наступил.
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы); // Сумма просроченной задолженности перед бюджетом.
	
	ТаблицаИндикаторов.Колонки.Добавить("НуженПомощникНалоговПрошлыхПериодов", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция ДополнитьТаблицуОтчетныхИндикаторов(ТаблицаИндикаторов)
	
	ТаблицаИндикаторов.Колонки.Добавить("ПросроченныеОтчеты",    Новый ОписаниеТипов("ТаблицаЗначений")); // список несданных вовремя отчетов. См функцию НовыйПросроченныеОтчеты().
	ТаблицаИндикаторов.Колонки.Добавить("ОтчетыПрошлыхПериодов", Новый ОписаниеТипов("ТаблицаЗначений")); // список отчетов прошлых лет, которые введены по результатам теста прошлых периодов. См функцию НовыйОтчетыПрошлыхПериодов().
	ТаблицаИндикаторов.Колонки.Добавить("СтатусТекущегоОтчета",  ОбщегоНазначения.ОписаниеТипаСтрока(50)); // статус отчета, срок сдачи которого наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетСдан",      Новый ОписаниеТипов("Булево")); // признак, того, что задача по текущему отчету выполнена.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетЕстьВБазе", Новый ОписаниеТипов("Булево")); // признак того, что текущий отчет записан в базу.
	ТаблицаИндикаторов.Колонки.Добавить("НуженПомощникОтчетовПрошлыхПериодов", Новый ОписаниеТипов("Булево"));
	ТаблицаИндикаторов.Колонки.Добавить("ПравилаПрошлыхПериодов", Новый ОписаниеТипов("ТаблицаЗначений")); // список правил по отчетам прошлых лет, которые введены по результатам теста прошлых периодов.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НоваяТаблицаИндикаторов()
	
	ТаблицаИндикаторов = Новый ТаблицаЗначений;
	ТаблицаИндикаторов.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача бухгалтера по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание НовыйБудущаяЗадача().
	ТаблицаИндикаторов.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); // краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаИндикаторов.Колонки.Добавить("НаименованиеЗадачи",   ОбщегоНазначения.ОписаниеТипаСтрока(150)); // полное наименование задачи - как в списке задач; передается в заголовки помощников.
	ТаблицаИндикаторов.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаИндикаторов.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок уплаты налога.
	ТаблицаИндикаторов.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("Индикатор",            ОбщегоНазначения.ОписаниеТипаСтрока(20)); // тип индикатора (Зеленый, красный или желтый).
	ТаблицаИндикаторов.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ФинансовыйПериод",     Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность налогового периода.
	
	ТаблицаИндикаторов.Колонки.Добавить("РасширенныйПервыйНалоговыйПериод",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода")); // вариант особенностей законодательства для первого налогового/отчетного периода.
		
	ТаблицаИндикаторов.Колонки.Добавить("Получатель",           Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов")); // получатели отчетности
	
	// Часть налогов уплачиваются в составе ЕНС, в этих случаях суммы налога к уплате можно определить
	// по данным подсистемы ЕНС (уведомлений, операций и т.п.).
	// Чтобы это сработало, следует указать вид налога, к которому относится задача.
	ТаблицаИндикаторов.Колонки.Добавить("НалогЕНС",             Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаИндикаторов.Колонки.Добавить("КодЗадачи",            ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ЗадачиБухгалтера.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НоваяБудущаяЗадача()
	
	БудущаяЗадача = Новый Структура;
	БудущаяЗадача.Вставить("ИмяЗадачи", ""); // наименование задачи - часть представления ближайшего отчета при нулевой отчетности.
	БудущаяЗадача.Вставить("Наименование", ""); // краткое описание текста задачи, которое отображается в мониторе.
	БудущаяЗадача.Вставить("ПериодСобытия", Дата("00010101")); // последний день очередного отчетного периода.
	БудущаяЗадача.Вставить("Срок", Дата("00010101"));  // крайний срок выполнения очередной задачи.
	БудущаяЗадача.Вставить("НачалоПериодаСобытия", Дата("00010101")); // первый день очередного отчетного периода.
	БудущаяЗадача.Вставить("НачалоВыполнения", Дата("00010101")); // первый день, начиная с которого можно приступать к выполнению задачи.
	
	Возврат БудущаяЗадача;
	
КонецФункции

Функция НовыйПоказателиМонитораДеятельностьОтсутствует()
	
	Результат = Новый Структура;
	
	Результат.Вставить("НалоговыеИндикаторы", НоваяТаблицаИндикаторовДеятельностьОтсутствует());
	Результат.Вставить("ОтчетныеИндикаторы",  НоваяТаблицаИндикаторовДеятельностьОтсутствует());
	Результат.Вставить("ВключенныеЗадачи",    НовыйВключенныеЗадачи());
	Результат.Вставить("ВсеЗадачиВыполнены",  Ложь);
	Результат.Вставить("ЕдиныйНалоговыйСчет", НовыйЕдиныйНалоговыйСчет());
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаИндикаторовДеятельностьОтсутствует()
	
	ТаблицаИндикаторов = НоваяТаблицаИндикаторов();
	ДополнитьТаблицуНалоговыхИндикаторов(ТаблицаИндикаторов);
	ДополнитьТаблицуОтчетныхИндикаторов(ТаблицаИндикаторов);
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция ПолучитьТаблицуПолучателейОтчетности(ЗадачиОрганизации)
	
	ТаблицаПолучателей = ЗадачиОрганизации.ЗадачиПоНалогам.Скопировать(, "Получатель");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗадачиОрганизации.ЗадачиПоОтчетам.Скопировать(, "Получатель"), ТаблицаПолучателей);
	ТаблицаПолучателей.Свернуть("Получатель");
	МассивСтрок = ТаблицаПолучателей.НайтиСтроки(Новый Структура("Получатель", Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка()));
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ТаблицаПолучателей.Удалить(СтрокаМассива);
	КонецЦикла;
	ТаблицаПолучателей.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПолучателей Цикл
		СтрокаТаблицы.Порядок = Перечисления.ТипыКонтролирующихОрганов.Индекс(СтрокаТаблицы.Получатель);
	КонецЦикла;
	ТаблицаПолучателей.Сортировать("Порядок Убыв");
	
	ТаблицаПолучателей.Колонки.Добавить("ОписаниеПолучателя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПолучателей Цикл
		Если СтрокаТаблицы.Получатель = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СтрокаТаблицы.ОписаниеПолучателя = НСтр("ru='налоговую инспекцию'");
		ИначеЕсли СтрокаТаблицы.Получатель = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СтрокаТаблицы.ОписаниеПолучателя = НСтр("ru='пенсионный фонд'");
		ИначеЕсли СтрокаТаблицы.Получатель = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СтрокаТаблицы.ОписаниеПолучателя = НСтр("ru='фонд социального страхования'");
		Иначе 
			СтрокаТаблицы.ОписаниеПолучателя = Строка(СтрокаТаблицы.Получатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПолучателей;
	
КонецФункции

Функция ПравилоОплатыСЕНС(КодПравила)
	
	КодыПравилИсключений = Новый Массив;
	КодыПравилИсключений.Добавить(КодПравилаУплатаВзносовЗаКвартал());
	КодыПравилИсключений.Добавить(КодПравилаУплатаТравматизм());
	КодыПравилИсключений.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ());
	КодыПравилИсключений.Добавить(КодПравилаУплатаТравматизмАУСН());
	
	Возврат КодыПравилИсключений.Найти(КодПравила) = Неопределено;
	
КонецФункции

Функция ЗадачаОплатыСЕНС(КодЗадачи)
	
	ЭтоВзносыТравматизм = ЭтоЗадачаСтраховыхВзносовТравматизм(КодЗадачи);
	ЭтоВНиМ = ЭтоЗадачаВзносыНаВНиМ(КодЗадачи); // Оплачиваются по отдельным реквизитам в ФСС
	ЭтоВзносыИП = ЭтоЗадачаВзносовИП(КодЗадачи); // Поведение блока для взносов ИП отличается от остальных
	ЭтоВзносыИП = Ложь;
	ЭтоВзносыАУСН = ЭтоЗадачаСтраховыхВзносовАУСН(КодЗадачи);
	
	Возврат Не ЭтоВзносыТравматизм И Не ЭтоВНиМ И Не ЭтоВзносыИП И Не ЭтоВзносыАУСН;
	
КонецФункции

Функция ЭтоПравилоУплатыНДФЛ(КодПравила, ПравилаУплатыНДФЛ)
	
	НайденныеПравила = ПравилаУплатыНДФЛ.Найти(КодПравила);
	
	Возврат НайденныеПравила <> Неопределено;
	
КонецФункции

Функция ПравилаУплатыНДФЛ()
	
	Правила = Новый Массив;
	Правила.Добавить("2023_НДФЛ_Уплата");
	Правила.Добавить("2023_НДФЛ_Уплата_ЕдиныйПомощник");
	
	Возврат Правила;
	
КонецФункции

Процедура ЗаполнитьДанныеЕНС(ТекущийДень, Организация, НалоговыеИндикаторы, ДанныеЕНС)
	
	ПростойУчетЕНС = ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ДатаСреза = ТекущийДень;
	ОстатокНаЕНС = ЕдиныйНалоговыйСчет.ОстатокНаЕдиномНалоговомСчете(Организация, ДатаСреза);
	РассчитаноНалоговИВзносовСЕНС = НалоговыеИндикаторы.Итог("КУплатеДолг") + НалоговыеИндикаторы.Итог("КУплатеТекущий");
	Для Каждого СтрокаТаблицы Из НалоговыеИндикаторы Цикл
		Если ЗадачаОплатыСЕНС(СтрокаТаблицы.КодЗадачи) Тогда
			Если СтрокаТаблицы.Срок <= ДатаСреза Тогда
				ОстатокНаЕНС = ОстатокНаЕНС + СтрокаТаблицы.КУплатеТекущий;
			КонецЕсли;
		Иначе
			РассчитаноНалоговИВзносовСЕНС = РассчитаноНалоговИВзносовСЕНС - СтрокаТаблицы.КУплатеДолг - СтрокаТаблицы.КУплатеТекущий;
		КонецЕсли;
	КонецЦикла;
	
	ВходящийОстатокЕНС = ЕдиныйНалоговыйСчет.ОстатокНаЕдиномНалоговомСчете(Организация, НачалоДня(ТекущийДень) - 1);
	
	// Платежи
	Платежи = ПомощникиПоУплатеНалоговИВзносов.НеИсполненныеПлатежныеПорученияОплатыНалогаЕНС(Организация);
	СуммаПлатежей = 0;
	Для Каждого Платеж Из Платежи Цикл
		СуммаПлатежей = СуммаПлатежей + Платеж.Сумма;
	КонецЦикла;
	СуммаПополненияЕНС = РассчитаноНалоговИВзносовСЕНС - СуммаПлатежей - ОстатокНаЕНС;
	СуммаПополненияЕНС = Макс(0, СуммаПополненияЕНС);
	
	ДанныеЕНС.ОстатокЕНС = ОстатокНаЕНС;
	ДанныеЕНС.РассчитаноНалогов = РассчитаноНалоговИВзносовСЕНС;
	ДанныеЕНС.СуммаПлатежи = СуммаПлатежей;
	ДанныеЕНС.НужноОплатить = СуммаПополненияЕНС;
	ДанныеЕНС.ПлатежиЕНС = Платежи;
	ДанныеЕНС.ВходящийОстатокЕНС = ВходящийОстатокЕНС;
	
КонецПроцедуры

Функция ВыделятьВОтдельныйПоказатель(КодПравила)
	
	КодыОтдельныхЗадач = Новый Массив;
	КодыОтдельныхЗадач.Добавить(КодПравилаУплатаТравматизм());
	КодыОтдельныхЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ());
	
	Возврат КодыОтдельныхЗадач.Найти(КодПравила) <> Неопределено;
	
КонецФункции

Функция КодСтрокиМонитораСтраховыеВзносыИП_ВНиМ()
	
	Возврат "СтраховыеВзносыИП_ВНиМ";
	
КонецФункции

Функция НайтиСтрокиПоВладельцу(КоллекцияСтрок, Владелец, КодЗадачи)
	
	Результат = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из КоллекцияСтрок Цикл
		Если ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
			// Для задач страховых взносов для ИП выделяем в отдельный показатель взносы на случай временной нетрудоспособности
			ЭтоПоказательВНиМ = ЭтоПравилоВзносыНаВНиМ(ТекущаяСтрока.КодПравила);
			Если ЭтоПоказательВНиМ И ЭтоЗадачаВзносыНаВНиМ(КодЗадачи) Тогда
				Результат.Добавить(ТекущаяСтрока);
			ИначеЕсли Не ЭтоПоказательВНиМ И Владелец = ТекущаяСтрока.Владелец Тогда
				Результат.Добавить(ТекущаяСтрока);
			КонецЕсли;
		ИначеЕсли Владелец = ТекущаяСтрока.Владелец Тогда
			Результат.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваВключеннойЗадачи(КодПравила, КодЗадачи, ИмяЗадачи, Порядок)
	
	Результат = Новый Структура;
	// Имя показателя монитора налогов и отчетов
	Результат.Вставить("ИмяЗадачи", ИмяЗадачи);
	// Уникальный идентификатор показателя в мониторе, не всегда соответствует идентификатору задачи
	Результат.Вставить("КодЗадачи", КодЗадачи);
	// Порядок следования показателей в мониторе. По умолчанию зависит от порядка владельца, но может переопределяться
	Результат.Вставить("Порядок", Порядок);
	
	Если КодПравила = КодПравилаУплатаТравматизм() Тогда
		Результат.ИмяЗадачи = "Страховые взносы травматизм";
		Результат.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыТравматизм();
	КонецЕсли;
	
	Если ЭтоПравилоВзносыНаВНиМ(КодПравила) Тогда
		// Страховые взносы ИП находятся в одной группе.
		// Т.к. взносы на ВНиМ оплачиваются на отдельный КБК, выносим в отдельный показатель монитора
		Результат.ИмяЗадачи = "Взносы за себя, временная нетрудоспособность";
		Результат.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыИП_ВНиМ();
		Результат.Порядок = 12;
	КонецЕсли;
	
	Если ЭтоЗадачаНДФЛПоУплате(Результат.КодЗадачи) Или ЭтоЗадачаНДФЛПоОтчету(Результат.КодЗадачи) Тогда
		Результат.ИмяЗадачи = НСтр("ru='НДФЛ'");
	Иначе
		Результат.ИмяЗадачи = ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(Результат.ИмяЗадачи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПравилоВзносыНаВНиМ(КодПравила)
	
	Возврат КодПравила = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ();
	
КонецФункции

Функция ЭтоЗадачаВзносыНаВНиМ(КодЗадачи)
	
	Возврат КодЗадачи = КодСтрокиМонитораСтраховыеВзносыИП_ВНиМ();
	
КонецФункции

Процедура ПодготовитьНалоговыеИндикаторы(НалоговыеИндикаторы, ЗадачиОрганизации, ИндикаторВзносовИП, Параметры)
	
	Организация                     = Параметры.Организация;
	ТекущийДень                     = Параметры.ТекущийДень;
	ОтсутствуютПатенты              = Параметры.ОтсутствуютПатенты;
	ОтсутствуютВидыДеятельностиЕНВД = Параметры.ОтсутствуютВидыДеятельностиЕНВД;
	ПростойУчетЕНС               = ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	СчетаУчетаЗадач = ПоддерживаемыеСчетаУчетаЗадач(ТекущийДень);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД);
	
	ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		Организация, ТекущийДень, СчетаУчетаЗадач, СчетаУчетаДС);
		
	ПрименитьАлгоритмДляНалогаАУСН(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);

	ПрименитьАлгоритмДляНПД(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам
		, Организация, ТекущийДень, СчетаУчетаДС);
	
	ПрименитьАлгоритмДляВзносовИПНаВНиМ(НалоговыеИндикаторы, Организация, ЗадачиОрганизации.ЗадачиПоНалогам);
	
	Если Не ПростойУчетЕНС Тогда
		
		ПрименитьАлгоритмДляНДФЛ(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		
		ПрименитьАлгоритмДляНалогаУСН(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		
		ИндикаторВзносовИП = ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
			Параметры, СчетаУчетаЗадач, СчетаУчетаДС);
		
		ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам
			, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС);
			
		ПрименитьАлгоритмДляНДФЛ_ИП(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ФормироватьСуммыПоПатенту", Ложь) Тогда
			ПрименитьАлгоритмДляПСН(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, ТекущийДень);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ФормироватьСуммыПоНДС", Ложь) Тогда
			ПрименитьАлгоритмДляНДС(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ФормироватьСуммыПоНалогамНаИмущество", Ложь) Тогда
			// Транспортный, имущественный, земельный
			ПрименитьАлгоритмДляНалоговНаИмущество(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ФормироватьСуммыПоНалогуНаПрибыль", Ложь) Тогда
			ПрименитьАлгоритмДляНалогаНаПрибыль(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименитьАлгоритмДляАвансаПоЕНП(НалоговыеИндикаторы, Организация, ТекущийДень);
	
	НалоговыеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
КонецПроцедуры

Функция ДанныеЕНСВСтруктуруОтвета(ИндикаторЕНС, ПараметрыМонитора)
	
	ДанныеЕНС = Новый Структура("balance_title, pay_title, total_title, pay",
		СтрШаблон(НСтр("ru = 'Остаток на ЕНС: %1 руб.'"), ИндикаторЕНС.ОстатокЕНС),
		СтрШаблон(НСтр("ru = 'Нужно пополнить ЕНС: %1 руб.'"), ИндикаторЕНС.НужноОплатить),
		СтрШаблон(НСтр("ru = 'Рассчитано налогов и взносов: %1 руб.'"), ИндикаторЕНС.РассчитаноНалогов),
		ИндикаторЕНС.НужноОплатить);
		
	Если ИндикаторЕНС.НужноОплатить > 0 Тогда
		ПараметрыСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
			ПараметрыМонитора.Организация,
			ТекущаяДатаСеанса(),
			Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		ОписаниеСсылкиУплата = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор(),
			НСтр("ru = 'Оплатить налог'"),
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса(),
			ПараметрыСервисаОплаты);
			
		ДанныеЕНС.Вставить("link", ОписаниеСсылкиУплата);
	КонецЕсли;
	
	Возврат ДанныеЕНС;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЗадач

// Заполняет все задачи в разрезе правил по налогам и отчетам, которые организация по закону должна выполнить, начиная с сегодняшнего дня. 
// Результат функции передается далее конкретным алгоритмам, которые решают, исходя из конкретной учетной политики и конкретных данных базы, 
// должна ли это задача действительно выполнятся и какой у нее должен статус (красный, желтый, зеленый, серый).
//
Функция СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, ДеятельностьОтсутствует)
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация    = Организация;
	ОтборПравил.КонецИнтервала = ДобавитьМесяц(КонецГода(ТекущийДень), 12);
	Если ДеятельностьОтсутствует Тогда
		ОтборПравил.НачалоИнтервала = НачалоГода(ДобавитьМесяц(ТекущийДень, -36));
	КонецЕсли;
	
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, , Истина);
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Соответствия    = ВыполнениеЗадачБухгалтера.СоответствияПравилИФормОтчетов();
	ДопСоответствия = ВыполнениеЗадачБухгалтера.ИдентификаторыПравилВыполняющихсяНеРеглОтчетами();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДопСоответствия, Соответствия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расписание",                  Расписание);
	Запрос.УстановитьПараметр("ТекущийДень",                 НачалоДня(ТекущийДень));
	Запрос.УстановитьПараметр("ИсключаемыеПравила",          ИсключаемыеПравила(ЭлектронныйДокументооборотДоступен, ДеятельностьОтсутствует));
	Запрос.УстановитьПараметр("ИсключаемыеЗадачи",           ИсключаемыеЗадачи(ДеятельностьОтсутствует));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("ПравилаРазовыхЗадач",         ПравилаРазовыхЗадач());
	Запрос.УстановитьПараметр("Соответствия",                Соответствия);
	Запрос.УстановитьПараметр("УсловиеПервыйПериодКампании", Истина);
	Если ДеятельностьОтсутствует Тогда
		Запрос.УстановитьПараметр("ПервыйПериодКампании", РегистрыСведений.ПерваяОтчетнаяКампания.ПервыйПериодКампании(Организация));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Соответствия.ФормаОтчета КАК ФормаОтчета,
	|	Соответствия.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Соответствия.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ВТСоответствия
	|ИЗ
	|	&Соответствия КАК Соответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСоответствия.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТСоответствия.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ВТСоответствия.ФормаОтчета КАК ФормаОтчета,
	|	ВидыОтправляемыхДокументов.ТипПолучателя КАК ТипПолучателя
	|ПОМЕСТИТЬ ВТПолучателиОтчета
	|ИЗ
	|	ВТСоответствия КАК ВТСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	|		ПО (ВТСоответствия.ФормаОтчета = ВидыОтправляемыхДокументов.Источник
	|				ИЛИ ПОДСТРОКА(ВТСоответствия.ФормаОтчета, 10, 100) = ВидыОтправляемыхДокументов.Источник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникПравила.Ссылка КАК Правило
	|ПОМЕСТИТЬ ВТИсключаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Ссылка В(&ИсключаемыеПравила)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СправочникПравила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Владелец В(&ИсключаемыеЗадачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Срок КАК Срок,
	|	Расписание.Правило КАК Правило,
	|	Расписание.Наименование КАК Наименование,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ РасписаниеЗаПериод
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Расписание.ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеЗаПериод.Срок КАК Срок,
	|	РасписаниеЗаПериод.Правило КАК Правило,
	|	РасписаниеЗаПериод.Наименование КАК Наименование,
	|	РасписаниеЗаПериод.ПериодСобытия КАК ПериодСобытия,
	|	РасписаниеЗаПериод.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеПравила КАК ВТИсключаемыеПравила
	|		ПО РасписаниеЗаПериод.Правило = ВТИсключаемыеПравила.Правило
	|ГДЕ
	|	ВТИсключаемыеПравила.Правило ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ПО ЗадачиБухгалтера.Правило = РасписаниеЗаПериод.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = РасписаниеЗаПериод.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&ПравилаРазовыхЗадач)
	|	И РасписаниеЗаПериод.Правило ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.Срок КАК Срок,
	|	ВТРасписание.Правило КАК Правило,
	|	ВТРасписание.Наименование КАК Наименование,
	|	ВТРасписание.ПериодСобытия КАК ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ТекущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|	И ВТРасписание.Срок >= &ТекущийДень
	|	И &УсловиеПервыйПериодКампании
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТРасписание.Срок) КАК Срок,
	|	ВТРасписание.Правило КАК Правило
	|ПОМЕСТИТЬ БудущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения > &ТекущийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписание.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТРасписание.Срок) КАК Срок,
	|	ВТРасписание.Правило КАК Правило
	|ПОМЕСТИТЬ ПрошлыеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписание.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныйСписокТекущийБудущихПравил.Правило КАК Правило,
	|	МИНИМУМ(ПолныйСписокТекущийБудущихПравил.БудЗадачаСрок) КАК БудЗадачаСрок,
	|	МИНИМУМ(ПолныйСписокТекущийБудущихПравил.ТекЗадачаСрок) КАК ТекЗадачаСрок
	|ПОМЕСТИТЬ ТекущиеБудущиеПравила
	|ИЗ
	|	(ВЫБРАТЬ
	|		БудущиеЗадачи.Правило КАК Правило,
	|		БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|		ДАТАВРЕМЯ(2999, 12, 31) КАК ТекЗадачаСрок
	|	ИЗ
	|		БудущиеЗадачи КАК БудущиеЗадачи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗадачи.Правило,
	|		ДАТАВРЕМЯ(2999, 12, 31),
	|		ТекущиеЗадачи.Срок
	|	ИЗ
	|		ТекущиеЗадачи КАК ТекущиеЗадачи) КАК ПолныйСписокТекущийБудущихПравил
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолныйСписокТекущийБудущихПравил.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрошлыеЗадачи.Срок КАК Срок,
	|	ПрошлыеЗадачи.Правило КАК Правило,
	|	ВТРасписание.Наименование КАК Наименование,
	|	ВТРасписание.ПериодСобытия КАК ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ПрошлыеПравила
	|ИЗ
	|	ПрошлыеЗадачи КАК ПрошлыеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписание КАК ВТРасписание
	|		ПО ПрошлыеЗадачи.Правило = ВТРасписание.Правило
	|			И ПрошлыеЗадачи.Срок = ВТРасписание.Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеБудущиеПравила.Правило КАК Правило,
	|	ТекущиеЗадачи.Срок КАК ТекЗадачаСрок,
	|	ТекущиеЗадачи.Наименование КАК ТекЗадачаНаименование,
	|	ТекущиеЗадачи.ПериодСобытия КАК ТекЗадачаПериодСобытия,
	|	ТекущиеЗадачи.НачалоВыполнения КАК ТекЗадачаНачалоВыполнения,
	|	БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|	БудущиеЗадачи.Наименование КАК БудЗадачаНаименование,
	|	БудущиеЗадачи.ПериодСобытия КАК БудЗадачаПериодСобытия,
	|	БудущиеЗадачи.НачалоВыполнения КАК БудЗадачаНачалоВыполнения,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТекущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТекущаяЗадача,
	|	ВЫБОР
	|		КОГДА БудущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьБудущаяЗадача,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК КодПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК КодЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Наименование КАК ИмяЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Описание КАК Описание,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК Порядок,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность КАК Периодичность,
	|	ПравилаПредставленияОтчетовУплатыНалогов.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод,
	|	ЕСТЬNULL(ВТПолучателиОтчета.ТипПолучателя, ВТПолучателиОтчетаБезПравила.ТипПолучателя) КАК Получатель
	|ИЗ
	|	ТекущиеБудущиеПравила КАК ТекущиеБудущиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = ТекущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.ТекЗадачаСрок = ТекущиеЗадачи.Срок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписание КАК БудущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = БудущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.БудЗадачаСрок = БудущиеЗадачи.Срок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ТекущиеБудущиеПравила.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолучателиОтчета КАК ВТПолучателиОтчета
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Код = ВТПолучателиОтчета.ИдентификаторПравила)
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = ВТПолучателиОтчета.ИдентификаторЗадачи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолучателиОтчета КАК ВТПолучателиОтчетаБезПравила
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = ВТПолучателиОтчетаБезПравила.ИдентификаторЗадачи)
	|			И (ВТПолучателиОтчетаБезПравила.ИдентификаторПравила = """")
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрошлыеПравила.Правило КАК Правило,
	|	ПрошлыеПравила.Срок КАК ПрошЗадачаСрок,
	|	ПрошлыеПравила.Наименование КАК ПрошЗадачаНаименование,
	|	ПрошлыеПравила.ПериодСобытия КАК ПрошЗадачаПериодСобытия,
	|	ПрошлыеПравила.НачалоВыполнения КАК ПрошЗадачаНачалоВыполнения,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие КАК Действие,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК КодПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК КодЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Наименование КАК ИмяЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Описание КАК Описание,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК Порядок,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность КАК Периодичность,
	|	ПравилаПредставленияОтчетовУплатыНалогов.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод,
	|	ЕСТЬNULL(ВТПолучателиОтчета.ТипПолучателя, ВТПолучателиОтчетаБезПравила.ТипПолучателя) КАК Получатель
	|ИЗ
	|	ПрошлыеПравила КАК ПрошлыеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ПрошлыеПравила.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолучателиОтчета КАК ВТПолучателиОтчета
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Код = ВТПолучателиОтчета.ИдентификаторПравила)
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = ВТПолучателиОтчета.ИдентификаторЗадачи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолучателиОтчета КАК ВТПолучателиОтчетаБезПравила
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = ВТПолучателиОтчетаБезПравила.ИдентификаторЗадачи)
	|			И (ВТПолучателиОтчетаБезПравила.ИдентификаторПравила = """")
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА";
	
	Если ДеятельностьОтсутствует Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПервыйПериодКампании", "ВТРасписание.Срок >= &ПервыйПериодКампании");
	КонецЕсли;
	
	Результат      = Запрос.ВыполнитьПакет();
	Выборка        = Результат[10].Выбрать();
	ПрошлаяВыборка = Результат[11].Выбрать();
	
	ЗадачиПоНалогам        = НовыйЗадачиОрганизации();
	ЗадачиПоОтчетам        = НовыйЗадачиОрганизации();
	ЗадачиПоПрошлымОтчетам = НовыйЗадачиОрганизации();
	ВключенныеЗадачи       = НовыйВключенныеЗадачи();
	
	Пока ПрошлаяВыборка.Следующий() Цикл
		
		ЭтоНалог = ЭтоНалоговыйПоказатель(ПрошлаяВыборка.Действие);
		
		Если ЭтоНалог Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗадачиПоПрошлымОтчетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрошлаяВыборка);
		
		НоваяСтрока.ЭтоТекущаяЗадача = Ложь;
		НоваяСтрока.Срок             = ПрошлаяВыборка.ПрошЗадачаСрок;
		НоваяСтрока.НачалоВыполнения = ПрошлаяВыборка.ПрошЗадачаНачалоВыполнения;
		НоваяСтрока.ПериодСобытия    = КонецДня(ПрошлаяВыборка.ПрошЗадачаПериодСобытия);
		
		НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
			ПрошлаяВыборка.Периодичность, ПрошлаяВыборка.ПрошЗадачаПериодСобытия);
			
		НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
			ПрошлаяВыборка.КодЗадачи, 
			ПрошлаяВыборка.КодПравила, 
			ПрошлаяВыборка.ИмяЗадачи, 
			ПрошлаяВыборка.Описание, 
			НоваяСтрока.НачалоПериодаСобытия, 
			НоваяСтрока.ПериодСобытия);
		
		НоваяСтрока.НаименованиеЗадачи = ПрошлаяВыборка.ПрошЗадачаНаименование;
		
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не (Выборка.ЕстьТекущаяЗадача Или Выборка.ЕстьБудущаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоНалог = ЭтоНалоговыйПоказатель(Выборка.Действие);
		
		НоваяСтрока = ?(ЭтоНалог, ЗадачиПоНалогам.Добавить(), ЗадачиПоОтчетам.Добавить());
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.КодПравила = КодПравилаУплатаТравматизм() Тогда
			НоваяСтрока.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыТравматизм();
		ИначеЕсли ЭтоПравилоВзносыНаВНиМ(Выборка.КодПравила) Тогда
			НоваяСтрока.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыИП_ВНиМ();
		КонецЕсли;
		
		Если Выборка.ЕстьТекущаяЗадача Тогда
			
			НоваяСтрока.ЭтоТекущаяЗадача = Истина;
			НоваяСтрока.Срок             = Выборка.ТекЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.ТекЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.ТекЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.ТекЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи,
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия,
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.ТекЗадачаНаименование;
			
		Иначе
			
			НоваяСтрока.ЭтоТекущаяЗадача = Ложь;
			НоваяСтрока.Срок             = Выборка.БудЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи, 
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия, 
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.БудЗадачаНаименование;
			
		КонецЕсли;
		
		БудущаяЗадача = НоваяБудущаяЗадача();
		Если Выборка.ЕстьБудущаяЗадача Тогда
			
			БудущаяЗадача.ИмяЗадачи        = Выборка.ИмяЗадачи;
			БудущаяЗадача.Срок             = Выборка.БудЗадачаСрок;
			БудущаяЗадача.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			БудущаяЗадача.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			БудущаяЗадача.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			БудущаяЗадача.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи,
				Выборка.КодПравила,
				Выборка.ИмяЗадачи,
				Выборка.Описание,
				БудущаяЗадача.НачалоПериодаСобытия,
				БудущаяЗадача.ПериодСобытия);
				
		КонецЕсли;
		НоваяСтрока.БудущаяЗадача = БудущаяЗадача;
		
		СвойстваВключеннойЗадачи = СвойстваВключеннойЗадачи(Выборка.КодПравила,
			Выборка.КодЗадачи,
			Выборка.ИмяЗадачи,
			Выборка.Порядок);
		
		ОтборВключенныхЗадач = Новый Структура("Владелец, КодЗадачи");
		ОтборВключенныхЗадач.Владелец = Выборка.Владелец;
		ОтборВключенныхЗадач.КодЗадачи = СвойстваВключеннойЗадачи.КодЗадачи;
		
		СтрокиВключеннаяЗадача = ВключенныеЗадачи.НайтиСтроки(ОтборВключенныхЗадач);
		Если СтрокиВключеннаяЗадача.Количество() > 0 Тогда
			ВключеннаяЗадача = СтрокиВключеннаяЗадача[0];
		Иначе
			ВключеннаяЗадача = ВключенныеЗадачи.Добавить();
		КонецЕсли;
		
		Если ЭтоНалог Тогда
			ВключеннаяЗадача.ПравилоНалог.Добавить(Выборка.Правило);
		Иначе
			ВключеннаяЗадача.ПравилоОтчет.Добавить(Выборка.Правило);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВключеннаяЗадача, Выборка);
		ЗаполнитьЗначенияСвойств(ВключеннаяЗадача, СвойстваВключеннойЗадачи);
		
	КонецЦикла;
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) 
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень) Тогда
		
		ИдЗадачиПатент = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент();
		
		СтрокаПатент = ВключенныеЗадачи.Добавить();
		СтрокаПатент.ИмяЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.КодЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.Порядок             = 11;
		
		СтрокаПатент = ЗадачиПоНалогам.Добавить();
		СтрокаПатент.КодЗадачи = ИдЗадачиПатент;
	КонецЕсли;
	
	ЗадачиПоНалогам.Сортировать("Срок");
	ВключенныеЗадачи.Сортировать("Порядок");
	Возврат Новый Структура("ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи, ЗадачиПоПрошлымОтчетам", 
		ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи, ЗадачиПоПрошлымОтчетам);
	
КонецФункции

Функция НовыйЗадачиОрганизации()
	
	ТипыПравил = Новый Массив;
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.Патенты"));
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Правило",              Новый ОписаниеТипов(ТипыПравил)); // правило, относящееся к уплате налога по данной задаче.
	ТаблицаЗадач.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание функции НовыйБудущаяЗадача().
	ТаблицаЗадач.Колонки.Добавить("НачалоВыполнения",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день, начиная с которого можно сдавать отчет / платить налог за очередной период.
	ТаблицаЗадач.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); //краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаЗадач.Колонки.Добавить("НаименованиеЗадачи",   ОбщегоНазначения.ОписаниеТипаСтрока(150)); // полное наименование задачи - как в списке задач; передается в заголовки помощников.
	ТаблицаЗадач.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаЗадач.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по сдаче отчета.
	ТаблицаЗадач.Колонки.Добавить("КодЗадачи",            ОбщегоНазначения.ОписаниеТипаСтрока(50));  // код задачи по налогу и отчету.
	ТаблицаЗадач.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаЗадач.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок сдачи отчета / уплаты налога.
	ТаблицаЗадач.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность начисления налога / предоставления отчета по правилу.
	ТаблицаЗадач.Колонки.Добавить("ФинансовыйПериод",     Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность налогового периода.
	ТаблицаЗадач.Колонки.Добавить("Получатель",           Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов")); // получатели отчетности
	
	ТаблицаЗадач.Колонки.Добавить("РасширенныйПервыйНалоговыйПериод",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода")); // вариант особенностей законодательства для первого налогового/отчетного периода.
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция НовыйВключенныеЗадачи()
	
	ВключенныеЗадачи = Новый ТаблицаЗначений;
	ВключенныеЗадачи.Колонки.Добавить("Владелец",       Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по налогу или отчету.
	ВключенныеЗадачи.Колонки.Добавить("ИмяЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(100)); // имя налога / отчета, отображаемое в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("КодЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код задачи по налогу и отчету.
	ВключенныеЗадачи.Колонки.Добавить("Порядок",        ОбщегоНазначения.ОписаниеТипаЧисло(2)); // порядк для сортировки задачи в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоНалог",   Новый ОписаниеТипов("Массив")); // правило, относящееся к уплате налога по данной задаче.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоОтчет",   Новый ОписаниеТипов("Массив")); // правило, относящееся к сдаче отчета по данной задаче.
	ВключенныеЗадачи.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов")); // получатели отчетности
	ВключенныеЗадачи.Индексы.Добавить("Владелец");
	
	Возврат ВключенныеЗадачи;
	
КонецФункции

Функция ДопускаетсяНесколькоЗадач(КодЗадачи)
	
	Если ЭтоЗадачаСтраховыхВзносов(КодЗадачи)
		Или ЭтоЗадачаНДФЛПоОтчету(КодЗадачи)
		Или ЭтоЗадачаВзносовИП(КодЗадачи)
		Или ЭтоЗадачаУСН(КодЗадачи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СокращенноеНаименованиеЗадачи(КодЗадачи, КодПравила, ИмяЗадачи, ОписаниеПравила, НачалоПериода, КонецПериода)
	
	Шаблон = НСтр("ru = '%1 за %2'");
	
	// Заменяем слова уплату на оплату.
	Параметр1 = ?(ПустаяСтрока(ОписаниеПравила), ИмяЗадачи, ОписаниеПравила);
	Если СтрНачинаетсяС(Параметр1, "уплата") Тогда
		Параметр1 = "О" + Прав(Параметр1, СтрДлина(Параметр1) - 1);
	КонецЕсли;
	
	Если КодПравила = "2013_ОтчетностьФСС" 
		Или КодПравила = "2014_ОтчетностьФССЭлектронная" 
		Или КодПравила = "2014_ОтчетностьФССБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ФСС'");
		
	ИначеЕсли КодПравила = "2013_ОтчетностьПФР"
		Или КодПравила = " 2014_ОтчетностьПФРЭлектронная"
		Или КодПравила = "2014_ОтчетностьПФРБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ПФР'");
		
	КонецЕсли;
	
	Если ЭтоЗадачаНДФЛПоУплате(КодЗадачи) Тогда
		Параметр1 = Нстр("ru = 'НДФЛ'");
	КонецЕсли;
	
	Параметр2 = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
	Результат = СтрШаблон(Шаблон, Параметр1, Параметр2);
	Результат = ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНалоговыйПоказатель(ВидДействия)
	
	Если ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		Или ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоддерживаемыеСчетаУчетаЗадач(Период)
	
	СоответствиеВидовНалоговЗадач = РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтера();
	ДополнитьСоответствиеВидовНалоговЗадачДляАУСН(СоответствиеВидовНалоговЗадач);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствиеВидовНалоговЗадач", СоответствиеВидовНалоговЗадач);
	Запрос.УстановитьПараметр("ПоддерживаемыеНалоги", ПоддерживаемыеВидыНалогов(Период));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыНалогов.КодЗадачи
	|ПОМЕСТИТЬ ВидыНалогов
	|ИЗ
	|	&СоответствиеВидовНалоговЗадач КАК ВидыНалогов
	|ГДЕ
	|	ВидыНалогов.ВидНалога В(&ПоддерживаемыеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНалоговИПлатежейВБюджет.СчетУчета КАК СчетУчета,
	|	ВидыНалогов.КодЗадачи КАК КодЗадачи,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога
	|ИЗ
	|	ВидыНалогов КАК ВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО ВидыНалогов.ВидНалога = ВидыНалоговИПлатежейВБюджет.ВидНалога";
	
	ПоддерживаемыеЗадачи = Запрос.Выполнить().Выгрузить();
	ПоддерживаемыеЗадачи.Индексы.Добавить("КодЗадачи");
	
	ЗадачиСтраховыхВзносов = ПоддерживаемыеЗадачи.НайтиСтроки(Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы()));
	Для Каждого Задача Из ЗадачиСтраховыхВзносов Цикл
		Если Задача.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ Тогда
			Задача.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыТравматизм();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоддерживаемыеЗадачи;
	
КонецФункции

Функция ПоддерживаемыеВидыНалогов(Период)
	
	ПростойУчетЕНС = Период >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ПоддерживаемыеНалоги = Новый Массив();
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_Доходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_МинимальныйНалог);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.АУСН);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЕНВД);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносыЕдиныйТариф);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры);
	
	Если ПростойУчетЕНС Тогда
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_Дивиденды);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_Дивиденды_ДоходыСвышеПредельнойВеличины);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаИмущество);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаИмуществоЕСГС);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаПрибыль_НалоговыйАгент);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДС);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДС_ВвозимыеТовары);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ТранспортныйНалог);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ВнутригородскойОкруг);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскоеПоселение);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкруг);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородФедеральногоЗначения);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_МежселеннаяТерритория);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_МуниципальныйОкруг);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_СельскоеПоселение);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП);
		ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
	КонецЕсли;
	
	Возврат ПоддерживаемыеНалоги;
	
КонецФункции

// Исключаемые правила в рамках поддерживаемых задач, которые вообще не должны показываться в мониторе.
// Например это те, которые не требуется законом выполнять регулярно.
Функция ИсключаемыеПравила(ЭлектронныйДокументооборотДоступен, ДеятельностьОтсутствует)
	ИсключаемыеПравила = Новый ТаблицаЗначений;
	ИсключаемыеПравила.Колонки.Добавить("КодЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ИсключаемыеПравила.Колонки.Добавить("КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2013_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "СтраховыеВзносы";
	Правило.КодПравила = "2013_Уплата_Допвзносы_Накопительная_ПФР";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Если ДеятельностьОтсутствует Тогда
		Если ЭлектронныйДокументооборотДоступен Тогда
			Правило = ИсключаемыеПравила.Добавить();
			Правило.КодЗадачи  = "СтраховыеВзносы";
			Правило.КодПравила = "2017_ОтчетностьФССБумажная";
		Иначе
			Правило = ИсключаемыеПравила.Добавить();
			Правило.КодЗадачи  = "СтраховыеВзносы";
			Правило.КодПравила = "2017_ОтчетностьФССЭлектронная";
		КонецЕсли;
	КонецЕсли;
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "ОплатаУставногоКапитала";
	Правило.КодПравила = "2014_ОплатаУставногоКапитала";
	
	
	ДобавляемыеПравила = Новый Массив;
	ДобавляемыеПравила.Добавить(КодПравилаЗаявлениеЗачетВзносов());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсключаемыеПравила.КодЗадачи КАК КодЗадачи,
	|	ИсключаемыеПравила.КодПравила КАК КодПравила
	|ПОМЕСТИТЬ КритерииПоиска
	|ИЗ
	|	&ИсключаемыеПравила КАК ИсключаемыеПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КритерииПоиска КАК КритерииПоиска
	|		ПО ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = КритерииПоиска.КодЗадачи
	|			И ПравилаПредставленияОтчетовУплатыНалогов.Код = КритерииПоиска.КодПравила
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Код В (&ДобавляемыеПравила)");
	
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила);
	Запрос.УстановитьПараметр("ДобавляемыеПравила", ДобавляемыеПравила);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИсключаемыеЗадачи(ДеятельностьОтсутствует = Ложь)
	
	ЗадачиИсключения = Новый Массив;
	
	Если ДеятельностьОтсутствует Тогда
		ЗадачиИсключения.Добавить(Справочники.ЗадачиБухгалтера.НайтиПоКоду(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика()));
	КонецЕсли;
	
	// НДФЛ рассчитывается отдельно
	ЗадачиИсключения.Добавить(Справочники.ЗадачиБухгалтера.НайтиПоКоду(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате()));
	
	Возврат ЗадачиИсключения;
	
КонецФункции

Функция ПравилаРазовыхЗадач()

	// Правила предоставления отчетов и уплаты налогов, являющихся разовыми событиями.
	// Задачи по ним могут быть в прошлых периодах, но если они не выполнены, то про них надо сообщать.
	Результат = Новый Массив(1);
	
	// Отчет о среднесписочной численности при создании новой организации,
	// предоставляется один раз до 20 числа месяца, следующего за месяцем регистрации.
	Результат[0] = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
		ЗадачиБухгалтераКлиентСервер.КодЗадачиСреднесписочнаяЧисленность(), "2016_РегистрацияОрганизации");
	
	Возврат Результат;

КонецФункции

Процедура НазначитьБлижайшуюЗадачуРазовойЗадаче(СтрокаИндикатора, КритичныеИндикаторы)
	
	БлижайшаяЗадача       = Неопределено;
	НачалоБлижайшейЗадачи = Дата(3999, 1, 1);
	
	Для Каждого СтрокаТаблицыЗначений Из КритичныеИндикаторы Цикл
		Если СтрокаТаблицыЗначений.Правило = СтрокаИндикатора.Правило Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицыЗначений.ПериодСобытия <= НачалоБлижайшейЗадачи Тогда
			НачалоБлижайшейЗадачи = СтрокаТаблицыЗначений.ПериодСобытия;
			БлижайшаяЗадача       = СтрокаТаблицыЗначений;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БлижайшаяЗадача) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаИндикатора.БудущаяЗадача, БлижайшаяЗадача.БудущаяЗадача);
		ЗаполнитьЗначенияСвойств(СтрокаИндикатора.БудущаяЗадача, БлижайшаяЗадача);
		СтрокаИндикатора.БудущаяЗадача.НачалоВыполнения = НачалоДня(СтрокаИндикатора.БудущаяЗадача.ПериодСобытия + 86400);
		СтрокаИндикатора.НачалоБлижайшейЗадачи          = НачалоДня(СтрокаИндикатора.ПериодСобытия + 86400);
	КонецЕсли;

КонецПроцедуры

// Дополняет таблицу соответствия видов налогов и задач недостающими задачами АУСН.
// Используется при определении поддерживаемых счетов учета задач.
//
// Параметры:
//   СоответствиеВидовНалоговЗадач - ТаблицаЗначений - см. РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтера
//
Процедура ДополнитьСоответствиеВидовНалоговЗадачДляАУСН(СоответствиеВидовНалоговЗадач)
	
	КодЗадачиСтраховыеВзносыАУСН = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыАУСН();
	
	ОтборПоКодуЗадачи = Новый Структура("КодЗадачи", КодЗадачиСтраховыеВзносыАУСН);
	НайденныеСтроки = СоответствиеВидовНалоговЗадач.НайтиСтроки(ОтборПоКодуЗадачи);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = СоответствиеВидовНалоговЗадач.Добавить();
		НоваяСтрока.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
		НоваяСтрока.КодЗадачи = КодЗадачиСтраховыеВзносыАУСН;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйЕдиныйНалоговыйСчет()
	
	ЕНС = Новый Структура("ОстатокЕНС, РассчитаноНалогов, СуммаПлатежи, НужноОплатить, ПлатежиЕНС, ВходящийОстатокЕНС");
	ЕНС.ОстатокЕНС = 0;
	ЕНС.РассчитаноНалогов = 0;
	ЕНС.СуммаПлатежи = 0;
	ЕНС.НужноОплатить = 0;
	ЕНС.ВходящийОстатокЕНС = 0;
	
	Платежи = Новый ТаблицаЗначений;
	Платежи.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	Платежи.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Платежи.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Платежи.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Платежи.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Платежи.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	Платежи.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Платежи.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Платежи.Колонки.Добавить("ПоказательПериода", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Платежи.Колонки.Добавить("ПредставлениеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ЕНС.ПлатежиЕНС = Платежи;
	
	Возврат ЕНС;
	
КонецФункции  

// Заполняет все задачи в разрезе правил по налогам и отчетам, которые организация по закону должна выполнить, начиная с сегодняшнего дня. 
// Результат функции передается далее конкретным алгоритмам, которые решают, исходя из конкретной учетной политики и конкретных данных базы, 
// должна ли это задача действительно выполнятся и какой у нее должен статус (красный, желтый, зеленый, серый).
//
Функция СформироватьТекущиеПредстоящиеЗадачиПоРегистру(Организация, ТекущийДень, ДеятельностьОтсутствует)
	
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, , Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДень",                 НачалоДня(ТекущийДень));
	Запрос.УстановитьПараметр("ИсключаемыеПравила",          ИсключаемыеПравила(ЭлектронныйДокументооборотДоступен, ДеятельностьОтсутствует));
	Запрос.УстановитьПараметр("ИсключаемыеЗадачи",           ИсключаемыеЗадачи(ДеятельностьОтсутствует));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("ПравилаРазовыхЗадач",         ПравилаРазовыхЗадач());
	Запрос.УстановитьПараметр("УсловиеПервыйПериодКампании", Истина);
	Запрос.УстановитьПараметр("ПравилаУплатаАвансаПоПрибылиЗаМесяц", ПравилаНалогаНаПрибыльАвансМесяц());
	Если ДеятельностьОтсутствует Тогда
		Запрос.УстановитьПараметр("ПервыйПериодКампании", РегистрыСведений.ПерваяОтчетнаяКампания.ПервыйПериодКампании(Организация));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникПравила.Ссылка КАК Правило
	|ПОМЕСТИТЬ ВТИсключаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Ссылка В(&ИсключаемыеПравила)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СправочникПравила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Владелец В(&ИсключаемыеЗадачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗадачиБухгалтера.Правило) = ТИП(Справочник.Патенты)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЗадачиБухгалтера.Срок, ДЕНЬ, -14)
	|		ИНАЧЕ ЗадачиБухгалтера.НачалоВыполнения
	|	КОНЕЦ КАК НачалоВыполнения
	|ПОМЕСТИТЬ РасписаниеЗаПериод
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеЗаПериод.Срок КАК Срок,
	|	РасписаниеЗаПериод.Правило КАК Правило,
	|	РасписаниеЗаПериод.Наименование КАК Наименование,
	|	РасписаниеЗаПериод.ПериодСобытия КАК ПериодСобытия,
	|	РасписаниеЗаПериод.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеПравила КАК ВТИсключаемыеПравила
	|		ПО РасписаниеЗаПериод.Правило = ВТИсключаемыеПравила.Правило
	|ГДЕ
	|	ВТИсключаемыеПравила.Правило ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИсключаемыеПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасписаниеЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.Срок КАК Срок,
	|	ВТРасписание.Правило КАК Правило,
	|	ВТРасписание.Наименование КАК Наименование,
	|	ВТРасписание.ПериодСобытия КАК ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ТекущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|	И ВТРасписание.Срок >= &ТекущийДень
	|	И &УсловиеПервыйПериодКампании
	|	И НЕ ВТРасписание.Правило В (&ПравилаУплатаАвансаПоПрибылиЗаМесяц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРасписание.Срок,
	|	ВТРасписание.Правило,
	|	ВТРасписание.Наименование,
	|	ВТРасписание.ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|	И ВТРасписание.ПериодСобытия = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&ТекущийДень, МЕСЯЦ), ДЕНЬ)
	|	И &УсловиеПервыйПериодКампании
	|	И ВТРасписание.Правило В(&ПравилаУплатаАвансаПоПрибылиЗаМесяц)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТРасписание.Срок) КАК Срок,
	|	ВТРасписание.Правило КАК Правило
	|ПОМЕСТИТЬ БудущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения > &ТекущийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписание.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныйСписокТекущийБудущихПравил.Правило КАК Правило,
	|	МИНИМУМ(ПолныйСписокТекущийБудущихПравил.БудЗадачаСрок) КАК БудЗадачаСрок,
	|	МАКСИМУМ(ПолныйСписокТекущийБудущихПравил.ТекЗадачаСрок) КАК ТекЗадачаСрок
	|ПОМЕСТИТЬ ТекущиеБудущиеПравила
	|ИЗ
	|	(ВЫБРАТЬ
	|		БудущиеЗадачи.Правило КАК Правило,
	|		БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ТекЗадачаСрок
	|	ИЗ
	|		БудущиеЗадачи КАК БудущиеЗадачи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗадачи.Правило,
	|		ДАТАВРЕМЯ(2999, 12, 31),
	|		ТекущиеЗадачи.Срок
	|	ИЗ
	|		ТекущиеЗадачи КАК ТекущиеЗадачи) КАК ПолныйСписокТекущийБудущихПравил
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолныйСписокТекущийБудущихПравил.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ БудущиеЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеБудущиеПравила.Правило КАК Правило,
	|	ТекущиеЗадачи.Срок КАК ТекЗадачаСрок,
	|	ТекущиеЗадачи.Наименование КАК ТекЗадачаНаименование,
	|	ТекущиеЗадачи.ПериодСобытия КАК ТекЗадачаПериодСобытия,
	|	ТекущиеЗадачи.НачалоВыполнения КАК ТекЗадачаНачалоВыполнения,
	|	БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|	БудущиеЗадачи.Наименование КАК БудЗадачаНаименование,
	|	БудущиеЗадачи.ПериодСобытия КАК БудЗадачаПериодСобытия,
	|	БудущиеЗадачи.НачалоВыполнения КАК БудЗадачаНачалоВыполнения,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТекущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТекущаяЗадача,
	|	ВЫБОР
	|		КОГДА БудущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьБудущаяЗадача,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК КодПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК КодЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Наименование КАК ИмяЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Описание КАК Описание,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК Порядок,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность КАК Периодичность
	|ИЗ
	|	ТекущиеБудущиеПравила КАК ТекущиеБудущиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = ТекущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.ТекЗадачаСрок = ТекущиеЗадачи.Срок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписание КАК БудущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = БудущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.БудЗадачаСрок = БудущиеЗадачи.Срок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ТекущиеБудущиеПравила.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|			И (НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА)
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеБудущиеПравила.Правило,
	|	ТекущиеЗадачи.Срок,
	|	ТекущиеЗадачи.Наименование,
	|	ТекущиеЗадачи.ПериодСобытия,
	|	ТекущиеЗадачи.НачалоВыполнения,
	|	БудущиеЗадачи.Срок,
	|	БудущиеЗадачи.Наименование,
	|	БудущиеЗадачи.ПериодСобытия,
	|	БудущиеЗадачи.НачалоВыполнения,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога),
	|	ВЫБОР
	|		КОГДА ТекущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БудущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Патенты.Владелец,
	|	Патенты.Код,
	|	""Патент"",
	|	Патенты.Наименование,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ТекущиеБудущиеПравила КАК ТекущиеБудущиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = ТекущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.ТекЗадачаСрок = ТекущиеЗадачи.Срок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписание КАК БудущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = БудущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.БудЗадачаСрок = БудущиеЗадачи.Срок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ТекущиеБудущиеПравила.Правило = Патенты.Ссылка
	|			И (НЕ Патенты.ПометкаУдаления)";
	
	Если ДеятельностьОтсутствует Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПервыйПериодКампании", "ВТРасписание.Срок >= &ПервыйПериодКампании");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗадачиПоНалогам = НовыйЗадачиОрганизации();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не (Выборка.ЕстьТекущаяЗадача Или Выборка.ЕстьБудущаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоНалог = ЭтоНалоговыйПоказатель(Выборка.Действие);
		
		Если ЭтоНалог Тогда
			НоваяСтрока = ЗадачиПоНалогам.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.КодПравила = КодПравилаУплатаТравматизм() Тогда
			НоваяСтрока.КодЗадачи = КодСтрокиМонитораСтраховыеВзносыТравматизм();
		КонецЕсли;
		
		Если Выборка.ЕстьТекущаяЗадача Тогда
			
			НоваяСтрока.ЭтоТекущаяЗадача = Истина;
			НоваяСтрока.Срок             = Выборка.ТекЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.ТекЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.ТекЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.ТекЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи,
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия,
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.ТекЗадачаНаименование;
			
		Иначе
			
			НоваяСтрока.ЭтоТекущаяЗадача = Ложь;
			НоваяСтрока.Срок             = Выборка.БудЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи, 
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия, 
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.БудЗадачаНаименование;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗадачиПоНалогам.Сортировать("Срок");
	
	Возврат Новый Структура("ЗадачиПоНалогам", ЗадачиПоНалогам);
	
КонецФункции

#КонецОбласти

#Область АлгоритмДляНенастроенныхНалоговИОтчетов

Процедура ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиПоНалогам, ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД)
	
	ОбработанныеЗадачи = Новый Массив;
	
	Для Каждого Задача Из ЗадачиПоНалогам Цикл
	
		Если (ЭтоЗадачаЕНВД(Задача.КодЗадачи) И ОтсутствуютВидыДеятельностиЕНВД)
			Или (ЭтоЗадачаПатент(Задача.КодЗадачи) И ОтсутствуютПатенты) Тогда
			
			НоваяСтрока = НалоговыеИндикаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
			
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Серый;
			
			ОбработанныеЗадачи.Добавить(Задача);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиТаблицы(ЗадачиПоНалогам, ОбработанныеЗадачи); // Чтобы данные задачи не анализировались другими алгоритмами.
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиПоОтчетам)
	
	ОбработанныеЗадачи = Новый Массив;
	
	Для Каждого Задача Из ЗадачиПоОтчетам Цикл
	
		Если ЭтоЗадачаПроверкиСтатистики(Задача.КодЗадачи, Задача.КодПравила) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика());
			
			ОтсутствуютЗадачиПоСтатистике = ЗадачиПоОтчетам.НайтиСтроки(Отбор).Количество() = 1;
				
			Если ОтсутствуютЗадачиПоСтатистике Тогда
				НоваяСтрока = ОтчетныеИндикаторы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
				НоваяСтрока.Индикатор = ЦветаИндикаторов().Серый;
			КонецЕсли;
			
			ОбработанныеЗадачи.Добавить(Задача);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиТаблицы(ЗадачиПоОтчетам, ОбработанныеЗадачи); // Чтобы данные задачи не анализировались другими алгоритмами.
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийАлгоритмПоНалогам

// Алгоритм, анализирует остатки и обороты за отчетные периоды на 68 и 69 счетах регистра бухгалтерии. 
// По результатам анализа формируется индикатор в разрезе каждого счета учета налога.
// Может применятся ко всем налогам, отвечающим следующим предпосылкам:
// - Сначала всегда идет начисление налога с проводкой в кредит 68, потом списание (уплата) с проводкой в дебет 68. 
// - Переплаты налогов в одном периоде засчитываются автоматически в следующем периоде.
// - Периоды оплат в рамках одного налога не пересекаются.
// - Сначала погашается текущий платеж, затем задолженность.
//
Процедура ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	ПростойУчетЕНС = ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	ОбрабатываемыеЗадачи = НовыйЗадачиОрганизации();
	ОбрабатываемыеЗадачи.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	Для Каждого Задача Из ЗадачиПоНалогам Цикл
		
		Если ПростойУчетЕНС Тогда
			ПропуститьЗадачу = ЭтоЗадачаАУСН(Задача.КодЗадачи)
				Или ЭтоЗадачаНалогНаПрофессиональныйДоход(Задача.КодЗадачи)
				Или ЭтоЗадачаПатент(Задача.КодЗадачи);
		Иначе
			ПропуститьЗадачу = Не ИспользуетсяОбщийАлгоритм(Задача.КодЗадачи)
		КонецЕсли;
		Если ПропуститьЗадачу Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбрабатываемыеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.СчетаУчета = ПодобратьСчетаУчетаПоЗадаче(Задача, ТаблицаСоСчетамиУчета);
		
	КонецЦикла;
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗадачи.Сортировать("Владелец,Срок,НачалоПериодаСобытия,ПериодСобытия", Новый СравнениеЗначений());
	
	// 2. Динамически создаем текст запроса к бухгалтерским остаткам и оборотам по отчетным периодам таблицы задач.
	ОтчетныеПериоды = ОбрабатываемыеЗадачи.СкопироватьКолонки();
	Для Каждого Задача ИЗ ОбрабатываемыеЗадачи Цикл;
		
		Если Не ДопускаетсяНесколькоЗадач(Задача.КодЗадачи)
			И ОтчетныеПериоды.НайтиСтроки(Новый Структура("Владелец", Задача.Владелец)).Количество() > 0
			И Не ЭтоЗадачаСтраховыхВзносовТравматизм(Задача.КодЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОтчетныеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
	
	КонецЦикла;
	
	СуммыНалогов = ПолучитьСуммыНалогов(ОтчетныеПериоды, Организация, ТекущийДень, СчетаУчетаДС);
	
	РазделитьСуммыУСНПервыйКварталИГод(Организация, СуммыНалогов, ТекущийДень);
	
	// 3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		МассивИндикаторов = Новый Массив;
		КУплатеДолг = 0;
		КУплатеТекущий = 0;
		
		Для Каждого СчетУчета Из Задача.СчетаУчета Цикл
			ПараметрыИндикатора = ПолучитьПараметрыИндикатора(СчетУчета, Задача, СуммыНалогов, ТекущийДень, Организация);
			МассивИндикаторов.Добавить(ПараметрыИндикатора.Индикатор);
			КУплатеДолг = КУплатеДолг + ПараметрыИндикатора.КУплатеДолг;
			КУплатеТекущий = КУплатеТекущий + ПараметрыИндикатора.КУплатеТекущий;
		КонецЦикла;
		
		НоваяСтрока.Индикатор = СамыйКритичныйИндикатор(МассивИндикаторов);
		
		НоваяСтрока.КУплатеДолг = КУплатеДолг;
		НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНалогаУСН(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Получаем остатки расчетов по налогу за периоды задач.
	
	ЗаполнитьСуммыПоОплатеНалогаУСН(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
	
	// 3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		Если (Задача.КУплатеТекущий = 0 И Задача.КУплатеДолг = 0)
			И ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, Задача.КодЗадачи) Тогда
			
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
			НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
		Иначе
			НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалогаУСН(ОбрабатываемыеЗадачи, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Задача по уплате аванса УСН за квартал возникает за несколько недель до начала выполнения.
	// Возникает ситуация, когда аванс уже начислен регламентной операцией в последний день квартала
	// но задача начнет действовать только со следующего дня.
	// Для того чтобы в этот день не возникало задолженности по авансу, срок начала выполнения
	// свдигаем на день назад и делаем задачу текущей уже в последний день квартала.
	ОтборЗадачиАванса = Новый Структура("КодПравила", КодПравилаУплатаАвансаУСН());
	СтрокиЗадачАванса = ОбрабатываемыеЗадачи.НайтиСтроки(ОтборЗадачиАванса);
	Для Каждого СтрокаЗадач Из СтрокиЗадачАванса Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	
	// Расчеты по налогу для текущих задач получаем по данным помощника УСН.
	
	ОтборТекущихЗадач = Новый Структура("ЭтоТекущаяЗадача", Истина);
	СтрокиТекущихЗадач = ОбрабатываемыеЗадачи.НайтиСтроки(ОтборТекущихЗадач);
	
	Для Каждого ТекущаяЗадача Из СтрокиТекущихЗадач Цикл
		
		Период = КонецКвартала(ТекущаяЗадача.ПериодСобытия);
		
		ДанныеРасчетаНалога = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Организация, Период);
		
		ДокументыУплаты = УчетУСН.ДокументыУплатыНалогаЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
		Если ЗначениеЗаполнено(ДокументыУплаты) Тогда
			Оплачено = ДокументыУплаты.Итог("СуммаОплаты");
		Иначе
			Оплачено = 0;
		КонецЕсли;
		
		ТекущаяЗадача.Начислено = ДанныеРасчетаНалога.НалогКУплате;
		ТекущаяЗадача.КУплатеТекущий = Макс(ДанныеРасчетаНалога.НалогКУплате - Оплачено, 0);
		
	КонецЦикла;
	
	// Превышение общего остатка расчетов над налогом для текущих задач является задолженностью за прошлые периоды.
	// Эту задолженность добавляем к самой ближайшей из задач по сроку выполнения.
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	
	ЗадолженностьПоНалогу = - УчетУСН.ОстатокРасчетовПоНалогуУСН(Организация, ТекущийДень);
	ПросроченнаяЗадолженность = Макс(ЗадолженностьПоНалогу - ИтогоТекущийНалог, 0);
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = ПросроченнаяЗадолженность;
	
	// Если нет текущих задач и просроченного долга, нужно проверить начисление налога за ближайший истекший квартал.
	// Если начисленный налог прошлого квартала нулевой, требуется вывести пользователю ссылку на помощник расчета налога
	// за этот квартал.
	
	ПрошлыйКвартал = НачалоКвартала(ТекущаяДатаМонитора()) - 1; // Конец предыдущего квартала.
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	ПрошлыйКварталБольшеГраницыОтчетности = ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
		И ПрошлыйКвартал > ГраницаОтчетностиПрошлыхПериодов;
	
	Если КонецГода(ПрошлыйКвартал) = ПрошлыйКвартал Тогда
		// Для последнего квартала в году используем параметры задачи уплаты налога за год.
		ЗадачаИсточник = ОбрабатываемыеЗадачи.Найти(Перечисления.Периодичность.Год, "Периодичность");
	Иначе
		ЗадачаИсточник = ОбрабатываемыеЗадачи.Найти(Перечисления.Периодичность.Квартал, "Периодичность");
	КонецЕсли;
	
	Если СтрокиТекущихЗадач.Количество() = 0 И ПросроченнаяЗадолженность = 0
		И ЗадачаИсточник <> Неопределено
		И ПрошлыйКварталБольшеГраницыОтчетности
		И УчетнаяПолитика.ПрименяетсяУСН(Организация, ПрошлыйКвартал) Тогда
		
		ДанныеРасчетаНалога = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Организация, ПрошлыйКвартал);
		
		Если ДанныеРасчетаНалога.НалогКУплате = 0 Тогда
			
			// Для того, чтобы отобразить ссылку на помощник за прошлый период при отсутствии долга,
			// добавим текущую задачу с периодом события в прошлом. При нулевых суммах по задаче ее индикатор останется зеленым.
			
			НоваяЗадача = ОбрабатываемыеЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаИсточник);
			
			НоваяЗадача.ЭтоТекущаяЗадача = Истина;
			НоваяЗадача.БудущаяЗадача = НоваяБудущаяЗадача(); // Чтобы не влияло на отображение срока следующего платежа.
			
			НоваяЗадача.ПериодСобытия = ПрошлыйКвартал;
			НоваяЗадача.НачалоПериодаСобытия
				= ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ЗадачаИсточник.Периодичность, ПрошлыйКвартал);
			
			НоваяЗадача.Наименование = ЗаменитьВНаименованииПериод(НоваяЗадача.Наименование,
				НоваяЗадача.НачалоПериодаСобытия, НоваяЗадача.ПериодСобытия);
			НоваяЗадача.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(НоваяЗадача.НаименованиеЗадачи,
				НоваяЗадача.НачалоПериодаСобытия, НоваяЗадача.ПериодСобытия);
			
			// Все суммы в новой задаче будут нулевыми, явное заполнение не требуется.
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазделитьСуммыУСНПервыйКварталИГод(Организация, СуммыНалогов, ТекущийДень)
	
	// Для ИП на УСН срок уплаты за 1 квартал и год одинаковый, поэтому сумма задваивается
	// Необходимо вычислить долю, но в мониторе она отражается общей суммой,
	// поэтому можно просто разделить ее пополам для каждой строки, чтобы выводились две ссылки
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборУСНПервыйКвартал = Новый Структура(
		"СчетУчета, ПериодСобытия",
		ПланыСчетов.Хозрасчетный.ЕНприУСН,
		КонецКвартала(НачалоГода(ТекущийДень)));
	ОтборУСНГод = Новый Структура(
		"СчетУчета, ПериодСобытия",
		ПланыСчетов.Хозрасчетный.ЕНприУСН,
		НачалоГода(ТекущийДень) - 1);
	ОплатаПервыйКвартал = СуммыНалогов.НайтиСтроки(ОтборУСНПервыйКвартал);
	ОплатаГод           = СуммыНалогов.НайтиСтроки(ОтборУСНГод);
	Если ОплатаПервыйКвартал.Количество() > 0
		И ОплатаГод.Количество() > 0
		И ОплатаПервыйКвартал[0].СуммаНачисленоТекущий = ОплатаГод[0].СуммаНачисленоТекущий Тогда
		// Определим суммы исчисленных налогов
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.СуммаОборотДт КАК Сумма,
			|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РегламентнаяОперация).Дата КАК ПериодСобытия
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			НАЧАЛОПЕРИОДА(&Срок, ДЕНЬ),
			|			КОНЕЦПЕРИОДА(&Срок, ДЕНЬ),
			|			Регистратор,
			|			Счет В (&СчетУчета),
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 В (&ВидыНалоговыхПлатежей),
			|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет),
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	(КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РегламентнаяОперация).Дата, ДЕНЬ) = &ПериодСобытияГод
			|			ИЛИ КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РегламентнаяОперация).Дата, ДЕНЬ) = &ПериодСобытияКвартал)";
		
		Запрос.УстановитьПараметр("Срок", ОплатаПервыйКвартал[0].Срок);
		Запрос.УстановитьПараметр("СчетУчета",
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ЕНприУСН));
		Запрос.УстановитьПараметр("ВидыСубконто",
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей",
			Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
		Запрос.УстановитьПараметр("ПериодСобытияГод", КонецДня(ОплатаГод[0].ПериодСобытия));
		Запрос.УстановитьПараметр("ПериодСобытияКвартал", КонецДня(ОплатаПервыйКвартал[0].ПериодСобытия));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		ОплатаПервыйКвартал[0].СуммаНачисленоТекущий = 0;
		ОплатаГод[0].СуммаНачисленоТекущий = 0;
		
		Пока Результат.Следующий() Цикл
			Если Результат.ПериодСобытия = ОплатаГод[0].ПериодСобытия Тогда
				ОплатаГод[0].СуммаНачисленоТекущий = Результат.Сумма;
			Иначе
				ОплатаПервыйКвартал[0].СуммаНачисленоТекущий = Результат.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНалогаАУСН(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	
	// Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиАУСН());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	КоличествоЗадач = ОбрабатываемыеЗадачи.Количество();
	Для НомерСКонца = 1 По КоличествоЗадач Цикл
		Индекс = КоличествоЗадач - НомерСКонца;
		Задача = ОбрабатываемыеЗадачи[Индекс];
		Если Не ВыполнениеЗадачБухгалтера.ПравилоВыполняетсяПомощникомУплатыНалогаАУСН(Задача.Правило) Тогда
			ОбрабатываемыеЗадачи.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяЕНС = УчетнаяПолитика.ПлательщикЕНП(Организация, ТекущийДень);
	ДействияЗадач  = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбрабатываемыеЗадачи.ВыгрузитьКолонку("Правило"),
		"Действие");
		
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		КлючиЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
		ЗаполнитьЗначенияСвойств(КлючиЗадач, Задача);
		КлючиЗадач.Организация = Организация;
		КлючиЗадач.Действие    = ДействияЗадач[Задача.Правило];
		
		Индикатор = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(Индикатор, Задача);
		Индикатор.Индикатор = ЦветаИндикаторов().Желтый;
		
		Если КлючиЗадач.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			
			//  - задача по проверке банковских операций выполняется автоматически после окончания периода
			
			Если ЗадачаВыполнена(Организация, Задача.Правило, Задача.ПериодСобытия) Тогда
				Индикатор.Индикатор = ЦветаИндикаторов().Зеленый;
			КонецЕсли;
			
		Иначе
			
			КонтекстСведений = Обработки.ПомощникУплатыНалогаАУСН.НовыйСведенияОНачисленномНалогеЗаПериод();
			КонтекстСведений.Правило     = КлючиЗадач.Правило;
			КонтекстСведений.Организация = КлючиЗадач.Организация;
			КонтекстСведений.Период      = КлючиЗадач.ПериодСобытия;
			
			СостояниеЗадачи = Обработки.ПомощникУплатыНалогаАУСН.СостояниеЗадачиУплаты(КонтекстСведений, ТекущийДень);
			
			ПроверитьОплату = Ложь;
			// Сначала определим статус задачи в отсутствие сведений об оплате (желтый или красный),
			// а далее учтем фактическую оплату - либо сразу здесь, либо в ПрименитьАлгоритмДляАвансаПоЕНП
			// (статус может стать зеленым).
			
			Если ЗначениеЗаполнено(СостояниеЗадачи.Ошибки) Тогда
				
				Индикатор.Наименование = НСтр("ru = 'Не удалось получить данные сервиса АУСН'");
				
			ИначеЕсли СостояниеЗадачи.ЕстьЗадолженностьПрошлыхПериодов Тогда
				
				// Этот красный индикатор отражаем независимо от сведений подсистемы ЕНС:
				// ожидается, что по мере пополнения ЕНС получим от ФНС актуальные сведения,
				// из которых будет видно, что задолженности нет.
				Индикатор.Индикатор = ЦветаИндикаторов().Красный;
				
			ИначеЕсли СостояниеЗадачи.РасчетФНС = "Ожидается" Тогда
				
				Индикатор.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'ФНС рассчитает налог не позднее %1'"),
					Формат(СостояниеЗадачи.ДатаРасчета, "ДЛФ=DD"));
				
			ИначеЕсли СостояниеЗадачи.РасчетФНС = "Просрочен" Тогда
				
				Индикатор.Наименование = НСтр("ru = 'Данные ФНС не поступили'");
				
			Иначе
				
				ПроверитьОплату = Истина;
				
				Если СостояниеЗадачи.ЕстьТекущееНачисление И Задача.Срок < ТекущийДень Тогда
					Индикатор.Индикатор = ЦветаИндикаторов().Красный;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПроверитьОплату Тогда
				
				Если ПрименяетсяЕНС Тогда
					Индикатор.НалогЕНС  = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.АУСН);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Индикатор.НалогЕНС)
					И ЗадачаВыполнена(Организация, Задача.Правило, Задача.ПериодСобытия) Тогда 
					//  - задача по оплате налога завершается автоматически после загрузки банковских операций
					Индикатор.Индикатор = ЦветаИндикаторов().Зеленый;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадачаВыполнена(Организация, Правило, ПериодСобытия)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Статус
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило
	|	И НАЧАЛОПЕРИОДА(ЗадачиБухгалтера.ПериодСобытия, ДЕНЬ) = &ПериодСобытия
	|	И ЗадачиБухгалтера.Статус = &Статус");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("ПериодСобытия", НачалоДня(ПериодСобытия));
	Запрос.УстановитьПараметр("Статус", "Оплачено");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область НДФЛПредпринимателя

Процедура ПрименитьАлгоритмДляНДФЛ_ИП(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Получаем остатки расчетов по налогу за периоды задач.
	ОстатокРасчетовПоНалогу = УчетНДФЛПредпринимателя.ОстатокРасчетовПоНДФЛ(Организация, КонецДня(ТекущийДень));
	ЗаполнитьСуммыПоОплатеНДФЛ_ИП(ОбрабатываемыеЗадачи, ОстатокРасчетовПоНалогу, Организация, ТекущийДень);
	
	// 3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		Если (Задача.КУплатеТекущий = 0 И Задача.КУплатеДолг = 0)
			И ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, Задача.КодЗадачи) Тогда
			Новаястрока.Индикатор = ЦветаИндикаторов().Желтый;
			НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
		ИначеЕсли Задача.Периодичность = Перечисления.Периодичность.Год И Задача.КУплатеДолг > 0
			И Задача.НачалоПериодаСобытия < УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Тогда
			// До 01.01.2020 г. задолженность показываем в помощнике за прошлые периоды
			НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
			НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
		Иначе
			НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНДФЛ_ИП(ОбрабатываемыеЗадачи, ОстатокРасчетовПоНалогу, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Если ОстатокРасчетовПоНалогу >= 0 Тогда
		// Налог оплачен полностью, все суммы для индикаторов нулевые.
		Возврат;
	КонецЕсли;
	
	ЗадолженностьПоНалогу = - ОстатокРасчетовПоНалогу;
	
	// Расчеты по налогу для текущих задач получаем по данным помощника НДФЛ.
	ОтборТекущихЗадач = Новый Структура("ЭтоТекущаяЗадача", Истина);
	СтрокиТекущихЗадач = ОбрабатываемыеЗадачи.НайтиСтроки(ОтборТекущихЗадач);
	
	Для Каждого ТекущаяЗадача Из СтрокиТекущихЗадач Цикл
		Период = КонецКвартала(ТекущаяЗадача.ПериодСобытия);
		ДанныеРасчетаНалога = Обработки.ПомощникЗаполнения3НДФЛ.НачальныеПоказатели(Организация, Период);
		
		ДокументыУплаты = УчетНДФЛПредпринимателя.УплаченныйНалогЗаПериодПоДокументам(
			Организация, НачалоКвартала(Период), КонецКвартала(Период));
		
		Если ЗначениеЗаполнено(ДокументыУплаты) Тогда
			Оплачено = ДокументыУплаты.Итог("СуммаОплаты");
		Иначе
			Оплачено = 0;
		КонецЕсли;
		СуммаКУплате = Макс(ДанныеРасчетаНалога.НалогКУплате - Оплачено, 0);
		
		ТекущаяЗадача.КУплатеТекущий = СуммаКУплате;
	КонецЦикла;
	
	// Превышение общего остатка расчетов над налогом для текущих задач является задолженностью за прошлые периоды.
	// Эту задолженность добавляем к самой ближайшей из задач по сроку выполнения.
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	ПросроченнаяЗадолженность = Макс(ЗадолженностьПоНалогу - ИтогоТекущийНалог, 0);
	
	// Вся задолженность за прошлые периоды до 01.01.2020 в 1 квартале 2020 г. открывается в отдельном помощнике оплаты за прошлые годы.
	// В остальных случаях следует открывать помощник расчета авансовых платежей.
	ДатаНачалаРасчетаАвансов = УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	СтрокиОтбора = ОбрабатываемыеЗадачи.НайтиСтроки(Отбор);
	
	Если СтрокиОтбора.Количество() > 0
		И СтрокиОтбора[0].НачалоПериодаСобытия >= ДатаНачалаРасчетаАвансов
		И КонецКвартала(ТекущийДень) > КонецКвартала(ДатаНачалаРасчетаАвансов) Тогда
		
		ДанныеИндикатора = СтрокиОтбора[0];
	Иначе
		ДанныеИндикатора = ОбрабатываемыеЗадачи[0];
	КонецЕсли;
	
	ДанныеИндикатора.КУплатеДолг = ПросроченнаяЗадолженность;
	
КонецПроцедуры

#КонецОбласти

Функция ИспользуетсяОбщийАлгоритм(КодЗадачи)
	
	Если ЭтоЗадачаЕНВД(КодЗадачи)
		Или ЭтоЗадачаТорговыйСбор(КодЗадачи)
		Или ЭтоЗадачаСтраховыхВзносов(КодЗадачи)
		Или ЭтоЗадачаСтраховыхВзносовАУСН(КодЗадачи)
		Или ЭтоЗадачаСтраховыхВзносовТравматизм(КодЗадачи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик)
	
	Результат = Новый Структура;
	
	ПараметрыГруппировки = СтрРазделить(ПоказателиГруппировки, ",");
	
	Для каждого ИмяПараметра Из ПараметрыГруппировки Цикл
		Результат.Вставить(ИмяПараметра, ИмяПараметра + Счетчик);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонЗапросаОстатковОборотов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвернутыеОстаткиОбороты.СчетУчета КАК СчетУчета,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачислено) КАК СуммаНачислено,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаУплачено) КАК СуммаУплачено,
	|	СвернутыеОстаткиОбороты.ПериодСобытия КАК ПериодСобытия,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия КАК НачалоПериодаСобытия,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачисленоТекущий) КАК СуммаНачисленоТекущий,
	|	СвернутыеОстаткиОбороты.Срок КАК Срок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|		0 КАК СуммаНачислено,
	|		0 КАК СуммаНачисленоТекущий,
	|		0 КАК СуммаУплачено,
	|		&ПериодСобытия КАК ПериодСобытия,
	|		&НачалоПериодаСобытия КАК НачалоПериодаСобытия,
	|		NULL КАК Срок
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				НЕ &ЗадачаОплатыСЕНС
	|					И Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период >= &НачалоПериодаСобытия
	|					И ХозрасчетныйОбороты.Период <= &ПериодСобытия
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия,
	|		NULL
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериодаСобытия,
	|				,
	|				Месяц,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				НЕ &ЗадачаОплатыСЕНС
	|					И Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		0,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия,
	|		NULL
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоВыполнения,
	|				,
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				НЕ &ЗадачаОплатыСЕНС
	|					И Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				КорСчет В (&СчетаДС),
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СчетУчета,
	|		0,
	|		0,
	|		0,
	|		РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
	|				&НачалоВыполнения,
	|				,
	|				,
	|				&ЗадачаОплатыСЕНС
	|					И НЕ &ПростойУчетЕНС
	|					И СчетУчета В (&СчетаУчета)
	|					И Организация В (&Организация)
	|					И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|		-РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток,
	|		0,
	|		0,
	|		0,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|				,
	|				&ЗадачаОплатыСЕНС
	|					И НЕ &ПростойУчетЕНС
	|					И СчетУчета В (&СчетаУчета)
	|					И Организация В (&Организация)
	|					И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт,
	|		0,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия,
	|		&Срок
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоСрока,
	|				&КонецСрока,
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				&ЗадачаОплатыСЕНС
	|					И &ПростойУчетЕНС
	|					И Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет),
	|				) КАК ХозрасчетныйОбороты) КАК СвернутыеОстаткиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СвернутыеОстаткиОбороты.СчетУчета,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия,
	|	СвернутыеОстаткиОбороты.ПериодСобытия,
	|	СвернутыеОстаткиОбороты.Срок";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИндикатор(ЭтоТекущаяЗадача, КУплатеДолг, КУплатеТекущий)
	
	Если Не ЭтоТекущаяЗадача Тогда 
		Индикатор = ?(КУплатеДолг = 0, ЦветаИндикаторов().Зеленый, ЦветаИндикаторов().Красный);
	ИначеЕсли КУплатеТекущий = 0 И КУплатеДолг = 0 Тогда
		Индикатор = ЦветаИндикаторов().Зеленый;
	ИначеЕсли КУплатеДолг = 0 И КУплатеТекущий > 0 Тогда
		Индикатор = ЦветаИндикаторов().Желтый;
	Иначе
		Индикатор = ЦветаИндикаторов().Красный;
	КонецЕсли;
	
	Возврат Индикатор;
	
КонецФункции

Функция ПодобратьСчетаУчетаПоЗадаче(Задача, ТаблицаСоСчетамиУчета)
	КодЗадачи = Задача.КодЗадачи;
	СтрокиСчетовПоЗадаче = ТаблицаСоСчетамиУчета.НайтиСтроки(Новый Структура("КодЗадачи", КодЗадачи));
	
	Если Задача.КодПравила = КодПравилаУплатаСтраховыеВзносы()
		Или Задача.КодПравила = КодПравилаУплатаСтраховыеВзносыЕдиныйПомощник() Тогда
		ИндексТравматизм = ИндексСтрокиСчетовТравматизм(СтрокиСчетовПоЗадаче);
		Если ЗначениеЗаполнено(ИндексТравматизм) Тогда
			СтрокиСчетовПоЗадаче.Удалить(ИндексТравматизм);
		КонецЕсли;
	ИначеЕсли Задача.КодПравила = КодПравилаУплатаТравматизм() Тогда
		ИндексТравматизм = ИндексСтрокиСчетовТравматизм(СтрокиСчетовПоЗадаче);
		Если ЗначениеЗаполнено(ИндексТравматизм) Тогда
			СтрокаТравматизм = СтрокиСчетовПоЗадаче[ИндексТравматизм];
			СтрокиСчетовПоЗадаче.Очистить();
			СтрокиСчетовПоЗадаче.Добавить(СтрокаТравматизм);
		КонецЕсли;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиСчетовПоЗадаче, "СчетУчета", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ИндексСтрокиСчетовТравматизм(СтрокиСчетовПоЗадаче)
	Для Индекс = 0 По СтрокиСчетовПоЗадаче.Количество() - 1 Цикл
		Если СтрокиСчетовПоЗадаче[Индекс].СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ Тогда
			Возврат Индекс;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ТекстОбъединениеЗапросов()
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
КонецФункции

Функция ПолучитьСуммыНалогов(ОбрабатываемыеЗадачи, Организация, ТекущийДень, СчетаУчетаДС, ВыполнитьЗапрос = Истина)
	
	ПростойУчетЕНС = ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ПоказателиГруппировки = "ПериодСобытия,НачалоПериодаСобытия,НачалоВыполнения,Срок";
	
	ЗадачиПоПериодам = ОбрабатываемыеЗадачи.Скопировать(, ПоказателиГруппировки);
	ЗадачиПоПериодам.Свернуть(ПоказателиГруппировки);
	ЗадачиПоПериодам.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	ЗадачиПоПериодам.Колонки.Добавить("ЗадачаОплатыСЕНС", Новый ОписаниеТипов("Булево"));
	
	Отбор = Новый Структура(ПоказателиГруппировки);
	Для Каждого СтрокаТаблицы Из ЗадачиПоПериодам Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеЗадачи = ОбрабатываемыеЗадачи.НайтиСтроки(Отбор);
		Для Каждого Задача Из НайденныеЗадачи Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаТаблицы.СчетаУчета, Задача.СчетаУчета, Истина);
			Если ПростойУчетЕНС Тогда
				СтрокаТаблицы.ЗадачаОплатыСЕНС = ЗадачаОплатыСЕНС(Задача.КодЗадачи);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетаДС",               СчетаУчетаДС);
	Запрос.УстановитьПараметр("ВидыСубконто",          ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ПростойУчетЕНС",        ПростойУчетЕНС);
	
	ОбщийТекст = Новый Массив;
	Счетчик = 0;
	ПоказателиПростойУчетЕНС = "ЗадачаОплатыСЕНС,НачалоСрока,КонецСрока";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Для каждого Задача Из ЗадачиПоПериодам Цикл
		
		ДинамическиеПараметры = ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик);
		ДинамическиеПараметрыПростойУчетЕНС = ДинамическиеПараметрыЗапроса(ПоказателиПростойУчетЕНС, Счетчик);
		
		ТекстЗапроса = ШаблонЗапросаОстатковОборотов();
		
		Если Задача.НачалоВыполнения > ТекущийДень Тогда
			// Для оптимизации удалим третий запрос в объединении на получение сумм оплат по задачам, т.к. срок оплаты ещё не наступил.
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(2);
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		КонецЕсли;
		
		Для каждого ПараметрЗапроса Из ДинамическиеПараметры Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ПараметрЗапроса.Ключ, "&" + ПараметрЗапроса.Значение);
			Запрос.УстановитьПараметр(ПараметрЗапроса.Значение, Задача[ПараметрЗапроса.Ключ]); 
		КонецЦикла;
		Для каждого ПараметрЗапроса Из ДинамическиеПараметрыПростойУчетЕНС Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ПараметрЗапроса.Ключ, "&" + ПараметрЗапроса.Значение);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетаУчета", "&СчетаУчета" + Счетчик);
		Запрос.УстановитьПараметр("СчетаУчета" + Счетчик, Задача.СчетаУчета);
		Запрос.УстановитьПараметр("ЗадачаОплатыСЕНС" + Счетчик, Задача.ЗадачаОплатыСЕНС);
		Запрос.УстановитьПараметр("НачалоСрока" + Счетчик, Задача.Срок);
		Запрос.УстановитьПараметр("КонецСрока" + Счетчик, КонецДня(Задача.Срок));
		
		ОбщийТекст.Добавить(ТекстЗапроса);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ОбщийТекст, ТекстОбъединениеЗапросов());
	Если ВыполнитьЗапрос Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос;
	КонецЕсли;
	
КонецФункции

Функция ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов)
	
	// 1. Выбираем из таблицы СуммыНалогов остатки обороты по данному счету учета в отдельные переменные.
	
	СуммаОстаток = 0;
	СуммаНачислено = 0;
	СуммаУплачено = 0;
	СуммаНачисленоТекущий = 0;
	
	Для каждого СуммаНаСчете Из СуммыНалогов Цикл
		
		ЭтоСчетЗадачи = (СчетУчета = СуммаНаСчете.СчетУчета);
		
		Если ЭтоСчетЗадачи И СтрокаЗадачи.ПериодСобытия = СуммаНаСчете.ПериодСобытия
			И СтрокаЗадачи.НачалоПериодаСобытия = СуммаНаСчете.НачалоПериодаСобытия
			И ((ЗначениеЗаполнено(СуммаНаСчете.Срок) И СтрокаЗадачи.Срок = СуммаНаСчете.Срок) 
				Или Не ЗначениеЗаполнено(СуммаНаСчете.Срок)) Тогда
			
			СуммаОстаток = СуммаОстаток + СуммаНаСчете.СуммаОстаток;
			СуммаНачислено = СуммаНачислено + СуммаНаСчете.СуммаНачислено;
			СуммаНачисленоТекущий = СуммаНачисленоТекущий + СуммаНаСчете.СуммаНачисленоТекущий;
			СуммаУплачено = СуммаУплачено + СуммаНаСчете.СуммаУплачено;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Распределяем полученные остатки и обороты на уплату за текущий отчетный период и уплату долга за прошедшие периоды,
	// чтобы правильно сформировать цвет индикатора. Все платежи начиная с даты НачалоПериодаСобытия относим сначала на погашение
	// текущего налога, а затем - на погашение задолженности. Сначала погашаем текущее начисление, т.к. все помощники  по уплате
	// налога открываются с периодом текущего платежа.
	//
	// При этом, например, обрабатываются следующие нестандартные ситуации:
	//
	// А) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., долг на начало периода (ОстатокНаНачалоПериода) - 10 000р., уплачено (СуммаУплачено) - 18 000р. 
	//    Результат: КУплатеТекущий - 0, КУплатеДолг - 7 0000 р.
	//
	// Б) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., переплата на начало периода (ОстатокНаНачалоПериода) - 2 000р., уплачено (СуммаУплачено) - 12 000р. 
	//    Результат: КУплатеТекущий - 1 000, КУплатеДолг - 0 р.
	
	КУплатеДолг = 0;
	КУплатеТекущий = 0;
	
	Если СтрокаЗадачи.ЭтоТекущаяЗадача Тогда
		
		ОстатокНаНачалоПериода = СуммаОстаток + СуммаНачислено - СуммаУплачено;
		
		КУплатеТекущий = СуммаНачисленоТекущий - Мин(СуммаНачисленоТекущий, СуммаУплачено);
		КУплатеДолг    = ?(ОстатокНаНачалоПериода < 0, - ОстатокНаНачалоПериода, 0);
		
		ПереплатаТекущая = Макс(СуммаУплачено - СуммаНачисленоТекущий, 0);
		ПереплатаДолг    = ?(ОстатокНаНачалоПериода > 0, ОстатокНаНачалоПериода, 0);
		
		КУплатеТекущий = КУплатеТекущий - ПереплатаТекущая - ПереплатаДолг;
		Если КУплатеТекущий < 0 Тогда 
			// Переплата, погашаем долг.
			КУплатеДолг = КУплатеДолг + КУплатеТекущий;
		КонецЕсли;
		
		КУплатеДолг    = ?(КУплатеДолг > 0, КУплатеДолг, 0);
		КУплатеТекущий = ?(КУплатеТекущий > 0, КУплатеТекущий, 0);
		
	Иначе
		КУплатеДолг = СуммаОстаток + СуммаНачислено;
		КУплатеДолг = ? (КУплатеДолг < 0, - КУплатеДолг, 0);
	КонецЕсли;
	
	СуммыПоЗадаче = Новый Структура;
	СуммыПоЗадаче.Вставить("КУплатеДолг",    КУплатеДолг);
	СуммыПоЗадаче.Вставить("КУплатеТекущий", КУплатеТекущий);
	
	Возврат СуммыПоЗадаче;
	
КонецФункции

Функция ПолучитьПараметрыИндикатора(СчетУчета, СтрокаЗадачи, СуммыНалогов, ТекущийДень, Организация)
	
	// Суммы начислений и остатков могут быть как за текущие периоды , так и за последующие будущие периоды.
	// Кроме того суммы оплат могут быть за текущие и будущие периоды, однако их мы не можем достоверно отнести к текущим или будущим оплатам.
	// Поэтому в первую очередь погашаем будущие и текущие платежи, затем прошлые платежи.
	// Во всех случаях отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	СтруктураСумм = ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов);
		
	Индикатор = ПолучитьИндикатор(СтрокаЗадачи.ЭтоТекущаяЗадача, СтруктураСумм.КУплатеДолг, СтруктураСумм.КУплатеТекущий);
	
	ПараметрыИндикатора = Новый Структура;
	ПараметрыИндикатора.Вставить("Индикатор", Индикатор);
	ПараметрыИндикатора.Вставить("КУплатеДолг", СтруктураСумм.КУплатеДолг);
	ПараметрыИндикатора.Вставить("КУплатеТекущий", СтруктураСумм.КУплатеТекущий);
	
	Возврат ПараметрыИндикатора;
	
КонецФункции

Процедура ПрименитьАлгоритмДляАвансаПоЕНП(НалоговыеИндикаторы, Организация, ТекущийДень)
	
	// Рассматриваем ситуацию, когда в кошельке есть аванс,
	// но еще не произошло определения принадлежности ЕНП.
	// В этом случае рассчитываем суммы для условного "погашения" задолженности,
	// т.к. они в любом случае зачтутся по сроку уплаты.
	
	НалоговыеИндикаторы.Колонки.Добавить("ДоступноСЕНСДолг",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеИндикаторы.Колонки.Добавить("ДоступноСЕНСТекущий", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеИндикаторы.Колонки.Добавить("ПредыдущиеПлатежи",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// После начала простого учета никаких распределений авансов на ЕНС не делаем.
	Если ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат;
	КонецЕсли;

	ОпределитьКУплатеПоДаннымЕНС(НалоговыеИндикаторы, Организация, ТекущийДень);
	
	НалоговыеИндикаторы.Сортировать("Срок", Новый СравнениеЗначений());
	
	СуммаЕдиногоНалоговогоПлатежа = ЕдиныйНалоговыйСчет.ОстатокНаЕдиномНалоговомСчете(Организация, ТекущийДень);
	
	Если СуммаЕдиногоНалоговогоПлатежа <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	СрокиУплаты = НалоговыеИндикаторы.Скопировать(, "Срок");
	СрокиУплаты.Свернуть("Срок", );
	СрокиУплаты.Сортировать("Срок");
	ОтборПоСрокам = Новый Структура("Срок");
	
	ПредыдущиеПлатежи = 0;
	
	ПравилаУплатыНДФЛ = ПравилаУплатыНДФЛ();
	
	// 1. Производим "погашение" недоимки по НДФЛ
	Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоСрокам.Срок = СтрокаТаблицы.Срок;
		ОстаткиПоДатеПолные = НалоговыеИндикаторы.НайтиСтроки(ОтборПоСрокам);
		
		ОстаткиПоДате = Новый Массив;
		Для Каждого СтрокаМассива Из ОстаткиПоДатеПолные Цикл
			Если СтрокаМассива.Индикатор = "Красный"
				И ЭтоПравилоУплатыНДФЛ(СтрокаМассива.КодПравила, ПравилаУплатыНДФЛ) Тогда
				ОстаткиПоДате.Добавить(СтрокаМассива);
			КонецЕсли;
		КонецЦикла;
		
		РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи, Истина);
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Производим "погашение" текущего НДФЛ
	Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоСрокам.Срок = СтрокаТаблицы.Срок;
		ОстаткиПоДатеПолные = НалоговыеИндикаторы.НайтиСтроки(ОтборПоСрокам);
		
		ОстаткиПоДате = Новый Массив;
		Для Каждого СтрокаМассива Из ОстаткиПоДатеПолные Цикл
			Если СтрокаМассива.Индикатор <> "Зеленый" // Если есть долг и текущий платеж - плашка красная
				И СтрокаМассива.КУплатеТекущий > 0
				И ЭтоПравилоУплатыНДФЛ(СтрокаМассива.КодПравила, ПравилаУплатыНДФЛ) Тогда
				ОстаткиПоДате.Добавить(СтрокаМассива);
			КонецЕсли;
		КонецЦикла;
		
		РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи);
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;

	// 3. Производим "погашение" недоимки 
	Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоСрокам.Срок = СтрокаТаблицы.Срок;
		ОстаткиПоДатеПолные = НалоговыеИндикаторы.НайтиСтроки(ОтборПоСрокам);
		
		ОстаткиПоДате = Новый Массив;
		Для Каждого СтрокаМассива Из ОстаткиПоДатеПолные Цикл
			Если СтрокаМассива.Индикатор = "Красный"
				И Не ЭтоПравилоУплатыНДФЛ(СтрокаМассива.КодПравила, ПравилаУплатыНДФЛ)
				И ПравилоОплатыСЕНС(СтрокаМассива.КодПравила) Тогда
				ОстаткиПоДате.Добавить(СтрокаМассива);
			КонецЕсли;
		КонецЦикла;
		
		РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи, Истина);
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;

	// 4. Производим "погашение" текущей задолженности по взносам
	Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоСрокам.Срок = СтрокаТаблицы.Срок;
		ОстаткиПоДатеПолные = НалоговыеИндикаторы.НайтиСтроки(ОтборПоСрокам);
		
		ОстаткиПоДате = Новый Массив;
		Для Каждого СтрокаМассива Из ОстаткиПоДатеПолные Цикл
			Если СтрокаМассива.Индикатор <> "Зеленый" // Если есть долг и текущий платеж - плашка красная
				И СтрокаМассива.КУплатеТекущий > 0
				И (СтрокаМассива.КодПравила = КодПравилаУплатаСтраховыеВзносы() Или СтрокаМассива.КодПравила = КодПравилаУплатаСтраховыеВзносыЕдиныйПомощник()) Тогда
				ОстаткиПоДате.Добавить(СтрокаМассива);
			КонецЕсли;
		КонецЦикла;
		
		РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи);
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 5. Производим "погашение" текущей задолженности
	Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоСрокам.Срок = СтрокаТаблицы.Срок;
		ОстаткиПоДатеПолные = НалоговыеИндикаторы.НайтиСтроки(ОтборПоСрокам);
		
		ОстаткиПоДате = Новый Массив;
		Для Каждого СтрокаМассива Из ОстаткиПоДатеПолные Цикл
			Если СтрокаМассива.Индикатор <> "Зеленый" // Если есть долг и текущий платеж - плашка красная
				И СтрокаМассива.КУплатеТекущий > 0
				И Не ЭтоПравилоУплатыНДФЛ(СтрокаМассива.КодПравила, ПравилаУплатыНДФЛ)
				И СтрокаМассива.КодПравила <> КодПравилаУплатаСтраховыеВзносы()
				И СтрокаМассива.КодПравила <> КодПравилаУплатаСтраховыеВзносыЕдиныйПомощник()
				И ПравилоОплатыСЕНС(СтрокаМассива.КодПравила) Тогда
				ОстаткиПоДате.Добавить(СтрокаМассива);
			КонецЕсли;
		КонецЦикла;
		
		РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьКУплатеПоДаннымЕНС(НалоговыеИндикаторы, Организация, ТекущийДень)
	
	НалогиЕНС = ИндикаторыНалоговЕНС(НалоговыеИндикаторы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НалогиЕНС",   НалогиЕНС);
	Запрос.УстановитьПараметр("Период",      ТекущийДень);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Налоги.Налог КАК Налог,
	|	Налоги.СрокУплаты КАК СрокУплаты
	|ПОМЕСТИТЬ НалогиЕНС
	|ИЗ
	|	&НалогиЕНС КАК Налоги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налоги.Налог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Налог КАК Налог,
	|	Расчеты.СрокУплаты КАК СрокУплаты,
	|	Расчеты.СуммаОстаток КАК КУплате
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&Период,
	|			ГоловнаяОрганизация = &Организация
	|				И Налог В
	|					(ВЫБРАТЬ
	|						НалогиЕНС.Налог
	|					ИЗ
	|						НалогиЕНС)) КАК Расчеты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогиЕНС.Налог КАК Налог,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.СрокУплаты = НалогиЕНС.СрокУплаты
	|				ТОГДА Расчеты.КУплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КУплатеТекущий,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.СрокУплаты < НалогиЕНС.СрокУплаты
	|				ТОГДА Расчеты.КУплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КУплатеДолг
	|ИЗ
	|	Расчеты КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалогиЕНС КАК НалогиЕНС
	|		ПО Расчеты.Налог = НалогиЕНС.Налог
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогиЕНС.Налог";
	
	// Цель запроса - определить суммы платежей, относящихся к сроку, отображаемому в мониторе:
	// те, что нужно заплатить не позднее указанной даты.
	// Их делим на две части 
	// - текущие платежи, для которых крайний срок, это указанная дата
	// - долг, для который крайний срок - более ранняя дата.
	// Как следствие, здесь не интересны авансы - то есть, начисления, срок уплаты которых наступит позже горизонта монитора.
	//
	// Предполагаем, что за счет сворачивания записей в ИндикаторыНалоговЕНС, НалогиЕНС содержит ровно по одной строке
	// на каждый налог.
	// Ожидаем, что сроки уплаты на стороне ФНС и в списке задач - одинаковые, реальные,
	// то есть, с учетом переносов через выходные и праздничные дни.
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("НалогЕНС");
	Пока Выборка.Следующий() Цикл
		Отбор.НалогЕНС = Выборка.Налог;
		ИндикаторыНалога = НалоговыеИндикаторы.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(ИндикаторыНалога) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ИндикаторыНалога[0], Выборка, "КУплатеТекущий, КУплатеДолг");
	КонецЦикла;
	
КонецПроцедуры

Функция ИндикаторыНалоговЕНС(НалоговыеИндикаторы)
	
	НалогиЕНС = Новый ТаблицаЗначений;
	НалогиЕНС.Колонки.Добавить("Налог",      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	НалогиЕНС.Колонки.Добавить("СрокУплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	// Определим актуальные индикаторы уплаты (с наибольшим сроком уплаты)
	АктуальныеНалогиЕНС = Новый Соответствие;
	
	Для Каждого Индикатор Из НалоговыеИндикаторы Цикл
		
		Если Не ЗначениеЗаполнено(Индикатор.НалогЕНС) Тогда
			Продолжить;
		КонецЕсли;
		
		АктуальныйСрок = АктуальныеНалогиЕНС[Индикатор.НалогЕНС];
		Если Не ЗначениеЗаполнено(АктуальныйСрок) Тогда
			АктуальныйСрок = Индикатор.Срок;
		Иначе
			АктуальныйСрок = Макс(АктуальныйСрок, Индикатор.Срок);
		КонецЕсли;
		
		АктуальныеНалогиЕНС.Вставить(Индикатор.НалогЕНС, АктуальныйСрок);
		
	КонецЦикла;
	
	Для Каждого Налог Из АктуальныеНалогиЕНС Цикл
		СтрокаНалог = НалогиЕНС.Добавить();
		СтрокаНалог.Налог = Налог.Ключ;
		СтрокаНалог.СрокУплаты = Налог.Значение;
	КонецЦикла;
	
	Возврат НалогиЕНС;

КонецФункции

Процедура РаспределитьСуммуЕНСМеждуНалогами(ОстаткиПоДате, СуммаЕдиногоНалоговогоПлатежа, ПредыдущиеПлатежи, ПогашатьДолг = Ложь)
	СуммаОстаток = 0;
	Коэффициенты = Новый Массив;
	Для Каждого СтрокаТаблицыПоДате Из ОстаткиПоДате Цикл
		Если ПогашатьДолг Тогда
			СуммаОстаток = СуммаОстаток + СтрокаТаблицыПоДате.КУплатеДолг;
			Коэффициенты.Добавить(СтрокаТаблицыПоДате.КУплатеДолг);
		Иначе
			СуммаОстаток = СуммаОстаток + СтрокаТаблицыПоДате.КУплатеТекущий;
			Коэффициенты.Добавить(СтрокаТаблицыПоДате.КУплатеТекущий);
		КонецЕсли;
	КонецЦикла;
	
	СуммаПогашения = Мин(СуммаЕдиногоНалоговогоПлатежа, СуммаОстаток);
	Если СуммаПогашения <> 0 Тогда
		РаспределеннаяСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПогашения, Коэффициенты, 2);
		Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
			ТекущаяСтрока = ОстаткиПоДате[Индекс];
			Если ПогашатьДолг Тогда
				ТекущаяСтрока.ДоступноСЕНСДолг = РаспределеннаяСумма[Индекс];
			Иначе
				ТекущаяСтрока.ДоступноСЕНСТекущий = РаспределеннаяСумма[Индекс];
			КонецЕсли;
			ТекущаяСтрока.ПредыдущиеПлатежи = ПредыдущиеПлатежи;
			ПредыдущиеПлатежи = ПредыдущиеПлатежи + РаспределеннаяСумма[Индекс];
		КонецЦикла;
		СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа - СуммаПогашения;
	КонецЕсли;
КонецПроцедуры

// Алгоритм предназначен для добровольных взносов на временную нетрудоспособность за отчетный год.
// Работает аналогично алгоритму для анализа фиксированных взносов ИП
//
Процедура ПрименитьАлгоритмДляВзносовИПНаВНиМ(НалоговыеИндикаторы, Организация, ЗадачиПоНалогам)
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл
		Если ЭтоПравилоВзносыНаВНиМ(Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ВзносыИП = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация,
		ЗадачаПоВзносам.ПериодСобытия,
		ЗадачаПоВзносам.Периодичность);
	
	ОсталосьТекущихВзносовИП = ВзносыИП.СуммаВзносаФССВсего - ВзносыИП.СуммаВзносаФССУплачено;
	
	// Не считаем долг, т.к. если ИП не оплатит страховые взносы на ВНиМ во время, то просто не получит в следующем году соц.обеспечение
	КУплатеДолг = 0;
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
	НоваяСтрока.Наименование = СтрШаблон(НСтр("ru = 'Оплата за %1 г.'"), Формат(Год(ЗадачаПоВзносам.ПериодСобытия), "ЧГ=0"));
	НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, ОсталосьТекущихВзносовИП);
	НоваяСтрока.КУплатеТекущий = ОсталосьТекущихВзносовИП;
	НоваяСтрока.КУплатеДолг = КУплатеДолг;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНДФЛ(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Получаем остатки расчетов по налогу за периоды задач.
	
	ЗаполнитьСуммыПоОплатеНДФЛ(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
	
	// 3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНДФЛ(ОбрабатываемыеЗадачи, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	
	ПросроченнаяЗадолженность = 0;
	Оплачено = 0;
	
	Для Каждого СтрокаЗадач Из ОбрабатываемыеЗадачи Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийДень < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		
		// Посчитаем недоимку и оплаты по ЕНС
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
			|			,
			|			ГоловнаяОрганизация = &Организация
			|				И СчетУчета = &СчетУчета
			|				И СрокУплаты < &ТекущийДень) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
			|			,
			|			,
			|			Авто,
			|			СчетУчета = &СчетУчета
			|				И МЕСЯЦ(СрокУплаты) = МЕСЯЦ(&ТекущийДень)
			|				И Организация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ);
		Запрос.УстановитьПараметр("ТекущийДень", ТекущийДень);
		
		Результат = Запрос.ВыполнитьПакет();
		
		// Рассчитаем задолженность
		Выборка = Результат[0].Выбрать();
		Если Выборка.Следующий() Тогда
			ПросроченнаяЗадолженность = Выборка.Сумма;
		КонецЕсли;
		
		// Рассчитаем зачтенную сумму
		Выборка = Результат[1].Выбрать();
		Если Выборка.Следующий() Тогда
			Оплачено = Выборка.Сумма;
		КонецЕсли;

	КонецЕсли;
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = ПросроченнаяЗадолженность;
	Начислено = УчетЗарплаты.УдержанныйНДФЛЗаПериод(Организация, КонецМесяца(ТекущийДень)).Итог("Сумма");
	КУплатеВсего = Начислено - Оплачено;
	
	ОтборТекущихЗадач = Новый Структура("ЭтоТекущаяЗадача", Истина);
	СтрокиТекущихЗадач = ОбрабатываемыеЗадачи.НайтиСтроки(ОтборТекущихЗадач);
	
	// Текущая задача по НДФЛ должна быть одна
	Для Каждого ТекущаяЗадача Из СтрокиТекущихЗадач Цикл
		ТекущаяЗадача.Начислено = Макс(Начислено, 0);
		ТекущаяЗадача.КУплатеТекущий = КУплатеВсего;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляПСН(НалоговыеИндикаторы, ЗадачиПоНалогам, ТекущийДень)

	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// 2. Получаем остатки расчетов по налогу за периоды задач.
	
	ЗаполнитьСуммыПоОплатеНалогаПСН(ОбрабатываемыеЗадачи, ТекущийДень);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалогаПСН(ОбрабатываемыеЗадачи, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗадач Из ОбрабатываемыеЗадачи Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	
	Для Каждого ТекущаяЗадача Из ОбрабатываемыеЗадачи Цикл
		
		ДокументПатент = УчетПСН.ДокументПатентПоДеятельностиИСроку(ТекущаяЗадача.Правило, ТекущаяЗадача.Срок);
		
		РеквизитыПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументПатент, "ДатаПервогоПлатежа, ДатаВторогоПлатежа, СуммаПервогоПлатежа, СуммаВторогоПлатежа");
		
		Если ТекущаяЗадача.Срок = РеквизитыПатента.ДатаПервогоПлатежа Тогда
			НалогКУплате = РеквизитыПатента.СуммаПервогоПлатежа;
		ИначеЕсли ТекущаяЗадача.Срок = РеквизитыПатента.ДатаВторогоПлатежа Тогда
			НалогКУплате = РеквизитыПатента.СуммаВторогоПлатежа;
		Иначе
			НалогКУплате = 0;
		КонецЕсли;
		
		ОстатокРасчетовПоПатенту = УчетПСН.ОстатокРасчетовПоНалогуПСН(
			ДокументПатент, ТекущийДень, ТекущаяЗадача.ПериодСобытия);
		
		ТекущаяЗадача.Начислено = НалогКУплате;
		ТекущаяЗадача.КУплатеТекущий = Макс(ОстатокРасчетовПоПатенту, 0);
		
	КонецЦикла;
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	
	ЗадолженностьПоНалогу = 0;
	ПросроченнаяЗадолженность = Макс(ЗадолженностьПоНалогу - ИтогоТекущийНалог, 0);
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = ПросроченнаяЗадолженность;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНДС(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)

	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиНДС());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// 2. Получаем остатки расчетов по налогу за периоды задач.
	ЗаполнитьСуммыПоОплатеНалогаНДС(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалогаНДС(ОбрабатываемыеЗадачи, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗадач Из ОбрабатываемыеЗадачи Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	
	Для Каждого ТекущаяЗадача Из ОбрабатываемыеЗадачи Цикл
		
		ПараметрыЗадачиНДС = Обработки.ПомощникРасчетаНДС.НовыеПараметрыЗадачи();
		ПараметрыЗадачиНДС.Организация           = Организация;
		ПараметрыЗадачиНДС.ПериодСобытия         = ТекущаяЗадача.ПериодСобытия;
		ПараметрыЗадачиНДС.НачалоПериода         = ТекущаяЗадача.НачалоПериодаСобытия;
		ПараметрыЗадачиНДС.КонецПериода          = КонецКвартала(ТекущаяЗадача.НачалоПериодаСобытия);
		ПараметрыЗадачиНДС.Правило               = ТекущаяЗадача.Правило;
		ПараметрыЗадачиНДС.Срок                  = ТекущаяЗадача.Срок;
		ПараметрыЗадачиНДС.СрокУплатыНалога      = ТекущаяЗадача.Срок;
		ПараметрыЗадачиНДС.ЭтоЗадачаОплаты       = Истина;
		ПараметрыЗадачиНДС.СоставРазделов.Уплата = Истина;
	
		РезультатРасчета = Обработки.ПомощникРасчетаНДС.ПоказателиДляРасчета(ПараметрыЗадачиНДС);
		
		НомерПлатежа = НомерПлатежаИзКодаПравила(ТекущаяЗадача.КодПравила);
		
		Если РезультатРасчета.ПоказателиДляУплаты.ИндексОчередногоПлатежа = НомерПлатежа - 1 Тогда
			ТекущаяЗадача.КУплатеТекущий = РезультатРасчета.ПоказателиДляУплаты.ОчереднойПлатеж;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	
	ОстатокРасчетовПоНДС = ОстатокРасчетовПоНДС(Организация, ТекущийДень);
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = Макс(ОстатокРасчетовПоНДС - ИтогоТекущийНалог, 0);
	
КонецПроцедуры

Функция НомерПлатежаИзКодаПравила(КодПравила)
	
	// Для задач, выполняемых единым помощником, правило содержит постфикс "_ЕдиныйПомощник".
	// Уберем его для достоверного определения номера платежа.
	КодПравилаБезПостфикса = СтрЗаменить(КодПравила, "_ЕдиныйПомощник", "");
	
	Если Прав(КодПравилаБезПостфикса, 1) = "1" Тогда
		НомерПлатежа = 1;
	ИначеЕсли Прав(КодПравилаБезПостфикса, 1) = "2" Тогда
		НомерПлатежа = 2;
	ИначеЕсли Прав(КодПравилаБезПостфикса, 1) = "3" Тогда
		НомерПлатежа = 3;
	Иначе
		НомерПлатежа = Неопределено;
	КонецЕсли;
	
	Возврат НомерПлатежа;
	
КонецФункции

Функция ОстатокРасчетовПоНДС(Организация, Период)
	
	Если Период >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И Налог = &Налог
		|				И СрокУплаты <= &Период) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС, Ложь);
	Если Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налог", Налог);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Остаток = Запрос.Выполнить().Выбрать();
	
	Если Остаток.Следующий() Тогда
		Возврат Остаток.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ПрименитьАлгоритмДляНалоговНаИмущество(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	// Формируем таблицу из задач, по транспортному налогу
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	Если ОбрабатываемыеЗадачи.Количество() <> 0 Тогда
		ЗаполнитьСуммыПоОплатеНалоговНаИмущество(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
		ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	КонецЕсли;
	// Формируем таблицу из задач, по имущественному налогу
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	Если ОбрабатываемыеЗадачи.Количество() <> 0 Тогда
		ЗаполнитьСуммыПоОплатеНалоговНаИмущество(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
		ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	КонецЕсли;
	
	// Формируем таблицу из задач, по земельному налогу
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	Если ОбрабатываемыеЗадачи.Количество() <> 0 Тогда
		ЗаполнитьСуммыПоОплатеНалоговНаИмущество(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
		ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы)
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалоговНаИмущество(ОбрабатываемыеЗадачи, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаЗадач Из ОбрабатываемыеЗадачи Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	КодЗадачи = ОбрабатываемыеЗадачи[0].КодЗадачи;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты КАК СрокУплаты,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&ТекущийПериод,
		|			ГоловнаяОрганизация = &Организация
		|				И СчетУчета = &СчетУчета) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&ТекущийПериод,
		|			ГоловнаяОрганизация = &Организация
		|				И СчетУчета = &СчетУчета
		|				И СрокУплаты < &ТекущийПериод) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ТранспортныйНалог);
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.НалогНаИмущество);
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ЗемельныйНалог);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПериод", ТекущийДень);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОплат       = Результат[0].Выгрузить();
	СуммаЗадолженности = Результат[1].Выбрать();
	
	Если КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетНалога.ПериодРасчета КАК ПериодРасчета,
			|	ЕСТЬNULL(СУММА(РасчетНалога.СуммаНалогаКУплате), 0) КАК Сумма
			|ИЗ
			|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетНалога
			|ГДЕ
			|	РасчетНалога.Организация = &Организация
			|	И РасчетНалога.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетНалога.ПериодРасчета";
		Запрос.УстановитьПараметр("Организация", Организация);
		ТаблицаНачисления = Запрос.Выполнить().Выгрузить();
		
		ЗаполнитьНачисленияУплатуЗадолженность(ОбрабатываемыеЗадачи, ТаблицаНачисления, ТаблицаОплат, СуммаЗадолженности);
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета КАК ПериодРасчета,
			|	ЕСТЬNULL(СУММА(РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате), 0) КАК Сумма
			|ПОМЕСТИТЬ втНалогиНаИмущество
			|ИЗ
			|	РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
			|ГДЕ
			|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
			|	И РасчетНалогаНаИмуществоПоКадастровойСтоимости.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета,
			|	ЕСТЬNULL(СУММА(РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате), 0)
			|ИЗ
			|	РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втНалогиНаИмущество.ПериодРасчета КАК ПериодРасчета,
			|	СУММА(втНалогиНаИмущество.Сумма) КАК Сумма
			|ИЗ
			|	втНалогиНаИмущество КАК втНалогиНаИмущество
			|
			|СГРУППИРОВАТЬ ПО
			|	втНалогиНаИмущество.ПериодРасчета";
		Запрос.УстановитьПараметр("Организация", Организация);
		ТаблицаНачисления = Запрос.Выполнить().Выгрузить();
		
		ЗаполнитьНачисленияУплатуЗадолженность(ОбрабатываемыеЗадачи, ТаблицаНачисления, ТаблицаОплат, СуммаЗадолженности);
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетНалога.ПериодРасчета КАК ПериодРасчета,
			|	ЕСТЬNULL(СУММА(РасчетНалога.СуммаНалогаКУплате), 0) КАК Сумма
			|ИЗ
			|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетНалога
			|ГДЕ
			|	РасчетНалога.Организация = &Организация
			|	И РасчетНалога.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетНалога.ПериодРасчета";
		Запрос.УстановитьПараметр("Организация", Организация);
		ТаблицаНачисления = Запрос.Выполнить().Выгрузить();
		
		ЗаполнитьНачисленияУплатуЗадолженность(ОбрабатываемыеЗадачи, ТаблицаНачисления, ТаблицаОплат, СуммаЗадолженности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачисленияУплатуЗадолженность(ОбрабатываемыеЗадачи, ТаблицаНачисления, ТаблицаОплат, СуммаЗадолженности)
	Для Каждого Задача из ОбрабатываемыеЗадачи Цикл
		СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("ПериодРасчета", НачалоДня(Задача.ПериодСобытия)));
		Если СтрокиНачисления.Количество() > 0 Тогда
			Задача.Начислено = СтрокиНачисления[0].Сумма;
		КонецЕсли;
		
		СтрокиОплат = ТаблицаОплат.НайтиСтроки(Новый Структура("СрокУплаты", НачалоДня(Задача.Срок)));
		Если СтрокиОплат.Количество() > 0 Тогда
			Задача.КУплатеТекущий = СтрокиОплат[0].Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаЗадолженности.Следующий() Тогда
		ОбрабатываемыеЗадачи[0].КУплатеДолг = Макс(0, СуммаЗадолженности.Сумма);
	КонецЕсли;
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНалогаНаПрибыль(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрибыль());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// 2. Получаем остатки расчетов по налогу за периоды задач.
	ЗаполнитьСуммыПоОплатеНалогаНаПрибыль(ОбрабатываемыеЗадачи, Организация, ТекущийДень);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	ДополнитьНалоговыеИндикаторы(ОбрабатываемыеЗадачи, НалоговыеИндикаторы);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалогаНаПрибыль(ОбрабатываемыеЗадачи, Организация, ТекущийДень)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗадач Из ОбрабатываемыеЗадачи Цикл
		Если КонецДня(ТекущийДень) + 1 = СтрокаЗадач.НачалоВыполнения Тогда
			СтрокаЗадач.НачалоВыполнения = ТекущийДень;
			СтрокаЗадач.ЭтоТекущаяЗадача = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("Начислено",      ОписаниеТипаСуммы);
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОписаниеТипаСуммы);
	
	Оплата = 0;
	
	Если ТекущийДень < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		
		// Посчитаем недоимку и оплаты по ЕНС
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
			|			,
			|			,
			|			Авто,
			|			СчетУчета = &СчетУчета
			|				И МЕСЯЦ(СрокУплаты) = МЕСЯЦ(&ТекущийДень)
			|				И Организация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
		Запрос.УстановитьПараметр("ТекущийДень", ТекущийДень);
		
		// Рассчитаем задолженность
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Оплата = Выборка.Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекущаяЗадача Из ОбрабатываемыеЗадачи Цикл
		
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
			ТекущаяЗадача.НачалоПериодаСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал());
			
		ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
			ТекущаяЗадача.Правило,
			Организация,
			Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка(),
			ТекущаяЗадача.НачалоПериодаСобытия,
			ТекущаяЗадача.Срок,
			ПоказательПериода);
			
		Если ДанныеДекларации.Уплаты.Количество() > 0 Тогда
			ТекущаяЗадача.КУплатеТекущий = ДанныеДекларации.Уплаты[0].Сумма - Оплата;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	
	ОстатокРасчетовПоНалогуНаПрибыль = ОстатокРасчетовПоНалогуНаПрибыль(Организация, ТекущийДень);
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = Макс(ОстатокРасчетовПоНалогуНаПрибыль, 0);
	
КонецПроцедуры

Функция ОстатокРасчетовПоНалогуНаПрибыль(Организация, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И Налог В (&Налоги)
		|				И СрокУплаты < &Период) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Налоги = Новый Массив;
	Налоги.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.Видыналогов.НалогНаПрибыль_НалоговыйАгент, Ложь));
	Налоги.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.Видыналогов.НалогНаПрибыль_РегиональныйБюджет, Ложь));
	Налоги.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.Видыналогов.НалогНаПрибыль_ФедеральныйБюджет, Ложь));
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Налоги);
	Индекс = Налоги.Найти(Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы);
	Если Индекс <> Неопределено Тогда
		Налоги.Удалить(Индекс);
	КонецЕсли;
	Если Налоги.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налоги", Налоги);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Остаток = Запрос.Выполнить().Выбрать();
	
	Если Остаток.Следующий() Тогда
		Возврат Остаток.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область АлгоритмыВзносовИП

// Алгоритм предназначен для анализа уплаты всех фиксированных взносов за текущий год, 
// Алгоритм берет остатки на конец предыдущего года, за исключением остатков по взносам с доходов, которые берутся другим алгоритмом
// Затем прибавляет к остаткам регламентную сумму начисления за текущий период и  и вычитает сумм уплат с начала года.
// Таким образом получается текущий остаток, который можно сравнивать с текущими начислениями для формирования корректного индикатора.
//
Функция ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиПоНалогам, Параметры, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	Организация = Параметры.Организация;
	ТекущийДень = Параметры.ТекущийДень;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаФиксированныхВзносовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Добровольные страховые взносы в ФСС выделены в отдельную задачу и отдельный показатель монитора
	ИсключаемыеСчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	
	СчетаВзносовИП = Новый Массив;
	Для каждого Задача Из ТаблицаСоСчетамиУчета Цикл 
		Если ЭтоЗадачаВзносовИП(Задача.КодЗадачи) И ИсключаемыеСчета.Найти(Задача.СчетУчета) = Неопределено Тогда
			СчетаВзносовИП.Добавить(Задача.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	Если Параметры.УпрощеннаяНулеваяОтчетность Тогда
		ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
		ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	КонецЕсли;
	
	ВидВзносаСвышеПредела = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела;
	ВзносыСвышеПредела = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидВзносаСвышеПредела, Ложь);
	
	ИндексВзносовСДоходов = ВидыНалоговыхПлатежей.Найти(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Если ИндексВзносовСДоходов <> Неопределено Тогда
		ВидыНалоговыхПлатежей.Удалить(ИндексВзносовСДоходов);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	0 КАК СуммаУплачено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоВыполнения,
	|			,
	|			,
	|			Счет В (&СчетаВзносовИП),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей),
	|			КорСчет В (&СчетаУчетаДС),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток,
	|	0
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&Период,
	|			СчетУчета В (&СчетаВзносовИП)
	|				И Организация = &Организация
	|				И ГоловнаяОрганизация = &Организация
	|				И Налог <> &ВзносыСвышеПредела) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	НЕ &ПростойУчетЕНС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
	|			&НачалоВыполнения,
	|			,
	|			,
	|			СчетУчета В (&СчетаВзносовИП)
	|				И Организация = &Организация
	|				И ГоловнаяОрганизация = &Организация
	|				И Налог <> &ВзносыСвышеПредела) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
	|ГДЕ
	|	НЕ &ПростойУчетЕНС");
	Запрос.УстановитьПараметр("Период", Новый Граница(НачалоГода(ТекущийДень) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоВыполнения", НачалоГода(ТекущийДень));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	Запрос.УстановитьПараметр("ВзносыСвышеПредела", ВзносыСвышеПредела);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ПростойУчетЕНС", Параметры.ТекущийДень >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета());
	
	СуммаОстаток = 0;
	СуммаУплачено = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	// Отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	Пока Выборка.Следующий() Цикл
		СуммаОстаток = СуммаОстаток + Выборка.СуммаОстаток;
		СуммаУплачено = СуммаУплачено + Выборка.СуммаУплачено;
	КонецЦикла;
	
	Если ЗадачаВыполнена(Организация, ЗадачаПоВзносам.Правило, ЗадачаПоВзносам.ПериодСобытия) Тогда
		ОсталосьТекущихВзносовИП = 0;
		ТекущиеВзносыИПУплачено = 0;
	Иначе
		ВзносыИП = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
			Организация, ЗадачаПоВзносам.ПериодСобытия, ЗадачаПоВзносам.Периодичность);
			
		ОсталосьТекущихВзносовИП = ВзносыИП.СуммаВзносаПФР
			+ ВзносыИП.СуммаВзносаФФОМС
			+ ВзносыИП.СуммаВзносаПФРДобровольно
			+ ВзносыИП.СуммаВзносаЕдиныйТариф;
		
		ТекущиеВзносыИПУплачено = ВзносыИП.СуммаВзносаПФРУплачено
			+ ВзносыИП.СуммаВзносаФФОМСУплачено
			+ ВзносыИП.СуммаВзносаПФРДобровольноУплачено
			+ ВзносыИП.СуммаВзносаЕдиныйТарифУплачено;
	КонецЕсли;
	
	ОстатокЗаВычетомТекущейУплаты = СуммаОстаток + СуммаУплачено - ТекущиеВзносыИПУплачено;
	КУплатеДолг = ?(ОстатокЗаВычетомТекущейУплаты < 0, -ОстатокЗаВычетомТекущейУплаты, 0);
	
	ЭтоИПНулевка = Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	// Если индикатор зеленый, то состояние помощника должно быть "Все оплачено".
	Если (КУплатеДолг = 0
		И ОсталосьТекущихВзносовИП = 0
		И ЭтоИПНулевка
		И РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация).Состояние
			<> Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены) Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Организация", Организация);
		Данные.Вставить("Состояние", Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены);
		РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.СохранитьСостояниеПомощника(Данные);
		
	КонецЕсли;
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
	Если Не ЭтоИПНулевка
		И КУплатеДолг = 0
		И ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, ЗадачаПоВзносам.КодЗадачи) Тогда
		Новаястрока.Индикатор = ЦветаИндикаторов().Желтый;
		НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
	Иначе
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, ОсталосьТекущихВзносовИП);
	КонецЕсли;
	НоваяСтрока.КУплатеТекущий = ОсталосьТекущихВзносовИП;
	НоваяСтрока.КУплатеДолг = КУплатеДолг;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Алгоритм предназначен для анализа уплаты фиксированных взносов с доходов за завершившиеся отчетные годы. 
// Работает аналогично алгоритму для анализа фиксированных взносов ИП
//
Процедура ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС)
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// В упрощенном зачете взносов ИП показываем сумму к уплате по ближайшему сроку задачи:
	// сначала оплачивается взнос по единому тарифу, т.к. срок оплаты до конца отчетного периода
	// после оплачивается взнос с доходов
	Если УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, ТекущийДень)
		И ИндикаторВзносовИП <> Неопределено
		И ИндикаторВзносовИП.Срок > ТекущийДень И ИндикаторВзносовИП.КУплатеТекущий > 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаВзносовСДоходовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОстатокНаНачалоГода = 0;
	УплаченоСНачалаГода = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущийДень));
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.ОстатокРасчетов) КАК ОстатокРасчетов,
	|	СУММА(ВложенныйЗапрос.Уплачено) КАК Уплачено
	|ИЗ
	|	(ВЫБРАТЬ
	|		-ХозрасчетныйОстатки.СуммаОстаток КАК ОстатокРасчетов,
	|		0 КАК Уплачено
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоПериода,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|				Организация = &Организация
	|					И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				,
	|				,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|				Организация = &Организация
	|					И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела),
	|				КорСчет В (&СчетаУчетаДС),
	|				) КАК ХозрасчетныйОбороты) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОстатокНаНачалоГода = Выборка.ОстатокРасчетов;
		УплаченоСНачалаГода = Выборка.Уплачено;
	КонецЕсли;
	
	Если ТекущийДень < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
	
		// Оплаты по ЕНС
	ВидыНалогаЕНС = Новый Массив;
	ВидыНалогаЕНС.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела));
	
	Если Год(ТекущийДень) И Год(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж()) Тогда
		// Для переходного периода учитываем взносы с доходов, уплаченные по прежнему виду налога
		ВидыНалогаЕНС.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть));
	КонецЕсли;
	
	// Учитываем суммы, которые были оплачены в этом году по сроку за прошлый год
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			,
		|			Период,
		|			Организация = &Организация
		|				И Налог В (&Налог)
		|				И ГОД(СрокУплаты) >= ГОД(&НачалоПериода)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Налог", ВидыНалогаЕНС);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущийДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УплаченоСНачалаГода = УплаченоСНачалаГода + Выборка.СуммаРасход;
	КонецЦикла;
	
	КонецЕсли;
	
	// Проверяем взносы за текущий год.
	
	Если ЗначениеЗаполнено(ИндикаторВзносовИП)
		И ИндикаторВзносовИП.Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериодаАнализаДоходов = КонецКвартала(ТекущийДень);
	Иначе
		КонецПериодаАнализаДоходов = КонецГода(ТекущийДень);
	КонецЕсли;
	
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(ТекущийДень), КонецПериодаАнализаДоходов);
	ВзносыСДоходовТекущие = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация, НачалоГода(ТекущийДень), СтруктураДоходов, Ложь);
	
	ЗадачаПоВзносамВыполнена = ЗадачаВыполнена(Организация, ЗадачаПоВзносам.Правило, ЗадачаПоВзносам.ПериодСобытия);
	Если ЗадачаПоВзносамВыполнена Тогда
		// В списке задач оплата осуществлена, отражение на ЕНС могло быть позже, но нет смысла в мониторе отображать необходимость оплаты
		КУплатеЗаТекущийПериод = 0;
	Иначе
		КУплатеЗаТекущийПериод = ВзносыСДоходовТекущие.СуммаВзносаПФРсДоходов;
	КонецЕсли;
	
	// Определим, сколько взносов с начала текущего года было уплачено за предыдущие периоды.
	УплаченоЗаПредыдущиеПериоды = УплаченоСНачалаГода - ВзносыСДоходовТекущие.СуммаВзносаПФРсДоходовУплачено;
	
	// Остаток расчетов за истекшие периоды - сальдо расчетов на начало периода за вычетом уплаченного с начала года.
	ОстатокРасчетовЗаИстекшиеПериоды = ОстатокНаНачалоГода - УплаченоЗаПредыдущиеПериоды;
	
	// Проверяем взносы за прошлый год. Если оплата взносов за предыдущий год не просрочена,
	// такие взносы также образуют текущую сумму индикатора.
	
	КУплатеЗаПрошлыйПериод = 0;
	
	Если ОстатокРасчетовЗаИстекшиеПериоды > 0 И ЗадачаПоВзносам.ЭтоТекущаяЗадача
		И Год(ЗадачаПоВзносам.ПериодСобытия) < Год(ТекущийДень) Тогда
		
		СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
			Организация, НачалоГода(ЗадачаПоВзносам.ПериодСобытия), КонецГода(ЗадачаПоВзносам.ПериодСобытия));
		
		ВзносыСДоходовЗаПрошлыйГод = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
			Организация, НачалоГода(ЗадачаПоВзносам.ПериодСобытия), СтруктураДоходов, Ложь);
		
		КУплатеЗаПрошлыйПериод = ВзносыСДоходовЗаПрошлыйГод.СуммаВзносаПФРсДоходов;
		
	КонецЕсли;
	
	// Вычисляем просроченную задолженность.
	
	ОстатокРасчетовЗаИстекшиеПериоды = ОстатокРасчетовЗаИстекшиеПериоды - КУплатеЗаПрошлыйПериод;
	Долг = Макс(ОстатокРасчетовЗаИстекшиеПериоды, 0); // Переплату не учитываем, поскольку помощник уплаты взносов ИП ее не отражает.
	
	// Формируем индикаторы.
	// Взносы к оплате за текущий период учитываются в индикаторе для постоянной части взносов.
	// Непросроченная сумма к оплате за прошлый период образует собственный индикатор.
	// Просроченный долг включается в данные более "раннего" из этих индикаторов.
	
	Если КУплатеЗаПрошлыйПериод > 0 Тогда
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, Долг, КУплатеЗаПрошлыйПериод);
		НоваяСтрока.КУплатеТекущий = КУплатеЗаПрошлыйПериод;
		НоваяСтрока.КУплатеДолг = Долг;
		// Долг учтен. Спишем, чтобы не отражать в индикаторе за текущий период.
		Долг = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндикаторВзносовИП) Тогда
		
		// Если задача по взносам по единому тарифу оплачена, то выводим сроки по задаче с уплатой взносов с дохода
		Если ЗадачаВыполнена(Организация, ИндикаторВзносовИП.Правило, ИндикаторВзносовИП.ПериодСобытия) Тогда
			
			Если ЗадачаПоВзносамВыполнена Тогда
				// Находим следующую по сроку задачу
				Для Каждого Задача Из ЗадачиПоНалогам Цикл
					Если ЭтоЗадачаВзносовИП(Задача.КодЗадачи) И ЗадачаПоВзносам.Срок < Задача.Срок Тогда
						ЗадачаПоВзносам = Задача;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ИндикаторВзносовИП, ЗадачаПоВзносам);
		КонецЕсли;
		
		// Объединяем задачи по фиксированным взносам и взносам с доходов в одну, т.к. в этом случае используется один помощник.
		ИндикаторВзносовИП.КУплатеТекущий = ИндикаторВзносовИП.КУплатеТекущий + КУплатеЗаТекущийПериод;
		ИндикаторВзносовИП.КУплатеДолг = ИндикаторВзносовИП.КУплатеДолг + Долг;
		
		ИндикаторыВзносов = Новый Массив(2);
		ИндикаторыВзносов[0] = ИндикаторВзносовИП.Индикатор;
		ИндикаторыВзносов[1] = ПолучитьИндикатор(Истина, Долг, КУплатеЗаТекущийПериод);
		ИндикаторВзносовИП.Индикатор = СамыйКритичныйИндикатор(ИндикаторыВзносов);
		
	ИначеЕсли КУплатеЗаПрошлыйПериод = 0 Тогда
		// Отсутствует задача для постоянной части взносов ИП, но задача для взносов с доходов есть.
		// Такое может быть, если ИП с текущего года перестал быть плательщиком фиксированных взносов. Например, перешел на НПД.
		// В этом случае нужно добавить индикатор для отображения текущих расчетов по взносам с доходов.
		// При этом может быть 2 ситуации:
		//   - имеется просроченный долг за прошлые годы, нужно показать красный блок;
		//   - отсутствует задолженность по взносам, требуется показать зеленый блок.
		// Для ситуации с непросроченной задолженностью за прошлый год (желтый блок) собственный индикатор уже добавлен.
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, Долг, КУплатеЗаТекущийПериод);
		НоваяСтрока.КУплатеТекущий = КУплатеЗаТекущийПериод;
		НоваяСтрока.КУплатеДолг = Долг;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыНПД

// Алгоритм предназначен для получения данных о налоге на профессиональный доход.
//
Процедура ПрименитьАлгоритмДляНПД(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, СчетаУчетаДС)
	
	ЗадачаПоНПД = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаНалогНаПрофессиональныйДоход(Задача.КодЗадачи) Тогда
			ЗадачаПоНПД = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоНПД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНалога = ДанныеНалогаНаПрофессиональныйДоход(Организация, Задача.ПериодСобытия);
	
	КУплатеТекущий = ДанныеНалога.СуммаНалога;
	КУплатеТекущий = Макс(КУплатеТекущий, 0);
	КУплатеДолг    = ДанныеНалога.СуммаДолга;
	
	Если ДанныеНалога.Ошибка Тогда
		Индикатор = ЦветаИндикаторов().Желтый;
	Иначе
		Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, КУплатеТекущий);
	КонецЕсли;
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоНПД);
	НоваяСтрока.Индикатор      = Индикатор;
	НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
	НоваяСтрока.КУплатеДолг    = КУплатеДолг;
	
КонецПроцедуры

Функция ДанныеНалогаНаПрофессиональныйДоход(Организация, Период)
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ПараметрыВзаимодействия = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СостояниеЛицевогоСчета");
	ПараметрыВзаимодействия.Организация = Организация;
	ОтветСервиса = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыВзаимодействия);
	
	Результат = Новый Структура();
	Результат.Вставить("СуммаНалога", 0);
	Результат.Вставить("СуммаДолга",  0);
	Результат.Вставить("Ошибка",      ОтветСервиса.Ошибка);
	
	Если НЕ ОтветСервиса.Ошибка Тогда
		
		Для Повтор = 1 По 15 Цикл
			
			Ответ = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ОтветСервиса);
			
			Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
				
				Если Ответ.Результат = Неопределено
					ИЛИ ТипЗнч(Ответ.Результат) <> Тип("Структура") Тогда
					Результат.Вставить("Ошибка", Истина);
					Прервать;
				КонецЕсли;
				Если Ответ.Результат.Свойство("ОбщаяСуммаНеоплаченныхПлатежей") Тогда
					Результат.СуммаНалога = Ответ.Результат.ОбщаяСуммаНеоплаченныхПлатежей - Ответ.Результат.СуммаЗадолженности;
					Результат.СуммаДолга  = Ответ.Результат.СуммаЗадолженности;
				КонецЕсли;
				
				Прервать;
				
			ИначеЕсли Ответ.Статус = СтатусыЗапросов.Выполняется Тогда
				ОбщегоНазначенияБТС.Пауза(Повтор);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьЖелтыйБлокНалогНаПрофессиональныйДоход(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	ИтогКУплатеТекущий = 0;
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
	КонецЦикла;
	
	Если ИтогКУплатеТекущий = 0 Тогда
		Строка0 = Нстр("ru = 'Нет данных о задолженности'");
		Блок.Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		ДобавитьСтроку1(Блок, Нстр("ru = 'Связь с сервером ФНС отсутствует'"));
	Иначе
		Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
		Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеТекущий);
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора));
		НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
		ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
		ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

#КонецОбласти

#Область АлгоритмПоОтчетам

// Алгоритм проверяет наличие и статусы отчетности в документах, связанных с отчетностью.
// Проверяются отчеты по правилам, которые включены организацией (есть в расписании). Подробнее см. СформироватьТекущиеПредстоящиеЗадачи()
// Для каждого правила по отчету подбираются задачи списка задач
// за последние 3 года (срок исковой давности), включая текущий период.
// Задачи, перемещенные в архив, считаются выполненными, соответствующие им отчеты - сданными.
// Отчет по неархивной задаче считается сданным, если ему присвоен соответствующий статус - см. ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой().
// Статус может быть присвоен:
//   - автоматически, если подключена 1С-Отчетность и отчет принят контролирующим органом;
//   - пользователем вручную, если 1С-Отчетность не используется или отчет не отправлялся в контролирующий орган.
//
Процедура ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы,
										ЗадачиПоОтчетам,
										Организация,
										ТекущийДень,
										ЭтоНулевка,
										ДатаНачалаДеятельности,
										ИндикаторВзносовИП = Неопределено)
	
	Если ЗадачиПоОтчетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, , Истина);
	
	ЗадачиПоОтчетам.Индексы.Добавить("Правило");
	
	// Для правил, имеющихся в расписании ЗадачиПоОтчетам, ищем в списке задач незакрытые отчетные задачи за последние 3 года.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ВключенныеПравила",  ОбщегоНазначения.ВыгрузитьКолонку(ЗадачиПоОтчетам, "Правило", Истина));
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила(ЭлектронныйДокументооборотДоступен, ЭтоНулевка));
	Запрос.УстановитьПараметр("НачалоОбзора",       НачалоОбзораОтчетности(Организация, ТекущийДень));
	Запрос.УстановитьПараметр("ТекущийДень",        ТекущийДень);
	Запрос.УстановитьПараметр("УсловиеПервыйПериодКампании", Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.Владелец.Код КАК КодЗадачи,
	|	Правила.Код КАК КодПравила,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПоддерживаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Ссылка В(&ВключенныеПравила)
	|	И НЕ Правила.Ссылка В (&ИсключаемыеПравила)
	|	И (Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|			ИЛИ Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ЗадачиБухгалтера.Статус КАК РучнойСтатус,
	|	ЗадачиБухгалтера.ВАрхиве КАК ВАрхиве,
	|	ПоддерживаемыеПравила.КодЗадачи КАК КодЗадачи,
	|	ПоддерживаемыеПравила.КодПравила КАК КодПравила,
	|	ПоддерживаемыеПравила.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоддерживаемыеПравила КАК ПоддерживаемыеПравила
	|		ПО ЗадачиБухгалтера.Правило = ПоддерживаемыеПравила.Правило
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоОбзора
	|	И (ЗадачиБухгалтера.ПериодСобытия < &ТекущийДень
	|			ИЛИ (ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|				И ЗадачиБухгалтера.ПериодСобытия > &ТекущийДень))
	|	И &УсловиеПервыйПериодКампании";
	
	Если ЭтоНулевка Тогда
		Запрос.УстановитьПараметр("ПервыйПериодКампании", РегистрыСведений.ПерваяОтчетнаяКампания.ПервыйПериодКампании(Организация));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПервыйПериодКампании", "ЗадачиБухгалтера.Срок >= &ПервыйПериодКампании");
	КонецЕсли;
	
	ВсеЗадачи = Запрос.Выполнить().Выгрузить();
	
	// Проверяем наличие отчетов и статусы имеющихся в наличии.
	// Для задач с отсутствующими отчетами проверяем сроки.
	// По результатам проверок устанавливаем индикатор для каждого правила.
	
	ВыполнениеОтчетныхЗадач = ВыполнениеЗадачБухгалтера.ВыполнениеЗадачПоПодготовкеОтчетов(ВсеЗадачи);
	
	СостояниеОтчетностиСдано = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
	СтатусБРОСдано = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	
	// Для задачи Заявление о зачете необходимо удалить лишние документы других периодов,
	// так как для типа регламентированного отчета Уведомление не предусмотрен период
	УдалитьДокументыДругихПериодовЗаявления(ВыполнениеОтчетныхЗадач);
	
	ДатаНачалаПроверкиСтатусовНулевойОтчетности = '00010101';
	Если ЭтоНулевка Тогда
		ДатаНачалаПроверкиСтатусовНулевойОтчетности = ДатаПодключения1СОтчетности(Организация);
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	ОтчетностьПрошлыхПериодовПоТесту = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Организация);
	
	ПравилаОтчетов = ОбщегоНазначения.ВыгрузитьКолонку(ВсеЗадачи, "Правило", Истина);
	Для Каждого Правило Из ПравилаОтчетов Цикл
		
		ОтборПравило = Новый Структура("Правило", Правило);
		
		СтрокиРасписания = ЗадачиПоОтчетам.НайтиСтроки(ОтборПравило);
		СтрокаРасписанияПоОтчету = СтрокиРасписания[0];
		
		ЭтоТекущаяЗадача = СтрокаРасписанияПоОтчету.ЭтоТекущаяЗадача;
		
		// Проходимся по задачам за каждый отчетный период -
		// выявляем состояние текущего отчета и наличие просроченных.
		
		ЗадачиПоПравилу = ВсеЗадачи.Скопировать(ОтборПравило);
		ЗадачиПоПравилу.Сортировать("ПериодСобытия Убыв");
		
		ТекущийОтчетСдан      = Ложь;
		ТекущийОтчетЕстьВБазе = Ложь;
		СтатусТекущегоОтчета  = "";
		
		ПросроченныеОтчеты = НовыйПросроченныеОтчеты();
		ОтчетыПрошлыхПериодов = НовыйОтчетыПрошлыхПериодов();
		
		Для Каждого ЗадачаПоПравилу Из ЗадачиПоПравилу Цикл
			
			ОтчетСоздан  = Ложь;
			СтатусОтчета = "";
			
			ОтборПравилоПериод = Новый Структура("Правило, ПериодСобытия", ЗадачаПоПравилу.Правило, ЗадачаПоПравилу.ПериодСобытия);
			СтрокиВыполнения = ВыполнениеОтчетныхЗадач.НайтиСтроки(ОтборПравилоПериод);
			
			Если СтрокиВыполнения.Количество() > 0 Тогда
				ВыполнениеЗадачиПоПравилу = СтрокиВыполнения[0];
				Если ВыполнениеЗадачиПоПравилу.ВАрхиве Тогда
					СтатусОтчета = СтатусБРОСдано;
				ИначеЕсли ВыполнениеЗадачиПоПравилу.СтатусУстановленВручную Тогда
					СтатусОтчета = ВыполнениеЗадачиПоПравилу.РучнойСтатус;
				Иначе
				
					ОтчетСоздан = ВыполнениеЗадачиПоПравилу.Документы.Количество() > 0;
				
					Если ОтчетСоздан Тогда
						// Значение статуса определяем по самому последнему отчету.
						// В переданной таблице сохраненные отчеты отсортированы по убыванию даты создания - надо взять первый.
						АктуальныйОтчет = ВыполнениеЗадачиПоПравилу.Документы[0];
						
						// В режиме Нулевка пользователи начинают работать без 1С-Отчетности.
						// Отчеты создаются автоматически и пользователь их статусами не управляет.
						// Поэтому отчеты помещается в индикатор как сданные по факту своего наличия, без проверки статусов.
						// Если же пользователь Нулевки подключит 1С-Отчетность, статусы отчетов начнут учитываться.
						// Но для отчетов, созданных ранее даты подключения 1С-Отчетности, требуется сохранить старое поведение.
						Если ЭтоНулевка И АктуальныйОтчет.Дата < ДатаНачалаПроверкиСтатусовНулевойОтчетности Тогда
							СтатусОтчета = СтатусБРОСдано;
						Иначе
							Если АктуальныйОтчет.СостояниеСдачиОтчетности = СостояниеОтчетностиСдано Тогда
								СтатусОтчета = СтатусБРОСдано;
							Иначе
								СтатусОтчета = АктуальныйОтчет.Статус;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОтчетСдан = (СтатусОтчета = СтатусБРОСдано);
			
			// Когда создана задача следующего квартала,
			// нужно убедиться что выбрана задача за нужный квартал
			Если ЭтоПравилоЗаявлениеЗачетВзносов(ЗадачаПоПравилу.КодПравила) Тогда
				ЭтоТекущийОтчет = ЭтоТекущаяЗадача
					И КонецКвартала(ЗадачаПоПравилу.ПериодСобытия) = КонецКвартала(СтрокаРасписанияПоОтчету.ПериодСобытия);
			Иначе
				ЭтоТекущийОтчет = ЭтоТекущаяЗадача И ЗадачиПоПравилу.Индекс(ЗадачаПоПравилу) = 0;
			КонецЕсли;
			
			Если ЭтоТекущийОтчет Тогда
				ТекущийОтчетСдан      = ОтчетСдан;
				ТекущийОтчетЕстьВБазе = ОтчетСоздан;
				СтатусТекущегоОтчета  = СтатусОтчета;
			КонецЕсли;
			
			// Выявляем просроченные отчеты.
			Если ЗадачаПоПравилу.Срок < ТекущийДень И НЕ ОтчетСдан Тогда
				Если ЭтоОтчетностьПрошлыхПериодовПоТесту(ЗадачаПоПравилу, ОтчетностьПрошлыхПериодовПоТесту) Тогда
					ОтчетПрошлыхПериодов = ОтчетыПрошлыхПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(ОтчетПрошлыхПериодов, ЗадачаПоПравилу);
					ОтчетПрошлыхПериодов.Статус = СтатусОтчета;
				Иначе
					ПросроченныйОтчет = ПросроченныеОтчеты.Добавить();
					ЗаполнитьЗначенияСвойств(ПросроченныйОтчет, ЗадачаПоПравилу);
					ПросроченныйОтчет.Статус = СтатусОтчета;
					ПросроченныйОтчет.ОтноситсяКПрошломуПериоду = ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
						И ЗадачаПоПравилу.ПериодСобытия <= ГраницаОтчетностиПрошлыхПериодов;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоЗадачаАУСН(ЗадачаПоПравилу.КодЗадачи) Тогда
				СтрокаРасписанияПоОтчету.Наименование = СтрШаблон(НСтр("ru = 'Банковские операции за %1'"),
					КалендарьБухгалтера.ПредставлениеПериодаСобытия(
						СтрокаРасписанияПоОтчету.НачалоПериодаСобытия,
						СтрокаРасписанияПоОтчету.ПериодСобытия));
			КонецЕсли;
			
		КонецЦикла;
		
		// Назначаем индикатор.
		
		НуженПомощникОтчетовПрошлыхПериодов = НужноПоказатьПомощникПрошлыхПериодов(
			Организация, СтрокаРасписанияПоОтчету.КодЗадачи, ЭтоНулевка);
		
		Индикатор = ЦветаИндикаторов().Зеленый;
		
		Если ПросроченныеОтчеты.Количество() = 0
			И ОтчетыПрошлыхПериодов.Количество() = 0 Тогда
			
			Если НуженПомощникОтчетовПрошлыхПериодов Тогда
				Индикатор = ЦветаИндикаторов().Желтый;
			Иначе
				// Просроченных отчетов нет, анализируем сроки текущего отчетного периода.
				Если СтрокаРасписанияПоОтчету.НачалоВыполнения > ТекущийДень Тогда
					// Отчет еще рано предоставлять, отображаем зеленый индикатор.
					Индикатор = ЦветаИндикаторов().Зеленый;
				ИначеЕсли ТекущийОтчетСдан Тогда
					Индикатор = ЦветаИндикаторов().Зеленый;
				ИначеЕсли Не ТекущийОтчетСдан Тогда
					Индикатор = ЦветаИндикаторов().Желтый;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Есть просроченные отчеты за предыдущие периоды.
			Индикатор = ЦветаИндикаторов().Красный;
		КонецЕсли;
		
		// Если взносы оплатили за квартал, то можно показывать задачу по заявлению
		Если ЗначениеЗаполнено(ИндикаторВзносовИП) Тогда
			ОтображатьЗадачуПоЗаявлению = ИндикаторВзносовИП.Индикатор = "Зеленый";
		Иначе
			ОтображатьЗадачуПоЗаявлению = Ложь;
		КонецЕсли;
	
		Если Не ЭтоПравилоЗаявлениеЗачетВзносов(СтрокаРасписанияПоОтчету.КодПравила)
			Или ОтображатьЗадачуПоЗаявлению Тогда
			НоваяСтрока = ОтчетныеИндикаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасписанияПоОтчету);
			
			НоваяСтрока.ПросроченныеОтчеты    = ПросроченныеОтчеты;
			НоваяСтрока.ОтчетыПрошлыхПериодов = ОтчетыПрошлыхПериодов;
			НоваяСтрока.Индикатор             = Индикатор;
			НоваяСтрока.СтатусТекущегоОтчета  = СтатусТекущегоОтчета;
			НоваяСтрока.ТекущийОтчетСдан      = ТекущийОтчетСдан;
			НоваяСтрока.ТекущийОтчетЕстьВБазе = ТекущийОтчетЕстьВБазе;
			НоваяСтрока.НуженПомощникОтчетовПрошлыхПериодов = НуженПомощникОтчетовПрошлыхПериодов;
		КонецЕсли;
		
		// Удалим обработанную строку расписания.
		// Это позволит выявить часть расписания, для которой отсутствуют задачи бухгалтера.
		// Всем задачам этой части тоже требуется назначить индикатор.
		УдалитьСтрокиТаблицы(ЗадачиПоОтчетам, СтрокиРасписания);
		
	КонецЦикла;
	
	
	// Добавим индикаторы по задачам расписания, которых не оказалось в списке задач.
	// Такое может быть, когда срок первой задачи еще далеко "в будущем", или когда все задачи помещены в архив.
	Для каждого Задача Из ЗадачиПоОтчетам Цикл
		
		НоваяСтрока = ОтчетныеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		НуженПомощникОтчетовПрошлыхПериодов = НужноПоказатьПомощникПрошлыхПериодов(
			Организация, Задача.КодЗадачи, ЭтоНулевка);
		
		Если ЭтоНулевка и НуженПомощникОтчетовПрошлыхПериодов Тогда
			ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
			ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, Задача);
			Если ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация,
				Задача.НачалоПериодаСобытия, ОсобенностиОтчета, ДатаНачалаДеятельности) Тогда
				НуженПомощникОтчетовПрошлыхПериодов = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НуженПомощникОтчетовПрошлыхПериодов Тогда
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
		Иначе
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Зеленый;
		КонецЕсли;
		
		НоваяСтрока.ТекущийОтчетСдан = Ложь;
		НоваяСтрока.ТекущийОтчетЕстьВБазе = Ложь;
		НоваяСтрока.НуженПомощникОтчетовПрошлыхПериодов = НуженПомощникОтчетовПрошлыхПериодов;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МинимальныйСрокПросроченногоОтчетаИндикатора(Индикатор)
	
	МинимальныйСрок = Неопределено;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ПросроченныеОтчеты Цикл
		
		Если Не ЗначениеЗаполнено(МинимальныйСрок) 
			Или ПросроченныйОтчет.Срок < МинимальныйСрок Тогда
			МинимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ОтчетыПрошлыхПериодов Цикл
		
		Если Не ЗначениеЗаполнено(МинимальныйСрок)
			Или ПросроченныйОтчет.Срок < МинимальныйСрок Тогда
			МинимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальныйСрок;
	
КонецФункции

Функция МаксимальныйСрокПросроченногоОтчетаИндикатора(Индикатор)
	
	МаксимальныйСрок = Неопределено;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ПросроченныеОтчеты Цикл
		
		Если Не ЗначениеЗаполнено(МаксимальныйСрок) 
			Или ПросроченныйОтчет.Срок > МаксимальныйСрок Тогда
			МаксимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ОтчетыПрошлыхПериодов Цикл
		
		Если Не ЗначениеЗаполнено(МаксимальныйСрок)
			Или ПросроченныйОтчет.Срок > МаксимальныйСрок Тогда
			МаксимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксимальныйСрок;
	
КонецФункции

Функция ДатаПодключения1СОтчетности(Организация)
	
	ДатаПодключенияПоУмолчанию = '39991231'; // Возможно, когда-нибудь в далеком будущем пользователь оплатит и подключит 1С-Отчетность.
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаПодключения1СОтчетности = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДатаПодключения1СОтчетности <> Неопределено Тогда
		Возврат ДатаПодключения1СОтчетности;
	КонецЕсли;
	
	Возврат ДатаПодключенияПоУмолчанию;
	
КонецФункции

Функция НовыйПросроченныеОтчеты()
	
	ПросроченныеОтчеты = Новый ТаблицаЗначений;
	ПросроченныеОтчеты.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПросроченныеОтчеты.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ПросроченныеОтчеты.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПросроченныеОтчеты.Колонки.Добавить("ОтноситсяКПрошломуПериоду", Новый ОписаниеТипов("Булево"));
	
	Возврат ПросроченныеОтчеты;
	
КонецФункции

Функция НовыйОтчетыПрошлыхПериодов()
	
	ОтчетыПрошлыхПериодов = Новый ТаблицаЗначений;
	ОтчетыПрошлыхПериодов.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОтчетыПрошлыхПериодов.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОтчетыПрошлыхПериодов.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ОтчетыПрошлыхПериодов;
	
КонецФункции

Процедура УдалитьДокументыДругихПериодовЗаявления(ВыполнениеОтчетныхЗадач)
	ДокументыПоСроку = Неопределено;
	Для каждого ВыполненнаяЗадача Из ВыполнениеОтчетныхЗадач Цикл
		Если ЭтоПравилоЗаявлениеЗачетВзносов(ВыполненнаяЗадача.ИдентификаторПравила) Тогда
			Если Не ЗначениеЗаполнено(ДокументыПоСроку) Тогда
				ДокументыПоСроку = ВыполненнаяЗадача.Документы.СкопироватьКолонки();
			КонецЕсли;
			Для каждого ДокументЗаявление Из ВыполненнаяЗадача.Документы Цикл
				Если НачалоДня(КонецКвартала(ДокументЗаявление.Дата)) = ВыполненнаяЗадача.ДатаОкончания Тогда
					НоваяСтрока = ДокументыПоСроку.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументЗаявление);
				КонецЕсли;
			КонецЦикла;
			ВыполненнаяЗадача.Документы = ДокументыПоСроку.Скопировать();
			ДокументыПоСроку.Очистить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыНулеваяДеятельность

Процедура ДобавитьИндикаторНулеваяОтчетность(ОтчетныеИндикаторы, РазвернутыеИндикаторы, Организация, ТекущийДень, ТаблицаПолучателей, ПрошедшиеЗадачиОрганизации)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПолучателей Цикл
		
		РазвернутыеИндикаторыВременная = РазвернутыеИндикаторы.Скопировать(Новый Структура("Получатель", СтрокаТаблицы.Получатель));
		РазвернутыеИндикаторыВременная.Колонки.Добавить("НачалоБлижайшейЗадачи");
		Для Каждого СтрокаИндикатора Из РазвернутыеИндикаторыВременная Цикл
			СтрокаИндикатора.НачалоБлижайшейЗадачи = СтрокаИндикатора.БудущаяЗадача.НачалоВыполнения;
		КонецЦикла;
		РазвернутыеИндикаторыВременная.Сортировать("НачалоБлижайшейЗадачи");
		
		ПоказательПериода = МинимальныйОтчетныйПериод(РазвернутыеИндикаторыВременная.ВыгрузитьКолонку("Периодичность"));
		
		НоваяСтрока = ОтчетныеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеРеквизитыИндикатораДеятельностьОтсутствует());
		
		Индикатор = СамыйКритичныйИндикатор(РазвернутыеИндикаторыВременная.ВыгрузитьКолонку("Индикатор"));
		
		НоваяСтрока.Индикатор = Индикатор;
		
		КритичныеИндикаторы = РазвернутыеИндикаторыВременная.Скопировать(Новый Структура("Индикатор", Индикатор));
		
		// Определяем свойства сводной задачи по наиболее критичному из отчетов
		
		// для зеленого индикатора - ищем ближайшую задачу по началу периода события
		// для желтого индикатора - ничего не ищем, он показывает единообразную ссылку на Помощник, в котором своя логика критичности
		// для красного индикатора самая критичная - очевидно, задача с самым протухшим Сроком.
		
		Если Индикатор = ЦветаИндикаторов().Зеленый Тогда
			
			БлижайшаяЗадача       = Неопределено;
			НачалоБлижайшейЗадачи = Дата(3999, 1, 1);
			БлижайшийСрок         = Дата(3999, 1, 1);
			ТекущийОтчетСдан      = Ложь;
			
			//Подбираем ближайшую предстоящую задачу.
			Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаИндикатора.НачалоБлижайшейЗадачи) Тогда
					Если ПравилаРазовыхЗадач().Найти(СтрокаИндикатора.Правило) <> Неопределено Тогда
						НазначитьБлижайшуюЗадачуРазовойЗадаче(СтрокаИндикатора, КритичныеИндикаторы)
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИндикатора.БудущаяЗадача.Срок)
					И СтрокаИндикатора.БудущаяЗадача.Срок < БлижайшийСрок Тогда
					БлижайшийСрок = СтрокаИндикатора.БудущаяЗадача.Срок;
					БлижайшаяЗадача = СтрокаИндикатора;
				КонецЕсли;
				Если СтрокаИндикатора.ТекущийОтчетСдан Тогда
					ТекущийОтчетСдан = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если БлижайшаяЗадача <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, БлижайшаяЗадача, , "Владелец, Наименование");
				НоваяСтрока.Периодичность    = ПоказательПериода;
				НоваяСтрока.ТекущийОтчетСдан = ТекущийОтчетСдан;
				
				// Переопределим индикатор, если требуется запустить тест на просроченные отчеты
				ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
				ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, БлижайшаяЗадача);
				
				Если РегистрыСведений.ПерваяОтчетнаяКампания.ЭтоПерваяОтчетнаяКампания(Организация, ТекущийДень, ПоказательПериода) Тогда
					
					ЭтоПервыйОтчетныйПериод = ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация, НоваяСтрока.ПериодСобытия, ОсобенностиОтчета);
					
					Если НЕ ЭтоПервыйОтчетныйПериод
						И НЕ РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ПроверкаВыполнена(Организация, СтрокаТаблицы.Получатель) Тогда
						НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Индикатор = ЦветаИндикаторов().Желтый Тогда
			
			//Подбираем ближайшую по крайнему сроку задачу.
			БлижайшаяЗадача = Неопределено;
			БлижайшийСрок   = Дата(3999, 1, 1);
			
			Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
				Если СтрокаИндикатора.Срок < БлижайшийСрок Тогда
					БлижайшийСрок = СтрокаИндикатора.Срок;
					БлижайшаяЗадача = СтрокаИндикатора;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(БлижайшаяЗадача) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, БлижайшаяЗадача, , "Владелец, Наименование");
			КонецЕсли;
			
		ИначеЕсли Индикатор = ЦветаИндикаторов().Красный Тогда
			
			//Подбираем наиболее просроченную задачу.
			КритичнаяЗадача = Неопределено;
			КритичныйСрок   = ТекущийДень;
			
			Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
				
				МинимальныйСрокПросроченногоОтчета = МинимальныйСрокПросроченногоОтчетаИндикатора(СтрокаИндикатора);
				Если ЗначениеЗаполнено(МинимальныйСрокПросроченногоОтчета)
					И МинимальныйСрокПросроченногоОтчета < КритичныйСрок Тогда
					КритичныйСрок = МинимальныйСрокПросроченногоОтчета;
					КритичнаяЗадача = СтрокаИндикатора;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(КритичнаяЗадача) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КритичнаяЗадача, , "Владелец, Правило, Наименование");
			КонецЕсли;
			
		КонецЕсли;
		
		ПрошедшиеЗадачиОрганизацииВременная = ПрошедшиеЗадачиОрганизации.Скопировать(Новый Структура("Получатель", СтрокаТаблицы.Получатель));
		НоваяСтрока.ПравилаПрошлыхПериодов = ПрошедшиеЗадачиОрганизацииВременная;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбщиеРеквизитыИндикатораДеятельностьОтсутствует(ИмяПолучателя = "")
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Справочники.ЗадачиБухгалтера.ПустаяСсылка());
	Результат.Вставить("Наименование", ИмяЗадачиНулеваяОтчетность(ИмяПолучателя));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗадачуНулеваяОтчетность(ВключенныеЗадачи, ТаблицаПолучателей)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПолучателей Цикл
		
		ИмяПолучателя = ?(ТаблицаПолучателей.Количество() > 1, СтрокаТаблицы.ОписаниеПолучателя, "");
		
		НоваяСтрока = ВключенныеЗадачи.Вставить(0);
		
		НоваяСтрока.Владелец   = Справочники.ЗадачиБухгалтера.ПустаяСсылка();
		НоваяСтрока.ИмяЗадачи  = ИмяЗадачиНулеваяОтчетность(ИмяПолучателя);
		НоваяСтрока.КодЗадачи  = КодЗадачиНулеваяОтчетность(СтрокаТаблицы.Получатель);
		НоваяСтрока.Получатель = СтрокаТаблицы.Получатель;
		НоваяСтрока.Порядок    = 0;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыОтчетностиПрошлыхПериодов

Функция НужноПоказатьПомощникПрошлыхПериодов(Организация, КодЗадачи, ЭтоНулевка)
	
	Если КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН() Тогда
		Возврат ТребуетсяТестОтчетностиПрошлыхПериодовПоУСН(Организация, ЭтоНулевка);
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель() Тогда
		Возврат ТребуетсяТестОтчетностиПрошлыхПериодовПоНДФЛ_ИП(Организация);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВведеныНачальныеОстаткиПоУСН(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если Не ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетУСН.НачальныеОстаткиПоНалогуВведены(Организация);
	
КонецФункции

Функция ВведеныНачальныеОстаткиПоВзносамИП(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если Не ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетСтраховыхВзносовИП.НачальныеОстаткиПоВзносамВведены(Организация);
	
КонецФункции

Функция ВведеныНачальныеОстаткиПоНДФЛ_ИП(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если Не ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетНДФЛПредпринимателя.НачальныеОстаткиПоНалогуВведены(Организация);
	
КонецФункции

Функция СозданыДекларацииПоНалогу(Организация, ИсточникОтчета)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ИсточникОтчета", ИсточникОтчета);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентированныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог)
	
	Если ЭтоНалог Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.НуженПомощникОтчетовПрошлыхПериодов Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьСсылкуНаПомощникОтчетовПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора)
	
	Если Не ЭтоНалог Тогда
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Индикатор.НуженПомощникОтчетовПрошлыхПериодов Тогда
				// Ссылка ведет к тесту на отчетность прошлых периодов.
				ОписаниеДействия = ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(
					ПараметрыМонитора.Организация,
					Индикатор, 
					Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ОтчетныйПериодДляЗапускаТеста(
						Индикатор.Правило, ПараметрыМонитора.Организация),
						ПараметрыМонитора.УпрощеннаяНулеваяОтчетность);
				ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтчетностьПрошлыхПериодовПоТесту(ЗадачаПоПравилу, ОтчетностьПрошлыхПериодовПоТесту)
	
	Если Не ЗначениеЗаполнено(ОтчетностьПрошлыхПериодовПоТесту) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ПериодСобытия", ЗадачаПоПравилу.ПериодСобытия);
	Отбор.Вставить("Правило", ЗадачаПоПравилу.Правило);
	Отбор.Вставить("Требуется", Истина);
	
	Возврат ОтчетностьПрошлыхПериодовПоТесту.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыОплатыНалоговПрошлыхПериодов

Функция НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог)
	
	Если Не ЭтоНалог Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.НуженПомощникНалоговПрошлыхПериодов И Индикатор.КУплатеДолг = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьСсылкуНаПомощникОплатыНалоговПрошлыхПериодов(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		
		Если Индикатор.НуженПомощникНалоговПрошлыхПериодов Тогда
			// Ссылка ведет к тесту на отчетность прошлых периодов.
			ОписаниеДействия = ОписаниеДействияОплатитьНалогиПрошлыхПериодов(
				ПараметрыМонитора,
				Индикатор.Правило, КодЗадачи);
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеДействияОплатитьНалогиПрошлыхПериодов(ПараметрыМонитора, Правило, КодЗадачи, ПериодСобытия = Неопределено)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыМонитора.Организация);
	ПараметрыФормы.Вставить("Правило",     Правило);
	Если ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды");
		СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
			ПараметрыМонитора.Организация, ОбщегоНазначения.ТекущаяДатаПользователя());
		ПараметрыФормы.Вставить("АдресСведенийОбОрганизации",
			ПоместитьВоВременноеХранилище(СведенияОбОрганизации, ПараметрыМонитора.УникальныйИдентификатор));
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ИначеЕсли ЭтоЗадачаНДФЛПредприниматель(КодЗадачи) И ЗначениеЗаполнено(ПериодСобытия) Тогда
		
		ПараметрыФормы.Вставить("ПериодСобытия", ПериодСобытия);
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПомощникОплатыНДФЛПрошлыхПериодов(ПараметрыФормы);
	Иначе
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоНалогуЗаПрошлыеПериоды");
		ПараметрыФормы.Вставить("ОплатитьНалогПослеТеста", Истина);
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоОплатаНалогаЗаПрошлыйПериод(Организация, ПериодСобытия, Периодичность)

	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонецПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПериодСобытия);
	
	// Событие завершилось до начала ведения учета
	Если КонецПериодаСобытия <= КонецДня(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецЕсли