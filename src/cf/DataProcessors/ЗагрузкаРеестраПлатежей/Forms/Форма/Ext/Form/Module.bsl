
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ТекстИсключения;
	
	СлужебныеПараметры = "ЗакрыватьПриВыборе, ЗакрыватьПриЗакрытииВладельца, ТолькоПросмотр";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,, СлужебныеПараметры);
	
	КолонкиРеестра = Новый Структура("ИндексыКолонокРеестра");
	ЗаполнитьЗначенияСвойств(КолонкиРеестра, Параметры);
	
	Если КолонкиРеестра.ИндексыКолонокРеестра = Неопределено Тогда
		КолонкиРеестра.ИндексыКолонокРеестра = Новый Соответствие;
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты();
	
	ПодготовитьФормуНаСервере();
	
	Если НЕ ЗначениеЗаполнено(КлючевыеРеквизиты) Тогда
		ТекстИсключения = НСтр("ru = 'Загрузка реестра возможна только для банковских счетов с настроенными дополнительными реквизитами'");
	ИначеЕсли Не ЗначениеЗаполнено(АдресФайла) Или Не ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		ТекстИсключения = НСтр("ru = 'Не выбран файл для загрузки.
			|Откройте обработку из формы списка участков с помощью команды ""Загрузить"".'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли; 
	
	ОписаниеЗагружаемыхКолонок = Обработки.ЗагрузкаРеестраПлатежей.ОписаниеЗагружаемыхКолонок(КлючевыеРеквизиты);
	ОписаниеКолонок.Загрузить(ОписаниеЗагружаемыхКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодготовитьТабличныйДокумент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УдалитьИзВременногоХранилища(АдресФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ДанныеФайлаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Верх = 1 И Область.Лево <= ДанныеФайла.ШиринаТаблицы Тогда
		
		ДопПараметрОповещения = Новый Структура("ТекущаяОбласть, НомерКолонки", Область, Область.Лево);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДанныеФайлаВыборЗавершение", ЭтотОбъект, ДопПараметрОповещения);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОписаниеКолонок", ОписаниеКолонокВоВременномХранилище());
		ОткрытьФорму("ОбщаяФорма.ВыборКолонокПриЗагрузкеИзФайла", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайлаВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Или РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Идентификатор <> "" Тогда
		КлючевыеРеквизитыСопоставлены = Ложь;
		
		ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
		Для НомерКолонки = 1 по ШиринаТаблицы Цикл
			Область = ДанныеФайла.Область(1, НомерКолонки);
			
			// Если выбран хотя бы один ключевой реквизит 
			Если КлючевыеРеквизиты.НайтиПоЗначению(Область.ПараметрРасшифровки) <> Неопределено Тогда
				КлючевыеРеквизитыСопоставлены = Истина;
			КонецЕсли; 
			
			// Если раньше этот идентификатор был выбран в какой-то другой колонке,
			// то нужно эту колонку найти и установить признак, что она не загружается.
			Если Область.ПараметрРасшифровки = РезультатЗакрытия.Идентификатор
				Или ПустаяСтрока(Область.ПараметрРасшифровки) Тогда
				УстановитьСвойстваЯчейкиЗаголовка(Область, "", "");
			КонецЕсли;
		КонецЦикла;
		УстановитьСвойстваЯчейкиЗаголовка(ДополнительныеПараметры.ТекущаяОбласть, РезультатЗакрытия.Идентификатор, РезультатЗакрытия.Представление);
	Иначе
		УстановитьСвойстваЯчейкиЗаголовка(ДополнительныеПараметры.ТекущаяОбласть, "", "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	
	ЗаголовкиЗаполнены = ЗагрузкаДанныхИзВнешнихФайловКлиент.ЗаполненыВсеОбязательныеЗаголовкиКолонок(
		ДанныеФайла, "ДанныеФайла", ОписаниеКолонок);
	
	Если Не ЗаголовкиЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполненыЗаголовкиКлючевыеКолонки() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПодготовитьТаблицуДанныхДляЗагрузкиНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Обработчик = Новый ОписаниеОповещения("ПодготовитьТаблицуДанныхДляЗагрузкиЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Верх = ДанныеФайла.ТекущаяОбласть.Верх;
	Низ  = ДанныеФайла.ТекущаяОбласть.Низ;
	Лево = ДанныеФайла.ТекущаяОбласть.Лево;
	
	Если Верх = 1 И Низ = 1 Тогда
		Возврат; // выделена первая строка (строка заголовка)
	КонецЕсли;
	
	УдалитьСтрокиНаСервере(Верх, Низ);
	Элементы.ДанныеФайла.ТекущаяОбласть = ДанныеФайла.Область(Верх, Лево);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаТабличногоДокумента

&НаКлиенте
Процедура Подключаемый_ПодготовитьТабличныйДокумент()
	
	ОписаниеРеестра = Новый Структура;
	ОписаниеРеестра.Вставить("ОписаниеКолонок",       ОписаниеКолонок);
	ОписаниеРеестра.Вставить("НачалоСтрокРеестра",    НачалоСтрокРеестра);
	ОписаниеРеестра.Вставить("ОкончаниеСтрокРеестра", ОкончаниеСтрокРеестра);
	ОписаниеРеестра.Вставить("Разделитель",           Разделитель);
	
	ДлительнаяОперация = ПодготовитьТабличныйДокументСервер(
		АдресФайла, РасширениеФайла, УникальныйИдентификатор, ОписаниеРеестра);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Обработчик = Новый ОписаниеОповещения("ПодготовитьТабличныйДокументЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТабличныйДокументСервер(Знач АдресФайла, Знач РасширениеФайла, Знач ИдентификаторФормы, Знач ОписаниеРеестра)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("РасширениеФайла",       РасширениеФайла);
	ПараметрыЗадания.Вставить("ХранилищеДанныхФайла",  ХранилищеДанных);
	ПараметрыЗадания.Вставить("ОписаниеКолонок",       ОписаниеРеестра.ОписаниеКолонок.Выгрузить());
	ПараметрыЗадания.Вставить("НачалоСтрокРеестра",    ОписаниеРеестра.НачалоСтрокРеестра);
	ПараметрыЗадания.Вставить("ОкончаниеСтрокРеестра", ОписаниеРеестра.ОкончаниеСтрокРеестра);
	ПараметрыЗадания.Вставить("Разделитель",           ОписаниеРеестра.Разделитель);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка табличного документа к загрузке'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаРеестраПлатежей.ОбработатьДанныеИзФайла",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьТабличныйДокументЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗаполнитьТабличныйДокументСервер(ДлительнаяОперация.АдресРезультата);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	
	Если СброситьНастройку Тогда
		СоответствиеКолонок = КолонкиПоУмолчаниюИзНастроек(ОписаниеКолонок,
			ШиринаТаблицы, КолонкиРеестра.ИндексыКолонокРеестра, КлючевыеРеквизиты);
	Иначе
		СоответствиеКолонок = СоответствиеИменКолонокЗагружаемымДанным();
	КонецЕсли;
	
	Для НомерКолонки = 1 по ШиринаТаблицы Цикл
		Область = ДанныеФайла.Область(1, НомерКолонки);
		Если СоответствиеКолонок[НомерКолонки] = Неопределено Тогда
			УстановитьСвойстваЯчейкиЗаголовка(Область, "", "");
		Иначе
			УстановитьСвойстваЯчейкиЗаголовка(Область,
				СоответствиеКолонок[НомерКолонки].Идентификатор, СоответствиеКолонок[НомерКолонки].Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныйДокументСервер(АдресРезультата)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДанныеФайла = ЗагруженныеДанные.ДанныеФайла.Получить();
	УдалитьИзВременногоХранилища(АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеЛишнихДанных

&НаСервере
Процедура УдалитьСтрокиНаСервере(Верх, Низ)
	
	Если Верх = 1 Тогда
		Верх = 2; // чтобы не удалить заголовки колонок
	КонецЕсли;
	
	Область = ДанныеФайла.Область(Верх,, Низ);
	ДанныеФайла.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаТаблицыДанныхДляЗагрузки

&НаСервере
Функция ПодготовитьТаблицуДанныхДляЗагрузкиНаСервере()
	
	СохранитьПользовательскиеСоответствияКолонок();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация", Организация);
	ПараметрыЗадания.Вставить("БанковскийСчет", БанковскийСчет);
	ПараметрыЗадания.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ПараметрыЗадания.Вставить("РежимНастройки", РежимНастройки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка таблицы данных при загрузке реестра взносов.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаРеестраПлатежей.ПолучитьТаблицуДанныхДляЗагрузки",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьТаблицуДанныхДляЗагрузкиЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Если РежимНастройки Тогда
			Закрыть();
		Иначе
			Закрыть(ДлительнаяОперация.АдресРезультата);
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Не РежимНастройки Тогда
		Элементы.ДекорацияЗаголовок.РасширеннаяПодсказка.Заголовок =
			СтрШаблон(Элементы.ДекорацияЗаголовок.РасширеннаяПодсказка.Заголовок, "");
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Настройка'");
	Элементы.ДекорацияЗаголовок.РасширеннаяПодсказка.Заголовок =
		СтрШаблон(Элементы.ДекорацияЗаголовок.РасширеннаяПодсказка.Заголовок, "После загрузки реестра настройки будут сохранены");
	
	Элементы.Загрузить.Заголовок = НСтр("ru = 'Сохранить настройки'");
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокВоВременномХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ОписаниеКолонок.Выгрузить());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйРезультатНастройки()
	
	Возврат Новый Структура("Идентификатор, Представление");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерКолонкиРеквизита(ИндексыКолонокРеестра, ИмяРеквизита)
	
	Результат = 0;
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ИндексыКолонокРеестра Цикл
		Если КлючИЗначение.Значение = ИмяРеквизита Тогда
			Результат = КлючИЗначение.Ключ + 1; // Номер колонки из индекса.
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьИдентификаторНовойНастройки(Результат,
									Идентификатор,
									ИндексыКолонокРеестра,
									ОписаниеКолонок,
									НомерПоследнейКолонки)
	
	НомерКолонки = НомерКолонкиРеквизита(ИндексыКолонокРеестра, Идентификатор);
	
	//Возвращаем пустой идентификатор, если не нашли его в настройках
	// и неопределенный результат, если настройки не соответствуют файлу.
	
	Если НомерКолонки > НомерПоследнейКолонки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НомерКолонки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	РезультатНастройки = НовыйРезультатНастройки();
	РезультатНастройки.Идентификатор = Идентификатор;
	РезультатНастройки.Представление = ПредставлениеКолонки(РезультатНастройки.Идентификатор, ОписаниеКолонок);
	Результат.Вставить(НомерКолонки, РезультатНастройки);
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыРеестра(КлючевыеРеквизиты)
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ДатаПлатежа");
	Идентификаторы.Добавить("КомиссияБанка");
	Идентификаторы.Добавить("СуммаБезКомиссии");
	Идентификаторы.Добавить("СуммаПлатежа");
	
	ОБщегоНазначенияКлиентСервер.ДополнитьМассив(Идентификаторы, КлючевыеРеквизиты);
	
	Возврат Идентификаторы;
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты() 
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокРеквизитов = Справочники.РеквизитыКодаДляОплаты.СписокРеквизитов();
	
	РеквизитыРеестраПоСчету = Обработки.ЗагрузкаРеестраПлатежей.ДополнительныеРеквизитыРеестра(БанковскийСчет);
	
	Для каждого Реквизит Из РеквизитыРеестраПоСчету Цикл
		КлючевыеРеквизиты.Добавить(Реквизит.Код, СписокРеквизитов[Реквизит.Код].Представление);
	КонецЦикла; 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиПоУмолчаниюИзНастроек(ОписаниеКолонок,
						   НомерПоследнейКолонки,
						   ИндексыКолонокРеестра,
						   ДополнительныеРеквизитыПлатежа)
	
	Результат = Новый Соответствие;
	Для Каждого ИдентификаторРеестра Из ИдентификаторыРеестра(ДополнительныеРеквизитыПлатежа.ВыгрузитьЗначения()) Цикл
		Идентификатор = ДобавитьИдентификаторНовойНастройки(
			Результат, ИдентификаторРеестра, ИндексыКолонокРеестра, ОписаниеКолонок, НомерПоследнейКолонки);
		
		Если Идентификатор = Неопределено Тогда // Настройки не соответствую файлу.
			Возврат Новый Соответствие;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоответствиеИменНомерамКолонок() Экспорт
	
	СоответствиеИменКолонок = Новый Соответствие;
	
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	Для НомерКолонки = 1 по ШиринаТаблицы Цикл
		Область = ДанныеФайла.Область(1, НомерКолонки);
		Если ЗначениеЗаполнено(Область.ПараметрРасшифровки) Тогда
			НайденныеКолонки = ОписаниеКолонок.НайтиСтроки(Новый Структура("Идентификатор", Область.ПараметрРасшифровки));
			Если НайденныеКолонки.Количество() > 0 Тогда
				Колонка = НайденныеКолонки[0];
				СоответствиеИменКолонок.Вставить(НомерКолонки,
					Новый Структура("Идентификатор, Представление", Колонка.Идентификатор, Колонка.ПредставлениеКолонки));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеИменКолонок.Вставить("КоличествоКолонок", ШиринаТаблицы);
	
	Возврат СоответствиеИменКолонок;
	
КонецФункции

&НаСервере
Процедура СохранитьПользовательскиеСоответствияКолонок()
	
	СоответствияИменКолонок = СоответствиеИменНомерамКолонок();
	Обработки.ЗагрузкаРеестраПлатежей.СохранитьСоответствиеИменКолонокЗагружаемымДанным(БанковскийСчет, СоответствияИменКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЯчейкиЗаголовка(Область, Идентификатор, Представление)
	
	Область.ПараметрРасшифровки = Идентификатор;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Область.Текст = Представление;
		Область.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветГиперссылки");
	Иначе
		Область.Текст = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
		Если КлючевыеРеквизитыСопоставлены Тогда
			Область.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстПодобранногоЗначенияЦвет");
		Иначе
			Область.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("НезаполненныйРеквизит");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполненыЗаголовкиКлючевыеКолонки()
	
	КлючевыеКолонки = КлючевыеКолонки();
	
	Если Не ВыбранаХотяБыОднаКлючеваяКолонка(КлючевыеКолонки) Тогда
		ПоследняяКолонка = "";
		ОписанияКолонок = Новый Массив;
		Счетчик = 0;
		Для Каждого КлючеваяКолонка Из КлючевыеКолонки Цикл
			Счетчик = Счетчик + 1;
			Если Счетчик = 2 Или Счетчик < КлючевыеКолонки.Количество() Тогда
				ОписанияКолонок.Добавить("""" + ПредставлениеКолонки(КлючеваяКолонка, ОписаниеКолонок) + """");
			Иначе
				ПоследняяКолонка = """" + ПредставлениеКолонки(КлючеваяКолонка, ОписаниеКолонок) + """";
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ПоследняяКолонка) Тогда
			ТекстКолонок = СтрСоединить(ОписанияКолонок, " " + НСтр("ru = 'или'") + " ");
		Иначе
			ТекстКолонок = СтрСоединить(ОписанияКолонок, ", ");
			ОписанияКолонок = Новый Массив;
			ОписанияКолонок.Добавить(ТекстКолонок);
			ОписанияКолонок.Добавить(ПоследняяКолонка);
			ТекстКолонок = СтрСоединить(ОписанияКолонок, " " + НСтр("ru = 'или'") + " ");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Необходимо обязательно указать колонки %1.'"), ТекстКолонок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДанныеФайла");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция КлючевыеКолонки()
	Возврат КлючевыеРеквизиты.ВыгрузитьЗначения();
КонецФункции

&НаКлиенте
Функция ВыбранаХотяБыОднаКлючеваяКолонка(КлючевыеКолонки)
	
	ЗаполненныеЗаголовкиКолонок = ЗагрузкаДанныхИзВнешнихФайловКлиент.ЗаполненныеЗаголовкиКолонок(ДанныеФайла);
	
	Для Каждого КлючеваяКолонка Из КлючевыеКолонки Цикл
		Если ЗаполненныеЗаголовкиКолонок.Найти(КлючеваяКолонка) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКолонки(ИдентификаторКолонки, ОписаниеКолонок)
	
	ОписаниеКолонки = ОписаниеКолонок.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторКолонки));
	Если ОписаниеКолонки.Количество() > 0 Тогда
		Результат = ОписаниеКолонки[0].ПредставлениеКолонки;
	Иначе
		Результат = ИдентификаторКолонки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоответствиеИменКолонокЗагружаемымДанным()
	
	Результат = Обработки.ЗагрузкаРеестраПлатежей.СохраненноеСоответствиеИменКолонокЗагружаемымДанным(БанковскийСчет);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = КолонкиПоУмолчаниюИзНастроек(
			ОписаниеКолонок,
			ДанныеФайла.ШиринаТаблицы,
			КолонкиРеестра.ИндексыКолонокРеестра, 
			КлючевыеРеквизиты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
