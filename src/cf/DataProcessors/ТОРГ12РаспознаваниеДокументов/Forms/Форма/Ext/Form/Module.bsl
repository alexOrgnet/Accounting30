#Область ОписаниеПеременных

&НаКлиенте
Перем ИдетИзменениеТекстаПоля;

&НаКлиенте
Перем СвойстваЯчеекТаблицы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Документы.РаспознанныйДокумент.ВосстановлениеТаблицыРеквизитовДоПолнойТаблицы(Объект);
	
	ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
	АдресКартинки = ПоместитьВоВременноеХранилище(Объект.Ссылка.ИсходноеИзображение.Получить(), УникальныйИдентификатор);
	
	ЮрФизЛицоПоОрганизационнойФорме = РаспознаваниеДокументовСлужебный.ЮрФизЛицоПоОрганизационнойФорме();
	
	Заголовок = Объект.Наименование;
	
	ЗаполнитьЭлементыИтогов();
	НастроитьЭлементыПоРеквизитам();
	
	НастроитьКолонкиТаблицы();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИнициализироватьСтруктуруСозданныеДокументы();
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если Настройки.ФормаОбработчикаПоказыватьИзображенияВШапке Тогда
		ДобавитьИзображенияРеквизитов(Настройки);
	КонецЕсли;
	ВариантСохраненияСоответствий = Настройки.ВариантСохраненияСоответствий;
	СоздатьСчетФактуру = Настройки.СоздаватьСчетФактуруПриСозданииОснования;
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		Элементы.СуммаВключаетНДС.Видимость = Истина;
		Элементы.СтранаПроисхождения.Видимость = Ложь;
		Элементы.НомерГТД.Видимость = Ложь;
		
		Элементы.ФормаСоздатьПоступлениеТовары.Видимость = Ложь;
		Элементы.СоздатьРеализацияТовары.Видимость = Ложь;
		Элементы.СоздатьСчетФактуру.Видимость = Ложь;
		Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
	Иначе
		Элементы.СуммаВключаетНДС.Видимость = Ложь;
		Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
			Элементы.СтранаПроисхождения.Видимость = Ложь;
			Элементы.НомерГТД.Видимость = Ложь;
			
			Элементы.ФормаСоздатьПоступлениеУслуги.Видимость = Ложь;
			Элементы.СоздатьРеализацияУслуги.Видимость = Ложь;
			Элементы.СоздатьСчетФактуру.Видимость = Ложь;
			Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьВидимостьПоФункциональнымОпциям();
	
	ИзменитьИсточникиДляВыбораДоговора();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	СвойстваОбработки = Новый Структура();
	СвойстваОбработки.Вставить("ИмяЭлементаТаблицы", "СписокНераспознаннойНоменклатуры");
	СвойстваОбработки.Вставить("ИмяЭлементаРеквизитовОбъекта", "ГруппаРеквизитыОбъекта");
	СвойстваОбработки.Вставить("ИмяПроцедурыПриИзменении", "Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры");
	СвойстваОбработки.Вставить("ИмяПроцедурыИзменениеФлажка", "Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры");
	РаспознаваниеДокументовСлужебный.ДобавитьРеквизитыДляСозданияНоменклатуры(ЭтотОбъект, СвойстваОбработки);
	
	Для Каждого Колонка Из СписокНераспознаннойНоменклатуры.Выгрузить().Колонки Цикл
		ИменаКолонокНераспознаннойНоменклатуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Если Параметры.Свойство("ЧастьКомплекта") И Параметры.ЧастьКомплекта Тогда
		ЧастьКомплекта = Истина;
	КонецЕсли;
	Если ЧастьКомплекта Тогда
		Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Ложь;
		Элементы.СоздатьСчетФактуру.Видимость = Ложь;
		Элементы.Записать.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.Записать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	ВсеСвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	АдресСвойствЯчеекТаблицы = ПоместитьВоВременноеХранилище(ВсеСвойстваЯчеекТаблицы, УникальныйИдентификатор);
	
	ВсеПечати = Объект.ПометкиНаДокументе.НайтиСтроки(Новый Структура("ТипПометки", Перечисления.ТипыПометокРаспознанногоДокумента.Печать));
	Элементы.НайденоПечатей.Заголовок = Элементы.НайденоПечатей.Заголовок + ": " + ВсеПечати.Количество();
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
		СоздатьСчетФактуру = Истина;
		Элементы.СоздатьСчетФактуру.Доступность = Ложь;
		Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
	КонецЕсли;
	
	ОпределитьПрименяетсяМалоценка();
	
	ЗаполнитьДополнительныеРеквизиты();
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице();
	
	ЗаполнитьНаличиеУслуг();
	
	УправлениеФормой();
	
	РаспознаваниеДокументовПереопределяемый.ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Модифицированность = Ложь;
	ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Не востребована т.к. права на изменение не отличаются от прав на чтение
	// СтандартныеПодсистемы.УправлениеДоступом
	// УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗагрузитьСвойстваЯчеекТаблицы", 0.1, Истина);
	ИдетИзменениеТекстаПоля = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи" Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ОбработкаВыбораОбратнойСвязи(ЭтотОбъект, ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат"
		Или ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги"
		Или ИсточникВыбора.ИмяФормы = "Обработка.ТОРГ12РаспознаваниеДокументов.Форма.ФормаРедактированиеСчетаУчета" Тогда
		
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранРеквизитФормыСоздания" Тогда
		ПриблизитьПоКоординатам(Параметр.Координаты, Параметр.ВысотаКартинки);
	ИначеЕсли ИмяСобытия = "ПрикрепленСканДокумента" Тогда
		НайтиИЗаполнитьСозданныеДокументы();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПодключитьОбработчикОжидания("Подключаемый_ПослеЗаписи", 0.1, Истина)
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьЗначенияПередЗаписью();
	РаспознаваниеДокументовСлужебный.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаспознаваниеДокументовПереопределяемый.ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписи() Экспорт
	Оповестить("РаспознанныйДокумент_ОбновитьОтборФормыСписка", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПередЗаписью()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(Объект);
	ЗаписатьСоответствияРаспознанныхСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоответствияРаспознанныхСтрок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствияСтрок", НаборСоответствийРаспознанныхСтрок.Выгрузить(,"ТипЗначения,РаспознаннаяСтрока,СоответствующееЗначение,КоличествоПовторений"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияСтрок.ТипЗначения КАК ТипЗначения,
	|	СоответствияСтрок.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	СоответствияСтрок.СоответствующееЗначение КАК СоответствующееЗначение,
	|	СоответствияСтрок.КоличествоПовторений КАК КоличествоПовторений
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&СоответствияСтрок КАК СоответствияСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ТипЗначения КАК ТипЗначения,
	|	ДанныеДокумента.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	ДанныеДокумента.СоответствующееЗначение КАК СоответствующееЗначение,
	|	ДанныеДокумента.КоличествоПовторений + ЕСТЬNULL(ДанныеРегистра.КоличествоПовторений, 0) КАК КоличествоПовторений
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ТипЗначения = ДанныеРегистра.ТипЗначения
	|			И ДанныеДокумента.РаспознаннаяСтрока = ДанныеРегистра.РаспознаннаяСтрока
	|			И ДанныеДокумента.СоответствующееЗначение = ДанныеРегистра.СоответствующееЗначение
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.ИзмененоВручную, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АвторЗаписи = Пользователи.ТекущийПользователь();
	ДатаЗаписи = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Автор = АвторЗаписи;
		Запись.ДатаСоздания = ДатаЗаписи;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СохранитьПривязкуДокумента(НовыйОбъект);
	Записать();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПросмотраДокументСформирован(Элемент)
	
	Если Элемент.Документ.baseURI = "about:blank" Тогда
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.id = "image_load_button" Тогда
		HTMLДокументСформирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	Объект.ВариантОбработки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВариантОбработкиПоТипуИНаправлению(
		Объект.ТипДокумента,
		Объект.Направление
	);
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизита = Элемент.Имя;
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(НайденныеСтроки[0]);
	ПриблизитьПоКоординатам(КоординатыКартинки, НайденныеСтроки[0].СтрокВИзображении);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент) ИЛИ
		НЕ ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед созданием договора необходимо заполнить поля ""Контрагент"" и ""Организация""'");
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОнЖеПриИзменении(Элемент)
	
	Подключаемый_НачалоВыбораПоля(Элементы.Грузополучатель, Неопределено, Истина);
	Элементы.Грузополучатель.Доступность = (ГрузополучательОнЖе = 0);
	Если ГрузополучательОнЖе Тогда
		Объект.РеквизитыДокумента[5].Значение = Новый(ТипЗнч(Объект.РеквизитыДокумента[5].Значение));
	КонецЕсли;
	
	ПриИзмененииПоляНаКлиенте(Элементы.Грузополучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОнЖеПриИзменении(Элемент)
	
	Подключаемый_НачалоВыбораПоля(Элементы.Грузоотправитель, Неопределено, Истина);
	Элементы.Грузоотправитель.Доступность = (ГрузоотправительОнЖе = 0);
	Если ГрузоотправительОнЖе Тогда
		Объект.РеквизитыДокумента[4].Значение = Новый(ТипЗнч(Объект.РеквизитыДокумента[4].Значение));
	КонецЕсли;
	
	ПриИзмененииПоляНаКлиенте(Элементы.Грузоотправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоля(Элемент)
	
	ПриИзмененииПоляНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляНаКлиенте(Элемент)
	
	ПриИзмененииПоляНаСервере(Элемент.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		Элемент.Имя
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляНаСервере(ИмяПоля)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяПоля);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Если НЕ НайденныеСтроки[0].ЗаполненоВручную Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Истина;
		КонецЕсли;
		НайденныеСтроки[0].ЭлементСоздан = НовыйЭлементСозданВФормеБРД;
		НовыйЭлементСозданВФормеБРД = Ложь;
	КонецЕсли;
	
	Если ИмяПоля = "СуммаВключаетНДС" Тогда
		// Поле СуммаВключаетНДС на форме видно только у актов, а в них есть реквизит для хранения значения
		СуммаВключаетНДС = Объект.РеквизитыДокумента[17].Значение;
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЦикла;
	ИначеЕсли ИмяПоля = "Продавец" Или ИмяПоля = "ПокупательОрганизация" Тогда
		// Поступление
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
	ИначеЕсли ИмяПоля = "Покупатель" Или ИмяПоля = "ПродавецОрганизация" Тогда
		// Реализация
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
	КонецЕсли;
	
	СохранитьИтоговыеЗначения();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Если ИмяПоля = "ДатаДокумента" Тогда
		
		ОпределитьПрименяетсяМалоценка();
	КонецЕсли;
	
	Если ИмяПоля = "Покупатель" Или ИмяПоля = "Продавец"
		Или ИмяПоля = "ПокупательОрганизация" Или ИмяПоля = "ПродавецОрганизация"
		Или ИмяПоля = "ДатаДокумента" Или ИмяПоля = "Склад"
		Или ИмяПоля = "Договор" Тогда
		
		ЗаполнитьДополнительныеРеквизиты();
		ЗаполнитьДобавленныеКолонкиТаблиц(Истина);
	КонецЕсли;
	
	Если ИмяПоля = "ПокупательОрганизация" Или ИмяПоля = "ПродавецОрганизация"
		Или ИмяПоля = "ДатаДокумента" Или ИмяПоля = "Склад" Тогда
		
		ОпределитьНеобходимостьРасчетаСуммыВРознице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПоля(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрЗаканчиваетсяНа(Элемент.Имя, "Белый") Тогда
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Белый", "");
	ИначеЕсли СтрЗаканчиваетсяНа(Элемент.Имя, "Красный") Тогда
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Красный", "");
	Иначе
		ИмяРеквизита = Элемент.Имя;
	КонецЕсли;
	
	Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер.РеквизитДокумента(Объект, ИмяРеквизита, Ложь);
	Если Реквизит = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(Реквизит);
	ПриблизитьПоКоординатам(КоординатыКартинки, Реквизит.СтрокВИзображении);
	
	Если Элемент.Имя = "Договор" Тогда
		Если ИдетИзменениеТекстаПоля Тогда
			ИдетИзменениеТекстаПоля = Ложь;
		Иначе
			СтандартнаяОбработка = Ложь;
			Тип = Новый(ТипЗнч(Реквизит.Значение));
			ЗаполнитьСписокВыбораПоляНаСервере(Реквизит.РаспознанныйТекст, Тип, ДанныеВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	// При изменении реквизита формы произойдет серверный вызов и изменение текста будет потеряно,
	// поэтому тут используется клиентская переменная формы
	ИдетИзменениеТекстаПоля = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНаСервере(РаспознанныйТекст, Тип, ДанныеВыбора)
	РаспознаваниеДокументовСлужебный.ЗаполнитьСписокВыбораПоля(ЭтотОбъект, РаспознанныйТекст, Тип, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПоля(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяРеквизита = Элемент.Имя;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("СозданВФормеБРД") Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			СозданНовыйЭлемент = Истина;
		Иначе
			// Выбрали значение из выпадающего списка
			СозданНовыйЭлемент = Ложь;
		КонецЕсли;
		
		Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
			ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
			
			// В редких случаях в веб клиенте ТекущийЭлемент будет таблицей, хотя редактировалась шапка,
			// поэтому сделаем дополнительную проверку
			Если ТекущиеДанные.Свойство(ИмяРеквизита + "ЭлементСоздан") Тогда
				ТекущиеДанные[ИмяРеквизита + "ЭлементСоздан"] = СозданНовыйЭлемент;
			Иначе
				НовыйЭлементСозданВФормеБРД = СозданНовыйЭлемент;
			КонецЕсли;
		Иначе
			НовыйЭлементСозданВФормеБРД = СозданНовыйЭлемент;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ПродавецОрганизация" ИЛИ ИмяРеквизита = "ПокупательОрганизация" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
		
		НомерСтрокиТЧ = Элементы.ТаблицаДокумента.ТекущиеДанные.НомерСтроки;
		
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
		Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
		
		Значение = Свойства.Значение;
		
		НаборДанных = РаспознаваниеДокументовСлужебныйКлиентСервер.НаборДанныхСтрокиТаблицы(СвойстваЯчеекТаблицы, НомерСтрокиТЧ);
		ИмяТаблицы = "РеквизитыТабличныхЧастей";
		
	Иначе
		
		НаборДанных = Объект.РеквизитыДокумента;
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		ПодходящиеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если ПодходящиеСтроки.Количество() > 0 Тогда
			Значение = ПодходящиеСтроки[0].Значение;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		ИмяТаблицы = "РеквизитыДокумента";
		
	КонецЕсли;
	
	ТипРеквизита = ТипЗнч(Значение);
	Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипРеквизита) Тогда
		Если ТипРеквизита = Тип("Строка") Тогда
			ВыбранноеЗначение = СокрЛП(ВыбранноеЗначение);
		Иначе
			ВыбранноеЗначение = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиТип(ВыбранноеЗначение, ТипРеквизита);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НаборДанных = РаспознаваниеДокументовСлужебныйКлиент.НаборДанныхСозданияЭлемента(НаборДанных);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("РаспознанныйДокумент", Объект.Ссылка);
	ДополнительныеДанные.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеДанные.Вставить("ЮрФизЛицоПоОрганизационнойФорме", ЮрФизЛицоПоОрганизационнойФорме);
	ДополнительныеДанные.Вставить("ВидДоговора", ИсточникПоляДоговорВидДоговора);
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуСозданияЭлемента(
		ИмяРеквизита,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		Элемент,
		Значение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры(Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ПолеСписокНераспознаннойНоменклатуры" , "");
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока.Выбран = Истина;
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры(Элемент) Экспорт
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаГрупповоеСоздание" Тогда
		ОбновитьСтрокиНераспознаннойНоменклатуры();
	КонецЕсли;
	
	// Выделяем все строки
	Для Каждого СтрокаДобавления Из СписокНераспознаннойНоменклатуры Цикл
		Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки.Добавить(СтрокаДобавления.ПолучитьИдентификатор());
	КонецЦикла;
	
	// Фокусируемся на первой строке
	Если СписокНераспознаннойНоменклатуры.Количество() Тогда
		ИдентификаторПервойСтроки = СписокНераспознаннойНоменклатуры[0].ПолучитьИдентификатор();
		Элементы.СписокНераспознаннойНоменклатуры.ТекущаяСтрока = ИдентификаторПервойСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиИзменения", ЭтотОбъект);
	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьТипДокумента(ЭтотОбъект, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиИзменения", ЭтотОбъект);
	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьВариантОбработки(ЭтотОбъект, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокумента

&НаКлиенте
Процедура ТаблицаДокументаПриИзменении(Элемент)
	
	ПорядокСтроки = 0;
	Для Каждого Строка Из ТаблицаДокумента Цикл
		ПорядокСтроки = ПорядокСтроки + 1;
		Если Строка.ПорядокСтроки <> ПорядокСтроки Тогда
			Строка.ПорядокСтроки = ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриАктивизацииЯчейки(Элемент)
	
	ПриАктивизацииЯчейкиТаблицы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВыбранныйЭлемент = Элемент.ТекущийЭлемент;
	Если ТекущийВыбранныйЭлемент = Неопределено Или Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ТекущийВыбранныйЭлемент.Имя;
	НомерСтрокиТЧ = Элемент.ТекущиеДанные.НомерСтроки;
	
	ЭлементКолонка = Элементы[ИмяРеквизита];
	ЭлементКолонка.СписокВыбора.Очистить();
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	Если Свойства = Неопределено Тогда
		
		ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Неопределено, 0);
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
		
		Возврат;
	КонецЕсли;
	
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Свойства.Координаты, Свойства.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
	НадписьОшибкаТЧ = Элемент.ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
	
	Элементы.НадписьОшибкаТЧ.Видимость = Не ПустаяСтрока(НадписьОшибкаТЧ);
	
	СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
		Свойства.РаспознанныйТекст, Свойства.ТипЗначения, Свойства.ЗначенияВыбора);
	
	Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
		ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриблизитьПоКоординатам()
	ПриблизитьПоКоординатам(ДанныеПриближения.Координаты, ДанныеПриближения.СтрокВИзображении);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКолонки(Элемент)
	
	ИдентификаторСтроки = Элементы["ТаблицаДокумента"].ТекущаяСтрока;
	
	ИмяРеквизита = Элемент.Имя;
	ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
	НомерСтрокиТЧ = ТекущиеДанные.НомерСтроки;
	ВыбранноеЗначение = ТекущиеДанные[ИмяРеквизита];
	
	ТекущиеДанные[ИмяРеквизита + "ЗаполненоВручную"] = Истина;
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(
		Объект,
		ТекущиеДанные,
		ИмяРеквизита,
		ВыбранноеЗначение
	);
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПересчитатьПроблемныеРеквизитыТаблицыДокумента(
		ЭтотОбъект,
		ТекущиеДанные
	);
	
	Если ИмяРеквизита = "Номенклатура" Тогда
		ПриИзмененииНоменклатуры(ИдентификаторСтроки);
	КонецЕсли;
	
	Если ИмяРеквизита = "СуммаНДС" Тогда
		ДокументБезНДС_Старый = ДокументБезНДС;
		ДокументБезНДС = Не ПлательщикНДС И ТаблицаДокумента.Итог("СуммаНДС") = 0;
		
		Если ДокументБезНДС <> ДокументБезНДС_Старый Тогда
			ЗаполнитьДобавленныеКолонкиТаблиц();
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", ИмяРеквизита, НомерСтрокиТЧ);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		НадписьОшибкаТЧ = ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
	Иначе
		НадписьОшибкаТЧ = "";
	КонецЕсли;
	
	Элементы.НадписьОшибкаТЧ.Видимость = НЕ ПустаяСтрока(НадписьОшибкаТЧ);
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	Если Свойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Свойства.Значение = ТекущиеДанные[ИмяРеквизита];
	Свойства.ЗаполненоВручную = Истина;
	
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяРеквизита,
		ТекущиеДанные.НомерСтроки,
		ТекущиеДанные[ИмяРеквизита],
		Свойства
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПередУдалением(Элемент, Отказ)
	
	ТекущийНомерСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	Отбор = Новый Структура("НомерСтроки", ТекущийНомерСтроки);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПроблемныеЭлементы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПослеУдаления(Элемент)
	ТаблицаДокументаПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументаПослеУдаленияНаСервере()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТаблицы = Элемент.ТекущиеДанные;
		СтрокаТаблицы.НомерСтроки = 0;
		// СтрокаТаблицы.ПорядокСтроки - уже заполнен в процедуре ТаблицаДокументаПриИзменении
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНераспознаннойНоменклатуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсходнойСтроки = Элемент.ТекущиеДанные.ИдентификаторИсходнойСтроки;
	СтрокаТаблицыДокумента = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторИсходнойСтроки);
	Если СтрокаТаблицыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "СписокНераспознаннойНоменклатуры", "");
	НомерСтроки = СтрокаТаблицыДокумента.НомерСтроки;
	
	ОбновлениеВыделенияРамкойПоляДокумента(ИмяЭлемента, НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Для Каждого Реквизит Из ИменаКолонокНераспознаннойНоменклатуры Цикл
		Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено Тогда
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение);
		Иначе
			ЗначениеЯчейки = Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные[Реквизит.Значение];
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение, ЗначениеЯчейки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьРаспознанныйДокумент(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыКомплектные[Ид].Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДубльДокумента(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыДубли[Ид].ДубльДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйДокумент(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыСозданные[Ид].СозданныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКомплект(Команда)
	ПоказатьСозданиеКомплекта();
КонецПроцедуры

&НаКлиенте
Процедура ПожаловатьсяНаКачество(Команда)
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуОбратнойСвязи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияОборудование(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияОтгрузкаБезПереходаПраваСобственности(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияПродажаКомиссия(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияТовары(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияУслуги(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеВПереработку(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОборудование(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОбъектыСтроительства(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОсновныеСредства(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПокупкаКомиссия(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеТовары(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслуги(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслугиЛизинга(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслугиФакторинга(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеЗемельныхУчастков(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(Команда.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура Перепроверить(Команда)
	
	КлючеваяОперация = "РаспознаваниеДокументов.Перепроверить";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПерепроверитьНаСервере();
	СвойстваЯчеекТаблицы = ПолучитьИзВременногоХранилища(АдресСвойствЯчеекТаблицы);
	
	ОбновитьСтрокиНераспознаннойНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ПараметрыСоздаваемойНоменклатуры = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки Цикл
		
		Данные = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПараметрыСоздания = Новый Структура();
		
		Для Каждого Колонка Из ИменаКолонокНераспознаннойНоменклатуры Цикл
			ИмяКолонки = Колонка.Значение;
			ПараметрыСоздания.Вставить(ИмяКолонки, Данные[ИмяКолонки]);
		КонецЦикла;
		
		ПараметрыСоздания.Вставить("Ссылка");
		
		ПараметрыСоздаваемойНоменклатуры.Добавить(ПараметрыСоздания);
		
	КонецЦикла;
	
	ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияСтрокНераспознаннойНоменклатуры(Команда)
	
	Для Каждого РеквизитТекущихСтрок Из ПоляНераспознаннойНоменклатуры Цикл
		Если РеквизитТекущихСтрок.Выбран = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеДляВыделенныхСтрок(РеквизитТекущихСтрок.Значение, РеквизитТекущихСтрок.ИмяРеквизита);
	КонецЦикла;
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСкан(Команда)
	
	ОтмеченоОбработанным = ПрикрепитьСканНаСервереИОтметитьОбработанным();
	
	Если ОтмеченоОбработанным Тогда
		СледующийДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрикрепитьСканНаСервереИОтметитьОбработанным()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		Кандидат = СозданныеДокументы.Поступление.Ссылка;
		Кандидат2 = СозданныеДокументы.СчетФактураПолученный.Ссылка;
	Иначе
		Кандидат = СозданныеДокументы.Реализация.Ссылка;
		Кандидат2 = СозданныеДокументы.СчетФактураВыданный.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кандидат) И ДокументОбъект.ТипДокумента <> Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(ДокументОбъект, Кандидат, АдресКартинки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Кандидат2) И ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(ДокументОбъект, Кандидат2, АдресКартинки);
	КонецЕсли;
	
	Документы.РаспознанныйДокумент.ОтметитьДокументОбработанным(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НайденоПечатей(Команда)
	
	// Используется как статическая декорация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИдентификаторДокумента(Команда)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Идентификатор документа'"));
	ПараметрыСообщения.Вставить("Сообщение", Объект.ИдентификаторРезультата);
	ПараметрыСообщения.Вставить("МногострочныйРежим", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ФормаСообщениеБРД", ПараметрыСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиИзменения(ТребуетсяИзменениеФормы, Контекст) Экспорт
	
	Если Не ТребуетсяИзменениеФормы Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ТребуетсяУказатьВариантОбработки =
		(Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент);
	
	Элементы.ВариантОбработки.Видимость = ТребуетсяУказатьВариантОбработки;
	Элементы.Направление.Видимость = Не ТребуетсяУказатьВариантОбработки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СозданиеТипового(ПараметрыОперации) Экспорт
	
	Результат = СозданиеТипового(ПараметрыОперации);
	СозданныйДокумент = Результат.СоздаваемыйДокумент;
	
	Если СозданныйДокумент <> Неопределено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СозданныйДокумент);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), НавигационнаяСсылка, Строка(СозданныйДокумент));
		Оповестить("РаспознанныйДокумент_СтатусОбработан", , СозданныйДокумент);
		
		Если Результат.УдалосьПровести Тогда
			СледующийДокумент();
		Иначе
			ПоказатьЗначение(, СозданныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СозданиеТипового(ПараметрыОперации)
	
	ПараметрыЗаполнения = ПолучитьПараметрыОткрытияФормы(ПараметрыОперации.ВидОперации, ПараметрыОперации.ТипДокумента);
	Возврат СоздатьДокумент(ПараметрыОперации.ТипДокумента, ПараметрыЗаполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСвойстваЯчеекТаблицы() Экспорт
	
	СвойстваЯчеекТаблицы = ПолучитьИзВременногоХранилища(АдресСвойствЯчеекТаблицы);
	
	ТолькоПросмотр = Ложь;
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаТипИНаправлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСозданиеКомплекта() Экспорт
	
	Если ЧастьКомплекта Тогда
		Возврат;
	КонецЕсли;
	ДанныеКомплекта.ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученВариантСозданияКомплекта", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ПараметрыСоздания", ДанныеКомплекта);
	ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.СозданиеКомплекта",
		ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученВариантСозданияКомплекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
		Подключаемый_ПослеЗаписи();
	КонецЕсли;
	
	РаспознаваниеДокументовКомплектыКлиентСервер.ОбработатьДокументыКомплекта(ЭтотОбъект, Результат);
	Если Результат.Свойство("УдалосьОбработать") И Результат.УдалосьОбработать Тогда
		СледующийДокумент();
	ИначеЕсли Результат.ДанныеОбработки <> Неопределено И Результат.ДанныеОбработки.КомплектовНеУдалосьОбработать <> 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось обработать комплект. Повторите операцию после исправления ошибок:'");
		ПараметрыФормы = Новый Структура(
			"ОшибкиПроведения, ТекстПредупреждения, ОткрытыйДокумент",
			Результат.ДанныеОбработки.ОшибкиПроведения,
			ТекстПредупреждения,
			Объект.Ссылка
		);
		ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
			ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	ИзменитьИсточникиДляВыбораДоговора();
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	НайтиИЗаполнитьСозданныеДокументы();
	ЗаполнитьДополнительныеРеквизиты();
	ЗаполнитьДобавленныеКолонкиТаблиц(Истина);
	ОпределитьНеобходимостьРасчетаСуммыВРознице();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоФункциональнымОпциям()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Элементы.ГруппаДоговор.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет") Тогда
		Элементы.ГруппаСклад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСозданииДокумента(ТипДокументаСтрокой, ВидОперации, ИдетСозданиеСФ)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
	ДополнительныеПараметры.Вставить("ВидОперации", ВидОперации);
	ДополнительныеПараметры.Вставить("ИдетСозданиеСФ", ИдетСозданиеСФ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатОтветаНаВопрос", ЭтаФорма, ДополнительныеПараметры);
	
	СписокОбъектов = Новый СписокЗначений();
	СписокОбъектов.ЗагрузитьЗначения(ПолучитьСозданныеДокументыИзТекущего());
	
	ПараметрыФормы = Новый Структура("СписокОбъектов", СписокОбъектов);
	
	ОткрытьФорму("ОбщаяФорма.ВопросПриНаличииИмеющихсяДокументовБРД", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСозданныеДокументыИзТекущего()
	
	СвязанныеДокументы = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
	Возврат СвязанныеДокументы.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура СледующийДокумент()
	
	Результат = НайтиДокумент(Истина);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиДокумент(Ложь);
	КонецЕсли;
	
	ПерейтиНаДокумент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДокумент(Результат)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(Результат.ТипДокумента, Результат.ВариантОбработки);
		Если Не ПустаяСтрока(ИмяФормыОбработчика) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Результат.Ссылка);
			ПараметрыФормы.Вставить("ОтборИзСписка", Параметры.ОтборИзСписка);
			ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокумент(Следующий)
	
	ОтборДата = Ложь;
	ОтборОрганизация = Ложь;
	ОтборКонтрагент = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.ОтборИзСписка) Тогда 
		
		Если ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
			ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущийКонтрагент);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РаспознанныйДокумент.Ссылка КАК Ссылка,
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
		|	РаспознанныйДокумент.ВариантОбработки КАК ВариантОбработки
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	(РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
		|			ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Изменен))
		|	И НЕ РаспознанныйДокумент.ПометкаУдаления
		|	И РаспознанныйДокумент.Дата < &Дата
		|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспознанныйДокумент.Контрагент = &Контрагент
		|	И РаспознанныйДокумент.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныйДокумент.МоментВремени УБЫВ";
	
	Если Следующий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<", ">=");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", Параметры.ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Ссылка, ТипДокумента, ВариантОбработки");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолученРезультатОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ИдетСозданиеСФ Тогда
			ОбработатьСозданиеСчетаФактуры();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриблизитьПоКоординатам(Координаты, СтрокВИзображении)
	
	Если HTMLДокументСформирован Тогда
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(Координаты) Тогда
			Элементы.ПолеПросмотра.Документ.defaultView.clean_bbox();
		Иначе
			Элементы.ПолеПросмотра.Документ.defaultView.zoom_to_bbox(Координаты[0], Координаты[1], Координаты[2], Координаты[3], СтрокВИзображении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзображенияРеквизитов(Настройки, Родитель = Неопределено, ГруппаРеквизита = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.ГруппаРеквизиты;
	КонецЕсли;
	
	СоответствиеПолейИГрупп = Новый Соответствие;
	
	Для Каждого Поле Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Поле) = Тип("ГруппаФормы") Тогда
			ДобавитьИзображенияРеквизитов(Поле, ГруппаРеквизита);
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаРеквизита = Элементы.Добавить("Группа" + Поле.Имя, Тип("ГруппаФормы"), Поле.Родитель);
		ГруппаРеквизита.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизита.ОтображатьЗаголовок = Ложь;
		СоответствиеПолейИГрупп.Вставить(Поле, ГруппаРеквизита);
		
	КонецЦикла;
	
	Для Каждого ДанныеСоответствия Из СоответствиеПолейИГрупп Цикл
		Элементы.Переместить(ДанныеСоответствия.Ключ, ДанныеСоответствия.Значение);
		ОтобразитьСвязаннуюКартинку(ДанныеСоответствия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязаннуюКартинку(ДанныеСоответствия)
	
	Путь = ДанныеСоответствия.Ключ.ПутьКДанным;
	НачалоИдентификатора = СтрНайти(Путь, "[") ;
	Если НЕ НачалоИдентификатора Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРеквизита = Сред(Путь, НачалоИдентификатора + 1, СтрНайти(Путь, "]") - НачалоИдентификатора + 1);
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ИдентификаторРеквизита = ОписаниеЧисла.ПривестиЗначение(ИдентификаторРеквизита);
	
	ПолеКартинки = Элементы.Добавить("КартинкаРеквизита" + ИдентификаторРеквизита, Тип("ПолеФормы"), ДанныеСоответствия.Значение);
	ПолеКартинки.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеКартинки.Высота = Объект.РеквизитыДокумента[ИдентификаторРеквизита].СтрокВИзображении;
	ПолеКартинки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПолеКартинки.РастягиватьПоВертикали = Ложь;
	ПолеКартинки.АвтоМаксимальнаяВысота = Ложь;
	ПолеКартинки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ПутьКДанным = "Объект.РеквизитыДокумента[" + ИдентификаторРеквизита + "].АдресКартинки";
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиТаблицы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементыОбхода)
	
	Для Каждого ЭлементКолонка Из ЭлементыОбхода.ПодчиненныеЭлементы Цикл
		Если ЭлементКолонка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементКолонка);
		ИначеЕсли ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементКолонка.ВыбиратьТип = Ложь;
			ЭлементКолонка.БыстрыйВыбор = Ложь;
			ЭлементКолонка.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			ЭлементКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
			ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииКолонки");
			
			Если ЭлементКолонка.Имя <> "ТаблицаДокументаПорядокСтроки"
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ТекстОшибки")
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ЗаполненоВручную")
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ЭлементСоздан") Тогда
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ТекстОшибки", Новый ОписаниеТипов("Строка"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ЗаполненоВручную", Новый ОписаниеТипов("Булево"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ЭлементСоздан", Новый ОписаниеТипов("Булево"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, ЭлементРодитель)
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл 
		НовыйЭлемент = Элементы.Добавить(Реквизит.Имя, Тип("ПолеФормы"), ЭлементРодитель);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаДокумента." + Реквизит.Имя;
		НовыйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокумента()
	
	ТаблицаДокумента.Загрузить(РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект));
	Если Объект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		// РеквизитыТабличныхЧастей.Количество() = 0 - значит таблицы никогда не было, в ней нет колонок и
		// РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента не сможет создать колонки
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ПорядокСтроки = 1;
		
		РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокумента.Выгрузить());
		ТаблицаДокумента.Загрузить(РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект));
	КонецЕсли;
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РеквизитыТабличныхЧастей.Сортировать("НомерСтрокиТЧ");
	ИзменяемаяСтрока = ТаблицаДокумента[0];
	
	Для Каждого Запись Из Объект.РеквизитыТабличныхЧастей Цикл
		Если Запись.СтрокаУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзменяемаяСтрока.НомерСтроки <> Запись.НомерСтрокиТЧ Тогда
			Отбор = Новый Структура("НомерСтроки", Запись.НомерСтрокиТЧ);
			ИзменяемыеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
			ИзменяемаяСтрока = ИзменяемыеСтроки[0];
		КонецЕсли;
		
		Если ИзменяемаяСтрока.Свойство(Запись.ИмяРеквизита + "ЗаполненоВручную") Тогда
			ИзменяемаяСтрока[Запись.ИмяРеквизита + "ЗаполненоВручную"] = Запись.ЗаполненоВручную;
		КонецЕсли;
		Если ИзменяемаяСтрока.Свойство(Запись.ИмяРеквизита + "ЭлементСоздан") Тогда
			ИзменяемаяСтрока[Запись.ИмяРеквизита + "ЭлементСоздан"] = Запись.ЭлементСоздан;
		КонецЕсли;
		
		Если Запись.ИмяРеквизита = "Номенклатура" Тогда
			НомерСтрокиТаблицы = Запись.НомерСтрокиТЧ;
			ВыбранноеЗначение = ИзменяемаяСтрока[Запись.ИмяРеквизита];
			
			РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
				Объект,
				ИзменяемаяСтрока,
				Запись.ИмяРеквизита,
				НомерСтрокиТаблицы,
				ВыбранноеЗначение);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.НомерСтроки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ИзменяемаяСтрока.НомерСтроки;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), Запись.РаспознанныйТекст));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоРеквизитам()
	
	ДанныеДляВыбораРеквизитов = РаспознаваниеДокументовСлужебный.ПолучитьДанныеДляСпискаВыбора(Объект.Ссылка);
	АдресЗначенияВыбораДляШапки = ПоместитьВоВременноеХранилище(ДанныеДляВыбораРеквизитов, УникальныйИдентификатор);
	
	Для Каждого РеквизитШапки Из Объект.РеквизитыДокумента Цикл
		
		Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			Если РеквизитШапки.ИмяРеквизита = "Склад" Тогда
				Элементы["Группа"+РеквизитШапки.ИмяРеквизита].Видимость = Ложь;
				Продолжить;
			ИначеЕсли РеквизитШапки.ИмяРеквизита = "Грузоотправитель"
				ИЛИ РеквизитШапки.ИмяРеквизита = "Грузополучатель" Тогда
				
				Элементы.ГруппаГрузоотправительИГрузополучатель.Видимость = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитШапки.ИмяРеквизита = "ИтогоСумма"
			Или РеквизитШапки.ИмяРеквизита = "ИтогоСуммаНДС"
			Или РеквизитШапки.ИмяРеквизита = "ИтогоВсего" Тогда
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита + "Белый"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита + "Красный"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, РеквизитШапки.ИмяРеквизита) Тогда
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита];
			Если РеквизитШапки.ИмяРеквизита = "Склад" Тогда
				НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, Ложь);
			Иначе
				НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			КонецЕсли;
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов)
	
	ИзменяемыйЭлемент.Подсказка = Неопределено;
	РаспознанныйТекст = РеквизитШапки.РаспознанныйТекст;
	
	Если РеквизитШапки.ИмяРеквизита = "СуммаВключаетНДС" Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(РеквизитШапки.Значение));
	Если НЕ РеквизитШапки.ИмяРеквизита = "Склад" И НЕ РеквизитШапки.ИмяРеквизита = "Договор" Тогда
		Отбор = Новый Структура("ИмяРеквизита", РеквизитШапки.ИмяРеквизита);
		ПодходящиеЗначения = ДанныеДляВыбораРеквизитов.НайтиСтроки(Отбор);
		
		Если РеквизитШапки.ИмяРеквизита = "ПродавецОрганизация"
			Или РеквизитШапки.ИмяРеквизита = "ПокупательОрганизация"
			Или РеквизитШапки.ИмяРеквизита = "Исполнитель"
			Или ЭтоПримитивныйТип Тогда
			
			КартинкаСоздание = 2;
		Иначе
			КартинкаСоздание = 1;
		КонецЕсли;
		
		Если Не РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(РеквизитШапки.ИмяРеквизита, РаспознанныйТекст) Тогда
			СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание);
			ИзменяемыйЭлемент.СписокВыбора.Очистить();
			Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
				Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
					ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
				Иначе
					Если ЭтоПримитивныйТип Тогда
						ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление);
					Иначе
						ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитШапки.Значение) Тогда
		Если РеквизитШапки.ИмяРеквизита = "Грузоотправитель" Тогда
			// Устанавливаем "Он же" и блокируем "Другой"
			ГрузоотправительОнЖе = 1;
			Элементы.Грузоотправитель.Доступность = Ложь;
			Возврат;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "Грузополучатель" Тогда
			// Устанавливаем "Он же" и блокируем "Другой"
			ГрузополучательОнЖе = 1;
			Элементы.Грузополучатель.Доступность = Ложь;
			Возврат;
		КонецЕсли;
		
		Если РеквизитШапки.ИмяРеквизита <> "ИтогоСумма" И РеквизитШапки.ИмяРеквизита <> "ИтогоСуммаНДС"
			И РеквизитШапки.ИмяРеквизита <> "ИтогоВсего" И РеквизитШапки.ИмяРеквизита <> "Склад" Тогда
			
			ИзменяемыйЭлемент.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), РаспознанныйТекст);
		КонецЕсли;
		
		Если РеквизитШапки.ИмяРеквизита = "Склад" Тогда
			СкладПоУмолчанию = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
			Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				РеквизитШапки.Значение = СкладПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, ЗапретитьИсториюВыбора = Истина, РазрешитьБыстрыйВыбор = Ложь)
	
	ИзменяемыйЭлемент.БыстрыйВыбор = РазрешитьБыстрыйВыбор;
	ИзменяемыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Если ЗапретитьИсториюВыбора Тогда
		ИзменяемыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	КонецЕсли;
	ИзменяемыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПоля");
	ИзменяемыйЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПоля");
	ИзменяемыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
	Если РазрешитьБыстрыйВыбор Тогда
		ИзменяемыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПоля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПоТипуДокумента()
	
	Элементы.Продавец.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.Покупатель.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.ПродавецОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ПокупательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	
	Элементы.ГруппаКнопкиПоступление.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.ГруппаКнопкиРеализация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораДоговора(ИмяПоля = "")
	
	Договор = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Договор",
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Владелец, Организация");
	
	ЗаполнитьИсточникиДляВыбораДоговора();
	
	ПерезаполнитьДоговор = 
		    ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(Договор)
		Или РеквизитыДоговора.Владелец    <> ИсточникПоляДоговорКонтрагент
		Или РеквизитыДоговора.Организация <> ИсточникПоляДоговорОрганизация;
	
	Элементы.Договор.Доступность =
		  ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация)
		И ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент);
	
	Если ПерезаполнитьДоговор Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(Объект);
	КонецЕсли;
	
	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиДляВыбораДоговора()
	
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(Объект);
	
	ВидыДоговоров = Новый СписокЗначений;
	ВидыДоговоров.ЗагрузитьЗначения(ПараметрыВыбораДоговора.ВидыДоговоров);
	
	ИсточникПоляДоговорВидДоговора = ВидыДоговоров;
	ИсточникПоляДоговорКонтрагент = ПараметрыВыбораДоговора.Контрагент;
	ИсточникПоляДоговорОрганизация = ПараметрыВыбораДоговора.Организация;
	
	Элементы.ГрузополучательКонтрагент.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ГрузополучательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.ГрузоотправительКонтрагент.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.ГрузоотправительОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	КлючеваяОперация = "РаспознаваниеДокументов.СоздатьДокумент";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УдалосьПровести = Ложь;
	
	ОбъектИзФормы = РеквизитФормыВЗначение("Объект");
	
	НачатьТранзакцию();
	Попытка
		// Изменения в документе "Распознанный документ"
		Модифицированность = Ложь;
		ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		ОбъектИзФормы.Записать();
		
		СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения, РежимЗаписиДокумента.Проведение);
		
		УдалосьПровести = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		УдалосьПровести = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка проведения основного документа:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
	Если Не УдалосьПровести Тогда
		НачатьТранзакцию();
		Попытка
			ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
			ОбъектИзФормы.Записать();
			
			СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения, РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПолучитьСообщенияПользователю(Истина); // Если не удалось записать, то не нужно писать ошибки проведения
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Ошибка создания документа:'") + Символы.ПС
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение.Сообщить();
			
			Результат = Новый Структура;
			Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
			Результат.Вставить("УдалосьПровести", УдалосьПровести);
			
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектИзФормы, "Объект");

	
	РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СоздаваемыйДокумент, АдресКартинки);
	
	Если СоздатьСчетФактуру Тогда
		СчетФактураСсылка = СоздатьСчетФактуруПоПараметрам(СоздаваемыйДокумент, ТипДокументаСтрокой, ПараметрыЗаполнения);
		Если СчетФактураСсылка = Неопределено Тогда 
			УдалосьПровести = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ДанныеСозданногоДокумента = ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент);
	
	Пакет = Новый Структура;
	Пакет.Вставить("created", ДанныеСозданногоДокумента);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("УдалосьПровести", УдалосьПровести);
	Комментарий.Вставить("ТипДокумента", ТипДокументаСтрокой);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, , Комментарий);
	
	Результат = Новый Структура;
	Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
	Результат.Вставить("УдалосьПровести", УдалосьПровести);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент)
	
	Результат = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Результат.IdСозданногоДокумента = Строка(СоздаваемыйДокумент.УникальныйИдентификатор());
	Результат.НомерРаспознанногоДокумента = Объект.Номер;
	Результат.ЭтоВходящийДокумент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Результат.НомерДокумента = Объект.РеквизитыДокумента[0].Значение;
	Результат.ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	Результат.СуммаДокумента = ИтогоВсего;
	Результат.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорКонтрагент);
	Результат.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорОрганизация);
	Результат.ТипРаспознанногоДокумента = Строка(Объект.ТипДокумента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьСчетФактуруПоПараметрам(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	СчетФактураСсылка = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
		ПараметрыСоздания.Вставить("Основание", ОснованиеСчетаФактуры);
		ПараметрыСоздания.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		
		РаспознаваниеДокументовПереопределяемый.ПриСозданииСчетФактуры(ПараметрыСоздания, СчетФактураСсылка);
		
		Если СчетФактураСсылка <> Неопределено Тогда
			РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СчетФактураСсылка, АдресКартинки)
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка создания счета-фактуры:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Возврат Неопределено;
	КонецПопытки;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Возврат СчетФактураСсылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьСчетФактуру(Команда)
	
	Если ПолучитьСозданныеДокументыИзТекущего().Количество() Тогда
		ЗадатьВопросОСозданииДокумента(Неопределено, Неопределено, Истина);
		Возврат;
	КонецЕсли;
	
	ОбработатьСозданиеСчетаФактуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеСчетаФактуры()
	
	Покупатель = Объект.РеквизитыДокумента[3].Значение;
	Продавец = Объект.РеквизитыДокумента[2].Значение;
	
	ОрганизацияПокупатель = Объект.РеквизитыДокумента[9].Значение;
	ОрганизацияПродавец = Объект.РеквизитыДокумента[8].Значение;
	
	ПараметрыЗаполнения = Новый Структура;
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ПараметрыЗаполнения.Вставить("Контрагент", Покупатель);
		ПараметрыЗаполнения.Вставить("Организация", ОрганизацияПродавец);
		
		ОснованиеСчетаФактуры = СозданныеДокументы.Реализация.Ссылка;
		ТипДокументаСтрокой = "РеализацияТоваровУслуг";
	Иначе
		ПараметрыЗаполнения.Вставить("Контрагент", Продавец);
		ПараметрыЗаполнения.Вставить("Организация", ОрганизацияПокупатель);
		
		ОснованиеСчетаФактуры = СозданныеДокументы.Поступление.Ссылка;
		ТипДокументаСтрокой = "ПоступлениеТоваровУслуг";
	КонецЕсли;
	
	ИмяРеквизитаНомерДокумента = ?(ОснованиеСчетаФактуры = Неопределено, "Номер", "НомерВходящегоДокумента");
	ИмяРеквизитаДатаДокумента = ?(ОснованиеСчетаФактуры = Неопределено, "Дата", "ДатаВходящегоДокумента");
	
	ПараметрыЗаполнения.Вставить(ИмяРеквизитаНомерДокумента, Объект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить(ИмяРеквизитаДатаДокумента, Объект.РеквизитыДокумента[1].Значение);
	
	ОпределениеДействияДляСоздаваемойСчетФактуры(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруСозданныеДокументы()
	
	СозданныеДокументы = Новый Структура;
	СозданныеДокументы.Вставить("Поступление", Новый Структура("Ссылка", Неопределено));
	СозданныеДокументы.Вставить("Реализация", Новый Структура("Ссылка", Неопределено));
	СозданныеДокументы.Вставить("СчетФактураПолученный", Новый Структура("Ссылка", Неопределено));
	СозданныеДокументы.Вставить("СчетФактураВыданный", Новый Структура("Ссылка", Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры)
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Создание номенклатуры для заполнения...'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьТаблицуСозданнойНоменклатурой", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор)
	
	ПараметрыВызоваСервера = Новый Массив;
	ПараметрыВызоваСервера.Добавить(ПараметрыСоздаваемойНоменклатуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое создание номенклатуры'");
	
	Обработчик = "РаспознаваниеДокументовСлужебный.ФоновоеСозданиеНоменклатуры";
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(Обработчик, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСозданнойНоменклатурой(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры);
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИнформацияОНоменклатуре = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Данные Из ИнформацияОНоменклатуре Цикл
		СтрокаЗаполнения = ТаблицаДокумента.НайтиПоИдентификатору(Данные.ИдентификаторИсходнойСтроки);
		СтрокаЗаполнения.Номенклатура = Данные.Номенклатура;
		СтрокаЗаполнения.НоменклатураЗаполненоВручную = Истина; // Тут важно, что заполнено не автоматически при нечетком поиске
		СтрокаЗаполнения.НоменклатураЭлементСоздан = Истина;
		
		РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
			Объект,
			СтрокаЗаполнения,
			"Номенклатура",
			СтрокаЗаполнения.НомерСтроки,
			Данные.Номенклатура);
		
		ПриИзмененииНоменклатуры(Данные.ИдентификаторИсходнойСтроки);
		
		Отбор = Новый Структура("ИдентификаторИсходнойСтроки", Данные.ИдентификаторИсходнойСтроки);
		НайденныеСтроки = СписокНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			УдаляемаяСтрока = НайденныеСтроки[0];
			СписокНераспознаннойНоменклатуры.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	Если Не СписокНераспознаннойНоменклатуры.Количество() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличнаяЧасть;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИЗаполнитьСозданныеДокументы()
	
	Если Элементы.ГруппаСвязанныйДокумент.Видимость Тогда
		Элементы.ГруппаСвязанныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	// Поиск комплектов
	ДанныеДокумента = Новый Структура(
		"Ссылка, ПометкаУдаления, Статус, ТипДокумента, Направление, Организация, Контрагент, СуммаДокумента, НомерДокумента, ДатаДокумента",
		Объект.Ссылка,
		Объект.ПометкаУдаления,
		Объект.Статус,
		Объект.ТипДокумента,
		Объект.Направление,
		ИсточникПоляДоговорОрганизация,
		ИсточникПоляДоговорКонтрагент,
		ИтогоВсего,
		Объект.РеквизитыДокумента[0].Значение,
		Объект.РеквизитыДокумента[1].Значение
	);
	ВсеКомплектныеДокументы = РаспознаваниеДокументовКомплекты.НайтиКомплектныеДокументы(ДанныеДокумента);
	
	// Удалим все предыдущие данные о комплектах, дублях, созданных документах, а также программно добавленные Элементы формы
	ДокументыКомплектные.Очистить();
	ДокументыДубли.Очистить();
	ДокументыСозданные.Очистить();
	СозданныеДокументы.Поступление.Ссылка = Неопределено;
	СозданныеДокументы.Реализация.Ссылка = Неопределено;
	СозданныеДокументы.СчетФактураПолученный.Ссылка = Неопределено;
	СозданныеДокументы.СчетФактураВыданный.Ссылка = Неопределено;
	
	ИдПодчиненного = Элементы.ГруппаВсплывающаяСвязанныеДокументы.ПодчиненныеЭлементы.Количество();
	Пока ИдПодчиненного > 0 Цикл
		ИдПодчиненного = ИдПодчиненного - 1;
		ДляПроверки = Элементы.ГруппаВсплывающаяСвязанныеДокументы.ПодчиненныеЭлементы[ИдПодчиненного];
		Если ДляПроверки.Видимость Тогда
			Элементы.Удалить(ДляПроверки);
		КонецЕсли;
	КонецЦикла;
	
	
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого ЭтотКомплектныйДокумент Из ВсеКомплектныеДокументы Цикл
		ДанныеКомплектного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотКомплектныйДокумент, "ПометкаУдаления, ТипДокумента, Статус, НомерДокумента, ДатаДокумента");
		
		СтрокаТаблицы = ДокументыКомплектные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеКомплектного);
		СтрокаТаблицы.Ссылка = ЭтотКомплектныйДокумент;
		СтрокаТаблицы.СтатусРаспознавания = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(СтрокаТаблицы);
		
		ДокументыПоТипам.Вставить(ДанныеКомплектного.ТипДокумента, ЭтотКомплектныйДокумент);
	КонецЦикла;
	
	Если ВсеКомплектныеДокументы.Количество() = 1 Тогда
		ДанныеКомплекта = Неопределено;
		
		РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(Объект);
		Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
		
		ВсеСвязанные = Новый Массив;
		Для Каждого Связанный Из Связанные Цикл
			Если ВсеСвязанные.Найти(Связанный.Ссылка) = Неопределено Тогда
				ВсеСвязанные.Вставить(0, Связанный.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		// Подготовим структуру для создания документов из комплекта
		ДанныеКомплекта = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеПараметрыСозданияКомплекта();
		ДанныеКомплекта.НаправлениеДокумента = Объект.Направление;
		ДанныеКомплекта.ТипКомплекта         = РаспознаваниеДокументовКомплекты.СформироватьТипКомплекта(ДокументыКомплектные, "ПоТаблице");
		ДанныеКомплекта.ПараметрыОперации    = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперацииПоУмолчанию(Объект.Направление, ДанныеКомплекта.ТипКомплекта);
		ДанныеКомплекта.РаспознанныеДокументыПоТипам = ДокументыПоТипам;
		
		РаспознаваниеДокументовКомплекты.ОбновитьИЗаполнитьСвязанныеИСозданныеДокументы(ДанныеКомплекта);
		
		// Отсортировать таблицу ДокументыКомплектные
		ТипыРаспознанных = РаспознаваниеДокументовКомплектыКлиентСервер.ПорядокОтображенияСвязанныхДокументовПоТипам();
		ИдДокументаИзКомплекта = 0;
		ОтсутствующиеТипы = 0;
		Пока ИдДокументаИзКомплекта < ДокументыКомплектные.Количество() - 1 Цикл
			Если ТипыРаспознанных[ИдДокументаИзКомплекта + ОтсутствующиеТипы] <> ДокументыКомплектные[ИдДокументаИзКомплекта].ТипДокумента Тогда
				НайденныеСтроки = ДокументыКомплектные.НайтиСтроки(Новый Структура("ТипДокумента",
					ТипыРаспознанных[ИдДокументаИзКомплекта + ОтсутствующиеТипы]
				));
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОтсутствующиеТипы = ОтсутствующиеТипы + 1;
					Продолжить;
				Иначе
					НужнаяСтрока = НайденныеСтроки[0];
					ИдНужнойСтроки = ДокументыКомплектные.Индекс(НужнаяСтрока);
					ДокументыКомплектные.Сдвинуть(ИдНужнойСтроки, ИдДокументаИзКомплекта - ИдНужнойСтроки);
				КонецЕсли;
			КонецЕсли;
			ИдДокументаИзКомплекта = ИдДокументаИзКомплекта + 1;
		КонецЦикла;
		
		ВсеСвязанные = ДанныеКомплекта.СвязанныеДокументы;
	КонецЕсли;
	
	Для Каждого ЭтотСвязанный Из ВсеСвязанные Цикл
		ТипСвязанного = ТипЗнч(ЭтотСвязанный);
		ПодходящиеТипы = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ТипСвязанного);
		
		Для Каждого ЭтотТип Из ПодходящиеТипы Цикл
			КомплектныеСтроки = ДокументыКомплектные.НайтиСтроки(Новый Структура("ТипДокумента", ЭтотТип));
			Если КомплектныеСтроки.Количество() <> 0 Тогда
				СтрокаТаблицы = ДокументыСозданные.Добавить();
				СтрокаТаблицы.РаспознанныйДокумент = КомплектныеСтроки[0].Ссылка;
				СтрокаТаблицы.СозданныйДокумент = ЭтотСвязанный;
				СтрокаТаблицы.ТипДокумента = ТипСвязанного;
				
				Если ТипСвязанного = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СозданныеДокументы.СчетФактураПолученный.Ссылка = ЭтотСвязанный;
				ИначеЕсли ТипСвязанного = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					СозданныеДокументы.Поступление.Ссылка = ЭтотСвязанный;
				ИначеЕсли ТипСвязанного = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					СозданныеДокументы.СчетФактураВыданный.Ссылка = ЭтотСвязанный;
				ИначеЕсли ТипСвязанного = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					СозданныеДокументы.Реализация.Ссылка = ЭтотСвязанный;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
#Область ДокументыКомплектные
	
	// Отображение комплектов, дублей и созданных документов
	ИдЧисломДокументаИзКомплекта = -1;
	Соль = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ИдЧисломДубляДокумента = -1; // Тут сквозная нумерация
	Для Каждого СтрокаТаблицы Из ДокументыКомплектные Цикл
		ИдЧисломДокументаИзКомплекта = ИдЧисломДокументаИзКомплекта + 1;
		ИдДокументаИзКомплекта = XMLСтрока(ИдЧисломДокументаИзКомплекта) + Соль;
		
		// Добавление элементов на форму
		РаспознаваниеДокументовКомплекты.СкопироватьЭлементыФормыРекурсивно(
			ЭтотОбъект,
			Элементы.ГруппаСвязанныйДокумент,
			Элементы.ГруппаВсплывающаяСвязанныеДокументы,
			ИдДокументаИзКомплекта,
			"ГруппаДубльСтатусСсылка, ОткрытьСозданныйДокумент");
		
		Если СтрокаТаблицы.Ссылка = Объект.Ссылка Тогда
			ВидимыйЭлемент = Элементы["ДекорацияЭтотДокумент_"+ИдДокументаИзКомплекта];
			Элементы["ДекорацияЭтотДокумент_"+ИдДокументаИзКомплекта].Видимость = Истина;
			Элементы["ОткрытьРаспознанныйДокумент_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			ВидимыйЭлемент = Элементы["ОткрытьРаспознанныйДокумент_"+ИдДокументаИзКомплекта];
		КонецЕсли;
		
		ВидимыйЭлемент.Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
			СтрокаТаблицы.ТипДокумента, СокрЛП(СтрокаТаблицы.НомерДокумента), Формат(СтрокаТаблицы.ДатаДокумента, "ДФ=dd.MM.yyyy"));
		
#КонецОбласти
#Область ДокументыДубли
		
		Если СтрокаТаблицы.Ссылка = Объект.Ссылка Тогда
			НовыеДубли = РаспознаваниеДокументовКомплекты.ДублиРаспознанногоДокумента(ДанныеДокумента);
		Иначе
			НовыеДубли = РаспознаваниеДокументовКомплекты.ДублиРаспознанногоДокумента(СтрокаТаблицы.Ссылка);
		КонецЕсли;
		
		Если НовыеДубли.Количество() = 0 Тогда
			Элементы["ГруппаДублейГоризонтальная_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			
			Для Каждого СтрокаДубля Из НовыеДубли Цикл
				СтрокаДубляНаФорме = ДокументыДубли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДубляНаФорме, СтрокаДубля);
				СтрокаДубляНаФорме.СтатусРаспознавания = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(СтрокаДубля);
				
				ИдЧисломДубляДокумента = ИдЧисломДубляДокумента + 1;
				ИдДубляДокумента = XMLСтрока(ИдЧисломДубляДокумента) + Соль;
				РаспознаваниеДокументовКомплекты.СкопироватьЭлементыФормыРекурсивно(
					ЭтотОбъект,
					Элементы.ГруппаДубльСтатусСсылка,
					Элементы["ГруппаДублей_"+ИдДокументаИзКомплекта],
					ИдДубляДокумента
				);
				
				Элементы["ОткрытьДубльДокумента_" + ИдДубляДокумента].Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
					СтрокаДубля.ТипДокумента, СокрЛП(СтрокаДубля.НомерДокумента), Формат(СтрокаДубля.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			КонецЦикла;
		КонецЕсли;
		
#КонецОбласти
#Область ДокументыСозданные
		
		ЧастьСозданных = ДокументыСозданные.НайтиСтроки(Новый Структура("РаспознанныйДокумент", СтрокаТаблицы.Ссылка));
		Если ЧастьСозданных.Количество() = 0 Тогда
			Элементы["ГруппаСозданныхГоризонтальная_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			
			Для Каждого СтрокаСозданного Из ЧастьСозданных Цикл
				ИдСозданногоДокумента = ДокументыСозданные.Индекс(СтрокаСозданного);
				ИдСозданногоДокумента = XMLСтрока(ИдСозданногоДокумента) + Соль;
				РаспознаваниеДокументовКомплекты.СкопироватьКнопкуФормы(
					ЭтотОбъект,
					Элементы.ОткрытьСозданныйДокумент,
					Элементы["ГруппаСозданных_"+ИдДокументаИзКомплекта],
					ИдСозданногоДокумента
				);
				
				Элементы["ОткрытьСозданныйДокумент_" + ИдСозданногоДокумента].Заголовок =
					РаспознаваниеДокументовКомплектыКлиентСервер.ОтрезатьВремяУДаты(Строка(СтрокаСозданного.СозданныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
#КонецОбласти
		
	КонецЦикла;
	
	Элементы["РазделениеДокументов_" + ИдДокументаИзКомплекта].Видимость = Ложь;
	Элементы.ГруппаКнопкиКомплект.Видимость = (ДанныеКомплекта <> Неопределено);
	Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость = Ложь;
	Если ДанныеКомплекта = Неопределено Тогда
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			Кандидат = СозданныеДокументы.Поступление.Ссылка;
			Кандидат2 = СозданныеДокументы.СчетФактураПолученный.Ссылка;
		Иначе
			Кандидат = СозданныеДокументы.Реализация.Ссылка;
			Кандидат2 = СозданныеДокументы.СчетФактураВыданный.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Кандидат) И Объект.ТипДокумента <> Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			И Не РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(Объект, Кандидат, АдресКартинки) Тогда
			
			Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость = Истина;
		КонецЕсли;
		
		Если Не Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость И ЗначениеЗаполнено(Кандидат2)
			И Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			И Не РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(Объект, Кандидат2, АдресКартинки) Тогда
			
			Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСвязанных = ДокументыКомплектные.Количество() - 1 + ДокументыДубли.Количество() + ДокументыСозданные.Количество();
	Если КоличествоСвязанных = 0 Тогда
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Ложь;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок = НСтр("ru = 'Нет связаных документов'");
	Иначе
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Истина;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок =
			СтрШаблон(НСтр("ru = 'Связанные документы (%1)'"), КоличествоСвязанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормы(Знач ВидОперации, Знач ТипДокументаСтрокой)
	
	Записать();
	ПараметрыЗаполнения = РаспознаваниеДокументовСлужебныйВызовСервера.ПараметрыЗаполненияТиповойНаОсновеФормыТОРГ12(
		Объект,
		ВидОперации,
		ТипДокументаСтрокой
	);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	СохранитьЗначенияПередЗаписью();
	
	ТаблицаДокумента.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(ДокументОбъект, Объект.Ссылка, Истина);
	Документы.РаспознанныйДокумент.ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	НастроитьЭлементыПоРеквизитам();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИзменитьИсточникиДляВыбораДоговора();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	РаспознаваниеДокументовСлужебный.ВосстановитьТекстыОшибок(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ВсеСвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	АдресСвойствЯчеекТаблицы = ПоместитьВоВременноеХранилище(ВсеСвойстваЯчеекТаблицы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументПоСсылке(ДокументСсылка)
	ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(ДокументСсылка));
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияИзТаблицыДокумента()
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	
	// Удаляем колонки, которые не нужно сохранять
	ТаблицаДокументаТЗ.Колонки.Удалить("Отступ");
	ТаблицаДокументаТЗ.Колонки.Удалить("Услуга");
	ИдКолонки = ТаблицаДокументаТЗ.Колонки.Количество();
	Пока ИдКолонки > 0 Цикл
		ИдКолонки = ИдКолонки - 1;
		Если СтрЗаканчиваетсяНа(ТаблицаДокументаТЗ.Колонки[ИдКолонки].Имя, "ТекстОшибки") Тогда
			
			ТаблицаДокументаТЗ.Колонки.Удалить(ИдКолонки);
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокументаТЗ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИтоговыеЗначения()
	
	Объект.РеквизитыДокумента[10].Значение = ИтогоСумма;
	Объект.РеквизитыДокумента[11].Значение = ИтогоСуммаНДС;
	Объект.РеквизитыДокумента[12].Значение = ИтогоВсего;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыИтогов()
	
	ИтогоСумма = Объект.РеквизитыДокумента[10].Значение;
	ИтогоСуммаНДС = Объект.РеквизитыДокумента[11].Значение;
	ИтогоВсего = Объект.РеквизитыДокумента[12].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеДействияДляСоздаваемойСчетФактуры(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	Если ОснованиеСчетаФактуры = Неопределено Тогда
		
		Если ТипДокументаСтрокой = "РеализацияТоваровУслуг" Тогда
			ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный");
		Иначе
			ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный");
		КонецЕсли;
		
		МодульПереопределения = РаспознаваниеДокументовКлиентПереопределяемый;
		МодульПереопределения.ОткрытиеФормыСоздаваемогоДокумента(ТипДокумента, ПараметрыЗаполнения, ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	СчетФактураСсылка = СоздатьСчетФактуруПоПараметрам(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения);
	
	Если СчетФактураСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), ПолучитьНавигационнуюСсылку(СчетФактураСсылка), Строка(СчетФактураСсылка));
		СледующийДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеВыделенияРамкойПоляДокумента(ИмяРеквизита, НомерСтроки)
	
	ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита);
	Если ДанныеТаблицы = Неопределено Тогда
		ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, "Номенклатура");
		Если ДанныеТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", ДанныеТаблицы.Координаты, ДанныеТаблицы.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляВыделенныхСтрок(Значение, ИмяКолонки)
	
	ИдентификаторыВыделенныхСтрок = Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		ИзменяемаяСтрока = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИзменяемаяСтрока[ИмяКолонки] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНераспознаннойНоменклатуры()
	
	СтрокиПустойНоменклатуры = Новый Массив;
	
	ПорогДобавления = 0;
	Для Каждого СтрокаНоменклатуры Из ТаблицаДокумента Цикл
		Если СтрокаНоменклатуры.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
			Продолжить;
		КонецЕсли;
		
		ИмеющиесяДанные = СтрокаТаблицыДокументаПоПараметрам(СтрокаНоменклатуры.НомерСтроки, "Номенклатура");
		Если ИмеющиесяДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИмеющиесяДанные.ЗаполненоВручную
			И СтрокаНоменклатуры.Номенклатура = ИмеющиесяДанные.НайденноеЗначение
			И ИмеющиесяДанные.УверенностьНайденногоЗначения <= ПорогДобавления Тогда
			
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыИсходныхСтрок = Новый Соответствие();
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		ИдентификаторыИсходныхСтрок.Вставить(СтрокаПустойНоменклатуры.ПолучитьИдентификатор(), СтрокаПустойНоменклатуры);
	КонецЦикла;
	
	// Удаление исправленных значений
	Индекс = СписокНераспознаннойНоменклатуры.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		ИдентификаторТекущейСтроки = СписокНераспознаннойНоменклатуры[Индекс].ИдентификаторИсходнойСтроки;
		НайденноеЗначение = ИдентификаторыИсходныхСтрок.Получить(ИдентификаторТекущейСтроки);
		Если НайденноеЗначение = Неопределено Тогда
			СписокНераспознаннойНоменклатуры.Удалить(Индекс);
		Иначе // Отключение ранее добавленных строк
			ИндексУдаляемойСтроки = СтрокиПустойНоменклатуры.Найти(НайденноеЗначение);
			Если Не ИндексУдаляемойСтроки = Неопределено Тогда
				СтрокиПустойНоменклатуры.Удалить(ИндексУдаляемойСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Добавление новых
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		СвойстваНераспознаннойНоменклатуры = СписокНераспознаннойНоменклатуры.Добавить();
		СвойстваНераспознаннойНоменклатуры.ИдентификаторИсходнойСтроки = СтрокаПустойНоменклатуры.ПолучитьИдентификатор();
		
		ЗаполнитьЗначенияСвойств(СвойстваНераспознаннойНоменклатуры, СтрокаПустойНоменклатуры);
		
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы("Номенклатура", СтрокаПустойНоменклатуры.НомерСтроки);
		Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
		
		СвойстваНераспознаннойНоменклатуры.Наименование = Свойства.РаспознанныйТекст;
		
	КонецЦикла;
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(ИмяРеквизита, Значение = Неопределено)
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемаяСтрока.Выбран Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Тип = ТипЗнч(РедактируемаяСтрока.Значение);
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Значение = ОписаниеТипа.ПривестиЗначение();
	КонецЕсли;
	
	РедактируемаяСтрока.Значение = Значение;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита)
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтроки);
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	
	Возврат Свойства;
	
КонецФункции

&НаСервере
Процедура СохранитьПривязкуДокумента(СсылкаСоздаваемого)
	
	РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(СсылкаСоздаваемого, Объект.Ссылка, Ложь);
	Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопкиУстановкиРеквизитов()
	
	Отбор = Новый Структура("Выбран", Истина);
	ВыбранныеЭлементы = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	
	Элементы.ИзменитьЗначенияСтрокНераспознаннойНоменклатуры.Доступность = ВыбранныеЭлементы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗакрытия(Результат, Контекст) Экспорт
	
	Записать();
	Подключаемый_ПослеЗаписи();
	
	КлючеваяОперация = "РаспознаваниеДокументов.ЗакрытиеФормы." + ИмяФормы;
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление ячеек с ошибками
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	КолонкиТаблицыДокумента = ТаблицаДокументаТЗ.Колонки;
	
	Для Каждого Колонка Из КолонкиТаблицыДокумента Цикл
		
		Если СтрЗаканчиваетсяНа(Колонка.Имя, "ТекстОшибки") И Колонка.Имя <> "ОтступТекстОшибки" Тогда
			
			ИмяКолонкиОригинал = СтрЗаменить(Колонка.Имя, "ТекстОшибки", "");
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			Если ИмяКолонкиОригинал = "СуммаНДС"
				Или ИмяКолонкиОригинал = "СтранаПроисхождения"
				Или ИмяКолонкиОригинал = "НомерГТД" Тогда
				
				ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента." + Колонка.Имя);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			Иначе
				ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементОформления.Отбор.Элементы,
					"", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
					"ТаблицаДокумента." + Колонка.Имя, ВидСравненияКомпоновкиДанных.Заполнено);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
					"ТаблицаДокумента." + ИмяКолонкиОригинал, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КонецЕсли;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиОригинал);
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(251, 212, 212));
			
		КонецЕсли;
	КонецЦикла;
	
	// ЦветТекста для АналитикаУчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АналитикаУчета");
	
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ТаблицаДокумента.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ЦветТекстаАналитикиУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"ТаблицаДокумента.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИ,
		"ДоступностьДляЦветаТекстаАналитикиУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"ЕстьУслуги", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"ТаблицаДокумента.Услуга", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Видимость для АналитикаУчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АналитикаУчета");
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ВидимостьАналитикиУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"ЕстьУслуги", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Доступность для АналитикаУчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АналитикаУчета");
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ДоступностьАналитикиУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"ЕстьУслуги", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"ТаблицаДокумента.Услуга", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<заполняется автоматически>'"));
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("АналитикаУчета");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "АналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.ТаблицаДокумента.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки = ТаблицаДокумента.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	МодульПереопределения = РаспознаваниеДокументовКлиентПереопределяемый;
	МодульПереопределения.ОткрытиеФормыРедактированияСтроки(ЭтотОбъект, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы.ТаблицаДокумента.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	
	Модифицированность = Истина;
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("ДокументБезНДС", Форма.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ", Форма.ПлательщикНДФЛ);
	ПараметрыОбъекта.Вставить("ТребуетсяСчетРасходовПоОказаниюУслуг", Ложь);
	ПараметрыОбъекта.Вставить("Направление", Объект.Направление);
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Форма.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("НДСВключенВСтоимость", Форма.НДСВключенВСтоимость);
	ПараметрыОбъекта.Вставить("ПлательщикНалогаНаПрибыль", Форма.ПлательщикНалогаНаПрибыль);
	ПараметрыОбъекта.Вставить("ПрименениеУСН", Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименениеУСНДоходы", Форма.ПрименениеУСНДоходы);
	ПараметрыОбъекта.Вставить("УчетАгентскогоНДС", Форма.УчетАгентскогоНДС);
	ПараметрыОбъекта.Вставить("РаздельныйУчетНДСНаСчете19", Форма.РаздельныйУчетНДСНаСчете19);
	ПараметрыОбъекта.Вставить("ПрименяетсяМалоценка", Форма.ПрименяетсяМалоценка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") 
		ИЛИ НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбъекта.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
		// При вызове с сервера: функциональная опция может скрыть эти поля
		ДанныеЗаполнения = Новый Структура("СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, СуммаНДС, Услуга");
	Иначе
		ДанныеЗаполнения = Новый Структура("Сумма, СчетУчета, СчетУчетаНДС, СуммаНДС, СпособУчетаНДС,
			|СчетЗатрат, Субконто1, Субконто2, Субконто3,
			|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
			|ПодразделениеЗатрат, ОтражениеВУСН,
			|ВсегоПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу,
			|ВсегоОтклонение, СуммаОтклонение, СуммаНДСОтклонение,
			|НадписьПоДокументу, НадписьПоФакту, НадписьОтклонение,
			|Всего, АналитикаУчета, АналитикаУчетаЗаполнена, Услуга");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(
		ДанныеЗаполнения,
		ПараметрыОбъекта,
		Не ПараметрыОбъекта.ДокументБезНДС,
		ПараметрыОбъекта.ПлательщикНДФЛ,
		ПараметрыОбъекта.ПрименяетсяМалоценка);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, ПараметрыОбъекта, Знач ЗаполнятьНДС, Знач ЗаполнятьНДФЛ, Знач ПрименяетсяМалоценка)
	
	Если ПараметрыОбъекта.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		// Реализация товаров услуг
	
		Если ДанныеСтроки.Услуга Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("АналитикаУчета",          "");
			Результат.Вставить("АналитикаУчетаЗаполнена", Истина);

			ВидСубконтоНГ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
			
			// Счет доходов - всегда
		    Если Не ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
		    	Результат.АналитикаУчета 	      = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
				Результат.АналитикаУчетаЗаполнена = Ложь;
		    Иначе
				СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
				Результат.АналитикаУчета = "" + СвойстваСчета.Код;
				
				Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
					
					Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
						ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
						ПредставлениеСубконто = "";
						
						Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
							ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
						ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
							ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
						Иначе
							ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
						КонецЕсли;
						Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
							Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
						КонецЕсли;
					Иначе
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
						
						// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
						Если ПараметрыОбъекта.ПлательщикНДФЛ
							И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
								ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
								ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
							Результат.АналитикаУчетаЗаполнена = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
			
		    // Счет расходов
		    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
				СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
		    Иначе
		    	Если ПараметрыОбъекта.ТребуетсяСчетРасходовПоОказаниюУслуг Тогда
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
		    КонецЕсли;

			Если Не ПараметрыОбъекта.ДокументБезНДС Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
					СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
				Иначе
					Если ДанныеСтроки.СуммаНДС <> 0 Тогда
						Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
						Результат.АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Возврат Результат;
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("АналитикаУчета",          "");
			Результат.Вставить("СчетУчетаЗабалансовый", Ложь);
			Результат.Вставить("СчетУчетаПартионный", Ложь);
			Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
			
			ВидСубконтоНГ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
			
			// СчетУчета
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
				СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
				Результат.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
				Результат.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
					ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
					ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
				Результат.АналитикаУчета = СвойстваСчета.Код;
			Иначе
				Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
				Результат.АналитикаУчетаЗаполнена  = Ложь;
			КонецЕсли;
			
			// Счета дохода, расхода и НДС учитываются, если счет учета товара незабалансовый
			Если НЕ Результат.СчетУчетаЗабалансовый Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
					
					СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
					
					Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
						Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
							ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
							ПредставлениеСубконто = "";
							
							Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
							ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
							Иначе
								ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
							КонецЕсли;
							Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
								Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
							КонецЕсли;
						Иначе
							Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
							
							// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
							Если ЗаполнятьНДФЛ
								И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
									ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
									ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
								Результат.АналитикаУчетаЗаполнена = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
			    	
			    Иначе
			    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
			    КонецЕсли;
				
			    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
			    	СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
			    	Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			    Иначе
			    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
			    КонецЕсли;
				
				Если ЗаполнятьНДС Тогда
					Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
						СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
					Иначе
						Если ДанныеСтроки.СуммаНДС <> 0 Тогда
							Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
							Результат.АналитикаУчетаЗаполнена = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;

			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		// Поступление товаров услуг
		
		Малоценка = ПрименяетсяМалоценка И (ДанныеСтроки.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов"));
		
		Если ДанныеСтроки.Услуга Или Малоценка Тогда
			
			АналитикаУчетаТекст 	= "";
			АналитикаУчетаЗаполнена = Истина;

			ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
			СтроковыеПредставленияСубконто = Новый Структура();
			
			Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
					СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
					
					АналитикаУчетаТекст = СвойстваСчета.Код;
					
					Если СвойстваСчета.УчетПоПодразделениям Тогда
						Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
							ТекстСтроки 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПодразделениеЗатрат, "Наименование");
							АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + ТекстСтроки;
						Иначе
							АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
						КонецЕсли;
					КонецЕсли;
					
					Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
						ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
						Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
							ПредставлениеСубконто = "";
							ТипСубконто = ТипЗнч(ЗначениеСубконто);
							Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								Продолжить;
							ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
							ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
							Иначе
								ПредставлениеСубконто = Строка(ЗначениеСубконто);
							КонецЕсли;
							
							СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
							СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
							
							АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
						Иначе
							АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;

			// СчетУчетаНДС - до затрат НУ, т.к. аналитика НУ чаще всего совпадает с БУ
			Если ДанныеСтроки.Свойство("СчетУчетаНДС") Тогда
				Если ПараметрыОбъекта.НДСВключенВСтоимость
					И НЕ ПараметрыОбъекта.УчетАгентскогоНДС
					И НЕ ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
					// в этих случаях счет учета НДС не показывается
				Иначе
					Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС) Тогда
						СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДС);
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
					Иначе
						Если ДанныеСтроки.СуммаНДС <> 0 Тогда
							АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
							АналитикаУчетаЗаполнена = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеСтроки.Свойство("СпособУчетаНДС") Тогда
				Если ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
					Если ЗначениеЗаполнено(ДанныеСтроки.СпособУчетаНДС) Тогда
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.СпособУчетаНДС);
					Иначе
						Если ДанныеСтроки.СуммаНДС <> 0 Тогда
							АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
							АналитикаУчетаЗаполнена = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// СчетУчетаЗатратНУ
			Если ДанныеСтроки.Свойство("СчетЗатратНУ") Тогда
				Если ПараметрыОбъекта.ПлательщикНалогаНаПрибыль Тогда
					Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ) Тогда
						СвойстваСчетаНУ 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатратНУ);
						
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчетаНУ.Код;
						
						Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл
							
							ЗначениеСубконтоНУ 	= ДанныеСтроки["СубконтоНУ" + Н];
							
							Если ЗначениеЗаполнено(ЗначениеСубконтоНУ) Тогда

								ПредставлениеСубконтоНУ = "";
								
								// Если совпадает с субконто БУ, то представление выводим как для БУ.
								ЗначениеСубконтоБУ = Неопределено;
								Если СтроковыеПредставленияСубконто.Свойство("ЗначениеСубконто" + Н, ЗначениеСубконтоБУ) Тогда
									Если ЗначениеСубконтоБУ = ЗначениеСубконтоНУ Тогда
										ПредставлениеСубконтоНУ = СтроковыеПредставленияСубконто["ПредставлениеСубконто" + Н];
									КонецЕсли;
								КонецЕсли;
								
								Если ПустаяСтрока(ПредставлениеСубконтоНУ) Тогда
									ТипСубконто = ТипЗнч(ЗначениеСубконтоНУ);
									Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
										Продолжить;
									ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
										ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
									ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
										ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
									Иначе
										ПредставлениеСубконтоНУ = Строка(ЗначениеСубконтоНУ);
									КонецЕсли;
								КонецЕсли;
							
								АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконтоНУ;
							
							Иначе
								АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
							КонецЕсли;
							
						КонецЦикла;

					Иначе
						АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
						АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;

			// ОтражениеВУСН
			Если НЕ ПараметрыОбъекта.ПрименениеУСН
				ИЛИ ПараметрыОбъекта.ПрименениеУСНДоходы Тогда	
				// в этих случаях ОтражениеВУСН не требуется
			Иначе
				Если ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
				    АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.ОтражениеВУСН);
				Иначе
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Новый Структура;
			Результат.Вставить("АналитикаУчета", АналитикаУчетаТекст);
			Результат.Вставить("АналитикаУчетаЗаполнена", АналитикаУчетаЗаполнена);
			
			Возврат Результат;
		
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("АналитикаУчета",          "");
			Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
			
			// СчетУчета
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
				СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
				Результат.АналитикаУчета = СвойстваСчета.Код;
			Иначе
				Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
				Результат.АналитикаУчетаЗаполнена  = Ложь;
			КонецЕсли;
			
			// СчетУчетаНДС
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС) Тогда
				СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДС);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			Иначе
				Результат.АналитикаУчета           = Результат.АналитикаУчета + ", <...>";
				Результат.АналитикаУчетаЗаполнена  = Ложь;
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Знач ПараметрыОбъекта)
	
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Очистить = Ложь, Строки = Неопределено) Экспорт
	
	Если Строки = Неопределено Тогда
		Строки = ТаблицаДокумента;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Строки, Очистить);
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	
	Для каждого СтрокаТаблицы Из Строки Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	
	Дата = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ДатаДокумента", '20100101');
	Организация = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
		Объект, 
		РаспознаваниеДокументовСлужебный.ОсновныеРеквизиты(Объект)["Организация"], 
		Справочники.Организации.ПустаяСсылка()
	);
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	СуммаВключаетНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СуммаВключаетНДС", Ложь);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ДокументБезНДС = НЕ ПлательщикНДС И ТаблицаДокумента.Итог("СуммаНДС") = 0;
	
	НДСВключенВСтоимость = Не ПлательщикНДС;
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата);
	УчетАгентскогоНДС = Ложь; //  ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатуры(ИдентификаторСтроки)
	
	ТекущиеДанные = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	ЗаполнитьДобавленныеКолонкиТаблиц(Истина, Строки);
	
	Если ТекущиеДанные.Услуга Тогда
		ЕстьУслуги = Истина;
	Иначе
		ЗаполнитьНаличиеУслуг();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		// Счета учета скрываются только для поступлений
		// код частично из ПоступлениеТоваровУслугФормы.ОпределитьНеобходимостьРасчетаСуммыВРознице
		
		Дата = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ДатаДокумента", '20100101');
		Склад = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Склад", Справочники.Склады.ПустаяСсылка());
		Организация = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
			Объект, 
			РаспознаваниеДокументовСлужебный.ОсновныеРеквизиты(Объект)["Организация"], 
			Справочники.Организации.ПустаяСсылка()
		);
		
		УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата)
			= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
		Если Справочники.Склады.ЭтоСкладРозничнойТорговли(ТипСклада)
			И УчетВПродажныхЦенах Тогда
			
			РассчитыватьСуммаВРознице = Истина;
		Иначе
			РассчитыватьСуммаВРознице = Ложь;
		КонецЕсли;
	Иначе
		РассчитыватьСуммаВРознице = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПрименяетсяМалоценка()
	
	Дата = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ДатаДокумента", '20100101');
	
	ПрименяетсяМалоценка = УчетнаяПолитика.ПрименяетсяФСБУ5_2019(Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаличиеУслуг()
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.Услуга Тогда
			ЕстьУслуги = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьУслуги = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
