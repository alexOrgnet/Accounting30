#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОтчеты(Параметры, АдресРезультата) Экспорт
	
	ТаблицыОтчетов = ТаблицаОтчетныхЗадач(
		Параметры.Организация,
		Параметры.НачалоОбзора,
		Параметры.КонецОбзора,
		Параметры.ТекущийДень,
		Параметры.ДатаНачалаДеятельности,
		Параметры.ПросроченныеОтчеты,
		Параметры.ГосударственныйОрган);
	
	ОбновитьСведенияОбОтчетах(ТаблицыОтчетов.ОтчетныеЗадачи, Параметры.ГосударственныйОрган);
	
	ПоместитьВоВременноеХранилище(ТаблицыОтчетов, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьОтчеты(Параметры, АдресРезультата) Экспорт
	
	Организация     = Параметры.Организация;
	Период          = Параметры.Период;
	ТребуемыеОтчеты = Параметры.ТребуемыеОтчеты;
	
	Для Каждого ТребуемыйОтчет Из ТребуемыеОтчеты Цикл
		
		ПараметрыФормирования = ПараметрыФормированияРегламентированногоОтчета(ТребуемыйОтчет, Организация);
		
		ИдентификаторыПравил = ВыполнениеЗадачБухгалтера.ИдентификаторыПравилВыполняющихсяНеРеглОтчетами().ВыгрузитьКолонку("ФормаОтчета");
		
		Если ИдентификаторыПравил.Найти(ТребуемыйОтчет.ИсточникОтчета) = Неопределено Тогда
			
			СформированныйОтчет = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
				ТребуемыйОтчет.ИсточникОтчета,
				Организация,
				ТребуемыйОтчет.НачалоПериода,
				ТребуемыйОтчет.КонецПериода,
				Ложь,
				ТребуемыйОтчет.ВыбраннаяФорма,
				ПараметрыФормирования);
			
		Иначе
			
			СформированныйОтчет = СформироватьАвтоматическиРеглОтчетБЗКБ(
				ТребуемыйОтчет.ИсточникОтчета,
				Организация,
				ТребуемыйОтчет.НачалоПериода,
				ТребуемыйОтчет.КонецПериода,
				Ложь,
				ТребуемыйОтчет.ВыбраннаяФорма,
				ПараметрыФормирования);
				
		КонецЕсли;
		
		Если ПараметрыФормирования.Ошибки.Количество() = 0 Тогда
			
			ТребуемыйОтчет.РегламентированныйОтчет = СформированныйОтчет;
			ТребуемыйОтчет.Обновить = Ложь;
			
		Иначе
			
			ТребуемыйОтчет.ОшибкиФормирования = ПараметрыФормирования.Ошибки;
			ТребуемыйОтчет.Обновить = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТребуемыеОтчеты, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СведенияОбОрганизации(Организация, Период, ГосударственныйОрган) Экспорт
	
	Сведения = НовыйСведенияОбОрганизации();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сведения.ОписаниеОрганизации = НСтр("ru = 'Укажите организацию'");
		Возврат Сведения;
	КонецЕсли;
	
	Сведения.ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	ДатаНачалаИспользованияЭДО = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	Сведения.ЭлектронныйДокументооборотДоступен
		= ЗначениеЗаполнено(ДатаНачалаИспользованияЭДО) И ДатаНачалаИспользованияЭДО <= Период;
	
	Сведения.ПомощникДоступен = НулеваяОтчетность.ДоступноУпрощенноеФормирование(Организация, Период);
	
	Сведения.ОтчетыАктуальны = РегистрыСведений.АктуальностьКомплектаНулевойОтчетности.ОтчетыАктуальны(Организация);
	
	ЗаполнитьСведенияОГосударственномОргане(Сведения, Организация, Период, ГосударственныйОрган);
	
	Сведения.ОписаниеОрганизации = Справочники.Организации.ОписаниеОрганизацииДляПомощников(Организация, Период);
	
	Сведения.ЮридическоеЛицо     = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Возврат Сведения;
	
КонецФункции

// Выявляет и возвращает самый актуальный отчетный период организации на указанную дату.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - проверяемая организация
//  ТекущийПериод   - Дата - дата проверки
//  Расписание - ТаблицаЗначений:
//   * ПериодСобытия      - Дата - дата отчетного периода, любая в интервале
//   * Правило            - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило отчета
//   * Периодичность      - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета
//   * НачалоВыполнения   - Дата - дата начала выполнения задачи (сдачи отчета)
//   * Срок               - Дата - крайний срок задачи (сдачи отчета)
//
// Возвращаемое значение:
//  Структура   - включает свойства:
//   * Период          - Дата - дата отчетного периода
//   * Периодичность   - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета
//   * Правило         - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило актуального отчета
//
Функция РелевантныйОтчетныйПериод(Организация, ТекущийПериод, Расписание) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Период", '00010101');
	Результат.Вставить("Периодичность", Перечисления.Периодичность.ПустаяСсылка());
	Результат.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Результат.Вставить("Правила", Неопределено);
	
	ТекущиеПериоды = Расписание.СкопироватьКолонки();
	
	// Для получения периода с наименьшей периодичностью.
	ТекущиеПериоды.Колонки.Добавить("ПериодичностьПорядок",
		ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого ЗадачаОтчет Из Расписание Цикл
		Если ЗадачаОтчет.Срок >= ТекущийПериод Тогда // Текущая или предстоящая задача
			
			НоваяСтрока = ТекущиеПериоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаОтчет);
			
			НоваяСтрока.ПериодичностьПорядок = Перечисления.Периодичность.Индекс(ЗадачаОтчет.Периодичность);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущиеПериоды.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущиеПериоды.Сортировать("ПериодичностьПорядок, Срок, НачалоВыполнения", Новый СравнениеЗначений);
	
	Результат.Период        = ТекущиеПериоды[0].ПериодСобытия;
	Результат.Периодичность = ТекущиеПериоды[0].Периодичность;
	Результат.Правило       = ТекущиеПериоды[0].Правило;
	Результат.Правила       = ТекущиеПериоды;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаОтчетныхЗадач(Организация, НачалоОбзора, КонецОбзора, ТекущийДень, ДатаРегистрации, ПросроченныеОтчеты, ГосударственныйОрган)
	
	ОтчетныеЗадачи = НоваяТаблицаОтчетныхЗадач();
	
	РабочееРасписаниеПоОтчетам = РабочееРасписаниеПоОтчетам(Организация, НачалоОбзора, КонецОбзора, ТекущийДень, ПросроченныеОтчеты, ГосударственныйОрган);
	РасписаниеПоОтчетам = РабочееРасписаниеПоОтчетам.Расписание;
	
	СвойстваЗадачи = Новый Структура("ИдентификаторЗадачи, ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
	
	Для Каждого СтрокаРасписания Из РасписаниеПоОтчетам Цикл
		
		НоваяСтрока = ОтчетныеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасписания);
		
		// Дополнительные сведения о задаче
		Если СтрокаРасписания.ФинансовыйПериод <> СтрокаРасписания.Периодичность Тогда
			ПериодичностьНачало = СтрокаРасписания.ФинансовыйПериод;
			ПериодичностьКонец  = СтрокаРасписания.Периодичность;
		Иначе
			ПериодичностьНачало = СтрокаРасписания.Периодичность;
			ПериодичностьКонец  = СтрокаРасписания.Периодичность;
		КонецЕсли;
		
		НоваяСтрока.НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
			ПериодичностьНачало, НоваяСтрока.ПериодСобытия);
		НоваяСтрока.КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			ПериодичностьКонец, НоваяСтрока.ПериодСобытия);
		
		НоваяСтрока.Предстоящая = НоваяСтрока.НачалоВыполнения > ТекущийДень;
		
		ЗаполнитьЗначенияСвойств(СвойстваЗадачи, СтрокаРасписания);
		
		Если ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация, НоваяСтрока.ПериодСобытия, СвойстваЗадачи, ДатаРегистрации) Тогда
			
			ПропущенныйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
				СвойстваЗадачи.РасширенныйПервыйНалоговыйПериод,
				Организация,
				ДатаРегистрации);
			
			Если ЗначениеЗаполнено(ПропущенныйПериод) Тогда
				// Дополним наименование задачи особенностями расширенного отчетного периода.
				МесяцРегистрации = НРег(Формат(ДатаРегистрации, "Л=ru; ДФ='MMMM yyyy ''г.'''"));
				ДополнениеНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '(включая %1)'"), МесяцРегистрации);
				
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + " " + ДополнениеНаименования;
				
				НоваяСтрока.РасширенныйПериодПодсказка = ПомощникиПоУплатеНалоговИВзносов.ТекстПодсказкиПоРасширенномуПервомуОтчетномуПериоду(
					СвойстваЗадачи.ИдентификаторЗадачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Самые актуальные задачи должны оказаться в начале - отчеты в списке показываем "по убыванию".
	ОтчетныеЗадачи.Сортировать("Правило, ПериодСобытия Убыв", Новый СравнениеЗначений);
	
	Возврат Новый Структура("ОтчетныеЗадачи, АдресПравилаПрошлыхПериодов",
		ОтчетныеЗадачи, РабочееРасписаниеПоОтчетам.АдресПравилаПрошлыхПериодов);
	
КонецФункции

Функция РабочееРасписаниеПоОтчетам(Организация, НачалоОбзора, КонецОбзора, ТекущийДень, ПросроченныеОтчеты, ГосударственныйОрган)
	
	// Сначала обновим список задач.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоОбзора;
	ОтборПравил.КонецИнтервала  = КонецОбзора;
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Соответствия    = ВыполнениеЗадачБухгалтера.СоответствияПравилИФормОтчетов();
	ДопСоответствия = ВыполнениеЗадачБухгалтера.ИдентификаторыПравилВыполняющихсяНеРеглОтчетами();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДопСоответствия, Соответствия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Расписание",           Расписание);
	Запрос.УстановитьПараметр("ТекущийДень",          ТекущийДень);
	Запрос.УстановитьПараметр("НачалоОбзора",         Обработки.МониторНалоговИОтчетности.НачалоОбзораОтчетности(Организация, ТекущийДень));
	Запрос.УстановитьПараметр("КодыЗадачИсключений",  КодыЗадачИсключений());
	Запрос.УстановитьПараметр("Соответствия",         Соответствия);
	Запрос.УстановитьПараметр("ГосударственныйОрган", ГосударственныйОрган);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Соответствия.ФормаОтчета КАК ФормаОтчета,
	|	Соответствия.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Соответствия.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ВТСоответствия
	|ИЗ
	|	&Соответствия КАК Соответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСоответствия.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТСоответствия.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ВТСоответствия.ФормаОтчета КАК ФормаОтчета,
	|	ВидыОтправляемыхДокументов.ТипПолучателя КАК ТипПолучателя
	|ПОМЕСТИТЬ ВТПолучателиОтчета
	|ИЗ
	|	ВТСоответствия КАК ВТСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	|		ПО (ВТСоответствия.ФормаОтчета = ВидыОтправляемыхДокументов.Источник
	|				ИЛИ ПОДСТРОКА(ВТСоответствия.ФормаОтчета, 10, 100) = ВидыОтправляемыхДокументов.Источник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Расписание.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК РегистрацияВНалоговомОргане,
	|	ВЫРАЗИТЬ(Расписание.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК Правило,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.Периодичность КАК Периодичность,
	|	Расписание.Срок КАК Срок,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|	Расписание.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Расписание
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Владелец.Код КАК КодЗадачи,
	|	Правила.Код КАК КодПравила,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПоддерживаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_Расписание.Правило.Владелец
	|			ИЗ
	|				ВТ_Расписание)
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И НЕ Правила.Владелец.Код В (&КодыЗадачИсключений)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения,
	|	ЗадачиБухгалтера.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ПропущенныеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоддерживаемыеПравила КАК ПоддерживаемыеПравила
	|		ПО ЗадачиБухгалтера.Правило = ПоддерживаемыеПравила.Правило
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&Организация)
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоОбзора
	|	И ЗадачиБухгалтера.Срок < &ТекущийДень
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Расписание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Расписание.Правило КАК Правило,
	|	ВТ_Расписание.ПериодСобытия КАК ПериодСобытия,
	|	ВТ_Расписание.Периодичность КАК Периодичность,
	|	ВТ_Расписание.Срок КАК Срок,
	|	ВТ_Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|	ВТ_Расписание.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_РасписаниеОрганизации
	|ИЗ
	|	ВТ_Расписание КАК ВТ_Расписание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПропущенныеЗадачи.РегистрацияВНалоговомОргане,
	|	ВТ_ПропущенныеЗадачи.Правило,
	|	ВТ_ПропущенныеЗадачи.ПериодСобытия,
	|	ВТ_ПропущенныеЗадачи.Периодичность,
	|	ВТ_ПропущенныеЗадачи.Срок,
	|	ВТ_ПропущенныеЗадачи.НачалоВыполнения,
	|	ВТ_ПропущенныеЗадачи.Наименование
	|ИЗ
	|	ВТ_ПропущенныеЗадачи КАК ВТ_ПропущенныеЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИсключения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаИсключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаИсключения
	|ГДЕ
	|	ПравилаИсключения.Владелец.Код В(&КодыЗадачИсключений)
	|	И ПравилаИсключения.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РасписаниеОрганизации.Правило КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ СвойстваОтчетныхПравил
	|ИЗ
	|	ВТ_РасписаниеОрганизации КАК ВТ_РасписаниеОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ВТ_РасписаниеОрганизации.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.ВАрхиве КАК ВАрхиве
	|ПОМЕСТИТЬ ВТ_ЗадачиБухгалтера
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В
	|			(ВЫБРАТЬ
	|				ВТ_РасписаниеОрганизации.Правило
	|			ИЗ
	|				ВТ_РасписаниеОрганизации)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	РасписаниеОрганизации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасписаниеОрганизации.Правило КАК Правило,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.ИдентификаторЗадачи, """") КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.ФинансовыйПериод, ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)) КАК ФинансовыйПериод,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.РасширенныйПервыйНалоговыйПериод, ЗНАЧЕНИЕ(Перечисление.ВариантыРасширенногоПервогоНалоговогоПериода.ПустаяСсылка)) КАК РасширенныйПервыйНалоговыйПериод,
	|	РасписаниеОрганизации.ПериодСобытия КАК ПериодСобытия,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.Периодичность, РасписаниеОрганизации.Периодичность) КАК Периодичность,
	|	РасписаниеОрганизации.Срок КАК Срок,
	|	РасписаниеОрганизации.НачалоВыполнения КАК НачалоВыполнения,
	|	РасписаниеОрганизации.Наименование КАК Наименование,
	|	ВТПолучателиОтчета.ТипПолучателя КАК ГосударственныйОрган
	|ПОМЕСТИТЬ ВТ_ПравилаПоПолучателям
	|ИЗ
	|	ВТ_РасписаниеОрганизации КАК РасписаниеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО РасписаниеОрганизации.Правило = ЗадачиБухгалтера.Правило
	|			И РасписаниеОрганизации.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваОтчетныхПравил КАК СвойстваОтчетныхПравил
	|		ПО РасписаниеОрганизации.Правило = СвойстваОтчетныхПравил.Правило
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолучателиОтчета КАК ВТПолучателиОтчета
	|		ПО РасписаниеОрганизации.Правило.Код = ВТПолучателиОтчета.ИдентификаторПравила
	|ГДЕ
	|	НЕ РасписаниеОрганизации.Правило В
	|				(ВЫБРАТЬ
	|					ПравилаИсключения.Ссылка
	|				ИЗ
	|					ПравилаИсключения)
	|	И ВЫБОР
	|			КОГДА РасписаниеОрганизации.НачалоВыполнения <= &ТекущийДень
	|					И РасписаниеОрганизации.Срок >= &ТекущийДень
	|				ТОГДА НЕ ЗадачиБухгалтера.ВАрхиве ЕСТЬ NULL
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПравилаПоПолучателям.Организация КАК Организация,
	|	ВТ_ПравилаПоПолучателям.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ПравилаПоПолучателям.Правило КАК Правило,
	|	ВТ_ПравилаПоПолучателям.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ПравилаПоПолучателям.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ВТ_ПравилаПоПолучателям.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод,
	|	ВТ_ПравилаПоПолучателям.ПериодСобытия КАК ПериодСобытия,
	|	ВТ_ПравилаПоПолучателям.Периодичность КАК Периодичность,
	|	ВТ_ПравилаПоПолучателям.Срок КАК Срок,
	|	ВТ_ПравилаПоПолучателям.НачалоВыполнения КАК НачалоВыполнения,
	|	ВТ_ПравилаПоПолучателям.Наименование КАК Наименование,
	|	ВТ_ПравилаПоПолучателям.ГосударственныйОрган КАК ГосударственныйОрган
	|ИЗ
	|	ВТ_ПравилаПоПолучателям КАК ВТ_ПравилаПоПолучателям
	|ГДЕ
	|	ВТ_ПравилаПоПолучателям.ГосударственныйОрган = &ГосударственныйОрган";
	
	РабочееРасписание = Запрос.Выполнить().Выгрузить();
	АдресПравилаПрошлыхПериодов = ПоместитьВоВременноеХранилище(РабочееРасписание, Новый УникальныйИдентификатор);
	НовоеРасписание = ПоправкаНаПериодичность(РабочееРасписание, ПросроченныеОтчеты, Организация, ТекущийДень);
	Возврат Новый Структура("Расписание, АдресПравилаПрошлыхПериодов", НовоеРасписание, АдресПравилаПрошлыхПериодов);
	
КонецФункции

Функция ПоправкаНаПериодичность(Расписание, ПросроченныеОтчеты, Организация, ТекущийДень)
	
	ПериодыОтчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Расписание.ВыгрузитьКолонку("Периодичность"));
	ПоказательПериода = Обработки.МониторНалоговИОтчетности.МинимальныйОтчетныйПериод(ПериодыОтчетов);
	
	ЭтоПерваяОтчетнаяКампания = РегистрыСведений.ПерваяОтчетнаяКампания.ЭтоПерваяОтчетнаяКампания(Организация, ТекущийДень, ПоказательПериода);
	ПервыйПериодКампании      = РегистрыСведений.ПерваяОтчетнаяКампания.ПервыйПериодКампании(Организация);
	
	НачалоОбзора = РегистрыСведений.ПерваяОтчетнаяКампания.ПервыйПериодКампании(Организация);
	
	НовоеРасписание = Расписание.СкопироватьКолонки();
	Для Каждого СтрокаРасписания ИЗ Расписание Цикл
		
		ПропущенныйНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(СтрокаРасписания.РасширенныйПервыйНалоговыйПериод, Организация);
		Если ПропущенныйНалоговыйПериод <> Неопределено Тогда
			Если (СтрокаРасписания.Периодичность = Перечисления.Периодичность.Месяц
				И КонецМесяца(СтрокаРасписания.ПериодСобытия) = КонецМесяца(ПропущенныйНалоговыйПериод))
				ИЛИ (СтрокаРасписания.Периодичность = Перечисления.Периодичность.Квартал
				И КонецКвартала(СтрокаРасписания.ПериодСобытия) = КонецКвартала(ПропущенныйНалоговыйПериод))
				ИЛИ (СтрокаРасписания.Периодичность = Перечисления.Периодичность.Год
				И КонецГода(СтрокаРасписания.ПериодСобытия) = КонецГода(ПропущенныйНалоговыйПериод)) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПерваяОтчетнаяКампания Тогда
			ТаблицаПрошлыхПериодов = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Организация, СтрокаРасписания.Правило);
			МассивЗначений = ТаблицаПрошлыхПериодов.НайтиСтроки(Новый Структура("Правило, Требуется, ПериодСобытия", СтрокаРасписания.Правило, Истина, СтрокаРасписания.ПериодСобытия));
			Если МассивЗначений.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(НовоеРасписание.Добавить(), СтрокаРасписания);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказательПериода = Перечисления.Периодичность.Год Тогда
			НачалоТекущегоОтчетногоПериода    = НачалоГода(ТекущийДень);
			КонецТекущегоОтчетногоПериода     = КонецГода(ТекущийДень);
		ИначеЕсли ПоказательПериода = Перечисления.Периодичность.Квартал Тогда
			НачалоТекущегоОтчетногоПериода    = НачалоКвартала(ТекущийДень);
			КонецТекущегоОтчетногоПериода     = КонецКвартала(ТекущийДень);
		Иначе // Месяц
			НачалоТекущегоОтчетногоПериода    = НачалоМесяца(ТекущийДень);
			КонецТекущегоОтчетногоПериода     = КонецМесяца(ТекущийДень);
		КонецЕсли;
			
		КонецОбзораЗадачи = КонецМесяца(ТекущийДень);
		
		ВыполеноДополнительноеУсловие = Ложь;
		Если СтрокаРасписания.Периодичность = Перечисления.Периодичность.Квартал Тогда
			Если ПоказательПериода <> Перечисления.Периодичность.Квартал Тогда
				ВыполеноДополнительноеУсловие = СтрокаРасписания.НачалоВыполнения = НачалоТекущегоОтчетногоПериода
					И СтрокаРасписания.Срок > КонецТекущегоОтчетногоПериода;
			КонецЕсли;
		ИначеЕсли СтрокаРасписания.Периодичность = Перечисления.Периодичность.Год Тогда
			Если ПоказательПериода <> Перечисления.Периодичность.Год Тогда
				ВыполеноДополнительноеУсловие = СтрокаРасписания.НачалоВыполнения = НачалоТекущегоОтчетногоПериода
					И СтрокаРасписания.Срок > КонецТекущегоОтчетногоПериода;
			КонецЕсли;
		КонецЕсли;
		
		ЗадачаВыполняетсяВТекущемПериоде = (СтрокаРасписания.НачалоВыполнения >= НачалоТекущегоОтчетногоПериода
				И СтрокаРасписания.Срок <= КонецТекущегоОтчетногоПериода)
				ИЛИ ВыполеноДополнительноеУсловие;
				
		Если НЕ ЗадачаВыполняетсяВТекущемПериоде Тогда // проверим на просроченность
			МассивСтрок = ПросроченныеОтчеты.НайтиСтроки(Новый Структура("ПериодСобытия, Срок",
				СтрокаРасписания.ПериодСобытия, СтрокаРасписания.Срок));
				Если МассивСтрок.Количество() <> 0 Тогда
					Если ЭтоПерваяОтчетнаяКампания Тогда
						// зачитываем задачи только предыдущего отчетного периода
						// глубже не смотрим - для этого есть опросник
						Если СтрокаРасписания.Срок >= НачалоТекущегоОтчетногоПериода
							И СтрокаРасписания.Срок <= КонецТекущегоОтчетногоПериода Тогда
							ЗадачаВыполняетсяВТекущемПериоде = Истина;
						КонецЕсли;
					Иначе
						// зачитываем все задачи предыдущих отчетных периодов после начала ведения учета в программе
						Если СтрокаРасписания.Срок <= НачалоТекущегоОтчетногоПериода
							И СтрокаРасписания.Срок >= ПервыйПериодКампании Тогда
							ЗадачаВыполняетсяВТекущемПериоде = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
		КонецЕсли;
			
		Если ЗадачаВыполняетсяВТекущемПериоде Тогда
			ЗаполнитьЗначенияСвойств(НовоеРасписание.Добавить(), СтрокаРасписания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовоеРасписание;
	
КонецФункции

Процедура ОбновитьСведенияОбОтчетах(ТаблицаОтчетов, ГосударственныйОрган)
	
	ЗадачиПоОтчетам      = ТаблицаОтчетов.Скопировать(, КлючУникальностиЗадач());
	ВыполнениеЗадач      = ВыполнениеЗадачБухгалтера.ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиПоОтчетам, Истина);
	ИдентификаторыПравил = ВыполнениеЗадачБухгалтера.ИдентификаторыПравилВыполняющихсяНеРеглОтчетами().ВыгрузитьКолонку("ФормаОтчета");
	
	АдминистраторыОтчетов = Новый Соответствие; // Кэш государственных органов.
	
	// Из ТаблицаОтчетов удаляем отчеты, подготовка которых не автоматизирована.
	// У таких задач не заполнен ИсточникОтчета, либо в источнике указан объект метаданных, отсутствующий в коллекции "Отчеты".
	НеобслуживаемыеОтчеты = Новый Массив;
	
	Для Каждого ОтчетнаяЗадача Из ТаблицаОтчетов Цикл
		
		Отбор = Новый Структура(КлючУникальностиЗадач());
		ЗаполнитьЗначенияСвойств(Отбор, ОтчетнаяЗадача);
		
		НайденныеСтроки  = ВыполнениеЗадач.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НеобслуживаемыеОтчеты.Добавить(ОтчетнаяЗадача);
			Продолжить;
		КонецЕсли;
		
		СведенияОбОтчете = НайденныеСтроки[0];
		
		Если Метаданные.Отчеты.Найти(СведенияОбОтчете.ИсточникОтчета) = Неопределено
			И ИдентификаторыПравил.Найти(СведенияОбОтчете.ИсточникОтчета) = Неопределено Тогда
			НеобслуживаемыеОтчеты.Добавить(ОтчетнаяЗадача);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтчетнаяЗадача.ГосударственныйОрган) Тогда
			ОтчетнаяЗадача.ГосударственныйОрган = ГосорганАдминистраторОтчета(ОтчетнаяЗадача.ИсточникОтчета, АдминистраторыОтчетов);
		КонецЕсли;
		Если ОтчетнаяЗадача.ГосударственныйОрган <> ГосударственныйОрган Тогда
			НеобслуживаемыеОтчеты.Добавить(ОтчетнаяЗадача);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтчетнаяЗадача, СведенияОбОтчете);
		
		Если СведенияОбОтчете.Документы.Количество() > 0 Тогда
			
			// Созданные отчеты отсортированы по убыванию даты подписи, нам нужен самый последний
			ОтчетнаяЗадача.РегламентированныйОтчет = СведенияОбОтчете.Документы[0].Ссылка;
			ОтчетнаяЗадача.Статус                  = СведенияОбОтчете.Документы[0].Статус;
			ОтчетнаяЗадача.СостояниеСдачиОтчета    = СведенияОбОтчете.Документы[0].СостояниеСдачиОтчетности;
			
		Иначе
			// Отчет будет создан позже, при обработке задач в форме.
		КонецЕсли;
		
		// Отчеты, для которых не поддерживается заполнение на сервере,
		// нужно будет создавать на клиенте с получением контекста формы отчета.
		ОперацииСОтчетом = РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(
			ОтчетнаяЗадача.ИсточникОтчета, ОтчетнаяЗадача.ВыбраннаяФорма);
			
		Если ИдентификаторыПравил.Найти(ОтчетнаяЗадача.ИсточникОтчета) <> Неопределено Тогда
			ОтчетнаяЗадача.ФормироватьНаКлиенте = Ложь;
		Иначе
			ОтчетнаяЗадача.ФормироватьНаКлиенте = (ОперацииСОтчетом.АвтоФормированиеНаСервере <> Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОтчетнаяЗадача Из НеобслуживаемыеОтчеты Цикл
		ТаблицаОтчетов.Удалить(ОтчетнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыФормированияРегламентированногоОтчета(ТребуемыйОтчет, Организация)
	
	ПараметрыАвтоформирования = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыАвтоформирования, ТребуемыйОтчет);
	
	ПараметрыАвтоформирования.Организация    = Организация;
	ПараметрыАвтоформирования.ИмяФормыОтчета = ТребуемыйОтчет.ВыбраннаяФорма;
	ПараметрыАвтоформирования.ДатаНачала     = ТребуемыйОтчет.НачалоПериода;
	ПараметрыАвтоформирования.ДатаОкончания  = ТребуемыйОтчет.КонецПериода;
	
	Если ЗначениеЗаполнено(ТребуемыйОтчет.РегламентированныйОтчет) Тогда
		ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет = ТребуемыйОтчет.РегламентированныйОтчет;
	КонецЕсли;
	
	Возврат ПараметрыАвтоформирования;
	
КонецФункции

Функция КодыЗадачИсключений()
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("СтатистическаяОтчетность"); // В текущей версии не поддерживаем статистическую отчетность.
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ГосорганАдминистраторОтчета(ИсточникОтчета, АдминистраторыОтчетов)
	
	Госорган = АдминистраторыОтчетов.Получить(ИсточникОтчета);
	
	Если НЕ ЗначениеЗаполнено(Госорган) Тогда
		
		Госорган = ИнтерфейсыВзаимодействияБРО.ВидКонтролирующегоОргана(ИсточникОтчета);
		АдминистраторыОтчетов.Вставить(ИсточникОтчета, Госорган);
		
	КонецЕсли;
	
	Возврат Госорган;
	
КонецФункции

Функция НоваяТаблицаОтчетныхЗадач()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Тип("ДокументСсылка.РегламентированныйОтчет"));
	
	ТаблицаИдентификаторов = ВыполнениеЗадачБухгалтера.ИдентификаторыПравилВыполняющихсяНеРеглОтчетами();
	ТаблицаИдентификаторов.Свернуть("ФормаОтчета");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаИдентификаторов Цикл
		МассивДокументов.Добавить(Тип(СтрЗаменить(СтрокаТаблицы.ФормаОтчета, "Документ", "ДокументСсылка")));
	КонецЦикла;
	
	// Сведения, описывающие задачу.
	ТаблицаРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("РегистрацияВНалоговомОргане",
		Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаРезультат.Колонки.Добавить("Правило",
		Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТаблицаРезультат.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаРезультат.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("НачалоВыполнения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Предстоящая", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультат.Колонки.Добавить("РасширенныйПериодПодсказка", Новый ОписаниеТипов("Строка"));
	
	// Сведения, описывающие исполнение задачи.
	ТаблицаРезультат.Колонки.Добавить("ИсточникОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаРезультат.Колонки.Добавить("ВыбраннаяФорма", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаРезультат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ГосударственныйОрган",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов"));
	ТаблицаРезультат.Колонки.Добавить("РегламентированныйОтчет",
		Новый ОписаниеТипов(МассивДокументов, , ));
	ТаблицаРезультат.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ТаблицаРезультат.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультат.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ТаблицаРезультат.Колонки.Добавить("СостояниеСдачиОтчета",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	ТаблицаРезультат.Колонки.Добавить("ФормироватьНаКлиенте", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультат.Колонки.Добавить("АдресПравилаПрошлыхПериодов", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция КлючУникальностиЗадач()
	
	Возврат "Организация, ПериодСобытия, Правило, РегистрацияВНалоговомОргане, Периодичность";
	
КонецФункции

Функция НовыйСведенияОбОрганизации()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНачалаДеятельности", '00010101');
	Результат.Вставить("ОписаниеОрганизации", "");
	Результат.Вставить("ПомощникДоступен", Ложь);
	Результат.Вставить("ЭлектронныйДокументооборотДоступен", Ложь);
	Результат.Вставить("ОтчетыАктуальны", Ложь);
	
	Результат.Вставить("ГосударственныйОрган_Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("ГосударственныйОрган_Наименование", "");
	Результат.Вставить("ГосударственныйОрган_Адрес", "");
	Результат.Вставить("ГосударственныйОрган_Телефоны", "");
	Результат.Вставить("ГосударственныйОрган_СведенияОПолучателеКонверта", Неопределено);
	
	Результат.Вставить("ЮридическоеЛицо",  Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСведенияОГосударственномОргане(Сведения, Организация, Период, ГосударственныйОрган)
	
	Префикс = "";
	Если ГосударственныйОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		
		ГосОрган = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Организация);
		Префикс = "ФНС";

	ИначеЕсли ГосударственныйОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		
		ГосОрган = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоОрганизации(Организация);
		Префикс = "ПФР";
		
	ИначеЕсли ГосударственныйОрган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		
		ГосОрган = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоОрганизации(Организация);
		Префикс = "ФСС";
	Иначе
		// Другие получатели
		// БанкРоссии, Минобороны, Роструд, РПН, ФСГС, ФСРАР, ФТС
		// В настоящий момент не обслуживаем
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГосОрган) И Префикс <> "" Тогда	
		ГосОрган.Свойство(Префикс + "_Контрагент",
			Сведения.ГосударственныйОрган_Контрагент);
		ГосОрган.Свойство(Префикс + "_Наименование",
			Сведения.ГосударственныйОрган_Наименование);
		ГосОрган.Свойство(Префикс + "_Адрес",
			Сведения.ГосударственныйОрган_Адрес);
		ГосОрган.Свойство(Префикс + "_Телефоны",
			Сведения.ГосударственныйОрган_Телефоны);
		ГосОрган.Свойство(Префикс + "_СведенияОПолучателеКонверта",
			Сведения.ГосударственныйОрган_СведенияОПолучателеКонверта);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьАвтоматическиРеглОтчетБЗКБ(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет = Ложь,
												ИмяФормыОтчета = Неопределено, ПараметрыАвтоФормирования = Неопределено) Экспорт
	
	Если ИмяФормыОтчета = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать отчет!'");
		Сообщение.Сообщить();
		
		Возврат ИмяФормыОтчета;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	ЗначенияПоУмолчанию = Новый Структура("Руководитель, ДолжностьРуководителя");
	ЗарплатаКадрыПереопределяемый.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию, ДатаНачала);
	
	ИмяИсточникаОтчета = СтрЗаменить(ИсточникОтчета, "Документ.", "");
	Если ИмяИсточникаОтчета = "СведенияОЗастрахованныхЛицахСЗВ_М"
		ИЛИ ИмяИсточникаОтчета = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" 
		ИЛИ ИмяИсточникаОтчета = "СправкиНДФЛДляПередачиВНалоговыйОрган" Тогда
		
		НовыйДокумент = Документы[ИмяИсточникаОтчета].НовыйДокумент(Организация, ДатаНачала, Истина);
		ПараметрыАвтоФормирования.Вставить("Ошибки", НовыйДокумент.Ошибки);
		Возврат НовыйДокумент.Ссылка;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать отчет!'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли