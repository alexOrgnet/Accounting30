
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МожноСоздаватьУведомления = ПравоДоступа("Изменение", Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов);
	
	Объект.Организация = Параметры.Организация;
	Объект.Период = Параметры.ПериодСобытия;
	
	Правило = Параметры.Правило;
	Срок    = Параметры.Срок;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;

	ЦветПодсветки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ВыборСтандартногоПериодаФонКнопки");

	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
		Объект.Период = Мин(НачалоДня(КонецМесяца(ТекущаяДатаПользователя)), АктуальныйПериод());
	КонецЕсли;

	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ЗаполнитьНачальныеПоказатели();
	
	Заголовок = НСтр("ru = 'Налог на профессиональный доход'");
	
	ТекстНалогНеРассчитан = НСтр("ru = 'Не рассчитан'");
	
	ДанныеПодключения = Новый Структура;
	ДанныеПодключения.Вставить("НовыеЭлементыФормы", Новый Массив);
	
	ОрганизацияПредставление = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПроверитьРеквизитыОрганизации();
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	ВыполнениеИзКомандногоМеню = НЕ Параметры.КонтекстныйВызов;
	Элементы.Организация.Видимость              = ВыполнениеИзКомандногоМеню И ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	Элементы.ОрганизацияПредставление.Видимость = НЕ ВыполнениеИзКомандногоМеню ИЛИ НЕ ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроверитьЗаполнение() Тогда
		ОтправитьЗапросВСервисФНС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Организация = Объект.Организация
			И ЗначениеЗаполнено(Параметр.Налог) Тогда
			
			НайтиПлатежиСвязанныеСЗадачей();
			УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Источник = Объект.Организация Тогда
		
		ПоказатьБаннерРазныеАдресаМестаЖительства(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Самозанятые_ИзмененыРазрешения"
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация") = Объект.Организация Тогда
		
		ПолучитьКвитанцииПослеЗапросаРазрешений(Неопределено, Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов" Тогда
		
		ЗаполнитьУведомленияИОтобразитьНаФорме();
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		НайтиПлатежиСвязанныеСЗадачей();
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСообщениеРазныеАдресаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "МойНалогНастройки" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизации" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.Организация);
		
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);

	Если НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизацииДляОтчетности" Тогда

		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
		ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
		ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы,
			ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыручкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполняемыеНастройки = Новый Структура;
	ЗаполняемыеНастройки.Вставить("Показатели", Ложь);
	ЗаполняемыеНастройки.Вставить("Группировка", Ложь);
	ЗаполняемыеНастройки.Вставить("Отбор", Ложь);
	ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Ложь);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",                  Истина);
	ДополнительныеСвойства.Вставить("Организация",                       Объект.Организация);
	ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь); // не поддерживается
	ДополнительныеСвойства.Вставить("НачалоПериода",                     НачалоМесяца(Объект.Период));
	ДополнительныеСвойства.Вставить("КонецПериода",                      КонецМесяца(Объект.Период));
	ДополнительныеСвойства.Вставить("Период",                            Объект.Период);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",                 Истина);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.ДоходыНПД.Форма.ФормаОтчета", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументОплатыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтборПоФильтру = Новый Структура("НаименованиеЭлементаРазмещения", Элемент.Имя);
	НайденныеСтроки = Платежи.НайтиСтроки(ОтборПоФильтру);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	СтандартнаяОбработка = Ложь;
	
	НайденнаяСтрокаПоЭлементуРазмещения = НайденныеСтроки[0];
	
	ПлатежныйДокумент = НайденнаяСтрокаПоЭлементуРазмещения.Ссылка;
	ПредставлениеДокумента = НайденнаяСтрокаПоЭлементуРазмещения.ПредставлениеДокумента;
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		Если ТипЗнч(ПлатежныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ПлатежныйДокумент);
			ПараметрыФормы.Вставить("Налоги", Истина);
			ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПоказатьЗначение(, ПлатежныйДокумент);
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить документ %1?'"), ПредставлениеДокумента);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументУплатыДляУдаления", ПлатежныйДокумент);
		ДополнительныеПараметры.Вставить("НаименованиеЭлементаРазмещения", ОтборПоФильтру.НаименованиеЭлементаРазмещения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УдалитьПлатежныйДокументИзКоллекцииПлатежейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьНачальныеПоказатели();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйКабинетОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ЛичныйКабинетСервисаМойНалог" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСервиса();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СохранитьВНастройкахАдресМестаЖительстваИзСервиса(Объект.Организация, АдресСпискаКвитанцийНаУплатуНалога);
	ПоказыватьОшибкуРазныеАдреса = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ВыборПериода

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ПриИзмененииПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоМесяца(Объект.Период);
	КонецПериода  = КонецМесяца(Объект.Период);
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода",  КонецПериода);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
		ПараметрыВыбора, Элементы.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПояснениеОтсутствуетРазрешениеНаОплатуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(Объект.Период, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(Объект.Период, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПопыткуПодключения(Команда)
	
	СообщениеОшибкиПодключения = "";
	СервисМойНалогПодключен = ПроверитьСостояниеПодключенияКСервисуМойНалог(Объект.Организация);
	
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЧерезБанк(Команда)
	
	ОплатитьНаКлиенте(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЧерезКассу(Команда)
	
	ОплатитьНаКлиенте(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступ(Команда)
	
	ОтправитьЗапросНаИзменениеРазрешений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     Правило);
	ПараметрыУведомления.Вставить("ПериодСобытия",               Объект.Период);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ТаблицаЗаполненияОперацииПоЕНС());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект, , , ,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку(Объект.Организация, НеОтправленныеПлатежи);
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл(Объект.Организация, НеИсполненныеПлатежи);
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Объект.Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	ПроверитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияДанныхЗаполненияПлатежногоДокумента(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		ПараметрыФормы.Вставить("Правило", Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", Объект.Период);
		ПараметрыФормы.Вставить("Налоги", Истина);
		
		Если ДополнительныеПараметры.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод") Тогда
			ТипДокумента = "ПлатежноеПоручение";
		Иначе
			ТипДокумента = "РасходныйКассовыйОрдер";
		КонецЕсли;
		
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента), ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаКлиенте(СпособОплаты)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗадолженностей.Количество() = 1 Тогда
		
		ОткрытьФормуНовогоПлатежногоДокумента(СпособОплаты);
		
	Иначе
		
		НачатьСозданиеПлатежныхДокументов(СпособОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоПлатежногоДокумента(СпособОплаты)
	
	ДлительнаяОперация = ДанныеЗаполненияПлатежногоДокументаВФоне(СпособОплаты);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособОплаты", СпособОплаты);
		
		Обработчик = Новый ОписаниеОповещения(
			"ПослеПолученияДанныхЗаполненияПлатежногоДокумента",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПлатежногоДокументаВФоне(СпособОплаты)
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСоздания = ПараметрыСозданияПлатежныхДокументов(СпособОплаты);
	Если ПараметрыСоздания = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Задолженность =  ТаблицаЗадолженностей[0];
	
	Отбор = Новый Структура("ИдентификаторИсточника", Задолженность.ИдентификаторПлатежа);
	Квитанции = СписокКвитанций.НайтиСтроки(Отбор);
	Если Квитанции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыСоздания", ПараметрыСоздания);
	ПараметрыОбработчика.Вставить("ДанныеКвитанции", ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Квитанции[0]));
	ПараметрыОбработчика.Вставить("НалоговыйПериод", Задолженность.Период);
	ПараметрыОбработчика.Вставить("ВидОбязательства", Задолженность.ВидНалоговогоОбязательства);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных для заполнения платежного документа'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНПД.ДанныеЗаполненияПлатежногоДокументаВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьСозданиеПлатежныхДокументов(СпособОплаты)
	
	ДлительнаяОперация = СоздатьПлатежныеДокументыНаСервереВФоне(СпособОплаты);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияПлатежныхДокументов", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Создает Платежные поручения или Выплаты наличными в зависимости от выбранного способа оплаты
// 
// Параметры:
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
// 
// Возвращаемое значение:
//    Структура - см. ДлительныеОперации.ВыполнитьВФоне
//
&НаСервере
Функция СоздатьПлатежныеДокументыНаСервереВФоне(СпособОплаты)
	
	ПараметрыОбработчика = ПараметрыСозданияПлатежныхДокументов(СпособОплаты);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение документа уплаты налога из помощника'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНПД.СоздатьПлатежныеДокументыВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияПлатежныхДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		СозданныеДокументы = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если СозданныеДокументы <> Неопределено Тогда;
			ОповеститьОСозданныхДокументах(СозданныеДокументы);
		КонецЕсли;
		
		НайтиПлатежиСвязанныеСЗадачей();
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияПлатежныхДокументов(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации",     ВидОперации);
	СтруктураПараметров.Вставить("Правило",         Правило);
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("СрокУплаты",      Срок);
	СтруктураПараметров.Вставить("Дата",            ОбщегоНазначения.ТекущаяДатаПользователя());
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Задолженности",   ТаблицаЗадолженностей.Выгрузить());
	СтруктураПараметров.Вставить("Платежи",         Платежи.Выгрузить());
	СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
	СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
	СтруктураПараметров.Вставить("НалоговыйПериодВТаблицеПлатежей", Истина);
	СтруктураПараметров.Вставить("СписокКвитанций", 
		СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при оплате налога:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура НайтиПлатежиСвязанныеСЗадачей()
	
	ЗаполнитьДокументыОплатыВТаблице();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПлатежногоДокумента(ТекСтрокаЗадолженность)

	Если Не ЗначениеЗаполнено(ТекСтрокаЗадолженность.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеПлатежа = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТекСтрокаЗадолженность.Состояние)
		И ЗначениеЗаполнено(ТекСтрокаЗадолженность.Ссылка) Тогда
		
		Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаЗадолженность.Ссылка, "Проведен");
		
		ТекСтрокаЗадолженность.Состояние = 
			?(Проведен, Перечисления.СостоянияБанковскихДокументов.Оплачено,
				Перечисления.СостоянияБанковскихДокументов.Подготовлено);
	КонецЕсли;
	
	ШаблонСтатусаДокумента = НСтр("ru = ' (%1)'");
	СтатусДокумента = СтрШаблон(ШаблонСтатусаДокумента, ТекСтрокаЗадолженность.Состояние);
	
	ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1%2",
		ТекСтрокаЗадолженность.ПредставлениеДокумента, СтатусДокумента), , , , "ОткрытьДокумент"));
	
	ТипПлатежногоДокумента = ТипЗНЧ(ТекСтрокаЗадолженность.Ссылка);

	Если Не ПравоДоступа("Изменение", ТекСтрокаЗадолженность.Ссылка.Метаданные()) Тогда
		Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	Конецесли;
	
	Если (ТекСтрокаЗадолженность.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И ТекСтрокаЗадолженность.Состояние <> Перечисления.СостоянияБанковскихДокументов.Отправлено)
		ИЛИ (ТипПлатежногоДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
		
		ПредставлениеПлатежа.Добавить("  ");
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
		
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыОплатыВТаблице()
	
	Платежи.Очистить();
	
	ТаблицаЗадолженностей.Сортировать("Период Возр");
	
	Если ТаблицаЗадолженностей.Количество() > 0 Тогда
		НачалоПериода = НачалоМесяца(ТаблицаЗадолженностей[0].Период);
		КонецПериода  = КонецМесяца(ТаблицаЗадолженностей[ТаблицаЗадолженностей.Количество() - 1].Период);
	Иначе
		НачалоПериода = НачалоМесяца(Объект.Период);
		КонецПериода  = КонецМесяца(Объект.Период);
	КонецЕсли;
	
	ВсеПлатежи = Обработки.ПомощникУплатыНПД.ДокументыУплаты(Объект.Организация, НачалоПериода, КонецПериода);
	
	Платежи.Загрузить(ВсеПлатежи);
	
	Для Каждого ТекСтрокаСписокДобавленныхЭлементовОплат Из СписокДобавленныхЭлементовОплат Цикл
		
		ИмяЭлемента = ТекСтрокаСписокДобавленныхЭлементовОплат.Значение;
		Элементы.Удалить(Элементы[ИмяЭлемента]);
		
	КонецЦикла;
	
	Элементы.ДекорацияДокументОплаты.Заголовок = "";
	
	СписокДобавленныхЭлементовОплат.Очистить();
	
	ИндексЗадолженности = 0;
	КоличествоЗадолженностей = ТаблицаЗадолженностей.Количество();
	
	Для каждого ТекСтрокаЗадолженность Из ТаблицаЗадолженностей Цикл
		
		ПараметрыОтбора = Новый Структура("Период, ВидНалоговогоОбязательства");
		ПараметрыОтбора.Вставить("Период", НачалоДня(КонецМесяца((ТекСтрокаЗадолженность.Период))));
		ПараметрыОтбора.Вставить("ВидНалоговогоОбязательства", ТекСтрокаЗадолженность.ВидНалоговогоОбязательства);
		
		НайденныеСтроки = Платежи.НайтиСтроки(ПараметрыОтбора);
		ИндексЗадолженности = ИндексЗадолженности + 1;
		
		КоличествоНайденныхПлатежей = НайденныеСтроки.Количество();
		Если КоличествоНайденныхПлатежей > 0 Тогда 
			
			ИндексПлатежа = 0;
			Для каждого ТекСтрокаПлатежа Из НайденныеСтроки Цикл
			
				Если ИндексПлатежа > 0 Тогда
				
					Если КоличествоЗадолженностей = 1 Тогда
						ГруппаПлатежСОтступом = Элементы.Найти("ГруппаПлатежСОтступом")
					Иначе
						ГруппаПлатежСОтступом = Элементы.Найти("ГруппаПлатежСОтступом" + ИндексЗадолженности)
					КонецЕсли;
					
					ШаблонНазванияДекорацияДокументОплаты = НСтр("ru = 'ДекорацияДокументОплаты%1'");
					НазваниеДекорацияДокументОплаты = 
					СтрШаблон(ШаблонНазванияДекорацияДокументОплаты, "" + ИндексЗадолженности + "" + ИндексПлатежа);
					НовыйЭлемент = 
						Элементы.Добавить(НазваниеДекорацияДокументОплаты, Тип("ДекорацияФормы"), ГруппаПлатежСОтступом);
					НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
					НовыйЭлемент.Заголовок  = "";
					НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
					НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
					НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияДокументОплатыОбработкаНавигационнойСсылки");
					
					ТекущийЭлементОплатыНаименование = НазваниеДекорацияДокументОплаты;
					СписокДобавленныхЭлементовОплат.Добавить(ТекущийЭлементОплатыНаименование);
				Иначе
					
					Если КоличествоЗадолженностей = 1 Тогда
						ТекущийЭлементОплатыНаименование = "ДекорацияДокументОплаты";
					Иначе
						ШаблонНаименования = НСтр("ru='ДекорацияДокументОплаты%1'");
						НаименованиеЭлемента = СтрШаблон(ШаблонНаименования, ИндексЗадолженности);
			
						ТекущийЭлементОплатыНаименование = НаименованиеЭлемента;
					КонецЕсли;
					
				КонецЕсли;
				
				ПредставлениеПлатежногоДокумента = ПолучитьПредставлениеПлатежногоДокумента(ТекСтрокаПлатежа);

				Если КоличествоЗадолженностей = 1 Тогда
					Элементы[ТекущийЭлементОплатыНаименование].Заголовок = ПредставлениеПлатежногоДокумента;
					ТекСтрокаПлатежа.НаименованиеЭлементаРазмещения = ТекущийЭлементОплатыНаименование;
				Иначе
					Элементы[ТекущийЭлементОплатыНаименование].Заголовок = ПредставлениеПлатежногоДокумента;
					ТекСтрокаПлатежа.НаименованиеЭлементаРазмещения = ТекущийЭлементОплатыНаименование;
				КонецЕсли;

				ИндексПлатежа = ИндексПлатежа + 1;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СуммаНалога = ТаблицаЗадолженностей.Итог("Сумма");
	
	Обработки.ПомощникУплатыНПД.УстановитьСтатусЗадачи(Объект.Организация, Правило, Объект.Период, Платежи, СуммаНалога);
	
	Если СуммаНалога > 0 Тогда
		ВсеНалогиОплачены = ВсеНалогиОплачены(ТаблицаЗадолженностей, Платежи);
	Иначе
		ВсеНалогиОплачены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеНалогиОплачены(ТаблицаЗадолженностей, ВсеПлатежи)
	
	Если ТаблицаЗадолженностей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВсеПлатежи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаНалоговПоПериодам = ТаблицаЗадолженностей.Выгрузить();
	ТаблицаНалоговПоПериодам.Свернуть("Период, ВидНалоговогоОбязательства", "Сумма");
	
	Для каждого ТекСтрокаНалогов Из ТаблицаНалоговПоПериодам Цикл
		
		ВсегоНалога = ТекСтрокаНалогов.Сумма;
		
		ПараметрыОтбора = Новый Структура("Период, ВидНалоговогоОбязательства");
		ПараметрыОтбора.Вставить("Период", НачалоДня(КонецМесяца((ТекСтрокаНалогов.Период))));
		ПараметрыОтбора.Вставить("ВидНалоговогоОбязательства", ТекСтрокаНалогов.ВидНалоговогоОбязательства);
		
		НайденныеСтроки = ВсеПлатежи.НайтиСтроки(ПараметрыОтбора);
		
		ВсегоНалогаОплачено = 0;
		
		Для каждого ТекСтрокаПлатежей Из НайденныеСтроки Цикл
			
			ВсегоНалогаОплачено = ВсегоНалогаОплачено + ТекСтрокаПлатежей.Сумма;
		
		КонецЦикла;
		
		Если ВсегоНалога > ВсегоНалогаОплачено Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданныхДокументах(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
		Объект.Организация, КонецМесяца(Объект.Период), Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход);
	
	Если ЗначениеЗаполнено(ПорядокУплаты.Правило) Тогда
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	Иначе
		Срок    = СрокУплатыНалогаПоУмолчанию(Объект.Период);
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
			"НалогНаПрофессиональныйДоход", "2019_Уплата");
	КонецЕсли;
	
	ОтменитьФоновыеЗаданияНаСервере();
	
	ТекстСрокРасчетаНалога = ТекстСрокРасчетаНалога(Объект.Период);
	
	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	СообщениеОбОшибке = "";
	СообщениеОшибкиПодключения = "";
	ПоказыватьОшибкуРазныеАдреса = Ложь;
	СервисМойНалогПодключен = ПроверитьСостояниеПодключенияКСервисуМойНалог(Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПериода(Форма)
	
	НачалоПериода = НачалоМесяца(Форма.Объект.Период);
	КонецПериода  = КонецМесяца(Форма.Объект.Период);
	
	Форма.ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокУплатыНалогаПоУмолчанию(Период)
	
	СледующийМесяц = ДобавитьМесяц(НачалоМесяца(Период), 1);
	
	Возврат Дата(Год(СледующийМесяц), Месяц(СледующийМесяц), 25);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСрокРасчетаНалога(Период)
	
	ШаблонТекста = НСтр("ru = 'Налоговая инспекция рассчитает налог за %1 с %2 по %3 %4 г.'");
	
	НалоговыйПериодСтрока = ПолучитьСклоненияСтроки(НРег(Формат(Период, "ДФ=MMMM")), , "ПД=Винительный");
	
	МесяцРасчетаСтрока = ПолучитьСклоненияСтроки(
		НРег(Формат(ДобавитьМесяц(Период, 1), "ДФ='MMMM yyyy'")), , "ПД=Родительный");
	
	Возврат СтрШаблон(ШаблонТекста,
		НалоговыйПериодСтрока[0], НачалоРасчетаНалогаДень(), ОкончаниеРасчетаНалогаДень(), МесяцРасчетаСтрока[0]);
	
КонецФункции

&НаСервере
Процедура ОтменитьФоновыеЗаданияНаСервере()
	
	Для Каждого ИдентификаторЗадания Из ИдентификаторыЗаданий Цикл
		Обработки.ПомощникУплатыНПД.ОтменитьФоновоеЗадание(ИдентификаторЗадания.Значение);
	КонецЦикла;
	
	ИдентификаторыЗаданий.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	СообщениеОбОшибке = "";

	РеквизитыЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
				Объект.Организация,
				ПроверяемыеРеквизитыДляОтчетности(),
				Неопределено);
	
	Если Не РеквизитыЗаполнены Тогда
		
		ТекстДействия = НСтр("ru= 'получить данные из налоговой инспекции'");
		СообщениеОбОшибке =
			ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности()
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ИНН");
	Реквизиты.Добавить("ФамилияИП");
	Реквизиты.Добавить("ИмяИП");
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросВСервисФНС()
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	СообщениеОшибкиПодключения = "";
	ПоказыватьОшибкуРазныеАдреса = Ложь;

	ТребуетсяРазрешениеНаОплату = Ложь;
	
	ОбновитьСтатусФоновогоЗадания();
	ВыполнитьЗапросыОНачислениях()
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапросыОНачислениях()
	
	ЗапросыОНачислениях = Новый Структура();
	ЗапросыОНачислениях.Вставить("ИнформацияОНачислениях", "ИнформацияОНачислениях");
	ЗапросыОНачислениях.Вставить("ИнформацияОНалоговыхНачислениях", "ИнформацияОНалоговыхНачислениях");
	ЗапросыОНачислениях.Вставить("СписокКвитанцийНаУплатуНалога", "СписокКвитанцийНаУплатуНалога");
	
	Возврат ЗапросыОНачислениях;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьСостояниеПодключенияКСервисуМойНалог(Знач Организация)

	СостояниеПодключения = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьСостояниеПодключения(Организация);
	
	Если СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросыОНачислениях()
	
	Если Не СервисМойНалогПодключен Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийЗапрос Из ЗапросыОНачислениях() Цикл
		
		НачатьВыполнениеМетодаВзаимодействия(ТекущийЗапрос.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеМетодаВзаимодействия(МетодВзаимодействия)
	
	Если Не СервисМойНалогПодключен Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ВыполнитьПолучениеДанныхНаСервере(
		ПараметрыМетодаВзаимодействия(МетодВзаимодействия),
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", МетодВзаимодействия);
		ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
		ДополнительныеПараметры.Вставить("Период", Объект.Период);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВыполненияМетодаВзаимодействия", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация)
	
	СообщениеОшибкиПодключения = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	
	ЗаписатьОшибкуВЖурналРегистрации(СообщениеОшибкиПодключения);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетодаВзаимодействия(МетодВзаимодействия)
	
	ПараметрыМетода = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(МетодВзаимодействия);
	
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, Объект);
	
	Если МетодВзаимодействия = ЗапросыОНачислениях().СписокКвитанцийНаУплатуНалога Тогда
		ПараметрыМетода.НачалоПериода = НачалоМесяца(ДобавитьМесяц(Объект.Период, 1));
		ПараметрыМетода.КонецПериода = КонецМесяца(ДобавитьМесяц(Объект.Период, 1));
	ИначеЕсли МетодВзаимодействия = "ЗапросНаИзменениеРазрешений" Тогда
		ПараметрыМетода.Разрешения = ТребуемыеРазрешенияПлатформы();
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьПолучениеДанныхНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействияВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияМетодаВзаимодействия(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Организация <> Объект.Организация
		Или ДополнительныеПараметры.Период <> Объект.Период Тогда
		Возврат; // Задание неактуально. После запуска этого задания были изменены ключевые реквизиты.
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		ИдентификаторДанныеЗапроса = СтрШаблон("Запрос%1", ДополнительныеПараметры.Запрос);
		ЭтотОбъект[ИдентификаторДанныеЗапроса] = ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если ЗначениеЗаполнено(ЭтотОбъект[ИдентификаторДанныеЗапроса]) Тогда
			ВремяОжидания = ЭтотОбъект[ИдентификаторДанныеЗапроса].ВремяОжидания;
		Иначе 
			ВремяОжидания = 0;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания(
			СтрШаблон("Подключаемый_ПолучитьРезультатВыполненияВФоне%1", ДополнительныеПараметры.Запрос),
			ВремяОжидания,
			Истина);
		
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
		ОбновитьСтатусФоновогоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатИзВременногоХранилища(Знач АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеИнформацияОНачислениях()
	
	НачатьПолучениеРезультатаВыполненияВФоне(ЗапросыОНачислениях().ИнформацияОНачислениях);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеИнформацияОНалоговыхНачислениях()
	
	НачатьПолучениеРезультатаВыполненияВФоне(ЗапросыОНачислениях().ИнформацияОНалоговыхНачислениях);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеСписокКвитанцийНаУплатуНалога()
	
	НачатьПолучениеРезультатаВыполненияВФоне(ЗапросыОНачислениях().СписокКвитанцийНаУплатуНалога);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеРезультатаВыполненияВФоне(ИмяЗапросаОНачислениях)
	
	ИдентификаторДанныеЗапроса = СтрШаблон("Запрос%1", ИмяЗапросаОНачислениях);
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		ЭтотОбъект[ИдентификаторДанныеЗапроса],
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = СтатусФоновогоЗадания;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", ИмяЗапросаОНачислениях);
		ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
		ДополнительныеПараметры.Вставить("Период", Объект.Период);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатаВыполненияМетода(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Организация <> Объект.Организация
		Или ДополнительныеПараметры.Период <> Объект.Период Тогда
		Возврат; // Задание неактуально. После запуска этого задания были изменены ключевые реквизиты.
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	Ответ = ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		ДанныеПолучены[ДополнительныеПараметры.Запрос] = Истина;
		ЗагрузитьПолученныеРезультаты(Ответ.Результат, ДополнительныеПараметры.Запрос);
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания(
			СтрШаблон("Подключаемый_ПолучитьРезультатВыполненияВФоне%1", ДополнительныеПараметры.Запрос),
			Ответ.ВремяОжидания,
			Истина);
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		КодОшибки = "НедостаточноПолномочийДляОперации";
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ.Результат, "Код", Неопределено) = КодОшибки Тогда
			ДанныеПолучены[ДополнительныеПараметры.Запрос] = Истина;
			ТребуетсяРазрешениеНаОплату = Истина;
		Иначе
			СообщениеОшибкиПодключения = Ответ.Сообщение;
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеОшибкиПодключения);
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Помощник уплаты НПД'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , ,
		ТекстОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатВыполненияВФонеНаСервере(Знач Запрос, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.ДополнительныйРезультат = Запрос.ДополнительныйРезультат;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполненияВФоне",
		Запрос,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПолученныеРезультаты(Результат, МетодВзаимодействия)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	ТребуетсяВызовСервера = Ложь;
	Если МетодВзаимодействия = ЗапросыОНачислениях.ИнформацияОНачислениях Тогда
		
		Выручка = Результат.ОбщаяСуммаДоходов - Результат.ОбщаяСуммаВозвратов;
		
	ИначеЕсли МетодВзаимодействия = ЗапросыОНачислениях.ИнформацияОНалоговыхНачислениях Тогда
		
		ТребуетсяВызовСервера = Истина;
		
	ИначеЕсли МетодВзаимодействия = ЗапросыОНачислениях.СписокКвитанцийНаУплатуНалога Тогда
		
		АдресСпискаКвитанцийНаУплатуНалога = Результат.АдресВременногоХранилища;
		
		ТребуетсяВызовСервера = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяВызовСервера Тогда
		ЗагрузитьПолученныеРезультатыНаСервере(Результат, МетодВзаимодействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолученныеРезультатыНаСервере(Результат, МетодВзаимодействия)
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	Если МетодВзаимодействия = ЗапросыОНачислениях.ИнформацияОНалоговыхНачислениях Тогда
		
		ЗаполнитьТаблицуЗадолженностиНаСервере(Результат.АдресВременногоХранилища);
		
		ЗаполнитьДокументыОплатыВТаблице();
		
	ИначеЕсли МетодВзаимодействия = ЗапросыОНачислениях.СписокКвитанцийНаУплатуНалога Тогда
		
		ПоказатьБаннерРазныеАдресаМестаЖительства(ЭтотОбъект);
		
		ЕстьКвитанцияНаПополнениеЕНС = ЕстьКвитанцияНаПополнениеЕНС(Результат.АдресВременногоХранилища);
		ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, ОбщегоНазначения.ТекущаяДатаПользователя())
			И ЕстьКвитанцияНаПополнениеЕНС = Неопределено Или ЕстьКвитанцияНаПополнениеЕНС;
		ЗаполнитьУведомленияИОтобразитьНаФорме();
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКвитанцияНаПополнениеЕНС(АдресСпискаКвитанцийНаУплатуНалога)
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕдиныйНалоговыйПлатеж = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	Для Каждого Квитанция Из СписокКвитанций Цикл
		Если Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Квитанция.КБК) = ЕдиныйНалоговыйПлатеж Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗадолженностиНаСервере(АдресВременногоХранилища)
	
	Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаЗадолженности = 0;
	ТаблицаЗадолженностей.Очистить();
	
	СписокНалоговыхНачислений = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для Каждого Начисление Из СписокНалоговыхНачислений.НачисленияНалога Цикл
		
		Если Не Начисление.Сумма > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Начисление.НалоговыйПериод) Тогда
			НалоговыйПериод = Дата(Формат(Начисление.НалоговыйПериод, "ЧГ=0;") + "01");
		ИначеЕсли ЗначениеЗаполнено(Начисление.СрокОплаты) Тогда
			НалоговыйПериод = НачалоМесяца(Начисление.СрокОплаты) - 1;
		Иначе
			НалоговыйПериод = Объект.Период;
		КонецЕсли;
		
		// Неоплаченные начисления за предыдущие налоговые периоды образуют задолженность.
		Если НачалоМесяца(НалоговыйПериод) < НачалоМесяца(Объект.Период) Тогда
			СуммаЗадолженности = СуммаЗадолженности + Макс(0, Начисление.Сумма - Начисление.СуммаОплат);
		КонецЕсли;
		
		// В таблицу добавляем начисления только за выбранный налоговый период.
		Если НачалоМесяца(НалоговыйПериод) <> НачалоМесяца(Объект.Период) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗадолженности = ТаблицаЗадолженностей.Добавить();
		НоваяСтрокаЗадолженности.Период = НалоговыйПериод;
		НоваяСтрокаЗадолженности.Сумма = Начисление.Сумма;
		НоваяСтрокаЗадолженности.ИдентификаторПлатежа = Начисление.Идентификатор;
		НоваяСтрокаЗадолженности.ВидЗадолженности = СтрШаблон(НСтр("ru = 'Налог за %1'"),
			НРег(ПредставлениеПериода(НачалоМесяца(НоваяСтрокаЗадолженности.Период), КонецМесяца(НоваяСтрокаЗадолженности.Период), "ФП=Истина")));
		НоваяСтрокаЗадолженности.ВидНалоговогоОбязательства =
			ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог");
		
	КонецЦикла;
	
	Если Объект.Период >= АктуальныйПериод() Тогда
		
		Для Каждого Задолженность Из СписокНалоговыхНачислений.КарточкиРасчетовСБюджетом Цикл
			
			Если Задолженность.СуммаЗадолженности > 0 Тогда
				НоваяСтрокаЗадолженности = ТаблицаЗадолженностей.Добавить();
				НоваяСтрокаЗадолженности.Период = Объект.Период;
				НоваяСтрокаЗадолженности.Сумма = Задолженность.СуммаЗадолженности;
				НоваяСтрокаЗадолженности.ИдентификаторПлатежа = Задолженность.Идентификатор;
				НоваяСтрокаЗадолженности.ВидЗадолженности = НСтр("ru = 'Задолженность'");
				НоваяСтрокаЗадолженности.ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог");
				НоваяСтрокаЗадолженности.ЭтоНалогЗаПредыдущиеПериоды = Истина;
			КонецЕсли;
			
			Если Задолженность.СуммаПени > 0 Тогда
				НоваяСтрокаЗадолженности = ТаблицаЗадолженностей.Добавить();
				НоваяСтрокаЗадолженности.Период = Объект.Период;
				НоваяСтрокаЗадолженности.Сумма = Задолженность.СуммаПени;
				НоваяСтрокаЗадолженности.ИдентификаторПлатежа = Задолженность.Идентификатор;
				НоваяСтрокаЗадолженности.ВидЗадолженности = НСтр("ru = 'Пени'");
				НоваяСтрокаЗадолженности.ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.ПениСам"); 
				НоваяСтрокаЗадолженности.ЭтоНалогЗаПредыдущиеПериоды = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьГруппуЗадолженностьНаФорме();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерРазныеАдресаМестаЖительства(Форма)
	
	Форма.ПоказыватьОшибкуРазныеАдреса = ВидимостьБаннераРазныеАдресаМестаЖительства(
		Форма.Объект.Организация, Форма.АдресСпискаКвитанцийНаУплатуНалога);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьБаннераРазныеАдресаМестаЖительства(Знач Организация, Знач АдресСпискаКвитанцийНаУплатуНалога)
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	АдресВБазе = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Организация, ВидКонтактнойИнформации);
	
	// В базе не заполнен адрес, дальнейшая проверка бессмысленна.
	Если ПустаяСтрока(АдресВБазе.Представление) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресИзСервиса = СписокКвитанций[0].АдресМестаЖительства;
	
	Если СтрЗаменить(ВРег(СокрЛП(АдресВБазе.Представление)), " ", "")
		= СтрЗаменить(ВРег(СокрЛП(АдресИзСервиса)), " ", "") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	СохраненныйАдресИзСервиса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"СамозанятыеАдресМестаЖительстваИзСервиса", ИНН, "");
	Если ЗначениеЗаполнено(СохраненныйАдресИзСервиса)
		И СохраненныйАдресИзСервиса = АдресИзСервиса Тогда
		// Пользователь намеренно скрыл баннер с предупреждением и адрес в сервисе не менялся.
		Возврат Ложь;
	КонецЕсли;
	
	АдресИзСервисаJSON = 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресИзСервиса, ВидКонтактнойИнформации);
	
	ДопПараметрыСведений = Новый Структура("НаименованиеВключаетСокращение", Ложь);
	АдресВБазеСведения = РаботаСАдресами.СведенияОбАдресе(АдресВБазе.Значение, ДопПараметрыСведений);
	АдресИзСервисаСведения = РаботаСАдресами.СведенияОбАдресе(АдресИзСервисаJSON, ДопПараметрыСведений);
	
	Если Не АдресИзСервисаСведения.ТипАдреса = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме() Тогда
		// Поля "Страна" и "КодСтраны" не заполняются при распознавании адреса.
		АдресИзСервисаСведения.Страна = АдресВБазеСведения.Страна;
		АдресИзСервисаСведения.КодСтраны = АдресВБазеСведения.КодСтраны;
		
		// Приведем адреса к общему формату.
		АдресВБазеСведения.ТипАдреса = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		АдресИзСервисаСведения.ТипАдреса = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		АдресДляСравнения1 = РаботаСАдресами.ПоляАдресаВJSON(АдресВБазеСведения);
		АдресДляСравнения2 = РаботаСАдресами.ПоляАдресаВJSON(АдресИзСервисаСведения);
	Иначе
		АдресДляСравнения1 = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			АдресВБазе.Представление, ВидКонтактнойИнформации);
		АдресДляСравнения2 = АдресИзСервисаJSON;
	КонецЕсли;
	
	ПоказыватьОшибкуРазныеАдреса = Не УправлениеКонтактнойИнформациейБП.СравнитьАдреса(АдресДляСравнения1, АдресДляСравнения2);
	
	Возврат ПоказыватьОшибкуРазныеАдреса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиЗадолженностиНаФорме(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.ВсегоКУплате = Форма.ТаблицаЗадолженностей.Итог("Сумма");
	
	Элементы.ТекстНалогЗаПредыдущиеПериоды.Заголовок = ТекстЗадолженностьПоНалогуЗаПредыдущиеПериоды(Форма.СуммаЗадолженности);
	
	ИндексЗадолженности = 0;
	Для каждого Задолженность Из Форма.ТаблицаЗадолженностей Цикл
		
		Если Не Задолженность.ЭтоНалогЗаПредыдущиеПериоды Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗадолженности = ИндексЗадолженности + 1;
		
		Элементы[СтрШаблон("ГруппаДолг%1", ИндексЗадолженности)].Видимость = Истина;
		
		НаименованиеЭлемента = СтрШаблон("ДекорацияДолг%1", ИндексЗадолженности);
		Элементы[НаименованиеЭлемента].Заголовок = Задолженность.ВидЗадолженности;
		
		НаименованиеЭлемента = СтрШаблон("ДекорацияСумма%1", ИндексЗадолженности);
		Элементы[НаименованиеЭлемента].Заголовок = Формат(Задолженность.Сумма, "ЧДЦ=2; ЧН=0,00");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗадолженностьПоНалогуЗаПредыдущиеПериоды(Задолженность)
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Не оплачена задолженность <b>%1</b> по налогу за предыдущие периоды'"),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(Задолженность));
	
	#Если Клиент Тогда
		Возврат СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстСообщения);
	#Иначе
		Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстСообщения);
	#КонецЕсли
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппуЗадолженностьНаФорме()

	// Перед добавлением новых элементов формы и реквизитов
	// будут удалены ранее добавленные элементы и реквизиты.
	Для каждого ИмяЭлемента Из ДанныеПодключения.НовыеЭлементыФормы Цикл
		Элементы.Удалить(Элементы[ИмяЭлемента]);
	КонецЦикла;
	
	ДанныеПодключения.НовыеЭлементыФормы = Новый Массив;
	
	ИндексЗадолженности = 0;
	Для каждого Задолженность Из ТаблицаЗадолженностей Цикл
		Если Задолженность.ЭтоНалогЗаПредыдущиеПериоды Тогда
			ИндексЗадолженности = ИндексЗадолженности + 1;
			ДобавитьНовуюГруппуЭлементовДолга(ИндексЗадолженности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюГруппуЭлементовДолга(ИндексЗадолженности)

	// Создание новых элементов форм.
	ГруппаФормыЗадолженность  = Элементы.Задолженность;

	ШаблонНазванияГруппыДолг = НСтр("ru = 'ГруппаДолг%1'");
	НазваниеГруппаДолг = СтрШаблон(ШаблонНазванияГруппыДолг, ИндексЗадолженности);
	ГруппаГруппаДолг = Элементы.Добавить(НазваниеГруппаДолг, Тип("ГруппаФормы"), ГруппаФормыЗадолженность);
	ГруппаГруппаДолг.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГруппаДолг.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаГруппаДолг.ОтображатьЗаголовок = Ложь;
	ГруппаГруппаДолг.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаГруппаДолг.Объединенная = Ложь;
	ДанныеПодключения.НовыеЭлементыФормы.Добавить(ГруппаГруппаДолг.Имя);
	
	// Создание ГруппаОсновногоДолга
	ШаблонНазванияГруппаОсновногоДолга = НСтр("ru = 'ГруппаОсновногоДолга%1'");
	НазваниеГруппаОсновногоДолга = СтрШаблон(ШаблонНазванияГруппаОсновногоДолга, ИндексЗадолженности);
	ГруппаОсновногоДолга = Элементы.Добавить(НазваниеГруппаОсновногоДолга, Тип("ГруппаФормы"), ГруппаГруппаДолг);
	ГруппаОсновногоДолга.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновногоДолга.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновногоДолга.ОтображатьЗаголовок = Ложь;
	ГруппаОсновногоДолга.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОсновногоДолга.Ширина = 25;
	ГруппаОсновногоДолга.РастягиватьПоГоризонтали = Ложь;
	ГруппаОсновногоДолга.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	ГруппаОсновногоДолга.Объединенная = Истина;

	ШаблонНазванияДекорацияДолг = НСтр("ru = 'ДекорацияДолг%1'");
	НазваниеДекорацияДолг = СтрШаблон(ШаблонНазванияДекорацияДолг, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияДолг, Тип("ДекорацияФормы"), ГруппаОсновногоДолга);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "";
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

	ШаблонНазванияДекорацияСумма = НСтр("ru = 'ДекорацияСумма%1'");
	НазваниеДекорацияСумма = СтрШаблон(ШаблонНазванияДекорацияСумма, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияСумма, Тип("ДекорацияФормы"), ГруппаОсновногоДолга);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "0,00";
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
	// Создание ГруппаПлатежСОтступом
	ШаблонНазванияГруппаПлатежСОтступом = НСтр("ru = 'ГруппаПлатежСОтступом%1'");
	НазваниеГруппаПлатежСОтступом = СтрШаблон(ШаблонНазванияГруппаПлатежСОтступом, ИндексЗадолженности);
	ГруппаПлатежСОтступом = Элементы.Добавить(НазваниеГруппаПлатежСОтступом, Тип("ГруппаФормы"), ГруппаГруппаДолг);
	ГруппаПлатежСОтступом.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПлатежСОтступом.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаПлатежСОтступом.ОтображатьЗаголовок = Ложь;
	ГруппаПлатежСОтступом.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПлатежСОтступом.Объединенная        = Ложь;
	ГруппаПлатежСОтступом.РастягиватьПоГоризонтали = Истина;
	
	ШаблонНазванияДекорацияДокументОплаты = НСтр("ru = 'ДекорацияДокументОплаты%1'");
	НазваниеДекорацияДокументОплаты = СтрШаблон(ШаблонНазванияДекорацияДокументОплаты, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияДокументОплаты, Тип("ДекорацияФормы"), ГруппаПлатежСОтступом);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "";
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияДокументОплатыОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДанныеПолучены = Форма.ДанныеПолучены;
	
	Если Не Форма.СервисМойНалогПодключен
		Или ЗначениеЗаполнено(Форма.СообщениеОшибкиПодключения) Тогда
		
		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Истина;
		Элементы.ДекорацияНетПодключения.Видимость = Не Форма.СервисМойНалогПодключен;
		Элементы.ДекорацияОшибкаПодключения.Видимость = Форма.СервисМойНалогПодключен;
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаОшибкаПодключенияДанных;

	ИначеЕсли ЗначениеЗаполнено(Форма.СообщениеОбОшибке) Тогда
		
		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Истина;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаРасчетНедоступен;
	
	ИначеЕсли ВсеДанныеПолучены(ДанныеПолучены) Тогда
		
		Элементы.СтраницаСобытийРабочая.Видимость = Истина;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийРабочая;
		
		ОбновитьПоказателиЗадолженностиНаФорме(Форма);
		
	Иначе

		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Истина;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
		
	КонецЕсли;

	Элементы.СрокиОплаты.Видимость = ЗначениеЗаполнено(Форма.Срок);
	ШаблонСрока = НСтр("ru = 'Срок оплаты налога до %1'");
	Элементы.СрокиОплаты.Заголовок = СтрШаблон(ШаблонСрока, Формат(Форма.Срок, "ДЛФ=DD"));
	
	Элементы.ГруппаНалогЗаПредыдущиеПериоды.Видимость = ВсеДанныеПолучены(ДанныеПолучены)
		И Форма.СуммаЗадолженности > 0;
	Элементы.ГруппаСообщениеОбОшибкеРазныеАдреса.Видимость = ВсеДанныеПолучены(Форма.ДанныеПолучены)
		И Форма.ПоказыватьОшибкуРазныеАдреса;
	
	ПоказыватьНалогНеРассчитан = ПоказыватьПредупреждениеОСрокеРасчетаНалога(Форма);
	Элементы.ГруппаНалогНеРассчитан.Видимость = ПоказыватьНалогНеРассчитан;
	Элементы.ГруппаКУплате.Видимость = Не ПоказыватьНалогНеРассчитан;
	Элементы.Задолженность.Видимость = Не ПоказыватьНалогНеРассчитан;
	
	Элементы.ГруппаОплатить.Видимость = Не Форма.ТребуетсяРазрешениеНаОплату;
	Элементы.ГруппаОтсутствуетРазрешениеНаОплату.Видимость = Форма.ТребуетсяРазрешениеНаОплату;
	Элементы.ГруппаОтправкаПлатежейВБанк.Видимость = Не Форма.ТребуетсяРазрешениеНаОплату;
	
	Элементы.ОплатитьЧерезБанк.Видимость = Не Форма.ВсеНалогиОплачены;
	Элементы.ОплатитьЧерезКассу.Видимость = Не Форма.ВсеНалогиОплачены;
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(Форма);
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(Форма);
	ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку(
		Объект.Организация, НеОтправленныеПлатежи);
	ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку
		И ТребуетсяВыгрузитьДокументыОплаты(Объект.Организация, НеИсполненныеПлатежи);
	
	Элементы.ОтправитьПлатежиВБанк.Видимость = ТребуетсяОтправитьДокументыОплатыПоБанку;
	Элементы.ВыгрузитьПлатежи.Видимость = ТребуетсяВыгрузитьДокументыОплаты;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект, ВсегоКУплате > 0);
	
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Доступность = МожноСоздаватьУведомления И ВсегоКУплате > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьПредупреждениеОСрокеРасчетаНалога(Форма)
	
	Если Форма.ВсегоКУплате > 0 Тогда
		Возврат Ложь;
	ИначеЕсли Форма.Выручка = 0 Тогда
		Возврат Ложь;
	Иначе
		
		ТекущаяДата = ТекущаяДатаПользователя();
		МесяцРасчетаНалога = ДобавитьМесяц(Форма.Объект.Период, 1);
		КрайняяДатаРасчетаНалога = Дата(Год(МесяцРасчетаНалога), Месяц(МесяцРасчетаНалога), ОкончаниеРасчетаНалогаДень());
		
		Если НачалоДня(ТекущаяДата) > НачалоДня(КрайняяДатаРасчетаНалога) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция АктуальныйПериод()
	
	Если День(ТекущаяДатаСеанса()) <= ОкончаниеРасчетаНалогаДень() Тогда
		СдвигМесяцев = -2; // Платим только задолженность
	Иначе
		СдвигМесяцев = -1; // Платим задолженность и налог за прошлый месяц
	КонецЕсли;
	
	Возврат НачалоДня(КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), СдвигМесяцев)));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоРасчетаНалогаДень()
	Возврат 9;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкончаниеРасчетаНалогаДень()
	Возврат 12;
КонецФункции

&НаСервереБезКонтекста
Функция ТекущаяДатаПользователя()
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусФоновогоЗадания()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Получение данных из налоговой инспекции...'");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокументИзКоллекцииПлатежейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы[ДополнительныеПараметры.НаименованиеЭлементаРазмещения].Заголовок = "";
		УдалитьДокументУплаты(ДополнительныеПараметры.ДокументУплатыДляУдаления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	НайтиПлатежиСвязанныеСЗадачей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьДанныеПолучены(Форма)
	
	Запросы = ЗапросыОНачислениях();
	
	Форма.ДанныеПолучены = Новый Структура;
	Форма.ДанныеПолучены.Вставить(Запросы.ИнформацияОНачислениях, Ложь);
	Форма.ДанныеПолучены.Вставить(Запросы.СписокКвитанцийНаУплатуНалога, Ложь);
	Форма.ДанныеПолучены.Вставить(Запросы.ИнформацияОНалоговыхНачислениях, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВсеДанныеПолучены(ДанныеПолучены)
	
	Если ТипЗнч(ДанныеПолучены) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого КлючЗначение Из ДанныеПолучены Цикл
		Если Не КлючЗначение.Значение = Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВНастройкахАдресМестаЖительстваИзСервиса(Знач Организация, Знач АдресСпискаКвитанцийНаУплатуНалога)
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат;
	КонецЕсли;
	
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"СамозанятыеАдресМестаЖительстваИзСервиса", ИНН, СписокКвитанций[0].АдресМестаЖительства);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресХранилища)
	
	Перем ТаблицаКвитанций;
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКвитанций = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СписокКвитанций) <> Тип("Структура") Или Не СписокКвитанций.Свойство("СписокКвитанций", ТаблицаКвитанций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаКвитанций) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаКвитанций;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПериод(ТекущийПериод, КоличествоМесяцев = 0)
	
	Объект.Период = КонецМесяца(ДобавитьМесяц(ТекущийПериод, КоличествоМесяцев));
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииПериода", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПериодаНаСервере();
	
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаНаСервере()
	
	ЗаполнитьНачальныеПоказатели();
	
	ПроверитьРеквизитыОрганизации();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПериода()
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуемыеРазрешенияПлатформы()
	
	ВсеРазрешения = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ВидыРазрешенийНаДействияПартнера();
	
	ТребуемыеРазрешения = Новый Массив;
	ТребуемыеРазрешения.Добавить(ВсеРазрешения.ОплатаНалоговыхНачислений);
	ТребуемыеРазрешения.Добавить(ВсеРазрешения.ПолучениеИнформацииПоНалоговымНачислениям);
	
	Возврат ТребуемыеРазрешения;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросНаИзменениеРазрешений()
	
	ДлительнаяОперация = ОтправитьЗапросНаИзменениеРазрешенийНаСервере();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения =
			НСтр("ru = 'Настраиваем доступ к сервису Мой налог.'");
		НастройкиОжидания.ВыводитьОкноОжидания = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
		ДополнительныеПараметры.Вставить("Период", Объект.Период);
		
		Обработчик = Новый ОписаниеОповещения("ПослеОтправкиЗапросаНаИзменениеРазрешений", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьЗапросНаИзменениеРазрешенийНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.ПомощникИнтеграцииСПлатформойСамозанятые.ОтправитьЗапросНаИзменениеРазрешений",
		Объект.Организация,
		ТребуемыеРазрешенияПлатформы());
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтправкиЗапросаНаИзменениеРазрешений(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Организация <> Объект.Организация
		Или ДополнительныеПараметры.Период <> Объект.Период Тогда
		Возврат; // Задание неактуально. После запуска этого задания были изменены ключевые реквизиты.
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если Результат <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация", Объект.Организация);
			
			СписокРазрешений = Новый СписокЗначений();
			СписокРазрешений.ЗагрузитьЗначения(ТребуемыеРазрешенияПлатформы());
			ПараметрыФормы.Вставить("Разрешения", СписокРазрешений);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучитьКвитанцииПослеЗапросаРазрешений", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.ПомощникИнтеграцииСПлатформойСамозанятые.Форма.ЗапросРазрешений",
				ПараметрыФормы,
				ЭтотОбъект,
				Объект.Организация, , ,
				ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКвитанцииПослеЗапросаРазрешений(Результат, ДополнительныеПараметры) Экспорт
	
	// Еще раз попробуем получить список квитанций.
	// Но только в том случае, если еще не запущено получение данных из сервиса "Мой налог".
	Если ВсеДанныеПолучены(ДанныеПолучены) И ТребуетсяРазрешениеНаОплату Тогда
		Запросы = ЗапросыОНачислениях();
		
		ДанныеПолучены[Запросы.СписокКвитанцийНаУплатуНалога] = Ложь;
		ТребуетсяРазрешениеНаОплату = Ложь;
		
		НачатьВыполнениеМетодаВзаимодействия(Запросы.СписокКвитанцийНаУплатуНалога);
		
		ОбновитьСтатусФоновогоЗадания();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	АдресХранилищаТаблицыНалоги = ТаблицаЗаполненияОперацииПоЕНС();
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		АдресХранилищаТаблицыНалоги,
		Правило,
		Объект.Период,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаЗаполненияОперацииПоЕНС()
	
	СтруктураПараметров = ПараметрыСозданияПлатежныхДокументов(Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ПомощникУплатыНПД.ТаблицаЗаполненияОперацииПоЕНС(СтруктураПараметров, АдресХранилищаТаблицыНалоги);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьУведомленияИОтобразитьНаФорме();
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомленияИОтобразитьНаФорме()
	
	ПравилоУведомления = ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(
		Правило, Объект.Организация, Объект.Период);
	ПравилоОтчета = ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(
		Правило, Объект.Организация, Объект.Период);
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	МассивПравилУведомлений.Добавить(ПравилоУведомления);
	МассивПравилУведомлений.Добавить(ПравилоОтчета);
	
	ТаблицаУведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Объект.Организация,
		Объект.Период);
	
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУведомления.Периодичность, Объект.Период);
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, КонецПериода);
	КонецЕсли;
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	КнопкаПоУмолчаниюУведомление = Форма.ПлательщикЕНП И Не Форма.УведомлениеОбИсчисленныхНалогахПодготовлено;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС, КнопкаПоУмолчаниюУведомление);
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(Форма);
	КнопкаПоУмолчаниюОтправитьВБанк = Не КнопкаПоУмолчаниюУведомление И ЗначениеЗаполнено(НеОтправленныеПлатежи);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОтправитьПлатежиВБанк, КнопкаПоУмолчаниюОтправитьВБанк);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыгрузитьПлатежи, КнопкаПоУмолчаниюОтправитьВБанк);
	
	КнопкаПоУмолчаниюУплата = Не КнопкаПоУмолчаниюУведомление И Не КнопкаПоУмолчаниюОтправитьВБанк
		И Не Форма.ВсеНалогиОплачены;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьЧерезБанк, КнопкаПоУмолчаниюУплата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыУведомления(Идентификатор)
	
	ПараметрыФормыУведомления = Новый Структура;
	
	Если Идентификатор <> Неопределено Тогда
		СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	Если СтрокаУведомления <> Неопределено Тогда
		ПараметрыФормыУведомления.Вставить("Ключ", СтрокаУведомления.Уведомление);
	Иначе
		ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормыУведомления.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормыУведомления.Вставить("ПериодСобытия", Объект.Период);
		ПараметрыФормыУведомления.Вставить("Правило", Правило);
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомления;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
	НайтиПлатежиСвязанныеСЗадачей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяВыгрузитьДокументыОплаты(Организация, ДокументыОплаты)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты);
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку(Организация, ДокументыОплаты)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку(Организация, ДокументыОплаты);
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты)
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку(Организация, ДокументыОплаты)
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(Организация, ДокументыОплаты);
	
КонецФункции

#КонецОбласти
