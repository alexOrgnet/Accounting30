#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДанныеЗаполненияПлатежногоДокументаВФоне(Параметры, АдресРезультата) Экспорт
	
	ДанныеЗаполнения = ДанныеЗаполненияПлатежногоДокумента(
		Параметры.ПараметрыСоздания,
		Параметры.ДанныеКвитанции,
		Параметры.НалоговыйПериод,
		Параметры.ВидОбязательства,
		Параметры.ПараметрыСоздания.Платежи);
	
	ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресРезультата);
	
КонецПроцедуры

Процедура СоздатьПлатежныеДокументыВФоне(ПараметрыСоздания, АдресРезультата) Экспорт
	
	СозданныеДокументы = Новый Массив;
	
	ДанныеЗаполненияПлатежныхДокументов = ДанныеЗаполненияПлатежныхДокументов(ПараметрыСоздания);
	Если Не ЗначениеЗаполнено(ДанныеЗаполненияПлатежныхДокументов) Тогда
		ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСоздания.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ВидПлатежногоДокумента = "РасходныйКассовыйОрдер";
	Иначе
		ВидПлатежногоДокумента = "ПлатежноеПоручение";
	КонецЕсли;
	
	Для Каждого ДанныеЗаполнения Из ДанныеЗаполненияПлатежныхДокументов Цикл
		
		НовыйДокумент = Документы[ВидПлатежногоДокумента].СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Правило) Тогда
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(
				НовыйДокумент, ДанныеЗаполнения.Правило, ДанныеЗаполнения.НалоговыйПериод);
		КонецЕсли;
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не НовыйДокумент.Ссылка.Пустая() Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
КонецПроцедуры

Функция ДанныеЗаполненияПлатежногоДокумента(ПараметрыСоздания, Квитанция, НалоговыйПериод, ВидОбязательства, Платежи) Экспорт
	
	СуммаКУплате = СуммаКУплате(НалоговыйПериод, Квитанция.Сумма, ВидОбязательства, Платежи);
	Если СуммаКУплате = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.Организации.ЗаполнитьПустойЮридическийАдресОрганизации(ПараметрыСоздания.Организация, Квитанция.АдресМестаЖительства);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Квитанция.КБК) Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Квитанция.КБК);
	Иначе
		Если УчетнаяПолитика.ПлательщикЕНП(ПараметрыСоздания.Организация, ПараметрыСоздания.Дата) Тогда
			ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
		Иначе
			ВидНалога = Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход;
		КонецЕсли;
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КонецЕсли;
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПараметрыСоздания.Дата);
	
	СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ПараметрыСоздания.ВидОперации);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ДанныеЗаполнения.Вставить("Дата",                 ПараметрыСоздания.Дата);
	ДанныеЗаполнения.Вставить("Организация",          ПараметрыСоздания.Организация);
	ДанныеЗаполнения.Вставить("СчетОрганизации",      ПараметрыСоздания.СчетОрганизации);
	ДанныеЗаполнения.Вставить("ВидОперации",          ПараметрыСоздания.ВидОперации);
	ДанныеЗаполнения.Вставить("Налог",                Налог);
	ДанныеЗаполнения.Вставить("ВидНалоговогоОбязательства", ВидОбязательства);
	Если ЗначениеЗаполнено(НалоговыйПериод) Тогда
		ДанныеЗаполнения.Вставить("НалоговыйПериод", НалоговыйПериод); 
	Иначе
		ДанныеЗаполнения.Вставить("НалоговыйПериод", Неопределено);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("КодБК",                Квитанция.КБК);
	ДанныеЗаполнения.Вставить("КодОКАТО",             Квитанция.КодТерритории);
	ДанныеЗаполнения.Вставить("СтатусСоставителя",    Квитанция.СтатусПлательщика);
	ДанныеЗаполнения.Вставить("ПоказательОснования",  Квитанция.ОснованиеПлатежа);
	ДанныеЗаполнения.Вставить("ПоказательТипа",       Квитанция.ТипПлатежа);
	Если Квитанция.ОснованиеПлатежа = "0" Тогда
		ДанныеЗаполнения.Вставить("ПоказательПериода", "0");
	ИначеЕсли ЗначениеЗаполнено(Квитанция.ПоказательПериода) Тогда
		ДанныеЗаполнения.Вставить("ПоказательПериода", Квитанция.ПоказательПериода);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("ИдентификаторПлатежа", Квитанция.ИдентификаторПлатежа);
	ДанныеЗаполнения.Вставить("СчетУчета",            СчетУчета);
	ДанныеЗаполнения.Вставить("Субконто1",            ДанныеЗаполнения.ВидНалоговогоОбязательства);
	
	ДанныеЗаполнения.Вставить("СуммаДокумента",       СуммаКУплате);
	
	ДанныеЗаполнения.Вставить("Контрагент",           ПолучательПлатежа(ПараметрыСоздания.Организация, Квитанция));
	ДанныеЗаполнения.Вставить("СчетКонтрагента",      БанковскийСчетПолучателяПлатежа(ДанныеЗаполнения.Контрагент, Квитанция));
	
	ДанныеЗаполнения.Вставить("ТекстПлательщика",     Квитанция.Плательщик);
	ДанныеЗаполнения.Вставить("ИННПлательщика",       Квитанция.ИНН);
	
	ДанныеЗаполнения.Вставить("ТекстПолучателя",      Квитанция.Получатель);
	ДанныеЗаполнения.Вставить("ИННПолучателя",        Квитанция.ИННПолучателя);
	ДанныеЗаполнения.Вставить("КПППолучателя",        Квитанция.КПППолучателя);
	
	ДанныеЗаполнения.Вставить("Правило",              ПараметрыСоздания.Правило);
	ДанныеЗаполнения.Вставить("ПериодСобытия",        НалоговыйПериод);
	ДанныеЗаполнения.Вставить("СрокУплаты",           ПараметрыСоздания.СрокУплаты);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Подготавливает параметры для получения документов уплаты налогов.
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		НачалоПериода - Дата - начало периода поиска
//		КонецПериода - Дата - конец периода поиска
//
// Возвращаемое значение:
//		ТаблицаЗначений - заполненная таблица уплаты налогов.
//
Функция ДокументыУплаты(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("НалогНаПрофессиональныйДоход");
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	
	ПараметрыУплатыНалогов.ТипыДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ПараметрыУплатыНалогов.ТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	ТаблицаПлатежей = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	Для Каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		СтрокаПлатежа.Период = НачалоДня(КонецМесяца(СтрокаПлатежа.Период));
	КонецЦикла;
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

// Отменяет запущенные фоновые задания.
//
// Параметры:
//		ИдентификаторЗадания - УникальныйИдентификатор 
//
Процедура ОтменитьФоновоеЗадание(ИдентификаторЗадания) Экспорт
	
	СообщениеОбОшибке = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда 
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗаполненияОперацииПоЕНС(ПараметрыСоздания, АдресРезультата) Экспорт
	
	ДанныеЗаполненияПлатежныхДокументов = ДанныеЗаполненияПлатежныхДокументов(ПараметрыСоздания);
	Если Не ЗначениеЗаполнено(ДанныеЗаполненияПлатежныхДокументов) Тогда
		ПоместитьВоВременноеХранилище(ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов(), АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ВидНалогаНПД = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход);
	ВидНалогаЕНП = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Для Каждого ДанныеЗаполнения Из ДанныеЗаполненияПлатежныхДокументов Цикл
		
		Если ДанныеЗаполнения.Налог <> ВидНалогаЕНП Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПериода = НачалоМесяца(ДанныеЗаполнения.ПериодСобытия);
		КонецПериода  = КонецМесяца(ДанныеЗаполнения.ПериодСобытия);
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		НоваяСтрока.РегистрацияВНалоговомОргане =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСоздания.Организация, "РегистрацияВНалоговомОргане");
		НоваяСтрока.КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыСоздания.Организация);
		НоваяСтрока.Налог = ВидНалогаНПД;
		НоваяСтрока.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ВидНалогаНПД, , КонецПериода);
		НоваяСтрока.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(ВидНалогаНПД, КонецПериода);
		НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
		НоваяСтрока.СрокУплаты = ДанныеЗаполнения.СрокУплаты;
		НоваяСтрока.НачалоПериода = НачалоПериода;
		НоваяСтрока.КонецПериода = КонецПериода;
		
	КонецЦикла;
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	ПоместитьВоВременноеХранилище(ТаблицыНалогов, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗаполненияПлатежныхДокументов(ПараметрыСоздания)
	
	ДанныеДокументов = Новый Массив;
	
	СписокКвитанций = ПараметрыСоздания.СписокКвитанций;
	ТаблицаЗадолженностей = ПараметрыСоздания.Задолженности;
	ВсеПлатежи = ПараметрыСоздания.Платежи;
	
	Если СписокКвитанций = Неопределено Или ТаблицаЗадолженностей = Неопределено Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
	
	Для Каждого СтрокаЗадолженность Из ТаблицаЗадолженностей Цикл
		
		Квитанция = СписокКвитанций.Найти(СтрокаЗадолженность.ИдентификаторПлатежа, "ИдентификаторИсточника");
		Если Квитанция = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОбязательства = СтрокаЗадолженность.ВидНалоговогоОбязательства;
		НалоговыйПериод = СтрокаЗадолженность.Период;
		
		ДанныеЗаполнения = ДанныеЗаполненияПлатежногоДокумента(
			ПараметрыСоздания, Квитанция, НалоговыйПериод, ВидОбязательства, ВсеПлатежи);
		Если ДанныеЗаполнения <> Неопределено Тогда
			ДанныеДокументов.Добавить(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке)
	
	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";
		
	Исключение
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не удалось выполнить данную операцию.
			|Подробности см. в Журнале регистрации.
			|%1'"), ОписаниеОшибки());
		Выполнено = Истина;
		
	КонецПопытки;
	
	Возврат Выполнено;
		
КонецФункции

Процедура УстановитьСтатусЗадачи(Организация, Правило, Период, Платежи, СуммаНалога) Экспорт
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Организация", Организация);
	ПараметрыЗадачи.Вставить("ПериодСобытия", Период);
	ПараметрыЗадачи.Вставить("Правило", Правило);
	ПараметрыЗадачи.Вставить("Действие", Правило.Действие);
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	ВыполнениеЗадачБухгалтера.ПроверитьАктуальностьСтатуса(ПараметрыЗадачи, СтатусЗадачиПоОплате(СуммаНалога, Платежи));
	
КонецПроцедуры

Функция СтатусЗадачиПоОплате(НалогКУплате, Платежи)
	
	Статус = "";
	
	Если НалогКУплате <> 0 Тогда
		
		СуммаОплаты = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
		
		Если СуммаОплаты >= НалогКУплате Тогда
			Статус = "Оплачено";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статус;

КонецФункции

// Возвращает неоплаченную сумму квитанции.
//
// Параметры:
//   НалоговыйПериод - Дата - налоговый период уплаты.
//   СуммаПоКвитанции - Число - полная сумма налога к уплате.
//   ВидОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - вид налогового обязательства.
//   ВсеПлатежи - ТаблицаЗначений - оформленные платежи по налогу.
//
Функция СуммаКУплате(НалоговыйПериод, СуммаПоКвитанции, ВидОбязательства, ВсеПлатежи)
	
	Если ВсеПлатежи = Неопределено Тогда
		Возврат СуммаПоКвитанции;
	КонецЕсли;
	
	Если ВсеПлатежи.Количество() = 0 Тогда
		Возврат СуммаПоКвитанции;
	КонецЕсли;
	
	ФильтрПоиска = Новый Структура("ПоказательПериода, ВидНалоговогоОбязательства");
	
	ФильтрПоиска.ПоказательПериода = 
		ПлатежиВБюджетКлиентСервер.НалоговыйПериод(НалоговыйПериод, ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	
	ФильтрПоиска.ВидНалоговогоОбязательства = ВидОбязательства;
	
	НайденныеСтроки = ВсеПлатежи.НайтиСтроки(ФильтрПоиска);
	
	ВсегоНалогаОплачено = 0;
	
	Для Каждого ТекСтрокаПлатежей Из НайденныеСтроки Цикл
		ВсегоНалогаОплачено = ВсегоНалогаОплачено + ТекСтрокаПлатежей.Сумма;
	КонецЦикла;
	
	КУплате = Макс(СуммаПоКвитанции - ВсегоНалогаОплачено, 0);
	
	Возврат КУплате;
	
КонецФункции

Функция ПолучательПлатежа(Организация, Квитанция)
	
	ДанныеЗаполнения = Новый Структура;
	
	НаименованиеИнспекции = НаименованиеИнспекции(Квитанция.Получатель);
	
	ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеИнспекции);
	ДанныеЗаполнения.Вставить("Наименование", НаименованиеИнспекции);
	ДанныеЗаполнения.Вставить("ИНН", Квитанция.ИННПолучателя);
	ДанныеЗаполнения.Вставить("КПП", Квитанция.КПППолучателя);
	ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("АдресОрганизации", Квитанция.АдресМестаЖительства);
	
	Возврат Справочники.Контрагенты.НайтиСоздатьНалоговуюИнспекцию(ДанныеЗаполнения);
	
КонецФункции

Функция НаименованиеИнспекции(ПолноеНаименование)
	
	// Наименование из сервиса соответствует шаблону "[НаименованиеКазначейства] ([НаименованиеИнспекции])"
	КоличествоОткрывающихСкобок = СтрЧислоВхождений(ПолноеНаименование, "(");
	КоличествоЗакрывающихСкобок = СтрЧислоВхождений(ПолноеНаименование, ")");
	
	Если КоличествоОткрывающихСкобок <> КоличествоЗакрывающихСкобок Тогда
		Возврат ПолноеНаименование;
	КонецЕсли;
	
	Если КоличествоОткрывающихСкобок > 1 Или КоличествоЗакрывающихСкобок > 1 Тогда
		Возврат ПолноеНаименование;
	КонецЕсли;
	
	ОткрывающаяСкобка = СтрНайти(ПолноеНаименование, "(");
	ЗакрывающаяСкобка = СтрНайти(ПолноеНаименование, ")", НаправлениеПоиска.СКонца);
	
	Если ОткрывающаяСкобка = 0
		Или ЗакрывающаяСкобка = 0
		Или ОткрывающаяСкобка > ЗакрывающаяСкобка Тогда
		Возврат ПолноеНаименование;
	КонецЕсли;
	
	Возврат СокрЛП(Сред(ПолноеНаименование, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - 1));
	
КонецФункции

Функция БанковскийСчетПолучателяПлатежа(Контрагент, Квитанция)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ТекстКорреспондента", Квитанция.Получатель);
	КоррСчет = СокрЛП(СтрЗаменить(Квитанция.КоррСчет, "00000000000000000000", ""));
	ДанныеЗаполнения.Вставить("КоррСчетБанка", КоррСчет);
	ДанныеЗаполнения.Вставить("НаименованиеБанка", Квитанция.Банк);
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьЭлемент(
		Контрагент, Квитанция.СчетПолучателя, Квитанция.БИК, ДанныеЗаполнения);
	
	Возврат БанковскийСчет;
	
КонецФункции

#КонецОбласти

#КонецЕсли