
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Считывает данные файла в табличный документ, определяет загружаемые колонки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//      * ПрикладнаяЗагрузка - Булево - Используется ли прикладная загрузка.
//      * ПараметрыПрикладнойЗагрузки - Структура - Параметры прикладной загрузки, см. НовыйПараметрыЗагрузкиВТабЧасть().
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ОбработатьДанныеИзФайлаВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ПараметрыЗадания.Вставить("МакетЗаголовка", ПолучитьМакет("МакетЗаголовка"));
	
	ТабличныйДокумент = ЗагрузкаДанныхИзВнешнихФайлов.ЗагрузитьФайлВТабличныйДокумент(ПараметрыЗадания);
	
	ТекстОшибки = "";
	ПараметрыПрикладнойЗагрузки = ПараметрыЗадания.ПараметрыПрикладнойЗагрузки;
	
	Если ПараметрыЗадания.ПрикладнаяЗагрузка И ПараметрыПрикладнойЗагрузки.СопоставлятьКолонки Тогда
		СопоставитьКолонкиПоСодержимомуФайла(
			ТабличныйДокумент,
			ПараметрыЗадания.ОписаниеКолонок,
			ПараметрыПрикладнойЗагрузки.ОбъектДляЗагрузки);
	КонецЕсли;
	
	Если ПараметрыЗадания.ПрикладнаяЗагрузка И ПараметрыПрикладнойЗагрузки.ПострочнаяОбработка Тогда
		
		// Прикладная загрузка с построчным сопоставлением данных обрабатывается индивидуально.
		СопоставитьДанныеПострочно(ТабличныйДокумент, ПараметрыЗадания, ТекстОшибки);
		
	Иначе
	
		РеквизитыДляСопоставления = ПолучитьИзВременногоХранилища(ПараметрыЗадания.РеквизитыДляСопоставления);
		СопоставленныеКолонки = Новый Массив;
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			
			ОбластьЗаголовок = ТабличныйДокумент.Область(1, НомерКолонки); 
			ЧастиЗаголовка = СтрРазделить(ОбластьЗаголовок.ПараметрРасшифровки, "_");
			
			// Может быть автоматически найдено сразу несколько реквизитов элементов ссылочного типа для сопоставления.
			// Выполняем сопоставление данных только по первой колонке. Остальные пропускаем.
			Если СопоставленныеКолонки.Найти(ЧастиЗаголовка[0]) <> Неопределено Тогда
				// Чтобы не вводить пользователя в заблуждение, что сопоставление может быть выполнено по 2-м и более колонкам,
				// уберем у заголовка признак сопоставленности колонкам загружаемого файла.
				ОбластьЗаголовок.Текст = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
				ОбластьЗаголовок.ПараметрРасшифровки = "";
				ОбластьЗаголовок.ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("НезаполненныйРеквизит");
				Продолжить;
			КонецЕсли;
			
			СопоставитьДанныеПоКолонке(
				ТабличныйДокумент,
				РеквизитыДляСопоставления,
				ПараметрыЗадания.ОписаниеКолонок,
				ПараметрыЗадания.ПрикладнаяЗагрузка,
				ПараметрыПрикладнойЗагрузки,
				НомерКолонки);
				
			СопоставленныеКолонки.Добавить(ЧастиЗаголовка[0]);
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Выполняет сопоставление загружаемых данных элементам справочника 
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ТабличныйДокумент - ТабличныйДокумент - табличный документ, содержащий данные.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок.
//      * КолонкиДляСопоставления - Массив - номера колонок табличного документа, по которым выполнять сопоставление.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура СопоставитьДанныеИзФайла(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ТабличныйДокумент;
	ТекстОшибки = "";
	
	Если ПараметрыЗадания.ПрикладнаяЗагрузка И ПараметрыЗадания.ПараметрыПрикладнойЗагрузки.ПострочнаяОбработка Тогда
		// Прикладная загрузка с построчным сопоставлением данных обрабатывается индивидуально.
		СопоставитьДанныеПострочно(ТабличныйДокумент, ПараметрыЗадания, ТекстОшибки);
		
	Иначе
		
		РеквизитыДляСопоставления = ПолучитьИзВременногоХранилища(ПараметрыЗадания.РеквизитыДляСопоставления);
		
		Для Каждого НомерКолонки Из ПараметрыЗадания.КолонкиДляСопоставления Цикл
			
			СопоставитьДанныеПоКолонке(
				ТабличныйДокумент,
				РеквизитыДляСопоставления,
				ПараметрыЗадания.ОписаниеКолонок,
				ПараметрыЗадания.ПрикладнаяЗагрузка,
				ПараметрыЗадания.ПараметрыПрикладнойЗагрузки,
				НомерКолонки.Значение);
				
		КонецЦикла;
	
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ХранилищеДанных",Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Удаляет незаполненые строки и несопоставленые колонки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура УдалитьВсеЛишнее(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	НайденыНенужныеСтроки = Ложь;
	
	УдалитьНесопоставленыеКолонки(ТабличныйДокумент, НайденыНенужныеСтроки);
	УдалитьНесопоставленыеСтроки(ТабличныйДокумент, НайденыНенужныеСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Определяет, будет ли строка табличного документа загружена в исходную табличную часть.
// Не загружаются: строка с заголовками исходного файла, строки с несопоставлеными элементами ссылочного типа. 
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, содержащий данные. 
//  НомерСтроки - Число - Номер строки табличного документа.
//	КолонкиСопоставлены - Булево - Выполнено или нет сопоставление колонок реквизитам табличной части.
//
// Возвращаемое значение:
//  Булево  
//
Функция СтрокаДанныхБудетЗагружена(ТабличныйДокумент, НомерСтроки, КолонкиСопоставлены) Экспорт
	
	Если НЕ КолонкиСопоставлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБудетЗагружена = Истина;
	ЦветНезаполненныйРеквизит = ОбщегоНазначенияВызовСервера.ЦветСтиля("НезаполненныйРеквизит");
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
		
		Если Ячейка.ПараметрРасшифровки = "НеЗагружать"
			Или Ячейка.ПараметрРасшифровки = "СтрокаНеНайдена"
			Или (Ячейка.Гиперссылка И Не ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки)) Тогда
			
			СтрокаБудетЗагружена = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаБудетЗагружена;
КонецФункции

// Формирует из табличного документа, содержащего данные, итоговую таблицу значений, которая будет загружена в табличную часть.
// Все несопоставленые данные пропускаются.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, содержащий данные.
//  ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок.
//  КолонкиСопоставлены - Булево - Сопоставлены ли колонки загружаемого файла и колонки табличной части.
//  ПострочнаяЗагрузка - Булево - применяется ли прикладная построчная загрузка в табличную часть.
//
// Возвращаемое значение:
//  АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Функция ДанныеКЗагрузке(ТабличныйДокумент, ОписаниеКолонок, КолонкиСопоставлены, ПострочнаяЗагрузка) Экспорт
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений();
	ИменаСправочников = Новый Соответствие;
	
	Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеКолонки.Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ОписаниеКолонки.Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		
		Если ОписаниеКолонки.ЭтоСсылочныйТип Тогда
			ОбъектОписания = Метаданные.НайтиПоТипу(ОписаниеКолонки.Тип);
			ИменаСправочников.Вставить(ОписаниеКолонки.Идентификатор, ОбъектОписания.Имя);
		КонецЕсли;
		
		ЧастиИдентификатора = СтрРазделить(ОписаниеКолонки.Идентификатор, "_");
		
		Если ЗагружаемыеДанные.Колонки.Найти(ЧастиИдентификатора[0]) = Неопределено Тогда
			ЗагружаемыеДанные.Колонки.Добавить(ЧастиИдентификатора[0], ОписаниеТипа);
		КонецЕсли;
			
	КонецЦикла;
	
	Если ПострочнаяЗагрузка Тогда
		ЗагружаемыеДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число"));
	КонецЕсли;
		
	// Получаем соответствие номера колонки и его заголовка.
	СоответствиеКолонок = Новый Соответствие;
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Ячейка = ТабличныйДокумент.Область(1, НомерКолонки);
		
		Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда 
			СоответствиеКолонок.Вставить(НомерКолонки, Ячейка.ПараметрРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем итоговую таблицу загружаемых данных.
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Если Не СтрокаДанныхБудетЗагружена(ТабличныйДокумент, НомерСтроки, КолонкиСопоставлены) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ЗагружаемыеДанные.Добавить();
		СтруктураЗаполнения = Новый Структура();
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			
			ИмяКолонки = СоответствиеКолонок.Получить(НомерКолонки);
			ИмяСправочника = ИменаСправочников.Получить(ИмяКолонки);
			
			// Несопоставленые колонки пропускаем.
			Если ИмяКолонки = НЕОПРЕДЕЛЕНО Тогда
				Продолжить;
			КонецЕсли;
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			
			ЧастиИмениКолонки = СтрРазделить(ИмяКолонки, "_");
			ИмяКолонки = ЧастиИмениКолонки[0]; 
			
			Если СтруктураЗаполнения.Свойство(ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) И Не ПострочнаяЗагрузка Тогда
				ЗначениеЯчейки = Справочники[ИмяСправочника].ПолучитьСсылку(
					Новый УникальныйИдентификатор(Ячейка.ПараметрРасшифровки));
			Иначе
				ЗначениеЯчейки = Ячейка.Текст;
			КонецЕсли;
			
			СтруктураЗаполнения.Вставить(ИмяКолонки, ЗначениеЯчейки); 
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураЗаполнения);
		
		Если ПострочнаяЗагрузка И ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			НовСтрока.НомерСтрокиТабличнойЧасти = Число(Ячейка.ПараметрРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ЗагружаемыеДанные);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// Получает по полному имени табличной части метаданные ТЧ, в которую будет выполняться загрузка.
//
// Параметры: 
//  ИмяТабличнойЧасти - Строка - Пример: "Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие".
//
// Возвращаемое значение:
//  МетаданныеТабличнойЧасти - ОбъектМетаданных - метаданные табличной части.
//
Функция МетаданныеПоИмениТабличнойЧасти(ИмяТабличнойЧасти) Экспорт
	
	ЧастиИмени = СтрРазделить(ИмяТабличнойЧасти, ".", Ложь);
	
	Если ЧастиИмени.Количество() <> 3 Тогда
		Возврат НЕОПРЕДЕЛЕНО;	
	КонецЕсли;
	
	ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1] + ".ТабличнаяЧасть." + ЧастиИмени[2];
	МетаданныеТабличнойЧасти = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	Возврат МетаданныеТабличнойЧасти;
	
КонецФункции

Функция ПараметрыСодержимогоКолонки(Ячейка, ОписаниеКолонок)
	
	ПараметрыКолонки = Новый Структура;
	ПараметрыКолонки.Вставить("ЭтоСсылочныйТип", Ложь);
	ПараметрыКолонки.Вставить("Тип", НЕОПРЕДЕЛЕНО);
	
	Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
		Для Каждого СтрокаОписание Из ОписаниеКолонок Цикл
				
			Если СтрокаОписание.Идентификатор = Ячейка.ПараметрРасшифровки 
				И СтрокаОписание.ЭтоСсылочныйТип Тогда
				
				ПараметрыКолонки.ЭтоСсылочныйТип = Истина;
				ПараметрыКолонки.Тип = СтрокаОписание.Тип;
				
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
		
	Возврат ПараметрыКолонки;
КонецФункции

Процедура СопоставитьДанныеПоКолонке(ТабличныйДокумент, РеквизитыДляСопоставления, ОписаниеКолонок, ПрикладнаяЗагрузка, ПараметрыПрикладнойЗагрузки, НомерКолонки)
	
	ЯчейкаЗаголовка = ТабличныйДокумент.Область(1, НомерКолонки);
	ПараметрыКолонки = ПараметрыСодержимогоКолонки(ЯчейкаЗаголовка, ОписаниеКолонок);
	ПерваяСтрокаСДанными = 2;
	ШиринаКолонкиПоУмолчанию = 20;
	
	ДанныеСсылочногоТипа = Новый ТаблицаЗначений;
	ДанныеСсылочногоТипа.Колонки.Добавить("СтрокаИзФайла", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	// Очистка возможных ранее сопоставленных элементов. 
	Для НомерСтроки = ПерваяСтрокаСДанными По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
		
		// Пропускаем ячейку с заголовком исходного файла.
		Если Ячейка.ПараметрРасшифровки = "НеЗагружать" Тогда
			ПерваяСтрокаСДанными = 3; // значит, данные начинаются с 3-й строки
			Продолжить;
		КонецЕсли;
		
		// Символ "→" в строке разделяет исходную строку из файла и наименование сопоставленного элемента.
		// Обрезаем наименование сопоставленного элемента.
		ЧастиТекстаЯчейки = СтрРазделить(Ячейка.Текст, "→");
		Ячейка.Текст = СокрЛП(ЧастиТекстаЯчейки[0]);
		
		Ячейка.ПараметрРасшифровки = "";
		Ячейка.Гиперссылка = Ложь;
		Ячейка.ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаПоля");
		Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Ячейка.ШиринаКолонки = ШиринаКолонкиПоУмолчанию;
		
		Если ПараметрыКолонки.ЭтоСсылочныйТип Тогда
			НовСтрока = ДанныеСсылочногоТипа.Добавить();
			НовСтрока.СтрокаИзФайла = Ячейка.Текст;
		КонецЕсли;
		
	КонецЦикла;
	
	// Увеличиваем ширину колонок, если текст в заголовке из файла или имя реквизита не умещается.
	// В колонке с шириной 20 в среднем умещается 23 символа с учетом отступа. Если больше, увеличиваем ширину колонки на 0,5 за каждый доп. символ.
	ИмяРеквизита = ТабличныйДокумент.Область(1, НомерКолонки);
	ЗаголовокИзФайла = ТабличныйДокумент.Область(2, НомерКолонки);
	
	ДлинаИмениРеквизита = СтрДлина(ИмяРеквизита.Текст);
	ДлинаЗаголовкаИзФайла = СтрДлина(ЗаголовокИзФайла.Текст);
	УмещаетсяСимволов = 23;
	ДлинаЗаголовка = ?(ДлинаИмениРеквизита > ДлинаЗаголовкаИзФайла, ДлинаИмениРеквизита, ДлинаЗаголовкаИзФайла);
	
	Если ДлинаЗаголовка > УмещаетсяСимволов Тогда
		ЗаголовокИзФайла.ШиринаКолонки = ШиринаКолонкиПоУмолчанию + Окр((ДлинаЗаголовка - УмещаетсяСимволов) * 0.5);
	КонецЕсли;
	
	Если ДанныеСсылочногоТипа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПараметраРасшифровки = СтрРазделить(ЯчейкаЗаголовка.ПараметрРасшифровки, "_");
	ИмяРеквизитаДляСопоставления = ЧастиПараметраРасшифровки[ЧастиПараметраРасшифровки.Количество() - 1];
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПараметрыКолонки.Тип);
	ДанныеСсылочногоТипа.Колонки.Добавить("СсылкаНайденая", Новый ОписаниеТипов(МассивТипов));
	
	Если ПрикладнаяЗагрузка Тогда
		// При прикладной загрузке сопоставление данных выполняется в менеджере объекта, в который происходит загрузка.
		МенеджерОбъекта = МенеджерОбъекта(ПараметрыКолонки.Тип);
		МенеджерОбъекта.СопоставитьЗагружаемыеДанныеИзФайла(
			ДанныеСсылочногоТипа,
			ИмяРеквизитаДляСопоставления,
			ПараметрыПрикладнойЗагрузки);
		
	Иначе
		СопоставитьЗагружаемыеДанные(
			ДанныеСсылочногоТипа,
			ПараметрыКолонки.Тип,
			ИмяРеквизитаДляСопоставления);
			
	КонецЕсли;
		
	// Вывод результата сопоставления элементов в колонку табличного документа.
	Для НомерСтроки = ПерваяСтрокаСДанными По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
		
		СтрокаСопоставления = ДанныеСсылочногоТипа[НомерСтроки - ПерваяСтрокаСДанными]; 
		
		Ячейка.Текст = СтрокаСопоставления.СтрокаИзФайла;
		Ячейка.Гиперссылка = Истина;
		// Для удобства пользователя увеличим ширину колонки. В 2 раза больше ширины колонки по умолчанию.
		Ячейка.ШиринаКолонки = ШиринаКолонкиПоУмолчанию * 2;
		
		Если ЗначениеЗаполнено(СтрокаСопоставления.СсылкаНайденая) Тогда
			Ячейка.ПараметрРасшифровки = Строка(СтрокаСопоставления.СсылкаНайденая.УникальныйИдентификатор());
			Ячейка.ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветГиперссылки");
		Иначе
			Ячейка.ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("НезаполненныйРеквизит");
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанные(ЗагружаемыеДанные, ТипДанных, ИмяКолонки)
	
	ТипДанныхСтрокой = Строка(ТипДанных);
	Запрос = Новый Запрос;
	
	Запрос.Параметры.Вставить("ЗагружаемыеДанные", ЗагружаемыеДанные);
	Запрос.Параметры.Вставить("СправочникПустаяСсылка", Справочники[ТипДанныхСтрокой].ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеКолонки.СтрокаИзФайла КАК СтрокаИзФайла
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ДанныеКолонки
	|ГДЕ
	|	ДанныеКолонки.СтрокаИзФайла <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&РеквизитДляПоиска КАК РеквизитДляСопоставления,
	|	СопоставленыйСправочник.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеСправочника
	|ИЗ
	|	&ИмяСправочника КАК СопоставленыйСправочник
	|ГДЕ
	|	&РеквизитДляПоиска В
	|			(ВЫБРАТЬ
	|				ИсходныеДанные.СтрокаИзФайла
	|			ИЗ
	|				ИсходныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО &РеквизитДляПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.СтрокаИзФайла КАК СтрокаИзФайла,
	|	ЕСТЬNULL(ДанныеСправочника.Ссылка, &СправочникПустаяСсылка) КАК СсылкаНайденая
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСправочника КАК ДанныеСправочника
	|		ПО ИсходныеДанные.СтрокаИзФайла = ДанныеСправочника.РеквизитДляСопоставления";
	
	// Если данных меньше 1000 записей, то уберем индексацию временной таблицы.
	Если ЗагружаемыеДанные.Количество() < 1000 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИНДЕКСИРОВАТЬ ПО &РеквизитДляПоиска", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", "Справочник." + ТипДанныхСтрокой);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитДляПоиска", "СопоставленыйСправочник." + ИмяКолонки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СтрокаИзФайла", Выборка.СтрокаИзФайла);
		
		СтрокиДанных = ЗагружаемыеДанные.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из СтрокиДанных Цикл
			Строка.СсылкаНайденая = Выборка.СсылкаНайденая;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНесопоставленыеСтроки(ТабличныйДокумент, НайденыНенужныеСтроки)
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
		
		// Пропускаем ячейки с заголовками исходного файла.
		Если Ячейка.ПараметрРасшифровки = "НеЗагружать" Тогда
			Продолжить;
		КонецЕсли;
	
		Если Ячейка.Гиперссылка И Не ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			НайденыНенужныеСтроки = Истина;
			
			Область = ТабличныйДокумент.Область(Ячейка.Верх,, Ячейка.Низ);
			ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			УдалитьНесопоставленыеСтроки(ТабличныйДокумент, НайденыНенужныеСтроки);
			Возврат;
		КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНесопоставленыеКолонки(ТабличныйДокумент, НайденыНенужныеСтроки)
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(1, НомерКолонки);
		
		Если Не ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			НайденыНенужныеСтроки = Истина;
			
			Область = ТабличныйДокумент.Область(, Ячейка.Лево,, Ячейка.Право);
			ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
			УдалитьНесопоставленыеКолонки(ТабличныйДокумент, НайденыНенужныеСтроки);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МенеджерОбъекта(ТипДанных) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанных);
	ВсеТипыСправочников = Справочники.ТипВсеСсылки();
	ВсеТипыДокументов = Документы.ТипВсеСсылки();
	
	Если ВсеТипыСправочников.СодержитТип(ТипДанных) Тогда
		МенеджерОбъекта = Справочники[ОбъектМетаданных.Имя];
		
	ИначеЕсли ВсеТипыДокументов.СодержитТип(ТипДанных) Тогда
		МенеджерОбъекта = Документы[ОбъектМетаданных.Имя];
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект ""%1"" не найден'"), Строка(ТипДанных));
		
	КонецЕсли;
		
		Возврат МенеджерОбъекта;
КонецФункции

#Область ПакетнаяЗагрузкаДанных

// Выполняет сопоставление колонок загружаемого файла и колонок табличной части, в которую выполняется загрузка.
// Используется при прикладной загрузке. Логика сопоставления дожна быть определена
// в процедуре СопоставитьКолонкиДанныхИзФайла() в модуле менеджера объекта, в который выполняется загрузка данных.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ, содержащий данные.
//  ОписаниеКолонок - ТаблицаЗначений - Описание загружаемых колонок.
//  ОбъектДляЗагрузки - ДокументСсылка, СправочникСсылка - Ссылка на объект, в который выполняется загрузка данных.
//
Процедура СопоставитьКолонкиПоСодержимомуФайла(ТабличныйДокумент, ОписаниеКолонок, ОбъектДляЗагрузки)
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Ячейка = ТабличныйДокумент.Область(1, НомерКолонки);
		Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			ЗагружаемыеДанные.Колонки.Добавить(Ячейка.ПараметрРасшифровки);
		Иначе
			// Несопоставленные колонки будут иметь имя вида "Колонка5".
			ЗагружаемыеДанные.Колонки.Добавить("Колонка" + XMLСтрока(НомерКолонки));
		КонецЕсли;
	КонецЦикла;
	
	ПерваяСтрокаСДанными = 3; // т.к. операция выполняется только при первом чтении файла, то первая строка с данными всегда 3
	
	Для НомерСтроки = ПерваяСтрокаСДанными По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НоваяСтрока = ЗагружаемыеДанные.Добавить();
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			
			ЯчейкаЗаголовка = ТабличныйДокумент.Область(1, НомерКолонки);
			Если ЗначениеЗаполнено(ЯчейкаЗаголовка.ПараметрРасшифровки) Тогда
			
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
				НоваяСтрока[ЯчейкаЗаголовка.ПараметрРасшифровки] = Ячейка.Текст;
				
				Продолжить;
			КонецЕсли;
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			НоваяСтрока["Колонка" + XMLСтрока(НомерКолонки)] = Ячейка.Текст;
			
		КонецЦикла;
	КонецЦикла;
	
	НовоеСоответствиеКолонок = Новый Соответствие;
	
	МенеджерОбъекта(ТипЗнч(ОбъектДляЗагрузки)).СопоставитьКолонкиДанныхИзФайла(
		ЗагружаемыеДанные,
		НовоеСоответствиеКолонок);
		
	ЦветГиперссылки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветГиперссылки");
	
	Для Каждого СоответствиеКолонок Из НовоеСоответствиеКолонок Цикл
		
		НомерКолонки = Число(СтрЗаменить(СоответствиеКолонок.Ключ, "Колонка", ""));
		Ячейка = ТабличныйДокумент.Область(1, НомерКолонки);
		
		Ячейка.ПараметрРасшифровки = СоответствиеКолонок.Значение;
		Ячейка.ЦветТекста = ЦветГиперссылки;
		
		Описание = ОписаниеКолонок.Найти(СоответствиеКолонок.Значение, "Идентификатор");
		Если Описание <> Неопределено Тогда
			Ячейка.Текст = Описание.ПредставлениеКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определеляет, в какие строки табличной части будут загружены данные из файла.
// Используется при прикладной загрузке с построчной обработкой данных. Логика сопоставления дожна быть определена
// в процедуре СопоставитьЗагружаемыеДанныеПострочно() в модуле менеджера объекта, в который выполняется загрузка данных.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, содержащий данные.
//  Параметры - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - Расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - Описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//      * ПрикладнаяЗагрузка - Булево - Используется ли прикладная загрузка.
//      * ПараметрыПрикладнойЗагрузки - Структура - Параметры прикладной загрузки, см. НовыйПараметрыЗагрузкиВТабЧасть().
//  ТекстОшибки - Строка - Текст сообщения об ошибке, которое будет выдано пользователю, если не удалось выполнить сопоставление.
//
Процедура СопоставитьДанныеПострочно(ТабличныйДокумент, Параметры, ТекстОшибки)
	
	// Режим загрузки построчно
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	ЗагружаемыеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого Описание Из Параметры.ОписаниеКолонок Цикл
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ЯчейкаЗаголовка = ТабличныйДокумент.Область(1, НомерКолонки);
			
			Если ЯчейкаЗаголовка.ПараметрРасшифровки = Описание.Идентификатор Тогда
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Описание.Тип);
				ЗагружаемыеДанные.Колонки.Добавить(Описание.Идентификатор, Новый ОписаниеТипов(МассивТипов));
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число"));

	ПерваяСтрокаСДанными = 2;
	Ячейка = ТабличныйДокумент.Область(2, 1);
	
	Если Ячейка.ПараметрРасшифровки = "НеЗагружать" Тогда
		ПерваяСтрокаСДанными = 3;
	КонецЕсли;
	
	Для НомерСтроки = ПерваяСтрокаСДанными По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НоваяСтрока = ЗагружаемыеДанные.Добавить();
		НоваяСтрока.НомерСтрокиТабличнойЧасти = 0;
		НоваяСтрока.НомерСтроки = НомерСтроки - ПерваяСтрокаСДанными;
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			
			ЯчейкаЗаголовка = ТабличныйДокумент.Область(1, НомерКолонки);
			
			Если Не ЗначениеЗаполнено(ЯчейкаЗаголовка.ПараметрРасшифровки) Тогда
				Продолжить;
			КонецЕсли;
		
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			
			НоваяСтрока[ЯчейкаЗаголовка.ПараметрРасшифровки] = Ячейка.Текст;
			
		КонецЦикла;
	КонецЦикла;
	
	МенеджерОбъекта = МенеджерОбъекта(ТипЗнч(Параметры.ПараметрыПрикладнойЗагрузки.ОбъектДляЗагрузки));
	МенеджерОбъекта.СопоставитьЗагружаемыеДанныеПострочно(
		ЗагружаемыеДанные,
		Параметры.ПараметрыПрикладнойЗагрузки,
		ТекстОшибки);
		
	ЦветНезаполненныйРеквизит = ОбщегоНазначенияВызовСервера.ЦветСтиля("НезаполненныйРеквизит");
	ЦветТекстаФормы = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаФормы");
	
	Для НомерСтроки = ПерваяСтрокаСДанными По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НомерСтрокиТабличнойЧасти = ЗагружаемыеДанные[НомерСтроки - ПерваяСтрокаСДанными].НомерСтрокиТабличнойЧасти;
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			
			Если НомерСтрокиТабличнойЧасти > 0 Тогда
				Ячейка.ЦветТекста = ЦветТекстаФормы;
				Ячейка.ПараметрРасшифровки = НомерСтрокиТабличнойЧасти;
			Иначе
				Ячейка.ЦветТекста = ЦветНезаполненныйРеквизит;
				Ячейка.ПараметрРасшифровки = "СтрокаНеНайдена";
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли