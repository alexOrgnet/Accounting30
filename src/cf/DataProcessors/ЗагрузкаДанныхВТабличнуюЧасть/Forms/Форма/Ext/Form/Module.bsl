
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресФайла = Параметры.АдресФайла;
	РасширениеФайла = Параметры.РасширениеФайла;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	РеквизитыДляСопоставления = Параметры.РеквизитыДляСопоставления;
	ПрикладнаяЗагрузка = Параметры.ПрикладнаяЗагрузка;
	ПараметрыПрикладнойЗагрузки = Параметры.ПараметрыПрикладнойЗагрузки;
	Пояснение = Параметры.Пояснение;
	
	ЭтаФорма.Заголовок = Параметры.Заголовок;
	
	Если Не ЗначениеЗаполнено(АдресФайла) Или Не ЭтоАдресВременногоХранилища(Параметры.АдресФайла) Тогда
		ТекстИсключения = НСтр("ru = 'Не выбран файл для загрузки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗагрузитьОписаниеКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДекорацияПояснение.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Пояснение);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодготовитьТабличныйДокумент", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьКолонку(Команда)
	
	Лево  = ДанныеФайла.ТекущаяОбласть.Лево;
	Право = ДанныеФайла.ТекущаяОбласть.Право;
	Верх  = ДанныеФайла.ТекущаяОбласть.Верх;
	
	УдалитьКолонкиНаСервере(Лево, Право);
	Элементы.ДанныеФайла.ТекущаяОбласть = ДанныеФайла.Область(Верх, Лево);
	
	// При прикладной загрузке с построчным сопоставлением необходимо выполнить сопоставление данных.
	Если ПрикладнаяЗагрузка И ПараметрыПрикладнойЗагрузки.ПострочнаяОбработка Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СопоставитьДанныеИзФайла", 0.1, Истина);
	КонецЕсли;
	
	ВывестиЧислоСтрокКЗагрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнее(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЛишнееПослеЗакрытияВопроса", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Найти и удалить строки и колонки, не содержащие информацию для загрузки?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Верх = ДанныеФайла.ТекущаяОбласть.Верх;
	Низ  = ДанныеФайла.ТекущаяОбласть.Низ;
	Лево = ДанныеФайла.ТекущаяОбласть.Лево;
	
	Если Верх = 1 И Низ = 1 Тогда	
		Возврат; // выделена первая строка (строка заголовка)	
	КонецЕсли;
	
	УдалитьСтрокиНаСервере(Верх, Низ);
	Элементы.ДанныеФайла.ТекущаяОбласть = ДанныеФайла.Область(Верх, Лево);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Данные = ДанныеКЗагрузке(ДанныеФайла, ОписаниеКолонок,
		КолонкиСопоставлены, ПараметрыПрикладнойЗагрузки.ПострочнаяОбработка);
		
	Закрыть(Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ДанныеФайлаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// Первая строка табличного документа. Сопоставление колонок загружаемого файла и реквизитов ТЧ. 
	Если Область.Верх = 1 И Область.Лево <= ДанныеФайла.ШиринаТаблицы Тогда
		
		ДопПараметрОповещения = Новый Структура("ТекущаяОбласть", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитВыборЗавершение", ЭтотОбъект, ДопПараметрОповещения);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОписаниеКолонок", ОписаниеКолонокВоВременномХранилище());
		ОткрытьФорму("ОбщаяФорма.ВыборКолонокПриЗагрузкеИзФайла", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	КонецЕсли;
	
	// Содержимое документа. Обработка ячеек, содержащих данные элементов ссылочного типа.
	Если Область.Верх > 1 И Область.Гиперссылка Тогда
		
		ЯчейкаЗаголовка = ДанныеФайла.Область(1, Область.Лево);
		ТипДанных = ТипДанныхИзОписанияКолонок(ЯчейкаЗаголовка.ПараметрРасшифровки);
		
		Если НЕ ЗначениеЗаполнено(ТипДанных) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ИмяСправочника = ИмяСправочника(ТипДанных);
		
		Если ЗначениеЗаполнено(Область.ПараметрРасшифровки) Тогда
			ТекущееЗначение = ЭлементСправочникаПоУИД(ИмяСправочника, Область.ПараметрРасшифровки);
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущееЗначение);
		КонецЕсли;
		
		ДопПараметрОповещения = Новый Структура("ТекущаяОбласть", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДанныеСправочникаВыборЗавершение", ЭтотОбъект, ДопПараметрОповещения);
		
		ОткрытьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиДляСопоставления.Очистить();
	ТекстНезаполненногоЗаголовка = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
	
	Для НомерКолонки = 1 По ДанныеФайла.ШиринаТаблицы Цикл
		
		Область = ДанныеФайла.Область(1, НомерКолонки);
		ЧастиИдентификатора = СтрРазделить(РезультатЗакрытия.Идентификатор, "_");
		ЧастиПараметраРасшифровки = СтрРазделить(Область.ПараметрРасшифровки, "_");
		
		Если ЧастиИдентификатора[0] = ЧастиПараметраРасшифровки[0] Тогда
			 
			Область.Текст = ТекстНезаполненногоЗаголовка;
			Область.ПараметрРасшифровки = "";
			Область.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("НезаполненныйРеквизит");
			
			КолонкиДляСопоставления.Добавить(НомерКолонки);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокКолонки = РезультатЗакрытия.Представление;
	// У заголовка колонки реквизита ссылочного типа в начале может быть указан родитель, обрежем его. 
	ЧастиТекстаЗаголовка = СтрРазделить(ЗаголовокКолонки, ",");
	ЗаголовокКолонки = СокрЛП(ЧастиТекстаЗаголовка[ЧастиТекстаЗаголовка.Количество() - 1]);
	
	ДополнительныеПараметры.ТекущаяОбласть.Текст = ЗаголовокКолонки;
	ДополнительныеПараметры.ТекущаяОбласть.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветГиперссылки");
	ДополнительныеПараметры.ТекущаяОбласть.ПараметрРасшифровки = РезультатЗакрытия.Идентификатор;
	КолонкиДляСопоставления.Добавить(ДополнительныеПараметры.ТекущаяОбласть.Лево);
	
	ПодключитьОбработчикОжидания("Подключаемый_СопоставитьДанныеИзФайла", 0.1, Истина);
	
	ВывестиЧислоСтрокКЗагрузке();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСправочникаВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяОбласть = ДополнительныеПараметры.ТекущаяОбласть;
	ЧастиТекстаОбласти = СтрРазделить(ТекущаяОбласть.Текст, "→");
	
	ОбластьЗаголовка = ДанныеФайла.Область(1, ТекущаяОбласть.Лево);
	ЧастиТекстаЗаголовка = СтрРазделить(ОбластьЗаголовка.ПараметрРасшифровки, "_");
	ИмяРеквизита = ЧастиТекстаЗаголовка[ЧастиТекстаЗаголовка.Количество() - 1];
	ПредставлениеРезультата = ПредставлениеЭлементаСправочника(РезультатЗакрытия, ИмяРеквизита);

	ТекущаяОбласть.Текст = СокрЛП(ЧастиТекстаОбласти[0]) + " → " + ПредставлениеРезультата;
	ТекущаяОбласть.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветГиперссылки");
	ТекущаяОбласть.ПараметрРасшифровки = ИдентификаторЭлементаСправочника(РезультатЗакрытия);
	
	ВывестиЧислоСтрокКЗагрузке();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТипДанныхИзОписанияКолонок(ИдентификаторКолонки)
	
	Для Каждого СтрокаОписание Из ОписаниеКолонок Цикл
		
		Если СтрокаОписание.Идентификатор = ИдентификаторКолонки Тогда
			Возврат СтрокаОписание.Тип; 	
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторЭлементаСправочника(Знач ЭлементСправочника)
	
	Возврат Строка(ЭлементСправочника.УникальныйИдентификатор());
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементСправочникаПоУИД(Знач ИмяСправочника, Знач УникальныйИдентификатор)
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификатор));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЭлементаСправочника(Знач ЭлементСправочника, Знач ИмяРеквизита)
	
	// При пакетной загрузке данных элемент справочника может не иметь требуемого реквизита.
	МетаданныеОбъекта = ЭлементСправочника.Метаданные();
	Если Врег(ИмяРеквизита) <> "КОД" И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат ЭлементСправочника.Наименование;
	КонецЕсли;
	
	ПредставлениеЭлемента = Строка(ЭлементСправочника[ИмяРеквизита]);
	
	Если Врег(ИмяРеквизита) <> "НАИМЕНОВАНИЕ" Тогда
		ПредставлениеЭлемента = ПредставлениеЭлемента + " (" + ЭлементСправочника.Наименование + ")";
	КонецЕсли;
	
	Возврат ПредставлениеЭлемента;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОписаниеКолонок()
	МетаданныеТабличнойЧасти = Обработки.ЗагрузкаДанныхВТабличнуюЧасть.МетаданныеПоИмениТабличнойЧасти(ИмяТабличнойЧасти);
	ОписаниеКолонокТабличнойЧасти = ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок();
	
	ВсеТипыСправочников = Справочники.ТипВсеСсылки();
	Если ЗначениеЗаполнено(ПараметрыПрикладнойЗагрузки.ОграничениеТипов) Тогда
		ВсеТипыСправочников = Новый ОписаниеТипов(ВсеТипыСправочников,,ПараметрыПрикладнойЗагрузки.ОграничениеТипов);
	КонецЕсли; 
	
	Для Каждого РеквизитТабЧасти Из МетаданныеТабличнойЧасти.Реквизиты Цикл
		
		ТипДанныхРеквизита = ПолучитьТипДанныхРеквизита(РеквизитТабЧасти.Тип, ВсеТипыСправочников);
		
		Если ВсеТипыСправочников.СодержитТип(ТипДанныхРеквизита) Тогда
			
			// Заполняем описание колонок для реквизитов с типом "СправочниСсылка".
			ЗаполнитьОписаниеРеквизитаСсылочногоТипа(ОписаниеКолонокТабличнойЧасти, ТипДанныхРеквизита, РеквизитТабЧасти.Имя);
			
			Продолжить;
		КонецЕсли;
		
		// Добавляем описание колонки с типом "число" или "строка". 
		СтрокаОписания = ОписаниеКолонокТабличнойЧасти.Добавить();
		
		СтрокаОписания.Тип = ТипДанныхРеквизита;
		СтрокаОписания.Идентификатор = РеквизитТабЧасти.Имя;
		СтрокаОписания.ПредставлениеКолонки = НСтр("ru = '" + РеквизитТабЧасти.Синоним + "'");
		СтрокаОписания.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитТабЧасти.Синоним);
		
	КонецЦикла;
	
	Если Не ПрикладнаяЗагрузка Тогда
		ОписаниеКолонок.Загрузить(ОписаниеКолонокТабличнойЧасти);
		Возврат;
	КонецЕсли;
	
	// Для прикладной загрузки описание колонок переопределим из макета.
	Макет = МенеджерОбъекта(ИмяТабличнойЧасти).ПолучитьМакет(ПараметрыПрикладнойЗагрузки.ИмяМакета);
	
	ОписаниеКолонокМакета = ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок();
	
	Для НомерКолонки = 1 По Макет.ШиринаТаблицы Цикл
		
		Ячейка = Макет.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
		
		Если Не ЗначениеЗаполнено(Ячейка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОписаниеКолонокМакета.Добавить();
		НоваяСтрока.Тип = Тип("Строка");
		НоваяСтрока.Идентификатор = Ячейка.Имя;
		НоваяСтрока.ПредставлениеКолонки = НСтр("ru = '" + Ячейка.Текст + "'");
		НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ячейка.Текст);
		
		// Считаем, что в колонке "Основное средство" загружаемого файла находится наименование основного средства.
		Если ВРЕГ(Ячейка.Текст) = "НАИМЕНОВАНИЕ" Тогда
			НоваяСтрока.ПодходящиеЗаголовкиФайла.Добавить("Основное средство");
		КонецЕсли;
		
		СтрокаОписания = ОписаниеКолонокТабличнойЧасти.Найти(Ячейка.Имя, "Идентификатор");
		Если СтрокаОписания <> Неопределено Тогда
			НоваяСтрока.Тип = СтрокаОписания.Тип;
			НоваяСтрока.ЭтоСсылочныйТип = СтрокаОписания.ЭтоСсылочныйТип;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеКолонок.Загрузить(ОписаниеКолонокМакета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипДанныхРеквизита(Знач ОписаниеТипа, Знач ВсеТипыСправочников)
	
	// Описание типа может состоять из нескольких типов. В приоритете - "СправочникСсылка", затем - "Число".
	// Значения типов отличных от "Число" и "СправочникСсылка" будут обрабатываться в строковом представлении.
	Типы = ОписаниеТипа.Типы();
	ТипЧисло = Тип("Число");
	
	Для Каждого Тип Из Типы Цикл
			
		Если ВсеТипыСправочников.СодержитТип(Тип) Тогда 				
			Возврат Тип;		
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Тип Из Типы Цикл
			
		Если Тип = ТипЧисло Тогда 				
			Возврат ТипЧисло;		
		КонецЕсли;	
	КонецЦикла;

	Возврат Тип("Строка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеРеквизитаСсылочногоТипа(ОписаниеЗагружаемыхКолонок, ТипДанных, ИмяРеквизита)
	
	СписокРеквизитов = ПолучитьИзВременногоХранилища(РеквизитыДляСопоставления);
	Для Каждого СтрокаРеквизитов Из СписокРеквизитов Цикл
		
		ЧастиСтроки = СтрРазделить(СтрокаРеквизитов.Значение, "_");
		
		Если ЧастиСтроки[0] <> ИмяРеквизита Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитПоиска = ЧастиСтроки[ЧастиСтроки.Количество() - 1];
		
		// Описание реквизита для поиска.
		СтрокаОписания = ОписаниеЗагружаемыхКолонок.Добавить();
		СтрокаОписания.Идентификатор = СтрокаРеквизитов.Значение;
		СтрокаОписания.ПредставлениеКолонки = НСтр("ru = '" + РеквизитПоиска + "'");
		
		СтрокаОписания.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаРеквизитов.Значение);
		СтрокаОписания.ПодходящиеЗаголовкиФайла.Добавить(РеквизитПоиска);
		// Считаем, что в колонке "Номенклатура" загружаемого файла находится наименование номенклатуры. 
		Если ВРЕГ(РеквизитПоиска) = "НАИМЕНОВАНИЕ" Тогда
			СтрокаОписания.ПодходящиеЗаголовкиФайла.Добавить("Номенклатура");
		КонецЕсли;
		
		СтрокаОписания.Тип = ТипДанных;
		СтрокаОписания.ЭтоСсылочныйТип = Истина;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокВоВременномХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ОписаниеКолонок.Выгрузить());
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеКЗагрузке(Знач ДанныеФайла, Знач ОписаниеКолонок, Знач КолонкиСопоставлены, Знач ПострочнаяОбработка)
	
	Возврат Обработки.ЗагрузкаДанныхВТабличнуюЧасть.ДанныеКЗагрузке(
		ДанныеФайла, ОписаниеКолонок, КолонкиСопоставлены, ПострочнаяОбработка);
	
КонецФункции

&НаСервере
Процедура ВывестиЧислоСтрокКЗагрузке()
	
	СтрокКЗагрузке = 0;
	СтрокВсего = 0;
	КолонкиСопоставлены = Ложь;
	
	// Считаем, что если хоть одна колонка сопоставлена реквизитам ТЧ, то сопоставление выполнено.
	Для НомерКолонки = 1 По ДанныеФайла.ШиринаСтраницы Цикл
		
		Ячейка = ДанныеФайла.Область(1, НомерКолонки);
		
		Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда 
			КолонкиСопоставлены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 2 По ДанныеФайла.ВысотаТаблицы Цикл
		
		Ячейка = ДанныеФайла.Область(НомерСтроки, 1);
		
		// Пропускаем строку с заголовками загружаемого файла.
		Если Ячейка.ПараметрРасшифровки <> "НеЗагружать" Тогда
			СтрокВсего = СтрокВсего + 1;
		КонецЕсли;
		
		СтрокаБудетЗагружена = Обработки.ЗагрузкаДанныхВТабличнуюЧасть.СтрокаДанныхБудетЗагружена(
			ДанныеФайла,
			НомерСтроки,
			КолонкиСопоставлены);
			
		Если СтрокаБудетЗагружена Тогда
				
			СтрокКЗагрузке = СтрокКЗагрузке + 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗагрузитьДанные.Заголовок = НСтр("ru = 'Загрузить " + Строка(СтрокКЗагрузке) 
		+ " из " + Строка(СтрокВсего) + "'"); 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПоясненияЗаголовковКолонок()
	
	Для НомерКолонки = 1 По ДанныеФайла.ШиринаТаблицы Цикл
		
		Область = ДанныеФайла.Область(1, НомерКолонки);
		// У заголовка колонки реквизита ссылочного типа в начале может быть указан родитель, обрежем его. 
		ЧастиТекстаОбласти = СтрРазделить(Область.Текст, ",");
		Область.Текст = СокрЛП(ЧастиТекстаОбласти[ЧастиТекстаОбласти.Количество() - 1]);	
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция МенеджерОбъекта(Знач ИмяТабличнойЧасти)
	
	ЧастиИмени = СтрРазделить(ИмяТабличнойЧасти, ".", Ложь);;
	
	Если ЧастиИмени[0] = "Документ" Тогда
		МенеджерОбъекта = Документы[ЧастиИмени[1]];
	ИначеЕсли ЧастиИмени[0] = "Справочник" Тогда
		МенеджерОбъекта = Справочники[ЧастиИмени[1]];
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект ""%1"" не найден'"), ЧастиИмени[0]);
	КонецЕсли;
	
	Возврат МенеджерОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяСправочника(Знач ТипДанных)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанных);
	
	Возврат ОбъектМетаданных.Имя;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТабличногоДокумента

&НаКлиенте
Процедура Подключаемый_ПодготовитьТабличныйДокумент()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("АдресФайла", АдресФайла);
	ПараметрыОперации.Вставить("РасширениеФайла", РасширениеФайла);
	ПараметрыОперации.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОперации.Вставить("ОписаниеКолонок", ОписаниеКолонок);
	ПараметрыОперации.Вставить("РеквизитыДляСопоставления", РеквизитыДляСопоставления);
	ПараметрыОперации.Вставить("ПрикладнаяЗагрузка", ПрикладнаяЗагрузка);
	ПараметрыОперации.Вставить("ПараметрыПрикладнойЗагрузки", ПараметрыПрикладнойЗагрузки);
	
	ДлительнаяОперация = ПодготовитьТабличныйДокументНаСервере(ПараметрыОперации);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		
		ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ДанныеФайла, "Ожидание");
			
		Если ПрикладнаяЗагрузка И ПараметрыПрикладнойЗагрузки.ПоказатьИнформациюОжидания Тогда
			ОтображениеСостояния = Элементы.ДанныеФайла.ОтображениеСостояния;
			ОтображениеСостояния.Текст = ПараметрыПрикладнойЗагрузки.ТекстИнформацииОжидания;
		КонецЕсли;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПодготовитьТабличныйДокументЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СопоставитьДанныеИзФайла()

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОперации.Вставить("ОписаниеКолонок", ОписаниеКолонок);
	ПараметрыОперации.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОперации.Вставить("КолонкиДляСопоставления", КолонкиДляСопоставления);
	ПараметрыОперации.Вставить("РеквизитыДляСопоставления", РеквизитыДляСопоставления);
	ПараметрыОперации.Вставить("ПрикладнаяЗагрузка", ПрикладнаяЗагрузка);
	ПараметрыОперации.Вставить("ПараметрыПрикладнойЗагрузки", ПараметрыПрикладнойЗагрузки);
	
	ДлительнаяОперация = ПодготовитьОперациюСопоставления(ПараметрыОперации);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		
		ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ДанныеФайла, "Ожидание");
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПодготовитьТабличныйДокументЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТабличныйДокументНаСервере(Параметры)
	      
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Параметры.АдресФайла);
	ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	УдалитьИзВременногоХранилища(Параметры.АдресФайла);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("РасширениеФайла", Параметры.РасширениеФайла);
	ПараметрыЗадания.Вставить("ХранилищеДанныхФайла", ХранилищеДанных);
	ПараметрыЗадания.Вставить("ОписаниеКолонок", Параметры.ОписаниеКолонок.Выгрузить());
	ПараметрыЗадания.Вставить("РеквизитыДляСопоставления", Параметры.РеквизитыДляСопоставления);
	ПараметрыЗадания.Вставить("ПрикладнаяЗагрузка", Параметры.ПрикладнаяЗагрузка);
	ПараметрыЗадания.Вставить("ПараметрыПрикладнойЗагрузки", Параметры.ПараметрыПрикладнойЗагрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Параметры.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка табличного документа к загрузке в табличную часть.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаДанныхВТабличнуюЧасть.ОбработатьДанныеИзФайлаВФоне",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьОперациюСопоставления(Параметры)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ТабличныйДокумент", Параметры.ДанныеФайла);
	ПараметрыЗадания.Вставить("ОписаниеКолонок", Параметры.ОписаниеКолонок.Выгрузить());
	ПараметрыЗадания.Вставить("КолонкиДляСопоставления", Параметры.КолонкиДляСопоставления);
	ПараметрыЗадания.Вставить("РеквизитыДляСопоставления", Параметры.РеквизитыДляСопоставления);
	ПараметрыЗадания.Вставить("ПрикладнаяЗагрузка", Параметры.ПрикладнаяЗагрузка);
	ПараметрыЗадания.Вставить("ПараметрыПрикладнойЗагрузки", Параметры.ПараметрыПрикладнойЗагрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Параметры.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Сопоставление элементов при загрузке данных в табличную часть.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаДанныхВТабличнуюЧасть.СопоставитьДанныеИзФайла",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьТабличныйДокументЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗаполнитьТабличныйДокументСервер(ДлительнаяОперация.АдресРезультата);
		ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ДанныеФайла, "НеИспользовать");
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныйДокументСервер(АдресРезультата)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДанныеФайла = ЗагруженныеДанные.ХранилищеДанных.Получить();
	
	Элементы.ГруппаОшибка.Видимость = ЗначениеЗаполнено(ЗагруженныеДанные.ТекстОшибки);
	Элементы.ДекорацияОшибка.Заголовок = ЗагруженныеДанные.ТекстОшибки;
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	УдалитьПоясненияЗаголовковКолонок();
	ВывестиЧислоСтрокКЗагрузке();
КонецПроцедуры

#КонецОбласти

#Область УдалениеЛишнихДанных

&НаСервере
Процедура УдалитьСтрокиНаСервере(Верх, Низ)
	
	Если Верх = 1 Тогда
		Верх = 2; // чтобы не удалить заголовки колонок
	КонецЕсли;
	
	Область = ДанныеФайла.Область(Верх,, Низ);
	ДанныеФайла.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ВывестиЧислоСтрокКЗагрузке();
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиНаСервере(Лево, Право)
	
	Область = ДанныеФайла.Область(, Лево,, Право);
	ДанныеФайла.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	ВывестиЧислоСтрокКЗагрузке();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнееПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.ДанныеФайла, "Ожидание");
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = УдалитьЛишнееСервер();
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("УдалитьЛишнееЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьЛишнееСервер()
	
	ПараметрыЗадания = Новый Структура;
	ХранилищеДанных = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	ПараметрыЗадания.Вставить("ХранилищеДанных", ХранилищеДанных);
	ПараметрыЗадания.Вставить("ПрикладнаяЗагрузка", ПрикладнаяЗагрузка);
	ПараметрыЗадания.Вставить("ПараметрыПрикладнойЗагрузки", ПараметрыПрикладнойЗагрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление незаполненных строк и колонок табличного документа.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаДанныхВТабличнуюЧасть.УдалитьВсеЛишнее",
		ПараметрыЗадания, ПараметрыВыполнения);
		
	ВывестиЧислоСтрокКЗагрузке();
КонецФункции

&НаКлиенте
Процедура УдалитьЛишнееЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		НайденыНенужныеСтроки = Ложь;
		ОбработатьРезультатУдаленияЛишнихСтрок(ДлительнаяОперация.АдресРезультата, НайденыНенужныеСтроки);
		Если НЕ НайденыНенужныеСтроки Тогда
			
			ТекстСообщения = НСтр("ru = 'Строк и колонок, не содержащих информацию для загрузки, не обнаружено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Удаление завершено.'");
			ТекстПояснения = НСтр("ru = 'Удаление незаполненных данных завершено.'");
			ПоказатьОповещениеПользователя(ТекстСообщения,, ТекстПояснения);
			
		КонецЕсли;
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатУдаленияЛишнихСтрок(АдресРезультата, НайденыНенужныеСтроки)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	НайденыНенужныеСтроки = Результат.НайденыНенужныеСтроки;
	Если НайденыНенужныеСтроки Тогда
		ДанныеФайла = Результат.ХранилищеДанных.Получить();
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.ДанныеФайла, "НеИспользовать");
	
	ВывестиЧислоСтрокКЗагрузке();
КонецПроцедуры

#КонецОбласти

