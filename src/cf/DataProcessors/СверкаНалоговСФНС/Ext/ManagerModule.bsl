#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеСверкиВФоне(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ДанныеПоследнейСверки, ОплатыСоСтатусами");
	Результат.ДанныеПоследнейСверки = ДанныеПоследнейСверки(Параметры.Организация, Параметры.Год);
	Результат.ОплатыСоСтатусами = ДанныеОбОплатахНалоговСоСтатусами(Параметры.Организация, Параметры.Год);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбработатьДанныеФНС(Ссылка, Данные) Экспорт
	
	ДанныеВыписки = РазобратьВыпискуОперацийВФорматеXML(Данные);
	ДанныеЗапросаИОН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Организация, ДатаНачалаПериода");
	ЗаписатьДанныеФНСОбОплатахНалоговВРегистр(
		ДанныеЗапросаИОН.Организация,
		Год(ДанныеЗапросаИОН.ДатаНачалаПериода),
		ДанныеВыписки);
	
КонецПроцедуры

Функция ПоказательНеобходимостиПроверкиОплатНалогов(Организация, Дата) Экспорт
	
	// Если баннер с оповещением о необходимости сделать сверку с ФНС ранее был закрыт пользователем,
	// то получим дату закрытия этого баннера
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ПерсонализированныеПредложенияСервисов.ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ПерсонализированныеПредложенияСервисов.ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ПерсонализированныеПредложенияСервисов.НовыйЗакрытыеПользователемБаннеры());
	ЗакрытыеБаннерыОрганизации = ЗакрытыеБаннеры.БаннерыПоОрганизации[Организация];
	БаннерСверкаСФНС = Неопределено;
	ДатаЗакрытияБаннера = Дата(1, 1, 1);
	Если ТипЗнч(ЗакрытыеБаннерыОрганизации) = Тип("Структура")
		И ЗакрытыеБаннерыОрганизации.Свойство(
			"ПроверкаОплатыНалогов",
			БаннерСверкаСФНС) Тогда
		ДатаЗакрытияБаннера = КонецДня(БаннерСверкаСФНС.ДатаЗакрытия);
	КонецЕсли;
	
	// Проверяем только те документы, дата оплаты в которых позже даты закрытия баннера (минус количество дней,
	// необходимых, чтобы в ФНС увидели платеж). Если оплата произведена раньше, то пользователь уже видел
	// баннер, предупреждающий об этом событии и закрыл его
	Если ЗначениеЗаполнено(ДатаЗакрытияБаннера) Тогда
		// количество дней умножаем на количество секунд в сутках
		ДатаНачалаПроверкиДокументов = ДатаЗакрытияБаннера
			- МаксимальноеКоличествоДнейДоОтраженияПлатежаВФНС() * 60*60*24;
	Иначе
		ДатаНачалаПроверкиДокументов = Дата(1, 1, 1);
	КонецЕсли;
	
	ТаблицаДанных = ПерсонализированныеПредложенияСервисов.ТаблицаДанных();
	
	ТребуетсяПроверкаТекущегоГода = ТребуетсяПроверкаДляСверкиСФНС(Организация, Дата, ДатаНачалаПроверкиДокументов)
		Или ДекларацииСНарушеннымСрокомПодачи(Организация, ДатаЗакрытияБаннера).Количество() > 0;
	
	// Прошлый год
	ТребуетсяПроверкаПрошлогоГода = Ложь;
	ПрошлыйГод = Год(Дата) - 1;
	Если ПрошлыйГод >= ГодНачалаРаботыСервисаПроверкиОплаты() Тогда
		
		ДатаПроверки = ДатаПоследнейПроверкиПрошлогоГода(Организация, Дата);
		
		// Если прошлый год проверяли спустя 10 дней после начала нового года, заново делать запрос выписки уже не имеет смысла
		Если КоличествоРабочихДней(НачалоГода(Дата), ДатаПроверки) <= МаксимальноеКоличествоДнейДоОтраженияПлатежаВФНС() Тогда
			
			ТребуетсяПроверкаПрошлогоГода = ТребуетсяПроверкаДляСверкиСФНС(
				Организация, НачалоГода(Дата) - 1, ДатаНачалаПроверкиДокументов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяПроверкаТекущегоГода И ТребуетсяПроверкаПрошлогоГода Тогда
		ЗначениеПоказателя = ЗначениеТребуетсяПроверкаТекущегоИПрошлогоГодов();
	ИначеЕсли ТребуетсяПроверкаПрошлогоГода Тогда
		ЗначениеПоказателя = ЗначениеТребуетсяПроверкаПрошлогоГода()
	ИначеЕсли ТребуетсяПроверкаТекущегоГода Тогда
		ЗначениеПоказателя = ЗначениеТребуетсяПроверкаТекущегоГода();
	Иначе
		ЗначениеПоказателя = ЗначениеПроверкаНеТребуется();
	КонецЕсли;
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = ЗначениеПоказателя;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПоказатьБаннерПроверкаОплатыНалогов(Организация, ЗначениеПоказателя) Экспорт
	
	Если ЗначениеПоказателя = ЗначениеПроверкаНеТребуется() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоОрганизацииОтправленЗапросНаСверку(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтметитьРегламентированнуюОтчетностьПрошедшуюСверку(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	ТаблицаДеклараций = ДекларацииСНарушеннымСрокомПодачи(Параметры.Организация, , Истина);
	Если ТаблицаДеклараций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДекларации Из ТаблицаДеклараций Цикл
		МенеджерЗаписи = РегистрыСведений.ОтчетностьСНарушеннымСрокомПодачи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Параметры.Организация;
		МенеджерЗаписи.РегламентированныйОтчет = СтрокаДекларации.РегламентированныйОтчет;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Дата = Дата(1, 1, 1);
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область Печать

Функция ПечатьРасшифровкиСостоянияОплатыНалога(ДанныеОплаты) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.СверкаНалоговСФНС.ПолучитьМакет("СостояниеПлатежа");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеСРасчетногоСчета.Организация.НаименованиеСокращенное КАК Организация,
	|	СписаниеСРасчетногоСчета.Организация.ИНН КАК ОрганизацияИНН,
	|	СписаниеСРасчетногоСчета.Организация.КПП КАК ОрганизацияКПП,
	|	ВЫБОР
	|		КОГДА СписаниеСРасчетногоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СписаниеСРасчетногоСчета.Дата
	|		ИНАЧЕ СписаниеСРасчетногоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ КАК Дата,
	|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК Номер,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК Сумма,
	|	СписаниеСРасчетногоСчета.Налог.КодБК КАК КБК,
	|	ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.ДокументОснование КАК Документ.ПлатежноеПоручение).КодОКАТО КАК ОКТМО,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеСРасчетногоСчета.Налог) КАК Налог,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.Контрагент КАК Справочник.Контрагенты)) КАК Получатель,
	|	ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.Контрагент КАК Справочник.Контрагенты).ИНН КАК ПолучательИНН,
	|	ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.Контрагент КАК Справочник.Контрагенты).КПП КАК ПолучательКПП,
	|	СписаниеСРасчетногоСчета.СчетКонтрагента.НомерСчета КАК РасчетныйСчет,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеСРасчетногоСчета.СчетКонтрагента.Банк) КАК Банк,
	|	ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.Контрагент КАК Справочник.Контрагенты) КАК Налоговая,
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Организация.НаименованиеСокращенное,
	|	РасходныйКассовыйОрдер.Организация.ИНН,
	|	РасходныйКассовыйОрдер.Организация.КПП,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, ДЕНЬ),
	|	РасходныйКассовыйОрдер.НомерВходящегоДокумента,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.КодБК,
	|	РасходныйКассовыйОрдер.КодОКАТО,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдер.Налог),
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.Контрагенты)),
	|	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.Контрагенты).ИНН,
	|	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.Контрагенты).КПП,
	|	РасходныйКассовыйОрдер.СчетКонтрагента.НомерСчета,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдер.СчетКонтрагента.Банк),
	|	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.Контрагенты),
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеОплаты.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	ЕстьРасхожденияВКБК   = Ложь;
	ЕстьРасхожденияВОКТМО = Ложь;
	Если ДанныеОплаты.Состояние = Перечисления.СостоянияНалоговогоПлатежа.НеНайден Тогда
		
		Шапка.Параметры.Заголовок = НСтр("ru = 'Платеж не найден'");
		Шапка.Параметры.Пояснение = НСтр(
			"ru = 'В данных ФНС нет информации об этом платеже. Возможно, вы указали неверные данные получателя платежа
			|или ввели неправильный КБК или ОКТМО.'");
		
	Иначе // расхождения
		
		Шапка.Параметры.Заголовок = НСтр("ru = 'Расхождения с данными ФНС'");
		ТекстПояснения = "";
		Если КБКБезПодвидаДохода(ДанныеОплаты.КБК) <> КБКБезПодвидаДохода(ДанныеОплаты.КБКПоДаннымФНС) Тогда
			ЕстьРасхожденияВКБК = Истина;
			ТекстПояснения= НСтр("ru = 'КБК в документе списания отличается от КБК по данным ФНС.'");
		КонецЕсли;
		Если ДанныеОплаты.ОКТМО <> ДанныеОплаты.ОКТМОПоДаннымФНС Тогда
			ЕстьРасхожденияВОКТМО = Истина;
			ТекстПояснения = ТекстПояснения + ?(ЗначениеЗаполнено(ТекстПояснения), Символы.ПС, "")
				+ НСтр("ru = 'ОКТМО в документе списания отличается от ОКТМО по данным ФНС.'");
		КонецЕсли;
		ТекстПояснения = ТекстПояснения + Символы.ПС + НСтр("ru = 'Возможно, вы указали неверные данные.'");
		Шапка.Параметры.Пояснение = ТекстПояснения;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Выборка.ОрганизацияКПП) Тогда
		Шапка.Параметры.ОрганизацияИННКППЗаголовок = "ИНН/КПП:";
		Шапка.Параметры.ОрганизацияИННКПП = Выборка.ОрганизацияИНН + "/" + Выборка.ОрганизацияКПП;
	Иначе
		Шапка.Параметры.ОрганизацияИННКППЗаголовок = "ИНН:";
		Шапка.Параметры.ОрганизацияИННКПП = Выборка.ОрганизацияИНН;
	КонецЕсли;
	Шапка.Параметры.Период = ДанныеОплаты.Период;
	ТабДокумент.Вывести(Шапка);

	ОбластьКБК = Макет.ПолучитьОбласть("КБК");
	ОбластьКБК.Параметры.Заполнить(ДанныеОплаты);
	Если ЕстьРасхожденияВКБК Тогда
		ОбластьКБК.Параметры.КБКЗаголовок = НСтр("ru = 'КБК в документе:'");
		ОбластьКБК.Область("КБКВДокументе").ЦветТекста = ЦветаСтиля.ЦветОплатаНалогаНеОбнаружена;
	Иначе
		ОбластьКБК.Параметры.КБКЗаголовок = НСтр("ru = 'КБК:'");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьКБК);
	Если ДанныеОплаты.Состояние = Перечисления.СостоянияНалоговогоПлатежа.Расхождения
		И КБКБезПодвидаДохода(ДанныеОплаты.КБК) <> КБКБезПодвидаДохода(ДанныеОплаты.КБКПоДаннымФНС) Тогда
		
		ОбластьКБКПоДаннымФНС = Макет.ПолучитьОбласть("КБКПоДаннымФНС");
		ОбластьКБКПоДаннымФНС.Параметры.Заполнить(ДанныеОплаты);
		ТабДокумент.Вывести(ОбластьКБКПоДаннымФНС);
		
	КонецЕсли;
	
	ОбластьОКТМО = Макет.ПолучитьОбласть("ОКТМО");
	ОбластьОКТМО.Параметры.Заполнить(ДанныеОплаты);
	Если ЕстьРасхожденияВОКТМО Тогда
		ОбластьОКТМО.Параметры.ОКТМОЗаголовок = НСтр("ru = 'ОКТМО в документе:'");
		ОбластьОКТМО.Область("ОКТМОВДокументе").ЦветТекста = ЦветаСтиля.ЦветОплатаНалогаНеОбнаружена;
	Иначе
		ОбластьОКТМО.Параметры.ОКТМОЗаголовок = НСтр("ru = 'ОКТМО:'");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьОКТМО);
	Если ДанныеОплаты.Состояние = Перечисления.СостоянияНалоговогоПлатежа.Расхождения
		И ДанныеОплаты.ОКТМО <> ДанныеОплаты.ОКТМОПоДаннымФНС Тогда
		
		ОбластьОКТМОПоДаннымФНС = Макет.ПолучитьОбласть("ОКТМОПоДаннымФНС");
		ОбластьОКТМОПоДаннымФНС.Параметры.Заполнить(ДанныеОплаты);
		ТабДокумент.Вывести(ОбластьОКТМОПоДаннымФНС);
		
	КонецЕсли;
	
	// Получение адреса и телефона ИФНС.
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	ТаблицаКИ = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Налоговая),, ВидыКИ);
		
	АдресФНС   = ТаблицаКИ.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
	ТелефонФНС = ТаблицаКИ.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Вид");
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.Заполнить(Выборка);
	Подвал.Параметры.ПолучательИННКПП = ""+ Выборка.ПолучательИНН + "/" + Выборка.ПолучательКПП;
	Подвал.Параметры.АдресФНС   = ?(АдресФНС = Неопределено, "", АдресФНС.Представление);
	Подвал.Параметры.ТелефонФНС = ?(ТелефонФНС = Неопределено, "", ТелефонФНС.Представление);
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСпискаОплат(АдресХранилища, ТолькоПроблемные) Экспорт
	
	ДанныеОплат = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.СверкаНалоговСФНС.ПолучитьМакет("СписокПлатежей");
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
	
	Для Каждого Строка Из ДанныеОплат Цикл
		Если ТолькоПроблемные И Не Строка.ПроблемныйПлатеж Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		СтрокаТаблицы.Параметры.Заполнить(Строка);
		ОбластьСостояние = СтрокаТаблицы.Область("Состояние");
		Если Строка.Состояние = Перечисления.СостоянияНалоговогоПлатежа.Зачислен Тогда
			ОбластьСостояние.ЦветТекста = ЦветаСтиля.ЦветОплатаНалогаЗачислена;
		ИначеЕсли Строка.Состояние = Перечисления.СостоянияНалоговогоПлатежа.НеНайден
			Или Строка.Состояние = Перечисления.СостоянияНалоговогоПлатежа.Расхождения Тогда
			
			ОбластьСостояние.ЦветТекста = ЦветаСтиля.ЦветОплатаНалогаНеОбнаружена;
			
		КонецЕсли;
		ТабДокумент.Вывести(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

#КонецОбласти

Функция ДекларацииСНарушеннымСрокомПодачи(Организация, ДатаЗакрытияБаннера = Неопределено, ВыгрузитьВТаблицу = Ложь)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ОтчетностьСНарушеннымСрокомПодачи.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ИЗ
		|	РегистрСведений.ОтчетностьСНарушеннымСрокомПодачи КАК ОтчетностьСНарушеннымСрокомПодачи
		|ГДЕ
		|	ОтчетностьСНарушеннымСрокомПодачи.Организация = &Организация");
	
	Запрос = Новый Запрос;
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ЗначениеЗаполнено(ДатаЗакрытияБаннера) Тогда
		УсловияЗапроса.Добавить("ОтчетностьСНарушеннымСрокомПодачи.Дата > &ДатаНачалаПроверки");
	Иначе
		УсловияЗапроса.Добавить("ОтчетностьСНарушеннымСрокомПодачи.Дата <> ДатаВремя(1, 1, 1)");
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ДатаЗакрытияБаннера);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ВыгрузитьВТаблицу Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
КонецФункции

Функция ПараметрыОтправкиЗапроса(Организация, Год) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.СервисПроверкаОплатыНалогов)
	|	И ПерсонализированныеДанные.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
	|		ПО РегистрацииВНалоговомОргане.Код = ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя
	|			И РегистрацииВНалоговомОргане.КПП = ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
	|			И (ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФНС))
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ГодаДляОтправкиЗапросов = Новый Массив;
	Если ЗначениеЗаполнено(Год) Тогда
		ГодаДляОтправкиЗапросов.Добавить(Год);
	Иначе
		ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		// Годы, за которые нужно выполнить запроса на сверку оплат
		Выборка = РезультатЗапроса[0].Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеПоказателя = Выборка.ЗначениеПоказателя;
			Если ЗначениеПоказателя = ЗначениеТребуетсяПроверкаТекущегоИПрошлогоГодов() Тогда
				ГодаДляОтправкиЗапросов.Добавить(Год(ТекущаяДата) - 1);
				ГодаДляОтправкиЗапросов.Добавить(Год(ТекущаяДата));
			ИначеЕсли ЗначениеПоказателя = ЗначениеТребуетсяПроверкаПрошлогоГода() Тогда
				ГодаДляОтправкиЗапросов.Добавить(Год(ТекущаяДата) - 1);
			ИначеЕсли ЗначениеПоказателя = ЗначениеТребуетсяПроверкаТекущегоГода() Тогда
				ГодаДляОтправкиЗапросов.Добавить(Год(ТекущаяДата));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Налоговые органы, в которые нужно отправить запрос на сверку.
	СписокДанныхДляОтправкиЗапроса = Новый Массив;
	Выборка = РезультатЗапроса[1].Выбрать();
	Для Каждого Год Из ГодаДляОтправкиЗапросов Цикл
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			СписокДанныхДляОтправкиЗапроса.Добавить(Новый Структура("Год, НалоговыйОрган", Год, Выборка.Ссылка));
		КонецЦикла;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Организация",                    Организация);
	Результат.Вставить("СписокДанныхДляОтправкиЗапроса", СписокДанныхДляОтправкиЗапроса);
	
	Возврат Результат;

КонецФункции

Функция ПоОрганизацииОтправленЗапросНаСверку(Организация, Год = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыНаПроверкуОплатНалогов.Запрос КАК Запрос
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|	И НЕ ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И ВЫБОР
	|			КОГДА &Год = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗапросыНаПроверкуОплатНалогов.Год = &Год
	|		КОНЕЦ
	|	И РАЗНОСТЬДАТ(ЗапросыНаПроверкуОплатНалогов.Дата, &ТекущаяДата, ДЕНЬ) <= &МаксимальноеКоличествоДнейОжиданияОтвета";
	Запрос.УстановитьПараметр("Организация",                              Организация);
	запрос.УстановитьПараметр("Год",                                      Год);
	запрос.УстановитьПараметр("МаксимальноеКоличествоДнейОжиданияОтвета", МаксимальноеКоличествоДнейОжиданияОтветаНаЗапрос());
	Запрос.УстановитьПараметр("ТекущаяДата",                              ОбщегоНазначения.ТекущаяДатаПользователя());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ГодПоследнейПроверкиНеПрошедшейСверку(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Год(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗапросыНаПроверкуОплатНалогов.Год) КАК Год
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|	И ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И НЕ ЗапросыНаПроверкуОплатНалогов.СверкаПройдена";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ГодПоследнейПроверки = Выборка.Год;
	Если ЗначениеЗаполнено(ГодПоследнейПроверки) Тогда
		Возврат ГодПоследнейПроверки;
	Иначе
		Возврат Год(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборВыпискиОперацийВФорматеXML

Функция РазобратьВыпискуОперацийВФорматеXML(Данные)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Данные.Получить();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	Фабрика = Новый ФабрикаXDTO;
	ВыпискаОперацийXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	// Данные налогового органа.
	ДанныеВыписки = СтруктураДляДанныхВыпискиОпераций();
	Документ = ВыпискаОперацийXDTO.Документ;
	ДанныеВыписки.НалоговыйОрганНаименование = Документ.Подписант.НаимНО;
	ДанныеВыписки.НалоговыйОрганКод          = Документ.Подписант.КодНО;
	
	// Данные организации (отправителя запроса).
	Отправитель = Документ.СвОтпр;
	Если СвойствоСуществует(Отправитель, "СвОтпрЮЛ") Тогда // это юр. лицо
		ДанныеВыписки.ОрганизацияНаименование = Отправитель.СвОтпрЮЛ.НаимОрг;
		ДанныеВыписки.ОрганизацияИНН          = Отправитель.СвОтпрЮЛ.ИННЮЛ;
		ДанныеВыписки.ОрганизацияКПП          = Отправитель.СвОтпрЮЛ.КПП;
	ИначеЕсли СвойствоСуществует(Отправитель, "СвОтпрФЛ") Тогда // это физ. лицо
		ФИО = Отправитель.СвОтпрФЛ.ФИО;
		ДанныеВыписки.ОрганизацияНаименование = НСтр("ru = 'ИП'")
			+ " " + ФИО.Фамилия
			+ " " + Лев(ФИО.Имя, 1) + "."
			+ ?(ЗначениеЗаполнено(ФИО.Отчество), Лев(ФИО.Отчество, 1) + ".", "");
		ДанныеВыписки.ОрганизацияИНН = Отправитель.СвОтпрФЛ.ИННФЛ;
	КонецЕсли;
	
	// Данные налогов
	ДанныеНалогов = Новый Массив();
	Если ТипЗнч(Документ.ВыпОперРСБ) = Тип("ОбъектXDTO") Тогда
		ПолучитьДанныеПоНалогу(ДанныеНалогов, Документ.ВыпОперРСБ);
	ИначеЕсли ТипЗнч(Документ.ВыпОперРСБ) = Тип("СписокXDTO") Тогда
		Для Каждого НалогXDTO Из Документ.ВыпОперРСБ Цикл
			ПолучитьДанныеПоНалогу(ДанныеНалогов, НалогXDTO);
		КонецЦикла;
	КонецЕсли;
	ДанныеВыписки.Налоги = ДанныеНалогов;
	
	Возврат ДанныеВыписки;
	
КонецФункции

Функция СтруктураДляДанныхВыпискиОпераций()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НалоговыйОрганНаименование");
	СтруктураДанных.Вставить("НалоговыйОрганКод");
	СтруктураДанных.Вставить("ОрганизацияНаименование");
	СтруктураДанных.Вставить("ОрганизацияИНН");
	СтруктураДанных.Вставить("ОрганизацияКПП");
	СтруктураДанных.Вставить("Налоги");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СтруктураДляДанныхНалога()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НалогНаименование");
	СтруктураДанных.Вставить("НалогКБК");
	СтруктураДанных.Вставить("НалогОКТМО");
	СтруктураДанных.Вставить("НалогСтатусНалогоплательщика");
	СтруктураДанных.Вставить("НалогОперации");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СтруктураДляДанныхОперации()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОперацияДатаЗаписи");
	СтруктураДанных.Вставить("ОперацияСрокОплаты");
	СтруктураДанных.Вставить("ОперацияНаименование");
	СтруктураДанных.Вставить("ОперацияДокумент");
	СтруктураДанных.Вставить("ОперацияНомерДокумента");
	СтруктураДанных.Вставить("ОперацияДатаДокумента");
	СтруктураДанных.Вставить("ОперацияДатаПредставленияДокументаВНО"); // дата представления документа отчетности в налоговый орган
	СтруктураДанных.Вставить("ОперацияПериодОтчетности");
	СтруктураДанных.Вставить("ОперацияСумма");
	СтруктураДанных.Вставить("ОперацияВидПлатежа");
	СтруктураДанных.Вставить("ОперацияКод");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства)
	
	Возврат ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено
	
КонецФункции

Функция СвойствоТипаСтрока(ОбъектXDTO, ИмяСвойства)
	
	Если СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат ОбъектXDTO.Получить(ИмяСвойства);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СвойствоТипаДата(ОбъектXDTO, ИмяСвойства)
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(СвойствоТипаСтрока(ОбъектXDTO, ИмяСвойства));
	
КонецФункции

Функция СвойствоТипаЧисло(ОбъектXDTO, ИмяСвойства)
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СвойствоТипаСтрока(ОбъектXDTO, ИмяСвойства));
	
КонецФункции

Функция ЭтоОплатаНалога(ДанныеОперации)
	
	Возврат (ВРег(ДанныеОперации.ОперацияНаименование) = "УПЛАЧЕНО");
	
КонецФункции

Процедура ПолучитьДанныеПоНалогу(ДанныеНалогов, НалогXDTO)
	
	ДанныеНалога = СтруктураДляДанныхНалога();
	ДанныеНалога.НалогНаименование            = НалогXDTO.НаимНалог;
	ДанныеНалога.НалогКБК                     = НалогXDTO.КБК;
	ДанныеНалога.НалогОКТМО                   = НалогXDTO.ОКТМО;
	ДанныеНалога.НалогСтатусНалогоплательщика = НалогXDTO.СвНП.СтатусНП;
	ДанныеНалога.НалогОперации                = ДанныеОбОплатахНалога(НалогXDTO);
	
	Если ДанныеНалога.НалогОперации.Количество() > 0 Тогда
		ДанныеНалогов.Добавить(ДанныеНалога);
	КонецЕсли;

КонецПроцедуры

// Отбираем только оплаты налогов
Функция ДанныеОбОплатахНалога(ДанныеПоНалогу)
	
	Операции = Новый Массив();
	
	Если Не СвойствоСуществует(ДанныеПоНалогу, "ЗапОперРСБ") Тогда
		Возврат Операции;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПоНалогу.ЗапОперРСБ) = Тип("ОбъектXDTO") Тогда
		ПолучитьДанныеПоОплате(Операции, ДанныеПоНалогу.ЗапОперРСБ);
	ИначеЕсли ТипЗнч(ДанныеПоНалогу.ЗапОперРСБ) = Тип("СписокXDTO") Тогда
		Для Каждого ОперацияОплатыXDTO Из ДанныеПоНалогу.ЗапОперРСБ Цикл
			ПолучитьДанныеПоОплате(Операции, ОперацияОплатыXDTO); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Операции;
	
КонецФункции

Процедура ПолучитьДанныеПоОплате(Операции, ОперацияXDTO) 

	ДанныеОперации = СтруктураДляДанныхОперации();
	ДанныеОперации.ОперацияСрокОплаты   = СвойствоТипаДата(ОперацияXDTO, "СрокУплат");
	ДанныеОперации.ОперацияДатаЗаписи   = СвойствоТипаДата(ОперацияXDTO, "ДатаЗап");
	ДанныеОперации.ОперацияНаименование = СвойствоТипаСтрока(ОперацияXDTO, "НаимОперац");
	ДанныеОперации.ОперацияКод          = СвойствоТипаСтрока(ОперацияXDTO, "КодОперац");
	ДанныеОперации.ОперацияВидПлатежа   = СвойствоТипаСтрока(ОперацияXDTO, "ВидПлатеж");
	
	ДанныеДокумента = СвойствоТипаСтрока(ОперацияXDTO, "ДокОтч"); 
	Если ДанныеДокумента <> Неопределено Тогда
		ДанныеОперации.ОперацияДокумент                      = СвойствоТипаСтрока(ДанныеДокумента, "ВидДО");
		ДанныеОперации.ОперацияНомерДокумента                = СвойствоТипаСтрока(ДанныеДокумента, "НомДО");
		ДанныеОперации.ОперацияДатаДокумента                 = СвойствоТипаДата(ДанныеДокумента, "ДатаДО");
		ДанныеОперации.ОперацияДатаПредставленияДокументаВНО = СвойствоТипаДата(ДанныеДокумента, "ДатаПредстДО");
		ДанныеОперации.ОперацияПериодОтчетности              = СвойствоТипаСтрока(ДанныеДокумента, "ПризПериодОтч");
	КонецЕсли;
	
	СуммаОперации = СвойствоТипаСтрока(ОперацияXDTO, "Сумма");
	Если СуммаОперации <> Неопределено Тогда
		ДанныеОперации.ОперацияСумма = СвойствоТипаЧисло(СуммаОперации, "Кредит");
	КонецЕсли;
	
	Если ЭтоОплатаНалога(ДанныеОперации) Тогда
		Операции.Добавить(ДанныеОперации);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанныхОбОплатахНалоговВРегистр

Процедура ЗаписатьДанныеФНСОбОплатахНалоговВРегистр(Организация, Год, ДанныеВыписки)
	
	ДанныеОбОплатах = ДанныеФНСОбОплатахНалогов(ДанныеВыписки);
	
	Набор = РегистрыСведений.СведенияФНСОбОплатахНалогов.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Год.Установить(Год);
	Для Каждого Оплата Из ДанныеОбОплатах Цикл
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Оплата);
		Запись.Организация = Организация;
		Запись.Год         = Год;
	КонецЦикла;
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция ДанныеФНСОбОплатахНалогов(ДанныеВыписки)
	
	ДанныеОбОплатах = Новый ТаблицаЗначений;
	ДанныеОбОплатах.Колонки.Добавить("ДатаПлатежа");
	ДанныеОбОплатах.Колонки.Добавить("СрокУплаты");
	ДанныеОбОплатах.Колонки.Добавить("НомерПлатежа");
	ДанныеОбОплатах.Колонки.Добавить("СуммаПлатежа");
	ДанныеОбОплатах.Колонки.Добавить("КБК");
	ДанныеОбОплатах.Колонки.Добавить("ОКТМО");
	
	Налоги = ДанныеВыписки.Налоги;
	Для Каждого Налог Из Налоги Цикл
		Для Каждого Операция Из Налог.НалогОперации Цикл
			СтрокаДанных = ДанныеОбОплатах.Добавить();
			СтрокаДанных.ДатаПлатежа  = Операция.ОперацияДатаДокумента;
			// Если банковские выписки загружены из клиент-банка, то дата выписки равна сроку уплаты по данным ФНС.
			СтрокаДанных.СрокУплаты   = Операция.ОперацияСрокОплаты;
			СтрокаДанных.НомерПлатежа = Операция.ОперацияНомерДокумента;
			СтрокаДанных.СуммаПлатежа = Операция.ОперацияСумма;
			СтрокаДанных.КБК          = Налог.НалогКБК;
			СтрокаДанных.ОКТМО        = Налог.НалогОКТМО;
		КонецЦикла;
	КонецЦикла;
	
	// Из-за сторнирования оплат в ФНС и внесения вновь могут быть несколькок строк с одинаковыми данными,
	// поэтому сворачиваем данные, чтобы не возникла ошибка при записи данных в регистр сведений.
	ДанныеОбОплатах.Свернуть("ДатаПлатежа, СрокУплаты, НомерПлатежа, СуммаПлатежа, КБК, ОКТМО");
	
	Возврат ДанныеОбОплатах;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеСДаннымиФНС

Функция ДанныеОбОплатахНалоговСоСтатусами(Организация, Год) Экспорт
	
	СопоставленныеДанные = СопоставитьОплатыСДаннымиФНС(Организация, Год);
	ДополнитьСопоставленныеДанныеОбОплатах(СопоставленныеДанные, Организация, Год);
	
	Возврат СопоставленныеДанные;
	
КонецФункции

Функция СопоставитьОплатыСДаннымиФНС(Организация, Год)
	
	СведенияОбОплатах = СведенияОбОплатахНалогов(Организация, Год);
	
	Сопоставление = СведенияОбОплатах.СведенияОбОплатахИБ;
	Сопоставление.Колонки.Добавить("КБКПоДаннымФНС"  , ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Сопоставление.Колонки.Добавить("ОКТМОПоДаннымФНС", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Сопоставление.Колонки.Добавить("ПлатежОбнаружен" , Новый ОписаниеТипов("Булево"));
	
	СведенияОбОплатахФНС = СведенияОбОплатах.СведенияОбОплатахФНС;
	
	Для Каждого СтрокаСопоставления Из Сопоставление Цикл
		Если НайденПлатежПоНомеру(СтрокаСопоставления, СведенияОбОплатахФНС)
				Или НайденПлатежПоКБК_ОКТМО(СтрокаСопоставления, СведенияОбОплатахФНС) Тогда
			СтрокаСопоставления.ПлатежОбнаружен = Истина;
		Иначе
			СтрокаСопоставления.ПлатежОбнаружен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Ищем оплаты в данных ФНС по дате и сумме для оставшихся несопоставленных платежей.
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ПлатежОбнаружен", Ложь);
	НесопоставленныеПлатежи = Сопоставление.НайтиСтроки(ПараметрыПоиска);
	Для Каждого НесопоставленныйПлатеж Из НесопоставленныеПлатежи Цикл
		Если НайденПлатежПоДатеСумме(НесопоставленныйПлатеж, СведенияОбОплатахФНС) Тогда
			НесопоставленныйПлатеж.ПлатежОбнаружен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сопоставление;
	
КонецФункции

Функция НайденПлатежПоНомеру(СтрокаСопоставления, СведенияОбОплатахФНС)
	
	Результат = Ложь;
	
	ПараметрыПоискаПоДате = Новый Структура;
	ПараметрыПоискаПоДате.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоДате.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоДате.Вставить("Номер"       , СтрокаСопоставления.Номер);
	ПараметрыПоискаПоДате.Вставить("Дата"        , СтрокаСопоставления.Дата);
	
	// При загрузке выписок из КлиентБанка дата платежа может быть равна сроку уплаты в данных ФНС.
	ПараметрыПоискаПоСрокуУплаты = Новый Структура;
	ПараметрыПоискаПоСрокуУплаты.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоСрокуУплаты.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоСрокуУплаты.Вставить("Номер"       , СтрокаСопоставления.Номер);
	ПараметрыПоискаПоСрокуУплаты.Вставить("СрокУплаты"  , СтрокаСопоставления.Дата);
	
	Если ПоискПлатежаВДанныхФНС(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоДате)
			Или ПоискПлатежаВДанныхФНС(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоСрокуУплаты) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайденПлатежПоКБК_ОКТМО(СтрокаСопоставления, СведенияОбОплатахФНС)
	
	Результат = Ложь;
	
	ПараметрыПоискаПоДате = Новый Структура;
	ПараметрыПоискаПоДате.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоДате.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоДате.Вставить("Дата"        , СтрокаСопоставления.Дата);
	
	// При загрузке выписок из КлиентБанка дата платежа может быть равна сроку уплаты в данных ФНС.
	ПараметрыПоискаПоСрокуУплаты = Новый Структура;
	ПараметрыПоискаПоСрокуУплаты.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоСрокуУплаты.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоСрокуУплаты.Вставить("СрокУплаты"  , СтрокаСопоставления.Дата);
	
	Если ПоискПлатежаВДанныхФНСПоКБК_ОКТМО(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоДате)
			Или ПоискПлатежаВДанныхФНСПоКБК_ОКТМО(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоСрокуУплаты) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайденПлатежПоДатеСумме(СтрокаСопоставления, СведенияОбОплатахФНС)
	
	Результат = Ложь;
	
	ПараметрыПоискаПоДате = Новый Структура;
	ПараметрыПоискаПоДате.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоДате.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоДате.Вставить("Дата"        , СтрокаСопоставления.Дата);
	
	// При загрузке выписок из КлиентБанка дата платежа может быть равна сроку уплаты в данных ФНС.
	ПараметрыПоискаПоСрокуУплаты = Новый Структура;
	ПараметрыПоискаПоСрокуУплаты.Вставить("Организация" , СтрокаСопоставления.Организация);
	ПараметрыПоискаПоСрокуУплаты.Вставить("Сумма"       , СтрокаСопоставления.Сумма);
	ПараметрыПоискаПоСрокуУплаты.Вставить("СрокУплаты"  , СтрокаСопоставления.Дата);
	
	Если ПоискПлатежаВДанныхФНС(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоДате)
			Или ПоискПлатежаВДанныхФНС(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоискаПоСрокуУплаты) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоискПлатежаВДанныхФНС(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоиска)
	
	Результат = Ложь;
	
	НайденнаяСтрока = Неопределено;
	НайденныеДанныеФНС = СведенияОбОплатахФНС.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеДанныеФНС.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеДанныеФНС[0];
		СтрокаСопоставления.КБКПоДаннымФНС   = НайденнаяСтрока.КБКПоДаннымФНС;
		СтрокаСопоставления.ОКТМОПоДаннымФНС = НайденнаяСтрока.ОКТМОПоДаннымФНС;
		Результат = Истина;
	КонецЕсли;
	
	// Сопоставленный платеж удаляем из данных ФНС.
	Если НайденнаяСтрока <> Неопределено Тогда
		СведенияОбОплатахФНС.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоискПлатежаВДанныхФНСПоКБК_ОКТМО(СтрокаСопоставления, СведенияОбОплатахФНС, ПараметрыПоиска)
	
	Результат = Ложь;
	
	НайденнаяСтрока = Неопределено;
	НайденныеДанныеФНС = СведенияОбОплатахФНС.НайтиСтроки(ПараметрыПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеДанныеФНС Цикл
		ДанныеНалога = Новый Структура;
		ДанныеНалога.Вставить("КБК"             , СтрокаСопоставления.КБК);
		ДанныеНалога.Вставить("ОКТМО"           , СтрокаСопоставления.ОКТМО);
		ДанныеНалога.Вставить("КБКПоДаннымФНС"  , НайденнаяСтрока.КБКПоДаннымФНС);
		ДанныеНалога.Вставить("ОКТМОПоДаннымФНС", НайденнаяСтрока.ОКТМОПоДаннымФНС);
		Если КБК_ОКТМОСовпадают(ДанныеНалога) Тогда
			СтрокаСопоставления.КБКПоДаннымФНС   = НайденнаяСтрока.КБКПоДаннымФНС;
			СтрокаСопоставления.ОКТМОПоДаннымФНС = НайденнаяСтрока.ОКТМОПоДаннымФНС;
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Сопоставленный платеж удаляем из данных ФНС.
	Если Результат И НайденнаяСтрока <> Неопределено Тогда
		СведенияОбОплатахФНС.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОбОплатахНалогов(Организация, Год)
	
	НачалоПериода = НачалоГода(Дата(Год, 1, 1));
	КонецПериода  = КонецГода(Дата(Год, 1, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"          , Организация);
	Запрос.УстановитьПараметр("НачалоПериода"        , НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"         , КонецПериода);
	Запрос.УстановитьПараметр("ВидОперацииСписанияДС", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	Запрос.УстановитьПараметр("ВидОперацииРКО"       , Перечисления.ВидыОперацийРКО.УплатаНалога);
	Запрос.УстановитьПараметр("Год"                  , Год);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СписаниеСРасчетногоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СписаниеСРасчетногоСчета.Дата
	|		ИНАЧЕ СписаниеСРасчетногоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ КАК Дата,
	|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК Номер,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК НалоговыйПериод,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК Сумма,
	|	СписаниеСРасчетногоСчета.Налог.КодБК КАК КБК,
	|	ЕСТЬNULL(ПлатежноеПоручение.КодОКАТО, """") КАК ОКТМО,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеСРасчетногоСчета.Налог) КАК Налог,
	|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательПериода, """") КАК ПоказательПериода
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СписаниеСРасчетногоСчета.Контрагент = Контрагенты.Ссылка
	|			И (Контрагенты.ВидГосударственногоОргана = ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.ВидОперации = &ВидОперацииСписанияДС
	|	И ВЫБОР
	|			КОГДА &Организация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СписаниеСРасчетногоСчета.Организация = &Организация
	|		КОНЕЦ
	|	И СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Организация,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, ДЕНЬ),
	|	РасходныйКассовыйОрдер.НомерВходящегоДокумента,
	|	РасходныйКассовыйОрдер.НалоговыйПериод,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.КодБК,
	|	РасходныйКассовыйОрдер.КодОКАТО,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдер.Налог),
	|	РасходныйКассовыйОрдер.ПоказательПериода
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО РасходныйКассовыйОрдер.Контрагент = Контрагенты.Ссылка
	|			И (Контрагенты.ВидГосударственногоОргана = ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган))
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.ВидОперации = &ВидОперацииРКО
	|	И ВЫБОР
	|			КОГДА &Организация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РасходныйКассовыйОрдер.Организация = &Организация
	|		КОНЕЦ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияФНСОбОплатахНалогов.Организация КАК Организация,
	|	СведенияФНСОбОплатахНалогов.ДатаПлатежа КАК Дата,
	|	СведенияФНСОбОплатахНалогов.НомерПлатежа КАК Номер,
	|	СведенияФНСОбОплатахНалогов.СуммаПлатежа КАК Сумма,
	|	СведенияФНСОбОплатахНалогов.СрокУплаты КАК СрокУплаты,
	|	СведенияФНСОбОплатахНалогов.КБК КАК КБКПоДаннымФНС,
	|	СведенияФНСОбОплатахНалогов.ОКТМО КАК ОКТМОПоДаннымФНС
	|ИЗ
	|	РегистрСведений.СведенияФНСОбОплатахНалогов КАК СведенияФНСОбОплатахНалогов
	|ГДЕ
	|	СведенияФНСОбОплатахНалогов.Год = &Год
	|	И ВЫБОР
	|			КОГДА &Организация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СведенияФНСОбОплатахНалогов.Организация = &Организация
	|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить("СведенияОбОплатахИБ", РезультатЗапроса[0].Выгрузить());
	Результат.Вставить("СведенияОбОплатахФНС", РезультатЗапроса[1].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСопоставленныеДанныеОбОплатах(СопоставленныеДанные, Организация, Год)
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДатыСверокПоОрганизациям = ДатыСверокПоОрганизациям(Организация, Год);
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	СопоставленныеДанные.Колонки.Добавить("Состояние");
	СопоставленныеДанные.Колонки.Добавить("Период");
	СопоставленныеДанные.Колонки.Добавить("ПроблемныйПлатеж");
	Для Каждого Строка Из СопоставленныеДанные Цикл
		
		Строка.Период = ПериодПлатежа(Строка);
		Если Не ЗначениеЗаполнено(Строка.ОКТМО) Тогда
			Строка.ОКТМО = ОКТМОПлатежа(Строка.Ссылка); // если платежное поручение введено на основании списания
		КонецЕсли;
		Строка.Состояние        = СостояниеПлатежа(Строка, ТекущаяДата, ПроизводственныйКалендарь, ДатыСверокПоОрганизациям);
		Строка.ПроблемныйПлатеж = ЭтоПроблемныйПлатеж(Строка.Состояние);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СостояниеПлатежа(ДанныеНалога, ТекущаяДата, ПроизводственныйКалендарь, ДатыСверокПоОрганизациям)
	
	ДатаПоследнейСверки = ДатыСверокПоОрганизациям.Получить(ДанныеНалога.Организация);
	
	Если ДанныеНалога.ПлатежОбнаружен Тогда
		Если КБК_ОКТМОСовпадают(ДанныеНалога) Тогда
			Возврат Перечисления.СостоянияНалоговогоПлатежа.Зачислен;
		Иначе
			Возврат Перечисления.СостоянияНалоговогоПлатежа.Расхождения;
		КонецЕсли;
		
	// Если дата сверки меньше даты оплаты налога, статус оставляем пустым.
	ИначеЕсли ЗначениеЗаполнено(ДатаПоследнейСверки)
		И НачалоДня(ДанныеНалога.Дата) <= НачалоДня(ДатаПоследнейСверки) Тогда
		
		ДанныеКалендаря = РасчетЗарплатыБазовый.РазностьДатПроизводственныхКалендарейПоВидамДней(
			ПроизводственныйКалендарь,
			ДанныеНалога.Дата,
			ТекущаяДата);
			
		КоличествоРабочихДнейСМоментаПлатежа = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
			
		Если КоличествоРабочихДнейСМоментаПлатежа <= МаксимальноеКоличествоДнейДоОтраженияПлатежаВФНС() Тогда
			Возврат Перечисления.СостоянияНалоговогоПлатежа.ОжидаетсяЗачисление;
		Иначе
			Возврат Перечисления.СостоянияНалоговогоПлатежа.НеНайден;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция КБК_ОКТМОСовпадают(ДанныеНалога)
	
	КБКСовпадает = Истина;
	Если ЗначениеЗаполнено(ДанныеНалога.КБК) Тогда // не проверяем КБК, если данных по нему нет в ИБ
		КБКСовпадает = КБКБезПодвидаДохода(ДанныеНалога.КБК) = КБКБезПодвидаДохода(ДанныеНалога.КБКПоДаннымФНС);
	КонецЕсли;
	
	ОКТМОСовпадает = Истина;
	Если ЗначениеЗаполнено(ДанныеНалога.ОКТМО) Тогда // не проверяем ОКТМО, если данных по нему нет в ИБ
		ОКТМОСовпадает = СокрЛП(ДанныеНалога.ОКТМО) = СокрЛП(ДанныеНалога.ОКТМОПоДаннымФНС);
	КонецЕсли;
	
	Возврат КБКСовпадает И ОКТМОСовпадает;
	
КонецФункции

Функция ПериодПлатежа(ДанныеНалога)
	
	Если ЗначениеЗаполнено(ДанныеНалога.ПоказательПериода) И ДанныеНалога.ПоказательПериода <> "0" Тогда
		Возврат ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериодаДляФормыСверкиНалогов(ДанныеНалога.ПоказательПериода);
	Иначе
		Шаблон = "%1 %2 г.";
		Возврат СтрШаблон(
			Шаблон, 
			Формат(ДанныеНалога.НалоговыйПериод, "ДФ=ММММ"),
			Формат(ДанныеНалога.НалоговыйПериод, "ДФ=гггг"));
	КонецЕсли;
	
КонецФункции

// Для проверки берем первые 13 цифр, с 14 разряда в КБК идет информация
// о назначении платежа (налог, пени, штраф) и коды операций.
Функция КБКБезПодвидаДохода(КБК)
	
	Возврат Лев(КБК, 13);
	
КонецФункции

Функция КоличествоРабочихДней(НачалоПериода, КонецПериода)
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	ДанныеКалендаря = РасчетЗарплатыБазовый.РазностьДатПроизводственныхКалендарейПоВидамДней(
		ПроизводственныйКалендарь,
		НачалоПериода,
		КонецПериода);
		
	Возврат ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	
КонецФункции

Функция ЭтоПроблемныйПлатеж(СостояниеПлатежа)
	
	Возврат (СостояниеПлатежа = Перечисления.СостоянияНалоговогоПлатежа.НеНайден
			Или СостояниеПлатежа = Перечисления.СостоянияНалоговогоПлатежа.Расхождения);
	
КонецФункции

Функция ОКТМОПлатежа(Ссылка)

	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.КодОКАТО КАК ОКТМО
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОКТМО;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область Баннеры

Функция ДатаПоследнейПроверкиПрошлогоГода(Организация, Дата)
	
	ПрошлыйГод = Год(Дата) - 1;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапросыНаПроверкуОплатНалогов.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|	И ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И ЗапросыНаПроверкуОплатНалогов.Год = &Год
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год",         ПрошлыйГод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	Иначе // прошлый год не проверяли
		Возврат НачалоГода(НачалоГода(Дата) - 1); // дата начала прошлого года
	КонецЕсли;

КонецФункции

Функция ГодНачалаРаботыСервисаПроверкиОплаты()

	Возврат 2019;

КонецФункции

Функция ЗначениеПроверкаНеТребуется()

	Возврат 0;

КонецФункции

Функция ЗначениеТребуетсяПроверкаТекущегоГода()

	Возврат 1;

КонецФункции

Функция ЗначениеТребуетсяПроверкаПрошлогоГода()

	Возврат 2;

КонецФункции

Функция ЗначениеТребуетсяПроверкаТекущегоИПрошлогоГодов()

	Возврат 3;

КонецФункции

Функция ТребуетсяПроверкаДляСверкиСФНС(Организация, Дата, ДатаНачалаПроверки)
	
	ДанныеДокумента = СверкаСФНС.ДанныеДокументаНеПрошедшегоСверку(Организация, Дата, ДатаНачалаПроверки);
	
	Если ДанныеДокумента = Неопределено Или Не ЗначениеЗаполнено(ДанныеДокумента.ДатаОплаты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоДнейПослеОплаты = КоличествоРабочихДней(ДанныеДокумента.ДатаОплаты, Дата);
	Возврат КоличествоДнейПослеОплаты > МаксимальноеКоличествоДнейДоОтраженияПлатежаВФНС();
	
КонецФункции

#КонецОбласти

Функция МаксимальноеКоличествоДнейДоОтраженияПлатежаВФНС()
	
	Возврат 10;
	
КонецФункции

Функция МаксимальноеКоличествоДнейОжиданияОтветаНаЗапрос()

	Возврат 3;

КонецФункции

Функция ДанныеПоследнейСверки(Организация, Год)
	
	Результат = Новый Структура("ЗапросОтправлен, Дата, СсылкаНаЗапросИОН");
	Результат.ЗапросОтправлен = ПоОрганизацииОтправленЗапросНаСверку(Организация, Год);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Результат.Дата = Неопределено;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапросыНаПроверкуОплатНалогов.Запрос КАК СсылкаНаЗапросИОН,
	|	ЗапросыНаПроверкуОплатНалогов.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|	И ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И ЗапросыНаПроверкуОплатНалогов.Год = &Год
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год",         Год);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Дата = Выборка.Дата;
		Результат.СсылкаНаЗапросИОН = Выборка.СсылкаНаЗапросИОН;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ДатыСверокПоОрганизациям(Организация, Год)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыНаПроверкуОплатНалогов.Организация КАК Организация,
	|	МАКСИМУМ(ЗапросыНаПроверкуОплатНалогов.Дата) КАК Дата
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Организация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|		КОНЕЦ
	|	И ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И ЗапросыНаПроверкуОплатНалогов.Год = &Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыНаПроверкуОплатНалогов.Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год",         Год);
	Выборка = Запрос.Выполнить().Выбрать();
	ДатыСверок = Новый Соответствие;
	Если Выборка.Следующий() Тогда
		ДатыСверок.Вставить(Выборка.Организация, Выборка.Дата);
	КонецЕсли;
	
	Возврат ДатыСверок;

КонецФункции

#КонецОбласти

#КонецЕсли