&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаПерехода    = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	ДатаПереходаПредыдущая = Объект.ДатаПерехода;
	
	Объект.Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Объект.Организация, Ложь);
	
	ЗаполнитьСведенияОбОрганизации();
	ОпределитьДатуПерехода();
	
	ПервоначальноеЗаполнениеПеременныхФормы();
	ПервоначальноеЗаполнениеТаблицыОпераций();
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОперацияПоЕдиномуНалоговомуСчету"
		Или ИмяСобытия = "ИзменениеОперацииБух" Тогда
		ОбработкаИзмененияДокументовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ПолеОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		СоответствиеОрганизаций,
		Объект.Организация,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПереходаНажатие(Элемент)
	
	ИмяОперации = Элемент.Имя;
	
	СтрокиОперации = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", ИмяОперации));
	Если СтрокиОперации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаОперации = СтрокиОперации[0];
	
	СписокКоманд = СписокКомандДляОперации(СтрокаОперации);
	
	Команда = Неопределено;
	Если СписокКоманд.Количество() > 0 Тогда
		Если СписокКоманд.Количество() = 1 И Элемент.Имя <> "ЗачетАвансов" Тогда
			Команда = СписокКоманд[0];
			ОбработкаНажатияКнопкиМеню(Команда.Значение, Элемент, СтрокаОперации);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ДополнительныеПараметры.Вставить("СтрокаОперации", СтрокаОперации);
			ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОповещениеВыбора, СписокКоманд, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаПриИзменении(Элемент)
	
	Если Объект.ДатаПерехода < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		Объект.ДатаПерехода = ДатаПереходаПредыдущая;
		ТекстСообщения = НСтр("ru='Дата начала расчетов по ЕНС не может быть ранее 1 января 2023 г.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗарегистрированыДокументыНаДатуПерехода() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПереносДатыЗавершение", ЭтотОбъект);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'На %1 уже введены документы по ЕНС.
			|Изменить дату и перенести документы?'"), Формат(Объект.ДатаПерехода, "ДЛФ=DD"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ОбработатьИзменениеДаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = "https://its.1c.ru/bmk/ens_start";
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПервоначальноеЗаполнениеПеременныхФормы()
	
	СтруктураКартинок = Новый Структура;
	СтруктураКартинок.Вставить("КартинкаТекущаяОперация",     БиблиотекаКартинок.СтрелкаНаправоЖелтая);
	СтруктураКартинок.Вставить("КартинкаОперацияВыполнена",   БиблиотекаКартинок.ОперацияВыполненаУспешно);
	СтруктураКартинок.Вставить("КартинкаОперацияНеВыполнена", Новый Картинка);
	СтруктураКартинок.Вставить("КартинкаОперацияСОшибками",	  БиблиотекаКартинок.ОперацияВыполненаСОшибками);
	СтруктураКартинок.Вставить("КартинкаОперацияУстарела",    БиблиотекаКартинок.ОперациюНеобходимоПовторить);
	СтруктураКартинок.Вставить("КартинкаОперацияНеВидна",     Новый Картинка);
	СтруктураКартинок.Вставить("КартинкаОперацияПропущена",   БиблиотекаКартинок.ОперацияПропущена);
	СтруктураКартинок.Вставить("КартинкаОтчет",               БиблиотекаКартинок.Отчет);
	
	Картинки = Новый ФиксированнаяСтруктура(СтруктураКартинок);
	
	СтруктураЦветаТекста = Новый Структура;
	СтруктураЦветаТекста.Вставить("ЦветТекстаПоУмолчанию",      Новый Цвет);
	СтруктураЦветаТекста.Вставить("ОперацияНеВыполнена",        Новый Цвет);
	СтруктураЦветаТекста.Вставить("ОперацияВыполнена",          WebЦвета.Зеленый);
	СтруктураЦветаТекста.Вставить("ОперацияУстарела",           WebЦвета.СероСиний);
	СтруктураЦветаТекста.Вставить("ОперацияПропущена",          ЦветаСтиля.ЦветТекстаФормы);
	СтруктураЦветаТекста.Вставить("ОперацияВыполненаСОшибками", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	ЦветаТекстаОпераций = Новый ФиксированнаяСтруктура(СтруктураЦветаТекста);
	
	СтруктураТипыОпераций = Новый Структура;
	СтруктураТипыОпераций.Вставить("ОбработкаДанных",       1);
	СтруктураТипыОпераций.Вставить("СписокДокументов",      2);
	СтруктураТипыОпераций.Вставить("Отчет",                 3);
	СтруктураТипыОпераций.Вставить("ПереходНаВнешнююФорму", 4);
	
	ТипыОпераций = Новый ФиксированнаяСтруктура(СтруктураТипыОпераций);
	
	СоответствиеСпособыОбработкиДокументов = Новый Соответствие;
	СоответствиеСпособыОбработкиДокументов.Вставить(0, "НеОбрабатывать");
	СоответствиеСпособыОбработкиДокументов.Вставить(1, "ПометитьНаУдаление");
	СоответствиеСпособыОбработкиДокументов.Вставить(2, "ОтменитьПроведение");
	
	СпособыОбработкиДокументов = Новый ФиксированноеСоответствие(СоответствиеСпособыОбработкиДокументов);
	
КонецПроцедуры

// Функция возвращает таблицу операций, "описательную часть" без анализа статусов выполнения
// При изменении состава операций на форме функция должна быть дополнена
&НаСервере
Процедура ПервоначальноеЗаполнениеТаблицыОпераций()
	
	Если ТаблицаОпераций.Количество() > 0 Тогда
		ТаблицаОпераций.Очистить();
	КонецЕсли;
	
	Если Не ВводОстатков Тогда
		СтрокаОперации                  = ТаблицаОпераций.Добавить();
		СтрокаОперации.ВидОперации      = "ОтчетПоНалогамВзносам";
		СтрокаОперации.ИмяОперации      = "ОтчетПоНалогамВзносам";
		СтрокаОперации.ТипОперации      = ТипыОпераций.Отчет;
		СтрокаОперации.ДействиеОперации = "Отчеты.АнализСчета.СформироватьОтчетНаСервере";
		СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
		СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		СтрокаОперации.Актуальность     = Истина;
		СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
		СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	КонецЕсли;
	
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ПереносРасчетовПоНалогам";
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПереходаНаЕНС.ПереносРасчетовПоНалогамВзносам";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ПереносРасчетовПоСанкциям";
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов;
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПереходаНаЕНС.ПереносРасчетовПоНалогамВзносам";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ПереносПереплат";
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета;
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПереходаНаЕНС.ПереносРасчетовПоНалогамВзносам";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
	Если Не ВводОстатков Тогда
		СтрокаОперации                  = ТаблицаОпераций.Добавить();
		СтрокаОперации.ИмяОперации      = "ЗачетАвансов";
		СтрокаОперации.ВидОперации      = "ЗачетАвансов";
		СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
		СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПереходаНаЕНС.ЗачетАвансов";
		СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
		СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		СтрокаОперации.Актуальность     = Истина;
		СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
		СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу операций, устанавливает статусы в зависимости от реквизитов формы
//
&НаСервере
Процедура ЗаполнитьДанныеОпераций()

	ТабСостоянийОпераций = Новый ТаблицаЗначений;
	
	Если ПереходНаЕНСЗапущен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыполнениеОперацийПереходаНаЕНС.ВидОперации КАК ВидОперации,
		|	ВыполнениеОперацийПереходаНаЕНС.Состояние КАК Состояние,
		|	ВыполнениеОперацийПереходаНаЕНС.Актуальность КАК Актуальность,
		|	ДокументыОперацийПереходаНаЕНС.ДокументОперации КАК ДокументОперации
		|ИЗ
		|	РегистрСведений.ВыполнениеОперацийПереходаНаЕНС КАК ВыполнениеОперацийПереходаНаЕНС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыОперацийПереходаНаЕНС КАК ДокументыОперацийПереходаНаЕНС
		|		ПО ВыполнениеОперацийПереходаНаЕНС.Организация = ДокументыОперацийПереходаНаЕНС.Организация
		|			И ВыполнениеОперацийПереходаНаЕНС.ДатаПерехода = ДокументыОперацийПереходаНаЕНС.ДатаПерехода
		|			И ВыполнениеОперацийПереходаНаЕНС.ВидОперации = ДокументыОперацийПереходаНаЕНС.ВидОперации
		|ГДЕ
		|	ВыполнениеОперацийПереходаНаЕНС.Организация В(&Организации)
		|	И ВыполнениеОперацийПереходаНаЕНС.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийПереходаНаЕНС.Организация В(&Организации)
		|	И ДокументыОперацийПереходаНаЕНС.ДатаПерехода = &ДатаПерехода"
		;
		
		Запрос.УстановитьПараметр("ДатаПерехода", Объект.ДатаПерехода);
		
		Организация = СоответствиеОрганизаций[ПолеОрганизация].Организация;
		Если СоответствиеОрганизаций[ПолеОрганизация].ВключатьОбособленныеПодразделения Тогда
			Запрос.УстановитьПараметр("Организации", Организации);
		Иначе
			Запрос.УстановитьПараметр("Организации",Организация);
		КонецЕсли;
	
		ТабСостоянийОпераций = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТабСостоянийОпераций Цикл
			ДокументОперации = СтрокаТаблицы.ДокументОперации;
			Если ЗначениеЗаполнено(ДокументОперации) Тогда
				ДокОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперации, "Проведен, ПометкаУдаления");
				Если ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Если ДокОбъект.Проведен
						И СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
						СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
					КонецЕсли;
				КонецЕсли;
				Если ДокОбъект.ПометкаУдаления
					И СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
					СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// проставим состояния операций
	
	Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ОпределитьНеобходимостьОперацииПерехода(СтрокаТаблицы);
		
		// проставим состояние для операции
		Если СтрокаТаблицы.ТипОперации = ТипыОпераций.Отчет Тогда // "особая" операция
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		Иначе
			Если ПереходНаЕНСЗапущен Тогда // анализируем состояния
				СтрокиСостояний = ТабСостоянийОпераций.НайтиСтроки(Новый Структура("ВидОперации", СтрокаТаблицы.ВидОперации));
				Если СтрокиСостояний.Количество() > 0 Тогда // есть данные о состоянии
					СтрокаСостояния = СтрокиСостояний[0];
					СтрокаТаблицы.Состояние = СтрокаСостояния.Состояние;
					СтрокаТаблицы.Актуальность = СтрокаСостояния.Актуальность;
				Иначе // данных о состоянии операции нет, считается не выполненной
					СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
					СтрокаТаблицы.Актуальность = Истина;
				КонецЕсли;
			Иначе // анализировать состояния незачем, все операции по умолчанию не выполнены
				СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
				СтрокаТаблицы.Актуальность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ПолеПоясненияПоПереходу.Видимость = НЕ ПереходНаЕНСЗапущен;
	
	ОперацияГоловнойОрганизации = ЗначениеЗаполнено(ПолеОрганизация)
		И ((ЕстьОбособленныеПодразделения
			И ВключатьОбособленныеПодразделения)
				Или Не ЕстьОбособленныеПодразделения);
		
	Элементы.ДатаПерехода.Доступность = ОперацияГоловнойОрганизации;
	
	Элементы.ГруппаПереносРасчетовПоНалогам.Доступность  = Не ОперацияГоловнойОрганизации Или Не ЕстьОбособленныеПодразделения;
	Элементы.ГруппаПереносРасчетовПоСанкциям.Доступность = Не ОперацияГоловнойОрганизации Или Не ЕстьОбособленныеПодразделения;
	Элементы.ГруппаПереносПереплат.Доступность           = Не ОперацияГоловнойОрганизации Или Не ЕстьОбособленныеПодразделения;
	
	Элементы.ГруппаОтчетПоНалогамВзносам.Видимость = Не ВводОстатков;
	Элементы.ГруппаЗачетАвансов.Видимость          = Не ВводОстатков;
	
	Элементы.ГруппаОперацияВыполненаНоНеАктуальна.Видимость = Не ВводОстатков;
	
	ОбновитьСостояниеОперацийНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОперацийНаФорме()
	
	Элементы.ГруппаОперации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	ПорядокОперацииКВыполнению          = 0;
	
	Элементы.ГруппаОперации.Доступность = ПереходНаЕНСЗапущен;
	Элементы.ГруппаСтатусы.Доступность  = ПереходНаЕНСЗапущен;
	
	Для каждого СтрокаОперации Из ТаблицаОпераций Цикл
		
		ЭлементДействиеОперации = Элементы.Найти(СтрокаОперации.ИмяОперации);
		ЭлементСтатусОперации   = Элементы.Найти("Статус" + СтрокаОперации.ИмяОперации);
		ЭлементГруппаДействия   = ЭлементДействиеОперации.Родитель;
		
		Если СтрокаОперации.ТипОперации = ТипыОпераций.Отчет Тогда
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОтчет;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ЦветТекстаПоУмолчанию;
			Продолжить;
		КонецЕсли;
		
		ЭлементГруппаДействия.Видимость = СтрокаОперации.Использование;
		
		Если СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
			
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияНеВыполнена;
			
			Если ПорядокОперацииКВыполнению = 0 И СтрокаОперации.Использование Тогда
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаТекущаяОперация;
				ПорядокОперацииКВыполнению = СтрокаОперации.Порядок;
			Иначе
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияНеВыполнена;
			КонецЕсли;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено
		 Или СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется Тогда
			
			Если СтрокаОперации.Актуальность Тогда
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияВыполнена;
				ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияВыполнена;
			Иначе
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияУстарела;
				ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияУстарела;
			КонецЕсли;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияСОшибками;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияВыполненаСОшибками;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
			
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияПропущена;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияПропущена;
			
		Иначе
			
			ЭлементГруппаДействия.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПерехода()
	
	ПереходНаЕНСЗапущен = Ложь;
	
	ТекстПоясненияПоПереходу  = НСтр("ru = 'Не указана организация'");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПредыдущийПериодНачало = НачалоГода(НачалоГода(Объект.ДатаПерехода)-1);
		ПредыдущийПериодКонец  = КонецГода(ПредыдущийПериодНачало);
		
		ПлательщикЕНППредшествующийПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, ПредыдущийПериодНачало);
		УчастникЭкспериментаЕНП  = Не ПлательщикЕНППредшествующийПериод И УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, ПредыдущийПериодКонец);
		
		ПереходНаЕНСЗапущен = Не УчастникЭкспериментаЕНП;
		Если ПереходНаЕНСЗапущен Тогда
			ТекстПоясненияПоПереходу = "";
		Иначе
			ТекстПоясненияПоПереходу = НСтр("ru = 'Организация являлась участником эксперимента по ЕНП. Выполнять переход не требуется.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗависимостьОперацийПерехода();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации();
	ОпределитьДатуПерехода();
	ПервоначальноеЗаполнениеТаблицыОпераций();
	ЗаполнитьФормуНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимостьОперацийПерехода()

	ЗависимостьОпераций.Очистить();
	
	СтрокаЗависимости = ЗависимостьОпераций.Добавить();
	СтрокаЗависимости.ПроверяемаяОперация = "ЗачетАвансов";
	СтрокаЗависимости.ТребуемаяОперация   = "ПереносРасчетовПоНалогам";
	
	СтрокаЗависимости = ЗависимостьОпераций.Добавить();
	СтрокаЗависимости.ПроверяемаяОперация = "ЗачетАвансов";
	СтрокаЗависимости.ТребуемаяОперация   = "ПереносРасчетовПоСанкциям";
	
	СтрокаЗависимости = ЗависимостьОпераций.Добавить();
	СтрокаЗависимости.ПроверяемаяОперация = "ЗачетАвансов";
	СтрокаЗависимости.ТребуемаяОперация   = "ПереносПереплат";
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНеобходимостьОперацииПерехода(СтрокаОперации)

	// по умолчанию - всегда выполняем операции
	СтрокаОперации.Использование = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоОперации(СтруктураПараметров)
	
	ДокументыОперации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыОперацийПереходаНаЕНС.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийПереходаНаЕНС КАК ДокументыОперацийПереходаНаЕНС
	|ГДЕ
	|	ДокументыОперацийПереходаНаЕНС.Организация = &Организация
	|	И ДокументыОперацийПереходаНаЕНС.ДатаПерехода = &ДатаПерехода
	|	И ДокументыОперацийПереходаНаЕНС.ВидОперации = &ВидОперации"
	;

	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("ВидОперации",  СтруктураПараметров.ВидОперации);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументыОперации = Результат.Выгрузить().ВыгрузитьКолонку("ДокументОперации");
	КонецЕсли;
	
	Возврат ДокументыОперации;
	
КонецФункции

&НаСервере
Функция ЗарегистрированыДокументыНаДатуПерехода()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыОперацийПереходаНаЕНС.ДокументОперации КАК ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийПереходаНаЕНС КАК ДокументыОперацийПереходаНаЕНС
	|ГДЕ
	|	ДокументыОперацийПереходаНаЕНС.Организация В(&Организации)
	|	И ДокументыОперацийПереходаНаЕНС.ДатаПерехода = &ДатаПерехода"
	;

	Запрос.УстановитьПараметр("Организации",  Организации);
	Запрос.УстановитьПараметр("ДатаПерехода", ДатаПереходаПредыдущая);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФормуНаСервере(ОпределятьДату = Истина)
	
	ЗаполнитьСведенияОбОрганизации();
	Если ОпределятьДату Тогда
		ОпределитьДатуПерехода();
	КонецЕсли;
	ОбновитьПараметрыПерехода();
	ЗаполнитьДанныеОпераций();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
		Организации         = Новый ФиксированныйМассив(БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация));
		ЕстьОбособленныеПодразделения = Организации.Количество() > 1;
		ЭтоГоловнаяОрганизация = (ЕстьОбособленныеПодразделения
			И ГоловнаяОрганизация = СоответствиеОрганизаций[ПолеОрганизация].Организация)
			Или Не ЕстьОбособленныеПодразделения;
		ВключатьОбособленныеПодразделения = СоответствиеОрганизаций[ПолеОрганизация].ВключатьОбособленныеПодразделения
			Или Не ЕстьОбособленныеПодразделения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДатуПерехода()
	
	Объект.ДатаПерехода = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыОперацийПереходаНаЕНС.ДатаПерехода КАК ДатаПерехода
	|ИЗ
	|	РегистрСведений.ДокументыОперацийПереходаНаЕНС КАК ДокументыОперацийПереходаНаЕНС
	|ГДЕ
	|	ДокументыОперацийПереходаНаЕНС.Организация В (&Организации)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ДатаПерехода = Выборка.ДатаПерехода;
	КонецЕсли;
	ДатаПереходаПредыдущая = Объект.ДатаПерехода;
	
	ВводОстатков = ВводОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВводОстатков(Форма)
	
	ВводОстатков = ЗначениеЗаполнено(Форма.Объект.ДатаПерехода)
		И Форма.Объект.ДатаПерехода <> НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	Возврат ВводОстатков;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереносДатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеДаты();
	Иначе
		Объект.ДатаПерехода = ДатаПереходаПредыдущая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаИзмененияДокументовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияДокументовНаСервере()
	
	ПервоначальноеЗаполнениеТаблицыОпераций();
	ЗаполнитьДанныеОпераций();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДаты()
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийПереходаНаЕНС.ДокументОперации КАК ДокументОперации,
		|	ДокументыОперацийПереходаНаЕНС.ВидОперации КАК ВидОперации
		|ИЗ
		|	РегистрСведений.ДокументыОперацийПереходаНаЕНС КАК ДокументыОперацийПереходаНаЕНС
		|ГДЕ
		|	ДокументыОперацийПереходаНаЕНС.Организация В (&Организации)";
		
		Запрос.УстановитьПараметр("Организации",  Организации);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из Результат Цикл
			ДокументОперации = СтрокаТаблицы.ДокументОперации;
			ДокументОбъект = ДокументОперации.ПолучитьОбъект();
			Если ТипЗнч(ДокументОперации)= Тип("ДокументСсылка.ОперацияБух") Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ДокументОбъект.Дата = Объект.ДатаПерехода;
				Если ДокументОбъект.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяОрганизация Из Организации Цикл
			НаборЗаписей = РегистрыСведений.ДокументыОперацийПереходаНаЕНС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ТекущаяОрганизация);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.ДатаПерехода = Объект.ДатаПерехода;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		Для Каждого ТекущаяОрганизация Из Организации Цикл
			НаборЗаписей = РегистрыСведений.ВыполнениеОперацийПереходаНаЕНС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ТекущаяОрганизация);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.ДатаПерехода= Объект.ДатаПерехода;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		Объект.ДатаПерехода = ДатаПереходаПредыдущая;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось изменить дату
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			Обработки.ПомощникПереходаНаЕНС.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ПомощникПереходаНаЕНС,, 
			ТекстСообщения);
			
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	ДатаПереходаПредыдущая = Объект.ДатаПерехода;
	ВводОстатков = ВводОстатков(ЭтотОбъект);
	ПервоначальноеЗаполнениеТаблицыОпераций();
	ЗаполнитьФормуНаСервере(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обработки гиперссылок операций формы

&НаКлиенте
Функция СписокКомандДляОперации(СтрокаОперации)

	СписокКоманд = Новый СписокЗначений;
	
	// Общие команды
	Если СтрокаОперации.ТипОперации = ТипыОпераций.ОбработкаДанных Тогда
		
		ОперацияГоловнойОрганизации = ЗначениеЗаполнено(ПолеОрганизация)
			И ((ЕстьОбособленныеПодразделения
				И ВключатьОбособленныеПодразделения)
					Или Не ЕстьОбособленныеПодразделения);
					
		Если СтрокаОперации.ВидОперации = "ЗачетАвансов" И ЕстьОбособленныеПодразделения И Не ОперацияГоловнойОрганизации Тогда
			СписокКоманд.Добавить("ПерейтиПоОрганизацииВЦелом", НСтр("ru = 'Перейти к операциям перехода в целом по организации'"));
		ИначеЕсли СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено") Тогда
			СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"));
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
		ИначеЕсли СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено")
		 Или СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполняется") Тогда
			СписокКоманд.Добавить("ОткрытьДокумент", НСтр("ru = 'Открыть документ'"));
			СписокКоманд.Добавить("ВыполнитьПовторно", НСтр("ru = 'Выполнить операцию повторно'"));
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отменить выполнение'"));
		ИначеЕсли СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками") Тогда
			СписокКоманд.Добавить("ОткрытьДокумент", НСтр("ru = 'Открыть документ'"));
			СписокКоманд.Добавить("ВыполнитьПовторно", НСтр("ru = 'Выполнить операцию повторно'"));
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отменить выполнение'"));
		Иначе
			СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"));
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отменить выполнение'"));
		КонецЕсли;
		
	ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.Отчет Тогда
		
		СписокКоманд.Добавить("ОткрытьОтчетНалоги", НСтр("ru = 'Отчет по налогам'"));
		СписокКоманд.Добавить("ОткрытьОтчетВзносы", НСтр("ru = 'Отчет по взносам'"));
		
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Функция МожноВыполнитьОперацию(СтрокаОперации, Знач ПредставлениеОперации)

	СтрокиЗависимостей = ЗависимостьОпераций.НайтиСтроки(Новый Структура("ПроверяемаяОперация", СтрокаОперации.ИмяОперации));
	Если СтрокиЗависимостей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МожноВыполнитьОперацию = Истина;
	Для Каждого СтрокаЗависимости Из СтрокиЗависимостей Цикл
		СтрокиПроверяемыхОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", СтрокаЗависимости.ТребуемаяОперация));
		Если СтрокиПроверяемыхОпераций.Количество() <> 0 Тогда
			МожноВыполнитьОперацию = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МожноВыполнитьОперацию Тогда
		Возврат Истина;
	КонецЕсли;
	
	МожноВыполнитьОперацию = Истина;
	Для Каждого СтрокаЗависимости Из СтрокиЗависимостей Цикл
		Если Не МожноВыполнитьОперацию Тогда
			Прервать;
		КонецЕсли;
		СтрокиПроверяемыхОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", СтрокаЗависимости.ТребуемаяОперация));
		Для Каждого СтрокаПроверяемойОперации Из СтрокиПроверяемыхОпераций Цикл
			Если Не СтрокаПроверяемойОперации.Актуальность
				Или (СтрокаПроверяемойОперации.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено")
				И СтрокаПроверяемойОперации.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполняется")) Тогда
				МожноВыполнитьОперацию = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если МожноВыполнитьОперацию Тогда
		Возврат Истина;
	КонецЕсли;
		
	ТекстШаблон = Нстр("ru = 'Перед выполнением операции %1
						|требуется выполнить операцию %2!'");
						
	ЭлементТребуемойОперации       = Элементы.Найти(СтрокаПроверяемойОперации.ИмяОперации);
	ПредставлениеОперации          = """" + ПредставлениеОперации + """";
	ПредставлениеТребуемойОперации = """" + ЭлементТребуемойОперации.Заголовок + """";
	ТекстПредупреждения            = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстШаблон, ПредставлениеОперации, ПредставлениеТребуемойОперации);
	
	ПоказатьПредупреждение( , ТекстПредупреждения, 180);
	
	ТекущийЭлемент = ЭлементТребуемойОперации;
			
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияКнопкиМеню(Команда, Элемент, СтрокаОперации)
	
	Если Команда = "Выполнить" Тогда
		ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, Элемент.Заголовок);
	ИначеЕсли Команда = "ВыполнитьПовторно" Тогда
		ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, Элемент.Заголовок);
	ИначеЕсли Команда = "ОткрытьДокумент" Тогда
		ОткрытьДокументПоОперации(СтрокаОперации);
	ИначеЕсли Команда = "ОтметитьВыполненной" Тогда
		ОтметитьОперациюВыполненнойИПропустить(СтрокаОперации.ПолучитьИдентификатор());
	ИначеЕсли Команда = "ОтменитьВыполнение" Тогда
		ОтменитьОперацию(СтрокаОперации.ПолучитьИдентификатор());
	ИначеЕсли Команда = "ОткрытьОтчетНалоги" Тогда
		ОткрытьСформироватьОтчетНалоги(СтрокаОперации);
	ИначеЕсли Команда = "ОткрытьОтчетВзносы" Тогда
		ОткрытьСформироватьОтчетВзносы(СтрокаОперации);
	ИначеЕсли Команда = "ПерейтиПоОрганизацииВЦелом" Тогда
		ПерейтиПоОрганизацииВЦелом();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выполнения операций формы

&НаСервере
Процедура ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, ДокументыОперации = Неопределено,  ФиксироватьУстаревшие = Ложь, Отказ = Ложь)

	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ВидОперации",         СтрокаОперации.ВидОперации);
	ПараметрыОперации.Вставить("Организация",         Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода",        Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("Состояние",           СтрокаОперации.Состояние);
	
	Если ТипЗнч(ДокументыОперации) = Тип("Массив") Тогда
		ПараметрыОперации.Вставить("ДокументыОперации", ДокументыОперации);
	КонецЕсли;
	
	Обработки.ПомощникПереходаНаЕНС.ОтразитьВыполнениеОперацииПереходаНаЕНС(ПараметрыОперации, ФиксироватьУстаревшие, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОтметитьОперациюВыполненнойИПропустить(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, , Ложь);
	
	ЗаполнитьДанныеОпераций();
	ОбновитьСостояниеОперацийНаФорме();

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеОперацииПерехода(СтрокаОперации, ФиксироватьУстаревшие = Ложь, Отказ = Ложь)

	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ВидОперации",         СтрокаОперации.ВидОперации);
	ПараметрыОперации.Вставить("Организация",         Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода",        Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("Состояние",           СтрокаОперации.Состояние);
	
	ПараметрыОперации.Вставить("ОбрабатыватьДокументыОперации", Истина);
	ПараметрыОперации.Вставить("ОчиститьСсылкиНаДокументы", СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене);
	ПараметрыОперации.Вставить("СпособОбработкиДокументовОперации",
		СпособыОбработкиДокументов.Получить(СтрокаОперации.СпособОбработкиДокументовПриОтмене));
	
	Обработки.ПомощникПереходаНаЕНС.ОтменитьВыполнениеОперацииПереходаНаЕНС(ПараметрыОперации, ФиксироватьУстаревшие, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОтменитьОперацию(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	ОтменитьВыполнениеОперацииПерехода(СтрокаОперации, Истина);
	
	ЗаполнитьДанныеОпераций();
	ОбновитьСостояниеОперацийНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументПоОперации(СтрокаОперации)

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Организация",  Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("ВидОперации",  СтрокаОперации.ВидОперации);
	
	МассивДокументовПоОперации = ПолучитьДокументыПоОперации(ПараметрыОперации);
	
	Если МассивДокументовПоОперации.Количество() > 0 Тогда
		
		ДокументОперации = МассивДокументовПоОперации[0];
		ВидДокумента = "";
		Если СтрокаОперации.ИмяОперации = "ЗачетАвансов" Тогда
			ВидДокумента = "ОперацияБух";
		Иначе
			ВидДокумента = "ОперацияПоЕдиномуНалоговомуСчету";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаЗакрытияДокумента", ЭтотОбъект);
			ОтборДокумента = Новый Структура("Ключ", ДокументОперации);
			ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта",
				ОтборДокумента,
				ЭтаФорма,
				УникальныйИдентификатор,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСформироватьОтчетНалоги(СтрокаОперации)
	
	Если СтрокаОперации.ИмяОперации = "ОтчетПоНалогамВзносам" Тогда
		ОткрытьСформироватьОтчет(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСформироватьОтчетВзносы(СтрокаОперации)
	
	Если СтрокаОперации.ИмяОперации = "ОтчетПоНалогамВзносам" Тогда
		ОткрытьСформироватьОтчет(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСформироватьОтчет(Налоги)
	
	Если Налоги Тогда
		Счет = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоНалогам");
	Иначе
		Счет = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию");
	КонецЕсли;
	
	// Инициализируем параметры расшифровки
	НастройкиРасшифровки = Новый Структура();
	
	// Инициализируем пользовательские настройки
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПоказательБУ",         Истина);
	ДополнительныеСвойства.Вставить("РежимРасшифровки",     Истина);
	ДополнительныеСвойства.Вставить("Организация",          Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода",        НачалоДня(Объект.ДатаПерехода - 1));
	ДополнительныеСвойства.Вставить("КонецПериода",         КонецДня(Объект.ДатаПерехода - 1));
	ДополнительныеСвойства.Вставить("ПоСубсчетам",          Истина);
	ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов", Истина);
	ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", 
		ЕстьОбособленныеПодразделения И ВключатьОбособленныеПодразделения);
	
	// Инициализируем отборы
	ПользовательскиеОтборыДляСчета = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.АнализСчета.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоОрганизацииВЦелом()
	
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗначениеСоответствия Из СоответствиеОрганизаций Цикл
		Если ЗначениеСоответствия.Значение.Организация = ГоловнаяОрганизация Тогда
			Если ЗначениеСоответствия.Значение.ВключатьОбособленныеПодразделения Тогда
				ПолеОрганизация = ЗначениеСоответствия.Ключ;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПолеОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзмененииНаКлиенте()
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(
		Элементы.ПолеОрганизация,
		ПолеОрганизация,
		Объект.Организация,
		Ложь);
		
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, ПредставлениеОперации)
	
	ОчиститьСообщения();
	
	Если Не МожноВыполнитьОперацию(СтрокаОперации, ПредставлениеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьОперациюОбработкаДанныхНаСервере(СтрокаОперации.ПолучитьИдентификатор());

	Если НЕ Результат.ЗаданиеВыполнено Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
			
			ФормаДлительнойОперации.Заголовок = НСтр("ru = 'Переход на ЕНС'");
			ШаблонИнформации = НСтр("ru = 'Выполняется операция ""%1"".
									|Пожалуйста, подождите...'");
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, ПредставлениеОперации);
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстИнформации;
			
		КонецЕсли;
	Иначе
		ЗагрузитьПодготовленныеДанныеНаКлиенте(Результат.СтруктураДанныхКлиента);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюОбработкаДанныхНаСервере(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИмяДействия = СтрокаОперации.ДействиеОперации;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	СтруктураПараметров.Вставить("ВидОперации",  СтрокаОперации.ВидОперации);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		Выполнить(ИмяДействия+"(СтруктураПараметров, АдресХранилища)");
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		ШаблонФоновогоЗадания = НСтр("ru = 'Выполнение операции перехода на ЕНС: %1'");
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФоновогоЗадания, ИмяДействия);
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ИмяДействия,
			СтруктураПараметров,
			НаименованиеФоновогоЗадания);
			
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивСообщений") Тогда
		Для каждого Сообщение Из СтруктураДанных.МассивСообщений Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("УспешноВыполнено") Тогда
		
		СтрокаОперации = ТаблицаОпераций.НайтиСтроки(Новый Структура("ВидОперации", СтруктураДанных.ВыполняемаяОперация))[0];
		
		Если СтруктураДанных.УспешноВыполнено Тогда
			Если СтруктураДанных.Свойство("ТребуетсяКонтроль") Тогда
				Если Не СтруктураДанных.ТребуетсяКонтроль Тогда
					СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
				Иначе
					СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками");
				КонецЕсли;
			Иначе
				СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
			КонецЕсли;
			
			ДокументыОперации = ?(СтруктураДанных.Свойство("ДокументыОперации"), СтруктураДанных.ДокументыОперации, Неопределено);
			ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, ДокументыОперации, Истина);
			ЗаполнитьДанныеОпераций();
			
		КонецЕсли;
		
		ОбновитьСостояниеОперацийНаФорме();
		
		Если СтруктураДанных.Свойство("МассивСообщений")
			И СтруктураДанных.МассивСообщений.Количество() > 0 Тогда
			
			СтруктураДанныхНаКлиенте.Вставить("МассивСообщений", СтруктураДанных.МассивСообщений);
			
		ИначеЕсли НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если ФоновоеЗадание <> Неопределено Тогда
				МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
				Если МассивСообщений <> Неопределено Тогда
					СтруктураДанныхНаКлиенте.Вставить("МассивСообщений", МассивСообщений);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗагрузитьПодготовленныеДанныеНаКлиенте(ЗагрузитьПодготовленныеДанные());
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		Иначе
			// Задание отменено
			ИдентификаторЗадания = Неопределено;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюЗавершение(Команда, ДополнительныеПараметры) Экспорт
	
	Если Не Команда = Неопределено Тогда
		ОбработкаНажатияКнопкиМеню(Команда.Значение, ДополнительныеПараметры.Элемент, ДополнительныеПараметры.СтрокаОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
