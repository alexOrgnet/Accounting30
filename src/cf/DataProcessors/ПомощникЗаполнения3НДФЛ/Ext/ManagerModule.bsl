#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Срок",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплаты(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает дату, с которой используется помощник заполнения 3-НДФЛ.
// Функция используется, чтобы открывать помощник заполнения из списка задач.
//
// Возвращаемое значение:
//    Дата - Дата, с которой применяется помощник заполнения 3-НДФЛ
//
Функция ДатаНачалаПрименения() Экспорт
	
	// Помощник можно использовать для декларации за 2017 год и позднее.
	Возврат '20170101';
	
КонецФункции

// Функция проверяет, поддерживает ли Помощник заполнение выбранной формы декларации.
//
// Параметры:
//   ВыбраннаяФорма - Строка - форма декларации 3-НДФЛ
//
// Возвращаемое значение:
//    Булево - Истина, если поддерживается заполнение выбранной формы отчета
//
Функция ФормаЗаполняетсяПомощником(ВыбраннаяФорма) Экспорт
	
	ПоддерживаемыеФормы = Новый Массив;
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2018кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2019кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2020кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2021кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2022кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2023кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2024кв1"));
	
	Возврат (ПоддерживаемыеФормы.Найти(НРег(СокрЛП(ВыбраннаяФорма))) <> Неопределено);
	
КонецФункции

// Возвращает список документов на уплату НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ПериодУплаты - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплаты(Организация, ПериодУплаты, ПравилоУплаты) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.Правило = ПравилоУплаты;
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ФизЛицо);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоГода(ПериодУплаты);
	КонецПериода  = КонецГода(ПериодУплаты);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

// Возвращает ссылку на декларацию 3-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию3НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет3НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Возвращает ссылку на декларацию 4-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию4НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет4НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Рассчитывает налог и возвращает готовые данные для заполнения декларации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   Период - Дата - период расчета налога и заполнения декларации.
//   ДанныеПомощникаЗаполнения - Структура - см. НовыйДанныеПомощникаЗаполнения
//   ВыбраннаяФорма3НДФЛ - Строка - заполняемая форма декларации 3-НДФЛ.
//
// Возвращаемое значение:
//   Структура - см. НовыйРезультатРасчетаНалога
//
Функция РасчетНалога(Организация, Период, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ) Экспорт
	
	Возврат РассчитатьНалог(Организация, Период, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ);
	
КонецФункции

// Процедура заполняет декларацию 3-НДФЛ.
//
// Параметры:
//   СтруктураПараметров - Структура - См. НовыеПараметрыЗаполненияДекларации()
//   АдресРезультата - УникальныйИдентификатор
//
Процедура ЗаполнитьДекларацию(СтруктураПараметров, АдресРезультата) Экспорт
	
	Результат = СоздатьЗаполнитьДекларацию(СтруктураПараметров);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Процедура заполняет доходы и расходы от предпринимательской деятельности,
// уплаченные авансовые платежи по НДФЛ и уплаченный торговый сбор.
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура с ключами:
//      * Организация - СправочникСсылка.Организации
//      * НачалоПериода - Дата
//      * КонецПериод - Дата
//      * ВыбраннаяФорма - Строка
//   АдресРезультата - УникальныйИдентификатор
//
Процедура ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельностиВФоне(ПараметрыЗаполнения, АдресРезультата) Экспорт
	
	РезультатВыполнения = ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельности(ПараметрыЗаполнения);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
	
КонецПроцедуры

// Выполняет формирование декларации 3-НДФЛ за выбранный период
//
// Параметры:
//   ПараметрыФормирования - Структура - см. ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета()
//
// Возвращаемое значение:
//   Структура - ДокументСсылка.РегламентированныйОтчет
//
Функция СформироватьАвтоматическиРеглОтчет(ПараметрыФормирования) Экспорт
	
	Если ФормаЗаполняетсяПомощником(ПараметрыФормирования.ИмяФормыОтчета) Тогда
		
		ПараметрыВычисления = Новый Структура;
		ПараметрыВычисления.Вставить("Организация",    ПараметрыФормирования.Организация);
		ПараметрыВычисления.Вставить("НачалоПериода",  ПараметрыФормирования.ДатаНачала);
		ПараметрыВычисления.Вставить("КонецПериода",   КонецДня(ПараметрыФормирования.ДатаОкончания));
		ПараметрыВычисления.Вставить("ВыбраннаяФорма", ПараметрыФормирования.ИмяФормыОтчета);
		
		ДанныеОДоходах = ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельности(ПараметрыВычисления);
		ДоходыВычеты = ЗаполнитьТаблицуДоходыВычетыПоУмолчанию(ДанныеОДоходах, ПараметрыФормирования.ИмяФормыОтчета);
		
		ДанныеПомощникаЗаполнения = НовыйДанныеПомощникаЗаполнения();
		ДанныеПомощникаЗаполнения.ДоходыВычеты = ДоходыВычеты;
		ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП = ДанныеОДоходах.АвансовыеПлатежи;
		
		РасчетНалога = РассчитатьНалог(
			ПараметрыФормирования.Организация,
			ПараметрыФормирования.ДатаОкончания,
			ДанныеПомощникаЗаполнения,
			ПараметрыФормирования.ИмяФормыОтчета);
		
		СтруктураПараметров = НовыеПараметрыЗаполненияДекларации();
		СтруктураПараметров.Период = ПараметрыФормирования.ДатаОкончания;
		СтруктураПараметров.Организация = ПараметрыФормирования.Организация;
		СтруктураПараметров.СчетОрганизации = БанковскийСчетОрганизации(ПараметрыФормирования.Организация);
		СтруктураПараметров.ТаблицаДанныхЗаполнения = РасчетНалога.ТаблицаДанныхЗаполнения;
		СтруктураПараметров.ДанныеПомощникаЗаполнения = ДанныеПомощникаЗаполнения;
		СтруктураПараметров.Декларация3НДФЛВыбраннаяФорма = ПараметрыФормирования.ИмяФормыОтчета;
		
		Декларация3НДФЛ = СоздатьЗаполнитьДекларацию(СтруктураПараметров).Декларация3НДФЛ;
		
	КонецЕсли;
	
	Возврат Декларация3НДФЛ;
	
КонецФункции

// Возвращает признак необходимости заполнения исчисленных авансовых платежей в декларации 3-НДФЛ.
//
// Параметры:
//  ВыбраннаяФорма3НДФЛ - Строка - идентификатор заполняемой формы отчета
//
// Возвращаемое значение:
//  Булево - Истина, если в декларации есть листы для заполнения исчисленных авансовых платежей. 
//           Ложь в противном случае.
//
Функция ЗаполнятьИсчисленныеАвансовыеПлатежи(ВыбраннаяФорма3НДФЛ) Экспорт
	
	ТаблицаФормОтчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ТаблицаФормОтчета();
	
	РеквизитыФормы = ТаблицаФормОтчетов.Найти(ВыбраннаяФорма3НДФЛ, "ФормаОтчета");
	Если РеквизитыФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РеквизитыФормы.ДатаНачалоДействия >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ();
	
КонецФункции

// Возвращает массив видов налогов, используемых на указанный период
//
// Параметры:
//   Период - Дата - Дата, для которой определяются виды налогов
//
// Возвращаемое значение:
//   Массив (значение - ПеречислениеСсылка.ВидыНалогов)
//
Функция ПоддерживаемыеВидыНалогов(Период) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ИП));
	
	Если Период >= УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы() Тогда
		Результат.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
			Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ставку НДФЛ по умолчанию
//
// Параметры:
//   ВыбраннаяФорма - Строка - имя регламентированной формы декларации 3-НДФЛ
//   Ставка         - Строка - идентификатор ставки для выбранной формы
//
// Возвращаемое значение:
//   Число - Налоговая ставка НДФЛ
//
Функция СтавкаНалога(ВыбраннаяФорма, Ставка = "ПоУмолчанию") Экспорт
	
	НалоговыеСтавки = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма);
	СтавкаНалога = Неопределено;
	ВычетыРаспределяютсяПоДоходам = ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма);
	
	Если ТипЗнч(НалоговыеСтавки) = Тип("Структура") И НалоговыеСтавки.Свойство("ПоУмолчанию") Тогда
		СтавкаНалога = НалоговыеСтавки.ПоУмолчанию;
	ИначеЕсли ВычетыРаспределяютсяПоДоходам Тогда
		
		ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма);
		
		СтавкаНалогаСтрокой = "";
		Если Ставка = "ПоУмолчанию" Тогда
			СтавкаНалогаСтрокой = ПомощникЗаполнения3НДФЛКлиентСервер.ИдентификаторСтавкиПрогрессивнойШкалы();
		ИначеЕсли Ставка = "Дивиденды" Тогда
			СтавкаНалогаСтрокой = НалоговыеСтавки.Получить(ВидыДоходов.Дивиденды);
		ИначеЕсли ЗначениеЗаполнено(Ставка) Тогда
			СтавкаНалогаСтрокой = НалоговыеСтавки.Получить(Ставка);
		КонецЕсли;
		
		СтавкаНалога = ЗначениеСтавкиНалога(СтавкаНалогаСтрокой);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтавкаНалога) Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось определить ставку НДФЛ по умолчанию для формы %1'");
		ВызватьИсключение СтрШаблон(ШаблонОшибки, ВыбраннаяФорма);
	КонецЕсли;
	
	Возврат СтавкаНалога;
	
КонецФункции

// Возвращает соответствие источников доходов кодам видов доходов согласно Декларации 3-НДФЛ
//
// Параметры:
//   ВыбраннаяФорма - Строка - Имя регламентированной формы декларации 3-НДФЛ
//
// Возвращаемое значение:
//   Соответствие - Ключ может быть источник дохода, вид вычета
//
Функция СоответствиеДоходовИсточникам(ВыбраннаяФорма) Экспорт
	
	Результат = Новый Соответствие;
	ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма);
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность, ВидыДоходов.ПредпринимательскаяДеятельность);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества, ВидыДоходов.ПродажаИмущества);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости, ВидыДоходов.ПродажаИмущества);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду, ВидыДоходов.СдачаИмуществаВАренду);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.Подарок, ВидыДоходов.ПодарокСтраховаяВыплата);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ, ВидыДоходов.ИнойДоходПоПрогрессивнойШкале);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды, ВидыДоходов.Дивиденды);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора, ВидыДоходов.ИнойДоходПоПрогрессивнойШкале);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх, ВидыДоходов.ВыигрышиВЛотереяхАзартныхИграх);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда, ВидыДоходов.ИнойДоходПоПрогрессивнойШкале);			
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, ВидыДоходов.ОперацииСЦеннымиБумагами);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ, ВидыДоходов.БанковскиеПроценты_ЗаПределамиРФ);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ЦифровойАктив, ВидыДоходов.ОперацииСКриптовалютой);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК, ВидыДоходов.ПрибыльКИК);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ФиксированнаяПрибыльКИК, ВидыДоходов.ФиксированнаяПрибыльКИК);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК_ИСБОЮЛ, ВидыДоходов.РаспределениеПрибылиИностраннойСтруктуры);
		
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами, ВидыДоходов.ОперацииСЦеннымиБумагами);
		
		КодыДоходовЦенныеБумаги = КодыВидовДоходовЦенныеБумаги();
		ДобавитьСоответствиеКодовДоходов(Результат, КодыДоходовЦенныеБумаги.Вклады, ВидыДоходов.БанковскиеПроценты);
		ДобавитьСоответствиеКодовДоходов(Результат, КодыДоходовЦенныеБумаги.Облигации, ВидыДоходов.ПроцентПоОблигациям);
		
	Иначе
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.Подарок, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды, ВидыДоходов.Дивиденды);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда, ВидыДоходов.Иное);			
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.Социальный, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни, ВидыДоходов.Иное);			
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.Инвестиционный, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости, ВидыДоходов.Иное);
		Результат.Вставить(Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами, ВидыДоходов.Иное);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельности(ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = КонецДня(ПараметрыЗаполнения.КонецПериода);
	УплачиваетсяТорговыйСбор = ТорговыйСбор.УплачиваетсяТорговыйСбор(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.КонецПериода);
	РезультатВыполнения = НовыйСтруктураТаблицыДоходыИВычеты();
	
	ЗаполнятьАвансовыеПлатежиПоквартально = КонецПериода >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ();
	Если Не ЗаполнятьАвансовыеПлатежиПоквартально Тогда
		// Нужны только итоговые суммы
		ДоходыРасходыПредпринимателя = ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода);
		
		РезультатВыполнения.ДоходыПредпринимателя = ДоходыРасходыПредпринимателя;
		РезультатВыполнения.АвансовыеПлатежи = АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода);
		Если УплачиваетсяТорговыйСбор Тогда
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(4);
			РезультатВыполнения["ТорговыйСбор" + ИмяПериода] = 
				ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода);
		КонецЕсли;
	Иначе
		// Нужны суммы накопительным итогом
		МесяцевВКвартале = 3;
		Для НомерПериода = 1 По 4 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			КонецПериода = НачалоМесяца(ДобавитьМесяц(НачалоПериода, МесяцевВКвартале * НомерПериода)) - 1;
			ДоходыРасходыПредпринимателя = ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода);
			
			РезультатВыполнения["ДоходыПредпринимателя" + ИмяПериода] = ДоходыРасходыПредпринимателя;
			РезультатВыполнения["АвансовыеПлатежи" + ИмяПериода] = 
				АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода);
			Если УплачиваетсяТорговыйСбор Тогда
				РезультатВыполнения["ТорговыйСбор" + ИмяПериода] = 
					ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Стандартные вычеты могут заполняться сразу в случае, когда доходы и вычеты указывают на одном шаге в помощнике
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ПараметрыЗаполнения.ВыбраннаяФорма) Тогда
		СтандартныеВычеты = ДанныеСтандартныхВычетов(ПараметрыЗаполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтандартныеВычеты) Тогда
		РезультатВыполнения.СтандартныйВычет = СтандартныеВычеты;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Рассчитывает налог и возвращает готовые данные для заполнения декларации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   Период - Дата - период расчета налога и заполнения декларации.
//   ДанныеПомощникаЗаполнения - Структура - см. НовыйДанныеПомощникаЗаполнения
//   ВыбраннаяФорма3НДФЛ - Строка - заполняемая форма декларации 3-НДФЛ.
//
// Возвращаемое значение:
//   Структура - см. НовыйРезультатРасчетаНалога
//
Функция РассчитатьНалог(Организация, Период, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ДоходыВычеты = ДанныеПомощникаЗаполнения.ДоходыВычеты;
	
	Если Не ФормаЗаполняетсяПомощником(ВыбраннаяФорма3НДФЛ) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
			Формат(Период, "ДФ=yyyy"));
	КонецЕсли;
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(ВыбраннаяФорма3НДФЛ);
	
	// Для налоговой базы, рассчитываемой по прогрессивной шкале устанавливаем ставку по умолчанию.
	// Расчет и вычисление ставки осуществляется при формировании таблицы налоговых баз для Раздела 2
	СтавкаПоУмолчанию = СтавкаНалога(ВыбраннаяФорма3НДФЛ);
	СтавкаДивиденды = СтавкаНалога(ВыбраннаяФорма3НДФЛ, "Дивиденды");
	
	НеоблагаемыеСуммыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.НеоблагаемыеСуммыДоходов(ВыбраннаяФорма3НДФЛ);
	
	НеоблагаемыеСуммыКУменьшению = ОбщегоНазначения.СкопироватьРекурсивно(НеоблагаемыеСуммыДоходов);
	
	КодыВидовПредпринимательскойДеятельности =
		Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма3НДФЛ);
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	ОКТМОналогоплательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО");
	
	ПоказателиИмущественногоВычета = ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ);
	КодыИсточниковДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.КодыИсточниковДоходов(ВыбраннаяФорма3НДФЛ);
	
	ТаблицаДанныхЗаполнения = Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения(ВыбраннаяФорма3НДФЛ);
	
	// Добавляем служебную колонку
	МассивТиповВида = Новый Массив;
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц"));
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	
	ВидДоходаВычета = ТаблицаДанныхЗаполнения.Колонки.Добавить("Вид", Новый ОписаниеТипов(МассивТиповВида));
	
	СоответствиеДоходовВычетов = СоответствиеДоходовИсточникам(ВыбраннаяФорма3НДФЛ);
	ДополнительныеДанные = ДополнительныеПараметрыДоходовВычетов(СтавкаПоУмолчанию, СоответствиеДоходовВычетов);
	РасширенныйСписокДоходов = ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ);
	
	Для Каждого СтрокаТаблицы Из ДоходыВычеты Цикл
		
		Если СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = ОКТМОналогоплательщика;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПредпринимательскаяДеятельность(СтрокаТаблицы.СтруктураДоходовВычетов, КодыВидовПредпринимательскойДеятельности.ПредпринимательскаяДеятельность);
			НоваяСтрока.СтруктураДанных.Вставить("КлючСтроки", СтрокаТаблицы.КлючСтроки);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества
			Или СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости
			Или СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ЦифровойАктив Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПродажаИмущества(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, Период);
			НоваяСтрока.ОКТМО = НоваяСтрока.СтруктураДанных.ОКТМОИсточникаДоходаРФ;
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			ДобавитьДанныеЗаполненияИмущественногоВычета(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов,
				НоваяСтрока.ВидДохода,
				НоваяСтрока.НалоговаяСтавка,
				ПоказателиИмущественногоВычета,
				КодыИсточниковДоходов);
			
			ДобавитьДанныеКадастровойИнформации(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СдачаИмуществаВАренду(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_Подарок(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			// Скорректируем сумму дохода и налога с учетом необлагаемых сумм
			Если НеоблагаемыеСуммыКУменьшению.Подарок > 0
				И ЗначениеЗаполнено(НоваяСтрока.СтруктураДанных.ИННИсточникаДоходаРФ) Тогда
				
				СуммаКВычету = Мин(НоваяСтрока.СуммаОблагаемогоДохода, НеоблагаемыеСуммыКУменьшению.Подарок);
				НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СуммаОблагаемогоДохода - СуммаКВычету;
				НалогКВычету = СуммаКВычету * НоваяСтрока.НалоговаяСтавка / 100;
				НоваяСтрока.СуммаНалогаИсчисленная = Макс(0, Окр(НоваяСтрока.СуммаНалогаИсчисленная - НалогКВычету, 0));
				НеоблагаемыеСуммыКУменьшению.Подарок = НеоблагаемыеСуммыКУменьшению.Подарок - СуммаКВычету;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			Если РасширенныйСписокДоходов Тогда
				// Доход может иметь разные коды видов доходов - вид дохода выбирается вручную в форме
				НоваяСтрока.ВидДохода = СтрокаТаблицы.СтруктураДоходовВычетов.КодВидаДохода;
			Иначе
				НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			КонецЕсли;
			НоваяСтрока.НалоговаяСтавка = СтрокаТаблицы.СтруктураДоходовВычетов.СтавкаНалога;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаДивиденды;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(
				СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			Если РасширенныйСписокДоходов Тогда
				// Доход может иметь разные коды видов доходов - вид дохода выбирается вручную в форме
				НоваяСтрока.ВидДохода = СтрокаТаблицы.СтруктураДоходовВычетов.КодВидаДохода;
			Иначе
				НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			КонецЕсли;
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(
				СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			// Скорректируем сумму дохода и налога с учетом необлагаемых сумм
			Если НеоблагаемыеСуммыКУменьшению.Лотереи > 0 Тогда
				СуммаКВычету = Мин(НоваяСтрока.СуммаОблагаемогоДохода, НеоблагаемыеСуммыКУменьшению.Лотереи);
				НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СуммаОблагаемогоДохода - СуммаКВычету;
				НалогКВычету = СуммаКВычету * НоваяСтрока.НалоговаяСтавка / 100;
				НоваяСтрока.СуммаНалогаИсчисленная = Макс(0, Окр(НоваяСтрока.СуммаНалогаИсчисленная - НалогКВычету, 0));
				НеоблагаемыеСуммыКУменьшению.Лотереи = НеоблагаемыеСуммыКУменьшению.Лотереи - СуммаКВычету;
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОплатаТруда(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
			
			ОперацииСЦеннымиБумагамиРазделитьПоВидамДоходов(ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ОКТМОналогоплательщика,
				СоответствиеДоходовВычетов,
				ВыбраннаяФорма3НДФЛ);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			Если РасширенныйСписокДоходов Тогда
				// Доход за пределами РФ может иметь разные коды видов доходов - вид дохода выбирается вручную в форме
				НоваяСтрока.ВидДохода = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.КодВидаДохода;
			Иначе
				НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			КонецЕсли;
			НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ДоходЗаПределамиРФ(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаРубДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаПодлежащаяЗачетуВРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = СоответствиеДоходовВычетов.Получить(СтрокаТаблицы.Вид);
			НоваяСтрока.НалоговаяСтавка = СтрокаТаблицы.СтруктураДоходовВычетов.СтавкаНалога;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ДоходЗаПределамиРФ(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации,
				НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаРубДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаПодлежащаяЗачетуВРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_СтандартныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов, ВыбраннаяФорма3НДФЛ);
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_ВычетНаДетей(СтрокаТаблицы.СтруктураДоходовВычетов);
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_СоциальныеВычеты(СтрокаТаблицы.СтруктураДоходовВычетов);
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(СтрокаТаблицы.СтруктураДоходовВычетов);
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_ИнвестиционныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов);
			НоваяСтрока = ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.ИнвестиционныйВычетКВосстановлению;
			НоваяСтрока.СуммаНалогаИсчисленная = СуммаНалогаИсчисленная(
				НоваяСтрока.СтруктураДанных.ИнвестиционныйВычетКВосстановлению, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации,
				СтавкаПоУмолчанию);
			
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами Тогда
			
			ДополнительныеДанные.СтруктураДанных = ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации,
				СтавкаПоУмолчанию);
				
			ЗаполнитьСтрокуДоходаВычетаПередРасчетом(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы,
				ДополнительныеДанные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьДанныеСтандартныхВычетовВРегистр(ДоходыВычеты, Организация, Период, ВыбраннаяФорма3НДФЛ);
	
	ПараметрыИтогов = НовыйПараметрыИтоговыхПоказателейИП();
	ПараметрыИтогов.ДанныеПомощникаЗаполнения = ДанныеПомощникаЗаполнения;
	ПараметрыИтогов.ТаблицаДанныхЗаполнения = ТаблицаДанныхЗаполнения;
	ПараметрыИтогов.ДоходыВычеты = ДоходыВычеты;
	ПараметрыИтогов.ВыбраннаяФорма3НДФЛ = ВыбраннаяФорма3НДФЛ;
	ПараметрыИтогов.Организация = Организация;
	ПараметрыИтогов.Период = Период;
	
	ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ПараметрыИтогов);
	ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения,
		НеоблагаемыеСуммыДоходов,
		ВыбраннаяФорма3НДФЛ);
	
	ТаблицаНалоговойБазы = ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	СведенияОСуммахНалога = ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ОКТМОналогоплательщика, ВыбраннаяФорма3НДФЛ);
	
	// Объединяем таблицы.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНалоговойБазы, ТаблицаДанныхЗаполнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОСуммахНалога, ТаблицаДанныхЗаполнения);
	
	// ИП, пострадавшие от коронавируса, освобождены от уплаты НДФЛ за 2 квартал 2020 года.
	// При наличии налога от предпринимательской деятельности, в помощнике необходимо уменьшить налог к уплате
	// на сумму освобождения, как будто ИП уже заплатил эту часть.
	// При этом в декларации сумму налога нужно показать полностью, по исчисленным авансовым платежам,
	// как будто ИП не платил аванс за 2 квартал.
	ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога = 0;
	ДанныеПомощникаЗаполнения.ПрименяетсяОсвобождениеОтНалога = Ложь;
	
	Если ЕстьДоходыОтПредпринимательскойДеятельности(ТаблицаДанныхЗаполнения)
		И ВозможноОсвобождениеОтНалога(Период)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		
		// Ищем итоговую строку с авансовыми платежами.
		Для Каждого СтрокаСведений Из СведенияОСуммахНалога Цикл
			СуммаАвансовогоПлатежа = Неопределено;
			Если СтрокаСведений.СтруктураДанных.Свойство("СуммаНалогаИПКУплатеПолугодие", СуммаАвансовогоПлатежа) Тогда
				ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога =
					ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога + СуммаАвансовогоПлатежа;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НалогКВозврату = 0;
	НалогКУплате = 0;
	
	ВидДоходаПоУмолчанию = КодВидаДохода(ВыбраннаяФорма3НДФЛ);
	
	// Рассчитываем налог к уплате с учетом возможного освобождения от уплаты налога.
	Для Каждого СтрокаНалоговойБазы Из ТаблицаНалоговойБазы Цикл
		
		Если СтрокаНалоговойБазы.НалоговаяСтавка = СтавкаПоУмолчанию
			И СтрокаНалоговойБазы.ВидДохода = ВидДоходаПоУмолчанию Тогда
			
			ДопустимоеОсвобождение = Мин(СтрокаНалоговойБазы.СуммаНалогаПодлежащаяУплате, ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога);
			
			НалогКУплате = НалогКУплате
				+ Макс(0, СтрокаНалоговойБазы.СуммаНалогаПодлежащаяУплате - ДопустимоеОсвобождение);
			
			НалогКВозврату = НалогКВозврату + СтрокаНалоговойБазы.СуммаНалогаПодлежащаяВозврату;
			
			ДанныеПомощникаЗаполнения.ПрименяетсяОсвобождениеОтНалога =
				
				НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация)
				И ДопустимоеОсвобождение > 0;
			
		ИначеЕсли СтрокаНалоговойБазы.СтруктураДанных.Свойство("СуммаНалогаПодлежащаяУплате")
			И СтрокаНалоговойБазы.СтруктураДанных.Свойство("СуммаНалогаПодлежащаяВозврату") Тогда
			
			НалогКУплате = НалогКУплате + СтрокаНалоговойБазы.СтруктураДанных.СуммаНалогаПодлежащаяУплате
				- СтрокаНалоговойБазы.СтруктураДанных.СуммаНалогаПодлежащаяВозврату;
			
			НалогКВозврату = НалогКВозврату + СтрокаНалоговойБазы.СтруктураДанных.СуммаНалогаПодлежащаяВозврату;
			
		Иначе
			
			НалогКУплате = НалогКУплате + СтрокаНалоговойБазы.СуммаНалогаПодлежащаяУплате;
			НалогКВозврату = НалогКВозврату + СтрокаНалоговойБазы.СуммаНалогаПодлежащаяВозврату;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем служебные колонки.
	ТаблицаДанныхЗаполнения.Колонки.Удалить(ВидДоходаВычета);
	
	// Дополним данные помощника рассчитанными налогами.
	// Это нужно, чтобы сразу сохранить правильные данные в отчете и не вызывать повторное сохранение.
	ДанныеПомощникаЗаполнения.НалогКУплате   = НалогКУплате;
	ДанныеПомощникаЗаполнения.НалогКВозврату = НалогКВозврату;
	
	ДоработатьТаблицуДанныхЗаполненияПередВыводом(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ВыбраннаяФорма3НДФЛ);
	Результат = НовыйРезультатРасчетаНалога(ВыбраннаяФорма3НДФЛ);
	Результат.ТаблицаДанныхЗаполнения = ТаблицаДанныхЗаполнения;
	Результат.НалогКУплате    = НалогКУплате;
	Результат.НалогКВозврату  = НалогКВозврату;
	Результат.ЗаполнятьЗаявлениеНаВозвратНалога =
		Отчеты.РегламентированныйОтчет3НДФЛ.СредиПриложенийЕстьЗаявлениеНаВозвратНалога(ВыбраннаяФорма3НДФЛ);
	Результат.ПрименяетсяОсвобождениеОтНалога = ДанныеПомощникаЗаполнения.ПрименяетсяОсвобождениеОтНалога;
	Результат.ОсвобождениеОтНалога = ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога;
	
	ЗаполнитьПоясненияРасчетаНалогаВДекларации(
		Результат.ПоясненияРасчетаНалога, ТаблицаНалоговойБазы, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ);
	
	Возврат Результат;
	
КонецФункции

Функция ДополнительныеПараметрыДоходовВычетов(НалоговаяСтавка, СоответствиеДоходовВычетов)
	
	Результат = Новый Структура;
	Результат.Вставить("СтавкаПоУмолчанию", НалоговаяСтавка);
	Результат.Вставить("СоответствиеДоходовВычетов", СоответствиеДоходовВычетов); // См. СоответствиеДоходовИсточникам()
	Результат.Вставить("СтруктураДанных", Новый Структура); // Зависит от конкретного вида дохода
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДоходПоОперациямСЦеннымиБумагами(Вид, ОКТМО, НалоговаяСтавка)
	
	Результат = Новый Структура;
	Результат.Вставить("ВидДохода");
	Результат.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	Результат.Вставить("Вид", Вид);
	Результат.Вставить("ОКТМО", ОКТМО);
	Результат.Вставить("ДанныеДекларации");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДоходПоОперациямСЦеннымиБумагами(Результат, ДанныеЗаполнения)
	
	НоваяСтрока = Результат.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОперацииСЦеннымиБумагами(
		ДанныеЗаполнения.ДанныеДекларации,
		ДанныеЗаполнения.НалоговаяСтавка);
	НоваяСтрока.СуммаОблагаемогоДохода = НоваяСтрока.СтруктураДанных.СуммаОблагаемогоДоходаРФ;
	НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
	НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;

КонецПроцедуры

Процедура ОперацииСЦеннымиБумагамиРазделитьПоВидамДоходов(Результат, ДанныеЗаполнения, ОКТМО, СоответствиеДоходовВычетов, ВыбраннаяФорма)

	Доходы = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения.СтруктураДоходовВычетов.ДанныеДекларации.Доходы);
	
	// Для налоговой базы, рассчитываемой по прогрессивной шкале устанавливаем ставку по умолчанию.
	// Расчет и вычисление ставки осуществляется при формировании таблицы налоговых баз для Раздела 2
	Ставка = СтавкаНалога(ВыбраннаяФорма);
	РасширенныйСписокДоходов = ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма);
	
	Если Доходы.Количество() = 1 Или Не РасширенныйСписокДоходов Тогда
		
		ПараметрыЗаполнения = НовыйДоходПоОперациямСЦеннымиБумагами(ДанныеЗаполнения.Вид, ОКТМО, Ставка);
		
		Если РасширенныйСписокДоходов И Доходы.Количество() = 1 Тогда
			// Вид дохода зависит от конкретного кода операции с ценными бумагами
			ПараметрыЗаполнения.ВидДохода = СоответствиеДоходовВычетов.Получить(Доходы[0].ВидДохода);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ВидДохода) Тогда
			ПараметрыЗаполнения.ВидДохода = СоответствиеДоходовВычетов.Получить(ДанныеЗаполнения.Вид);
		КонецЕсли;
		
		ПараметрыЗаполнения.ДанныеДекларации = ДанныеЗаполнения.СтруктураДоходовВычетов.ДанныеДекларации;
		ДобавитьДоходПоОперациямСЦеннымиБумагами(Результат, ПараметрыЗаполнения);
		
	Иначе
		
		// Разделим доходы на разные виды доходов согласно декларации 3-НДФЛ:
		// 03 - проценты по облигациям 
		// 04 - купонный доход по облигациям
		// 14 - операции с ценными бумагами
		
		КодПоУмолчанию = СоответствиеДоходовВычетов.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
		
		ДанныеПоПрочимОперациям = Новый Соответствие;
		
		Для Каждого ТекущаяСтрока Из Доходы Цикл
			
			Если ТекущаяСтрока.ВидДоходаДекларация <> КодПоУмолчанию Тогда
				
				ДанныеДохода = ДанныеПоПрочимОперациям.Получить(ТекущаяСтрока.ВидДоходаДекларация);
				Если ДанныеДохода = Неопределено Тогда
					ДанныеДохода = НовыйДанныеНалоговойБазы();
				КонецЕсли;
				
				ДанныеДохода.Данные.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(ТекущаяСтрока));
				ДанныеДохода.СуммаДохода = ДанныеДохода.СуммаДохода + ТекущаяСтрока.СуммаДохода;
				ДанныеДохода.НалоговаяБаза = ДанныеДохода.НалоговаяБаза + (ТекущаяСтрока.СуммаДохода - ТекущаяСтрока.СуммаВычета);
				
				ДанныеПоПрочимОперациям.Вставить(ТекущаяСтрока.ВидДоходаДекларация, ДанныеДохода);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеДекларацииПоУмолчанию = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения.СтруктураДоходовВычетов.ДанныеДекларации);
		
		Для Каждого ТекущийДоход Из ДанныеПоПрочимОперациям Цикл
			
			ПараметрыЗаполнения = НовыйДоходПоОперациямСЦеннымиБумагами(ДанныеЗаполнения.Вид, ОКТМО, Ставка);
			ПараметрыЗаполнения.ВидДохода = ТекущийДоход.Ключ;
			ДанныеДекларации = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения.СтруктураДоходовВычетов.ДанныеДекларации);
			ДанныеДекларации.Доходы = ТекущийДоход.Значение.Данные;
			ДанныеДекларации.СуммаДохода = ТекущийДоход.Значение.СуммаДохода;
			ДанныеДекларации.НалоговаяБаза = ТекущийДоход.Значение.НалоговаяБаза;
			ДанныеДекларации.НалогУдержанный = ТекущийДоход.Значение.НалогУдержанный;
			ДанныеДекларации.КодВидаДохода = ТекущийДоход.Ключ;
			
			ДанныеДекларацииПоУмолчанию.СуммаДохода = ДанныеДекларацииПоУмолчанию.СуммаДохода - ДанныеДекларации.СуммаДохода;
			ДанныеДекларацииПоУмолчанию.НалоговаяБаза = ДанныеДекларацииПоУмолчанию.НалоговаяБаза - ДанныеДекларации.НалоговаяБаза;
			ДанныеДекларацииПоУмолчанию.НалогУдержанный = ДанныеДекларацииПоУмолчанию.НалогУдержанный - ДанныеДекларации.НалогУдержанный;
			
			ИндексСтроки = 0;
			Пока ИндексСтроки <= ДанныеДекларацииПоУмолчанию.Доходы.ВГраница() Цикл
				
				Если ДанныеДекларацииПоУмолчанию.Доходы[ИндексСтроки].ВидДоходаДекларация = ТекущийДоход.Ключ Тогда
					ДанныеДекларацииПоУмолчанию.Доходы.Удалить(ИндексСтроки);
				Иначе
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЗаполнения.ДанныеДекларации = ДанныеДекларации;
			ДобавитьДоходПоОперациямСЦеннымиБумагами(Результат, ПараметрыЗаполнения);
			
		КонецЦикла;
		
		Если ДанныеДекларацииПоУмолчанию.Доходы.Количество() > 0 Тогда
			ПараметрыЗаполнения = НовыйДоходПоОперациямСЦеннымиБумагами(ДанныеЗаполнения.Вид, ОКТМО, Ставка);
			ПараметрыЗаполнения.ВидДохода = КодПоУмолчанию;
			ПараметрыЗаполнения.ДанныеДекларации = ДанныеДекларацииПоУмолчанию;
			ДобавитьДоходПоОперациямСЦеннымиБумагами(Результат, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйДанныеНалоговойБазы()
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Новый Массив);
	Результат.Вставить("СуммаДохода", 0);
	Результат.Вставить("НалоговаяБаза", 0);
	Результат.Вставить("НалогУдержанный", 0);
	
	Возврат Результат;
	
КонецФункции

// Заполняет строку вычета для расчета налоговых баз
//
// Параметры:
//   Результат               - ТаблицаЗначений - см. Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения()
//   ДанныеЗаполнения        - СтрокаТаблицыЗначения - Данные доходов и вычетов, указанные пользователем в Помощнике
//   ДополнительныеПараметры - Структура - См. ДополнительныеПараметрыДоходовВычетов()
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - Колонки см. Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения()
//
Функция ЗаполнитьСтрокуДоходаВычетаПередРасчетом(Результат, ДанныеЗаполнения, ДополнительныеПараметры)
	
	СтрокаДохода = Результат.Добавить();
	СтрокаДохода.НалоговаяСтавка = ДополнительныеПараметры.СтавкаПоУмолчанию;
	СтрокаДохода.Вид = ДанныеЗаполнения.Вид;
	СтрокаДохода.СтруктураДанных = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры.СтруктураДанных);
	СоответствиеДоходовВычетов = ДополнительныеПараметры.СоответствиеДоходовВычетов;
	
	ВидДохода = Неопределено;
	
	ДанныеЗаполнения.СтруктураДоходовВычетов.Свойство("ВидДохода", ВидДохода);
	Если Не ЗначениеЗаполнено(ВидДохода) Тогда
		// Если в структуре вычета не определяется вид дохода, для которого следует применить вычета, тогда
		// определяем его из соответствия по умолчанию
		СтрокаДохода.ВидДохода = СоответствиеДоходовВычетов.Получить(ДанныеЗаполнения.Вид);
	ИначеЕсли ТипЗнч(ВидДохода) = Тип("Соответствие") И ЗначениеЗаполнено(ВидДохода) Тогда
		// Если в форме вычета указано распределение по доходам, добавим параметр для расчета налоговых баз
		СтрокаДохода.СтруктураДанных.Вставить("РаспределениеВычета", ВидДохода);
	Иначе
		СтрокаДохода.ВидДохода = СоответствиеДоходовВычетов.Получить(ВидДохода);
	КонецЕсли;
	
	Возврат СтрокаДохода;
	
КонецФункции

// Создаёт/перезаполняет декларацию 3-НДФЛ и 4-НДФЛ
//
// Параметры:
//   СтруктураПараметров - Структура - см. НовыеПараметрыЗаполненияДекларации()
//
// Возвращаемое значение:
//   Структура - см. НовыйРезультатЗаполненияДекларации
//
Функция СоздатьЗаполнитьДекларацию(СтруктураПараметров)
	
	Перем ЗаполнятьЗаявлениеНаВозвратНалога, ВариантДействияСНалогомКВозврату;
	
	Период = СтруктураПараметров.Период;
	Организация = СтруктураПараметров.Организация;
	СчетОрганизации = СтруктураПараметров.СчетОрганизации;
	НомерКорректировки = СтруктураПараметров.НомерКорректировки;
	НомерКорректировки4НДФЛ = СтруктураПараметров.НомерКорректировки4НДФЛ;
	ТаблицаДанныхЗаполнения = СтруктураПараметров.ТаблицаДанныхЗаполнения;
	
	ДанныеПомощникаЗаполнения = СтруктураПараметров.ДанныеПомощникаЗаполнения; // см. НовыйДанныеПомощникаЗаполнения
	Декларация3НДФЛ = СтруктураПараметров.Декларация3НДФЛ;
	ВыбраннаяФорма3НДФЛ = СтруктураПараметров.Декларация3НДФЛВыбраннаяФорма;
	
	СформироватьДекларацию4НДФЛ = СтруктураПараметров.СформироватьДекларацию4НДФЛ;
	ПредполагаемаяСуммаДоходов = СтруктураПараметров.ПредполагаемаяСуммаДоходов;
	Декларация4НДФЛ = СтруктураПараметров.Декларация4НДФЛ;
	ВыбраннаяФорма4НДФЛ = СтруктураПараметров.Декларация4НДФЛВыбраннаяФорма;
	
	Если Не ФормаЗаполняетсяПомощником(ВыбраннаяФорма3НДФЛ) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
			Формат(Период, "ДФ=yyyy"));
	КонецЕсли;
	
	Если ТаблицаДанныхЗаполнения = Неопределено Тогда
		РасчетНалога = РассчитатьНалог(Организация, Период, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ);
		ТаблицаДанныхЗаполнения = РасчетНалога.ТаблицаДанныхЗаполнения;
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ЗаполнятьЗаявлениеНаВозвратНалога", ЗаполнятьЗаявлениеНаВозвратНалога);
	СтруктураПараметров.Свойство("ВариантДействияСНалогомКВозврату", ВариантДействияСНалогомКВозврату);

	Если ДанныеПомощникаЗаполнения.НалогКВозврату > 0
		И ЗаполнятьЗаявлениеНаВозвратНалога = Истина Тогда
		ДобавитьДанныеЗаявленияНаВозвратНалога(
			ТаблицаДанныхЗаполнения,
			Организация,
			СчетОрганизации,
			Период,
			ВариантДействияСНалогомКВозврату,
			НомерКорректировки,
			ВыбраннаяФорма3НДФЛ);
	КонецЕсли;
	
	// Проверка на удаленный объект данных
	Если ЗначениеЗаполнено(Декларация3НДФЛ) И Не ОбщегоНазначения.СсылкаСуществует(Декларация3НДФЛ) Тогда
		Декларация3НДФЛ = Неопределено;
	КонецЕсли;
	
	Отчеты.РегламентированныйОтчет3НДФЛ.СоздатьЗаполнитьОтчет(
		Декларация3НДФЛ,
		Организация,
		Период,
		ВыбраннаяФорма3НДФЛ,
		НомерКорректировки,
		ТаблицаДанныхЗаполнения,
		ДанныеПомощникаЗаполнения);
		
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		Статус3НДФЛ = Новый Структура("СсылкаНаОбъект, Статус", Декларация3НДФЛ, НСтр("ru = 'Подготовлено'"));
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(Статус3НДФЛ);
	КонецЕсли;
	
	Если СформироватьДекларацию4НДФЛ Тогда
		Отчеты.РегламентированныйОтчет4НДФЛ.СоздатьЗаполнитьОтчет(
			Декларация4НДФЛ,
			Организация,
			ДобавитьМесяц(Период, 12),
			ВыбраннаяФорма4НДФЛ,
			НомерКорректировки4НДФЛ,
			Новый Структура("ПредполагаемаяСуммаДоходов", ПредполагаемаяСуммаДоходов));
		Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
			Статус4НДФЛ = Новый Структура("СсылкаНаОбъект, Статус", Декларация4НДФЛ, НСтр("ru = 'Подготовлено'"));
			ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(Статус4НДФЛ);
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатЗаполненияДекларации();
	Результат.Декларация3НДФЛ = Декларация3НДФЛ;
	Результат.Декларация4НДФЛ = Декларация4НДФЛ;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыЗаполненияДекларации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Период", '00010101');
	Результат.Вставить("Организация"); // СправочникСсылка.Организации
	Результат.Вставить("СчетОрганизации"); // СправочникСсылка.БанковскиеСчета
	Результат.Вставить("ТаблицаДанныхЗаполнения");
	Результат.Вставить("ДанныеПомощникаЗаполнения");
	
	Результат.Вставить("Декларация3НДФЛ");
	Результат.Вставить("Декларация3НДФЛВыбраннаяФорма", "");
	Результат.Вставить("НомерКорректировки", 0);
	
	Результат.Вставить("ПредполагаемаяСуммаДоходов", 0);
	
	Результат.Вставить("СформироватьДекларацию4НДФЛ", Ложь);
	Результат.Вставить("Декларация4НДФЛ");
	Результат.Вставить("Декларация4НДФЛВыбраннаяФорма", "");
	Результат.Вставить("НомерКорректировки4НДФЛ", 0);
	
	Результат.Вставить("ЗаполнятьЗаявлениеНаВозвратНалога", Ложь);
	Результат.Вставить("ВариантДействияСНалогомКВозврату");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатРасчетаНалога(ВыбраннаяФорма)
	
	Результат = Новый Структура;
	
	Результат.Вставить("НалогКУплате",    0);            // Число - сумма налога к уплате по данным декларации
	Результат.Вставить("НалогКВозврату",  0);            // Число - сумма налога к возврату по данным декларации
	
	Результат.Вставить("ЗаполнятьЗаявлениеНаВозвратНалога", Ложь); // Булево - признак того, в декларации поддерживается заполнение заявления на возврат налога
	
	Результат.Вставить("ПрименяетсяОсвобождениеОтНалога", Ложь);     // Булево - В текущем налоговом периоде возможно освобождение от уплаты налога или каких-либо авансовых платежей.
	Результат.Вставить("ОсвобождениеОтНалога",            0);        // Число - Сумма освобождения от налога. Актуально для 2020 года в отраслях, пострадавших от коронавируса.
	
	Результат.Вставить("ТаблицаДанныхЗаполнения",
		Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения(ВыбраннаяФорма)); // ТаблицаЗначений - таблица, содержащая данные для заполнения декларации.
	
	Результат.Вставить("ПоясненияРасчетаНалога", НовыйПоясненияРасчетаНалогаВДекларации(ВыбраннаяФорма)); // см. НовыйПоясненияРасчетаНалогаВДекларации
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатЗаполненияДекларации()
	
	Результат = Новый Структура;
	Результат.Вставить("Декларация3НДФЛ", Неопределено); // ДокументСсылка.РегламентированныйОтчет - РегламентированныйОтчет3НДФЛ
	Результат.Вставить("Декларация4НДФЛ", Неопределено); // ДокументСсылка.РегламентированныйОтчет - РегламентированныйОтчет4НДФЛ
	Результат.Вставить("НалогКУплате",    0);            // Число - сумма налога к уплате по данным декларации
	Результат.Вставить("НалогКВозврату",  0);            // Число - сумма налога к возврату по данным декларации
	
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы с пояснениями расчета НДФЛ в декларации за год.
//
// Возвращаемое значение:
//  ДеревоЗначений:
//    * НалоговаяСтавка - Число - Ставка налога
//    * ВидДохода - Число - Код вида дохода
//    * Порядок - Число - Порядок налоговых баз
//    * ПояснениеСвернуто - Строка, ФорматированнаяСтрока - заголовок группы расчета по ставке в свернутом виде
//    * Пояснение - Строка, ФорматированнаяСтрока - заголовок показателя или формула расчета показателя.
//    * Значение - Строка, ФорматированнаяСтрока - значение показателя.
//
Функция НовыйПоясненияРасчетаНалогаВДекларации(ВыбраннаяФорма)
	
	ОписаниеТиповПояснений = Новый ОписаниеТипов("Строка, ФорматированнаяСтрока");
	
	Пояснения = Новый ДеревоЗначений();
	
	Пояснения.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Пояснения.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Иначе
		Пояснения.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	КонецЕсли;
	
	Пояснения.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	Пояснения.Колонки.Добавить("ПояснениеСвернуто", ОписаниеТиповПояснений);
	Пояснения.Колонки.Добавить("Пояснение", ОписаниеТиповПояснений);
	Пояснения.Колонки.Добавить("Значение", ОписаниеТиповПояснений);
	
	Возврат Пояснения;
	
КонецФункции

Функция НовыйСтруктураТаблицыДоходыИВычеты()
	
	РезультатВыполнения = Новый Структура;
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		РезультатВыполнения.Вставить("ДоходыПредпринимателя" + ИмяПериода, Неопределено); // ТаблицаЗначений - Таблица доходов предпринимателя
		РезультатВыполнения.Вставить("АвансовыеПлатежи" + ИмяПериода, 0); // Число - Сумма авансовых платежей
		РезультатВыполнения.Вставить("ТорговыйСбор" + ИмяПериода, 0); // Число - Сумма торгового сбора
	КонецЦикла;
	РезультатВыполнения.Вставить("СтандартныйВычет", Неопределено);      // Массив - Стандартные вычеты предпринимателя
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция НовыйДанныеПомощникаЗаполнения() Экспорт
	
	ДанныеПомощникаЗаполнения = Новый Структура;
	ДанныеПомощникаЗаполнения.Вставить("ДоходыВычеты",                Неопределено); // ТаблицаЗначений - таблица доходов и вычетов предпринимателя
	ДанныеПомощникаЗаполнения.Вставить("СпособСдачиОтчетности",       "Интернет");   // Строка - Способ подачи декларации в налоговый орган
	ДанныеПомощникаЗаполнения.Вставить("НалогКВозврату",              0);            // Будет рассчитан при заполнении декларации.
	ДанныеПомощникаЗаполнения.Вставить("НалогКУплате",                0);            // Будет рассчитан при заполнении декларации.
	ДанныеПомощникаЗаполнения.Вставить("СформироватьДекларацию4НДФЛ", Ложь);         // Булево - Признак необходимости формирования декларации 4-НДФЛ
	ДанныеПомощникаЗаполнения.Вставить("АвансовыеПлатежиИП",          0);            // Число - Сумма авансовых платежей по налогу
	ДанныеПомощникаЗаполнения.Вставить("ТорговыйСбор",                0);            // Число - Сумма торгового сбора
	ДанныеПомощникаЗаполнения.Вставить("ПредполагаемаяСуммаДоходов",  0);            // Число - Предполагаемая сумма доходов, необходимая для формирования декларации 4-НДФЛ
	
	ДанныеПомощникаЗаполнения.Вставить("ВариантДействияСНалогомКВозврату",
		ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет); // Строка - Вариант действия с суммой налога к возврату.
	
	ДанныеПомощникаЗаполнения.Вставить("ПрименяетсяОсвобождениеОтНалога", Ложь);     // Булево - В текущем налоговом периоде возможно освобождение от уплаты налога или каких-либо авансовых платежей.
	ДанныеПомощникаЗаполнения.Вставить("ОсвобождениеОтНалога",            0);        // Число - Сумма освобождения от налога. Актуально для 2020 года в отраслях, пострадавших от коронавируса.

	Возврат ДанныеПомощникаЗаполнения;
	
КонецФункции

Процедура ДополнитьДанныеПоДоходамРасходамПредпринимателя(СтруктураДоходовВычетов, ПараметрыВыполнения)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодОКВЭД", СтруктураДоходовВычетов.КодОКВЭД);
	Отбор.Вставить("ВидДеятельности", СтруктураДоходовВычетов.ВидДеятельности);
	Для НомерПериода = 1 По 3 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		ТаблицаДоходов = ПараметрыВыполнения["ДоходыПредпринимателя" + ИмяПериода];
		Если ТаблицаДоходов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДоходов = ТаблицаДоходов.НайтиСтроки(Отбор);
		Если СтрокиДоходов.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = СтрокиДоходов[0];
		
		СтруктураДоходовВычетов.Вставить("СуммаДохода" + ИмяПериода, СтрокаТаблицы.ИтогоДоходов);
		СтруктураДоходовВычетов.Вставить("СуммаВычета" + ИмяПериода, СтрокаТаблицы.ИтогоРасходов);
		СтруктураДоходовВычетов.Вставить("МатериальныеРасходы" + ИмяПериода,         СтрокаТаблицы.МатериальныеРасходы);
		СтруктураДоходовВычетов.Вставить("Амортизация" + ИмяПериода,                 СтрокаТаблицы.Амортизация);
		СтруктураДоходовВычетов.Вставить("Зарплата" + ИмяПериода,                    СтрокаТаблицы.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ВыплатыПоТрудовымДоговорам" + ИмяПериода,  СтрокаТаблицы.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ПрочиеРасходы" + ИмяПериода,               СтрокаТаблицы.ПрочиеРасходы);
		СтруктураДоходовВычетов.Вставить("ПрочиеДоходы" + ИмяПериода,                СтрокаТаблицы.ПрочиеДоходы);
		СтруктураДоходовВычетов.Вставить("АвансыПокупателей" + ИмяПериода,           СтрокаТаблицы.АвансыПокупателей);
		СтруктураДоходовВычетов.Вставить("ИтогоПодтвержденныхРасходов" + ИмяПериода, СтрокаТаблицы.ИтогоРасходов);
		
		Показатели = Новый Структура("Доходы, ПрофВычет", СтрокаТаблицы.ИтогоДоходов, СтрокаТаблицы.ИтогоРасходов);
		СтруктураДоходовВычетов.Вставить("Показатели" + ИмяПериода, Показатели);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуДоходыВычетыПоУмолчанию(ПараметрыВыполнения, ВыбраннаяФорма, ИсключаемыеВидыДеятельности = Неопределено) Экспорт
	
	ДоходыВычеты = Новый ТаблицаЗначений;
	РеквизитыТаблицы = Метаданные.Обработки.ПомощникЗаполнения3НДФЛ.ТабличныеЧасти.ДоходыВычеты.Реквизиты;
	Для Каждого ТекущийРеквизит Из РеквизитыТаблицы Цикл
		ДоходыВычеты.Колонки.Добавить(ТекущийРеквизит.Имя, ТекущийРеквизит.Тип);
	КонецЦикла;
	ДоходыВычеты.Колонки.Добавить("СтруктураДоходовВычетов");
	ДоходыВычеты.Колонки.Добавить("ЕстьОшибкиЗаполнения", Новый ОписаниеТипов("Булево"));
	
	Если ИсключаемыеВидыДеятельности = Неопределено Тогда
		ИсключаемыеВидыДеятельности = Новый Массив;
	КонецЕсли;
	
	ПроцентПрофВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(ВыбраннаяФорма);
	
	Для Каждого Доход Из ПараметрыВыполнения.ДоходыПредпринимателя Цикл
		
		// Возможно вид деятельности заполнен вручную. Еще раз не заполняем.
		Если ИсключаемыеВидыДеятельности.Найти(Доход.ВидДеятельности) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Доход.ИтогоДоходов = 0 И Доход.ИтогоРасходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДоходыВычеты = ДоходыВычеты.Добавить();
		СтрокаДоходыВычеты.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность;
		СтрокаДоходыВычеты.СуммаДохода = Доход.ИтогоДоходов;
		СтрокаДоходыВычеты.СуммаВычета = Доход.ИтогоРасходов;
		СтрокаДоходыВычеты.ЕстьОшибкиЗаполнения = ПустаяСтрока(Доход.КодОКВЭД);
		
		Если СтрокаДоходыВычеты.ЕстьОшибкиЗаполнения Тогда
			СтрокаДоходыВычеты.Информация = НСтр("ru = 'Укажите код по ОКВЭД'");
		Иначе
			СтрокаДоходыВычеты.Информация = Доход.НаименованиеОКВЭД;
		КонецЕсли;
		
		СтруктураДоходовВычетов = Новый Структура;
		СтруктураДоходовВычетов.Вставить("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
		СтруктураДоходовВычетов.Вставить("КодОКВЭД",                    Доход.КодОКВЭД);
		СтруктураДоходовВычетов.Вставить("ВидДеятельности",             Доход.ВидДеятельности);
		СтруктураДоходовВычетов.Вставить("НаименованиеОКВЭД",           Доход.НаименованиеОКВЭД);
		СтруктураДоходовВычетов.Вставить("Информация",                  Доход.НаименованиеОКВЭД);
		СтруктураДоходовВычетов.Вставить("СуммаДохода",                 СтрокаДоходыВычеты.СуммаДохода);
		СтруктураДоходовВычетов.Вставить("СуммаВычета",                 СтрокаДоходыВычеты.СуммаВычета);
		СтруктураДоходовВычетов.Вставить("МатериальныеРасходы",         Доход.МатериальныеРасходы);
		СтруктураДоходовВычетов.Вставить("Амортизация",                 Доход.Амортизация);
		СтруктураДоходовВычетов.Вставить("Зарплата",                    Доход.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ВыплатыПоТрудовымДоговорам",  Доход.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ПрочиеРасходы",               Доход.ПрочиеРасходы);
		СтруктураДоходовВычетов.Вставить("ПрочиеДоходы",                Доход.ПрочиеДоходы);
		СтруктураДоходовВычетов.Вставить("АвансыПокупателей",           Доход.АвансыПокупателей);
		СтруктураДоходовВычетов.Вставить("ИтогоПодтвержденныхРасходов", СтрокаДоходыВычеты.СуммаВычета);
		СтруктураДоходовВычетов.Вставить("ИтогоРасходовНоНормативу",    СтрокаДоходыВычеты.СуммаДохода * ПроцентПрофВычета / 100);
		СтруктураДоходовВычетов.Вставить("СпособЗаполнения",            "ПоДаннымУчета");
		// Дополним данные за накопительные периоды
		ДополнитьДанныеПоДоходамРасходамПредпринимателя(СтруктураДоходовВычетов, ПараметрыВыполнения);
		
		СтрокаДоходыВычеты.СтруктураДоходовВычетов = СтруктураДоходовВычетов;
		
	КонецЦикла;
	
	СтандартныйВычет = Неопределено;
	Если ПараметрыВыполнения.Свойство("СтандартныйВычет", СтандартныйВычет) И ЗначениеЗаполнено(СтандартныйВычет) Тогда
		
		Для Каждого ТекущийВычет Из СтандартныйВычет Цикл
			ЗаполнитьЗначенияСвойств(ДоходыВычеты.Добавить(), ТекущийВычет);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДоходыВычеты;
	
КонецФункции

Функция ПоддерживаемыеНалоговыеПериоды() Экспорт
	
	ПоддерживаемыеНалоговыеПериоды = Новый Массив;
	
	Период = НачалоГода(ДатаНачалаПрименения());
	Пока Период <= НачалоГода(ТекущаяДатаСеанса()) Цикл
		ПоддерживаемыеНалоговыеПериоды.Добавить(Период);
		Период = ДобавитьМесяц(Период, 12);
	КонецЦикла;
	
	Возврат ПоддерживаемыеНалоговыеПериоды;
	
КонецФункции

Функция ДанныеПомощникаЗаполнения(Декларация) Экспорт
	
	Если Не ЗначениеЗаполнено(Декларация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "ДанныеОтчета");
	Если ТипЗнч(ХранилищеДанныхОтчета) <> Тип("ХранилищеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ХранилищеДанныхОтчета.Получить();
	Если ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения")
		И ДанныеОтчета.ДанныеПомощникаЗаполнения.Количество() > 0 Тогда
		Возврат ДанныеОтчета.ДанныеПомощникаЗаполнения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(НалогиКУплате, Показатели) Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Показатели.Организация,
		Показатели.Период,
		?(ЗначениеЗаполнено(Показатели.Правило), Показатели.Правило.Периодичность, Перечисления.Периодичность.Год));
	
	Для Каждого СтрокаНалогКУплате Из НалогиКУплате Цикл
		
		Если СтрокаНалогКУплате.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПлатеж = ТаблицаПлатежей.Добавить();
		
		Если ПлательщикЕНП Тогда
			НовыйПлатеж.ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
		Иначе
			НовыйПлатеж.ВидНалога = СтрокаНалогКУплате.ВидНалога;
		КонецЕсли;
		НовыйПлатеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(НовыйПлатеж.ВидНалога);
		
		// Для КБК, по которым нет соответствия в Перечисление.ВидыНалогов, пытаемся определить налог по КБК
		// - НДФЛ по купонному доходу от облигаций
		// - НДФЛ с процентов по вкладам
		// - НДФЛ с прибыли КИК
		Если Не ЗначениеЗаполнено(НовыйПлатеж.Налог) Тогда
			НовыйПлатеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаНалогКУплате.КБК);
		КонецЕсли;
		НовыйПлатеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НовыйПлатеж.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(НовыйПлатеж.Налог, Показатели.Период);
		НовыйПлатеж.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НовыйПлатеж.Сумма = СтрокаНалогКУплате.Сумма;
		
	КонецЦикла;
	
	ТаблицаПлатежей.Свернуть("СчетУчета,Субконто1,Субконто2,Субконто3,
		|ВидНалога,Налог,РегистрацияВНалоговомОргане,ВидНалоговогоОбязательства,НалоговыйПериод", "Сумма");
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

Функция СтруктураНавигации(ВыбраннаяФорма) Экспорт
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	НомерШага = 0;
	
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		СтруктураНавигации.Структура.Вставить(
			НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
			СтруктураШагаДоходыВычеты(НомерШага));
	Иначе
		СтруктураНавигации.Структура.Вставить(
			НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
			СтруктураШагаДоходы(НомерШага));
			
		СтруктураНавигации.Структура.Вставить(
			НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
			СтруктураШагаВычеты(НомерШага));
	КонецЕсли;
	
	СтруктураНавигации.Структура.Вставить(
		НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
		СтруктураШагаРасчетНалога(НомерШага));
	
	СтруктураНавигации.Структура.Вставить(
		НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
		СтруктураШагаДекларация(НомерШага));
	
	СтруктураНавигации.Структура.Вставить(
		НавигацияПомощниковКлиентСервер.ИмяШага(УвеличитьЗначениеНаЕдиницу(НомерШага)),
		СтруктураШагаОплатаНалога(НомерШага));
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция СтруктураШагаДоходыВычеты(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Доходы и вычеты'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ДоходыВычеты";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаДоходы(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Доходы'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Доходы";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаВычеты(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Вычеты'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Вычеты";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаРасчетНалога(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Расчет налога'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "РасчетНалога";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаДекларация(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Декларация'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Декларация";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаОплатаНалога(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Оплата налога'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ОплатаНалога";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Процедура ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага)
	
	// Ключевые параметры формы помощника.
	СтруктураШага.СтруктураПараметровФормы.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураШага.СтруктураПараметровФормы.Вставить("Период", Дата(1, 1, 1));
	
КонецПроцедуры

Функция ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоПериода);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецПериода);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", "");
	
	ТаблицаДоходов = УчетДоходовИРасходовПредпринимателя.ТаблицаДоходовРасходовПоВидамПредпринимательскойДеятельности3НДФЛ(ПараметрыОтчета);
	ТаблицаДоходов.Колонки.Добавить("КодОКВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ТаблицаДоходов.Колонки.Добавить("НаименованиеОКВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДоходов.Колонки.Добавить("АвансыПокупателей", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ОсновнойВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, НачалоПериода);
	
	ОКВЭДОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КодОКВЭД2, НаименованиеОКВЭД2");
	КодыВидовДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаДоходов.ВыгрузитьКолонку("ВидДеятельности"), "КодОКВЭД");
	
	КлассификаторОКВЭД2 = РегистрыСведений.КлассификаторОКВЭД2.ФиксированноеСоответствиеКодНаименование();
	
	ВключатьАвансы = УчетДоходовИРасходовПредпринимателя.ВключатьАвансыПокупателейВДоходыПоквартально(
		Организация,
		КонецПериода);
	
	Для Каждого СтрокаДоходов Из ТаблицаДоходов Цикл
		
		СтрокаДоходов.КодОКВЭД = КодыВидовДеятельности.Получить(СтрокаДоходов.ВидДеятельности);
		Если Не ЗначениеЗаполнено(СтрокаДоходов.КодОКВЭД)
			И СтрокаДоходов.ВидДеятельности = ОсновнойВидДеятельности Тогда
			СтрокаДоходов.КодОКВЭД = ОКВЭДОрганизации.КодОКВЭД2;
		КонецЕсли;
		
		СтрокаДоходов.НаименованиеОКВЭД = КлассификаторОКВЭД2.Получить(СтрокаДоходов.КодОКВЭД);
		
		Если ВключатьАвансы Тогда
			
			СтрокаДоходов.АвансыПокупателей = АвансыВключенныеВПрочиеДоходы(
				Организация,
				НачалоПериода,
				КонецПериода,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДоходов.ВидДеятельности, "ХарактерДеятельности"));
			
			СтрокаДоходов.ПрочиеДоходы = СтрокаДоходов.ПрочиеДоходы - СтрокаДоходов.АвансыПокупателей;
			
		Иначе
			
			СтрокаДоходов.ПрочиеДоходы = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДоходов;
	
КонецФункции

Функция ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	СуммаТорговогоСбора = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНачисления", ПланыСчетов.Хозрасчетный.ТорговыйСбор);
	
	СчетаУплаты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		СчетДт = &СчетНачисления,
	|		,
	|		СчетКт В (&СчетаУплаты),
	|		,
	|		Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаТорговогоСбора = Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаТорговогоСбора;
	
КонецФункции

Функция АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода > УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Тогда
		Возврат Окр(УчетНДФЛПредпринимателя.УплаченныйНалогЗаПериод(
			Организация,
			НачалоПериода,
			КонецПериода), 0);
	КонецЕсли;
	
	СуммаАвансовыхПлатежей = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Налог", ПоддерживаемыеВидыНалогов(НачалоПериода));
	Запрос.УстановитьПараметр("ПравилаУплатыАвансов", ВыполнениеЗадачБухгалтера.ПравилаУплатыАвансовПоНДФЛ());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация КАК Организация,
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Платеж
	|ПОМЕСТИТЬ ОтборПлатежи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило В(&ПравилаУплатыАвансов)
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Платеж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма
	|ИЗ
	|	ОтборПлатежи КАК ОтборПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (ПлатежноеПоручение.Организация = ОтборПлатежи.Организация)
	|			И (ПлатежноеПоручение.Ссылка = ОтборПлатежи.Платеж)
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И ПлатежноеПоручение.Налог В(&Налог)
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.СуммаДокумента
	|ИЗ
	|	ОтборПлатежи КАК ОтборПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ПО (СписаниеСРасчетногоСчета.Организация = ОтборПлатежи.Организация)
	|			И (СписаниеСРасчетногоСчета.Ссылка = ОтборПлатежи.Платеж)
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Налог В(&Налог)
	|	И СписаниеСРасчетногоСчета.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	ОтборПлатежи КАК ОтборПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО (РасходныйКассовыйОрдер.Организация = ОтборПлатежи.Организация)
	|			И (РасходныйКассовыйОрдер.Ссылка = ОтборПлатежи.Платеж)
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Налог В(&Налог)
	|	И РасходныйКассовыйОрдер.Проведен
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		СуммаАвансовыхПлатежей = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Окр(СуммаАвансовыхПлатежей, 0);
	
КонецФункции

Функция НомерКорректировки(Декларация) Экспорт
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		НомерКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "Вид");
	Иначе
		НомерКорректировки = 0;
	КонецЕсли;
	
	Возврат НомерКорректировки;
	
КонецФункции

Функция СтатусУплаты(ПараметрыЗадачи)
	
	Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
		Возврат ПараметрыЗадачи.РучнойСтатус;
	КонецЕсли;
	
	Организация                 = ПараметрыЗадачи.Организация;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	Правило                     = ПараметрыЗадачи.Правило;
	Срок                        = ПараметрыЗадачи.Срок;
	
	Статус = "";
	ДокументыУплаты = ДокументыУплаты(Организация, ПериодСобытия, Правило);
	Уплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ДокументыУплаты);
	
	Если КонецДня(ПериодСобытия) = КонецГода(ПериодСобытия) Тогда
		
		ПоказательПериода = ВыполнениеЗадачБухгалтера.ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
		ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
			Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
		
		Если ДанныеДекларации <> Неопределено И ДанныеДекларации.Платежи.Количество() > 0 Тогда
			НалогКУплате = ДанныеДекларации.Платежи.Итог("Сумма");
			
			Если ВозможноОсвобождениеОтНалога(ПериодСобытия) Тогда
				НалогИП = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ИП);
				ОсвобождениеОтНалога = НалоговыйУчет.СуммаОсвобожденияОтНалога(
					Организация, НачалоГода(ПериодСобытия), КонецГода(ПериодСобытия), ПланыСчетов.Хозрасчетный.НДФЛ_ИП);
				
				Если ДанныеДекларации.Платежи.НайтиСтроки(Новый Структура("Налог", НалогИП)).Количество() > 0 Тогда
					НалогКУплате = Макс(0, НалогКУплате - ОсвобождениеОтНалога);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НалогКУплате = 0;
		КонецЕсли;
		
	Иначе
		
		НачалоГода = НачалоГода(ПериодСобытия);
		
		Начислено = УчетНДФЛПредпринимателя.НачисленныйНалогЗаПериод(Организация, НачалоГода, КонецДня(ПериодСобытия));
		
		// Если срок уплаты налога за прошлый год не наступил, то не учитываем задолженность на начало года
		ПравилоУплатаЗаГод = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
			ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель(),
			ВыполнениеЗадачБухгалтера.ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(Организация).Уплата);
		
		СрокУплатаЗаГод = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(
			ПараметрыЗадачи.Организация,
			ПравилоУплатаЗаГод,
			НачалоГода - 1);
		
		Если ЗначениеЗаполнено(СрокУплатаЗаГод) И Срок < СрокУплатаЗаГод Тогда
			НалогКУплате = Начислено;
		Иначе
			ОстатокРасчетов = УчетНДФЛПредпринимателя.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, НачалоГода);
			НалогКУплате = Начислено - ОстатокРасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Уплачено > 0 И Уплачено >= НалогКУплате Тогда
		Возврат НСтр("ru='Оплачено'");
	КонецЕсли;
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.СтатусОплаты(ДокументыУплаты.ВыгрузитьКолонку("Состояние"));
	
КонецФункции

// Возвращает числовое значение ставки налога по представлению
//
// Параметры:
//   СтавкаНалогаСтрокой - Строка - Представление ставки налога без символа "%"
//
// Возвращаемое значение:
//   Число - Значение налоговой ставки
//
Функция ЗначениеСтавкиНалога(СтавкаНалогаСтрокой) Экспорт
	
	СтавкаНалога = Неопределено;
	
	Если ЭтоИдентификаторСтавкиПрогрессивнойШкалы(СтавкаНалогаСтрокой) Тогда
		СтавкаНалога = 13;
	ИначеЕсли Не ПустаяСтрока(СтавкаНалогаСтрокой) Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		СтавкаНалога = ОписаниеТипа.ПривестиЗначение(СтавкаНалогаСтрокой);
	КонецЕсли;
	
	Возврат СтавкаНалога;
	
КонецФункции

Функция УвеличитьЗначениеНаЕдиницу(Значение)
	
	Значение = Значение + 1;
	Возврат Значение;
	
КонецФункции

Функция КодВидаДохода(ВыбраннаяФорма, ИмяДохода = "")
	
	ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма);
	ИмяДоходаЗаполнено = ЗначениеЗаполнено(ИмяДохода);
	
	Если Не ИмяДоходаЗаполнено
		И ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Возврат ВидыДоходов.ПредпринимательскаяДеятельность;
	ИначеЕсли ИмяДоходаЗаполнено Тогда
		Возврат ВидыДоходов[ИмяДохода];
	Иначе
		Возврат ВидыДоходов.Иное;
	КонецЕсли;
	
КонецФункции

Функция КодыВидовДоходовЦенныеБумаги() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЦифровыеАктивы", "2540,2650,2651,3030,3031,3032");
	Результат.Вставить("Вклады", "3020");
	Результат.Вставить("Облигации", "1011,1110,3023");
	Результат.Вставить("ИИС", "1544,1545,1546,1547,1548,1549,1551,1552,1553,1554");
	Результат.Вставить("ЦенныеБумаги",
		"1530,1531,1532,1533,1535,1536,1537,1538,1539,1541,1544,1545,1546,1547,1548,1549,1551,1552,1553,1554");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСоответствиеКодовДоходов(Результат, КодыВидовДохода, ИсточникДохода)
	
	МассивКодов = СтрРазделить(КодыВидовДохода, ",", Ложь);
	Для Каждого ТекущийКод Из МассивКодов Цикл
		Результат.Вставить(Справочники.ВидыДоходовНДФЛ.НайтиПоКоду(ТекущийКод), ИсточникДохода);
	КонецЦикла;
	
КонецПроцедуры

#Область СтандартныеВычеты

// Возвращает список стандартных вычетов, указанных индивидуальным предпринимателем.
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура с ключами:
//      * Организация - СправочникСсылка.Организации
//      * НачалоПериода - Дата
//      * КонецПериод - Дата
//      * ВыбраннаяФорма - Строка
//
// Возвращаемое значение:
//   Массив - значения см. НовыйСтруктураСтандартногоВычета()
//
Функция ДанныеСтандартныхВычетов(ПараметрыЗаполнения) Экспорт
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = КонецДня(ПараметрыЗаполнения.КонецПериода);
	
	СтандартныеВычеты = Новый Массив;
	
	ПараметрыВыполнения = УчетНДФЛПредпринимателя.НовыеПараметрыРасчетаДоходыИРасходыПредпринимателя(
		Организация, НачалоПериода, КонецПериода, ПараметрыЗаполнения.ВыбраннаяФорма);
	
	ДоходыРасходы = УчетНДФЛПредпринимателя.СведенияОДоходахИВычетах(ПараметрыВыполнения);
	
	ПараметрыВычета = УчетНДФЛПредпринимателя.НовыйПараметрыВычета();
	ПараметрыВычета.НачалоПериода     = НачалоПериода;
	ПараметрыВычета.КонецПериода      = КонецПериода;
	ПараметрыВычета.Организация       = Организация;
	ПараметрыВычета.ВыбраннаяФорма    = ПараметрыЗаполнения.ВыбраннаяФорма;
	ПараметрыВычета.ВычетЗаВесьПериод = Истина;
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика";
	
	ВычетНаНалогоплательщика = УчетНДФЛПредпринимателя.СуммаСтандартногоВычета(ПараметрыВычета);
	
	СтруктураВычета = НовыйСтруктураСтандартногоВычета();
	СтруктураВычета.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика;
	СтруктураВычета.Информация = НСтр("ru = 'Стандартный вычет на налогоплательщика'");
	СтруктураВычета.СуммаВычета = ВычетНаНалогоплательщика;
	
	РазмерыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.РазмерыВычетов(ПараметрыЗаполнения.ВыбраннаяФорма);
	
	ПараметрыВыполнения = УчетНДФЛПредпринимателя.НовыйПараметрыВычета();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыВычета);
	ПараметрыВыполнения.ВычетЗаВесьПериод = Истина;
	
	Если ЗначениеЗаполнено(ВычетНаНалогоплательщика) Тогда
		
		ТаблицаДанных = УчетНДФЛПредпринимателя.ДанныеВычетаПоМесяцамЗаПериод(ПараметрыВыполнения);
		
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("Вид", СтруктураВычета.Вид);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("Информация", СтруктураВычета.Информация);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("СуммаВычета", СтруктураВычета.СуммаВычета);
		
		КоличествоМесяцевПериода = Месяц(ПараметрыВыполнения.КонецПериода) - Месяц(ПараметрыВыполнения.НачалоПериода) + 1;
		СуммаСреднее = ТаблицаДанных.Итог("СуммаВычета") / КоличествоМесяцевПериода;
		
		Если ТаблицаДанных[0].СуммаВычета = СуммаСреднее Тогда
			ПрименениеВычета = "Год";
		Иначе
			ПрименениеВычета = "НесколькоМесяцевВГоду";
		КонецЕсли;
		
		ДанныеФормы = Новый Структура;
		ДанныеФормы.Вставить("ВычетПрименяется", ПрименениеВычета);
		ДанныеФормы.Вставить("РазмерВычета", СуммаСреднее);
		
		СуммаВычетаПоМесяцам = Новый Массив;
		ДанныеДекларации = Новый Структура;
		
		// Структура вычета по умолчанию
		ВычетНаНалогоплательщика = Отчеты.РегламентированныйОтчет3НДФЛ.СтандартныйВычетНаНалогоплательщика(
			РазмерыВычетов.СтандартныйВычетНаНалогоплательщика);
		
		Для Каждого ТекущийВычет Из ВычетНаНалогоплательщика Цикл
			ИмяСвойства = СтрШаблон("СуммаВычета%1", Формат(ТекущийВычет.Значение, "ЧДЦ=0; ЧГ=0"));
			ДанныеДекларации.Вставить(ИмяСвойства, 0);
		КонецЦикла;
		
		// Заполнение суммы вычета на налогоплательщика
		
		Для Каждого ТекущийВычет Из ТаблицаДанных Цикл
			
			СуммаВычетаПоМесяцам.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекущийВычет));
			Если ЗначениеЗаполнено(ТекущийВычет.СуммаВычета) Тогда
				ИмяСвойства = СтрШаблон("СуммаВычета%1", Формат(ТекущийВычет.СуммаВычета, "ЧДЦ=0; ЧГ=0"));
				ДанныеДекларации[ИмяСвойства] = ДанныеДекларации[ИмяСвойства] + ТекущийВычет.СуммаВычета;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("ДанныеДекларации", ДанныеДекларации);
		ДанныеФормы.Вставить("СуммаВычетаПоМесяцам", СуммаВычетаПоМесяцам);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("ДанныеФормы", ДанныеФормы);
		
		СтандартныеВычеты.Добавить(СтруктураВычета);
		
	КонецЕсли;
	
	// Вычет на детей
	
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаДетей";
	ПараметрыВычета.КоличествоМесяцев = ДоходыРасходы.КоличествоМесяцевВычетНаДетей;
	ПараметрыВычета.ВычетЗаВесьПериод = Ложь;
	ВычетНаДетей = УчетНДФЛПредпринимателя.СуммаСтандартногоВычета(ПараметрыВычета);
	
	Если ЗначениеЗаполнено(ВычетНаДетей) Тогда
		
		ПараметрыВыполнения.ИмяОбъектаМетаданных = ПараметрыВычета.ИмяОбъектаМетаданных;
		ТаблицаДанных = УчетНДФЛПредпринимателя.ДанныеВычетаПоМесяцамЗаПериод(ПараметрыВыполнения);
		СуммыВычета = РегистрыСведений.ИПСтандартныеВычетыНаДетей.РассчитатьСуммыВычетаНаДетей(
			ТаблицаДанных, РазмерыВычетов.СтандартныйВычетНаДетей, ПараметрыВычета.КоличествоМесяцев);
		
		Если ЗначениеЗаполнено(ПараметрыВычета.КоличествоМесяцев) Тогда
			СуммаСреднее = СуммыВычета.Всего / ПараметрыВычета.КоличествоМесяцев;
		Иначе
			СуммаСреднее = 0;
		КонецЕсли;
		
		СтруктураВычета = НовыйСтруктураСтандартногоВычета();
		СтруктураВычета.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей;
		СтруктураВычета.Информация = СтрШаблон(НСтр("ru = 'Вычет на детей (%1)'"), ТаблицаДанных[0].ВсегоДетей);
		СтруктураВычета.СуммаВычета = ВычетНаДетей;
		
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("Вид", СтруктураВычета.Вид);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("Информация", СтруктураВычета.Информация);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("СуммаВычета", СтруктураВычета.СуммаВычета);
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("КоличествоМесяцев", ПараметрыВычета.КоличествоМесяцев);
		
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("СемейноеПоложениеНеИзменялось",
			ТаблицаДанных[0].СуммаВычета = СуммаСреднее);
		
		Для Каждого ТекущееСвойство Из СуммыВычета Цикл
			СтруктураВычета.СтруктураДоходовВычетов.Вставить(ТекущееСвойство.Ключ, ТекущееСвойство.Значение);
		КонецЦикла;
		
		СуммаСреднее = ТаблицаДанных.Итог("СуммаВычета") / ТаблицаДанных.Количество();
		СведенияОДетях = Новый Массив;
		
		Для Каждого ТекущийВычет Из ТаблицаДанных Цикл
			СведенияОДетях.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекущийВычет));
		КонецЦикла;
		
		СтруктураВычета.СтруктураДоходовВычетов.Вставить("СведенияОДетях", СведенияОДетях);
		
		СтандартныеВычеты.Добавить(СтруктураВычета);
		
	КонецЕсли;
	
	Возврат СтандартныеВычеты;
	
КонецФункции

Функция НовыйСтруктураСтандартногоВычета()
	
	СтруктураВычета = Новый Структура;
	СтруктураВычета.Вставить("Вид");
	СтруктураВычета.Вставить("Информация", "");
	СтруктураВычета.Вставить("СуммаВычета", 0);
	СтруктураВычета.Вставить("СтруктураДоходовВычетов", Новый Структура("СведенияОВычетах"));
	
	Возврат СтруктураВычета;
	
КонецФункции

Процедура СохранитьДанныеСтандартныхВычетовВРегистр(Знач ДоходыВычеты, Организация, Период, ВыбраннаяФорма3НДФЛ)
	
	Если Период < УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()
		Или Не ЗначениеЗаполнено(ДоходыВычеты) Тогда
		Возврат;
	КонецЕсли;
	
	ВычетНаНалогоплательщика = ДоходыВычеты.Найти(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика, "Вид");
	Если ЗначениеЗаполнено(ВычетНаНалогоплательщика) Тогда
		ДанныеВычета = ВычетНаНалогоплательщика.СтруктураДоходовВычетов.ДанныеФормы.СуммаВычетаПоМесяцам;
		
		// До 2020 г. данные формы по вычету на налогоплательщика хранились в виде структуры (Наименование месяца - сумма вычета)
		// В 2020 г. данные формы расширены и включают номер месяца - хранение в виде Массива структур.
		// Данные в регистр сохраняются при новой логике хранения данных формы.
		
		Если ТипЗнч(ДанныеВычета) = Тип("Массив") Тогда
			
			ИмяРегистра = "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика";
			
			РеквизитыЗаписи = УчетНДФЛПредпринимателя.НовыйРеквизитыЗаписиВычета(
				Организация, НачалоГода(Период), КонецГода(Период), ИмяРегистра);
			
			УчетНДФЛПредпринимателя.СохранитьСтандартныйВычетЗаПериод(ДанныеВычета, РеквизитыЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВычетНаДетей = ДоходыВычеты.Найти(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей, "Вид");
	Если ЗначениеЗаполнено(ВычетНаДетей) Тогда
		ДанныеВычета = ВычетНаДетей.СтруктураДоходовВычетов.СведенияОДетях;
		
		Если ВычетНаДетей <> Неопределено И ТипЗнч(ДанныеВычета) = Тип("Массив") Тогда
			
			ИмяРегистра = "РегистрСведений.ИПСтандартныеВычетыНаДетей";
			
			РеквизитыЗаписи = УчетНДФЛПредпринимателя.НовыйРеквизитыЗаписиВычета(
				Организация, НачалоГода(Период), КонецГода(Период), ИмяРегистра);
			
			УчетНДФЛПредпринимателя.СохранитьСтандартныйВычетЗаПериод(ДанныеВычета, РеквизитыЗаписи);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доходы, введенные пользователем и доступные к распределению стандартного вычета
//
// Параметры:
//   ВведенныеДоходы - Соответствие
//   ВыбраннаяФорма - Строка - Имя формы декларации 3-НДФЛ
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДоходыДоступныеДляСтандартногоВычета(ВведенныеДоходы, ВыбраннаяФорма) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидДохода", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц"));
	Результат.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеДоходов = СоответствиеДоходовИсточникам(ВыбраннаяФорма);
	
	ДоступныеКодыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(
		ВыбраннаяФорма);
	
	Для Каждого ТекущаяСтрока Из ВведенныеДоходы Цикл
		
		КодДохода = СоответствиеДоходов[ТекущаяСтрока.Ключ];
		Если Не ЗначениеЗаполнено(КодДохода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДоступныеКодыДоходов.Найти(КодДохода) <> Неопределено Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ВидДохода = ТекущаяСтрока.Ключ;
			НоваяСтрока.Сумма = ТекущаяСтрока.Значение;
			Если ТекущаяСтрока.Ключ = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
				// По умолчанию стандартные вычеты применяем на предпринимательскую деятельность,
				// т.к. авансовые платежи рассчитываются с данными вычетами
				НоваяСтрока.Приоритет = 0;
			Иначе
				НоваяСтрока.Приоритет = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("Приоритет, ВидДохода");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СохранениеДекларации

Функция ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ПределыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ВыбраннаяФорма3НДФЛ);
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ) Тогда
		
		ТаблицаНалоговойБазы = ТаблицаНалоговойБазы2022(ТаблицаДанныхЗаполнения, ПределыВычетов, ВыбраннаяФорма3НДФЛ);
		
	Иначе
		
		ТаблицаНалоговойБазы = ТаблицаНалоговойБазы2021(ТаблицаДанныхЗаполнения, ПределыВычетов);
		// Если нет ни одного дохода или вычета, подается нулевая декларация.
		// Добавляем пустую строку данных для заполнения раздела 2.
		Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = КодВидаДохода(ВыбраннаяФорма3НДФЛ);
			НоваяСтрока.НалоговаяСтавка = СтавкаНалога(ВыбраннаяФорма3НДФЛ);
			НоваяСтрока.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(
				НоваяСтрока.НалоговаяСтавка,
				НоваяСтрока.ВидДохода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаНалоговойБазы;
	
КонецФункции

Функция ТаблицаНалоговойБазы2021(ТаблицаДанныхЗаполнения, ПределыВычетов)
	
	ТаблицаНалоговойБазы = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяУплате", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяВозврату", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	КолонкиГруппировок = ("ВидДохода, НалоговаяСтавка");
	ВидыДоходов = ТаблицаДанныхЗаполнения.Скопировать(, КолонкиГруппировок);
	ВидыДоходов.Свернуть(КолонкиГруппировок, );
	ВидыДоходов.Сортировать(КолонкиГруппировок);
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиГруппировок);
	
	ОтборДанныхЗаполнения = Новый Структура(КолонкиГруппировок);
	Для Каждого ВидДохода Из ВидыДоходов Цикл
		
		Если ВидДохода.ВидДохода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетНалоговойБазы = НоваяСтруктураРасчетаНалоговойБазы(ВидДохода.НалоговаяСтавка, ВидДохода.ВидДохода);
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, ВидДохода);
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
			ДобавитьРасчетНалоговойБазыПоВидуДохода(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетНалоговойБазы);
		КонецЦикла;
		
		РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов);
		
		// Раздел 2 заполняется только при наличии доходов с таким же видом и налоговой ставкой.
		Если РасчетНалоговойБазы.ОбщаяСуммаДоходов <> 0 Тогда
			НоваяСтрока = ТаблицаНалоговойБазы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидДохода);
			НоваяСтрока.СтруктураДанных = РасчетНалоговойБазы;
			НоваяСтрока.СуммаНалогаПодлежащаяУплате   = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате;
			НоваяСтрока.СуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНалоговойБазы;
	
КонецФункции

Функция ДанныеЗаполнения_ПродажаИмущества(ДанныеФормы, НалоговаяСтавка, Период)
	
	ДанныеОтчетности = ДанныеФормы.ДанныеОтчетности;
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеОтчетности.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеОтчетности.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеОтчетности.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеОтчетности.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеОтчетности.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.ОблагаемыйДоход);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.ОблагаемыйДоход, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СдачаИмуществаВАренду(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_Подарок(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПрочиеДоходы(ДанныеФормы, НалоговаяСтавка, КлючиПоказателей)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", ДанныеФормы.СтавкаНалога);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДоходаОблагаемая);
	Если КлючиПоказателей.Найти("СуммаОблагаемогоДоходаРФ") <> Неопределено Тогда
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", Окр(ДанныеФормы.СуммаНалога, 0));
	Иначе
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	КонецЕсли;
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",  Окр(ДанныеФормы.СуммаНалогаУдержанная, 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СтандартныйВычет(ДанныеФормы, ВыбраннаяФорма)
	
	ДанныеДекларации = Новый Структура;
	
	РазмерыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.РазмерыВычетов(ВыбраннаяФорма);
	Если ТипЗнч(ДанныеФормы.ДанныеДекларации) = Тип("Структура") Тогда
		
		ВычетНаНалогоплательщика = Отчеты.РегламентированныйОтчет3НДФЛ.СтандартныйВычетНаНалогоплательщика(
			РазмерыВычетов.СтандартныйВычетНаНалогоплательщика);
		
		Для Каждого ТекущийВычет Из ВычетНаНалогоплательщика Цикл
			ДанныеДекларации.Вставить(ТекущийВычет.Ключ,
				ДанныеФормы.ДанныеДекларации[СтрШаблон("СуммаВычета%1", Формат(ТекущийВычет.Значение, "ЧГ=0"))]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаДетей(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетей", ДанныеФормы.СтандартныйВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейЕдинственномуРодителю", ДанныеФормы.ДвойнойВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидов",  ДанныеФормы.ВычетНаИнвалидов);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю",  ДанныеФормы.ДвойнойВычетНаИнвалидов);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СоциальныеВычеты(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СоциальныйВычетПожертвования", ДанныеФормы.Пожертвования);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеДетей", ДанныеФормы.ОбучениеДетей);
	ДанныеДекларации.Вставить("СоциальныйВычетДорогостоящееЛечение", ДанныеФормы.ДорогостоящееЛечение);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеСвое", ДанныеФормы.ОбучениеСвое);
	ДанныеДекларации.Вставить("СоциальныйВычетЛечениеМедикаменты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ЛечениеМедикаменты", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетМедикаменты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "Медикаменты", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетОбычноеЛечение",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ОбычноеЛечение", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетЗаФитнес",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетЗаФитнес", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетМедицинскоеСтрахование", ДанныеФормы.МедицинскоеСтрахование);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюВсего", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюКВычету", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("РасходыНаПрохождениеНезависимойОценкиКвалификации", ДанныеФормы.ОценкаКвалификации);
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИННПенсионногоФонда", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КПППенсионногоФонда", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ВидДоговораПенсионногоОбеспечения", ДанныеФормы.ВидДоговора);
	ДанныеДекларации.Вставить("НаименованиеПенсионногоФонда", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("ДатаДоговораПенсионногоОбеспечения", ДанныеФормы.ДатаДоговора);
	ДанныеДекларации.Вставить("НомерДоговораПенсионногоОбеспечения", ДанныеФормы.НомерДоговора);
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондВсего", ДанныеФормы.СуммаВзносов);
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондКВычету", ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ИнвестиционныйВычет(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИнвестиционныйВычет", ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("ИнвестиционныйВычетКВосстановлению", ДанныеФормы.СуммаДохода);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПредпринимательскаяДеятельность(ДанныеФормы, КодВидаДеятельности)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодВидаДеятельностиИП", КодВидаДеятельности);
	ДанныеДекларации.Вставить("ОКВЭДИП", ДанныеФормы.КодОКВЭД);
	ДанныеДекларации.Вставить("СуммаДоходаИП", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаРасходовИП", ДанныеФормы.ИтогоПодтвержденныхРасходов);
	ДанныеДекларации.Вставить("МатериальныеРасходыИП", ДанныеФормы.МатериальныеРасходы);
	ДанныеДекларации.Вставить("АмортизацияИП", ДанныеФормы.Амортизация);
	ДанныеДекларации.Вставить("ЗарплатаИП", ДанныеФормы.Зарплата);
	Если ДанныеФормы.Свойство("ВыплатыПоТрудовымДоговорам") Тогда
		ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", ДанныеФормы.ВыплатыПоТрудовымДоговорам);
	Иначе
		ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", 0);
	КонецЕсли;
	ДанныеДекларации.Вставить("ПрочиеРасходыИП", ДанныеФормы.ПрочиеРасходы);
	Если ДанныеФормы.Свойство("ИтогоРасходовНоНормативу") Тогда
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", ДанныеФормы.ИтогоРасходовНоНормативу);
	Иначе
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", 0);
	КонецЕсли;
	
	// Добавляем ключи для заполнения показателей авансовых платежей.
	Для НомерКвартала = 1 По 3 Цикл
		
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерКвартала);
		КлючПоказателей = КлючПоказателейЗаПериод(ИмяПериода);
		Если ДанныеФормы.Свойство(КлючПоказателей) Тогда
			ДанныеДекларации.Вставить(КлючПоказателей, ДанныеФормы[КлючПоказателей]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодНаименованияОбъектаНедвижимости", ДанныеФормы.КодНаименованияОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ВидСобственностиНаОбъектНедвижимости", ДанныеФормы.ФормаСобственности);
	ДанныеДекларации.Вставить("СпособПриобретенияНедвижимости",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "СпособПриобретенияНедвижимости", ""));
	ДанныеДекларации.Вставить("ПризнакНалогоплательщикаОбъектаНедвижимости", ДанныеФормы.ПризнакНалогоплательщикаОбъектаНедвижимости);
	ДанныеДекларации.Вставить("НалогоплательщикПенсионер", ДанныеФормы.НалогоплательщикПенсионер);
	ДанныеДекларации.Вставить("КодНомераОбъектаНедвижимости", ДанныеФормы.КодНомераОбъектаНедвижимости);
	ДанныеДекларации.Вставить("КадастровыйНомерОбъектаНедвижимости", ДанныеФормы.КадастровыйНомерОбъектаНедвижимости);
	ДанныеДекларации.Вставить("АдресОбъектаНедвижимости", ДанныеФормы.АдресОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаАктаОПередачеОбъектаНедвижимости", ДанныеФормы.ДатаАктаОПередачеОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЖилье", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЖилье);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЗемлю", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЗемлю);
	ДанныеДекларации.Вставить("ДатаЗаявленияОРаспределенииВычета", ДанныеФормы.ДатаЗаявленияОРаспределенииВычета);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЧислитель", ДанныеФормы.ДоляВПравеСобственностиЧислитель);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЗнаменатель", ДанныеФормы.ДоляВПравеСобственностиЗнаменатель);
	ДанныеДекларации.Вставить("ГодНачалаИспользованияВычета", ДанныеФормы.ГодНачалаИспользованияВычета);
	ДанныеДекларации.Вставить("СуммаРасходовНаПриобретениеНедвижимости", ДанныеФормы.СуммаРасходовНаПриобретениеНедвижимости);
	ДанныеДекларации.Вставить("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеФормы.СуммаПроцентовПоКредитуНаНедвижимость);
	
	// Временные ключи для расчета итогов по данному вычету.
	ДанныеДекларации.Вставить("ОбъектПриобретенДо2014Года", ДанныеФормы.ОбъектПриобретенДо2014Года);
	ДанныеДекларации.Вставить("КредитОформленДо2014Года", ДанныеФормы.КредитОформленДо2014Года);
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетСтоимость",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетСтоимость", 0));
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетПроценты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетПроценты", 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОперацииСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.НалоговаяБаза);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.НалоговаяБаза, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",  Окр(ДанныеФормы.НалогУдержанный, 0));
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ТаблицаДоходовВычетов", ДанныеФормы.Доходы);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОплатаТруда(ДанныеФормы, НалоговаяСтавка, КлючиПоказателей)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",       НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",               ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",          ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",          ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",        ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",                 ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",      ДанныеФормы.НалоговаяБаза);
	Если КлючиПоказателей.Найти("СуммаОблагаемогоДоходаРФ") <> Неопределено Тогда
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.НалоговаяБаза, НалоговаяСтавка));
	Иначе
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	КонецЕсли;
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",       Окр(ДанныеФормы.СуммаНалога, 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ДоходЗаПределамиРФ(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаЗаПределамиРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("ОКСМДоходаЗаПределамиРФ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.Страна, "Код"));
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаЗаПределамиРФ", ДанныеФормы.ИсточникДохода);
	ДанныеДекларации.Вставить("ВалютаДоходаЗаПределамиРФ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.Валюта, "Код"));
	ДанныеДекларации.Вставить("КодВидаДоходаЗаПределамиРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ДатаПолученияДоходаЗаПределамиРФ", ДанныеФормы.ДатаПолученияДохода);
	ДанныеДекларации.Вставить("КурсНаДатуДоходаЗаПределамиРФ", ДанныеФормы.КурсНаДатуПолученияДохода);
	ДанныеДекларации.Вставить("СуммаДоходаЗаПределамиРФ", ДанныеФормы.СуммаДоходаВВалюте);
	ДанныеДекларации.Вставить("СуммаРубДоходаЗаПределамиРФ", ДанныеФормы.СуммаДоходаВРублях);
	ДанныеДекларации.Вставить("ДатаУплатыНалогаЗаПределамиРФ", ДанныеФормы.ДатаУплатыНалога);
	ДанныеДекларации.Вставить("КурсНаДатуУплатыНалогаЗаПределамиРФ", ДанныеФормы.КурсНаДатуУплатыНалога);
	ДанныеДекларации.Вставить("СуммаНалогаУплаченнаяЗаПределамиРФ", ДанныеФормы.СуммаНалогаВВалюте);
	ДанныеДекларации.Вставить("СуммаНалогаРубУплаченнаяЗаПределамиРФ", ДанныеФормы.СуммаНалогаВРублях);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", Окр(ДанныеФормы.СуммаНалогаИсчисленная, 0));
	ДанныеДекларации.Вставить("СуммаПодлежащаяЗачетуВРФ", Окр(ДанныеФормы.СуммаНалогаПодлежащаяЗачету, 0));
	
	Если ДанныеФормы.Свойство("ПорядокОпределенияПрибылиУбыткаКИК") Тогда
		ДанныеДекларации.Вставить("ПорядокОпределенияПрибылиУбыткаКИК", ДанныеФормы.ПорядокОпределенияПрибылиУбыткаКИК);
	КонецЕсли;
	
	Если ДанныеФормы.Свойство("СтранаЗачисления") Тогда
		
		Если ЗначениеЗаполнено(ДанныеФормы.СтранаЗачисления) Тогда
			ДанныеДекларации.Вставить("ОКСМСтраныЗачисленияДоходаЗаПределамиРФ",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.СтранаЗачисления, "Код"));
		Иначе
			ДанныеДекларации.Вставить("ОКСМСтраныЗачисленияДоходаЗаПределамиРФ", "999");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ВидСчета",        ДанныеФормы.ВидСчета);
	ДанныеДекларации.Вставить("Год",             ДанныеФормы.ГодУбытка);
	ДанныеДекларации.Вставить("СуммаУбыткаЦБ",   ДанныеФормы.УбытокЦБ);
	ДанныеДекларации.Вставить("СуммаУбыткаПФИ",  ДанныеФормы.УбытокПФИ);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КБК", РезультатРасчета.КБК);
	ДанныеДекларации.Вставить("ОКТМО", РезультатРасчета.ОКТМО);
	
	Если РезультатРасчета.СуммаНалога > 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Уплата);
		ДанныеДекларации.Вставить("СуммаНалога", РезультатРасчета.СуммаНалога);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	ИначеЕсли РезультатРасчета.СуммаНалога < 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Возврат);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", -РезультатРасчета.СуммаНалога);
	Иначе
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.ОтсутствиеУплатыВозврата);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СведенияОСуммахНалогаИП(РезультатРасчета, ПризнакиУплатыВозврата, ВыбраннаяФорма3НДФЛ, ТаблицаДанныхЗаполнения)
	
	Если Не ЗаполнятьИсчисленныеАвансовыеПлатежи(ВыбраннаяФорма3НДФЛ) Тогда
		Возврат ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата);
	КонецЕсли;
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КБКИП", РезультатРасчета.КБК);
	ДанныеДекларации.Вставить("ОКТМОИП1Квартал", РезультатРасчета.ОКТМО);
	ДанныеДекларации.Вставить("ОКТМОИППолугодие", РезультатРасчета.ОКТМО);
	ДанныеДекларации.Вставить("ОКТМОИП9Месяцев", РезультатРасчета.ОКТМО);
	ДанныеДекларации.Вставить("ОКТМОИПГод", РезультатРасчета.ОКТМО);
	ДанныеДекларации.Вставить("СуммаНалогаИПКУплатеГод", 0);
	ДанныеДекларации.Вставить("СуммаНалогаИПКУменьшениюГод", 0);
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат ДанныеДекларации;
	КонецЕсли;
	
	ПределНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	СуммаНалогаБазовая = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(ПределНалоговойБазы);
	СписокКБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	
	АвансовыеПлатежиИП = НачисленныеАвансовыеПлатежиИП(ТаблицаДанныхЗаполнения);
	
	Если СписокКБК.Свойство("ДоходыОблагаемыеПоПовышеннойСтавке")
		И РезультатРасчета.КБК = СписокКБК.ДоходыОблагаемыеПоПовышеннойСтавке Тогда
		
		ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, "СуммаНалогаИПКУплате1Квартал",
			АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал, СуммаНалогаБазовая);
		
		СуммаКУплатеЗаПериод = АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие - ДанныеДекларации.СуммаНалогаИПКУплате1Квартал;
		ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, "СуммаНалогаИПКУплатеПолугодие",
			Макс(0, СуммаКУплатеЗаПериод), СуммаНалогаБазовая);
		
		ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, "СуммаНалогаИПКУменьшениюПолугодие",
			-1 * Мин(0, СуммаКУплатеЗаПериод), СуммаНалогаБазовая);
		
		СуммаКУплатеЗаПериод = АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев
			- ДанныеДекларации.СуммаНалогаИПКУплате1Квартал
			- ДанныеДекларации.СуммаНалогаИПКУплатеПолугодие;
		
		ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, "СуммаНалогаИПКУплате9Месяцев",
			Макс(0, СуммаКУплатеЗаПериод), СуммаНалогаБазовая);
		
		ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, "СуммаНалогаИПКУменьшению9Месяцев",
			-1 * Мин(0, СуммаКУплатеЗаПериод), СуммаНалогаБазовая);
		
		СуммаНалога = РезультатРасчета.СуммаНалога - Макс(АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев - СуммаНалогаБазовая, 0);
		
	Иначе
		
		Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ) Тогда
		
			АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал = Мин(СуммаНалогаБазовая, АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал);
			АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие = Мин(СуммаНалогаБазовая, АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие);
			АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев = Мин(СуммаНалогаБазовая, АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев);
			СуммаНалога = Мин(СуммаНалогаБазовая, РезультатРасчета.СуммаНалога)
				- Мин(СуммаНалогаБазовая, АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев);
			
		Иначе
			СуммаНалога = РезультатРасчета.СуммаНалога - АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев;
		КонецЕсли;
		
		ДанныеДекларации.Вставить("СуммаНалогаИПКУплате1Квартал", АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал);
		ДанныеДекларации.Вставить("СуммаНалогаИПКУплатеПолугодие",
			Макс(0, АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие - АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал));
		ДанныеДекларации.Вставить("СуммаНалогаИПКУменьшениюПолугодие",
			-1 * Мин(0, АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие - АвансовыеПлатежиИП.АвансовыйПлатежИП1Квартал));
		ДанныеДекларации.Вставить("СуммаНалогаИПКУплате9Месяцев",
			Макс(0, АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев - АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие));
		ДанныеДекларации.Вставить("СуммаНалогаИПКУменьшению9Месяцев",
			-1 * Мин(0, АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев - АвансовыеПлатежиИП.АвансовыйПлатежИППолугодие));
		
	КонецЕсли;
	
	Если СуммаНалога < 0 Тогда
		ДанныеДекларации.СуммаНалогаИПКУплатеГод = 0;
		ДанныеДекларации.СуммаНалогаИПКУменьшениюГод = -СуммаНалога;
	Иначе
		ДанныеДекларации.СуммаНалогаИПКУплатеГод = СуммаНалога;
		ДанныеДекларации.СуммаНалогаИПКУменьшениюГод = 0;
	КонецЕсли;
	
	Если ДанныеДекларации.СуммаНалогаИПКУплате1Квартал = 0 Тогда
		ДанныеДекларации.ОКТМОИП1Квартал = "";
	КонецЕсли;
	
	Если ДанныеДекларации.СуммаНалогаИПКУплатеПолугодие = 0 И ДанныеДекларации.СуммаНалогаИПКУменьшениюПолугодие = 0 Тогда
		ДанныеДекларации.ОКТМОИППолугодие = "";
	КонецЕсли;
	
	Если ДанныеДекларации.СуммаНалогаИПКУплате9Месяцев = 0 И ДанныеДекларации.СуммаНалогаИПКУменьшению9Месяцев = 0 Тогда
		ДанныеДекларации.ОКТМОИП9Месяцев = "";
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Процедура ДобавитьЗначениеСуммыАвансовогоПлатежаСвышеПредела(ДанныеДекларации, КлючПоказателя, СуммаАвансовогоПлатежа, СуммаНалогаБазовая)
	
	Если СуммаАвансовогоПлатежа > СуммаНалогаБазовая Тогда
		ДанныеДекларации.Вставить(КлючПоказателя, СуммаАвансовогоПлатежа - СуммаНалогаБазовая);
	Иначе
		ДанныеДекларации.Вставить(КлючПоказателя, 0);
	КонецЕсли;
	
КонецПроцедуры

Функция НачисленныеАвансовыеПлатежиИП(ТаблицаДанныхЗаполнения)
	
	Результат = Новый Структура;
	Результат.Вставить("АвансовыйПлатежИП1Квартал", 0);
	Результат.Вставить("АвансовыйПлатежИППолугодие", 0);
	Результат.Вставить("АвансовыйПлатежИП9Месяцев", 0);
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Ищем итоговую строку с авансовыми платежами.
	СтруктураДанных = Неопределено;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.СтруктураДанных.Свойство("АвансовыйПлатежИП1Квартал") Тогда
			СтруктураДанных = НайденнаяСтрока.СтруктураДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

#Область ОперацииСЦеннымиБумагами

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	ИначеЕсли ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ) Тогда
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2022(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	Иначе
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2018();
	Иначе
		Возврат НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019();
	КонецЕсли;
	
КонецФункции

#Область ФормаОтчета2018кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ВидыОперацийСЦеннымиБумагами = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаДоходовВычетов);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодВычета", "СуммаДохода, СуммаВычета");
	
	// Инициализация структуры показателей листа декларации.
	ПоказателиОперацииНаИИС = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС);
	ПоказателиИныеОперации  = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ИныеОперации);
	
	// Заполнение части показателей по данным доходов/вычетов.
	СоответствиеПоказателейКодамДоходовВычетов = НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ();
	Для Каждого СтрокаДоходовВычетов Из ТаблицаДоходовВычетов Цикл
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиОперацииНаИИС, СоответствиеПоказателейКодамДоходовВычетов.ОперацииПоИИС);
		
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиИныеОперации, СоответствиеПоказателейКодамДоходовВычетов.ИныеОперации);
	КонецЦикла;
	
	// Учтем убытки прошлых лет.
	// Заполним таблицу убытков, чтобы отсортировать их в хронологическом порядке.
	ТаблицаУбытков = НовыйОписаниеТаблицыУбытков();
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаУбытков = ТаблицаУбытков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУбытков, НайденнаяСтрока.СтруктураДанных);
		Если НайденнаяСтрока.СтруктураДанных.Свойство("ВидСчета") Тогда
			Если НайденнаяСтрока.СтруктураДанных.ВидСчета = ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет Тогда
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС;
			Иначе
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ИныеОперации;
			КонецЕсли;
		КонецЕсли;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны. Удалим их.
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
	ТаблицаУбытков.Сортировать("КодВидаОперации, Год");
	
	// Заполним показатели убытков по операциям на ИИС.
	УбыткиОперацииНаИИС = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиОперацииНаИИС, ПоказателиОперацииНаИИС);
	
	// Заполним показатели убытков по операциям на прочих счетах.
	УбыткиИныеОперации = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ИныеОперации));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиИныеОперации, ПоказателиИныеОперации);
	
	// Расчет показателей листов декларации.
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиОперацииНаИИС);
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиИныеОперации);
	
	// Добавление итоговых строк в таблицу данных заполнения.
	Если ПоказателиОперацииНаИИС.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиОперацииНаИИС);
	КонецЕсли;
	
	Если ПоказателиИныеОперации.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиИныеОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОписаниеТаблицыУбытков()
	
	ТаблицаУбытков = Новый ТаблицаЗначений;
	ТаблицаУбытков.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаУбытков.Колонки.Добавить("Год",             ОбщегоНазначения.ОписаниеТипаЧисло(4));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаЦБ",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаПФИ",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаУбытков.Индексы.Добавить("КодВидаОперации");
	
	Возврат ТаблицаУбытков;
	
КонецФункции

Функция НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидОперации)
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("ЦенныеБумагиВидОперации", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение2", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение3", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение4", ВидОперации);
	
	Показатели.Вставить("ЦБНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБНалоговаяБаза", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ЦБНаОРЦБИнвестиционныйВычет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаДохода", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаРасходов", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("РЕПОСуммаДохода", 0);
	Показатели.Вставить("РЕПОСуммаРасходов", 0);
	Показатели.Вставить("РЕПОСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("РЕПОСуммаУбытка", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаРасходов", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбытка", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаКонец", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаКонец", 0);
	
	Показатели.Вставить("ЦБУбыткиПереходящиеНаБудущиеПериоды", 0);
	Показатели.Вставить("ПФИУбыткиПереходящиеНаБудущиеПериоды", 0);
	
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаДоходов", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаРасходовКВычету", 0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2018()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("СуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ(ИндивидуальныйИнвестиционныйСчет = Ложь)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1544", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1545", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1546", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1547", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1548", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1549", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1551", "РЕПОСуммаДохода");
	Доходы.Вставить("1552", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1553", "РЕПОСуммаДохода");
	Доходы.Вставить("1554", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("225", "ЦБНаОРЦБСуммаРасходов"); // 1544
	Вычеты.Вставить("226", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1545
	Вычеты.Вставить("227", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1549
	Вычеты.Вставить("228", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546
	Вычеты.Вставить("229", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1548
	Вычеты.Вставить("230", "РЕПОСуммаРасходов"); // 1551
	Вычеты.Вставить("231", "РЕПОСуммаРасходов"); // 1553
	Вычеты.Вставить("232", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1552
	Вычеты.Вставить("233", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1544
	Вычеты.Вставить("234", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1545
	Вычеты.Вставить("235", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1547
	Вычеты.Вставить("236", "ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ"); // 1549
	Вычеты.Вставить("237", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("238", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("239", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("240", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("241", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("250", "ЦБНаОРЦБСуммаРасходов"); // 1546
	Вычеты.Вставить("251", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546, 1544
	Вычеты.Вставить("252", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1554
	
	Результат.Вставить("ОперацииПоИИС", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1530", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1531", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1532", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1533", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1535", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1536", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1537", "РЕПОСуммаДохода");
	Доходы.Вставить("1538", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1539", "РЕПОСуммаДохода");
	Доходы.Вставить("1541", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("201", "ЦБНаОРЦБСуммаРасходов"); // 1530
	Вычеты.Вставить("202", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1531
	Вычеты.Вставить("203", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1536
	Вычеты.Вставить("205", "ЦБНаОРЦБСуммаРасходов"); // 1532
	Вычеты.Вставить("206", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1532
	Вычеты.Вставить("207", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1535
	Вычеты.Вставить("208", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1530, 1532
	Вычеты.Вставить("209", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("210", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("211", "РЕПОСуммаРасходов"); // 1537
	Вычеты.Вставить("213", "РЕПОСуммаРасходов"); // 1539
	Вычеты.Вставить("215", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1538
	Вычеты.Вставить("216", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("217", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("218", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1530
	Вычеты.Вставить("219", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1531
	Вычеты.Вставить("220", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1533
	Вычеты.Вставить("222", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("223", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("224", "ЦБНаОРЦБСуммаРасходов"); // 1536
	Вычеты.Вставить("618", "ЦБНаОРЦБИнвестиционныйВычет"); // 1535
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1541
	
	Результат.Вставить("ИныеОперации", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(СтрокаДоходовВычетов, Показатели, СоответствиеПоказателейКодамДоходовВычетов)
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Доходы.Получить(СокрЛП(СтрокаДоходовВычетов.КодДохода));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаДохода;
	КонецЕсли;
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Вычеты.Получить(СокрЛП(СтрокаДоходовВычетов.КодВычета));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаВычета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(ТаблицаУбытки, Показатели)
	
	КоличествоСтрок = Мин(ТаблицаУбытки.Количество(), 10);
	СуммаУбыткаЦБВсего = 0;
	СуммаУбыткаПФИВсего = 0;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Если ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ = 0 И ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Показатели["ЦБУбыткиПрошлыхЛетГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].Год;
		Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ;
		Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ;
		
		СуммаУбыткаЦБВсего = СуммаУбыткаЦБВсего + Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
		СуммаУбыткаПФИВсего = СуммаУбыткаПФИВсего + Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
	КонецЦикла;
	
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаЦБВсего;
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаПФИВсего;
	
КонецПроцедуры

Процедура РассчитатьПоказателиОперацийСЦеннымиБумагами(Показатели)
	
	// 402
	Показатели.РЕПОСуммаРасходов = Показатели.РЕПОСуммаРасходов + Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ + Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 403
	Показатели.РЕПОСуммаНалогооблагаемогоДохода = Макс(0, Показатели.РЕПОСуммаДохода - Показатели.РЕПОСуммаРасходов);
	
	// 404
	Показатели.РЕПОСуммаУбытка = Макс(0, Показатели.РЕПОСуммаРасходов - Показатели.РЕПОСуммаДохода);
	
	// 405
	Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.РЕПОСуммаУбытка - Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 406
	Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.РЕПОСуммаУбытка, Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 103
	Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ;
	
	// 207
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 408
	Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов = Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ + Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 409
	Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаДохода - Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов);
	
	// 410
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов - Показатели.ЗаймыЦеннымиБумагамиСуммаДохода);
	
	// 411
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка - Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 412
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка, Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 104
	Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ;
	
	// 208
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 106
	Показатели.ЦБНаОРЦБОбщаяСуммаРасходов =
		Показатели.ЦБНаОРЦБСуммаРасходов + Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам + Показатели.ЦБНаОРЦБСуммаПроцентногоРасхода;
	
	// 107
	Показатели.ЦБНаОРЦБНалоговаяБаза = Макс(0, Показатели.ЦБНаОРЦБСуммаДохода - Показатели.ЦБНаОРЦБОбщаяСуммаРасходов);
	
	// 108
	Показатели.ЦБНаОРЦБОбщаяСуммаУбытка = Макс(0, Показатели.ЦБНаОРЦБОбщаяСуммаРасходов - Показатели.ЦБНаОРЦБСуммаДохода);
	
	// 113
	НалоговаяБаза = Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов;
	Если НалоговаяБаза > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Мин(НалоговаяБаза, Показатели.ЦБНаОРЦБОбщаяСуммаУбытка);
	КонецЕсли;
	
	// 203
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ,
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов);
	
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Макс(0, Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ);
	Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ;
	
	// 204
	Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода = 
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		- Показатели.ЦБПрекратившиеОбращениеСуммаРасходов
		- Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода;
	
	// 211
	Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов = Показатели.ЦБНеОбрНаОРЦБСуммаРасходов
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам
		+ Показатели.ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества;
	
	// 212
	Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЦБНеОбрНаОРЦБСуммаДохода - Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов);
	
	// 303
	Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаДохода - Показатели.ПФИНаОРЦБФондовыеСуммаРасходов);
	
	// 304
	Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза > 0 Тогда
		// 306
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ = Мин(Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза,
			Показатели.ЦБНаОРЦБОбщаяСуммаУбытка - Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
		
		// 114
		Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0 Тогда
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 109
		Показатели.ЦБНаОРЦБИнвестиционныйВычет = Мин(Показатели.ЦБНаОРЦБИнвестиционныйВычет, Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБИнвестиционныйВычет;
		
		Если Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка > 0 Тогда
			// 310
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка);
			
			// 110
			Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
			
			// 112
			Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ;
		КонецЕсли;
	КонецЕсли;
	
	// 314
	Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов);
	
	// 315
	Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза > 0 Тогда
		// 317
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые = Мин(
			Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка, Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза);
		
		// 318
		Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 309
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 311
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка
			- Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
		
	ИначеЕсли Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка > 0 Тогда
		
		Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
			// 319
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые = 
				Мин(Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка);
			
			// 307
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
			
			// 308
			Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые;
		КонецЕсли;
		
		// 320
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
		
	КонецЕсли;
	
	// 323
	Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ПФИНеОбрНаОРЦБСуммаДохода - Показатели.ПФИНеОбрНаОРЦБСуммаРасходов);
	
	// 115
	Если Показатели.ЦБНаОРЦБОбщаяСуммаУбытка > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод = Показатели.ЦБНаОРЦБОбщаяСуммаУбытка
			- Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ
			- Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0
		И Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 523
		Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 525
		Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	ПФИУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза
		+ Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза;
	
	Если ПФИУбыткиПрошлыхЛетНалоговаяБаза > 0
		И Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 524
		Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза = ПФИУбыткиПрошлыхЛетНалоговаяБаза;
		
		// 526
		Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода > 0 Тогда
		// 111
		Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		// 305
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет = Мин(Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету, Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		УбытокДоступныйКВычету = Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
		Если УбытокДоступныйКВычету > 0 Тогда
			//316
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет =
				Мин(УбытокДоступныйКВычету, Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода);
			
			//318
			Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода =
				Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет;
		КонецЕсли;
	КонецЕсли;
	
	// 527
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 528
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 529
	Показатели.ЦБУбыткиПереходящиеНаБудущиеПериоды = Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец + Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод;
	
	// 530
	Показатели.ПФИУбыткиПереходящиеНаБудущиеПериоды = Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец
		+ Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод;
	
	// 531
	Показатели.ЦенныеБумагиИтогоСуммаДоходов = Показатели.ЦБНаОРЦБСуммаДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаДохода
		+ Показатели.РЕПОСуммаДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаДохода;
	
	// 532
	Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.РЕПОСуммаНалогооблагаемогоДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода;
	
	// 533
	Показатели.ЦенныеБумагиИтогоСуммаРасходовКВычету = Макс(0,
		Показатели.ЦенныеБумагиИтогоСуммаДоходов - Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода);
	
КонецПроцедуры

Процедура ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, Показатели)
	
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	
	НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
	НоваяСтрока.Вид = СтрокаЭталон.Вид;
	НоваяСтрока.ВидДохода = СтрокаЭталон.ВидДохода;
	НоваяСтрока.НалоговаяСтавка = СтрокаЭталон.НалоговаяСтавка;
	НоваяСтрока.КБК = СтрокаЭталон.КБК;
	НоваяСтрока.СтруктураДанных = Показатели;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2019кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	КодыВидовОпераций = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	// Заодно преобразуем коды видов доходов в коды видов операций.
	ТаблицаВидовОпераций = ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций);
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(
			ТаблицаДоходовВычетов, НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаВидовОпераций);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодУбытка",
		"ЦенныеБумагиСуммаДохода, ЦенныеБумагиСуммаРасходовПоРеализации, ЦенныеБумагиСуммаУбытка,
		|ЦенныеБумагиСуммаПрибылиКВычету, ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	// Дополним убытками прошлых лет
	ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(
		ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций);
	
	// Заполнение показателей декларации
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	МассивКодовОпераций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовВычетов, "КодДохода", Истина);
	Для Каждого КодВидаОперации Из МассивКодовОпераций Цикл
		
		СуммаВычетов = 0;
		ИтогоУбыток = 0;
		
		СтруктураДанных = НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами();
		СтруктураДанных.ЦенныеБумагиВидОперации = КодВидаОперации;
		СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокНеУчитывается;
		
		СтрокиОперации = ТаблицаДоходовВычетов.НайтиСтроки(Новый Структура("КодДохода", КодВидаОперации));
		Для Каждого НайденнаяСтрока Из СтрокиОперации Цикл
			
			Для Каждого Колонка Из ТаблицаДоходовВычетов.Колонки Цикл
				
				Если СтруктураДанных.Свойство(Колонка.Имя) И ТипЗнч(СтруктураДанных[Колонка.Имя]) = Тип("Число") Тогда
					СтруктураДанных[Колонка.Имя] = СтруктураДанных[Колонка.Имя] + НайденнаяСтрока[Колонка.Имя];
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НайденнаяСтрока.КодУбытка) Тогда
				СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокУчитывается;
				
				СтрокаКодУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.НайтиПоЗначению(НайденнаяСтрока.КодУбытка);
				Если СтрокаКодУбытка = Неопределено Тогда
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Добавить(НайденнаяСтрока.КодУбытка);
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Добавить(НайденнаяСтрока.ЦенныеБумагиСуммаУбытка);
				Иначе
					ИндексКодаУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Индекс(СтрокаКодУбытка);
					СтрокаСуммаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[ИндексКодаУбытка];
					СтрокаСуммаУбытка.Значение = СтрокаСуммаУбытка.Значение + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				КонецЕсли;
				
				// Накапливаем сумму убытков
				СуммаВычетов = СуммаВычетов + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				ИтогоУбыток = ИтогоУбыток + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = ИтогоУбыток;
		СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = СтруктураДанных.ЦенныеБумагиСуммаРасходовПоРеализации;
		
		// Учитываем ограничение - сумма вычетов не может превышать сумму дохода
		СуммаВычетов = СуммаВычетов
			+ СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
		
		Если СуммаВычетов > СтруктураДанных.ЦенныеБумагиСуммаДохода Тогда
			ДоступныйВычет = СтруктураДанных.ЦенныеБумагиСуммаДохода;
			
			СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = Мин(СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
			
			// Ограничим общую сумму убытка, принимаемую к вычету
			СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = Мин(СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка, ДоступныйВычет);
			
			// Распределим доступный вычет по строкам убытков
			КоличествоСтрокУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка.Количество() - 1;
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[Индекс];
				СтрокаУбытка.Значение = Мин(СтрокаУбытка.Значение, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтрокаУбытка.Значение;
			КонецЦикла;
			
			// Удалим пустые строки убытков
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[КоличествоСтрокУбытка - Индекс];
				Если Не ЗначениеЗаполнено(СтрокаУбытка.Значение) Тогда
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Удалить(СтрокаУбытка);
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Удалить(КоличествоСтрокУбытка - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Запишем строку операций с ценными бумагами в ТаблицаДанныхЗаполнения
		Если СтруктураДанных.ЦенныеБумагиСуммаДохода <> 0 Тогда
			
			КоличествоНайденных = НайденныеСтроки.Количество();
			Если КоличествоНайденных = 0 Тогда
				
				СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон);
				СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
				
			Иначе
			
				Если НайденныеСтроки[0].СтруктураДанных.Свойство("ЦенныеБумагиСуммаДохода") Тогда
				
					ИсключаемыеСвойства = Новый Массив;
					ИсключаемыеСвойства.Добавить("СуммаНалогаИсчисленная");
					ИсключаемыеСвойства.Добавить("СуммаНалогаУплаченнаяУдержанная");
					ИсключаемыеСвойства.Добавить("СуммаОблагаемогоДохода");
					
					СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон, , СтрСоединить(ИсключаемыеСвойства, ","));
					СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
					
				Иначе
					// В существующий доход добавим недостающие ключи значений
					Для Каждого ТекущийПараметр Из СтруктураДанных Цикл
						НайденныеСтроки[0].СтруктураДанных.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодУбытка",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаРасходовПоРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаУбытка", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиКВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(Приемник, Источник, ТаблицаВидовОпераций)
	
	Для Каждого СтрокаИсточник Из Источник Цикл
		СтрокаПриемник = Приемник.Добавить();
		
		КлючДохода = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодДохода, "КодДоходаВычета");
		Если КлючДохода <> Неопределено Тогда
			СтрокаПриемник.КодДохода = КлючДохода.КодВидаОперации;
			СтрокаПриемник[КлючДохода.ИмяПоляСумма] = СтрокаПриемник[КлючДохода.ИмяПоляСумма] + СтрокаИсточник.СуммаДохода;
		КонецЕсли;
		
		КлючВычета = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодВычета, "КодДоходаВычета");
		Если КлючВычета <> Неопределено Тогда
			Если КлючВычета.ЭтоУбыток Тогда
				СтрокаПриемник.КодУбытка = КлючВычета.КодВидаОперации;
			КонецЕсли;
			СтрокаПриемник[КлючВычета.ИмяПоляСумма] = СтрокаПриемник[КлючВычета.ИмяПоляСумма] + СтрокаИсточник.СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций)
	
	УчетУбытковПрошлыхЛет = ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		УчетУбытковПоСчету = Неопределено;
		Если Не УчетУбытковПрошлыхЛет.Свойство(НайденнаяСтрока.СтруктураДанных.ВидСчета, УчетУбытковПоСчету) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Параметры Из УчетУбытковПоСчету Цикл
			СтрокаВычета = ТаблицаДоходовВычетов.Добавить();
			СтрокаВычета.КодДохода = Параметры.КодДохода;
			СтрокаВычета.КодУбытка = Параметры.КодУбытка;
			СтрокаВычета.ЦенныеБумагиСуммаУбытка = НайденнаяСтрока.СтруктураДанных[Параметры.ИмяПоляСумма];
		КонецЦикла;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций)
	
	ТаблицаВидовОпераций = НовыйТаблицаВидовОперацийЦеннымиБумагами();
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	ДобавитьСтрокуТаблицыВидовОпераций("1530", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1531", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1532", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1533", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1535", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1536", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1537", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1538", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1539", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1541", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("201", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("202", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("203", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("205", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("206", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("207", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("208", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530, 1532
	ДобавитьСтрокуТаблицыВидовОпераций("209", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("210", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("211", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1537
	ДобавитьСтрокуТаблицыВидовОпераций("213", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1539
	ДобавитьСтрокуТаблицыВидовОпераций("215", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1538
	ДобавитьСтрокуТаблицыВидовОпераций("216", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("217", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("218", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("219", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("220", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1533
	ДобавитьСтрокуТаблицыВидовОпераций("222", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("223", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("224", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("618", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаПрибылиКВычету", ТаблицаВидовОпераций); // 1530
	
	// Операции на индивидуальном инвестиционном счете
	ДобавитьСтрокуТаблицыВидовОпераций("1544", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1545", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1546", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1547", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1548", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1549", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1551", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1552", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1553", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1554", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("225", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("226", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("227", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("228", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("229", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("230", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1551
	ДобавитьСтрокуТаблицыВидовОпераций("231", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1553
	ДобавитьСтрокуТаблицыВидовОпераций("232", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1552
	ДобавитьСтрокуТаблицыВидовОпераций("233", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("234", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("235", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1547
	ДобавитьСтрокуТаблицыВидовОпераций("236", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("237", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("238", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("239", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("240", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("241", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("250", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("251", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546, 1544
	ДобавитьСтрокуТаблицыВидовОпераций("252", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("619", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ТаблицаВидовОпераций); // 1544
	
	// Вычеты, общие для обоих видов счетов
	ДобавитьСтрокуТаблицыВидовОпераций("620", "", "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1541, 1554
	
	Возврат ТаблицаВидовОпераций;
	
КонецФункции

Функция НовыйТаблицаВидовОперацийЦеннымиБумагами()
	
	КлючиПоказателей = Новый ТаблицаЗначений;
	КлючиПоказателей.Колонки.Добавить("КодДоходаВычета", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоляСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ЭтоУбыток", Новый ОписаниеТипов("Булево"));
	
	Возврат КлючиПоказателей;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыВидовОпераций(КодДоходаВычета, КодВидаОперации, ИмяПоляСумма, ТаблицаВидовОпераций, ЭтоУбыток = Ложь)
	
	Если ТаблицаВидовОпераций.Найти(КодДоходаВычета, "КодДоходаВычета") <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль кода вида доходов (вычетов) ""%1""'"), КодДоходаВычета);
	КонецЕсли;
	
	НоваяСтрока = ТаблицаВидовОпераций.Добавить();
	НоваяСтрока.ИмяПоляСумма = ИмяПоляСумма;
	НоваяСтрока.КодДоходаВычета = КодДоходаВычета;
	НоваяСтрока.КодВидаОперации = КодВидаОперации;
	НоваяСтрока.ЭтоУбыток = ЭтоУбыток;
	
КонецПроцедуры

Функция НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ЦенныеБумагиВидОперации", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаДохода", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовПоРеализации", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиПризнакУчетаУбытков", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиУчетУбытковВидОперации", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаУбытка", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиКВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиИтогоСуммаУбытка", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете
	УбыткиПоИИС = Новый Массив;
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоЦеннымБумагамНаИИС, "СуммаУбыткаЦБ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	УбыткиПоПрочимСчетам = Новый Массив;
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоЦеннымБумагам, "СуммаУбыткаЦБ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	
	Результат.Вставить(ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет, УбыткиПоИИС);
	Результат.Вставить(ВидыИнвестиционныхСчетов.ПрочиеСчета, УбыткиПоПрочимСчетам);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаСведенийОСуммахНалога2021(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ОКТМОналогоплательщика, ВыбраннаяФорма3НДФЛ)
	
	СписокКБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	ПризнакиУплатыВозврата = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУплатыВозврата(ВыбраннаяФорма3НДФЛ);
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	ТаблицаРасчетов.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРасчетов.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Распределим результаты расчета Раздела 2 по доходам и вычетам.
	// Важно распределить по доходам именно сумму вычетов и расходов, а не результат Раздела 2.
	// Это обусловлено появлением отдельного пункта в Разделе 1 для доходов ИП.
	// Таким образом корректно будет учтено уменьшение доходов ИП на вычеты и расходы, уменьшающие налог.
	КолонкиПоиска = "ВидДохода, НалоговаяСтавка";
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиПоиска);
	ОтборДанныхЗаполнения = Новый Структура(КолонкиПоиска);
	
	// Распределяем вычеты и расходы в определенном порядке.
	ПорядокКБК = Новый Массив;
	ПорядокКБК.Добавить(СписокКБК.ДоходыОтПредпринимательскойДеятельности);
	ПорядокКБК.Добавить(СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог);
	ПорядокКБК.Добавить(СписокКБК.ДоходыПолученныеОтНалоговыхАгентов);
	ПорядокКБК.Добавить(СписокКБК.ФиксированныеПлатежиИностранныхГраждан);
	ПорядокКБК.Добавить(СписокКБК.ДоходыСПрибылиКИК);
	
	СуммаПоложенныхВычетов = СуммаПоложенныхВычетов(ТаблицаДанныхЗаполнения);
	
	Для Каждого СтрокаНалоговаяБаза Из ТаблицаНалоговойБазы Цикл
		
		ДанныеНалоговаяБаза = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаНалоговаяБаза.СтруктураДанных);
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, СтрокаНалоговаяБаза);
		
		Для Индекс = 0 По ПорядокКБК.ВГраница() Цикл
			
			Для Каждого ДанныеЗаполнения Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
				
				КБК = КБКИсточникаДохода(ДанныеЗаполнения.Вид, СписокКБК, Ложь);
				
				Если КБК <> ПорядокКБК[Индекс] Тогда
					Продолжить;
				КонецЕсли;
				
				// Уменьшаем сумму дохода на налоговые вычеты
				Если КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности
					И ДанныеЗаполнения.СтруктураДанных.Свойство("ОбщаяСуммаВычетаИП") Тогда
					
					СуммаВычета = Макс(0, Мин(ДанныеНалоговаяБаза.СуммаНалоговыхВычетов,
						ДанныеЗаполнения.СтруктураДанных.ОбщаяСуммаВычетаИП + СуммаПоложенныхВычетов,
						ДанныеЗаполнения.СуммаОблагаемогоДохода));
					СуммаПоложенныхВычетов = 0;
				Иначе
					СуммаВычета = Макс(0, Мин(ДанныеЗаполнения.СуммаОблагаемогоДохода,
						ДанныеНалоговаяБаза.СуммаНалоговыхВычетов));
				КонецЕсли;
				
				НалоговаяБаза = ДанныеЗаполнения.СуммаОблагаемогоДохода - СуммаВычета;
				ДанныеНалоговаяБаза.СуммаНалоговыхВычетов = ДанныеНалоговаяБаза.СуммаНалоговыхВычетов - СуммаВычета;
				
				// Считаем налог
				НалогИсчисленный = НалоговаяБаза * ДанныеЗаполнения.НалоговаяСтавка / 100;
				
				Если КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности Тогда
					НалогУплачен = 0;
				Иначе
					НалогУплачен = ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная
						+ ДанныеНалоговаяБаза.СуммаФиксированныхАвансовыхПлатежей; // возмещается только то, что уплачено или удержано
					ДанныеНалоговаяБаза.СуммаФиксированныхАвансовыхПлатежей = 0;
				КонецЕсли;
				
				СуммаНалога = Окр(НалогИсчисленный - НалогУплачен, 0);
				
				Если СуммаНалога = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРасчета = ТаблицаРасчетов.Добавить();
				СтрокаРасчета.КБК = КБК;
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ОКТМО) И СтрокаРасчета.СуммаНалога <= 0 Тогда
					СтрокаРасчета.ОКТМО = ДанныеЗаполнения.ОКТМО;
				Иначе
					СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика;
				КонецЕсли;
				
				СтрокаРасчета.СуммаНалога = СуммаНалога;
				
				Если КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности Тогда
					
					// Если нет отдельного приложения для заполнения начисленных авансовых платежей, то
					// фактически уплаченные авансовые платежи ИП уменьшают сумму налога к уплате.
					Если Не ЗаполнятьИсчисленныеАвансовыеПлатежи(ВыбраннаяФорма3НДФЛ) Тогда
						СтрокаРасчета.СуммаНалога = СтрокаРасчета.СуммаНалога - ДанныеНалоговаяБаза.СуммаУплаченныхАвансовыхПлатежей;
					КонецЕсли;
					
					АвансовыеПлатежиИП = НачисленныеАвансовыеПлатежиИП(ТаблицаДанныхЗаполнения);
					Если (СтрокаРасчета.СуммаНалога - АвансовыеПлатежиИП.АвансовыйПлатежИП9Месяцев) > 0 Тогда
						
						СуммаПСНИП = Мин(СтрокаРасчета.СуммаНалога, ДанныеНалоговаяБаза.СуммаНалогаПСН);
						
						СтрокаРасчета.СуммаНалога = СтрокаРасчета.СуммаНалога - СуммаПСНИП;
						ДанныеНалоговаяБаза.СуммаНалогаПСН = ДанныеНалоговаяБаза.СуммаНалогаПСН - СуммаПСНИП;
						
						СуммаТорговогоСбора = Мин(СтрокаРасчета.СуммаНалога, ДанныеНалоговаяБаза.СуммаТорговогоСбора);
						СтрокаРасчета.СуммаНалога = СтрокаРасчета.СуммаНалога - СуммаТорговогоСбора;
						ДанныеНалоговаяБаза.СуммаТорговогоСбора = ДанныеНалоговаяБаза.СуммаТорговогоСбора - СуммаТорговогоСбора;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// Свернем таблицу доходов по КБК и ОКТМО, чтобы получить итоги расчетов.
	КолонкиГруппировок = "КБК, ОКТМО";
	ТаблицаРасчетов.Свернуть(КолонкиГруппировок, "СуммаНалога");
	ТаблицаРасчетов.Сортировать(КолонкиГруппировок);
	
	// Если нет налога к уплате или возврату, то нужно выводить пустой раздел 1.
	Если ТаблицаРасчетов.Количество() = 0 Тогда
		СтрокаРасчета = ТаблицаРасчетов.Добавить();
		СтрокаРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности;
		СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика;
	КонецЕсли;
	
	ТаблицаСведенийОСуммахНалога = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	Для Каждого РезультатРасчета Из ТаблицаРасчетов Цикл
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		Если РезультатРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности Тогда
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалогаИП(РезультатРасчета, ПризнакиУплатыВозврата, ВыбраннаяФорма3НДФЛ, ТаблицаДанныхЗаполнения);
		Иначе
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата);
		КонецЕсли;
	КонецЦикла;
	
	// При возврате НДФЛ может возникнуть ситуация, когда налог к уплате отсутствует.
	// В таком случае все равно нужно заполнить п. 2 Раздела 1 при наличии доходов от предпринимательской деятельности.
	Если ЗаполнятьИсчисленныеАвансовыеПлатежи(ВыбраннаяФорма3НДФЛ)
		И ЕстьДоходыОтПредпринимательскойДеятельности(ТаблицаДанныхЗаполнения)
		И ТаблицаРасчетов.Найти(СписокКБК.ДоходыОтПредпринимательскойДеятельности, "КБК") = Неопределено Тогда
		
		РезультатРасчета = Новый Структура();
		РезультатРасчета.Вставить("КБК", СписокКБК.ДоходыОтПредпринимательскойДеятельности);
		РезультатРасчета.Вставить("ОКТМО", ОКТМОналогоплательщика);
		РезультатРасчета.Вставить("СуммаНалога", 0);
		
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалогаИП(РезультатРасчета, ПризнакиУплатыВозврата, ВыбраннаяФорма3НДФЛ, ТаблицаДанныхЗаполнения);
		
	КонецЕсли;
	
	Возврат ТаблицаСведенийОСуммахНалога;
	
КонецФункции

Процедура РассчитатьСуммуДоходовНеПодлежащуюНалогообложению_2021(ТаблицаДанныхЗаполнения, ВидДохода, НалоговаяСтавка, НеоблагаемыеСуммыДоходов)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ВидДохода", ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетДоходовНеПодлежащихНалогообложению = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
	
	ОбщаяСуммаВыигрышей = 0;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок
			И ЗначениеЗаполнено(СтруктураДанных.ИННИсточникаДоходаРФ) Тогда
			РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков =
				РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков + СтруктураДанных.СуммаДоходаРФ;
		ИначеЕсли СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
			ОбщаяСуммаВыигрышей = ОбщаяСуммаВыигрышей + СтруктураДанных.СуммаДоходаРФ;
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению =
		Мин(РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков, НеоблагаемыеСуммыДоходов.Подарок);
	
	РасчетДоходовНеПодлежащихНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению =
		Мин(ОбщаяСуммаВыигрышей, НеоблагаемыеСуммыДоходов.Лотереи);
	
	РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению =
		РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению
		+ РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению
		+ РасчетДоходовНеПодлежащихНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению;
	
	Если РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению <> 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = ВидДохода;
		НоваяСтрока.НалоговаяСтавка = НалоговаяСтавка;
		НоваяСтрока.СтруктураДанных = РасчетДоходовНеПодлежащихНалогообложению;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2022кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2022(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	СоответствиеДоходовИсточникам = СоответствиеДоходовИсточникам(ВыбраннаяФорма3НДФЛ);
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	ОтборСтрок.Вставить("ВидДохода", СоответствиеДоходовИсточникам.Получить(ОтборСтрок.Вид));
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
	Иначе
	
		КодыВидовОпераций = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
		ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ);
		
		// Соберем доходы и вычеты от всех брокеров в одну таблицу.
		// Заодно преобразуем коды видов доходов в коды видов операций.
		ТаблицаВидовОпераций = ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций);
		ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(
				ТаблицаДоходовВычетов, НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаВидовОпераций);
			НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
		КонецЦикла;
		
		ТаблицаДоходовВычетов.Свернуть("КодДохода, КодУбытка",
			"ЦенныеБумагиСуммаДохода, ЦенныеБумагиСуммаРасходовПоРеализации, ЦенныеБумагиСуммаУбытка,
			|ЦенныеБумагиСуммаПрибылиКВычету, ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
		
		// Дополним убытками прошлых лет
		ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(
			ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций);
		
		// Заполнение показателей декларации
		СтрокаЭталон = НайденныеСтроки[0];
		МассивКодовОпераций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовВычетов, "КодДохода", Истина);
		Для Каждого КодВидаОперации Из МассивКодовОпераций Цикл
			
			СуммаВычетов = 0;
			ИтогоУбыток = 0;
			
			СтруктураДанных = НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами();
			СтруктураДанных.ЦенныеБумагиВидОперации = КодВидаОперации;
			СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокНеУчитывается;
			
			СтрокиОперации = ТаблицаДоходовВычетов.НайтиСтроки(Новый Структура("КодДохода", КодВидаОперации));
			Для Каждого НайденнаяСтрока Из СтрокиОперации Цикл
				
				Для Каждого Колонка Из ТаблицаДоходовВычетов.Колонки Цикл
					
					Если СтруктураДанных.Свойство(Колонка.Имя) И ТипЗнч(СтруктураДанных[Колонка.Имя]) = Тип("Число") Тогда
						СтруктураДанных[Колонка.Имя] = СтруктураДанных[Колонка.Имя] + НайденнаяСтрока[Колонка.Имя];
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.КодУбытка) Тогда
					СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокУчитывается;
					
					СтрокаКодУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.НайтиПоЗначению(НайденнаяСтрока.КодУбытка);
					Если СтрокаКодУбытка = Неопределено Тогда
						СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Добавить(НайденнаяСтрока.КодУбытка);
						СтруктураДанных.ЦенныеБумагиСуммаУбытка.Добавить(НайденнаяСтрока.ЦенныеБумагиСуммаУбытка);
					Иначе
						ИндексКодаУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Индекс(СтрокаКодУбытка);
						СтрокаСуммаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[ИндексКодаУбытка];
						СтрокаСуммаУбытка.Значение = СтрокаСуммаУбытка.Значение + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
					КонецЕсли;
					
					// Накапливаем сумму убытков
					СуммаВычетов = СуммаВычетов + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
					ИтогоУбыток = ИтогоУбыток + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = ИтогоУбыток;
			СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = СтруктураДанных.ЦенныеБумагиСуммаРасходовПоРеализации;
			
			// Учитываем ограничение - сумма вычетов не может превышать сумму дохода
			СуммаВычетов = СуммаВычетов
				+ СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы
				+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету
				+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
			
			Если СуммаВычетов > СтруктураДанных.ЦенныеБумагиСуммаДохода Тогда
				ДоступныйВычет = СтруктураДанных.ЦенныеБумагиСуммаДохода;
				
				СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = Мин(СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
				
				СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету;
				
				СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
				
				// Ограничим общую сумму убытка, принимаемую к вычету
				СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = Мин(СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка, ДоступныйВычет);
				
				// Распределим доступный вычет по строкам убытков
				КоличествоСтрокУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка.Количество() - 1;
				Для Индекс = 0 По КоличествоСтрокУбытка Цикл
					СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[Индекс];
					СтрокаУбытка.Значение = Мин(СтрокаУбытка.Значение, ДоступныйВычет);
					ДоступныйВычет = ДоступныйВычет - СтрокаУбытка.Значение;
				КонецЦикла;
				
				// Удалим пустые строки убытков
				Для Индекс = 0 По КоличествоСтрокУбытка Цикл
					СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[КоличествоСтрокУбытка - Индекс];
					Если Не ЗначениеЗаполнено(СтрокаУбытка.Значение) Тогда
						СтруктураДанных.ЦенныеБумагиСуммаУбытка.Удалить(СтрокаУбытка);
						СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Удалить(КоличествоСтрокУбытка - Индекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Запишем строку операций с ценными бумагами в ТаблицаДанныхЗаполнения
			Если СтруктураДанных.ЦенныеБумагиСуммаДохода <> 0 Тогда
				
				КоличествоНайденных = НайденныеСтроки.Количество();
				Если КоличествоНайденных = 0 Тогда
					
					СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон);
					СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
					
				ИначеЕсли КоличествоНайденных > 0 И НайденныеСтроки[0].СтруктураДанных.Свойство("ЦенныеБумагиСуммаДохода") Тогда
					
					ИсключаемыеСвойства = Новый Массив;
					ИсключаемыеСвойства.Добавить("СуммаНалогаИсчисленная");
					ИсключаемыеСвойства.Добавить("СуммаНалогаУплаченнаяУдержанная");
					ИсключаемыеСвойства.Добавить("СуммаОблагаемогоДохода");
					
					СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон, , СтрСоединить(ИсключаемыеСвойства, ","));
					СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
					
				Иначе
					// В существующий доход добавим недостающие ключи значений
					Для Каждого ТекущийПараметр Из СтруктураДанных Цикл
						НайденныеСтроки[0].СтруктураДанных.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	СсылкаВидДохода = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду(КодыВидовДоходовЦенныеБумаги().Вклады);
	ОтборСтрок.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами;
	ОтборСтрок.ВидДохода = СоответствиеДоходовИсточникам.Получить(СсылкаВидДохода);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Расчет общей суммы полученного дохода по вкладам
		// НДФЛ облагается сумма, полученная по вкладам свыше облагамого дохода:
		// 1 млн.руб. * Ключевая ставка ЦБ РФ
		ПолученныйДоходВклады = 0;
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ПолученныйДоходВклады = ПолученныйДоходВклады + ТекущаяСтрока.СуммаОблагаемогоДохода;
		КонецЦикла;
		
		НеоблагаемыйДоход = НеоблагаемыйДоходПоВкладам(ВыбраннаяФорма3НДФЛ) * КлючеваяСтавкаЦБ(ВыбраннаяФорма3НДФЛ) / 100;
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			Если НеоблагаемыйДоход > 0 Тогда
				ОблагаемыйДоход = Мин(ТекущаяСтрока.СуммаОблагаемогоДохода, НеоблагаемыйДоход);
				ТекущаяСтрока.СтруктураДанных.Вставить("НеоблагаемыйДоходВклады", ОблагаемыйДоход);
				НеоблагаемыйДоход = НеоблагаемыйДоход - ОблагаемыйДоход;
			Иначе
				ТекущаяСтрока.СтруктураДанных.Вставить("НеоблагаемыйДоходВклады", 0);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаНалоговойБазы2022(ТаблицаДанныхЗаполнения, ПределыВычетов, ВыбраннаяФорма3НДФЛ)
	
	НалоговыеСтавки = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма3НДФЛ);
	
	// Сформируем таблицу расчета налоговой базы для Раздела 2 Декларации 3-НДФЛ.
	// В расчет необходимо собрать все суммы дохода по каждому виду
	// и указанные пользователем вычеты для конкретного вида дохода.
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаНалоговойБазы = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяУплате", ОписаниеТипаЧисло);
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяВозврату", ОписаниеТипаЧисло);
	
	ДоходыВычеты = ТаблицаДанныхРасчетаНалоговыхБаз(ТаблицаДанныхЗаполнения, НалоговыеСтавки, ВыбраннаяФорма3НДФЛ);
	
	УчтенныеДоходы = Новый ТаблицаЗначений;
	УчтенныеДоходы.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	УчтенныеДоходы.Колонки.Добавить("НалоговаяСтавкаСтрокой", ОбщегоНазначения.ОписаниеТипаСтрока(5));
	
	Отбор = Новый Структура("ВидДохода, НалоговаяСтавкаСтрокой");
	
	СуммаНакопительнымИтогом = 0;
	
	ИндексСтроки = 0;
	КоличествоСтрок = ДоходыВычеты.Количество();
	
	СоответствиеДоходовИсточникам = СоответствиеДоходовИсточникам(ВыбраннаяФорма3НДФЛ);
	
	// По каждому виду дохода соберем суммы доходов, расходов и положенных вычетов.
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		
		ТекущаяСтрока = ДоходыВычеты[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидДохода)
			Или Не ЗначениеЗаполнено(ТекущаяСтрока.Вид)
			Или УчтенныеДоходы.НайтиСтроки(Отбор).Количество() <> 0 Тогда
				
			Продолжить;
		КонецЕсли;
		
		РасчетНалоговойБазы = НоваяСтруктураРасчетаНалоговойБазы(
			ТекущаяСтрока.НалоговаяСтавкаСтрокой,
			ТекущаяСтрока.ВидДохода);
		ДобавитьРасчетНалоговойБазыПоВидуДохода(ТекущаяСтрока.Вид, ТекущаяСтрока.СтруктураДанных, РасчетНалоговойБазы);
		
		// Для каждой налоговой базы необходимо сложить сумму доходов, расходов и указанных вычетов
		Для Индекс = ИндексСтроки + 1 По КоличествоСтрок - 1 Цикл
			
			СтрокаТаблицы = ДоходыВычеты[Индекс];
			Если Не СтавкаСоответствуетТекущейНалоговойБазе(СтрокаТаблицы.Вид,
				ТекущаяСтрока.НалоговаяСтавкаСтрокой,
				СтрокаТаблицы.НалоговаяСтавкаСтрокой) Тогда
				// Другая налоговая база
				Продолжить;
			КонецЕсли;
			
			РаспределениеВычета = Неопределено;
			Если СтрокаТаблицы.ВидДохода = ""
				И СтрокаТаблицы.СтруктураДанных.Свойство("РаспределениеВычета", РаспределениеВычета)
				И ТипЗнч(РаспределениеВычета) = Тип("Соответствие") Тогда
				
				СуммаРаспределенияВычета = 0;
				// Зачтём сумму вычета, указанную при распределении по конкретному виду дохода
				// Для одного вида дохода может быть несколько источников
				Для Каждого ТекущееРаспределениеВычета Из РаспределениеВычета Цикл
					Если СоответствиеДоходовИсточникам.Получить(ТекущееРаспределениеВычета.Ключ) <> ТекущаяСтрока.ВидДохода Тогда
						Продолжить;
					КонецЕсли;
					СуммаРаспределенияВычета = СуммаРаспределенияВычета
						+ ?(ЗначениеЗаполнено(ТекущееРаспределениеВычета.Значение), ТекущееРаспределениеВычета.Значение, 0);
				КонецЦикла;
				
				РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + СуммаРаспределенияВычета;
				
			ИначеЕсли ТекущаяСтрока.ВидДохода = СтрокаТаблицы.ВидДохода Тогда
				// Суммируем доход по каждому виду
				ДобавитьРасчетНалоговойБазыПоВидуДохода(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетНалоговойБазы);
				
				// Для случаев, когда по одному коду вида дохода имеется несколько источников по разным ОКТМО
				// необходимо сохранить распределение суммы налога по данным ОКТМО для Раздела 1
				Если СтрокаТаблицы.ОКТМО <> ТекущаяСтрока.ОКТМО
					И ЗначениеЗаполнено(СтрокаТаблицы.СуммаНалогаИсчисленная) Тогда
					
					РасчетНалоговойБазы.РаспределениеПоОКТМО.Вставить(ТекущаяСтрока.ОКТМО, ТекущаяСтрока.СуммаНалогаИсчисленная);
					
					СуммаНалогаПоОКТМО = РасчетНалоговойБазы.РаспределениеПоОКТМО.Получить(СтрокаТаблицы.ОКТМО);
					РасчетНалоговойБазы.РаспределениеПоОКТМО.Вставить(СтрокаТаблицы.ОКТМО,
						?(ЗначениеЗаполнено(СуммаНалогаПоОКТМО), СуммаНалогаПоОКТМО, 0)
						+ СтрокаТаблицы.СуммаНалогаИсчисленная);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ДоходыВычеты, ПределыВычетов);
		
		Если ЭтоИдентификаторСтавкиПрогрессивнойШкалы(ТекущаяСтрока.НалоговаяСтавкаСтрокой) Тогда
			РассчитатьПоказателиНалоговойБазыПоПрогрессивнойШкале(РасчетНалоговойБазы, СуммаНакопительнымИтогом);
		КонецЕсли;
		
		Если РасчетНалоговойБазы.ОбщаяСуммаДоходов <> 0 Тогда
			НоваяСтрока = ТаблицаНалоговойБазы.Добавить();
			НоваяСтрока.ВидДохода = ТекущаяСтрока.ВидДохода;
			НоваяСтрока.ОКТМО = ТекущаяСтрока.ОКТМО;
			НоваяСтрока.НалоговаяСтавка = ТекущаяСтрока.НалоговаяСтавка;
			НоваяСтрока.СтруктураДанных = РасчетНалоговойБазы;
			
			СуммаНалога = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате - РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей;
			Если СуммаНалога > 0 Тогда
				НоваяСтрока.СуммаНалогаПодлежащаяУплате = СуммаНалога;
			Иначе
				НоваяСтрока.СуммаНалогаПодлежащаяВозврату = -СуммаНалога;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = УчтенныеДоходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
	КонецЦикла;
	
	// Если нет ни одного дохода или вычета, подается нулевая декларация.
	// Добавляем пустую строку данных для заполнения раздела 2.
	Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
		
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = КодВидаДохода(ВыбраннаяФорма3НДФЛ);
		НоваяСтрока.НалоговаяСтавка = СтавкаНалога(ВыбраннаяФорма3НДФЛ);
		НоваяСтрока.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(
			НоваяСтрока.НалоговаяСтавка,
			НоваяСтрока.ВидДохода);
		
	КонецЕсли;
	
	ДобавитьОбщиеИтогиВычетов(ТаблицаНалоговойБазы, ДоходыВычеты, ПределыВычетов, КоличествоСтрок);
	
	Возврат ТаблицаНалоговойБазы;
	
КонецФункции

Процедура ДобавитьОбщиеИтогиВычетов(ТаблицаНалоговойБазы, ДоходыВычеты, ПределыВычетов, КоличествоСтрокДоРасчета)
	
	// Добавим итоговые значения после расчета налоговых баз
	
	// При распределении вычета по разным видам доходов необходимо рассчитать итоги отдельно
	// для социальных и стандартных вычетов
	
	ВидыВычетов = ВидыСтандартныхИСоциальныхВычетов();
	СуммаНалогаПодлежащаяНалогообложению = 0;
	
	ОтборСтрок = Новый Структура("ВидДохода", "");
	РаспределенныеВычеты = ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	// Рассчитаем итоги вычетов по каждой налоговой ставке
	РассчитанныеНалоговыеСтавки = Новый Массив;
	
	Для Каждого ТекущийВычет Из РаспределенныеВычеты Цикл
		
		Если ВидыВычетов.Найти(ТекущийВычет.Вид) = Неопределено
			Или Не ТекущийВычет.СтруктураДанных.Свойство("РаспределениеВычета")
			Или РассчитанныеНалоговыеСтавки.Найти(ТекущийВычет.НалоговаяСтавка) <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		РасчетНалоговойБазы = НоваяСтруктураРасчетаНалоговойБазы(
			ТекущийВычет.НалоговаяСтавка,
			ТекущийВычет.ВидДохода);
			
		СуммаНалогаПодлежащаяНалогообложению = СуммаНалогаПодлежащаяНалогообложению(
			ТекущийВычет.СтруктураДанных.РаспределениеВычета,
			ДоходыВычеты);
		
		РассчитанныеНалоговыеСтавки.Добавить(ТекущийВычет.НалоговаяСтавка);
		
	КонецЦикла;
	
	Если СуммаНалогаПодлежащаяНалогообложению <> 0 Тогда
		РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(
			ДоходыВычеты,
			РасчетНалоговойБазы,
			СуммаНалогаПодлежащаяНалогообложению,
			ПределыВычетов);
	КонецЕсли;
	
	// Если вычет распределен на конкретный вид дохода, то итоги добавляются в таблицу доходов и вычетов с ключом ПредварительныйРасчет = Истина
	РасчетВычетов = НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов(Ложь);
	
	Для Каждого ТекущаяСтрока Из ДоходыВычеты Цикл
		
		ТекущиеДанные = ТекущаяСтрока.СтруктураДанных;
		
		Если ТипЗнч(ТекущаяСтрока.Вид) = Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц")
			Или Не ЗначениеЗаполнено(ТекущиеДанные)
			Или Не ТекущиеДанные.Свойство("ПредварительныйРасчет")
			Или ТекущиеДанные.ПредварительныйРасчет <> Истина Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийПараметр Из РасчетВычетов Цикл
			
			Если ТекущийПараметр.Ключ = "ПредварительныйРасчет" Или Не ТекущиеДанные.Свойство(ТекущийПараметр.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетВычетов[ТекущийПараметр.Ключ] = РасчетВычетов[ТекущийПараметр.Ключ] + ТекущиеДанные[ТекущийПараметр.Ключ];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов <> 0 Тогда
		НоваяСтрока = ТаблицаНалоговойБазы.Добавить();
		НоваяСтрока.СтруктураДанных = РасчетВычетов;
	КонецЕсли;
	
	// Для распределенного имущественного вычета необходимо рассчитать итоговые показатели
	
	ОтборСтрок.Вставить("Вид", Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости);
	ИмущественныйВычет = ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВидыДоходовНалоговаяБаза = Новый Массив; // Список видов дохода, на которые распределен имущественный вычет
	ОбщаяСтоимостьНедвижимости = 0;
	ОбщаяСуммаПроценты = 0;
	ВычетПрошлыхЛетСтоимость = 0;
	ВычетПрошлыхЛетПроценты = 0;
	
	Для Каждого ТекущаяСтрока Из ИмущественныйВычет Цикл
		
		ДанныеИмущественногоВычета = ТекущаяСтрока.СтруктураДанных;
		
		ОбщаяСтоимостьНедвижимости = ОбщаяСтоимостьНедвижимости + ДанныеИмущественногоВычета.СуммаРасходовНаПриобретениеНедвижимости;
		ОбщаяСуммаПроценты = ОбщаяСуммаПроценты + ДанныеИмущественногоВычета.СуммаПроцентовПоКредитуНаНедвижимость;
		
		Если ДанныеИмущественногоВычета.Свойство("РаспределениеВычета") Тогда
			Для Каждого ТекущееРаспределение Из ДанныеИмущественногоВычета.РаспределениеВычета Цикл
				Если ВидыДоходовНалоговаяБаза.Найти(ТекущееРаспределение.Ключ) = Неопределено Тогда
					ВидыДоходовНалоговаяБаза.Добавить(ТекущееРаспределение.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ВычетПрошлыхЛетСтоимость = ВычетПрошлыхЛетСтоимость + ДанныеИмущественногоВычета.ВычетПрошлыхЛетСтоимость;
		ВычетПрошлыхЛетПроценты = ВычетПрошлыхЛетПроценты + ДанныеИмущественногоВычета.ВычетПрошлыхЛетПроценты;
		
	КонецЦикла;
	
	ВычетРаспределенПоКонкретнымДоходам = (ВидыДоходовНалоговаяБаза.Количество() > 0);
	НалоговаяБаза = 0;
	
	Для Каждого ТекущаяСтрока Из ДоходыВычеты Цикл
		
		Если ВычетРаспределенПоКонкретнымДоходам И ВидыДоходовНалоговаяБаза.Найти(ТекущаяСтрока.Вид) <> Неопределено
			Или Не ВычетРаспределенПоКонкретнымДоходам Тогда
			
			Если ТекущаяСтрока.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
				// Если доход был добавлен руками, то налоговая база вычисляется по соответствующим полям
				Если ТекущаяСтрока.СтруктураДанных.Свойство("ОбщаяСуммаДоходаИП") Тогда
					НалоговаяБаза = НалоговаяБаза + ТекущаяСтрока.СтруктураДанных.ОбщаяСуммаДоходаИП
						- ТекущаяСтрока.СтруктураДанных.ОбщаяСуммаВычетаИП;
				Иначе
					// Сумма профессионального вычета применяется максимально выгодная для ИП
					// либо 20% от доходов (4 абзац пункта 1 статьи 221 НК РФ)
					// либо в сумме потвержденных расходов (1 абзац пункта 1 статьи 221 НК РФ)
					ОбщаяСуммаВычетаИП = Макс(ТекущаяСтрока.СтруктураДанных.СуммаРасходовИП,
						ТекущаяСтрока.СтруктураДанных.СуммаРасходовВПределахНормативаИП);
					НалоговаяБаза = НалоговаяБаза + ТекущаяСтрока.СтруктураДанных.СуммаДоходаИП - ОбщаяСуммаВычетаИП;
				КонецЕсли;
			Иначе
				НалоговаяБаза = НалоговаяБаза + ТекущаяСтрока.СуммаОблагаемогоДохода;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НалоговаяБаза = НалоговаяБаза - РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов;
	
	Если ОбщаяСтоимостьНедвижимости > 0 Тогда
		
		// Вычет по стоимости, принятый к учету в предыдущие годы. Не может превышать предела.
		ВычетПрошлыхЛет = Мин(ПределыВычетов.НаПриобретениеНедвижимостиСтоимость, ВычетПрошлыхЛетСтоимость);
		
		МаксимальныйВычет = Мин(ПределыВычетов.НаПриобретениеНедвижимостиСтоимость, ОбщаяСтоимостьНедвижимости);
		ДоступныйВычет = Макс(0, МаксимальныйВычет - ВычетПрошлыхЛет);
		СтоимостьКВычету = Мин(ДоступныйВычет, НалоговаяБаза);
		ОстатокСтоимостиНаКонец = МаксимальныйВычет - ВычетПрошлыхЛет - СтоимостьКВычету;
		
		ДанныеИмущественногоВычета.Вставить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", НалоговаяБаза);
		ДанныеИмущественногоВычета.Вставить("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", ВычетПрошлыхЛет);
		ДанныеИмущественногоВычета.Вставить("СуммаРасходовНаПриобретениеНедвижимостиКВычету", СтоимостьКВычету);
		ДанныеИмущественногоВычета.Вставить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", ОстатокСтоимостиНаКонец);
		
		ДоступныйВычет = Макс(0, ОбщаяСуммаПроценты - ВычетПрошлыхЛетПроценты);
		ПроцентыКВычету = Мин(НалоговаяБаза - СтоимостьКВычету, ДоступныйВычет);
		ОстатокПроцентыНаКонец = Макс(0, ОбщаяСуммаПроценты - ВычетПрошлыхЛетПроценты - ПроцентыКВычету);
		
		// Сумма процентов к вычету с учетом ограничения, но без учета размера налоговой базы.
		ДанныеИмущественногоВычета.Вставить("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", ВычетПрошлыхЛетПроценты);
		ДанныеИмущественногоВычета.Вставить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",  ПроцентыКВычету);
		ДанныеИмущественногоВычета.Вставить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", ОстатокПроцентыНаКонец);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаНалогаПодлежащаяНалогообложению(РаспределениеВычета, ДоходыВычеты)
	
	Результат = 0;
	
	Для Каждого ТекущийДоход Из РаспределениеВычета Цикл
		
		Отбор = Новый Структура("Вид", ТекущийДоход.Ключ);
		СтрокиОтбора = ДоходыВычеты.НайтиСтроки(Отбор);
		Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
			Результат = Результат + ТекущаяСтрока.СуммаОблагаемогоДохода;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтавкаСоответствуетТекущейНалоговойБазе(ВидДоходаВычета, НалоговаяСтавка, ПроверяемаяСтавка)
	
	Если ТипЗнч(ВидДоходаВычета) = Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц") Тогда
		// Налоговая ставка должна соответствовать рассчитываемой налоговой базе
		Результат = (НалоговаяСтавка = ПроверяемаяСтавка);
	Иначе
		// В случае вычета необходимо проверить, подходит ли он для рассчитываемой налоговой базы, после его распределения
		ДоступныеСтавкиВычета = СтрРазделить(ПроверяемаяСтавка, ",");
		Результат = ДоступныеСтавкиВычета.Найти(НалоговаяСтавка) <> Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НалоговаяСтавкаПоКодуВидаДохода(КодВидаДохода, НалоговыеСтавки, СтавкаПоУмолчанию = "")
	
	Результат = "";
	
	Результат = НалоговыеСтавки.Получить(КодВидаДохода);
	Если Не ЗначениеЗаполнено(Результат) И СтавкаПоУмолчанию = "" Тогда
		Результат = ПомощникЗаполнения3НДФЛКлиентСервер.ИдентификаторСтавкиПрогрессивнойШкалы();
	ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
		Результат = СтавкаПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаДанныхРасчетаНалоговыхБаз(ТаблицаДанныхЗаполнения, НалоговыеСтавки, ВыбраннаяФорма)

	ДоходыВычеты = ТаблицаДанныхЗаполнения.Скопировать();
	ДоходыВычеты.Колонки.Добавить("ПорядокРасчета", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	// Порядок расчета налоговых баз:
	// сначала рассчитываются налоговые базы по прогрессивной шкале, где
	// дивиденды и прибыль КИК рассчитываются отдельно, т.к. к ним не применяются налоговые вычеты
	
	ИдентификаторПрогрессивнойШкалы = ПомощникЗаполнения3НДФЛКлиентСервер.ИдентификаторСтавкиПрогрессивнойШкалы();
	СоответствиеДоходовИсточникам = СоответствиеДоходовИсточникам(ВыбраннаяФорма);
	
	КодыПрибыльКИК = Новый Массив;
	КодыПрибыльКИК.Добавить(СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК));
	КодыПрибыльКИК.Добавить(СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК_ИСБОЮЛ));
	КодыПрибыльКИК.Добавить(СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ФиксированнаяПрибыльКИК));
	
	КодДоходаДивиденды = СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды);
	КодДоходаИП = СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	
	ПорядокРасчета = Новый Соответствие;
	
	Для Каждого ТекущаяСтавка Из НалоговыеСтавки Цикл
		Если ТекущаяСтавка.Ключ = КодДоходаИП Тогда
			ПорядокРасчета.Вставить(ТекущаяСтавка.Ключ, 1);
		ИначеЕсли ТекущаяСтавка.Ключ = КодДоходаДивиденды Тогда
			ПорядокРасчета.Вставить(ТекущаяСтавка.Ключ, 3);
		ИначеЕсли КодыПрибыльКИК.Найти(ТекущаяСтавка.Ключ) <> Неопределено Тогда
			ПорядокРасчета.Вставить(ТекущаяСтавка.Ключ, 4);
		ИначеЕсли ТекущаяСтавка.Значение = ИдентификаторПрогрессивнойШкалы Тогда
			ПорядокРасчета.Вставить(ТекущаяСтавка.Ключ, 2);
		Иначе
			ПорядокРасчета.Вставить(ТекущаяСтавка.Ключ, 5);
		КонецЕсли;
	КонецЦикла;
	
	УказанныеДоходы = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из ДоходыВычеты Цикл
		
		Если ТипЗнч(ТекущаяСтрока.Вид) = Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц") Тогда
			
			УказанныеДоходы.Вставить(ТекущаяСтрока.Вид, ТекущаяСтрока.ВидДохода);
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВидДохода) Тогда
				ТекущаяСтрока.ПорядокРасчета = ПорядокРасчета.Получить(ТекущаяСтрока.ВидДохода);
			Иначе
				ТекущаяСтрока.ПорядокРасчета = 6;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ПорядокРасчета = 7;
		КонецЕсли;
		
	КонецЦикла;
	
	// Порядок определения налоговых баз указан в Порядке заполнения декларации.
	// Признак, указывающий на принадлежность вида дохода к конкретной базе - ставка налога.
	// Для каждого вычета проставим признак принадлежности к налоговой базе.
	
	ДоходыВычеты.Колонки.Добавить("НалоговаяСтавкаСтрокой", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДоходыВычеты.Сортировать("ПорядокРасчета Возр, ВидДохода Убыв, СуммаОблагаемогоДохода Убыв");
	ДоходыВычеты.Индексы.Добавить("ВидДохода, НалоговаяСтавкаСтрокой");
	
	Для Каждого ТекущаяСтрока Из ДоходыВычеты Цикл
		
		Если ТипЗнч(ТекущаяСтрока.Вид) = Тип("ПеречислениеСсылка.ВычетыФизическихЛиц") Тогда
			
			УказаноРаспределениеВычета = ТекущаяСтрока.СтруктураДанных.Свойство("РаспределениеВычета");
			// Если указан один доход, тогда вычет распределяется на этот доход
			Если УказанныеДоходы.Количество() = 1 Или Не УказаноРаспределениеВычета Тогда
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидДохода) Тогда
					Для Каждого ТекущийДоход Из УказанныеДоходы Цикл
						ТекущаяСтрока.ВидДохода = ТекущийДоход.Значение;
					КонецЦикла;
				КонецЕсли;
				
				ТекущаяСтрока.НалоговаяСтавкаСтрокой = НалоговаяСтавкаПоКодуВидаДохода(
					ТекущаяСтрока.ВидДохода,
					НалоговыеСтавки,
					ТекущаяСтрока.НалоговаяСтавка);
				
			ИначеЕсли УказаноРаспределениеВычета Тогда
				
				НалоговаяСтавка = Новый Массив;
				
				Для Каждого ТекущийДоход Из ТекущаяСтрока.СтруктураДанных.РаспределениеВычета Цикл
					
					Если Не ЗначениеЗаполнено(ТекущийДоход.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					КодДохода = УказанныеДоходы.Получить(ТекущийДоход.Ключ);
					Если КодДохода <> Неопределено Тогда
						НалоговаяСтавка.Добавить(НалоговаяСтавкаПоКодуВидаДохода(КодДохода, НалоговыеСтавки));
					КонецЕсли;
					
				КонецЦикла;
				
				ТекущаяСтрока.ВидДохода = "";
				ТекущаяСтрока.НалоговаяСтавкаСтрокой = СтрСоединить(НалоговаяСтавка, ",");
			Иначе
				ТекущаяСтрока.НалоговаяСтавкаСтрокой = ПомощникЗаполнения3НДФЛКлиентСервер.ИдентификаторСтавкиПрогрессивнойШкалы();
			КонецЕсли;
			
		Иначе
		
		ТекущаяСтрока.НалоговаяСтавкаСтрокой = НалоговаяСтавкаПоКодуВидаДохода(
			ТекущаяСтрока.ВидДохода,
			НалоговыеСтавки,
			ТекущаяСтрока.НалоговаяСтавка);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоходыВычеты;
	
КонецФункции

Процедура РассчитатьПоказателиНалоговойБазыПоПрогрессивнойШкале(РасчетНалоговойБазы, СуммаНакопительнымИтогом)
	
	ПределНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	НалоговыеСтавкиПоУмолчанию = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию();
	
	Если СуммаНакопительнымИтогом + РасчетНалоговойБазы.НалоговаяБаза > ПределНалоговойБазы Тогда
		
		НалоговаяБазаПоУмолчанию = Макс(ПределНалоговойБазы - СуммаНакопительнымИтогом, 0);
		НалоговаяБазаВышеПредела = Макс(РасчетНалоговойБазы.НалоговаяБаза - НалоговаяБазаПоУмолчанию, 0);
		
		РасчетНалоговойБазы.СуммаНалогаИсчисленнаяСПревышения = Окр(
			НалоговаяБазаВышеПредела * НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛПовышенная / 100, 0);
		
		РасчетНалоговойБазы.СуммаНалогаИсчисленная = Окр(
			НалоговаяБазаПоУмолчанию * НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛ / 100
			+ РасчетНалоговойБазы.СуммаНалогаИсчисленнаяСПревышения, 0);
		
		СуммаНалогаВсего = РасчетНалоговойБазы.СуммаНалогаИсчисленная
			- РасчетНалоговойБазы.СуммаНалогаУдержанная
			- РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства;
		
		Если СуммаНалогаВсего > 0 Тогда
			РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате = СуммаНалогаВсего;
			РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату = 0;
		Иначе
			РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате = 0;
			РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату = - СуммаНалогаВсего;
		КонецЕсли;
		
		РасчетНалоговойБазы.СуммаНалоговойБазыПоОсновнойПоСтавке = НалоговаяБазаПоУмолчанию;
		РасчетНалоговойБазы.СуммаНалоговойБазыПоПовышеннойСтавке = НалоговаяБазаВышеПредела;
		
		Если НалоговаяБазаПоУмолчанию = 0 Тогда
			РасчетНалоговойБазы.НалоговаяСтавка = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛПовышенная;
		КонецЕсли;
		
	Иначе
		РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате
			+ РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей;
		РасчетНалоговойБазы.СуммаНалоговойБазыПоОсновнойПоСтавке = РасчетНалоговойБазы.НалоговаяБаза;
	КонецЕсли;
	
	РасчетНалоговойБазы.СуммаНалогаИсчисленнаяКУплате = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате;
	СуммаНакопительнымИтогом = СуммаНакопительнымИтогом + РасчетНалоговойБазы.НалоговаяБаза;
	
КонецПроцедуры

Функция КлючеваяСтавкаЦБ(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		// Федеральный закон от 26.03.2022 N 67-ФЗ
		// максимальное значение ключевой ставки на 1 число каждого месяца в отчетном году
		Возврат 15;
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2023кв1" Тогда
		Возврат 8.5;
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2022кв1" Тогда
		Возврат 4.25;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция НеоблагаемыйДоходПоВкладам(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = "ФормаОтчета2024кв1" Или ВыбраннаяФорма = "ФормаОтчета2022кв1" Тогда
		Возврат 1000000;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоясненияРасчетаНалогаВДекларации2022(ПоясненияРасчетаНалога, ТаблицаНалоговойБазы, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ВидДоходаПоУмолчанию = КодВидаДохода(ВыбраннаяФорма3НДФЛ);
	СтавкаПоУмолчанию = СтавкаНалога(ВыбраннаяФорма3НДФЛ);
	
	Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
		
		РасчетНалога = ТаблицаНалоговойБазы.Добавить();
		РасчетНалога.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(СтавкаПоУмолчанию, ВидДоходаПоУмолчанию);
		
	КонецЕсли;
	
	ВидДоходаДивиденды = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "Дивиденды");
	ВидДоходаПрибыльКИК = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "ПрибыльКИК");
	ВидДоходаВклады = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "БанковскиеПроценты");
	
	СовокупностьНалоговыхБаз = Новый Соответствие;
	
	Для Каждого СтрокаНалоговойБазы Из ТаблицаНалоговойБазы Цикл
		
		Если Не СтрокаНалоговойБазы.СтруктураДанных.Свойство("НалоговаяСтавкаСтрокой") Тогда
			// Общие итоги по вычетам пропускаем
			Продолжить;
		КонецЕсли;
		
		РасчетНалога = СтрокаНалоговойБазы.СтруктураДанных; // см. НоваяСтруктураРасчетаНалоговойБазы
		
		НалоговаяСтавкаСтрока = РасчетНалога.НалоговаяСтавкаСтрокой;
		
		Если РасчетНалога.ВидДохода = ВидДоходаПоУмолчанию Тогда
			ОсвобождениеОтНалога = ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога;
		Иначе
			ОсвобождениеОтНалога = 0;
		КонецЕсли;
		
		Постфикс = "";
		Если РасчетНалога.ВидДохода = ВидДоходаДивиденды Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'Налог с дивидендов по ставке %1%%'"), НалоговаяСтавкаСтрока);
			Порядок = 3;
			Постфикс = УказательНалоговойБазыДивиденды();
		ИначеЕсли РасчетНалога.ВидДохода = ВидДоходаПрибыльКИК Тогда
			Пояснение = НСтр("ru = 'Налог с прибыли КИК'");
			Порядок = 4;
			Постфикс = УказательНалоговойБазыКИК();
		ИначеЕсли ЭтоИдентификаторСтавкиПрогрессивнойШкалы(РасчетНалога.НалоговаяСтавкаСтрокой) Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'Налог по ставке %1%%'"), НалоговаяСтавкаСтрока);
			Порядок = 1;
		Иначе
			Пояснение = СтрШаблон(НСтр("ru = 'Налог по ставке %1%%'"), НалоговаяСтавкаСтрока);
			Порядок = 2;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Постфикс) Тогда
			КлючНалоговойБазы = СтрШаблон("%1_%2", НалоговаяСтавкаСтрока, Постфикс);
		Иначе
			КлючНалоговойБазы = НалоговаяСтавкаСтрока;
		КонецЕсли;
		
		Показатели = СовокупностьНалоговыхБаз.Получить(КлючНалоговойБазы);
		Если Показатели = Неопределено Тогда
			Показатели = НовыйПоказателиНалоговыхБаз();
		КонецЕсли;
		
		Показатели.Порядок = Порядок;
		Показатели.Пояснение = Пояснение;
		Показатели.Ставка = РасчетНалога.НалоговаяСтавка;
		
		Показатели.Доходы = Показатели.Доходы
			+ РасчетНалога.ОбщаяСуммаДоходовПодлежащаяНалогообложению
			+ РасчетНалога.ОбщаяСуммаДоходовКИК;
		
		Показатели.УдержанныйНалог = Показатели.УдержанныйНалог
			+ РасчетНалога.СуммаНалогаУдержанная
			+ РасчетНалога.СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			
		Показатели.УменьшениеНалога = Показатели.УменьшениеНалога
			+ РасчетНалога.СуммаТорговогоСбора
			+ РасчетНалога.СуммаФиксированныхАвансовыхПлатежей
			+ РасчетНалога.СуммаНалогаИностранногоГосударства;
		
		Показатели.Вычеты = Показатели.Вычеты + РасчетНалога.СуммаНалоговыхВычетов;
		Показатели.Расходы = Показатели.Расходы + РасчетНалога.СуммаРасходов;
		Показатели.СуммаНалогаПСН = Показатели.СуммаНалогаПСН + РасчетНалога.СуммаНалогаПСН;
		Показатели.АвансовыйПлатеж = Показатели.АвансовыйПлатеж + РасчетНалога.СуммаУплаченныхАвансовыхПлатежей;
		Показатели.ОсвобождениеОтНалога = Показатели.ОсвобождениеОтНалога + ОсвобождениеОтНалога;
		Показатели.СуммаНалогаИсчисленная = Показатели.СуммаНалогаИсчисленная + РасчетНалога.СуммаНалогаИсчисленная;
		
		Если РасчетНалога.ВидДохода = ВидДоходаПоУмолчанию Тогда
			Показатели.СуммаКВозврату = Показатели.СуммаКВозврату
				+ Макс(РасчетНалога.СуммаУплаченныхАвансовыхПлатежей - РасчетНалога.СуммаНалогаИсчисленная, 0);
		Иначе
			Показатели.СуммаКВозврату = Показатели.СуммаКВозврату + РасчетНалога.СуммаНалогаПодлежащаяВозврату;
		КонецЕсли;
		
		Показатели.НалоговаяБаза = Показатели.НалоговаяБаза + РасчетНалога.НалоговаяБаза;
		Показатели.НалоговаяБазаПревышение = Показатели.НалоговаяБазаПревышение + РасчетНалога.СуммаНалоговойБазыПоПовышеннойСтавке;
		
		Если СтрокаНалоговойБазы.ВидДохода = ВидДоходаВклады Тогда
			Показатели.КлючеваяСтавка = КлючеваяСтавкаЦБ(ВыбраннаяФорма3НДФЛ);
			Показатели.НеоблагаемыйДоход = НеоблагаемыйДоходПоВкладам(ВыбраннаяФорма3НДФЛ) * Показатели.КлючеваяСтавка / 100;
			Показатели.Доходы = Показатели.Доходы + Показатели.НеоблагаемыйДоход;
		КонецЕсли;
		
		СовокупностьНалоговыхБаз.Вставить(КлючНалоговойБазы, Показатели);
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из СовокупностьНалоговыхБаз Цикл
		
		НоваяСтрока = ПоясненияРасчетаНалога.Строки.Добавить();
		НоваяСтрока.НалоговаяСтавка = ТекущаяСтрока.Значение.Ставка;
		
		НоваяСтрока.Пояснение = ТекущаяСтрока.Значение.Пояснение;
		НоваяСтрока.Порядок = ТекущаяСтрока.Значение.Порядок;
		
		НалоговаяСтавкаСтрока = ИдентификаторНалоговойСтавки(ТекущаяСтрока.Ключ);
		ДобавитьПояснениеРасчета(НоваяСтрока, ТекущаяСтрока.Значение, НалоговаяСтавкаСтрока);
		
	КонецЦикла;
	
	// Если нулевая декларация, добавим пояснение с "нулевым" расчетом налога
	Если СовокупностьНалоговыхБаз.Количество() = 0 Тогда
		НоваяСтрока = ПоясненияРасчетаНалога.Строки.Добавить();
		НоваяСтрока.НалоговаяСтавка = СтавкаПоУмолчанию;
		
		Показатели = НовыйПоказателиНалоговыхБаз();
		Показатели.Доходы = ДанныеПомощникаЗаполнения.ДоходыВычеты.Итог("СуммаДохода");
		Показатели.Вычеты = ДанныеПомощникаЗаполнения.ДоходыВычеты.Итог("СуммаВычета");
		
		ДобавитьПояснениеРасчета(НоваяСтрока, Показатели, Строка(СтавкаПоУмолчанию));
	КонецЕсли;
	
	ПоясненияРасчетаНалога.Строки.Сортировать("Порядок ВОЗР, ВидДохода, НалоговаяСтавка", Ложь);
	
КонецПроцедуры

Функция УказательНалоговойБазыКИК()
	Возврат "КИК";
КонецФункции

Функция УказательНалоговойБазыДивиденды()
	Возврат "Дивиденды";
КонецФункции

Функция ИдентификаторНалоговойСтавки(НалоговаяСтавкаСтрока)
	
	Результат = СтрЗаменить(НалоговаяСтавкаСтрока, УказательНалоговойБазыКИК(), "");
	Результат = СтрЗаменить(Результат, УказательНалоговойБазыДивиденды(), "");
	Результат = СтрЗаменить(Результат, "_", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПоказателиНалоговыхБаз()
	
	Результат = Новый Структура;
	Результат.Вставить("Доходы", 0);
	Результат.Вставить("Вычеты", 0);
	Результат.Вставить("Расходы", 0);
	Результат.Вставить("УдержанныйНалог", 0);
	Результат.Вставить("АвансовыйПлатеж", 0);
	Результат.Вставить("УменьшениеНалога", 0);
	Результат.Вставить("СуммаНалогаПСН", 0);
	Результат.Вставить("ОсвобождениеОтНалога", 0);
	Результат.Вставить("СуммаНалогаИсчисленная", 0);
	Результат.Вставить("СуммаКВозврату", 0);
	Результат.Вставить("Порядок", 0);
	Результат.Вставить("Пояснение", "");
	Результат.Вставить("Ставка", 0);
	Результат.Вставить("НеоблагаемыйДоход", 0);
	Результат.Вставить("КлючеваяСтавка", 0);
	Результат.Вставить("НалоговаяБаза", 0);
	Результат.Вставить("НалоговаяБазаПревышение", 0);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПояснениеРасчета(Результат, ПоказателиРасчета, НалоговаяСтавкаСтрока)
	
	ФорматЧиселВПояснении = "ЧДЦ=2; ЧН=0,00; ЧГ=3,0";
	ОблагаемыеДоходы = ПоказателиРасчета.Доходы;
	СуммаНалоговыхВычетов = ПоказателиРасчета.Вычеты;
	СуммаРасходов = ПоказателиРасчета.Расходы;
	УдержанныйНалог = ПоказателиРасчета.УдержанныйНалог;
	СуммаУплаченныхАвансовыхПлатежей = ПоказателиРасчета.АвансовыйПлатеж;
	УменьшениеНалога = ПоказателиРасчета.УменьшениеНалога;
	СуммаНалогаПСН = ПоказателиРасчета.СуммаНалогаПСН;
	ОсвобождениеОтНалога = ПоказателиРасчета.ОсвобождениеОтНалога;
	СуммаНалогаИсчисленная = ПоказателиРасчета.СуммаНалогаИсчисленная;
	СуммаНалогаПодлежащаяВозврату = ПоказателиРасчета.СуммаКВозврату;
	СуммаКУплате = ПоказателиРасчета.СуммаНалогаИсчисленная
		- ПоказателиРасчета.УдержанныйНалог
		- СуммаУплаченныхАвансовыхПлатежей;
	НалоговаяБазаПоОсновнойСтавке = ПоказателиРасчета.НалоговаяБаза - ПоказателиРасчета.НалоговаяБазаПревышение;
	
	// Доходы, подлежащие налогообложению
	Показатель = Результат.Строки.Добавить();
	Показатель.Пояснение = НСтр("ru = 'Доходы, подлежащие налогообложению:'");
	Показатель.Значение = Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении);
	
	// Налоговые вычеты
	Показатель = Результат.Строки.Добавить();
	Показатель.Пояснение = НСтр("ru = 'Налоговые вычеты:'");
	Показатель.Значение = Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении);
	
	// Расходы, уменьшающие налог
	Если СуммаРасходов > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Расходы, уменьшающие налог:'");
		Показатель.Значение = Формат(СуммаРасходов, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Доходы, необлагаемые при исчислении налога с процентов по вкладам
	Если ПоказателиРасчета.НеоблагаемыйДоход > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = СтрШаблон(НСтр("ru = 'Необлагаемый доход = 1 000 000 * Ключевая ставка ЦБ РФ
		|(1 000 000 * %1%%)'"), ПоказателиРасчета.КлючеваяСтавка);
		Показатель.Значение = Формат(ПоказателиРасчета.НеоблагаемыйДоход, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Удержанный налог
	Если УдержанныйНалог > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Удержанный налог:'");
		Показатель.Значение = Формат(УдержанныйНалог, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Уплаченные авансовые платежи
	Если СуммаУплаченныхАвансовыхПлатежей > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Уплаченные авансовые платежи:'");
		Показатель.Значение = Формат(СуммаУплаченныхАвансовыхПлатежей, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Уменьшение налога
	Если УменьшениеНалога > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Уменьшение налога:'");
		Показатель.Значение = Формат(УменьшениеНалога, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Платежи по патентам, подлежащие зачету
	Если СуммаНалогаПСН > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Платежи по патентам:'");
		Показатель.Значение = Формат(СуммаНалогаПСН, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Освобождение от налога за 2 квартал
	Если СуммаКУплате > 0 И ОсвобождениеОтНалога > 0 Тогда
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Освобождение от налога за 2 квартал:'");
		Показатель.Значение = Формат(ОсвобождениеОтНалога, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Формулы
	
	// Налог исчисленный
	
	СтавкиНалога = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию();
	ПределНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	СуммаНалогаДоПредела = Окр(ПределНалоговойБазы * СтавкиНалога.СтавкаНДФЛ / 100, 0);
	
	ВыводитьНалогЗаГодОтдельно = Не (УдержанныйНалог = 0 И УменьшениеНалога = 0
		И СуммаНалогаПСН = 0 И ОсвобождениеОтНалога = 0
		И СуммаУплаченныхАвансовыхПлатежей = 0);
	
	Если ЭтоИдентификаторСтавкиПрогрессивнойШкалы(НалоговаяСтавкаСтрока)
		И ПоказателиРасчета.НалоговаяБазаПревышение > 0 Тогда
		
		Если ПоказателиРасчета.НеоблагаемыйДоход > 0 И СуммаРасходов > 0 Тогда
			ОсновнойТекст = НСтр("ru = 'Налоговая база = Доходы - Налоговые вычеты - Расходы - Необлагаемый доход'");
			ДополнительныйТекст = СтрШаблон("%1 - %2 - %3 - %4",
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении),
				Формат(СуммаРасходов, ФорматЧиселВПояснении),
				Формат(ПоказателиРасчета.НеоблагаемыйДоход, ФорматЧиселВПояснении));
		ИначеЕсли СуммаРасходов > 0 Тогда
			ОсновнойТекст = НСтр("ru = 'Налоговая база = Доходы - Налоговые вычеты - Расходы'");
			ДополнительныйТекст = СтрШаблон("%1 - %2 - %3",
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении),
				Формат(СуммаРасходов, ФорматЧиселВПояснении));
		ИначеЕсли ПоказателиРасчета.НеоблагаемыйДоход > 0 Тогда
			ОсновнойТекст = НСтр("ru = 'Налоговая база = Доходы - Налоговые вычеты - Необлагаемый доход'");
			ДополнительныйТекст = СтрШаблон("%1 - %2 - %3",
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении),
				Формат(ПоказателиРасчета.НеоблагаемыйДоход, ФорматЧиселВПояснении));
		Иначе
			ОсновнойТекст = НСтр("ru = 'Налоговая база = Доходы - Налоговые вычеты'");
			ДополнительныйТекст = СтрШаблон("%1 - %2",
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении));
		КонецЕсли;
		
		Показатель = Результат.Строки.Добавить();
		Показатель.Значение = Формат(ПоказателиРасчета.НалоговаяБаза, ФорматЧиселВПояснении);
		Показатель.Пояснение = СтрШаблон("%1%2(%3)", ОсновнойТекст, Символы.ПС, ДополнительныйТекст);
		
		Если ПоказателиРасчета.НалоговаяБаза = ПоказателиРасчета.НалоговаяБазаПревышение Тогда
			
			Если ВыводитьНалогЗаГодОтдельно Тогда
				ШаблонСтроки = НСтр("ru = 'Налог за год = Налоговая база * Ставка налога
					|(%1 * %2%%)'");
			Иначе
				ШаблонСтроки = НСтр("ru = '<b>Налог к уплате</b> = Налоговая база * Ставка налога
					|(%1 * %2%%)'");
			КонецЕсли;
			
			ОсновнойТекст = СтрШаблон(ШаблонСтроки,
				Формат(ПоказателиРасчета.НалоговаяБаза, ФорматЧиселВПояснении),
				СтавкиНалога.СтавкаНДФЛПовышенная);
			
			Показатель = Результат.Строки.Добавить();
			Показатель.Значение = Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении);
			Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(ОсновнойТекст);
			
		ИначеЕсли НалоговаяБазаПоОсновнойСтавке > 0 И НалоговаяБазаПоОсновнойСтавке <> ПределНалоговойБазы Тогда
			
			// Нужно показать остаток суммы налога по основной ставке
			
			НалогПоОсновнойСтавке = Окр(НалоговаяБазаПоОсновнойСтавке * СтавкиНалога.СтавкаНДФЛ / 100, 0);
			НалогРассчитанныйРанее = СуммаНалогаДоПредела - НалогПоОсновнойСтавке;
			СуммаНалогаПревышение = СуммаНалогаИсчисленная - НалогПоОсновнойСтавке;
			
			ОсновнойТекст = СтрШаблон(НСтр("ru = 'Налог по ставке %1%% = %2 - Налог исчисленный
				|(%2 - %3)'"),
				СтавкиНалога.СтавкаНДФЛ,
				Формат(СуммаНалогаДоПредела, ФорматЧиселВПояснении),
				Формат(НалогРассчитанныйРанее, ФорматЧиселВПояснении));
			
			Показатель = Результат.Строки.Добавить();
			Показатель.Значение = Формат(НалогПоОсновнойСтавке, ФорматЧиселВПояснении);
			Показатель.Пояснение = ОсновнойТекст;
			
			ОсновнойТекст = СтрШаблон(НСтр("ru = 'Налог по ставке %1%% = (Налоговая база + База, рассчитанная ранее - %2) * %1%%
				|(%3 + %4 - %2) * %1%%'"),
				СтавкиНалога.СтавкаНДФЛПовышенная,
				Формат(ПределНалоговойБазы, ФорматЧиселВПояснении),
				Формат(ПоказателиРасчета.НалоговаяБаза, ФорматЧиселВПояснении),
				Формат(ПределНалоговойБазы - НалоговаяБазаПоОсновнойСтавке, ФорматЧиселВПояснении));
			
			Показатель = Результат.Строки.Добавить();
			Показатель.Значение = Формат(СуммаНалогаПревышение, ФорматЧиселВПояснении);
			Показатель.Пояснение = ОсновнойТекст;
			
			Если ВыводитьНалогЗаГодОтдельно Тогда
				ШаблонСтроки = НСтр("ru = 'Налог за год = Налог по ставке %1%% + Налог по ставке %2%%
					|(%3  + %4)'");
			Иначе
				ШаблонСтроки = НСтр("ru = '<b>Налог к уплате</b> = Налог по ставке %1%% + Налог по ставке %2%%
					|(%3  + %4)'");
			КонецЕсли;
			
			ОсновнойТекст = СтрШаблон(ШаблонСтроки,
				СтавкиНалога.СтавкаНДФЛ,
				СтавкиНалога.СтавкаНДФЛПовышенная,
				Формат(НалогПоОсновнойСтавке, ФорматЧиселВПояснении),
				Формат(СуммаНалогаПревышение, ФорматЧиселВПояснении));
			
			Показатель = Результат.Строки.Добавить();
			Показатель.Значение = Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении);
			Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(ОсновнойТекст);
			
		Иначе
			
			Если ВыводитьНалогЗаГодОтдельно Тогда
				ШаблонСтроки = НСтр("ru = 'Налог за год = %1 + (Налоговая база - %2) * Ставка налога
					|(%1 + (%3 - %2) * %4%%)'");
			Иначе	
				ШаблонСтроки = НСтр("ru = '<b>Налог к уплате</b> = %1 + (Налоговая база - %2) * Ставка налога
					|(%1 + (%3 - %2) * %4%%)'");
			КонецЕсли;
			
			ОсновнойТекст = СтрШаблон(ШаблонСтроки,
				Формат(СуммаНалогаДоПредела, ФорматЧиселВПояснении),
				Формат(ПределНалоговойБазы, ФорматЧиселВПояснении),
				Формат(ПоказателиРасчета.НалоговаяБаза, ФорматЧиселВПояснении),
				СтавкиНалога.СтавкаНДФЛПовышенная);
			
			Показатель = Результат.Строки.Добавить();
			Показатель.Значение = Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении);
			Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(ОсновнойТекст);
			
		КонецЕсли;
		
	Иначе
		
		ЧастиФормулыОсновнойТекст = Новый Массив;
		ЧастиФормулыДополнительныйТекст = Новый Массив;
		
		Если ПоказателиРасчета.НеоблагаемыйДоход > 0 Тогда
			ЧастиФормулыОсновнойТекст.Добавить(НСтр("ru = 'Доходы - Налоговые вычеты - Необлагаемый доход'"));
			ЧастиФормулыДополнительныйТекст.Добавить(СтрШаблон("%1 - %2 - %3",
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении),
				Формат(ПоказателиРасчета.НеоблагаемыйДоход, ФорматЧиселВПояснении)));
		Иначе
			ЧастиФормулыОсновнойТекст.Добавить(НСтр("ru = 'Доходы - Налоговые вычеты'"));
			ЧастиФормулыДополнительныйТекст.Добавить(
				СтрШаблон("%1 - %2", 
					Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
					Формат(СуммаНалоговыхВычетов, ФорматЧиселВПояснении)));
		КонецЕсли;
		
		Если СуммаРасходов > 0 Тогда
			ЧастиФормулыОсновнойТекст.Добавить(НСтр("ru = 'Расходы'"));
			ЧастиФормулыДополнительныйТекст.Добавить(Формат(СуммаРасходов, ФорматЧиселВПояснении));
		КонецЕсли;
		
		РассчитываемыйПоказатель = НСтр("ru = 'Налог за год'");
		Если УдержанныйНалог = 0 И УменьшениеНалога = 0
			И СуммаНалогаПСН = 0 И ОсвобождениеОтНалога = 0
			И СуммаУплаченныхАвансовыхПлатежей = 0 Тогда
			
			РассчитываемыйПоказатель = НСтр("ru = '<b>Налог к уплате</b>'");
			
			Результат.ПояснениеСвернуто = СтрШаблон(
				НСтр("ru = 'Налог по ставке %1: к уплате %2 руб.'"),
				НалоговаяСтавкаСтрока,
				Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении));
			
		КонецЕсли;
		Пояснение = СтрШаблон(НСтр(
			"ru = '%1 = (%2) * Ставка налога
			|(%3) * %4%%'"),
			РассчитываемыйПоказатель,
			СтрСоединить(ЧастиФормулыОсновнойТекст, " - "),
			СтрСоединить(ЧастиФормулыДополнительныйТекст, " - "),
			ЗначениеСтавкиНалога(НалоговаяСтавкаСтрока));
		
		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(Пояснение);
		Показатель.Значение = Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении);
	КонецЕсли;
	
	// Налог к уплате / возврату
	Если ВыводитьНалогЗаГодОтдельно Тогда
		
		ОсновнойТекстУменьшениеНалога = Новый Массив;
		ДопТекстУменьшениеНалога = Новый Массив;
		
		Если УдержанныйНалог > 0 Тогда
			ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Удержанный налог'"));
			ДопТекстУменьшениеНалога.Добавить(Формат(УдержанныйНалог, ФорматЧиселВПояснении));
		КонецЕсли;
		
		Если СуммаУплаченныхАвансовыхПлатежей > 0 Тогда
			ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Авансовые платежи'"));
			ДопТекстУменьшениеНалога.Добавить(Формат(СуммаУплаченныхАвансовыхПлатежей, ФорматЧиселВПояснении));
		КонецЕсли;
		
		Если УменьшениеНалога > 0 Тогда
			ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Уменьшение налога'"));
			ДопТекстУменьшениеНалога.Добавить(Формат(УменьшениеНалога, ФорматЧиселВПояснении));
		КонецЕсли;
		
		Если СуммаКУплате - ОсвобождениеОтНалога > 0 Тогда
			
			Если ОсвобождениеОтНалога > 0 Тогда
				ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Освобождение от налога'"));
				ДопТекстУменьшениеНалога.Добавить(Формат(ОсвобождениеОтНалога, ФорматЧиселВПояснении));
			КонецЕсли;
			
			Если СуммаНалогаПСН Тогда
				ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Платежи по патентам'"));
				ДопТекстУменьшениеНалога.Добавить(Формат(СуммаНалогаПСН, ФорматЧиселВПояснении));
			КонецЕсли;
			
			ОсновнойТекст = СтрШаблон(
				НСтр("ru = '<b>Налог к уплате</b> = Налог за год - %1'"),
				СтрСоединить(ОсновнойТекстУменьшениеНалога, " - "));
			
			ДополнительныйТекст = СтрШаблон("%1 - %2",
				Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении),
				СтрСоединить(ДопТекстУменьшениеНалога, " - "));
			
			ЗначениеПоказателя = Макс(0, СуммаКУплате - ОсвобождениеОтНалога - УменьшениеНалога);
			
			Результат.ПояснениеСвернуто = СтрШаблон(
				НСтр("ru = 'Налог по ставке %1: к уплате %2 руб.'"),
				НалоговаяСтавкаСтрока,
				Формат(ЗначениеПоказателя, ФорматЧиселВПояснении));
			
		ИначеЕсли СуммаНалогаПодлежащаяВозврату > 0 Тогда
		
			ЗначениеПоказателя = СуммаНалогаПодлежащаяВозврату;
			
			ОсновнойТекст = СтрШаблон(
				НСтр("ru = '<b>Налог к возврату</b> = %1 - Налог за год'"),
				СтрСоединить(ОсновнойТекстУменьшениеНалога, " + "));
			
			ДополнительныйТекст = СтрШаблон("%1 - %2",
				СтрСоединить(ДопТекстУменьшениеНалога, " + "),
				Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении));
			
			Результат.ПояснениеСвернуто = СтрШаблон(
				НСтр("ru = 'Налог по ставке %1: к возврату %2 руб.'"),
				НалоговаяСтавкаСтрока,
				Формат(СуммаНалогаПодлежащаяВозврату, ФорматЧиселВПояснении));
			
		Иначе
			
			ОсновнойТекст = НСтр("ru = '<b>Налог к уплате</b> = Налог за год - Удержанный налог'");
			ДополнительныйТекст = СтрШаблон("%1 - %2",
				Формат(СуммаНалогаИсчисленная, ФорматЧиселВПояснении),
				Формат(УдержанныйНалог, ФорматЧиселВПояснении));
			ЗначениеПоказателя = Макс(0, СуммаНалогаИсчисленная - УдержанныйНалог);
			
		КонецЕсли;
		
		Пояснение = СтрШаблон("%1%2(%3)", ОсновнойТекст, Символы.ПС, ДополнительныйТекст);

		Показатель = Результат.Строки.Добавить();
		Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(Пояснение);
		Показатель.Значение = Формат(ЗначениеПоказателя, ФорматЧиселВПояснении);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ТаблицаСведенийОСуммахНалога2022(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ОКТМОналогоплательщика, ВыбраннаяФорма3НДФЛ)
	
	ВидДоходаВклады = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "БанковскиеПроценты");
	ВидДоходаОблигации = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "ПроцентПоОблигациям");
	ВидыДоходаФиксПрибыльКИК = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "ФиксированнаяПрибыльКИК");
	ВидДоходаДивиденды = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "Дивиденды");
	
	ВидыДоходаПрибыльКИК = Новый Массив;
	ВидыДоходаПрибыльКИК.Добавить(КодВидаДохода(ВыбраннаяФорма3НДФЛ, "ПрибыльКИК"));
	ВидыДоходаПрибыльКИК.Добавить(КодВидаДохода(ВыбраннаяФорма3НДФЛ, "РаспределениеПрибылиИностраннойСтруктуры"));
	
	СоответствиеДоходовИсточникам = СоответствиеДоходовИсточникам(ВыбраннаяФорма3НДФЛ);
	
	СоответствиеКодаДоходаИдентификаторуКБК = Новый Соответствие;
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда),
		"ДоходыПолученныеОтНалоговыхАгентов");
	
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность),
		"ДоходыОтПредпринимательскойДеятельности");
	
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(ВидДоходаВклады),
		"ДоходыВВидеБанковскихПроцентов");
		
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(ВидДоходаОблигации),
		"ДоходыВВидеПроцентовПоОблигациям");
		
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК),
		"ДоходыСПрибылиКИК");
	
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК_ИСБОЮЛ),
		"ДоходыСПрибылиКИК");
	
	СоответствиеКодаДоходаИдентификаторуКБК.Вставить(
		СоответствиеДоходовИсточникам.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ФиксированнаяПрибыльКИК),
		"ДоходыСПрибылиКИКОсобыйПорядокУплаты");
	
	СписокКБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	ПризнакиУплатыВозврата = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУплатыВозврата(ВыбраннаяФорма3НДФЛ);
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	ТаблицаРасчетов.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРасчетов.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Распределим результаты расчета Раздела 2 по доходам и вычетам.
	// Важно распределить по доходам именно сумму вычетов и расходов, а не результат Раздела 2.
	// Это обусловлено появлением отдельного пункта в Разделе 1 для доходов ИП.
	// Таким образом корректно будет учтено уменьшение доходов ИП на вычеты и расходы, уменьшающие налог.
	КолонкиПоиска = "ВидДохода, НалоговаяСтавка";
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиПоиска);
	
	// Распределяем вычеты и расходы в определенном порядке.
	ПорядокКБК = Новый Массив;
	ПорядокКБК.Добавить(СписокКБК.ДоходыОтПредпринимательскойДеятельности);
	ПорядокКБК.Добавить(СписокКБК.ДоходыОблагаемыеПоПовышеннойСтавке);
	ПорядокКБК.Добавить(СписокКБК.ДоходыПолученныеОтНалоговыхАгентов);
	ПорядокКБК.Добавить(СписокКБК.ФиксированныеПлатежиИностранныхГраждан);
	ПорядокКБК.Добавить(СписокКБК.НалогПоПовышеннойСтавкеНаОснованииУведомления);
	
	Для Каждого СтрокаНалоговаяБаза Из ТаблицаНалоговойБазы Цикл
		
		Если Не СтрокаНалоговаяБаза.СтруктураДанных.Свойство("СуммаНалогаИсчисленнаяКУплате") Тогда
			// Общие итоги вычетов пропускаем
			Продолжить;
		КонецЕсли;
		
		Если (ВыбраннаяФорма3НДФЛ = "ФормаОтчета2024кв1"
			Или ВыбраннаяФорма3НДФЛ = "ФормаОтчета2023кв1")
			И СтрокаНалоговаяБаза.ВидДохода = ВидДоходаДивиденды Тогда
			
			Если СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
				ДобавитьСтрокуУплатыНалога(ТаблицаРасчетов,
					СписокКБК.ДоходыСДивидендовПоПовышеннойСтавке,
					Мин(СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения,
						СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате),
					СтрокаНалоговаяБаза,
					ОКТМОналогоплательщика);
			КонецЕсли;
			
			КБК = СписокКБК.ДоходыСДивидендов;
			СуммаНалога = СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате
				- СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения;
			
		ИначеЕсли СтрокаНалоговаяБаза.ВидДохода = ВидыДоходаФиксПрибыльКИК Тогда
			
			Если СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
				ДобавитьСтрокуУплатыНалога(ТаблицаРасчетов,
					СписокКБК.ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавкеОсобыйПорядокУплаты,
					Мин(СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения,
						СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате),
					СтрокаНалоговаяБаза,
					ОКТМОналогоплательщика);
			КонецЕсли;
			
			КБК = СписокКБК.ДоходыСПрибылиКИКОсобыйПорядокУплаты;
			СуммаНалога = СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате
				- СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения;
			
		ИначеЕсли ВидыДоходаПрибыльКИК.Найти(СтрокаНалоговаяБаза.ВидДохода) <> Неопределено
			И СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
			
			Если СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
				ДобавитьСтрокуУплатыНалога(ТаблицаРасчетов,
					СписокКБК.ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавке,
					Мин(СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения,
						СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате),
					СтрокаНалоговаяБаза,
					ОКТМОналогоплательщика);
			КонецЕсли;
			
			КБК = СписокКБК.ДоходыСПрибылиКИК;
			СуммаНалога = СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяКУплате
				- СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения;
			
		ИначеЕсли СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
			
			Если СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения > 0 Тогда
				ДобавитьСтрокуУплатыНалога(ТаблицаРасчетов,
					СписокКБК.ДоходыОблагаемыеПоПовышеннойСтавке,
					Мин(СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения,
						СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаПодлежащаяУплате),
					СтрокаНалоговаяБаза,
					ОКТМОналогоплательщика);
			КонецЕсли;
			
			ИдентификаторКБК = СоответствиеКодаДоходаИдентификаторуКБК.Получить(СтрокаНалоговаяБаза.ВидДохода);
			Если ИдентификаторКБК = Неопределено Тогда
				КБК = СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
			Иначе
				КБК = СписокКБК[ИдентификаторКБК];
			КонецЕсли;
			
			// В ситуациях, когда налог был уже удержан налоговым агентом,
			// считаем, что следует оплатить разницу после пересчета по повышенной ставке
			Если СтрокаНалоговаяБаза.ОКТМО <> ОКТМОналогоплательщика
				И СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаУдержанная <> 0 Тогда
				
				СуммаНалога = 0;
			Иначе
				СуммаНалога = СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаПодлежащаяУплате
					- СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленнаяСПревышения;
			КонецЕсли;
			
		Иначе
			
			ИдентификаторКБК = СоответствиеКодаДоходаИдентификаторуКБК.Получить(СтрокаНалоговаяБаза.ВидДохода);
			Если ИдентификаторКБК = Неопределено Тогда
				КБК = СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
			Иначе
				КБК = СписокКБК[ИдентификаторКБК];
			КонецЕсли;
			
			СуммаНалога = СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаИсчисленная
				- СтрокаНалоговаяБаза.СтруктураДанных.СуммаНалогаУдержанная;
			
		КонецЕсли;
		
		Если СуммаНалога <> 0 Тогда
			ДобавитьСтрокуУплатыНалога(ТаблицаРасчетов, КБК, СуммаНалога, СтрокаНалоговаяБаза, ОКТМОналогоплательщика);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если нет налога к уплате или возврату, то нужно выводить пустой раздел 1.
	Если ТаблицаРасчетов.Количество() = 0 Тогда
		СтрокаРасчета = ТаблицаРасчетов.Добавить();
		СтрокаРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности;
		СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика;
	Иначе
		ТаблицаРасчетов.Сортировать("КБК, ОКТМО");
	КонецЕсли;
	
	ТаблицаСведенийОСуммахНалога = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	Для Каждого РезультатРасчета Из ТаблицаРасчетов Цикл
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		Если (РезультатРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности
			Или РезультатРасчета.КБК = СписокКБК.ДоходыОблагаемыеПоПовышеннойСтавке)
			И РезультатРасчета.ОКТМО = ОКТМОналогоплательщика Тогда
			
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалогаИП(
				РезультатРасчета,
				ПризнакиУплатыВозврата,
				ВыбраннаяФорма3НДФЛ,
				ТаблицаДанныхЗаполнения);
		Иначе
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата);
		КонецЕсли;
	КонецЦикла;
	
	// При возврате НДФЛ может возникнуть ситуация, когда налог к уплате отсутствует.
	// В таком случае все равно нужно заполнить п. 2 Раздела 1 при наличии доходов от предпринимательской деятельности.
	Если ЗаполнятьИсчисленныеАвансовыеПлатежи(ВыбраннаяФорма3НДФЛ)
		И ЕстьДоходыОтПредпринимательскойДеятельности(ТаблицаДанныхЗаполнения)
		И ТаблицаРасчетов.Найти(СписокКБК.ДоходыОтПредпринимательскойДеятельности, "КБК") = Неопределено Тогда
		
		РезультатРасчета = Новый Структура();
		РезультатРасчета.Вставить("КБК", СписокКБК.ДоходыОтПредпринимательскойДеятельности);
		РезультатРасчета.Вставить("ОКТМО", ОКТМОналогоплательщика);
		РезультатРасчета.Вставить("СуммаНалога", 0);
		
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалогаИП(
			РезультатРасчета,
			ПризнакиУплатыВозврата,
			ВыбраннаяФорма3НДФЛ,
			ТаблицаДанныхЗаполнения);
		
	КонецЕсли;
	
	Возврат ТаблицаСведенийОСуммахНалога;
	
КонецФункции

Функция ОКТМОДекларации(ОКТМО, ОКТМОналогоплательщика)
	
	Если ЗначениеЗаполнено(ОКТМО) Тогда
		Возврат ОКТМО;
	Иначе
		Возврат ОКТМОналогоплательщика;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСтрокуУплатыНалога(Результат, КБК, СуммаНалога, ДанныеЗаполнения, ОКТМОналогоплательщика)
	
	ОКТМОДекларация = ОКТМОДекларации(ДанныеЗаполнения.ОКТМО, ОКТМОналогоплательщика);
	
	РаспределениеСуммыНалогаПоОКТМО = Новый Соответствие;
	Если ДанныеЗаполнения.СтруктураДанных.РаспределениеПоОКТМО.Количество() > 0 Тогда
		// Если для одного кода вида доходов указано несколько источников по разным ОКТМО,
		// распределим сумму налога согласно исчисленным суммам
		СуммаРаспределения = СуммаНалога;
		Для Каждого ТекущийИсточник Из ДанныеЗаполнения.СтруктураДанных.РаспределениеПоОКТМО Цикл
			
			Если СуммаРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СуммаРаспределения < 0 Тогда
				СуммаПоОКТМО = -Мин(ТекущийИсточник.Значение, -СуммаРаспределения);
			Иначе
				СуммаПоОКТМО = Мин(ТекущийИсточник.Значение, СуммаРаспределения);
			КонецЕсли;
			
			РаспределениеСуммыНалогаПоОКТМО.Вставить(
				ОКТМОДекларации(ТекущийИсточник.Ключ, ОКТМОналогоплательщика),
				СуммаПоОКТМО);
			СуммаРаспределения = СуммаРаспределения - СуммаПоОКТМО;
			
		КонецЦикла;
		
		Если СуммаНалога > 0 И СуммаРаспределения > 0 Или СуммаНалога < 0 И СуммаРаспределения < 0 Тогда
			// После распределения остался остаток, переводим его на ОКТМО налогоплательщика
			РаспределениеСуммыНалогаПоОКТМО.Вставить(ОКТМОДекларация, СуммаРаспределения);
		КонецЕсли;
		
	Иначе
		РаспределениеСуммыНалогаПоОКТМО.Вставить(ОКТМОДекларация, СуммаНалога);
	КонецЕсли;
	
	Для Каждого ТекущееРаспределение Из РаспределениеСуммыНалогаПоОКТМО Цикл
		
		Отбор = Новый Структура("КБК, ОКТМО", КБК, ТекущееРаспределение.Ключ);
		СтрокиОтбора = Результат.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ОКТМО = ТекущееРаспределение.Ключ;
			НоваяСтрока.КБК = КБК;
		Иначе
			НоваяСтрока = СтрокиОтбора[0];
		КонецЕсли;
		
		НоваяСтрока.СуммаНалога = НоваяСтрока.СуммаНалога + ТекущееРаспределение.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоработатьТаблицуДанныхЗаполненияПередВыводом(Результат, ТаблицаНалоговыхБаз, ВыбраннаяФорма)
	
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыНеПодлежащиеНалогообложению = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению(Ложь);
	СтрокиКУдалению = Новый Массив;
	
	ВидДоходаИныеСтавки = КодВидаДохода(ВыбраннаяФорма, "ИнойДоходПоИнойСтавке");
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		// Ставка налога в декларации за 2021 и выше указывается только для иного дохода
		
		Если ТекущаяСтрока.ВидДохода <> ВидДоходаИныеСтавки Тогда
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("НалоговаяСтавкаДоходаРФ") Тогда
				ТекущаяСтрока.СтруктураДанных.НалоговаяСтавкаДоходаРФ = 0;
			КонецЕсли;
				
			Если ТекущаяСтрока.СтруктураДанных.Свойство("НалоговаяСтавка") Тогда
				ТекущаяСтрока.СтруктураДанных.НалоговаяСтавка = 0;
			КонецЕсли;
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("НалоговаяСтавкаДоходаЗаПределамиРФ") Тогда	
				ТекущаяСтрока.СтруктураДанных.НалоговаяСтавкаДоходаЗаПределамиРФ = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.СтруктураДанных.Свойство("ПредварительныйРасчет")
			И Не ТекущаяСтрока.СтруктураДанных.Свойство("ВидДоговораПенсионногоОбеспечения")
			И ТекущаяСтрока.СтруктураДанных.ПредварительныйРасчет Тогда
			
			СтрокиКУдалению.Добавить(ТекущаяСтрока);
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("ОбщаяСтоимостьПодарков") Тогда
				ДоходыНеПодлежащиеНалогообложению.ОбщаяСтоимостьПодарков =
					ДоходыНеПодлежащиеНалогообложению.ОбщаяСтоимостьПодарков
					+ ТекущаяСтрока.СтруктураДанных.ОбщаяСтоимостьПодарков;
			КонецЕсли;
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению") Тогда
				ДоходыНеПодлежащиеНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению =
					ДоходыНеПодлежащиеНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению
					+ ТекущаяСтрока.СтруктураДанных.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению;
			КонецЕсли;
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("СтоимостьПодарковНеПодлежащаяНалогообложению") Тогда
				ДоходыНеПодлежащиеНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению =
					ДоходыНеПодлежащиеНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению
					+ ТекущаяСтрока.СтруктураДанных.СтоимостьПодарковНеПодлежащаяНалогообложению;
			КонецЕсли;
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("СуммаДоходовНеПодлежащаяНалогообложению") Тогда
				ДоходыНеПодлежащиеНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению =
					ДоходыНеПодлежащиеНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению
					+ ТекущаяСтрока.СтруктураДанных.СуммаДоходовНеПодлежащаяНалогообложению;
			КонецЕсли;
			
			Если ТекущаяСтрока.СтруктураДанных.Свойство("ИныеДоходыНеПодлежащиеНалогообложению") Тогда
				ДоходыНеПодлежащиеНалогообложению.ИныеДоходыНеПодлежащиеНалогообложению =
					ДоходыНеПодлежащиеНалогообложению.ИныеДоходыНеПодлежащиеНалогообложению
					+ ТекущаяСтрока.СтруктураДанных.ИныеДоходыНеПодлежащиеНалогообложению;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из СтрокиКУдалению Цикл
		Результат.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	// Добавим общие итоги по суммам, не подлежажим налогооблажению
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.СтруктураДанных = ДоходыНеПодлежащиеНалогообложению;
	
КонецПроцедуры

Процедура РассчитатьСуммуДоходовНеПодлежащуюНалогообложению_2022(ТаблицаДанныхЗаполнения, НеоблагаемыеСуммыДоходов, ВыбраннаяФорма)
	
	СоответствиеДоходов = СоответствиеДоходовИсточникам(ВыбраннаяФорма);
	ОбщаяСуммаВыигрышей = 0;
	ОбщаяСуммаПодарков = 0;
	КодВидаДоходаВыигрыш = СоответствиеДоходов.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх);
	
	Для Каждого СтрокаДанныхЗаполнения Из ТаблицаДанныхЗаполнения Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок
			И ЗначениеЗаполнено(СтруктураДанных.ИННИсточникаДоходаРФ) Тогда
				
			ОбщаяСуммаПодарков = ОбщаяСуммаПодарков + СтруктураДанных.СуммаДоходаРФ;
		ИначеЕсли СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
			ОбщаяСуммаВыигрышей = ОбщаяСуммаВыигрышей + СтруктураДанных.СуммаДоходаРФ;
			Если ЗначениеЗаполнено(СтрокаДанныхЗаполнения.ВидДохода) Тогда
				КодВидаДоходаВыигрыш = СтрокаДанныхЗаполнения.ВидДохода;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтоимостьПодарковНеПодлежащаяНалогообложению = Мин(ОбщаяСуммаПодарков, НеоблагаемыеСуммыДоходов.Подарок);
	СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению = Мин(ОбщаяСуммаВыигрышей, НеоблагаемыеСуммыДоходов.Лотереи);
	
	Если СтоимостьПодарковНеПодлежащаяНалогообложению > 0 Тогда
	
		РасчетДоходов = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
		РасчетДоходов.СуммаДоходовНеПодлежащаяНалогообложению = СтоимостьПодарковНеПодлежащаяНалогообложению;
		РасчетДоходов.СтоимостьПодарковНеПодлежащаяНалогообложению = СтоимостьПодарковНеПодлежащаяНалогообложению;
		РасчетДоходов.ОбщаяСтоимостьПодарков = ОбщаяСуммаПодарков;
		
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = СоответствиеДоходов.Получить(Перечисления.ИсточникиДоходовФизическихЛиц.Подарок);
		НоваяСтрока.НалоговаяСтавка = СтавкаНалога(ВыбраннаяФорма, НоваяСтрока.ВидДохода);
		НоваяСтрока.СтруктураДанных = РасчетДоходов;
		
	КонецЕсли;
	
	Если СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению > 0 Тогда
	
		РасчетДоходов = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
		РасчетДоходов.СуммаДоходовНеПодлежащаяНалогообложению = СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению;
		РасчетДоходов.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению = СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению;
		
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = КодВидаДоходаВыигрыш;
		НоваяСтрока.НалоговаяСтавка = СтавкаНалога(ВыбраннаяФорма, КодВидаДоходаВыигрыш);
		НоваяСтрока.СтруктураДанных = РасчетДоходов;
		
	КонецЕсли;
	
	НеоблагаемыйДоходВклады = 0;
	ВидДохода = КодВидаДохода(ВыбраннаяФорма, "БанковскиеПроценты");
	ОтборВклады = Новый Структура("ВидДохода", ВидДохода);
	Если ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборВклады).Количество() > 0 Тогда
		НеоблагаемыйДоходВклады = НеоблагаемыйДоходПоВкладам(ВыбраннаяФорма) * КлючеваяСтавкаЦБ(ВыбраннаяФорма) / 100;
	КонецЕсли;
	
	Если НеоблагаемыйДоходВклады > 0 Тогда
		
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = ВидДохода;
		НоваяСтрока.НалоговаяСтавка = СтавкаНалога(ВыбраннаяФорма);
		
		РасчетДоходовНеПодлежащихНалогообложению = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
		РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению = НеоблагаемыйДоходВклады;
		РасчетДоходовНеПодлежащихНалогообложению.ИныеДоходыНеПодлежащиеНалогообложению = НеоблагаемыйДоходВклады;
		
		НоваяСтрока.СтруктураДанных = РасчетДоходовНеПодлежащихНалогообложению;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоИдентификаторСтавкиПрогрессивнойШкалы(СтавкаНалога)
	
	Возврат (СтавкаНалога = ПомощникЗаполнения3НДФЛКлиентСервер.ИдентификаторСтавкиПрогрессивнойШкалы());
	
КонецФункции

Процедура ДобавитьДанныеЗаявленияНаВозвратНалога2022(ТаблицаДанныхЗаполнения, Организация, СчетОрганизации, ВыбраннаяФорма3НДФЛ, Период, НомерКорректировки)
	
	ТаблицаНалогКВозврату = Новый ТаблицаЗначений;
	ТаблицаНалогКВозврату.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаНалогКВозврату.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаНалогКВозврату.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаСведений Из ТаблицаДанныхЗаполнения Цикл
		
		СтруктураДанных = СтрокаСведений.СтруктураДанных;
		Если СтруктураДанных.Свойство("КБКИП") Тогда
			КБК = СтруктураДанных.КБКИП;
			ОКТМО = СтруктураДанных.ОКТМОИП1Квартал;
			СуммаКВозврату = СтруктураДанных.СуммаНалогаИПКУменьшениюГод;
		ИначеЕсли СтруктураДанных.Свойство("ПризнакУплатыВозврата") Тогда
			КБК = СтруктураДанных.КБК;
			ОКТМО = СтруктураДанных.ОКТМО;
			СуммаКВозврату = СтруктураДанных.СуммаВозвратаНалога;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "СуммаНалогаПодлежащаяВозврату", 0) > 0 Тогда
			КБК = "";
			ОКТМО = "";
			СуммаКВозврату = СтруктураДанных.СуммаНалогаПодлежащаяВозврату;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СуммаКВозврату > 0 Тогда
			СтрокаНалогКВозврату = ТаблицаНалогКВозврату.Добавить();
			СтрокаНалогКВозврату.КБК = КБК;
			СтрокаНалогКВозврату.ОКТМО = ОКТМО;
			СтрокаНалогКВозврату.Сумма = СуммаКВозврату;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНалогКВозврату.Свернуть("КБК, ОКТМО", "Сумма");
	
	СписокПоказателей = "ФИО, КодНО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Период, СписокПоказателей);
	Если СведенияОбОрганизации = Неопределено Или СведенияОбОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сведения о налогоплательщике
	ДанныеФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
	Если ДанныеФИО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеБанковскогоСчета = Справочники.БанковскиеСчета.РеквизитыСчета(СчетОрганизации);
	
	Для Каждого СтрокаНалогКВозврату Из ТаблицаНалогКВозврату Цикл
		
		ЗаявлениеНаВозврат = ТаблицаДанныхЗаполнения.Добавить();
		
		СтруктураЗаявления = Новый Структура;
		СтруктураЗаявления.Вставить("НомерЗаявленияВозврат", НомерКорректировки + 1);
		СтруктураЗаявления.Вставить("СуммаВозврат", СтрокаНалогКВозврату.Сумма);
		СтруктураЗаявления.Вставить("КБКВозврат", СтрокаНалогКВозврату.КБК);
		СтруктураЗаявления.Вставить("ОКТМОВозврат", СтрокаНалогКВозврату.ОКТМО);
		СтруктураЗаявления.Вставить("НалоговыйПериодВозврат", СтрШаблон("ГД.00.%1", Формат(Период, "ДФ=yyyy;")));
		
		Если ДанныеБанковскогоСчета <> Неопределено Тогда
			СтруктураЗаявления.Вставить("НаименованиеБанкаВозврат", ДанныеБанковскогоСчета.НаименованиеБанка);
			СтруктураЗаявления.Вставить("БИКВозврат", ДанныеБанковскогоСчета.БИКБанка);
			Если ДанныеБанковскогоСчета.ВидСчета = "Депозитный" Тогда
				СтруктураЗаявления.Вставить("ВидСчетаВозврат", "07");
			Иначе
				СтруктураЗаявления.Вставить("ВидСчетаВозврат", "02");
			КонецЕсли;
			СтруктураЗаявления.Вставить("НомерСчетаВозврат", ДанныеБанковскогоСчета.НомерСчета);
		КонецЕсли;
		
		СтруктураЗаявления.Вставить("ФамилияВозврат", СокрЛП(ДанныеФИО.Фамилия));
		СтруктураЗаявления.Вставить("ИмяВозврат", СокрЛП(ДанныеФИО.Имя));
		СтруктураЗаявления.Вставить("ОтчествоВозврат", СокрЛП(ДанныеФИО.Отчество));
		
		ЗаявлениеНаВозврат.СтруктураДанных = СтруктураЗаявления;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2023кв1

Процедура ДобавитьДанныеЗаявленияНаВозвратНалога2023(ТаблицаДанныхЗаполнения, СчетОрганизации, ВыбраннаяФорма3НДФЛ)
	
	СуммаКВозврату = 0;
	
	Для Каждого СтрокаСведений Из ТаблицаДанныхЗаполнения Цикл
		
		СтруктураДанных = СтрокаСведений.СтруктураДанных;
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "СуммаНалогаПодлежащаяВозврату", 0) > 0 Тогда
			СуммаКВозврату = СуммаКВозврату + СтруктураДанных.СуммаНалогаПодлежащаяВозврату;
		Иначе
			СуммаКВозврату = СуммаКВозврату + Макс(СтрокаСведений.СуммаНалогаУплаченнаяУдержанная
				- СтрокаСведений.СуммаНалогаИсчисленная, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеБанковскогоСчета = Справочники.БанковскиеСчета.РеквизитыСчета(СчетОрганизации);
	
	ЗаявлениеНаВозврат = ТаблицаДанныхЗаполнения.Добавить();
	
	СтруктураЗаявления = Новый Структура;
	СтруктураЗаявления.Вставить("СуммаВозврат", СуммаКВозврату);
	
	Если ДанныеБанковскогоСчета <> Неопределено Тогда
		СтруктураЗаявления.Вставить("БИКВозврат", ДанныеБанковскогоСчета.БИКБанка);
		Если ДанныеБанковскогоСчета.ВидСчета = "Депозитный" Тогда
			СтруктураЗаявления.Вставить("ВидСчетаВозврат", "07");
		Иначе
			СтруктураЗаявления.Вставить("ВидСчетаВозврат", "02");
		КонецЕсли;
		СтруктураЗаявления.Вставить("НомерСчетаВозврат", ДанныеБанковскогоСчета.НомерСчета);
	КонецЕсли;
	
	ЗаявлениеНаВозврат.СтруктураДанных = СтруктураЗаявления;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДанныеЗаполненияИмущественногоВычета

Процедура ДобавитьДанныеЗаполненияИмущественногоВычета(ТаблицаДанныхЗаполнения, ДанныеФормы, ВидДохода, НалоговаяСтавка, ТаблицаПоказателей, КодыИсточниковДоходов)
	
	Перем СуммаДохода, СуммаВычетаПоВидуИмущества, ОбщаяСуммаВычета;
	
	Если ДанныеФормы.СуммаВычета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидИмущества = ДанныеФормы.ДанныеОтчетности.ВидИмущества;
	ВидВычета = ДанныеФормы.ДанныеОтчетности.ВидВычета;
	
	ОтборПоказателей = Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета);
	СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(ОтборПоказателей);
	
	Если СтрокиПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	КлючДохода = СтрокиПоказателей[0].КлючДохода;
	КлючВычета = СтрокиПоказателей[0].КлючВычета;
	КлючОбщейСуммыВычета = СтрокиПоказателей[0].КлючОбщейСуммыВычета;
	ВычетСсылка = СтрокиПоказателей[0].ВидВычетаСсылка;
	
	ИмущественныйВычет = ТаблицаДанныхЗаполнения.Найти(ВычетСсылка, "Вид");
	Если ИмущественныйВычет = Неопределено Тогда
		ИмущественныйВычет = ТаблицаДанныхЗаполнения.Добавить();
		ИмущественныйВычет.ВидДохода = ВидДохода;
		ИмущественныйВычет.НалоговаяСтавка = НалоговаяСтавка;
		ИмущественныйВычет.Вид = ВычетСсылка;
		СтруктураВычета = Новый Структура;
	Иначе
		СтруктураВычета = ИмущественныйВычет.СтруктураДанных;
	КонецЕсли;
	
	Если Не СтруктураВычета.Свойство(КлючДохода, СуммаДохода) Тогда
		СуммаДохода = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючВычета, СуммаВычетаПоВидуИмущества) Тогда
		СуммаВычетаПоВидуИмущества = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючОбщейСуммыВычета, ОбщаяСуммаВычета) Тогда
		ОбщаяСуммаВычета = 0;
	КонецЕсли;
	
	СуммаДохода = СуммаДохода + ДанныеФормы.СуммаДохода;
	
	СуммаВычета = 0;
	Если ВидВычета = "Норматив" Тогда
		СуммаВычета = Мин(СуммаДохода, ДанныеФормы.СуммаВычета);
	ИначеЕсли ВидВычета = "Расходы" Тогда
		СуммаВычета = ДанныеФормы.СуммаВычета;
	КонецЕсли;
	СуммаВычетаПоВидуИмущества = СуммаВычетаПоВидуИмущества + СуммаВычета;
	ОбщаяСуммаВычета = ОбщаяСуммаВычета + СуммаВычета;
	
	СтруктураВычета.Вставить(КлючДохода, СуммаДохода);
	СтруктураВычета.Вставить(КлючВычета, СуммаВычетаПоВидуИмущества);
	СтруктураВычета.Вставить(КлючОбщейСуммыВычета, ОбщаяСуммаВычета);
	Если ВычетСсылка = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		СтруктураВычета.Вставить("ИсточникДоходовПрофессиональногоВычета", КодыИсточниковДоходов.ДоходРФ);
	КонецЕсли;
	
	// Добавим распредение вычета по видам дохода
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВычета, "РаспределениеВычета") = Неопределено Тогда
		СтруктураВычета.Вставить("РаспределениеВычета", Новый Соответствие);
	КонецЕсли;
	
	РаспределениеВычета = СтруктураВычета.РаспределениеВычета;
	Если РаспределениеВычета.Получить(ДанныеФормы.Вид) <> Неопределено Тогда
		СуммаВычетаПоДоходу = РаспределениеВычета[ДанныеФормы.Вид] + СуммаВычета;
	Иначе
		СуммаВычетаПоДоходу = СуммаВычета;
	КонецЕсли;
	
	РаспределениеВычета.Вставить(ДанныеФормы.Вид, СуммаВычетаПоДоходу);
	
	ИмущественныйВычет.СтруктураДанных = СтруктураВычета;
	
КонецПроцедуры

Функция ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		Возврат ОписаниеПоказателейИмущественногоВычета2018();
	ИначеЕсли ВыбраннаяФорма3НДФЛ = "ФормаОтчета2019кв1"
		Или ВыбраннаяФорма3НДФЛ = "ФормаОтчета2020кв1"
		Или ВыбраннаяФорма3НДФЛ = "ФормаОтчета2021кв1" Тогда
			
		Возврат ОписаниеПоказателейИмущественногоВычета2019();
	Иначе
		Возврат ОписаниеПоказателейИмущественногоВычета2022();
	КонецЕсли;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2018()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	ВычетПрофессиональный = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	КлючОбщейСуммыПрофессиональный = "ОбщаяСуммаПрофессиональногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2019()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаДолиЖилойНедвижимости",
		"РасходыПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2022()
	
	ТаблицаПоказателей = ОписаниеПоказателейИмущественногоВычета2019();
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Криптовалюта", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Криптовалюта", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
		
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция НовыйОписаниеПоказателейИмущественногоВычета()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидИмущества",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычетаСсылка",   Новый ОписаниеТипов("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	ТаблицаЗначений.Колонки.Добавить("КлючОбщейСуммыВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДобавитьПоказательИмущественногоВычета(ВидИмущества, ВидВычета, КлючДохода, КлючВычета, ВычетСсылка, КлючОбщейСуммы, КлючиПоказателей)
	
	Если КлючиПоказателей.НайтиСтроки(Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета)).Количество() > 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль показателя ""%1"" имущественного вычета при продаже недвижимости'"), ВидИмущества);
	КонецЕсли;
	
	НоваяСтрока = КлючиПоказателей.Добавить();
	НоваяСтрока.ВидИмущества = ВидИмущества;
	НоваяСтрока.ВидВычета = ВидВычета;
	НоваяСтрока.КлючДохода = КлючДохода;
	НоваяСтрока.КлючВычета = КлючВычета;
	НоваяСтрока.ВидВычетаСсылка = ВычетСсылка;
	НоваяСтрока.КлючОбщейСуммыВычета = КлючОбщейСуммы;
	
КонецПроцедуры

#КонецОбласти

Функция КБКИсточникаДохода(ИсточникДохода, СписокКБК, НалогУдержан = Ложь)
	
	Если ИсточникДохода = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
		Возврат СписокКБК.ДоходыОтПредпринимательскойДеятельности;
	ИначеЕсли НалогУдержан Тогда
		Возврат СписокКБК.ДоходыПолученныеОтНалоговыхАгентов;
	Иначе
		Возврат СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
	КонецЕсли;
	
КонецФункции

Функция СуммаНалогаИсчисленная(НалоговаяБаза, НалоговаяСтавка)
	
	Возврат Окр(НалоговаяБаза * НалоговаяСтавка / 100, 0);
	
КонецФункции

Процедура ДобавитьДанныеКадастровойИнформации(ТаблицаДанныхЗаполнения, ДанныеФормы)
	
	Если НЕ (ДанныеФормы.ДанныеОтчетности.Свойство("НедвижимостьПриобретенаПосле01012016") И
		ДанныеФормы.ДанныеОтчетности.НедвижимостьПриобретенаПосле01012016) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтчетности = ДанныеФормы.ДанныеОтчетности;
	
	КадастроваяИнформация = ТаблицаДанныхЗаполнения.Добавить();
	СтруктураКадастровойИнформации = Новый Структура;
	СтруктураКадастровойИнформации.Вставить("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", ДанныеОтчетности.КадастровыйНомер);
	СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьГодРегистрации", ДанныеОтчетности.КадастроваяСтоимость);
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиЦенаДоговора", ДанныеОтчетности.СуммаПоДоговору);
	СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьКоэффициент", ДанныеОтчетности.СкорректированнаяКадастроваяСтоимость);
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиНалогооблагаемый", ДанныеФормы.СуммаДохода);
	
	КадастроваяИнформация.СтруктураДанных = СтруктураКадастровойИнформации;
	
КонецПроцедуры

Функция ЕстьДоходыОтПредпринимательскойДеятельности(ТаблицаДанныхЗаполнения)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Функция ВозможноОсвобождениеОтНалога(Период)
	
	ГодОсвобожденияОтНалога = 2020;
	
	// Для целей декларации 3-НДФЛ достаточно проверить, что декларация заполняется за год,
	// в котором допустимо освобождение от налога.
	Возврат Год(Период) = ГодОсвобожденияОтНалога;
	
КонецФункции

// Добавляет итоговые показатели при формировании декларации 3-НДФЛ
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыйПараметрыИтоговыхПоказателейИП()
//
Процедура ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ПараметрыВыполнения)
	
	ДанныеПомощникаЗаполнения = ПараметрыВыполнения.ДанныеПомощникаЗаполнения;
	ТаблицаДанныхЗаполнения = ПараметрыВыполнения.ТаблицаДанныхЗаполнения;
	ДоходыВычеты = ПараметрыВыполнения.ДоходыВычеты;
	ВыбраннаяФорма3НДФЛ = ПараметрыВыполнения.ВыбраннаяФорма3НДФЛ;
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем показатели авансовых платежей.
	ПоказателиАвансовыхПлатежей = Новый Структура;
	Для НомерПериода = 1 По 3 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		
		ПоказателиАвансовыхПлатежей.Вставить(КлючДоходыЗаПериод(ИмяПериода), 0);
		ПоказателиАвансовыхПлатежей.Вставить(КлючВычетаЗаПериод(ИмяПериода), 0);
		ПоказателиАвансовыхПлатежей.Вставить(СтрШаблон("СтандартныйВычетИП%1", ИмяПериода), 0);
		ПоказателиАвансовыхПлатежей.Вставить(СтрШаблон("НалоговаяБазаИП%1", ИмяПериода), 0);
		ПоказателиАвансовыхПлатежей.Вставить(СтрШаблон("АвансовыйПлатежИП%1", ИмяПериода), 0);
	КонецЦикла;
	
	ОбщаяСуммаДохода = 0;
	ОбщаяСуммаРасходов = 0;
	ОбщаяСуммаРасходовВПределахНорматива = 0;
	ЗаполнятьИсчисленныеАвансовыеПлатежи = Ложь;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		ОбщаяСуммаДохода = ОбщаяСуммаДохода + СтруктураДанных.СуммаДоходаИП;
		ОбщаяСуммаРасходов = ОбщаяСуммаРасходов + СтруктураДанных.СуммаРасходовИП;
		ОбщаяСуммаРасходовВПределахНорматива = ОбщаяСуммаРасходовВПределахНорматива + СтруктураДанных.СуммаРасходовВПределахНормативаИП;
		
		Для НомерКвартала = 1 По 3 Цикл
			
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерКвартала);
			КлючПоказателей = КлючПоказателейЗаПериод(ИмяПериода);
			
			ПоказателиПериода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, КлючПоказателей, Неопределено);
			Если ПоказателиПериода = Неопределено Тогда
				// Нет аванса за конкретный квартал
				Продолжить;
			КонецЕсли;
			
			ЗаполнятьИсчисленныеАвансовыеПлатежи = Истина;
			
			КлючДохода = КлючДоходыЗаПериод(ИмяПериода);
			КлючВычета = КлючВычетаЗаПериод(ИмяПериода);
			
			ПоказателиАвансовыхПлатежей[КлючДохода] =
				ПоказателиАвансовыхПлатежей[КлючДохода]
				+ Окр(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоказателиПериода, "Доходы", 0), 0);
			
			ПоказателиАвансовыхПлатежей[КлючВычета] =
				ПоказателиАвансовыхПлатежей[КлючВычета]
				+ Окр(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоказателиПериода, "ПрофВычет", 0), 0);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЗаполнятьИсчисленныеАвансовыеПлатежи Тогда
		ОбщаяСуммаВычета = Макс(ОбщаяСуммаРасходов, ОбщаяСуммаРасходовВПределахНорматива);
	ИначеЕсли ОбщаяСуммаРасходов > 0 Тогда
		ОбщаяСуммаВычета = ОбщаяСуммаРасходов;
	Иначе
		ОбщаяСуммаВычета = ОбщаяСуммаРасходовВПределахНорматива;
	КонецЕсли;
	
	// В декларации заполняется либо вычет по нормативу, либо вычет по подтвержденным расходам.
	// Очистим поля в зависимости от применяемого вычета.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если ОбщаяСуммаРасходовВПределахНорматива > ОбщаяСуммаРасходов
			И ОбщаяСуммаРасходов > 0
			И Не ЗаполнятьИсчисленныеАвансовыеПлатежи Тогда
			
			СтруктураДанных.СуммаРасходовИП = 0;
			СтруктураДанных.МатериальныеРасходыИП = 0;
			СтруктураДанных.АмортизацияИП = 0;
			СтруктураДанных.ЗарплатаИП = 0;
			СтруктураДанных.ЗарплатаПоТрудовымДоговорамИП = 0;
			СтруктураДанных.ПрочиеРасходыИП = 0;
		ИначеЕсли ОбщаяСуммаРасходов > 0 Тогда
			СтруктураДанных.СуммаРасходовВПределахНормативаИП = 0;
		КонецЕсли;
	КонецЦикла;
	
	ИндексИтоговойСтроки = -1;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
	КонецЦикла;
	
	Если ИндексИтоговойСтроки < 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
	
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаДоходаИП", ОбщаяСуммаДохода);
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаВычетаИП", ОбщаяСуммаВычета);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаНачисленныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаУплаченныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаТорговогоСбора", ДанныеПомощникаЗаполнения.ТорговыйСбор);
	
	ИтоговаяСтрока.СуммаОблагаемогоДохода = ОбщаяСуммаДохода;
	ИтоговаяСтрока.СуммаНалогаИсчисленная = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(
		ОбщаяСуммаДохода - ОбщаяСуммаВычета,
		ПараметрыВыполнения.Период);
	ИтоговаяСтрока.СуммаНалогаУплаченнаяУдержанная = ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП;
	
	// Расчет к приложению 3
	Если ЗаполнятьИсчисленныеАвансовыеПлатежи Тогда
		
		НачалоГода = НачалоГода(ПараметрыВыполнения.Период);
		Для НомерПериода = 1 По 3 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			
			СуммаСтандартныхВычетов = СуммаСтандарныхВычетовЗаПериод(ДоходыВычеты,
				НомерПериода * 3,
				ВыбраннаяФорма3НДФЛ,
				ПараметрыВыполнения.Организация,
				НачалоГода);
			
			ПоказателиАвансовыхПлатежей[СтрШаблон("СтандартныйВычетИП%1", ИмяПериода)] = Окр(СуммаСтандартныхВычетов, 0);
			
			НалоговаяБаза = 
				Макс(0, ПоказателиАвансовыхПлатежей[КлючДоходыЗаПериод(ИмяПериода)]
				- ПоказателиАвансовыхПлатежей[КлючВычетаЗаПериод(ИмяПериода)]
				- ПоказателиАвансовыхПлатежей[СтрШаблон("СтандартныйВычетИП%1", ИмяПериода)]);
			
			ПоказателиАвансовыхПлатежей[СтрШаблон("НалоговаяБазаИП%1", ИмяПериода)] = НалоговаяБаза;
			
			ПоказателиАвансовыхПлатежей[СтрШаблон("АвансовыйПлатежИП%1", ИмяПериода)] =
				УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(НалоговаяБаза, ПараметрыВыполнения.Период);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ИтоговаяСтрока.СтруктураДанных, ПоказателиАвансовыхПлатежей);
	КонецЕсли;
	
	// Удаляем вспомогательные ключи структур.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		
		СтруктураДанных.Удалить("Показатели1Квартал");
		СтруктураДанных.Удалить("ПоказателиПолугодие");
		СтруктураДанных.Удалить("Показатели9Месяцев");
		
	КонецЦикла;
	
	// п. 9.2 Порядка заполнения формы Приказ ФНС России от 15.10.2021 N ЕД-7-11/903@
	// По каждому виду дохода в Приложение 3 заполняются отдельные страницы.
	// Разделять по кодам ОКВЭД страницы не надо.
	// Предпринимательская деятельность указывается по одному виду дохода для этого приложения,
	// поэтому необходимо суммировать показатели строк.
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			Если ИтоговаяСтрока.СтруктураДанных.КлючСтроки <> ТекущаяСтрока.СтруктураДанных.КлючСтроки Тогда
				
				ДобавитьЗначениеСтруктуры(ТекущаяСтрока.СтруктураДанных,
					ИтоговаяСтрока.СтруктураДанных,
					"АмортизацияИП,ЗарплатаИП,ЗарплатаПоТрудовымДоговорамИП,МатериальныеРасходыИП,СуммаРасходовВПределахНормативаИП,СуммаДоходаИП,СуммаРасходовИП,ПрочиеРасходыИП");
				
				СтрокиКУдалению.Добавить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из СтрокиКУдалению Цикл
			ТаблицаДанныхЗаполнения.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначениеСтруктуры(Источник, Приемник, КлючиСтруктуры)
	
	МассивКлючей = СтрРазделить(КлючиСтруктуры, ",", Ложь);
	Для Каждого ТекущийКлюч Из МассивКлючей Цикл
		
		Если Приемник.Свойство(ТекущийКлюч) Тогда
			Приемник[ТекущийКлюч] = Приемник[ТекущийКлюч] + ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник, ТекущийКлюч, 0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыИтоговыхПоказателейИП()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеПомощникаЗаполнения"); 
	Результат.Вставить("ТаблицаДанныхЗаполнения");
	Результат.Вставить("ДоходыВычеты");
	Результат.Вставить("ВыбраннаяФорма3НДФЛ", "");
	Результат.Вставить("Организация");
	Результат.Вставить("Период");
	
	Возврат Результат;
	
КонецФункции

Функция СуммаСтандарныхВычетовЗаПериод(ДоходыВычеты, КоличествоМесяцев, ВыбраннаяФорма, Организация, НачалоПериода)
	
	СуммаВычетов = 0;
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей);
	НайденныеСтроки = ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() > 0
		И НайденныеСтроки[0].СтруктураДоходовВычетов.СведенияОДетях <> Неопределено Тогда
		
		РазмерыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.РазмерыВычетов(ВыбраннаяФорма);
		
		ВычетыНаДетей = РегистрыСведений.ИПСтандартныеВычетыНаДетей.РассчитатьСуммыВычетаНаДетей(
			НайденныеСтроки[0].СтруктураДоходовВычетов.СведенияОДетях,
			РазмерыВычетов.СтандартныйВычетНаДетей,
			Мин(КоличествоМесяцев, НайденныеСтроки[0].СтруктураДоходовВычетов.КоличествоМесяцев));
		
		СуммаВычетов = СуммаВычетов + ВычетыНаДетей.Всего;
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика);
	НайденныеСтроки = ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПараметрыВычета = УчетНДФЛПредпринимателя.НовыйПараметрыВычета();
		ПараметрыВычета.НачалоПериода     = НачалоПериода;
		ПараметрыВычета.КонецПериода      = ДобавитьМесяц(НачалоПериода, КоличествоМесяцев);
		ПараметрыВычета.Организация       = Организация;
		ПараметрыВычета.КоличествоМесяцев = КоличествоМесяцев;
		ПараметрыВычета.ВыбраннаяФорма    = ВыбраннаяФорма;
		ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика";
		
		СуммаВычетов = СуммаВычетов + УчетНДФЛПредпринимателя.СуммаСтандартногоВычета(ПараметрыВычета);
	
	КонецЕсли;
	
	Возврат СуммаВычетов;
	
КонецФункции

Процедура РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, НеоблагаемыеСуммыДоходов, ВыбраннаяФорма)
	
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		
		РассчитатьСуммуДоходовНеПодлежащуюНалогообложению_2021(ТаблицаДанныхЗаполнения,
			КодВидаДохода(ВыбраннаяФорма),
			СтавкаНалога(ВыбраннаяФорма),
			НеоблагаемыеСуммыДоходов);
		
	Иначе
		
		РассчитатьСуммуДоходовНеПодлежащуюНалогообложению_2022(ТаблицаДанныхЗаполнения,
			НеоблагаемыеСуммыДоходов,
			ВыбраннаяФорма);
	
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению(ПредварительныйРасчет = Истина)
	
	РасчетДоходовНеПодлежащихНалогообложению = Новый Структура;
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("ОбщаяСтоимостьПодарков", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СтоимостьПодарковНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СуммаДоходовНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("ИныеДоходыНеПодлежащиеНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
	
	Возврат РасчетДоходовНеПодлежащихНалогообложению;
	
КонецФункции

Функция ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ОКТМОналогоплательщика, ВыбраннаяФорма3НДФЛ)
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ) Тогда
		ТаблицаСведенийОСуммахНалога = ТаблицаСведенийОСуммахНалога2022(
			ТаблицаДанныхЗаполнения,
			ТаблицаНалоговойБазы,
			ОКТМОналогоплательщика,
			ВыбраннаяФорма3НДФЛ);
	Иначе
		ТаблицаСведенийОСуммахНалога = ТаблицаСведенийОСуммахНалога2021(
			ТаблицаДанныхЗаполнения,
			ТаблицаНалоговойБазы,
			ОКТМОналогоплательщика,
			ВыбраннаяФорма3НДФЛ);
	КонецЕсли;
	
	Возврат ТаблицаСведенийОСуммахНалога;
	
КонецФункции

Функция СуммаПоложенныхВычетов(ТаблицаДанныхЗаполнения)
	
	Результат = 0;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанныхЗаполнения Цикл
		
		Если ТекущаяСтрока.Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
			Результат = Результат + ТекущаяСтрока.СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости
				+ ТекущаяСтрока.СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость;
		ИначеЕсли ТекущаяСтрока.СтруктураДанных.Свойство("ОбщаяСуммаСтандартныхСоциальныхВычетов") Тогда
			Результат = Результат + ТекущаяСтрока.СтруктураДанных.ОбщаяСуммаСтандартныхСоциальныхВычетов;
		ИначеЕсли ТекущаяСтрока.СтруктураДанных.Свойство("ИнвестиционныйВычет") Тогда
			Результат = Результат + ТекущаяСтрока.СтруктураДанных.ИнвестиционныйВычет;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры расчета налоговой базы по виду дохода и налоговой ставке.
//
// Параметры:
//   НалоговаяСтавка - Число - ставка налога
//   ВидДохода - Число - код вида дохода
//
// Возвращаемое значение:
//   Структура:
//     * НалоговаяСтавка - Число
//     * ВидДохода - Число
//     * ОбщаяСуммаДоходов - Число
//     * ОбщаяСуммаДоходовНеПодлежащаяНалогообложению - Число
//     * СуммаРасходов - Число
//     * ОбщаяСуммаДоходовКИК - Число
//     * СуммаНалоговыхВычетов - Число
//     * СуммаНалогаУдержанная - Число
//     * СуммаНалогаУдержаннаяСМатериальнойВыгоды - Число
//     * СуммаТорговогоСбора - Число
//     * СуммаУплаченныхАвансовыхПлатежей - Число
//     * СуммаФиксированныхАвансовыхПлатежей - Число
//     * СуммаНалогаИностранногоГосударства - Число
//     * СуммаНалогаПСН - Число
//     * ОбщаяСуммаДоходовПодлежащаяНалогообложению - Число
//     * НалоговаяБаза - Число
//     * СуммаНалогаИсчисленная - Число
//     * СуммаНалогаИсчисленнаяКУплате - Число
//     * СуммаНалогаПодлежащаяУплате - Число
//     * СуммаНалогаПодлежащаяВозврату - Число
//
Функция НоваяСтруктураРасчетаНалоговойБазы(НалоговаяСтавка, ВидДохода)
	
	РасчетНалоговойБазы = Новый Структура;
	РасчетНалоговойБазы.Вставить("НалоговаяСтавка", ЗначениеСтавкиНалога(НалоговаяСтавка));
	РасчетНалоговойБазы.Вставить("НалоговаяСтавкаСтрокой", Строка(НалоговаяСтавка));
	РасчетНалоговойБазы.Вставить("ВидДохода", ВидДохода);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", 0);
	РасчетНалоговойБазы.Вставить("СуммаРасходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовКИК", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалоговыхВычетов", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержанная", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержаннаяСМатериальнойВыгоды", 0);
	РасчетНалоговойБазы.Вставить("СуммаТорговогоСбора", 0);
	РасчетНалоговойБазы.Вставить("СуммаУплаченныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаФиксированныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИностранногоГосударства", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПСН", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовПодлежащаяНалогообложению", 0);
	РасчетНалоговойБазы.Вставить("НалоговаяБаза", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалоговойБазыПоОсновнойПоСтавке", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалоговойБазыПоПовышеннойСтавке", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленная", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленнаяСПревышения", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленнаяКУплате", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяУплате", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяВозврату", 0);
	РасчетНалоговойБазы.Вставить("РаспределениеПоОКТМО", Новый Соответствие); // Ключ - ОКТМО, Значение - сумма налога
	
	Возврат РасчетНалоговойБазы;
	
КонецФункции

Функция НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов(ПредварительныйРасчет = Истина)
	
	РасчетСоциальныхВычетов = Новый Структура;
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюВсего", 0);
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюКВычету", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаВзносовПенсионныйФонд", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("СоциальныйВычетПожертвования", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовБезОграничения", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычет", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычетКВосстановлению", 0);
	РасчетСоциальныхВычетов.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
	
	Возврат РасчетСоциальныхВычетов;
	
КонецФункции

Процедура РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов)
	
	// Расчет налоговой базы
	
	// Расчет суммы доходов, подлежащей налогообложению.
	ОбщаяСуммаДоходовПодлежащаяНалогообложению = Макс(0,
		РасчетНалоговойБазы.ОбщаяСуммаДоходов - РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению);
	
	// Расчет стандартных и социальных вычетов на листах Е1 и Е2.
	// Расчет вычета на пожертвования зависит от суммы доходов, подлежащей налогообложению.
	РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОбщаяСуммаДоходовПодлежащаяНалогообложению, ПределыВычетов);
	
	// В совокупности не может превышать значение показателя строки 030.
	СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
	Если СуммаРазницы > 0 Тогда
		
		// Сначала уменьшаем сумму вычета по листам З и И - убытки могут быть перенесены на следующие годы.
		РасчетНалоговойБазы.СуммаРасходов = Макс(0, РасчетНалоговойБазы.СуммаРасходов - СуммаРазницы);
		СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
		
		Если СуммаРазницы > 0 Тогда
			// Если вычетов все равно больше, уменьшаем сумму вычетов по строке 040.
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = Макс(0, РасчетНалоговойБазы.СуммаНалоговыхВычетов - СуммаРазницы);
		КонецЕсли;
		
	КонецЕсли;
	
	НалоговаяБаза = Макс(0,
		ОбщаяСуммаДоходовПодлежащаяНалогообложению
		+ РасчетНалоговойБазы.ОбщаяСуммаДоходовКИК
		- РасчетНалоговойБазы.СуммаНалоговыхВычетов
		- РасчетНалоговойБазы.СуммаРасходов);
	
	// Расчет имущественного вычета на приобретение недвижимости.
	РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, ПределыВычетов);
	
	// Расчет суммы налога, подлежащей уплате (доплате) / возврату.
	
	СуммаНалогаИсчисленная = Окр(НалоговаяБаза * РасчетНалоговойБазы.НалоговаяСтавка / 100, 0);
	
	СуммаНалогаИсчисленнаяКУплате = Макс(0,
		СуммаНалогаИсчисленная
		- РасчетНалоговойБазы.СуммаНалогаУдержанная
		- РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		- РасчетНалоговойБазы.СуммаТорговогоСбора
		- РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства);
	
	СуммаНалогаПодлежащаяУплате = Макс(0, СуммаНалогаИсчисленнаяКУплате - РасчетНалоговойБазы.СуммаНалогаПСН);
	
	МаксСуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаУдержанная + РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды + РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей;
	РасчетнаяСуммаНалогаПодлежащаяВозврату =
		РасчетНалоговойБазы.СуммаНалогаУдержанная
		+ РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		+ РасчетНалоговойБазы.СуммаТорговогоСбора
		+ РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства
		- СуммаНалогаИсчисленная;
	
	СуммаНалогаПодлежащаяВозврату = Макс(0, Мин(МаксСуммаНалогаПодлежащаяВозврату, РасчетнаяСуммаНалогаПодлежащаяВозврату));
	
	РасчетНалоговойБазы.ОбщаяСуммаДоходовПодлежащаяНалогообложению = ОбщаяСуммаДоходовПодлежащаяНалогообложению;
	РасчетНалоговойБазы.НалоговаяБаза = НалоговаяБаза;
	РасчетНалоговойБазы.СуммаНалогаИсчисленная = СуммаНалогаИсчисленная;
	РасчетНалоговойБазы.СуммаНалогаИсчисленнаяКУплате = СуммаНалогаИсчисленнаяКУплате;
	РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате = СуммаНалогаПодлежащаяУплате;
	РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату = СуммаНалогаПодлежащаяВозврату;
	
КонецПроцедуры

Процедура РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, ПределыВычетов)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Вид", Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости);
	ОтборСтрок.Вставить("ВидДохода", РасчетНалоговойБазы.ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", РасчетНалоговойБазы.НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	ОбщаяСуммаСтоимость = 0;
	ОбщаяСуммаПроценты = 0;
	
	ПределВычетаНаПриобретениеНедвижимостиСтоимость = ПределыВычетов.НаПриобретениеНедвижимостиСтоимость;
	
	ЕстьВычетПоПроцентам = Ложь;
	
	СтрокаСНедвижимостьюДо2014Года = Неопределено;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		Если СтрокаДанныхЗаполнения.СтруктураДанных.ОбъектПриобретенДо2014Года Тогда
			СтрокаСНедвижимостьюДо2014Года = СтрокаДанныхЗаполнения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		
		// Если недвижимость приобретена до 2014 года, то вычет предоставляется только по одному объекту недвижимости.
		// Используем первую найденную строку с такой недвижимостью.
		Если СтрокаСНедвижимостьюДо2014Года <> Неопределено И СтрокаДанныхЗаполнения <> СтрокаСНедвижимостьюДо2014Года Тогда
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = 0;
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			Продолжить;
		КонецЕсли;
		
		// Если объект приобретен до 2014 года в долевую собственность, то предел рассчитывается пропорционально доле.
		Если СтрокаДанныхЗаполнения = СтрокаСНедвижимостьюДо2014Года Тогда
			ПределВычетаНаПриобретениеНедвижимостиСтоимость =
				Окр(ПределВычетаНаПриобретениеНедвижимостиСтоимость
				* СтруктураДанных.ДоляВПравеСобственностиЧислитель
				/ СтруктураДанных.ДоляВПравеСобственностиЗнаменатель, 2);
		КонецЕсли;
		
		// Если объектов несколько, то общая сумма строк 120 листа Д1 не должна превышать предел вычета.
		// Поэтому рассчитываем значение строки 120 листа Д1 с учетом предела.
		
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Мин(СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости,
			ПределВычетаНаПриобретениеНедвижимостиСтоимость - ОбщаяСуммаСтоимость);
		
		// Проверим, чтобы значение строки не стало отрицательным.
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Макс(0,
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		ОбщаяСуммаСтоимость = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость,
			ОбщаяСуммаСтоимость + СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		// Вычет по процентам предоставляется только по одному объекту недвижимости.
		Если СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И НЕ ЕстьВычетПоПроцентам Тогда
			
			ЕстьВычетПоПроцентам = Истина;
			
			// По кредитам, оформленным после 2014 года, максимальная сумма вычета ограничена пределом вычета.
			Если Не СтруктураДанных.КредитОформленДо2014Года Тогда
				СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 
					Мин(ПределыВычетов.НаПриобретениеНедвижимостиПроценты, СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость);
			КонецЕсли;
			
			ОбщаяСуммаПроценты = СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость;
			
		ИначеЕсли СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И ЕстьВычетПоПроцентам Тогда
			
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Рассчитаем промежуточные итоги листа Д1.
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
		СтруктураДанных = ИтоговаяСтрока.СтруктураДанных;
		
		СтруктураДанных.Вставить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", НалоговаяБаза);
		
		// Вычет по стоимости, принятый к учету в предыдущие годы. Не может превышать предела.
		ВычетПрошлыхЛет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, СтруктураДанных.ВычетПрошлыхЛетСтоимость);
		
		МаксимальныйВычет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, ОбщаяСуммаСтоимость);
		ДоступныйВычет = Макс(0, МаксимальныйВычет - ВычетПрошлыхЛет);
		
		СтоимостьКВычету = Мин(ДоступныйВычет, НалоговаяБаза);
		
		// Остаток рассчитывается от общей стоимости, а не от предела вычета.
		ОстатокСтоимостиНаКонец = ОбщаяСуммаСтоимость - ВычетПрошлыхЛет - СтоимостьКВычету;
		
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", ВычетПрошлыхЛет);
		СтруктураДанных.Вставить("СуммаРасходовНаПриобретениеНедвижимостиКВычету", СтоимостьКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", ОстатокСтоимостиНаКонец);
		
		ДоступныйВычет = Макс(0, ОбщаяСуммаПроценты - СтруктураДанных.ВычетПрошлыхЛетПроценты);
		ПроцентыКВычету = Мин(НалоговаяБаза - СтоимостьКВычету, ДоступныйВычет);
		ОстатокПроцентыНаКонец = Макс(0, ОбщаяСуммаПроценты - СтруктураДанных.ВычетПрошлыхЛетПроценты - ПроцентыКВычету);
		
		// Сумма процентов к вычету с учетом ограничения, но без учета размера налоговой базы.
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", СтруктураДанных.ВычетПрошлыхЛетПроценты);
		СтруктураДанных.Вставить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",  ПроцентыКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", ОстатокПроцентыНаКонец);
		
		// Скорректируем налоговую базу и налоговые вычеты.
		НалоговаяБаза = НалоговаяБаза - СтоимостьКВычету - ПроцентыКВычету;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + СтоимостьКВычету + ПроцентыКВычету;
		
	КонецЕсли;
	
	// Удалим служебные ключи.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ОбъектПриобретенДо2014Года");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("КредитОформленДо2014Года");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетСтоимость");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетПроценты");
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыСтандартныхИСоциальныхВычетов()
	
	МассивВычетов = Новый Массив;
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Социальный);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Инвестиционный);
	
	Возврат МассивВычетов;
	
Конецфункции

Процедура РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОблагаемыйДоход, ПределыВычетов)
	
	МассивВычетов = ВидыСтандартныхИСоциальныхВычетов();
	
	РасчетВычетов = НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов();
	
	ОтборДанныхВычета = Новый Структура("Вид, ВидДохода, НалоговаяСтавка");
	ОтборДанныхВычета.ВидДохода = РасчетНалоговойБазы.ВидДохода;
	ОтборДанныхВычета.НалоговаяСтавка = РасчетНалоговойБазы.НалоговаяСтавка;
	
	Для Каждого Вычет Из МассивВычетов Цикл
		ОтборДанныхВычета.Вид = Вычет;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета) Цикл
			ДобавитьРасчетСтандартныхИСоциальныхВычетов(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетВычетов);
		КонецЦикла;
	КонецЦикла;
	
	// Социальный вычет на пожертвования не может превышать 25% от общей суммы доходов, подлежащей налогообложению.
	РасчетВычетов.СоциальныйВычетПожертвования = Мин(
		РасчетВычетов.СоциальныйВычетПожертвования,
		Окр(ОблагаемыйДоход * ПределыВычетов.ПожертвованияПроцентДохода, 2));
	
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения + РасчетВычетов.СоциальныйВычетПожертвования;
	
	// Связанные показатели.
	РасчетВычетов.ОбщаяСуммаВзносовПенсионныйФонд = РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни;
	
	// Сумма отдельных социальных вычетов не должна превышать установленного предела.
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
		Мин(РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением, ПределыВычетов.СоциальныеВычеты);
	
	// Итоговые показатели групп.
	РасчетВычетов.ОбщаяЗаявляемаяСуммаСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением + РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	// Увеличиваем общую сумму налоговых вычетов.
	РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов;
	
	// Показатели расчета, которые переносятся на лист Е1 с последней страницы листа Е2
	ИтоговыеПоказателиЛистаЕ2 = Новый Массив;
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюВсего");
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюКВычету");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычет");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычетКВосстановлению");
	ЗаполнитьИтовыеПоказателиЛистаЕ2 = Ложь;
	
	// Добавим итоговые показатели вычетов в таблицу данных, чтобы заполнить лист декларации.
	Если РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов <> 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		СтруктураДанных = ОбщегоНазначения.СкопироватьРекурсивно(РасчетВычетов);
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			СтруктураДанных.Удалить(ИмяПоказателяЛистаЕ2);
			ЗаполнитьИтовыеПоказателиЛистаЕ2 = ЗаполнитьИтовыеПоказателиЛистаЕ2
				Или РасчетВычетов[ИмяПоказателяЛистаЕ2] <> 0;
		КонецЦикла;
		НоваяСтрока.СтруктураДанных = СтруктураДанных;
	ИначеЕсли РасчетВычетов.ИнвестиционныйВычет <> 0
		Или РасчетВычетов.ИнвестиционныйВычетКВосстановлению <> 0 Тогда
		ЗаполнитьИтовыеПоказателиЛистаЕ2 = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИтовыеПоказателиЛистаЕ2 Тогда
		
		ОтборДанныхВычета.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета);
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		Если ИндексИтоговойСтроки >= 0 Тогда
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки]
		Иначе
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(ИтоговаяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		КонецЕсли;
		
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			ИтоговаяСтрока.СтруктураДанных.Вставить(ИмяПоказателяЛистаЕ2, РасчетВычетов[ИмяПоказателяЛистаЕ2]);
		КонецЦикла;
		
		ИтоговаяСтрока.СтруктураДанных.Вставить("ПредварительныйРасчет", РасчетВычетов.ПредварительныйРасчет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетСтандартныхИСоциальныхВычетов(Вид, ДанныеВычета, РасчетВычетов)
	
	Если Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
		
		СтандартныйВычетНалогоплательщика = 0;
		Если ТипЗнч(ДанныеВычета) = Тип("Структура") Тогда
			
			Для Каждого ТекущийВычет Из ДанныеВычета Цикл
				Если ТекущийВычет.Ключ = "РаспределениеВычета" Тогда
					Продолжить;
				КонецЕсли;
				СтандартныйВычетНалогоплательщика = СтандартныйВычетНалогоплательщика + ТекущийВычет.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов + СтандартныйВычетНалогоплательщика;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
			+ ДанныеВычета.СтандартныйВычетНаДетей
			+ ДанныеВычета.СтандартныйВычетНаДетейЕдинственномуРодителю
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидов
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
		
		РасчетВычетов.СоциальныйВычетПожертвования =
			РасчетВычетов.СоциальныйВычетПожертвования + ДанныеВычета.СоциальныйВычетПожертвования;
		
		Если ДанныеВычета.Свойство("СтраховыеВзносыНаПенсиюВсего") Тогда
			
			РасчетВычетов.СтраховыеВзносыНаПенсиюВсего =
				РасчетВычетов.СтраховыеВзносыНаПенсиюВсего + ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
			
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
				РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
				+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
			
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
				РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
				+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
			
		КонецЕсли;
		
		Если ДанныеВычета.Свойство("СтраховыеВзносыНаПенсиюКВычету") Тогда
			РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету =
				РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету + ДанныеВычета.СтраховыеВзносыНаПенсиюКВычету;
		КонецЕсли;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения = 
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения
			+ ДанныеВычета.СоциальныйВычетОбучениеДетей
			+ ДанныеВычета.СоциальныйВычетДорогостоящееЛечение;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СоциальныйВычетОбучениеСвое
			+ ДанныеВычета.СоциальныйВычетЛечениеМедикаменты
			+ ДанныеВычета.СоциальныйВычетМедикаменты
			+ ДанныеВычета.СоциальныйВычетОбычноеЛечение
			+ ДанныеВычета.СоциальныйВычетМедицинскоеСтрахование
			+ ДанныеВычета.РасходыНаПрохождениеНезависимойОценкиКвалификации
			+ ДанныеВычета.СоциальныйВычетЗаФитнес;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюВсего");
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюКВычету");
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
		РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетВычетов.ИнвестиционныйВычет =
			РасчетВычетов.ИнвестиционныйВычет + ДанныеВычета.ИнвестиционныйВычет;
		
		РасчетВычетов.ИнвестиционныйВычетКВосстановлению =
			РасчетВычетов.ИнвестиционныйВычетКВосстановлению + ДанныеВычета.ИнвестиционныйВычетКВосстановлению;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("ИнвестиционныйВычет");
		ДанныеВычета.Удалить("ИнвестиционныйВычетКВосстановлению");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетНалоговойБазыПоВидуДохода(Вид, ДоходВычет, РасчетНалоговойБазы)
	
	Если Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность
		И ДоходВычет.Свойство("ОбщаяСуммаДоходаИП") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ОбщаяСуммаДоходаИП;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаВычетаИП;
		РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей = РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей + ДоходВычет.СуммаУплаченныхАвансовыхПлатежейИП;
		
		РасчетНалоговойБазы.СуммаТорговогоСбора = РасчетНалоговойБазы.СуммаТорговогоСбора + ДоходВычет.СуммаТорговогоСбора;
		ДоходВычет.Удалить("СуммаТорговогоСбора");
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества
		Или Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ЦифровойАктив Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
		
		КолонкиДоходов = "ЦенныеБумагиИтогоСуммаДоходов,ЦенныеБумагиСуммаДохода";
		Для Каждого КолонкаДохода Из Новый Структура(КолонкиДоходов) Цикл
			Если ДоходВычет.Свойство(КолонкаДохода.Ключ) Тогда
				РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет[КолонкаДохода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		КолонкиРасходов = "ЦенныеБумагиИтогоСуммаРасходовКВычету,ЦенныеБумагиСуммаРасходовУменьшающаяДоходы,ЦенныеБумагиИтогоСуммаУбытка";
		Для Каждого КолонкаРасхода Из Новый Структура(КолонкиРасходов) Цикл
			Если ДоходВычет.Свойство(КолонкаРасхода.Ключ) Тогда
				РасчетНалоговойБазы.СуммаРасходов = РасчетНалоговойБазы.СуммаРасходов + ДоходВычет[КолонкаРасхода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		Если ДоходВычет.Свойство("СуммаНалогаУдержаннаяРФ") Тогда
			РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		КонецЕсли;
		
		Если ДоходВычет.Свойство("ЦенныеБумагиСуммаПрибылиКВычету") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов =
				РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ЦенныеБумагиСуммаПрибылиКВычету;
		КонецЕсли;
		
		Если ДоходВычет.Свойство("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов =
				РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
		КонецЕсли;
		
		Если РасчетНалоговойБазы.ОбщаяСуммаДоходов = 0 И ДоходВычет.Свойство("СуммаОблагаемогоДоходаРФ") Тогда
				
			РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаОблагаемогоДоходаРФ;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаРубДоходаЗаПределамиРФ;
		
		РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства =
			РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства + Окр(ДоходВычет.СуммаПодлежащаяЗачетуВРФ, 0);
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаРубДоходаЗаПределамиРФ;
		
		РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства =
			РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства + Окр(ДоходВычет.СуммаНалогаРубУплаченнаяЗаПределамиРФ, 0);
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ИнвестиционныйВычетКВосстановлению;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ИнвестиционныйВычет;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Имущественный Тогда
		
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаИмущественногоВычета;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаПрофессиональногоВычета;
		
	ИначеЕсли ТипЗнч(ДоходВычет) = Тип("Структура")
		И ДоходВычет.Свойство("СуммаДоходовНеПодлежащаяНалогообложению") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению = ДоходВычет.СуммаДоходовНеПодлежащаяНалогообложению;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеЗаявленияНаВозвратНалога(ТаблицаДанныхЗаполнения, Организация, СчетОрганизации, Период, ВариантДействияСНалогомКВозврату, НомерКорректировки, ВыбраннаяФорма3НДФЛ)
	
	Если ВариантДействияСНалогомКВозврату <> ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2024кв1" Или ВыбраннаяФорма3НДФЛ = "ФормаОтчета2023кв1" Тогда
		ДобавитьДанныеЗаявленияНаВозвратНалога2023(ТаблицаДанныхЗаполнения, СчетОрганизации, ВыбраннаяФорма3НДФЛ);
	Иначе
		ДобавитьДанныеЗаявленияНаВозвратНалога2022(ТаблицаДанныхЗаполнения,
			Организация,
			СчетОрганизации,
			ВыбраннаяФорма3НДФЛ,
			Период,
			НомерКорректировки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияРасчетаНалогаВДекларации(ПоясненияРасчетаНалога, Знач ТаблицаНалоговойБазы, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма3НДФЛ) Тогда
		ЗаполнитьПоясненияРасчетаНалогаВДекларации2022(
			ПоясненияРасчетаНалога,
			ТаблицаНалоговойБазы,
			ДанныеПомощникаЗаполнения,
			ВыбраннаяФорма3НДФЛ);
	Иначе
		ЗаполнитьПоясненияРасчетаНалогаВДекларации2021(
			ПоясненияРасчетаНалога,
			ТаблицаНалоговойБазы,
			ДанныеПомощникаЗаполнения,
			ВыбраннаяФорма3НДФЛ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияРасчетаНалогаВДекларации2021(ПоясненияРасчетаНалога, ТаблицаНалоговойБазы, ДанныеПомощникаЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ВидДоходаПоУмолчанию = КодВидаДохода(ВыбраннаяФорма3НДФЛ);
	ВидДоходаДивиденды = КодВидаДохода(ВыбраннаяФорма3НДФЛ, "Дивиденды");
	
	СтавкаПоУмолчанию = СтавкаНалога(ВыбраннаяФорма3НДФЛ);
	
	ФорматЧиселВПояснении = "ЧДЦ=2; ЧН=0,00; ЧГ=3,0";
	
	Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
		
		РасчетНалога = ТаблицаНалоговойБазы.Добавить();
		РасчетНалога.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(СтавкаПоУмолчанию, ВидДоходаПоУмолчанию);
		
	КонецЕсли;
	
	Для Каждого СтрокаНалоговойБазы Из ТаблицаНалоговойБазы Цикл
		
		РасчетНалога = СтрокаНалоговойБазы.СтруктураДанных; // см. НоваяСтруктураРасчетаНалоговойБазы
		
		НалоговаяСтавкаСтрока = Формат(РасчетНалога.НалоговаяСтавка, "ЧДЦ=0; ЧН=0; ЧФ=Ч%;");
		
		СтрокаНалоговаяСтавка = ПоясненияРасчетаНалога.Строки.Добавить();
		СтрокаНалоговаяСтавка.НалоговаяСтавка = РасчетНалога.НалоговаяСтавка;
		СтрокаНалоговаяСтавка.ВидДохода = РасчетНалога.ВидДохода;
		
		Если СтрокаНалоговаяСтавка.ВидДохода = ВидДоходаДивиденды Тогда
			СтрокаНалоговаяСтавка.Пояснение = СтрШаблон(НСтр("ru = 'Налог с дивидендов по ставке %1'"), НалоговаяСтавкаСтрока);
		Иначе
			СтрокаНалоговаяСтавка.Пояснение = СтрШаблон(НСтр("ru = 'Налог по ставке %1'"), НалоговаяСтавкаСтрока);
		КонецЕсли;
		
		Если СтрокаНалоговаяСтавка.НалоговаяСтавка = СтавкаПоУмолчанию
			И СтрокаНалоговаяСтавка.ВидДохода = ВидДоходаПоУмолчанию Тогда
			СтрокаНалоговаяСтавка.Порядок = 1;
			ОсвобождениеОтНалога = ДанныеПомощникаЗаполнения.ОсвобождениеОтНалога;
		Иначе
			СтрокаНалоговаяСтавка.Порядок = 2;
			ОсвобождениеОтНалога = 0;
		КонецЕсли;
		
		// Показатели расчета.
		
		// Доходы, подлежащие налогообложению.
		ОблагаемыеДоходы = РасчетНалога.ОбщаяСуммаДоходовПодлежащаяНалогообложению + РасчетНалога.ОбщаяСуммаДоходовКИК;
		Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Доходы, подлежащие налогообложению:'");
		Показатель.Значение = Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении);
		
		// Налоговые вычеты.
		Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
		Показатель.Пояснение = НСтр("ru = 'Налоговые вычеты:'");
		Показатель.Значение = Формат(РасчетНалога.СуммаНалоговыхВычетов, ФорматЧиселВПояснении);
		
		// Расходы, уменьшающие налог.
		Если РасчетНалога.СуммаРасходов > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Расходы, уменьшающие налог:'");
			Показатель.Значение = Формат(РасчетНалога.СуммаРасходов, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Удержанный налог.
		УдержанныйНалог = РасчетНалога.СуммаНалогаУдержанная + РасчетНалога.СуммаНалогаУдержаннаяСМатериальнойВыгоды;
		Если УдержанныйНалог > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Удержанный налог:'");
			Показатель.Значение = Формат(УдержанныйНалог, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Уплаченные авансовые платежи.
		Если РасчетНалога.СуммаУплаченныхАвансовыхПлатежей > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Уплаченные авансовые платежи:'");
			Показатель.Значение = Формат(РасчетНалога.СуммаУплаченныхАвансовыхПлатежей, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Уменьшение налога.
		УменьшениеНалога = РасчетНалога.СуммаТорговогоСбора
			+ РасчетНалога.СуммаФиксированныхАвансовыхПлатежей
			+ РасчетНалога.СуммаНалогаИностранногоГосударства;
		
		Если УменьшениеНалога > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Уменьшение налога:'");
			Показатель.Значение = Формат(УменьшениеНалога, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Платежи по патентам, подлежащие зачету.
		Если РасчетНалога.СуммаНалогаПСН > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Платежи по патентам:'");
			Показатель.Значение = Формат(РасчетНалога.СуммаНалогаПСН, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Освобождение от налога за 2 квартал
		Если РасчетНалога.СуммаНалогаПодлежащаяУплате > 0 И ОсвобождениеОтНалога > 0 Тогда
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = НСтр("ru = 'Освобождение от налога за 2 квартал:'");
			Показатель.Значение = Формат(ОсвобождениеОтНалога, ФорматЧиселВПояснении);
		КонецЕсли;
		
		// Формулы.
		
		// Налог исчисленный.
		ЧастиФормулыОсновнойТекст = Новый Массив;
		ЧастиФормулыДополнительныйТекст = Новый Массив;
		
		ЧастиФормулыОсновнойТекст.Добавить(НСтр("ru = 'Доходы - Налоговые вычеты'"));
		ЧастиФормулыДополнительныйТекст.Добавить(
			СтрШаблон("%1 - %2", 
				Формат(ОблагаемыеДоходы, ФорматЧиселВПояснении),
				Формат(РасчетНалога.СуммаНалоговыхВычетов, ФорматЧиселВПояснении)));
		
		Если РасчетНалога.СуммаРасходов > 0 Тогда
			ЧастиФормулыОсновнойТекст.Добавить(НСтр("ru = 'Расходы'"));
			ЧастиФормулыДополнительныйТекст.Добавить(Формат(РасчетНалога.СуммаРасходов, ФорматЧиселВПояснении));
		КонецЕсли;
		
		РассчитываемыйПоказатель = НСтр("ru = 'Налог за год'");
		Если УдержанныйНалог = 0 И УменьшениеНалога = 0
			И РасчетНалога.СуммаНалогаПСН = 0 И ОсвобождениеОтНалога = 0
			И РасчетНалога.СуммаУплаченныхАвансовыхПлатежей = 0 Тогда
			
			РассчитываемыйПоказатель = НСтр("ru = '<b>Налог к уплате</b>'");
			
			СтрокаНалоговаяСтавка.ПояснениеСвернуто = СтрШаблон(
				НСтр("ru = 'Налог по ставке %1: к уплате %2 руб.'"),
				НалоговаяСтавкаСтрока,
				Формат(РасчетНалога.СуммаНалогаИсчисленная, ФорматЧиселВПояснении));
			
		КонецЕсли;
		
		ОсновнойТекст = СтрШаблон(НСтр("ru = '%1 = (%2) * Ставка налога'"),
			РассчитываемыйПоказатель, СтрСоединить(ЧастиФормулыОсновнойТекст, " - "));
		
		ДополнительныйТекст = СтрШаблон(НСтр("ru = '(%1) * %2'"),
			СтрСоединить(ЧастиФормулыДополнительныйТекст, " - "), НалоговаяСтавкаСтрока);
		
		Пояснение = СтрШаблон("%1%2%3", ОсновнойТекст, Символы.ПС, ДополнительныйТекст);
		
		Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
		Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(Пояснение);
		Показатель.Значение = Формат(РасчетНалога.СуммаНалогаИсчисленная, ФорматЧиселВПояснении);
		
		// Налог к уплате / возврату
		Если Не (УдержанныйНалог = 0 И УменьшениеНалога = 0
			И РасчетНалога.СуммаНалогаПСН = 0 И ОсвобождениеОтНалога = 0
			И РасчетНалога.СуммаУплаченныхАвансовыхПлатежей = 0) Тогда
			
			ОсновнойТекстУменьшениеНалога = Новый Массив;
			ДопТекстУменьшениеНалога = Новый Массив;
			
			Если УдержанныйНалог > 0 Тогда
				ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Удержанный налог'"));
				ДопТекстУменьшениеНалога.Добавить(Формат(УдержанныйНалог, ФорматЧиселВПояснении));
			КонецЕсли;
			
			Если РасчетНалога.СуммаУплаченныхАвансовыхПлатежей > 0 Тогда
				ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Авансовые платежи'"));
				ДопТекстУменьшениеНалога.Добавить(Формат(РасчетНалога.СуммаУплаченныхАвансовыхПлатежей, ФорматЧиселВПояснении));
			КонецЕсли;
			
			Если УменьшениеНалога > 0 Тогда
				ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Уменьшение налога'"));
				ДопТекстУменьшениеНалога.Добавить(Формат(УменьшениеНалога, ФорматЧиселВПояснении));
			КонецЕсли;
			
			Если РасчетНалога.СуммаНалогаПодлежащаяВозврату > 0 Тогда
				
				ОсновнойТекст = СтрШаблон(
					НСтр("ru = '<b>Налог к возврату</b> = %1 - Налог за год'"),
					СтрСоединить(ОсновнойТекстУменьшениеНалога, " + "));
				
				ДополнительныйТекст = СтрШаблон("%1 - %2",
					СтрСоединить(ДопТекстУменьшениеНалога, " + "),
					Формат(РасчетНалога.СуммаНалогаИсчисленная, ФорматЧиселВПояснении));
				
				ЗначениеПоказателя = РасчетНалога.СуммаНалогаПодлежащаяВозврату;
				
				СтрокаНалоговаяСтавка.ПояснениеСвернуто = СтрШаблон(
					НСтр("ru = 'Налог по ставке %1: к возврату %2 руб.'"),
					НалоговаяСтавкаСтрока,
					Формат(ЗначениеПоказателя, ФорматЧиселВПояснении));
				
			Иначе
				
				Если ОсвобождениеОтНалога > 0 Тогда
					ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Освобождение от налога'"));
					ДопТекстУменьшениеНалога.Добавить(Формат(ОсвобождениеОтНалога, ФорматЧиселВПояснении));
				КонецЕсли;
				
				Если РасчетНалога.СуммаНалогаПСН Тогда
					ОсновнойТекстУменьшениеНалога.Добавить(НСтр("ru = 'Платежи по патентам'"));
					ДопТекстУменьшениеНалога.Добавить(Формат(РасчетНалога.СуммаНалогаПСН, ФорматЧиселВПояснении));
				КонецЕсли;
				
				ОсновнойТекст = СтрШаблон(
					НСтр("ru = '<b>Налог к уплате</b> = Налог за год - %1'"),
					СтрСоединить(ОсновнойТекстУменьшениеНалога, " - "));
				
				ДополнительныйТекст = СтрШаблон("%1 - %2",
					Формат(РасчетНалога.СуммаНалогаИсчисленная, ФорматЧиселВПояснении),
					СтрСоединить(ДопТекстУменьшениеНалога, " - "));
				
				ЗначениеПоказателя = Макс(0, РасчетНалога.СуммаНалогаПодлежащаяУплате - ОсвобождениеОтНалога);
				
				СтрокаНалоговаяСтавка.ПояснениеСвернуто = СтрШаблон(
					НСтр("ru = 'Налог по ставке %1: к уплате %2 руб.'"),
					НалоговаяСтавкаСтрока,
					Формат(ЗначениеПоказателя, ФорматЧиселВПояснении));
				
			КонецЕсли;
			
			Пояснение = СтрШаблон("%1%2(%3)", ОсновнойТекст, Символы.ПС, ДополнительныйТекст);
	
			Показатель = СтрокаНалоговаяСтавка.Строки.Добавить();
			Показатель.Пояснение = СтроковыеФункции.ФорматированнаяСтрока(Пояснение);
			Показатель.Значение = Формат(ЗначениеПоказателя, ФорматЧиселВПояснении);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоясненияРасчетаНалога.Строки.Сортировать("Порядок ВОЗР, ВидДохода, НалоговаяСтавка", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПомощникУплатыАвансовыхПлатежейНДФЛ

#Область ЗаполнениеАвансов

Функция ДокументыУплатыАвансовыхПлатежей(Организация, Период, Правило = Неопределено) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	Если ЗначениеЗаполнено(Правило) Тогда
		ПараметрыУплатыНалогов.Правило = Правило;
	Иначе
		ПараметрыУплатыНалогов.КодыЗадач.Добавить("НДФЛ_ИП");
	КонецЕсли;
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

// Возвращает структуру с показателями для расчета налога НДФЛ.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция НачальныеПоказатели(Организация, Период) Экспорт
	
	Показатели = НовыеПоказатели(Организация, Период);
	
	Если Не ЗначениеЗаполнено(Показатели.СообщениеОбОшибке)
		И Показатели.КонецПериода >= Показатели.НачалоНалоговогоПериода
		И Показатели.ПлательщикНДФЛ Тогда
		
		ЗаполнитьНачальныеПоказатели(Показатели);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

Функция ПоясненияКРасчету(Показатели) Экспорт
	
	ТаблицаЭтапы = НовыйПоясненияРасчета();
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	ФорматЧиселИтоги = ФорматЧиселУплатаНалога(Показатели.Период);
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	Доходы                        = Формат(Показатели.Доходы,                  ФорматЧиселВПояснении);
	ПрочиеДоходы                  = Формат(Показатели.ПрочиеДоходы,            ФорматЧиселВПояснении);
	АвансыПокупателей             = Формат(Показатели.АвансыПокупателей,       ФорматЧиселВПояснении);
	ПрофессиональныйВычет         = Формат(Показатели.ПрофессиональныйВычет,   ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,        ФорматЧиселВПояснении);
	СтандартныйВычетНаДетей       = Формат(Показатели.СтандартныйВычетНаДетей, ФорматЧиселВПояснении);
	СтандартныйВычетНаНалогоплательщика = Формат(Показатели.СтандартныйВычетНаНалогоплательщика, ФорматЧиселВПояснении);
	
	СтандартныйВычет = Показатели.СтандартныйВычетНаДетей + Показатели.СтандартныйВычетНаНалогоплательщика;
	НалогКУплате = Формат(Показатели.НалогКУплате, ФорматЧиселИтоги);
	
	НомерЭтапа = 0;
	
	// Этап №1
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст = НСтр("ru = 'Стандартный вычет = Стандартный вычет на детей + Стандартный вычет на налогоплательщика'");
	
	ДополнительныйТекст = СтрШаблон("%1 + %2", СтандартныйВычетНаДетей, СтандартныйВычетНаНалогоплательщика);
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение   = СтандартныйВычет;
	
	// Этап - доходы
	Если Показатели.ВключатьАвансы Тогда
		
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = НСтр("ru = 'Доходы = Доходы от реализации + Прочие доходы + Авансы покупателей'");
		
		ДополнительныйТекст = СтрШаблон("%1 + %2 + %3", Доходы, ПрочиеДоходы, АвансыПокупателей);
		ДоходыВсего = Формат(Показатели.Доходы + Показатели.АвансыПокупателей + Показатели.ПрочиеДоходы, ФорматЧиселВПояснении);
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение   = ДоходыВсего;
		
	Иначе
		
		ДоходыВсего = Доходы;
		
	КонецЕсли;
	
	// Этап - расчет налоговой базы
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст = НСтр("ru = 'Налоговая база = Доходы - Профессиональный вычет - Стандартный вычет'");
	
	ДополнительныйТекст = СтрШаблон("%1 - %2 - %3", ДоходыВсего, ПрофессиональныйВычет, СтандартныйВычет);
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение   = Формат(Показатели.НалоговаяБаза, ФорматЧиселВПояснении);
	
	СодержимоеСтроки = Новый Массив;
	ПредставлениеФормулыРасчета = ПредставлениеФормулыРасчетаНалога(Показатели.НалоговаяБаза, Показатели.Период);
	
	Если НомерКвартала > 1 Тогда
		
		СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Налог за %1 = '"), Показатели.ПредставлениеПериода));
		СодержимоеСтроки.Добавить(ПредставлениеФормулыРасчета.Текст);
		
		ЗначениеПредставления = Формат(Показатели.НалогИсчисленныйВсего, ФорматЧиселВПояснении);
		ДополнительныйТекст = ПредставлениеФормулыРасчета.Пояснение;
		
	Иначе
		
		СодержимоеСтроки.Добавить(СтрокаОформитьИтог(НСтр("ru = 'Налог к уплате'")));
		СодержимоеСтроки.Добавить(" = ");
		СодержимоеСтроки.Добавить(ПредставлениеФормулыРасчета.Текст);
		
		ДополнительныйТекст = ПредставлениеФормулыРасчета.Пояснение;
		
		Если ДобавитьЭтапПереплаты(ТаблицаЭтапы, Показатели.Переплата, Показатели, НомерЭтапа) Тогда
			СодержимоеСтроки.Добавить(НСтр("ru = ' - Переплата'"));
			ДополнительныйТекст = СтрШаблон("%1 - %2",
				ДополнительныйТекст,
				Формат(Показатели.Переплата, ФорматЧиселВПояснении));
		КонецЕсли;
		
		ЗначениеПредставления = СтрокаОформитьИтог(НалогКУплате);
		
	КонецЕсли;
	
	ОсновнойТекст = Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
	// Этап №4
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение   = ЗначениеПредставления;
	
	Если Показатели.ПрименяетсяОсвобождениеВТекущемПериоде И Показатели.ОсвобождениеОтНалога <> 0 Тогда
		
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(НСтр("ru = 'Освобождение от налога за %1 квартал'"), Показатели.НомерКвартала);
		ОсвобождениеОтНалога = Формат(Показатели.ОсвобождениеОтНалога, ФорматЧиселИтоги);
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст);
		Этап.Значение   = Новый ФорматированнаяСтрока(
			ОсвобождениеОтНалога, , , ,
			НавигационнаяСсылкаОсвобождениеОтНалога(Показатели));
		
	КонецЕсли;
	
	// Этап №5 - окончательный расчет налога к уплате
	Если НомерКвартала > 1 Тогда
		
		ЕстьПереплата = ДобавитьЭтапПереплаты(ТаблицаЭтапы, Показатели.Переплата, Показатели, НомерЭтапа);
		
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		СодержимоеСтроки = Новый Массив;
		СодержимоеСтроки.Добавить(СтрокаОформитьИтог(НСтр("ru = 'Налог к уплате'")));
		СодержимоеСтроки.Добавить(" = ");
		
		ЗнакМинус = " - ";
		СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Налог за %1'"), Показатели.ПредставлениеПериода));
		СодержимоеСтроки.Добавить(ЗнакМинус);
		Если НомерКвартала > 2 Тогда
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Авансовые платежи за %1'"), ПредставлениеПериодаАванса));
		Иначе
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Авансовый платеж за %1'"), ПредставлениеПериодаАванса));
		КонецЕсли;
		
		ТекстДополнения = Новый Массив;
		ТекстДополнения.Добавить(Формат(Показатели.НалогИсчисленныйВсего, ФорматЧиселВПояснении));
		ТекстДополнения.Добавить(АвансовыеПлатежи);
		
		Если ЕстьПереплата Тогда
			
			СодержимоеСтроки.Добавить(ЗнакМинус);
			СодержимоеСтроки.Добавить(НСтр("ru = 'Переплата'"));
			ТекстДополнения.Добавить(Формат(Показатели.Переплата, ФорматЧиселВПояснении));
			
		КонецЕсли;
		
		Если Показатели.ОсвобождениеОтНалога <> 0 Тогда
			
			СодержимоеСтроки.Добавить(ЗнакМинус);
			СодержимоеСтроки.Добавить(НСтр("ru = 'Освобождение от налога'"));
			ТекстДополнения.Добавить(Формат(Показатели.ОсвобождениеОтНалога, ФорматЧиселВПояснении));
			
		КонецЕсли;
		
		ДополнительныйТекст = СтрСоединить(ТекстДополнения, ЗнакМинус);
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
		Этап.Значение = СтрокаОформитьИтог(НалогКУплате);
		
	КонецЕсли;
	
	Возврат ТаблицаЭтапы;
	
КонецФункции

Функция ПредставлениеФормулыРасчетаНалога(НалоговаяБаза, Период)
	
	Результат = Новый Структура("Текст, Пояснение");
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	
	ПределНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	НалоговыеСтавки = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию(Период);
	
	Если Период >= УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы()
		И НалоговаяБаза > ПределНалоговойБазы Тогда
		
		НалогПредельнаяВеличина = Формат(ПределНалоговойБазы * НалоговыеСтавки.СтавкаНДФЛ / 100, ФорматЧиселВПояснении);
		
		Результат.Текст = СтрШаблон(НСтр("ru = '%1 + (Налоговая база - %2) * Ставка налога'"),
			НалогПредельнаяВеличина,
			ПределНалоговойБазы);
		
		Результат.Пояснение = СтрШаблон("%1 + (%2 - %3) * %4%%",
			НалогПредельнаяВеличина,
			Формат(НалоговаяБаза, ФорматЧиселВПояснении),
			Формат(ПределНалоговойБазы, ФорматЧиселВПояснении),
			НалоговыеСтавки.СтавкаНДФЛПовышенная);
		
	Иначе
		Результат.Текст = НСтр("ru = 'Налоговая база * Ставка налога'");
		Результат.Пояснение = СтрШаблон("%1 * %2%%",
			Формат(НалоговаяБаза, ФорматЧиселВПояснении),
			НалоговыеСтавки.СтавкаНДФЛ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстСообщенияРасчетыПрошлыхЛет(Задолженность, ГраницаОтчетностиПрошлыхПериодов) Экспорт
	
	ЧастиСообщения = Новый Массив;
	
	Если Задолженность > 0 Тогда
		
		ЧастиСообщения = Новый Массив;
		
		ЧастиСообщения.Добавить(НСтр("ru = 'Не оплачена задолженность'"));
		ЧастиСообщения.Добавить(" ");
		
		ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(ОбщегоНазначенияБПВызовСервера.ФорматСумм(Задолженность),
			, , , "ОплатитьЗадолженность"));
		
		ЧастиСообщения.Добавить(" ");
		ЧастиСообщения.Добавить(НСтр("ru = 'по налогу за прошлые годы'"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

// Возвращает порядок предоставления отчета и оплаты НДФЛ за период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//
// Возвращаемое значение:
//   Структура, Неопределено -  См. РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод
//
Функция ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период) Экспорт
	
	ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП;
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
КонецФункции

Функция ЭтоУплатаНДФЛ(Налог) Экспорт
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(ВидНалога)
		Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоЕдиныйНалоговыйПлатеж(ВидНалога);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеАвансовСлужебныеПроцедурыИФункции

Функция АвансыВключенныеВПрочиеДоходы(Организация, ДатаНачала, ДатаОкончания, ХарактерДеятельности = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИППрочиеДоходыОбороты.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИППрочиеДоходы.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Период,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &ОтборПоХарактеруДеятельности
	|						ТОГДА ХарактерДеятельности = &ХарактерДеятельности
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИППрочиеДоходыОбороты");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ХарактерДеятельности", ХарактерДеятельности);
	Запрос.УстановитьПараметр("ОтборПоХарактеруДеятельности", ЗначениеЗаполнено(ХарактерДеятельности));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Сумма;
	
КонецФункции

Функция ДобавитьЭтапПереплаты(ТаблицаЭтапы, СуммаПереплаты, Показатели, НомерЭтапа)
	
	Если СуммаПереплаты <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Переплата = Формат(Показатели.Переплата, ФорматЧиселУплатаНалога(Показатели.Период));
	
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст = НСтр("ru = 'Переплата за прошлые годы'");
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст);
	Этап.Значение = Новый ФорматированнаяСтрока(Переплата, , , , НавигационнаяСсылкаПереплаты(Показатели));
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьНачальныеПоказатели(Показатели)
	
	Организация   = Показатели.Организация;
	НомерКвартала = Показатели.НомерКвартала;
	НачалоПериода = Показатели.НачалоНалоговогоПериода;
	КонецПериода  = Показатели.КонецПериода;
	
	// Результат начисления НДФЛ
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеЗаполнения.Организация КАК Организация,
	|	ДанныеЗаполнения.ПериодРасчета КАК ПериодРасчета,
	|	СУММА(ДанныеЗаполнения.Доходы) КАК Доходы,
	|	СУММА(ДанныеЗаполнения.ПрофессиональныйВычет) КАК ПрофессиональныйВычет,
	|	СУММА(ДанныеЗаполнения.СтандартныйВычетНаДетей) КАК СтандартныйВычетНаДетей,
	|	СУММА(ДанныеЗаполнения.СтандартныйВычетНаНалогоплательщика) КАК СтандартныйВычетНаНалогоплательщика,
	|	СУММА(ДанныеЗаполнения.НалоговаяБаза) КАК НалоговаяБаза,
	|	ДанныеЗаполнения.СтавкаНалога КАК СтавкаНалога,
	|	СУММА(ДанныеЗаполнения.НалогИсчисленныйВсего) КАК НалогИсчисленныйВсего,
	|	СУММА(ДанныеЗаполнения.НалогКУплате) КАК НалогКУплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПРасчетНДФЛ.Организация КАК Организация,
	|		ИПРасчетНДФЛ.ПериодРасчета КАК ПериодРасчета,
	|		ИПРасчетНДФЛ.Доходы КАК Доходы,
	|		0 КАК ПрофессиональныйВычет,
	|		0 КАК СтандартныйВычетНаДетей,
	|		0 КАК СтандартныйВычетНаНалогоплательщика,
	|		ИПРасчетНДФЛ.НалоговаяБаза КАК НалоговаяБаза,
	|		ИПРасчетНДФЛ.СтавкаНалога КАК СтавкаНалога,
	|		ИПРасчетНДФЛ.НалогИсчисленныйВсего КАК НалогИсчисленныйВсего,
	|		ИПРасчетНДФЛ.НалогКУплате КАК НалогКУплате
	|	ИЗ
	|		РегистрСведений.ИПРасчетНДФЛ КАК ИПРасчетНДФЛ
	|	ГДЕ
	|		ИПРасчетНДФЛ.Организация = &Организация
	|		И ИПРасчетНДФЛ.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ИПРасчетНДФЛ.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИПРасчетНДФЛ.Организация,
	|		ИПРасчетНДФЛ.ПериодРасчета,
	|		0,
	|		ИПРасчетНДФЛ.СуммаВычета,
	|		0,
	|		0,
	|		0,
	|		ИПРасчетНДФЛ.СтавкаНалога,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ИПРасчетНДФЛ КАК ИПРасчетНДФЛ
	|	ГДЕ
	|		ИПРасчетНДФЛ.Организация = &Организация
	|		И ИПРасчетНДФЛ.ВидВычета = ЗНАЧЕНИЕ(Перечисление.ВычетыФизическихЛиц.Профессиональный)
	|		И ИПРасчетНДФЛ.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ИПРасчетНДФЛ.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИПРасчетНДФЛ.Организация,
	|		ИПРасчетНДФЛ.ПериодРасчета,
	|		0,
	|		0,
	|		ИПРасчетНДФЛ.СуммаВычета,
	|		0,
	|		0,
	|		ИПРасчетНДФЛ.СтавкаНалога,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ИПРасчетНДФЛ КАК ИПРасчетНДФЛ
	|	ГДЕ
	|		ИПРасчетНДФЛ.Организация = &Организация
	|		И ИПРасчетНДФЛ.ВидВычета = ЗНАЧЕНИЕ(Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей)
	|		И ИПРасчетНДФЛ.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ИПРасчетНДФЛ.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИПРасчетНДФЛ.Организация,
	|		ИПРасчетНДФЛ.ПериодРасчета,
	|		0,
	|		0,
	|		0,
	|		ИПРасчетНДФЛ.СуммаВычета,
	|		0,
	|		ИПРасчетНДФЛ.СтавкаНалога,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ИПРасчетНДФЛ КАК ИПРасчетНДФЛ
	|	ГДЕ
	|		ИПРасчетНДФЛ.Организация = &Организация
	|		И ИПРасчетНДФЛ.ВидВычета = ЗНАЧЕНИЕ(Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика)
	|		И ИПРасчетНДФЛ.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ИПРасчетНДФЛ.Активность) КАК ДанныеЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаполнения.Организация,
	|	ДанныеЗаполнения.ПериодРасчета,
	|	ДанныеЗаполнения.СтавкаНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПСтандартныеВычетыНаДетейСрезПоследних.ВсегоДетей КАК ВсегоДетей
	|ИЗ
	|	РегистрСведений.ИПСтандартныеВычетыНаДетей.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК ИПСтандартныеВычетыНаДетейСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПСтандартныеВычетыНаНалогоплательщикаСрезПоследних.ВидВычета КАК ВидВычета
	|ИЗ
	|	РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК ИПСтандартныеВычетыНаНалогоплательщикаСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Показатели, РезультатЗапроса[0].Выгрузить()[0]);
		Показатели.НалогНачислен = Истина;
	КонецЕсли;
	
	// Доходы и расходы
	
	ПараметрыРасчета = УчетНДФЛПредпринимателя.НовыеПараметрыРасчетаДоходыИРасходыПредпринимателя(
		Организация, НачалоПериода, КонецПериода, Показатели.ИмяФормыОтчета);
	ДоходыРасходы = УчетНДФЛПредпринимателя.СведенияОДоходахИВычетах(ПараметрыРасчета);
	
	ЗаполнитьЗначенияСвойств(Показатели, ДоходыРасходы);
	
	Если Показатели.ВключатьАвансы Тогда
		
		// Скорректируем сумму доходов, если в предыдущих расчетах авансы покупателей были включены в прочие доходы
		СуммаАвансов = АвансыВключенныеВПрочиеДоходы(Организация, НачалоПериода, КонецПериода);
		Показатели.ПрочиеДоходы = ДоходыРасходы.ПрочиеДоходы - СуммаАвансов;
		Показатели.Доходы = Показатели.Доходы - СуммаАвансов - Показатели.ПрочиеДоходы;
		
		ПараметрыРасчетаАвансов = УчетДоходовИРасходовПредпринимателя.НовыйПараметрыРасчетаАвансовПокупателей();
		ЗаполнитьЗначенияСвойств(ПараметрыРасчетаАвансов, Показатели);
		
		ТаблицаАвансов = УчетДоходовИРасходовПредпринимателя.АвансыПокупателей(ПараметрыРасчетаАвансов);
		Если ЗначениеЗаполнено(ТаблицаАвансов) Тогда
			Показатели.АвансыПокупателей = ТаблицаАвансов.Итог("Сумма");
		КонецЕсли;
		
		Доходы = Показатели.Доходы + Показатели.ПрочиеДоходы + СуммаАвансов;
		
	Иначе
		
		Доходы = Показатели.Доходы;
		
	КонецЕсли;
	
	Показатели.ПрофессиональныйВычет = УчетНДФЛПредпринимателя.СуммаПрофессиональногоВычета(
		ДоходыРасходы.Расходы,
		Доходы,
		Показатели.ИмяФормыОтчета,
		Показатели.КонецПериода = КонецГода(Показатели.КонецПериода));
	
	// Стандартные вычеты
	// Всегда рассчитываются по данным регистров
	
	Показатели.ЗаполнитьВычетНаДетей = РезультатЗапроса[1].Пустой();
	Показатели.ЗаполнитьВычетНаНалогоплательщика = РезультатЗапроса[2].Пустой();
	
	ПараметрыВычета = УчетНДФЛПредпринимателя.НовыйПараметрыВычета();
	ПараметрыВычета.НачалоПериода     = НачалоПериода;
	ПараметрыВычета.КонецПериода      = КонецПериода;
	ПараметрыВычета.Организация       = Организация;
	ПараметрыВычета.ВыбраннаяФорма    = Показатели.ИмяФормыОтчета;
	ПараметрыВычета.ВычетЗаВесьПериод = Истина;
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика";
	
	Показатели.СтандартныйВычетНаНалогоплательщика = УчетНДФЛПредпринимателя.СуммаСтандартногоВычета(ПараметрыВычета);
	
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаДетей";
	ПараметрыВычета.КоличествоМесяцев = ДоходыРасходы.КоличествоМесяцевВычетНаДетей;
	ПараметрыВычета.ВычетЗаВесьПериод = Ложь;
	Показатели.СтандартныйВычетНаДетей = УчетНДФЛПредпринимателя.СуммаСтандартногоВычета(ПараметрыВычета);
	
	// Прочие служебные параметры
	
	ПорядокОтчетаУплаты = ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Показатели.КонецПериода);
	ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Уплата");
	
	Если ЗначениеЗаполнено(ПорядокУплаты) Тогда
		
		Показатели.Срок = ПорядокУплаты.Срок;
		Показатели.Правило = ПорядокУплаты.Правило;
		Показатели.Вставить("ИдентификаторЗадачи",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПорядокУплаты.Правило.Владелец, "Код"));
		
		Если ПорядокУплаты.Свойство("Отчет") И ЗначениеЗаполнено(ПорядокУплаты.Отчет) Тогда
			Показатели.РегистрацияВНалоговомОргане = ПорядокУплаты.Отчет.РегистрацияВНалоговомОргане;
		КонецЕсли;
		
	КонецЕсли;
	
	Показатели.ГраницаОтчетностиПрошлыхПериодов
		= ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Показатели.ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Показатели.ГраницаОтчетностиПрошлыхПериодов = '00010101';
	КонецЕсли;
	
	Показатели.НалоговыйПериодПропущен = УчетДоходовИРасходовПредпринимателя.НалоговыйПериодПропущен(Организация,
		Показатели.Период,
		Показатели.ДатаРегистрацииОрганизации);
	
	Показатели.НалоговыйПериодРасширен = НалоговыйПериодРасширен(Организация,
		Показатели.Период,
		Показатели.Правило,
		Показатели.ДатаРегистрацииОрганизации);
	
	Если ЗначениеЗаполнено(Показатели.ГраницаОтчетностиПрошлыхПериодов) И Не Показатели.НалоговыйПериодПропущен Тогда
		
		Показатели.ЭтоПериодПрошлыхЛет = Показатели.Период <= Показатели.ГраницаОтчетностиПрошлыхПериодов
			Или Показатели.Период < Показатели.ДатаНачалаПримененияРасчетаАвансов;
		
	КонецЕсли;
	
	Показатели.ПодсказкаПоНалогу = ПодсказкаПоНалогу(НомерКвартала, Показатели.Срок);
	
	Показатели.ДеятельностьОтсутствует = Доходы = 0 И Показатели.АвансовыеПлатежи = 0
		И Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	// Авансовые платежи
	
	Если НомерКвартала > 1 Тогда
		Показатели.АвансовыеПлатежи = УчетНДФЛПредпринимателя.УплаченныйНалогЗаПериод(
			Организация, Показатели.НачалоПериода, НачалоКвартала(КонецПериода) - 1);
	КонецЕсли;
	
	СтандартныйВычет = Показатели.СтандартныйВычетНаДетей + Показатели.СтандартныйВычетНаНалогоплательщика;
	Показатели.НалоговаяБаза = Макс(0, Доходы - Показатели.ПрофессиональныйВычет - СтандартныйВычет);
	
	НалоговыеСтавки = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию(Показатели.Период);
	Если Показатели.Период >= УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы()
		И Показатели.НалоговаяБаза > УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки() Тогда
		
		Показатели.СтавкаНалога = НалоговыеСтавки.СтавкаНДФЛПовышенная;
	Иначе
		Показатели.СтавкаНалога = НалоговыеСтавки.СтавкаНДФЛ;
	КонецЕсли;
	
	Показатели.НалогИсчисленныйВсего = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(
		Показатели.НалоговаяБаза,
		Показатели.Период);
	
	// Задолженность
	
	СрокУплатыНалогаЗаПредыдущийГод = УчетНДФЛПредпринимателя.СрокУплатыНалогаПоУмолчанию(Показатели.НачалоПериода - 1);
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	// Если срок уплаты налога уже истёк, тогда задолженность рассчитывается с учётом налога за прошлый год
	Если ТекущаяДата > СрокУплатыНалогаЗаПредыдущийГод Или Показатели.КонецПериода > СрокУплатыНалогаЗаПредыдущийГод Тогда
		ДатаПроверкиЗадолженности = Показатели.НачалоПериода;
	Иначе
		ДатаПроверкиЗадолженности = Макс(Показатели.НачалоПериода - 1, Показатели.ГраницаОтчетностиПрошлыхПериодов + 1);
	КонецЕсли;
	
	ОстатокРасчетовЗаПредыдущиеПериоды = УчетНДФЛПредпринимателя.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(
		Организация, ДатаПроверкиЗадолженности);
	
	Если ОстатокРасчетовЗаПредыдущиеПериоды > 0 Тогда
		Показатели.Переплата = ОстатокРасчетовЗаПредыдущиеПериоды;
	Иначе
		Показатели.Задолженность = - ОстатокРасчетовЗаПредыдущиеПериоды;
	КонецЕсли;
	
	// Итого: налог к уплате
	
	Если Показатели.КонецПериода > Показатели.ДатаНачалаПримененияРасчетаАвансов Тогда
		
		// Освобождение от налога
		Показатели.ОсвобождениеОтНалога = НалоговыйУчет.СуммаОсвобожденияОтНалога(
			Организация,
			НачалоПериода,
			КонецПериода,
			ПланыСчетов.Хозрасчетный.НДФЛ_ИП);
		
		// С 01.01.2020 авансовые платежи ИП начисляет самостоятельно
		Показатели.НалогКУплате = Макс(0, Окр(Показатели.НалогИсчисленныйВсего
			- Показатели.АвансовыеПлатежи
			- Показатели.Переплата
			- Показатели.ОсвобождениеОтНалога,
			0));
		
	ИначеЕсли Показатели.Период > Показатели.ГраницаОтчетностиПрошлыхПериодов Тогда
		
		// До 01.01.2020 г. сумма авансовых платежей исчислялась налоговым органом.
		// Сумму к уплате за текущий период вычисляем, исходя из общего остатка по счету 68.21
		// за исключением суммы задолженности прошлых периодов.
		ОстатокРасчетовПоНДФЛ = УчетНДФЛПредпринимателя.ОстатокРасчетовПоНДФЛ(Организация, Показатели.Период);
		Если ОстатокРасчетовПоНДФЛ < 0 Тогда
			Показатели.НалогКУплате = Макс(- ОстатокРасчетовПоНДФЛ - Показатели.Задолженность, 0);
		КонецЕсли;
		
	Иначе
		
		// Если Период <= ГраницаОтчетностиПрошлыхПериодов, то налог к уплате = 0.
		
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационнаяСсылкаПереплаты(Показатели)
	
	Если Показатели.Переплата > 0 Тогда
		Возврат "РасшифровкаПереплаты";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НавигационнаяСсылкаОсвобождениеОтНалога(Показатели)
	
	Если Показатели.ОсвобождениеОтНалога > 0 Тогда
		Возврат "СправкаРасчетНДФЛДляИП";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, что переданный период находится в пределах расширенного первого налогового периода -
// с даты регистрации в декабре по конец следующего года после регистрации (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация
//  Период        - Дата - проверяемый период (в пределах расширенного налогового периода)
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это расширенный период
//             (организация зарегистрирована в декабре переданного или прошлого года,
//              и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодРасширен(Организация, Период, Правило, ДатаРегистрации = Неопределено)
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "РасширенныйПервыйНалоговыйПериод"), ,
		ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало < НалоговыйПериод.Период;
	
КонецФункции

Функция НачалоНалоговогоПериода(Организация, Период, ДатаРегистрации)
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало;
	
КонецФункции

Функция ОшибкаОрганизацияНеПлательщикНДФЛ(Организация, Период, НачалоНалоговогоПериода)
	
	ПлательщикНДФЛ = ОрганизацияПлательщикНДФЛ(Организация, Период, НачалоНалоговогоПериода);
	
	Если ЗначениеЗаполнено(Организация) И Не ПлательщикНДФЛ Тогда
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не является плательщиком НДФЛ.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
	Иначе
		СтрокаСообщения = "";
	КонецЕсли;
	
	Возврат СтрокаСообщения;
	
КонецФункции

Функция ОрганизацияПлательщикНДФЛ(Организация, Период, НачалоНалоговогоПериода)
	
	Перем ДатаИзменения;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период, ДатаИзменения);
	Если Не ПлательщикНДФЛ И ДатаИзменения > НачалоНалоговогоПериода Тогда
		ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Возврат ПлательщикНДФЛ;
	
КонецФункции

Функция ПодсказкаПоНалогу(НомерКвартала, СрокУплаты)
	
	Если Не ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат "";
	КонецЕсли;
	
	СодержимоеСтроки = Новый Массив;
	
	Если НомерКвартала <> 4 Тогда
		
		СтрокаПодсказки = НСтр("ru = 'Авансовый платеж требуется уплатить не позднее %1'");
		
	Иначе
		
		СтрокаПодсказки = НСтр("ru = 'Подать декларацию и уплатить налог требуется не позднее %1'");
		
	КонецЕсли;
	
	СодержимоеСтроки.Добавить(СтрШаблон(СтрокаПодсказки, Формат(СрокУплаты, "ДЛФ=DD")));
	
	Если НомерКвартала > 1 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС
			+ СтрШаблон(НСтр("ru = 'Налог уплачивается за вычетом авансовых платежей за %1.'"),
			ПредставлениеКварталаДляПояснения()[НомерКвартала - 1]));
		
	КонецЕсли;
	
	Если НомерКвартала <> 4 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС + НСтр("ru = 'Декларация по НДФЛ подается только по итогам года.'"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст = Неопределено)
	
	СодержимоеСтроки = Новый Массив;
	
	СодержимоеСтроки.Добавить(ОсновнойТекст);
	
	Если Не ПустаяСтрока(ДополнительныйТекст) Тогда
		СодержимоеСтроки.Добавить(Символы.ПС);
		СодержимоеСтроки.Добавить("(");
		СодержимоеСтроки.Добавить(ДополнительныйТекст);
		СодержимоеСтроки.Добавить(")");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция ПредставлениеКварталаДляПояснения()
	
	ПредставлениеПериода = Новый Соответствие;
	ПредставлениеПериода.Вставить(1, НСтр("ru = '1 квартал'"));
	ПредставлениеПериода.Вставить(2, НСтр("ru = '1 полугодие'"));
	ПредставлениеПериода.Вставить(3, НСтр("ru = '9 месяцев'"));
	ПредставлениеПериода.Вставить(4, НСтр("ru = 'год'"));
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Функция СообщениеТребуютсяРеквизиты(Организация, НомерКвартала)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НомерКвартала = 4 Тогда
		ТекстДействия = НСтр("ru = 'подготовить отчет и оплатить налог'");
	Иначе
		ТекстДействия = НСтр("ru = 'оплатить авансовый платеж'");
	КонецЕсли;
	
	Возврат ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	
КонецФункции

Функция СтрокаОформитьИтог(СтрокаИтог, СтрокаДополнение = Неопределено)
	
	Если СтрокаДополнение = Неопределено Тогда 
		Возврат Новый ФорматированнаяСтрока(СтрокаИтог, Новый Шрифт( , , Истина));
	КонецЕсли;
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(Новый ФорматированнаяСтрока(СтрокаИтог, Новый Шрифт( , , Истина)));
	СодержимоеСтроки.Добавить(СтрокаДополнение);
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция ФорматЧиселУплатаНалога(Период)
	
	Возврат СтрШаблон(НСтр("ru = 'ЧДЦ=%1; ЧН=0; ЧГ=3,0'"), 0);
	
КонецФункции

Функция КлючДоходыЗаПериод(ИмяПериода)
	
	Возврат СтрШаблон("ДоходыИП%1", ИмяПериода);
	
КонецФункции

Функция КлючПоказателейЗаПериод(ИмяПериода)
	
	Возврат СтрШаблон("Показатели%1", ИмяПериода);
	
КонецФункции

Функция КлючВычетаЗаПериод(ИмяПериода)
	
	Возврат СтрШаблон("ПрофВычетИП%1", ИмяПериода);
	
КонецФункции

#Область ЗаполнениеАвансовКонструкторы

Функция НовыеПоказатели(Организация, Период)
	
	Показатели = Новый Структура;
	
	// Начальные параметры
	Показатели.Вставить("Организация",   Организация);
	Показатели.Вставить("Период",        Период);
	Показатели.Вставить("НачалоПериода", НачалоГода(Период));
	Показатели.Вставить("КонецПериода",  КонецКвартала(Период));
	Показатели.Вставить("НомерКвартала", Месяц(КонецКвартала(Период)) / 3);
	Показатели.Вставить("ИспользоватьНесколькоОрганизаций", Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
	Показатели.Вставить("ПрименяетсяОсвобождениеВТекущемПериоде",
		УчетНДФЛПредпринимателя.ПрименяетсяОсвобождениеОтНалога(Организация, Период));
	
	Показатели.Вставить("ДатаНачалаПримененияРасчетаАвансов",
		УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ());
	
	// Сведения о налоговом периоде
	Показатели.Вставить("ДатаРегистрацииОрганизации", Справочники.Организации.ДатаРегистрацииОрганизации(Организация));
	Показатели.Вставить("НачалоНалоговогоПериода",
		НачалоНалоговогоПериода(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("ЭтоПериодПрошлыхЛет",     Период < Показатели.ДатаНачалаПримененияРасчетаАвансов);
	Показатели.Вставить("НалоговыйПериодПропущен", Ложь);
	Показатели.Вставить("НалоговыйПериодРасширен", Ложь);
	Показатели.Вставить("ПлательщикНДФЛ", ОрганизацияПлательщикНДФЛ(
		Организация, Период, Показатели.НачалоНалоговогоПериода));
		
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, Период, Перечисления.Периодичность.Квартал);
	ПлательщикЕНП_ПереходныйПериод = Ложь;
	
	Если НачалоМесяца(Показатели.КонецПериода) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ОбщегоНазначения.ТекущаяДатаПользователя() < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Показатели.Вставить("ПлательщикЕНП",                  ПлательщикЕНП);
	Показатели.Вставить("ПлательщикЕНП_ПереходныйПериод", ПлательщикЕНП_ПереходныйПериод);
		
	// Ошибки
	
	Показатели.Вставить("ОшибкаНесоответствиеСуммДекларация",  "");
	Показатели.Вставить("СообщениеОбОшибке", ОшибкаОрганизацияНеПлательщикНДФЛ(
		Организация, Период, Показатели.НачалоНалоговогоПериода));
	
	Показатели.Вставить("СообщениеТребуютсяРеквизиты", СообщениеТребуютсяРеквизиты(
		Организация, Показатели.НомерКвартала));
	
	// Данные отчета 3-НДФЛ
	Показатели.Вставить("ИмяФормыОтчета", Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(Период));
	Показатели.Вставить("СтавкаНалога");
	Показатели.Вставить("СтавкаНалогаПредставление", "");
	
	// Начало учета
	Показатели.Вставить("ГраницаОтчетностиПрошлыхПериодов", '00010101');
	
	// Представление периода
	ПредставлениеКвартала = ПредставлениеКварталаДляПояснения();
	Показатели.Вставить("ПредставлениеПериодаАванса", ПредставлениеКвартала[Показатели.НомерКвартала - 1]);
	Показатели.Вставить("ПредставлениеПериода", ПредставлениеКвартала[Показатели.НомерКвартала]);
	
	ГодПредставление = Формат(Год(Показатели.КонецПериода), Формат("ЧГ=0"));
	Если Показатели.НомерКвартала = 4 Тогда
		Показатели.Вставить("ПредставлениеПериодаПояснение", СтрШаблон("%1 %2",
			ГодПредставление, Показатели.ПредставлениеПериода));
	Иначе
		Показатели.Вставить("ПредставлениеПериодаПояснение", СтрШаблон(НСтр("ru = '%1 %2 г.'"),
			Показатели.ПредставлениеПериода, ГодПредставление));
	КонецЕсли;
	
	Показатели.Вставить("ПодсказкаПоНалогу", "");
	
	// Установка статуса задачи
	Показатели.Вставить("НалогНачислен",               Ложь);
	Показатели.Вставить("НалогОплаченПолностью",       Ложь);
	Показатели.Вставить("Правило",                     Неопределено);
	Показатели.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Показатели.Вставить("Используется1СОтчетность",    РегламентированнаяОтчетностьБП.Используется1СОтчетность());
	Показатели.Вставить("ПоказыватьКомандыОплаты",     ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты());
	
	// Прочее
	Показатели.Вставить("ЗаполнитьВычетНаДетей", Истина);
	Показатели.Вставить("ЗаполнитьВычетНаНалогоплательщика", Истина);
	Показатели.Вставить("ЦветФонаКнопки",         ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки);
	Показатели.Вставить("ЦветФонаПредупреждения", ЦветаСтиля.ЦветФонаПредупреждения);
	Показатели.Вставить("БыстрыеОтборыФонГруппы", ЦветаСтиля.БыстрыеОтборыФонГруппы);
	Показатели.Вставить("ДеятельностьОтсутствует", Ложь);
	Показатели.Вставить("СверкаВыполнена", Ложь);
	Показатели.Вставить("Срок", '00010101');
	Показатели.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Показатели.Вставить("ИдентификаторЗадачи", "");
	
	// Разрешения по правам доступа
	Показатели.Вставить("МожноАктуализироватьДанные",
		ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация));
	
	Показатели.Вставить("МожноСоздаватьДокументыУплаты",
		ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер));
	
	// Включение авансов покупателей в прочие доходы
	Показатели.Вставить("ВключатьАвансы",
		УчетДоходовИРасходовПредпринимателя.ВключатьАвансыПокупателейВДоходыПоквартально(Организация, Период));
	
	// Суммы
	Показатели.Вставить("Доходы",                              0);
	Показатели.Вставить("ПрочиеДоходы",                        0);
	Показатели.Вставить("АвансыПокупателей",                   0);
	Показатели.Вставить("ПрофессиональныйВычет",               0);
	Показатели.Вставить("НалоговаяБаза",                       0);
	Показатели.Вставить("НалогКУплате",                        0);
	Показатели.Вставить("НалогИсчисленныйВсего",               0);
	Показатели.Вставить("МинимальныйНалог",                    0);
	Показатели.Вставить("АвансовыеПлатежи",                    0);
	Показатели.Вставить("Переплата",                           0);
	Показатели.Вставить("Задолженность",                       0);
	Показатели.Вставить("СтандартныйВычетНаДетей",             0);
	Показатели.Вставить("СтандартныйВычетНаНалогоплательщика", 0);
	Показатели.Вставить("ПределВычетаНаДетейДоходы",           0);
	Показатели.Вставить("ОсвобождениеОтНалога",                0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйПоясненияРасчета()
	
	ТипФорматированнаяСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока, Строка");
	
	Пояснения = Новый ТаблицаЗначений;
	
	Пояснения.Колонки.Добавить("НомерЭтапа", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	Пояснения.Колонки.Добавить("Пояснение",  ТипФорматированнаяСтрока);
	Пояснения.Колонки.Добавить("Значение",   ТипФорматированнаяСтрока);
	
	Возврат Пояснения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеДокументовОплаты

// Возвращает описание параметров для выполнения метода СформироватьДокументыОплатыНалога()
//
// Возвращаемое значение:
//   Структура
//
Функция НовыйПараметрыФормированияДокументовОплаты() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособОплаты"); // ПеречислениеСсылка.СпособыУплатыНалогов
	Результат.Вставить("Период");       // Дата
	Результат.Вставить("Организация");  // СправочникСсылка.Организации
	Результат.Вставить("Правило");      // СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
	
	Результат.Вставить("НалогИсчисленныйВсего", 0);
	Результат.Вставить("АвансовыеПлатежи", 0);
	Результат.Вставить("НалогКУплате", 0);
	Результат.Вставить("ОсвобождениеОтНалога", 0);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаПлатежейНДФЛ() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Результат.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив созданных документов оплаты НДФЛ или структуру заполнения для одного документа
//
// Параметры:
//   Показатели - Структура - См. НовыйПараметрыФормированияДокументовОплаты()
//   Платежи    - ТаблицаЗначений - см. НовыйТаблицаПлатежейНДФЛ()
//
// Возвращаемое значение:
//   * Массив - массив из созданных документов оплаты
//   * Структура - см. Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ДанныеЗаполненияПлатежныхДокументов
//   * Неопределено - в случае ошибки
//
Функция СформироватьДокументыОплатыНалога(Показатели, Платежи = Неопределено) Экспорт
	
	Если Показатели.СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Показатели.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Показатели.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	// Определим налоги к уплате с разделением по видам налогов
	НалогиКУплате = НеоплаченныеНалоги(Показатели, Платежи);
	
	ТаблицаПлатежей = ТаблицаПлатежейДляФормированияПлатежныхПоручений(
		НалогиКУплате,
		Показатели);
	
	СтруктураПараметров = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НовыеПараметрыФормированияПлатежныхДокументов();
	СтруктураПараметров.Правило         = Показатели.Правило;
	СтруктураПараметров.ПериодСобытия   = Показатели.Период;
	СтруктураПараметров.Организация     = Показатели.Организация;
	СтруктураПараметров.НалоговыйПериод = Показатели.Период;
	СтруктураПараметров.Платежи         = ПоместитьВоВременноеХранилище(ТаблицаПлатежей);
	СтруктураПараметров.СпособОплаты    = Показатели.СпособОплаты;
	СтруктураПараметров.СчетОрганизации = СчетОрганизации;
	
	ЗначенияЗаполнения =
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ДанныеЗаполненияПлатежныхДокументов(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения) И ЗначенияЗаполнения.Количество() = 1 Тогда
		Возврат ЗначенияЗаполнения[0];
	Иначе
		СозданныеДокументы = 
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументыПоДаннымЗаполнения(
				СтруктураПараметров, ЗначенияЗаполнения);
		
		Возврат СозданныеДокументы;
	КонецЕсли;
	
КонецФункции

Функция БанковскийСчетОрганизации(Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

Функция НеоплаченныеНалоги(Показатели, ПлатежиНДФЛ) Экспорт
	
	Результат = НовыйТаблицаПлатежейНДФЛ();
	
	ВидНалогаПоУмолчанию = Перечисления.ВидыНалогов.НДФЛ_ИП;
	
	Если Показатели.Период >= УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы() Тогда
		
		ГраницаНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
		СуммаНалогаБазовая = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(ГраницаНалоговойБазы, Показатели.Период);
		
		СуммаПоБазовойСтавке = Макс(0, Мин(Показатели.НалогИсчисленныйВсего, СуммаНалогаБазовая) - Показатели.АвансовыеПлатежи);
		СуммаСвышеПредельнойВеличины = Макс(0, Показатели.НалогКУплате - СуммаПоБазовойСтавке);
		
		ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Показатели.Организация,
			Показатели.Период,
			?(ЗначениеЗаполнено(Показатели.Правило), Показатели.Правило.Периодичность, Перечисления.Периодичность.Год));
		
		Если СуммаПоБазовойСтавке <> 0 Тогда
			ДобавитьСуммуНалогаКОплате(Результат,
				ПлатежиНДФЛ,
				Окр(СуммаПоБазовойСтавке, 0),
				ВидНалогаПоУмолчанию);
		КонецЕсли;
		
		Если СуммаСвышеПредельнойВеличины <> 0 Тогда
			ДобавитьСуммуНалогаКОплате(Результат,
				ПлатежиНДФЛ,
				Окр(СуммаСвышеПредельнойВеличины, 0),
				Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ВидНалога = ВидНалогаПоУмолчанию;
		НоваяСтрока.Сумма = Показатели.НалогКУплате;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатели.ОсвобождениеОтНалога) Тогда
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ВидНалога = ВидНалогаПоУмолчанию;
		НоваяСтрока.Сумма = - Показатели.ОсвобождениеОтНалога;
	КонецЕсли;
	
	Результат.Свернуть("ВидНалога", "Сумма");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСуммуНалогаКОплате(Результат, ОплаченныеНалоги, СуммаНалога, ВидНалога)
	
	ОплаченоНалога = 0;
	Если ЗначениеЗаполнено(ОплаченныеНалоги) Тогда
		
		Отбор = Новый Структура("ВидНалога", ВидНалога);
		СтрокиОтбора = ОплаченныеНалоги.НайтиСтроки(Отбор);
		
		Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
			ОплаченоНалога = ОплаченоНалога + ТекущаяСтрока.Сумма;
		КонецЦикла;
		
	КонецЕсли;
	
	НалогКОплате = СуммаНалога - ОплаченоНалога;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидНалога = ВидНалога;
	НоваяСтрока.Сумма = НалогКОплате;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли