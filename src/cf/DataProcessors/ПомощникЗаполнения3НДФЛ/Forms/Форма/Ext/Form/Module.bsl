#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Период) Тогда
		Объект.Период = НачалоГода(Параметры.Период);
	Иначе
		ПрошлыйГод = НачалоГода(ДобавитьМесяц(ОбщегоНазначения.ТекущаяДатаПользователя(), -12));
		Объект.Период = Макс(ПрошлыйГод, Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения());
	КонецЕсли;
	
	ПериодСобытия = Объект.Период;
	
	Если ЗначениеЗаполнено(Параметры.ВыбраннаяФорма) Тогда
		Декларация3НДФЛВыбраннаяФорма = Параметры.ВыбраннаяФорма;
	Иначе
		Декларация3НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(Объект.Период);
	КонецЕсли;
	Декларация4НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет4НДФЛ.ФормаПоУмолчанию(ПериодДекларации4НДФЛ(Объект.Период));
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
			Объект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.КонтекстныйВызов Тогда
		Если Объект.Период < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// Помощник открыт из списка задач или рег. отчета
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
		Заголовок = СтрШаблон(НСтр("ru = 'Помощник заполнения 3-НДФЛ за %1'"), ПредставлениеПериода);
		Элементы.Период.Видимость = Ложь;
		// Скрываем поле ввода, оставляем гиперссылку
		Элементы.Организация.Видимость = Ложь;
	Иначе
		Заголовок = НСтр("ru = 'Помощник заполнения 3-НДФЛ'");
		Элементы.Период.Видимость = Истина;
		// Скрываем гиперссылку в зависимости от ФО
		Элементы.ОрганизацияПредставление.Видимость = Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	ОрганизацияПредставление = Объект.Организация;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период));
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Объект.Организация, СрокУплатыНалога);
	
	ПростойУчетЕНС = КонецГода(ПериодСобытия) + 1 >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
		ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель(),
		ВыполнениеЗадачБухгалтера.ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(Объект.Организация).Уплата);
	ОпределитьСвязанныеПравила();
	
	Если НачалоМесяца(СрокУплатыНалога) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, ПериодСобытия);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ОбщегоНазначения.ТекущаяДатаПользователя() < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(Объект.Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(),
		ЗначениеЗаполнено(ПравилоУведомления),
		ЗначениеЗаполнено(ПравилоУведомления) И ПлательщикЕНП_ПереходныйПериод);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУведомления.Периодичность, ПериодСобытия);
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, КонецПериода);
	КонецЕсли;
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
	
	СпособСдачиОтчетности = "Интернет";
	ВариантДействияСНалогомКВозврату = ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет;
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСчетОрганизации();
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	НайтиИПрочитатьДекларации();
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		Если Параметры.СоздатьПриОткрытии Тогда
			// Помощник открыт командой "Создать"
			УстановитьНомерКорректировкиНовойДекларации(ЭтотОбъект);
			ИзменитьЭтапНаСервере(НачальныйШагПомощника(Декларация3НДФЛВыбраннаяФорма));
		ИначеЕсли Параметры.ДействиеКалендаряБухгалтера = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			// Помощник открыт командой "Оплатить"
			СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
			СостояниеДекларации4НДФЛ = СостояниеДекларации(Декларация4НДФЛСостояниеОтправки);
			Если (СостояниеДекларации3НДФЛ.Сдано И (Не Объект.СформироватьДекларацию4НДФЛ Или СостояниеДекларации4НДФЛ.Сдано)) Тогда
				ИзменитьЭтапНаСервере("ОплатаНалога");
			Иначе
				ИзменитьЭтапНаСервере("Декларация");
			КонецЕсли;
		Иначе
			ИзменитьЭтапНаСервере("Декларация");
		КонецЕсли;
	Иначе
		ИзменитьЭтапНаСервере(НачальныйШагПомощника(Декларация3НДФЛВыбраннаяФорма));
	КонецЕсли;
	
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна();
	ЕстьПравоАктуализации = Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций(Объект.Организация);
	Подключена1СОтчетность = РегламентированнаяОтчетностьБП.Подключена1СОтчетность(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) И ПлательщикНДФЛ Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьДоходыВычетыПоДаннымУчета", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьПроверкуАктуальности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверятьСчетОрганизации = (НавигацияПараметрФормы = "РасчетНалога")
		И ЗаполнятьЗаявлениеНаВозвратНалога
		И НалогКВозврату > 0
		И ВариантДействияСНалогомКВозврату = ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет;
	
	Если Не ПроверятьСчетОрганизации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		ИзменитьЭтап(Параметр, Истина); // Навигация возможна только в обратном направлении
		
	ИначеЕсли (ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" 
		Или ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "ОбновитьСостояниеОбменСБанками")
		И НавигацияПараметрФормы = "ОплатаНалога" Тогда
		
		НайтиИОтобразитьСвязанныеПлатежи();
		УправлениеЗакладкойОплата(ЭтотОбъект);
		
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов"
				И НавигацияПараметрФормы = "ОплатаНалога" Тогда
		
		ЗаполнитьУведомленияИОтобразитьНаФорме();
		УправлениеЗакладкойОплата(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
		ЗаполнитьСчетОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЗакрытьПомощникЗаполнения3НДФЛ"
		И Декларация3НДФЛ = Параметр Тогда
		
		// Пользователь сохранил измененную декларацию - закрываем помощник.
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка") Тогда
		Если Параметр.Ссылка = Декларация3НДФЛ Тогда
			Декларация3НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация3НДФЛ);
			УправлениеФормой(ЭтотОбъект);
		ИначеЕсли Параметр.Ссылка = Декларация4НДФЛ Тогда
			Декларация4НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация4НДФЛ);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ТребуетсяАктуализация"
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности") Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия, ДатаАктуальности);
		
	ИначеЕсли (ИмяСобытия = "АктуализацияЗавершенаУспешно" Или ИмяСобытия = "АктуализацияОтменена")
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация Тогда
		
		Если Параметр.Свойство("ПерезаполнитьДоходыИВычеты") И Параметр.ПерезаполнитьДоходыИВычеты Тогда
			ПерезаполнитьДоходыИВычеты();
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия);
		
	ИначеЕсли ИмяСобытия = "ОбновитьЗакрытиеМесяца" Тогда
		
		ПодключитьПроверкуАктуальности();
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		
		ЗаполнитьСчетОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СтандартнаяОбработка = Ложь;
		
		// Для корректной работы навигации необходимо передавать ключевые параметры формы.
		СтруктураНавигации = СтруктураНавигации(Декларация3НДФЛВыбраннаяФорма);
		СтруктураШага = СтруктураНавигации[НавигационнаяСсылкаФорматированнойСтроки];
		Если СтруктураШага <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураШага.СтруктураПараметровФормы, Параметры);
			ИмяШага = СтруктураНавигации[НавигационнаяСсылкаФорматированнойСтроки].СтруктураПараметровФормы.НавигацияПараметрФормы;
			Оповестить("ИзменитьПараметрНавигации", ИмяШага);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РегламентированнаяОтчетность" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьБанковскийСчет" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьЗначение(, СчетОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.Период = НачалоГода(Объект.Период);
	
	ПериодПриИзмененииНаСервере();
	ПодключитьПроверкуАктуальности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПодключитьПроверкуАктуальности();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДекларацию4НДФЛПриИзменении(Элемент)
	
	Если Не Объект.СформироватьДекларацию4НДФЛ Тогда
		Объект.ПредполагаемаяСуммаДоходов = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДекларация3НДФЛНажатие(Элемент)
	ОткрытьДекларацию3НДФЛ();
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДекларация4НДФЛНажатие(Элемент)
	ОткрытьДекларацию4НДФЛ();
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ФНС_Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		Платежи, "Платеж", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",        Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",  "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.Форма.РеквизитыПредпринимателяДляОтчетности", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантДействияВернутьПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантДействияЗачестьПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНеЗаполненСчетОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(
		Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоходыВычеты

&НаКлиенте
Процедура ДоходыВычетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоходВычетДляРедактирования(Элементы.ДоходыВычеты.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьДоходВычетДляРедактирования(Элементы.ДоходыВычеты.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДоходыВычеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И НавигацияПараметрФормы = "Вычеты"
		И Не ТекущиеДанные.ЭтоВычет Тогда
		
		// Доходы должны изменяться на шаге "Доходы"
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПослеУдаления(Элемент)
	
	// Если пользователь удалил все доходы от предпринимательской деятельности,
	// то очистим также и авансовые платежи с торговым сбором.
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Для НомерПериода = 1 По 4 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			Объект["АвансовыеПлатежиИП" + ИмяПериода] = 0;
			Объект["ТорговыйСбор" + ИмяПериода] = 0;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеЗакладкойДоходыВычеты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АктуализироватьДанныеУчета(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаАктуализация");
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецГода(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина; // актуализация до даты события
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
	ИзменитьДоступностьКнопокПриАктуализацииДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоходыВычеты(Команда)
	
	ПерезаполнитьДоходыИВычеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоходыВычеты(Команда)
	
	Если НачальныйШагПомощника(Декларация3НДФЛВыбраннаяФорма) = "ДоходыВычеты" Тогда
		ИзменитьЭтап("ДоходыВычеты", Истина);
	Иначе
		ИзменитьЭтап("Вычеты", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьВычетыРассчитатьНалог(Команда)
	
	Если НавигацияПараметрФормы = "Доходы" Тогда
		ИзменитьЭтап("Вычеты");
	Иначе
		ИзменитьЭтап("РасчетНалога");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДоходам(Команда)
	
	ИзменитьЭтап("Доходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасчетНалога(Команда)
	
	ИзменитьЭтап("РасчетНалога", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДекларацию(Команда)
	
	ИзменитьЭтап("Декларация");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДекларацию(Команда)
	
	ИзменитьЭтап("Декларация", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНалог(Команда)
	
	ИзменитьЭтап("ОплатаНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура Декларация3НДФЛ(Команда)
	
	ОткрытьДекларацию3НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура Декларация4НДФЛ(Команда)
	
	ОткрытьДекларацию4НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Объект.Организация, , , , , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура КакИзменитьДекларацию(Команда)
	
	ПараметрыИнформации = Новый Структура;
	ПараметрыИнформации.Вставить("ЗаголовокФормы",      НСтр("ru='Как изменить декларацию?'"));
	ПараметрыИнформации.Вставить("КлючНазначенияФормы", "КакИзменитьДекларацию");
	ПараметрыИнформации.Вставить("Организация",         Объект.Организация);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.ПолезнаяИнформация", ПараметрыИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура КакВнестиДругиеДоходы(Команда)
	
	ПараметрыИнформации = Новый Структура;
	ПараметрыИнформации.Вставить("ЗаголовокФормы",      НСтр("ru='Как внести другие доходы?'"));
	ПараметрыИнформации.Вставить("КлючНазначенияФормы", "КакВнестиДругиеДоходы");
	ПараметрыИнформации.Вставить("Организация",         Объект.Организация);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.ПолезнаяИнформация", ПараметрыИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписьВложения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхОписи = ПодготовитьДанныеОписиВложения();
	
	ДополнительныеПараметрыПечати = Новый Структура("АдресДанныхОписи", АдресДанныхОписи);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы, ДополнительныеПараметры",
		НСтр("ru='Опись вложения'"),
		ДополнительныеПараметрыПечати);
	
	ПараметрыКомандыПечати = Новый Массив;
	ПараметрыКомандыПечати.Добавить(Объект.Организация);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОписиВложения",
		"ОписьВложения",
		ПараметрыКомандыПечати,
		ЭтотОбъект,
		ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Конверт(Команда)
	
	Если Не ЗначениеЗаполнено(ФНС_Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФНС_Контрагент));
	ПараметрыФормы.Вставить("СведенияОПолучателеКонверта", ФНС_СведенияОПолучателеКонверта);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПечатиКонвертов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку(Объект.Организация, НеОтправленныеПлатежи);
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл(Объект.Организация, НеИсполненныеПлатежи);
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Объект.Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

#Область КомандыДобавленияДоходовВычетов

&НаКлиенте
Процедура ДобавитьДоходОтПредпринимательскойДеятельности(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиНедвижимости(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости"), "Недвижимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиАвтомобиля(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "Автомобиль");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиДолиУставногоКапитала(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "ДоляУставногоКапитала");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиПрочегоИмущества(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "Прочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходПодарок(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.Подарок"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтАренды(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтДивидендов(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.Дивиденды"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтОплатыТруда(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОплатаТруда"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнойДоходОтИсточникаРФ(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтИсточникаЗаПределамиРФ(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтОперацийСЦеннымиБумагами(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтВыигрышаВЛотерееАзартныхИграх(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтВознагражденияНаследникуАвтора(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПрибылиКИК(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПрибыльКИК"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСтандартныйНаНалогоплательщика(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСтандартныйНаДетей(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетНаПриобретениеИлиСтроительствоНедвижимости(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСоциальный(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Социальный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетДобровольныеПенсионныеВзносыИСтрахованиеЖизни(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетИнвестиционный(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Инвестиционный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетУбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами"));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоУведомления);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		УправлениеЗакладкойОплата(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     Правило);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
	ЗаполнитьУведомленияИОтобразитьНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоходыИВычеты

&НаКлиенте
Процедура ПерезаполнитьДоходыИВычеты()
	
	УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	
	// Стандартные вычеты с 01.01.2020 г. учитываются в отдельных структурах
	// (п. п. 7, 8 ст. 227 НК РФ)
	УдалитьСтандартныеВычеты();
	
	ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ПериодПоддерживается = Истина;
	
	ПоддерживаемыеНалоговыеПериоды = Обработки.ПомощникЗаполнения3НДФЛ.ПоддерживаемыеНалоговыеПериоды();
	Если ЗначениеЗаполнено(Объект.Период) И ПоддерживаемыеНалоговыеПериоды.Количество() <> 0 Тогда
		Если Объект.Период < ПоддерживаемыеНалоговыеПериоды[0] Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Декларацию за %1 год и ранее можно заполнить только вручную через 1С-Отчетность'"),
				Формат(ДобавитьМесяц(ПоддерживаемыеНалоговыеПериоды[0], -12), "ДФ=yyyy"));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
			Объект.Период = ПоддерживаемыеНалоговыеПериоды[0];
			ПериодПоддерживается = Ложь;
		ИначеЕсли Объект.Период > ПоддерживаемыеНалоговыеПериоды[ПоддерживаемыеНалоговыеПериоды.ВГраница()] Тогда
			ТекстОшибки = НСтр("ru = 'Декларацию нельзя заполнить будущей датой'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
			Объект.Период = ПоддерживаемыеНалоговыеПериоды[ПоддерживаемыеНалоговыеПериоды.ВГраница()];
			ПериодПоддерживается = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Декларация3НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(Объект.Период);
	Если ЗначениеЗаполнено(Объект.Период) И ПериодПоддерживается Тогда
		Если Не Обработки.ПомощникЗаполнения3НДФЛ.ФормаЗаполняетсяПомощником(Декларация3НДФЛВыбраннаяФорма) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
				Формат(Объект.Период, "ДФ=yyyy"));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
		КонецЕсли;
	КонецЕсли;
	Декларация4НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет4НДФЛ.ФормаПоУмолчанию(ПериодДекларации4НДФЛ(Объект.Период));
	
	УстановитьФункциональныеОпцииФормы();
	
	ПростойУчетЕНС = КонецГода(Объект.Период) + 1 >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ПравилаСроки = ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСроки);
	
	Объект.ДоходыВычеты.Очистить();
	НайтиИПрочитатьДекларации();
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	КонецЕсли;
	
	ИзменитьЭтапНаСервере(НачальныйШагПомощника(Декларация3НДФЛВыбраннаяФорма));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияПредставление = Объект.Организация;
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСчетОрганизации();
	
	// Проверка заполненности реквизитов организации, необходимых для заполнения декларации.
	РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
	
	ПравилаСроки = ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСроки);
	
	Объект.ДоходыВычеты.Очистить();
	НайтиИПрочитатьДекларации();
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетОрганизации()
	
	ИспользуетсяНесколькоБанковскихСчетов =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации,
			Объект.Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходВычет(Вид, КлючНазначенияФормы = Неопределено)
	
	// Для отдельных видов доходов и вычетов не поддерживается добавление нескольких экземпляров.
	Если МожноДобавитьНовыйДоходВычет(Вид) Тогда
		ДобавитьНовыйДоходВычет(Вид, КлючНазначенияФормы);
	Иначе
		СтрокиПоВидуДоходаВычета = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", Вид));
		ОткрытьДоходВычетДляРедактирования(СтрокиПоВидуДоходаВычета[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноДобавитьНовыйДоходВычет(ВидДоходаВычета)
	
	Если ДоходыВычетыВЕдинственномЭкземпляре().Найти(ВидДоходаВычета) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокиПоВидуДоходаВычета = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ВидДоходаВычета));
	
	Возврат СтрокиПоВидуДоходаВычета.Количество() = 0;
	
КонецФункции

&НаКлиенте
Функция ДоходыВычетыВЕдинственномЭкземпляре()
	
	МассивДоходовВычетов = Новый Массив;
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Социальный"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Инвестиционный"));
	
	Возврат МассивДоходовВычетов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйДоходВычет(Вид, КлючНазначенияФормы = Неопределено)
	
	ИмяФормыДоходаВычета = ИмяФормыДоходаВычета(Вид, Объект.Период, ЗаполнятьАвансовыеПлатежиПоквартально);
	
	Если ЗначениеЗаполнено(ИмяФормыДоходаВычета) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период", Объект.Период);
		ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
		ПараметрыФормы.Вставить("АдресКлючейПоказателей", АдресКлючейПоказателей);
		ПараметрыФормы.Вставить("Вид",    Вид);
		ПараметрыФормы.Вставить("ДоступныеДоходы", ДоступныеВидыДоходов(Вид));
		Если ЗначениеЗаполнено(КлючНазначенияФормы) Тогда
			ПараметрыФормы.Вставить("КлючНазначенияФормы", КлючНазначенияФормы);
		КонецЕсли;
		
		Если Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			
			Для НомерПериода = 1 По 4 Цикл
				ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
				ПараметрыФормы.Вставить("АвансовыеПлатежи" + ИмяПериода, Объект["АвансовыеПлатежиИП" + ИмяПериода]);
				ПараметрыФормы.Вставить("УплаченныйТорговыйСбор" + ИмяПериода, Объект["ТорговыйСбор" + ИмяПериода]);
			КонецЦикла;
			
		ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			
			Если ЕстьВычетНаПриобретениеИлиСтроительствоНедвижимости() Тогда
				ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам());
				ПараметрыФормы.Вставить("ВычетПрименяетсяВпервые", ВычетНаПриобретениеНедвижимостиПрименяетсяВпервые());
				ПараметрыФормы.Вставить("ВычетПрошлыхЛетСтоимость", ПримененныйВычетПоРасходамНаПриобретениеНедвижимости());
				ПараметрыФормы.Вставить("ВычетПрошлыхЛетПроценты", ПримененныйВычетПроцентыПоКредитуНаНедвижимость());
			Иначе
				ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", Ложь);
				ПараметрыФормы.Вставить("ВычетПрименяетсяВпервые", Истина);
			КонецЕсли;
			
		ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыФормы, СтруктураДоходовДляВычетаПоУбыткамПрошлыхЛет());
			
		ИначеЕсли ПрименяетсяИмущественныйВычет(Вид) Тогда
			
			ПараметрыФормы.Вставить("ИспользованныйВычет", ИспользованныйИмущественныйВычет(Объект.ДоходыВычеты));
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("СуммаДохода", Объект.ДоходыВычеты.Итог("СуммаДохода"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеДоходаВычетаЗавершение", ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПомощникЗаполнения3НДФЛ.Форма." + ИмяФормыДоходаВычета, 
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоходВычетДляРедактирования(ИдентификаторСтроки)
	
	СтрокаДоходВычет = Объект.ДоходыВычеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаДоходВычет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДоходаВычета = ИмяФормыДоходаВычета(СтрокаДоходВычет.Вид, Объект.Период, ЗаполнятьАвансовыеПлатежиПоквартально);
	
	Если ЗначениеЗаполнено(ИмяФормыДоходаВычета) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период", Объект.Период);
		ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
		ПараметрыФормы.Вставить("АдресКлючейПоказателей", АдресКлючейПоказателей);
		ПараметрыФормы.Вставить("Вид",    СтрокаДоходВычет.Вид);
		ПараметрыФормы.Вставить("СтруктураДоходовВычетов", СтрокаДоходВычет.СтруктураДоходовВычетов);
		ПараметрыФормы.Вставить("ДоступныеДоходы", ДоступныеВидыДоходов(СтрокаДоходВычет.Вид));
		ПараметрыФормы.Вставить("СуммаДохода", Объект.ДоходыВычеты.Итог("СуммаДохода"));
		
		Если НавигацияПараметрФормы = "Вычеты" И Не СтрокаДоходВычет.ЭтоВычет Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		Если СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			Для НомерПериода = 1 По 4 Цикл
				ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
				ПараметрыФормы.Вставить("АвансовыеПлатежи" + ИмяПериода, Объект["АвансовыеПлатежиИП" + ИмяПериода]);
				ПараметрыФормы.Вставить("УплаченныйТорговыйСбор" + ИмяПериода, Объект["ТорговыйСбор" + ИмяПериода]);
			КонецЦикла;
		ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			
			ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", 
				ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам(СтрокаДоходВычет.ПолучитьИдентификатор()));
				
		ИначеЕсли ПрименяетсяИмущественныйВычет(СтрокаДоходВычет.Вид) Тогда
			
			ИспользованныйВычет = ИспользованныйИмущественныйВычет(Объект.ДоходыВычеты);
			
			Если СтрокаДоходВычет.СтруктураДоходовВычетов.ВидВычета = "Норматив" Тогда
				Если СтрокаДоходВычет.СтруктураДоходовВычетов.ВидИмущества = "ПрочаяНедвижимость" Тогда
					ИспользованныйВычет.ПрочаяНедвижимость = ИспользованныйВычет.ПрочаяНедвижимость - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.СтруктураДоходовВычетов.ВидИмущества = "ДоляУставногоКапитала" Тогда
					ИспользованныйВычет.ДоляУставногоКапитала = ИспользованныйВычет.ДоляУставногоКапитала - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости") Тогда
					ИспользованныйВычет.Недвижимость = ИспользованныйВычет.Недвижимость - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества") Тогда
					ИспользованныйВычет.Имущество = ИспользованныйВычет.Имущество - СтрокаДоходВычет.СуммаВычета;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыФормы.Вставить("ИспользованныйВычет", ИспользованныйВычет);
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеДоходаВычетаЗавершение", ЭтотОбъект, СтрокаДоходВычет);
		ОткрытьФорму(
			"Обработка.ПомощникЗаполнения3НДФЛ.Форма." + ИмяФормыДоходаВычета,
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДоступныеВидыДоходов(ВидВычета)
	
	Если Не ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(Декларация3НДФЛВыбраннаяФорма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура("ЭтоВычет", Ложь);
	СтрокиОтбора = Объект.ДоходыВычеты.НайтиСтроки(Отбор);
	Если СтрокиОтбора.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Соответствие();
	
	Если ВидВычета = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами") Тогда
		
		Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
			
			Если ТекущаяСтрока.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами") Тогда
				ДобавитьОписаниеДохода(Результат, ТекущаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДопустимыеВидыДохода = Новый Массив;
		ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
		ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОплатаТруда"));
		ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ"));
		
		Если ВидВычета <> ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Инвестиционный") Тогда
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду"));
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"));
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости"));
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ЦифровойАктив"));
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.Подарок"));
		Иначе
			ДопустимыеВидыДохода.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами"));
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
			
			Если ДопустимыеВидыДохода.Найти(ТекущаяСтрока.Вид) <> Неопределено Тогда
				ДобавитьОписаниеДохода(Результат, ТекущаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеДохода(Результат, СтрокаДохода)
	
	НалоговаяБаза = СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета;
	Если НалоговаяБаза > 0 Тогда
		НалоговаяБазаВсего = Результат.Получить(СтрокаДохода.Вид);
		Результат.Вставить(СтрокаДохода.Вид, НалоговаяБаза + ?(НалоговаяБазаВсего = Неопределено, 0, НалоговаяБазаВсего));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованныйИмущественныйВычет(Знач ДоходыВычеты)
	
	ИспользованныйВычет = Новый Структура;
	ИспользованныйВычет.Вставить("Недвижимость", 0);
	ИспользованныйВычет.Вставить("Имущество", 0);
	ИспользованныйВычет.Вставить("ПрочаяНедвижимость", 0);
	ИспользованныйВычет.Вставить("ДоляУставногоКапитала", 0);
	
	ВидыДоходов = Новый Массив;
	ВидыДоходов.Добавить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости);
	ВидыДоходов.Добавить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества);
	ВидыДоходов.Добавить(Перечисления.ИсточникиДоходовФизическихЛиц.ЦифровойАктив);
	
	Для Каждого ВидДохода Из ВидыДоходов Цикл
		
		ТаблицаДоходов = ДоходыВычеты.Выгрузить(Новый Структура("Вид", ВидДохода));
		
		Для Каждого Строка Из ТаблицаДоходов Цикл
			
			Если НЕ Строка.СтруктураДоходовВычетов.ВидВычета = "Норматив" Тогда
				Продолжить;
			КонецЕсли;
			
			// Для прочей недвижимости отдельный лимит норматива, поэтому вычислим его дополнительно.
			Если Строка.СтруктураДоходовВычетов.ВидИмущества = "ПрочаяНедвижимость" Тогда
				
				ИспользованныйВычет.ПрочаяНедвижимость = ИспользованныйВычет.ПрочаяНедвижимость + Строка.СуммаВычета;
				
			ИначеЕсли Строка.СтруктураДоходовВычетов.ВидИмущества = "ДоляУставногоКапитала" Тогда
				
				ИспользованныйВычет.ДоляУставногоКапитала = ИспользованныйВычет.ДоляУставногоКапитала + Строка.СуммаВычета;
				
			ИначеЕсли Строка.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
				
				ИспользованныйВычет.Недвижимость = ИспользованныйВычет.Недвижимость + Строка.СуммаВычета;
				
			ИначеЕсли Строка.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества Тогда
				
				ИспользованныйВычет.Имущество = ИспользованныйВычет.Имущество + Строка.СуммаВычета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИспользованныйВычет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыДоходаВычета(Вид, Период, ЗаполнятьАвансовыеПлатежиПоквартально)
	
	Если Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
		Если ЗаполнятьАвансовыеПлатежиПоквартально Тогда
			ИмяФормы = "ПредпринимательскаяДеятельность2020";
		Иначе
			ИмяФормы = "ПредпринимательскаяДеятельность";
		КонецЕсли;
	ИначеЕсли ПрименяетсяИмущественныйВычет(Вид) Тогда
		ИмяФормы = "ПродажаИмущества";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
		ИмяФормы = "СдачаИмуществаВАренду";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ
		Или Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды
		Или Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора Тогда
		ИмяФормы = "ИнойДоходОтИсточникаРФ";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
		ИмяФормы = "ВыигрышВЛотерееАзартныхИграх";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		ИмяФормы = "ДоходЗаПределамиРФ";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
		ИмяФормы = "СтандартныйВычетНалогоплательщика";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
		ИмяФормы = "СтандартныйВычетНаДетей";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
		ИмяФормы = "СоциальныеВычеты";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
		ИмяФормы = "ДобровольныеПенсионныеВзносыИСтрахованиеЖизни";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		ИмяФормы = "ИнвестиционныйВычет";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
		ИмяФормы = "НаПриобретениеИлиСтроительствоНедвижимости";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
		ИмяФормы = "ОплатаТруда";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
		ИмяФормы = "Подарок";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
		ИмяФормы = "ОперацииСЦеннымиБумагами";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами Тогда
		ИмяФормы = "УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПрибыльКИК Тогда
		ИмяФормы = "ПрибыльКИК";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеДоходаВычетаЗавершение(СтруктураДоходовВычетов, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтруктураДоходовВычетов) = Тип("Структура") Тогда
		
		ИдентификаторСтроки = ДобавитьСтрокуДоходыВычеты(СтруктураДоходовВычетов);
		НоваяСтрока = Элементы.ДоходыВычеты.ДанныеСтроки(ИдентификаторСтроки);
		НоваяСтрока.СтруктураДоходовВычетов = СтруктураДоходовВычетов;
		
		// Авансовые платежи и торговый сбор общие для всех видов предпринимательской деятельности.
		Если НоваяСтрока.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			Для НомерПериода = 1 По 4 Цикл
				ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
				Если СтруктураДоходовВычетов.Свойство("АвансовыеПлатежи" + ИмяПериода) Тогда
					Объект["АвансовыеПлатежиИП" + ИмяПериода] = СтруктураДоходовВычетов["АвансовыеПлатежи" + ИмяПериода];
				КонецЕсли;
				Если СтруктураДоходовВычетов.Свойство("ТорговыйСбор" + ИмяПериода) Тогда
					Объект["ТорговыйСбор" + ИмяПериода] = СтруктураДоходовВычетов["ТорговыйСбор" + ИмяПериода];
				КонецЕсли;
			КонецЦикла;
		
		// Остаток вычетов по расходам и по процентам общий для всех приобретаемых объектов недвижимости.
		ИначеЕсли НоваяСтрока.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			ОбновитьОстатокВычетовНаПриобретениеНедвижимости(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
				
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДоходаВычетаЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	ТекущиеДанные.СтруктураДоходовВычетов = Результат;
	
	// Авансовые платежи и торговый сбор общие для всех видов предпринимательской деятельности.
	Если ТекущиеДанные.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
		Для НомерПериода = 1 По 4 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			Если Результат.Свойство("АвансовыеПлатежи" + ИмяПериода) Тогда
				Объект["АвансовыеПлатежиИП" + ИмяПериода] = Результат["АвансовыеПлатежи" + ИмяПериода];
			КонецЕсли;
			Если Результат.Свойство("УплаченныйТорговыйСбор" + ИмяПериода) Тогда
				Объект["ТорговыйСбор" + ИмяПериода] = Результат["УплаченныйТорговыйСбор" + ИмяПериода];
			КонецЕсли;
		КонецЦикла;
		
	// Остаток вычетов по расходам и по процентам общий для всех приобретаемых объектов недвижимости.
	ИначеЕсли ТекущиеДанные.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
		ОбновитьОстатокВычетовНаПриобретениеНедвижимости(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВычетНаПриобретениеИлиСтроительствоНедвижимости()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	Возврат НайденныеСтроки.Количество() <> 0;
	
КонецФункции

&НаКлиенте
Функция ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам(ИдентификаторРедактируемойСтроки = Неопределено)
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости")));
	
	ИдентификаторСтрокиСВычетамиПоПроцентам = Неопределено;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеФормы.ИспользоватьВычетПоПроцентам Тогда
			ИдентификаторСтрокиСВычетамиПоПроцентам = НайденнаяСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторСтрокиСВычетамиПоПроцентам = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ИдентификаторРедактируемойСтроки = Неопределено
			ИЛИ ИдентификаторСтрокиСВычетамиПоПроцентам <> ИдентификаторРедактируемойСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВычетНаПриобретениеНедвижимостиПрименяетсяВпервые()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрименяетсяВпервые = Истина;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрименяетсяВпервые = НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы.ВычетПрименяетсяВпервые;
	КонецЕсли;
	
	Возврат ВычетПрименяетсяВпервые;
	
КонецФункции

&НаКлиенте
Функция ПримененныйВычетПоРасходамНаПриобретениеНедвижимости()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрошлыхЛетСтоимость = 0;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрошлыхЛетСтоимость = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы, "ВычетПрошлыхЛетСтоимость", 0);
	КонецЕсли;
	
	Возврат ВычетПрошлыхЛетСтоимость;
	
КонецФункции

&НаКлиенте
Функция ПримененныйВычетПроцентыПоКредитуНаНедвижимость()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрошлыхЛетПроценты = 0;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрошлыхЛетПроценты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы, "ВычетПрошлыхЛетПроценты", 0);
	КонецЕсли;
	
	Возврат ВычетПрошлыхЛетПроценты;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОстатокВычетовНаПриобретениеНедвижимости(ИдентификаторСтрокиЭталона)
	
	Эталон = Объект.ДоходыВычеты.НайтиПоИдентификатору(ИдентификаторСтрокиЭталона);
	ДанныеФормыЭталон = Эталон.СтруктураДоходовВычетов.ДанныеФормы;
	ДанныеДекларацииЭталон = Эталон.СтруктураДоходовВычетов.ДанныеДекларации;
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости")));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДанныеФормы = НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеФормы;
		ДанныеФормы.Вставить("ВычетПрименяетсяВпервые",  ДанныеФормыЭталон.ВычетПрименяетсяВпервые);
		ДанныеФормы.Вставить("ВычетПрошлыхЛетСтоимость", ДанныеФормыЭталон.ВычетПрошлыхЛетСтоимость);
		ДанныеФормы.Вставить("ВычетПрошлыхЛетПроценты",  ДанныеФормыЭталон.ВычетПрошлыхЛетПроценты);
		
		ДанныеДекларации = НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеДекларации;
		ДанныеДекларации.Вставить("ВычетПрошлыхЛетСтоимость", ДанныеДекларацииЭталон.ВычетПрошлыхЛетСтоимость);
		ДанныеДекларации.Вставить("ВычетПрошлыхЛетПроценты",  ДанныеДекларацииЭталон.ВычетПрошлыхЛетПроценты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураДоходовДляВычетаПоУбыткамПрошлыхЛет()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ЕстьДоходыПоИИС = Ложь;
	ЕстьДоходыПоИнымОперациям = Ложь;
	Для Каждого СтрокаДоходовВычетов Из НайденныеСтроки Цикл
		
		ДанныеФормы = СтрокаДоходовВычетов.СтруктураДоходовВычетов.ДанныеФормы;
		
		ЕстьДоходыПоИИС = ЕстьДоходыПоИИС ИЛИ ДанныеФормы.ЕстьДоходыПоИИС;
		ЕстьДоходыПоИнымОперациям = ЕстьДоходыПоИнымОперациям ИЛИ ДанныеФормы.ЕстьДоходыПоИнымОперациям;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДоходыПоИИС", ЕстьДоходыПоИИС);
	Результат.Вставить("ЕстьДоходыПоИнымОперациям", ЕстьДоходыПоИнымОперациям);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяИмущественныйВычет(ВидДохода)
	
	ДоступныеИсточникиДоходов = Новый Массив;
	ДоступныеИсточникиДоходов.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"));
	ДоступныеИсточникиДоходов.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости"));
	ДоступныеИсточникиДоходов.Добавить(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ЦифровойАктив"));
	
	Возврат ДоступныеИсточникиДоходов.Найти(ВидДохода) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СохранениеДанныхПомощника

&НаСервере
Функция ДанныеПомощникаЗаполнения()
	
	ДанныеПомощникаЗаполнения = Обработки.ПомощникЗаполнения3НДФЛ.НовыйДанныеПомощникаЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеПомощникаЗаполнения, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ДанныеПомощникаЗаполнения, Объект, , "ДоходыВычеты");
	ДанныеПомощникаЗаполнения.ДоходыВычеты = Объект.ДоходыВычеты.Выгрузить();
	
	Возврат ДанныеПомощникаЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
		Если СостояниеДекларации3НДФЛ.Сдано Тогда
			ПоказатьВопросЕслиДекларацияСдана("ЗаписатьИЗакрыть");
		ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
			ПоказатьВопросЕслиДекларацияОтправлена("ЗаписатьИЗакрыть");
		Иначе
			ЗаполнитьДекларациюНаКлиенте(Истина);
		КонецЕсли;
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДоходовВычетовПоДаннымУчета

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДоходыВычетыПоДаннымУчета()
	
	УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	
	ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьДоходыВычетыПоДаннымУчетаНаСервере(
		Объект.Организация, Объект.Период, УникальныйИдентификатор, Декларация3НДФЛВыбраннаяФорма);
	
	Если ДлительнаяОперация = Неопределено Тогда
		// Ошибка проверки заполнения.
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Доходы и вычеты заполняются по данным учета'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияЗаполнитьДоходыВычеты", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДоходыВычетыПоДаннымУчетаНаСервере(Организация, Период, ИдентификаторФормы, ВыбраннаяФорма)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",    Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода",  НачалоГода(Период));
	ПараметрыЗаполнения.Вставить("КонецПериода",   КонецГода(Период));
	ПараметрыЗаполнения.Вставить("ВыбраннаяФорма", ВыбраннаяФорма);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Помощник заполнения 3-НДФЛ: заполнение доходов от предпринимательской деятельности'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельностиВФоне",
		ПараметрыЗаполнения,
		НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияЗаполнитьДоходыВычеты(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДоходовВычетов(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДоходовВычетов(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		Объект["АвансовыеПлатежиИП" + ИмяПериода] = Результат["АвансовыеПлатежи" + ИмяПериода];
		Объект["ТорговыйСбор" + ИмяПериода] = Результат["ТорговыйСбор" + ИмяПериода];
	КонецЦикла;
	Если Результат.ДоходыПредпринимателя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеВидыДеятельности = Новый Массив;
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаДоходыВычеты Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДоходыВычеты.СтруктураДоходовВычетов;
		Если СтруктураДанных.СпособЗаполнения <> "ПоДаннымУчета" Тогда
			ИсключаемыеВидыДеятельности.Добавить(СтруктураДанных.ВидДеятельности);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультат = Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьТаблицуДоходыВычетыПоУмолчанию(
		Результат, Декларация3НДФЛВыбраннаяФорма, ИсключаемыеВидыДеятельности);
	
	Для Каждого ТекущаяСтрока Из ТаблицаРезультат Цикл
		ДобавитьСтрокуДоходыВычеты(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(Форма)
	
	// Поддерживается автоматическое заполнение следующих данных:
	//   - Доходы от предпринимательской деятельности;
	//   - Авансовые платежи по налогу;
	//   - Уплаченный торговый сбор.
	
	Объект = Форма.Объект;
	
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		Объект["АвансовыеПлатежиИП" + ИмяПериода] = 0;
		Объект["ТорговыйСбор" + ИмяПериода] = 0;
	КонецЦикла;
	
	// Перед заполнением удалим заполненные ранее доходы от предпринимательской деятельности.
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаДоходовВычетов Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДоходовВычетов.СтруктураДоходовВычетов;
		Если СтруктураДанных.СпособЗаполнения = "ПоДаннымУчета" Тогда
			Объект.ДоходыВычеты.Удалить(СтрокаДоходовВычетов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтандартныеВычеты()
	
	Если Объект.Период < УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение(
		"Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика"));
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаВычетов Из НайденныеСтроки Цикл
		Объект.ДоходыВычеты.Удалить(СтрокаВычетов);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение(
		"Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей"));
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаВычетов Из НайденныеСтроки Цикл
		Объект.ДоходыВычеты.Удалить(СтрокаВычетов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Декларация

&НаКлиентеНаСервереБезКонтекста
Функция СрокПредставленияОтчетаПоУмолчанию(Период)
	
	Возврат Дата(Год(Период) + 1, 04, 30);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДекларацию3НДФЛ()
	
	Если НЕ ЗначениеЗаполнено(Декларация3НДФЛ) ИЛИ ОтчетностьГотовится Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДекларации(Декларация3НДФЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДекларацию4НДФЛ()

	Если НЕ ЗначениеЗаполнено(Декларация4НДФЛ) ИЛИ ОтчетностьГотовится Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДекларации(Декларация4НДФЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДекларации(СсылкаНаДекларацию)
	
	Если ДоступнаПечатьPDF417(СсылкаНаДекларацию) Тогда
		ФормаОтчета = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(СсылкаНаДекларацию);
		Если ФормаОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "ПомощникЗаполнения3НДФЛ");
	Иначе
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуРеглОтчета(СсылкаНаДекларацию);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(СсылкаНаДекларацию)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДекларацию) Или Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаДекларацию) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДекларацию, "ИсточникОтчета, ВыбраннаяФорма");
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Отчет." + РеквизитыДекларации.ИсточникОтчета);
	
	Возврат МенеджерОтчета.ДоступнаПечатьPDF417(РеквизитыДекларации.ВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеОписиВложения()
	
	ВложенныеПредметы = Обработки.ПечатьОписиВложения.НоваяТаблицаВложенийОписи();
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		СтрокаВложенныеПредметы = ВложенныеПредметы.Добавить();
		СтрокаВложенныеПредметы.НаименованиеПредмета = Декларация3НДФЛ.НаименованиеОтчета;
		СтрокаВложенныеПредметы.Количество = 1;
		СтрокаВложенныеПредметы.ОбъявленнаяЦенность = 1;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		СтрокаВложенныеПредметы = ВложенныеПредметы.Добавить();
		СтрокаВложенныеПредметы.НаименованиеПредмета = Декларация4НДФЛ.НаименованиеОтчета;
		СтрокаВложенныеПредметы.Количество = 1;
		СтрокаВложенныеПредметы.ОбъявленнаяЦенность = 1;
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, Объект.Период);
	
	ДанныеОписи = Новый Структура;
	ДанныеОписи.Вставить("Отправитель",       СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	ДанныеОписи.Вставить("ВложенныеПредметы", ВложенныеПредметы);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОписи, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПериодДекларации4НДФЛ(Период)
	
	Возврат ДобавитьМесяц(Период, 12);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированныйОтчет3НДФЛ";
КонецФункции

#КонецОбласти

#Область ОплатаНалога

&НаСервереБезКонтекста
Функция ПравилаСрокиПредставленияОтчетаУплатыНалога(Организация, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("СрокПредставленияОтчета", СрокПредставленияОтчетаПоУмолчанию(Период));
	Результат.Вставить("ПравилоПредставленияОтчета", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Результат.Вставить("СрокУплатыНалога", СрокУплатыНалогаПоУмолчанию(Период));
	Результат.Вставить("ПравилоУплатыНалога", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Правила = ВыполнениеЗадачБухгалтера.ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(Организация, КонецГода(Период));
		
		Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация, Правила, КонецГода(Период));
			
		ПорядокОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Отчет", Неопределено);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Уплата", Неопределено);
		
		Если ПорядокОтчета <> Неопределено Тогда
			Результат.СрокПредставленияОтчета    = ПорядокОтчета.Срок;
			Результат.ПравилоПредставленияОтчета = ПорядокОтчета.Правило;
		Иначе
			Результат.СрокПредставленияОтчета    = СрокПредставленияОтчетаПоУмолчанию(Период);
			Результат.ПравилоПредставленияОтчета = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(Правила.Задача, Правила.Отчет);
		КонецЕсли;
		
		Если ПорядокУплаты <> Неопределено Тогда
			Результат.СрокУплатыНалога    = ПорядокУплаты.Срок;
			Результат.ПравилоУплатыНалога = ПорядокУплаты.Правило;
		Иначе
			// Задача по уплате налога для ИП на УСН настраивается опционально и может отсутствовать в списке задач.
			Результат.СрокУплатыНалога    = СрокУплатыНалогаПоУмолчанию(Период);
			Результат.ПравилоУплатыНалога = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(Правила.Задача, Правила.Уплата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СрокУплатыНалогаПоУмолчанию(Период)
	
	Возврат УчетНДФЛПредпринимателя.СрокУплатыНалогаПоУмолчанию(Период);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОплаченныйНалог(Платежи)
	
	СуммаОплаты = 0;
	
	ОтборСтрок = Новый Структура("Оплачено", Истина);
	ОплаченныеПлатежи = Платежи.НайтиСтроки(ОтборСтрок);
	Для Каждого Платеж Из ОплаченныеПлатежи Цикл
		СуммаОплаты = СуммаОплаты + Платеж.Сумма;
	КонецЦикла;
	
	Возврат СуммаОплаты;
	
КонецФункции

&НаКлиенте
Процедура ПередУплатойНалога()
	
	Если ПлательщикЕНП И Не УведомлениеОбИсчисленныхНалогахПодготовлено И Объект.НалогКУплате > 0 
		И (Не ПростойУчетЕНС Или ПодаетсяУведомлениеПоНалогуЗаПериод) Тогда
		ПредупредитьОбОтсутствииУведомления();
	Иначе
		СоздатьДокументУплатыНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОплаты = ОплатитьНаСервере(СпособУплатыНалога);
	Если РезультатОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОплаты) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", РезультатОплаты);
		ПараметрыФормы.Вставить("ПериодСобытия", КонецГода(Объект.Период));
		ПараметрыФормы.Вставить("Правило",       Правило);
		
		Если СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод") Тогда
			ИмяФормыУплатыНалога = "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая";
		Иначе
			ИмяФормыУплатыНалога = "Документ.РасходныйКассовыйОрдер.ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыУплатыНалога, ПараметрыФормы, , УникальныйИдентификатор);
		
	ИначеЕсли РезультатОплаты.Количество() > 0 Тогда
		ТипСозданныхДокументов = ТипЗнч(РезультатОплаты[0]);
		ОповеститьОбИзменении(ТипСозданныхДокументов);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОплатитьНаСервере(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод
		И Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Определим налоги к уплате с детализацией до видов налогов.
	ТаблицаНалогиКУплате = ТаблицаНеоплаченныеНалоги(Декларация3НДФЛ,
		Платежи,
		ОсвобождениеОтНалога,
		Объект.АвансовыеПлатежиИП);
	
	ПараметрыВыполнения = Обработки.ПомощникЗаполнения3НДФЛ.НовыйПараметрыФормированияДокументовОплаты();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Объект);
	ПараметрыВыполнения.СпособОплаты = СпособОплаты;
	
	ТаблицаПлатежей = 
		Обработки.ПомощникЗаполнения3НДФЛ.ТаблицаПлатежейДляФормированияПлатежныхПоручений(ТаблицаНалогиКУплате, ПараметрыВыполнения);
	
	НалоговыйПериод = КонецГода(Объект.Период);
	
	СтруктураПараметров = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НовыеПараметрыФормированияПлатежныхДокументов();
	СтруктураПараметров.Правило         = ПравилоУплатыНалога;
	СтруктураПараметров.ПериодСобытия   = КонецГода(Объект.Период);
	СтруктураПараметров.ПериодПлатежа   = КонецГода(Объект.Период);
	СтруктураПараметров.Организация     = Объект.Организация;
	СтруктураПараметров.НалоговыйПериод = НалоговыйПериод;
	СтруктураПараметров.Платежи         = ПоместитьВоВременноеХранилище(ТаблицаПлатежей);
	СтруктураПараметров.СпособОплаты    = СпособОплаты;
	СтруктураПараметров.СчетОрганизации = СчетОрганизации;
	
	ЗначенияЗаполнения =
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ДанныеЗаполненияПлатежныхДокументов(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения) И ЗначенияЗаполнения.Количество() = 1 Тогда
		Возврат ЗначенияЗаполнения[0];
	Иначе
		СозданныеДокументы = 
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументыПоДаннымЗаполнения(
				СтруктураПараметров, ЗначенияЗаполнения);
		
		НайтиИОтобразитьСвязанныеПлатежи();
	
		УправлениеЗакладкойОплата(ЭтотОбъект);
	
		Возврат СозданныеДокументы;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаНеоплаченныеНалоги(Декларация, Платежи, ОсвобождениеОтНалога, Знач СуммаАвансовогоПлатежа)
	
	// Получим налоги к оплате по декларации.
	НалогиКУплате = Отчеты.РегламентированныйОтчет3НДФЛ.ДанныеРеглОтчета(Декларация);
	
	// Дополним таблицу оплатами с противоположным знаком и свернем таблицу,
	// чтобы получить неоплаченную часть налога.
	Для Каждого СтрокаПлатеж Из Платежи Цикл
		СтрокаНалогКУплате = НалогиКУплате.Добавить();
		СтрокаНалогКУплате.ВидНалога = СтрокаПлатеж.ВидНалога;
		СтрокаНалогКУплате.Сумма = -СтрокаПлатеж.Сумма;
	КонецЦикла;
	
	Если ОсвобождениеОтНалога > 0 Тогда
		СтрокаНалогКУплате = НалогиКУплате.Добавить();
		СтрокаНалогКУплате.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП;
		СтрокаНалогКУплате.Сумма = -ОсвобождениеОтНалога;
	КонецЕсли;
	
	НалогиКУплате.Свернуть("ВидНалога, КБК", "Сумма");
	
	ВидНалогаПоБазовойСтавке = Перечисления.ВидыНалогов.НДФЛ_ИП;
	ВидНалогаПоПовышеннойСтавке = Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины;
	
	// Считаем, что сначала авансы оплачены по базовой ставке
	ЗачестьАвансовыйПлатежПоНалогу(НалогиКУплате, ВидНалогаПоБазовойСтавке, СуммаАвансовогоПлатежа);
	// Учитываем аванс оплаченный по повышенной ставке
	ЗачестьАвансовыйПлатежПоНалогу(НалогиКУплате, ВидНалогаПоПовышеннойСтавке, СуммаАвансовогоПлатежа);
	
	Возврат НалогиКУплате;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗачестьАвансовыйПлатежПоНалогу(ТаблицаПлатежей, ВидНалога, СуммаАвансовогоПлатежа)
	
	Если СуммаАвансовогоПлатежа <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ВидНалога", ВидНалога);
	СтрокиОтбора = ТаблицаПлатежей.НайтиСтроки(Отбор);
	Если СтрокиОтбора.Количество() > 0 Тогда
		СуммаУжеОплаченная = Мин(СтрокиОтбора[0].Сумма, СуммаАвансовогоПлатежа);
		СтрокиОтбора[0].Сумма = СтрокиОтбора[0].Сумма - СуммаУжеОплаченная;
		СуммаАвансовогоПлатежа = СуммаАвансовогоПлатежа - СуммаУжеОплаченная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИОтобразитьСвязанныеПлатежи()
	
	Платежи.Очистить();
	
	ТаблицаПлатежей = Обработки.ПомощникЗаполнения3НДФЛ.ДокументыУплаты(
		Объект.Организация, Объект.Период, ПравилоУплатыНалога);
	
	Если ТаблицаПлатежей <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			ЗаполнитьЗначенияСвойств(Платежи.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, Платежи, "Платеж");
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ДокументУплатыДляУдаления, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументУплатыДляУдаления);
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхПомощника

&НаСервереБезКонтекста
Функция ДекларацияСодержитДанныеПомощника(Знач Декларация)
	
	Возврат (Обработки.ПомощникЗаполнения3НДФЛ.ДанныеПомощникаЗаполнения(Декларация) <> Неопределено);
	
КонецФункции

&НаСервере
Процедура НайтиИПрочитатьДекларации()
	
	// 3-НДФЛ
	Декларация3НДФЛ = Обработки.ПомощникЗаполнения3НДФЛ.НайтиДекларацию3НДФЛ(
		Объект.Организация,
		Объект.Период,
		Декларация3НДФЛВыбраннаяФорма);
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		ДанныеПомощника = Обработки.ПомощникЗаполнения3НДФЛ.ДанныеПомощникаЗаполнения(Декларация3НДФЛ);
		Если ДанныеПомощника <> Неопределено Тогда
			ВосстановитьДанныеПомощника(ДанныеПомощника);
		КонецЕсли;
		Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ);
		Декларация3НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация3НДФЛ);
	Иначе
		Объект.НомерКорректировки = 0;
		Декларация3НДФЛСостояниеОтправки = Неопределено;
	КонецЕсли;
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(Декларация3НДФЛВыбраннаяФорма);
	АдресКлючейПоказателей = ПоместитьВоВременноеХранилище(КлючиПоказателей, УникальныйИдентификатор);
	
	// 4-НДФЛ
	Если ПлательщикНДФЛ Тогда
		Декларация4НДФЛ = Обработки.ПомощникЗаполнения3НДФЛ.НайтиДекларацию4НДФЛ(
			Объект.Организация,
			ПериодДекларации4НДФЛ(Объект.Период),
			Декларация4НДФЛВыбраннаяФорма);
	Иначе
		Декларация4НДФЛ = Документы.РегламентированныйОтчет.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		Объект.СформироватьДекларацию4НДФЛ = Истина;
		ДанныеДекларации4НДФЛ = Отчеты.РегламентированныйОтчет4НДФЛ.ДанныеРеглОтчета(Декларация4НДФЛ);
		Если ДанныеДекларации4НДФЛ.Количество() <> 0 Тогда
			Объект.ПредполагаемаяСуммаДоходов = ДанныеДекларации4НДФЛ[0].Сумма;
		Иначе
			Объект.ПредполагаемаяСуммаДоходов = 0;
		КонецЕсли;
		
		Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ);
		Декларация4НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация4НДФЛ);
	Иначе
		Объект.СформироватьДекларацию4НДФЛ = Ложь;
		Объект.ПредполагаемаяСуммаДоходов = 0;
		
		Объект.НомерКорректировки4НДФЛ = 0;
		Декларация4НДФЛСостояниеОтправки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеОтправкиДекларации(Знач Декларация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Декларация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеДекларации(СостояниеОтправки)
	
	Если СостояниеОтправки = Неопределено Тогда
		
		Возврат ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента();
		
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

&НаСервере
Процедура ВосстановитьДанныеПомощника(ДанныеПомощникаЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПомощникаЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПомощникаЗаполнения, , "ДоходыВычеты");
	Объект.ДоходыВычеты.Загрузить(ДанныеПомощникаЗаполнения.ДоходыВычеты);
	
	Отбор = Новый Структура("КлючСтроки", "");
	СтрокиОтбора = Объект.ДоходыВычеты.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
		ТекущаяСтрока.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОГосударственныхОрганах()
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект, ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Объект.Организация));
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если ЭтоШагДоходыВычеты(Форма.НавигацияПараметрФормы) Тогда
		
		УправлениеЗакладкойДоходыВычеты(Форма);
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "РасчетНалога" Тогда
		
		УправлениеЗакладкойРасчетНалога(Форма);
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "Декларация" Тогда
		
		УправлениеЗакладкойДекларация(Форма);
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "ОплатаНалога" Тогда
		
		УправлениеЗакладкойОплата(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, КонецГода(Объект.Период));
	ЭлектронныйДокументооборотДоступен = ЭлектронныйДокументооборотДоступен(Объект.Организация);
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ЗаполнятьАвансовыеПлатежиПоквартально = Объект.Период >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДоходыВычеты(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.Корректировка = СтрШаблон(НСтр("ru = 'Корректировка №%1'"), Формат(Объект.НомерКорректировки, "ЧГ=0"));
	Элементы.Корректировка.Видимость = (Объект.НомерКорректировки <> 0);
	
	Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыКонтекстноеМенюЗаполнитьДоходыВычеты.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыДобавитьДоходыОтПредпринимательскойДеятельности.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыКонтекстноеМенюДобавитьДоходОтПредпринимательскойДеятельности.Видимость = Форма.ПлательщикНДФЛ;
	
	СуммаДоходовИП = СуммаДоходовИП(Форма);
	Форма.ПодсказкаПорядкаОпределенияАвансовыхПлатежей = ТекстПодсказкиПорядкаОпределенияАвансовыхПлатежей(Объект.Период, СуммаДоходовИП);
	Элементы.ПодсказкаПорядкаОпределенияАвансовыхПлатежей.Высота =
		СтрЧислоВхождений(Форма.ПодсказкаПорядкаОпределенияАвансовыхПлатежей, Символы.ПС) + 1;
	
	Форма.Корректировка4НДФЛ = СтрШаблон(НСтр("ru = '(корректировка №%1)'"), Формат(Объект.НомерКорректировки4НДФЛ, "ЧГ=0"));
	Элементы.Корректировка4НДФЛ.Видимость = (Объект.НомерКорректировки4НДФЛ <> 0);
	
	Элементы.ПредполагаемаяСуммаДоходов.Доступность = Объект.СформироватьДекларацию4НДФЛ;
	
	Элементы.РассчитатьНалогДалее.Доступность = Форма.РеквизитыОрганизацииЗаполнены;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И Не Форма.РеквизитыОрганизацииЗаполнены;
	
	Элементы.ПорядокОпределенияАвансовыхПлатежей.Видимость = ЗначениеЗаполнено(Форма.Декларация4НДФЛВыбраннаяФорма);
	
	Если Форма.НавигацияПараметрФормы = "Доходы" Тогда
		
		Элементы.ДобавитьДоход.Видимость = Истина;
		Элементы.ДобавитьДоход.Заголовок = Нстр("ru = 'Добавить'");
		Элементы.ДобавитьДоход.Отображение = ОтображениеКнопки.Текст;
		Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Видимость = Истина;
		Элементы.ДобавитьВычет.Видимость = Ложь;
		Элементы.Шапка.Видимость = Истина;
		Элементы.ПерейтиКДоходам.Видимость = Ложь;
		
		Отбор = Новый Структура("ЭтоВычет", Ложь);
		Элементы.ДоходыВычеты.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		Элементы.ДоходыВычетыДобавитьДоходПрибыльКИК.Видимость = Истина;
		Элементы.ДобавитьДоходОтПрибылиКИК.Видимость = Истина;
		
		Элементы.ДоходыВычетыКонтекстноеМенюЗаполнитьДоходыВычеты.Видимость = Истина;
		Элементы.ДоходыВычетыКонтекстноеМенюДоход.Видимость = Истина;
		Элементы.ДоходыВычетыКонтекстноеМенюВычет.Видимость = Ложь;
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "Вычеты" Тогда
		
		Элементы.ДобавитьДоход.Видимость = Ложь;
		Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Видимость = Ложь;
		Элементы.ДобавитьВычет.Видимость = Истина;
		Элементы.ДобавитьВычет.Заголовок = Нстр("ru = 'Добавить'");
		Элементы.ДобавитьВычет.Отображение = ОтображениеКнопки.Текст;
		Элементы.Шапка.Видимость = Ложь;
		Элементы.ПерейтиКДоходам.Видимость = Истина;
		Элементы.ДоходыВычеты.ОтборСтрок = Неопределено;
		
		Элементы.ДоходыВычетыКонтекстноеМенюЗаполнитьДоходыВычеты.Видимость = Ложь;
		Элементы.ДоходыВычетыКонтекстноеМенюДоход.Видимость = Ложь;
		Элементы.ДоходыВычетыКонтекстноеМенюВычет.Видимость = Истина;
		
	Иначе
		Элементы.ДобавитьДоход.Видимость = Истина;
		Элементы.ДобавитьДоход.Заголовок = Нстр("ru = 'Доход'");
		Элементы.ДобавитьДоход.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Видимость = Истина;
		Элементы.ДобавитьВычет.Видимость = Истина;
		Элементы.ДобавитьВычет.Заголовок = Нстр("ru = 'Вычет'");
		Элементы.ДобавитьВычет.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.Шапка.Видимость = Истина;
		Элементы.ПерейтиКДоходам.Видимость = Ложь;
		Элементы.ДоходыВычеты.ОтборСтрок = Неопределено;
		Элементы.ДоходыВычетыДобавитьДоходПрибыльКИК.Видимость = Ложь;
		Элементы.ДобавитьДоходОтПрибылиКИК.Видимость = Ложь;
		
		Элементы.ДоходыВычетыКонтекстноеМенюЗаполнитьДоходыВычеты.Видимость = Истина;
		Элементы.ДоходыВычетыКонтекстноеМенюДоход.Видимость = Истина;
		Элементы.ДоходыВычетыКонтекстноеМенюВычет.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.ДоходыВычетыДобавитьДоходОиПродажиПрочегоИмущества.Заголовок =
			ТекстКомандыДобавитьДоходОтПродажиПрочегоИмущества(Форма.Декларация3НДФЛВыбраннаяФорма);
	
	Элементы.ДоходыВычетыКонтекстноеМенюДобавитьДоходОтПродажиПрочегоИмущества.Заголовок =
		ТекстКомандыДобавитьДоходОтПродажиПрочегоИмущества(Форма.Декларация3НДФЛВыбраннаяФорма);
		
	Элементы.ДоходыВычетыДобавитьДоходОтОперацийСЦеннымиБумагами.Заголовок =
			ТекстКомандыДобавитьДоходОтОперацийСЦеннымиБумагами(Форма.Декларация3НДФЛВыбраннаяФорма);
	
	Элементы.ДоходыВычетыКонтекстноеМенюДобавитьДоходОтОперацийСЦеннымиБумагами.Заголовок =
		ТекстКомандыДобавитьДоходОтОперацийСЦеннымиБумагами(Форма.Декларация3НДФЛВыбраннаяФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКомандыДобавитьДоходОтПродажиПрочегоИмущества(ВыбраннаяФорма)
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Результат = НСтр("ru = 'Продажа прочего имущества, криптовалюты'");
	Иначе
		Результат = НСтр("ru = 'Продажа прочего имущества'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКомандыДобавитьДоходОтОперацийСЦеннымиБумагами(ВыбраннаяФорма)
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Результат = НСтр("ru = 'Ценные бумаги, облигации, вклады'");
	Иначе
		Результат = НСтр("ru = 'Операции с ценными бумагами'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаДоходовИП(Форма)
	
	Объект = Форма.Объект;
	
	СуммаДоходов = 0;
	СуммаРасходов = 0;
	СуммаПрофВычета = 0;
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	СтрокиПредпринимательскойДеятельности = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	Для Каждого Строка Из СтрокиПредпринимательскойДеятельности Цикл
		СуммаДоходов = СуммаДоходов + Строка.СуммаДохода;
		СуммаРасходов = СуммаРасходов + Строка.СтруктураДоходовВычетов.ИтогоПодтвержденныхРасходов;
		СуммаПрофВычета = СуммаПрофВычета + Строка.СтруктураДоходовВычетов.ИтогоРасходовНоНормативу;
	КонецЦикла;
	
	СуммаВычета = Макс(СуммаРасходов, СуммаПрофВычета);
	
	Возврат (СуммаДоходов - СуммаВычета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиПорядкаОпределенияАвансовыхПлатежей(Период, СуммаДоходовИП)
	
	Если СуммаДоходовИП > 0 Тогда
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Если в %1 году планируется изменение доходов от предпринимательской деятельности
					   |более чем на 50%% (меньше %2 или больше %3 %4),
					   |вы обязаны подать декларацию 4-НДФЛ для уточнения авансовых платежей.'"),
			Формат(ПериодДекларации4НДФЛ(Период), "ДФ=yyyy"),
			Формат(СуммаДоходовИП * 0.5, "ЧЦ=15; ЧДЦ=0; ЧН="),
			Формат(СуммаДоходовИП * 1.5, "ЧЦ=15; ЧДЦ=0; ЧН="),
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Иначе
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Если в %1 году планируется получение доходов от предпринимательской деятельности,
					   |вы обязаны подать декларацию 4-НДФЛ для расчета авансовых платежей.'"),
			Формат(ПериодДекларации4НДФЛ(Период), "ДФ=yyyy"));
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойРасчетНалога(Форма)
	
	Элементы = Форма.Элементы;
	РассчитываетсяНалог = Форма.РассчитываетсяНалог;
	
	Элементы.ГруппаВыполняетсяРасчетНалога.Видимость = РассчитываетсяНалог;
	Элементы.ГруппаРасчетНалога.Видимость = Не РассчитываетсяНалог;
	Элементы.ГруппаЗаявлениеНаВозвратНалога.Видимость = Не РассчитываетсяНалог
		И Форма.НалогКВозврату > 0 И Форма.ЗаполнятьЗаявлениеНаВозвратНалога;
	
	Элементы.ГруппаБаннерОсвобождениеОтНалога.Видимость = Форма.ПрименяетсяОсвобождениеОтНалога;
	
	// Список выбора элемента формы ВариантДействияВернуть всегда содержит как минимум 1 элемент.
	// Можно сразу обращаться по индексу к 1 элементу.
	СписокВыбораВернуть = Элементы.ВариантДействияВернуть.СписокВыбора;
	СписокВыбораВернуть[0].Представление = СтрШаблон(НСтр("ru = 'Вернуть %1 руб. на банковский счет:'"),
		Формат(Форма.НалогКВозврату, "ЧДЦ=0; ЧН=0;"));
	
	СписокВыбораНеВозвращать = Элементы.ВариантДействияНеВозвращать.СписокВыбора;
	Если Форма.ПлательщикНДФЛ Тогда
		ПредставлениеНеВозвращать = НСтр("ru = 'Оставить в счет будущих платежей по НДФЛ'");
	Иначе
		ПредставлениеНеВозвращать = НСтр("ru = 'Не возвращать'");
	КонецЕсли;

	// Список выбора элемента формы ВариантДействияНеВозвращать всегда содержит как минимум 1 элемент.
	// Можно сразу обращаться по индексу к 1 элементу.
	СписокВыбораНеВозвращать[0].Представление = ПредставлениеНеВозвращать;
	Элементы.ВариантДействияНеВозвращатьРасширеннаяПодсказка.Заголовок = ТекстПодсказкиНеВозвращать(Форма.ПлательщикНДФЛ);
	
	Элементы.СчетОрганизации.Видимость = Форма.ИспользуетсяНесколькоБанковскихСчетов;
	Элементы.СчетОрганизации.Доступность =
		(Форма.ВариантДействияСНалогомКВозврату = ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет);
	Элементы.СчетОрганизацииПредставление.Видимость = Не Форма.ИспользуетсяНесколькоБанковскихСчетов
		И ЗначениеЗаполнено(Форма.СчетОрганизации);
	Элементы.ГруппаПредупреждениеНеЗаполненСчетОрганизации.Видимость = Не Форма.ИспользуетсяНесколькоБанковскихСчетов
		И Не ЗначениеЗаполнено(Форма.СчетОрганизации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПодсказкиНеВозвращать(ПлательщикНДФЛ)
	
	Если ПлательщикНДФЛ Тогда
		ТекстПодсказки = 
		"Переплата по НДФЛ будет числиться на счете в налоговой инспекции.
		|Налоговая инспекция учтет переплату при начислении НДФЛ за следующий год или зачтет переплату по НДФЛ в счет погашения задолженности по другим налогам.
		|
		|Кроме того, эту сумму можно зачесть в счет погашения задолженности или предстоящих платежей по другим налогам самостоятельно, не дожидаясь решения налоговой инспекции.
		|Для этого на следующем шаге заполните заявление о зачете вручную в форме декларации.";
	Иначе
		ТекстПодсказки = 
		"Переплата по НДФЛ будет числиться на счете в налоговой инспекции.
		|
		|Эту сумму можно будет зачесть в счет погащения задолженности или предстоящих платежей по другим налогам.
		|Для этого на следующем шаге заполните заявление о зачете вручную в форме декларации.";
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДекларация(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ОтчетностьГотовится = Форма.ОтчетностьГотовится;
	
	Если ОтчетностьГотовится Тогда
		Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Отчетность готовится...'");
	Иначе
		Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Отчетность готова!'");
	КонецЕсли;
	
	ПредставлениеПериода3НДФЛ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
	
	// 3-НДФЛ
	Представление3НДФЛ = Новый Массив;
	Представление3НДФЛ.Добавить(СтрШаблон(НСтр("ru = '3-НДФЛ, декларация за %1'"), ПредставлениеПериода3НДФЛ));
	СостояниеОтправки3НДФЛ = СостояниеДекларации(Форма.Декларация3НДФЛСостояниеОтправки);
	Если Не ПустаяСтрока(СостояниеОтправки3НДФЛ.Представление) Тогда
		Представление3НДФЛ.Добавить(СтрШаблон("(%1)", СостояниеОтправки3НДФЛ.Представление));
	КонецЕсли;
	Элементы.Декларация3НДФЛ.Заголовок = СтрСоединить(Представление3НДФЛ, " ");
	Элементы.Декларация3НДФЛКартинкаФормируется.Видимость = ОтчетностьГотовится;
	Элементы.Декларация3НДФЛФормируется.Видимость         = ОтчетностьГотовится;
	Элементы.Декларация3НДФЛКартинкаPDF.Видимость         = НЕ ОтчетностьГотовится И ДоступнаПечатьPDF417(Форма.Декларация3НДФЛ);
	
	// 4-НДФЛ
	Представление4НДФЛ = Новый Массив;
	ПредставлениеПериода4НДФЛ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(ПериодДекларации4НДФЛ(Объект.Период)), КонецГода(ПериодДекларации4НДФЛ(Объект.Период)), Истина);
	Представление4НДФЛ.Добавить(СтрШаблон(НСтр("ru = '4-НДФЛ, предполагаемый доход на %1'"), ПредставлениеПериода4НДФЛ));
	СостояниеОтправки4НДФЛ = СостояниеДекларации(Форма.Декларация4НДФЛСостояниеОтправки);
	Если Не ПустаяСтрока(СостояниеОтправки4НДФЛ.Представление) Тогда
		Представление4НДФЛ.Добавить(СтрШаблон("(%1)", СостояниеОтправки4НДФЛ.Представление));
	КонецЕсли;
	
	Элементы.ГруппаДекларация4НДФЛ.Видимость = Объект.СформироватьДекларацию4НДФЛ;
	Элементы.Декларация4НДФЛ.Заголовок = СтрСоединить(Представление4НДФЛ, " ");
	Элементы.Декларация4НДФЛКартинкаФормируется.Видимость = ОтчетностьГотовится;
	Элементы.Декларация4НДФЛФормируется.Видимость         = ОтчетностьГотовится;
	Элементы.Декларация4НДФЛКартинкаPDF.Видимость         = НЕ ОтчетностьГотовится И ДоступнаПечатьPDF417(Форма.Декларация4НДФЛ);
	
	// Суммы налога.
	Элементы.ПредставлениеНалогКУплате.Заголовок = 
		СтрШаблон(НСтр("ru = 'Налог к уплате: %1 руб.'"), Формат(Объект.НалогКУплате, "ЧЦ=15; ЧДЦ=; ЧН=0"));
	
	Элементы.ПредставлениеНалогКВозврату.Заголовок = 
		СтрШаблон(НСтр("ru = 'Налог к возврату: %1 руб.'"), Формат(Форма.НалогКВозврату, "ЧЦ=15; ЧДЦ=; ЧН=0"));
	
	Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
	
	Элементы.ОписьВложения.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.Конверт.Доступность = ЗначениеЗаполнено(Форма.ФНС_Контрагент);
	
	Элементы.ПредставлениеНалогКУплате.Видимость   = НЕ ОтчетностьГотовится И Объект.НалогКУплате > 0;
	Элементы.ПредставлениеНалогКВозврату.Видимость = НЕ ОтчетностьГотовится И Форма.НалогКВозврату > 0;
	
	// Способ сдачи отчетности.
	СрокПредставленияОтчета = ?(ЗначениеЗаполнено(Форма.СрокПредставленияОтчета), 
		Форма.СрокПредставленияОтчета,
		СрокПредставленияОтчетаПоУмолчанию(Объект.Период));
	Форма.ПредставлениеСрокаСдачиОтчетности = ПредставлениеСрокаСдачиОтчетности(СрокПредставленияОтчета);
	Если Форма.Используется1СОтчетность Тогда
		Элементы.Группа1СОтчетность.Видимость = Истина;
		Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.ОписаниеПодключить1СОтчетность.Видимость  = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Подключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Открыть1СОтчетность.Видимость    = Форма.ЭлектронныйДокументооборотДоступен;
	Иначе
		Элементы.Группа1СОтчетность.Видимость = Ложь;
	КонецЕсли;
	Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСрокаСдачиОтчетности(СрокПредставленияОтчета)
	
	Представление = СтрШаблон(НСтр("ru = 'Сдать отчетность следует не позднее %1'"), Формат(СрокПредставленияОтчета, "ДЛФ=DD"));
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойОплата(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Уведомления
	КнопкаПоУмолчаниюУведомление = Форма.ПлательщикЕНП
		И Не Форма.УведомлениеОбИсчисленныхНалогахПодготовлено;
	Элементы.ВыполнитьДействиеСформироватьУведомление.Видимость = Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Видимость = Не Форма.ПростойУчетЕНС
		И Не Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеСформироватьУведомление, КнопкаПоУмолчаниюУведомление);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС, КнопкаПоУмолчаниюУведомление);
	
	// Оплата
	СрокУплатыНалога = ?(ЗначениеЗаполнено(Форма.СрокУплатыНалога), Форма.СрокУплатыНалога, СрокУплатыНалогаПоУмолчанию(Объект.Период));
	
	Форма.ПредставлениеНалогаКУплате = ПредставлениеНалогаКУплате(Объект.НалогКУплате, ОплаченныйНалог(Форма.Платежи), СрокУплатыНалога);
	Элементы.ГруппаОплатаНалога.Видимость = Не (Объект.НалогКУплате = 0 И Форма.НалогКВозврату <> 0);
	
	Элементы.ГруппаВозвратНалога.Видимость = Форма.НалогКВозврату <> 0;
	
	Если Форма.ВариантДействияСНалогомКВозврату = ПомощникЗаполнения3НДФЛКлиентСервер.ВариантыДействийСНалогомКВозврату().ВернутьНаСчет Тогда
		
		Элементы.ПояснениеНалогКВозврату.Заголовок = СтрШаблон(
			НСтр("ru = 'Налоговая инспекция вернет %1 руб. излишне удержанного налога'"),
			Формат(Форма.НалогКВозврату, "ЧЦ=15; ЧДЦ="));
		
		Элементы.ПояснениеНалогКВозврату.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		ЧастиПодсказки = Новый Массив;
		ЧастиПодсказки.Добавить(НСтр("ru = 'После проверки декларации налоговая инспекция перечислит указанную сумму на банковский счет '"));
		ЧастиПодсказки.Добавить(Новый ФорматированнаяСтрока(Строка(Форма.СчетОрганизации), , , , "ОткрытьБанковскийСчет"));
		
		Элементы.ПояснениеНалогКВозвратуРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиПодсказки);
		
	Иначе
		
		Элементы.ПояснениеНалогКВозврату.Заголовок = СтрШаблон(
			НСтр("ru = 'Можно вернуть %1 руб. излишне удержанного налога'"),
			Формат(Форма.НалогКВозврату, "ЧЦ=15; ЧДЦ="));
		
		Элементы.ПояснениеНалогКВозвратуРасширеннаяПодсказка.Заголовок = "";
		
	КонецЕсли;
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(Форма);
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(Форма);
	ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку(
		Объект.Организация, НеОтправленныеПлатежи);
	ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку
		И ТребуетсяВыгрузитьДокументыОплаты(Объект.Организация, НеИсполненныеПлатежи);
	
	КнопкаПоУмолчаниюОтправитьВБанк = Не КнопкаПоУмолчаниюУведомление И ЗначениеЗаполнено(НеОтправленныеПлатежи);
	
	Элементы.ОтправитьПлатежиВБанк.Видимость = ТребуетсяОтправитьДокументыОплатыПоБанку;
	Элементы.ВыгрузитьПлатежи.Видимость = ТребуетсяВыгрузитьДокументыОплаты;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОтправитьПлатежиВБанк, КнопкаПоУмолчаниюОтправитьВБанк);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыгрузитьПлатежи, КнопкаПоУмолчаниюОтправитьВБанк);
	
	НалогОплаченПолностью = Форма.Платежи.Итог("Сумма") >= Объект.НалогКУплате;
	
	Элементы.ОплатитьСБанковскогоСчета.Видимость = Не НалогОплаченПолностью;
	Элементы.ОплатитьНаличными.Видимость = Не НалогОплаченПолностью;
	
	КнопкаПоУмолчаниюУплата = Не КнопкаПоУмолчаниюУведомление И Не КнопкаПоУмолчаниюОтправитьВБанк
		И Не НалогОплаченПолностью;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьСБанковскогоСчета, КнопкаПоУмолчаниюУплата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалогаКУплате(НалогКУплате, ОплаченныйНалог, СрокУплатыНалога)
	
	НеоплаченныйНалог = Макс(0, НалогКУплате - ОплаченныйНалог);
	Если НеоплаченныйНалог > 0 Тогда
		Представление = СтрШаблон(НСтр("ru = 'Оплатите %1 %2 не позднее %3'"),
			Формат(НеоплаченныйНалог, "ЧЦ=15; ЧДЦ="),
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),
			Формат(СрокУплатыНалога, "ДЛФ=DD"));
	ИначеЕсли НалогКУплате = 0 Тогда
		Представление = НСтр("ru = 'Отсутствует налог к оплате'");
	Иначе
		Представление = НСтр("ru = 'Налог оплачен'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлектронныйДокументооборотДоступен(Знач Организация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоШагДоходыВычеты(НавигацияПараметрФормы)
	
	ДопустимыеИменаШагов = Новый Массив;
	ДопустимыеИменаШагов.Добавить("ДоходыВычеты");
	ДопустимыеИменаШагов.Добавить("Доходы");
	ДопустимыеИменаШагов.Добавить("Вычеты");
	
	Возврат ДопустимыеИменаШагов.Найти(НавигацияПараметрФормы) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачальныйШагПомощника(ВыбраннаяФорма)
	
	Если ПомощникЗаполнения3НДФЛКлиентСервер.ВычетыРаспределяютсяПоДоходам(ВыбраннаяФорма) Тогда
		Возврат "Доходы";
	Иначе
		Возврат "ДоходыВычеты";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура ИзменитьЭтап(Идентификатор, ОбратноеНаправление = Ложь)
	
	СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
	
	Если ЭтоШагДоходыВычеты(Идентификатор) Тогда
		Если ОбратноеНаправление Тогда
			Если СостояниеДекларации3НДФЛ.Сдано Тогда
				ПоказатьВопросЕслиДекларацияСдана(Идентификатор);
				Возврат;
			ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
				ПоказатьВопросЕслиДекларацияОтправлена(Идентификатор);
				Возврат;
			КонецЕсли;
		ИначеЕсли Идентификатор = "Вычеты" Тогда
			ЗаполнитьСтандартныеВычеты();
		КонецЕсли;
	ИначеЕсли Идентификатор = "РасчетНалога" Тогда
		РассчитатьНалогНаКлиенте();
	ИначеЕсли Идентификатор = "Декларация" Тогда
		Если Не ОбратноеНаправление И (Модифицированность Или Не ЗначениеЗаполнено(Декларация3НДФЛ)) Тогда
			Если СостояниеДекларации3НДФЛ.Сдано Тогда
				ПоказатьВопросЕслиДекларацияСдана(Идентификатор);
				Возврат;
			ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
				ПоказатьВопросЕслиДекларацияОтправлена(Идентификатор);
				Возврат;
			Иначе
				ЗаполнитьДекларациюНаКлиенте();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьЭтапНаСервере(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтандартныеВычеты()

	ЗаполняемыеВычеты = Новый Массив;
	ЗаполняемыеВычеты.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей);
	ЗаполняемыеВычеты.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика);
	
	Для Каждого ТекущаяСтрока Из Объект.ДоходыВычеты Цикл
		Если ЗаполняемыеВычеты.Найти(ТекущаяСтрока.Вид) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",    Объект.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода",  НачалоГода(Объект.Период));
	ПараметрыЗаполнения.Вставить("КонецПериода",   КонецГода(Объект.Период));
	ПараметрыЗаполнения.Вставить("ВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
	
	СтрокиДоходов = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("ЭтоВычет", Ложь));
	ВведенныеДоходы = Новый Соответствие;
	
	Для Каждого ТекущаяСтрока Из СтрокиДоходов Цикл
		
		Если ВведенныеДоходы.Получить(ТекущаяСтрока.Вид) <> Неопределено Тогда
			СуммаДохода = ТекущаяСтрока.СуммаДохода + ВведенныеДоходы[ТекущаяСтрока.Вид];
		Иначе
			СуммаДохода = ТекущаяСтрока.СуммаДохода;
		КонецЕсли;
		
		ВведенныеДоходы.Вставить(ТекущаяСтрока.Вид, СуммаДохода);
		
	КонецЦикла;
	
	ДоходыКВычету = Обработки.ПомощникЗаполнения3НДФЛ.ДоходыДоступныеДляСтандартногоВычета(
		ВведенныеДоходы,
		Декларация3НДФЛВыбраннаяФорма);
	
	ДоходКРаспределению = ДоходыКВычету.Итог("Сумма");
	
	ДанныеВычетов = Обработки.ПомощникЗаполнения3НДФЛ.ДанныеСтандартныхВычетов(ПараметрыЗаполнения);
	Для Каждого ТекущаяСтрока Из ДанныеВычетов Цикл
		ИдентификаторСтроки = ДобавитьСтрокуДоходыВычеты(ТекущаяСтрока);
		Если ДоходКРаспределению > 0 Тогда
			
			СтрокаВычета = Объект.ДоходыВычеты.НайтиПоИдентификатору(ИдентификаторСтроки);
			ВычетКРаспределению = СтрокаВычета.СуммаВычета;
			СтруктураРаспределения = Новый Соответствие;
			Для Каждого СтрокаДохода Из ДоходыКВычету Цикл
				СтруктураРаспределения.Вставить(СтрокаДохода.ВидДохода, Мин(ВычетКРаспределению, СтрокаДохода.Сумма));
				СтрокаДохода.Сумма = СтрокаДохода.Сумма - СтруктураРаспределения[СтрокаДохода.ВидДохода];
				ВычетКРаспределению = ВычетКРаспределению - СтруктураРаспределения[СтрокаДохода.ВидДохода];
				ДоходКРаспределению = ДоходКРаспределению - СтруктураРаспределения[СтрокаДохода.ВидДохода];
			КонецЦикла;
			СтрокаВычета.СтруктураДоходовВычетов.Вставить("ВидДохода", СтруктураРаспределения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуДоходыВычеты(ДанныеЗаполнения)
	
	НоваяСтрока = Объект.ДоходыВычеты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.ЭтоВычет = (ТипЗнч(ДанныеЗаполнения.Вид) = Тип("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	НоваяСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

&НаСервере
Процедура ИзменитьЭтапНаСервере(Идентификатор)
	
	Если ЭтоШагДоходыВычеты(Идентификатор) Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
		
		Если ЗначениеЗаполнено(Декларация3НДФЛ) И Не ДекларацияСодержитДанныеПомощника(Декларация3НДФЛ) Тогда
			// Найдена декларация 3-НДФЛ, заполненная вручную.
			Модифицированность = Истина;
		КонецЕсли;
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаДоходыВычеты);
		Элементы.РассчитатьНалогДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Идентификатор = "РасчетНалога" Тогда
		
		ПредупреждениеНеЗаполненСчетОрганизации = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаРасчетНалога);
		Элементы.ЗаполнитьДекларациюДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Идентификатор = "Декларация" Тогда
		
		ЗаполнитьСведенияОГосударственныхОрганах();
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаДекларация);
		Элементы.ОплатитьНалогДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Идентификатор = "ОплатаНалога" Тогда
		
		ЗаполнитьУведомленияИОтобразитьНаФорме();
		
		НайтиИОтобразитьСвязанныеПлатежи();
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаОплатаНалога);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	НавигацияПомощников.РазместитьНавигацию(
		ЭтотОбъект,
		СтруктураНавигации(Декларация3НДФЛВыбраннаяФорма),
		Новый Структура("НавигацияПараметрФормы", Идентификатор));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраницы(Элементы, ТекущаяСтраница)
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = ТекущаяСтраница;
	Для Каждого Страница Из Элементы.СтраницыПомощника.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураНавигации(ВыбраннаяФорма)
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.СтруктураНавигации(ВыбраннаяФорма).Структура;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервереБезКонтекста
Функция ПроверитьРеквизитыОрганизации(Организация)
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация, ПроверяемыеРеквизитыОрганизации(), НезаполненныеРеквизиты);
	
	// Проверка корректности заполнения кода по ОКТМО
	КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ОшибкиПроверкиОКТМО = ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьКодПоОКТМО(КодПоОКТМО);
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиОКТМО) Тогда
		РеквизитыОрганизацииЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыОрганизацииЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	СтрокаРеквизиты = "ИНН,ФамилияИП,ИмяИП,Адрес,КодПоОКТМО,Телефон,КодНалоговогоОргана";
	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции

#КонецОбласти

#Область РасчетНалога

&НаКлиенте
Процедура РассчитатьНалогНаКлиенте()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = РассчитатьНалогВФоне();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		РассчитываетсяНалог = Ложь;
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		// Индикация длительной операции - на закладке "Декларация"
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		ИзменитьЭтапНаСервере("РасчетНалога");
			
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияРассчитатьНалог", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьНалогВФоне()
	
	РассчитываетсяНалог = Истина;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет налога в помощнике заполнения декларации 3-НДФЛ'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		НастройкиЗапуска,
		"Обработки.ПомощникЗаполнения3НДФЛ.РасчетНалога",
		Объект.Организация,
		Объект.Период,
		ДанныеПомощникаЗаполнения(),
		Декларация3НДФЛВыбраннаяФорма);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияРассчитатьНалог(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	РассчитываетсяНалог = Ложь;
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияРасчетаНалога(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияРасчетаНалога(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	АдресТаблицаДанныхЗаполнения = ПоместитьВоВременноеХранилище(
		Результат.ТаблицаДанныхЗаполнения, УникальныйИдентификатор);
	
	Объект.НалогКУплате = Результат.НалогКУплате;
	НалогКВозврату = Результат.НалогКВозврату;
	
	ЗаполнятьЗаявлениеНаВозвратНалога = Результат.ЗаполнятьЗаявлениеНаВозвратНалога;
	
	ПрименяетсяОсвобождениеОтНалога = Результат.ПрименяетсяОсвобождениеОтНалога;
	
	Если ПрименяетсяОсвобождениеОтНалога Тогда
		ТекстБаннераОсвобождениеОтНалога = ТекстБаннераОсвобождениеОтНалога(Результат.ОсвобождениеОтНалога);
		ОсвобождениеОтНалога = Результат.ОсвобождениеОтНалога;
	Иначе
		ОсвобождениеОтНалога = 0;
	КонецЕсли;
	
	ОтрисоватьПоясненияРасчетаНалога(Результат.ПоясненияРасчетаНалога);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьПоясненияРасчетаНалога(ПоясненияРасчетаНалога)
	
	// Процедура отрисовывает пояснения расчета НДФЛ.
	// Поскольку невозможно заранее предугадать количество пояснений расчета,
	// в процессе вывода создаются новые элементы формы.
	// Эталоном для новых элементов формы служат группа формы ГруппаРасчетНалогаПоСтавке1 и подчиненные ей элементы:
	//   ГруппаПоказатель1, ГруппаПоказатель1Заголовок, ГруппаПоказатель1Значение
	// Новые элементы формы носят те же имена, что и эталоны, за исключением 
	// числовой части - она всегда увеличивается на 1.
	// При этом, пользователь может переходить по этапам навигации помощника неограниченное количество раз
	// и перед очередной отрисовкой пояснений расчета НДФЛ (когда пользователь в очередной раз 
	// попал на этап "Расчет налога"), удаляются добавленные ранее элементы формы.
	
	// Удалим добавленные группы расчета.
	
	// Удаление начинаем с индекса 2, поскольку первая группа добавлена
	// не программно и используется в качестве эталона. 
	СчетчикГрупп = 2;
	ГруппаРасчета = Элементы.Найти(СтрШаблон("ГруппаРасчетНалогаПоСтавке%1", СчетчикГрупп));
	
	Пока ГруппаРасчета <> Неопределено Цикл
		
		УдалитьЭлементыРекурсивно(ГруппаРасчета);
		УдалитьЭлементыРекурсивно(Элементы.Найти(СтрШаблон("ОтступРасчетНалогаПоСтавке%1", СчетчикГрупп)));
		
		СчетчикГрупп = СчетчикГрупп + 1;
		
		ГруппаРасчета = Элементы.Найти(СтрШаблон("ГруппаРасчетНалогаПоСтавке%1", СчетчикГрупп));
		
	КонецЦикла;
	
	// Удалим добавленные элементы отрисовки показателей.
	// Удаление начинаем с индекса 2, поскольку элементы первого показателя добавлены
	// не программно и используются в качестве эталона. 
	СчетчикПоказателей = 2;
	ГруппаПоказателей = Элементы.Найти(СтрШаблон("ГруппаПоказатель%1", СчетчикПоказателей));
	Пока ГруппаПоказателей <> Неопределено Цикл
		
		УдалитьЭлементыРекурсивно(ГруппаПоказателей);
		
		СчетчикПоказателей = СчетчикПоказателей + 1;
		
		ГруппаПоказателей = Элементы.Найти(СтрШаблон("ГруппаПоказатель%1", СчетчикПоказателей));
		
	КонецЦикла;
	
	// Отрисуем элементы по новому расчету.
	СчетчикПоказателей = 0;
	МаксимальноеКоличествоПоказателей = 0;
	Для СчетчикГрупп = 1 По ПоясненияРасчетаНалога.Строки.Количество() Цикл
		
		РасчетНалога = ПоясненияРасчетаНалога.Строки[СчетчикГрупп - 1];
		
		ИмяГруппы = СтрШаблон("ГруппаРасчетНалогаПоСтавке%1", СчетчикГрупп);
		
		ГруппаРасчета = Элементы.Найти(ИмяГруппы);
		Если ГруппаРасчета = Неопределено Тогда
			ГруппаРасчета = НоваяГруппаФормы(
				ИмяГруппы, // Имя добавляемой группы
				Элементы.ГруппаРасчетНалога, // Родитель
				Элементы.ГруппаРасчетНалогаПоСтавке1); // Эталон
			
			ГруппаРасчета.ЗаголовокСвернутогоОтображения = РасчетНалога.ПояснениеСвернуто;
		КонецЕсли;
		
		ГруппаРасчета.Заголовок = РасчетНалога.Пояснение;
		
		МаксимальноеКоличествоПоказателей = Макс(РасчетНалога.Строки.Количество(), МаксимальноеКоличествоПоказателей);
		
		Для Индекс = 0 По РасчетНалога.Строки.Количество() - 1 Цикл
			
			СчетчикПоказателей = СчетчикПоказателей + 1;
			
			Показатель = РасчетНалога.Строки[Индекс];
			
			ИмяГруппыПоказатель = СтрШаблон("ГруппаПоказатель%1", СчетчикПоказателей);
			ГруппаПоказатель = Элементы.Найти(ИмяГруппыПоказатель);
			Если ГруппаПоказатель = Неопределено Тогда
				ГруппаПоказатель = НоваяГруппаФормы(
					ИмяГруппыПоказатель, // Имя добавляемой группы
					ГруппаРасчета, // Родитель
					Элементы.ГруппаПоказатель1); // Эталон
			КонецЕсли;
			
			ИмяЭлементаПояснение = СтрШаблон("ГруппаПоказатель%1Заголовок", СчетчикПоказателей);
			ЭлементПояснение = Элементы.Найти(ИмяЭлементаПояснение);
			Если ЭлементПояснение = Неопределено Тогда
				ЭлементПояснение = НоваяДекорация(
					ИмяЭлементаПояснение, // Имя добавляемого элемента
					ГруппаПоказатель, // Родитель
					Элементы.ГруппаПоказатель1Заголовок); // Эталон
			КонецЕсли;
			
			ЭлементПояснение.Заголовок = Показатель.Пояснение;
			
			ИмяЭлементаЗначение = СтрШаблон("ГруппаПоказатель%1Значение", СчетчикПоказателей);
			ЭлементЗначение = Элементы.Найти(ИмяЭлементаЗначение);
			Если ЭлементЗначение = Неопределено Тогда
				ЭлементЗначение = НоваяДекорация(
					ИмяЭлементаЗначение, // Имя добавляемого элемента
					ГруппаПоказатель, // Родитель
					Элементы.ГруппаПоказатель1Значение); // Эталон
			КонецЕсли;
			
			ЭлементЗначение.Заголовок = Показатель.Значение;
			
		КонецЦикла;
		
		// Добавляем отступ.
		ИмяДекорацииОтступ = СтрШаблон("ОтступРасчетНалогаПоСтавке%1", СчетчикГрупп);
		
	КонецЦикла;
	
	// Если в группах пояснений выводится небольшое количество строк (до 5 - 3 показателя и 2 формулы),
	// то уменьшаем ширину основной группы, чтобы прижать числовые значения ближе к текстовым.
	// Исключение составляет случай, когда применяется освобождение от налога - в таком случае 
	// ширину основной группы не уменьшаем, чтобы корректно показать желтый баннер с предупреждением.
	Если МаксимальноеКоличествоПоказателей <= 5 И Не ПрименяетсяОсвобождениеОтНалога Тогда
		Элементы.ГруппаРасчетНалога.Ширина = 50;
	Иначе
		Элементы.ГруппаРасчетНалога.Ширина = 63;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(УдаляемыйЭлемент)
	
	Если УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(УдаляемыйЭлемент) = Тип("ГруппаФормы") И УдаляемыйЭлемент.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для Каждого ПодчиненныйЭлемент Из УдаляемыйЭлемент.ПодчиненныеЭлементы Цикл
			УдалитьЭлементыРекурсивно(ПодчиненныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.Удалить(УдаляемыйЭлемент);
	
КонецПроцедуры

&НаСервере
Функция НоваяДекорация(ИмяДекорации, Родитель, Эталон)
	
	Декорация = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Родитель);
	Декорация.Заголовок = Эталон.Заголовок;
	Декорация.Вид = Эталон.Вид;
	Декорация.АвтоМаксимальнаяШирина = Эталон.АвтоМаксимальнаяШирина;
	Декорация.РастягиватьПоГоризонтали = Эталон.РастягиватьПоГоризонтали;
	
	Возврат Декорация;
	
КонецФункции

&НаСервере
Функция НоваяГруппаФормы(ИмяГруппы, Родитель, Эталон)
	
	ГруппаФормы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	ГруппаФормы.Вид = Эталон.Вид;
	ГруппаФормы.Отображение = Эталон.Отображение;
	ГруппаФормы.Группировка = Эталон.Группировка;
	ГруппаФормы.ОтображатьЗаголовок = Эталон.ОтображатьЗаголовок;
	ГруппаФормы.ЦветТекстаЗаголовка = Эталон.ЦветТекстаЗаголовка;
	ГруппаФормы.ШрифтЗаголовка = Эталон.ШрифтЗаголовка;
	
	Возврат ГруппаФормы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДекларации

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияСдана(ЭтапПомощника)
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Декларация 3-НДФЛ за %1 год уже сдана.
		|Вы хотите создать уточненную декларацию?'"), Формат(Объект.Период, "ДФ=yyyy"));
	
	ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправлена(ЭтапПомощника)
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Декларация 3-НДФЛ за %1 год уже отправлена в ФНС.
		|Вы хотите создать уточненную декларацию?'"), Формат(Объект.Период, "ДФ=yyyy"));
	
	ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПоказатьВопросЕслиДекларацияОтправленаСданаЗавершение",
		ЭтотОбъект, Новый Структура("ЭтапПомощника", ЭтапПомощника));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Создать", НСтр("ru = 'Создать уточненную'"));
	Кнопки.Добавить("Отменить", НСтр("ru = 'Отменить'"));
	
	ДополнительныеПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ДополнительныеПараметры.Заголовок = Заголовок;
	ДополнительныеПараметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещенияОЗавершении,
		ТекстВопроса,
		Кнопки,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправленаСданаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.Значение = "Создать" Тогда
		
		УстановитьНомерКорректировкиНовойДекларации(ЭтотОбъект);
		
		Если ЭтоШагДоходыВычеты(ДополнительныеПараметры.ЭтапПомощника) Тогда
			ИзменитьЭтапНаСервере(ДополнительныеПараметры.ЭтапПомощника);
		ИначеЕсли ДополнительныеПараметры.ЭтапПомощника = "РасчетНалога" Тогда
			РассчитатьНалогНаКлиенте();
		ИначеЕсли ДополнительныеПараметры.ЭтапПомощника = "Декларация" Тогда
			ЗаполнитьДекларациюНаКлиенте(Ложь);
		ИначеЕсли ДополнительныеПараметры.ЭтапПомощника = "ЗаписатьИЗакрыть" Тогда
			ЗаполнитьДекларациюНаКлиенте(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомерКорректировкиНовойДекларации(Форма)
	
	Объект = Форма.Объект;
	
	Декларация3НДФЛ = Форма.Декларация3НДФЛ;
	Декларация3НДФЛСостояниеОтправки = Форма.Декларация3НДФЛСостояниеОтправки;
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
		Если СостояниеДекларации3НДФЛ.Сдано Или СостояниеДекларации3НДФЛ.Отправлено Тогда
			Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ) + 1;
			Форма.Декларация3НДФЛ = Неопределено;
			Форма.Декларация3НДФЛСостояниеОтправки = Неопределено;
		Иначе
			Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ);
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки = 0;
	КонецЕсли;
	
	Декларация4НДФЛ = Форма.Декларация4НДФЛ;
	Декларация4НДФЛСостояниеОтправки = Форма.Декларация4НДФЛСостояниеОтправки;
	
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		СостояниеДекларации4НДФЛ = СостояниеДекларации(Декларация4НДФЛСостояниеОтправки);
		Если СостояниеДекларации4НДФЛ.Сдано Или СостояниеДекларации4НДФЛ.Отправлено Тогда
			Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ) + 1;
			Форма.Декларация4НДФЛ = Неопределено;
			Форма.Декларация4НДФЛСостояниеОтправки = Неопределено;
		Иначе
			Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ);
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки4НДФЛ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерКорректировки(Знач Декларация)
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.НомерКорректировки(Декларация);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДекларациюНаКлиенте(ЗакрытьФормуПослеВыполнения = Ложь)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьДекларациюВФоне();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ОтчетностьГотовится = Ложь;
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		Если ЗакрытьФормуПослеВыполнения Тогда
			НастройкиОжидания.ВыводитьОкноОжидания = Истина;
		Иначе
			// Индикация длительной операции - на закладке "Декларация"
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			ИзменитьЭтапНаСервере("Декларация");
		КонецЕсли;
			
		ПараметрыОбработчика = Новый Структура("ЗакрытьФормуПослеВыполнения", ЗакрытьФормуПослеВыполнения);
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияЗаполнитьДекларацию", ЭтотОбъект, ПараметрыОбработчика);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДекларациюВФоне()
	
	ОтчетностьГотовится = Истина;
	
	СтруктураПараметров = Обработки.ПомощникЗаполнения3НДФЛ.НовыеПараметрыЗаполненияДекларации();
	СтруктураПараметров.Период = Объект.Период;
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.СчетОрганизации = СчетОрганизации;
	СтруктураПараметров.НомерКорректировки = Объект.НомерКорректировки;
	СтруктураПараметров.НомерКорректировки4НДФЛ = Объект.НомерКорректировки4НДФЛ;
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицаДанныхЗаполнения) Тогда
		СтруктураПараметров.ТаблицаДанныхЗаполнения = ПолучитьИзВременногоХранилища(АдресТаблицаДанныхЗаполнения);
	КонецЕсли;
	
	СтруктураПараметров.ДанныеПомощникаЗаполнения = ДанныеПомощникаЗаполнения();
	СтруктураПараметров.Декларация3НДФЛ = Декларация3НДФЛ;
	СтруктураПараметров.Декларация3НДФЛВыбраннаяФорма = Декларация3НДФЛВыбраннаяФорма;
	
	СтруктураПараметров.СформироватьДекларацию4НДФЛ = Объект.СформироватьДекларацию4НДФЛ;
	СтруктураПараметров.ПредполагаемаяСуммаДоходов = Объект.ПредполагаемаяСуммаДоходов;
	СтруктураПараметров.Декларация4НДФЛ = Декларация4НДФЛ;
	СтруктураПараметров.Декларация4НДФЛВыбраннаяФорма = Декларация4НДФЛВыбраннаяФорма;
	
	СтруктураПараметров.ЗаполнятьЗаявлениеНаВозвратНалога = ЗаполнятьЗаявлениеНаВозвратНалога;
	СтруктураПараметров.ВариантДействияСНалогомКВозврату = ВариантДействияСНалогомКВозврату;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение декларации 3-НДФЛ из помощника'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьДекларацию", СтруктураПараметров, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияЗаполнитьДекларацию(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДекларации(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
	КонецЕсли;
	ОтчетностьГотовится = Ложь;
	
	ПараметрОповещения = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		ПараметрОповещения.Вставить("Ссылка", Декларация3НДФЛ);
		Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		ПараметрОповещения.Вставить("Ссылка", Декларация4НДФЛ);
		Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если ДлительнаяОперация.Статус = "Выполнено" И ДополнительныеПараметры.ЗакрытьФормуПослеВыполнения Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДекларации(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Декларация3НДФЛ = Результат.Декларация3НДФЛ;
	
	Декларация4НДФЛ = Результат.Декларация4НДФЛ;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстБаннераОсвобождениеОтНалога(ОсвобождениеОтНалога)
	
	ТекстПодсказки = НСтр("ru = 'Индивидуальный предприниматель освобожден от уплаты НДФЛ за 2%1квартал 2020%1года, 
	|поскольку занят в сфере деятельности, наиболее пострадавшей от коронавирусной инфекции.
	|
	|Налог к уплате уменьшен на %2 рублей. В декларации эта сумма будет указана в показателях за 2%1квартал, чтобы уведомить налоговую инспекцию о сумме налога к освобождению.'");
	
	ТекстПодсказки = СтрШаблон(ТекстПодсказки, Символы.НПП, Формат(ОсвобождениеОтНалога, "ЧДЦ=2; ЧН=0;"));
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при заполнении декларации 3-НДФЛ:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	Если Не АктуализацияВозможна Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Объект.Организация,
		УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаПроверкаАктуальности");
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь,
		"АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецГода(Объект.Период);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	Иначе
		ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Объект.Организация, ДатаАктуальности);
		ТребуетсяАктуализация = Истина;
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
	АдресХранилищаАктуализации = "";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатАктуализации, "Выполнено", Ложь) Тогда
		ПараметрыОповещения.Вставить("ПерезаполнитьДоходыИВычеты", Истина);
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
	Иначе
		Если РезультатАктуализации <> Неопределено Тогда
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		КонецЕсли;
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
	ИзменитьДоступностьКнопокПриАктуализацииДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойГруппаАктуализация(Форма, Событие, ДатаАктуальностиДанных = '00010101')
	
	Элементы = Форма.Элементы;
	
	// Если автоматическая актуализация невозможна, то вся группа актуализации скрыта.
	// Для ИП на ОСН налог рассчитывается непосредственно по данным закрытия месяца.
	
	Если Форма.АктуализацияВозможна Тогда
		
		ОтображатьАктуализицию = Форма.ПлательщикНДФЛ
			И (Событие = "ТребуетсяАктуализация" Или Событие = "ЗапущенаАктуализация");
		
	Иначе
		
		ОтображатьАктуализицию = Ложь;
		
	КонецЕсли;
	
	Элементы.Актуализация.Видимость = ОтображатьАктуализицию;
	Элементы.Актуализировать.Видимость = Форма.ЕстьПравоАктуализации;
	
	Если Не ОтображатьАктуализицию Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИдетАктуализация.Видимость         = (Событие = "ЗапущенаАктуализация");
	Элементы.ИдетПроверкаАктуальности.Видимость = (Событие = "ЗапущенаПроверкаАктуальности");
	
	Если Событие = "ТребуетсяАктуализация" Тогда
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		Элементы.ДекорацияАктуальность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные учета неактуальны с %1.'"), Формат(ДатаАктуальностиДанных, "ДФ=dd.MM.yyyy"));
	Иначе
		Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопокПриАктуализацииДанных()
	
	ДоступностьКоманд = (ИдентификаторЗаданияАктуализации <> Неопределено);
	
	Элементы.ДоходыВычеты.Доступность = ДоступностьКоманд;
	Элементы.ДобавитьДоход.Доступность = ДоступностьКоманд;
	Элементы.ДобавитьВычет.Доступность = ДоступностьКоманд;
	Элементы.ДоходыВычетыКомандыСписка.Доступность = ДоступностьКоманд;
	Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления 

&НаСервере
Процедура ЗаполнитьУведомленияИОтобразитьНаФорме()
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(Правило, Объект.Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило, Объект.Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУплатыПоПравилуОтчета(Правило, Объект.Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(Правило, Объект.Организация, ПериодСобытия));
	
	ТаблицаУведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Объект.Организация,
		ПериодСобытия);
	
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьУведомленияИОтобразитьНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомления()

	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстВопроса = НСтр("ru='Не подготовлено уведомление об исчисленной сумме налога.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Не сформирована операция по единому налоговому счету.
		|Продолжить?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупредитьОбОтсутствииУведомленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПравилоУплатыНалога.Периодичность, ПериодСобытия);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУплатыНалога.Периодичность, ПериодСобытия);
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Объект.Организация);
	
	ПараметрыВыполнения = Обработки.ПомощникЗаполнения3НДФЛ.НовыйПараметрыФормированияДокументовОплаты();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Объект);
	ПараметрыВыполнения.НалогИсчисленныйВсего = Объект.НалогКУплате + Объект.АвансовыеПлатежиИП;
	ПараметрыВыполнения.АвансовыеПлатежи = Объект.АвансовыеПлатежиИП;
	
	ТаблицаНалога = Обработки.ПомощникЗаполнения3НДФЛ.НеоплаченныеНалоги(ПараметрыВыполнения,Обработки.ПомощникЗаполнения3НДФЛ.НовыйТаблицаПлатежейНДФЛ());
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалога Цикл
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(СтрокаТаблицы.ВидНалога);
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		НоваяСтрока.КодПоОКТМО                  = КодПоОКТМО;
		НоваяСтрока.Налог                       = Налог;
		НоваяСтрока.КодБК                       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог,, КонецПериода);
		НоваяСтрока.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, КонецПериода);
		НоваяСтрока.Сумма                       = СтрокаТаблицы.Сумма;
		НоваяСтрока.СрокУплаты                  = СрокУплатыНалога;
		НоваяСтрока.НачалоПериода               = НачалоПериода;
		НоваяСтрока.КонецПериода                = КонецПериода;
	КонецЦикла;
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
	ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, ЭтотОбъект);
	ПараметрыНабораПравил.Организация = Объект.Организация;
	ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыНабораПравил);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		ОписаниеТаблицыНалоги(),
		Правило,
		ПериодСобытия,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ТребуетсяУведомление = Объект.НалогКУплате > 0;
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект, ТребуетсяУведомление, , 2);
	
	УстановитьДоступностьКнопокУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, ПериодСобытия, ПравилоУплатыНалога, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКнопокУведомления()
	
	ДоступностьУведомлений = Объект.НалогКУплате > 0;
	Элементы.ВыполнитьДействиеСформироватьУведомление.Доступность = ДоступностьУведомлений;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Доступность = ДоступностьУведомлений;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);	
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	
	УправлениеЗакладкойОплата(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяВыгрузитьДокументыОплаты(Организация, ДокументыОплаты)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты);
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку(Организация, ДокументыОплаты)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку(Организация, ДокументыОплаты);
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты)
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(Организация, ДокументыОплаты);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку(Организация, ДокументыОплаты)
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(Организация, ДокументыОплаты);
	
КонецФункции

#КонецОбласти