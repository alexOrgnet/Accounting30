#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить("Организация");
	ПараметрыЗаполнения.Добавить("Период");
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		ПараметрыЗаполнения.Добавить("АвансовыеПлатежи" + ИмяПериода);
		ПараметрыЗаполнения.Добавить("УплаченныйТорговыйСбор" + ИмяПериода);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СтрСоединить(ПараметрыЗаполнения, ","));
	
	Если Параметры.Свойство("СтруктураДоходовВычетов") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураДоходовВычетов);
		Для НомерПериода = 1 По 4 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			ЭтотОбъект["СуммаДохода" + ИмяПериода] = ЭтотОбъект["СуммаДохода" + ИмяПериода]
				- ЭтотОбъект["АвансыПокупателей" + ИмяПериода]
				- ЭтотОбъект["ПрочиеДоходы" + ИмяПериода]
		КонецЦикла;
		РазложитьСуммыПоКварталам();
	Иначе
		СпособЗаполнения = "Вручную";
	КонецЕсли;
	
	КонецОтчетногоПериода = КонецГода(Период);
	
	Элементы.ДекорацияИПОсвобожденОтНалога.Видимость = НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация);	
	
	ПроцентПрофВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(Параметры.Декларация3НДФЛВыбраннаяФорма);
	
	УплачиваетсяТорговыйСбор = ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, КонецОтчетногоПериода);
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьПараметрыВыбораВидаДеятельности();
	
	РассчитатьИтогоРасходов(ЭтотОбъект);
	
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой();
	
	УстановитьКлючСохраненияПоложенияОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не Модифицированность Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если СпособЗаполнения = "Вручную" Или Не УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	СохранитьРезультатИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	// Исправление возможной опечатки в разделителе
	КодОКВЭД = СтрЗаменить(СокрЛП(КодОКВЭД), ",", ".");
	
	НаименованиеОКВЭД = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКВЭД2", КодОКВЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКВЭД2",
		"КодОКВЭД",
		"НаименованиеОКВЭД",
		ЭтотОбъект,
		ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ВидДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	
	СпособЗаполненияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ИтогоПодтвержденныхРасходовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода  = КонецГода(Период);
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидОтчета", "ПлатежиНДФЛ");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);

	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", КонецГода(Период));
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидДеятельности", ВидДеятельности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АвансыПокупателейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.АвансыПокупателей",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", НачалоГода(Период));
	ПараметрыФормы.Вставить("КонецПериода",  КонецГода(Период));
	ПараметрыФормы.Вставить("Организация",   Организация);
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(Период), КонецГода(Период), Истина);
	ПараметрыФормы.Вставить("Заголовок",     СтрШаблон(НСтр("ru = 'Торговый сбор, уплаченный в %1'"), ПредставлениеПериода));
	
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.РасшифровкаУплаченногоТорговогоСбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДохода1КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДохода2КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДохода3КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДохода4КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежи1КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежи2КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежи3КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежи4КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСбор1КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСбор2КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСбор3КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСбор4КварталПриИзменении(Элемент)
	РассчитатьИтогиДоходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходы1КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходы2КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходы3КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходы4КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Амортизация1КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Амортизация2КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Амортизация3КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Амортизация4КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Зарплата1КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Зарплата2КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Зарплата3КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Зарплата4КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходы1КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходы2КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходы3КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходы4КварталПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АвансыПокупателейЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		АвансыПокупателей1Квартал = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	Элементы.СпособЗаполнения.Доступность = Не ТолькоПросмотр;
	Элементы.ФормаКомандаОК.Доступность = Не ТолькоПросмотр;
	
	Элементы.ГруппаСуммыПоДаннымУчета.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаСуммыВручную.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		Элементы.ГруппаСуммыПоДаннымУчета.Видимость = Истина;
		Элементы.ГруппаСуммыВручную.Видимость = Ложь;
		Элементы.ВидДеятельности.Видимость = Истина;
	Иначе
		Элементы.ГруппаСуммыПоДаннымУчета.Видимость = Ложь;
		Элементы.ГруппаСуммыВручную.Видимость = Истина;
		Элементы.ВидДеятельности.Видимость = Ложь;
	КонецЕсли;

	Элементы.ДекорацияУплаченныйТорговыйСборВручную.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСбор1Квартал.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСбор2Квартал.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСбор3Квартал.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСбор4Квартал.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСбор.Видимость = УплачиваетсяТорговыйСбор;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючСохраненияПоложенияОкна()
	
	ШаблонКлюча = "[СпособЗаполнения][ТорговыйСбор]";
	СтруктураКлюча = Новый Структура("СпособЗаполнения, ТорговыйСбор");
	СтруктураКлюча.СпособЗаполнения = СпособЗаполнения;
	СтруктураКлюча.ТорговыйСбор = УплачиваетсяТорговыйСбор;
	
	КлючСохраненияПоложенияОкна = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКлюча, СтруктураКлюча);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, Период);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаДеятельности()
	
	ХарактерыДеятельностиОСН = УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиОСН();
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДеятельности", ХарактерыДеятельностиОСН));
	
	Элементы.ВидДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатИЗакрыть();
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатИЗакрыть()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	СтруктураОтвета.Вставить("Информация",        Строка(НаименованиеОКВЭД));
	
	СтруктураОтвета.Вставить("КодОКВЭД",          КодОКВЭД);
	СтруктураОтвета.Вставить("НаименованиеОКВЭД", НаименованиеОКВЭД);
	СтруктураОтвета.Вставить("ВидДеятельности",   ВидДеятельности);
	
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		СтруктураОтвета.Вставить("МатериальныеРасходы" + ИмяПериода,
			ЭтотОбъект["МатериальныеРасходы" + ИмяПериода]);
		СтруктураОтвета.Вставить("Амортизация" + ИмяПериода,
			ЭтотОбъект["Амортизация" + ИмяПериода]);
		СтруктураОтвета.Вставить("Зарплата" + ИмяПериода,
			ЭтотОбъект["Зарплата" + ИмяПериода]);
		// Считаем что вся оплата труда по трудовым договорам.
		СтруктураОтвета.Вставить("ВыплатыПоТрудовымДоговорам" + ИмяПериода,
			ЭтотОбъект["Зарплата" + ИмяПериода]);
		
		СуммаДоходаВсего = ЭтотОбъект["СуммаДохода" + ИмяПериода] 
			+ ЭтотОбъект["АвансыПокупателей" + ИмяПериода]
			+ ЭтотОбъект["ПрочиеДоходы" + ИмяПериода];
		СтруктураОтвета.Вставить("СуммаДохода" + ИмяПериода, СуммаДоходаВсего);
		СтруктураОтвета.Вставить("АвансыПокупателей" + ИмяПериода,
			ЭтотОбъект["АвансыПокупателей" + ИмяПериода]);
		СтруктураОтвета.Вставить("ПрочиеДоходы" + ИмяПериода,
			ЭтотОбъект["ПрочиеДоходы" + ИмяПериода]);
		СтруктураОтвета.Вставить("ПрочиеРасходы" + ИмяПериода,
			ЭтотОбъект["ПрочиеРасходы" + ИмяПериода]);
		СтруктураОтвета.Вставить("ИтогоПодтвержденныхРасходов" + ИмяПериода,
			ЭтотОбъект["ИтогоПодтвержденныхРасходов" + ИмяПериода]);
		СтруктураОтвета.Вставить("АвансовыеПлатежи" + ИмяПериода,
			ЭтотОбъект["АвансовыеПлатежи" + ИмяПериода]);
		СтруктураОтвета.Вставить("УплаченныйТорговыйСбор" + ИмяПериода,
			ЭтотОбъект["УплаченныйТорговыйСбор" + ИмяПериода]);
	КонецЦикла;
	
	Для НомерПериода = 1 По 3 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		
		СуммаДоходаНарастающимИтогом = ЭтотОбъект["СуммаДохода" + ИмяПериода] 
			+ СтруктураОтвета["АвансыПокупателей" + ИмяПериода]
			+ СтруктураОтвета["ПрочиеДоходы" + ИмяПериода];
		Показатели = Новый Структура("Доходы, ПрофВычет", 
			СуммаДоходаНарастающимИтогом, СтруктураОтвета["ИтогоПодтвержденныхРасходов" + ИмяПериода]);
		СтруктураОтвета.Вставить("Показатели" + ИмяПериода, Показатели);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("СуммаДохода",       СуммаДоходаВсего);
	СтруктураОтвета.Вставить("СуммаВычета",       ИтогоПодтвержденныхРасходов);
	СтруктураОтвета.Вставить("ИтогоРасходовНоНормативу", Окр(СуммаДоходаВсего * ПроцентПрофВычета / 100, 2));
	СтруктураОтвета.Вставить("СпособЗаполнения",         СпособЗаполнения);
	
	Модифицированность = Ложь;
	Закрыть(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Процедура СпособЗаполненияПриИзмененииНаСервере()
	
	Если Не УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		ВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период);
		ЗаполнитьОКВЭД();
	КонецЕсли;
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		ОбновитьПоказателиНаСервере();
	Иначе
		Для НомерПериода = 1 По 4 Цикл
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
			ЭтотОбъект["СуммаДохода" + ИмяПериода] = 
				ЭтотОбъект["СуммаДохода" + ИмяПериода]
				+ ЭтотОбъект["АвансыПокупателей" + ИмяПериода]
				+ ЭтотОбъект["ПрочиеДоходы" + ИмяПериода];
			ЭтотОбъект["АвансыПокупателей" + ИмяПериода] = 0;
			ЭтотОбъект["ПрочиеДоходы" + ИмяПериода] = 0;
		КонецЦикла;
		РазложитьСуммыПоКварталам();
	КонецЕсли;
	
	УправлениеФормой();
	
	УстановитьКлючСохраненияПоложенияОкна();
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	ЗаполнитьОКВЭД();
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		ОбновитьПоказателиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОКВЭД()
	
	КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "КодОКВЭД");
	
	Если Не ЗначениеЗаполнено(КодОКВЭД) И ВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период) Тогда
		КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД2");
	КонецЕсли;
	
	НаименованиеОКВЭД = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКВЭД2", КодОКВЭД);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогоРасходов(Форма)
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("МатериальныеРасходы");
	МассивПоказателей.Добавить("Амортизация");
	МассивПоказателей.Добавить("Зарплата");
	МассивПоказателей.Добавить("ПрочиеРасходы");
	РассчитатьСуммыНарастающимИтогом(Форма, МассивПоказателей);
	
	// Рассчитаем итоги
	Для НомерПериода = 1 По 4 Цикл
		СуммаРасходов = Форма[СтрШаблон("МатериальныеРасходы%1Квартал", НомерПериода)]
			+ Форма[СтрШаблон("Амортизация%1Квартал", НомерПериода)]
			+ Форма[СтрШаблон("Зарплата%1Квартал", НомерПериода)]
			+ Форма[СтрШаблон("ПрочиеРасходы%1Квартал", НомерПериода)];
		Форма[СтрШаблон("ИтогоПодтвержденныхРасходов%1Квартал", НомерПериода)] = СуммаРасходов;
	КонецЦикла;
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("ИтогоПодтвержденныхРасходов");
	РассчитатьСуммыНарастающимИтогом(Форма, МассивПоказателей);

КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСуммы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимРасшифровки", Истина);
	СтруктураПараметров.Вставить("Организация",      Организация);
	СтруктураПараметров.Вставить("НачалоПериода",    НачалоГода(Период));
	СтруктураПараметров.Вставить("КонецПериода",     КонецГода(Период));
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходовПредпринимателя.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиНаСервере()
	
	Показатели = Новый Структура;
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		
		Показатели.Вставить("СуммаДохода" + ИмяПериода,         0);
		Показатели.Вставить("МатериальныеРасходы" + ИмяПериода, 0);
		Показатели.Вставить("Амортизация" + ИмяПериода,         0);
		Показатели.Вставить("Зарплата" + ИмяПериода,            0);
		Показатели.Вставить("ПрочиеРасходы" + ИмяПериода,       0);
		Показатели.Вставить("ПрочиеДоходы" + ИмяПериода,        0);
		Показатели.Вставить("АвансыПокупателей" + ИмяПериода,   0);
	КонецЦикла;
	КонецОтчетногоПериода = КонецГода(Период);
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		
		НачалоПериода = НачалоГода(Период);
		Для НомерПериода = 1 По 4 Цикл
			КонецПериода = ДобавитьМесяц(НачалоПериода, 3 * НомерПериода) - 1;
			ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);		
			ДоходыРасходыИП = Обработки.ПомощникЗаполнения3НДФЛ.ТаблицаДоходовОтПредпринимательскойДеятельности(
				Организация,
				НачалоПериода,
				КонецПериода);
		
			ДоходыПоВидуДеятельности = ДоходыРасходыИП.НайтиСтроки(Новый Структура("ВидДеятельности", ВидДеятельности));
		
			Для Каждого СтрокаДоходов Из ДоходыПоВидуДеятельности Цикл
				
				Показатели["СуммаДохода" + ИмяПериода] = Показатели["СуммаДохода" + ИмяПериода] + СтрокаДоходов.ИтогоДоходов;
				Показатели["МатериальныеРасходы" + ИмяПериода] = Показатели["МатериальныеРасходы" + ИмяПериода] + СтрокаДоходов.МатериальныеРасходы;
				Показатели["Амортизация" + ИмяПериода] = Показатели["Амортизация" + ИмяПериода] + СтрокаДоходов.Амортизация;
				Показатели["Зарплата" + ИмяПериода] = Показатели["Зарплата" + ИмяПериода] + СтрокаДоходов.РасходыНаОплатуТруда;
				Показатели["ПрочиеРасходы" + ИмяПериода] = Показатели["ПрочиеРасходы" + ИмяПериода] + СтрокаДоходов.ПрочиеРасходы;
				Показатели["ПрочиеДоходы" + ИмяПериода] = Показатели["ПрочиеДоходы" + ИмяПериода] + СтрокаДоходов.ПрочиеДоходы;
				Показатели["АвансыПокупателей" + ИмяПериода] = Показатели["АвансыПокупателей" + ИмяПериода] + СтрокаДоходов.АвансыПокупателей;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		Показатели["СуммаДохода" + ИмяПериода] = 
			Показатели["СуммаДохода" + ИмяПериода] 
			- Показатели["ПрочиеДоходы" + ИмяПериода] 
			- Показатели["АвансыПокупателей" + ИмяПериода];
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	НачалоПериода = НачалоГода(Период);
	Для НомерПериода = 1 По 4 Цикл
		ИмяПериода = ПомощникЗаполнения3НДФЛКлиентСервер.ИмяПериодаНарастающимИтогом(НомерПериода);
		КонецПериода = ДобавитьМесяц(НачалоПериода, 3 * НомерПериода) - 1;
		ЭтотОбъект["АвансовыеПлатежи" + ИмяПериода] = Обработки.ПомощникЗаполнения3НДФЛ.АвансовыеПлатежиПоНДФЛЗаПериод(
			Организация, НачалоПериода, КонецПериода);
		Если ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, КонецОтчетногоПериода) Тогда
			ЭтотОбъект["УплаченныйТорговыйСбор" + ИмяПериода] = Обработки.ПомощникЗаполнения3НДФЛ.ТорговыйСборУплаченныйЗаПериод(
				Организация, НачалоПериода, КонецПериода);
		КонецЕсли;
	КонецЦикла;
	
	РазложитьСуммыПоКварталам();
	РассчитатьИтогоРасходов(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыНарастающимИтогом(Форма, Показатели)
	
	Для Каждого ИмяПоказателя Из Показатели Цикл
		Форма[ИмяПоказателя + "Полугодие"] = Форма[ИмяПоказателя + "1Квартал"] + Форма[ИмяПоказателя + "2Квартал"];
		Форма[ИмяПоказателя + "9Месяцев"] = Форма[ИмяПоказателя + "Полугодие"] + Форма[ИмяПоказателя + "3Квартал"];
		Форма[ИмяПоказателя] = Форма[ИмяПоказателя + "9Месяцев"] + Форма[ИмяПоказателя + "4Квартал"];
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиДоходов(Форма)
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаДохода");
	МассивПоказателей.Добавить("АвансовыеПлатежи");
	МассивПоказателей.Добавить("УплаченныйТорговыйСбор");
	РассчитатьСуммыНарастающимИтогом(Форма, МассивПоказателей);
	
КонецПроцедуры


&НаСервере
Процедура РазложитьСуммыПоКварталам()
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаДохода");
	МассивПоказателей.Добавить("АвансовыеПлатежи");
	МассивПоказателей.Добавить("УплаченныйТорговыйСбор");
	МассивПоказателей.Добавить("МатериальныеРасходы");
	МассивПоказателей.Добавить("Амортизация");
	МассивПоказателей.Добавить("Зарплата");
	МассивПоказателей.Добавить("ПрочиеРасходы");
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		ЭтотОбъект[ИмяПоказателя + "2Квартал"] = ЭтотОбъект[ИмяПоказателя + "Полугодие"] - ЭтотОбъект[ИмяПоказателя + "1Квартал"];
		ЭтотОбъект[ИмяПоказателя + "3Квартал"] = ЭтотОбъект[ИмяПоказателя + "9Месяцев"] - ЭтотОбъект[ИмяПоказателя + "Полугодие"];
		ЭтотОбъект[ИмяПоказателя + "4Квартал"] = ЭтотОбъект[ИмяПоказателя] - ЭтотОбъект[ИмяПоказателя + "9Месяцев"];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти