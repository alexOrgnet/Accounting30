#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеУчетаАктуальны = Истина;
	ТребуетсяПроверятьАктуальность = Истина;
	ВозможнаБыстраяАктуализация = Истина;
	ЕстьПравоАктуализироватьДанные = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	
	ПрочитатьПараметрыФормы();
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Срок) Тогда
		Срок = КонецГода(Период);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление) Тогда
		ЗагрузитьДанныеУведомления();
	Иначе
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		УпрощенныйЗачетФиксированныхВзносов =
			УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, Срок);
		
		РассчитатьДанныеПомощника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьПорядок" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресДанных", АдресДанных);
		
		ОповещениеИзмененПорядокПатентов = Новый ОписаниеОповещения("ОбработатьИзменениеПорядкаПатентов", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма.ПорядокПатентов",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОповещениеИзмененПорядокПатентов);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьУведомление" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Уведомление);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьУведомление" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить %1?'"), ПредставлениеУведомления);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьУведомлениеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УведомлениеОСпецрежимахНалогообложения" Тогда
		
		Если Источник = Уведомление Тогда
			ЗагрузитьДанныеУведомления();
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВладелецФормы")
			И Параметр.ВладелецФормы = ЭтотОбъект Тогда
			ВидУведомления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ВидУведомления", Неопределено);
			Если Не ЗначениеЗаполнено(Уведомление) И ВидУведомления = ПредопределенноеЗначение(
				"Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы") Тогда
				ОбработатьСозданиеУведомления(Источник);
				УправлениеФормой();
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("Организация", Организация);
				Оповестить("Запись_УменьшениеНалогаПСНнаСтраховыеВзносы", ПараметрыОповещения, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_УменьшениеПСННаФиксированныеВзносы" Тогда
		РассчитатьДанныеПомощника();
	ИначеЕсли (ИмяСобытия = "ЛичныйКабинетЕНС_ОбновлениеДанных"
		Или ИмяСобытия = "Запись_СведенияОбУплатеНалогов")
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Организация")
		И Параметр.Организация = Организация Тогда
		РассчитатьДанныеПомощника();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодсказкаИнтеграцияСЛичнымКабинетомЕНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЕдиныйНалоговыйСчетИнтеграцияКлиентБП.ПодсказкаИнтеграцияСЛичнымКабинетомЕНСОбработкаНавигационнойСсылки(
		Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшеноРанееНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьРасчетРасходовУменьшающихНалог();
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныеСтраховыеВзносыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьРасчетРасходовУменьшающихНалог();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементСуммаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексПатента = Число(СтрЗаменить(Элемент.Имя, "Патент", ""));
	ДанныеПатента = ДанныеПатентаНаСервере(ИндексПатента, АдресДанных);
	
	ОбработчикОповещенияЗакрытияФормы = Новый ОписаниеОповещения("ОбработатьЗакрытиеРасшифровкиСуммыПатента", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеПатента", ДанныеПатента);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму(
		"Обработка.ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма.РасшифровкаУменьшенияНалогаПоПатенту",
		ПараметрыФормы,
		ЭтотОбъект
		,
		,
		,
		,
		ОбработчикОповещенияЗакрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	НайденнаяРегистрация = Элемент.СписокВыбора.НайтиПоЗначению(РегистрацияВНалоговомОргане);
	Если НайденнаяРегистрация <> Неопределено Тогда
		РегистрацияВНалоговомОрганеПредставление = НайденнаяРегистрация.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , РегистрацияВНалоговомОргане);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПодлежащиеУплатеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ОтчетныйПериод", Период);

	ПараметрыФормы.Вставить("МаксимальнаяСуммаВзноса", МаксимальнаяСуммаВзноса);
	ПараметрыФормы.Вставить("УменьшеноРанее", УменьшеноРанее);
	ПараметрыФормы.Вставить("ВыбраннаяСуммаВзноса", ВзносыПодлежащиеУплате);
	ПараметрыФормы.Вставить("ВзносПоЕдиномуТарифу", ВзносПоЕдиномуТарифу);
	ПараметрыФормы.Вставить("ВзносСДоходов", ВзносСДоходов);
	ПараметрыФормы.Вставить("ДоляДоходовПоПатенту", ДоляДоходовПоПатенту);
	ПараметрыФормы.Вставить("СуммаВзносаСкорректирована", СуммаВзносаСкорректирована);
	ПараметрыФормы.Вставить("ВзносыИспользованныеДляУСН", ВзносыИспользованныеДляУСН);
	
	ОткрытьФорму("Обработка.ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма.РасшифровкаФиксированныхВзносов",
		ПараметрыФормы,
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГодВперед(Команда)
	
	Период = КонецГода(Период) + 1;
	Срок = КонецГода(Период);
	РегистрацияВНалоговомОргане = Неопределено;
	РассчитатьДанныеПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ГодНазад(Команда)
	
	Период = НачалоГода(Период) - 1;
	Срок = КонецГода(Период);
	РегистрацияВНалоговомОргане = Неопределено;
	РассчитатьДанныеПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомление(Команда)
	
	ПараметрыУведомления = ПараметрыФормыНовогоУведомления();
	
	ОткрытьФорму("Документ.УведомлениеОбУменьшенииНалогаПоПатенту.ФормаОбъекта",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьПараметрыФормы()
	
	Параметры.Свойство("Период", Период);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Параметры.Свойство("Ключ", Уведомление);
	Параметры.Свойство("Срок", Срок);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУведомления()
	
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Уведомление, "Организация, РегистрацияВИФНС, ДанныеУведомления");
	
	Организация = РеквизитыУведомления.Организация;
	РегистрацияВНалоговомОргане = РеквизитыУведомления.РегистрацияВИФНС;
	РегистрацияВНалоговомОрганеПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РегистрацияВНалоговомОргане, "Наименование");
	
	СохраненныеЗначения = РеквизитыУведомления.ДанныеУведомления.Получить();
	ДанныеПомощника = СохраненныеЗначения.ДанныеУведомления.ДанныеПомощника;
	Период = Дата(ДанныеПомощника.Титульная.ГодДействПат, 1, 1);
	ПериодГод = Формат(Год(Период), "ЧГ=");
	Патенты = ДанныеПомощника.Патенты.Получить();
	АдресДанных = ПоместитьВоВременноеХранилище(Патенты, УникальныйИдентификатор);
	УпрощенныйЗачетФиксированныхВзносов = 
		УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, КонецГода(Период));
	
	ВывестиУменьшаемыеПатентыНаФорму(Патенты);
	СуммаУменьшенияПоВсемПатентам = Патенты.Итог("Уменьшить");
	УменьшеноРанее = Патенты.Итог("УменьшеноРанее");
	ВсегоРасходов = СуммаУменьшенияПоВсемПатентам;

	СформироватьПредставлениеУведомления(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговыхОрганах(ПатентыЗаГод)
	
	ДанныеОНалоговыхОрганах = ОбщегоНазначения.ВыгрузитьКолонку(ПатентыЗаГод, "РегистрацияВНалоговомОргане", Истина);
	НаименованияНалоговыхОрганов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДанныеОНалоговыхОрганах, "Наименование");
	
	Элементы.РегистрацияВНалоговомОргане.СписокВыбора.Очистить();
	Для Каждого Элемент Из НаименованияНалоговыхОрганов Цикл
		Элементы.РегистрацияВНалоговомОргане.СписокВыбора.Добавить(
			Элемент.Ключ,
			Элемент.Значение);
	КонецЦикла;
	
	Если НаименованияНалоговыхОрганов.Количество() = 0 Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		РегистрацияВНалоговомОрганеПредставление = "";
	ИначеЕсли Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Элементы.РегистрацияВНалоговомОргане.СписокВыбора[0].Значение;
		РегистрацияВНалоговомОрганеПредставление = Элементы.РегистрацияВНалоговомОргане.СписокВыбора[0].Представление;
	Иначе
		НайденнаяРегистрация = Элементы.РегистрацияВНалоговомОргане.СписокВыбора.НайтиПоЗначению(
			РегистрацияВНалоговомОргане);
		Если НайденнаяРегистрация <> Неопределено Тогда
			РегистрацияВНалоговомОрганеПредставление = НайденнаяРегистрация.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДанныеПомощника()
	
	ПериодГод = Формат(Год(Период), "ЧГ=");
	Период = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.ДатаПроверкиРасходовПоПатентам(Период);
	
	ПатентыЗаГод = УчетПСН.ПатентыОрганизацииЗаПериод(Организация, НачалоГода(Период), КонецГода(Период));
	ПатентыЗаГод.Колонки.Добавить("УменьшеноРанее", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ПатентыЗаГод.Колонки.Добавить("ДатаБлижайшегоПлатежа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПатентыЗаГод.Колонки.Добавить("ВозможноУменьшить", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ПатентыЗаГод.Колонки.Добавить("Уменьшить", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ПатентыЗаГод.Колонки.Добавить("Уведомления");
	// Используется в том случае, когда пользователь меняет порядок следования патентов вручную
	ПатентыЗаГод.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	ЗаполнитьСведенияОНалоговыхОрганах(ПатентыЗаГод);
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		Если КонецКвартала(Срок) = КонецГода(Срок) Тогда
			Периодичность = Перечисления.Периодичность.Год;
		Иначе
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		ДоляДоходовПоПатенту = 100 * УчетПСН.ДоляДоходовПатентнойСистемыНалогообложения(
			Организация,
			Срок,
			Периодичность);
		ВзносПоЕдиномуТарифу = УчетСтраховыхВзносовИП.ВзносыПоЕдиномуТарифуПодлежащиеУплате(Организация, Срок);
		ВзносСДоходов = УчетСтраховыхВзносовИП.ВзносыСДоходовПодлежащиеУплате(Организация, Срок).Всего;
		ФиксированныеВзносы = ВзносПоЕдиномуТарифу + ВзносСДоходов;
		
		РасходыНаСтраховыеВзносы = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыПСНЗаПериод(
			Организация, НачалоГода(Период), Период);
		
		ЗачтеноПоЗаявлениям = Цел(УчетСтраховыхВзносовИП.ЗарезервированныеСуммыВзносовЗаНалоговыйПериод(
			Организация, НачалоГода(Период), Период, Истина));
		
		УплаченныеСтраховыеВзносы = Макс(0, РасходыНаСтраховыеВзносы - ЗачтеноПоЗаявлениям);
		
		УчтенныеВзносыПодлежащиеУплате = УчетСтраховыхВзносовИП.СкорректированнаяСуммаВзносовПодлежащихУплате(
			Организация,
			Период,
			Истина);
		
		Если УчтенныеВзносыПодлежащиеУплате <> Неопределено Тогда
			ВзносыПодлежащиеУплате = УчтенныеВзносыПодлежащиеУплате;
			СуммаВзносаСкорректирована = Истина;
		Иначе
			ВзносыПодлежащиеУплате = Цел(ДоляДоходовПоПатенту / 100 * ФиксированныеВзносы);
			СуммаВзносаСкорректирована = Ложь;
		КонецЕсли;
		
		// Доля по ПСН может изменяться. Нужно контролировать, чтобы не израсходовать больше, чем есть взносов
		ИспользованныеВзносы = УчетСтраховыхВзносовИП.ВзносыПодлежащиеУплатеИспользованныеДляУменьшенияНалога(Организация, Срок);
		ВзносыИспользованныеДляУСН = ИспользованныеВзносы.УСН_Доход;
		НеиспользованныйОстаток =
			Макс(ФиксированныеВзносы - ИспользованныеВзносы.Итого, 0);
		ВзносыПодлежащиеУплате = Мин(ИспользованныеВзносы.ПСН + НеиспользованныйОстаток, ВзносыПодлежащиеУплате);
		
		МаксимальнаяСуммаВзноса = Мин(Цел(ДоляДоходовПоПатенту / 100 * ФиксированныеВзносы),
			ИспользованныеВзносы.ПСН + НеиспользованныйОстаток);

		ОбщаяСуммаРасходов = 
			Цел(ВзносыПодлежащиеУплате + УплаченныеСтраховыеВзносы);
	Иначе
		ВзносПоЕдиномуТарифу = 0;
		ВзносСДоходов = 0;
		
		ОбщаяСуммаРасходов = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыПСНЗаПериод(
			Организация, НачалоГода(Период), Период);
	КонецЕсли;
	
	СведенияОбУменьшенииНалога = РегистрыСведений.УменьшениеНалогаПоПатенту.СведенияУменьшениеНалогаЗаГод(
		Организация, Период);
	Для Каждого ДанныеУменьшения Из СведенияОбУменьшенииНалога Цикл
		Строка = ПатентыЗаГод.Найти(ДанныеУменьшения.Ключ, "ДокументПатент");
		Если Строка <> Неопределено Тогда
			Строка.УменьшеноРанее = ДанныеУменьшения.Значение.Сумма;
			Строка.Уведомления = ДанныеУменьшения.Значение.Уведомления;
		КонецЕсли;
	КонецЦикла;
	
	УменьшеноРанее = ПатентыЗаГод.Итог("УменьшеноРанее");
	ВсегоРасходов = ОбщаяСуммаРасходов - УменьшеноРанее;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	// Отсортируем патенты по дате ближайшего платежа, если дата платежа по патенту просрочена,
	// то платеж по таким патентам уменьшается в последнюю очередь - приоритет на уменьшение платежа заранее,
	// а не на возврат переплаты
	Для Каждого Строка Из ПатентыЗаГод Цикл
		Если Строка.ДатаПервогоПлатежа < ТекущаяДата Тогда
			Если Строка.ДатаВторогоПлатежа < ТекущаяДата Тогда
				Строка.ДатаБлижайшегоПлатежа = КонецГода(Период);
			Иначе
				Строка.ДатаБлижайшегоПлатежа = Строка.ДатаВторогоПлатежа;
			КонецЕсли;
		Иначе
			Строка.ДатаБлижайшегоПлатежа = Строка.ДатаПервогоПлатежа;
		КонецЕсли;
	КонецЦикла;
	ПатентыЗаГод.Сортировать("ДатаБлижайшегоПлатежа, СуммаКОплате Убыв");
	
	РаспределитьУменьшениеНалогаПоПатентам(ПатентыЗаГод);
	
	ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	УведомлениеСоздано = ЗначениеЗаполнено(Уведомление);
	
	НесколькоНалоговыхОрганов = Элементы.РегистрацияВНалоговомОргане.СписокВыбора.Количество() > 1;
	
	ЕстьПатентыДляУменьшения = Элементы.ГруппаСписокПатентов.ПодчиненныеЭлементы.Количество() > 0;
	
	Элементы.ПолеРучнаяКорректировка.Видимость = СуммаВзносаСкорректирована И УпрощенныйЗачетФиксированныхВзносов;
	Элементы.ГруппаВзносыПодлежащиеУплате.Видимость = УпрощенныйЗачетФиксированныхВзносов И Не УведомлениеСоздано;
	Элементы.УменьшеноРанее.Гиперссылка = Не (УменьшеноРанее = 0) И Не УведомлениеСоздано;

	Элементы.РегистрацияВНалоговомОргане.Видимость = НесколькоНалоговыхОрганов И Не УведомлениеСоздано;
	Элементы.РегистрацияВНалоговомОрганеПредставление.Видимость = Не НесколькоНалоговыхОрганов Или УведомлениеСоздано;
	
	Элементы.НадписьПодсказкаПорядокПатентов.Видимость =
		Элементы.ГруппаСписокПатентов.ПодчиненныеЭлементы.Количество() > 2 И Не УведомлениеСоздано;
	
	Элементы.НадписьПодсказкаУменьшениеНалога.Видимость = Не УведомлениеСоздано И УпрощенныйЗачетФиксированныхВзносов;
	
	Элементы.СформироватьУведомление.Видимость = ЕстьПатентыДляУменьшения И Не УведомлениеСоздано;
	Элементы.ПредставлениеУведомления.Видимость = УведомлениеСоздано;
	
	Элементы.ГруппаЭлементыПериода.Видимость = Не УведомлениеСоздано;
	Элементы.ПериодНеРедактируется.Видимость = УведомлениеСоздано;
	
	Если ВзносСДоходов + ВзносПоЕдиномуТарифу > 0 Тогда
		Элементы.НадписьПодсказкаУменьшениеНалога.Заголовок =
			НСтр("ru = 'Налог по патенту можно уменьшить на сумму страховых взносов,
			|для этого подайте уведомление в налоговую инспекцию'");
		
		ОтображатьУплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы > 0;
		
		Элементы.УплаченныеСтраховыеВзносы.Видимость = ОтображатьУплаченныеСтраховыеВзносы;
		
		Если ОтображатьУплаченныеСтраховыеВзносы Тогда
			Элементы.ВсегоРасходов.Заголовок =
				НСтр("ru = 'Доступно = Уплаченные страховые взносы + Взносы,
					|подлежащие уплате - Уменьшено ранее'");
		Иначе
			Элементы.ВсегоРасходов.Заголовок =
				НСтр("ru = 'Доступно = Взносы, подлежащие уплате - Уменьшено ранее'");
		КонецЕсли;
	Иначе
		Элементы.НадписьПодсказкаУменьшениеНалога.Заголовок =
			НСтр("ru = 'Налог по патенту можно уменьшить на сумму оплаченных страховых взносов,
			|для этого подайте уведомление в налоговую инспекцию'");
		Элементы.УплаченныеСтраховыеВзносы.Видимость = Ложь;
		Элементы.ВсегоРасходов.Заголовок = НСтр("ru = 'Всего расходов'");
	КонецЕсли;
	
	ОформитьАктуализацию();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУменьшениеНалогаПоПатентам(ПатентыЗаГод)
	
	ПатентыЗаГод.ЗаполнитьЗначения(0, "Уменьшить");
	
	ЯвляетсяРаботодателем = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(
		Организация, НачалоГода(Период), КонецГода(Период));
		
	// Если все расходы отнесены на основную систему, значит работников на ПСН нет
	// Минфин России письмо от 25.02.2021 № 03-11-11/13087
	Если ЯвляетсяРаботодателем Тогда
		ЕстьВзносыЗаРаботников = УчетПСН.РаботникиЗадействованыВДеятельностиНаПСН(
			Организация, НачалоГода(Период), КонецГода(Период));
	Иначе
		ЕстьВзносыЗаРаботников = Ложь;
	КонецЕсли;
	
	ОсталосьДляУменьшения = ВсегоРасходов;
	Для Каждого Строка Из ПатентыЗаГод Цикл
		Если ЯвляетсяРаботодателем И ЕстьВзносыЗаРаботников Тогда
			ЛимитУменьшенияНалога = Цел(Строка.СуммаКОплате / 2);
		Иначе
			ЛимитУменьшенияНалога = Строка.СуммаКОплате;
		КонецЕсли;
		ВозможноУменьшить = ЛимитУменьшенияНалога - Строка.УменьшеноРанее;
		Если ВозможноУменьшить > 0 Тогда
			Строка.ВозможноУменьшить = ВозможноУменьшить;
			СуммаУменьшения = Мин(ВозможноУменьшить, ОсталосьДляУменьшения);
			Строка.Уменьшить = СуммаУменьшения;
			ОсталосьДляУменьшения = ОсталосьДляУменьшения - СуммаУменьшения;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиУменьшаемыеПатентыНаФорму(ПатентыЗаГод);
	СуммаУменьшенияПоВсемПатентам = ПатентыЗаГод.Итог("Уменьшить");
	
	АдресДанных = ПоместитьВоВременноеХранилище(ПатентыЗаГод, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУменьшаемыеПатентыНаФорму(ПатентыЗаГод)
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	
	Если Элементы.ГруппаСписокПатентов.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для Каждого ЭлементПатент Из Элементы.ГруппаСписокПатентов.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементПатент) = Тип("ПолеФормы") Тогда
				УдаляемыеРеквизиты.Добавить(ЭлементПатент.ПутьКДанным);
			КонецЕсли;
			УдаляемыеЭлементы.Добавить(ЭлементПатент);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	СоздаваемыеРеквизиты = Новый Массив;
	
	Для ИндексПатент = 0 По ПатентыЗаГод.Количество() - 1 Цикл
		
		Строка = ПатентыЗаГод[ИндексПатент];
		
		Если Строка.ВозможноУменьшить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитПатент = Новый РеквизитФормы(СтрШаблон("Патент%1", Формат(ИндексПатент, "ЧН=0; ЧГ=")),
			ОбщегоНазначения.ОписаниеТипаЧисло(10), , СтрШаблон(НСтр("ru = '    %1'"), Строка.ДокументПатент));
		
		СоздаваемыеРеквизиты.Добавить(РеквизитПатент);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СоздаваемыеРеквизиты) Или ЗначениеЗаполнено(УдаляемыеРеквизиты) Тогда
		ИзменитьРеквизиты(СоздаваемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
	ДеятельностиПоПатентам = ПатентыЗаГод.Скопировать();
	ДеятельностиПоПатентам.Свернуть("Ссылка, Наименование", "ВозможноУменьшить, Уменьшить");
	
	Для Индекс = 0 По ДеятельностиПоПатентам.Количество() - 1 Цикл
		
		СтрокаДеятельности = ДеятельностиПоПатентам[Индекс];
		
		Если СтрокаДеятельности.ВозможноУменьшить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = СтрШаблон("ДеятельностьПатент%1", Формат(Индекс, "ЧН=0; ЧГ="));
		
		ЭлементДеятельностьПатент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаСписокПатентов);
		ЭлементДеятельностьПатент.Заголовок = СтрокаДеятельности.Наименование;
		ЭлементДеятельностьПатент.РастягиватьПоГоризонтали = Истина;
		
		Для ИндексПатент = 0 По ПатентыЗаГод.Количество() - 1 Цикл
			
			Строка = ПатентыЗаГод[ИндексПатент];
			
			Если Строка.Ссылка <> СтрокаДеятельности.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.ВозможноУменьшить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = СтрШаблон("Патент%1", Формат(ИндексПатент, "ЧН=0; ЧГ="));
			
			ЭтотОбъект[ИмяРеквизита] = Строка.Уменьшить;
			
			ЭлементПатент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаСписокПатентов);
			ЭлементПатент.ПутьКДанным = ИмяРеквизита;
			ЭлементПатент.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементПатент.Гиперссылка = Истина;
			ЭлементПатент.УстановитьДействие("Нажатие", "ЭлементСуммаНажатие");
			ЭлементПатент.Формат = "ЧН=0";
			ЭлементПатент.РастягиватьПоГоризонтали = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ДанныеПомощникаДляУведомленияОбУменьшенииНалогаНаСтраховыеВзносы()
	
	ДанныеПомощника = НовыеДанныеПомощника();
	ДанныеПомощника.Организация = Организация;
	ДанныеПомощника.РегистрацияВИФНС = РегистрацияВНалоговомОргане;
	ДанныеПомощника.ПутьКФорме = УчетПСН.ПутьКФормеУведомленияУменьшенияНалогаПСН();
	ДанныеПомощника.Период = Период;
	ДанныеПомощника.ДанныеЗаполнения = УчетПСН.ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы(
		ДанныеПомощника, АдресДанных, ОбщаяСуммаРасходов, УникальныйИдентификатор);
	
	Возврат ДанныеПомощника;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеДанныеПомощника()
	
	ДанныеПомощника = Новый Структура;
	
	ДанныеПомощника.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеПомощника.Вставить("РегистрацияВИФНС", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ДанныеПомощника.Вставить("ПутьКФорме", "");
	ДанныеПомощника.Вставить("Период", Дата(1, 1, 1));
	ДанныеПомощника.Вставить("Патенты", Новый ХранилищеЗначения(Неопределено));
	ДанныеПомощника.Вставить("ДанныеЗаполнения", Новый Структура);
	
	Возврат ДанныеПомощника;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеПорядкаПатентов(ПолученноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ПолученноеЗначение = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученноеЗначение) Тогда
		ИзменитьПорядокПатентовНаСервере(ПолученноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПатентовНаСервере(ПолученноеЗначение)
	
	УменьшаемыеПатенты = ПолучитьИзВременногоХранилища(ПолученноеЗначение);
	ПатентыЗаГод = ПолучитьИзВременногоХранилища(АдресДанных);
	// Патенты, для которых пользователь не выбирал ручной порядок будут идти последними в списке
	ПатентыЗаГод.ЗаполнитьЗначения(УменьшаемыеПатенты.Количество(), "Порядок");
	Для Индекс = 0 По УменьшаемыеПатенты.Количество() - 1 Цикл
		СтрокаИзмененныйПорядок = УменьшаемыеПатенты[Индекс];
		СтрокаПатентыЗаГод = ПатентыЗаГод.Найти(СтрокаИзмененныйПорядок.ДокументПатент, "ДокументПатент");
		Если СтрокаПатентыЗаГод <> Неопределено Тогда
			СтрокаПатентыЗаГод.Порядок = Индекс;
		КонецЕсли;
	КонецЦикла;
	
	ПатентыЗаГод.Сортировать("Порядок");
	
	РаспределитьУменьшениеНалогаПоПатентам(ПатентыЗаГод);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПатентаНаСервере(Индекс, АдресДанных)
	
	ПатентыЗаГод = ПолучитьИзВременногоХранилища(АдресДанных);
	
	СтрокаПатент = ПатентыЗаГод[Индекс];
	
	ДанныеПатента = НовыеДанныеПатента();
	ДанныеПатента.Патент = СтрокаПатент.Ссылка;
	ДанныеПатента.ДокументПатент = СтрокаПатент.ДокументПатент;
	ДанныеПатента.НаименованиеПатента = СтрокаПатент.Наименование;
	ДанныеПатента.НомерПатента = СтрокаПатент.НомерПатента;
	ДанныеПатента.НалогПоПатенту = СтрокаПатент.СуммаКОплате;
	ДанныеПатента.Уменьшить = СтрокаПатент.Уменьшить;
	ДанныеПатента.УменьшеноРанее = СтрокаПатент.УменьшеноРанее;
	Если ЗначениеЗаполнено(СтрокаПатент.Уведомления) Тогда
		ДанныеПатента.Уведомления = СтрокаПатент.Уведомления;
	КонецЕсли;
	
	Возврат ДанныеПатента;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеДанныеПатента()
	
	Данные = Новый Структура;
	Данные.Вставить("Патент", Справочники.Патенты.ПустаяСсылка());
	Данные.Вставить("ДокументПатент", Документы.ОперацияСПатентом.ПустаяСсылка());
	Данные.Вставить("НаименованиеПатента", "");
	Данные.Вставить("НомерПатента", "");
	Данные.Вставить("НалогПоПатенту", 0);
	Данные.Вставить("Уменьшить", 0);
	Данные.Вставить("УменьшеноРанее", 0);
	Данные.Вставить("Уведомления", Новый Массив);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ОбработатьСозданиеУведомления(Источник)
	
	Уведомление = Источник;
	
	СформироватьПредставлениеУведомления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеУведомления(Форма)
	
	Элементы = Форма.Элементы;
	ДанныеПредставления = ДанныеПредставленияУведомления(Форма.Уведомление);
	Форма.ПредставлениеУведомления = СтрШаблон(
		НСтр("ru = 'Уведомление от %1 на сумму %2'"),
		Формат(ДанныеПредставления.Дата, "ДЛФ=D"),
		Форма.СуммаУменьшенияПоВсемПатентам);
	
	СтрокиПредставления = Новый Массив;
	
	СтрокиПредставления.Добавить(
		Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '%1 (%2)'"),
			Форма.ПредставлениеУведомления,
			ДанныеПредставления.СтатусУведомления.Представление),
		,
		,
		,
		"ОткрытьУведомление"));
	
	Если Не ДанныеПредставления.СтатусУведомления.Сдано Тогда
		СтрокиПредставления.Добавить("  ");
		СтрокиПредставления.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьУведомление"));
		СтрокиПредставления.Добавить(" ");
	КонецЕсли;
	
	Элементы.ПредставлениеУведомления.Заголовок = Новый ФорматированнаяСтрока(СтрокиПредставления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПредставленияУведомления(Уведомление)
	
	ДанныеПредставления = НовыеДанныеПредставленияУведомления();
	
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ДатаПодписи, Основание");
	Если ЗначениеЗаполнено(РеквизитыУведомления.Основание) Тогда
		ДатаУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУведомления.Основание, "Дата");
	Иначе
		ДатаУведомления = РеквизитыУведомления.ДатаПодписи;
	КонецЕсли;
	ДанныеПредставления.Дата = ДатаУведомления;
	
	СтатусУведомления = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Уведомление);
	ДанныеПредставления.СтатусУведомления = СтатусУведомления;
	
	Возврат ДанныеПредставления;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеДанныеПредставленияУведомления()
	
	ДанныеПредставления = Новый Структура;
	ДанныеПредставления.Вставить("Дата", Дата(1, 1, 1));
	ДанныеПредставления.Вставить("СтатусУведомления", Новый Структура);
	
	Возврат ДанныеПредставления;
	
КонецФункции

&НаКлиенте
Процедура УдалитьУведомлениеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОповещения = Уведомление;
	
	УдалитьУведомлениеНаСервере();
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация", Организация);
	ПараметрыУведомления.Вставить("ВидУведомления", ПредопределенноеЗначение(
		"Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы"));
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыУведомления, ИсточникОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомлениеНаСервере()
	
	УведомлениеОбъект = Уведомление.ПолучитьОбъект();
	УведомлениеОбъект.УстановитьПометкуУдаления(Истина);
	
	Уведомление = Неопределено;
	ПредставлениеУведомления = "";
	
	РассчитатьДанныеПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеРасшифровкиСуммыПатента(ИзменилисьДанные, ДополнительныеПараметры) Экспорт
	
	Если ИзменилисьДанные = Истина Тогда
		РассчитатьДанныеПомощника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	ВозможнаБыстраяАктуализация = ЕстьПравоАктуализироватьДанные;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ТребуетсяПроверятьАктуальность Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		ВозможнаБыстраяАктуализация = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация = Организация;
	ПараметрыПроверки.Период = КонецКвартала(ТекущаяДата());
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = СтрШаблон(НСтр("ru = 'Выполняется расчет расходов...%1'"), ПроцентВыполнения);
		
	ИначеЕсли ТребуетсяПроверятьАктуальность Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ТребуетсяПроверятьАктуальность = Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ТребуетсяПроверятьАктуальность = Ложь; 
		УправлениеФормой();
		
	ИначеЕсли ВозможнаБыстраяАктуализация И Не ЗаданиеЗапущеноВДругойФорме И ЗначениеЗаполнено(Организация) Тогда
		
		ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
			Организация, УникальныйИдентификатор);
		Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			АктуализироватьДанные();
		Иначе
			
			ДанныеУчетаАктуальны = Ложь;
			
			Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
				// Задание запущено в другой форме
				ЗаданиеЗапущеноВДругойФорме = Истина;
				ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
					ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
			Иначе
				ЗаданиеЗапущеноВДругойФорме = Ложь;
			КонецЕсли;
			
			ОбновитьСтатусФоновогоЗадания();
			
		КонецЕсли;
		
	Иначе
		
		ТребуетсяПроверятьАктуальность = Ложь;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		
		ПроверитьАктуальностьДанных();
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		
		РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
		Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
		 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
			ПроведенАнализВариантаАктуализации = Ложь;
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		Иначе
			ПроведенАнализВариантаАктуализации = ВозможнаБыстраяАктуализация
				И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
			ВозможнаБыстраяАктуализация = РезультатАктуализации.АктуализацияДляРасчетаНалога;
		КонецЕсли;
		
	Иначе
		
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	ТребуетсяПроверятьАктуальность = Ложь;
	
	Если ДанныеУчетаАктуальны И Не ЗначениеЗаполнено(Уведомление) Тогда
		РассчитатьДанныеПомощника();
	ИначеЕсли Не ДанныеУчетаАктуальны И Не ПроведенАнализВариантаАктуализации Тогда
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект,
			РезультатАктуализации,
			НСтр("ru='Расчет налога не выполнен. Обнаружены ошибки.'"));
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(ТекущаяДата());
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = ВозможнаБыстраяАктуализация
		Или ЭтоРежимИнтеграцииСБанком(Организация);
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		УправлениеФормой();
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРежимИнтеграцииСБанком(Организация)
	
	Возврат Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(Организация);
	
КонецФункции

&НаСервере
Функция ВыполняетсяФоновоеЗадание()
	
	Возврат ТребуетсяПроверятьАктуальность
		Или ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации);
	
КонецФункции

&НаСервере
Процедура ОформитьАктуализацию()
	
	ВыполняетсяФоновоеЗадание = ВыполняетсяФоновоеЗадание();
	
	Элементы.ГруппаОсновныеДанные.Видимость = Не ВыполняетсяФоновоеЗадание И ДанныеУчетаАктуальны;
	Элементы.ГруппаАктуализироватьДанныеУчета.Видимость = Не ДанныеУчетаАктуальны
		И Не ВозможнаБыстраяАктуализация
		И Не ВыполняетсяФоновоеЗадание;
	Элементы.ГруппаАктуализироватьДанныеУчета.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	Элементы.АктуализироватьДанныеУчета.Доступность = ЕстьПравоАктуализироватьДанные;
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяФоновоеЗадание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасчетРасходовУменьшающихНалог()
	
	НастройкиОтчета = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	НастройкиОтчета.ДополнительныеСвойства.Вставить("Организация", Организация);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоГода(Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", КонецГода(Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("Налог", "ПСН");
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ВыводитьПодвал", Истина);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("РежимРасшифровкиПомощникОплатыПатента", Истина);
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВидРасшифровки", 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", НастройкиОтчета);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.СправкаРасчетРасходовУменьшающихОтдельныеНалоги.Форма.ФормаОтчета", ПараметрыОтчета, , Истина);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыНовогоУведомления()
	
	ДанныеПомощника = ДанныеПомощникаДляУведомленияОбУменьшенииНалогаНаСтраховыеВзносы();
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",      Организация);
	ПараметрыУведомления.Вставить("НалоговыйОрган",   РегистрацияВНалоговомОргане);
	ПараметрыУведомления.Вставить("СуммаРасходов",    ОбщаяСуммаРасходов);
	ПараметрыУведомления.Вставить("АдресДанных",      АдресДанных);
	ПараметрыУведомления.Вставить("ДанныеПомощника",  ДанныеПомощника.ДанныеЗаполнения);
	ПараметрыУведомления.Вставить("КонтекстныйВызов", Истина);
	
	Возврат ПараметрыУведомления;
	
КонецФункции

&НаСервере
Процедура ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС()
	
	ЕдиныйНалоговыйСчетИнтеграцияБП.ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС(
		ЭтотОбъект, Организация, Период);
	
КонецПроцедуры

#КонецОбласти
