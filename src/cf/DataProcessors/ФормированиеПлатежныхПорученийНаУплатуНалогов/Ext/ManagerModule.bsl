#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает и возвращает документы оплаты налогов по переданным параметрам.
//
// Параметры:
//  Параметры - см. НовыеПараметрыФормированияПлатежныхДокументов
//  АктуализированыРеквизитыПлатежаВБюджет - Булево, Неопределено - признак необходимости актуализации реквизитов платежей
//
// Возвращаемое значение:
//  Массив - созданные документы.
Функция СоздатьПлатежныеДокументы(Параметры, АктуализированыРеквизитыПлатежаВБюджет = Неопределено) Экспорт
	
	СозданныеДокументы = Новый Массив;
	
	ЗначенияЗаполненияПлатежей = ДанныеЗаполненияПлатежныхДокументов(Параметры, АктуализированыРеквизитыПлатежаВБюджет);
	
	ИндексЗавершающегоПлатежа = ЗначенияЗаполненияПлатежей.ВГраница();
	
	Для ИндексЗаполнения = 0 По ИндексЗавершающегоПлатежа Цикл
		
		ТекущееЗаполнение = ЗначенияЗаполненияПлатежей[ИндексЗаполнения];
		
		Если ТипЗнч(ТекущееЗаполнение.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРКО") Тогда
			ВидПлатежногоДокумента = "РасходныйКассовыйОрдер";
		Иначе
			ВидПлатежногоДокумента = "ПлатежноеПоручение";
		КонецЕсли;
		НовыйДокумент = Документы[ВидПлатежногоДокумента].СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекущееЗаполнение);
		
		Если ЗначениеЗаполнено(Параметры.Правило) Тогда
			ЭтоЗавершающийПлатеж = (ИндексЗаполнения = ИндексЗавершающегоПлатежа);
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(
				НовыйДокумент,
				Параметры.Правило,
				Параметры.ПериодСобытия,
				Не ЭтоЗавершающийПлатеж);
		КонецЕсли;
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не НовыйДокумент.Ссылка.Пустая() Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

// Создает и возвращает документы оплаты налогов по переданным параметрам и данным заполнения.
//
// Параметры:
//  Параметры - см. НовыеПараметрыФормированияПлатежныхДокументов
//  ДанныеЗаполнения - см. ДанныеЗаполненияПлатежныхДокументов
//
// Возвращаемое значение:
//  Массив - созданные документы.
Функция СоздатьПлатежныеДокументыПоДаннымЗаполнения(Параметры, ДанныеЗаполнения) Экспорт
	
	СозданныеДокументы = Новый Массив;
	
	ИндексЗавершающегоПлатежа = ДанныеЗаполнения.ВГраница();
	
	Для ИндексЗаполнения = 0 По ИндексЗавершающегоПлатежа Цикл
		
		ТекущееЗаполнение = ДанныеЗаполнения[ИндексЗаполнения];
		
		Если ТипЗнч(ТекущееЗаполнение.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРКО") Тогда
			ВидПлатежногоДокумента = "РасходныйКассовыйОрдер";
		Иначе
			ВидПлатежногоДокумента = "ПлатежноеПоручение";
		КонецЕсли;
		НовыйДокумент = Документы[ВидПлатежногоДокумента].СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекущееЗаполнение);
		
		Если ЗначениеЗаполнено(Параметры.Правило) Тогда
			ЭтоЗавершающийПлатеж = (ИндексЗаполнения = ИндексЗавершающегоПлатежа);
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(
				НовыйДокумент,
				Параметры.Правило,
				Параметры.ПериодСобытия,
				Не ЭтоЗавершающийПлатеж);
		КонецЕсли;
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не НовыйДокумент.Ссылка.Пустая() Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

// Возвращает данные для создания документов оплаты налогов по переданным параметрам
//
// Параметры:
//  Параметры - см. НовыеПараметрыФормированияПлатежныхДокументов
//  АктуализированыРеквизитыПлатежаВБюджет - Булево, Неопределено - признак необходимости актуализации реквизитов платежей
//
// Возвращаемое значение:
//  Массив - массив из значений для заполнения документов.
Функция ДанныеЗаполненияПлатежныхДокументов(Параметры, АктуализированыРеквизитыПлатежаВБюджет = Неопределено) Экспорт
	
	СчетОрганизации = Параметры.СчетОрганизации;
	
	ЗначенияЗаполненияПоРеквизитам = Новый Массив;
	
	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(Параметры.Платежи);
	
	Дата            = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Организация     = Параметры.Организация;
	
	Если ЗначениеЗаполнено(Параметры.ПериодПлатежа) Тогда
		ПериодПлатежа = Параметры.ПериодПлатежа;
	Иначе
		ПериодПлатежа = Дата;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
	Если Параметры.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	КонецЕсли;
	
	ИндексЗавершающегоПлатежа = ТаблицаПлатежей.Количество() - 1;
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	
	Для каждого Платеж Из ТаблицаПлатежей Цикл
		
		ДанныеЗаполнения = Новый Структура;
		
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			Платеж.Налог, Организация, Платеж.РегистрацияВНалоговомОргане);
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж.Налог, "ВидНалога");
		Если НастройкаЗаполнения <> Неопределено Тогда
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, ПериодПлатежа, Организация, Платеж.ВидНалоговогоОбязательства,, Истина);
			
			Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
				Для каждого Реквизит Из ИсходныеДанныеЗаполнения Цикл
					Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
						ДанныеЗаполнения.Вставить(Реквизит.Ключ, Реквизит.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КонтекстОперации = ВидОперации;
			Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
				ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
				КонтекстОперации = "НалогНаПрибыль";
			КонецЕсли;
			ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации));
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Дата",            Дата);
		ДанныеЗаполнения.Вставить("Организация",     Организация);
		ДанныеЗаполнения.Вставить("СчетОрганизации", СчетОрганизации);
		ДанныеЗаполнения.Вставить("ВидОперации",     ВидОперации);
		ДанныеЗаполнения.Вставить("Налог",           Платеж.Налог);
		
		Если ЗначениеЗаполнено(Параметры.НалоговыйПериод) Тогда
			ДанныеЗаполнения.Вставить("НалоговыйПериод", Параметры.НалоговыйПериод);
		ИначеЕсли Параметры.НалоговыйПериодВТаблицеПлатежей Тогда
			ДанныеЗаполнения.Вставить("НалоговыйПериод", Платеж.НалоговыйПериод);
			Если ДанныеЗаполнения.Свойство("ПоказательПериода") Тогда
				ДанныеЗаполнения.Удалить("ПоказательПериода");
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("НазначениеПлатежа") Тогда
				ДанныеЗаполнения.Удалить("НазначениеПлатежа");
			КонецЕсли;
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидНалоговогоОбязательства", Платеж.ВидНалоговогоОбязательства);
		
		// Проверка актуальности реквизитов платежей в бюджет
		Если НЕ АктуализированыРеквизитыПлатежаВБюджет
			И НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Платеж.Налог, Дата) Тогда
			Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
			АктуализированыРеквизитыПлатежаВБюджет = Истина;
		КонецЕсли;
		
		РегистрацияВНалоговомОргание = Неопределено;
		
		ДанныеЗаполнения.Вставить("СчетУчета", Платеж.СчетУчета);
		Для НомерСубконто = 1 По 3 Цикл
			ДанныеЗаполнения.Вставить("Субконто" + НомерСубконто, Платеж["Субконто" + НомерСубконто]);
			Если ТипЗнч(Платеж["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
				РегистрацияВНалоговомОргание = Платеж["Субконто" + НомерСубконто];
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить("СуммаДокумента", Платеж.Сумма);
		
		Если ПлатежиВБюджетКлиентСервер.ДействуетПереходНаЕНП(Дата) Тогда
			ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
			ЗаполнитьЗначенияСвойств(ОписаниеПлатежа, ДанныеЗаполнения);
			ОписаниеПлатежа.Период       = Дата;
			ОписаниеПлатежа.СпособОплаты = Параметры.СпособОплаты;
			ОписаниеПлатежа.Сумма        = Платеж.Сумма;
			
			КодТерритории = "";
			Если ДанныеЗаполнения.Свойство("КодОКАТО") И ЗначениеЗаполнено(ДанныеЗаполнения.КодОКАТО) Тогда
				КодТерритории = ДанныеЗаполнения.КодОКАТО;
				ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Дата);
				ОписаниеПлатежа.ОКАТО = КодТерритории;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВидНалога)
				И УчетнаяПолитика.ПлательщикЕНП(Организация, Дата)
				И ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговУплачиваемыеОтдельно().Найти(ВидНалога) = Неопределено Тогда
				ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
					Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
				ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
			
			ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
				ОписаниеПлатежа.Налог, ОписаниеПлатежа.ВидНалоговогоОбязательства, Дата);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргание) Тогда
				РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргание,
					"Код, КПП, КодПоОКТМО");
				ОписаниеПлатежа.КПППлательщика      = РеквизитыРегистрации.КПП;
				ОписаниеПлатежа.КодНалоговогоОргана = РеквизитыРегистрации.Код;
				Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(ОписаниеПлатежа.КБК)
					Или Не ЗначениеЗаполнено(КодТерритории) Тогда
					КодТерритории = СокрЛП(РеквизитыРегистрации.КодПоОКТМО);
					ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Дата);
					ОписаниеПлатежа.ОКАТО = КодТерритории;
				КонецЕсли;
			КонецЕсли;
			
			ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			ЗначенияЗаполнения.Вставить("СчетОрганизации", СчетОрганизации);
			
			ЗначенияЗаполненияПоРеквизитам.Добавить(ЗначенияЗаполнения);
		Иначе
			ЗначенияЗаполненияПоРеквизитам.Добавить(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияЗаполненияПоРеквизитам;
	
КонецФункции

Процедура ЗаполнитьВидыНалогов(ТаблицаПлатежей, Организация, ДатаОстатков) Экспорт
	
	Для каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			НомерСубконто = НомерВидаСубконтоНаСчете(СвойстваСчета, "РегистрацияВНалоговомОргане");
			СтрокаТаблицы.РегистрацияВНалоговомОргане = ?(НомерСубконто > 0, 
				СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
		КонецЕсли;
		
		НомерСубконто  = НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов");
		УровеньБюджета = ?(НомерСубконто > 0, СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
		СтрокаТаблицы.ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(
			СтрокаТаблицы.СчетУчета, Организация, ДатаОстатков, УровеньБюджета);
		СтрокаТаблицы.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(СтрокаТаблицы.ВидНалога);
		СтрокаТаблицы.ВидНалоговогоОбязательства = ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаПлатежей() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("Субконто1", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Результат.Колонки.Добавить("Субконто2", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Результат.Колонки.Добавить("Субконто3", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Результат.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Результат.Колонки.Добавить("Налог",     Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Результат.Колонки.Добавить("Сумма",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Результат.Колонки.Добавить("ВидНалоговогоОбязательства",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("НалоговыйПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат Результат;
	
КонецФункции

// Возвращает новые параметры формирования платежных документов
//
// Возвращаемое значение:
//  Структура:
//   * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * ПериодСобытия - Дата
//   * ПериодПлатежа - Дата
//   * Организация - СправочникСсылка.Организации
//   * НалоговыйПериод - Дата
//   * НалоговыйПериодВТаблицеПлатежей - Булево
//   * Платежи - см. НоваяТаблицаПлатежей
//   * СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//   * СчетОрганизации - СправочникСсылка.БанковскиеСчета
Функция НовыеПараметрыФормированияПлатежныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Правило");
	Результат.Вставить("ПериодСобытия");
	Результат.Вставить("ПериодПлатежа");
	Результат.Вставить("Организация");
	Результат.Вставить("НалоговыйПериод");
	Результат.Вставить("НалоговыйПериодВТаблицеПлатежей", Ложь);
	Результат.Вставить("Платежи");
	Результат.Вставить("СпособОплаты");
	Результат.Вставить("СчетОрганизации");
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОстаткиНаСчетах68и69(Организация, НаДату) Экспорт
	
	Субсчета68и69 = Новый Массив;
	Субсчета68и69.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);                // 68
	Субсчета68и69.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию); // 69
	Субсчета68и69 = БухгалтерскийУчет.СформироватьМассивСубсчетов(Субсчета68и69);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(НаДату), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Субсчета68и69",   Субсчета68и69);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&Субсчета68и69), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКод";
	
	Остатки = Запрос.Выполнить().Выгрузить();
	
	Платежи = НоваяТаблицаПлатежей();
	Для каждого СтрокаТаблицы Из Остатки Цикл
		НоваяСтрока = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	ЗаполнитьВидыНалогов(Платежи, Организация, НаДату);
	
	Возврат Платежи;
	
КонецФункции

Функция НомерВидаСубконтоНаСчете(СвойстваСчета, ИмяВидаСубконто)
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяВидаСубконто];
	Если СвойстваСчета.ВидСубконто1 = ВидСубконто Тогда
		Возврат 1;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ВидСубконто Тогда
		Возврат 2;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ВидСубконто Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицыПлатежей)
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(СтрокаТаблицыПлатежей.СчетУчета,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерСубконто <> 0 Тогда
		ВидНалоговогоОбязательства = СтрокаТаблицыПлатежей["Субконто" + НомерСубконто]
	Иначе
		Если СтрокаТаблицыПлатежей.СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Иначе
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

#КонецОбласти

#КонецЕсли