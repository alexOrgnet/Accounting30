
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем СообщениеОбОшибке;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", Параметры.Ссылка.Метаданные()) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ссылка, "ВалютаДокумента") <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		ВызватьИсключение НСтр("ru='Печать чека при расчетах в иностранной валюте не поддерживается.'");
	КонецЕсли;
	
	Объект.СуммаВключаетНДС = Истина;
	
	ОснованиеПечатиЧека = Параметры.Ссылка;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ИдентификаторУстройства");
	
	ПараметрыУстройства = МенеджерОборудованияВызовСервера.ДанныеУстройства(Параметры.ИдентификаторУстройства);
	
	НомерСекции                = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУстройства, "НомерСекции", 0);
	КодыСистемыНалогообложения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУстройства.ПараметрыРегистрации, "КодыСистемыНалогообложения", "");

	Если ЗначениеЗаполнено(КодыСистемыНалогообложения) Тогда
		Элементы.СистемаНалогообложения.РежимВыбораИзСписка = Истина;
	
		Для каждого КодСистемыНалогообложения Из СтрРазделить(КодыСистемыНалогообложения, ",") Цикл
			Элементы.СистемаНалогообложения.СписокВыбора.Добавить(
				ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(КодСистемыНалогообложения)));
		КонецЦикла;
	КонецЕсли;
	
	
	ДанныеОплатыСертификатНСПК = Новый Структура;
	ДанныеОплатыСертификатНСПК.Вставить("СуммаСертификатамиНСПК", Параметры.СуммаСертификатамиНСПК);
	ДанныеОплатыСертификатНСПК.Вставить("ИдентификаторКорзины", Параметры.ИдентификаторКорзины);
	
	
	МассивЧеков = ПечатьФискальныхДокументов.СобратьДанныеЧеков(
		ОснованиеПечатиЧека, 
		НомерСекции, 
		Параметры.ВерсияФормата.ВерсияФД, 
		Параметры.АдресУстановкиККТ,
		Параметры.ПараметрыОбработчика, 
		СообщениеОбОшибке,
		УникальныйИдентификатор,
		Параметры.АдресХранилищаПечатьЧека,
		ДанныеОплатыСертификатНСПК);
		
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При подготовке параметров печати чека произошла ошибка.
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			СообщениеОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,,,Отказ);
		Возврат;
	КонецЕсли; 
		
	ПараметрыОперацииФискализацииЧека = МассивЧеков[0];
	
	Если ЗначениеЗаполнено(ПараметрыОперацииФискализацииЧека.Организация) Тогда
		РеквизитыОрганизации = 
			БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				ПараметрыОперацииФискализацииЧека.Организация, 
				ПараметрыОперацииФискализацииЧека.ДатаВремя);
				
		ОрганизацияСтрокой = РеквизитыОрганизации.Представление;
	КонецЕсли; 
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ОснованиеПечатиЧека,,,ПараметрыОперацииФискализацииЧека.ТипРасчета);
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		// Чек из данного документа уже был пробит
		Объект.ЧекКоррекции                         = Истина;
		Объект.ДатаКоррекции                        = ДанныеФискальнойОперации.Дата;
		Объект.КорректируемыйДокумент               = ОснованиеПечатиЧека;
		Элементы.ЧекКоррекции.Доступность           = Ложь;
		Элементы.КорректируемыйДокумент.Доступность = Ложь;
		Заголовок = НСтр("ru = 'Чек коррекции'");
	КонецЕсли;
	
	Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		ПозицияЧека.Наименование = Лев(СокрЛП(ПозицияЧека.Наименование), 128);
	КонецЦикла; 
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ИдентификаторУстройства);
	
	АдресХранилищаИсходныеПараметры = ПоместитьВоВременноеХранилище(ПараметрыОперацииФискализацииЧека, УникальныйИдентификатор);

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОперацииФискализацииЧека, "СистемаНалогообложения, ПризнакАгента, ДанныеАгента, ДанныеПоставщика, Кассир, КассирИНН");
	
	ПризнакАгентаСтрокой = Обработки.ПечатьЧека.ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента);
	
	КассирПредставление = ПредставлениеКассира(Кассир, КассирИНН);
	
	ЭтоВерсияФФД12  = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.2.0.0", Параметры.ВерсияФормата.ВерсияФД) > 0;
	ЭтоВерсияФФД11  = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", Параметры.ВерсияФормата.ВерсияФД) > 0;
	ЭтоВерсияФФД105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", Параметры.ВерсияФормата.ВерсияФД) > 0;
	
	ВерсияККТ120    = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.2.0.0", Параметры.ВерсияФормата.ВерсияККТ) > 0;;
	
	ЗаполнитьТаблицаТоваров();
			
	Для каждого СтрокаОплаты Из ПараметрыОперацииФискализацииЧека.ТаблицаОплат Цикл
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			Наличные = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда 
			Электронно = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда 
			ВстречноеПредоставление = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда 
			Предоплата = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда 
			Кредит = СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// Установим параметры печати чека
	ПараметрыПечатиЧека = МенеджерОборудованияБП.ПараметрыПодключаемогоОборудования(Параметры.ИдентификаторУстройства);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыПечатиЧека, "ОтправлятьEmail, ОтправлятьSMS, ПечататьЧек,Отправляет1СSMS, Отправляет1СEmail");
	
	АдресЭлектроннойПочты = ПараметрыОперацииФискализацииЧека.ПокупательEmail;
	НомерТелефона         = ПараметрыОперацииФискализацииЧека.ПокупательНомер;
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияБП.ИспользуетсяОборудование("СканерШтрихкода");
	
	ВсегоПоЧеку = Объект.ТаблицаТоваров.Итог("Сумма");
	
	Элементы.Наличные.Видимость = (Наличные > 0);
	Элементы.ВстречноеПредоставление.Видимость = (ВстречноеПредоставление > 0);
	Элементы.Электронно.Видимость = (Электронно > 0);
	
	Элементы.Предоплата.Видимость = ЭтоВерсияФФД105;
	Элементы.Кредит.Видимость     = ЭтоВерсияФФД105;
	
	УстановитьУсловноеОформлениеВидимость();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Обработка.ПечатьЧека",
		"Форма",
		НСтр("ru = 'Новости: Печать кассового чека'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Чек не содержит данных.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		// Попробуем подключить сканер штрихкода и ККТ
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, ККТ");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			
			ДанныеОбъекта = Новый Структура("АдресЭлектроннойПочты, ОтправлятьEmail, НомерТелефона, ОтправлятьSMS");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
			ПечатьФискальныхДокументовКлиент.ЗаполнитьКонтактнуюИнформациюПоШтрихкоду(ДанныеОбъекта, ТекущийКод);
			ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
			
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект);
		
		ТекстПредупреждения = НСтр("ru = 'Вы уверены, что хотите выйти без печати чека?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.ФискальныеОперации") Тогда
		Если ЕстьИсправленияПоДокументу(ВыбранноеЗначение) Тогда
			
			ТекстВопроса = НСтр("ru = 'К выбранному документу уже  был пробит чек коррекции. Хотите пробить еще один?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("КорректируемыйДокументПриИзмененииЗавершение", ЭтотОбъект, Новый структура("КлючЗаписи", ВыбранноеЗначение));
		
			ПоказатьВопрос(ОписаниеОповещения,  ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			УстановитьДокументНаСервере(ВыбранноеЗначение);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ПараметрыОперацииФискализацииЧека, ЭтотОбъект, "СистемаНалогообложения");
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура КассирНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РедактированиеРеквизитовКассира();
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	ЗаполнитьТаблицуОплат();
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьEmailПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	ОтправлятьEmail = ЗначениеЗаполнено(АдресЭлектроннойПочты);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	ОтправлятьSMS = ЗначениеЗаполнено(НомерТелефона);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипРасчета", ПараметрыОперацииФискализацииЧека.ТипРасчета));
	ОткрытьФорму("РегистрСведений.ФискальныеОперации.Форма.ФормаПросмотраФискальныхОпераций", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПоПредписаниюПриИзменении(Элемент)
	Элементы.НомерПредписания.Доступность = Объект.КоррекцияПоПредписанию;
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекцииПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДобавитьСтрокуОплаты(ТипОплаты, СуммаОплаты)
	Если СуммаОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
	
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ."+ТипОплаты);
	СтрокаОплаты.Сумма     = СуммаОплаты;
	
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаТоваровПриИзменении(Элемент)
	ПараметрыОперацииФискализацииЧека.ПозицииЧека = Новый Массив;
	
	Для каждого СтрокаТаблицыТоваров Из Объект.ТаблицаТоваров Цикл
		Если СтрокаТаблицыТоваров.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТаблицыТоваров,, "СтавкаНДС");
		СтрокаПозицииЧека.СтавкаНДС         = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтрокаТаблицыТоваров.СтавкаНДС, ЭтоВерсияФФД105);
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТаблицыТоваров.НомерСтроки;
		
		ПараметрыОперацииФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	ВсегоПоЧеку = Объект.ТаблицаТоваров.Итог("Сумма");
	
	ЗаполнитьТаблицуОплат();
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.ПризнакАгентаПоПредметуРасчета = ПараметрыОперацииФискализацииЧека.ПризнакАгента;
		ТекущиеДанные.ПризнакАгентаСтрокой           = ПризнакАгентаПоПредметуРасчетаСтрокой(ТекущиеДанные.ПризнакАгентаПоПредметуРасчета);
		ТекущиеДанные.ДанныеАгента                   = ПараметрыОперацииФискализацииЧека.ДанныеАгента;
		ТекущиеДанные.ДанныеПоставщика               = ПараметрыОперацииФискализацииЧека.ДанныеПоставщика;
	ИначеЕсли Копирование Тогда
		 ТекущиеДанные.Штрихкод = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекущиеДанные.Штрихкод);
	
	Если Отказ Тогда
		Текст = НСтр("ru = 'В форме печати чека нельзя удалять строки с маркируемыми товарами.
                                |При необходимости, удалите строку в исходном документе и сформируйте чек еще раз'");
		
		ПоказатьПредупреждение(,Текст,15);
		
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаТоваровЦенаСоСкидкамиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтрокаТаблицы.Цена = СтрокаТаблицы.ЦенаСоСкидками;
	СтрокаТаблицы.СуммаСкидок = 0;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТаблицаТоваров");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКоличествоПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТаблицаТоваров");
	
	СтрокаТаблицы.ЦенаСоСкидками = СтрокаТаблицы.Цена;
	СтрокаТаблицы.СуммаСкидок = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСуммаПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ТаблицаТоваров");
	
	СтрокаТаблицы.ЦенаСоСкидками = СтрокаТаблицы.Цена;
	СтрокаТаблицы.СуммаСкидок = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "ТаблицаТоваров");
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаТоваровПризнакАгентаСтрокой" Тогда
		ОткрытьФормуРеквизитыАгента(Элемент.ТекущиеДанные);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПризнакАгентаНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьФормуРеквизитыАгента(ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровНомерТаможеннойДекларацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершение = Новый ОписаниеОповещения("ВыборТаможеннойДекларацииЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элементы.ТаблицаТоваров.ТекущиеДанные));
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,ЭтотОбъект,,,,ОповещениеЗавершение);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	КодСтраныПроисхожденияТовара = КодСтраныПроисхождения(ТекущиеДанные.СтранаПроисхождения);
	ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[ТекущиеДанные.НомерСтроки-1];
	Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
		ПозицияЧека.Вставить("КодСтраныПроисхожденияТовара", КодСтраныПроисхожденияТовара);
		ТекущиеДанные.КодСтраныПроисхожденияТовара = КодСтраныПроисхожденияТовара;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьЧека(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		ПараметрыНачалаПроверки = ШтрихкодированиеИСМПКлиент.ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
		ПараметрыНачалаПроверки.ОповещениеОЗавершении       = Новый ОписаниеОповещения("ПроверкаКодовМаркировкиЗавершение", ЭтотОбъект);
		ПараметрыНачалаПроверки.ДанныеДляПроверки           = Новый Массив(ДанныеДляПроверкиКодовМаркировки);
		ПараметрыНачалаПроверки.ФормаОсновногоОбъекта       = ВладелецФормы;
		ПараметрыНачалаПроверки.ФормаВспомогательная        = ЭтотОбъект;
		ПараметрыНачалаПроверки.ЗаголовокКнопкиИгнорировать = НСтр("ru = 'Пробить чек'");
		
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ВладелецФормы);
		Если НЕ ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ 
			ИЛИ ПараметрыСканирования.ККТФФД12ИСМП <> ИдентификаторУстройства Тогда
			
			Если ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ   = Истина;
				ПараметрыСканирования.ККТФФД12ИСМП                     = ИдентификаторУстройства;
			КонецЕсли;
		КонецЕсли;
		
		// Для включения разрешительного режима
		Если ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
			ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа");
		КонецЕсли;
		
		ПараметрыНачалаПроверки.ПараметрыСканирования = ПараметрыСканирования;
		
		ШтрихкодированиеИСМПКлиент.НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыНачалаПроверки);
	Иначе
		ПечатьЧекаНаФискальномУстройстве();
	КонецЕсли; 
	
КонецПроцедуры 
	
&НаКлиенте
Процедура ПроверкаКодовМаркировкиЗавершение(РезультатПроверки, Параметры = Неопределено) Экспорт
 	Если НЕ РезультатПроверки.ВыполнитьФискализацию Тогда
		ОписаниеОшибок = Новый Массив;
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
			ОписаниеОшибок.Добавить(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибкиГИСМТ) Тогда
			ОписаниеОшибок.Добавить(РезультатПроверки.ТекстОшибкиГИСМТ);
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Результат",      Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", СтрСоединить(ОписаниеОшибок, символы.ПС));
		РезультатВыполнения.Вставить("ЗакрытьФорму",   РезультатПроверки.ЗакрытьВспомогательнуюФорму);
		
		ПечатьЧекаНаФискальномУстройствеЗавершение(РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	// Заполнение идентификаторов разрешительного режима
	Для каждого ЭлементПроверки Из РезультатПроверки.ЭлементыПроверки Цикл
		ДанныеПроверки = РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		Если ДанныеПроверки = Неопределено 
			ИЛИ НЕ ДанныеПроверки.ТребуетсяРазрешительныйЗапросГИСМТ Тогда
		
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("КонтрольнаяМарка", ЭлементПроверки.ПолныйКодМаркировки));
		Если НайденныеСтроки.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ЭлементПроверки, 
				"РазрешительныйРежимИдентификаторЗапросаГИСМТ, РазрешительныйРежимДатаЗапросаГИСМТ");
		КонецЕсли;
	КонецЦикла;
	
	ПечатьЧекаНаФискальномУстройстве();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаНаФискальномУстройстве()
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		ПараметрыОперации = ПараметрыОперацииФискализацииЧекаСоШтрихкодами(ПараметрыОперацииФискализацииЧека, ШтрихкодыУпаковок, ИдентификаторУстройства);
	Иначе
		ПараметрыОперации = ПараметрыОперацииФискализацииЧека;
	КонецЕсли;
	
	// Для ФФД 1.2 принудительно очистим данные агента и данные поставщика в шапке если они введены вручную
	Если ЭтоВерсияФФД12 
		И ЗначениеЗаполнено(ПараметрыОперации.ПризнакАгента) Тогда
		
		ПараметрыОперации.Вставить("ПризнакАгента"   , Неопределено);
		ПараметрыОперации.Вставить("ДанныеАгента"    , ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента());
		ПараметрыОперации.Вставить("ДанныеПоставщика", ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика());
	КонецЕсли; 
	
	Если ОтправлятьEmail Тогда
		ПараметрыОперации.ПокупательEmail = АдресЭлектроннойПочты;
		ПараметрыОперации.Отправляет1СEmail = Отправляет1СEmail;
	Иначе
		ПараметрыОперации.ПокупательEmail = "";
	КонецЕсли;
	
	Если ОтправлятьSMS Тогда
		ПараметрыОперации.ПокупательНомер = НомерТелефона;
		ПараметрыОперации.Отправляет1СSMS = Отправляет1СSMS;
	Иначе
		ПараметрыОперации.ПокупательНомер = "";
	КонецЕсли; 
	
	Если ОтправлятьEmail ИЛИ ОтправлятьSMS Тогда
		ПараметрыОперации.Электронно = НЕ ПечататьЧек;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ПечатьЧекаНаФискальномУстройствеЗавершение", ЭтотОбъект);
	Если Объект.ЧекКоррекции Тогда
		
		ДанныеКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКоррекции();
		
		ДанныеКоррекции.ТипКоррекции      = ?(Объект.КоррекцияПоПредписанию, 1, 0);
		ДанныеКоррекции.НомерПредписания  = ?(Объект.КоррекцияПоПредписанию, Объект.НомерПредписания, "0");
		ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
		ДанныеКоррекции.ДатаКоррекции     = Объект.ДатаКоррекции;
		
		ПараметрыЧекаКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
		
		ПараметрыЧекаКоррекции.КорректируемыйДокумент = Объект.КорректируемыйДокумент;
		ПараметрыЧекаКоррекции.НеприменениеККТ        = НЕ ЗначениеЗаполнено(Объект.КорректируемыйДокумент);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции.ДанныеКоррекции, ДанныеКоррекции);
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции, ПараметрыОперации);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства,
			ПараметрыЧекаКоррекции);
	Иначе
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства,
			ПараметрыОперации);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДокументНаСервере(КлючЗаписи)

	Объект.КорректируемыйДокумент = КлючЗаписи.ДокументОснование;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицаТоваров()
	СтранаПроисхожденияПоКоду = Новый Соответствие;
	ДанныеДляПроверкиСредствамиККТ = Новый Массив;

	
	Объект.ТаблицаТоваров.Очистить();
	
	ЕстьИнформацияОбАгентахПоСтрокам = Ложь;
	
	Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		НоваяСтрока = Объект.ТаблицаТоваров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека,,"СтавкаНДС");
		
		Если ЗначениеЗаполнено(ПозицияЧека.ПризнакАгентаПоПредметуРасчета) 
			И (ПозицияЧека.ПризнакАгентаПоПредметуРасчета <> ПараметрыОперацииФискализацииЧека.ПризнакАгента
			ИЛИ СравнитьСтруктурыРекурсивно(ПозицияЧека.ДанныеАгента, ПараметрыОперацииФискализацииЧека.ДанныеАгента).Количество() <> 0
			ИЛИ СравнитьСтруктурыРекурсивно(ПозицияЧека.ДанныеПоставщика, ПараметрыОперацииФискализацииЧека.ДанныеПоставщика).Количество() <> 0) Тогда
		
			ЕстьИнформацияОбАгентахПоСтрокам = Истина;
			
		КонецЕсли; 
		
		НоваяСтрока.ПризнакАгентаСтрокой = 
			ПризнакАгентаПоПредметуРасчетаСтрокой(НоваяСтрока.ПризнакАгентаПоПредметуРасчета);
			
		Если ЗначениеЗаполнено(ПозицияЧека.КодСтраныПроисхожденияТовара) Тогда
			ЗначениеНайдено = (СтранаПроисхожденияПоКоду[ПозицияЧека.КодСтраныПроисхожденияТовара] <> Неопределено);
			
			Если НЕ ЗначениеНайдено Тогда
				ДанныеСтраныПроисхождения = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПозицияЧека.КодСтраныПроисхожденияТовара);
				Если ЗначениеЗаполнено(ДанныеСтраныПроисхождения.Ссылка) Тогда
					СтранаПроисхожденияПоКоду.Вставить(ПозицияЧека.КодСтраныПроисхожденияТовара, ДанныеСтраныПроисхождения.Ссылка);
					ЗначениеНайдено = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеНайдено Тогда
				НоваяСтрока.СтранаПроисхождения = СтранаПроисхожденияПоКоду[ПозицияЧека.КодСтраныПроисхожденияТовара];
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(ПозицияЧека.Штрихкод), 1, 0);
		
		Если ПозицияЧека.СтавкаНДС = 0 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 120 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПозицияЧека.Штрихкод) И ЭтоАдресВременногоХранилища(ПозицияЧека.Штрихкод) Тогда
		
			МассивШтрихкодов = ПолучитьИзВременногоХранилища(ПозицияЧека.Штрихкод);
			Для каждого СтруктураШтрихкода Из МассивШтрихкодов Цикл
				СтрокаТаблицаШтрихкоды = ШтрихкодыУпаковок.Добавить();
				
				// В качестве ключа используем адрес временного хранилища
				СтрокаТаблицаШтрихкоды.КлючСтроки = ПозицияЧека.Штрихкод;
				
				// обработка кода маркировки в соотвествии с ФФД
				
				// ККТ и ФН - работают по любому ФФД
				СтрокаТаблицаШтрихкоды.Штрихкод = СтруктураШтрихкода.Штрихкод;
				
				// теги для ОСУ
				СтрокаТаблицаШтрихкоды.ОбъемноСортовойУчет = 
					СтруктураШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет;
					
				// количество упаковок весового товара
				Если СтрокаТаблицаШтрихкоды.ОбъемноСортовойУчет Тогда
					СтрокаТаблицаШтрихкоды.КоличествоВесовогоТовара = СтруктураШтрихкода.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
					// Для ОСУ указываем фактическое количество товара (вес или упаковки)
					СтрокаТаблицаШтрихкоды.Количество = СтруктураШтрихкода.Количество;
				Иначе
					// Маркированный товар без ОСУ - всегда "1"
					СтрокаТаблицаШтрихкоды.Количество = 1;
				КонецЕсли;
				
				Если ВерсияККТ120 Тогда
					// ККТ работает по 1.2, ФН - любой
					СтрокаТаблицаШтрихкоды.ШтрихкодBase64 = СтруктураШтрихкода.ПолныйКодМаркировки;
					
					Если ЭтоВерсияФФД12 Тогда
						// И ККТ и ФН работают по 1.2
						СтрокаТаблицаШтрихкоды.КонтрольнаяМарка = СтруктураШтрихкода.ПолныйКодМаркировки;
					КонецЕсли; 
				КонецЕсли; 
				
				ЭлементДанных = ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ();
				ЭлементДанных.ВидПродукции         = СтруктураШтрихкода.ВидПродукции;
				ЭлементДанных.ВидУпаковки          = СтруктураШтрихкода.ВидУпаковки;
				ЭлементДанных.КодМаркировки        = СтруктураШтрихкода.КодМаркировки;
				ЭлементДанных.ПолныйКодМаркировки  = СтруктураШтрихкода.ПолныйКодМаркировки;
				ЭлементДанных.СоставКодаМаркировки = СтруктураШтрихкода.СоставКодаМаркировки;
				ЭлементДанных.ШтрихкодУпаковки     = СтруктураШтрихкода.ШтрихкодУпаковки;
				
				ДанныеДляПроверкиСредствамиККТ.Добавить(ЭлементДанных);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	ДанныеДляПроверкиКодовМаркировки = Новый ФиксированныйМассив(ДанныеДляПроверкиСредствамиККТ);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеБизнесСтатистики(ИзмененнаяСтруктура, АдресХранилищаИсходныеПараметры)
	Если НЕ ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли; 
	
	ИсходнаяСтруктура   = ПолучитьИзВременногоХранилища(АдресХранилищаИсходныеПараметры);
	
	ИзмененныеРеквизиты = СравнитьСтруктурыРекурсивно(ИсходнаяСтруктура, ИзмененнаяСтруктура, "НомерЧека");
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.НапечатанЧек", 1);
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.ИзмененыРеквизиты", ИзмененныеРеквизиты.Количество());
		Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
			ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.ИзмененРеквизит."+ИзмененныйРеквизит, 1);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СравнитьСтруктурыРекурсивно(ИсходнаяСтруктура, ИзмененнаяСтруктура, ИсключаемыеРеквизиты = "")
	ИзмененныеРеквизиты = Новый Массив;
	Для каждого КлючИЗначение Из ИсходнаяСтруктура Цикл
		ИмяРеквизита     = КлючИЗначение.Ключ;
		
		МассивИсключаемыеРеквизиты = СтрРазделить(ИсключаемыеРеквизиты, ",");
		Если МассивИсключаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИсходноеЗначение = КлючИЗначение.Значение;
		НовоеЗначение    = ИзмененнаяСтруктура[ИмяРеквизита];
		Если ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			ИзмененныеРеквизитыСтруктуры = СравнитьСтруктурыРекурсивно(ИсходноеЗначение, НовоеЗначение, ИсключаемыеРеквизиты);
			Для каждого ИмяИзмененногоРеквизитаСтруктуры Из ИзмененныеРеквизитыСтруктуры Цикл
				ИзмененныеРеквизиты.Добавить(СтрШаблон("%1.%2", ИмяРеквизита, ИмяИзмененногоРеквизитаСтруктуры));
			КонецЦикла;
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			
			Если ИсходноеЗначение.Количество() <> НовоеЗначение.Количество() Тогда
				// Если в массивах разное количество элементов то построчно сравнивать смысла нет
				ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
			Иначе
				Для ПозицияМассива = 0 По ИсходноеЗначение.Количество()-1 Цикл
					ИзмененныеРеквизитыСтруктуры = СравнитьСтруктурыРекурсивно(ИсходноеЗначение[ПозицияМассива], НовоеЗначение[ПозицияМассива], ИсключаемыеРеквизиты);
					Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизитыСтруктуры Цикл
						ИзмененныеРеквизиты.Добавить(СтрШаблон("%1[%2].%3", ИмяРеквизита, ПозицияМассива, ИзмененныйРеквизит));
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли (ЗначениеЗаполнено(НовоеЗначение) ИЛИ ЗначениеЗаполнено(ИсходноеЗначение)) И НовоеЗначение <> ИсходноеЗначение Тогда 
			ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ИзмененныеРеквизиты;
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьТаблицуОплат()

	Кредит = Макс(ВсегоПоЧеку - Предоплата - Наличные - ВстречноеПредоставление - Электронно, 0);
	
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат = Новый Массив;
	
	ДобавитьСтрокуОплаты("Предоплата",              ВсегоПоЧеку - Кредит - Наличные - Электронно - ВстречноеПредоставление);
	ДобавитьСтрокуОплаты("ВстречноеПредоставление", ВстречноеПредоставление);
	ДобавитьСтрокуОплаты("Наличные",                Наличные);
	ДобавитьСтрокуОплаты("Электронно",              Электронно);
	ДобавитьСтрокуОплаты("Постоплата",              Кредит);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКассира(Кассир, КассирИНН)

	Если ПустаяСтрока(Кассир) Тогда
		Возврат "< .. >";
	КонецЕсли; 
	
	ПредставлениеКассира = Новый Массив;
	ПредставлениеКассира.Добавить(Кассир);
	Если ЗначениеЗаполнено(КассирИНН) Тогда
		ПредставлениеКассира.Добавить(СтрШаблон("(ИНН: %1)", КассирИНН));
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеКассира, " ");
КонецФункции 

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ТаблицаТоваровКоличество
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаТоваровКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТаблицаТоваров.ИндексАкцизнойМарки", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// ТаблицаТоваровПризнакАгентаСтрокой
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаТоваровПризнакАгентаСтрокой");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоВерсияФФД105", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// АдресПокупателя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АдресЭлектроннойПочты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтправлятьEmail", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АдресЭлектроннойПочты", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// АдресПокупателя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерТелефона");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтправлятьSMS", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НомерТелефона", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// НомерПредписания
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерПредписания");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КоррекцияПоПредписанию", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НомерПредписания", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ДатаКоррекции
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаКоррекции");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректируемыйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДатаКоррекции", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаНаФискальномУстройствеЗавершение(РезультатВыполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(ОснованиеПечатиЧека);
	КонецЕсли;
	
	НастройкиОтправкиСообщений = Новый Структура("ОтправлятьEmail, ОтправлятьSMS, ПечататьЧек");
	ЗаполнитьЗначенияСвойств(НастройкиОтправкиСообщений, ЭтотОбъект);
	
	ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормСохранить("ПечатьЧека", ИдентификаторНастроек, НастройкиОтправкиСообщений);
	
	Если РезультатВыполнения.Результат Тогда
		Модифицированность = Ложь;
		ЗаписатьДанныеБизнесСтатистики(ПараметрыОперацииФискализацииЧека, АдресХранилищаИсходныеПараметры);
		Закрыть(РезультатВыполнения);
		
	ИначеЕсли РезультатВыполнения.Свойство("ЗакрытьФорму") И РезультатВыполнения.ЗакрытьФорму Тогда
		
		Закрыть(РезультатВыполнения);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииФискализацииЧекаСоШтрихкодами(ПараметрыОперацииФискализацииЧека, ШтрихкодыУпаковок, ИдентификаторУстройства)
	
	ПозицииЧека = Новый Массив;
	Для каждого СтрокаТовары Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Штрихкод) Тогда
		
			ШтрихкодыПоТовару = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТовары.Штрихкод));
			
			СписокСтрокПоТовару = Новый Массив;
			Для каждого СтрокаШтрихкода Из ШтрихкодыПоТовару Цикл
			
				ПараметрыФискальнойСтрокиЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
				ЗаполнитьЗначенияСвойств(ПараметрыФискальнойСтрокиЧека, СтрокаТовары);
				
				ПараметрыФискальнойСтрокиЧека.Штрихкод = СтрокаШтрихкода.Штрихкод;
				
				// Если параметр передавать не надо - в нем должно быть НЕОПРЕДЕЛЕНО, а не пустая строка
				Если ЗначениеЗаполнено(СтрокаШтрихкода.ШтрихкодBase64) Тогда
					ПараметрыФискальнойСтрокиЧека.ШтрихкодBase64 = СтрокаШтрихкода.ШтрихкодBase64;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаШтрихкода.КонтрольнаяМарка) Тогда
					ПараметрыФискальнойСтрокиЧека.КонтрольнаяМарка = СтрокаШтрихкода.КонтрольнаяМарка;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаШтрихкода.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
					ПараметрыФискальнойСтрокиЧека.ЗапросПроверкиКода.ИдентификаторЗапроса = СтрокаШтрихкода.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаШтрихкода.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
					ПараметрыФискальнойСтрокиЧека.ЗапросПроверкиКода.ВременнаяМетка = СтрокаШтрихкода.РазрешительныйРежимДатаЗапросаГИСМТ;
				КонецЕсли; 

				
				Если СтрокаШтрихкода.ОбъемноСортовойУчет Тогда
					ПараметрыФискальнойСтрокиЧека.ОбъемноСортовойУчет = Истина;
					ПараметрыФискальнойСтрокиЧека.КоличествоВесовогоТовара = СтрокаШтрихкода.КоличествоВесовогоТовара;
				КонецЕсли; 
				
				// если позиция чека распадается на несколько марок, то корректируем цену, сумму и НДС
				Если ПараметрыФискальнойСтрокиЧека.Количество <> СтрокаШтрихкода.Количество Тогда
					ПараметрыФискальнойСтрокиЧека.Количество     = СтрокаШтрихкода.Количество;
				КонецЕсли; 
				
				ПозицииЧека.Добавить(ПараметрыФискальнойСтрокиЧека);
				СписокСтрокПоТовару.Добавить(ПараметрыФискальнойСтрокиЧека);
			КонецЦикла;
			
			ОстатокСумма      = СтрокаТовары.Сумма;
			ОстатокСуммаНДС   = СтрокаТовары.СуммаНДС;
			ОстатокКоличество = СтрокаТовары.Количество;
			
			Для Инд = 0 По СписокСтрокПоТовару.Количество()-1 Цикл
				СтрокаТовара = СписокСтрокПоТовару[Инд];
				СтрокаТовара.Сумма    = ?(ОстатокСумма = 0, 0, Окр(ОстатокСумма/ОстатокКоличество*СтрокаТовара.Количество,2));
				СтрокаТовара.СуммаНДС = ?(ОстатокСуммаНДС = 0, 0, Окр(ОстатокСуммаНДС/ОстатокКоличество*СтрокаТовара.Количество,2));
				
				ОстатокСумма      = ОстатокСумма - СтрокаТовара.Сумма;
				ОстатокСуммаНДС   = ОстатокСуммаНДС - СтрокаТовара.СуммаНДС;
				ОстатокКоличество = ОстатокКоличество - СтрокаТовара.Количество;
				
				Цена = 0;
				Если СтрокаТовара.Количество <> 0 Тогда
					Цена = Окр(СтрокаТовара.Сумма/СтрокаТовара.Количество, 2);
				КонецЕсли;
				
				СтрокаТовара.Цена           = Цена;
				СтрокаТовара.ЦенаСоСкидками = Цена;
			КонецЦикла;
			
		Иначе
			ПараметрыФискальнойСтрокиЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			ЗаполнитьЗначенияСвойств(ПараметрыФискальнойСтрокиЧека, СтрокаТовары);
			ПозицииЧека.Добавить(ПараметрыФискальнойСтрокиЧека);
		КонецЕсли; 
	КонецЦикла; 
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		НовыеПараметрыФискализации = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОперацииФискализацииЧека);
	#Иначе
		НовыеПараметрыФискализации = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОперацииФискализацииЧека);
	#КонецЕсли
	
	НовыеПараметрыФискализации.ПозицииЧека = ПозицииЧека;
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(НовыеПараметрыФискализации, ИдентификаторУстройства);
	
	Возврат НовыеПараметрыФискализации;

КонецФункции
 
&НаКлиенте
Процедура ОбновитьПредставлениеЧека()
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		ПараметрыОперацииФискализацииЧекаСоШтрихкодами = ПараметрыОперацииФискализацииЧекаСоШтрихкодами(ПараметрыОперацииФискализацииЧека, ШтрихкодыУпаковок, ИдентификаторУстройства);
		ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперацииФискализацииЧекаСоШтрихкодами);
	Иначе
		ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперацииФискализацииЧека);
	КонецЕсли; 
	
	ПечатнаяФорма.УстановитьТекст(ТекстЧека);
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуРеквизитыАгента(Элемент)
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	Если Элемент.ДанныеАгента <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДанныеАгента",           Элемент.ДанныеАгента);
	КонецЕсли;
	Если Элемент.ДанныеПоставщика <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДанныеПоставщика",       Элемент.ДанныеПоставщика);
	КонецЕсли; 
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент,"ПризнакАгента") Тогда
		ПараметрыФормы.Вставить("ПризнакАгента",          Элемент.ПризнакАгента);
	Иначе
		ПараметрыФормы.Вставить("ПризнакАгента",          Элемент.ПризнакАгентаПоПредметуРасчета);
	КонецЕсли; 
	ПараметрыФормы.Вставить("ЭтоВерсияФФД105",        ЭтоВерсияФФД105);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПризнакАгентаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	
	ОткрытьФорму("Обработка.ПечатьЧека.Форма.РеквизитыАгента", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура ПризнакАгентаЗавершение(Значение, Параметры) Экспорт
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Параметры.Элемент, Значение);
	
	Параметры.Элемент.ПризнакАгентаСтрокой = ПризнакАгентаПоПредметуРасчетаСтрокой(Значение.ПризнакАгента);
	
	Если ТипЗнч(Параметры.Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ЗаполнитьЗначенияСвойств(
			ПараметрыОперацииФискализацииЧека, 
			Значение, 
			"ПризнакАгента, ДанныеАгента, ДанныеПоставщика");
			
		// Если признак агента установлен в шапке то по каждой строке он должен совпадать
		Если ЗначениеЗаполнено(Значение.ПризнакАгента) Тогда
			Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
				Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
					ПозицияЧека.Вставить("ПризнакАгентаПоПредметуРасчета", Значение.ПризнакАгента);
					ПозицияЧека.Вставить("ДанныеАгента",                   Значение.ДанныеАгента);
					ПозицияЧека.Вставить("ДанныеПоставщика",               Значение.ДанныеПоставщика);
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьТаблицаТоваров();
		КонецЕсли; 
	Иначе
		Параметры.Элемент.ПризнакАгентаПоПредметуРасчета = Значение.ПризнакАгента;
		
		ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[Параметры.Элемент.НомерСтроки-1];
		Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
			ПозицияЧека.Вставить("ПризнакАгентаПоПредметуРасчета", Значение.ПризнакАгента);
			ПозицияЧека.Вставить("ДанныеАгента",                   Значение.ДанныеАгента);
			ПозицияЧека.Вставить("ДанныеПоставщика",               Значение.ДанныеПоставщика);
		КонецЕсли;
		
		Если Значение.ПризнакАгента <> ПараметрыОперацииФискализацииЧека.ПризнакАгента
			ИЛИ СравнитьСтруктурыРекурсивно(Значение.ДанныеАгента, ПараметрыОперацииФискализацииЧека.ДанныеАгента).Количество() <> 0
			ИЛИ СравнитьСтруктурыРекурсивно(Значение.ДанныеПоставщика, ПараметрыОперацииФискализацииЧека.ДанныеПоставщика).Количество() <> 0 Тогда
			
			Если ПараметрыОперацииФискализацииЧека.ПозицииЧека.Количество() > 1 Тогда
			
				ПараметрыОперацииФискализацииЧека.ПризнакАгента    = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПустаяСсылка");
				ПараметрыОперацииФискализацииЧека.ДанныеАгента     = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента();
				ПараметрыОперацииФискализацииЧека.ДанныеПоставщика = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
				
				ЕстьИнформацияОбАгентахПоСтрокам = ЗначениеЗаполнено(Значение.ПризнакАгента);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(
					ПараметрыОперацииФискализацииЧека, 
					Значение, 
					"ПризнакАгента, ДанныеАгента, ДанныеПоставщика");
			
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОперацииФискализацииЧека, "ПризнакАгента, ДанныеАгента, ДанныеПоставщика");
			
			ПризнакАгентаСтрокой = ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента);
		Иначе
			ЕстьИнформацияОбАгентахПоСтрокам = Ложь;
			Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
				Если ЗначениеЗаполнено(ПозицияЧека.ПризнакАгентаПоПредметуРасчета)
					И   (ПозицияЧека.ПризнакАгентаПоПредметуРасчета <> ПараметрыОперацииФискализацииЧека.ПризнакАгента
					ИЛИ СравнитьСтруктурыРекурсивно(Значение.ДанныеАгента, ПараметрыОперацииФискализацииЧека.ДанныеАгента).Количество() <> 0
					ИЛИ СравнитьСтруктурыРекурсивно(Значение.ДанныеПоставщика, ПараметрыОперацииФискализацииЧека.ДанныеПоставщика).Количество() <> 0) Тогда
					
					ЕстьИнформацияОбАгентахПоСтрокам = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПредставлениеЧека();
	
	УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Истина;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента)
	Возврат Обработки.ПечатьЧека.ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента);
КонецФункции 

&НаКлиенте
Процедура РедактированиеРеквизитовКассира()
	ДанныеКассира = Новый Структура("Кассир, КассирИНН");
	ЗаполнитьЗначенияСвойств(ДанныеКассира, ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРеквизитовКассираЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПечатьЧека.Форма.РеквизитыКассира", ДанныеКассира, ЭтотОбъект, ,,,ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеРеквизитовКассираЗавершение(РеквизитыКассира, Параметры) Экспорт
	Если ТипЗнч(РеквизитыКассира) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКассира);
	
	КассирПредставление = ПредставлениеКассира(Кассир, КассирИНН);
	
	ЗаполнитьЗначенияСвойств(ПараметрыОперацииФискализацииЧека, ЭтотОбъект, "Кассир, КассирИНН");
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть(Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЧекКоррекции 
			И Объект.КоррекцияПоПредписанию 
			И НЕ ЗначениеЗаполнено(Объект.НомерПредписания) Тогда
		ТекстСообщения = "";
		ВидСообщения   = "Заполнение";
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Номер предписания налогового органа",,,ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерПредписания", "Объект", Отказ);
	КонецЕсли; 
	
	Если Объект.ЧекКоррекции 
		И НЕ ЗначениеЗаполнено(Объект.КорректируемыйДокумент) 
		И НЕ ЗначениеЗаполнено(Объект.ДатаКоррекции) Тогда
		ТекстСообщения = "";
		ВидСообщения   = "Заполнение";
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Дата коррекции",,,ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "ДатаКоррекции", "Объект", Отказ);
	КонецЕсли;
	
	ПараметрыОбъекта = МенеджерОборудованияБП.НовыйПараметрыПроверкиЗаполнения();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	МенеджерОборудованияБП.ОбработкаПроверкиЗаполненияПечатьЧека(ПараметрыОбъекта, Истина, Отказ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВидОперации = Форма.ПараметрыОперацииФискализацииЧека.ТипРасчета;
	
	ВидОперацииПриход = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	ВидОперацииРасход = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
	
	Элементы.ТаблицаТоваровИндексАкцизнойМарки.Видимость = Форма.ШтрихкодыУпаковок.Количество();
	
	// Для ФФД ниже 1.1 можно делать чек коррекции только для операций Приход и Расход.
	Элементы.ЧекКоррекции.Видимость = Форма.ЭтоВерсияФФД11 
		ИЛИ ВидОперации = ВидОперацииПриход ИЛИ ВидОперации = ВидОперацииРасход;
	
	Элементы.ГруппаКоррекция.Видимость         = Объект.ЧекКоррекции;
	Элементы.ПризнакАгента.Видимость           = НЕ Форма.ЕстьИнформацияОбАгентахПоСтрокам;
	
КонецПроцедуры 

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборТаможеннойДекларацииЗавершение(Значение, ДополнительныеПараметры) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрационныйНомерТаможеннойДекларации = РегистрационныйНомерТаможеннойДекларации(Значение);
	
	ДополнительныеПараметры.Элемент.НомерТаможеннойДекларации = РегистрационныйНомерТаможеннойДекларации;
	
	ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[ДополнительныеПараметры.Элемент.НомерСтроки-1];
	Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
		ПозицияЧека.Вставить("НомерТаможеннойДекларации", РегистрационныйНомерТаможеннойДекларации);
	КонецЕсли; 
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РегистрационныйНомерТаможеннойДекларации(ТаможеннаяДекларация)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаможеннаяДекларация, "РегистрационныйНомер");

КонецФункции 

&НаСервереБезКонтекста
Функция КодСтраныПроисхождения(Страна)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Код");

КонецФункции 

&НаКлиенте
Процедура КорректируемыйДокументПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	
		УстановитьДокументНаСервере(ДополнительныеПараметры.КлючЗаписи);
	
	КонецЕсли; 

КонецПроцедуры


&НаСервереБезКонтекста
Функция ЕстьИсправленияПоДокументу(КлючЗаписи)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", КлючЗаписи.ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ДокументОснование = &ДокументСсылка
	|	И ФискальныеОперации.КорректируемыйДокумент = &ДокументСсылка";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции 

#КонецОбласти