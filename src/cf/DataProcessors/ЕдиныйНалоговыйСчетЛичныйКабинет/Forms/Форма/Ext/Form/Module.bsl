#Область ОписаниеПеременных

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ШагПрогрессора;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем МенеджерКриптографии Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПоследовательностьМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПоследовательностьМетодов();
	СписокСправочников        = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СписокСправочников();
	
	Объект.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ИнтервалИсполненияМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ИнтервалИсполненияМетодов();
	
	МестоХраненияКлюча = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ОпределитьМестоХраненияКлюча();
	
	ТекущаяОрганизация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(Параметры.Организация);
	
	// Определяем организацию по-умолчанию
	Если НЕ ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяОрганизация();
	Иначе
		Объект.Организация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(ТекущаяОрганизация);
	КонецЕсли;
	
	// ЛК предоставляет данные только в целом по головной организации
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		Объект.Организация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(ТекущаяОрганизация);
		СохранитьПервичнуюНастройкуПодключения();
	КонецЕсли;
	
	Элементы.Баннер.Видимость      = Ложь;
	ТребуетсяОбновлениеДанныхФормы = Истина;
	ОбновлениеДанныхДоступно       = Истина;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПроверитьДоступностьСервиса();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЕдиныйНалоговыйСчетЛичныйКабинет_ОбновленыДанные"
		И Параметр = Объект.Организация И Источник = УникальныйИдентификатор Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияОтветаНаВопросОбОбновленииФормы", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Получены новые данные личного кабинета ЕНС.
				|Обновить данные формы?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияДанныеОтсутствуютОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияНеподключеннаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Объект.Организация, ЭтотОбъект, , , , , Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияНесогласиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПодключенДокументооборотСКонтролирующимОрганом И ЕстьДоступКЭДО Тогда
		Письмо = ПодготовитьПисьмоВФНС();
		Если Письмо <> Неопределено Тогда
			СтруктураПараметров = Новый Структура("Ключ", Письмо);
			ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", СтруктураПараметров);
		КонецЕсли;
	Иначе
		ПерейтиПоНавигационнойСсылке("https://www.nalog.gov.ru/rn77/service/unblock/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияДанныеНеконсистентныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСверкиПриИзменении(Элемент)
	
	РежимСверкиОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаНеНайденыСведенияОСертификатеЧтоДелатьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаЗаявленийАбонентаКлиент.ОткрытьФормуПомощи(ЭтотОбъект,,,"https://its.1c.ru/db/elreps#content:63:hdoc");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияОшибкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ДатаНачала",               Объект.Период);
	ПараметрыЖурнала.Вставить("ДатаОкончания",            ТекущаяДата());
	ПараметрыЖурнала.Вставить("СобытиеЖурналаРегистрации",ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.СобытиеЖурналаРегистрации());
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ОткрытьНастройкиИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнитьКошелек(Команда)
	
	Если ПоддерживаетсяВводПлатежныхДокументов Тогда
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиентПереопределяемый.СоздатьПлатежныйДокумент(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаннерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "СогласиеНаРаскрытиеНалоговойТайны" Тогда
		СоздатьСогласиеНаРаскрытиеНалоговойТайны();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастройкиЛичногоКабинетаЕНС" Тогда
		ОткрытьНастройкиИнтеграции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗаявленияИЗапросы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сверки"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеУведомления(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаОтмену(Команда)
	
	СоздатьУведомлениеОСпецрежимахНалогообложения("ОтменаЗачетаНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОСальдоЕНС(Команда)
	СоздатьЗапросИОН("СправкаОНаличииСальдо");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОбИсполненииОбязанностей(Команда)
	СоздатьЗапросИОН("ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОПринадлежностиСуммЕНП(Команда)
	СоздатьЗапросИОН("СправкаОПринадлежностиСумм");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомлениеОбИсчисленныхСУммах(Команда)
	СоздатьУведомлениеОСпецрежимахНалогообложения("ИсчисленныеСуммыНалогов");
КонецПроцедуры

&НаКлиенте
Процедура ЗапросАктаСверки(Команда)
	СоздатьЗапросИОН("ПредставлениеАктовСверкиРасчетов");
КонецПроцедуры

&НаКлиенте
Процедура КнВсеОбязательства(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ВсеОбязательства");
КонецПроцедуры

&НаКлиенте
Процедура КнЗадолженность(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Задолженность");
КонецПроцедуры

&НаКлиенте
Процедура КнПредстоящиеПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПредстоящиеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура КнЗарезервировано(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Зарезервировано");
КонецПроцедуры

&НаКлиенте
Процедура КнОперацииЕНП(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ОперацииЕНП");
КонецПроцедуры

&НаКлиенте
Процедура КнИсторияЕНС(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ИсторияЕНС");
КонецПроцедуры

&НаКлиенте
Процедура КнПроцедурыВзыскания(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПроцедурыВзыскания");
КонецПроцедуры

&НаКлиенте
Процедура КнПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Платежи");
КонецПроцедуры

&НаКлиенте
Процедура КнОтчеты(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Отчеты");
КонецПроцедуры

&НаКлиенте
Процедура КнНачисления(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Начисления");
КонецПроцедуры

&НаКлиенте
Процедура КнПениШтрафы(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПениШтрафы");
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдо(Команда)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВозвратЕдиногоНалоговогоПлатежа", НСтр("ru = 'Заявление о распоряжении путем возврата'"));
	СписокКоманд.Добавить("ЗаявлениеОЗачетеНалога", НСтр("ru = 'Заявление о распоряжении путем зачета в счет предстоящей обязанности'"));
	
	Обработчик = Новый ОписаниеОповещения("РаспорядитьсяСальдоЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Обработчик, СписокКоманд, Элементы.РаспорядитьсяСальдо);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	
	Коллекция = ТекущийЭлемент;
	Колонка   = Коллекция.ТекущийЭлемент;
	
	Если СтрНайти(Команда.Имя, "Убыв") > 0 тогда
		СортироватьНаСервере(Коллекция.Имя, Колонка.Имя, "Убыв");
	Иначе
		СортироватьНаСервере(Коллекция.Имя, Колонка.Имя, "Возр");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаПлатежи

&НаКлиенте
Процедура ТаблицаПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПлатежи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаПлатежиВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаПлатежиДокументИсточникГиперссылка"
		И (ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) Или ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка)) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) И Не ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументИсточникСсылка);
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) И ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументОтраженияВУчетеСсылка);
		Иначе
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ТекущиеДанные.ДокументИсточникСсылка,
				Строка(ТипЗнч(Элементы.ТаблицаПлатежи.ТекущиеДанные.ДокументИсточникСсылка)));
			СписокВыбора.Добавить(ТекущиеДанные.ДокументОтраженияВУчетеСсылка,
				Строка(ТипЗнч(Элементы.ТаблицаПлатежи.ТекущиеДанные.ДокументОтраженияВУчетеСсылка)));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "ТаблицаПлатежиСумма"
		Или Поле.Имя = "ТаблицаПлатежиДокументИсточникПредставление")
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументИсточникСсылка);
	ИначеЕсли (Поле.Имя = "ТаблицаПлатежиДокументОтраженияВУчетеСумма"
		Или Поле.Имя = "ТаблицаПлатежиДокументИсточникПредставление")
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументОтраженияВУчетеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПлатежиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодПлатежи);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаПлатежи");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаПлатежи");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодПлатежи, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияПлатежиПриИзменении(Элемент)
	
	ПереключениеКомандПлатежиРасхождение(ОтборРасхожденияПлатежи = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаОтчеты

&НаКлиенте
Процедура ТаблицаОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтчеты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаОтчетыВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаОтчетыДокументИсточникГиперссылка"
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегОтчСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументРегОтчСсылка);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОтчетыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодОтчеты);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаОтчеты");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаОтчеты");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодОтчеты, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияОтчетыПриИзменении(Элемент)
	
	ПереключениеКомандОтчетыРасхождение(ОтборРасхожденияОтчеты = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаНачисления

&НаКлиенте
Процедура ТаблицаНачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНачисления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаНачисленияВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 на сумму %2'");
	Если Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияФНСГиперссылка"
			Или Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияУчетГиперссылка" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоДанныеФНС = (Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияФНСГиперссылка");
		Если Не (ЭтоДанныеФНС Или ТекущиеДанные.НесколькоОснованийУчет) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ПоказатьЗначение(, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			СписокВыбора = Новый СписокЗначений;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СписокВыбора.Добавить(?(ЗначениеЗаполнено(НайденнаяСтрока.Ссылка), НайденнаяСтрока.Ссылка, Неопределено),
					СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
			КонецЦикла;
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаНачисленияПредставлениеКБКГиперссылка" Тогда
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаКБК.Найтистроки(СтруктураПоиска);
		СписокВыбора = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(Неопределено,
				СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодНачисления);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаНачисления");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаНачисления");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодНачисления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияНачисленияПриИзменении(Элемент)
	
	ПереключениеКомандНачисленияРасхождение(ОтборРасхожденияНачисления = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаПениШтрафы

&НаКлиенте
Процедура ТаблицаПениШтрафыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПениШтрафы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаПениШтрафыВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 на сумму %2'");
	Если Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияФНСГиперссылка"
			Или Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияУчетГиперссылка" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоДанныеФНС = (Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияФНСГиперссылка");
		Если Не (ЭтоДанныеФНС Или ТекущиеДанные.НесколькоОснованийУчет) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ПоказатьЗначение(, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			СписокВыбора = Новый СписокЗначений;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СписокВыбора.Добавить(?(ЗначениеЗаполнено(НайденнаяСтрока.Ссылка), НайденнаяСтрока.Ссылка, Неопределено),
					СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
			КонецЦикла;
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаПениШтрафыПредставлениеКБКГиперссылка" Тогда
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаКБК.Найтистроки(СтруктураПоиска);
		СписокВыбора = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(Неопределено,
				СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияПениШтрафыПриИзменении(Элемент)
	
	ПереключениеКомандПениШтрафыРасхождение(ОтборРасхожденияПениШтрафы = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПениШтрафыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодПениШтрафы);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаПениШтрафы");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаПениШтрафы");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодПениШтрафы, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Единый налоговый счет'");
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Единый налоговый счет (%1)'"),
			Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

&НаСервере
Функция ПараметрыСбораДанных()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",                   Объект.Организация);
	ПараметрыЗаполнения.Вставить("Период",                        Объект.Период);
	ПараметрыЗаполнения.Вставить("БлижайшийСрокУплаты",           БлижайшийСрокУплаты);
	ПараметрыЗаполнения.Вставить("РежимСверкиДоступен",           РежимСверкиДоступен);
	ПараметрыЗаполнения.Вставить("АдресХранилищаСерверныхДанных", АдресХранилищаСерверныхДанных);
	
	Если ИзмененПериодТаблицы Тогда
		ПараметрыЗаполнения.Вставить("СтруктураДанных", СформироватьСтруктуруДанныхПриИзмененииПериода());
	Иначе
		ПараметрыЗаполнения.Вставить("СтруктураДанных", СформироватьСтруктуруДанных());
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ВыполнитьСборДанныхНаСервере()
	
	Если ИзмененПериодТаблицы Тогда
		ОформитьДоступностьПриОбновленииСверки(Ложь);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыЗаполнения = ПараметрыСбораДанных();
	
	НаименованиеЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных'");
	Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьДанные",
		ПараметрыЗаполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанных()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаСальдо",              ТаблицаСальдо.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаСальдоКНО",           ДанныеФормыВЗначение(ТаблицаСальдоКНО, Тип("ДеревоЗначений")));
	СтруктураДанных.Вставить("ТаблицаПредстоящиеПлатежи",  ТаблицаПредстоящиеПлатежи.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаЗарезервировано",     ТаблицаЗарезервировано.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаОперацииЕНП",         ТаблицаОперацииЕНП.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаИсторияЕНС",          ТаблицаИсторияЕНС.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаПроцедурыВзыскания",  ТаблицаПроцедурыВзыскания.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаПлатежи",             ТаблицаПлатежи.Выгрузить());
	СтруктураДанных.Вставить("ПериодПлатежи",              ПериодПлатежи);
	СтруктураДанных.Вставить("ТаблицаОтчеты",              ТаблицаОтчеты.Выгрузить());
	СтруктураДанных.Вставить("ПериодОтчеты",               ПериодОтчеты);
	СтруктураДанных.Вставить("ТаблицаНачисления",          ТаблицаНачисления.Выгрузить());
	СтруктураДанных.Вставить("ПериодНачисления",           ПериодНачисления);
	СтруктураДанных.Вставить("ТаблицаПениШтрафы",          ТаблицаПениШтрафы.Выгрузить());
	СтруктураДанных.Вставить("ПериодПениШтрафы",           ПериодПениШтрафы);
	СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
	СтруктураДанных.Вставить("ДанныеБлижайшегоПлатежа",    ДанныеБлижайшегоПлатежа);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанныхПриИзмененииПериода()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ИмяТаблицыСИзмененнымПериодом, ЭтотОбъект[ИмяТаблицыСИзмененнымПериодом].Выгрузить());
	
	Если ИмяТаблицыСИзмененнымПериодом = "ТаблицаПлатежи" Тогда
		СтруктураДанных.Вставить("ПериодПлатежи", ПериодПлатежи);
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаОтчеты" Тогда
		СтруктураДанных.Вставить("ПериодОтчеты", ПериодОтчеты);
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаНачисления" Тогда
		СтруктураДанных.Вставить("ПериодНачисления",           ПериодНачисления);
		СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаПредстоящиеПлатежи",  ТаблицаПредстоящиеПлатежи.Выгрузить());
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаПениШтрафы" Тогда
		СтруктураДанных.Вставить("ПериодПениШтрафы",           ПериодПениШтрафы);
		СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура СобратьВсеДанныеЕдиногоНалоговогоСчета() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	АдресХранилищаСерверныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Интервал = ?(ЭтоВебКлиент, 1, 0.5);
	ПодключитьОбработчикОжидания("Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета()
	
	СобратьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчета()
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Результат = ВыполнитьСборДанныхНаСервере();
	
	Если Результат.Статус <> "Ошибка" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СобратьДанныеЕдиногоНалоговогоСчетаЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчетаЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		АдресХранилища = ДлительнаяОперация.АдресРезультата;
		Если ИзмененПериодТаблицы Тогда
			ЗагрузитьРезультатНаСервереПриИзмененииПериода();
			ИзмененПериодТаблицы = Ложь;
		Иначе
			ЗагрузитьРезультат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СброситьДаные();
		
		ЗагрузитьДаные(Результат.СтруктураДанных);
		
		ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету();
		
		ПолучитьДатуПоследнегоОбновления();
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат()
	
	ЗагрузитьРезультатНаСервере();
	ОтрисоватьДерево();
	Если ПоказатьОповещение Тогда
		Пояснение = "";
		Если ДанныеДляЗагрузкиОтсутствуют Тогда
			Пояснение = НСтр("ru = 'Данные для загрузки отсутствуют'");
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление данных ЕНС завершено'"),
			"e1cib/app/Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет",
			Пояснение);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Обновление данных ЕНС завершено. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		ПоказатьОповещение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервереПриИзмененииПериода()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	СтруктураДанных = Результат.СтруктураДанных;
	
	ЭтотОбъект[ИмяТаблицыСИзмененнымПериодом].Загрузить(СтруктураДанных[ИмяТаблицыСИзмененнымПериодом]);
	
	Если ИмяТаблицыСИзмененнымПериодом = "ТаблицаНачисления"
			Или ИмяТаблицыСИзмененнымПериодом = "ТаблицаПениШтрафы" Тогда
		ТаблицаОснованияНачислений.Загрузить(СтруктураДанных.ТаблицаОснованияНачислений);
		ТаблицаКБК.Загрузить(СтруктураДанных.ТаблицаКБК);
	КонецЕсли;
	
	ОформитьДоступностьПриОбновленииСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрисоватьДерево()
	
	КоллекцияЭлементовДерева = ТаблицаСальдоКНО.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Строка.Развернуть Тогда
			Элементы.ТаблицаСальдоКНОЗадолженность.Развернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Развернуть(ИдентификаторСтроки);
		Иначе
			Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторСтроки);
			ПодчиненнаяКоллекцияЭлементовДерева = Строка.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненнаяКоллекцияЭлементовДерева Цикл
				ИдентификаторПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
				Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторПодчиненнойСтроки);
				Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторПодчиненнойСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьДоступностьПриОбновленииСверки(ДоступностьДанных = Истина)
	
	Элементы.Организация.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.РежимСверки.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.Обновить.Доступность       = ДоступностьДанных;
	Элементы.Настройки.Доступность      = ДоступностьДанных;
	
	Элементы.КнПлатежи.Доступность    = ДоступностьДанных;
	Элементы.КнОтчеты.Доступность     = ДоступностьДанных;
	Элементы.КнНачисления.Доступность = ДоступностьДанных;
	Элементы.КнПениШтрафы.Доступность = ДоступностьДанных;
	
	Элементы.СтраницаРасшифровкаПлатежи.ТолькоПросмотр    = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаОтчеты.ТолькоПросмотр     = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаНачисления.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаПениШтрафы.ТолькоПросмотр = Не ДоступностьДанных;
	
	Элементы.ДекорацияОжиданиеРасшифровкаПлатежи.Видимость    = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаОтчеты.Видимость     = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаНачисления.Видимость = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаПениШтрафы.Видимость = Не ДоступностьДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеЗакрытияНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеДокументооборотаСФНС()
	
	ПодключенДокументооборотСКонтролирующимОрганом =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина);
							
	ПодключенДокументооборотСКонтролирующимОрганомДляПользователя =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина, Истина);
							
	ЕстьДоступКЭДО = ПодключенДокументооборотСКонтролирующимОрганомДляПользователя
		И ИнтерфейсыВзаимодействияБРО.УТекущегоПользователяЕстьДоступКЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеИнтеграции()
	
	СостояниеПодключения = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
	ИнтеграцияПодключена  = СостояниеПодключения.ИнтеграцияПодключена;
	ФоновыйРежимПодключен = СостояниеПодключения.ИспользоватьФоновыйРежим;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизации()
	
	УчетнаяЗапись                             = "";
	ОтпечатокСертификата                      = "";
	ИспользуетсяДоверенностьНаПолучениеДанных = Ложь;
	НомерМашиночитаемойДоверенности           = "";
	ЛицензияПросрочена                        = Ложь;

	Если ПодключенДокументооборотСКонтролирующимОрганом И ЕстьДоступКЭДО Тогда
		УчетнаяЗаписьОтпечатокСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьОтпечатокСертификата()
	
	УчетнаяЗапись = ИнтерфейсыВзаимодействияБРОВызовСервера.УчетнаяЗаписьОрганизации(Объект.Организация,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.СпецоператорыСвязи.КалугаАстрал));
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда 
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатПользователя = Мультирежим.СертификатПользователя(УчетнаяЗапись);
	Если СертификатПользователя <> Неопределено Тогда
		ОтпечатокСертификата = СертификатПользователя.Отпечаток;
	КонецЕсли;
	
	ЛицензияПросрочена =
		КонтекстЭДОСервер.ЛицензияПросрочена(УчетнаяЗапись);
		
	Если ЛицензияПросрочена Тогда
		СообщениеОбОшибке = НСтр("ru = 'Просрочена лицензия 1С-Отчетности'");
		ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаЛицензия(Объект.Организация, СообщениеОбОшибке);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Просрочена лицензия 1С-Отчетности. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеОбработчикиСобытий

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОшибкаРаботыСервиса              = Ложь;
	ОбслуживаемаяОшибкаРаботыСервиса = Ложь;
	КодОшибкиОбновлениеДанных        = 0;
	ОбновлениеДанныхДоступно         = Истина;
	ДанныеДляЗагрузкиОтсутствуют     = Ложь;
	
	ПереключитьСтраницыПередОбработкойДанных();
	
	СохранитьПервичнуюНастройкуПодключения();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияНастройкиНаСервере()
	
	ТребуетсяПереключение = ДатаПоследнегоОбновления <>
			ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
	Если ТребуетсяПереключение Тогда
		ТребуетсяОбновлениеДанныхФормы = Ложь;
		ПереключитьСтраницыПередОбработкойДанных();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрекратитьОбновлениеДанных()
	
	ПереключитьСтраницыПередОбработкойДанных();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	РегистрацияВНалоговомОргане = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяРегистрацияВНалоговомОргане(Объект.Организация);
	ИНН = ?(ЗначениеЗаполнено(Объект.Организация), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН"), "");
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыПереопределяемый.ПоддерживаетсяВводПлатежныхДокументов(
		ПоддерживаетсяВводПлатежныхДокументов, Объект.Организация);
	
	ДанныеОтсутствуют = Истина;
	
	ПоддерживаетсяОбработкаДанныхПослеЗагрузки =
		ЕдиныйНалоговыйСчетЛичныйКабинет.ПоддерживаетсяОбработкаДанныхПослеЗагрузки();
	
	ПроверитьПодключениеДокументооборотаСФНС();
	ПроверитьСостояниеИнтеграции();
	ОбновитьИнформационнуюПанельБРО();
	ЗаполнитьСписокДоступныхОрганизаций();
	
	Если ПодключенДокументооборотСКонтролирующимОрганом Тогда
		ПолучитьДатуПоследнегоОбновления();
		ОформитьБаннер();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьПериодыПоУмолчанию();
	
	ОчиститьТаблицыДанных();
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	УправлениеФормой();
	ОформитьДоступностьПриОбновленииСверки();
	
	ТребуетсяОбновлениеДанныхФормы = Ложь;
	
	АдресХранилищаСерверныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПервичнуюНастройкуПодключения()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СостоянияПодключенияЕНС.СохранитьПервичнуюНастройкуПодключения(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхОрганизаций()
	
	Таблица = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ДоступныеОрганизации();
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДатуПоследнегоОбновления()
	
	ДатаПоследнегоОбновления =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
	ДанныеКонсистенты =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДанныеКонсистенты(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету()
	
	ДанныеОтсутствуют = Не ЗначениеЗаполнено(ТаблицаСальдо);
	
	Если Не ДанныеОтсутствуют Тогда
		
		ОсновнаяЗапись = ТаблицаСальдо[0];
		
		ЕстьПениШтрафы           = ОсновнаяЗапись.ПениШтрафы > 0;
		ЕстьПредстоящиеПлатежи   = ОсновнаяЗапись.ПредстоящиеПлатежи > 0;
		ЕстьМерыВзыскания        = ОсновнаяЗапись.ЕстьМерыВзыскания;
		ЕстьЗадолженность        = ОсновнаяЗапись.СальдоЕНС < 0;
		ЕстьРезервы              = ОсновнаяЗапись.Зарезервировано > 0;
		
		БлижайшийСрокУплаты = ДанныеБлижайшегоПлатежа.БлижайшийСрокУплаты;
		БлижайшийПлатеж     = ДанныеБлижайшегоПлатежа.БлижайшийПлатеж;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДаные(СтруктураДанных)
	
	ТаблицаСальдо.Загрузить(СтруктураДанных.ТаблицаСальдо);
	ЗначениеВДанныеФормы(СтруктураДанных.ТаблицаСальдоКНО, ТаблицаСальдоКНО);
	ТаблицаПредстоящиеПлатежи.Загрузить(СтруктураДанных.ТаблицаПредстоящиеПлатежи);
	ТаблицаПредстоящиеПлатежи.Сортировать("СрокУплаты Возр, ВидНалогаКод Возр");
	ТаблицаЗарезервировано.Загрузить(СтруктураДанных.ТаблицаЗарезервировано);
	ТаблицаЗарезервировано.Сортировать("ДатаОперации Возр");
	ТаблицаОперацииЕНП.Загрузить(СтруктураДанных.ТаблицаОперацииЕНП);
	ТаблицаОперацииЕНП.Сортировать("ДатаОперации Убыв, Порядок Возр");
	ТаблицаИсторияЕНС.Загрузить(СтруктураДанных.ТаблицаИсторияЕНС);
	ТаблицаИсторияЕНС.Сортировать("ДатаОбновленияСальдо Убыв");
	ТаблицаПроцедурыВзыскания.Загрузить(СтруктураДанных.ТаблицаПроцедурыВзыскания);
	ТаблицаПроцедурыВзыскания.Сортировать("ДокументОснованиеДата Убыв");
	ТаблицаПлатежи.Загрузить(СтруктураДанных.ТаблицаПлатежи);
	ТаблицаПлатежи.Сортировать("ДатаОперации Убыв");
	ТаблицаОтчеты.Загрузить(СтруктураДанных.ТаблицаОтчеты);
	ТаблицаОтчеты.Сортировать("ДатаОперации Убыв");
	ТаблицаНачисления.Загрузить(СтруктураДанных.ТаблицаНачисления);
	ТаблицаОснованияНачислений.Загрузить(СтруктураДанных.ТаблицаОснованияНачислений);
	ТаблицаПениШтрафы.Загрузить(СтруктураДанных.ТаблицаПениШтрафы);
	ДанныеБлижайшегоПлатежа = СтруктураДанных.ДанныеБлижайшегоПлатежа;
	
	ТребуетсяОбновлениеДанныхФормы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СброситьДаные()
	
	ДанныеОтсутствуют      = Истина;
	ЕстьПредстоящиеПлатежи = Ложь;
	ЕстьМерыВзыскания      = Ложь;
	ЕстьПениШтрафы         = Ложь;
	ЕстьЗадолженность      = Ложь;
	ЕстьРезервы            = Ложь;
	
	ОчиститьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДанных()
	
	ТаблицаСальдо.Очистить();
	ТаблицаСальдоКНО.ПолучитьЭлементы().Очистить();
	ТаблицаПредстоящиеПлатежи.Очистить();
	ТаблицаЗарезервировано.Очистить();
	ТаблицаОперацииЕНП.Очистить();
	ТаблицаИсторияЕНС.Очистить();
	ТаблицаПроцедурыВзыскания.Очистить();
	ТаблицаПлатежи.Очистить();
	ТаблицаОтчеты.Очистить();
	ТаблицаНачисления.Очистить();
	ТаблицаПениШтрафы.Очистить();
	ТаблицаОснованияНачислений.Очистить();
	ТаблицаКБК.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередОбработкойДанных()
	
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Элементы.ГруппаДатаАктуальности.Видимость              = Ложь;
	Элементы.БаннерРегламентныеРаботы.Видимость            = Ложь;
	Элементы.БаннерПопыткаПолучитьДанныеИППоМЧД.Видимость  = Ложь;
	Элементы.БаннерМЧДНеНайдено.Видимость                  = Ложь;
	Элементы.БаннерПревышеноКоличествоЗапросов.Видимость   = Ложь;
	Элементы.БаннерПродлитеДоговорНа1СОтчетность.Видимость = Ложь;
	Элементы.БаннерОшибкаИнтернетСоединения.Видимость      = Ложь;
	Элементы.БаннерНеНайденыСведенияОСертификате.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередПолучениемДанных()
	
	ТребуетсяОбновлениеДанныхФормы = Истина;
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаПромежуточная;
	Элементы.ГруппаДатаАктуальности.Видимость     = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьОтображениеПоказателей(ИмяРаздела)
	
	ТекущаяСтраницаРасшифровки  = Элементы["СтраницаРасшифровка" + ИмяРаздела];
	Элементы.ГруппаРасшифровкаДанных.ТекущаяСтраница = ТекущаяСтраницаРасшифровки;
	
	Если РежимСверки Тогда
		ПереключениеКомандРасхождение(Неопределено, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьНаСервере(КоллекцияИмя, КолонкаИмя, НаправлениеСортировки) 
	
	КоллекцияПутьКДанным = Элементы[КоллекцияИмя].ПутьКДанным;
	КолонкаПутьКДанным   = СтрРазделить(Элементы[КолонкаИмя].ПутьКДанным, ".", Ложь)[1];
	
	ЭтотОбъект[КоллекцияПутьКДанным].Сортировать(КолонкаПутьКДанным + " " + НаправлениеСортировки);
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеВыполняетсяВПараллельномСеансе()
	
	ОбновлениеВыполняетсяВПараллельномСеансе = Ложь;
	
	ОписаниеКлючаЗаписи = Новый Структура("Организация", Объект.Организация);
	КлючЗаписи = РегистрыСведений.СостоянияОбновленияЕНС.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи,, УникальныйИдентификатор);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Обновление данных уже производится в параллельном сеансе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Обновление данных уже производится в параллельном сеансе. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		ОбновлениеВыполняетсяВПараллельномСеансе = Истина;
	КонецПопытки;
	
	Возврат ОбновлениеВыполняетсяВПараллельномСеансе;
	
КонецФункции

&НаСервере
Процедура СнятьБлокировкуОбновления()
	
	ОписаниеКлючаЗаписи = Новый Структура("Организация", Объект.Организация);
	КлючЗаписи = РегистрыСведений.СостоянияОбновленияЕНС.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииОбновления()
	
	Оповестить("ЕдиныйНалоговыйСчетЛичныйКабинет_ОбновленыДанные", Новый Структура("Организация", Объект.Организация), УникальныйИдентификатор)
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УправлениеФормой()
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область АвторизацияИПолучениеДанных

&НаКлиенте
Процедура ОбновитьДанныеЕдиногоНалоговогоСчета()
	
	Если Не ДоступноОбновлениеСервиса() Тогда
		Если ЛицензияПросрочена Тогда
			ОформитьОшибкуРаботыСервиса();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещение = Истина;
	ПереключитьСтраницыПередОбработкойДанных();
	
	ШагПрогрессора = 0;
	УстановитьПрогрессор();
	
	АдресАрхивнойКопииДанных = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодготовкиБазыДляОбновления", ЭтотОбъект);
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПередОбновлениемДанныхЕдиногоНалоговогоСчета(Оповещение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодготовкиБазыДляОбновления(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
			
		ОповещениеПослеПолученияСертификата = Новый ОписаниеОповещения(
			"ПослеПолученияСертификата", ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура("ОповещениеПослеПолученияСертификата", ОповещениеПослеПолученияСертификата);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
			
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		МенеджерКриптографии = Результат.МенеджерКриптографии;
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			СертификатНачалоВыбораЗавершение(
				Новый Структура("Выполнено, ВыбранноеЗначение", Истина, ОтпечатокСертификата),
				ВходящийКонтекст);
		Иначе
			ВыбратьСертификатПодписанта(ВходящийКонтекст);
		КонецЕсли;
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПодписанта(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатНачалоВыбораЗавершение", ЭтотОбъект, ВходящийКонтекст);

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, МестоХраненияКлюча, Сертификат, "MY",,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбораЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		Если ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Структура") Тогда
			Сертификат = Результат.ВыбранноеЗначение.Отпечаток;
		ИначеЕсли ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Строка") Тогда
			Сертификат = Результат.ВыбранноеЗначение;
		Иначе
			Для Каждого Стр Из Результат.ВыбранноеЗначение Цикл
				Сертификат = Стр.Отпечаток;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Сертификат",
			Сертификат);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСертификата",
			ВходящийКонтекст.ОповещениеПослеПолученияСертификата);
		
		Оповещение = Новый ОписаниеОповещения("НайтиСертификатПоОтпечаткуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(Оповещение, Сертификат, "MY", Ложь, Ложь, МенеджерКриптографии);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатПоОтпечаткуЗавершение(Результат, ВходящийКонтекст) Экспорт 
	
	Если Результат.Выполнено
		И Результат.СертификатНайден Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписанта = Результат.СвойстваСертификата;
		
		СвойстваВладельца = КонтекстЭДОКлиент.РазобратьСтрокуСубъекта(СертификатПодписанта.Владелец);
		ИспользуетсяДоверенностьНаПолучениеДанных =
			СвойстваВладельца.Получить("OID1_2_643_100_5") = Неопределено И СвойстваВладельца.Получить("OID1_2_643_100_1") = Неопределено
			И СвойстваВладельца.Получить("OGRN") = Неопределено И СвойстваВладельца.Получить("OGRNIP") = Неопределено;
		
		Если Не ИспользуетсяДоверенностьНаПолучениеДанных Тогда
			ИННИзСертификата = ДокументооборотСКОКлиентСервер.ИННИзСертификата(СвойстваВладельца, Истина, ЭтоЮридическоеЛицо);
			Если ИННИзСертификата <> ИНН Тогда
				ОформитьНедоступностьСертификата();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("OID1_2_643_100_3");
		Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
			ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("SNILS");
		КонецЕсли;
		ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС);
		
		Если ДоступноИспользованиеДоверенности() Тогда
			
			Оповещение = Новый ОписаниеОповещения("ИзвлечьИнформациюСертификата", ЭтотОбъект, ВходящийКонтекст);
			КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(Оповещение,
				СертификатПодписанта,
				Ложь,
				МенеджерКриптографии);
			
		КонецЕсли;
		
	ИначеЕсли Не Результат.СертификатНайден Тогда
		
		ОформитьНедоступностьСертификата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС)
	
	НомерМашиночитаемойДоверенности = "";
	Если Не ИспользуетсяДоверенностьНаПолучениеДанных Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМашиночитаемойДоверенности =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.НомерМашиночитаемойДоверенности(
			Новый Структура("Организация, СНИЛС",
				Объект.Организация, ВладелецЭЦПСНИЛС));
	
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьИнформациюСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписантаВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СертификатПодписанта);
		СертификатПодписантаВрем.Вставить("Сертификат", Результат.СтрокаBase64);
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, СертификатПодписантаВрем);
		
		СертификатПодписанта = Новый ФиксированнаяСтруктура(СертификатПодписантаВрем);
		
		ПредставлениеСертификата = ТегНачалоСертификата() + Символы.ВК + Результат.СтрокаBase64 + Символы.ВК + ТегКонецСертификата();
		СертификатВФорматеURL_encoded(ПредставлениеСертификата);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеПослеПолученияСертификата, Результат);
		
	Иначе
		
		ОформитьНедоступностьИнформацииСертификата();

	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СертификатВФорматеURL_encoded(ПредставлениеСертификата)
	
	СертификатПодписи = КодироватьСтроку(ПредставлениеСертификата, СпособКодированияСтроки.КодировкаURL);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТегНачалоСертификата() Экспорт
	
	Возврат "-----BEGIN CERTIFICATE-----";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТегКонецСертификата() Экспорт
	
	Возврат "-----END CERTIFICATE-----";
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		Оповещение = Новый ОписаниеОповещения("ПослеАвторизацииНаСервисеEnsIntegration", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.АвторизоватьсяНаСервисеEnsIntegration(Оповещение, ЭтотОбъект);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеАвторизацииНаСервисеEnsIntegration(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		ТребуетсяПодтверждениеУчетнойЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТребуетсяПодтверждениеУчетнойЗаписи", Ложь);
		Если ТребуетсяПодтверждениеУчетнойЗаписи Тогда
			
			ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст);
			
		Иначе
			
			РезультатАвторизации = Результат.РезультатАвторизации;
			
			УстановитьПрогрессор();
			
			ИспользуетсяАвторизацияСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатАвторизации, "ТокенПолучен", Ложь);
			Если ИспользуетсяАвторизацияСервиса Тогда
				ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			Иначе
				ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияИдентификаторЗапросаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПодписанияИдентификаторЗапросаПодтверждения(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияРегистрацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗапроситьПодтверждениеРегистрацииEnsIntegration(Оповещение, ЭтотОбъект, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияРегистрацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеАвторизацииНаСервисеEnsIntegration", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.АвторизоватьсяНаСервисеEnsIntegration(Оповещение, ЭтотОбъект);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияКлючаАвторизации", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПодписанияКлючаАвторизации(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияТокенаАвторизацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьТокенАвторизацииНаСервисеФНС(Оповещение, ЭтотОбъект, РезультатАвторизации, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		Если РезультатАвторизации.ТокенПолучен Тогда
			НачатьПолучениеДанныхЕдиногоНалоговогоСчета();
		КонецЕсли;
	
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДвоичныеДанныеКлюча(КлючДоступа)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, "UTF-8", , Символы.ПС);
	Текст.Записать(КлючДоступа);
	Текст.Закрыть();
	ДвоичныеДанныеКлюча = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеКлюча;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеДанныхЕдиногоНалоговогоСчета()
	
	ПолучитьДанныеЕдиногоНалоговогоСчета();
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеЕдиногоНалоговогоСчета()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ПараметрыЗаданияОпросаСервера = "";
	
	ИмяМетода = "";
	Для Каждого Метод Из ПоследовательностьМетодов Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияДанных", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКДанным", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеЕдиногоНалоговогоСчета(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		Если Не ОбновитьСправочники Тогда
			ОбновитьСправочники = СправочникиТребуютОбновления();
		КонецЕсли;
		Если ОбновитьСправочники Тогда
			НачатьПолучениеСправочников();
		Иначе
			ОбработатьДанныеПослеЗагрузки();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКДанным(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияДанных(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		Если Результат.ТребуетсяАвторизацияПоКЭП Тогда
			// Потребовалась отдельная авторизация
			ИспользуетсяАвторизацияСервиса = Ложь;
			ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
		Иначе
			УстановитьПрогрессор();
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ИмяМетода", РезультатВыполнения.ИмяМетода);
			
			Если Результат.ФайлПолучен Тогда
				
				Если ИспользуетсяАвторизацияСервиса Тогда
					Результат.Вставить("РасшифрованныйФайл", АдресХранилища);
					ПослеРасшифровкиФайлаОтвета(Результат, ДополнительныеПараметры);
				Иначе
					Оповещение = Новый ОписаниеОповещения("ПослеРасшифровкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
					КриптографияЭДКОКлиент.РасшифроватьPKCS7(Оповещение,
						АдресХранилища,
						,
						СертификатПодписанта,
						Ложь,
						МенеджерКриптографии);
				КонецЕсли;
			Иначе
				ПослеЗагрузкиФайлаОтвета(Результат, ДополнительныеПараметры)
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеРасшифровкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
	
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.РасшифрованныйФайл);
		АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода",          ИмяМетода);
		ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеЕдиногоНалоговогоСчета(Оповещение, ИмяМетода, ЭтотОбъект);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДанныеДляЗагрузкиОтсутствуют = Результат.ПрекратитьОбновление;
		
		Если ДанныеДляЗагрузкиОтсутствуют Тогда
			
			ПараметрыЗаданияОпросаСервера = "";
			ПрекратитьОбновлениеДанных();
			СнятьБлокировкуОбновления();
			ОповеститьОЗавершенииОбновления();
			СобратьВсеДанныеЕдиногоНалоговогоСчета();
			
		Иначе
		
			Если Результат.ОбновитьСправочники Тогда
				ОбновитьСправочники = Истина;
			КонецЕсли;
			
			ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
			УстановитьПрогрессор();
			
			Для Каждого Метод Из ПоследовательностьМетодов Цикл
				Если Метод.Значение = ИмяМетода Тогда
					Метод.Пометка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
				ИнтервалИсполненияМетодов,
				Истина);
			
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеСправочников()
	
	Для Каждого Метод Из СписокСправочников Цикл
		Метод.Пометка = Ложь;
	КонецЦикла;
	
	ПолучитьСправочники();
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочники()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочников", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникам", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочников(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		ОбработатьДанныеПослеЗагрузки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникам(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочников(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ПараметрыЗаданияОпросаСервера = "";
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочникиПоОтбору()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочниковПоОтбору", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочниковПоОтбору(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		ОбработатьДанныеПослеЗагрузки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочниковПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Ложь);
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаСправочника(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		СправочникТребуетОбновления =
			ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.МетодИспользуетОтбор(ИмяМетода)
			И СправочникТребуетОбновления(ИмяМетода)
			И ВходящийКонтекст.СправочникТребуетОбновления;
		
		Если СправочникТребуетОбновления Тогда
			ПодключитьОбработчикОжидания("ПолучитьСправочникиПоОтбору",
				ИнтервалИсполненияМетодов,
				Истина);
		Иначе
			Для Каждого Метод Из СписокСправочников Цикл
				Если Метод.Значение = ИмяМетода Тогда
					Метод.Пометка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПодключитьОбработчикОжидания("ПолучитьСправочники",
				ИнтервалИсполненияМетодов,
				Истина);
		КонецЕсли;
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникиТребуютОбновления()
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникиТребуютОбновления();
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникТребуетОбновления(ИмяСправочника)
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникТребуетОбновления(ИмяСправочника);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПрогрессор()
	
	// Прогрессор неравномерный.
	// 0:   начало
	// 1-9: операции авторизации, выделим под них 5%
	// 10 + количество методов * количество шагов: операции получения данных, выделим под них
	// х: генерация операций, выделим под нее 2%
	// х + 1: отрисовка, выделим под нее 3%
	
	КоличествоМетодов = ПоследовательностьМетодов.Количество() + СписокСправочников.Количество();
	
	Если ШагПрогрессора = 0 Тогда
		Прогрессор = 0;
	ИначеЕсли ШагПрогрессора > 0 И ШагПрогрессора <= 9 Тогда
		ВыделенныйРазмер = 5;
		КоличествоШагов  = 9;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	ИначеЕсли ШагПрогрессора > 9 И ШагПрогрессора <= 9 + КоличествоМетодов * 4 Тогда
		ВыделенныйРазмер = 90;
		КоличествоШагов  = КоличествоМетодов * 4;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 2, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	ИначеЕсли ШагПрогрессора > 9 + КоличествоМетодов * 4 И ШагПрогрессора <= 9 + КоличествоМетодов * 4 + 1 Тогда
		ВыделенныйРазмер = 2;
		КоличествоШагов  = 2;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	Иначе
		ВыделенныйРазмер = 3;
		КоличествоШагов  = 2;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	КонецЕсли;
	
	ШагПрогрессора = ШагПрогрессора + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПослеЗагрузки()
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Если ПоддерживаетсяОбработкаДанныхПослеЗагрузки Тогда
		Результат = ВыполнитьОбработкуДанныхПослеЗагрузкиНаСервере();
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеПослеЗагрузкиЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		СнятьБлокировкуОбновления();
		ОповеститьОЗавершенииОбновления();
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПослеЗагрузкиЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	СнятьБлокировкуОбновления();
	ОповеститьОЗавершенииОбновления();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбработкуДанныхПослеЗагрузкиНаСервере()
	
	Если Не ЕдиныйНалоговыйСчетЛичныйКабинет.ПоддерживаетсяОбработкаДанныхПослеЗагрузки() Тогда
		Возврат Новый Структура("Выполнено", Истина);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Единый налоговый счет: обработка после загрузки данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Организация",              Объект.Организация);
	ПараметрыОбработки.Вставить("Период",                   Объект.Период);
	ПараметрыОбработки.Вставить("ОбработчикЗагрузкиДанных", Истина);
	ПараметрыОбработки.Вставить("СтруктураДанных",
		Новый Структура("ТаблицаОперацииЕНП",
			ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.НовыйТаблицаОперацииЕНП()));
			
	НаименованиеЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных'");
	Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПослеЗагрузкиДанныхЛичногоКабинета",
		ПараметрыОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДоступноОбновлениеСервиса()
	
	ДоступноОбновлениеСервиса = Истина;
	
	Если ДатаЗавершенияРегламентныхРабот > ТекущаяДатаСеанса() Или Не ПроверитьЗаполнение()
		Или ОбновлениеВыполняетсяВПараллельномСеансе() Или ЛицензияПросрочена Тогда
		ДоступноОбновлениеСервиса = Ложь;
	КонецЕсли;
	
	Возврат ДоступноОбновлениеСервиса;
	
КонецФункции

&НаСервере
Функция ДоступноИспользованиеДоверенности()
	
	ДоступноИспользованиеДоверенности = Истина;
	Если ИспользуетсяДоверенностьНаПолучениеДанных Тогда
		Если Не ЭтоЮридическоеЛицо Тогда
			ДоступноИспользованиеДоверенности = Ложь;
			СообщениеОбОшибке = НСтр("ru = 'Получение данных о состоянии ЕНС для индивидуального предпринимателя недоступно по доверенности (ограничение сервисе ФНС)'");
			ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧДИП(Объект.Организация, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			КонецЕсли;
			ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
				, СтрШаблон(НСтр("ru = 'Получение данных о состоянии ЕНС для индивидуального предпринимателя недоступно по доверенности (ограничение сервисе ФНС). Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
			ОформитьОшибкуРаботыСервиса();
		ИначеЕсли Не ЗначениеЗаполнено(НомерМашиночитаемойДоверенности) Тогда
			ДоступноИспользованиеДоверенности = Ложь;
			СообщениеОбОшибке = НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности'");
			ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧД(Объект.Организация, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			КонецЕсли;
			ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
				, СтрШаблон(НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
			ОформитьОшибкуРаботыСервиса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступноИспользованиеДоверенности;
	
КонецФункции

&НаСервере
Процедура ОформитьНедоступностьСертификата()

	СообщениеОбОшибке = НСтр("ru = 'Не найдены данные о сертификате подписи'");
	ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Объект.Организация, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
		, СтрШаблон(НСтр("ru = 'Не найдены данные о сертификате подписи. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	ОформитьОшибкуРаботыСервиса();

КонецПроцедуры

&НаСервере
Процедура ОформитьНедоступностьИнформацииСертификата()
	
	СообщениеОбОшибке = НСтр("ru = 'Не удалось извлечь информацию из сертификата подписи'");
	ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Объект.Организация, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
		, СтрШаблон(НСтр("ru = 'Не удалось извлечь информацию из сертификата подписи. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	ОформитьОшибкуРаботыСервиса();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПодготовитьПисьмоВФНС()
	
	ДатаСообщения = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация,
		ДатаСообщения,
		"ТипНП,ИННЮЛ,ИННИО,ИННФЛ,ПризнакНПЛКрупнейший,КодНО,КодНОКрупнейший,НаимЮЛСокр,НаимИОПол,ФИО,ТелОрганизации");
	
	Телефон = СведенияОбОрганизации.ТелОрганизации;
	
	Если СведенияОбОрганизации.ТипНП = 5 Тогда
		ИНН = СведенияОбОрганизации.ИННИО;
		Наименование = СведенияОбОрганизации.НаимИОПол;
	ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
		ИНН = СведенияОбОрганизации.ИННФЛ;
		Наименование = СведенияОбОрганизации.ФИО;
	Иначе
		ИНН = СведенияОбОрганизации.ИННЮЛ;
		Наименование = СведенияОбОрганизации.НаимЮЛСокр;
	КонецЕсли;
	
	Если СведенияОбОрганизации.ПризнакНПЛКрупнейший = Истина И Не ПустаяСтрока(СведенияОбОрганизации.КодНОКрупнейший) Тогда
		КодНО = СведенияОбОрганизации.КодНОКрупнейший;
	Иначе
		КодНО = СведенияОбОрганизации.КодНО;
	КонецЕсли;
	
	Содержание = СтрШаблон(НСтр("ru = 'Организация: %1
			|ИНН: %2
			|Контактный телефон: %3
			|
			|Обнаружено расхождение данных в личном кабинете ЕНС по состоянию на %4
			|Просим провести актуализацию данных ЕНС
			|Подтверждающие документы прилагаем
			|
			|=======================================================
			|Если Вы заметили проблему
			|  - укажите раздел, по которому возникли вопросы:
			|       Сальдо ЕНС
			|       Зарезервировано
			|       Предстоящие платежи
			|       Отсутствует платеж
			|       Непонятна информация по ЕНС
			|       и т.п.
			|  - подробно опишите суть проблемы
			|  - приложите подтверждающие документы.
			|=======================================================
			|'"),
		Наименование, ИНН, Телефон, Формат(ДатаСообщения, "ДЛФ=DD"));
	
	Письмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Письмо.Наименование   = НСтр("ru = 'Расхождение данных в личном кабинете ЕНС'");
	Письмо.Тип           = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС;
	Письмо.Статус        = Перечисления.СтатусыПисем.Исходящее;
	Письмо.Организация   = Объект.Организация;
	Письмо.Отправитель   = Объект.Организация;
	Письмо.Получатель    = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНО);
	Письмо.Содержание    = Содержание;
	Письмо.ДатаСообщения = ДатаСообщения;
	Письмо.ДатаОтправки  = ДатаСообщения;
	Письмо.Идентификатор = Новый УникальныйИдентификатор;
	
	Попытка
		Письмо.Записать();
		ПисьмоСсылка = Письмо.Ссылка;
	Исключение
		ПисьмоСсылка = Неопределено;
	КонецПопытки;
		
	Возврат ПисьмоСсылка;

КонецФункции

&НаКлиенте
Процедура СоздатьУведомлениеОСпецрежимахНалогообложения(ВидУведомления)
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация", Объект.Организация);
	
	ПараметрыУведомления.Вставить("ВидУведомления", ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения." + ВидУведомления));
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта",
			ПараметрыУведомления,
			ЭтотОбъект,
			УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапросИОН(ВидУслугиПриИОН)
	
	ЗапросИОН = СоздатьЗапросИОННаСервере(Объект.Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН);
	ПоказатьЗначение(, ЗапросИОН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗапросИОННаСервере(Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН)

	ЗапросИОН = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	
	ЗапросИОН.Дата          = ТекущаяДатаСеанса();
	ЗапросИОН.Организация   = Организация;
	ЗапросИОН.Получатель    = РегистрацияВНалоговомОргане;
	ЗапросИОН.ВидУслуги     = Перечисления.ВидыУслугПриИОН[ВидУслугиПриИОН];
	ЗапросИОН.ФорматОтвета  = Перечисления.ФорматОтветаНаЗапросИОН.XML;
	ЗапросИОН.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;

	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Или ВидУслугиПриИОН = "СправкаОПринадлежностиСумм" Тогда
		ЗапросИОН.ДатаНачалаПериода = НачалоГода(ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДатаНачалаПримененияЕНС());
		Если Год(ТекущаяДатаСеанса()) <> Год(ЗапросИОН.ДатаНачалаПериода) Тогда
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(КонецГода(ЗапросИОН.ДатаНачалаПериода));
		Иначе
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
	Иначе
		ЗапросИОН.ДатаНачалаПериода    = НачалоГода(ЗапросИОН.Дата);
		ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ЗапросИОН.Дата);
	КонецЕсли;
	
	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Тогда
		ЗапросИОН.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Все;
	КонецЕсли;
	
	ЗапросИОН.Записать();
	
	Возврат ЗапросИОН.Ссылка;

КонецФункции

&НаКлиенте
Процедура СоздатьСогласиеНаРаскрытиеНалоговойТайны()
	
	ЕдиныйНалоговыйСчетИнтеграцияКлиент.СоздатьСогласиеНаРаскрытиеНалоговойТайны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиИнтеграции()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияНастройки", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.ФормаНастройкиЛичногоКабинета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьБаннер()
	
	Если ФоновыйРежимПодключен Или Не ИнтеграцияПодключена Тогда
		БаннерПогашен = Истина
	Иначе
		ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтображенияЛичногоКабинетаЕНС",
			"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
			Новый Массив);
			
		БаннерПогашен = ОтключенныеПредупреждения.Найти(Объект.Организация) <> Неопределено;
	КонецЕсли;
	
	Элементы.Баннер.Видимость = Не БаннерПогашен;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	// Закроем баннер на форме.
	Элементы.Баннер.Видимость = Ложь;
	
	ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
		Новый Массив);
		
	Если ОтключенныеПредупреждения.Найти(Объект.Организация) = Неопределено Тогда
		
		ОтключенныеПредупреждения.Добавить(Объект.Организация);
	
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиОтображенияЛичногоКабинетаЕНС",
				"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
				ОтключенныеПредупреждения);
	
		БаннерПогашен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПометкойКоманды(ИмяКоманды)
	
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("КнВсеОбязательства");
	МассивКоманд.Добавить("КнЗадолженность");
	МассивКоманд.Добавить("КнПредстоящиеПлатежи");
	МассивКоманд.Добавить("КнЗарезервировано");
	МассивКоманд.Добавить("КнОперацииЕНП");
	МассивКоманд.Добавить("КнИсторияЕНС");
	МассивКоманд.Добавить("КнПроцедурыВзыскания");
	МассивКоманд.Добавить("КнПлатежи");
	МассивКоманд.Добавить("КнОтчеты");
	МассивКоманд.Добавить("КнНачисления");
	МассивКоманд.Добавить("КнПениШтрафы");
	
	Для Каждого ИмяКнопки Из МассивКоманд Цикл
		Элементы[ИмяКнопки].Пометка = Ложь;
	КонецЦикла;
	
	Элементы[ИмяКоманды].Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдоЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ВыбранныйВариант.Значение;
	
	СоздатьУведомлениеОСпецрежимахНалогообложения(Действие);
	
КонецПроцедуры

#Область РежимСверки

&НаКлиенте
Процедура РежимСверкиОбработатьИзменение()
	
	Если РежимСверки Тогда
		ИмяРаздела = "Платежи";
	Иначе
		ИмяРаздела = "ВсеОбязательства";
	КонецЕсли;
	
	УправлениеПометкойКоманды("кн" + ИмяРаздела);
	ПереключитьОтображениеПоказателей(ИмяРаздела);
	
	УправлениеФормой();
	
	ПереключениеКомандРасхождение(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандРасхождение(ТолькоРасхождения, ИмяРаздела = "")
	
	Если Не РежимСверки Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Платежи" Или ИмяРаздела = "" Тогда
		ПереключениеКомандПлатежиРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "Отчеты" Или ИмяРаздела = "" Тогда
		ПереключениеКомандОтчетыРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "Начисления" Или ИмяРаздела = "" Тогда
		ПереключениеКомандНачисленияРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "ПениШтрафы" Или ИмяРаздела = "" Тогда
		ПереключениеКомандПениШтрафыРасхождение(ТолькоРасхождения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандПлатежиРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияПлатежи = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияПлатежи = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаПлатежи", "ДокументОтраженияВУчетеЕстьРазница", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандПлатежиРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандОтчетыРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияОтчеты = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияОтчеты = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаОтчеты", "ДокументРегОтчЕстьРазница", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандОтчетыРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандНачисленияРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияНачисления = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияНачисления = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаНачисления", "ЕстьРасхождение", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандНачисленияРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандПениШтрафыРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияПениШтрафы = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияПениШтрафы = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаПениШтрафы", "ЕстьРасхождение", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандПениШтрафыРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаУстановитьОтборВСпискеРасхождения(ИмяТаблицы, ИмяКолонкиРазница, ТолькоРасхождения)
	
	Отбор = Неопределено;
	Если ТолькоРасхождения Тогда
		Отбор = Новый ФиксированнаяСтруктура(ИмяКолонкиРазница, ТолькоРасхождения);
	КонецЕсли;
	
	Элементы[ИмяТаблицы].ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Значение) Тогда
		ПоказатьЗначение(, Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораВсеОперации()
	
	Возврат "ВсеОперации";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораТолькоРасхождения()
	
	Возврат "ТолькоРасхождения";
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодТаблицы        = ДополнительныеПараметры.ПериодТаблицы;
	ПредставлениеПериода = ДополнительныеПараметры.ПредставлениеПериода;
	
	ПериодТаблицы.ДатаНачала    = РезультатВыбора.НачалоПериода;
	ПериодТаблицы.ДатаОкончания = РезультатВыбора.КонецПериода;
	ЭтотОбъект[ПредставлениеПериода] = ПредставлениеПериода(ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания, "ФП = Истина");
	
	ИзмененПериодТаблицы = Истина;
	ИмяТаблицыСИзмененнымПериодом = ДополнительныеПараметры.ИмяТаблицыСИзмененнымПериодом;
	
	СобратьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодыПоУмолчанию()
	
	НачалоГода = НачалоГода(Объект.Период);
	КонецГода  = КонецГода(Объект.Период);
	
	УстановитьПериодТаблицыПоУмолчанию(ПериодПлатежи,    "ПредставлениеПериодаПлатежи");
	УстановитьПериодТаблицыПоУмолчанию(ПериодОтчеты,     "ПредставлениеПериодаОтчеты");
	УстановитьПериодТаблицыПоУмолчанию(ПериодНачисления, "ПредставлениеПериодаНачисления");
	УстановитьПериодТаблицыПоУмолчанию(ПериодПениШтрафы, "ПредставлениеПериодаПениШтрафы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодТаблицыПоУмолчанию(ПериодТаблицы, ПредставлениеПериода)
	
	НачалоГода = НачалоГода(Объект.Период);
	КонецГода  = КонецГода(Объект.Период);

	ПериодТаблицы.ДатаНачала    = НачалоГода;
	ПериодТаблицы.ДатаОкончания = КонецГода;
	ЭтотОбъект[ПредставлениеПериода] = ПредставлениеПериода(ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания, "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПериода(Элемент, ПериодТаблицы, ОписаниеОповещения)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ОграничениеСнизу",
		ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания,
		ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСервер.ДатаНачалаРаботыРежимаСверки());
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.ФормаВыбораПериода", ПараметрыВыбора, Элемент, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПолученияОтветаНаВопросОбОбновленииФормы(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОшибкуРаботыСервиса()
	
	СнятьБлокировкуОбновления();
	
	ПараметрыЗаданияОпросаСервера = "";
	
	ОшибкаРаботыСервиса = Истина;
	ОбновлениеДанныхДоступно = Истина;
	
	СостояниеОбновления = РегистрыСведений.СостоянияОбновленияЕНС.ПолучитьАктуальноеСостояние(Объект.Организация);
	
	Если СостояниеОбновления.Статус = "Ошибка" И СостояниеОбновления.Описание.КодОшибки > 0 Тогда
		ОбслуживаемаяОшибкаРаботыСервиса = ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемаяОшибка(СостояниеОбновления.Описание.КодОшибки);
		
		ИсключаемыеКодыВнутреннихОшибок = ЕдиныйНалоговыйСчетИнтеграция.ИсключаемыеКодыВнутреннихОшибок();
		Если ИсключаемыеКодыВнутреннихОшибок.Найти(СостояниеОбновления.Описание.КодОшибки) <> Неопределено Тогда
			ОформитьДоступностьСервиса();
		ИначеЕсли ОбслуживаемаяОшибкаРаботыСервиса Тогда
			ОформитьВнутренниеОшибки(СостояниеОбновления.Описание.КодОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ВосстановитьАрхивнуюКопиюДанных(
		Новый Структура("Организация, АдресАрхивнойКопииДанных, ТекущаяДата",
			Объект.Организация, АдресАрхивнойКопииДанных, ТекущаяДатаСеанса()));
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧД(Организация, СообщениеОбОшибке);
	
	// отсутствует МЧД
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(103, Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧДИП(Организация, СообщениеОбОшибке);
	
	// задана МЧД для ИП
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(106, Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Организация, СообщениеОбОшибке);
	
	// отсутствует сертификат
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(104, Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаЛицензия(Организация, СообщениеОбОшибке);
	
	// отсутствует сертификат
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(105, Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(ВнутреннийКодОшибки, Организация, СообщениеОбОшибке);
	
	ТекущаяДатаСеанса = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	
	ОписаниеАктуальногоСостояния = РегистрыСведений.СостоянияОбновленияЕНС.ОписаниеАктуальногоСостояния();
	
	ОписаниеАктуальногоСостояния.Статус = "Ошибка";
	ОписаниеАктуальногоСостояния.Дата   = ТекущаяДатаСеанса;
	
	ОписаниеАктуальногоСостояния.Описание.КодОшибки            = ВнутреннийКодОшибки;
	ОписаниеАктуальногоСостояния.Описание.РасшифровкаСостояния = СообщениеОбОшибке;
	
	РегистрыСведений.СостоянияОбновленияЕНС.УстановитьАктуальноеСостояние(Организация, ОписаниеАктуальногоСостояния);
	
	Если ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемаяОшибка(ВнутреннийКодОшибки) Тогда
		СообщениеОбОшибке = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьСервиса()
	
	ЕдиныйНалоговыйСчетИнтеграция.ПроверкаСостоянияСервиса();
	ОформитьДоступностьСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьДоступностьСервиса()
	
	НастройкиДоступностиЛичногоКабинетаЕНС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеДоступностиСервисаЕНС");
	
	СостояниеИнтернетСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеИнтернетСоединения");
	
	СервисДоступен = Истина;
	ДатаЗавершенияРегламентныхРабот = "";
	Если ЗначениеЗаполнено(НастройкиДоступностиЛичногоКабинетаЕНС) Тогда
		
		ПричинаБлокировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиДоступностиЛичногоКабинетаЕНС, "Причина", 0);
		Если Не ЗначениеЗаполнено(ПричинаБлокировки) Тогда
			
			ШаблонОписания = НСтр("ru = '%1. Сервис будет доступен ориентировочно %2%3'");
			ВремяЗавершения = "";
			
			УниверсальнаяТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
			ДатаЗавершения           = НастройкиДоступностиЛичногоКабинетаЕНС.ДатаЗавершения;
			
			СервисДоступен = УниверсальнаяТекущаяДата > ДатаЗавершения;
			ДатаЗавершенияПоМоскве = МестноеВремя(ДатаЗавершения, "GMT+3");
			
			Если ДатаЗавершенияПоМоскве <> НачалоДня(ДатаЗавершенияПоМоскве) И ДатаЗавершенияПоМоскве <> КонецДня(ДатаЗавершенияПоМоскве) Тогда
				ОписаниеВремени = НСтр("ru = ' после %1:%2 (МСК).'");
				ВремяЗавершения = СтрШаблон(ОписаниеВремени,
					Формат(Час(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
					Формат(Минута(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
			Иначе // время доступности 00-00 - переносим на сутки
				ДатаЗавершенияПоМоскве = ДатаЗавершенияПоМоскве + 86400;
			КонецЕсли;
			
			Если НастройкиДоступностиЛичногоКабинетаЕНС.Источник = "FNS" Тогда
				ОписаниеИсточника = НСтр("ru = 'Технические работы на стороне ФНС'");
			Иначе
				ОписаниеИсточника = НСтр("ru = 'Ведутся технические работы'");
			КонецЕсли;
			
			ЗаголовокТехническиеРаботы = СтрШаблон(ШаблонОписания, ОписаниеИсточника, Формат(ДатаЗавершенияПоМоскве, "ДЛФ=DD"), ВремяЗавершения);
			Элементы.ТекстРегламентныеРаботы.Заголовок         = ЗаголовокТехническиеРаботы;
			
			ДатаЗавершенияРегламентныхРабот = МестноеВремя(ДатаЗавершения, ЧасовойПоясСеанса());
			
			// Если работы более 24 ч., то блокируется обновление
			ОбновлениеДанныхДоступно = НачалоДня(ДатаЗавершенияРегламентныхРабот) <= НачалоДня(ТекущаяДатаСеанса()); 
			
		КонецЕсли;
	КонецЕсли;
	
	Если СервисДоступен И ЗначениеЗаполнено(СостояниеИнтернетСоединения) Тогда
		Если Не СостояниеИнтернетСоединения.ИнтернетСоединениеДоступно Тогда
			КодОшибкиОбновлениеДанных = 107;
			ОформитьВнутренниеОшибки(КодОшибкиОбновлениеДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьВнутренниеОшибки(КодОшибки)
	
	// Коды внутренних ошибок описаны в ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемыеКодыВнутреннихОшибок()
	// Коды 101-199
	// 101 - не найдена МЧД в реестре
	// 102 - превышено количество запросов
	// 103 - не найдена доверенность
	// 104 - не найден сертификат
	// 105 - устарела/отсутствует подписка на 1С:Отчетность
	// 106 - попытка получить данные ИП по МЧД
	// 107 - ошибка Интернет
	
	КодОшибкиОбновлениеДанных = КодОшибки;
	
	Если КодОшибки = 105 Или КодОшибки = 101 Или КодОшибки = 106 Или КодОшибки = 107 Или КодОшибки = 104 Тогда
		
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = 102 Тогда
		
		ОбновлениеДанныхДоступно = Ложь;
		
		НастройкиДоступностиЛичногоКабинетаЕНС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеДоступностиСервисаЕНС");
	
		Если ЗначениеЗаполнено(НастройкиДоступностиЛичногоКабинетаЕНС) Тогда
		
			ПричинаБлокировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиДоступностиЛичногоКабинетаЕНС, "Причина", 1);
			Если Не ЗначениеЗаполнено(ПричинаБлокировки) Тогда
				ШаблонОписанияПревышеноКоличествоЗапросов = НСтр("ru = 'Обновление данных о состоянии ЕНС для ИНН %1 временно недоступно.'");
				ШаблонКогдаОткроетсяДоступКОбновлению     = НСтр("ru = 'Превышено количество обращений к сервису, ФНС откроет доступ %1.'");
				
				УниверсальнаяТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
				ВремяДоступностиОтФНС    = НастройкиДоступностиЛичногоКабинетаЕНС.ДатаЗавершения;
				
				ОбновлениеДанныхДоступно = УниверсальнаяТекущаяДата > ВремяДоступностиОтФНС;
				ОбновлениеДанныхДоступноПоМоскве = МестноеВремя(ВремяДоступностиОтФНС, "GMT+3");
				
				ОписаниеВремени = НСтр("ru = '%1 в %2:%3 (МСК)'");
				ВремяЗавершения = СтрШаблон(ОписаниеВремени,
					Формат(ОбновлениеДанныхДоступноПоМоскве, "ДЛФ=ДД"),
					Формат(Час(ОбновлениеДанныхДоступноПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
					Формат(Минута(ОбновлениеДанныхДоступноПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
				
				Элементы.ТекстПревышеноКоличествоЗапросов.Заголовок =
					СтрШаблон(ШаблонОписанияПревышеноКоличествоЗапросов, ИНН);
				Элементы.ТекстКогдаОткроетсяДоступКОбновлению.Заголовок =
					СтрШаблон(ШаблонКогдаОткроетсяДоступКОбновлению, ВремяЗавершения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КодОшибки = 103 Тогда
		
		Элементы.ТекстМЧДНеНайдено.Заголовок = 
			НСтр("ru = 'Машиночитаемая доверенность отсутствует. Обновление данных о состоянии ЕНС недоступно.'");
		ОбновлениеДанныхДоступно = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
