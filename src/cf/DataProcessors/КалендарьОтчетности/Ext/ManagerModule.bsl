
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Формирует отчет по ранее полученным данным приложений.
//
// Параметры:
//  ДанныеПриложений - Структура - см. НовыйДанныеДляОтчета
//
// Возвращаемое значение:
//   ТабличныйДокумент - сформированный отчет.
//
Функция СформироватьОтчет(ДанныеПриложений) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("Сегодня", ДанныеПриложений.Сегодня);
	
	// В общем случае строка с представлением налога оптимально умещается в 2 строки.
	ПараметрыВывода.Вставить("ВысотаСтрокиШапкиНалоги", ВысотаСтрокиШапкиНалоги() * 2);
	
	Данные = СводнаяТаблицаДанныхПриложений(
		ДанныеПриложений.ДанныеЭтогоПриложения,
		ДанныеПриложений.ДанныеПодключенныхПриложений);
	
	Если Данные.Расписание.Количество() = 0 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ЧислоОрганизаций = Данные.Организации.Количество();
	ПараметрыВывода.Вставить("ПоказатьОрганизации", ЧислоОрганизаций > 1);
	
	ПараметрыВывода.Вставить("МногоОрганизаций", ЧислоОрганизаций > ПорогВместимостиЭкрана());
	ПараметрыВывода.Вставить("Области", ВсеОбластиМакета(ПараметрыВывода.МногоОрганизаций));
	
	ПараметрыВывода.Вставить("ОжидаетсяЗагрузкаДанных", ДанныеПриложений.ОжидающиеЗапросы.Количество() > 0);
	ПараметрыВывода.Вставить("ЕстьОшибкиЗапросов", ДанныеПриложений.ОшибкиПриложений.Количество() > 0);
	
	// Добавляем данные о делении сроков сдачи на группы.
	Данные.Сроки = СрокиПоЗадачам(Данные, ПараметрыВывода.Сегодня);
	
	ВывестиЗаголовок(ТабличныйДокумент, Данные, ПараметрыВывода);
	
	ВывестиСтрокуСроков(ТабличныйДокумент, Данные, ПараметрыВывода);
	
	Если ПараметрыВывода.ПоказатьОрганизации Тогда
		ТабличныйДокумент.Вывести(ПараметрыВывода.Области.ДатыОрганизация);
	КонецЕсли;
	
	ВысотаШапки = ТабличныйДокумент.ВысотаТаблицы;
	
	МакетДанных = ВывестиТаблицуДанных(
		Данные,
		ДанныеПриложений.ОжидающиеЗапросы,
		ДанныеПриложений.ОшибкиПриложений,
		ПараметрыВывода);
		
	Если ПараметрыВывода.ПоказатьОрганизации Тогда
		ВывестиСтрокуНалогов(ТабличныйДокумент, Данные, ПараметрыВывода);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетДанных);
	
	ОформитьСтрокиОтчета(ТабличныйДокумент, ВысотаШапки);
	
	ЗафиксироватьШапку(ТабличныйДокумент, ПараметрыВывода, ВысотаШапки);
	
	Если Не ПараметрыВывода.ПоказатьОрганизации Тогда
		ОформитьОбластиОрганизаций(ТабличныйДокумент, Данные, ПараметрыВывода, ВысотаШапки);
		ВывестиПодвал(ТабличныйДокумент, Данные, ПараметрыВывода);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает параметры формирования отчета.
// 
// Возвращаемое значение:
//   - Структура:
//     * ДатаНачала - Дата - начало периода отчета.
//     * ДатаКонца - Дата - конец периода отчета.
//     * Сегодня - Дата - дата, относительно которой период отчета делится на прошлое и будущее.
//     * СобытияКалендаря - Строка - представление отбора по событиям календаря - "ВсеСобытия" или "Уведомления".
//     * Пользователь - СправочникСсылка.Пользователи - пользователь, формирующий отчет.
//     * Организации - Массив из СправочникСсылка.Организации - список организаций, по которым формировать отчет.
//
Функция НовыйПараметрыОтчета() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаНачала", '0001-01-01');
	Параметры.Вставить("ДатаКонца", '0001-01-01');
	Параметры.Вставить("Сегодня", '0001-01-01');
	Параметры.Вставить("СобытияКалендаря", "");
	Параметры.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("Организации", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Собирает данные приложений для формирования отчета.
//
// Параметры:
//  Параметры - Структура - см. НовыйПараметрыОтчета
//
// Возвращаемое значение:
//   Структура - см. НовыйДанныеДляОтчета.
//
Функция ДанныеДляОтчета(Параметры) Экспорт
	
	// Чтобы с максимальной вероятностью получить данные подключенных приложений с первого раза:
	// 1. Отправим запросы в подключенные приложения на формирование данных
	// 2. Получим данные этого приложения
	// 3. Опросим подключенные приложения
	
	УстановитьПривилегированныйРежим(Истина);
	ПодключенныеОрганизации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Параметры.Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОпрашиватьПриложения = ПодключенныеОрганизации.Количество() > 0;
	ДанныеПодключенныхПриложений = НовыйДанныеПодключенныхПриложений();
	
	// Список доступных организаций при запросе от служебного пользователя будет передан в Параметры.
	// Для текущего пользователя получаем список доступных организаций.
	Если Не СообщенияОблачныхПриложений.ЭтоЗапросОтСлужебногоПользователя() Тогда
		Параметры.Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	КонецЕсли;
	
	Если ОпрашиватьПриложения Тогда
		Запросы = ЗапроситьДанныеПодключенныхПриложений(ПодключенныеОрганизации, Параметры);
		ДанныеПодключенныхПриложений.ОшибкиПриложений = Запросы.Ошибки;
	КонецЕсли;
	
	ДанныеЭтогоПриложения = ДанныеПриложения(Параметры);
	
	Если ОпрашиватьПриложения Тогда
		Ответы = ОпроситьПодключенныеПриложения(Запросы.Выполнено);
		ДанныеПодключенныхПриложений.Данные = Ответы.Данные;
		ДанныеПодключенныхПриложений.ОжидающиеЗапросы = Ответы.ОжидающиеЗапросы;
		ДанныеПодключенныхПриложений.ОшибкиПриложений = Ответы.ОшибкиПриложений;
		ОтметитьДанныеПолучены(
			Запросы.Выполнено,
			ДанныеПодключенныхПриложений.ОжидающиеЗапросы,
			ДанныеПодключенныхПриложений.ОшибкиПриложений);
	КонецЕсли;
	
	// Добавим записи по организациям, по которым не получится уже получить данные.
	Для Каждого Запрос Из ДанныеПодключенныхПриложений.ОшибкиПриложений Цикл
		ДобавитьОрганизацииПриложения(ДанныеПодключенныхПриложений.Данные, ПодключенныеОрганизации, Запрос);
	КонецЦикла;
	
	// Ожидающие запросы, ответы на которые ещё не удалось получить.
	Для Каждого Запрос Из ДанныеПодключенныхПриложений.ОжидающиеЗапросы Цикл
		Если Запрос.ТипЗапроса = СообщенияОтчетностиОблачныхПриложений.ТипЗапросаДанныеОтчетности() Тогда
			ДобавитьОрганизацииПриложения(ДанныеПодключенныхПриложений.Данные, ПодключенныеОрганизации, Запрос.Приложение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = НовыйДанныеДляОтчета();
	
	Результат.ДанныеЭтогоПриложения = ДанныеЭтогоПриложения;
	Результат.ПодключенныеОрганизации = ПодключенныеОрганизации;
	Результат.ДанныеПодключенныхПриложений = ДанныеПодключенныхПриложений.Данные;
	Результат.ОжидающиеЗапросы = ДанныеПодключенныхПриложений.ОжидающиеЗапросы;
	Результат.ОшибкиПриложений = ДанныеПодключенныхПриложений.ОшибкиПриложений;
	
	Для Каждого Параметр Из Параметры Цикл
		Результат.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Опрашивает облачные приложения, которым был ранее отправлен запрос
// на получение данных. Формирует таблицу данных из ответов приложений.
//
// Параметры:
//  Запросы - ТаблицаЗначений - отправленные ранее запросы другим облачным приложениям,
//            см. СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям().
//
// Возвращаемое значение:
//   Структура - 
//      *Ответы - ТаблицаЗначений - см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности()
//      *ОжидающиеЗапросы - ТаблицаЗначений - запросы, по которым не удалось получить ответ,
//                          см. СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям()
//      *ОшибкиПриложений - Массив - список приложений, получение данных от которых более невозможно,
//                        опрашивать повторно их не следует.
//
Функция ОпроситьПодключенныеПриложения(Запросы) Экспорт
	
	РезультатОпроса = СообщенияОтчетностиОблачныхПриложений.ПолучитьОтветыНаЗапросы(Запросы);
	
	ТаблицаДанных = СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности();
	ДанныеПриложений = Новый Структура("Данные,ОжидающиеЗапросы,ОшибкиПриложений",
			ТаблицаДанных, РезультатОпроса.ОжидающиеЗапросы, РезультатОпроса.ОшибкиПриложений);
		
	Если РезультатОпроса.Ответы.Количество() = 0 Тогда
		// Не удалось получить ответа ни от одного приложения.
		Возврат ДанныеПриложений;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ПодключенныеОрганизации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Ответ Из РезультатОпроса.Ответы Цикл
		
		СвойстваТипаДата = Новый Массив;
		СвойстваТипаДата.Добавить("Срок");
		СвойстваТипаДата.Добавить("НачалоВыполнения");
		СвойстваТипаДата.Добавить("КонецПериода");
	
		Данные = ОбщегоназначенияБП.СтруктураИзСтрокиJSON(Ответ.Данные, СвойстваТипаДата);
		
		Если Данные.ТипЗапроса = СообщенияОтчетностиОблачныхПриложений.ТипЗапросаСписокОрганизаций() Тогда
			// Обработка ответа, содержащего список организаций.
			// Данные.Ответ - массив структур с полями:
			//   *Наименование - наименование организации
			//   *Идентификатор - уникальный идентификатор организации
			ОбработатьОтветНаЗапросСпискаОрганизаций(Данные.Ответ, Пользователь, Ответ.Приложение, ПодключенныеОрганизации);
			
		ИначеЕсли Данные.ТипЗапроса = СообщенияОтчетностиОблачныхПриложений.ТипЗапросаДанныеОтчетности() Тогда
			// Ответ содержит данный отчетности.
			// Данные.Ответ - таблица значений, преобразованная в массив структур,
			// см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности()
			ОбработатьОтветНаЗапросДанныеОтчетности(
				ТаблицаДанных, Данные.Ответ, Пользователь, Ответ.Приложение, ПодключенныеОрганизации);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПриложений;
	
КонецФункции

// Подтверждает получение данных. Удаляет ответы в приложениях, от которых он был получен.
// 
// Параметры:
//   Запросы - ТаблицаЗначений - см. СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям()
//   ОжидающиеЗапросы - ТаблицаЗначений - запросы, по которым не удалось получить ответ,
//                      см. СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям()
//   ОшибкиПриложений - Массив - список приложений, получение данных от которых более невозможно,
//                    опрашивать повторно их не следует.
//
Процедура ОтметитьДанныеПолучены(Запросы, ОжидающиеЗапросы, ОшибкиПриложений) Экспорт
	
	Для Каждого Запрос Из Запросы Цикл
		
		Если ОжидающиеЗапросы.Найти(Запрос.Приложение, "Приложение") <> Неопределено
			Или ОшибкиПриложений.Найти(Запрос.Приложение) <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		СообщенияОтчетностиОблачныхПриложений.ОтметитьДанныеПолучены(
			Запрос.Приложение,
			Запрос.ИдентификаторЗапроса);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает состояние отчетной кампании этого приложения
//
// Параметры:
//  Параметры - Структура - см. НовыйПараметрыОтчета
//
// Возвращаемое значение:
//   Структура - см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности
//
Функция ДанныеПриложения(Параметры) Экспорт
	
	ДатаНачала = Параметры.ДатаНачала;
	ДатаКонца = Параметры.ДатаКонца;
	Сегодня = Параметры.Сегодня;
	Организации = Параметры.Организации;
	
	СобытияКалендаря = Новый Массив;
	СобытияКалендаря.Добавить(Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление);
	Если Параметры.СобытияКалендаря = "ВсеСобытия" Тогда
		СобытияКалендаря.Добавить(Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
		СобытияКалендаря.Добавить(Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность);
	КонецЕсли;
	
	// Механизм Списка задая имеет одну тонкость - необходимо на 1 день сместить временной интервал, по
	// которому требуется сформировать отчет. Если этого не сделать, то в начале периода в Расписание могут
	// не попасть какие-то отчеты, а в конце периода могут, наоборот, попасть лишние.
	// Аналогичная ситуация и с установкой Даты актуальности списка задач. Если нужны все задачи, например,
	// за октябрь 2023, то перед обновлением списка задач дату актуальности нужно установить на 30.09.2023.
	ПоследнийДеньПредыдущегоМесяца = НачалоДня(НачалоМесяца(ДатаНачала) - 1);
	ПредпоследнийДеньПоследнегоМесяца = НачалоДня(НачалоДня(КонецМесяца(ДатаКонца)) - 1);
	
	Отбор = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	
	// Список задач для Расписания строится на основании учетной политики на начало временного интервала.
	// Таким образом, если на начало периода организация не является плательщиком, например, налога на прибыль,
	// то и задач в по этому налогу в Расписании не будет.
	// В связи с этим следует разделить итервал на группы и получить расписание по каждому из них.
	
	ИнтервалыРасписания = Новый Массив;
	КонецЭтогоМесяца = КонецМесяца(Сегодня);
	Если КонецЭтогоМесяца > ДатаНачала И КонецЭтогоМесяца < ДатаКонца Тогда
		// Прошлое
		Интервал = НовыйИнтервалРасписания();
		Интервал.НачалоИнтервала = ПоследнийДеньПредыдущегоМесяца;
		Вчера = НачалоДня(Сегодня) - 1;
		Интервал.КонецИнтервала = Вчера;
		ИнтервалыРасписания.Добавить(Интервал);
		// Будущее
		Интервал = НовыйИнтервалРасписания();
		Интервал.НачалоИнтервала = Сегодня;
		Интервал.КонецИнтервала = ПредпоследнийДеньПоследнегоМесяца;
		ИнтервалыРасписания.Добавить(Интервал);
	Иначе
		// Весь период
		Интервал = НовыйИнтервалРасписания();
		Интервал.НачалоИнтервала = ПоследнийДеньПредыдущегоМесяца;
		Интервал.КонецИнтервала = ПредпоследнийДеньПоследнегоМесяца;
		ИнтервалыРасписания.Добавить(Интервал);
	КонецЕсли;
	
	Расписание = Неопределено;
	
	Для каждого Интервал Из ИнтервалыРасписания Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Интервал);
		Для каждого Организация Из Организации Цикл
			Отбор.Организация = Организация;
			
			РасписаниеОрганизации = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(Отбор);
			Если Расписание = Неопределено Тогда
				Расписание = РасписаниеОрганизации.СкопироватьКолонки();
			КонецЕсли;
			
			Для Каждого СтрокаРасписание Из РасписаниеОрганизации Цикл
				Если СобытияКалендаря.Найти(СтрокаРасписание.Действие) <> Неопределено
					И СтрокаРасписание.Срок <= ДатаКонца Тогда
					
					НоваяСтрока = Расписание.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасписание);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Расписание является плановым, т.е. задачи в регистре сведений "Список задач" могут отсутствовать.
	// Получим текущее состояние по задачам.
	Расписание.Колонки.Добавить("Статус", Новый ОписаниеТипов(РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса()));
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(Расписание);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Расписание", Расписание);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("СобытияКалендаря", СобытияКалендаря);
	
	// Помимо "Статус" у каждой задачи ещё есть признак "ВАрхиве". Плановое расписание не содержит
	// реквизита "ВАрхиве", его следует получать напрямую из регистра сведений ЗадачиБухгалтера.
	// В запросе выбирается МАКСИМУМ(Расписание.Статус), т.к. ожидается, что для одной и той же
	// записи расписания статусы в Расписание.Статус и ЗадачиБухгалтера.Статус одинаковые.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расписание.Организация КАК Организация,
	|	Расписание.РегистрацияВНалоговомОргане КАК РегистрацияФНС,
	|	Расписание.Правило КАК Правило,
	|	Расписание.Наименование КАК НаименованиеЗадачи,
	|	Расписание.НаименованиеСокращенное КАК НаименованиеНалога,
	|	Расписание.Срок КАК Срок,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|	Расписание.ПериодСобытия КАК КонецПериода,
	|	Расписание.Периодичность КАК Периодичность,
	|	Расписание.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление) КАК ЭтоУведомление,
	|	Расписание.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаРасписание
	|ИЗ
	|	&Расписание КАК Расписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.ОблачныеПриложения.ПустаяСсылка) КАК Приложение,
	|	Расписание.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК ИдентификаторОрганизации,
	|	Расписание.РегистрацияФНС КАК РегистрацияФНС,
	|	ЕСТЬNULL(Расписание.РегистрацияФНС.Код, """") КАК КодФНС,
	|	Расписание.Правило КАК Правило,
	|	Расписание.Правило.Код КАК ИдентификаторПравила,
	|	ЕСТЬNULL(Расписание.Правило.Владелец.РеквизитДопУпорядочивания, 0) КАК Порядок,
	|	ЕСТЬNULL(Расписание.Правило.Владелец.Код, """") КАК КодНалога,
	|	Расписание.НаименованиеЗадачи КАК НаименованиеЗадачи,
	|	Расписание.НаименованиеНалога КАК НаименованиеНалога,
	|	Расписание.Срок КАК Срок,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|	Расписание.КонецПериода КАК КонецПериода,
	|	Расписание.ЭтоУведомление КАК ЭтоУведомление,
	|	МАКСИМУМ(Расписание.Статус) КАК Статус,
	|	МАКСИМУМ(Расписание.ВАрхиве) КАК ВАрхиве,
	|	МАКСИМУМ(Расписание.ЕстьЗадача) КАК ЕстьЗадача
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расписание.Организация КАК Организация,
	|		Расписание.РегистрацияФНС КАК РегистрацияФНС,
	|		Расписание.Правило КАК Правило,
	|		Расписание.НаименованиеЗадачи КАК НаименованиеЗадачи,
	|		Расписание.НаименованиеНалога КАК НаименованиеНалога,
	|		Расписание.Срок КАК Срок,
	|		Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|		Расписание.Периодичность КАК Периодичность,
	|		Расписание.КонецПериода КАК КонецПериода,
	|		Расписание.ЭтоУведомление КАК ЭтоУведомление,
	|		Расписание.ЭтоУведомление
	|			И ЕСТЬNULL(Регламент.ВыполняетсяЕдинымПомощником, ИСТИНА) КАК ПодчиненнаяЗадача,
	|		Расписание.Статус КАК Статус,
	|		ЛОЖЬ КАК ВАрхиве,
	|		Расписание.Статус <> """" КАК ЕстьЗадача
	|	ИЗ
	|		ТаблицаРасписание КАК Расписание
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|			ПО Расписание.Правило = Регламент.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗадачиБухгалтера.Организация,
	|		ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|		ЗадачиБухгалтера.Правило,
	|		ЗадачиБухгалтера.Наименование,
	|		ЗадачиБухгалтера.НаименованиеСокращенное,
	|		ЗадачиБухгалтера.Срок,
	|		ЗадачиБухгалтера.НачалоВыполнения,
	|		ЗадачиБухгалтера.Периодичность,
	|		ЗадачиБухгалтера.ПериодСобытия,
	|		ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление),
	|		ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|			И ЕСТЬNULL(Регламент.ВыполняетсяЕдинымПомощником, ИСТИНА),
	|		ЗадачиБухгалтера.Статус,
	|		ЗадачиБухгалтера.ВАрхиве,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|			ПО ЗадачиБухгалтера.Правило = Регламент.Ссылка
	|	ГДЕ
	|		ЗадачиБухгалтера.Организация В(&Организации)
	|		И ЗадачиБухгалтера.Действие В(&СобытияКалендаря)
	|		И ЗадачиБухгалтера.Срок МЕЖДУ &ДатаНачала И &ДатаКонца) КАК Расписание
	|ГДЕ
	|	НЕ Расписание.ПодчиненнаяЗадача
	|
	|СГРУППИРОВАТЬ ПО
	|	Расписание.Организация,
	|	Расписание.РегистрацияФНС,
	|	Расписание.Правило,
	|	ЕСТЬNULL(Расписание.Правило.Владелец.РеквизитДопУпорядочивания, 0),
	|	ЕСТЬNULL(Расписание.Правило.Владелец.Код, """"),
	|	Расписание.НаименованиеЗадачи,
	|	Расписание.НаименованиеНалога,
	|	Расписание.Срок,
	|	Расписание.НачалоВыполнения,
	|	Расписание.КонецПериода,
	|	Расписание.ЭтоУведомление,
	|	Расписание.Правило.Код,
	|	Расписание.Организация.Наименование,
	|	ЕСТЬNULL(Расписание.РегистрацияФНС.Код, """")";
	
	Расписание = Запрос.Выполнить().Выгрузить();
	
	СместитьСрокиВыполненияЗадач(Расписание, Сегодня);
	
	Для Каждого Строка Из Расписание Цикл
		Строка.ИдентификаторОрганизации = XMLСтрока(Строка.Организация.УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат Расписание;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДанныеОтчета

Процедура ОбработатьОтветНаЗапросСпискаОрганизаций(СписокОрганизаций, Пользователь, Приложение, ПодключенныеОрганизации)
	
	Если Не СписокОрганизаций.Количество() Тогда
		// Пустой ответ указывает на то, что у пользователя больше нет прав ни на одну организацию
		// из другого приложения. Отключим все ранее подключенные организации этого приложения.
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.ОтключитьПриложение(Пользователь, Приложение);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		
		// Ответ должен содержать обязательные реквизиты:
		// Идентификатор, Наименование.
		// Если хоть один реквизит отсутствует, то нет смысла обрабатывать ответ.
		Если Не ЭлементСписка.Свойство("Идентификатор")Или Не ЭлементСписка.Свойство("Наименование") Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаОрганизация = ПодключенныеОрганизации.Найти(ЭлементСписка.Идентификатор);
		Если СтрокаОрганизация = Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			Организация = Справочники.ОрганизацииОблачныхПриложений.СсылкаОрганизация(
				ЭлементСписка.Идентификатор,
				Приложение,
				ЭлементСписка.Наименование);
				
			Если ЗначениеЗаполнено(Организация) Тогда
				РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.УстановитьСостояние(
					Пользователь,
					Организация,
					Ложь);
				//Перечитаем данные подключенных организаций.
				ПодключенныеОрганизации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Пользователь);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветНаЗапросДанныеОтчетности(ТаблицаДанных, ДанныеОтчетности, Пользователь, Приложение, ПодключенныеОрганизации)
	
	Если Не ДанныеОтчетности.Количество() Тогда
		// Пустой ответ указывает на то, что у пользователя больше нет прав ни на одну организацию
		// из другого приложения. Отключим все ранее подключенные организации этого приложения.
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.ОтключитьПриложение(Пользователь, Приложение);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолученныеДанные Из ДанныеОтчетности Цикл
		
		// Ответ должен содержать обязательные реквизиты:
		// ИдентификаторОрганизации, НаименованиеОрганизации.
		// Если хоть один реквизит отсутствует, то нет смысла обрабатывать ответ.
		Если Не ПолученныеДанные.Свойство("ИдентификаторОрганизации")
			Или Не ПолученныеДанные.Свойство("НаименованиеОрганизации") Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтрокаОрганизация = ПодключенныеОрганизации.Найти(ПолученныеДанные.ИдентификаторОрганизации);
		// От приложения могут быть получены сведения по отсутствующей организации.
		Организация = Неопределено;
		Если СтрокаОрганизация = Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			НоваяОрганизация = Справочники.ОрганизацииОблачныхПриложений.СсылкаОрганизация(
				ПолученныеДанные.ИдентификаторОрганизации,
				Приложение,
				ПолученныеДанные.НаименованиеОрганизации);
			УстановитьПривилегированныйРежим(Ложь);
			
				
			Если НоваяОрганизация = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.УстановитьСостояние(
				Пользователь,
				НоваяОрганизация,
				Истина);
			Организация = НоваяОрганизация;
			//Перечитаем данные подключенных организаций.
			ПодключенныеОрганизации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Пользователь);
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			Организация = СтрокаОрганизация.ОрганизацияСсылка;
			Если СтрокаОрганизация.ОрганизацияНаименование <> СокрЛП(ПолученныеДанные.НаименованиеОрганизации) Тогда
				// Организация в другом приложении может быть переименована. Изменим наименование в этом приложении.
				УстановитьПривилегированныйРежим(Истина);
				Справочники.ОрганизацииОблачныхПриложений.Переименовать(
					Организация,
					ПолученныеДанные.НаименованиеОрганизации);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ПолученныеДанные);
		
		СтрокаДанных.Организация = Организация;
		СтрокаДанных.Приложение = Приложение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяКолонкиДанныхПриложение()
	
	Возврат "ПриложениеСсылка";
	
КонецФункции

Функция ЗапроситьДанныеПодключенныхПриложений(Организации, Параметры)
	
	ИмяКолонкиСсылкаНаПриложение = ИмяКолонкиДанныхПриложение();
	
	Приложения = Организации.Скопировать(, ИмяКолонкиСсылкаНаПриложение);
	Приложения.Свернуть(ИмяКолонкиСсылкаНаПриложение);
	
	ОшибкиПриложений = Новый Массив;
	Запросы = СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям();
	
	ЗапроситьДанныеОтчетности(Приложения, Организации, Параметры, Запросы, ОшибкиПриложений);
	ЗапроситьСписокОрганизаций(Приложения, Организации, Параметры.Пользователь, Запросы);
	
	Возврат Новый Структура("Выполнено,Ошибки", Запросы, ОшибкиПриложений);
	
КонецФункции

Процедура ЗапроситьДанныеОтчетности(Приложения, Организации, Параметры, Запросы, ОшибкиПриложений)
	
	Для Каждого Приложение Из Приложения Цикл
		
		Отбор = Новый Структура("ПриложениеСсылка, ВыводитьВКалендарь", Приложение.ПриложениеСсылка, Истина);
		Если Организации.НайтиСтроки(Отбор).Количество() = 0 Тогда
			// Ни одна из организаций не включена в календарь. Отправлять запрос не нужно.
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура("ДатаНачала, ДатаКонца, СобытияКалендаря",
			Параметры.ДатаНачала, Параметры.ДатаКонца, Параметры.СобытияКалендаря);
			
		Ответ = СообщенияОтчетностиОблачныхПриложений.ЗапроситьДанныеОтчетнойКампании(
			Параметры.Пользователь,
			Приложение.ПриложениеСсылка,
			ПараметрыЗапроса);
	
		Если Ответ = "" Тогда
			// Доступ к приложению отсутствует. Отключим приложение от Календаря отчетности.
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.ОтключитьПриложение(
				Параметры.Пользователь,
				Приложение.ПриложениеСсылка);
			УстановитьПривилегированныйРежим(Ложь);
			Продолжить;
		КонецЕсли;
			
		Если Ответ = Неопределено Тогда
			// Запрос не был принят приложением. Данные не могут быть получены.
			ОшибкиПриложений.Добавить(Приложение.ПриложениеСсылка);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Запросы.Добавить();
		НоваяСтрока.Приложение = Приложение.ПриложениеСсылка;
		НоваяСтрока.ИдентификаторЗапроса = Ответ;
		НоваяСтрока.ТипЗапроса = СообщенияОтчетностиОблачныхПриложений.ТипЗапросаДанныеОтчетности();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапроситьСписокОрганизаций(Приложения, Организации, Пользователь, Запросы)
	
	Для Каждого Приложение Из Приложения Цикл
		
		Отбор = Новый Структура("ПриложениеСсылка, ВыводитьВКалендарь", Приложение.ПриложениеСсылка, Истина);
		Если Организации.НайтиСтроки(Отбор).Количество() > 0 Тогда
			// Этому приложению отправляется запрос на получение данных отчетной кампании.
			Продолжить;
		КонецЕсли;
		
		Ответ = СообщенияОтчетностиОблачныхПриложений.ЗапроситьСписокОрганизаций(
				Пользователь,
				Приложение.ПриложениеСсылка);
	
		Если Ответ = "" Тогда
			// Доступ к приложению отсутствует. Отключим приложение от Календаря отчетности.
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.ОтключитьПриложение(
				Пользователь,
				Приложение.ПриложениеСсылка);
			УстановитьПривилегированныйРежим(Ложь);
			Продолжить;
		КонецЕсли;
			
		Если Ответ = Неопределено Тогда
			// Если приложением не был принят запрос на получение списка организаций, то ничего не делаем.
			// Просто повторим при следующем запросе данных отчетности.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Запросы.Добавить();
		НоваяСтрока.Приложение = Приложение.ПриложениеСсылка;
		НоваяСтрока.ИдентификаторЗапроса = Ответ;
		НоваяСтрока.ТипЗапроса = СообщенияОтчетностиОблачныхПриложений.ТипЗапросаСписокОрганизаций();
	КонецЦикла;
	
КонецПроцедуры

Функция СводнаяТаблицаДанныхПриложений(ДанныеЭтогоПриложения, ДанныеПодключенныхПриложений)
	
	// Основное расписание задач.
	Расписание = СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЭтогоПриложения, Расписание);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПодключенныхПриложений, Расписание);
	Расписание.Сортировать("Организация,Срок,РегистрацияФНС,Порядок,КодНалога");
	
	// Налоги организаций. Используется для формирования отчета с налогами "по горизонтали".
	НалогиОрганизаций = Расписание.Скопировать();
	НалогиОрганизаций.Свернуть(
		"Организация,Приложение,Правило,ИдентификаторПравила,КодНалога,РегистрацияФНС,КодФНС,НаименованиеНалога,Порядок");
	НалогиОрганизаций.Сортировать("Организация,РегистрацияФНС,Порядок,КодНалога");
	
	// Налоги по срокам. Используется для формирования отчета с налогами "по вертикали".
	НалогиПоСрокам = Расписание.Скопировать();
	НалогиПоСрокам.Свернуть(
		"РегистрацияФНС,КодФНС,КодНалога,НаименованиеНалога,Срок,ИдентификаторПравила,Порядок");
	НалогиПоСрокам.Сортировать("Срок,РегистрацияФНС,Порядок,КодНалога");
	
	// Налоги по правилу.
	// Если отчет формируется по одной организации, то сразу несколько налогов с одинаковым кодом могут
	// быть в одном периоде(cроке). В таком случае записи нужно детализировать по "правилу".
	КопияРасписания = Расписание.Скопировать();
	КопияРасписания.Колонки.Добавить("ЧислоСтрок");
	Для Каждого СтрокаДанных Из КопияРасписания Цикл
		СтрокаДанных.ЧислоСтрок = 1;
	КонецЦикла;
	КопияРасписания.Свернуть("КодНалога,РегистрацияФНС,Срок", "ЧислоСтрок");
	НалогиПоПравилу = КопияРасписания.Скопировать();
	НалогиПоПравилу.Очистить();
	Для Каждого СтрокаДанных Из КопияРасписания Цикл
		Если СтрокаДанных.ЧислоСтрок > 1 Тогда
			СтрокаНалоги = НалогиПоПравилу.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоги, СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	// Список организаций с приложениями.
	Организации = Расписание.Скопировать();
	Организации.Свернуть("Приложение,Организация");
	Организации.Сортировать("Приложение,Организация");
	
	Данные = НовыйРасписаниеПоНалогам();
	Данные.Расписание = Расписание;
	Данные.Расписание.Индексы.Добавить("Организация,Срок,РегистрацияФНС,КодНалога");
	
	Данные.НалогиОрганизаций = НалогиОрганизаций;
	Данные.НалогиОрганизаций.Индексы.Добавить("Организация,КодНалога");
	
	Данные.НалогиПоСрокам = НалогиПоСрокам;
	Данные.НалогиПоСрокам.Индексы.Добавить("Срок,КодНалога");
	
	Данные.НалогиПоПравилу = НалогиПоПравилу;
	
	Данные.Организации = Организации;
	
	Возврат Данные;
	
КонецФункции

Процедура СместитьСрокиВыполненияЗадач(Расписание, Сегодня)
	
	Завтра = Сегодня + 86400;
	// Не ограничиваем срок выполнения для задач, у которых по расписанию списка задач
	// всего один день на подготовку(например, отчет о сотруднике, принятом на работу).
	// Помощник подготовки отчета должен быть доступен уже сегодня.
	Для Каждого СтрокаРасписания Из Расписание Цикл
		НачалоВыполнения = СтрокаРасписания.НачалоВыполнения;
		Если НачалоВыполнения = СтрокаРасписания.Срок И НачалоВыполнения = Завтра Тогда
			СтрокаРасписания.НачалоВыполнения = Сегодня;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйРасписаниеПоНалогам()
	
	Данные = Новый Структура;
	Данные.Вставить("Расписание");
	Данные.Вставить("НалогиОрганизаций");
	Данные.Вставить("НалогиПоСрокам");
	Данные.Вставить("Сроки");
	Данные.Вставить("Организации");
	Данные.Вставить("НалогиПоПравилу");

	Возврат Данные;
	
КонецФункции

Функция НовыйДанныеДляОтчета()
	
	Данные = Новый Структура;
	Данные.Вставить("ДанныеЭтогоПриложения"); //см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности()
	Данные.Вставить("ПодключенныеОрганизации"); //см. РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации()
	Данные.Вставить("ДанныеПодключенныхПриложений"); //см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности()
	Данные.Вставить("ОжидающиеЗапросы"); //см. СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям()
	Данные.Вставить("ОшибкиПриложений"); // массив из СправочникСсылка.ОблачныеПриложения
	Данные.Вставить("Параметры", Новый Структура); // параметры отбора, по которым были получены данные
	
	Возврат Данные;
	
КонецФункции

Функция НовыйДанныеПодключенныхПриложений()
	
	// Данные - итоговая таблица данных подключенных приложений, по которой будет формироваться отчет.
	// При её заполнении записи не разделяются на "c ошибкой" и "ожидает результата"
	// Т.е. здесь "ошибки" - есть то же, что и "безрезультатные". Как для запросов с ошибкой, так и для
	// ожидающих запросов добавляются пустые строки с организациями приложений.
	//
	// Ошибки приложений - это список приложений, запросы к которым не удалось выполнить.
	// Т.е. приложение по какой-то причине недоступно пользователю. Например, владелец абонента его удалил.
	//
	// Ожидающие запросы - запросы, что были успешно отправлены приложениям, но в рамках текущей
	// итерации опроса приложений на них ещё не удалось получить ответы. Но ответы будут получены позже.
	
	Данные = Новый Структура;
	Данные.Вставить("Данные", СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности());
	Данные.Вставить("ОшибкиПриложений", Новый Массив);
	Данные.Вставить("ОжидающиеЗапросы", СообщенияОтчетностиОблачныхПриложений.НовыйЗапросыОблачнымПриложениям());
	Возврат Данные;
	
КонецФункции

Функция НовыйИнтервалРасписания()
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоИнтервала", '0001-01-01');
	Результат.Вставить("КонецИнтервала", '0001-01-01');
	Возврат Результат;
	
КонецФункции

// Сроки по задачам, разделенные на несколько групп.
// Все сроки в группах упорядочены по дате.
//
// Параметры:
//  Расписание - ТаблицаЗначений - см. РасписаниеЗадач
//  Сегодня - Дата - дата, относительно которой сроки делятся по группам.
// 
// Возвращаемое значение:
//   - Структура
//     * Все - Массив из Дата - все сроки из расписания.
//     * Прошлое - Массив из Дата - прошедшие сроки.
//     * СовсемСкоро - Массив из Дата - ближайшие сроки, по которым можно выполнять все задачи.
//          Может быть 1 или несколько таких сроков. Например, если сегодня 1 июня, это могут быть 25 и 29 июня.
//          Если сегодня 25 июня, то это могут быть 25 и 29 июня.
//     * Скоро - Массив из Дата -ближайший срок, по которому есть задачи, которые нельзя выполнять.
//          Заполняется, только если нет сроков в списке СовсемСкоро.
//          Может быть только 1 такой срок. Например, если сегодня 30 мая, это будет 25 июня.
//     * Будущее - Массив из Дата - будущие сроки, которые не вошли в группы СовсемСкоро или Скоро. Может содержать
//          задачи, которые можно выполнять.
//
Функция СрокиПоЗадачам(Данные, Сегодня)
	
	Сроки = НовыйСрокиПоЗадачам();
	Расписание = Данные.Расписание;
	НалогиПоСрокам = Данные.НалогиПоСрокам;
	
	ВсеСроки = ОбщегоНазначения.ВыгрузитьКолонку(НалогиПоСрокам, "Срок", Истина);
	Для Каждого Срок Из ВсеСроки Цикл
		Если ЗначениеЗаполнено(Срок) Тогда
			Сроки.Все.Добавить(Срок);
		КонецЕсли;
	КонецЦикла;
	
	ПроверятьВыполнение = Истина;
	Для каждого Срок Из Сроки.Все Цикл
		Если Срок < Сегодня Тогда
			Сроки.Прошлое.Добавить(Срок);
		ИначеЕсли ПроверятьВыполнение Тогда
			МожноВыполнять = Истина;
			ОтборПоСроку = Новый Структура("Срок", Срок);
			ЗадачиПоСроку = Расписание.НайтиСтроки(ОтборПоСроку);
			Для каждого Задача Из ЗадачиПоСроку Цикл
				Если Задача.НачалоВыполнения > Сегодня Тогда
					// Задачу нельзя выполнять.
					МожноВыполнять = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если МожноВыполнять Тогда
				Сроки.СовсемСкоро.Добавить(Срок);
			Иначе
				Если Не ЗначениеЗаполнено(Сроки.СовсемСкоро) Тогда
					Сроки.Скоро.Добавить(Срок);
				Иначе
					Сроки.Будущее.Добавить(Срок);
				КонецЕсли;
				ПроверятьВыполнение = Ложь;
			КонецЕсли;
		Иначе
			Сроки.Будущее.Добавить(Срок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сроки;
	
КонецФункции

Функция НовыйСрокиПоЗадачам()
	
	Сроки = Новый Структура;
	Сроки.Вставить("Все", Новый Массив);
	Сроки.Вставить("Прошлое", Новый Массив);
	Сроки.Вставить("СовсемСкоро", Новый Массив);
	Сроки.Вставить("Скоро", Новый Массив);
	Сроки.Вставить("Будущее", Новый Массив);
	
	Возврат Сроки;
	
КонецФункции

Процедура ДобавитьОрганизацииПриложения(ДанныеПриложений, ПодключенныеОрганизации, Приложение)
	
	ОтборПоПриложению = Новый Структура("ПриложениеСсылка", Приложение);
	СтрокиОрганизации = ПодключенныеОрганизации.НайтиСтроки(ОтборПоПриложению);
	Для Каждого Строка Из СтрокиОрганизации Цикл
		СтрокаДанных = ДанныеПриложений.Добавить();
		СтрокаДанных.Приложение = Приложение;
		СтрокаДанных.Организация = Строка.ОрганизацияСсылка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчета

Процедура ВывестиЗаголовок(Результат, Данные, ПараметрыВывода)
	
	Сроки = Данные.Сроки;
	НалогиПоСрокам = Данные.НалогиПоСрокам;
	Области = ПараметрыВывода.Области;
	Сегодня = ПараметрыВывода.Сегодня;
	ПоказатьОрганизации = ПараметрыВывода.ПоказатьОрганизации;
	
	// Организация и налог
	Если ПоказатьОрганизации Тогда
		Результат.Вывести(Области.ЗаголовокОрганизация);
	Иначе
		Результат.Вывести(Области.ЗаголовокНалог);
	КонецЕсли;
	
	Если ПараметрыВывода.ОжидаетсяЗагрузкаДанных Или ПараметрыВывода.ЕстьОшибкиЗапросов Тогда
		Результат.Присоединить(Области.ЗаголовокПолучениеДанных);
	КонецЕсли;
	
	// Прошлое
	Если ЗначениеЗаполнено(Сроки.Прошлое) Тогда
		ЧислоКолонок = ?(ПоказатьОрганизации,
			ЧислоКолонокНалоговПоВертикали(НалогиПоСрокам, Сроки.Прошлое),
			Сроки.Прошлое.Количество());
			
		ТекстыПрошлое = Новый Массив(ЧислоКолонок);
		ТекстыПрошлое[0] = НСтр("ru='Прошлые сроки сдачи'");
		ВывестиПериодЗаголовка(Результат, ТекстыПрошлое, Области.ЗаголовокСрок, ЦветаСтиля.СерыйФонШапкиОтчета, Истина);
	КонецЕсли;
	
	// "Совсем скоро"
	Для каждого Срок Из Сроки.СовсемСкоро Цикл
		ТекстыСовсемСкоро = Новый Массив;
		Если ПоказатьОрганизации Тогда
			СрокиСовсемСкоро = Новый Массив();
			СрокиСовсемСкоро.Добавить(Срок);
			ЧислоКолонок = ЧислоКолонокНалоговПоВертикали(НалогиПоСрокам, СрокиСовсемСкоро);
			ТекстыСовсемСкоро = Новый Массив(ЧислоКолонок);
			ТекстыСовсемСкоро[0] = ТекстСкоро(Срок, Сегодня);
			ВывестиПериодЗаголовка(Результат, ТекстыСовсемСкоро, Области.ЗаголовокСрок, ЦветаСтиля.ЦветВажного, Истина);
		Иначе
			ТекстыСовсемСкоро.Добавить(ТекстСкоро(Срок, Сегодня));
			ВывестиПериодЗаголовка(Результат, ТекстыСовсемСкоро, Области.ЗаголовокСрок, ЦветаСтиля.ЦветВажного, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// "Скоро"
	Для каждого Срок Из Сроки.Скоро Цикл
		ТекстыСкоро = Новый Массив;
		Если ПоказатьОрганизации Тогда
			СрокиСкоро = Новый Массив();
			СрокиСкоро.Добавить(Срок);
			ЧислоКолонок = ЧислоКолонокНалоговПоВертикали(НалогиПоСрокам, СрокиСкоро);
			ТекстыСкоро = Новый Массив(ЧислоКолонок);
			ТекстыСкоро[0] = ТекстСкоро(Срок, Сегодня);
			ВывестиПериодЗаголовка(Результат, ТекстыСкоро, Области.ЗаголовокБудущее, ЦветаСтиля.ЦветВажного, Истина);
		Иначе
			ТекстыСкоро.Добавить(ТекстСкоро(Срок, Сегодня));
			ВывестиПериодЗаголовка(Результат, ТекстыСкоро, Области.ЗаголовокБудущее, ЦветаСтиля.ЦветВажного, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Будущее
	Если ЗначениеЗаполнено(Сроки.Будущее) Тогда
		ЧислоКолонок = ?(ПоказатьОрганизации,
			ЧислоКолонокНалоговПоВертикали(НалогиПоСрокам, Сроки.Будущее),
			Сроки.Будущее.Количество());
			
		ТекстыБудущее = Новый Массив(ЧислоКолонок);
		ТекстыБудущее[0] = НСтр("ru='Будущие сроки сдачи'");
		ВывестиПериодЗаголовка(Результат, ТекстыБудущее, Области.ЗаголовокБудущее, ЦветаСтиля.СерыйФонШапкиОтчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЧислоКолонокНалоговПоВертикали(НалогиПоСрокам, СрокиСдачи)
	
	ЧислоКолонок = 0;
	Для Каждого СтрокаНалогиПоСрокам Из НалогиПоСрокам Цикл
		Если СрокиСдачи.Найти(СтрокаНалогиПоСрокам.Срок) <> Неопределено Тогда
			ЧислоКолонок = ЧислоКолонок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧислоКолонок;
КонецФункции

Процедура ВывестиПериодЗаголовка(Результат, ТекстыПериода, Область, ЦветФона, Объединить)
	
	Если Не ЗначениеЗаполнено(ТекстыПериода) Тогда
		Возврат;
	КонецЕсли;
	
	Область.Область().ЦветФона = ЦветФона;
	Для каждого ТекстПериода Из ТекстыПериода Цикл
		ПараметрыОбласти = Новый Структура("ТекстПериода", ТекстПериода);
		Область.Параметры.Заполнить(ПараметрыОбласти);
		Результат.Присоединить(Область);
	КонецЦикла;
	
	Если Не Объединить Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяСтрока = Результат.ПолучитьОбласть(Результат.ВысотаТаблицы, , Результат.ВысотаТаблицы, );
	Конец = ПоследняяСтрока.ШиринаТаблицы;
	Ширина = Область.ШиринаТаблицы * ТекстыПериода.Количество();
	Начало = Конец - Ширина + 1;
	ВысотаОбласти = Область.ВысотаТаблицы;
	Для Номер = 1 По ВысотаОбласти Цикл
		НомерСтроки = Результат.ВысотаТаблицы - Номер + 1;
		ОбластьПериода = Результат.Область(НомерСтроки, Начало, НомерСтроки, Конец);
		ОбластьПериода.Объединить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСрокиНалоги(Результат, Ячейки, Область, ИмяПараметра)
	
	Если Не ЗначениеЗаполнено(Ячейки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ячейка Из Ячейки Цикл
		ПараметрыОбласти = Новый Структура(ИмяПараметра, Ячейка);
		Область.Параметры.Заполнить(ПараметрыОбласти);
		Результат.Присоединить(Область);
	КонецЦикла;
	
	ПоследняяСтрока = Результат.ПолучитьОбласть(Результат.ВысотаТаблицы, , Результат.ВысотаТаблицы, );
	Конец = ПоследняяСтрока.ШиринаТаблицы;
	Ширина = Область.ШиринаТаблицы * Ячейки.Количество();
	Начало = Конец - Ширина + 1;
	ВысотаОбласти = Область.ВысотаТаблицы;
	Для Номер = 1 По ВысотаОбласти Цикл
		НомерСтроки = Результат.ВысотаТаблицы - Номер + 1;
		ОбластьПериода = Результат.Область(НомерСтроки, Начало, НомерСтроки, Конец);
		ОбластьПериода.Объединить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокуСроков(Результат, Данные, ПараметрыВывода)
	
	Сроки = Данные.Сроки;
	Области = ПараметрыВывода.Области;
	ПоказатьОрганизации = ПараметрыВывода.ПоказатьОрганизации;
	Расписание = Неопределено;
	
	Если ПоказатьОрганизации Тогда
		Расписание = Данные.Расписание.Скопировать();
		Расписание.Свернуть("ИдентификаторПравила, КодНалога, РегистрацияФНС, Срок");
		Результат.Вывести(Области.ДатыОрганизация);
		Если ПараметрыВывода.ОжидаетсяЗагрузкаДанных Или ПараметрыВывода.ЕстьОшибкиЗапросов Тогда
			Результат.Присоединить(Области.ДатыПолучениеДанных);
		КонецЕсли;
	Иначе
		Результат.Вывести(Области.ДатыНалог);
	КонецЕсли;

	Для каждого Срок Из Сроки.Все Цикл
		ПараметрыОбласти = Новый Структура("Срок", Срок);
		Если Сроки.Прошлое.Найти(Срок) <> Неопределено 
			Или Сроки.СовсемСкоро.Найти(Срок) <> Неопределено Тогда
			ТекОбласть = Области.ДатыСрок;
		Иначе
			ТекОбласть = Области.ДатыБудущее;
		КонецЕсли;
		
		Если ПоказатьОрганизации Тогда
			ЧислоКолонок = Расписание.НайтиСтроки(ПараметрыОбласти).Количество();
			ЯчейкиСроков = Новый Массив(ЧислоКолонок);
			ЯчейкиСроков[0] = Срок;
			ВывестиСрокиНалоги(Результат, ЯчейкиСроков, ТекОбласть, "Срок");
		Иначе
			ТекОбласть.Параметры.Заполнить(ПараметрыОбласти);
			Результат.Присоединить(ТекОбласть);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокуНалогов(Результат, Данные, ПараметрыВывода)
	
	Сроки = Данные.Сроки;
	НалогиПоСрокам = Данные.НалогиПоСрокам;
	Области = ПараметрыВывода.Области;
	МногоОрганизаций = ПараметрыВывода.МногоОрганизаций;

	ЧислоСекторовСтатуса = 8;
	Если ПараметрыВывода.ОжидаетсяЗагрузкаДанных Или ПараметрыВывода.ЕстьОшибкиЗапросов Тогда
		Результат.Присоединить(Области.НалогПолучениеДанных);
	КонецЕсли;
	
	Для каждого Срок Из Сроки.Все Цикл
		
		СрокПрошлое = Истина;
		
		Если Сроки.Прошлое.Найти(Срок) <> Неопределено Тогда
			ОбластьМакетаСтатус = "ШарКрасный%1";
			ТекОбласть = Области.НалогСрок;
		ИначеЕсли Сроки.СовсемСкоро.Найти(Срок) <> Неопределено Тогда
			ОбластьМакетаСтатус = "ШарЗолотой%1";
			ТекОбласть = Области.НалогСрок;
		Иначе
			ТекОбласть = Области.НалогБудущее;
			СрокПрошлое = Ложь;
		КонецЕсли;
		
		Для Каждого Строка из НалогиПоСрокам Цикл
			Если Строка.Срок <> Срок Тогда
				Продолжить;
			КонецЕсли;
			
			НаименованиеНалога = Строка.НаименованиеНалога;
			ОтборПоНалогу = Новый Структура("ИдентификаторПравила, Срок", Строка.ИдентификаторПравила, Строка.Срок);
			ВыводитьКодФНС = НалогиПоСрокам.НайтиСтроки(ОтборПоНалогу).Количество() > 1;
			Если ВыводитьКодФНС Тогда
				НаименованиеНалога = СтрШаблон(НСтр("ru='%1%2%3'"), 
					НаименованиеНалога,
					Символы.НПП,
					РегистрыСведений.ЗадачиБухгалтера.ПредставлениеНалоговогоОргана(Строка.КодФНС));
					
				// Если необходимо выводить код ФНС, то представления налога следует разместить в 3 строки.
				ПараметрыВывода.ВысотаСтрокиШапкиНалоги = ВысотаСтрокиШапкиНалоги() * 3;
			КонецЕсли;
			
			ПараметрыОбласти = Новый Структура("Налог",
				ВыполнениеЗадачБухгалтера.СокращенноеПредставлениеНалога(
					Строка.КодНалога, Строка.ИдентификаторПравила, НаименованиеНалога));
				
			Если МногоОрганизаций И СрокПрошлое И Строка.АктивныхСтрок > 0 Тогда
				ИндексСтатуса = Окр(Строка.Сдано / Строка.АктивныхСтрок * ЧислоСекторовСтатуса);
				ИндексСтатуса = Макс(0,(Мин(ЧислоСекторовСтатуса, ИндексСтатуса)));
				ПараметрыОбласти.Вставить("КартинкаСтатуса",
					Области.СтатусыНалогов.Рисунки[СтрШаблон(ОбластьМакетаСтатус, ИндексСтатуса)].Картинка);
			КонецЕсли;
			ТекОбласть.Параметры.Заполнить(ПараметрыОбласти);
			Результат.Присоединить(ТекОбласть);
		КонецЦикла;
	КонецЦикла;
	
	// Последовательность вывода в отчет строк шапки, если налоги выводятся вертикально:
	// первая строка - Сроки(Прошлое, Скоро, Совсем скоро, Будущее). Вторая - даты. Третья - Налоги.
	// Увеличим высоту строки "Налоги", чтобы все представления налогов уместились.
	ВысотаШапки = Результат.ВысотаТаблицы;
	СтрокаШапкиНалоги = Результат.Область(ВысотаШапки, 1, ВысотаШапки, Результат.ШиринаТаблицы);
	СтрокаШапкиНалоги.ВысотаСтроки = ПараметрыВывода.ВысотаСтрокиШапкиНалоги;
	
КонецПроцедуры

Функция ВывестиДанныеПоОднойОрганизации(Данные, ПараметрыВывода)
	
	Результат = Новый ТабличныйДокумент;
	
	Сроки = Данные.Сроки;
	ВсеРасписание = Данные.Расписание;
	НалогиОрганизаций = Данные.НалогиОрганизаций;
	НалогиПоПравилу = Данные.НалогиПоПравилу;
	Области = ПараметрыВывода.Области;
	
	ТекущаяОрганизация = Неопределено;
	ТекущийНалог = Неопределено;
	КешТолькоПросмотр = Новый Соответствие;
	
	Для каждого НалогОрганизации Из НалогиОрганизаций Цикл
		
		ЭтоПриложение = Не ЗначениеЗаполнено(НалогОрганизации.Приложение);
		ОтборПоНалогу = Новый Структура("Организация,Правило", НалогОрганизации.Организация, НалогОрганизации.Правило);
		ОтборДетализацияПоПравилу = Новый Структура("КодНалога", НалогОрганизации.КодНалога);
		
		НаименованиеНалога = НалогОрганизации.НаименованиеНалога;
		ВыводитьКодФНС = НалогиОрганизаций.НайтиСтроки(ОтборПоНалогу).Количество() > 1;
		Если ВыводитьКодФНС Тогда
			ОтборДетализацияПоПравилу.Вставить("РегистрацияФНС", НалогОрганизации.РегистрацияФНС);
			НаименованиеНалога = СтрШаблон(НСтр("ru='%1%2%3'"),
				НаименованиеНалога,
				Символы.НПП,
				РегистрыСведений.ЗадачиБухгалтера.ПредставлениеНалоговогоОргана(НалогОрганизации.КодФНС));
		КонецЕсли;
		
		ДетализироватьПоПравилу = НалогиПоПравилу.НайтиСтроки(ОтборДетализацияПоПравилу).Количество() > 0;
		// Все строки с одинаковым кодом налога требуется выводить только если требуется детализация по правилу.
		Если ТекущийНалог = НалогОрганизации.КодНалога И Не ДетализироватьПоПравилу Тогда
			Продолжить;
		КонецЕсли;
		ТекущийНалог = НалогОрганизации.КодНалога;
		
		ПредставлениеНалога = ВыполнениеЗадачБухгалтера.СокращенноеПредставлениеНалога(
			НалогОрганизации.КодНалога, НалогОрганизации.ИдентификаторПравила, НаименованиеНалога);
		ПараметрыОбласти = Новый Структура("Налог", ПредставлениеНалога);
		Области.СтрокаНалог.Параметры.Заполнить(ПараметрыОбласти);
		Результат.Вывести(Области.СтрокаНалог);
		
		Для каждого Срок Из Сроки.Все Цикл
			
			ОтборПоСроку = Новый Структура("Организация,КодНалога,РегистрацияФНС,Срок",
				НалогОрганизации.Организация, НалогОрганизации.КодНалога, НалогОрганизации.РегистрацияФНС, Срок);
				
			Если ДетализироватьПоПравилу Тогда
				ОтборПоСроку.Вставить("Правило", НалогОрганизации.Правило);
			КонецЕсли;
			РасписаниеПоСроку = ВсеРасписание.НайтиСтроки(ОтборПоСроку);
			ТребуетсяОтчет = ЗначениеЗаполнено(РасписаниеПоСроку);
			
			Расписание = Неопределено;
			ЗадачиПоСроку = Неопределено;
			
			Если ТребуетсяОтчет Тогда
				ОтборПоСроку.Вставить("ЕстьЗадача", Истина);
				Расписание = РасписаниеПоСроку[0];
				ЗадачиПоСроку = ВсеРасписание.Скопировать(ОтборПоСроку);
			КонецЕсли;
			
			ЭтоПрошлое = Сроки.Прошлое.Найти(Срок) <> Неопределено;
			МожноВыполнять = Ложь;
			Если Расписание <> Неопределено Тогда
				МожноВыполнять = Расписание.НачалоВыполнения <= ПараметрыВывода.Сегодня;
			КонецЕсли;
			
			ПараметрыОбласти = ПараметрыОбласти(Срок, Расписание, ЗадачиПоСроку, ЭтоПрошлое, МожноВыполнять, КешТолькоПросмотр, ЭтоПриложение);
			
			Если МожноВыполнять И ТребуетсяОтчет Тогда
				ТекущаяОбласть = Области.СтрокаСрок;
			ИначеЕсли МожноВыполнять Тогда
				ТекущаяОбласть = Области.НеТребуетсяСрок;
			ИначеЕсли ТребуетсяОтчет Тогда
				ТекущаяОбласть = Области.СтрокаБудущее;
			Иначе
				ТекущаяОбласть = Области.НеТребуетсяБудущее;
			КонецЕсли;
			
			ТекущаяОбласть.Параметры.Заполнить(ПараметрыОбласти);
			Результат.Присоединить(ТекущаяОбласть);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиДанныеПоНесколькимОрганизациям(Данные, ОжидающиеЗапросы, ОшибкиПриложений, ПараметрыВывода)
	
	Результат = Новый ТабличныйДокумент;
	
	Сроки = Данные.Сроки;
	ВсеРасписание = Данные.Расписание;
	ДанныеОрганизаций = Данные.Организации;
	НалогиОрганизаций = Данные.НалогиОрганизаций;
	Области = ПараметрыВывода.Области;
	
	НалогиПоСрокам = Данные.НалогиПоСрокам;
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	НалогиПоСрокам.Колонки.Добавить("Сдано", ТипЧисло);
	НалогиПоСрокам.Колонки.Добавить("АктивныхСтрок", ТипЧисло);
	
	КешТолькоПросмотр = Новый Соответствие;
	
	Для каждого СтрокаДанных Из ДанныеОрганизаций Цикл
		
		ПерваяЗаписьРасписания = Истина;
		ЭтоПриложение = Не ЗначениеЗаполнено(СтрокаДанных.Приложение);
		Для каждого СтрокаРасписания Из НалогиПоСрокам Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаРасписания.Срок) Тогда
				// Срок не будет указан для организации, по которой не удалось получить данные.
				Продолжить;
			КонецЕсли;
			
			Если ПерваяЗаписьРасписания Тогда
				УстановитьПривилегированныйРежим(Истина);
				Наименование = Справочники.ОрганизацииОблачныхПриложений.НаименованиеОрганизации(СтрокаДанных.Организация);
				УстановитьПривилегированныйРежим(Ложь);
				ПараметрыОбласти = Новый Структура("Организация", Наименование);
				Области.СтрокаОрганизация.Параметры.Заполнить(ПараметрыОбласти);
				Результат.Вывести(Области.СтрокаОрганизация);
				
				Если Не ОбластьВмещаетВыведенныйТекст(Области.СтрокаОрганизация) Тогда
					// Если наименование не умещается в ячейке, включим автоматическую высоту строки.
					Область = Результат.Область(Результат.ВысотаТаблицы, 1, Результат.ВысотаТаблицы, 1);
					Область.АвтоВысотаСтроки = Истина;
					Область.ВысотаСтроки = 0;
				КонецЕсли;
		
				ВывестиОбластьПолучениеДанных(Результат, СтрокаДанных.Приложение, ОжидающиеЗапросы, ОшибкиПриложений, ПараметрыВывода);
				ПерваяЗаписьРасписания = Ложь;
			Иначе
				ПараметрыОбласти = Новый Структура;
			КонецЕсли;
				
			ОтборЯчейки = Новый Структура("Организация,КодНалога,РегистрацияФНС,ИдентификаторПравила,Срок",
				СтрокаДанных.Организация, СтрокаРасписания.КодНалога, СтрокаРасписания.РегистрацияФНС,
				СтрокаРасписания.ИдентификаторПравила, СтрокаРасписания.Срок);
				
			РасписаниеПоСроку = ВсеРасписание.НайтиСтроки(ОтборЯчейки);
			ТребуетсяОтчет = ЗначениеЗаполнено(РасписаниеПоСроку);
			
			Расписание = Неопределено;
			ЗадачиПоСроку = Неопределено;
			
			Если ТребуетсяОтчет Тогда
				ОтборЯчейки.Вставить("ЕстьЗадача", Истина);
				Расписание = РасписаниеПоСроку[0];
				ЗадачиПоСроку = ВсеРасписание.Скопировать(ОтборЯчейки);
			КонецЕсли;
			
			ЭтоПрошлое = Сроки.Прошлое.Найти(СтрокаРасписания.Срок) <> Неопределено;
			МожноВыполнять = Ложь;
			Если Расписание <> Неопределено Тогда
				МожноВыполнять = Расписание.НачалоВыполнения <= ПараметрыВывода.Сегодня;
			КонецЕсли;
			
			ПараметрыОбласти = ПараметрыОбласти(СтрокаРасписания.Срок, Расписание, ЗадачиПоСроку, ЭтоПрошлое, МожноВыполнять, КешТолькоПросмотр, ЭтоПриложение);
			
			Если МожноВыполнять И ТребуетсяОтчет Тогда
				ТекущаяОбласть = Области.СтрокаСрок;
			ИначеЕсли МожноВыполнять Тогда
				ТекущаяОбласть = Области.НеТребуетсяСрок;
			ИначеЕсли ТребуетсяОтчет Тогда
				ТекущаяОбласть = Области.СтрокаБудущее;;
			Иначе
				ТекущаяОбласть = Области.НеТребуетсяБудущее;
			КонецЕсли;
			
			ТекущаяОбласть.Параметры.Заполнить(ПараметрыОбласти);
			Результат.Присоединить(ТекущаяОбласть);
			
			// Статус итого налога
			ОтборЯчейки = Новый Структура("КодНалога,РегистрацияФНС,ИдентификаторПравила,Срок",
				СтрокаРасписания.КодНалога, СтрокаРасписания.РегистрацияФНС,
				СтрокаРасписания.ИдентификаторПравила, СтрокаРасписания.Срок);
				
			СтрокаСрок = НалогиПоСрокам.НайтиСтроки(ОтборЯчейки)[0];
			Если ТребуетсяОтчет Тогда
				СтрокаСрок.АктивныхСтрок = СтрокаСрок.АктивныхСтрок + 1;
				Если ПараметрыОбласти.Статус = СтатусыОтчета().Сдано Тогда
					СтрокаСрок.Сдано = СтрокаСрок.Сдано + 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиТаблицуДанных(Данные, ОжидающиеЗапросы, ОшибкиПриложений, ПараметрыВывода);
	
	Если ПараметрыВывода.ПоказатьОрганизации Тогда
		Возврат ВывестиДанныеПоНесколькимОрганизациям(Данные, ОжидающиеЗапросы, ОшибкиПриложений, ПараметрыВывода);
	КонецЕсли;
	
	Возврат ВывестиДанныеПоОднойОрганизации(Данные, ПараметрыВывода);
КонецФункции

Процедура ВывестиОбластьПолучениеДанных(Результат, Приложение, ОжидающиеЗапросы, ОшибкиПриложений, ПараметрыВывода)
	
	Если Не ПараметрыВывода.ОжидаетсяЗагрузкаДанных И Не ПараметрыВывода.ЕстьОшибкиЗапросов Тогда
		Возврат;
	КонецЕсли;
	
	Области = ПараметрыВывода.Области;
	
	Если ОшибкиПриложений.Найти(Приложение) <> Неопределено Тогда
		Результат.Присоединить(Области.ПолучениеДанныхНеВыполнено);
		Возврат;
	КонецЕсли;
	
	Для Каждого Запрос Из ОжидающиеЗапросы Цикл
		Если Запрос.Приложение = Приложение Тогда
			Результат.Присоединить(Области.ПолучениеДанныхВыполняется);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Присоединить(Области.ПолучениеДанныхВыполнено);
	
КонецПроцедуры

Процедура ОформитьСтрокиОтчета(Результат, ВысотаШапки)
	
	// Нечетные строки отчета выделяются цветом.
	НомерПоПорядку = 0;
	Для НомерСтроки = ВысотаШапки + 1 По Результат.ВысотаТаблицы Цикл
		
		НомерПоПорядку = НомерПоПорядку + 1;
		Если НомерПоПорядку % 2 = 0 Тогда
			ЦветФонаСтроки = Новый Цвет;
		Иначе
			ЦветФонаСтроки = ЦветаСтиля.СерыйФонСтрокиОтчета;
		КонецЕсли;
		Результат.Область(НомерСтроки, 1, НомерСтроки, Результат.ШиринаТаблицы).ЦветФона = ЦветФонаСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьОбластиОрганизаций(Результат, Данные, ПараметрыВывода, ВысотаШапки)
	
	ПоказатьОрганизации = ПараметрыВывода.ПоказатьОрганизации;
	
	Если Не ПоказатьОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	НалогиОрганизаций = Данные.НалогиОрганизаций;
	Области = ПараметрыВывода.Области;
	
	// Области ячеек по организациям объединяются, нечетные области выделяются цветом.
	
	ВысотаОбласти = Области.СтрокаОрганизация.ВысотаТаблицы;
	ШиринаОбласти = Области.СтрокаОрганизация.ШиринаТаблицы;
	НомерОрганизации = 0;
	ПерваяСтрока = ВысотаШапки + 1;
	
	ВсеОрганизации = ОбщегоНазначения.ВыгрузитьКолонку(НалогиОрганизаций, "Организация", Истина);
	Для каждого ТекущаяОрганизация Из ВсеОрганизации Цикл
		
		НомерОрганизации = НомерОрганизации + 1;
		ОтборПоОрганизации = Новый Структура("Организация", ТекущаяОрганизация);
		СтрокОрганизации = НалогиОрганизаций.НайтиСтроки(ОтборПоОрганизации).Количество();
		ПоследняяСтрока = ПерваяСтрока + СтрокОрганизации * ВысотаОбласти - 1;
		ОбластьОрганизации = Результат.Область(ПерваяСтрока, 1, ПоследняяСтрока, ШиринаОбласти);
		ОбластьОрганизации.Объединить();
		
		Если НомерОрганизации % 2 = 0 Тогда
			ЦветФонаТекущейОрганизации = Новый Цвет;
		Иначе
			ЦветФонаТекущейОрганизации = ЦветаСтиля.СерыйФонСтрокиОтчета;
		КонецЕсли;
		ОбластьОрганизации.ЦветФона = ЦветФонаТекущейОрганизации;
		
		ПерваяСтрока = ПоследняяСтрока + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьШапку(Результат, ПараметрыВывода, ВысотаШапки)
	
	Области = ПараметрыВывода.Области;
	ПоказатьОрганизации = ПараметрыВывода.ПоказатьОрганизации;
	ОжидаетсяЗагрузкаДанных = ПараметрыВывода.ОжидаетсяЗагрузкаДанных;
	ЕстьОшибкиЗапросов = ПараметрыВывода.ЕстьОшибкиЗапросов;
	
	ОбластьШапки = ?(ПоказатьОрганизации, Области.ЗаголовокОрганизация, Области.ЗаголовокНалог);
	ШиринаШапки = ОбластьШапки.ШиринаТаблицы;
	
	Если ОжидаетсяЗагрузкаДанных Или ЕстьОшибкиЗапросов Тогда
		ШиринаШапки = ШиринаШапки + Области.ЗаголовокПолучениеДанных.ШиринаТаблицы;
	КонецЕсли;
	
	Результат.ФиксацияСверху = ВысотаШапки;
	Результат.ФиксацияСлева = ШиринаШапки;
	
КонецПроцедуры

Процедура ВывестиПодвал(Результат, Данные, ПараметрыВывода)
	
	Сроки = Данные.Сроки;
	Области = ПараметрыВывода.Области;
	ПоказатьОрганизации = ПараметрыВывода.ПоказатьОрганизации;
	
	Если ПоказатьОрганизации Тогда
		Результат.Вывести(Области.ПодвалОрганизация);
		Результат.Присоединить(Области.ПодвалНалог);
	Иначе
		Результат.Вывести(Области.ПодвалНалог);
	КонецЕсли;
	
	Для каждого Срок Из Сроки.Все Цикл
		МожноВыполнять = Сроки.Прошлое.Найти(Срок) <> Неопределено 
			Или Сроки.СовсемСкоро.Найти(Срок) <> Неопределено;
		Если МожноВыполнять Тогда
			ТекОбласть = Области.ПодвалСрок;
		Иначе
			ТекОбласть = Области.ПодвалБудущее;
		КонецЕсли;
		Результат.Присоединить(ТекОбласть);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстСкоро(Знач Дата, Знач Сегодня)
	
	Если Дата = Сегодня Тогда
		Возврат НСтр("ru='Сегодня'");
	КонецЕсли;
	
	ТекстСкоро = "";
	РазницаДней = Окр((Дата - Сегодня) / 60 / 60 / 24);
	Если РазницаДней = 1 Тогда
		ТекстСкоро = НСтр("ru='Завтра'");
	ИначеЕсли РазницаДней = 7 Тогда
		ТекстСкоро = НСтр("ru='Через неделю'");
	ИначеЕсли РазницаДней = 14 Тогда
		ТекстСкоро = НСтр("ru='Через 2 недели'");
	ИначеЕсли РазницаДней = 21 Тогда
		ТекстСкоро = НСтр("ru='Через 3 недели'");
	ИначеЕсли РазницаДней >= 30 Тогда
		ЧислоМесяцев = Окр(РазницаДней / 30);
		ТекстСкоро = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';Через %1 месяц;;Через %1 месяца;Через %1 месяцев;Через %1 месяца'"),
			ЧислоМесяцев);
	Иначе
		ТекстСкоро = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';Через %1 день;;Через %1 дня;Через %1 дней;Через %1 дня'"),
			РазницаДней);
	КонецЕсли;
	
	Возврат ТекстСкоро;
	
КонецФункции

Функция ПараметрыОбласти(Срок, Расписание, ЗадачиПоСроку, ЭтоПрошлое, МожноВыполнять, КешТолькоПросмотр, ЭтоПриложение = Истина)
	
	ПараметрыОбласти = НовыйПараметрыОбласти();
	
	ТребуетсяУведомление = ЗначениеЗаполнено(Расписание);
	Если Не ТребуетсяУведомление Тогда
		Возврат ПараметрыОбласти;
	КонецЕсли;
	
	ТолькоПросмотр = КешТолькоПросмотр[Расписание.Правило];
	Если ТолькоПросмотр = Неопределено Тогда
		ТолькоПросмотр = Не КалендарьБухгалтера.ПравоВыполненияЗадачи(Расписание.Правило);
		КешТолькоПросмотр.Вставить(Расписание.Правило, ТолькоПросмотр);
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		ПараметрыОбласти.Расшифровка = НовыйРасшифровка();
	КонецЕсли;
	
	Если Не МожноВыполнять Тогда
		
		Если Не ТолькоПросмотр Тогда
			ПараметрыОбласти.Расшифровка.Действие = "ПоказатьСообщение";
			ТекстСообщения = СтрШаблон(НСтр("ru='Доступно для подготовки отчета ""%1"" после %2'"),
				Расписание.НаименованиеЗадачи,
				Формат(Расписание.НачалоВыполнения, "ДФ='d MMMM'"));
			ПараметрыОбласти.Расшифровка.Параметры.Вставить("ТекстСообщения", ТекстСообщения);
		КонецЕсли;
		ПараметрыОбласти.КартинкаСтатуса = БиблиотекаКартинок.СерыйШар;
		Возврат ПараметрыОбласти;
		
	КонецЕсли;
	
	Если Не ЭтоПриложение И Не ТолькоПросмотр Тогда
		ПараметрыОбласти.Расшифровка.Действие = "ПерейтиПоСсылке";
		УстановитьПривилегированныйРежим(Истина);
		ДанныеПриложения = Справочники.ОблачныеПриложения.ДанныеПриложения(Расписание.Приложение);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСсылки = ПараметрыНавигационнойСсылки(Расписание);
		ПараметрыОбласти.Расшифровка.Параметры.Вставить("Адрес",
			НавигационнаяСсылкаНаПомощник(ДанныеПриложения.Адрес, ПараметрыСсылки));
			
	ИначеЕсли Не ТолькоПросмотр Тогда
		ПараметрыОбласти.Расшифровка.Действие = "ПоказатьПомощник";
		
		ПараметрыПомощника = КалендарьОтчетностиКлиентСервер.НовыйПараметрыПомощника();
		ПараметрыПомощника.Организация = Расписание.Организация;
		ПараметрыПомощника.РегистрацияВНалоговомОргане = Расписание.РегистрацияФНС;
		ПараметрыПомощника.Срок = Расписание.Срок;
		ПараметрыПомощника.ПериодСобытия = Расписание.КонецПериода;
		ПараметрыПомощника.КонецПериода = Расписание.КонецПериода;
		ПараметрыПомощника.Наименование = Расписание.НаименованиеЗадачи;
		ПараметрыПомощника.ИдентификаторЗадачи = Расписание.КодНалога;
		ПараметрыПомощника.Правило = Расписание.Правило;
		ПараметрыПомощника.ЭтоУведомление = Расписание.ЭтоУведомление;
		
		ПараметрыОбласти.Расшифровка.Вставить("Параметры", ПараметрыПомощника);
	КонецЕсли;
	
	СтатусыОтчета = СтатусыОтчета();
	// Обычно задача одна, но если их несколько, выбираем минимальный статус.
	ЧислоЗадачПоСроку = ЗадачиПоСроку.Количество();
	Если ЗадачиПоСроку.Количество() = 1 Тогда 
		Задача = ЗадачиПоСроку[0];
		Если ЗначениеЗаполнено(Задача.Статус) Тогда
			ПараметрыОбласти.Статус = Задача.Статус;
		ИначеЕсли Не Задача.ВАрхиве Тогда
			// Есть активная задача с пустым статусом.
			ПараметрыОбласти.Статус = ?(ЭтоПрошлое, СтатусыОтчета.Просрочено, СтатусыОтчета.НеСдано);
		Иначе
			// Есть задача, отправленная пользователем в архив, с пустым статусом.
			ПараметрыОбласти.Статус = СтатусыОтчета.НеСдано;
		КонецЕсли;
	Иначе
		Если ЗадачиПоСроку.Найти(СтатусыОтчета.ВРаботе, "Статус") <> Неопределено Тогда
			ПараметрыОбласти.Статус = СтатусыОтчета.ВРаботе;
		ИначеЕсли ЗадачиПоСроку.Найти(СтатусыОтчета.Подготовлено, "Статус") <> Неопределено Тогда
			ПараметрыОбласти.Статус = СтатусыОтчета.Подготовлено;
		ИначеЕсли ЗадачиПоСроку.Найти(СтатусыОтчета.Сдано, "Статус") <> Неопределено Тогда
			ПараметрыОбласти.Статус = СтатусыОтчета.Сдано;
		ИначеЕсли ЗадачиПоСроку.Найти(Ложь, "ВАрхиве") <> Неопределено Тогда
			// Есть активная задача с пустым статусом.
			ПараметрыОбласти.Статус = ?(ЭтоПрошлое, СтатусыОтчета.Просрочено, СтатусыОтчета.НеСдано);
		Иначе
			// Есть задача, отправленная пользователем в архив, с пустым статусом.
			ПараметрыОбласти.Статус = СтатусыОтчета.НеСдано;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбласти.Статус = СтатусыОтчета.Сдано Тогда
		ПараметрыОбласти.КартинкаСтатуса = БиблиотекаКартинок.ЗеленыйШар;
	ИначеЕсли ПараметрыОбласти.Статус = СтатусыОтчета.НеСдано И ЭтоПрошлое Тогда
		ПараметрыОбласти.КартинкаСтатуса = БиблиотекаКартинок.СерыйШар;
	ИначеЕсли ЭтоПрошлое Тогда
		ПараметрыОбласти.КартинкаСтатуса = БиблиотекаКартинок.КрасныйШар;
	Иначе
		ПараметрыОбласти.КартинкаСтатуса = БиблиотекаКартинок.ЗолотойШар;
	КонецЕсли;
	
	Возврат ПараметрыОбласти;
	
КонецФункции

Функция ПараметрыНавигационнойСсылки(Расписание)
	
	ПараметрыСсылки = КалендарьОтчетностиКлиентСервер.НовыйПараметрыНавигационнойСсылки();
	
	ПараметрыСсылки.application_id =
		ПередаваемоеЗначениеПараметраСсылки(СообщенияОблачныхПриложений.ИдентификаторЭтогоПриложения());
	
	ПараметрыСсылки.registration = ?(ЗначениеЗаполнено(Расписание.РегистрацияФНС),
		ПередаваемоеЗначениеПараметраСсылки(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Расписание.РегистрацияФНС, "Код")),
		КалендарьОтчетностиКлиентСервер.ПустоеЗначениеПараметраНавигационнойСсылки());
		
	ПараметрыСсылки.organization = ПередаваемоеЗначениеПараметраСсылки(Расписание.ИдентификаторОрганизации);
	ПараметрыСсылки.limit = ПередаваемоеЗначениеПараметраСсылки(Формат(Расписание.Срок, "ДФ=yyyyMMdd"));
	ПараметрыСсылки.period = ПередаваемоеЗначениеПараметраСсылки(Формат(Расписание.КонецПериода, "ДФ=yyyyMMdd"));
	ПараметрыСсылки.description = ПередаваемоеЗначениеПараметраСсылки(Расписание.НаименованиеЗадачи);
	ПараметрыСсылки.task_id = ПередаваемоеЗначениеПараметраСсылки(Расписание.КодНалога);
	ПараметрыСсылки.rule_id = ПередаваемоеЗначениеПараметраСсылки(Расписание.ИдентификаторПравила);
	ПараметрыСсылки.is_notification = ?(Расписание.ЭтоУведомление, "true", "false");
	
	Возврат ПараметрыСсылки;
	
КонецФункции

Функция ПередаваемоеЗначениеПараметраСсылки(Значение)
	
	ПустоеЗначениеПараметра = КалендарьОтчетностиКлиентСервер.ПустоеЗначениеПараметраНавигационнойСсылки();
	Возврат ?(ЗначениеЗаполнено(Значение), Значение, ПустоеЗначениеПараметра);
	
КонецФункции

Функция НавигационнаяСсылкаНаПомощник(АдресПриложения, ПараметрыСсылки)
	
	СтрокаПараметров = "";
	Для Каждого Параметр Из ПараметрыСсылки Цикл
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Параметр.Значение), Параметр.Значение, "none");
		КодированноеЗначение = КодироватьСтроку(ЗначениеПараметра, СпособКодированияСтроки.КодировкаURL);
		СтрокаПараметров = СтрШаблон("%1%2=%3&", СтрокаПараметров, Параметр.Ключ, КодированноеЗначение);
	КонецЦикла;
	
	// При вызове метода ПерейтиПоНавигационнойСсылке() платформа всегда сначала пробует выполнить внутренний переход по ссылке.
	// Поэтому ссылка намерененно генерируется невалидная, чтобы платформа не смогла выполнить внутренний переход,
	// а выполнила внешний переход по этой навигационной ссылке.
	Возврат СтрШаблон("%1/#e1cib/ОбработкаКалендарьОтчетности?%2", АдресПриложения, СтрокаПараметров);
	
КонецФункции

Функция СтатусыОтчета()
	
	Статусы = Новый Структура;
	Статусы.Вставить("Сдано", ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаСдано());
	Статусы.Вставить("Подготовлено", ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаПодготовлено());
	Статусы.Вставить("ВРаботе", ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаВРаботе());
	Статусы.Вставить("Просрочено", НСтр("ru='Просрочено'"));
	Статусы.Вставить("НеСдано", НСтр("ru='Не сдано'"));
	Возврат Статусы;
	
КонецФункции

Функция НовыйПараметрыОбласти()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Статус");
	Параметры.Вставить("КартинкаСтатуса", Новый Картинка);
	Параметры.Вставить("Расшифровка");
	Возврат Параметры;
	
КонецФункции

Функция НовыйРасшифровка()

	Расшифровка = Новый Структура;
	Расшифровка.Вставить("Действие", "");
	Расшифровка.Вставить("Параметры", Новый Структура);
	Возврат Расшифровка;
	
КонецФункции

Функция ОбластьВмещаетВыведенныйТекст(Область)
	// В переданной Области выведен какой-то текст.
	// Чтобы понять, вмещается ли текст по высоте, нужно
	// 1. В области расположить рисунок, замерить высоту рисунка.
	// 2. Выставить ВысотаСтроки в 0 и АвтоВысотаСтроки в Истина.
	// 3. Если рисунок не стал больше, значит, содержимое умещается в строке.
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(Область);
	ОбластьЯчейка = ТабличныйДокумент.Область(1, 1, 1, 1);
	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Рисунок.Расположить(ОбластьЯчейка);
	
	ИсходнаяВысота = Рисунок.Высота;
	ОбластьЯчейка.ВысотаСтроки = 0;
	ОбластьЯчейка.АвтоВысотаСтроки = Истина;
	
	Возврат Рисунок.Высота <= ИсходнаяВысота;
	
КонецФункции

#КонецОбласти

Функция ПорогВместимостиЭкрана()
	// Если организаций достаточно много, и список по вертикали не умещается на экран, то для большей
	// информативности следует выводить статусы сдачи отчетности в целом по налогу. Условно будем считать,
	// что при стандартном разрешении 1920x1080 на экране помещается 20 организаций.
	Возврат 20;
КонецФункции

Функция ВысотаСтрокиШапкиНалоги()
	// Высота вывода наименования в 1 строку.
	Возврат 14;
	
КонецФункции

Функция ВсеОбластиМакета(МногоОрганизаций = Ложь)
	
	Области = Новый Структура;
	
	// Если календарь включает много организаций, то в шапке добавляются итоговые статусы по каждому
	// из налогов в виде "пирога". В связи с этим верстка макета изменяется, чтобы уместить
	// все элементы в ячейках. С целью упрощения кода сделано 2 разных макета.
	// Эти макеты отличаются:
	// 1. Шириной колонок
	// 2. Наличием в макете "КалендарьМногоОрганизаций" области с картинками итоговых статусов налогов ("пирогов").
	ИмяМакета = ?(МногоОрганизаций, "КалендарьМногоОрганизаций", "Календарь");
	Макет = ПолучитьМакет(ИмяМакета);
	
	Области.Вставить("ЗаголовокОрганизация", Макет.ПолучитьОбласть("Заголовок|Организация"));
	Области.Вставить("ЗаголовокНалог", Макет.ПолучитьОбласть("Заголовок|Налог"));
	Области.Вставить("ЗаголовокСрок", Макет.ПолучитьОбласть("Заголовок|Срок"));
	Области.Вставить("ЗаголовокБудущее", Макет.ПолучитьОбласть("Заголовок|Будущее"));
	Области.Вставить("ДатыОрганизация", Макет.ПолучитьОбласть("Даты|Организация"));
	Области.Вставить("ДатыНалог", Макет.ПолучитьОбласть("Даты|Налог"));
	Области.Вставить("ДатыСрок", Макет.ПолучитьОбласть("Даты|Срок"));
	Области.Вставить("ДатыБудущее", Макет.ПолучитьОбласть("Даты|Будущее"));
	Области.Вставить("СтрокаОрганизация", Макет.ПолучитьОбласть("Строка|Организация"));
	Области.Вставить("СтрокаНалог", Макет.ПолучитьОбласть("Строка|Налог"));
	Области.Вставить("СтрокаСрок", Макет.ПолучитьОбласть("Строка|Срок"));
	Области.Вставить("СтрокаБудущее", Макет.ПолучитьОбласть("Строка|Будущее"));
	Области.Вставить("НеТребуетсяСрок", Макет.ПолучитьОбласть("НеТребуется|Срок"));
	Области.Вставить("НеТребуетсяБудущее", Макет.ПолучитьОбласть("НеТребуется|Будущее"));
	Области.Вставить("ПодвалОрганизация", Макет.ПолучитьОбласть("Подвал|Организация"));
	Области.Вставить("ПодвалНалог", Макет.ПолучитьОбласть("Подвал|Налог"));
	Области.Вставить("ПодвалСрок", Макет.ПолучитьОбласть("Подвал|Срок"));
	Области.Вставить("ПодвалБудущее", Макет.ПолучитьОбласть("Подвал|Будущее"));
	Области.Вставить("НалогОрганизация", Макет.ПолучитьОбласть("НалогСтрока|Организация"));
	Области.Вставить("НалогСрок", Макет.ПолучитьОбласть("НалогСтрока|Срок"));
	Области.Вставить("НалогБудущее", Макет.ПолучитьОбласть("НалогСтрока|Будущее"));
	Области.Вставить("СтатусыНалогов", Макет.ПолучитьОбласть("СтатусыНалогов"));
	Области.Вставить("ЗаголовокПолучениеДанных", Макет.ПолучитьОбласть("Заголовок|ПолучениеДанныхВыполняется"));
	Области.Вставить("ДатыПолучениеДанных", Макет.ПолучитьОбласть("Даты|ПолучениеДанныхВыполняется"));
	Области.Вставить("НалогПолучениеДанных", Макет.ПолучитьОбласть("НалогСтрока|ПолучениеДанныхВыполняется"));
	Области.Вставить("ПолучениеДанныхВыполняется", Макет.ПолучитьОбласть("Строка|ПолучениеДанныхВыполняется"));
	Области.Вставить("ПолучениеДанныхВыполнено", Макет.ПолучитьОбласть("Строка|ПолучениеДанныхВыполнено"));
	Области.Вставить("ПолучениеДанныхНеВыполнено", Макет.ПолучитьОбласть("Строка|ПолучениеДанныхНеВыполнено"));
	
	Возврат Области;
	
КонецФункции

#КонецОбласти

#КонецЕсли
