#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ДатаНачала,ДатаКонца");
	
	СобытияКалендаря =
		?(ЗначениеЗаполнено(Параметры.СобытияКалендаря), Параметры.СобытияКалендаря, "ВсеСобытия");
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Инициализируем хранилище для хранения пароля пользователя.
	АдресХраненияПароля = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	Сегодня = Сегодня();
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ДобавитьМесяц(НачалоМесяца(Сегодня), -1);
		ДатаКонца = КонецМесяца(ДобавитьМесяц(Сегодня, 3));
	КонецЕсли;
	
	СформироватьНадписьПериод(ЭтотОбъект);
	УстановитьВидимостьБаннера(ЭтотОбъект, ТекущийПользователь);
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие("КалендарьОтчетности.ОткрытаФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИменаСобытий = Новый Массив();
	ИменаСобытий.Добавить("Запись_РегламентированныйОтчет");
	ИменаСобытий.Добавить("Запись_УведомлениеОбИсчисленныхСуммахНалогов");
	ИменаСобытий.Добавить("Запись_СведенияОЗастрахованныхЛицахСЗВ_М");
	ИменаСобытий.Добавить("Запись_СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ");
	ИменаСобытий.Добавить("Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД");
	ИменаСобытий.Добавить("Запись_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности");
	
	Если ИменаСобытий.Найти(ИмяСобытия) <> Неопределено Тогда
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка.Действие = "ПоказатьПомощник" Тогда
		КалендарьОтчетностиКлиент.ПоказатьПомощник(Расшифровка.Параметры);
	ИначеЕсли Расшифровка.Действие = "ПоказатьСообщение" Тогда
		ПоказатьПредупреждение(, Расшифровка.Параметры.ТекстСообщения);
	ИначеЕсли Расшифровка.Действие = "ПерейтиПоСсылке" Тогда
		ПерейтиПоНавигационнойСсылке(Расшифровка.Параметры.Адрес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПериодНазад(Команда)
	
	ДатаНачала = ДобавитьМесяц(ДатаНачала, -1);
	ДатаКонца = ДобавитьМесяц(ДатаКонца, -1);
	
	СформироватьНадписьПериод(ЭтотОбъект);
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	
	ДатаНачала = ДобавитьМесяц(ДатаНачала, 1);
	ДатаКонца = ДобавитьМесяц(ДатаКонца, 1);
	
	СформироватьНадписьПериод(ЭтотОбъект);
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьМоиПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	Элементы.ГруппаБаннер.Видимость = Ложь;
	УстановитьНеПоказыватьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияКалендаряПриИзменении(Элемент)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиПриложения(Команда)
	
	ОткрытьМоиПриложения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчет()
	
	ПараметрыОтчета = ПолучитьПараметрыОтчета();
	
	Если ПараметрыОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// При повторном формировании отчета предыдущее формирование может быть ещё не завершено,
	// т.е. обработчик ожидания может быть подключен.
	// На такой случай следует принудительно отключить обработчик ожидания.
	ОтключитьОбработчикОжидания("Подключаемый_ОпроситьПодключенныеПриложения");
	
	ДлительнаяОперация = НачатьФормированиеОтчета(ПараметрыОтчета);
	ОжидатьФормированиеОтчета(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОтчета()
	
	// Проверим, выполняется ли сейчас формирование отчета.
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		И ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
			Новый УникальныйИдентификатор(ИдентификаторЗадания)) <> Неопределено Тогда
			
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Обработки.КалендарьОтчетности.НовыйПараметрыОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ЭтотОбъект);
	ПараметрыОтчета.Пользователь = ТекущийПользователь;
	
	Возврат ПараметрыОтчета;
КонецФункции

&НаКлиенте
Процедура ОжидатьФормированиеОтчета(ДлительнаяОперация)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПолученияДанныхДляОтчета", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеОтчета(ПараметрыОтчета)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	СрокОжиданияДанных = ТекущаяУниверсальнаяДата() + ВремяОжиданияПолученияДанных(ТекущийПользователь);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, 
		"Обработки.КалендарьОтчетности.ДанныеДляОтчета", 
		ПараметрыОтчета);
		
	ИдентификаторЗадания = XMLСтрока(ДлительнаяОперация.ИдентификаторЗадания);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатПолученияДанныхДляОтчета(РезультатФормирования, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Если РезультатФормирования = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Формирование отчета отменено'"));
	ИначеЕсли РезультатФормирования.Статус = "Ошибка" Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При формировании отчета возникла ошибка:
			|%1'"), РезультатФормирования.КраткоеПредставлениеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
	Иначе //Статус = "Выполнено"
		РезультатВывода = ВывестиПолныйОтчет(РезультатФормирования.АдресРезультата);
		Если РезультатВывода = Неопределено Тогда
			// Подготовленные данные уже неактуальны. Пользователь уже изменил настройки
			// календаря. Следует переформировать отчет.
			СформироватьОтчет();
		ИначеЕсли РезультатВывода = Ложь Тогда
			// Не от всех приложений получены данные. Запланируем повторный опрос.
			ПодключитьОбработчикОжидания("Подключаемый_ОпроситьПодключенныеПриложения", 2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОпроситьПодключенныеПриложения()
	
	Если Не ОпроситьПодключенныеПриложения() Тогда
		// Не от всех приложений получены данные. Запланируем повторный опрос.
		ПодключитьОбработчикОжидания("Подключаемый_ОпроситьПодключенныеПриложения", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпроситьПодключенныеПриложения()
	
	ДанныеДляОтчета = ПолучитьИзВременногоХранилища(АдресДанныхОтчета);
	Если ДанныеДляОтчета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запросы = ДанныеДляОтчета.ОжидающиеЗапросы.Скопировать();
	Ответы = Обработки.КалендарьОтчетности.ОпроситьПодключенныеПриложения(Запросы);
	
	ДанныеДляОтчета.ОжидающиеЗапросы = Ответы.ОжидающиеЗапросы.Скопировать();
	
	Если Ответы.Данные.Количество() Тогда
		// Соберем вместе новые данные и полученные ранее.
		// Перекладывание данных из ДанныеДляОтчета.ДанныеПодключенныхПриложений в Ответы.Данные
		// позволяет избавиться от пустых строк по организациям, по которым ранее не удалось получить данные,
		// а сейчас данные были получены.
		ОрганизацииОтвета = Ответы.Данные.ВыгрузитьКолонку("Организация");
		Для Каждого СтрокаДанных Из ДанныеДляОтчета.ДанныеПодключенныхПриложений Цикл
			Если ОрганизацииОтвета.Найти(СтрокаДанных.Организация) = Неопределено Тогда
				НоваяСтрока = Ответы.Данные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		// Запишем обратно в ДанныеПодключенныхПриложений полученные ранее и новые данные.
		ДанныеДляОтчета.ДанныеПодключенныхПриложений = Ответы.Данные.Скопировать();
		Результат = Обработки.КалендарьОтчетности.СформироватьОтчет(ДанныеДляОтчета);
	КонецЕсли;
	
	Для Каждого Запрос Из Ответы.ОшибкиПриложений Цикл
		ДанныеДляОтчета.ОшибкиПриложений.Добавить(Запрос);
	КонецЦикла;
	АдресДанныхОтчета = ПоместитьВоВременноеХранилище(ДанныеДляОтчета, УникальныйИдентификатор);
	
	Обработки.КалендарьОтчетности.ОтметитьДанныеПолучены(
		Запросы,
		ДанныеДляОтчета.ОжидающиеЗапросы,
		ДанныеДляОтчета.ОшибкиПриложений);
		
	Если ДанныеДляОтчета.ОжидающиеЗапросы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущаяУниверсальнаяДата() <= СрокОжиданияДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Повторно запрашивать данные не будем. Выведем индикацию ошибки запроса.
	Для Каждого Запрос Из ДанныеДляОтчета.ОжидающиеЗапросы Цикл
		ДанныеДляОтчета.ОшибкиПриложений.Добавить(Запрос.Приложение);
	КонецЦикла;
	ДанныеДляОтчета.ОжидающиеЗапросы.Очистить();
	Результат = Обработки.КалендарьОтчетности.СформироватьОтчет(ДанныеДляОтчета);
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ВывестиПолныйОтчет(АдресРезультата)
	
	ИдентификаторЗадания = "";
	ДанныеДляОтчета = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДанныеДляОтчета.Вставить("Сегодня", Сегодня);
	Результат = Обработки.КалендарьОтчетности.СформироватьОтчет(ДанныеДляОтчета);
	
	// Проверим, не изменились ли настройки календаря пока фоновое задание готовило данные.
	Если ДанныеДляОтчета.Параметры.ДатаНачала <> ДатаНачала Или
		ДанныеДляОтчета.Параметры.СобытияКалендаря <> СобытияКалендаря Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Необходимость повторного опроса приложений.
	Если ДанныеДляОтчета.ОжидающиеЗапросы.Количество() > 0 Тогда
		АдресДанныхОтчета = ПоместитьВоВременноеХранилище(ДанныеДляОтчета, УникальныйИдентификатор);
		// Отчет частично сформирован. Требуется получение данных от подключенных приложений.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВремяОжиданияПолученияДанных(Пользователь)
	
	ВремяОжидания = 10; // время ожидания получения данных от других приложений по умолчанию(в секундах).
	
	УстановитьПривилегированныйРежим(Истина);
	Организации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Организации.Количество() = 0 Тогда
		Возврат ВремяОжидания;
	КонецЕсли;
	
	Организации.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Организации.ЗаполнитьЗначения(1, "Количество");
	
	Организации.Свернуть("ПриложениеСсылка", "Количество");
	Организации.Сортировать("Количество УБЫВ");
	
	МаксимальноеКоличествоОрганизаций = Организации[0].Количество; // наибольшее число организаций в одном приложении
	
	// Времени по умолчанию всегда достаточно, чтобы получить сведения от приложения, в котором 3 организации.
	// Если организаций больше, то следует пропорционально увеличить время ожидания для получения ответа.
	КоличествоОрганизаций = 3;
	
	Если МаксимальноеКоличествоОрганизаций <= КоличествоОрганизаций Тогда
		Возврат ВремяОжидания;
	КонецЕсли;
	
	Возврат Окр(ВремяОжидания * МаксимальноеКоличествоОрганизаций / КоличествоОрганизаций);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьПериод(Форма)
	
	ДатаНачала = Форма.ДатаНачала;
	ДатаКонца = Форма.ДатаКонца;
	Если Год(ДатаНачала) = Год(ДатаКонца) Тогда
		ТекстНадписи = СтрШаблон("%1 - %2", 
			Формат(ДатаНачала, "ДФ=ММММ"), Формат(ДатаКонца, "ДФ=""ММММ гггг 'г.'"""));
	Иначе
		ТекстНадписи = СтрШаблон("%1 - %2", 
			Формат(ДатаНачала, "ДФ=""ММММ гггг 'г.'"""), Формат(ДатаКонца, "ДФ=""ММММ гггг 'г.'"""));
	КонецЕсли;
	Форма.Элементы.НадписьПериод.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьБаннера(Форма, Пользователь)
	
	ПоказыватьМоиПриложения = ПоказыватьМоиПриложения(Пользователь);
	Форма.Элементы.ФормаМоиПриложения.Видимость = ПоказыватьМоиПриложения;
	Если Не ПоказыватьМоиПриложения Или Не ПоказыватьБаннер() Тогда
		Форма.Элементы.ГруппаБаннер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Сегодня()
	
	ТекущаяДата = ОбщегоНазначенияБП.ТекущаяДатаНаСервере();
	Возврат НачалоДня(ТекущаяДата);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьНеПоказыватьБаннер()
	
	ХранилищеОбщихНастроек.Сохранить("КалендарьОтчетности", "ПоказыватьБаннер", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказыватьБаннер()
	
	ПоказыватьБаннер = ХранилищеОбщихНастроек.Загрузить("КалендарьОтчетности", "ПоказыватьБаннер");
	Возврат ?(ПоказыватьБаннер = Неопределено, Истина, ПоказыватьБаннер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказыватьМоиПриложения(Пользователь)
	
	Возврат СообщенияОблачныхПриложений.МенеджерСервисаГотовПриниматьЗапросы();
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияМоиПриложения(РезультатЗакрытия, ПараметрыОповещения) Экспорт
	
	Если Элементы.ГруппаБаннер.Видимость Тогда
		Элементы.ГруппаБаннер.Видимость = Ложь;
		УстановитьНеПоказыватьБаннер();
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		КлючПароляПользователя = РезультатЗакрытия.КлючПароляПользователя;
		АдресХраненияПароля = РезультатЗакрытия.АдресХраненияПароля;
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМоиПриложения()
	
	ПараметрыОткрытияФормы = Новый Структура(
		"КлючПароляПользователя,АдресХраненияПароля",
		КлючПароляПользователя,
		АдресХраненияПароля);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияМоиПриложения", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.КалендарьОтчетности.Форма.ФормаМоиПриложения",
		ПараметрыОткрытияФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
