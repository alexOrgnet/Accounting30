#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ПериодСобытия, Правило, РегистрацияВНалоговомОргане, Описание, Срок, ЕстьИнформацияНаИТС, ИдентификаторЗадачи");
	
	Параметры.Свойство("НачальныйСрок", НачальныйСрок);
	ОпределитьСвязанныеПравила();
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна();
	ЭтоНулеваяОтчетность = НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И (ИдентификаторЗадачи = "НалогНаПрибыль" ИЛИ ИдентификаторЗадачи = "НДФЛ_Предприниматель");
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		Объект.Организация,
		Срок);
	Подключена1СОтчетность = РегламентированнаяОтчетностьБП.Подключена1СОтчетность(Объект.Организация);
	
	Если НачалоМесяца(Срок) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Срок);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ОбщегоНазначения.ТекущаяДатаПользователя() < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнениеЗадачБухгалтера.ПравилоНалогаУплачиваемогоОтдельно(Правило) Тогда
		ПлательщикЕНП = Ложь;
		ПлательщикЕНП_ПереходныйПериод = Ложь;
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(Срок >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(),
		ЗначениеЗаполнено(ПравилоУведомления),
		ЗначениеЗаполнено(ПравилоУведомления) И ПлательщикЕНП_ПереходныйПериод);
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	Элементы.ГруппаУведомлениеОНалогахПустая.Видимость = ПлательщикЕНП;
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		Периодичность = ПравилоУплаты.Периодичность;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Правило.Периодичность;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		Если Периодичность <> Перечисления.Периодичность.Месяц Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПериодСобытия);
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, КонецПериода);
	КонецЕсли;
	
	// Разместим информацию об особенностях налогового периода
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		
		РеквизитыПравил = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПравилоОтчета,
			"РасширенныйПервыйНалоговыйПериод, ФинансовыйПериод, Периодичность");
			
		ИнформацияНалоговыйПериод = ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
			РеквизитыПравил.РасширенныйПервыйНалоговыйПериод,
			ПериодСобытия,
			Объект.Организация,
			НСтр("ru = 'расчет'"),
			РеквизитыПравил.ФинансовыйПериод,
			РеквизитыПравил.Периодичность);
	КонецЕсли;
	
	ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
		Элементы,
		ИнформацияНалоговыйПериод,
		Элементы.СтраницыСобытий);
	
	УстановитьЗаголовокФормы();
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		ИЛИ ИмяСобытия = "АктуализацияОтменена") 
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия); 
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ТребуетсяАктуализация"
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности") Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия, ДатаАктуальности); 
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("Ссылка") 
		И Параметр.Ссылка = Декларация Тогда
		
		Элементы.ДекорацияСсылкаНаДекларацию.Заголовок = ПредставлениеДекларации(Декларация);
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты"
		Или ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов"
		Или ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		ОбработатьУплату();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПродленияСроковНалоговОтчетов" Тогда
		
		// Это же событие вызывается при включении (выключении) освобождения от налогов во 2 квартале 2020 года
		
		УправлениеФормойБлокУплата();
		ПроверитьАктуальностьДанных();// после включения/выключения может требоваться повторно закрыть месяц
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",  ПериодСобытия);
	ПараметрыФормы.Контекст.Вставить("Правило", ПравилоОтчета);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияУплатаНалогаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРасчетТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРасчетЗакрытьБаннерНажатие(Элемент)
	СкрытьБаннер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУплатаТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУплатаЗакрытьБаннерНажатие(Элемент)
	СкрытьБаннер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		
		Если ЗначениеЗаполнено(СпособОплаты) Тогда
			ОткрытьПлатежныйДокумент(Идентификатор);
		Иначе
			СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
			Если СтрокаПлатежа <> Неопределено
				И ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
				// Определим способ оплаты по платежному документу
				СпособОплаты = ?(ТипЗнч(СтрокаПлатежа.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
				ОткрытьПлатежныйДокумент(Идентификатор);
			Иначе
				// Предложим выбрать способ оплаты
				СписокВыбора = Новый СписокЗначений;
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
				ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборСпособаОплатыЗавершение",
				ЭтотОбъект, Новый Структура("Идентификатор", Идентификатор));
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Идентификатор);
				ИмяЭлемента = "ОткрытьПлатежныйДокумент" + НомерКонтейнера;
				ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора, Элементы[ИмяЭлемента]);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
		
		УдалитьПлатежныйДокумент(Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеРасчетСуммы(Команда)
	
	Если Не ПроверитьЗаполнениеПередВыполнениемРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеРасчета = Новый ОписаниеОповещения("ОбработатьВыполнениеРасчета", ЭтотОбъект, Истина); // требуется проверка актуальности после загрузки расчета
	ОткрытьФорму(ОписаниеДействияРасчет.ИмяФормы, ОписаниеДействияРасчет.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеРасчета);
	
	ВыполнениеЗадачБухгалтераКлиент.ЗарегистрироватьВЖурналеОткрытиеФормы(ОписаниеДействияРасчет.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаСправкуРасчетНажатие(Элемент)
		
	Если ПустаяСтрока(СправкаРасчет) Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Отчет." + СправкаРасчет + ".Форма", ПараметрыФормыРасшифровки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаАктуализация");
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = ПериодСобытия;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализироватьВесьПериод	   = РасчетПоДаннымЗакрытияМесяца; // актуализация до даты события
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоУведомления);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ПараметрыУведомления.Вставить("Правило",                     Правило);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Объект.Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
	ОбработатьУплату();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор)
	
	ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Идентификатор);
	
	СсылкаНаДокумент = Неопределено;
	Если ПараметрыФормыПлатежногоДокумента.Свойство("Ключ", СсылкаНаДокумент)
		И ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		ТипДокумента = ?(ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	Иначе
		
		ТипДокумента = ?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	КонецЕсли;
	
	ИмяФормыПлатежногоДокумента = ?(ТипДокумента = "РасходныйКассовыйОрдер", "ФормаОбъекта", "Форма.ФормаДокументаНалоговая");
	
	ПутьКФормеПлатежногоДокумента = СтрШаблон("Документ.%1.%2", ТипДокумента, ИмяФормыПлатежногоДокумента);
	
	ОткрытьФорму(ПутьКФормеПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокумент(Идентификатор)
	
	СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить %1?'"), СтрокаПлатежа.ПредставлениеПлатежногоПоручения);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументДляУдаления", СтрокаПлатежа.ПлатежноеПоручение);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПлатежныйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УдалитьДокументУплаты(ДополнительныеПараметры.ДокументДляУдаления);
		
		ОбработатьУплату();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаОплатыЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		СпособОплаты = ЭлементСписка.Значение;
		ОткрытьПлатежныйДокумент(ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработатьУплату();
	
КонецПроцедуры

&НаСервере
Функция ВыводитьОКТМО()
	
	//Удалим строки с пустым ОКТМО
	ТаблицаРасчетов = РеквизитФормыВЗначение("Расчет").Скопировать();
	Отбор = Новый Структура("ОКТМО", "");
	СтрокиКУдалению = ТаблицаРасчетов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивОКТМО = ТаблицаРасчетов.ВыгрузитьКолонку("ОКТМО");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОКТМО);
	
	Возврат МассивОКТМО.Количество() > 1;
	
КонецФункции

&НаСервере
Функция НовыйШрифтКурсив()
	
	Возврат Новый Шрифт(,,,Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета)
	
	ШаблонТекста = НСтр("ru = 'Отправка отчета в электронном виде не предусмотрена законодательством.
                        |Сформируйте отчет, распечатайте и отправьте по почте или отнесите в %1'");
	
	ГосударственныйОрган = НСтр("ru = 'государственный орган'"); // Значение для %1. Если БРО предоставит более подходящее название органа, то будет выведено оно.
	
	ИмяОтчета = ИмяОтчета(ПравилоОтчета);
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда
		ОсобыйГосударственныйОрган = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеПолучателяБумажногоДокумента(ИмяОтчета);
		Если ЗначениеЗаполнено(ОсобыйГосударственныйОрган) Тогда
			ГосударственныйОрган = ОсобыйГосударственныйОрган;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрШаблон(ШаблонТекста, ГосударственныйОрган));
	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяОтчета(ПравилоОтчета)
	
	ОписаниеПолейПравила = Новый Структура;
	ОписаниеПолейПравила.Вставить("КодЗадачи",  "Владелец.Код");
	ОписаниеПолейПравила.Вставить("КодПравила", "Код");
	
	СвойстваПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОтчета, ОписаниеПолейПравила);
	Если Не ЗначениеЗаполнено(СвойстваПравила.КодЗадачи)
		Или Не ЗначениеЗаполнено(СвойстваПравила.КодПравила) Тогда
		Возврат "";
	КонецЕсли;
	
	Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
		СвойстваПравила.КодЗадачи,
		СвойстваПравила.КодПравила);
		
	Возврат ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование);
	
КонецФункции

&НаСервере
Функция КодЗадачиУплатыНалога()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоУплаты, "Владелец.Код");
КонецФункции

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);	
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены = Истина;
	НезаполненныеРеквизиты        = Неопределено;
	
	Если НЕ РасчетСуммыВыполнен Тогда // Если отчет уже подготовлен или не предусмотрен, проверять реквизиты не требуется.
		
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоОтчета);
		ИмяРеглОтчета    = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
		
		РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
			ИмяРеглОтчета, Объект.Организация, ПериодСобытия, НезаполненныеРеквизиты);
			
		Если НЕ РеквизитыОрганизацииЗаполнены Тогда
			АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = НЕ РеквизитыОрганизацииЗаполнены;
	
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПередВыполнениемРасчета()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Объект.Организация);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Организация)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
	
	ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
		Организация,
		НезаполненныеРеквизиты,
		"СообщениеТребуютсяРеквизиты",
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомления()

	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстВопроса = НСтр("ru='Не подготовлено уведомление об исчисленной сумме налога.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Не сформирована операция по единому налоговому счету.
		|Продолжить?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупредитьОбОтсутствииУведомленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Уплатить();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Описание", Описание);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если ИспользоватьНесколькоОрганизаций Тогда 
		ШаблонТекста = НСтр("ru = '[Описание] ([Организация])'");
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "НаименованиеСокращенное");
		ПараметрыТекста.Вставить("Организация", НаименованиеОрганизации);
	Иначе
		ШаблонТекста = НСтр("ru = '[Описание]'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница  = Элементы.СтраницаСобытийРабочая;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальныйСрок) И НачальныйСрок > ТекущаяДатаСеанса() Тогда
		Элементы.ФонИнформацияНачальныйСрок.Видимость = Истина;
		Элементы.ИнформацияНачальныйСрок.Заголовок = СтрШаблон(НСтр("ru='Сдавать отчет требуется не ранее %1.%2Вы можете подготовить отчет и вернуться к задаче позднее.'"), Формат(НачальныйСрок, "ДФ='d MMMM'"), Символы.ПС);
	Иначе
		Элементы.ФонИнформацияНачальныйСрок.Видимость = Ложь;
	КонецЕсли;
	
	//Расчет
	УправлениеФормойБлокРасчет();
	//Уведомление
	УправлениеФормойБлокУведомление();
	//Уплата
	УправлениеФормойБлокУплата();
	//ИТС
	УправлениеФормойБлокИТС();
	
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокРасчет()
	
	КУдалению = Новый Массив;
		
	Если Не ТребуетсяУплата И Не РасчетПоДаннымЗакрытияМесяца Тогда
		Элементы.ДекорацияИнформацияРасчетСуммы.Видимость = Ложь;
		Элементы.ОписаниеРасчет.Видимость                 = Ложь;
		Элементы.ОписаниеРасчетИтог.Видимость             = Ложь;
		Элементы.ДекорацияРасчетСуммы.Заголовок = НСтр("ru = 'Подготовка отчета'");
	Иначе
		Элементы.ДекорацияИнформацияРасчетСуммы.Видимость = ЗначениеЗаполнено(ИнформацияРасчетСуммы);
		Элементы.ДекорацияИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ИнформацияРасчетСуммы, НовыйШрифтКурсив());
		Элементы.ДекорацияНетДанныхДляРасчета.Видимость = ТребуетсяРасчет И Расчет.Количество() = 0 И Не ЭтоНулеваяОтчетность;
		Элементы.ДекорацияНетДанныхДляРасчета.Заголовок = ИнформацияНетДанныхДляРасчета;
	КонецЕсли;
	
	// Информация об ограничении отправки
	ОтправкаОтчетаОграничена = Ложь;
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		ОтправкаОтчетаОграничена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоОтчета, "ОтправкаОтчетаОграничена");
		Если ОтправкаОтчетаОграничена = Истина Тогда
			ОтправкаОтчетаОграничена = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтправкаОтчетаОграничена Тогда
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Ложь;
	Иначе
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Истина;
		Элементы.СообщениеОтправкаОтчетаОграничена.Заголовок = ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДопИнформацияРасчетСуммы) Тогда
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ДопИнформацияРасчетСуммы, НовыйШрифтКурсив());
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Истина;
	Иначе
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Ложь;
	КонецЕсли;
		
	Если РасчетСуммыВыполнен Тогда
		
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Истина;
		Если РасчетПоДаннымЗакрытияМесяца И ЗначениеЗаполнено(ПравилоОтчета) И Не ЗначениеЗаполнено(Декларация) Тогда
			Элементы.СтраницаВыполнитьДействиеРасчет.Видимость = ЗначениеЗаполнено(ОписаниеДействияРасчет.Наименование);
			Элементы.ВыполнитьДействиеРасчетСуммы.Заголовок    = ОписаниеДействияРасчет.Наименование;
		Иначе
			Элементы.СтраницаВыполнитьДействиеРасчет.Видимость = Ложь;
		КонецЕсли;
		Элементы.ДекорацияСсылкаНаДекларацию.Видимость       = УплатаПоДекларации Или ТребуетсяДекларация И ЗначениеЗаполнено(ДекларацияНаименование);
		Элементы.ДекорацияСсылкаНаДекларацию.Заголовок       = ДекларацияНаименование;
		Элементы.ДекорацияСсылкаНаСправкуРасчет.Видимость    = ЗначениеЗаполнено(ИнформацияСправкаРасчет) И ТребуетсяРасчет И Не ЭтоНулеваяОтчетность;
		Элементы.ДекорацияСсылкаНаСправкуРасчет.Заголовок    = ИнформацияСправкаРасчет;
		
		ВыводитьОКТМО = ВыводитьОКТМО();
		ОтображатьИтог = Расчет.Количество() > 2;
		
		Для Каждого СтрокаРасчета Из Расчет Цикл
			
			Если СтрокаРасчета.ЭтоИтоговаяСтрока И Не ОтображатьИтог Тогда
				Продолжить;
			КонецЕсли;
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(СтрокаРасчета.ПолучитьИдентификатор());
			ИмяЭлемента = "ОписаниеРасчет" + ?(СтрокаРасчета.ЭтоИтоговаяСтрока,"Итог", "");
			Если Элементы.Найти(ИмяЭлемента + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы[ИмяЭлемента], Элементы.ГруппаРасчетНастраиваемая, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеРасчетСуммы(СтрокаРасчета, НомерКонтейнера, ВыводитьОКТМО);
			Элементы[ИмяЭлемента + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
		
	Иначе
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Ложь;
		Элементы.СтраницаВыполнитьДействиеРасчет.Видимость   = Истина;
		Элементы.ВыполнитьДействиеРасчетСуммы.Заголовок      = ОписаниеДействияРасчет.Наименование;
		Элементы.ВыполнитьДействиеРасчетСуммы.Видимость      = ЗначениеЗаполнено(ОписаниеДействияРасчет.Наименование);
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.ГруппаРасчетНастраиваемая.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Расчет.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	// Уберем шаблоны
	Элементы.ОписаниеРасчет.Видимость     = Ложь;
	Элементы.ОписаниеРасчетИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойГруппаАктуализация(Форма, Событие, ДатаАктуальностиДанных = '00010101')
	
	Элементы = Форма.Элементы;
	
	// Если автоматическая актуализация невозможна, то вся группа актуализации скрыта.
	// В ином случае:
	// - если налог рассчитывается непосредственно по данным закрытия месяца, то всегда доступна актуализация (если возможна)
	// - если сумма налога берется из декларации и декларация еще не создана (НЕ РасчетСуммыВыполнен);
	ОтображатьАктуализицию = Форма.АктуализацияВозможна И Событие = "ТребуетсяАктуализация"
		И (Форма.РасчетПоДаннымЗакрытияМесяца Или Форма.УплатаПоДекларации И Не Форма.РасчетСуммыВыполнен);
		
	Элементы.Актуализация.Видимость = ОтображатьАктуализицию;
	
	Если Не ОтображатьАктуализицию Тогда
		Возврат;
	КонецЕсли;	
		
	Элементы.ИдетАктуализация.Видимость         = (Событие = "ЗапущенаАктуализация");
	Элементы.ИдетПроверкаАктуальности.Видимость = (Событие = "ЗапущенаПроверкаАктуальности");
	
	Если Событие = "ТребуетсяАктуализация" Тогда
		Элементы.ТребуетсяАктуализация.Видимость = Истина;
		Элементы.ДекорацияАктуальность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные учета неактуальны с %1.'"), Формат(ДатаАктуальностиДанных, "ДФ=dd.MM.yyyy"));
	Иначе
		Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	КонецЕсли;		
				
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	Если (Не ЗначениеЗаполнено(ПравилоУплаты) И Не ЗначениеЗаполнено(ПравилоУведомления))
		Или ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
		Элементы.ГруппаУведомлениеОНалогах.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаУведомлениеОНалогах.Видимость = Истина;
	КонецЕсли;
	
	ОсвобождениеОтУплатыНалога = НалоговыйУчет.ВозможноОсвобождениеОтНалога(КодЗадачиУплатыНалога(), ПериодСобытия)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Объект.Организация);
		
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект,
		ТребуетсяУведомление И Не ОсвобождениеОтУплатыНалога,
		ИнформацияУведомление,
		?(ПериодСобытия >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), 2, 0));
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУплата()
	
	КУдалению    = Новый Массив;
	ИтогПоУплате = 0;
	
	ТекстИнформацияУплатаНалога = ИнформацияУплатаНалога;
	ШрифтИнформацияУплатаНалога = НовыйШрифтКурсив();
	
	ОсвобождениеОтУплатыНалога = НалоговыйУчет.ВозможноОсвобождениеОтНалога(КодЗадачиУплатыНалога(), ПериодСобытия)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Объект.Организация);
		
	Если ОсвобождениеОтУплатыНалога Тогда
		
		Если Справочники.Организации.ЭтоЮрЛицо(Объект.Организация) Тогда
			ШаблонHTML = НСтр("ru = 'Организация освобождена от уплаты %1 за 2 квартал 2020 года
                               |<a href=''Антикризис''>Настройки налогов и отчетов</a>'");
		Иначе
			ШаблонHTML = НСтр("ru = 'Предприниматель освобожден от уплаты %1 за 2 квартал 2020 года
                               |<a href=''Антикризис''>Настройки налогов и отчетов</a>'");
		КонецЕсли;
		// Переход по гиперссылке - в ДекорацияИнформацияУплатаНалогаОбработкаНавигационнойСсылки
		
		ПредставлениеНалогаРодительныйПадеж = ВыполнениеЗадачБухгалтера.ПредставлениеНалогаРодительныйПадеж(КодЗадачиУплатыНалога());
		ТекстИнформацияУплатаНалога = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(ШаблонHTML, ПредставлениеНалогаРодительныйПадеж));
		ШрифтИнформацияУплатаНалога = Новый Шрифт;
		
	КонецЕсли;
		
	Элементы.ДекорацияИнформацияУплатаНалога.Заголовок = Новый ФорматированнаяСтрока(
		ТекстИнформацияУплатаНалога,
		ШрифтИнформацияУплатаНалога);
		
	Если ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
		Элементы.ГруппаУплата.Видимость = Ложь;
	ИначеЕсли Не ТребуетсяУплата Или ОсвобождениеОтУплатыНалога Тогда
		Элементы.СтраницыУплата.Видимость  = Ложь;
	Иначе
		
		Элементы.СтраницыУплата.Видимость = Истина;
		
		Если ЕстьОплата Тогда
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Истина;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Ложь;
			
			Для Каждого Платеж Из Платежи Цикл 
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеПлатеж" + НомерКонтейнера) = Неопределено Тогда
					ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект,
						Элементы.ОписаниеПлатеж, Элементы.СтраницаРезультатВыполненияУплата, НомерКонтейнера, Элементы.ГруппаОтправкаПлатежейВБанк);
					Элементы["ДекорацияПлатеж" + НомерКонтейнера].УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияПлатежОбработкаНавигационнойСсылки");
				КонецЕсли;
				ОформитьСобытиеУплатаНалога(Платеж, НомерКонтейнера);
				Элементы["ОписаниеПлатеж" + НомерКонтейнера].Видимость = Истина;
			КонецЦикла;
			
			ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку();
			ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку И ТребуетсяВыгрузитьДокументыОплаты();
			
			Элементы.ОтправитьПлатежиВБанк.Видимость = ТребуетсяОтправитьДокументыОплатыПоБанку;
			Элементы.ВыгрузитьПлатежи.Видимость = ТребуетсяВыгрузитьДокументыОплаты;
			
		Иначе
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Ложь;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Истина;
			
			СпособОплатыПоУмолчанию = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
			Если Не ЗначениеЗаполнено(СпособОплатыПоУмолчанию) Тогда
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить с банковского счета'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить по квитанции'");
				Элементы.ВыполнитьДействиеУплатаКасса.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
				
			ИначеЕсли СпособОплатыПоУмолчанию = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
				
				//Оплата только через банк
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить'");
				Элементы.ВыполнитьДействиеУплатаБанк.ОтображениеФигуры = ОтображениеФигурыКнопки.Авто;
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Ложь;
				
			ИначеЕсли СпособОплатыПоУмолчанию = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
				
				//Оплата только через кассу
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить'");
				Элементы.ВыполнитьДействиеУплатаКасса.ОтображениеФигуры = ОтображениеФигурыКнопки.Авто;
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Ложь;
				
			КонецЕсли;
			
			Элементы.ПредупреждениеНулеваяОтчетность.Видимость = ЭтоНулеваяОтчетность;
			
		КонецЕсли;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияУплата.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Платежи.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	//Итог по уплате
	Если Платежи.Количество() > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если Элементы.Найти("ОписаниеПлатежИтог0") = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект,
				Элементы.ОписаниеПлатежИтог, Элементы.СтраницаРезультатВыполненияУплата, 0, Элементы.ГруппаОтправкаПлатежейВБанк);
		КонецЕсли;
		Элементы.ЗначениеПлатежИтог0.Заголовок = Формат(ИтогПоУплате, ФорматСумм);
		Элементы.ОписаниеПлатежИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеПлатеж.Видимость     = Ложь;
	Элементы.ОписаниеПлатежИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокИТС()
	
	Элементы.ГруппаИТС.Видимость = ЕстьИнформацияНаИТС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	КнопкаПоУмолчаниюРасчет = Не Форма.РасчетСуммыВыполнен
		И Форма.РеквизитыОрганизацииЗаполнены;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеРасчетСуммы, КнопкаПоУмолчаниюРасчет);
	
	КнопкаПоУмолчаниюУведомление = Не КнопкаПоУмолчаниюРасчет И Форма.РеквизитыОрганизацииЗаполнены
		И Форма.ПлательщикЕНП И Не Форма.УведомлениеОбИсчисленныхНалогахПодготовлено;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеСформироватьУведомление, КнопкаПоУмолчаниюУведомление);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС, КнопкаПоУмолчаниюУведомление);
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(Форма);
	КнопкаПоУмолчаниюОтправитьВБанк = Не КнопкаПоУмолчаниюРасчет И Не КнопкаПоУмолчаниюУведомление
		И Форма.РеквизитыОрганизацииЗаполнены И ЗначениеЗаполнено(НеОтправленныеПлатежи);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОтправитьПлатежиВБанк, КнопкаПоУмолчаниюОтправитьВБанк);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыгрузитьПлатежи, КнопкаПоУмолчаниюОтправитьВБанк);
		
	КнопкаПоУмолчаниюУплата = Не КнопкаПоУмолчаниюРасчет И Не КнопкаПоУмолчаниюУведомление
		И Не КнопкаПоУмолчаниюОтправитьВБанк И Не Форма.ЕстьОплата;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ВыполнитьДействиеУплатаБанк, КнопкаПоУмолчаниюУплата);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеРасчетСуммы(Событие, Номер, ВыводитьОКТМО)
	
	//Налог
	ИмяЭлемента = "НаименованиеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '%1:'"), Событие.НаименованиеПоказателя);
		
	//ОКТМО
	Если ВыводитьОКТМО Тогда
		Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКТМО);
	Иначе
		Элементы.НаименованиеПоказателя.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
	//Сумма налога
	ИмяЭлемента = "ЗначениеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = Формат(Событие.ЗначениеПоказателя, ФорматСумм);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНалога(Событие, Номер)
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручение) Тогда
		ЗаголовокПлатежа = ПредставлениеПлатежа(Событие);
		СуммаПлатежа     = Событие.СуммаПлатежногоПоручения;
	Иначе
		ЗаголовокПлатежа = Событие.Наименование;
		СуммаПлатежа     = Событие.Сумма;
	КонецЕсли;
	
	ИтогПоУплате = ИтогПоУплате + СуммаПлатежа;
	// Платежный документ
	Элемент = Элементы["ДекорацияПлатеж" + Номер];
	Элемент.Заголовок = ЗаголовокПлатежа;
	
	// Сумма
	Элемент = Элементы["СуммаПлатежногоДокумента" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаПлатежа);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПлатежа(СтрокаКоллекцииПлатежей)
	
	СвойстваПлатежа = Новый Структура("ПлатежноеПоручение, Оплачено, Состояние, ПредставлениеПлатежногоПоручения");
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СтрокаКоллекцииПлатежей);
	
	ПредставлениеПлатежа = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СвойстваПлатежа.Состояние) Тогда
		СтатусОплаты = ?(СвойстваПлатежа.Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
	Иначе
		СтатусОплаты = Строка(СвойстваПлатежа.Состояние);
	КонецЕсли;
	
	ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1 (%2)",
		СвойстваПлатежа.ПредставлениеПлатежногоПоручения, СтатусОплаты), , , , "ОткрытьДокумент"));
	
	Если Не ПравоДоступа("Изменение", СвойстваПлатежа.ПлатежноеПоручение.Метаданные()) Тогда
		Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	Конецесли;
	
	ТипПлатежногоДокумента = ТипЗнч(СвойстваПлатежа.ПлатежноеПоручение);
	
	Если (СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Отправлено)
		Или (ТипПлатежногоДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
		ПредставлениеПлатежа.Добавить("  ");
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

&НаКлиенте
Процедура ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности = Истина, ВыводитьОкноОжидания = Ложь)

	ДлительнаяОперация = ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов);
			
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьРезультат(ДлительнаяОперация.АдресРезультата);
		НастроитьБаннеры();
		Если ЗапуститьПроверкуАктуальности Тогда
			ПодключитьПроверкуАктуальности();
		Иначе
			// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
			УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
			УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		КонецЕсли;	
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииДанныхЗадачи", ЭтотОбъект, ЗапуститьПроверкуАктуальности);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;	
		
КонецПроцедуры
 
&НаСервере
Функция ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов)
	
	ПараметрыЗадачи = Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ЭтотОбъект);
	ПараметрыЗадачи.Вставить("Действие", Правило.Действие);
	ПараметрыЗадачи.Организация = Объект.Организация;
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи.СоставРазделов, СоставРазделов);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Помощник уплаты налога: получение данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНалога.СведенияПоЗадаче",
		ПараметрыЗадачи,
		ПараметрыВыполнения);
				
КонецФункции

&НаКлиенте
Процедура ПриПолученииДанныхЗадачи(Результат, ЗапуститьПроверкуАктуальности) Экспорт 

	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ЗагрузитьРезультат(Результат.АдресРезультата);
	НастроитьБаннеры();
	
	Если ЗапуститьПроверкуАктуальности Тогда
		ПодключитьПроверкуАктуальности();
	Иначе
		// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	КонецЕсли;	
		
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьВыполнениеРасчета(РезультатЗакрытия = Неопределено, ЗапуститьПроверкуАктуальности) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУплату()
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультат(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	СоставРазделов = Результат.СоставРазделов;
	
	//Расчет, уплата
	Если СоставРазделов.РасчетУплата Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОРасчетеСуммы);
		
		Расчет.Очистить();
		ТаблицаРасчета = Результат.СведенияОРасчетеСуммы.ТаблицаРасчета;
		Если ТаблицаРасчета <> Неопределено Тогда
			Расчет.Загрузить(ТаблицаРасчета);
		КонецЕсли;
		
		Платежи.Очистить();
		ТаблицаПлатежей = Результат.СведенияОРасчетеСуммы.ТаблицаПлатежей;
		Если ТаблицаПлатежей <> Неопределено Тогда
			Платежи.Загрузить(ТаблицаПлатежей);
		КонецЕсли;
		
		УведомленияОбИсчисленныхНалогах.Очистить();
		ТаблицаУведомлений = Результат.СведенияОРасчетеСуммы.ТаблицаУведомлений;
		Если ТаблицаУведомлений <> Неопределено Тогда
			УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомлений);
		КонецЕсли;
		УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() <> 0;
		СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеДекларации(Декларация)
	Возврат Обработки.ПомощникУплатыНалога.ПредставлениеДекларации(Декларация);
КонецФункции

&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Периодичность = ПравилоУплаты.Периодичность;
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Правило.Периодичность;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	Если Периодичность <> Перечисления.Периодичность.Месяц Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ПериодСобытия);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПериодСобытия);
	
	Если Не ЗначениеЗаполнено(СрокУплатыНалога) Тогда
		СрокУплатыНалога = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУплаты, КонецПериода)
	КонецЕсли;
	НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
	
	Для Каждого СтрокаРасчета Из Расчет Цикл
		
		Если СтрокаРасчета.ЭтоИтоговаяСтрока Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаРасчета.Налог) Тогда
			Продолжить;
		ИначеЕсли НалогиУплачиваемыеОтдельно.Найти(СтрокаРасчета.Налог) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		НоваяСтрока.РегистрацияВНалоговомОргане = СтрокаРасчета.РегистрацияВНалоговомОргане;
		НоваяСтрока.КодПоОКТМО                  = СтрокаРасчета.ОКТМО;
		НоваяСтрока.Налог                       = СтрокаРасчета.Налог;
		НоваяСтрока.КодБК                       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(СтрокаРасчета.Налог, СтрокаРасчета.ВидНалоговогоОбязательства, КонецПериода);
		НоваяСтрока.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаРасчета.Налог, КонецПериода);
		НоваяСтрока.Сумма                       = СтрокаРасчета.ЗначениеПоказателя;
		Если ЗначениеЗаполнено(СтрокаРасчета.СрокУплаты) Тогда
			НоваяСтрока.СрокУплаты = СтрокаРасчета.СрокУплаты;
		Иначе
			НоваяСтрока.СрокУплаты = СрокУплатыНалога;
		КонецЕсли;
		
		НоваяСтрока.НачалоПериода = СтрокаРасчета.НачалоПериода;
		НоваяСтрока.КонецПериода  = СтрокаРасчета.КонецПериода;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.НачалоПериода) Тогда
			НоваяСтрока.НачалоПериода = НачалоПериода;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.КонецПериода) Тогда
			НоваяСтрока.КонецПериода = КонецПериода;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
	ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, ЭтотОбъект);
	ПараметрыНабораПравил.Организация = Объект.Организация;
	ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыНабораПравил);
	КодыПравилВыполняемыхЕдинымПомощником = ВыполнениеЗадачБухгалтера.КодыПравилИсключенийВыполняемыхЕдинымПомощником();
	
	ПравилоУплатыВыполняетсяЕдинымПомощником = Ложь;
	Если ЗначениеЗаполнено(ПравилоУплаты) Тогда
		РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоУплаты, "ВыполняетсяЕдинымПомощником, Код");
		ПравилоУплатыВыполняетсяЕдинымПомощником = 
			РеквизитыПравила.ВыполняетсяЕдинымПомощником 
			ИЛИ (КодыПравилВыполняемыхЕдинымПомощником.Найти(РеквизитыПравила.Код) <> Неопределено
			И Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		ОписаниеТаблицыНалоги(),
		Правило,
		ПериодСобытия,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	Если НЕ РасчетПоДаннымЗакрытияМесяца 
		И (РасчетСуммыВыполнен ИЛИ НЕ УплатаПоДекларации ИЛИ НЕ АктуализацияВозможна) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаПроверкаАктуальности");
		
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = ПериодСобытия;
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = РасчетПоДаннымЗакрытияМесяца;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	Иначе
		ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Объект.Организация, ДатаАктуальности);
		ТребуетсяАктуализация = Истина;
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	ПараметрыОповещения = Новый Структура("Организация", Объект.Организация);
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
	АдресХранилищаАктуализации = "";
	
	Если РезультатАктуализации.Выполнено Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
		Если РасчетПоДаннымЗакрытияМесяца Тогда
			// Запускаем загрузку обновленных данных расчета
			ОбработатьВыполнениеРасчета(, Ложь);
		КонецЕсли;	
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовУплаты

&НаКлиенте
Процедура ПередУплатойНалога()
	
	Если ПлательщикЕНП И Не УведомлениеОбИсчисленныхНалогахПодготовлено Тогда
		ПредупредитьОбОтсутствииУведомления();
	Иначе
		Уплатить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Уплатить()
	
	// Если платежей несколько, то создаем и проводим документы.
	Если Платежи.Количество() > 1 Тогда
		СформироватьДокументы();
		ОбработатьУплату();
		Возврат;
	Иначе
		
		ИмяФормыПлатежногоДокумента = 
		?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая");
		
		Если Платежи.Количество() = 0 Тогда
			ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Неопределено);
		Иначе
			ПараметрыФормыПлатежногоДокумента =  ПараметрыФормыПлатежногоДокумента(Платежи[0].ПолучитьИдентификатор());
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументы()
	
	СозданныеПлатежныеПоручения = Новый Массив;
	
	Для каждого СтрокаПлатежа Из Платежи Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
		Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			СозданныеПлатежныеПоручения.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(СозданныеПлатежныеПоручения);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, ПравилоУплаты, ПериодСобытия);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.%3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма, Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа)
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ", СтрокаПлатежа.ПлатежноеПоручение);
	КонецЕсли;
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = ?(ЗначениеЗаполнено(СтрокаПлатежа.ВидНалоговогоОбязательства),
		СтрокаПлатежа.ВидНалоговогоОбязательства,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.Аванс                      = СтрокаПлатежа.Аванс;
	ОписаниеПлатежа.КБК                        = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО                      = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КодНалоговогоОргана        = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма                      = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	
	Если ПлательщикЕНП Тогда
		РеквизитыГоловнойОрганизации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
			Объект.Организация, СтрокаПлатежа.Налог, ПериодСобытия);
		ОписаниеПлатежа.КПППлательщика    = РеквизитыГоловнойОрганизации.КПП;
		ОписаниеПлатежа.ОКАТО             = РеквизитыГоловнойОрганизации.ОКТМО;
		ОписаниеПлатежа.ПоказательПериода = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	Иначе
		КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
		Если УплатаПоМестуПостановкиНаУчет И ЗначениеЗаполнено(КПППлательщика) Тогда
			ОписаниеПлатежа.КПППлательщика = КПППлательщика;
		КонецЕсли;
		ОписаниеПлатежа.ПоказательПериода = ?(ЗначениеЗаполнено(СтрокаПлатежа.НалоговыйПериод), СтрокаПлатежа.НалоговыйПериод, ПоказательПериода);
		ОписаниеПлатежа.ДатаДекларации = ДатаДекларации;
	КонецЕсли;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, РегистрацияВНалоговомОргане", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, РегистрацияВНалоговомОргане);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоПлатежногоДокумента()
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.Декларация                 = Декларация;
	
	Если ПлательщикЕНП Тогда
		
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУплаты.Периодичность, ПериодСобытия);
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
			Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
		
		РеквизитыОсновнойРегистрации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
			Объект.Организация, ОписаниеПлатежа.Налог, КонецПериода);
		
		ОписаниеПлатежа.КПППлательщика      = РеквизитыОсновнойРегистрации.КПП;
		ОписаниеПлатежа.КБК                 = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
			ОписаниеПлатежа.Налог, , КонецПериода);
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			ГоловнаяОрганизация,
			Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
		ОписаниеПлатежа.Описание            = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			ОписаниеПлатежа.Налог);
		ОписаниеПлатежа.ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		ОписаниеПлатежа.ОКАТО               = РеквизитыОсновнойРегистрации.ОКТМО;
		
	Иначе
		ОписаниеПлатежа.Налог               = Налог;
		ОписаниеПлатежа.КБК                 = КБК;
		ОписаниеПлатежа.КодНалоговогоОргана = КодНалоговогоОргана;
		ОписаниеПлатежа.Описание            = Описание;
		
		КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
		Если УплатаПоМестуПостановкиНаУчет И ЗначениеЗаполнено(КПППлательщика) Тогда
			ОписаниеПлатежа.КПППлательщика = КПППлательщика;
		КонецЕсли;
		ОписаниеПлатежа.ПоказательПериода  = ПоказательПериода;
		ОписаниеПлатежа.ДатаДекларации             = ДатаДекларации;
		
	КонецЕсли;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, РегистрацияВНалоговомОргане", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, РегистрацияВНалоговомОргане);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	Возврат ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

#КонецОбласти

#Область Баннеры

&НаКлиенте
Процедура НастроитьБаннеры()
	
	Если ТипЗнч(БаннерБлокРасчет) <> Тип("Структура") 
		 Или Не ЗначениеЗаполнено(БаннерБлокРасчет.ИдентификаторБаннера)Тогда
		Элементы.ГруппаРасчетБаннер.Видимость = Ложь;
	Иначе
		Элементы.ГруппаРасчетБаннер.Видимость = Истина;
		Элементы.ГруппаРасчетТекстБаннера.Заголовок = БаннерБлокРасчет.Сообщение;
	КонецЕсли;	
	
	Если ТипЗнч(БаннерБлокУплата) <> Тип("Структура") 
		 Или Не ЗначениеЗаполнено(БаннерБлокУплата.ИдентификаторБаннера)Тогда
		Элементы.ГруппаУплатаБаннер.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУплатаБаннер.Видимость = Истина;
		Элементы.ГруппаУплатаТекстБаннера.Заголовок = БаннерБлокУплата.Сообщение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Антикризис" Тогда
		СтандартнаяОбработка = Ложь;
		НастройкиУчетаКлиент.ОткрытьНастройкиАнтикризис(Объект.Организация);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗаявлениеОЛьготеПоНалогу" Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеДействия = БаннерБлокРасчет.ОписаниеДействийПоСсылкам.ЗаявлениеОЛьготеПоНалогу;
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьБаннер(Знач ИмяЭлемента)
	
	Если СтрНайти(ИмяЭлемента, "ЗакрытьБаннер") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	НаименованиеБлока = СтрЗаменить(ИмяЭлемента, "ЗакрытьБаннер", "");
	
	ИдентификаторБаннера = "";
	
	Если НаименованиеБлока = "ГруппаРасчет" Тогда
		ИдентификаторБаннера = БаннерБлокРасчет.ИдентификаторБаннера;
	ИначеЕсли НаименованиеБлока = "ГруппаУплата" Тогда
		ИдентификаторБаннера = БаннерБлокУплата.ИдентификаторБаннера;
	КонецЕсли;	
	
	Обработки.ПомощникУплатыНалога.СохранитьНастройкуВидимостиБаннера(
		Объект.Организация, 
		КодЗадачиУплатыНалога(), 
		ИдентификаторБаннера, 
		Ложь);
		
	Элементы[НаименованиеБлока+"Баннер"].Видимость = Ложь;	
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	
	ОбработатьУплату();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервере
Функция ТребуетсяВыгрузитьДокументыОплаты()
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервере
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку()
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляВыгрузкиВФайл()
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(
		Объект.Организация, НеИсполненныеПлатежи);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку()
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(
		Объект.Организация, НеОтправленныеПлатежи);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

#КонецОбласти
