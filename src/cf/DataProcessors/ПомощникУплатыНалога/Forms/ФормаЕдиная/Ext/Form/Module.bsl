#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, НСтр("ru='рассчитать налоги'"));
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ПериодСобытия, Правило, РегистрацияВНалоговомОргане, Описание, Срок, ЕстьИнформацияНаИТС, ИдентификаторЗадачи, КонтекстЕдиногоПомощника");
	
	ПростойУчетЕНС = Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ЭтоПравилоУплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Правило, "Действие") = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
	ЭтоПравилоУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Правило, "Действие") = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
	
	ОпределитьСвязанныеПравила();
	
	ПрочитатьСуммуЗачетаЕНС();
	
	// Информация об ограничении отправки
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		ОтправкаОтчетаОграничена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоОтчета, "ОтправкаОтчетаОграничена");
		Если ОтправкаОтчетаОграничена = Истина Тогда
			ОтправкаОтчетаОграничена = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
		КонецЕсли;
	КонецЕсли;
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ЕстьПравоНаДОсКО     = ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь);
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна();
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		Объект.Организация,
		Срок);
		
	Если НачалоМесяца(Срок) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Срок);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ОбщегоНазначения.ТекущаяДатаПользователя() < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(Срок >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(),
		ЗначениеЗаполнено(ПравилоУведомления),
		ЗначениеЗаполнено(ПравилоУведомления) И ПлательщикЕНП_ПереходныйПериод);
	ЦветПодсветкиБлока  = ЦветаСтиля.БыстрыеОтборыФонГруппы;	
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		Периодичность = ПравилоУплаты.Периодичность;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Правило.Периодичность;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		Если Периодичность <> Перечисления.Периодичность.Месяц Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПериодСобытия);
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, КонецПериода);
	КонецЕсли;
	
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	// Разместим информацию об особенностях налогового периода
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		
		РеквизитыПравил = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПравилоОтчета,
			"РасширенныйПервыйНалоговыйПериод, ФинансовыйПериод, Периодичность");
			
		ИнформацияНалоговыйПериод = ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
			РеквизитыПравил.РасширенныйПервыйНалоговыйПериод,
			ПериодСобытия,
			Объект.Организация,
			НСтр("ru = 'расчет'"),
			РеквизитыПравил.ФинансовыйПериод,
			РеквизитыПравил.Периодичность);
	КонецЕсли;
	
	ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
		Элементы,
		ИнформацияНалоговыйПериод,
		Элементы.СтраницыСобытий);
		
	УстановитьЗаголовокФормы();
	
	ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС();
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		ИЛИ ИмяСобытия = "АктуализацияОтменена") 
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия); 
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ТребуетсяАктуализация"
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности") Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия, ДатаАктуальности); 
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		ОбработатьУплату();
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты"
		Или ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов" 
		Или ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		ОбработатьУплату();
		
	ИначеЕсли (ИмяСобытия = "ЛичныйКабинетЕНС_ОбновлениеДанных"
		Или ИмяСобытия = "Запись_СведенияОбУплатеНалогов")
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Организация")
		И Параметр.Организация = Объект.Организация Тогда
		
		ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",  ПериодСобытия);
	ПараметрыФормы.Контекст.Вставить("Правило", ПравилоОтчета);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияУплатаНалогаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУплатаТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУплатаЗакрытьБаннерНажатие(Элемент)
	СкрытьБаннер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоказателяНажатие(Элемент)
	
	ОткрытьОтдельныйПомощник(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОстатокЕНСПриИзменении(Элемент)
	
	ОтразитьИспользованиеОстаткаЕНС();
	Оповестить("Запись_СуммаЗачетаЕНС");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСписанияСЕНСПриИзменении(Элемент)
	
	СуммаСписанияСЕНСПриИзмененииНаСервере();
	Оповестить("Запись_СуммаЗачетаЕНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаИнтеграцияСЛичнымКабинетомЕНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЕдиныйНалоговыйСчетИнтеграцияКлиентБП.ПодсказкаИнтеграцияСЛичнымКабинетомЕНСОбработкаНавигационнойСсылки(
		Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеРасчетСуммы(Команда)
	
	Если Не ПроверитьЗаполнениеПередВыполнениемРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеРасчета = Новый ОписаниеОповещения("ОбработатьВыполнениеРасчета", ЭтотОбъект, Истина); // требуется проверка актуальности после загрузки расчета
	ОткрытьФорму(ОписаниеДействияРасчет.ИмяФормы, ОписаниеДействияРасчет.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеРасчета);
	
	ВыполнениеЗадачБухгалтераКлиент.ЗарегистрироватьВЖурналеОткрытиеФормы(ОписаниеДействияРасчет.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаАктуализация");
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = ПериодСобытия;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализироватьВесьПериод	   = РасчетПоДаннымЗакрытияМесяца; // актуализация до даты события
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйДокументНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОплаты) Тогда
		ОткрытьПлатежныйДокумент(Идентификатор);
	Иначе
		СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаПлатежа <> Неопределено
			И ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			// Определим способ оплаты по платежному документу
			СпособОплаты = ?(ТипЗнч(СтрокаПлатежа.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			ОткрытьПлатежныйДокумент(Идентификатор);
		Иначе
			// Предложим выбрать способ оплаты
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборСпособаОплатыЗавершение",
				ЭтотОбъект, Новый Структура("Идентификатор", Идентификатор));
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Идентификатор);
			ИмяЭлемента = "ОткрытьПлатежныйДокумент" + НомерКонтейнера;
			ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора, Элементы[ИмяЭлемента]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ВыполнитьДействиеСформироватьУведомлениеКоманда();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомлениеКоманда()
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоУведомления);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
	ОбработатьУплату();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура ПересчитатьСуммыЕНС()
	
	НалогКУплате = Платежи.Итог("Сумма"); 
	Если ОстатокЕНС < 0 Тогда
		НалогКУплате = НалогКУплате - ОстатокЕНС;
	КонецЕсли;
	СуммаПлатежныхПоручений = Платежи.Итог("СуммаПлатежногоПоручения");
	Объект.СуммаЕНП = Макс(0, НалогКУплате - СуммаСписанияСЕНС - СуммаПлатежныхПоручений);
	
	Элементы.СуммаСписанияСЕНС.Доступность = ИспользоватьОстатокЕНС;
	Элементы.ГруппаВсегоПополнитьНаЕНС.Видимость = Объект.СуммаЕНП > 0;
	Элементы.СтраницаВыполнитьДействиеУплата.Видимость = Объект.СуммаЕНП > 0;
	Элементы.СуммаСписанияСЕНС.МаксимальноеЗначение = Мин(ОстатокЕНС, НалогКУплате - СуммаПлатежныхПоручений);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИспользованиеОстаткаЕНС()
	
	Если Не ЭтоПравилоУплаты Тогда
		Возврат;
	КонецЕсли;
	
	НалогКУплате = Платежи.Итог("Сумма"); 
	Если ОстатокЕНС < 0 Тогда
		НалогКУплате = НалогКУплате - ОстатокЕНС;
	КонецЕсли;
	СуммаПлатежныхПоручений = Платежи.Итог("СуммаПлатежногоПоручения");
	
	Если СуммаПлатежныхПоручений >= НалогКУплате 
		Или ОстатокЕНС < 0 Тогда
		ИспользоватьОстатокЕНС = Ложь;
		Элементы.ИспользоватьОстатокЕНС.Доступность = Ложь;
		СуммаСписанияСЕНС = 0;
		ЗаписатьСуммуЗачетаЕНС();
	КонецЕсли;
	
	Если Не ИспользоватьОстатокЕНС Тогда
		СуммаСписанияСЕНС = 0;
		ЗаписатьСуммуЗачетаЕНС();
	ИначеЕсли СуммаСписанияСЕНС = 0 Тогда
		СуммаСписанияСЕНС = Мин(ОстатокЕНС, НалогКУплате - СуммаПлатежныхПоручений);
		ЗаписатьСуммуЗачетаЕНС();
	КонецЕсли;
	
	Если НалогКУплате > 0 И НалогКУплате = СуммаСписанияСЕНС + СуммаПлатежныхПоручений Тогда
		ЗаписатьСуммуЗачетаЕНС();
	КонецЕсли;
	
	Элементы.СуммаСписанияСЕНС.Доступность = ИспользоватьОстатокЕНС;
	
	Объект.СуммаЕНП = Макс(0, НалогКУплате - СуммаСписанияСЕНС - СуммаПлатежныхПоручений);
	
	Элементы.ГруппаВсегоПополнитьНаЕНС.Видимость = Объект.СуммаЕНП > 0;
	Элементы.СтраницаВыполнитьДействиеУплата.Видимость = Объект.СуммаЕНП > 0;
	
	ЕстьОплата = СуммаПлатежныхПоручений > 0;
	
	УправлениеФормойБлокУплата();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСуммуЗачетаЕНС()
	
	ЗначенияКлюча = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, Объект);
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, Правило);
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ЭтотОбъект);
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		СуммаСписанияСЕНС = МенеджерЗаписи.СуммаЗачетаЕНС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСуммуЗачетаЕНС()
	
	ЗначенияКлюча = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, Объект);
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, Правило);
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ЭтотОбъект);
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		СтатусУстановленВручную = МенеджерЗаписи.СтатусУстановленВручную;
		МенеджерЗаписи.СуммаЗачетаЕНС = СуммаСписанияСЕНС;
		МенеджерЗаписи.Записать();
		Если СтатусУстановленВручную Тогда
			Возврат;
		КонецЕсли;
		СводныеРасчеты = ПолучитьИзВременногоХранилища(АдресХранилища);
		Статус = Обработки.ПомощникУплатыНалога.СтатусУплатыЕдиногоНалога(СводныеРасчеты.СведенияОРасчетах);
		ЗначенияКлюча.Вставить("Статус", Статус);
		ВыполнениеЗадачБухгалтера.ЗаписатьНовыйСтатусЗадачи(ЗначенияКлюча, Ложь);
		Обработки.ПомощникУплатыНалога.ЗаписатьСтатусПодчиненныхЗадачПоЕдиномуНалоговомуСчету(
			СводныеРасчеты.СведенияОРасчетах.КэшируемыеПараметры.ТаблицаПодчиненныхЗадач, Статус);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуЕНС(ТаблицаРасчетов)
	
	Если Не ЭтоПравилоУплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если ПростойУчетЕНС Тогда
	
		ОстатокЕНС = ЕдиныйНалоговыйСчет.ДоступныйОстатокСредствНаЕНС(Объект.Организация, Срок);
	
	Иначе
		
		ОстатокЕНС = 0;
		
		НалоговыеИндикаторы = Обработки.МониторНалоговИОтчетности.СуммыЕНСКЗачетуПоНалогамВзносамНаДату(
			Объект.Организация, Срок);
			
		Для Каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
			
			ОтборНалога = Новый Структура;
			ОтборНалога.Вставить("Правило", СтрокаРасчетов.СведенияОРасчете.ПараметрыЗадачи.ПравилоУплаты);
			ОтборНалога.Вставить("Срок", Срок);
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ОтборНалога);
			
			Если СтрокиНалога.Количество() > 0 Тогда
				ОстатокЕНС = ОстатокЕНС + СтрокиНалога[0].ДоступноСЕНСТекущий;
				ОтборДолга = Новый Структура("ЭтоНалогПрошлогоПериода", Истина);
				ТаблицаДолга = СтрокаРасчетов.СведенияОРасчете.ТаблицаРасчета.Скопировать(ОтборДолга);
				Если ЗначениеЗаполнено(ТаблицаДолга) Тогда
					СуммаДолгаПоТекущемуПравилу = ТаблицаДолга.Итог("ЗначениеПоказателя");
					ОстатокЕНС = ОстатокЕНС + Мин(СтрокиНалога[0].ДоступноСЕНСДолг, СуммаДолгаПоТекущемуПравилу);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Нельзя списать больше, чем на остатке ЕНС
	НулевойОстаток = ОстатокЕНС = 0 И СуммаСписанияСЕНС = 0;
	Если НулевойОстаток Тогда
		ИспользоватьОстатокЕНС = Ложь;
	ИначеЕсли СуммаСписанияСЕНС <> 0 Тогда
		ИспользоватьОстатокЕНС = Истина;
		ОтразитьИспользованиеОстаткаЕНС();
	КонецЕсли;
	
	Элементы.СуммаСписанияСЕНС.Доступность = Не НулевойОстаток;
	Элементы.ИспользоватьОстатокЕНС.Доступность = Не НулевойОстаток;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор)
	
	ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Идентификатор);
	
	СсылкаНаДокумент = Неопределено;
	Если ПараметрыФормыПлатежногоДокумента.Свойство("Ключ", СсылкаНаДокумент)
		И ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		ТипДокумента = ?(ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	Иначе
		
		ТипДокумента = ?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	КонецЕсли;
	
	ИмяФормыПлатежногоДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента);
	
	ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаОплатыЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		СпособОплаты = ЭлементСписка.Значение;
		ОткрытьПлатежныйДокумент(ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыПлатежногоДокумента(ДокументСсылка, Оплачено)
	
	РеквизитыПлатежногоДокумента = Новый Структура("Наименование, Сумма");
	
	НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата, СуммаДокумента");
	НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		СтатусОплаты = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(ДокументСсылка);
	Иначе
		СтатусОплаты = ?(Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
	
	РеквизитыПлатежногоДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		НаименованиеДокумента, НомерДокумента, ДатаДокумента, СтатусОплаты);;
	РеквизитыПлатежногоДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	
	Возврат РеквизитыПлатежногоДокумента;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ТипЗнч(ПараметрыФормыУведомления.Ключ) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	ИначеЕсли ТипЗнч(ПараметрыФормыУведомления.Ключ) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработатьУплату();
	Если ЭтоПравилоУплаты Тогда
		СоздатьАктуализироватьОперациюПоЕНС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыводитьОКТМО(ТаблицаРасчетов)
	
	//Удалим строки с пустым ОКТМО
	Отбор = Новый Структура("ОКТМО,ЭтоИтоговаяСтрока", "", Ложь);
	СтрокиКУдалению = ТаблицаРасчетов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивОКТМО = ТаблицаРасчетов.ВыгрузитьКолонку("ОКТМО");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивОКТМО, "");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОКТМО);
	
	Возврат МассивОКТМО.Количество() > 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета)
	
	ШаблонТекста = НСтр("ru = 'Отправка отчета в электронном виде не предусмотрена законодательством.
                        |Сформируйте отчет, распечатайте и отправьте по почте или отнесите в %1'");
	
	ГосударственныйОрган = НСтр("ru = 'государственный орган'"); // Значение для %1. Если БРО предоставит более подходящее название органа, то будет выведено оно.
	
	ИмяОтчета = ИмяОтчета(ПравилоОтчета);
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда
		ОсобыйГосударственныйОрган = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеПолучателяБумажногоДокумента(ИмяОтчета);
		Если ЗначениеЗаполнено(ОсобыйГосударственныйОрган) Тогда
			ГосударственныйОрган = ОсобыйГосударственныйОрган;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрШаблон(ШаблонТекста, ГосударственныйОрган));
	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяОтчета(ПравилоОтчета)
	
	ОписаниеПолейПравила = Новый Структура;
	ОписаниеПолейПравила.Вставить("КодЗадачи",  "Владелец.Код");
	ОписаниеПолейПравила.Вставить("КодПравила", "Код");
	
	СвойстваПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОтчета, ОписаниеПолейПравила);
	Если Не ЗначениеЗаполнено(СвойстваПравила.КодЗадачи)
		Или Не ЗначениеЗаполнено(СвойстваПравила.КодПравила) Тогда
		Возврат "";
	КонецЕсли;
	
	Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
		СвойстваПравила.КодЗадачи,
		СвойстваПравила.КодПравила);
		
	Возврат ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование);
	
КонецФункции

&НаСервере
Функция КодЗадачиУплатыНалога()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоУплаты, "Владелец.Код");
КонецФункции

&НаКлиенте
Процедура ОткрытьОтдельныйПомощник(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИдентификаторЭлемента = ЗадачиБухгалтераКлиентСервер.Идентификатор(ИмяЭлемента);
	
	Если СтрНачинаетсяС(ИмяЭлемента, "ДекорацияНетДанныхДляРасчета") Тогда
		ИдентификаторРодителя = ИдентификаторЭлемента;
	Иначе
		РодительЭлемента = Элемент.Родитель;
		ИдентификаторРодителя = ЗадачиБухгалтераКлиентСервер.Идентификатор(РодительЭлемента.Имя);
		Пока ИдентификаторРодителя = ИдентификаторЭлемента Цикл
			РодительЭлемента = РодительЭлемента.Родитель;
			ИдентификаторРодителя = ЗадачиБухгалтераКлиентСервер.Идентификатор(РодительЭлемента.Имя);
		КонецЦикла;
		Если ИдентификаторРодителя = Неопределено Тогда
			ИдентификаторРодителя = ИдентификаторЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеДействия = ЗаписьТаблицыПоИдентификатору(ИдентификаторРодителя);
	
	ОповещениеВыполнениеРасчета = Новый ОписаниеОповещения("ОбработатьВыполнениеРасчета", ЭтотОбъект, Истина);
	ОткрытьФорму(ОписаниеДействия.ИмяФормы, ОписаниеДействия.ПараметрыФормы, ЭтотОбъект, , , , ОповещениеВыполнениеРасчета);
	
КонецПроцедуры

&НаСервере
Функция ЗаписьТаблицыПоИдентификатору(ИдентификаторСтроки)
	
	СводныеРасчеты = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТаблицаРасчеты = СводныеРасчеты.СведенияОРасчетах.ТаблицаРасчета;
	ПараметрыЗадачи = ТаблицаРасчеты[ИдентификаторСтроки].СведенияОРасчете.ПараметрыЗадачи;
	ПараметрыФормыПомощника = ВыполнениеЗадачБухгалтера.НовыйПараметрыФормыПомощника();
	ЗаполнитьЗначенияСвойств(ПараметрыФормыПомощника, ПараметрыЗадачи);
	
	Если ЭтоПравилоУведомления Тогда
		ПараметрыФормыПомощника.Правило = ПараметрыЗадачи.ПравилоУведомления;
	Иначе
		Если ВыполнениеЗадачБухгалтера.ЭтоЗадачаУплатыНДСИзЕАЭС(ПараметрыЗадачи.ИдентификаторЗадачи) Тогда
			ПараметрыФормыПомощника.Правило = ПараметрыЗадачи.ПравилоОтчета;
		Иначе
			ПараметрыФормыПомощника.Правило = ПараметрыЗадачи.ПравилоУплаты;
		КонецЕсли;
	КонецЕсли;
	
	Событие = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(Событие, ПараметрыФормыПомощника);
	
	Событие.ИдентификаторПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыФормыПомощника.Правило, "Код");
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействия(Событие);
	ЗаполнитьЗначенияСвойств(ОписаниеДействия.ПараметрыФормы, ПараметрыФормыПомощника);
	
	Возврат ОписаниеДействия;
	
КонецФункции

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены = Истина;
	НезаполненныеРеквизиты        = Неопределено;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоУведомления);
	ИмяРеглОтчета    = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
	
	РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
		ИмяРеглОтчета, Объект.Организация, ПериодСобытия, НезаполненныеРеквизиты);
		
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = Не РеквизитыОрганизацииЗаполнены;
	
	УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПередВыполнениемРасчета()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Объект.Организация);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Организация)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
	
	ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
		Организация,
		НезаполненныеРеквизиты,
		"СообщениеТребуютсяРеквизиты",
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомления()

	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстВопроса = НСтр("ru='Не подготовлено уведомление об исчисленной сумме налога.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Не сформирована операция по единому налоговому счету.
		|Продолжить?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупредитьОбОтсутствииУведомленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Уплатить();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Описание", Описание);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если ИспользоватьНесколькоОрганизаций Тогда 
		ШаблонТекста = НСтр("ru = '[Описание] ([Организация])'");
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "НаименованиеСокращенное");
		ПараметрыТекста.Вставить("Организация", НаименованиеОрганизации);
	Иначе
		ШаблонТекста = НСтр("ru = '[Описание]'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеРасчетНалогов(Событие, Номер, НоваяГруппа = Истина)
	
	СведенияОРасчете = Событие.СведенияОРасчете;
	
	ТаблицаРасчета = СведенияОРасчете.ТаблицаРасчета;
	
	СтрокаИтог = ТаблицаРасчета.Найти(Истина, "ЭтоИтоговаяСтрока");
	
	КУдалению = Новый Массив;
	
	Если НоваяГруппа Тогда
		
		Элемент = Элементы["ДекорацияИмяНалога" + Номер];
		Элемент.Заголовок = Событие.ОписаниеНалога;
		
		Элемент = Элементы["ГруппаЗначениеПоказателяИтог" + Номер];
		Если ЗначениеЗаполнено(СтрокаИтог) Тогда
			Элемент.Заголовок = Формат(СтрокаИтог.ЗначениеПоказателя, ФорматСумм);
		Иначе
			Элемент.Заголовок = НСтр("ru='Нет данных о сумме к уплате'");
		КонецЕсли;
		
		Элемент = Элементы["ДекорацияИнформацияРасчетСуммы" + Номер];
		Элемент.Заголовок = Новый ФорматированнаяСтрока(СведенияОРасчете.ИнформацияРасчетСуммы);
		Элемент.Видимость = ЗначениеЗаполнено(СведенияОРасчете.ИнформацияРасчетСуммы);
		
	КонецЕсли;
	
	Элемент = Элементы["ДекорацияНетДанныхДляРасчета" + Номер];
	Элемент.Видимость = СведенияОРасчете.ТребуетсяРасчет И Не ЗначениеЗаполнено(СведенияОРасчете.ТаблицаРасчета);
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ЗначениеПоказателяНажатие");
	
	// Удалим ранее созданные контейнеры, которые не будут использоваться
	Элемент = Элементы["ГруппаРасчетНастраиваемая" + Номер];
	Для Каждого Контейнер Из Элемент.ПодчиненныеЭлементы Цикл
		ПозицияПостфикса = СтрНайти(Контейнер.Имя, "_", НаправлениеПоиска.СКонца);
		Если ПозицияПостфикса = 0 Тогда
			// Это шаблон вложенного контейнера
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Контейнер.Имя, "ОписаниеРасчетИтог") Тогда
			// Итог будет пересчитан и показан ниже, т.к. число записей могло увеличиться
			КУдалению.Добавить(Контейнер);
			Продолжить;
		КонецЕсли;
		
		ПодНомерКонтейнера = Прав(Контейнер.Имя, СтрДлина(Контейнер.Имя) - ПозицияПостфикса);
		Идентификатор = Число(ПодНомерКонтейнера) - 1;
		
		Если ТаблицаРасчета.Количество() <= Идентификатор
			Или ТаблицаРасчета.Получить(Идентификатор).ЭтоИтоговаяСтрока Тогда
			// Записей в таблице стало меньше, чем ранее созданных контейнеров
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	ВыводитьОКТМО = ВыводитьОКТМО(ТаблицаРасчета);
	ОтображатьИтог = ТаблицаРасчета.Количество() > 2;
	
	Для Каждого СтрокаРасчета Из ТаблицаРасчета Цикл
		
		Если СтрокаРасчета.ЭтоИтоговаяСтрока И Не ОтображатьИтог Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(ТаблицаРасчета.Индекс(СтрокаРасчета));
		ИмяЭлемента = "ОписаниеРасчет" + ?(СтрокаРасчета.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
		
		ШаблонИменования = "%1_%2";
		ИмяДочернегоЭлемента = СтрШаблон(СтрШаблон(ШаблонИменования, ИмяЭлемента, НомерКонтейнера));
		Если Элементы.Найти(ИмяДочернегоЭлемента) = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы[ИмяЭлемента], Элементы["ГруппаРасчетНастраиваемая" + Номер], НомерКонтейнера, , ШаблонИменования);
		КонецЕсли;
		
		Гиперссылка = СтрокаРасчета.ИспользоватьПомощникДляРасчета И (СтрокаРасчета.ЭтоИтоговаяСтрока Или Не ОтображатьИтог);
		ОформитьСобытиеРасчетСуммы(СтрокаРасчета, Номер, НомерКонтейнера, ВыводитьОКТМО, Гиперссылка);
		Элементы[ИмяДочернегоЭлемента].Видимость = Истина;
		
	КонецЦикла;
	
	// Спрячем шаблоны контейнеров
	ИмяЭлемента = "ОписаниеРасчет" + Номер;
	Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Элемент = Элементы[ИмяЭлемента];
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
	ИмяЭлемента = "ОписаниеРасчетИтог" + Номер;
	Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Элемент = Элементы[ИмяЭлемента];
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокРасчет(ТаблицаРасчетов)
	
	Если Не ОтправкаОтчетаОграничена Тогда
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Ложь;
	Иначе
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Истина;
		Элементы.СообщениеОтправкаОтчетаОграничена.Заголовок = ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета);
	КонецЕсли;
	
	ВсегоПоРасчету = 0;
	
	КУдалению = Новый Массив;
	
	ОписаниеНалога = "";
	ИндексыСтрокТаблицыРасчетов = Новый Массив;
	Для Каждого СведенияОРасчетах Из ТаблицаРасчетов Цикл
		ИндексСтроки = ТаблицаРасчетов.Индекс(СведенияОРасчетах);
		ИндексыСтрокТаблицыРасчетов.Добавить(ИндексСтроки);
		НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(ИндексСтроки);
		// Обеспечим контейнер
		Если ОписаниеНалога <> СведенияОРасчетах.ОписаниеНалога Тогда
			ОписаниеНалога = СведенияОРасчетах.ОписаниеНалога;
			НоваяГруппа = Истина;
		Иначе
			НоваяГруппа = Ложь;
		КонецЕсли;
			
		Если НоваяГруппа И Элементы.Найти("ГруппаРасчетНалога" + НомерКонтейнера) = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ГруппаРасчетНалога, Элементы.ГруппаРасчетНалогаНастраиваемая, НомерКонтейнера);
		КонецЕсли;
		ОформитьСобытиеРасчетНалогов(СведенияОРасчетах, НомерКонтейнера, НоваяГруппа);
		
		Для Каждого СтрокаРасчета Из СведенияОРасчетах.СведенияОРасчете.ТаблицаРасчета Цикл
			Если Не СтрокаРасчета.ЭтоИтоговаяСтрока Тогда
				ВсегоПоРасчету = ВсегоПоРасчету + СтрокаРасчета.ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ЗначениеПоказателяВсего.Заголовок = Формат(ВсегоПоРасчету, ФорматСумм);
	
	Для Каждого Контейнер Из Элементы.ГруппаРасчетНалогаНастраиваемая.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если ИндексыСтрокТаблицыРасчетов.Найти(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	// Уберем шаблоны
	Элементы.ГруппаРасчетНалога.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойГруппаАктуализация(Форма, Событие, ДатаАктуальностиДанных = '00010101')
	
	Элементы = Форма.Элементы;
	
	// Если автоматическая актуализация невозможна, то вся группа актуализации скрыта.
	// В ином случае:
	// - если налог рассчитывается непосредственно по данным закрытия месяца, то всегда доступна актуализация (если возможна)
	// - если сумма налога берется из декларации и декларация еще не создана (НЕ РасчетСуммыВыполнен);
	ОтображатьАктуализицию = Форма.АктуализацияВозможна И Событие = "ТребуетсяАктуализация"
		И (Форма.РасчетПоДаннымЗакрытияМесяца Или Форма.УплатаПоДекларации И Не Форма.РасчетСуммыВыполнен);
		
	Элементы.Актуализация.Видимость = ОтображатьАктуализицию;
	
	Если Не ОтображатьАктуализицию Тогда
		Возврат;
	КонецЕсли;	
		
	Элементы.ИдетАктуализация.Видимость         = (Событие = "ЗапущенаАктуализация");
	Элементы.ИдетПроверкаАктуальности.Видимость = (Событие = "ЗапущенаПроверкаАктуальности");
	
	Если Событие = "ТребуетсяАктуализация" Тогда
		Элементы.ТребуетсяАктуализация.Видимость = Истина;
		Элементы.ДекорацияАктуальность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные учета неактуальны с %1.'"), Формат(ДатаАктуальностиДанных, "ДФ=dd.MM.yyyy"));
	Иначе
		Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	КонецЕсли;		
				
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	Если Не ЗначениеЗаполнено(ПравилоУплаты) И Не ЗначениеЗаполнено(ПравилоУведомления) Тогда
		Элементы.ГруппаУведомлениеОНалогах.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаУведомлениеОНалогах.Видимость = Истина;
	КонецЕсли;
	
	Если КонтекстЕдиногоПомощника Тогда
		Элементы.ГруппаУведомлениеОНалогах.Видимость = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	КонецЕсли;
	
	УправлениеФормойБлокОтражениеВЕНС(ЭтотОбъект,
		ТребуетсяУведомление,
		ИнформацияУведомление,
		2);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УправлениеФормойБлокОтражениеВЕНС(
	Форма,
	ТребуетсяУведомление = Истина,
	ИнформацияУведомление = Неопределено,
	Разрядность = 0)
	
	Элементы = Форма.Элементы;
	
	Если Форма.Объект.Свойство("Организация") Тогда
		Организация = Форма.Объект.Организация;
	Иначе
		// В некоторых помощниках реквизит находится на форме
		РеквизитыФормы = Форма.ПолучитьРеквизиты();
		Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
			Если ТекущийРеквизит.Имя = "Организация"
				И ТекущийРеквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				
				Организация = Форма.Организация;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Организация = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.Свойство("Период") Тогда
		ПериодСобытия = Форма.Объект.Период;
	ИначеЕсли Форма.Объект.Свойство("ПериодРегистрации") Тогда
		ПериодСобытия = Форма.Объект.ПериодРегистрации;
	Иначе
		ПериодСобытия = Форма.ПериодСобытия;
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
	ЭтоУплатаНДСПоТоварамЕАЭС = ВыполнениеЗадачБухгалтера.ЭтоЗадачаУплатыНДСИзЕАЭС(Форма.ИдентификаторЗадачи);
	
	Элементы.ГруппаУведомлениеОНалогах.Видимость = НЕ ЭтоУплатаНДСПоТоварамЕАЭС;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаУведомлениеОНалогахПустая",
		"Видимость",
		Истина);
	
	ЗаголовокБлока = НСтр("ru = 'Уведомление'");
	ЗаголовокКнопки = НСтр("ru = 'Сформировать уведомление'");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаУведомлениеОНалогах",
		"Заголовок",
		ЗаголовокБлока);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ДекорацияУведомление",
		"Заголовок",
		ЗаголовокБлока);
	
	Форма.УведомлениеОбИсчисленныхНалогахПодготовлено = УведомлениеОбИсчисленныхНалогахПодготовлено(Форма.УведомленияОбИсчисленныхНалогах)
		ИЛИ ЭтоУплатаНДСПоТоварамЕАЭС;
	
	КУдалению = Новый Массив;
	Форма.ИтогПоУведомлениям = 0;
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстИнформацияУведомление = ПомощникиПоУплатеНалоговИВзносов.ТекстБлокаУведомления(Форма.СрокПодачиУведомления);
		Если ЗначениеЗаполнено(ИнформацияУведомление) Тогда
			ТекстИнформацияУведомление = ИнформацияУведомление;
		ИначеЕсли Не ТребуетсяУведомление Тогда
			ТекстИнформацияУведомление  = НСтр("ru = 'Уведомление не требуется.'");
		КонецЕсли;
	Иначе
		ТекстИнформацияУведомление = НСтр(
			"ru = 'При отправке декларации формировать уведомление по исчисленным налогам не нужно, но для корректного ведения расчетов по налогам нужно отразить их на едином налоговом счете.'");
	КонецЕсли;
	
	ВыполнитьДействиеСформироватьУведомление = Элементы.Найти("ВыполнитьДействиеСформироватьУведомление");
	Если ВыполнитьДействиеСформироватьУведомление <> Неопределено Тогда
		ВыполнитьДействиеСформироватьУведомление.Видимость = ПодаетсяУведомлениеПоНалогуЗаПериод;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ВыполнитьДействиеСформироватьУведомление",
			"Заголовок",
			ЗаголовокКнопки);
	КонецЕсли;
	
	ШрифтИнформацияУведомление = Новый Шрифт(,,,Истина);
	
	Элементы.ДекорацияИнформацияУведомление.Видимость = Истина;
	Элементы.ДекорацияИнформацияУведомление.Заголовок = Новый ФорматированнаяСтрока(ТекстИнформацияУведомление);
	
	// Подсказка по уведомлению
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстПодсказкиУведомления = ?(Форма.Подключена1СОтчетность,
			НСтр("ru = 'Перейдите по ссылке и отправьте уведомление в ФНС'"),
			НСтр("ru = 'Перейдите по ссылке и установите статус ""Сдано"", если уведомление отправлено в ФНС'"));
	КонецЕсли;
	
	ВсеУведомленияСданы = Истина;
	Элементы.СтраницыУведомление.Видимость = Истина;
	Если Форма.УведомлениеОбИсчисленныхНалогахПодготовлено Или Не ТребуетсяУведомление Тогда
		
		Элементы.СтраницаРезультатВыполненияУведомление.Видимость = Истина;
		Элементы.СтраницаВыполнитьДействиеУведомление.Видимость   = Ложь;
		
		Для Каждого Уведомление Из Форма.УведомленияОбИсчисленныхНалогах Цикл
			Если ТипЗнч(Уведомление.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Уведомление.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеЗаявление" + НомерКонтейнера) = Неопределено Тогда
					ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеЗаявление, Элементы.СтраницаРезультатВыполненияЗаявление, НомерКонтейнера);
				КонецЕсли;
				ПомощникиПоУплатеНалоговИВзносов.ОформитьСобытиеУведомление(Форма, Уведомление, НомерКонтейнера, Разрядность);
				Элементы["ОписаниеЗаявление" + НомерКонтейнера].Видимость = Истина;
			Иначе
				
				Если ТипЗнч(Уведомление.Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") 
					И Форма.ЭтоПравилоУведомления Тогда
					// В задаче по уведомлению не показываем операцию по ЕНС
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Уведомление.Сумма) Тогда
					Продолжить;
				КонецЕсли;
				
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Уведомление.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеУведомление" + НомерКонтейнера) = Неопределено Тогда
					ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеУведомление, Элементы.СтраницаРезультатВыполненияУведомление, НомерКонтейнера);
				КонецЕсли;
				ПомощникиПоУплатеНалоговИВзносов.ОформитьСобытиеУведомление(Форма, Уведомление, НомерКонтейнера, Разрядность);
				Элементы["ОписаниеУведомление" + НомерКонтейнера].Видимость = Истина;
				Элементы["ОткрытьУведомление" + НомерКонтейнера].РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
				Элементы["ОткрытьУведомление" + НомерКонтейнера].РасширеннаяПодсказка.МаксимальнаяШирина = 60;
				Если ТипЗнч(Уведомление.Уведомление) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
					СтатусУведомления = Документы.УведомлениеОбИсчисленныхСуммахНалогов.СтатусДокумента(Уведомление.Уведомление);
					Элементы["УдалитьУведомление" + НомерКонтейнера].Видимость = СтатусУведомления.ВРаботе;
					Если Не СтатусУведомления.Сдано Тогда
						Элементы["ОткрытьУведомление" + НомерКонтейнера].Подсказка = ТекстПодсказкиУведомления;
					КонецЕсли;
					Если СтатусУведомления.ВРаботе Тогда
						ВсеУведомленияСданы = Ложь;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Уведомление.Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
					Элементы["УдалитьУведомление" + НомерКонтейнера].Видимость = Ложь;
					Элементы["ОткрытьУведомление" + НомерКонтейнера].РасширеннаяПодсказка.Заголовок = 
						НСтр("ru='По некоторым налогам отправлять уведомление не нужно, но для корректного ведения расчетов по этим налогам нужно отразить их на едином налоговом счете.'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Элементы.СтраницаРезультатВыполненияУведомление.Видимость = Ложь;
		Элементы.СтраницаВыполнитьДействиеУведомление.Видимость   = Истина;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	СтраницаРезультата = Элементы.СтраницаРезультатВыполненияУведомление;
	Для Каждого Контейнер Из СтраницаРезультата.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Форма.УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(Форма, КУдалению);
	
	ФорматнаяСтрока = "ЧЦ=15; ЧН=";
	Если Разрядность <> 0 Тогда
		ФорматнаяСтрока = ФорматнаяСтрока + ";ЧДЦ=" + Разрядность; 
	КонецЕсли;
	//Итог по уплате
	Если Форма.УведомленияОбИсчисленныхНалогах.Количество() > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если Элементы.Найти("ОписаниеУведомлениеИтог0") = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеУведомлениеИтог, Элементы.СтраницаРезультатВыполненияУведомление, 0);
		КонецЕсли;
		Элементы.ЗначениеУведомлениеИтог0.Заголовок = Формат(Форма.ИтогПоУведомлениям, ФорматнаяСтрока);
		Элементы.ОписаниеУведомлениеИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеУведомление.Видимость     = Ложь;
	Элементы.ОписаниеУведомлениеИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УведомлениеОбИсчисленныхНалогахПодготовлено(УведомленияОбИсчисленныхНалогах)
	
	Для Каждого ОперацияУведомление Из УведомленияОбИсчисленныхНалогах Цикл
		Если ТипЗнч(ОперацияУведомление.Уведомление) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УправлениеФормойБлокУплата()
	
	Если Не ЭтоПравилоУплаты Или Не ПоказыватьКомандыОплаты Тогда
		Элементы.ГруппаУплата.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	КУдалению    = Новый Массив;
	ИтогПоУплате = 0;
	КоличествоПлатежныхПоручений = 0;
	
	ТекстИнформацияУплатаНалога = ИнформацияУплатаНалога;
	
	Элементы.ДекорацияИнформацияУплатаНалога.Заголовок = Новый ФорматированнаяСтрока(
		ТекстИнформацияУплатаНалога);
	
	Если Не ТребуетсяУплата Тогда
		Элементы.СтраницыУплата.Видимость  = Ложь;
	Иначе
		
		Элементы.СтраницыУплата.Видимость = Истина;
		Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Ложь;
		Элементы.СтраницаРезультатВыполненияУплата.Видимость = Ложь;
		
		Если ЕстьОплата Тогда
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Истина;
			Для Каждого Платеж Из Платежи Цикл
				Если Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоПлатежныхПоручений = КоличествоПлатежныхПоручений + 1;
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеПлатеж" + НомерКонтейнера) = Неопределено Тогда
					ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы.ОписаниеПлатеж, Элементы.СтраницаРезультатВыполненияУплата, НомерКонтейнера);
				КонецЕсли;
				ОформитьСобытиеУплатаНалога(Платеж, НомерКонтейнера);
				Элементы["ОписаниеПлатеж" + НомерКонтейнера].Видимость = Истина;
			КонецЦикла;
			
		КонецЕсли;
			
		Если Объект.СуммаЕНП > 0 Тогда
			
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Истина;
			
			Если Не ЗначениеЗаполнено(СпособОплаты) Тогда
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить через банк'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить через кассу'");
				
			ИначеЕсли СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
				
				//Оплата только через банк
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Ложь;
				
			ИначеЕсли СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
				
				//Оплата только через кассу
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияУплата.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Платежи.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	//Итог по уплате
	ИтогПоУплате = ИтогПоУплате + СуммаСписанияСЕНС;
	Если КоличествоПлатежныхПоручений = 1 И СуммаСписанияСЕНС > 0 
		Или КоличествоПлатежныхПоручений > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если Элементы.Найти("ОписаниеПлатежИтог0") = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы.ОписаниеПлатежИтог, Элементы.СтраницаРезультатВыполненияУплата, 0);
		КонецЕсли;
		Элементы.ЗначениеПлатежИтог0.Заголовок = Формат(ИтогПоУплате, ФорматСумм);
		Элементы.ОписаниеПлатежИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеПлатеж.Видимость     = Ложь;
	Элементы.ОписаниеПлатежИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокИТС()
	
	Элементы.ГруппаИТС.Видимость = ЕстьИнформацияНаИТС;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокЕНС()
	
	ПересчитатьСуммыЕНС();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсветкуТекущегоБлока(Форма)
	
	Элементы = Форма.Элементы;
	Если Форма.ТребуетсяУведомление И Не Форма.УведомлениеОбИсчисленныхНалогахПодготовлено И Форма.РеквизитыОрганизацииЗаполнены Тогда
		Элементы.ВыполнитьДействиеСформироватьУведомление.КнопкаПоУмолчанию         = Истина;
		Элементы.ВыполнитьДействиеСформироватьУведомление.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не Форма.ЕстьОплата И Форма.РеквизитыОрганизацииЗаполнены Тогда
		Если Форма.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции") Тогда
			Элементы.ВыполнитьДействиеУплатаКасса.КнопкаПоУмолчанию         = Истина;
			Элементы.ВыполнитьДействиеУплатаКасса.АктивизироватьПоУмолчанию = Истина;
			Элементы.ВыполнитьДействиеУплатаКасса.ОтображениеФигуры           = ОтображениеФигурыКнопки.Всегда;
		Иначе
			Элементы.ВыполнитьДействиеУплатаБанк.КнопкаПоУмолчанию         = Истина;
			Элементы.ВыполнитьДействиеУплатаБанк.АктивизироватьПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеРасчетСуммы(Событие, НомерЭлементаРодителя, НомерКонтейнера, ВыводитьОКТМО, Гиперссылка)
	
	//Налог
	ИмяЭлемента = СтрШаблон("НаименованиеПоказателя%1%2_%3", ?(Событие.ЭтоИтоговаяСтрока, "Итог", ""), НомерЭлементаРодителя, НомерКонтейнера);
	Элемент = Элементы[ИмяЭлемента];
	
	Если ЗначениеЗаполнено(Событие.ПредставлениеПериода) Тогда
		Элемент.Заголовок = Новый ФорматированнаяСтрока(Событие.НаименованиеПоказателя, Символы.НПП, Событие.ПредставлениеПериода, ":");
	Иначе
		Элемент.Заголовок = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = '%1:'"), Событие.НаименованиеПоказателя));
	КонецЕсли;
		
	//ОКТМО
	Если ВыводитьОКТМО Тогда
		Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКТМО);
	Иначе
		Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
	//Сумма налога
	ИмяЭлемента = СтрШаблон("ЗначениеПоказателя%1%2_%3", ?(Событие.ЭтоИтоговаяСтрока, "Итог", ""), НомерЭлементаРодителя, НомерКонтейнера);
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = Формат(Событие.ЗначениеПоказателя, ФорматСумм);
	Элемент.Гиперссылка = Гиперссылка;
	Если Гиперссылка Тогда
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ЗначениеПоказателяНажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНалога(Событие, Номер)
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручение) Тогда
		ПредставлениеПлатежногоДокумента = РеквизитыПлатежногоДокумента(Событие.ПлатежноеПоручение, Событие.Оплачено);
		ЗаголовокПлатежа = ПредставлениеПлатежногоДокумента.Наименование;
		СуммаПлатежа     = ПредставлениеПлатежногоДокумента.Сумма;
	Иначе
		ЗаголовокПлатежа = Событие.Наименование;
		СуммаПлатежа     = Событие.Сумма;
	КонецЕсли;
	
	ИтогПоУплате = ИтогПоУплате + СуммаПлатежа;
	// Платежный документ
	Элемент = Элементы["ОткрытьПлатежныйДокумент" + Номер];
	Элемент.Заголовок = ЗаголовокПлатежа;
	
	// Сумма
	Элемент = Элементы["СуммаПлатежногоДокумента" + Номер];
	Элемент.Заголовок = Формат(СуммаПлатежа, ФорматСумм);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС()
	
	ЕдиныйНалоговыйСчетИнтеграцияБП.ПоказатьПодсказкуИнтеграцияСЛичнымКабинетомЕНС(
		ЭтотОбъект, Объект.Организация, ПериодСобытия);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаКлиенте
Процедура ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности = Истина, ВыводитьОкноОжидания = Ложь)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьРезультат(ДлительнаяОперация.АдресРезультата);
		НастроитьБаннеры();
		Если ЗапуститьПроверкуАктуальности Тогда
			ПодключитьПроверкуАктуальности();
		Иначе
			// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
			УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
			УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		КонецЕсли;
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииДанныхЗадачи", ЭтотОбъект, ЗапуститьПроверкуАктуальности);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Функция ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов)
	
	ПараметрыЗадачи = Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ЭтотОбъект);
	ПараметрыЗадачи.Вставить("Действие", Правило.Действие);
	ПараметрыЗадачи.Вставить("ПоВсемНалогам", Истина);
	ПараметрыЗадачи.Организация = Объект.Организация;
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи.СоставРазделов, СоставРазделов);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Помощник уплаты налога: получение данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНалога.СведенияПоЗадачам",
		ПараметрыЗадачи,
		ПараметрыВыполнения);
				
КонецФункции

&НаКлиенте
Процедура ПриПолученииДанныхЗадачи(Результат, ЗапуститьПроверкуАктуальности) Экспорт 
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ЗагрузитьРезультат(Результат.АдресРезультата);
	НастроитьБаннеры();
	
	Если ЗапуститьПроверкуАктуальности Тогда
		ПодключитьПроверкуАктуальности();
	Иначе
		// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	КонецЕсли;	
		
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьВыполнениеРасчета(РезультатЗакрытия = Неопределено, ЗапуститьПроверкуАктуальности) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУплату()
	
	СоставРазделов = Новый Структура("РасчетУплата", Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультат(АдресРезультата)
	
	ДлительнаяОперация = Неопределено;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	СоставРазделов = Результат.СоставРазделов;
	
	//Расчет, уплата
	Если СоставРазделов.РасчетУплата Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОРасчетах);
		
		Платежи.Очистить();
		ТаблицаПлатежей = Результат.СведенияОРасчетах.ТаблицаПлатежей;
		Если ТаблицаПлатежей <> Неопределено Тогда
			Платежи.Загрузить(ТаблицаПлатежей);
		КонецЕсли;
		
		УведомленияОбИсчисленныхНалогах.Очистить();
		ТаблицаУведомлений = Результат.СведенияОРасчетах.ТаблицаУведомлений;
		Если ТаблицаУведомлений <> Неопределено Тогда
			УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомлений);
		КонецЕсли;
		
		УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() <> 0;
		СоздаватьОперациюПоЕНС = Не ПростойУчетЕНС И ЭтоПравилоУплаты
			И (УведомлениеОбИсчисленныхНалогахПодготовлено Или Не ТребуетсяУведомление);
		
		Если СоздаватьОперациюПоЕНС Тогда
			СоздатьАктуализироватьОперациюПоЕНС();
		КонецЕсли;
		
		СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
		//Расчет
		УправлениеФормойБлокРасчет(Результат.СведенияОРасчетах.ТаблицаРасчета);
		
		// Зачет ЕНС
		РассчитатьСуммуЕНС(Результат.СведенияОРасчетах.ТаблицаРасчета);
		
		ОтразитьИспользованиеОстаткаЕНС();
		
		//Уведомление
		УправлениеФормойБлокУведомление();
		
		//Уплата
		УправлениеФормойБлокУплата();
		
	КонецЕсли;
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница  = Элементы.СтраницаСобытийРабочая;
	КонецЕсли;
	
	//ИТС
	УправлениеФормойБлокИТС();
	
	УправлениеФормойБлокЕНС();
	
	УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыНалоги(ДляОперацииПоЕНС = Ложь)
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	ТаблицаНалоговыйАгентНДС = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалоговыйАгентНДС();
	
	НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
	
	СводныеРасчеты = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТаблицаРасчетыСводная = СводныеРасчеты.СведенияОРасчетах.ТаблицаРасчета;
	
	Для Каждого СтрокаРасчетСводная Из ТаблицаРасчетыСводная Цикл
		
		СведенияОРасчете   = СтрокаРасчетСводная.СведенияОРасчете;
		ПараметрыПодЗадачи = СведенияОРасчете.ПараметрыЗадачи;
		
		Если ДляОперацииПоЕНС И ПростойУчетЕНС 
			И СтрокаРасчетСводная.СведенияОРасчете.ПараметрыЗадачи.ИдентификаторЗадачи <> "НалогНаПрибыль" Тогда
			Продолжить;
		КонецЕсли;
		
		ПодаетсяУведомлениеЗаПериод = ЗначениеЗаполнено(ПараметрыПодЗадачи.ПравилоУведомления);
		
		Если СтрокаРасчетСводная.ОписаниеНалога = "НДС" Тогда
			ЗаполнитьОписаниеТаблицыНДС(СведенияОРасчете, ТаблицаНалоги, ТаблицаНалоговыйАгентНДС);
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРасчета Из СведенияОРасчете.ТаблицаРасчета Цикл
			
			Если СтрокаРасчета.ЭтоИтоговаяСтрока Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаРасчета.Налог) Или СтрокаРасчета.ЗначениеПоказателя = 0 Тогда
				Продолжить;
			ИначеЕсли НалогиУплачиваемыеОтдельно.Найти(СтрокаРасчета.Налог) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПодаетсяУведомлениеПоСтрокеРасчета = ПодаетсяУведомлениеЗаПериод И ЗначениеЗаполнено(СтрокаРасчета.СуммаУведомления);
			Если (ПодаетсяУведомлениеПоСтрокеРасчета И ДляОперацииПоЕНС) Тогда
				Продолжить;
			ИначеЕсли (Не ПодаетсяУведомлениеПоСтрокеРасчета И Не ДляОперацииПоЕНС) Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПараметрыПодЗадачи.Периодичность, ПараметрыПодЗадачи.ПериодСобытия);
			КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПараметрыПодЗадачи.Периодичность,   ПараметрыПодЗадачи.ПериодСобытия);
			Если ЗначениеЗаполнено(СтрокаРасчета.НачалоПериода) И ЗначениеЗаполнено(СтрокаРасчета.КонецПериода) Тогда
				НачалоПериода = СтрокаРасчета.НачалоПериода;
				КонецПериода = СтрокаРасчета.КонецПериода;
			КонецЕсли;
			
			СрокУплатыНалога = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПараметрыПодЗадачи.ПравилоУплаты, КонецПериода);
			
			РегистрацияВНалоговомОрганеОрганизации  = Справочники.Организации.РегистрацияВНалоговомОргане(Объект.Организация, КонецПериода);
			РегистрацияВНалоговомОрганеСтроки = РегистрацияВНалоговомОрганеОрганизации;
			Если ЗначениеЗаполнено(СтрокаРасчета.РегистрацияВНалоговомОргане) Тогда
				РегистрацияВНалоговомОрганеСтроки = СтрокаРасчета.РегистрацияВНалоговомОргане;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНалоги.Добавить();
			НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеСтроки;
			НоваяСтрока.КодПоОКТМО                  = СтрокаРасчета.ОКТМО;
			НоваяСтрока.Налог                       = СтрокаРасчета.Налог;
			НоваяСтрока.КодБК                       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(СтрокаРасчета.Налог, СтрокаРасчета.ВидНалоговогоОбязательства, КонецПериода);
			НоваяСтрока.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаРасчета.Налог, КонецПериода);
			НоваяСтрока.Сумма                       = СтрокаРасчета.ЗначениеПоказателя;
			Если ЗначениеЗаполнено(СтрокаРасчета.СрокУплаты) Тогда
				НоваяСтрока.СрокУплаты = СтрокаРасчета.СрокУплаты;
			Иначе
				НоваяСтрока.СрокУплаты = СрокУплатыНалога;
			КонецЕсли;
			НоваяСтрока.НачалоПериода               = НачалоПериода;
			НоваяСтрока.КонецПериода                = КонецПериода;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДляОперацииПоЕНС Тогда
		КолонкиДляСвертки = "Налог,КодБК,СчетУчета,ВидПлатежаВГосБюджет,УровеньБюджета,РегистрацияВНалоговомОргане,КодПоОКТМО,СрокУплаты,СчетЗатрат,Субконто1,Субконто2,Субконто3,КлючСтроки";
		ТаблицаНалоги.Свернуть(КолонкиДляСвертки, "Сумма");
	КонецЕсли;
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	ТаблицыНалогов.ТаблицаНалоговыйАгентНДС = ТаблицаНалоговыйАгентНДС;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеТаблицыНДС(СведенияОРасчете, ТаблицаНалоги, ТаблицаНалоговыйАгентНДС)
	
	СтрокаПлатежа = СведенияОРасчете.ТаблицаПлатежейНДС.Найти(Срок, "Дата");
	
	ТаблицаТаможенныйСоюзНДС      = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалоговыйАгентНДС();
	ТаблицаНДСВрем                = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалоговыйАгентНДС();
	ТаблицаНалоговыйАгентИтоговая = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалоговыйАгентНДС();
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(СведенияОРасчете.ПараметрыЗадачи.Периодичность, Срок);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(СведенияОРасчете.ПараметрыЗадачи.Периодичность, Срок);
	
	РегистрацияВНалоговомОрганеОрганизации  = Справочники.Организации.РегистрацияВНалоговомОргане(Объект.Организация, КонецПериода);
	КодПоОКТМО           = СтрокаПлатежа.ОКАТО;
	ПредельныйСрокУплаты = СтрокаПлатежа.Дата;
	Налог                = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	КодБК                = СтрокаПлатежа.КБК;
	
	Если СтрокаПлатежа.Сумма <> 0 Тогда
		СтрокаНДСПоОбычнымОперациям = ТаблицаНалоги.Добавить();
		СтрокаНДСПоОбычнымОперациям.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеОрганизации;
		СтрокаНДСПоОбычнымОперациям.КодПоОКТМО                  = КодПоОКТМО;
		СтрокаНДСПоОбычнымОперациям.Налог                       = Налог;
		СтрокаНДСПоОбычнымОперациям.КодБК                       = КодБК;
		СтрокаНДСПоОбычнымОперациям.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, КонецПериода);
		СтрокаНДСПоОбычнымОперациям.Сумма                       = СтрокаПлатежа.Сумма;
		СтрокаНДСПоОбычнымОперациям.СрокУплаты                  = ПредельныйСрокУплаты;
		СтрокаНДСПоОбычнымОперациям.КлючСтроки                  = Строка(Новый УникальныйИдентификатор);
		СтрокаНДСПоОбычнымОперациям.НачалоПериода               = НачалоПериода;
		СтрокаНДСПоОбычнымОперациям.КонецПериода                = КонецПериода;
	КонецЕсли;
	
	ОкруглятьДОЦелого = Срок < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("ТаблицаНалоговыйАгентНДС", Новый Структура("СчетУчета, ТаблицаДанных", ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента, ТаблицаНалоговыйАгентНДС));
	СоответствиеТаблиц.Вставить("ТаблицаТаможенныйСоюзНДС", Новый Структура("СчетУчета, ТаблицаДанных", ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате, ТаблицаТаможенныйСоюзНДС));
	
	Для Каждого ЗаписьСоответствия Из СоответствиеТаблиц Цикл
		Если ЗначениеЗаполнено(СведенияОРасчете[ЗаписьСоответствия.Ключ]) Тогда
			
			СчетУчета     = ЗаписьСоответствия.Значение.СчетУчета;
			ТаблицаДанных = ЗаписьСоответствия.Значение.ТаблицаДанных;
			
			ОбщаяТаблицаРасчетов = СведенияОРасчете[ЗаписьСоответствия.Ключ].Скопировать(Новый Структура("СчетУчета", СчетУчета));
			ТаблицаРасчетов = ОбщаяТаблицаРасчетов.СкопироватьКолонки();
			Для Каждого СтрокаТаблицы Из ОбщаяТаблицаРасчетов Цикл
				Если НачалоМесяца(СтрокаТаблицы.СрокУплаты) = НачалоМесяца(ПредельныйСрокУплаты) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаРасчетов.Добавить(), СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			
			СрокиУплаты = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчетов, "СрокУплаты", Истина);
			ТекущийСрокУплаты = Дата(1,1,1);
			Сумма             = 0;
			Для Каждого СрокУплаты Из СрокиУплаты Цикл
				
				КлючСтроки = Строка(Новый УникальныйИдентификатор);
				ТаблицаНДСВрем.Очистить();
				
				Если ТекущийСрокУплаты <> СрокУплаты Тогда
					Если Сумма <> 0 Тогда
						НоваяСтрока = ТаблицаНалоги.Добавить();
						НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеОрганизации;
						НоваяСтрока.КодПоОКТМО                  = КодПоОКТМО;
						НоваяСтрока.Налог                       = Налог;
						НоваяСтрока.КодБК                       = КодБК;
						НоваяСтрока.СчетУчета                   = СчетУчета;
						НоваяСтрока.Сумма                       = Окр(Сумма, 0, РежимОкругления.Окр15как10);
						НоваяСтрока.СрокУплаты                  = ТекущийСрокУплаты;
						НоваяСтрока.КлючСтроки                  = КлючСтроки;
						НоваяСтрока.НачалоПериода               = НачалоПериода;
						НоваяСтрока.КонецПериода                = КонецПериода;
						Сумма = 0;
					КонецЕсли;
					ТекущийСрокУплаты = СрокУплаты;
				КонецЕсли;
				Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
					Если СтрокаТаблицы.СрокУплаты = ТекущийСрокУплаты Тогда
						НоваяСтрока = ТаблицаНДСВрем.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						НоваяСтрока.КлючСтроки = КлючСтроки;
						Сумма = Сумма + НоваяСтрока.Сумма;
					КонецЕсли;
				КонецЦикла;
				
				Если Сумма <> 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСВрем, ТаблицаДанных);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Сумма <> 0 Тогда
				НоваяСтрока = ТаблицаНалоги.Добавить();
				НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеОрганизации;
				НоваяСтрока.КодПоОКТМО                  = КодПоОКТМО;
				НоваяСтрока.Налог                       = Налог;
				НоваяСтрока.КодБК                       = КодБК;
				НоваяСтрока.СчетУчета                   = СчетУчета;
				Если Не ОкруглятьДоЦелого Тогда
					НоваяСтрока.Сумма = Сумма;
				Иначе
					НоваяСтрока.Сумма = Окр(Сумма, 0, РежимОкругления.Окр15как10);
				КонецЕсли;
				НоваяСтрока.СрокУплаты                  = ТекущийСрокУплаты;
				НоваяСтрока.КлючСтроки                  = КлючСтроки;
				НоваяСтрока.НачалоПериода               = НачалоПериода;
				НоваяСтрока.КонецПериода                = КонецПериода;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗаписьСоответствия Из СоответствиеТаблиц Цикл
		ТаблицаДанных = ЗаписьСоответствия.Значение.ТаблицаДанных;
		Если ТаблицаДанных.Количество() <> 0 Тогда
			
			МассивКлючей = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "КлючСтроки", Истина);
			
			Для Каждого КлючСтроки Из МассивКлючей Цикл
				
				ТаблицаПоКлючу = ТаблицаДанных.Скопировать(Новый Структура("КлючСтроки", КлючСтроки));
				
				ИтогСуммаЗаписей     = ТаблицаПоКлючу.Итог("Сумма");
				ИтогСуммаУведомления = ТаблицаНалоги.Найти(КлючСтроки, "КлючСтроки").Сумма;
				Разница = ИтогСуммаЗаписей - ИтогСуммаУведомления;
				
				ТаблицаПоКлючу.Сортировать("Сумма");
				Для Каждого СтрокаТаблицы ИЗ ТаблицаПоКлючу Цикл
					СуммаСтроки = СтрокаТаблицы.Сумма;
					Если Разница <> 0 Тогда
						СуммаСтроки = Макс(0, СуммаСтроки - Разница);
						Разница = Разница - (СтрокаТаблицы.Сумма - СуммаСтроки);
					КонецЕсли;
					СтрокаТаблицы.Сумма = СуммаСтроки;
				КонецЦикла;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоКлючу, ТаблицаНалоговыйАгентИтоговая);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНалоговыйАгентИтоговая.Сортировать("КлючСтроки, Контрагент, Договор, ДокументРасчетов, Сумма");
	
	Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаНалоговыйАгентНДСПоОтдельнымВидамТоваров) Тогда
		
		Налог      = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС_ВвозимыеТовары);
		КодБК      = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог);
		
		Для Каждого СтрокаТаблицы Из СведенияОРасчете.ТаблицаНалоговыйАгентНДСПоОтдельнымВидамТоваров Цикл
			НоваяСтрока = ТаблицаНалоги.Добавить();
			НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеОрганизации;
			НоваяСтрока.КодПоОКТМО                  = Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНалоговомОрганеОрганизации);
			НоваяСтрока.Налог                       = Налог;
			НоваяСтрока.КодБК                       = КодБК;
			НоваяСтрока.СчетУчета                   = СтрокаТаблицы.СчетУчета;
			НоваяСтрока.Сумма                       = СтрокаТаблицы.Сумма;
			НоваяСтрока.СрокУплаты                  = СтрокаТаблицы.СрокУплаты;
			НоваяСтрока.КлючСтроки                  = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.НачалоПериода               = НачалоПериода;
			НоваяСтрока.КонецПериода                = КонецПериода;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаНалоговыйАгентНДС = ТаблицаНалоговыйАгентИтоговая.Скопировать();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
	ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, ЭтотОбъект);
	ПараметрыНабораПравил.Организация = Объект.Организация;
	ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыНабораПравил);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктуализироватьОперациюПоЕНС()
	
	ЕстьРанееСозданнаяОперация = Ложь;
	ДокументОбъект = Неопределено;
	Для Каждого Документ Из УведомленияОбИсчисленныхНалогах Цикл
		Если ТипЗнч(Документ.Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
			ЕстьРанееСозданнаяОперация = Истина;
			ДокументОбъект = Документ.Уведомление.ПолучитьОбъект();
			Если Не ДокументОбъект.СозданАвтоматически Тогда
				// Если в существующий документ были вручную внесены изменения, то такой документ не обслуживаем
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.ОперацияПоЕдиномуНалоговомуСчету.СоздатьДокумент();
	КонецЕсли;
	
	Отказ = Ложь;
	ЕдиныйНалоговыйСчет.ЗаполнитьОперациюПоЕНС(ДокументОбъект, Объект.Организация, ОписаниеТаблицыНалоги(Истина), Правило, ПериодСобытия, Отказ);
	
	Если Не Отказ Тогда
		Если ЕстьРанееСозданнаяОперация Тогда
			ОперацияЕНС = Документ;
		Иначе
			ОперацияЕНС = УведомленияОбИсчисленныхНалогах.Добавить();
		КонецЕсли;
		ОперацияЕНС.Уведомление = ДокументОбъект.Ссылка;
		ОперацияЕНС.Сумма = ДокументОбъект.Налоги.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	Если НЕ РасчетПоДаннымЗакрытияМесяца 
		И (РасчетСуммыВыполнен ИЛИ НЕ АктуализацияВозможна) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаПроверкаАктуальности");
		
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = ПериодСобытия;
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = РасчетПоДаннымЗакрытияМесяца;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	Иначе
		ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Объект.Организация, ДатаАктуальности);
		ТребуетсяАктуализация = Истина;
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	ПараметрыОповещения = Новый Структура("Организация", Объект.Организация);
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
	АдресХранилищаАктуализации = "";
	
	Если РезультатАктуализации.Выполнено Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
		Если РасчетПоДаннымЗакрытияМесяца Тогда
			// Запускаем загрузку обновленных данных расчета
			ОбработатьВыполнениеРасчета(, Ложь);
		КонецЕсли;	
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовУплаты

&НаКлиенте
Процедура ПередУплатойНалога()
	
	Если Не УведомлениеОбИсчисленныхНалогахПодготовлено Тогда
		ПредупредитьОбОтсутствииУведомления();
	Иначе
		Уплатить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Уплатить()
	
	ИмяФормыПлатежногоДокумента = 
		?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
			"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая");
	
	Если Платежи.Количество() = 0 Тогда
		ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Неопределено);
	Иначе
		ПараметрыФормыПлатежногоДокумента =  ПараметрыФормыПлатежногоДокумента(Платежи[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа, СоздатьНовый = Ложь)
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) И Не СоздатьНовый Тогда
		Возврат Новый Структура("Ключ", СтрокаПлатежа.ПлатежноеПоручение);
	КонецЕсли;
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = ?(ЗначениеЗаполнено(СтрокаПлатежа.ВидНалоговогоОбязательства),
		СтрокаПлатежа.ВидНалоговогоОбязательства,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.Аванс                      = СтрокаПлатежа.Аванс;
	ОписаниеПлатежа.КБК                        = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО                      = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КодНалоговогоОргана        = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма                      = Объект.СуммаЕНП;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	
	Если ПлательщикЕНП Тогда
		РеквизитыГоловнойОрганизации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
			Объект.Организация, СтрокаПлатежа.Налог, ПериодСобытия);
		ОписаниеПлатежа.КПППлательщика    = РеквизитыГоловнойОрганизации.КПП;
		ОписаниеПлатежа.ОКАТО             = РеквизитыГоловнойОрганизации.ОКТМО;
		ОписаниеПлатежа.ПоказательПериода = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	Иначе
		КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
		Если УплатаПоМестуПостановкиНаУчет И ЗначениеЗаполнено(КПППлательщика) Тогда
			ОписаниеПлатежа.КПППлательщика = КПППлательщика;
		КонецЕсли;
		ОписаниеПлатежа.ПоказательПериода = ?(ЗначениеЗаполнено(СтрокаПлатежа.НалоговыйПериод), СтрокаПлатежа.НалоговыйПериод, ПоказательПериода);
		ОписаниеПлатежа.ДатаДекларации = ДатаДекларации;
	КонецЕсли;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, РегистрацияВНалоговомОргане", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, РегистрацияВНалоговомОргане);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоПлатежногоДокумента()
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.Декларация                 = Декларация;
	
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУплаты.Периодичность, ПериодСобытия);
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
	
	ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	РеквизитыОсновнойРегистрации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
		Объект.Организация, ОписаниеПлатежа.Налог, КонецПериода);
	
	ОписаниеПлатежа.КПППлательщика      = РеквизитыОсновнойРегистрации.КПП;
	ОписаниеПлатежа.КБК                 = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
		ОписаниеПлатежа.Налог, , КонецПериода);
	ОписаниеПлатежа.КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		ГоловнаяОрганизация,
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	ОписаниеПлатежа.Описание            = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		ОписаниеПлатежа.Налог);
	ОписаниеПлатежа.ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	ОписаниеПлатежа.ОКАТО               = РеквизитыОсновнойРегистрации.ОКТМО;
		
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, РегистрацияВНалоговомОргане", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, РегистрацияВНалоговомОргане);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор, СоздатьНовый = Ложь)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	Возврат ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа, СоздатьНовый);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

#КонецОбласти

#Область Баннеры

&НаКлиенте
Процедура НастроитьБаннеры()
	
	Если ТипЗнч(БаннерБлокУплата) <> Тип("Структура") 
		 Или Не ЗначениеЗаполнено(БаннерБлокУплата.ИдентификаторБаннера)Тогда
		Элементы.ГруппаУплатаБаннер.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУплатаБаннер.Видимость = Истина;
		Элементы.ГруппаУплатаТекстБаннера.Заголовок = БаннерБлокУплата.Сообщение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Антикризис" Тогда
		СтандартнаяОбработка = Ложь;
		НастройкиУчетаКлиент.ОткрытьНастройкиАнтикризис(Объект.Организация);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗаявлениеОЛьготеПоНалогу" Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеДействия = БаннерБлокРасчет.ОписаниеДействийПоСсылкам.ЗаявлениеОЛьготеПоНалогу;
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьБаннер(Знач ИмяЭлемента)
	
	Если СтрНайти(ИмяЭлемента, "ЗакрытьБаннер") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	НаименованиеБлока = СтрЗаменить(ИмяЭлемента, "ЗакрытьБаннер", "");
	
	ИдентификаторБаннера = "";
	
	Если НаименованиеБлока = "ГруппаРасчет" Тогда
		ИдентификаторБаннера = БаннерБлокРасчет.ИдентификаторБаннера;
	ИначеЕсли НаименованиеБлока = "ГруппаУплата" Тогда
		ИдентификаторБаннера = БаннерБлокУплата.ИдентификаторБаннера;
	КонецЕсли;	
	
	Обработки.ПомощникУплатыНалога.СохранитьНастройкуВидимостиБаннера(
		Объект.Организация, 
		КодЗадачиУплатыНалога(), 
		ИдентификаторБаннера, 
		Ложь);
		
	Элементы[НаименованиеБлока+"Баннер"].Видимость = Ложь;	
		
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомление()
	
	Для Каждого СтрокаТаблицы Из УведомленияОбИсчисленныхНалогах Цикл
		ДокументОбъект = СтрокаТаблицы.Уведомление.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	УведомленияОбИсчисленныхНалогах.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СуммаСписанияСЕНСПриИзмененииНаСервере()
	
	Объект.СуммаЕНП = Макс(0, НалогКУплате - СуммаСписанияСЕНС - Платежи.Итог("СуммаПлатежногоПоручения"));
	ЗаписатьСуммуЗачетаЕНС();
	ОтразитьИспользованиеОстаткаЕНС();
	УправлениеФормойБлокЕНС();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
