#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет в переданной таблице ПараметрыЗадач колонку статус.
// Добавляет колонку СведенияОРасчетеСуммы и заполняет ее.
//
// Параметры:
//  ПараметрыЗадачи - ТаблицаЗначений - Состав колонок см. НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ТаблицаЗадач) Экспорт
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		ПараметрыЗадачи = НовыеПараметрыЗадачи();
		ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, Задача);
		
		ПараметрыЗадачи.ПериодОтчета = ВыполнениеЗадачБухгалтера.ПериодОтчетаПоПравилуУплаты(Задача.ПравилоУплаты, Задача.ПериодСобытия);
		ПараметрыЗадачи.ПравилоОтчета =
			ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(Задача.ПравилоУплаты, Задача.Организация, ПараметрыЗадачи.ПериодОтчета);
			
		Если Задача.ИдентификаторЗадачи = "ЕдиныйНалоговыйСчет" Тогда
			СведенияОРасчетах = СведенияОРасчетахСумм(ПараметрыЗадачи);
			Если Задача.СтатусУстановленВручную Тогда
				Статус = Задача.РучнойСтатус;
			Иначе
				Статус = СтатусУплатыЕдиногоНалога(СведенияОРасчетах);
			КонецЕсли;
			Задача.Статус = Статус;
			ЗаписатьСтатусПодчиненныхЗадачПоЕдиномуНалоговомуСчету(
				СведенияОРасчетах.КэшируемыеПараметры.ТаблицаПодчиненныхЗадач,
				Статус,
				Задача.СтатусУстановленВручную,
				Задача.ПользовательУстановившийСтатус,
				Задача.Комментарий);
		Иначе
			Если Задача.СтатусУстановленВручную Тогда
				Задача.Статус = Задача.РучнойСтатус;
			Иначе
				СведенияОРасчетеСуммы  = СведенияОРасчетеСуммы(ПараметрыЗадачи);
				Задача.Статус = СтатусУплатыНалога(СведенияОРасчетеСуммы);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаРасчетовПоСпискуЗадач(Действие, ТаблицаЗадач, ПараметрыЗадачиЕдиногоПомощника = Неопределено) Экспорт
	
	ТаблицыРасчетов   = НовыйТаблицыРасчетов();
	ЗаполнитьПредставленияНалоговыхОрганов(ТаблицаЗадач);
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
		
		ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
		ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, СтрокаТаблицы);
		ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
		
		ПараметрыПодзадачи = НовыеПараметрыЗадачи();
		
		Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
			ПараметрыПодзадачи.ПравилоУведомления = СтрокаТаблицы.Правило;
		КонецЕсли;
		ПараметрыПодзадачи.СоставРазделов = Новый Структура("РасчетУплата", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыПодзадачи, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ПараметрыПодзадачи, ПараметрыНабораПравил);
		
		СведенияОРасчете = СведенияОРасчетеСуммы(ПараметрыПодзадачи, ПараметрыЗадачиЕдиногоПомощника);
		СведенияОРасчете.ИдентификаторЗапроса = СтрокаТаблицы.ИдентификаторЗапроса;
		
		ОписаниеНалога = ВРег(Лев(СтрокаТаблицы.НаименованиеЗадачи, 1)) + Сред(СтрокаТаблицы.НаименованиеЗадачи, 2);
		Если СтрокаТаблицы.ВыполняетсяПоРегистрации И ЗначениеЗаполнено(СтрокаТаблицы.РегистрацияВНалоговомОргане) Тогда
			ОписаниеНалога = СтрШаблон("%1 (%2)", ОписаниеНалога, СтрокаТаблицы.ПредставлениеНалоговогоОргана);
		КонецЕсли;
		
		ДополнятьОписаниеПериодом = ТаблицаЗадач.НайтиСтроки(Новый Структура("ИдентификаторЗадачи", СтрокаТаблицы.ИдентификаторЗадачи)).Количество() > 1
			Или ТаблицаЗадач.НайтиСтроки(Новый Структура("НаименованиеЗадачи", СтрокаТаблицы.НаименованиеЗадачи)).Количество() > 1;
			
		Если ДополнятьОписаниеПериодом Тогда
			ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
				ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(СтрокаТаблицы.Периодичность, СтрокаТаблицы.ПериодСобытия), КонецДня(СтрокаТаблицы.ПериодСобытия));
			ОписаниеНалога = СтрШаблон(НСтр("ru='%1 за %2'"), ОписаниеНалога, ПредставлениеПериода);
		КонецЕсли;
		
		СведенияОРасчете.ИнформацияБлокНалог = ОписаниеНалога;
		СведенияОРасчете.ПараметрыЗадачи = ПараметрыПодЗадачи;
		
		НоваяСтрока = ТаблицыРасчетов.Добавить();
		НоваяСтрока.СведенияОРасчете            = СведенияОРасчете;
		НоваяСтрока.ОписаниеНалога              = ОписаниеНалога;
		НоваяСтрока.РегистрацияВНалоговомОргане = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		
	КонецЦикла;
	
	Возврат ТаблицыРасчетов;
	
КонецФункции

// Подготавливает сведения о расчете и уплате по задаче
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыеПараметрыЗадачи()
//  АдресХранилища  - Строка - адрес хранилища результата
//
Процедура СведенияПоЗадаче(ПараметрыЗадачи, АдресХранилища) Экспорт
	
	СоставРазделов  = ПараметрыЗадачи.СоставРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СоставРазделов", СоставРазделов);
	
	Если СоставРазделов.РасчетУплата Тогда
		
		СведенияОРасчетеСуммы = СведенияОРасчетеСуммы(ПараметрыЗадачи);
		
		Если ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУплаты) Тогда
			
			КлючЗадачиУплаты = Новый Структура; // Имитирует ключ записи ЗадачиБухгалтера
			КлючЗадачиУплаты.Вставить("Организация",   ПараметрыЗадачи.Организация);
			КлючЗадачиУплаты.Вставить("Правило",       ПараметрыЗадачи.ПравилоУплаты);
			КлючЗадачиУплаты.Вставить("Действие",      Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
			КлючЗадачиУплаты.Вставить("ПериодСобытия", ПараметрыЗадачи.ПериодСобытия); // период, за который уплачивается налог
			КлючЗадачиУплаты.Вставить("РегистрацияВНалоговомОргане",
			                                           ПараметрыЗадачи.РегистрацияВНалоговомОргане);
			
			ВыполнениеЗадачБухгалтера.ПроверитьАктуальностьСтатуса(КлючЗадачиУплаты, СтатусУплатыНалога(СведенияОРасчетеСуммы));
			
		КонецЕсли;
		
		РезультатВыполнения.Вставить("СведенияОРасчетеСуммы", СведенияОРасчетеСуммы);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Функция-конструктор структуры, описывающей параметры задачи
//
Функция НовыеПараметрыЗадачи() Экспорт
	
	ПараметрыЗадачи = Новый Структура();
	
	ПараметрыЗадачи.Вставить("Организация",                    Справочники.Организации.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("ПравилоУплаты",                  Неопределено); // СправочникСсылка.Патенты, СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
	ПараметрыЗадачи.Вставить("ПравилоОтчета",                  Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("ПравилоУведомления",             Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("ПериодСобытия",                  '00010101');
	ПараметрыЗадачи.Вставить("ПериодОтчета",                   '00010101');
	ПараметрыЗадачи.Вставить("Срок",                           '00010101');
	ПараметрыЗадачи.Вставить("СрокПодачиУведомления",          '00010101');
	ПараметрыЗадачи.Вставить("Описание",                       "");
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане",    Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("СоставРазделов",                 Новый Структура("РасчетУплата", Ложь));
	ПараметрыЗадачи.Вставить("ИдентификаторЗадачи",            "");
	ПараметрыЗадачи.Вставить("Периодичность",                  Перечисления.Периодичность.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("Статус",                         "");
	ПараметрыЗадачи.Вставить("СтатусУстановленВручную",        Ложь);
	ПараметрыЗадачи.Вставить("РучнойСтатус",                   "");
	ПараметрыЗадачи.Вставить("ПользовательУстановившийСтатус", Справочники.Пользователи.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("Комментарий",                    "");
	ПараметрыЗадачи.Вставить("Действие" ,                      Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка());
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

// Функция-конструктор таблицы, описывающей параметры задач
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = Новый ТаблицаЗначений;
	
	Для Каждого ЭлементСтруктуры Из НовыеПараметрыЗадачи() Цикл
		ПараметрыЗадач.Колонки.Добавить(ЭлементСтруктуры.Ключ,
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЭлементСтруктуры.Значение))));
	КонецЦикла;
	
	Возврат ПараметрыЗадач;
	
КонецФункции

Функция НовыйТаблицаЗадачДляСведенийОРасчетах() Экспорт
	
	МетаданныеСпискаЗадач = Метаданные.РегистрыСведений.ЗадачиБухгалтера;
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЗадач.Колонки.Добавить("Организация", МетаданныеСпискаЗадач.Измерения.Организация.Тип);
	ТаблицаЗадач.Колонки.Добавить("РегистрацияВНалоговомОргане", МетаданныеСпискаЗадач.Измерения.РегистрацияВНалоговомОргане.Тип);
	ТаблицаЗадач.Колонки.Добавить("Правило", МетаданныеСпискаЗадач.Измерения.Правило.Тип);
	ТаблицаЗадач.Колонки.Добавить("Действие", МетаданныеСпискаЗадач.Измерения.Действие.Тип);
	ТаблицаЗадач.Колонки.Добавить("ПериодСобытия", МетаданныеСпискаЗадач.Измерения.ПериодСобытия.Тип);
	ТаблицаЗадач.Колонки.Добавить("Срок", МетаданныеСпискаЗадач.Реквизиты.Срок.Тип);
	ТаблицаЗадач.Колонки.Добавить("Описание", МетаданныеСпискаЗадач.Реквизиты.Наименование.Тип);
	ТаблицаЗадач.Колонки.Добавить("ИдентификаторЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗадач.Колонки.Добавить("Периодичность", МетаданныеСпискаЗадач.Реквизиты.Периодичность.Тип);
	ТаблицаЗадач.Колонки.Добавить("Статус", МетаданныеСпискаЗадач.Ресурсы.Статус.Тип);
	ТаблицаЗадач.Колонки.Добавить("НаименованиеЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗадач.Колонки.Добавить("ВыполняетсяПоРегистрации", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Определяет представление декларации на форме (для пользователя).
//
// Параметры:
//  Декларация	 - ДокументСсылка.РегламентированныйОтчет  - декларация.
// 
// Возвращаемое значение:
//  Строка - представление декларации на форме (для пользователя).
//
Функция ПредставлениеДекларации(Декларация) Экспорт
	
	ТипДокумента = ТипЗнч(Декларация);
	
	Если ТипДокумента <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(Декларация);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Декларация,
		"НаименованиеОтчета, ПредставлениеПериода");
	
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 за %2 (%3)'"),
		РеквизитыДокумента.НаименованиеОтчета,
		РеквизитыДокумента.ПредставлениеПериода,
		СостояниеОтправки);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

// Устанавливает описание баннера, который должен быть выведен в блоке Расчет
Функция ДанныеБаннераБлокРасчет(ПараметрыЗадачи, КэшируемыеПараметры)
	
	Организация     = ПараметрыЗадачи.Организация;
	ПериодСобытия   = ПараметрыЗадачи.ПериодСобытия;
	КодЗадачи       = ПараметрыЗадачи.ИдентификаторЗадачи;
	
	ОписаниеБаннера = НовыйОписаниеБаннера();
	
	Если УправлениеВнеоборотнымиАктивами.ВидимостьБаннераИзмененияВУплатеНалога(
		 КодЗадачи,
		 Организация,
		 ПериодСобытия) Тогда
		
		ТекстБаннера = УправлениеВнеоборотнымиАктивами.ТекстБаннераИзмененияВУплатеНалога(
			КодЗадачи,
			Организация,
			ПериодСобытия,
			ПараметрыЗадачи.Срок,
			КэшируемыеПараметры);
		
		Если ЗначениеЗаполнено(ТекстБаннера) Тогда
			ОписаниеБаннера.ИдентификаторБаннера = "ИзмененияВУплатеНалога";
			ОписаниеБаннера.Сообщение = ТекстБаннера;
		КонецЕсли;
	
	ИначеЕсли КодЗадачи = "СтатистическаяОтчетность" Тогда 
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадачи.ПравилоОтчета, "Код") = "2020_1Предприниматель" Тогда
		 
			ВыводитьБаннер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВидимостьБаннераПредставлениеФормы1Предприниматель",
				"2020_1Предприниматель",
				Истина);
			
			Если ВыводитьБаннер Тогда
				ОписаниеБаннера.ИдентификаторБаннера = "ПредставлениеФормы1Предприниматель";
				ОписаниеБаннера.Сообщение = 
					УчетДоходовИРасходовПредпринимателяЗаполнениеФормСтатистики.ТекстБаннераЗадачи1Предприниматель();
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадачи.ПравилоОтчета, "Код") = "2020_МПСП" Тогда
			
			ВыводитьБаннер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВидимостьБаннераПредставлениеФормыМПСП",
				"2020_МПСП",
				Истина);
			
			Если ВыводитьБаннер Тогда
				ОписаниеБаннера.ИдентификаторБаннера = "ПредставлениеФормыМПСП";
				ОписаниеБаннера.Сообщение = 
					УчетДоходовИРасходовПредпринимателяЗаполнениеФормСтатистики.ТекстБаннераЗадачиМПСП();
			КонецЕсли;
			
		КонецЕсли;	
		 	
	КонецЕсли;	 
	
	Возврат ОписаниеБаннера;
	
КонецФункции

// Устанавливает описание баннера, который должен быть выведен в блоке Уплата
Функция ДанныеБаннераБлокУплата(ПараметрыЗадачи)
	
	Возврат НовыйОписаниеБаннера();
	
КонецФункции

// Сохраняет признак видимости баннера.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо сохранить признак
//   КодЗадачи   - Строка - код задачи по уплате налога или представлению отчета
//   ИдентификаторБаннера - Строка - см. ЗаполнитьДанныеБаннеровБлокРасчет()
//   ЗначениеНастройки - Булево - признак видимости баннера
//
Процедура СохранитьНастройкуВидимостиБаннера(Организация, КодЗадачи, ИдентификаторБаннера, ЗначениеНастройки) Экспорт
		
	Если ИдентификаторБаннера = "ИзмененияВУплатеНалога" Тогда
		УправлениеВнеоборотнымиАктивами.СохранитьНастройкуБаннераИзмененияВУплатеНалога(
			КодЗадачи,
			Организация,
			ЗначениеНастройки);
	ИначеЕсли ИдентификаторБаннера = "ПредставлениеФормы1Предприниматель" Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВидимостьБаннераПредставлениеФормы1Предприниматель",
			"2020_1Предприниматель",
			ЗначениеНастройки);
	ИначеЕсли ИдентификаторБаннера = "ПредставлениеФормыМПСП" Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВидимостьБаннераПредставлениеФормыМПСП",
			"2020_МПСП",
			ЗначениеНастройки);
	КонецЕсли;	
	
КонецПроцедуры

// Подготавливает сведения о расчете и уплате по задачам
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыеПараметрыЗадачи()
//  АдресХранилища  - Строка - адрес хранилища результата
//
Процедура СведенияПоЗадачам(ПараметрыЗадачи, АдресХранилища) Экспорт
	
	СоставРазделов  = ПараметрыЗадачи.СоставРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СоставРазделов", СоставРазделов);
	
	Если СоставРазделов.РасчетУплата Тогда
		
		СведенияОРасчетах = СведенияОРасчетахСумм(ПараметрыЗадачи);
		РезультатВыполнения.Вставить("СведенияОРасчетах", СведенияОРасчетах);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаписатьСтатусПодчиненныхЗадачПоЕдиномуНалоговомуСчету(ТаблицаПодчиненныхЗадач, Статус, СтатусУстановленВручную = Ложь, ПользовательУстановившийСтатус = Неопределено, Комментарий = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПодчиненныхЗадач) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаСоСтатусом = РегистрыСведений.ЗадачиБухгалтера.НовыйЗадачаСоСтатусом();
	
	Для Каждого ПодчиненнаяЗадача Из ТаблицаПодчиненныхЗадач Цикл
		ЗаполнитьЗначенияСвойств(ЗадачаСоСтатусом, ПодчиненнаяЗадача);
		ЗадачаСоСтатусом.Статус = Статус;
		ВыполнениеЗадачБухгалтера.ЗаписатьНовыйСтатусЗадачи(ЗадачаСоСтатусом, Ложь, СтатусУстановленВручную, ПользовательУстановившийСтатус, Комментарий);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодчиненныеЗадачиПоЕдиномуНалоговомуСчету(ПараметрыЗадачи) Экспорт
	
	КодыПравилИсключенийВыполняемыхЕдинымПомощником = ВыполнениеЗадачБухгалтера.КодыПравилИсключенийВыполняемыхЕдинымПомощником();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       ПараметрыЗадачи.Организация);
	Запрос.УстановитьПараметр("Действие",          ПараметрыЗадачи.Действие);
	Запрос.УстановитьПараметр("Срок",              ПараметрыЗадачи.Срок);
	Запрос.УстановитьПараметр("ПравилаИсключения", КодыПравилИсключенийВыполняемыхЕдинымПомощником);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Действие КАК Действие,
	|	ЗадачиБухгалтера.ВАрхиве КАК ВАрхиве,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения,
	|	ЗадачиБухгалтера.Наименование КАК Описание,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ЗадачиБухгалтера.ДатаСоздания КАК ДатаСоздания,
	|	ЗадачиБухгалтера.ХешЗадачи КАК ХешЗадачи,
	|	ЗадачиБухгалтера.НачальныйСрок КАК НачальныйСрок,
	|	ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Владелец.Код КАК ИдентификаторЗадачи,
	|	ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Владелец.Наименование КАК НаименованиеЗадачи,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК ВыполняетсяПоРегистрации
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Действие = &Действие
	|	И (ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).ВыполняетсяЕдинымПомощником
	|			ИЛИ ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Код В (&ПравилаИсключения))
	|	И ЗадачиБухгалтера.Срок = &Срок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Правило,
	|	РегистрацияВНалоговомОргане";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗадачДляРасчетов = НовыйТаблицаЗадачДляСведенийОРасчетах();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыЗадач = ТаблицаЗадачДляРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗадач, Выборка);
		СтрокаТаблицыЗадач.ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	Возврат ТаблицаЗадачДляРасчетов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СведенияОРасчетеСуммы

Функция СведенияОРасчетеСуммы(ПараметрыЗадачи, ПараметрыЗадачиЕдиногоПомощника = Неопределено)
	
	СведенияОРасчете = НовыйСведенияОРасчете();
	
	Если Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУплаты)
		И Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Тогда
		
		Если ВыполнениеЗадачБухгалтера.ЭтоСтраховыеВзносы(ПараметрыЗадачи.ПравилоУведомления) Тогда
			ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете, ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов().СтраховыеВзносыТравматизм);
		Иначе
			// только уведомление
			ЗаполнитьСведенияПодготовкаУведомления(ПараметрыЗадачи, СведенияОРасчете);
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУплаты) Тогда
		
		// только отчет
		ЗаполнитьСведенияПодготовкаОтчета(ПараметрыЗадачи, СведенияОРасчете);
		
	Иначе
		
		СпособВыполненияЗадачи = ВыполнениеЗадачБухгалтера.СпособВыполненияЗадачи(ПараметрыЗадачи);
		
		Если СпособВыполненияЗадачи = "УплатаНДФЛ" Тогда
			ЗаполнитьСведенияУплатаНДФЛ(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаСтраховыхВзносов" Тогда
			Если ПараметрыЗадачи.ПериодСобытия < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
				ВариантВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов().СтраховыеВзносыТравматизм;
			Иначе
				ВариантВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов().СтраховыеВзносы;
			КонецЕсли;
			ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете, ВариантВыборкиСтраховыхВзносов);
			ДополнитьСведенияОСтраховыхВзносахПросроченнымиУведомлениями(ПараметрыЗадачи, СведенияОРасчете);
			
		ИначеЕсли СпособВыполненияЗадачи = "УплатаСтраховыхВзносовНаТравматизм" Тогда
			ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете, ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов().Травматизм);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаИмущественныхНалогов" Тогда
			ЗаполнитьСведенияУплатаИмущественныхНалогов(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаТорговогоСбора" Тогда
			ЗаполнитьСведенияУплатаТорговогоСбора(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаНалогаНаПрофессиональныйДоход" Тогда
			ЗаполнитьСведенияУплатаНалогаНаПрофессиональныйДоход(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаНДФЛ_ЕНС" Тогда
			ЗаполнитьСведенияУплатаНДФЛ_ЕНС(ПараметрыЗадачи, СведенияОРасчете);
			ДополнитьСведенияОРасчетеНДФЛПросроченнымиУведомлениями(ПараметрыЗадачи, СведенияОРасчете, ПараметрыЗадачиЕдиногоПомощника);
			ДополнитьСведенияОРасчетеНДФЛПросроченнымиУведомлениямиВторойПоловиныМесяца(ПараметрыЗадачи, СведенияОРасчете, ПараметрыЗадачиЕдиногоПомощника);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаУСН" Тогда
			ЗаполнитьСведенияУплатаУСН(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаНДФЛ_ИП" Тогда
			ЗаполнитьСведенияУплатаНДФЛ_ИП(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли СпособВыполненияЗадачи = "УплатаНДС" Тогда
			ЗаполнитьСведенияУплатаНДС(ПараметрыЗадачи, СведенияОРасчете);
		ИначеЕсли ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Тогда
			ЗаполнитьСведенияУплатаПоДекларации(ПараметрыЗадачи, СведенияОРасчете);
		Иначе
			ЗаполнитьСведенияНетСведений(ПараметрыЗадачи, СведенияОРасчете); // заполнение платежки стандартными реквизитами, без сумм
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьИтогРасчета(СведенияОРасчете);
	
	СведенияОРасчете.БаннерБлокРасчет = ДанныеБаннераБлокРасчет(ПараметрыЗадачи, СведенияОРасчете.КэшируемыеПараметры);
	СведенияОРасчете.БаннерБлокУплата = ДанныеБаннераБлокУплата(ПараметрыЗадачи);
	
	Возврат СведенияОРасчете;
	
КонецФункции

Функция СведенияОРасчетахСумм(ПараметрыЗадачи) Экспорт
	
	ТаблицаЗадачДляРасчетов = ПодчиненныеЗадачиПоЕдиномуНалоговомуСчету(ПараметрыЗадачи);
	
	РасчетСуммыВыполнен = Ложь;
	ТребуетсяУведомление = Ложь;
	РасчетПоДаннымЗакрытияМесяца = Ложь;
	
	СведенияОРасчетах = НовыйСведенияОРасчете();
	
	ТаблицыРасчетовСводная = НовыйТаблицыРасчетов();
	
	ТаблицаПлатежейСводная = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	ТаблицаУведомленийСводная = ВыполнениеЗадачБухгалтера.НовыйТаблицаУведомлений();
	
	ТаблицыРасчетов = ТаблицаРасчетовПоСпискуЗадач(ПараметрыЗадачи.Действие, ТаблицаЗадачДляРасчетов, ПараметрыЗадачи);
	
	МассивНалогов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицыРасчетов, "ОписаниеНалога", Истина);
	СтруктураОтбора = Новый Структура("ОписаниеНалога");
	
	Для Каждого ЗаписьМассива Из МассивНалогов Цикл
		
		СтруктураОтбора.ОписаниеНалога = ЗаписьМассива;
		НайденныеСтроки = ТаблицыРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаРасчета Из НайденныеСтроки Цикл
			
			НоваяСтрока = ТаблицыРасчетовСводная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
			
			РасчетСуммыВыполнен = Макс(РасчетСуммыВыполнен, СтрокаРасчета.СведенияОРасчете.РасчетСуммыВыполнен);
			ТребуетсяУведомление = Макс(ТребуетсяУведомление, СтрокаРасчета.СведенияОРасчете.ТребуетсяУведомление);
			РасчетПоДаннымЗакрытияМесяца = Макс(РасчетПоДаннымЗакрытияМесяца, СтрокаРасчета.СведенияОРасчете.РасчетПоДаннымЗакрытияМесяца);
			
			ТекущаяТаблицаПлатежей = СтрокаРасчета.СведенияОРасчете.ТаблицаПлатежей;
			Если ЗначениеЗаполнено(ТекущаяТаблицаПлатежей) Тогда
				Если ЭтоПравилоНДФЛКонецМесяца(ПараметрыЗадачи)
					ИЛИ ЭтоУплатаНДСИзЕАЭС(ПараметрыЗадачи) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблицаПлатежей, ТаблицаПлатежейСводная);
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблицаПлатежей.Скопировать(Новый Структура("Оплачено", Ложь)), ТаблицаПлатежейСводная);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяТаблицаУведомлений = СтрокаРасчета.СведенияОРасчете.ТаблицаУведомлений;
			Если ЗначениеЗаполнено(ТекущаяТаблицаУведомлений) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблицаУведомлений, ТаблицаУведомленийСводная);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПлатежейСводная.ЗаполнитьЗначения(ПараметрыЗадачи.ПериодСобытия, "Период");
	ТаблицаПлатежейСводная.ЗаполнитьЗначения(Перечисления.ВидыПлатежейВГосБюджет.Налог, "ВидНалоговогоОбязательства");
	
	РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ПараметрыЗадачи.Организация,
				ПараметрыЗадачи.Срок);

	Для Каждого Платеж Из ТаблицаПлатежейСводная Цикл
		ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
	КонецЦикла;
	
	ТаблицаПлатежейСводная.Свернуть("ВидНалоговогоОбязательства, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование", "Сумма");
	ДополнитьТаблицуПлатежейДокументами(ТаблицаПлатежейСводная, ПараметрыЗадачи);
	
	СведенияОРасчетах.РасчетСуммыВыполнен          = РасчетСуммыВыполнен;
	СведенияОРасчетах.РасчетПоДаннымЗакрытияМесяца = РасчетПоДаннымЗакрытияМесяца;
	СведенияОРасчетах.ТребуетсяУведомление         = ТребуетсяУведомление;
	
	СведенияОРасчетах.ТаблицаРасчета      = ТаблицыРасчетовСводная;
	СведенияОРасчетах.ТаблицаПлатежей     = ТаблицаПлатежейСводная;
	
	ПравилаДляУведомлений = Новый Массив;
	ПравилаДляУведомлений.Добавить(ПараметрыЗадачи.ПравилоУведомления);
	ПравилаДляУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	
	УведомленияПоЗадачеЕдиногоПомощника = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(ПравилаДляУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		,
		ЭтоПравилоНДФЛКонецМесяца(ПараметрыЗадачи));
	
	Если ЗначениеЗаполнено(УведомленияПоЗадачеЕдиногоПомощника) И ДополнятьУведомлениямиПоЗадачеЕдиногоПомощника(ПараметрыЗадачи, ЗначениеЗаполнено(ТаблицаУведомленийСводная)) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УведомленияПоЗадачеЕдиногоПомощника, ТаблицаУведомленийСводная);
	КонецЕсли;
	
	ТаблицаУведомленийСводная.Свернуть("Уведомление,Дата", "Сумма");
	ТаблицаУведомленийСводная.Сортировать("Дата Убыв");
	Для Каждого Уведомление Из ТаблицаУведомленийСводная Цикл
		Если ТипЗнч(Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
			Уведомление.Сумма = Документы.ОперацияПоЕдиномуНалоговомуСчету.ОписаниеДокумента(Уведомление).Сумма;
		ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда 
			Уведомление.Сумма = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеДокумента(Уведомление).Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СведенияОРасчетах.ТаблицаУведомлений  = ТаблицаУведомленийСводная;
	
	СведенияОРасчетах.ПараметрыЗадачи = ПараметрыЗадачи;
	
	СведенияОРасчетах.КэшируемыеПараметры.Вставить("ТаблицаПодчиненныхЗадач", ТаблицаЗадачДляРасчетов);
	
	Возврат СведенияОРасчетах;
		
КонецФункции

Процедура ЗаполнитьСведенияУплатаНДФЛ(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	Правило                     = ПараметрыЗадачи.ПравилоУплаты;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	Налог                       = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	КБК                         = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПериодСобытия);
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	СчетУчета     = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	УчетВРазрезеНалоговыхОрганов = НалоговыйУчет.УчетВРазрезеНалоговыхОрганов();
	КодТерритории                = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПериодСобытия);
	ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(КБК);
	КодГосударственногоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		Организация,
		ВидГосударственногоОргана);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОбороты.Субконто2 КАК РегистрацияВНалоговомОргане,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код КАК КодНалоговогоОргана,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО КАК ОКАТО,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет = &СчетУчета,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета,
	|	ВидНалоговогоОбязательства,
	|	ХозрасчетныйОбороты.Субконто2,
	|	Сумма";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Если НЕ УчетВРазрезеНалоговыхОрганов Тогда
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // РегистрацияВНалоговомОргане
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // КодНалоговогоОргана
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // ОКАТО
		СхемаЗапроса.ПакетЗапросов[0].Порядок.Удалить(2);// Упорядочивание по Субконто2
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Платежи   = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Налог = Налог;
		Платеж.КБК   = КБК;
		Платеж.Наименование = Строка(Платеж.Налог);
		Если НЕ УчетВРазрезеНалоговыхОрганов Тогда
			Платеж.ОКАТО               = КодТерритории;
			Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
		ДополнитьПлатежиПредставлениями(Платежи);
	КонецЕсли;
	
	// Для уплаты НДФЛ таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для Каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.СуммаУведомления       = Платеж.Сумма;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
		Расчет.Налог                  = Платеж.Налог;
	КонецЦикла;
	
	Если Платежи.Количество() > 1 Тогда 
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  = НСтр("ru = 'Сумма платежа рассчитывается на основании данных об удержанном НДФЛ'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	СведенияОРасчете.КБК = КБК;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете, ВариантВыборкиСтраховыхВзносов)
	
	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	
	СрокУплаты = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Организация, ПараметрыЗадачи.ПравилоУплаты, ПериодСобытия);
	Если Не ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента  = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "СтраховыеВзносыАУСН" Тогда
		ИмяДокумента = "РегламентнаяОперация";
	КонецЕсли;
	
	// Убедимся, что выполнена регламентная операция начисления взносов.
	ДокументЗарплаты    = Неопределено;
	НесколькоДокументов = Ложь;
	ОперацияВыполнена   = ВыполнениеЗадачБухгалтера.ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия, ДокументЗарплаты, НесколькоДокументов, ИмяДокумента);
	
	Если ОперацияВыполнена Тогда
		СведенияПоУплатеСтраховыхВзносов(ПараметрыЗадачи, СрокУплаты, СведенияОРасчете, ВариантВыборкиСтраховыхВзносов);
		Возврат;
	КонецЕсли;
	
	// Операция не выполнена.
	// Предложим выполнить регламентную операцию.
	ОписаниеДействияРасчет = СведенияОРасчете.ОписаниеДействияРасчет;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация",       Организация);
	Отбор.Вставить("МесяцНачисления",   НачалоМесяца(ПериодСобытия));
	Отбор.Вставить("ПериодРегистрации", НачалоМесяца(ПериодСобытия));
	
	Если ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// Откроем форму обработки загрузки.
		ОписаниеДействияРасчет.ИмяФормы       = "Обработка.ЗагрузкаДанныхИзЗУП.Форма";
		ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
		ОписаниеДействияРасчет.Наименование   = НСтр("ru = 'Загрузить данные о зарплате и взносах'");
	Иначе
		
		Если ИмяДокумента = "НачислениеЗарплаты" Тогда
			ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Начислить зарплату и взносы'");
		ИначеЕсли ИмяДокумента = "РегламентнаяОперация" Тогда
			ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Провести расчет взносов'");
		Иначе
			ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Ввести данные о зарплате и взносах'");
		КонецЕсли;
		
		// Откроем форму документа или списка (если документов несколько).
		Если НесколькоДокументов Или ИмяДокумента = "РегламентнаяОперация" Тогда
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаСписка";
			ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
		ИначеЕсли ЗначениеЗаполнено(ДокументЗарплаты) Тогда
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
			ОписаниеДействияРасчет.ПараметрыФормы = Новый Структура("Ключ", ДокументЗарплаты);
		Иначе
			// Документ НачислениеЗарплаты принимает месяц нового документа через специальный параметр формы.
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("МесяцНачисленияНовогоДокумента", НачалоМесяца(ПериодСобытия)); 
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",             Отбор);
			
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
			ОписаниеДействияРасчет.ПараметрыФормы = ПараметрыФормы;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных на счетах страховых взносов'");
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия,
		ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	СведенияОРасчете.ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	
КонецПроцедуры

Процедура СведенияПоУплатеСтраховыхВзносов(ПараметрыЗадачи, СрокУплаты, СведенияОРасчете, ВариантВыборкиСтраховыхВзносов)
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.Срок);
		
	ТолькоТравматизм = ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.Травматизм;
	
	Платежи = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыСтраховыхВзносов(
		ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		,
		ВариантВыборкиСтраховыхВзносов);
		
	Уплаты = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыСтраховыхВзносов(
		ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		ПлательщикЕНП,
		ВариантВыборкиСтраховыхВзносов);
		
	// Для уплаты страховых взносов таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.СуммаУведомления       = Платеж.Сумма;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
		Расчет.Налог                  = Платеж.Налог;
		Расчет.СрокУплаты             = СрокУплаты;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж.Налог, "ВидНалога") = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			Платеж.НалоговыйПериод = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		Иначе
			Платеж.НалоговыйПериод = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПараметрыЗадачи.ПериодСобытия,
				ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
		КонецЕсли;
		Расчет.ВидНалоговогоОбязательства  = Платеж.ВидНалоговогоОбязательства;
		Расчет.КодНалоговогоОргана         = Платеж.КодНалоговогоОргана;
		Расчет.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ПараметрыЗадачи.Организация, "", Расчет.КодНалоговогоОргана);
		Расчет.ИспользоватьПомощникДляРасчета = Ложь;
		
		ПериодУплаты = ОбщегоНазначенияКлиентСервер.СтрокаВДату(СтрШаблон("01.%1", Прав(Платеж.НалоговыйПериод, 7)));
		Расчет.ПредставлениеПериода   = СтрШаблон(НСтр("ru = 'за %1'"), Формат(ПараметрыЗадачи.ПериодСобытия, "ДФ='MMMM yyyy'"));
		
		Расчет.НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПараметрыЗадачи.Периодичность, ПараметрыЗадачи.ПериодСобытия);
		Расчет.КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПараметрыЗадачи.Периодичность, ПараметрыЗадачи.ПериодСобытия);
		
	КонецЦикла;
	
	// Оформим описание раздела "Уплата"
	Если ПлательщикЕНП И Не ТолькоТравматизм Тогда
		ТаблицаПлатежей = Уплаты;
	Иначе
		ТаблицаПлатежей = Платежи;
	КонецЕсли;
	
	ДополнитьПлатежиПредставлениями(ТаблицаПлатежей);
	
	ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоОтчета);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
		
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  = 
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных на счетах страховых взносов'");
	СведенияОРасчете.ТаблицаПлатежей        = ТаблицаПлатежей;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(ТаблицаПлатежей);
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ТребуетсяУведомление   = ПлательщикЕНП И ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления)
		И ЗначениеЗаполнено(ТаблицаРасчета) И Не ТолькоТравматизм;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаИмущественныхНалогов(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	Правило                     = ПараметрыЗадачи.ПравилоУплаты;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.Срок);
	
	СведенияОРасчете.КэшируемыеПараметры.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	
	ИмяЗадачи     = ПараметрыЗадачи.ИдентификаторЗадачи;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	ВидНалога     = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, КонецПериода);
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	// Бывают случаи, когда порядок уплаты налога зависит от вида налоговой базы.
	// Пример: российская организация уплачивает налог на имущество
	// и по среднегодовой, и по кадастровой стоимости.
	// В этом случае при уплате налога за год сумму налога по среднегодовой стоимости сообщаем в декларации,
	// а сумму по кадастровой стоимости - в уведомлении об исчисленной сумме налога на имущество.
	// При этом сумма налога к уплате - это итог этих двух сумм.
	// Определяем, нужно ли отдельно получить данные о налоге исходя из рахных налоговых баз. Для этого определим:
	// - необходимость подачи декларации за период (по наличию правила отчета) - по имуществу декларация
	//   подается только за год
	// - наличие облагаемого имущества, которое не отражено в декларации (сумма налога по этому имуществу
	//   как раз и попадет в уведомление)
	ГруппироватьПоНалоговойБазе = Ложь;
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() И ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Тогда
		ЕстьОблагаемоеНедекларируемоеИмущество = УсловияПримененияТребованийЗаконодательства.ЕстьОблагаемоеНедекларируемоеИмущество(
			ПериодСобытия, Перечисления.Периодичность.Год, Организация);
		ГруппироватьПоНалоговойБазе = ЕстьОблагаемоеНедекларируемоеИмущество;
		СведенияОРасчете.КэшируемыеПараметры.Вставить("ЕстьОблагаемоеНедекларируемоеИмущество", ЕстьОблагаемоеНедекларируемоеИмущество);
	КонецЕсли;
	
	ПараметрыЗадачиДляПлатежей = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗадачи);
	ПараметрыЗадачиДляПлатежей.Вставить("Правило", ПараметрыЗадачи.ПравилоУплаты);
	
	Платежи = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыИмущественныхНалогов(ПараметрыЗадачиДляПлатежей,, ГруппироватьПоНалоговойБазе);
	Уплаты = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыИмущественныхНалогов(ПараметрыЗадачиДляПлатежей, ПлательщикЕНП);
		
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(Правило, Организация, ПериодСобытия, , ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило, Организация, ПериодСобытия, ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Организация,
		ПериодСобытия,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
	// Подготовим параметры расшифровочного отчета в первую очередь, т.к. эти параметры могут понадобиться даже в случае
	// уплаты по декларации: в таком случае в задаче показываем как декларацию, так и расчет
	// (например, уплата налога на имущество за год).
	ИнформацияСправкаРасчет = "";
	СправкаРасчет = "";
	
	Если Платежи.Количество() > 0 Тогда
		
		Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
			ИнформацияСправкаРасчет = НСтр("ru = 'Расчет налога на имущество%1'");
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				НачалоГода(НачалоПериода), КонецПериода);
			СправкаРасчет = "СправкаРасчетНалогаНаИмущество";
		ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
			ИнформацияСправкаРасчет = НСтр("ru = 'Расчет транспортного налога%1'");
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				НачалоПериода, КонецПериода);
			СправкаРасчет = "СправкаРасчетТранспортногоНалога";
		ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
			ИнформацияСправкаРасчет = НСтр("ru = 'Расчет земельного налога%1'");
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				НачалоГода(НачалоПериода), КонецПериода);
			СправкаРасчет = "СправкаРасчетЗемельногоНалога";
		КонецЕсли;
		
		ИнформацияСправкаРасчет = СтрШаблон(ИнформацияСправкаРасчет, ПредставлениеПериода);
		
	КонецЕсли;

	СведенияОРасчете.ИнформацияРасчетСуммы  = ""; //ниже данное поясенение может быть изменено в случае уплаты по декларации	
	СведенияОРасчете.ИнформацияСправкаРасчет = ИнформацияСправкаРасчет;
	СведенияОРасчете.СправкаРасчет          = СправкаРасчет;

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПараметрыОтчета = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПараметрыОтчета.Вставить("Организация",            Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",          НачалоМесяца(ПериодСобытия));
	ПараметрыОтчета.Вставить("КонецПериода",           КонецМесяца(ПериодСобытия));
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок",      Истина);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Отбор, 
		"ИФНС", 
		ВидСравненияКомпоновкиДанных.Равно, 
		ПараметрыЗадачи.РегистрацияВНалоговомОргане,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	СведенияОРасчете.ПараметрыФормыРасшифровки.Вставить("ВидРасшифровки", 2);
	СведенияОРасчете.ПараметрыФормыРасшифровки.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Истина, Ложь);
	СведенияОРасчете.ПараметрыФормыРасшифровки.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
	
	// Декларация остается только по налогу на имущество и только за год, но в зависимости от ситуации возможны различные
	// варианты отображения задач по уплате/декларации/уведомлению.
	// Поэтому сначала проверяем, требуется ли декларация (по наличию правила отчета). Если требуется, то далее применяем
	// логику, описанную ниже.
	
	// Уплата налога на имущество за 2021 год может выполняться как на основании расчета, так и по декларации - эти суммы равны.
	
	// За 2022 и позже российские организации не включают в декларацию по имуществу недвижимость, облагаемую по кадастровой стоимости.
	// Если другой недвижимости у организации нет, то декларация не подается.
	// Это значит, что возможны случаи, когда: 
	//  - сумма в декларации меньше, чем общая сумма налога к уплате
	//  - декларация совсем не требуется (отфильтруется основным условием по наличию правила отчета).
	//
	// С уплаты налона за 2023 год плательщики ЕНП используют единый помощник. Это также влияет на отображение задач.
	//
	// Итого, здесь возможны варианты:
	//  - Сумма в декларации равна общей сумме налога
	//	     Это справедливо за периоды ранее 2022 года. За последующие периоды это верно, только если отсутствуют объекты,
	//       которые не включаются в декларацию (не ЕстьОблагаемоеНедекларируемоеИмущество).
	//       В этом случае специальных действий и пояснений не требуется.
	//  - В декларации только часть суммы налога, используется единый помощник для ЕНП
	//       Это справедливо для организаций-плательщиков ЕНП начиная с уплаты (декларации) за 2023 год и далее.
	//       Здесь особенность в том, что уведомление и уплата выполняются через единый помощник, а задача по
	//       декларации применяется исключительно для формирования декларации. Поэтому нужно выбрать только сумму, которая
	//       попадает в декларацию и добавить соответствующие пояснения.
	//  - В декларации только часть суммы налога, но не используется единый помощник для ЕНП
	//       Это справедливо в остальных случаях (за 2022 год; или позже, но только если ЕНП не уплачивается).
	//       В этом случае задача по декларации выглядит одинаково с задачей уплаты. Поэтому требуется специальные пояснения
	//       про то, что в декларации только часть суммы.
	// 
	Если ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Тогда
		СведенияОРасчете.ТребуетсяДекларация = Истина; // должна отображаться ссылка на декларацию в задаче, даже если сумма уплаты отличается от суммы декларации
		СведенияОРасчетеПоДекларации = НовыйСведенияОРасчете();
		ДекларацияПодготовлена = Ложь;
		ЗаполнитьСведенияУплатаПоДекларации(ПараметрыЗадачи, СведенияОРасчетеПоДекларации, ДекларацияПодготовлена);
		Если СведенияОРасчете.КэшируемыеПараметры.Свойство("ЕстьОблагаемоеНедекларируемоеИмущество") Тогда
			ЕстьОблагаемоеНедекларируемоеИмущество = СведенияОРасчете.КэшируемыеПараметры.ЕстьОблагаемоеНедекларируемоеИмущество;
		Иначе
			ЕстьОблагаемоеНедекларируемоеИмущество = УсловияПримененияТребованийЗаконодательства.ЕстьОблагаемоеНедекларируемоеИмущество(
				ПериодСобытия, Перечисления.Периодичность.Год, Организация);
			СведенияОРасчете.КэшируемыеПараметры.Вставить("ЕстьОблагаемоеНедекларируемоеИмущество", ЕстьОблагаемоеНедекларируемоеИмущество);
		КонецЕсли;
		Если ПериодСобытия < '20220101'
			 Или Не ЕстьОблагаемоеНедекларируемоеИмущество Тогда
			// Сумма в декларации соответствует сумме налога к уплате
			Если ДекларацияПодготовлена Тогда
				ЗаполнитьЗначенияСвойств(СведенияОРасчете, СведенияОРасчетеПоДекларации,,
					"ИнформацияСправкаРасчет,
					|СправкаРасчет,
					|ПараметрыФормыРасшифровки");
				Возврат;
			КонецЕсли;
			СведенияОРасчете.ОписаниеДействияРасчет = СведенияОРасчетеПоДекларации.ОписаниеДействияРасчет;
			СведенияОРасчете.ИнформацияРасчетСуммы =
				НСтр("ru = 'Сумма платежа определена по данным расчета налога, потому что декларация еще не сформирована'");
		ИначеЕсли ПериодСобытия >= '20230101' И ПлательщикЕНП Тогда
			// Есть объекты, по которым заполняется декларация - это одна отдельная задача.
			// Есть другие объекты, сумма налога по которым отражается в уведомлении. Эта сумма попадает в единый помощник
			// в задачу по уведомлению.
			// Также есть задача единого помощника по уплате - туда попадает вся сумма налога. 
			// Поэтому вид задачи и пояснений разный в зависимости от действия.
			Если ПараметрыЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
				// Отображаем кнопку создания декларации или ссылку на созданную декларацию
				СведенияОРасчете.ОписаниеДействияРасчет = СведенияОРасчетеПоДекларации.ОписаниеДействияРасчет;
				СведенияОРасчете.ИнформацияРасчетСуммы = 
					НСтр("ru = 'В декларацию включается только часть недвижимости, облагаемая по среднегодовой стоимости.'");
				Если ДекларацияПодготовлена Тогда
					ЗаполнитьЗначенияСвойств(СведенияОРасчете, СведенияОРасчетеПоДекларации, "Декларация, ДатаДекларации, ДекларацияНаименование");
				КонецЕсли;
			ИначеЕсли ПараметрыЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
				// Только поясняем, почему сумма именно такая
				СведенияОРасчете.ИнформацияРасчетСуммы = 
					НСтр("ru = 'В уведомление включается только часть суммы налога, рассчитанная исходя из кадастровой стоимости.'");
			Иначе // уплата
				СведенияОРасчете.ИнформацияРасчетСуммы =
					НСтр("ru = 'Сумма платежа определена по данным расчета налога: суммарно по среднегодовой и по кадастровой стоимости'");
			КонецЕсли;
		Иначе
			// Есть облагаемые объекты, которые не включаются в декларацию, поэтому платим по расчету.
			// Но информацию о декларации и кнопку создания декларации оставляем, т.к. задачи уплаты/декларации/уведомления
			// выглядят одинаково: в каждой из них можно выполнить все 3 действия.
			СведенияОРасчете.ОписаниеДействияРасчет = СведенияОРасчетеПоДекларации.ОписаниеДействияРасчет;
			Если ДекларацияПодготовлена Тогда
				ЗаполнитьЗначенияСвойств(СведенияОРасчете, СведенияОРасчетеПоДекларации, "Декларация, ДатаДекларации, ДекларацияНаименование");
				СведенияОРасчете.ИнформацияРасчетСуммы = 
					СтрЗаменить(НСтр("ru = 'Сумма платежа определена по данным расчета налога: суммарно по среднегодовой и по кадастровой стоимости.
						|В декларацию включается только часть недвижимости, облагаемая по среднегодовой стоимости.'"), Символы.ПС, " ");
			Иначе
				СведенияОРасчете.ИнформацияРасчетСуммы =
					НСтр("ru = 'Сумма платежа определена по данным расчета налога: суммарно по среднегодовой и по кадастровой стоимости'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
			
	// Для уплаты имущественных налогов таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для Каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.СуммаУведомления       = Платеж.СуммаУведомления;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
		Если ЗначениеЗаполнено(Платеж.Налог) Тогда
			Расчет.Налог = Платеж.Налог;
		Иначе
			Расчет.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		КонецЕсли;
		Расчет.КодНалоговогоОргана         = Платеж.КодНалоговогоОргана;
		Расчет.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, "", Расчет.КодНалоговогоОргана);
		Расчет.ИспользоватьПомощникДляРасчета = Истина;
	КонецЦикла;
	
	// Оформим описание раздела "Уплата"
	Если ПлательщикЕНП Тогда
		ТаблицаПлатежей = Уплаты;
	Иначе
		ТаблицаПлатежей = Платежи;
	КонецЕсли;
	
	ДополнитьПлатежиПредставлениями(ТаблицаПлатежей);
	
	Если ТаблицаПлатежей.Количество() > 1 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	ИначеЕсли ТаблицаПлатежей.Количество() = 1 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Уплата не требуется'");
	КонецЕсли;
	
	// Оформим описание раздела "Уведомление"
	Если ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления) Тогда
		ИнформацияУведомление = ПомощникиПоУплатеНалоговИВзносов.ТекстБлокаУведомления(ПараметрыЗадачи.Срок);
		Если ТаблицаРасчета.Количество() = 0 Или ТаблицаРасчета.Итог("ЗначениеПоказателя") = 0 Тогда
			ИнформацияУведомление  = НСтр("ru = 'Нет сумм налога к уплате. Уведомление не требуется.'");
		КонецЕсли;
	Иначе
		ИнформацияУведомление = НСтр("ru = 'При отправке декларации формировать уведомление по исчисленным налогам не нужно,
											|но для корректного ведения расчетов по налогам нужно отразить их на едином налоговом счете.'");
		Если ТаблицаРасчета.Количество() = 0 Или ТаблицаРасчета.Итог("ЗначениеПоказателя") = 0 Тогда
			ИнформацияУведомление  = НСтр("ru = 'Нет сумм налога к уплате. Отражать в ЕНС не требуется.'");
		КонецЕсли;
	КонецЕсли;
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях.
	ПериодичностьПоКлассификатору =
		ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(Правило.Периодичность);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПараметрыЗадачи.Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	// Определим срок уплаты налога
	СрокУплатыНалога = '00010101';
	Действие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗадачи, "Действие");
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		СрокУплатыНалога = ПараметрыЗадачи.Срок;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СрокУплатыНалога) Тогда
		Если ЗначениеЗаполнено(ВидНалога) Тогда
			ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
				Организация,
				ВидНалога,
				КонецПериода,
				Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
			ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
			Если ПорядокУплаты <> Неопределено Тогда
				СрокУплатыНалога = ПорядокУплаты.Срок;
			КонецЕсли;
		Иначе
			ВидыНалогов  = РасчетыСБюджетом.ВидыНалоговПоКодуЗадачи(ИмяЗадачи, ПараметрыЗадачи.Организация, КонецПериода);
			Для Каждого ВидНалога Из ВидыНалогов Цикл
				ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
					ПараметрыЗадачи.Организация,
					ВидНалога,
					КонецПериода,
					Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
				ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
				Если ПорядокУплаты <> Неопределено Тогда
					СрокУплатыНалога = Макс(СрокУплатыНалога, ПорядокУплаты.Срок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.РасчетПоДаннымЗакрытияМесяца = Истина;
	СведенияОРасчете.ИнформацияНетДанныхДляРасчета = НСтр("ru = 'Нет налога к уплате'");
	СведенияОРасчете.ТаблицаПлатежей        = ТаблицаПлатежей;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = КБК;
	СведенияОРасчете.ИнформацияУведомление  = ИнформацияУведомление;
	СведенияОРасчете.СрокУплатыНалога       = СрокУплатыНалога;
	СведенияОРасчете.УплатаПоМестуПостановкиНаУчет = Истина;
	СведенияОРасчете.ЕстьОплата = ЕстьОплата(ТаблицаПлатежей);
	// Если нет налога к уплате и нет платежных документов, то не будут выведены кнопки уплаты налога
	СведенияОРасчете.ТребуетсяУплата        = СведенияОРасчете.ЕстьОплата
		Или ТаблицаПлатежей.Итог("Сумма") > 0;
	СведенияОРасчете.ТребуетсяУведомление   = ПлательщикЕНП И ЗначениеЗаполнено(ТаблицаРасчета) И ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления);
	СведенияОРасчете.РасчетПоДаннымЗакрытияМесяца = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаТорговогоСбора(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	Правило       = ПараметрыЗадачи.ПравилоУплаты;
	Срок          = ПараметрыЗадачи.Срок;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Описание      = ПараметрыЗадачи.Описание;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	ВидНалога     = Перечисления.ВидыНалогов.ТорговыйСбор;
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, Срок);
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(Правило.Периодичность);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	СуммаТорговогоСбора = ТорговыйСбор.СуммаТорговогоСбора(Организация, НачалоПериода, ПериодСобытия);
	
	СрокУплатыНалога = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Организация, Правило, ПериодСобытия);
	
	// Для торгового сбора сумма к уплате разбивается по торговым точкам.
	СуммаТорговогоСбора.Свернуть("ТорговаяТочка, КодНалоговогоОргана, ОКАТО", "Сумма");
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для каждого СтрокаСбора Из СуммаТорговогоСбора Цикл
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(СтрокаСбора.ОКАТО, ПериодСобытия);
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя      = СтрокаСбора.ТорговаяТочка;
		Расчет.ЗначениеПоказателя          = СтрокаСбора.Сумма;
		Расчет.СуммаУведомления            = СтрокаСбора.Сумма;
		Расчет.ОКТМО                       = СтрокаСбора.ОКАТО;
		Расчет.Налог                       = Налог;
		Расчет.КодНалоговогоОргана         = СтрокаСбора.КодНалоговогоОргана;
		Расчет.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, "", Расчет.КодНалоговогоОргана);
		Расчет.СрокУплаты                  = СрокУплатыНалога;
	КонецЦикла;
	
	// Получаем таблицу платежей
	СуммаТорговогоСбора.Свернуть("КодНалоговогоОргана, ОКАТО", "Сумма");
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	Для каждого СтрокаСбора Из СуммаТорговогоСбора Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, СтрокаСбора);
		Платеж.КБК          = КБК;
		Платеж.Налог        = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		Платеж.Наименование = Строка(Платеж.Налог);
	КонецЦикла;
	
	Если ПлательщикЕНП Тогда
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
		
		РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
				Срок);
		
		Если Платежи.Количество() > 0 Тогда
			ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
		КонецЕсли;
		
		Для Каждого Платеж Из Платежи Цикл
			Если Не Платеж.Оплачено Тогда
				ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
			КонецЕсли;
		КонецЦикла;
		
		Если Платежи.Количество() > 0 Тогда
			Платежи.Свернуть("Аванс, ВидНалоговогоОбязательства, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование, ПлатежноеПоручение, Оплачено", "Сумма, СуммаОплачено");
			ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
		КонецЕсли;
		
	ИначеЕсли Платежи.Количество() > 0 Тогда
		ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	УдалитьСтрокиБезПлатежей(Платежи);
	ДополнитьПлатежиПредставлениями(Платежи);
	
	Если Платежи.Количество() > 1 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, Ложь, ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
		
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных регистра ""Параметры торговых точек""'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = КБК;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.СрокУплатыНалога       = СрокУплатыНалога;
	СведенияОРасчете.ТребуетсяУведомление   = ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПодготовкаОтчета(ПараметрыЗадачи, СведенияОРасчете)
	
	ОписаниеДействияДекларация = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПараметрыЗадачи.ПравилоОтчета,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
	Если ОписаниеДействияДекларация = Неопределено Тогда
		СведенияОРасчете.РасчетСуммыВыполнен      = Истина; // Чтобы не показывать кнопку расчета
		СведенияОРасчете.ДопИнформацияРасчетСуммы = НСтр("ru = 'Подготовка отчета не автоматизирована'");
		СведенияОРасчете.ТребуетсяУплата          = Ложь;
		СведенияОРасчете.ИнформацияУплатаНалога   = НСтр("ru = 'Уплата не требуется'");
		СведенияОРасчете.ТребуетсяУведомление     = Ложь;
		СведенияОРасчете.ИнформацияУведомление    = НСтр("ru = 'Нет сумм налога к уплате. Уведомление не требуется.'");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СведенияОРасчете.ОписаниеДействияРасчет, ОписаниеДействияДекларация);
	СведенияОРасчете.ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Сформировать отчет'");
	Если ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ") Тогда
		СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
		СведенияОРасчете.УплатаПоДекларации     = Истина;
		СведенияОРасчете.Декларация             = ОписаниеДействияДекларация.ПараметрыФормы.Ключ;
		СведенияОРасчете.ДекларацияНаименование = ПредставлениеДекларации(ОписаниеДействияДекларация.ПараметрыФормы.Ключ);
	КонецЕсли;
	
	СведенияОРасчете.УплатаПоДекларации     = Истина;
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "БухгалтерскаяОтчетность" Тогда
		
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде.'");
			
	ИначеЕсли ПараметрыЗадачи.ИдентификаторЗадачи = "СведенияОСреднесписочнойЧисленности" Тогда 
		
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде.
			|Другой способ - это распечатать 2 экземпляра. На каждом экземпляре укажите дату,
			|подпишите отчет и отнесите в свою налоговую инспекцию.'");
		
	КонецЕсли;
		
	СведенияОРасчете.ИнформацияУплатаНалога = НСтр("ru = 'Уплата не требуется'");
	СведенияОРасчете.ТребуетсяУплата        = Ложь;
	СведенияОРасчете.ИнформацияУведомление  = НСтр("ru = 'Нет сумм налога к уплате. Уведомление не требуется.'");
	СведенияОРасчете.ТребуетсяУведомление   = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПодготовкаУведомления(ПараметрыЗадачи, СведенияОРасчете)
	
	Правило = ПараметрыЗадачи.ПравилоУведомления;
	
	Если Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадачи = Правило.Владелец.Код;
	
	Если ИдентификаторЗадачи = "НДФЛ_Агент_Уведомление" Тогда
		ЗаполнитьСведенияУведомлениеНДФЛ(ПараметрыЗадачи, СведенияОРасчете);
	Иначе
		СведенияОРасчете.ИнформацияУведомление  = ПомощникиПоУплатеНалоговИВзносов.ТекстБлокаУведомления(ПараметрыЗадачи.Срок);
		СведенияОРасчете.ТребуетсяУведомление   = Истина;
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.УплатаПоДекларации     = Ложь;
	СведенияОРасчете.ИнформацияУплатаНалога = НСтр("ru = 'Уплата не требуется'");
	СведенияОРасчете.ТребуетсяУплата        = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаПоДекларации(ПараметрыЗадачи, СведенияОРасчете, ДекларацияПодготовлена = Ложь)
	
	ЗаполнитьСведенияУплатаНалога(ПараметрыЗадачи, СведенияОРасчете);
	
	СведенияОРасчете.УплатаПоДекларации = Истина;
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "НалогНаПрибыль" 
		ИЛИ ПараметрыЗадачи.ИдентификаторЗадачи = "НДФЛ_Предприниматель" Тогда
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде.
			|Другой способ - это распечатать 2 экземпляра. На каждом экземпляре укажите дату,
			|подпишите отчет и отнесите в свою налоговую инспекцию.'");
		
	КонецЕсли;
	
	ОписаниеДействияДекларация = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПараметрыЗадачи.ПравилоОтчета,
		ПараметрыЗадачи.ПериодОтчета,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
	Если ОписаниеДействияДекларация <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СведенияОРасчете.ОписаниеДействияРасчет, ОписаниеДействияДекларация);
		СведенияОРасчете.ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Сформировать декларацию'");
		ДекларацияПодготовлена = ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ");
	КонецЕсли;
		
	Если Не ДекларацияПодготовлена Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "НалогНаПрибыль" Тогда
		// Для налога на прибыль ищем декларацию по головной организации - она так же включает начисленные суммы налога по обособленным подразделениям
		РегистрацияВНалоговомОрганеДекларации = Справочники.Организации.РегистрацияВНалоговомОргане(ПараметрыЗадачи.Организация, КонецМесяца(ПараметрыЗадачи.ПериодОтчета));
	Иначе
		РегистрацияВНалоговомОрганеДекларации = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
		ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.Организация,
		РегистрацияВНалоговомОрганеДекларации,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.Срок,
		СведенияОРасчете.ПоказательПериода);
		
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	Если ДанныеДекларации.Свойство("СуммаНДСПоДекларации") Тогда
		// Платеж по декларации НДС
		// Сумма по декларации
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = НСтр("ru = 'Сумма налога'");
		Расчет.ЗначениеПоказателя     = ДанныеДекларации.СуммаНДСПоДекларации;
		// Сумма платежа
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя      = ПорядокРасчетаСуммыНДС(ДанныеДекларации);
		Расчет.ЗначениеПоказателя          = ДанныеДекларации.Платежи[0].Сумма;
		Расчет.СуммаУведомления            = ДанныеДекларации.Платежи[0].Сумма;
		Расчет.ОКТМО                       = ДанныеДекларации.Платежи[0].ОКАТО;
		Расчет.Налог                       = ДанныеДекларации.Платежи[0].Налог;
		Расчет.ЭтоИтоговаяСтрока           = Истина;
		Расчет.КодНалоговогоОргана         = ДанныеДекларации.Платежи[0].КодНалоговогоОргана;
		Расчет.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ПараметрыЗадачи.Организация, "", Расчет.КодНалоговогоОргана);
		Расчет.ИспользоватьПомощникДляРасчета = Истина;
	Иначе
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Расчет = ТаблицаРасчета.Добавить();
			Расчет.НаименованиеПоказателя      = Платеж.Наименование;
			Расчет.ЗначениеПоказателя          = Платеж.Сумма;
			Расчет.ОКТМО                       = Платеж.ОКАТО;
			Расчет.Налог                       = Платеж.Налог;
			Расчет.КодНалоговогоОргана         = Платеж.КодНалоговогоОргана;
			Расчет.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ПараметрыЗадачи.Организация, "", Расчет.КодНалоговогоОргана);
			Расчет.ИспользоватьПомощникДляРасчета = Истина;
		КонецЦикла;
	КонецЕсли;
	
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПараметрыЗадачи.ПериодСобытия);
	ИмяЗадачи    = ПараметрыЗадачи.ИдентификаторЗадачи;
	ВидНалога    = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, ПараметрыЗадачи.Организация, КонецПериода);
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.Срок);
		
	Если ПлательщикЕНП Тогда
		
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыЗадачи.Организация);
		
		РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
				КонецПериода);
		
		Если ДанныеДекларации.Уплаты.Количество() > 0 Тогда
			
			КолонкаИсключение = "";
			Для Каждого Платеж Из ДанныеДекларации.Уплаты Цикл
				Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					КолонкаИсключение = "Наименование";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Платеж Из ДанныеДекларации.Уплаты Цикл
				Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
				Иначе
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа, , КолонкаИсключение);
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоСтрок = ДанныеДекларации.Уплаты.Количество();
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Платеж = ДанныеДекларации.Уплаты[КоличествоСтрок - НомерСтроки];
				Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					ДанныеДекларации.Уплаты.Удалить(Платеж);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьПлатежиПредставлениями(ДанныеДекларации.Уплаты);
	
	// Определим срок уплаты налога
	СрокУплатыНалога = '00010101';
	Действие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗадачи, "Действие");
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		СрокУплатыНалога = ПараметрыЗадачи.Срок;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СрокУплатыНалога) Тогда
		Если ЗначениеЗаполнено(ВидНалога) Тогда
			ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
				ПараметрыЗадачи.Организация,
				ВидНалога,
				КонецПериода,
				Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
			ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
			Если ПорядокУплаты <> Неопределено Тогда
				Если ТипЗнч(ПорядокУплаты) = Тип("Структура") Тогда
					СрокУплатыНалога = ПорядокУплаты.Срок;
				Иначе
					Для Каждого СтрокаТаблицы Из ПорядокУплаты Цикл
						Если НачалоМесяца(СтрокаТаблицы.Срок) = НачалоМесяца(ПараметрыЗадачи.Срок) Тогда
							СрокУплатыНалога = СтрокаТаблицы.Срок;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВидыНалогов  = РасчетыСБюджетом.ВидыНалоговПоКодуЗадачи(ИмяЗадачи, ПараметрыЗадачи.Организация, КонецПериода);
			Для Каждого ВидНалога Из ВидыНалогов Цикл
				ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
					ПараметрыЗадачи.Организация,
					ВидНалога,
					КонецПериода,
					Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
				ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
				Если ПорядокУплаты <> Неопределено Тогда
					Если ТипЗнч(ПорядокУплаты) = Тип("Структура") Тогда
						СрокУплатыНалога = Макс(СрокУплатыНалога, ПорядокУплаты.Срок);
					Иначе
						Для Каждого СтрокаТаблицы Из ПорядокУплаты Цикл
							Если НачалоМесяца(СтрокаТаблицы.Срок) = НачалоМесяца(ПараметрыЗадачи.Срок) Тогда
								СрокУплатыНалога = Макс(СрокУплатыНалога, СтрокаТаблицы.Срок);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоОтчета);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, , ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, ПараметрыЗадачи.РегистрацияВНалоговомОргане));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
	СведенияОРасчете.РасчетСуммыВыполнен = Истина;
	СведенияОРасчете.Декларация             = ДанныеДекларации.Ссылка;
	СведенияОРасчете.ДекларацияНаименование = ПредставлениеДекларации(ДанныеДекларации.Ссылка);
	СведенияОРасчете.ТаблицаПлатежей        = ДанныеДекларации.Уплаты;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ДатаДекларации         = ДанныеДекларации.ДатаПодписи;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.СрокУплатыНалога       = СрокУплатыНалога;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(ДанныеДекларации.Уплаты);
	СведенияОРасчете.КодНалоговогоОргана    = ДанныеДекларации.КодНалоговогоОргана;
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "НалогНаИмущество" 
		 ИЛИ ПараметрыЗадачи.ИдентификаторЗадачи = "ТранспортныйНалог" 
		 ИЛИ ПараметрыЗадачи.ИдентификаторЗадачи = "ЗемельныйНалог" Тогда

		СведенияОРасчете.УплатаПоМестуПостановкиНаУчет = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСведенияНетСведений(ПараметрыЗадачи, СведенияОРасчете)
	
	ЗаполнитьСведенияУплатаНалога(ПараметрыЗадачи, СведенияОРасчете);
	
	СведенияОРасчете.ИнформацияРасчетСуммы = "";
	
	СведенияОРасчете.РасчетСуммыВыполнен = Истина; // Не предоставляем пользователю инструменты расчета суммы
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаНалога(ПараметрыЗадачи, СведенияОРасчете)
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(
		ПараметрыЗадачи.ИдентификаторЗадачи,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
	
	СведенияОРасчете.Налог              = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	СведенияОРасчете.КБК                = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(СведенияОРасчете.Налог, , ПараметрыЗадачи.ПериодСобытия);
	СведенияОРасчете.ПоказательПериода  = ВыполнениеЗадачБухгалтера.ПоказательПериодаПлатежаПоДекларации(
		ПараметрыЗадачи.ПравилоУплаты,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.Срок);
	
	ДокументыУплаты = ДокументыУплатыНалога(ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, ПараметрыЗадачи, ВидНалога);
	
	ТаблицаПлатежей = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	ТаблицаПлатежей.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	ТаблицаПлатежей.Колонки.Добавить("Состояние",          Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	ТаблицаПлатежей.Колонки.Добавить("СуммаОплачено",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаПлатежей.Колонки.Добавить("Оплачено",           Новый ОписаниеТипов("Булево"));
	ТаблицаПлатежей.Колонки.Добавить("ПредставлениеПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого ДокументУплаты Из ДокументыУплаты Цикл
		Платеж = ТаблицаПлатежей.Добавить();
		Платеж.Организация = ПараметрыЗадачи.Организация;
		Платеж.Период = ПараметрыЗадачи.ПериодСобытия;
		Платеж.КБК = СведенияОРасчете.КБК;
		Платеж.Сумма = ДокументУплаты.Сумма;
		Платеж.Наименование = Строка(СведенияОРасчете.Налог);
		Платеж.Налог = СведенияОРасчете.Налог;
		Платеж.ВидНалоговогоОбязательства = ДокументУплаты.ВидНалоговогоОбязательства;
		Платеж.НалоговыйПериод = ДокументУплаты.ПоказательПериода;
		
		Платеж.ПлатежноеПоручение = ДокументУплаты.Ссылка;
		Платеж.Состояние = ДокументУплаты.Состояние;
		Платеж.СуммаОплачено = ДокументУплаты.Сумма;
		Платеж.Оплачено = ДокументУплаты.Оплачено;
		Платеж.ПредставлениеПлатежногоПоручения = ДокументУплаты.ПредставлениеДокумента;
		Платеж.СуммаПлатежногоПоручения = ДокументУплаты.Сумма;
	КонецЦикла;
	
	СведенияОРасчете.ТаблицаПлатежей      = ТаблицаПлатежей;
	СведенияОРасчете.ЕстьОплата           = ЕстьОплата(ТаблицаПлатежей);
	СведенияОРасчете.ТребуетсяУведомление = ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаНалогаНаПрофессиональныйДоход(ПараметрыЗадачи, СведенияОРасчете)
	
	ЗаполнитьСведенияУплатаНалога(ПараметрыЗадачи, СведенияОРасчете);
	
	СведенияОРасчете.ТребуетсяРасчет = Ложь;
	СведенияОРасчете.РасчетСуммыВыполнен = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма налога исчисляется налоговым органом.
			|Налоговый орган уведомляет налогоплательщика о сумме налога, подлежащей уплате по итогам налогового периода.'");
	
КонецПроцедуры

Функция ДокументыУплатыНалога(Организация, Период, ПараметрыЗадачи, ВидНалога)
	
	// Подготовим таблицу платежей.
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ПараметрыЗадачи.ИдентификаторЗадачи);
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПараметрыЗадачи.Периодичность, Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПараметрыЗадачи.Периодичность, Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

Процедура ЗаполнитьСведенияУведомлениеНДФЛ(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	Правило                     = ПараметрыЗадачи.ПравилоУведомления;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	ПолноеИмяПравилаУплаты = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУплаты);
	
	// Правило уведомления может оказаться пустым, если уведомление по НДФЛ не подается.
	// При этом уплата налога за тринадцатый период всё равно требуется (например, для АУСН).
	ТринадцатыйПериод = ВыполнениеЗадачБухгалтера.ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравила)
		Или ВыполнениеЗадачБухгалтера.ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравилаУплаты);
	ПериодКонецМесяца = ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравила)
		Или ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравилаУплаты);
	
	ТаблицаНДФЛ = УчетЗарплаты.УдержанныйНДФЛЗаПериод(Организация, ПериодСобытия, ТринадцатыйПериод Или ПериодКонецМесяца);
	
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	ТаблицаРасчета = НовыйТаблицаРасчета();
	
	КодыРегистраций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "РегистрацияВНалоговомОргане", Истина),
		"Код");
		
	ПодробноеОписаниеПериода = ПериодСобытия >= УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ();
		
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, СтрокаТаблицы);
		Платеж.КодНалоговогоОргана = КодыРегистраций[СтрокаТаблицы.РегистрацияВНалоговомОргане];
		Платеж.Организация = Организация;
		
		Расчет = ТаблицаРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(Расчет, Платеж);
		ЗаполнитьЗначенияСвойств(Расчет, СтрокаТаблицы);
		Расчет.НаименованиеПоказателя = СтрЗаменить(Строка(Платеж.Налог), НСтр("ru = 'исчисленный'"), НСтр("ru = 'удержанный'"));
		Если ПодробноеОписаниеПериода Тогда
			ПредыдущийПериод = День(СтрокаТаблицы.ИсходныйСрокУплаты) < 28;
			ПоследнийПериод = Ложь;
			Если ПредыдущийПериод Тогда
				ПериодЗадачи = ДобавитьМесяц(СтрокаТаблицы.ИсходныйСрокУплаты, -1);
			Иначе
				ПериодЗадачи = СтрокаТаблицы.ИсходныйСрокУплаты;
				ПоследнийПериод = День(СтрокаТаблицы.ИсходныйСрокУплаты) <> 28
					И КонецМесяца(СтрокаТаблицы.ИсходныйСрокУплаты) = КонецГода(СтрокаТаблицы.ИсходныйСрокУплаты);
			КонецЕсли;
			ОписаниеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодЗадачи), КонецМесяца(ПериодЗадачи));
			ПериодВРодительномПадеже = ПолучитьСклоненияСтроки(ОписаниеПериода, ,"ПД=Родительный")[0];
			ОписаниеПериода = ВРег(Лев(ПериодВРодительномПадеже,1)) + Сред(ПериодВРодительномПадеже,2);
			Если Не ПредыдущийПериод И Не ПоследнийПериод Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'с 1 по 22 %1'"), ОписаниеПериода);
				Расчет.НачалоПериода = НачалоМесяца(ПериодЗадачи);
				Расчет.КонецПериода = Дата(Год(ПериодСобытия), Месяц(ПериодСобытия), 22);
			Иначе
				ПредставлениеПериода = СтрШаблон("с 23 по %1 %2", День(КонецМесяца(ПериодЗадачи)), ОписаниеПериода);
				Расчет.НачалоПериода = Дата(Год(ПериодЗадачи), Месяц(ПериодЗадачи), 23);
				Расчет.КонецПериода = НачалоДня(КонецМесяца(ПериодСобытия));
			КонецЕсли;
			Расчет.ПредставлениеПериода = ПредставлениеПериода;
		Иначе
			Расчет.ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за %1'"), Формат(СтрокаТаблицы.ИсходныйСрокУплаты, "ДФ='MMMM yyyy'"));
			Если ТринадцатыйПериод Тогда
				Расчет.НачалоПериода = Дата(Год(ПериодСобытия), Месяц(ПериодСобытия), 23);
			Иначе
				Расчет.НачалоПериода = НачалоМесяца(ПериодСобытия);
			КонецЕсли;
			Расчет.КонецПериода = НачалоДня(КонецМесяца(ПериодСобытия));
		КонецЕсли;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.СуммаУведомления       = Расчет.ЗначениеПоказателя;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
		
		Расчет.ИспользоватьПомощникДляРасчета = Ложь;
		
	КонецЦикла;
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУведомления);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		,
		ПериодКонецМесяца);
		
	ИсключитьПромежуточныеУведомленияНДФЛ(Уведомления);
	ИсключитьУведомленияНДФЛПоПериоду(Уведомления, ТринадцатыйПериод);
	Если Не ТринадцатыйПериод И Не ПериодКонецМесяца Тогда
		ИсключитьПромежуточноеУведомленияНДФЛПоПериоду(Уведомления, ПериодСобытия);
	КонецЕсли;
		
	СведенияОРасчете.РасчетСуммыВыполнен    = ТаблицаНДФЛ.Количество() > 0;
	СведенияОРасчете.ИнформацияРасчетСуммы  = НСтр("ru = 'Сумма платежа рассчитывается на основании данных об удержанном НДФЛ'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	СведенияОРасчете.ЕстьОплата             = Ложь;
	СведенияОРасчете.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	СведенияОРасчете.ИнформацияУведомление  = ?(ЗначениеЗаполнено(ТаблицаРасчета),
		ПомощникиПоУплатеНалоговИВзносов.ТекстБлокаУведомления(ПараметрыЗадачи.Срок),
		НСтр("ru = 'Нет сумм налога к уплате. Уведомление не требуется.'"));
	СведенияОРасчете.ТребуетсяУведомление   = ЗначениеЗаполнено(ТаблицаРасчета);
	
	ИмяДокумента  = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	// Убедимся, что выполнена регламентная операция начисления взносов.
	ДокументЗарплаты    = Неопределено;
	НесколькоДокументов = Ложь;
	
	Если Не СведенияОРасчете.РасчетСуммыВыполнен Тогда
		// Операция не выполнена.
		// Предложим выполнить регламентную операцию.
		ОписаниеДействияРасчет = СведенияОРасчете.ОписаниеДействияРасчет;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Организация",       Организация);
		Отбор.Вставить("МесяцНачисления",   НачалоМесяца(ПериодСобытия));
		Отбор.Вставить("ПериодРегистрации", НачалоМесяца(ПериодСобытия));
		
		Если ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
			// Откроем форму обработки загрузки.
			ОписаниеДействияРасчет.ИмяФормы       = "Обработка.ЗагрузкаДанныхИзЗУП.Форма";
			ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
			ОписаниеДействияРасчет.Наименование   = НСтр("ru = 'Загрузить данные о зарплате и взносах'");
		Иначе
			
			Если ИмяДокумента = "НачислениеЗарплаты" Тогда
				ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Начислить зарплату и взносы'");
			ИначеЕсли ИмяДокумента = "РегламентнаяОперация" Тогда
				ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Провести расчет взносов'");
			Иначе
				ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Ввести данные о зарплате и взносах'");
			КонецЕсли;
			
			// Откроем форму документа или списка (если документов несколько).
			Если НесколькоДокументов Или ИмяДокумента = "РегламентнаяОперация" Тогда
				ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаСписка";
				ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
			ИначеЕсли ЗначениеЗаполнено(ДокументЗарплаты) Тогда
				ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
				ОписаниеДействияРасчет.ПараметрыФормы = Новый Структура("Ключ", ДокументЗарплаты);
			Иначе
				// Документ НачислениеЗарплаты принимает месяц нового документа через специальный параметр формы.
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("МесяцНачисленияНовогоДокумента", НачалоМесяца(ПериодСобытия)); 
				ПараметрыФормы.Вставить("ЗначенияЗаполнения",             Отбор);
				
				ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
				ОписаниеДействияРасчет.ПараметрыФормы = ПараметрыФормы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаНДФЛ_ЕНС(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	Правило       = ПараметрыЗадачи.ПравилоУплаты;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	
	Срок = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Организация, Правило, ПериодСобытия);
	
	Если Не ЗначениеЗаполнено(Срок) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСведенияУведомлениеНДФЛ(ПараметрыЗадачи, СведенияОРасчете);
	Платежи = СведенияОРасчете.ТаблицаПлатежей;
	
	ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	
	НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
	
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, Срок);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	РеквизитыЕдиногоНалоговогоПлатежа = ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(
		ГоловнаяОрганизация, Срок);
	
	Для Каждого Платеж Из Платежи Цикл
		Если НалогиУплачиваемыеОтдельно.Найти(Платеж.Налог) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не Платеж.Оплачено Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
			Платеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Свернуть("Аванс, ВидНалоговогоОбязательства, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование, ПлатежноеПоручение, Оплачено", "Сумма, СуммаОплачено");
	ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	
	КоличествоСтрок = Платежи.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Платеж = Платежи[КоличествоСтрок - НомерСтроки];
		Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			Платежи.Удалить(Платеж);
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьПлатежиПредставлениями(Платежи);
	
	СведенияОРасчете.ЕстьОплата = ЕстьОплата(Платежи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаУСН(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Правило       = ПараметрыЗадачи.ПравилоУплаты;
	
	АктуальныеПоказателиУСН = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Организация, ПериодСобытия);
	
	ВидНалога = Обработки.ПомощникРасчетаНалогаУСН.ВидНалога(Организация, ПериодСобытия);
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	НаименованиеНалога = Строка(Налог);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	РеквизитыУплатыНалога = Обработки.ПомощникРасчетаНалогаУСН.ОписаниеРеквизитовУплатыНалога(Организация, Налог, ПериодСобытия);
	
	КодНалоговогоОргана = "";
	Если ЗначениеЗаполнено(РеквизитыУплатыНалога.РегистрацияВНалоговомОргане) Тогда
		КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУплатыНалога.РегистрацияВНалоговомОргане, "Код");
	КонецЕсли;
	
	СрокУплатыНалога = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Организация, Правило, ПериодСобытия);
	
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность"));
	
	ТаблицаРасчета = НовыйТаблицаРасчета();
	
	Расчет = ТаблицаРасчета.Добавить();
	Расчет.НаименованиеПоказателя = НаименованиеНалога;
	Если СрокУплатыНалога >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Расчет.ЗначениеПоказателя = АктуальныеПоказателиУСН.НалогДляУведомления;
	Иначе
		Расчет.ЗначениеПоказателя = АктуальныеПоказателиУСН.НалогКУплате;
	КонецЕсли;
	Расчет.СуммаУведомления              = АктуальныеПоказателиУСН.НалогДляУведомления;
	Расчет.ОКТМО                         = РеквизитыУплатыНалога.КодПоОКТМО;
	Расчет.Налог                         = Налог;
	Расчет.РегистрацияВНалоговомОргане   = РеквизитыУплатыНалога.РегистрацияВНалоговомОргане;
	Расчет.КодНалоговогоОргана           = КодНалоговогоОргана;
	Расчет.СрокУплаты                    = СрокУплатыНалога;
	Расчет.ИспользоватьПомощникДляРасчета = Истина;
	
	// Получаем таблицу платежей
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	РеквизитыЕдиногоНалоговогоПлатежа = ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(
		ГоловнаяОрганизация, СрокУплатыНалога);
	
	Платеж = Платежи.Добавить();
	ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
	Платеж.Организация = Организация;
	Платеж.Период      = ПериодСобытия;
	Если СрокУплатыНалога >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Платеж.Сумма = АктуальныеПоказателиУСН.НалогДляУведомления;
		Платеж.Аванс = 0;
	Иначе
		Платеж.Сумма = АктуальныеПоказателиУСН.НалогКУплате;
		Платеж.Аванс = АктуальныеПоказателиУСН.АвансовыеПлатежи;
	КонецЕсли;
	Платеж.КодНалоговогоОргана = КодНалоговогоОргана;
	Платеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	Платеж.НалоговыйПериод = ПоказательПериода;
	Платеж.СрокУплаты = СрокУплатыНалога;
	
	Если Платежи.Количество() > 1 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУведомления);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоОтчета);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
		
	СведенияОРасчете.РасчетСуммыВыполнен    = АктуальныеПоказателиУСН.НалогНачислен;
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных регистра ""Расчет налога, уплачиваемого при УСН""'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = РеквизитыУплатыНалога.КодБК;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.СрокУплатыНалога       = СрокУплатыНалога;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаНДФЛ_ИП(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Правило = ПараметрыЗадачи.ПравилоУплаты;
	СрокУплатыНалога = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(
		Организация, Правило, ПериодСобытия);
	
	РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, ПериодСобытия);
	КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	КодНалоговогоОргана = "";
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
	КонецЕсли;
	
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность"));
	
	АктуальныеПоказателиНДФЛ_ИП = Обработки.ПомощникЗаполнения3НДФЛ.НачальныеПоказатели(Организация, ПериодСобытия);
	
	ПараметрыВыполнения = Обработки.ПомощникЗаполнения3НДФЛ.НовыйПараметрыФормированияДокументовОплаты();
	
	ПараметрыВыполнения.СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	ПараметрыВыполнения.Период = ПериодСобытия;
	ПараметрыВыполнения.Организация = Организация;
	ПараметрыВыполнения.Правило = Правило;
	ПараметрыВыполнения.НалогИсчисленныйВсего = АктуальныеПоказателиНДФЛ_ИП.НалогИсчисленныйВсего;
	ПараметрыВыполнения.АвансовыеПлатежи = АктуальныеПоказателиНДФЛ_ИП.АвансовыеПлатежи;
	ПараметрыВыполнения.НалогКУплате = АктуальныеПоказателиНДФЛ_ИП.НалогКУплате;
	ПараметрыВыполнения.ОсвобождениеОтНалога = АктуальныеПоказателиНДФЛ_ИП.ОсвобождениеОтНалога;
	
	ТаблицаНалога = Обработки.ПомощникЗаполнения3НДФЛ.НеоплаченныеНалоги(
		ПараметрыВыполнения,
		Обработки.ПомощникЗаполнения3НДФЛ.НовыйТаблицаПлатежейНДФЛ());
	
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалога Цикл
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(СтрокаТаблицы.ВидНалога);
		НаименованиеНалога = Строка(Налог);
		
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя        = НаименованиеНалога;
		Расчет.ЗначениеПоказателя            = СтрокаТаблицы.Сумма;
		Расчет.СуммаУведомления              = СтрокаТаблицы.Сумма;
		Расчет.ОКТМО                         = КодПоОКТМО;
		Расчет.Налог                         = Налог;
		Расчет.РегистрацияВНалоговомОргане   = РегистрацияВНалоговомОргане;
		Расчет.КодНалоговогоОргана           = КодНалоговогоОргана;
		Расчет.СрокУплаты                    = СрокУплатыНалога;
		Расчет.ИспользоватьПомощникДляРасчета = Истина;
		
		Платеж = Платежи.Добавить();
		Платеж.Организация = Организация;
		Платеж.Период      = ПериодСобытия;
		Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог,, ПериодСобытия);
		Платеж.ОКАТО = КодПоОКТМО;
		Платеж.Сумма = СтрокаТаблицы.Сумма;
		Платеж.Аванс = АктуальныеПоказателиНДФЛ_ИП.АвансовыеПлатежи;
		Платеж.Наименование = НаименованиеНалога;
		Платеж.КодНалоговогоОргана = КодНалоговогоОргана;
		Платеж.Налог = Налог;
		Платеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Платеж.НалоговыйПериод = ПоказательПериода;
		Платеж.СрокУплаты = СрокУплатыНалога;
		
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУведомления);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоОтчета);
	МассивПравилУведомлений.Добавить(ПараметрыЗадачи.ПравилоУплаты);
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
		
	СведенияОРасчете.РасчетСуммыВыполнен    = АктуальныеПоказателиНДФЛ_ИП.НалогНачислен;
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных регистра ""Результат расчета регламентной операции ""Расчет НДФЛ для ИП""'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.СрокУплатыНалога       = СрокУплатыНалога;
	
КонецПроцедуры

Процедура ДополнитьСведенияОСтраховыхВзносахПросроченнымиУведомлениями(ПараметрыЗадачи, СведенияОРасчете)
	
	Если Не СведенияОРасчете.РасчетСуммыВыполнен Тогда
		Возврат;
	КонецЕсли;
	Если ПараметрыЗадачи.Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеУведомления = Новый Массив;
	Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаУведомлений) Тогда
		ТекущиеУведомления = СведенияОРасчете.ТаблицаУведомлений.ВыгрузитьКолонку("Уведомление");
	КонецЕсли;
	
	ПараметрыПроверяемойЗадачи = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗадачи);
	ПараметрыПроверяемойЗадачи.ПериодСобытия = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ПараметрыЗадачи.ПравилоУплаты.Периодичность, ДобавитьМесяц(ПараметрыПроверяемойЗадачи.ПериодСобытия, -1)));
		
	ДатаНачалаОбзора = НачалоМесяца(ДобавитьМесяц(ПараметрыЗадачи.ПериодСобытия, -3));
	ДатаОкончанияОбзора = КонецМесяца(ДобавитьМесяц(ПараметрыЗадачи.ПериодСобытия, 3));
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация = ПараметрыЗадачи.Организация;
	ОтборПравил.НачалоИнтервала = ДатаНачалаОбзора;
	ОтборПравил.КонецИнтервала = ДатаОкончанияОбзора;
	ОтборПравил.ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы();
	ОтборПравил.Правила.Добавить(ЗадачиБухгалтераКлиентСервер.КодПравилаОтчетаРасчетПоСтраховымВзносам());
	ОтборПравил.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Пока Не ЕстьЗадачаПоОтчетуЗаПериод(ПараметрыПроверяемойЗадачи, Расписание) Цикл
		
		СведенияОРасчетеПредыдущегоПериода = НовыйСведенияОРасчете();
		ЗаполнитьСведенияУплатаСтраховыхВзносов(
			ПараметрыПроверяемойЗадачи, СведенияОРасчетеПредыдущегоПериода, ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов().СтраховыеВзносы);
		
		Если ЗначениеЗаполнено(СведенияОРасчетеПредыдущегоПериода.ТаблицаУведомлений) Тогда
			// Проверим что уведомление предыдущего периода - это не текущее уведомление
			УведомленияПредыдущегоПериода = СведенияОРасчетеПредыдущегоПериода.ТаблицаУведомлений.ВыгрузитьКолонку("Уведомление");
			Для Каждого УведомлениеПредыдущегоПериода Из УведомленияПредыдущегоПериода Цикл
				Если ТекущиеУведомления.Найти(УведомлениеПредыдущегоПериода) = Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СведенияОРасчетеПредыдущегоПериода.ТаблицаРасчета.ЗаполнитьЗначения(Истина, "ЭтоНалогПрошлогоПериода");
		
		Если СведенияОРасчете.ТаблицаРасчета.Количество() = 0 Тогда
			СведенияОРасчете.ТаблицаРасчета = СведенияОРасчетеПредыдущегоПериода.ТаблицаРасчета.Скопировать();
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОРасчетеПредыдущегоПериода.ТаблицаРасчета, СведенияОРасчете.ТаблицаРасчета);
		КонецЕсли;
		
		Если СведенияОРасчете.ТаблицаПлатежей.Количество() = 0 Тогда
			СведенияОРасчете.ТаблицаПлатежей = СведенияОРасчетеПредыдущегоПериода.ТаблицаПлатежей.Скопировать();
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОРасчетеПредыдущегоПериода.ТаблицаПлатежей, СведенияОРасчете.ТаблицаПлатежей);
		КонецЕсли;
		
		ПараметрыПроверяемойЗадачи.ПериодСобытия = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			ПараметрыЗадачи.ПравилоУплаты.Периодичность, ДобавитьМесяц(ПараметрыПроверяемойЗадачи.ПериодСобытия, -1)));
			
		Если ПараметрыПроверяемойЗадачи.ПериодСобытия < ДатаНачалаОбзора Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСведенияОРасчетеНДФЛПросроченнымиУведомлениями(ПараметрыЗадачи, СведенияОРасчете, ПараметрыЗадачиЕдиногоПомощника)
	
	Если ПараметрыЗадачи.Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУведомления);
	Если ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравила)
			Или ВыполнениеЗадачБухгалтера.ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравила) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверяемойЗадачи = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗадачи);
	ПараметрыПроверяемойЗадачи.ПериодСобытия = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ПараметрыЗадачи.ПравилоУплаты.Периодичность, ДобавитьМесяц(ПараметрыПроверяемойЗадачи.ПериодСобытия, -1)));
	
	ДатаОкончанияОбзора = КонецМесяца(ДобавитьМесяц(ПараметрыЗадачи.ПериодСобытия, -3));
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация = ПараметрыЗадачи.Организация;
	ОтборПравил.НачалоИнтервала = НачалоКвартала(ПараметрыЗадачи.ПериодСобытия);
	ОтборПравил.КонецИнтервала = КонецМесяца(ПараметрыЗадачи.ПериодСобытия);
	ОтборПравил.ИмяЗадачи = "НДФЛ_Агент";
	ОтборПравил.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	Если Расписание.Количество() < 1 Тогда
		Возврат;
	КонецЕсли;

	ПодобратьПросроченныеПравилаНДФЛ(ПараметрыПроверяемойЗадачи, ПараметрыЗадачиЕдиногоПомощника, СведенияОРасчете, Расписание, ДатаОкончанияОбзора);
	
КонецПроцедуры

Процедура ДополнитьСведенияОРасчетеНДФЛПросроченнымиУведомлениямиВторойПоловиныМесяца(ПараметрыЗадачи, СведенияОРасчете, ПараметрыЗадачиЕдиногоПомощника)
	
	Если ПараметрыЗадачи.ПериодСобытия < УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ()
		Или Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУведомления);
	Если ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравила)
			Или ВыполнениеЗадачБухгалтера.ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравила) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВедущейЗадачи = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗадачи);
	
	ДатаОкончанияОбзора = КонецКвартала(ДобавитьМесяц(ПараметрыЗадачи.ПериодСобытия, -3));
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация = ПараметрыЗадачи.Организация;
	ОтборПравил.НачалоИнтервала = НачалоКвартала(ПараметрыЗадачи.ПериодСобытия);
	ОтборПравил.КонецИнтервала = КонецМесяца(ПараметрыЗадачи.ПериодСобытия);
	ОтборПравил.ИмяЗадачи = "НДФЛ_Агент_Уведомление";
	ОтборПравил.Правила.Добавить(ЗадачиБухгалтераКлиентСервер.КодПравилаНДФЛКонецМесяца());
	ОтборПравил.Действие  = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
	
	РасписаниеЗадачНДФЛ = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	Если РасписаниеЗадачНДФЛ.Количество() < 1 Тогда
		Возврат;
	КонецЕсли;
	РасписаниеЗадачНДФЛ.Сортировать("ПериодСобытия Убыв");
	
	ПроверяемаяЗадача = Неопределено;
	Для Каждого Задача Из РасписаниеЗадачНДФЛ Цикл
		Если Задача.Срок > КонецМесяца(ПараметрыЗадачи.ПериодСобытия) Тогда
			Продолжить;
		Иначе
			ПроверяемаяЗадача = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверяемаяЗадача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверяемойЗадачи = НовыеПараметрыЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыПроверяемойЗадачи, ПараметрыВедущейЗадачи);
	ЗаполнитьЗначенияСвойств(ПараметрыПроверяемойЗадачи, ПроверяемаяЗадача);
	ПараметрыПроверяемойЗадачи.ПравилоУведомления = ПроверяемаяЗадача.Правило;
	
	ПараметрыПроверяемойЗадачи.ПравилоУплаты =
		ВыполнениеЗадачБухгалтера.ПравилоУплатыПоПравилуУведомления(ПараметрыПроверяемойЗадачи.ПравилоУведомления,
			ПараметрыПроверяемойЗадачи.Организация,
			ПараметрыПроверяемойЗадачи.ПериодСобытия);
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация = ПараметрыПроверяемойЗадачи.Организация;
	ОтборПравил.НачалоИнтервала = НачалоКвартала(ПараметрыПроверяемойЗадачи.ПериодСобытия);
	ОтборПравил.КонецИнтервала = КонецГода(ПараметрыПроверяемойЗадачи.ПериодСобытия);
	ОтборПравил.ИмяЗадачи = "НДФЛ_Агент";
	ОтборПравил.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	ПодобратьПросроченныеПравилаНДФЛ(ПараметрыПроверяемойЗадачи, ПараметрыЗадачиЕдиногоПомощника, СведенияОРасчете, Расписание, ДатаОкончанияОбзора);
	
КонецПроцедуры

Процедура ПодобратьПросроченныеПравилаНДФЛ(ПараметрыПроверяемойЗадачи, ПараметрыЗадачиЕдиногоПомощника, СведенияОРасчете, Расписание, ДатаОкончанияОбзора)
	
	Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаУведомлений) Тогда
		ТекущиеУведомления = СведенияОРасчете.ТаблицаУведомлений.ВыгрузитьКолонку("Уведомление");
	Иначе
		ТекущиеУведомления = Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадачиЕдиногоПомощника) Тогда
		
		// Дополним массив текущих уведомлений теми, которые были созданы из единого помощника
		ПравилаДляУведомлений = Новый Массив;
		ПравилаДляУведомлений.Добавить(ПараметрыЗадачиЕдиногоПомощника.ПравилоУведомления);
		ПравилаДляУведомлений.Добавить(ПараметрыЗадачиЕдиногоПомощника.ПравилоУплаты);
		УведомленияПоЗадачеЕдиногоПомощника = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
			ПравилаДляУведомлений, ПараметрыЗадачиЕдиногоПомощника.Организация, ПараметрыЗадачиЕдиногоПомощника.ПериодСобытия);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекущиеУведомления, УведомленияПоЗадачеЕдиногоПомощника.ВыгрузитьКолонку("Уведомление"), Истина);
		
	КонецЕсли;
	
	Пока Не ЕстьЗадачаПоОтчетуЗаПериод(ПараметрыПроверяемойЗадачи, Расписание) Цикл
		
		ЕстьУведомлениеЗаПредыдущийПериод = Ложь;
		СведенияОРасчетеПредыдущегоПериода = НовыйСведенияОРасчете();
		ЗаполнитьСведенияУплатаНДФЛ_ЕНС(ПараметрыПроверяемойЗадачи, СведенияОРасчетеПредыдущегоПериода);
		
		Если ЗначениеЗаполнено(СведенияОРасчетеПредыдущегоПериода.ТаблицаУведомлений) Тогда
			// Проверим что уведомление предыдущего периода - это не текущее уведомление
			УведомленияПредыдущегоПериода = СведенияОРасчетеПредыдущегоПериода.ТаблицаУведомлений.ВыгрузитьКолонку("Уведомление");
			Для Каждого УведомлениеПредыдущегоПериода Из УведомленияПредыдущегоПериода Цикл
				Если ТекущиеУведомления.Найти(УведомлениеПредыдущегоПериода) = Неопределено Тогда
					ЕстьУведомлениеЗаПредыдущийПериод = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьУведомлениеЗаПредыдущийПериод Тогда
			Прервать;
		КонецЕсли;
		
		СведенияОРасчетеПредыдущегоПериода.ТаблицаРасчета.ЗаполнитьЗначения(Истина, "ЭтоНалогПрошлогоПериода");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОРасчетеПредыдущегоПериода.ТаблицаРасчета, СведенияОРасчете.ТаблицаРасчета);
		
		Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаПлатежей) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОРасчетеПредыдущегоПериода.ТаблицаПлатежей, СведенияОРасчете.ТаблицаПлатежей);
		Иначе
			СведенияОРасчете.ТаблицаПлатежей = СведенияОРасчетеПредыдущегоПериода.ТаблицаПлатежей.Скопировать();
		КонецЕсли;
		
		ПараметрыПроверяемойЗадачи.ПериодСобытия = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			ПараметрыПроверяемойЗадачи.ПравилоУплаты.Периодичность, ДобавитьМесяц(ПараметрыПроверяемойЗадачи.ПериодСобытия, -1)));
			
		Если ПараметрыПроверяемойЗадачи.ПериодСобытия < ДатаОкончанияОбзора Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаРасчета) Тогда
		СведенияОРасчете.ТаблицаРасчета.Сортировать("СрокУплаты");
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнятьУведомлениямиПоЗадачеЕдиногоПомощника(ПараметрыЗадачи, ЕстьОтдельныеУведомленияПоЗадаче)
	
	ПолучитьУведомлениеПоЗадачеЕдиногоПомощника = Истина;
	Если ЕстьОтдельныеУведомленияПоЗадаче И ЭтоПравилоНДФЛКонецМесяца(ПараметрыЗадачи) Тогда
		ПолучитьУведомлениеПоЗадачеЕдиногоПомощника = Ложь;
	КонецЕсли;
	
	Возврат ПолучитьУведомлениеПоЗадачеЕдиногоПомощника;
	
КонецФункции

Функция ЭтоПравилоНДФЛКонецМесяца(ПараметрыЗадачи)
	
	Возврат ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУведомления))
		Или ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУплаты));
	
КонецФункции

Функция ЭтоУплатаНДСИзЕАЭС(ПараметрыЗадачи)
	
	Возврат ВыполнениеЗадачБухгалтера.ЭтоПравилоУплатыНДСИзЕАЭС(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрыЗадачи.ПравилоУплаты));
	
КонецФункции
	
Процедура ЗаполнитьСведенияУплатаНДС(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация             = ПараметрыЗадачи.Организация;
	ПериодСобытия           = НачалоКвартала(ПараметрыЗадачи.ПериодСобытия);
	Правило                 = ПараметрыЗадачи.ПравилоУплаты;
	СрокУплатыНалога        = НачалоДня(ПараметрыЗадачи.Срок);
	ИспользуетсяПомощникНДС = ПомощникРасчетаНДС.ФормироватьДекларациюВПомощнике(Организация, ПериодСобытия);
	
	Если Не ЗначениеЗаполнено(СрокУплатыНалога) 
		ИЛИ НЕ ИспользуетсяПомощникНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадачиНДС = Обработки.ПомощникРасчетаНДС.НовыеПараметрыЗадачи();
	ПараметрыЗадачиНДС.Организация           = Организация;
	ПараметрыЗадачиНДС.ПериодСобытия         = ПериодСобытия;
	ПараметрыЗадачиНДС.НачалоПериода         = НачалоКвартала(ПараметрыЗадачи.ПериодСобытия);
	ПараметрыЗадачиНДС.КонецПериода          = КонецКвартала(ПараметрыЗадачи.ПериодСобытия);
	ПараметрыЗадачиНДС.Правило               = Правило;
	ПараметрыЗадачиНДС.Срок                  = СрокУплатыНалога;
	ПараметрыЗадачиНДС.СрокУплатыНалога      = СрокУплатыНалога;
	ПараметрыЗадачиНДС.ЭтоЗадачаОплаты       = Истина;
	ПараметрыЗадачиНДС.СоставРазделов.Уплата = Истина;
	
	РезультатВыполнения = Обработки.ПомощникРасчетаНДС.ПоказателиДляРасчета(ПараметрыЗадачиНДС);
	
	СуммаНДС = РезультатВыполнения.ПоказателиДляУплаты.РассчитанныйНалогКУплатеНаДату;
	
	ОКТМО = "";
	СтрокаТекущийПлатеж = РезультатВыполнения.ПоказателиДляУплаты.ТаблицаРасчет.Найти(СрокУплатыНалога, "Дата");
	Если СтрокаТекущийПлатеж <> Неопределено Тогда
		ОКТМО = СтрокаТекущийПлатеж.ОКАТО;
	КонецЕсли;
	
	ТаблицаРасчета = НовыйТаблицаРасчета();
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыЗадачи.Организация);
	РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
				КонецМесяца(ПараметрыЗадачи.ПериодСобытия));
				
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	
	Если СуммаНДС > 0 Тогда
		НоваяСтрока = ТаблицаРасчета.Добавить();
		НоваяСтрока.НаименованиеПоказателя = НСтр("ru = 'Очередной платеж'");
		НоваяСтрока.ЗначениеПоказателя = СуммаНДС;
		НоваяСтрока.Налог = Налог;
		НоваяСтрока.СрокУплаты = СрокУплатыНалога;
		НоваяСтрока.ОКТМО = ОКТМО;
		НоваяСтрока.ИспользоватьПомощникДляРасчета = Истина;
	КонецЕсли;
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Если СведенияОРасчете.ТаблицаПлатежей.Колонки.Найти("Индекс") = Неопределено Тогда
		СведенияОРасчете.ТаблицаПлатежей.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если СведенияОРасчете.ТаблицаПлатежей.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		СведенияОРасчете.ТаблицаПлатежей.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	КонецЕсли;
	Если СведенияОРасчете.ТаблицаПлатежей.Колонки.Найти("СуммаОплачено") = Неопределено Тогда
		СведенияОРасчете.ТаблицаПлатежей.Колонки.Добавить("СуммаОплачено", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если СведенияОРасчете.ТаблицаПлатежей.Колонки.Найти("Оплачено") = Неопределено Тогда
		СведенияОРасчете.ТаблицаПлатежей.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если СведенияОРасчете.ТаблицаПлатежей.Колонки.Найти("Состояние") = Неопределено Тогда
		СведенияОРасчете.ТаблицаПлатежей.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	КонецЕсли;
	
	СтрокаПлатеж = СведенияОРасчете.ТаблицаПлатежей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, РеквизитыЕдиногоНалоговогоПлатежа);
	СтрокаПлатеж.Организация = ПараметрыЗадачи.Организация;
	СтрокаПлатеж.Период = ПараметрыЗадачи.ПериодСобытия;
	СтрокаПлатеж.Сумма = СуммаНДС;
	
	Если ЗначениеЗаполнено(РезультатВыполнения.ПоказателиДляУплаты.ТаблицаНалоговыйАгент) Тогда
		СведенияОРасчете.ТаблицаНалоговыйАгентНДС = РезультатВыполнения.ПоказателиДляУплаты.ТаблицаНалоговыйАгент.Скопировать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыполнения.ПоказателиДляУплаты.ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров) Тогда
		СведенияОРасчете.ТаблицаНалоговыйАгентНДСПоОтдельнымВидамТоваров = РезультатВыполнения.ПоказателиДляУплаты.ТаблицаНалоговыйАгентПоОтдельнымВидамТоваров.Скопировать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыполнения.ПоказателиДляУплаты.ТаблицаТаможенныйСоюз) Тогда
		СведенияОРасчете.ТаблицаТаможенныйСоюзНДС = РезультатВыполнения.ПоказателиДляУплаты.ТаблицаТаможенныйСоюз.Скопировать();
	КонецЕсли;
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУплатыПоПравилуОтчета(Правило, Организация, ПериодСобытия));
	МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(Правило, Организация, ПериодСобытия));
	
	Уведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Организация,
		ПериодСобытия);
		
	СведенияОРасчете.РасчетСуммыВыполнен    = ЗначениеЗаполнено(РезультатВыполнения.ПоказателиДляУплаты.Декларация);
	СведенияОРасчете.ИнформацияРасчетСуммы  = НСтр("ru = 'Сумма платежа рассчитывается на основании данных декларации'");
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ТаблицаУведомлений     = Уведомления;
	СведенияОРасчете.ТаблицаПлатежейНДС     = РезультатВыполнения.ПоказателиДляУплаты.ТаблицаПлатежи.Скопировать();
	СведенияОРасчете.ТаблицаПлатежейНДС.ЗаполнитьЗначения(ОКТМО, "ОКАТО");
	СведенияОРасчете.ТребуетсяУведомление   = Ложь;
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		ПараметрыЗадачи.ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал());
	
	СведенияОРасчете.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	СведенияОРасчете.РасчетПоДаннымЗакрытияМесяца = Истина;

	СведенияОРасчете.Декларация = РезультатВыполнения.ПоказателиДляУплаты.Декларация;
	
КонецПроцедуры

Процедура ДобавитьИтогРасчета(СведенияОРасчете)
	
	Если ЗначениеЗаполнено(СведенияОРасчете.ТаблицаРасчета) Тогда
		ИтогРасчета = СведенияОРасчете.ТаблицаРасчета.Добавить();
		ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
		ИтогРасчета.ЗначениеПоказателя     = СведенияОРасчете.ТаблицаРасчета.Итог("ЗначениеПоказателя");
		ИтогРасчета.СуммаУведомления       = СведенияОРасчете.ТаблицаРасчета.Итог("СуммаУведомления");
		ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
		ИтогРасчета.ИспользоватьПомощникДляРасчета = СведенияОРасчете.ТаблицаРасчета.Найти(Истина, "ИспользоватьПомощникДляРасчета") <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция СтатусУплатыНалога(СведенияОРасчетеСуммы)
	
	Статус = "";
	
	Если СведенияОРасчетеСуммы.ТаблицаРасчета = Неопределено
		ИЛИ СведенияОРасчетеСуммы.ТаблицаПлатежей = Неопределено
		ИЛИ СведенияОРасчетеСуммы.ТаблицаРасчета.Количество() = 0 
		ИЛИ Не СведенияОРасчетеСуммы.ТребуетсяУплата Тогда
		
		Возврат Статус;
		
	КонецЕсли;
	
	Если СведенияОРасчетеСуммы.ТаблицаРасчета.Количество() = 1 Тогда
		ИтоговаяСтрока = СведенияОРасчетеСуммы.ТаблицаРасчета[0];
	Иначе
		ИтоговаяСтрока = СведенияОРасчетеСуммы.ТаблицаРасчета.Найти(Истина, "ЭтоИтоговаяСтрока");
	КонецЕсли;
	
	Если ИтоговаяСтрока = Неопределено Тогда
		Возврат Статус;
	КонецЕсли;
	
	НеобходимоУплатить = ИтоговаяСтрока.ЗначениеПоказателя;
	
	Уплачено = СведенияОРасчетеСуммы.ТаблицаПлатежей.Скопировать(Новый Структура("Оплачено", Истина), "СуммаОплачено").Итог("СуммаОплачено");
	
	Если Уплачено > 0 И Уплачено >= НеобходимоУплатить Тогда
		Статус = НСтр("ru='Оплачено'");
	Иначе
		Статус = ПомощникиПоУплатеНалоговИВзносов.СтатусОплатыПлатежныхПоручений(
			СведенияОРасчетеСуммы.ТаблицаПлатежей.ВыгрузитьКолонку("ПлатежноеПоручение"));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусУплатыЕдиногоНалога(СведенияОРасчетахСумм) Экспорт
	
	Статус = "";
	
	Если СведенияОРасчетахСумм.ТаблицаРасчета = Неопределено
		ИЛИ СведенияОРасчетахСумм.ТаблицаПлатежей = Неопределено
		ИЛИ СведенияОРасчетахСумм.ТаблицаРасчета.Количество() = 0 
		ИЛИ Не СведенияОРасчетахСумм.ТребуетсяУплата Тогда
		
		Возврат Статус;
		
	КонецЕсли;
	
	СуммаНалогаКУплате = 0;
	
	Для Каждого Расчет Из СведенияОРасчетахСумм.ТаблицаРасчета Цикл
		ИтогРасчета = Расчет.СведенияОРасчете.ТаблицаРасчета.Найти(Истина, "ЭтоИтоговаяСтрока");
		Если ЗначениеЗаполнено(ИтогРасчета) Тогда
			СуммаНалогаКУплате = СуммаНалогаКУплате + ИтогРасчета.ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	Уплачено = СведенияОРасчетахСумм.ТаблицаПлатежей.Скопировать(Новый Структура("Оплачено", Истина), "СуммаОплачено").Итог("СуммаОплачено");
	ЗачтеноЕНС = 0;
	
	ЗначенияКлюча = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, СведенияОРасчетахСумм.ПараметрыЗадачи);
	ЗначенияКлюча.Правило = СведенияОРасчетахСумм.ПараметрыЗадачи.ПравилоУплаты;
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		ЗачтеноЕНС = МенеджерЗаписи.СуммаЗачетаЕНС;
	КонецЕсли;
	
	Если СуммаНалогаКУплате > 0 И (Уплачено + ЗачтеноЕНС >= СуммаНалогаКУплате) Тогда
		Статус = "Оплачено";
	Иначе
		Статус = ПомощникиПоУплатеНалоговИВзносов.СтатусОплатыПлатежныхПоручений(
			СведенияОРасчетахСумм.ТаблицаПлатежей.ВыгрузитьКолонку("ПлатежноеПоручение"));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедурыИФункции

Функция НовыйСведенияОРасчете()
	
	СтруктураСведенийОРасчете = Новый Структура();
	СтруктураСведенийОРасчете.Вставить("ИдентификаторЗапроса",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	СтруктураСведенийОРасчете.Вставить("РасчетСуммыВыполнен",    Ложь);
	СтруктураСведенийОРасчете.Вставить("ЕстьОплата",             Ложь);
	СтруктураСведенийОРасчете.Вставить("УплатаПоДекларации",     Ложь);
	СтруктураСведенийОРасчете.Вставить("ТребуетсяДекларация",    Ложь); // иногда декларация подается, но общая сумма налога к уплате другая
	СтруктураСведенийОРасчете.Вставить("РасчетПоДаннымЗакрытияМесяца", Ложь);
	СтруктураСведенийОРасчете.Вставить("ИнформацияРасчетСуммы",
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных отчета'"));
	СтруктураСведенийОРасчете.Вставить("ИнформацияСправкаРасчет","");
	СтруктураСведенийОРасчете.Вставить("СправкаРасчет","");
	СтруктураСведенийОРасчете.Вставить("ПараметрыФормыРасшифровки", Новый Структура);
	СтруктураСведенийОРасчете.Вставить("ИнформацияНетДанныхДляРасчета",
		НСтр("ru = 'Нет данных для расчета'"));
	СтруктураСведенийОРасчете.Вставить("ДопИнформацияРасчетСуммы", "");
	СтруктураСведенийОРасчете.Вставить("ИнформацияУведомление", "");
	СтруктураСведенийОРасчете.Вставить("ИнформацияУплатаНалога",
		НСтр("ru = 'Подготовка платежного документа'"));
	СтруктураСведенийОРасчете.Вставить("ТаблицаПлатежей",        ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи());// см. ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи()
	СтруктураСведенийОРасчете.Вставить("ТаблицаРасчета",         НовыйТаблицаРасчета());// см. НовыйТаблицаРасчета()
	СтруктураСведенийОРасчете.Вставить("ТаблицаУведомлений",     Неопределено);
	СтруктураСведенийОРасчете.Вставить("ТаблицаПлатежейНДС",     Неопределено);
	СтруктураСведенийОРасчете.Вставить("ТаблицаНалоговыйАгентНДС", Неопределено);
	СтруктураСведенийОРасчете.Вставить("ТаблицаНалоговыйАгентНДСПоОтдельнымВидамТоваров", Неопределено);
	СтруктураСведенийОРасчете.Вставить("ТаблицаТаможенныйСоюзНДС", Неопределено);
	СтруктураСведенийОРасчете.Вставить("ФорматСумм",             "ЧЦ=15; ЧДЦ=2; ЧН=");
	СтруктураСведенийОРасчете.Вставить("ОписаниеДействияРасчет", НовыйОписаниеДействияРасчет());
	СтруктураСведенийОРасчете.Вставить("Декларация",             Документы.РегламентированныйОтчет.ПустаяСсылка());
	СтруктураСведенийОРасчете.Вставить("ДатаДекларации",         '00010101');
	СтруктураСведенийОРасчете.Вставить("ДекларацияНаименование", "");
	СтруктураСведенийОРасчете.Вставить("ПоказательПериода",      "");// Для платежного документа
	СтруктураСведенийОРасчете.Вставить("Налог",                  Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	СтруктураСведенийОРасчете.Вставить("КБК",                    "");
	СтруктураСведенийОРасчете.Вставить("КодНалоговогоОргана",    "");
	СтруктураСведенийОРасчете.Вставить("СрокУплатыНалога",      '00010101');
	СтруктураСведенийОРасчете.Вставить("ТребуетсяРасчет",        Истина);
	СтруктураСведенийОРасчете.Вставить("ТребуетсяУведомление",   Истина);
	СтруктураСведенийОРасчете.Вставить("ТребуетсяУплата",        Истина);
	СтруктураСведенийОРасчете.Вставить("УплатаПоМестуПостановкиНаУчет", Ложь);
	СтруктураСведенийОРасчете.Вставить("БаннерБлокРасчет",       Неопределено);
	СтруктураСведенийОРасчете.Вставить("БаннерБлокУплата",       Неопределено);
	СтруктураСведенийОРасчете.Вставить("КэшируемыеПараметры",    Новый Структура); // для переиспользования рассчитанных параметров
	СтруктураСведенийОРасчете.Вставить("ИнформацияБлокНалог",    "");
	СтруктураСведенийОРасчете.Вставить("ПараметрыЗадачи",        Новый Структура);
	
	Возврат СтруктураСведенийОРасчете;
	
КонецФункции

Функция НовыйТаблицаРасчета()
	
	Расчеты = Новый ТаблицаЗначений;
	
	Расчеты.Колонки.Добавить("НаименованиеПоказателя", Новый ОписаниеТипов("Строка"));
	Расчеты.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("СуммаУведомления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("ОКТМО", Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Расчеты.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Расчеты.Колонки.Добавить("КПП", Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КПП.Тип);
	Расчеты.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Расчеты.Колонки.Добавить("СрокУплаты", Новый ОписаниеТипов("Дата"));
	Расчеты.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка"));
	Расчеты.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Расчеты.Колонки.Добавить("ЭтоИтоговаяСтрока", Новый ОписаниеТипов("Булево"));
	Расчеты.Колонки.Добавить("ЭтоНалогПрошлогоПериода", Новый ОписаниеТипов("Булево"));
	Расчеты.Колонки.Добавить("ИспользоватьПомощникДляРасчета", Новый ОписаниеТипов("Булево"));
	Расчеты.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	Расчеты.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	Расчеты.Колонки.Добавить("ПредставлениеПериода", Новый ОписаниеТипов("Строка"));
	
	Возврат Расчеты;
	
КонецФункции

Функция НовыйОписаниеДействияРасчет()
	
	ОписаниеДействияРасчет = Новый Структура;
	
	ОписаниеДействияРасчет.Вставить("ИмяФормы",       "");
	ОписаниеДействияРасчет.Вставить("ПараметрыФормы", Неопределено);
	ОписаниеДействияРасчет.Вставить("Наименование",   "");
	
	Возврат ОписаниеДействияРасчет;
	
КонецФункции

Функция НовыйОписаниеБаннера()

	ОписаниеБаннера = Новый Структура;
	ОписаниеБаннера.Вставить("ИдентификаторБаннера", "");
	ОписаниеБаннера.Вставить("Сообщение", Новый ФорматированнаяСтрока(""));
	ОписаниеБаннера.Вставить("ОписаниеДействийПоСсылкам", Новый Структура); // Ключ - навигационная ссылка,
	// значение - описание действия (см. ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие())

	Возврат ОписаниеБаннера;
	
КонецФункции
 
Функция ЕстьОплата(Платежи)
	
	Если Платежи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеПлатежныеДокументы = Платежи.Скопировать(,"ПлатежноеПоручение");
	ВсеПлатежныеДокументы.Свернуть("ПлатежноеПоручение");
	
	Возврат ВсеПлатежныеДокументы.Количество() > 1 
		Или ВсеПлатежныеДокументы.Количество() = 1 И ЗначениеЗаполнено(ВсеПлатежныеДокументы[0].ПлатежноеПоручение);
	
КонецФункции

Процедура УдалитьСтрокиБезПлатежей(Платежи)
	
	КоличествоСтрок = Платежи.Количество();
	// Удалим строки, по которым нет платежей
	Если КоличествоСтрок > 1 Тогда
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежиПредставлениями(Платежи)
	
	Если Платежи.Колонки.Найти("ПлатежноеПоручение") = Неопределено
		Или Платежи.Колонки.Найти("Состояние") = Неопределено
		Или Платежи.Колонки.Найти("Оплачено") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Платежи.Колонки.Найти("ПредставлениеПлатежногоПоручения") = Неопределено Тогда
		Платежи.Колонки.Добавить("ПредставлениеПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	Если Платежи.Колонки.Найти("СуммаПлатежногоПоручения") = Неопределено Тогда
		Платежи.Колонки.Добавить("СуммаПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КонецЕсли;
	
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		ПредставлениеПлатежногоПоручения = ПредставлениеПлатежногоДокумента(СтрокаПлатежа.ПлатежноеПоручение);
		СтрокаПлатежа.ПредставлениеПлатежногоПоручения = ПредставлениеПлатежногоПоручения.Наименование;
		СтрокаПлатежа.СуммаПлатежногоПоручения = ПредставлениеПлатежногоПоручения.Сумма;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеПлатежногоДокумента(ДокументСсылка)
	
	ПредставлениеПлатежногоДокумента = Новый Структура("Наименование, Сумма");
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ПредставлениеПлатежногоДокумента;
	КонецЕсли;
	
	НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата, СуммаДокумента");
	НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3'");
	
	ПредставлениеПлатежногоДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		НаименованиеДокумента, НомерДокумента, ДатаДокумента);
	ПредставлениеПлатежногоДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	
	Возврат ПредставлениеПлатежногоДокумента;
	
КонецФункции

Функция НовыйТаблицыРасчетов()
	
	Расчеты = Новый ТаблицаЗначений;
	Расчеты.Колонки.Добавить("ОписаниеНалога",              Новый ОписаниеТипов("Строка"));
	Расчеты.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Расчеты.Колонки.Добавить("Налог",                       Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Расчеты.Колонки.Добавить("СведенияОРасчете");
	
	Возврат Расчеты;
	
КонецФункции

Процедура ИсключитьПромежуточныеУведомленияНДФЛ(ТаблицаУведомлений)
	
	Для Каждого СтрокаУведомление Из ТаблицаУведомлений Цикл
		
		Если ВыполнениеЗадачБухгалтера.УведомлениеСодержитПромежуточныйНДФЛ(СтрокаУведомление.Уведомление) Тогда
			ТаблицаУведомлений.Удалить(СтрокаУведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьУведомленияНДФЛПоПериоду(ТаблицаУведомлений, ТринадцатыйПериод)
	
	Для Каждого СтрокаУведомление Из ТаблицаУведомлений Цикл
		
		Если ТипЗнч(СтрокаУведомление.Уведомление) <> Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
			Продолжить;
		КонецЕсли;
		
		УведомлениеСодержитНДФЛЗаТринадцатыйПериод = ВыполнениеЗадачБухгалтера.УведомлениеСодержитНДФЛЗаТринадцатыйПериод(СтрокаУведомление.Уведомление); 
		Если (ТринадцатыйПериод И Не УведомлениеСодержитНДФЛЗаТринадцатыйПериод) 
			Или (Не ТринадцатыйПериод И УведомлениеСодержитНДФЛЗаТринадцатыйПериод) Тогда
			ТаблицаУведомлений.Удалить(СтрокаУведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьПромежуточноеУведомленияНДФЛПоПериоду(ТаблицаУведомлений, Период)
	
	Для Каждого СтрокаУведомление Из ТаблицаУведомлений Цикл
		
		Если ТипЗнч(СтрокаУведомление.Уведомление) <> Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
			Продолжить;
		КонецЕсли;
		
		УведомлениеСодержитНДФЛЗаКонецМесяца = ВыполнениеЗадачБухгалтера.УведомлениеСодержитНДФЛЗаКонецМесяца(СтрокаУведомление.Уведомление, Период);
		Если УведомлениеСодержитНДФЛЗаКонецМесяца Тогда
			ТаблицаУведомлений.Удалить(СтрокаУведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПорядокРасчетаСуммыНДС(ДанныеДекларации)
	
	// Существование в одной декларации сумм, предполагающих рассрочку и сумм, уплачиваемых единовременно в соответствии с п.5 ст. 173 НК,
	// считаем очень редким,в программе не автоматизирован и в помощнике не обслуживаем.
	
	ПорядокРассчета = "";
	Если ДанныеДекларации.СуммаНДСПоДекларации = 0 Тогда
		ПорядокРассчета = НСтр("ru = 'По декларации оплата не требуется'");
	ИначеЕсли ДанныеДекларации.Платежи[0].Сумма = 0 Тогда 
		// По декларации был рассчитан единовременный платеж, который был уплачен в другом налоговом периоде.
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма платежа %1 - %1(единовременный платеж)'"), ДанныеДекларации.СуммаНДСПоДекларации);
	ИначеЕсли ДанныеДекларации.СуммаНДСПоДекларации = ДанныеДекларации.Платежи[0].Сумма Тогда
		// По декларации предполагается уплатить только единовременный платеж.
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма платежа %1(единовременный платеж)'"), ДанныеДекларации.СуммаНДСПоДекларации);
	ИначеЕсли (ДанныеДекларации.СуммаНДСПоДекларации - ДанныеДекларации.Платежи[0].Сумма * 3) > 3
		ИЛИ (ДанныеДекларации.СуммаНДСПоДекларации - ДанныеДекларации.Платежи[0].Сумма * 3) < 0 Тогда
		// По декларации предполагается уплатить и единовременный платеж, и платеж, предполагающий рассрочку.
		ПорядокРассчета = НСтр("ru = 'Сумма платежа'");
	Иначе
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма платежа %1/3'"), ДанныеДекларации.СуммаНДСПоДекларации);
	КонецЕсли;
	
	Возврат ПорядокРассчета;
	
КонецФункции

Функция ЕстьЗадачаПоОтчетуЗаПериод(ПараметрыЗадачи, Расписание)
	
	Возврат Расписание.Найти(ПараметрыЗадачи.ПериодСобытия, "ПериодСобытия") <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьПредставленияНалоговыхОрганов(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Колонки.Найти("ПредставлениеНалоговогоОргана") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ПредставлениеНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КонецЕсли;
	
	Отбор = Новый Структура("ВыполняетсяПоРегистрации", Истина);
	ТаблицаРегистраций = ТаблицаЗадач.Скопировать(Отбор);
	ТаблицаРегистраций.Свернуть("РегистрацияВНалоговомОргане");
	РегистрацииДляЗаполнения = ТаблицаРегистраций.ВыгрузитьКолонку("РегистрацияВНалоговомОргане");
	
	РеквизитыНалоговыхОрганов = Новый Соответствие;
	КодыНалоговыхОрганов = Новый Соответствие;
	
	Для Каждого Регистрация Из РегистрацииДляЗаполнения Цикл
		
		РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, "Код,КПП");
		
		Свойства = Новый Структура("КодКонтролирующегоОргана, ВидКонтролирующегоОргана", 
			РеквизитыРегистрации.Код, Перечисления.ТипыКонтролирующихОрганов.ФНС);
		ПредставлениеКонтролирующегоОргана =
			РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
			
		РегистрацииПоТекущемуКоду = КодыНалоговыхОрганов[РеквизитыРегистрации.Код];
		Если РегистрацииПоТекущемуКоду = Неопределено Тогда
			РегистрацииПоТекущемуКоду = Новый Массив;
		КонецЕсли;
		РегистрацииПоТекущемуКоду.Добавить(Регистрация);
		
		КодыНалоговыхОрганов.Вставить(РеквизитыРегистрации.Код, РегистрацииПоТекущемуКоду);
		
		РеквизитыНалоговыхОрганов.Вставить(Регистрация, Новый Структура("Код,КПП,Представление", РеквизитыРегистрации.Код, РеквизитыРегистрации.КПП, ПредставлениеКонтролирующегоОргана));
		
	КонецЦикла;
	
	// Дополним представления с одинаковыми кодами ФНС значением КПП
	Для Каждого КлючИЗначение Из КодыНалоговыхОрганов Цикл
		Если КлючИЗначение.Значение.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Регистрация Из КлючИЗначение.Значение Цикл
			ТекущееПредставление = РеквизитыНалоговыхОрганов[Регистрация].Представление;
			РеквизитыНалоговыхОрганов[Регистрация].Представление = СтрШаблон("%1 КПП %2", ТекущееПредставление, РеквизитыНалоговыхОрганов[Регистрация].КПП);
		КонецЦикла;
	КонецЦикла;
	
	
	СтрокиДляЗаполнения = ТаблицаЗадач.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из СтрокиДляЗаполнения Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РегистрацияВНалоговомОргане) Тогда
			Продолжить;
		КонецЕсли;
		Представление = РеквизитыНалоговыхОрганов[СтрокаТаблицы.РегистрацияВНалоговомОргане].Представление;
		СтрокаТаблицы.ПредставлениеНалоговогоОргана = Представление;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПлатежейДокументами(ТаблицаПлатежей, ПараметрыЗадачи)
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Если ТаблицаПлатежей.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	КонецЕсли;
	Если ТаблицаПлатежей.Колонки.Найти("ПредставлениеПлатежногоПоручения") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("ПредставлениеПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	Если ТаблицаПлатежей.Колонки.Найти("СуммаПлатежногоПоручения") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежногоПоручения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КонецЕсли;
	Если ТаблицаПлатежей.Колонки.Найти("СуммаОплачено") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("СуммаОплачено", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если ТаблицаПлатежей.Колонки.Найти("Оплачено") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаПлатежей.Колонки.Найти("Состояние") = Неопределено Тогда
		ТаблицаПлатежей.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	КонецЕсли;
	
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.Правило = ПараметрыЗадачи.ПравилоУплаты;
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.ТипыДокументов = МассивТиповПлатежныхДокументов;
	
	ДокументыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодСобытия, ПараметрыЗадачи.ПериодСобытия, ПараметрыУплатыНалогов);
	СтрокаЕдиныйПлатеж = ТаблицаПлатежей[0];
	
	Для Каждого Документ Из ДокументыУплатыНалогов Цикл
		СтрокаПлатеж = ТаблицаПлатежей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтрокаЕдиныйПлатеж);
		СтрокаПлатеж.Сумма = 0;
		СтрокаПлатеж.СуммаОплачено = Документ.Сумма;
		СтрокаПлатеж.СуммаПлатежногоПоручения = Документ.Сумма;
		СтрокаПлатеж.Оплачено = (Документ.Состояние = Перечисления.СостоянияБанковскихДокументов.Оплачено);
		СтрокаПлатеж.Состояние = Документ.Состояние;
		СтрокаПлатеж.ПлатежноеПоручение = Документ.Ссылка;
		СтрокаПлатеж.ПредставлениеПлатежногоПоручения = Документ.ПредставлениеДокумента;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
