#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает адрес технической поддержки для отправки сообщения
//
// Возвращаемое значение:
//   Структура
//
Функция АдресТехподдержки() Экспорт
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Адрес", "v8@1c.ru");
	СтруктураАдреса.Вставить("Представление", "Техническая поддержка 1С");
	Кому = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураАдреса);
	Возврат Кому;
	
КонецФункции

// Возвращает адрес хранилища файла с текстовым документом,
// содержащим техническую информация о приложении
// Возвращаемое значение:
//	 АдресВременногоХранилища - Строка - Адрес хранилища сформированного файла
//
// Параметры
// ПараметрыНастройкиПрограммы - Структура - Структура, содержащая ключи:
//								ВидПриложения - Вид приложения
//								Логин - Логин пользователя в Интернет поддержке пользователя
//								Регистрационный номер - Регистрационный номер конфигурации
//								Уникальный идентификатор - УникальныйИдентификатор
//
Функция ТехническаяИнформация(ПараметрыТехническойИнфорации) Экспорт
	
	ТехническаяИнформация = Новый ТекстовыйДокумент;
	ТехническаяИнформация.ДобавитьСтроку(ТекстВложенияТехническаяИнформация(ПараметрыТехническойИнфорации));
	
	ИмяФайлаТехническаяИнформация = ПолучитьИмяВременногоФайла("txt");
	ТехническаяИнформация.Записать(ИмяФайлаТехническаяИнформация);
	
	Возврат ПоместитьВоВременноеХранилище(
		Новый ДвоичныеДанные(ИмяФайлаТехническаяИнформация), 
		ПараметрыТехническойИнфорации.УникальныйИдентификатор);

КонецФункции

// Возвращает адрес хранилища файла с текстовым документом,
// содержащим настройки программы
// Возвращаемое значение:
//	 АдресВременногоХранилища - Строка - Адрес хранилища сформированного файла
//
// Параметры
// ПараметрыНастройкиПрограммы - Структура - Структура, содержащая ключи:
//								Организация - Организация, по которой будет получена учетная политика
//								Уникальный идентификатор - УникальныйИдентификатор
//
Функция ИнформацияОНастройкахПрограммы(ПараметрыНастройкиПрограммы) Экспорт
	
	ИнформацияОНастройках = Новый ТекстовыйДокумент;
	
	ДобавитьСекциюИнтерфейс(ИнформацияОНастройках);
	ДобавитьСекциюФункциональность(ИнформацияОНастройках);
	ДобавитьСекциюПараметрыУчета(ИнформацияОНастройках);
	ДобавитьСекциюУчетнаяПолитика(ИнформацияОНастройках, ПараметрыНастройкиПрограммы.Организация);
	ДобавитьСекциюОбмены(ИнформацияОНастройках);
	ДобавитьСекциюПерсональныеНастройки(ИнформацияОНастройках);
	
	ИмяФайлаНастройкиПрограммы = ПолучитьИмяВременногоФайла("txt");
	ИнформацияОНастройках.Записать(ИмяФайлаНастройкиПрограммы);
	
	Возврат ПоместитьВоВременноеХранилище(
		Новый ДвоичныеДанные(ИмяФайлаНастройкиПрограммы), 
		ПараметрыНастройкиПрограммы.УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТехническаяИнформация

Функция ТекстВложенияТехническаяИнформация(Параметры)

	// Общие технические параметры и информация о сеансе
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// Общая информация:
	Результат = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2;
		|Версия программы: %3;
		|Поставщик: %4;
		|Версия платформы: %5;
		|%6;
		|Вид приложения: %7;
		|Режим: %8;'");
		
	ВерсииПодсистем = Новый Массив;
	Для Каждого СтрокаВерсии Из ОбновлениеИнформационнойБазы.ВерсииПодсистем() Цикл
		ВерсииПодсистем.Добавить(
			СтрШаблон(НСтр("ru='Версия %1: %2'"), 
				СтрокаВерсии.ИмяПодсистемы,
				СтрокаВерсии.Версия));
	КонецЦикла;
	Результат =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат,
			Метаданные.Синоним,
			Метаданные.Имя,
			Метаданные.Версия,
			Метаданные.Поставщик,
			СистемнаяИнформация.ВерсияПриложения,
			СтрСоединить(ВерсииПодсистем, Символы.ПС),
			Параметры.ВидПриложения,
			?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'"), НСтр("ru = 'Серверный'")));
			
	// Права:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полные права: %1;
				|Права администратора: %2;'"),
			?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")));
	
	// Личные данные:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин для подключения Интернет-поддержки: %1;
			|Регистрационный номер программного продукта: %2;'"),
			Параметры.ЛогинПользователя,
			Параметры.РегистрационныйНомер);
	
	// Настройки соединения:
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки соединения с серверами Интернет-поддержки:
				|	Таймаут: %1;
				|	Устанавливать соединение на сервере 1С:Предприятие: %2;
				|	Доменная зона: %3'"),
			НастройкиСоединения.ТаймаутПодключения,
			?(ЭтоФайловаяИБ,
				Ложь,
				(НастройкиСоединения.УстанавливатьПодключениеНаСервере = 1)),
			?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнформацияОНастройках

Процедура ДобавитьСекциюИнтерфейс(ИнформацияОНастройках)

	ИнформацияОНастройках.ДобавитьСтроку("<Cекция Интерфейс>");
	
	// Получим вариант интерфейса
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	ВариантИнтерфейса = ?(ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения"),
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения,
		ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	Если ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ТекстВариантИнтерфейса = "Такси";
	Иначе
		ТекстВариантИнтерфейса = "В закладках";
	КонецЕсли;
	ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("Интерфейс=%1", ТекстВариантИнтерфейса));
	
	// Получим значения служебных констант
	ИменаКонстант = Новый Массив;
	ИменаКонстант.Добавить("ИнтерфейсВерсии77");
	ИменаКонстант.Добавить("ИнтерфейсТакси");
	ИменаКонстант.Добавить("ИнтерфейсТаксиПростой");
	
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	Для Каждого ИмяКонстанты Из ИменаКонстант Цикл
		ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКонстанты, НаборКонстант[ИмяКонстанты]));
	КонецЦикла;
	
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

Процедура ДобавитьСекциюФункциональность(ИнформацияОНастройках)
	
	ИнформацияОНастройках.ДобавитьСтроку("");
	ИнформацияОНастройках.ДобавитьСтроку("<Cекция Функциональность>");
	
	// Получим значения констант
	ИменаКонстант = Обработки.ФункциональностьПрограммы.СписокВсейФункциональности();
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	Для Каждого ИмяКонстанты Из ИменаКонстант Цикл
		ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКонстанты, НаборКонстант[ИмяКонстанты]));
	КонецЦикла;
	
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

Процедура ДобавитьСекциюПараметрыУчета(ИнформацияОНастройках)
	
	ИнформацияОНастройках.ДобавитьСтроку("");
	ИнформацияОНастройках.ДобавитьСтроку("<Cекция Параметры учета>");
	
	ИменаКонстант = Новый Массив;
	ИменаКонстант.Добавить("ИспользоватьСтатьиДвиженияДенежныхСредств");
	ИменаКонстант.Добавить("ИспользоватьОтложенноеПроведение");
	ИменаКонстант.Добавить("СрокОплатыПокупателей");
	ИменаКонстант.Добавить("СрокОплатыПоставщикам");
	ИменаКонстант.Добавить("СрокОплатыСчетовПокупателю");
	ИменаКонстант.Добавить("ОтключитьКонтрольОтрицательныхОстатков");
	ИменаКонстант.Добавить("ДополнительнаяКолонкаПечатныхФормДокументов");
	ИменаКонстант.Добавить("ЗагрузкаДанныхИзТиС");
	ИменаКонстант.Добавить("ВестиУчетЗатратПоПодразделениям");
	ИменаКонстант.Добавить("РасчетЗарплатыДляНебольшихОрганизаций");
	ИменаКонстант.Добавить("РассчитыватьДокументыПриРедактировании");
	ИменаКонстант.Добавить("КонецПримененияАлгоритмовАмортизацииПБУ6");
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	
	Для Каждого ИмяКонстанты Из ИменаКонстант Цикл
		ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКонстанты, НаборКонстант[ИмяКонстанты]));
	КонецЦикла;
	
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

Процедура ДобавитьСекциюУчетнаяПолитика(ИнформацияОНастройках, Организация)
	
	ИнформацияОНастройках.ДобавитьСтроку("");
	ИнформацияОНастройках.ДобавитьСтроку("<Cекция Учетная политика>");
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Бухгалтерский учет>");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаСрезПоследних.СпособОценкиМПЗ,
		|	УчетнаяПолитикаСрезПоследних.СпособОценкиТоваровВРознице,
		|	УчетнаяПолитикаСрезПоследних.УчитыватьРасходыПоЭлементамЗатрат,
		|	УчетнаяПолитикаСрезПоследних.УчитыватьРасходыПоСтатьямЗатрат,
		|	УчетнаяПолитикаСрезПоследних.ФормироватьРезервыПоСомнительнымДолгам,
		|	УчетнаяПолитикаСрезПоследних.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств,
		|	УчетнаяПолитикаСрезПоследних.ВариантБухгалтерскойОтчетности,
		|	УчетнаяПолитикаСрезПоследних.ВариантУчетаОтложенногоНалога,
		|	УчетнаяПолитикаСрезПоследних.ПоддержкаПБУ18
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Система налогообложения");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ДатаПереходаНаУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.УведомлениеНомер,
		|	НастройкиСистемыНалогообложенияСрезПоследних.УведомлениеДата,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНалогаНаПрибыль,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДФЛ,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНВД,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяОсобыйПорядокНалогообложения,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ОбъектНалогообложенияУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДС,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикТорговогоСбора
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(, Организация = &Организация) КАК НастройкиСистемыНалогообложенияСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Налог на прибыль");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.ПорядокУплатыАвансов,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.МетодНачисленияАмортизации,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.СпособПогашенияСтоимостиСпецодежды,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.ФормироватьРезервыПоСомнительнымДолгам,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.СтавкаФБ,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.СтавкаСубъектРФ,
		|	НастройкиУчетаНалогаНаПрибыльСрезПоследних.ПрименяютсяРазныеСтавкиНалогаНаПрибыль
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(, Организация = &Организация) КАК НастройкиУчетаНалогаНаПрибыльСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Настройки учета УСН");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУчетаУСНСрезПоследних.СтавкаНалога,
		|	НастройкиУчетаУСНСрезПоследних.МетодРаспределенияРасходовПоВидамДеятельности,
		|	НастройкиУчетаУСНСрезПоследних.БазаРаспределенияРасходовПоВидамДеятельности,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокОтраженияАванса,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокПризнанияМатериальныхРасходов,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокПризнанияРасходовПоТоварам,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокПризнанияРасходовПоНДС,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокПризнанияДопРасходов,
		|	НастройкиУчетаУСНСрезПоследних.ПорядокПризнанияТаможенныхПлатежей,
		|	НастройкиУчетаУСНСрезПоследних.НалоговыеКаникулы,
		|	НастройкиУчетаУСНСрезПоследних.Патент
		|ИЗ
		|	РегистрСведений.НастройкиУчетаУСН.СрезПоследних(, Организация = &Организация) КАК НастройкиУчетаУСНСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Налог на добавленную стоимость (НДС)");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУчетаНДССрезПоследних.ПрименяетсяОсвобождениеОтУплатыНДС,
		|	НастройкиУчетаНДССрезПоследних.СложныйУчетНДС,
		|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетНДСДо2014Года,
		|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетНДСНаСчете19,
		|	НастройкиУчетаНДССрезПоследних.УпрощенныйУчетНДС,
		|	НастройкиУчетаНДССрезПоследних.НачислятьНДСПоОтгрузке,
		|	НастройкиУчетаНДССрезПоследних.НачислятьНДСПриПередачеНедвижимости,
		|	НастройкиУчетаНДССрезПоследних.ПорядокРегистрацииСчетовФактурНаАванс
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(, Организация = &Организация) КАК НастройкиУчетаНДССрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Налог на доходы физических лиц (по предпринимательской деятельности)");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУчетаНДФЛСрезПоследних.ОсновнойВидДеятельности,
		|	НастройкиУчетаНДФЛСрезПоследних.ВестиУчетПоВидамДеятельности,
		|	НастройкиУчетаНДФЛСрезПоследних.АвансыВключаютсяВДоходыВПериодеПолучения,
		|	НастройкиУчетаНДФЛСрезПоследних.ВидДеятельностиДоходовПоАвансам,
		|	НастройкиУчетаНДФЛСрезПоследних.ДляПризнанияРасходовТребуетсяПолучениеДохода,
		|	НастройкиУчетаНДФЛСрезПоследних.ПризнаватьРасходыПоОперациямПрошлогоГода
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНДФЛ.СрезПоследних(, Организация = &Организация) КАК НастройкиУчетаНДФЛСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		//
		ИнформацияОНастройках.ДобавитьСтроку("<Cекция Страховые взносы предпринимателя");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУчетаСтраховыхВзносовИПСрезПоследних.УплачиватьДобровольныеВзносыВФСС
		|ИЗ
		|	РегистрСведений.НастройкиУчетаСтраховыхВзносовИП.СрезПоследних(, Организация = &Организация) КАК НастройкиУчетаСтраховыхВзносовИПСрезПоследних";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаУчетнойПолитики = РезультатЗапроса.Выгрузить();
			СтрокаТаблицы = ТаблицаУчетнойПолитики[0];
			Для Каждого Колонка Из ТаблицаУчетнойПолитики.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИнформацияОНастройках.ДобавитьСтроку(СтрШаблон("%1=%2", ИмяКолонки, СтрокаТаблицы[ИмяКолонки]));
			КонецЦикла;
		КонецЕсли;
		ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
		
		
		
	КонецЕсли;
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

Процедура ДобавитьСекциюОбмены(ИнформацияОНастройках)
	
	ИнформацияОНастройках.ДобавитьСтроку("");
	ИнформацияОНастройках.ДобавитьСтроку("<Cекция Обмены>");
	УстановитьПривилегированныйРежим(Истина);
	ИнформацияОНастройках.ДобавитьСтроку(
		СтрШаблон("Используется РИБ=%1", ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Истина)));
	ИнформацияОНастройках.ДобавитьСтроку(
		СтрШаблон("Используется обмены с другими конфигурациями=%1", ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Ложь)));
	УстановитьПривилегированныйРежим(Ложь);
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

Процедура ДобавитьСекциюПерсональныеНастройки(ИнформацияОНастройках)
	
	ИнформацияОНастройках.ДобавитьСтроку("");
	ИнформацияОНастройках.ДобавитьСтроку("<Cекция персональные настройки>");
	ИнформацияОНастройках.ДобавитьСтроку(
		СтрШаблон("ИспользоватьТабличныеФормыБанковскихДокументов=%1", Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить()));
	ИнформацияОНастройках.ДобавитьСтроку(
		СтрШаблон("Пользователь управляет счетами учета=%1", СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета()));
	ИнформацияОНастройках.ДобавитьСтроку("<КонецCекции>");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли