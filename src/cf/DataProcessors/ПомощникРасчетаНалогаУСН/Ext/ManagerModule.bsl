#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	ПараметрыЗадач.Колонки.Добавить("ПолноеИмяПравила",
		Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ТипПолногоИмениПравила());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусЗадачи(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция НачальныеПоказатели(Организация, Период) Экспорт
	
	Показатели = НовыйПоказатели(Организация, Период);
	
	Если Не ЗначениеЗаполнено(Показатели.СообщениеОбОшибке)
		И Показатели.КонецПериода >= Показатели.НачалоНалоговогоПериода
		И Не Показатели.НалоговыйПериодПропущен Тогда
		
		ЗаполнитьНачальныеПоказатели(Показатели);
		ОпределитьПорядокДействий(Показатели);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает признак возможности формирования декларации УСН в форме помощника расчета налога УСН.
// Декларацию в помощнике можно создавать только применяющим УСН и не ранее отчетности за 2021 год
// (с 2021 года в декларации требуется указывать основание применения льготной ставки,
// помощник поддерживает сценарий заполнения этих сведений и сохранения их в настройках).
//
// Параметры:
//   Организация    - СправочникСсылка.Организации - организация, по которой необходима декларация.
//   Период         - Дата - дата внутри года (налогового периода), за который необходимо сформировать декларацию.
//
// Возвращаемое значение:
//   Булево - Истина если декларацию необходимо формировать в форме помощника.
//
Функция ФормироватьДекларациюВПомощнике(Организация, Период) Экспорт
	
	Возврат УчетУСНКлиентСервер.ТребуетсяОснованиеЛьготнойСтавкиНалога(Период)
		И УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоГода(Период), КонецГода(Период));
	
КонецФункции

#Область ПубликацияДанных

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	
	ОписаниеВозвращаемыхДанных.Наименование   = НСтр("ru = 'Помощник расчета налога УСН'");
	ОписаниеВозвращаемыхДанных.Описание       = НСтр("ru = 'Помощник расчета налога УСН'");
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.ПомощникРасчетаНалогаУСН;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ПубликуемыеДанныеПомощника(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	Если ДанныеОтчета <> Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "tax_usn_calculator";
	
КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//  Период -Дата - дата в квартале, за который требуются публикуемые данные.
//
// Возвращаемое значение:
//  Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	Настройки.Вставить("date", Период);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает сумму налога к уплате.
//
// Параметры:
//   ПараметрыРасчета - Структура - параметры для расчета суммы налога к уплате,
//                      состав см. ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате().
//
// Возвращаемое значение:
//   Число - сумма налога к уплате за вычетом совершенных платежей.
//
Функция СуммаНалогаКУплате(ПараметрыРасчета) Экспорт
	
	Организация         = ПараметрыРасчета.Организация;
	НалоговыйПериод     = ПараметрыРасчета.НалоговыйПериод;
	ОплатаЗадолженности = ПараметрыРасчета.ОплатаЗадолженности;
	
	Если ОплатаЗадолженности Тогда
		Возврат СуммаЗадолженностиПоНалогуКУплате(Организация, НалоговыйПериод);
	Иначе
		Возврат СуммаНалогаЗаПериодКУплате(Организация, НалоговыйПериод);
	КонецЕсли;
	
КонецФункции

// Возвращает описание таблицы налогов для документа "Операция по единому налоговому счету"
//
// Параметры:
//   ПараметрыВыполнения - Структура - См. НовыеПараметрыТаблицыНалоговНаЕНС()
//
// Возвращаемое значение:
//   Строка - адрес хранилища описания таблицы налогов
//
Функция ОписаниеТаблицыНалогиНаЕНС(ПараметрыВыполнения) Экспорт
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		ПараметрыВыполнения.Периодичность,
		ПараметрыВыполнения.Период);
	
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ПараметрыВыполнения.Периодичность,
		ПараметрыВыполнения.Период);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.Сумма) Тогда
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыВыполнения);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,
			ОписаниеРеквизитовУплатыНалога(ПараметрыВыполнения.Организация, НоваяСтрока.Налог, КонецПериода));
		
		НоваяСтрока.НачалоПериода = НачалоПериода;
		НоваяСтрока.КонецПериода = КонецПериода;
		
	КонецЕсли;
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(
		ТаблицыНалогов,
		ПараметрыВыполнения.УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

Функция ОписаниеРеквизитовУплатыНалога(Организация, Налог, Период) Экспорт
	
	ОписаниеРеквизитовУплаты = Новый Структура;
	ОписаниеРеквизитовУплаты.Вставить("РегистрацияВНалоговомОргане",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));
	ОписаниеРеквизитовУплаты.Вставить("КодПоОКТМО",
		Справочники.Организации.КодТерриторииМестаРегистрации(Организация));
	ОписаниеРеквизитовУплаты.Вставить("КодБК",
		Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , Период));
	ОписаниеРеквизитовУплаты.Вставить("СчетУчета",
		Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, Период));
	Возврат ОписаниеРеквизитовУплаты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Результат - Структура, с полями:
//    * Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//    * Пояснения - ТаблицаЗначений - Поля описаны в функции НовыйПоясненияРасчета()
//
Функция АктуальныеПоказателиРасчетаСПояснениями(Организация, Период) Экспорт
	
	Показатели = АктуальныеПоказатели(Организация, Период);
	
	Результат = Новый Структура;
	Результат.Вставить("Показатели", Показатели);
	Результат.Вставить("Пояснения",  НовыйПоясненияРасчета());
	
	ЗаполнитьПоясненияКРасчету(Результат.Пояснения, Результат.Показатели);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета актуальны (закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция АктуальныеПоказатели(Организация, Период) Экспорт
	
	Показатели = НовыйПоказатели(Организация, Период);
	
	ЗаполнитьАктуальныеПоказатели(Показатели);
	ОпределитьПорядокДействий(Показатели);
	
	Возврат Показатели;
	
КонецФункции

Функция ПодсказкаПоНалогу(НомерКвартала, СрокУплаты, СрокПодачи) Экспорт
	
	Если Не ЗначениеЗаполнено(СрокУплаты) Или Не ЗначениеЗаполнено(СрокПодачи) Тогда
		Возврат "";
	КонецЕсли;
	
	СодержимоеСтроки = Новый Массив;
	
	Если НомерКвартала <> 4 Тогда
		СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Отправьте уведомление по авансу не позднее %1
														|Уплатите налог '"), Формат(СрокПодачи, "ДЛФ=DD")));
	Иначе
		СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'Подайте декларацию не позднее %1
														|Уплатите налог '"), Формат(СрокПодачи, "ДЛФ=DD")));
	КонецЕсли;
	СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'не позднее %1'"), Формат(СрокУплаты, "ДЛФ=DD")));
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция РасходыУменьшающиеНалог(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаРаздел4.Период КАК Период,
	|	СУММА(КнигаРаздел4.ПФР) КАК ПФР,
	|	СУММА(КнигаРаздел4.ФСС) КАК ФСС,
	|	СУММА(КнигаРаздел4.ФОМС) КАК ФОМС,
	|	СУММА(КнигаРаздел4.ФСС_НС) КАК ФСС_НС,
	|	СУММА(КнигаРаздел4.Больничные) КАК Больничные,
	|	СУММА(КнигаРаздел4.ДобровольноеСтрахование) КАК ДобровольноеСтрахование,
	|	ВЫБОР
	|		КОГДА КнигаРаздел4.ДокументРасхода <> НЕОПРЕДЕЛЕНО
	|			ТОГДА КнигаРаздел4.ДокументРасхода
	|		ИНАЧЕ КнигаРаздел4.Регистратор
	|	КОНЕЦ КАК ДокументРасхода,
	|	КнигаРаздел4.РеквизитыПервичногоДокумента КАК РеквизитыПервичногоДокумента
	|ПОМЕСТИТЬ ВТ_КнигаРаздел4
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4 КАК КнигаРаздел4
	|ГДЕ
	|	КнигаРаздел4.Организация = &Организация
	|	И КнигаРаздел4.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаРаздел4.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаРаздел4.Период,
	|	КнигаРаздел4.РеквизитыПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА КнигаРаздел4.ДокументРасхода <> НЕОПРЕДЕЛЕНО
	|			ТОГДА КнигаРаздел4.ДокументРасхода
	|		ИНАЧЕ КнигаРаздел4.Регистратор
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК Период,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК НомерДокумента,
	|	ТИПЗНАЧЕНИЯ(ВТ_КнигаРаздел4.ДокументРасхода) КАК ВидДокумента,
	|	ВТ_КнигаРаздел4.ДокументРасхода КАК ДокументРасхода,
	|	ВТ_КнигаРаздел4.ПФР КАК ПФР,
	|	ВТ_КнигаРаздел4.ФСС КАК ФСС,
	|	ВТ_КнигаРаздел4.ФОМС КАК ФОМС,
	|	ВТ_КнигаРаздел4.ФСС_НС КАК ФСС_НС,
	|	ВТ_КнигаРаздел4.Больничные КАК Больничные,
	|	ВТ_КнигаРаздел4.ДобровольноеСтрахование КАК ДобровольноеСтрахование,
	|	ВТ_КнигаРаздел4.РеквизитыПервичногоДокумента КАК РеквизитыПервичногоДокумента
	|ИЗ
	|	ВТ_КнигаРаздел4 КАК ВТ_КнигаРаздел4
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ВТ_КнигаРаздел4.ДокументРасхода = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ВидДокумента,
	|	ДокументРасхода"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УстановитьСтатусЗадачи(Организация, Правило, Период, НалогНачислен, СуммаНалога, Платежи) Экспорт
	
	ПериодСобытияЗадачи = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
		УчетУСН.ПериодичностьНалоговогоПлатежа(Период),
		Период);
	
	ПараметрыЗадачи = Новый Структура("Организация, ПериодСобытия, Правило, Действие, РегистрацияВНалоговомОргане",
		Организация, ПериодСобытияЗадачи, Правило, Правило.Действие, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	ВыполнениеЗадачБухгалтера.ПроверитьАктуальностьСтатуса(
		ПараметрыЗадачи,
		СтатусЗадачиПоОплате(НалогНачислен, СуммаНалога, Платежи));
	
КонецПроцедуры

// Возвращает описание действия для подготовки декларации из помощника
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//   ТекстОшибки - Строка - описание ошибки, препятствующей подготовке декларации
//
// Возвращаемое значение:
//   Структура
//     * ИмяФормы - имя формы декларации
//     * ПараметрыФормы - параметры для открытия формы декларации
//   Неопределено - если декларация за указанный период не требуется
//
Функция ОписаниеДействияДекларация(Организация, Период, ТекстОшибки = "") Экспорт
	
	ОписаниеДействия = Неопределено;
	
	НачалоНалоговогоПериода = НачалоНалоговогоПериода(
		Организация, Период, Справочники.Организации.ДатаРегистрацииОрганизации(Организация));
	
	Если Не ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода) Тогда
		ТекстОшибки = НСтр("ru = 'Организация не применяет УСН.'");
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
	Если КонецКвартала(Период) <> НалоговыйПериод.Конец Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Порядок = ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период);
	
	ПорядокПредоставленияОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Отчет", Неопределено);
	
	Если ПорядокПредоставленияОтчета <> Неопределено Тогда
		
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
			ПорядокПредоставленияОтчета.Правило,
			ПорядокПредоставленияОтчета.ПериодСобытия,
			Организация,
			РегистрацияВНалоговомОргане);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок предоставления отчета не определен'");
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаНалога(СтруктураРеквизитовУплатыНалога) Экспорт
	
	Возврат ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежУСН(СтруктураРеквизитовУплатыНалога);
	
КонецФункции

Функция СтруктураРеквизитовУплатыНалога() Экспорт
	
	СтруктураРеквизитов = Новый Структура("Организация, ПлательщикЕНП, ВидНалога, Сумма,
		|СпособУплатыНалога, ПериодСобытия, ОплатаЗадолженности, Правило");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает порядок предоставления отчета и оплаты УСН за период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//
// Возвращаемое значение:
//   Структура, Неопределено -  См. РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод
//
Функция ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период) Экспорт
	
	ВидНалога = ВидНалога(Организация, Период);
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
КонецФункции

Функция ДокументыУплатыНалогов(Организация, Период, Правило = Неопределено) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	Если ЗначениеЗаполнено(Правило) Тогда
		ПараметрыУплатыНалогов.Правило = Правило;
	Иначе
		ПараметрыУплатыНалогов.КодыЗадач.Добавить("УСН");
	КонецЕсли;
	
	ВидНалога = ВидНалога(Организация, Период);
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

Функция СтатусыОперацийИнтеграцияСБанком() Экспорт
	
	СтатусыОпераций = Новый Структура;
	СтатусыОпераций.Вставить("ОперацияПоОсновномуБанковскомуСчету", 0);
	СтатусыОпераций.Вставить("ОперацияПоДругомуСчетуИлиНаличными", 1);
	
	Возврат СтатусыОпераций;
	
КонецФункции

Функция РеквизитыДляОтчетностиЗаполнены(Знач Организация, Период, НезаполненныеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизиты(Организация, Период);
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизиты,
		НезаполненныеРеквизиты);
	
КонецФункции

Функция ПроверяемыеРеквизиты(Организация, Период) Экспорт
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыДляУплатыНалога(Организация);
	
	РеквизитыДляДекларации = ПроверяемыеРеквизитыДляДекларации(Организация, Период);
	Если ЗначениеЗаполнено(РеквизитыДляДекларации) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыДляДекларации, Истина);
	КонецЕсли;
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Функция ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(Период) Экспорт
	
	Если ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Период) = 4 Тогда
		Возврат НСтр("ru = 'заполнения декларации по УСН'");
	Иначе
		Возврат НСтр("ru = 'уплаты авансового платежа УСН'");
	КонецЕсли;
	
КонецФункции

Функция ВидНалога(Организация, Период) Экспорт
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы;
	КонецЕсли;
	
	Возврат ВидНалога;
	
КонецФункции

Функция ИмяРеглОтчета() Экспорт
	Возврат "РегламентированныйОтчетУСН";
КонецФункции

Функция ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиЗагрузкиВыписки", Ложь);
	Результат.Вставить("ТекстОшибкиЗагрузкиВыписки", "");
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	ПараметрыОтбораПредупреждений.НачалоПериода = НачалоПериода;
	ПараметрыОтбораПредупреждений.КонецПериода = КонецПериода;
	ПараметрыОтбораПредупреждений.ТипДокументов = "ПоступлениеНаРасчетныйСчет";
	
	ЕстьПредупрежденияПриЗагрузкеДоходов =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	ПараметрыОтбораПредупреждений.ТипДокументов = "СписаниеСРасчетногоСчета";
	
	ЕстьПредупрежденияПриЗагрузкеВозвратов =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	Результат.ЕстьОшибкиЗагрузкиВыписки = ЕстьПредупрежденияПриЗагрузкеДоходов Или ЕстьПредупрежденияПриЗагрузкеВозвратов;
	Результат.ТекстОшибкиЗагрузкиВыписки =
		ТекстПредупрежденияПриЗагрузкеВыписки(ЕстьПредупрежденияПриЗагрузкеДоходов, ЕстьПредупрежденияПриЗагрузкеВозвратов);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстСообщенияРасчетыПрошлыхЛет(Задолженность, ГраницаОтчетностиПрошлыхПериодов, ТребуетсяВводОстатков) Экспорт
	
	ЧастиСообщения = Новый Массив;
	
	Если Задолженность > 0 Тогда
		
		ЧастиСообщения = Новый Массив;
		
		ЧастиСообщения.Добавить(НСтр("ru = 'Не оплачена задолженность'"));
		ЧастиСообщения.Добавить(" ");
		
		ЧастиСообщения.Добавить(
			Новый ФорматированнаяСтрока(ОбщегоНазначенияБПВызовСервера.ФорматСумм(Задолженность), , , , "ОплатитьЗадолженность"));
		
		ЧастиСообщения.Добавить(" ");
		ЧастиСообщения.Добавить(НСтр("ru = 'по налогу за прошлые годы'"));
		
	ИначеЕсли ТребуетсяВводОстатков Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не введены остатки по налогу на начало %1 года.'"), Формат(Год(ГраницаОтчетностиПрошлыхПериодов) + 1, "ЧГ=0"));
		ЧастиСообщения.Добавить(ТекстСообщения);
		
		ЧастиСообщения.Добавить(" ");
		ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Ввести остатки'"), , , , "ВвестиНачальныеОстатки"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

#Область УплатаНалогаПрошлыхЛет

// Возвращает список документов на уплату задолженности по налогам.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплатыНалогаПрошлыхЛет(Организация, Период) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("УСН");
	
	ВидыНалогов = ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН();
	
	Для Каждого ВидНалогаУСН Из ВидыНалогов Цикл
		ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалогаУСН);
	КонецЦикла;
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	ПараметрыУплатыНалогов.ОтборОплатаЗадолженности = Истина;
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода = КонецГода(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

#КонецОбласти

Функция ПорядокОтчетаУплатыНалога(Организация, Период) Экспорт
	
	Результат = НовыеПараметрыПорядкаОтчетаУплатыНалога();
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	Налог = ВидНалога(Организация, Период);
	
	Результат.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Налог);
	
	// Определяем по статусу задачи срок и правило, необходимые для перехода на статью ИТС и для сверки
	ПорядокОтчетаУплаты = ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период);
	
	ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Уплата");
	Если ЗначениеЗаполнено(ПорядокУплаты) Тогда
		Результат.СрокОплаты = ПорядокУплаты.Срок;
		Результат.ПравилоУплаты = ПорядокУплаты.Правило;
	КонецЕсли;
	
	// Если это декларация УСН - берем правила Отчет,
	// Если квартал и ЕНП - правило Уведомление,
	// Иначе оставляем не заполненным
	Если Период = КонецГода(Период) Тогда
		ПорядокОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Отчет");
	ИначеЕсли ПлательщикЕНП Тогда
		ПорядокОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Уведомление");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорядокОтчета) Тогда
		Результат.СрокОтчета = ПорядокОтчета.Срок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НалогиОперацииЕНС(ПараметрыВыполнения) Экспорт
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Правило, "Периодичность");
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ПараметрыВыполнения.Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПараметрыВыполнения.Период);
	
	НоваяСтрока = ТаблицаНалоги.Добавить();
	
	НоваяСтрока.Налог         = ПараметрыВыполнения.Налог;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,
		ОписаниеРеквизитовУплатыНалога(ПараметрыВыполнения.Организация, НоваяСтрока.Налог, КонецПериода));
	
	НоваяСтрока.Сумма         = ПараметрыВыполнения.НалогКУплате;
	НоваяСтрока.СрокУплаты    = ПараметрыВыполнения.Срок;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.КонецПериода  = КонецПериода;
	
	Возврат ТаблицаНалоги;
	
КонецФункции

Функция НовыеПараметрыОперацииЕНС() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Период");
	Результат.Вставить("Правило");
	Результат.Вставить("Налог");
	Результат.Вставить("Срок");
	Результат.Вставить("НалогКУплате");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Статусы

Функция СтатусЗадачи(ПараметрыЗадачи)
	
	Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
		Возврат ПараметрыЗадачи.РучнойСтатус;
	КонецЕсли;
	
	ПравилоУплаты = ПараметрыЗадачи.Правило;
	Период        = НачалоДня(КонецКвартала(ПараметрыЗадачи.ПериодСобытия));
	Организация   = ПараметрыЗадачи.Организация;
	
	Показатели = АктуальныеПоказатели(ПараметрыЗадачи.Организация, Период);
	
	Платежи = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогов(
		ПараметрыЗадачи.Организация, Период, ПравилоУплаты);
	
	Возврат СтатусЗадачиПоОплате(Показатели.НалогНачислен, Показатели.НалогКУплате, Платежи);
	
КонецФункции

Функция СтатусЗадачиПоОплате(НалогНачислен, НалогКУплате, Платежи)
	
	Статус = "";
	
	Если Не НалогНачислен Тогда
		Возврат Статус;
	КонецЕсли;
	
	СуммаОплаты = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	Если СуммаОплаты > 0 И СуммаОплаты >= НалогКУплате Тогда
		Возврат НСтр("ru='Оплачено'");
	КонецЕсли;
	
	ИмяКолонкиСостояние = "Состояние";
	Статусы = ?(ТипЗнч(Платежи) = Тип("ДанныеФормыКоллекция"),
		Платежи.Выгрузить(, ИмяКолонкиСостояние).ВыгрузитьКолонку(ИмяКолонкиСостояние),
		Платежи.ВыгрузитьКолонку(ИмяКолонкиСостояние));
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.СтатусОплаты(Статусы);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоясненияРасчетаНалога

Процедура ЗаполнитьПоясненияКРасчету(Пояснения, Показатели)
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		ЗаполнитьПоясненияКРасчетуОбъектДоходы(Пояснения, Показатели);
	Иначе
		ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(Пояснения, Показатели);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходы(ТаблицаЭтапы, Показатели)
	
	ЕстьНаемныеРаботники = Показатели.ПроцентУменьшенияНалога = 50;
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = Строка(Показатели.СтавкаНалога) + "%";
	Доходы                        = Формат(Показатели.Доходы, ФорматЧиселВПояснении);
	ВозвратыПокупателям           = Формат(Показатели.ВозвратыПокупателям, ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего, ФорматЧиселВПояснении);
	УменьшениеНалогаФакт      = Формат(Показатели.УменьшениеНалогаФакт, ФорматЧиселВПояснении);
	НалоговыйВычет            = Формат(
		Показатели.УменьшениеНалогаФакт + Показатели.ТорговыйСборУменьшающийНалог, ФорматЧиселВПояснении);
	РасходыУменьшающиеНалог       = Формат(Показатели.РасходыУменьшающиеНалог, ФорматЧиселВПояснении);
	ТорговыйСборУменьшающийНалог  = Формат(Показатели.ТорговыйСборУменьшающийНалог, ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего, ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи, ФорматЧиселВПояснении);
	АвансовыеПлатежиИсчисленные   = Формат(Показатели.АвансовыеПлатежиИсчисленные, ФорматЧиселВПояснении);
	Переплата                     = Формат(Показатели.Переплата, ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате, ФорматЧиселВПояснении);
	НалогДляУведомления           = Формат(Показатели.НалогДляУведомления,         ФорматЧиселВПояснении);
	
	НалоговаяБазаДоПревышенияЛимитов = Формат(Показатели.НалоговаяБазаДоПревышенияЛимитов, ФорматЧиселВПояснении);
	НалогДоПревышенияЛимитов = Формат(Показатели.НалогДоПревышенияЛимитов, ФорматЧиселВПояснении);
	
	НомерЭтапа = 0;
	
	// Этап №1 - доходы.
	НомерЭтапа = НомерЭтапа + 1;
	
	Если Показатели.ПрименяетсяПовышеннаяСтавкаНалога
		И Не Показатели.ЭтоПервыйОтчетныйПериод
		И Не Показатели.ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода Тогда
		
		Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
			ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = (Доходы - Возвраты покупателям - Налоговая база за %2) * Ставка налога + Налог за %2'");
		Иначе
			ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = (Доходы - Налоговая база за %2) * Ставка налога + Налог за %2'");
		КонецЕсли;
		ОсновнойТекст = СтрШаблон(
			ШаблонОсновногоТекста,
			ПредставлениеПериодаПояснение,
			Показатели.ПредставлениеПериодаДоПревышенияЛимитов);
		
		Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
			ДополнительныйТекст = СтрШаблон(
				"(%1 - %2 - %3) * %4 + %5", 
				Доходы, ВозвратыПокупателям, НалоговаяБазаДоПревышенияЛимитов, СтавкаНалога, НалогДоПревышенияЛимитов);
		Иначе
			ДополнительныйТекст = СтрШаблон(
				"(%1 - %2) * %3 + %4", 
				Доходы, НалоговаяБазаДоПревышенияЛимитов, СтавкаНалога, НалогДоПревышенияЛимитов);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
			ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = (Доходы - Возвраты покупателям) * Ставка налога'");
		Иначе
			ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = Доходы * Ставка налога'");
		КонецЕсли;
		ОсновнойТекст = СтрШаблон(ШаблонОсновногоТекста, ПредставлениеПериодаПояснение);
		
		Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
			ДополнительныйТекст = СтрШаблон("(%1 - %2) * %3", Доходы, ВозвратыПокупателям, СтавкаНалога);
		Иначе
			ДополнительныйТекст = СтрШаблон("%1 * %2", Доходы, СтавкаНалога);
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		НалогВсего);
	
	// Этап №2 - налоговый вычет.
	НомерЭтапа = НомерЭтапа + 1;
	
	Если Показатели.ПлательщикТорговогоСбора Тогда // Налоговый вычет с подчиненными показателями.
	
		// Заглавный этап - общий налоговый вычет.
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(НСтр("ru = 'Налоговый вычет'")),
			НалоговыйВычет);
		
		// Подчиненный этап № 2.1 - взносы, больничные, страхование.
		Если ЕстьНаемныеРаботники Тогда
			ОсновнойТекст =
				СтрШаблон(НСтр("ru = 'Взносы, больничные, страхование: не более 50%% от налога за %1'"), ПредставлениеПериодаПояснение);
			
			ПоловинаНалогаСумма = Окр(Показатели.НалогВсего / 2, 2);
			ПоловинаНалога = Формат(ПоловинаНалогаСумма, ФорматЧиселВПояснении);
			Если Показатели.РасходыУменьшающиеНалог < ПоловинаНалогаСумма Тогда
				ЗнакСравнения = "<";
			Иначе
				ЗнакСравнения = ">";
			КонецЕсли;
			
			ДополнительныйТекст = СтрШаблон("%1 %2 %3", РасходыУменьшающиеНалог, ЗнакСравнения, ПоловинаНалога);
		Иначе
			ОсновнойТекст = НСтр("ru = 'Взносы в фиксированном размере'");
			ДополнительныйТекст = "";
		КонецЕсли;
		
		ЗначениеЭтапа = УменьшениеНалогаФакт;
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа, 1),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			ЗначениеЭтапа);
		
		// Подчиненный этап № 2.2 - торговый сбор.
		Если Показатели.УменьшатьНалогНаТорговыйСбор Тогда
			ДобавитьЭтапРасчета(ТаблицаЭтапы,
				ПредставлениеНомераЭтапа(НомерЭтапа, 2),
				ПояснениеЭтапа(НСтр("ru = 'Торговый сбор'")),
				Новый ФорматированнаяСтрока(ТорговыйСборУменьшающийНалог, , , , "РасшифровкаТорговогоСбораУменьшающегоНалог"));
		Иначе
			ОсновнойТекст = НСтр("ru = 'Торговый сбор: не уменьшает налог'");
			ДополнительныйТекст = НСтр("ru = 'организация зарегистрирована не в регионе уплаты торгового сбора'");
			
			ДобавитьЭтапРасчета(ТаблицаЭтапы,
				ПредставлениеНомераЭтапа(НомерЭтапа, 2),
				ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
				ТорговыйСборУменьшающийНалог);
		КонецЕсли;
		
	Иначе
		
		// Простой налоговый вычет без подчиненных этапов.
		Если ЕстьНаемныеРаботники Тогда
			ОсновнойТекст = НСтр("ru = 'Налоговый вычет: взносы, больничные, добровольное страхование'");
			
			ПоловинаНалогаСумма = Окр(Показатели.НалогВсего / 2, 2);
			ПоловинаНалога = Формат(ПоловинаНалогаСумма, ФорматЧиселВПояснении);
			Если Показатели.РасходыУменьшающиеНалог < ПоловинаНалогаСумма Тогда
				ЗнакСравнения = "<";
			Иначе
				ЗнакСравнения = ">";
			КонецЕсли;
			
			ДополнительныйТекст = СтрШаблон("не более 50%% от налога за %1: %2 %3 %4",
				ПредставлениеПериодаПояснение, РасходыУменьшающиеНалог, ЗнакСравнения, ПоловинаНалога);
			ЗначениеЭтапа = УменьшениеНалогаФакт;
		ИначеЕсли Показатели.СуммаВзносаДляУменьшения > 0 Тогда
			// Выводим расчет с учетом взносов, подлежащих уплате
			
			Если Показатели.ДоляДоходовПоУСН < 100 Тогда
				// Есть совмещение с ПСН
				
				Если Показатели.УплаченныеСтраховыеВзносы > 0 Тогда
					// Оплачена задолженность за периоды до ЕНС
					ОсновнойТекст = НСтр("ru = 'Налоговый вычет = Взносы, подлежащие уплате + Уплаченные взносы'");
					ДополнительныйТекст = СтрШаблон("%1 + %2",
						Формат(Показатели.СуммаВзносаДляУменьшения, ФорматЧиселВПояснении),
						Формат(Показатели.УплаченныеСтраховыеВзносы, ФорматЧиселВПояснении));
				Иначе
					ОсновнойТекст = НСтр("ru = 'Налоговый вычет = Взносы, подлежащие уплате'");
					ДополнительныйТекст = СтрШаблон("%1",
						Формат(Показатели.СуммаВзносаДляУменьшения, ФорматЧиселВПояснении));
				КонецЕсли;
			ИначеЕсли Показатели.УплаченныеСтраховыеВзносы > 0 Тогда
				// Оплачена задолженность за периоды до ЕНС
				ОсновнойТекст = НСтр("ru = 'Налоговый вычет = Взносы, подлежащие уплате + Уплаченные взносы'");
				ДополнительныйТекст = СтрШаблон("%1 + %2",
					Формат(Показатели.СуммаВзносаДляУменьшения, ФорматЧиселВПояснении),
					Формат(Показатели.УплаченныеСтраховыеВзносы, ФорматЧиселВПояснении));
			Иначе
				ОсновнойТекст = НСтр("ru = 'Налоговый вычет = Взносы, подлежащие уплате'");
				ДополнительныйТекст = СтрШаблон("%1",
					Формат(Показатели.СуммаВзносаДляУменьшения, ФорматЧиселВПояснении));
			КонецЕсли;
			ЗначениеЭтапа = УменьшениеНалогаФакт;
		Иначе
			ОсновнойТекст = НСтр("ru = 'Налоговый вычет: взносы в фиксированном размере'");
			ДополнительныйТекст = "";
			ЗначениеЭтапа = УменьшениеНалогаФакт;
		КонецЕсли;
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			ЗначениеЭтапа);
		
	КонецЕсли;
	
	// Этап №3 - начисленный налог.
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог исчисленный = Налог за %1 - Налоговый вычет'"), ПредставлениеПериодаПояснение);
	ДополнительныйТекст = СтрШаблон("%1 - %2", НалогВсего, НалоговыйВычет);
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		НалогИсчисленныйВсего);
	
	// Этап №4 - переплата (необязательный).
	ПоказыватьПереплату = Показатели.Переплата > 0;
	
	Если ПоказыватьПереплату Тогда
		
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = НСтр("ru = 'Переплата за прошлые годы'");
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст),
			Новый ФорматированнаяСтрока(Переплата, , , , НавигационнаяСсылкаПереплаты(Показатели)));
		
	КонецЕсли;
	
	ДобавитьЭтапОсвобождениеОтНалога(ТаблицаЭтапы, Показатели, НомерЭтапа);
	
	// Этап №5 - расчет суммы налога для Уведомления
	Если НомерКвартала > 1 Тогда
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(
			НСтр("ru = 'Рассчитанный налог = Налог исчисленный - Авансовый платеж за %1'"),
			ПредставлениеПериодаАванса);
		ДополнительныйТекст = СтрШаблон("%1 - %2", НалогИсчисленныйВсего, АвансовыеПлатежиИсчисленные);
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			НалогДляУведомления);
	КонецЕсли;
		
	// Этап №6 - оплаченный аванс
	Если НомерКвартала > 1 Тогда
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(
			НСтр("ru = 'Оплаченный аванс за %1'"),
			ПредставлениеПериодаАванса);
			
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ОсновнойТекст,
			Новый ФорматированнаяСтрока(АвансовыеПлатежи, , , , "РасшифровкаАванса"));
	КонецЕсли;

	// Этап №7 - окончательный расчет налога к уплате.
	НомерЭтапа = НомерЭтапа + 1;
	
	СодержимоеОсновногоТекста = Новый Массив;
	СодержимоеДополнительногоТекста = Новый Массив;
	
	СодержимоеОсновногоТекста.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт( , , Истина)));
	
	ТребуетсяРасшифровкаСуммы = (НомерКвартала > 1) Или ПоказыватьПереплату;
	
	Если ТребуетсяРасшифровкаСуммы Тогда
		
		ЧастиРасшифровкиОсновногоТекста = Новый Массив;
		
		ЧастиРасшифровкиОсновногоТекста.Добавить(" =");
		ЧастиРасшифровкиОсновногоТекста.Добавить(НСтр("ru = 'Налог исчисленный'"));
		
		ЗнакВычитания = "-";
		
		СодержимоеДополнительногоТекста.Добавить(НалогИсчисленныйВсего);
		
		Если НомерКвартала > 1 Тогда
			ТекстАванс = НСтр("ru = 'Оплаченный аванс'");
			
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(АвансовыеПлатежи);
		КонецЕсли;
		
		Если Показатели.ОсвобождениеОтНалога <> 0 Тогда
			
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(НСтр("ru = 'Освобождение от налога'"));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(Формат(Показатели.ОсвобождениеОтНалога, ФорматЧиселВПояснении));
			
		КонецЕсли;
		
		Если ПоказыватьПереплату Тогда
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(НСтр("ru = 'Переплата'"));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(Переплата);
		КонецЕсли;
		
		СодержимоеОсновногоТекста.Добавить(СтрСоединить(ЧастиРасшифровкиОсновногоТекста, " "));
		
	КонецЕсли;
	
	ОсновнойТекст = Новый ФорматированнаяСтрока(СодержимоеОсновногоТекста);
	ДополнительныйТекст = СтрСоединить(СодержимоеДополнительногоТекста, " ");
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт( , , Истина)));
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(ТаблицаЭтапы, Показатели)
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0; ЧО=2'");
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = "" + Показатели.СтавкаНалога + "%";
	Доходы                        = Формат(Показатели.Доходы,                      ФорматЧиселВПояснении);
	Расходы                       = Формат(Показатели.Расходы,                     ФорматЧиселВПояснении);
	ПеренесенныеУбытки            = Формат(Показатели.ПеренесенныеУбытки,          ФорматЧиселВПояснении);
	НалоговаяБаза                 = Формат(Показатели.НалоговаяБаза,               ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего,                  ФорматЧиселВПояснении);
	МинимальныйНалог              = Формат(Показатели.МинимальныйНалог,            ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего,       ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,            ФорматЧиселВПояснении);
	АвансовыеПлатежиИсчисленные   = Формат(Показатели.АвансовыеПлатежиИсчисленные, ФорматЧиселВПояснении);
	Переплата                     = Формат(Показатели.Переплата,                   ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате,                ФорматЧиселВПояснении);
	НалогДляУведомления           = Формат(Показатели.НалогДляУведомления,         ФорматЧиселВПояснении);
	
	НалоговаяБазаДоПревышенияЛимитов = Формат(Показатели.НалоговаяБазаДоПревышенияЛимитов, ФорматЧиселВПояснении);
	НалогДоПревышенияЛимитов = Формат(Показатели.НалогДоПревышенияЛимитов, ФорматЧиселВПояснении);
	
	НомерЭтапа = 0;
	
	// Этап № 1 - налоговая база.
	НомерЭтапа = НомерЭтапа + 1;
	
	Если Показатели.ПрименяетсяПовышеннаяСтавкаНалога
		И Не Показатели.ЭтоПервыйОтчетныйПериод
		И Не Показатели.ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода Тогда
		
		Если НомерКвартала = 4 Тогда
			ОсновнойТекст       = НСтр("ru = 'Налоговая база за %1 = Доходы - Расходы - Убытки прошлых лет'");
			ДополнительныйТекст = СтрШаблон("%1 - %2 - %3", Доходы, Расходы, ПеренесенныеУбытки);
		Иначе
			ОсновнойТекст       = НСтр("ru = 'Налоговая база за %1 = Доходы - Расходы'");
			ДополнительныйТекст = СтрШаблон("%1 - %2", Доходы, Расходы);
		КонецЕсли;
		
		ОсновнойТекст = СтрШаблон(ОсновнойТекст, ПредставлениеПериодаПояснение);
		
	Иначе
		
		Если НомерКвартала = 4 Тогда
			ОсновнойТекст       = НСтр("ru = 'Налоговая база = Доходы - Расходы - Убытки прошлых лет'");
			ДополнительныйТекст = СтрШаблон("%1 - %2 - %3", Доходы, Расходы, ПеренесенныеУбытки);
		Иначе
			ОсновнойТекст       = НСтр("ru = 'Налоговая база = Доходы - Расходы'");
			ДополнительныйТекст = СтрШаблон("%1 - %2", Доходы, Расходы);
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		НалоговаяБаза);
	
	// Этап № 2 - налог всего.
	НомерЭтапа = НомерЭтапа + 1;
	
	Если Показатели.ПрименяетсяПовышеннаяСтавкаНалога
		И Не Показатели.ЭтоПервыйОтчетныйПериод
		И Не Показатели.ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода Тогда
		
		ОсновнойТекст = СтрШаблон(
			НСтр("ru = 'Налог за %1 = (Налоговая база за %1 - Налоговая база за %2) *%3Ставка налога +%3Налог за %2'"),
			ПредставлениеПериодаПояснение, Показатели.ПредставлениеПериодаДоПревышенияЛимитов, Символы.НПП);
		
		ДополнительныйТекст = СтрШаблон(
			"(%1 - %2) * %3 + %4",
			НалоговаяБаза, НалоговаяБазаДоПревышенияЛимитов, СтавкаНалога, НалогДоПревышенияЛимитов);
		
	Иначе
		
		ОсновнойТекст       = СтрШаблон(
			НСтр("ru = 'Налог за %1 = Налоговая база * Ставка налога'"), ПредставлениеПериодаПояснение);
		ДополнительныйТекст = СтрШаблон("%1 * %2", НалоговаяБаза, СтавкаНалога);
		
	КонецЕсли;
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		НалогВсего);
	
	// Этапы № 3,4 - учет минимального налога (необязательные).
	Если НомерКвартала = 4 Тогда
		
		// Этап №3 - минимальный налог.
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст       = НСтр("ru = 'Минимальный налог = Доходы * 1%'");
		ДополнительныйТекст = СтрШаблон("%1 * 1%%", Доходы);
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			МинимальныйНалог);
		
		// Этап № 4 - учет минимального налога.
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст       = НСтр("ru = 'Налог исчисленный (наибольшее значение из Налога за год и Минимального налога)'");
		
		ЗнакСравнения = ?(Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог, "<", ">");
		ДополнительныйТекст = СтрШаблон("%1 %2 %3", НалогИсчисленныйВсего, ЗнакСравнения, МинимальныйНалог);
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			Формат(Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог), ФорматЧиселВПояснении));
		
	КонецЕсли;
	
	ДобавитьЭтапОсвобождениеОтНалога(ТаблицаЭтапы, Показатели, НомерЭтапа);
	
	ПоказыватьПереплату = Показатели.Переплата > 0;
	
	// Этап №5 - переплата (необязательный).
	Если ПоказыватьПереплату Тогда
		
		НомерЭтапа = НомерЭтапа + 1;
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(НСтр("ru = 'Переплата за прошлые годы'")),
			Новый ФорматированнаяСтрока(Переплата, , , , НавигационнаяСсылкаПереплаты(Показатели)));
		
	КонецЕсли;
	
	// Этап №6 - расчет суммы налога для Уведомления
	Если НомерКвартала > 1 Тогда
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(
			НСтр("ru = 'Рассчитанный налог = Налог исчисленный - Авансовый платеж за %1'"),
			ПредставлениеПериодаАванса);
		ДополнительныйТекст = СтрШаблон("%1 - %2", НалогИсчисленныйВсего, АвансовыеПлатежиИсчисленные);
		
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
			НалогДляУведомления);
	КонецЕсли;
		
	// Этап №7 - оплаченный аванс
	Если НомерКвартала > 1 Тогда
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(
			НСтр("ru = 'Оплаченный аванс за %1'"),
			ПредставлениеПериодаАванса);
			
		ДобавитьЭтапРасчета(ТаблицаЭтапы,
			ПредставлениеНомераЭтапа(НомерЭтапа),
			ОсновнойТекст,
			Новый ФорматированнаяСтрока(АвансовыеПлатежи, , , , "РасшифровкаАванса"));
	КонецЕсли;
	
	// Этап №8 - окончательный расчет налога к уплате
	НомерЭтапа = НомерЭтапа + 1;
	
	СодержимоеОсновногоТекста = Новый Массив;
	СодержимоеДополнительногоТекста = Новый Массив;
	
	СодержимоеОсновногоТекста.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт( , , Истина)));
	
	ТребуетсяРасшифровкаСуммы = (НомерКвартала > 1) Или ПоказыватьПереплату;
	
	Если ТребуетсяРасшифровкаСуммы Тогда
		
		ЧастиРасшифровкиОсновногоТекста = Новый Массив;
		
		ЗнакВычитания = "-";
		
		НалогЗаПериод = НалогИсчисленныйВсего;
		
		Если НомерКвартала = 4 Тогда
			ТекстНалогЗаПериод = НСтр("ru = 'Налог исчисленный'");
			Если Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог Тогда
				НалогЗаПериод = МинимальныйНалог;
			КонецЕсли;
		Иначе
			ТекстНалогЗаПериод = СтрШаблон(НСтр("ru = 'Налог за %1'"), ПредставлениеПериодаПояснение);
		КонецЕсли;
		
		ЧастиРасшифровкиОсновногоТекста.Добавить(" =");
		ЧастиРасшифровкиОсновногоТекста.Добавить(ТекстНалогЗаПериод);
		
		СодержимоеДополнительногоТекста.Добавить(НалогЗаПериод);
		
		Если НомерКвартала > 1 Тогда
			ТекстАванс = НСтр("ru = 'Оплаченный аванс'");
			
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(АвансовыеПлатежи);
		КонецЕсли;
		
		Если Показатели.ОсвобождениеОтНалога <> 0 Тогда
			
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(НСтр("ru = 'Освобождение от налога'"));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(Формат(Показатели.ОсвобождениеОтНалога, ФорматЧиселВПояснении));
			
		КонецЕсли;
		
		Если ПоказыватьПереплату Тогда
			ЧастиРасшифровкиОсновногоТекста.Добавить(ЗнакВычитания);
			ЧастиРасшифровкиОсновногоТекста.Добавить(НСтр("ru = 'Переплата'"));
			
			СодержимоеДополнительногоТекста.Добавить(ЗнакВычитания);
			СодержимоеДополнительногоТекста.Добавить(Переплата);
		КонецЕсли;
		
		СодержимоеОсновногоТекста.Добавить(СтрСоединить(ЧастиРасшифровкиОсновногоТекста, " "));
		
	КонецЕсли;
	
	ОсновнойТекст = Новый ФорматированнаяСтрока(СодержимоеОсновногоТекста);
	ДополнительныйТекст = СтрСоединить(СодержимоеДополнительногоТекста, " ");
	
	ДобавитьЭтапРасчета(ТаблицаЭтапы,
		ПредставлениеНомераЭтапа(НомерЭтапа),
		ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст),
		Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт( , , Истина)));
		
КонецПроцедуры

Функция ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст = Неопределено)
	
	СодержимоеСтроки = Новый Массив;
	
	СодержимоеСтроки.Добавить(ОсновнойТекст);
	
	Если Не ПустаяСтрока(ДополнительныйТекст) Тогда
		СодержимоеСтроки.Добавить(Символы.ПС);
		СодержимоеСтроки.Добавить("(");
		СодержимоеСтроки.Добавить(ДополнительныйТекст);
		СодержимоеСтроки.Добавить(")");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция ПредставлениеНомераЭтапа(НомерОсновногоЭтапа, НомерПодчиненногоЭтапа = 0)
	
	Если Не ЗначениеЗаполнено(НомерПодчиненногоЭтапа) Тогда
		
		// Основной этап - без отступа с единичным номером.
		Возврат СтрШаблон("%1.", НомерОсновногоЭтапа);
		
	Иначе
		
		// Подчиненный этап - с отступом и двойным номером.
		Отступ = "    ";
		Возврат СтрШаблон("%1%2.%3.", Отступ, НомерОсновногоЭтапа, НомерПодчиненногоЭтапа);
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЭтапРасчета(ЭтапыРасчета, НомерЭтапа, Пояснение, Значение)
	
	Этап = ЭтапыРасчета.Добавить();
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение  = Пояснение;
	Этап.Значение   = Значение;
	
КонецПроцедуры

Процедура ДобавитьЭтапОсвобождениеОтНалога(ТаблицаЭтапы, Показатели, НомерЭтапа)
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	
	Если Показатели.ПрименяетсяОсвобождениеВТекущемПериоде И Показатели.ОсвобождениеОтНалога <> 0 Тогда
		
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = СтрШаблон(НСтр("ru = 'Освобождение от налога за %1 квартал'"), Показатели.НомерКвартала);
		ОсвобождениеОтНалога = Формат(Показатели.ОсвобождениеОтНалога, ФорматЧиселВПояснении);
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение  = ПояснениеЭтапа(ОсновнойТекст);
		Этап.Значение   = Новый ФорматированнаяСтрока(
			ОсвобождениеОтНалога, , , ,
			"СправкаРасчетУСН");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеПериодаДляПояснения(НомерКвартала)
	
	ПредставлениеПериодаДляПояснения = "";
	
	Если НомерКвартала = 1 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 квартал'");
	ИначеЕсли НомерКвартала = 2 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 полугодие'");
	ИначеЕсли НомерКвартала = 3 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '9 месяцев'");
	ИначеЕсли НомерКвартала = 4 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = 'год'");
	КонецЕсли;
	
	Возврат ПредставлениеПериодаДляПояснения;
	
КонецФункции

Функция НавигационнаяСсылкаПереплаты(Показатели)
	
	Если Показатели.Переплата > 0 И Не Показатели.ТребуетсяВводНачальныхОстатков Тогда
		Возврат "РасшифровкаПереплаты";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйПоясненияРасчета()
	
	Пояснения = Новый ТаблицаЗначений;
	
	ОписаниеТиповПояснений = Новый ОписаниеТипов("Строка, ФорматированнаяСтрока");
	
	Пояснения.Колонки.Добавить("НомерЭтапа", ОписаниеТиповПояснений);
	Пояснения.Колонки.Добавить("Пояснение",  ОписаниеТиповПояснений);
	Пояснения.Колонки.Добавить("Значение",   ОписаниеТиповПояснений);
	
	Возврат Пояснения;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьАктуальныеПоказатели(Показатели)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Показатели.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Показатели.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Показатели.КонецПериода);
	Запрос.УстановитьПараметр("УменьшатьНалогНаТорговыйСбор", Показатели.УменьшатьНалогНаТорговыйСбор);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНалогаНаТорговомСборе.Доходы КАК ДоходыТорговыйСбор
	|ПОМЕСТИТЬ РасчетНалогаПоДеятельностиНаТорговомСборе
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаНаТорговомСборе
	|ГДЕ
	|	&УменьшатьНалогНаТорговыйСбор
	|	И РасчетНалогаНаТорговомСборе.Организация = &Организация
	|	И РасчетНалогаНаТорговомСборе.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетНалогаНаТорговомСборе.ДеятельностьНаТорговомСборе
	|	И РасчетНалогаНаТорговомСборе.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетНалогаНаТорговомСборе.ПериодРасчета УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНалогаУСН.ПериодРасчета КАК ПериодРасчета,
	|	РасчетНалогаУСН.Организация КАК Организация,
	|	РасчетНалогаУСН.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	РасчетНалогаУСН.Доходы КАК Доходы,
	|	ЕСТЬNULL(РасчетНалогаПоДеятельностиНаТорговомСборе.ДоходыТорговыйСбор, 0) КАК ДоходыТорговыйСбор,
	|	РасчетНалогаУСН.Расходы КАК Расходы,
	|	РасчетНалогаУСН.ПеренесенныеУбытки КАК ПеренесенныеУбытки,
	|	РасчетНалогаУСН.НалоговаяБаза КАК НалоговаяБаза,
	|	РасчетНалогаУСН.НалогВсего КАК НалогВсего,
	|	РасчетНалогаУСН.РасходыУменьшающиеНалог КАК РасходыУменьшающиеНалог,
	|	РасчетНалогаУСН.ПроцентУменьшенияНалога КАК ПроцентУменьшенияНалога,
	|	РасчетНалогаУСН.УменьшениеНалогаФакт КАК УменьшениеНалогаФакт,
	|	РасчетНалогаУСН.УплаченныйТорговыйСбор КАК УплаченныйТорговыйСбор,
	|	РасчетНалогаУСН.ТорговыйСборУменьшающийНалог КАК ТорговыйСборУменьшающийНалог,
	|	РасчетНалогаУСН.НалогИсчисленныйВсего КАК НалогИсчисленныйВсего,
	|	РасчетНалогаУСН.МинимальныйНалог КАК МинимальныйНалог,
	|	РасчетНалогаУСН.АвансовыеПлатежи КАК АвансовыеПлатежиИсчисленные,
	|	РасчетНалогаУСН.ВозвратыПокупателям КАК ВозвратыПокупателям,
	|	ВЫБОР
	|		КОГДА РасчетНалогаУСН.НалогКУплате < 0
	|			ТОГДА 0
	|		ИНАЧЕ РасчетНалогаУСН.НалогКУплате
	|	КОНЕЦ КАК НалогКУплате,
	|	РасчетНалогаУСН.НалогКУплате КАК НалогДляУведомления
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетНалогаПоДеятельностиНаТорговомСборе КАК РасчетНалогаПоДеятельностиНаТорговомСборе
	|		ПО (&УменьшатьНалогНаТорговыйСбор)
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|	И РасчетНалогаУСН.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетНалогаУСН.ПериодРасчета УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Показатели, Выборка);
		
		Показатели.НалогНачислен = Истина;
		
		Если Показатели.НомерКвартала = 4 И Не Показатели.ОбъектНалогообложенияДоходы Тогда
			Показатели.Расходы             = Показатели.Расходы - Показатели.УбытокОтУплатыМинимальногоНалога;
			Показатели.ПеренесенныеУбытки  = Показатели.ПеренесенныеУбытки + Показатели.УбытокОтУплатыМинимальногоНалога;
		КонецЕсли;
	КонецЕсли;
	
	Показатели.ОсвобождениеОтНалога = НалоговыйУчет.СуммаОсвобожденияОтНалога(
		Показатели.Организация,
		Показатели.НачалоНалоговогоПериода,
		Показатели.КонецПериода,
		ПланыСчетов.Хозрасчетный.ЕНприУСН);
	
	Если Не Показатели.ОбъектНалогообложенияДоходы И Показатели.НомерКвартала = 4 Тогда
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Показатели.Организация, Показатели.НачалоПериода, Показатели.КонецПериода);
		
		Показатели.РегистрацияСуммыУбыткаУСН = Убытки.Ссылка;
		
	КонецЕсли;
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		
		УпрощенныйЗачетФиксированныхВзносов = УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(
			Показатели.Организация,
			Показатели.КонецПериода);
		
		Показатели.УплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы(
			Показатели.Организация,
			Показатели.НачалоНалоговогоПериода,
			Показатели.КонецПериода);
		
		Показатели.УплаченныеСтраховыеВзносыПоСроку = УчетСтраховыхВзносовИП.УплаченныеСтраховыеВзносыПоСроку(
			Показатели.Организация,
			Показатели.НачалоНалоговогоПериода,
			Показатели.КонецПериода);
		
		Если УпрощенныйЗачетФиксированныхВзносов Тогда
			
			// Включаем взносы, подлежащие уплате в текущем налоговом периоде
			// Федеральный закон от 31.07.2023 N 389-ФЗ
			
			ВзносыСДоходов = УчетСтраховыхВзносовИП.ВзносыСДоходовПодлежащиеУплате(
				Показатели.Организация,
				Показатели.КонецПериода);
			
			// В уплаченных страховых взносах могут быть суммы, зачтенные по заявлениям, и взносы за работников
			// В упрощенном зачете показываем на форме уплаченные взносы без зарезервированных сумм,
			// т.к. взносы ИП отображаются в группе Взносы, подлежащие уплате
			// Исключим взносы, которые были уже зачтены по заявлениям в текущем периоде
			ЗачтеноПоЗаявлениямЗаТекущийГод = УчетСтраховыхВзносовИП.ЗарезервированныеСуммыВзносовЗаНалоговыйПериод(
				Показатели.Организация,
				Показатели.НачалоНалоговогоПериода,
				Показатели.КонецПериода);
			
			Показатели.УплаченныеСтраховыеВзносы =
				Макс(0, Показатели.УплаченныеСтраховыеВзносыПоСроку - ЗачтеноПоЗаявлениямЗаТекущийГод);
			
			Показатели.ВзносПоЕдиномуТарифу = УчетСтраховыхВзносовИП.ВзносыПоЕдиномуТарифуПодлежащиеУплате(
				Показатели.Организация,
				Показатели.КонецПериода);
			
			Показатели.ВзносСДоходов = ВзносыСДоходов.Всего;
			
			УчтенныеВзносыПодлежащиеУплате = УчетСтраховыхВзносовИП.СкорректированнаяСуммаВзносовПодлежащихУплате(
				Показатели.Организация,
				Показатели.КонецПериода);
				
			Если УчтенныеВзносыПодлежащиеУплате <> Неопределено Тогда
				Показатели.СуммаВзносаДляУменьшения = УчтенныеВзносыПодлежащиеУплате;
				Показатели.СуммаВзносаСкорректирована = Истина;
			Иначе
				Показатели.СуммаВзносаДляУменьшения =
					Показатели.ВзносСДоходов + Показатели.ВзносПоЕдиномуТарифу;
				Показатели.СуммаВзносаСкорректирована = Ложь;
			КонецЕсли;
			
			Если Не НачалоГода(Показатели.КонецПериода) = НачалоКвартала(Показатели.КонецПериода) Тогда
				ПредыдущийПериод = КонецКвартала(ДобавитьМесяц(Показатели.КонецПериода, -3));
				Показатели.СуммаВзносаЗаПрошлыйПериод = УчетСтраховыхВзносовИП.СкорректированнаяСуммаВзносовПодлежащихУплате(
					Показатели.Организация,
					ПредыдущийПериод);
				Если Показатели.СуммаВзносаЗаПрошлыйПериод = Неопределено Тогда
					Показатели.СуммаВзносаЗаПрошлыйПериод = 0;
					Запрос.УстановитьПараметр("ПредыдущийПериод", НачалоДня(ПредыдущийПериод));
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЕСТЬNULL(РасчетНалогаУСН.УменьшениеНалогаФакт, 0) КАК СуммаВзносаЗаПрошлыйПериод
					|ИЗ
					|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
					|ГДЕ
					|	РасчетНалогаУСН.Организация = &Организация
					|	И РасчетНалогаУСН.ПериодРасчета = &ПредыдущийПериод
					|	И НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
					|	И РасчетНалогаУСН.Активность
					|
					|УПОРЯДОЧИТЬ ПО
					|	РасчетНалогаУСН.ПериодРасчета УБЫВ";
					
					РезультатВзносыЗаПрошлыйПериод = Запрос.Выполнить().Выбрать();
					Если РезультатВзносыЗаПрошлыйПериод.Следующий() Тогда
						Показатели.СуммаВзносаЗаПрошлыйПериод = РезультатВзносыЗаПрошлыйПериод.СуммаВзносаЗаПрошлыйПериод;
					КонецЕсли;
					
					УплаченныеСтраховыеВзносыПоСрокуПредыдущийПериод = УчетСтраховыхВзносовИП.УплаченныеСтраховыеВзносыПоСроку(
						Показатели.Организация,
						Показатели.НачалоНалоговогоПериода,
						ПредыдущийПериод);
					ЗачтеноПоЗаявлениямЗаПредыдущийПериод = УчетСтраховыхВзносовИП.ЗарезервированныеСуммыВзносовЗаНалоговыйПериод(
						Показатели.Организация,
						Показатели.НачалоНалоговогоПериода,
						ПредыдущийПериод);
					УплаченныеСтраховыеВзносыПредыдущийПериод = 
						Макс(0, УплаченныеСтраховыеВзносыПоСрокуПредыдущийПериод - ЗачтеноПоЗаявлениямЗаПредыдущийПериод);
					
					Показатели.СуммаВзносаЗаПрошлыйПериод =
						Макс(0, Показатели.СуммаВзносаЗаПрошлыйПериод - УплаченныеСтраховыеВзносыПредыдущийПериод);
					Если Показатели.СуммаВзносаЗаПрошлыйПериод > Показатели.СуммаВзносаДляУменьшения Тогда
						ВзносыСДоходовПредыдущийПериод = УчетСтраховыхВзносовИП.ВзносыСДоходовПодлежащиеУплате(
							Показатели.Организация,
							ПредыдущийПериод);
						Показатели.СуммаВзносаЗаПрошлыйПериод = 
							ВзносыСДоходовПредыдущийПериод.Всего + Показатели.ВзносПоЕдиномуТарифу;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			УчитыватьПСН = (Показатели.КонецПериода >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы())
				И УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Показатели.Организация,
					Показатели.НачалоПериода,
					Показатели.КонецПериода);
			
			Если УчитыватьПСН Тогда
				Если Показатели.НомерКвартала = 4 Тогда
					Периодичность = Перечисления.Периодичность.Год;
				Иначе
					Периодичность = Перечисления.Периодичность.Квартал;
				КонецЕсли;
				ДоляДоходовУСН = 1 - УчетПСН.ДоляДоходовПатентнойСистемыНалогообложения(
					Показатели.Организация,
					Показатели.КонецПериода,
					Периодичность,
					Истина);
				Показатели.ДоляДоходовПоУСН = 100 * ДоляДоходовУСН;
				Если Не Показатели.СуммаВзносаСкорректирована Тогда
					Показатели.СуммаВзносаДляУменьшения = Показатели.СуммаВзносаДляУменьшения * ДоляДоходовУСН;
				КонецЕсли;
				ФиксированныеВзносы = (Показатели.ВзносСДоходов + Показатели.ВзносПоЕдиномуТарифу) * ДоляДоходовУСН;
			Иначе
				ФиксированныеВзносы = Показатели.ВзносСДоходов + Показатели.ВзносПоЕдиномуТарифу;
			КонецЕсли;
			
			// Доля по УСН может изменяться. Нужно контролировать, чтобы не израсходовать больше, чем есть взносов
			ИспользованныеВзносы = УчетСтраховыхВзносовИП.ВзносыПодлежащиеУплатеИспользованныеДляУменьшенияНалога(
				Показатели.Организация, Показатели.КонецПериода);
			НеиспользованныйОстаток = 
				Макс((Показатели.ВзносПоЕдиномуТарифу + Показатели.ВзносСДоходов) - ИспользованныеВзносы.Итого, 0);
				
			Показатели.МаксимальнаяСуммаВзноса = Мин(ФиксированныеВзносы, ИспользованныеВзносы.УСН_Доход + НеиспользованныйОстаток);
			
			Показатели.СуммаВзносаДляУменьшения =
				Мин(ИспользованныеВзносы.УСН_Доход + НеиспользованныйОстаток, Показатели.СуммаВзносаДляУменьшения);
			Показатели.ВзносыИспользованныеДляПатента = ИспользованныеВзносы.ПСН;
			
			// Пояснения по срокам
			
			СрокПоЕдиномуТарифу = УчетСтраховыхВзносовИП.СрокОплатыВзноса(Показатели.Организация, Показатели.КонецПериода);
			СрокСДоходов = УчетСтраховыхВзносовИП.СрокОплатыВзноса(Показатели.Организация, Показатели.КонецПериода, Истина);
			
			Показатели.ПодсказкаВзносПоЕдиномуТарифу = СтрШаблон(НСтр("ru = 'Срок оплаты - %1
				|Уменьшить налог следует в текущем периоде.'"),
				Формат(СрокПоЕдиномуТарифу, "ДЛФ=DD"));
			
			ТекущийГод = Год(Показатели.КонецПериода);
			
			Если ЗначениеЗаполнено(ВзносыСДоходов.ПереходныйПериод) Тогда
				Показатели.ПодсказкаВзносСДоходов = СтрШаблон(НСтр("ru = 'Взнос за %1 г. - %2 руб.
					|Взнос за %3 г. - %4 руб. (для уменьшения в %5 г. приниматься не будет)'"),
					Формат(ТекущийГод - 1, "ЧГ=0"),
					ВзносыСДоходов.ЗаТекущийГод,
					Формат(ТекущийГод, "ЧГ=0"),
					ВзносыСДоходов.ПереходныйПериод,
					Формат(ТекущийГод + 1, "ЧГ=0"));
			ИначеЕсли Не ЗначениеЗаполнено(ВзносыСДоходов.Всего) Тогда
				Показатели.ПодсказкаВзносСДоходов = СтрШаблон(
					НСтр("ru = 'Принят к вычету в %1 г.'"),
					Формат(ТекущийГод - 1, "ЧГ=0"));
			Иначе
				Показатели.ПодсказкаВзносСДоходов = СтрШаблон(НСтр(
					"ru = 'Взнос за %1 г. можно принять в налоговой базе в %2 г. (срок оплаты - %3)'"),
					Формат(ТекущийГод - 1, "ЧГ=0"),
					Формат(ТекущийГод, "ЧГ=0"),
					Формат(СрокСДоходов, "ДЛФ=DD"));
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Показатели.ОбъектНалогообложенияДоходы И Показатели.ПлательщикТорговогоСбора
		И Не Показатели.УменьшатьНалогНаТорговыйСбор Тогда
		
		// Налог не уменьшается на торговый сбор, сумма уплаченного сбора в данных справки-расчета отсутствует.
		// Для отображения в форме нужно заполнить ее по данным учета.
		Показатели.УплаченныйТорговыйсбор = УчетУСН.УплаченныйТорговыйСбор(
			Показатели.Организация,
			Показатели.НачалоНалоговогоПериода,
			Показатели.КонецПериода);
		
	КонецЕсли;
	
	// Параметры повышенной ставки.
	
	СтавкиНалогаУСН = УчетУСН.СтавкиНалогаУСН(Показатели.Организация, Показатели.КонецПериода);
	
	ПараметрыПримененияПовышеннойСтавки = УчетУСН.ПараметрыПримененияПовышеннойСтавкиНалога(
		Показатели.Организация, Показатели.КонецПериода);
	Если ПараметрыПримененияПовышеннойСтавки.ПрименяетсяПовышеннаяСтавка Тогда
		
		Показатели.ПрименяетсяПовышеннаяСтавкаНалога = Истина;
		Показатели.ПериодПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.ПериодПревышенияЛимитов;
		
		Показатели.ПредставлениеПериодаДоПревышенияЛимитов = ПредставлениеПериодаДляПояснения(
			ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Показатели.ПериодПревышенияЛимитов) - 1);
		
		Показатели.НалоговаяБазаДоПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.НалоговаяБазаДоПревышенияЛимитов;
		Показатели.НалогДоПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.НалогДоПревышенияЛимитов;
		
		Показатели.ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода =
			КонецКвартала(Показатели.НачалоНалоговогоПериода) = КонецКвартала(Показатели.ПериодПревышенияЛимитов);
		
		Если Показатели.НалоговаяБаза < Показатели.НалоговаяБазаДоПревышенияЛимитов Тогда
			Показатели.СтавкаНалога = СтавкиНалогаУСН.ОсновнаяСтавка;
		Иначе
			Показатели.СтавкаНалога = СтавкиНалогаУСН.ПовышеннаяСтавка;
		КонецЕсли;
		
	Иначе
		
		Показатели.СтавкаНалога = СтавкиНалогаУСН.ОсновнаяСтавка;
		
	КонецЕсли;
	
	// Параметры льготной ставки.
	
	ПараметрыПримененияЛьготнойСтавки = УчетУСН.ПараметрыПримененияЛьготнойСтавкиНалога(
		Показатели.Организация,
		Показатели.КонецПериода,
		ПараметрыПримененияПовышеннойСтавки.ПериодПревышенияЛимитов);
	
	Показатели.ПрименяласьЛьготнаяСтавкаНалога = ПараметрыПримененияЛьготнойСтавки.ПрименяласьЛьготнаяСтавка;
	Показатели.ОснованиеЛьготнойСтавкиЗаполнено = ЗначениеЗаполнено(ПараметрыПримененияЛьготнойСтавки.ОснованиеЛьготнойСтавки);
	Показатели.ОснованиеЛьготнойСтавкиПредставление = ПредставлениеОснованияЛьготнойСтавки(
		Показатели.ПрименяласьЛьготнаяСтавкаНалога,
		ПараметрыПримененияЛьготнойСтавки.ОснованиеЛьготнойСтавки);
	
	Показатели.СтавкаНалогаПредставление = ПредставлениеНалоговойСтавки(
		Показатели.СтавкаНалога,
		ПараметрыПримененияЛьготнойСтавки.ПрименяетсяЛьготнаяСтавка);
	
	Показатели.ГраницаОтчетностиПрошлыхПериодов
		= ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Показатели.Организация);
	
	Показатели.ТребуетсяВводНачальныхОстатков = ТребуетсяВводНачальныхОстатков(Показатели);
	
	// При расчете суммы к оплате учитываем фактически уплаченные авансовые платежи, а не начисленные.
	КонецПредыдущегоКвартала = КонецКвартала(ДобавитьМесяц(Показатели.КонецПериода, -3));
	Показатели.АвансовыеПлатежи = НалогУплаченныйЗаПериод(
		Показатели.Организация, Показатели.НачалоПериода, КонецПредыдущегоКвартала);
	
	ОстатокРасчетовЗаПредыдущиеПериоды
		= УчетУСН.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Показатели.Организация, Показатели.НачалоПериода);
	Если ОстатокРасчетовЗаПредыдущиеПериоды > 0 Тогда
		// На ЕНС нет переплат. В переходный период с 2022 на 2023 год переплата будет перенесена
		// помощником на счет ЕНС 01.01.23 года, но будет еще отражаться в 2022 году
		Если УчетнаяПолитика.ПлательщикЕНП(Показатели.Организация, Показатели.НачалоПериода) Тогда
			Показатели.Переплата = 0;
		Иначе
			Показатели.Переплата = ОстатокРасчетовЗаПредыдущиеПериоды;
		КонецЕсли;
	Иначе
		Показатели.Задолженность = - ОстатокРасчетовЗаПредыдущиеПериоды;
	КонецЕсли;
	
	// В сумме к уплате учитывается переплата на начало года и уплаченные авансовые платежи
	Если Не Показатели.ОбъектНалогообложенияДоходы И Показатели.НомерКвартала = 4 Тогда
		НалогИсчисленныйВсего = Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог);
	Иначе
		НалогИсчисленныйВсего = Показатели.НалогИсчисленныйВсего;
	КонецЕсли;
	Показатели.НалогКУплате = Макс(0, НалогИсчисленныйВсего
		- Показатели.Переплата
		- Показатели.АвансовыеПлатежи
		- Показатели.ОсвобождениеОтНалога);
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Выделяем возвраты покупателям
		Показатели.Доходы = Показатели.Доходы + Показатели.ВозвратыПокупателям;
	Иначе
		// Не выделяем
		Показатели.ВозвратыПокупателям = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПорядокДействий(Показатели)
	
	ОписаниеДействияДекларация = ОписаниеДействияДекларация(Показатели.Организация, Показатели.КонецПериода);
	
	Показатели.ЕстьДекларация = ЗначениеЗаполнено(ОписаниеДействияДекларация)
		И ОписаниеДействияДекларация.Свойство("ИмяФормы")
		И ОписаниеДействияДекларация.Свойство("ПараметрыФормы")
		И ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ", Показатели.Декларация);
	
	Если Показатели.ЕстьДекларация Тогда
		
		Если Показатели.НомерКвартала = 4 И Не Показатели.ОбъектНалогообложенияДоходы Тогда
			НалогЗаГод = Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог);
		Иначе
			НалогЗаГод = Показатели.НалогИсчисленныйВсего;
		КонецЕсли;
		
		НалогНачисленный = Макс(НалогЗаГод - Показатели.АвансовыеПлатежиИсчисленные, 0);
		
		Показатели.ОшибкаНесоответствиеСуммДекларация =
			ОшибкаСуммаНалогаОтличаетсяОтДекларации(НалогНачисленный, Показатели.Декларация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатели.Декларация) Тогда
		
		СвойстваДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Показатели.Декларация,
			"НаименованиеОтчета, ПредставлениеПериода");
		
		Показатели.ДекларацияПредставление = СтрШаблон(НСтр("ru = '%1 за %2 %3'"),
			СвойстваДекларации.НаименованиеОтчета,
			СвойстваДекларации.ПредставлениеПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеПоказатели(Показатели)
	
	Организация             = Показатели.Организация;
	НомерКвартала           = Показатели.НомерКвартала;
	НачалоПериода           = Показатели.НачалоПериода;
	НачалоНалоговогоПериода = Показатели.НачалоНалоговогоПериода;
	КонецПериода            = Показатели.КонецПериода;
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(Показатели.КонецПериода);
	
	// Параметры повышенной ставки.
	
	ПараметрыПримененияПовышеннойСтавки = УчетУСН.ПараметрыПримененияПовышеннойСтавкиНалога(Организация, КонецПериода, Ложь);
	Если ПараметрыПримененияПовышеннойСтавки.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из ПараметрыПримененияПовышеннойСтавки.Ошибки Цикл
			Если ВРег(Ошибка.Тип) = ВРег("ЧисленностьРаботников") Тогда
				Показатели.СсылкаДляПереходаНеУказанаЧисленностьРаботников = Ошибка.СсылкаДляПерехода.Ссылка;
				Показатели.ОшибкаНеЗаполненаЧисленностьРаботников = 
					СтроковыеФункции.ФорматированнаяСтрока(
						НСтр("ru = 'Чтобы рассчитать налог, укажите сведения <a href = ""УказатьЧисленностьРаботников"">о средней численности наемных работников</a>'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтавкиНалогаУСН = УчетУСН.СтавкиНалогаУСН(Организация, КонецПериода);
	
	Если ПараметрыПримененияПовышеннойСтавки.ПрименяетсяПовышеннаяСтавка Тогда
		
		Показатели.СтавкаНалога = СтавкиНалогаУСН.ПовышеннаяСтавка;
		
		Показатели.ПрименяетсяПовышеннаяСтавкаНалога = Истина;
		Показатели.ПериодПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.ПериодПревышенияЛимитов;
		
		Показатели.ПредставлениеПериодаДоПревышенияЛимитов = ПредставлениеПериодаДляПояснения(
			ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Показатели.ПериодПревышенияЛимитов) - 1);
		
		Показатели.НалоговаяБазаДоПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.НалоговаяБазаДоПревышенияЛимитов;
		Показатели.НалогДоПревышенияЛимитов = ПараметрыПримененияПовышеннойСтавки.НалогДоПревышенияЛимитов;
		
		Показатели.ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода =
			КонецКвартала(Показатели.НачалоНалоговогоПериода) = КонецКвартала(Показатели.ПериодПревышенияЛимитов);
		
	Иначе
		
		Показатели.СтавкаНалога = СтавкиНалогаУСН.ОсновнаяСтавка;
		
	КонецЕсли;
	
	// Параметры льготной ставки.
	
	ПараметрыПримененияЛьготнойСтавки = УчетУСН.ПараметрыПримененияЛьготнойСтавкиНалога(
		Организация,
		КонецПериода,
		ПараметрыПримененияПовышеннойСтавки.ПериодПревышенияЛимитов);
	
	Показатели.ПрименяласьЛьготнаяСтавкаНалога = ПараметрыПримененияЛьготнойСтавки.ПрименяласьЛьготнаяСтавка;
	Показатели.ОснованиеЛьготнойСтавкиЗаполнено = ЗначениеЗаполнено(ПараметрыПримененияЛьготнойСтавки.ОснованиеЛьготнойСтавки);
	Показатели.ОснованиеЛьготнойСтавкиПредставление = ПредставлениеОснованияЛьготнойСтавки(
		Показатели.ПрименяласьЛьготнаяСтавкаНалога,
		ПараметрыПримененияЛьготнойСтавки.ОснованиеЛьготнойСтавки);
	
	Показатели.СтавкаНалогаПредставление = ПредставлениеНалоговойСтавки(
		Показатели.СтавкаНалога,
		ПараметрыПримененияЛьготнойСтавки.ПрименяетсяЛьготнаяСтавка);
	
	// Показатели для расчета налога.
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		
		Показатели.УплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы(Организация, НачалоНалоговогоПериода, КонецПериода);
		Показатели.УплаченныеСтраховыеВзносыПоСроку =
			УчетСтраховыхВзносовИП.УплаченныеСтраховыеВзносыПоСроку(Организация, НачалоНалоговогоПериода, КонецПериода);
		
	ИначеЕсли НомерКвартала = 4 Тогда // Подготовка декларации
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода);
		
		Показатели.УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
		Показатели.РегистрацияСуммыУбыткаУСН        = Убытки.Ссылка;
		Показатели.ПеренесенныеУбытки               = Убытки.ПеренесенныеУбытки + Убытки.УбытокОтУплатыМинимальногоНалога;
		
	КонецЕсли;
	
	Если Показатели.ОбъектНалогообложенияДоходы И Показатели.ПлательщикТорговогоСбора Тогда
		Показатели.УплаченныйТорговыйсбор
			= УчетУСН.УплаченныйТорговыйСбор(Организация, НачалоНалоговогоПериода, КонецПериода);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы,
	|	ВЫБОР
	|		КОГДА &УменьшатьНалогНаТорговыйСбор
	|			ТОГДА КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Если ФО включена, нужно выделить возвраты покупателям.
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
			"ВЫБРАТЬ
			|	-ЕСТЬNULL(СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот), 0) КАК ВозвратыПокупателям
			|ИЗ
			|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
			|ГДЕ
			|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот < 0";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("УменьшатьНалогНаТорговыйСбор", Показатели.УменьшатьНалогНаТорговыйСбор);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДоходыРасходы = Результат[0].Выбрать();
	Если ВыборкаДоходыРасходы.Следующий() Тогда
		Показатели.Доходы = Окр(ВыборкаДоходыРасходы.Доходы, РазрядностьОкругленияПоказателей);
		Показатели.Расходы = ВыборкаДоходыРасходы.Расходы;
		Показатели.ДоходыТорговыйСбор = ВыборкаДоходыРасходы.ДоходыТорговыйСбор;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Выделяем возвраты покупателям
		ВыборкаВозвратыПокупателям = Результат[1].Выбрать();
		Если ВыборкаВозвратыПокупателям.Следующий() Тогда
			Показатели.ВозвратыПокупателям = ВыборкаВозвратыПокупателям.ВозвратыПокупателям;
			Показатели.Доходы = Показатели.Доходы + ВыборкаВозвратыПокупателям.ВозвратыПокупателям;
		КонецЕсли;
	КонецЕсли;
	
	Показатели.ОсвобождениеОтНалога = НалоговыйУчет.СуммаОсвобожденияОтНалога(
		Показатели.Организация,
		Показатели.НачалоНалоговогоПериода,
		Показатели.КонецПериода,
		ПланыСчетов.Хозрасчетный.ЕНприУСН);
	
	Показатели.ГраницаОтчетностиПрошлыхПериодов
		= ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	//Предыдущие авансовые платежи
	Если НомерКвартала > 1 Тогда
		КонецПредыдущегоКвартала = КонецКвартала(ДобавитьМесяц(КонецПериода, -3));
		Показатели.АвансовыеПлатежи = НалогУплаченныйЗаПериод(Организация, НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	Иначе
		Показатели.АвансовыеПлатежи = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция УплаченныеСтраховыеВзносы(Организация, НачалоПериода, КонецПериода)
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовУменьшающихНалог());
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("ПростойУчетЕНС",        НачалоПериода >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); // 51
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Запрос.УстановитьПараметр("СчетаУчетаДС", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Платежи
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В (&СчетаСтраховыхВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма)
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	НЕ &ПростойУчетЕНС
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация = &Организация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета В(&СчетаСтраховыхВзносов)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(СведенияОбУплатеНалогов.Сумма)
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов.Сведения КАК СведенияОбУплатеНалогов
	|ГДЕ
	|	&ПростойУчетЕНС
	|	И СведенияОбУплатеНалогов.Ссылка.Организация = &Организация
	|	И СведенияОбУплатеНалогов.Ссылка.Проведен
	|	И СведенияОбУплатеНалогов.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СведенияОбУплатеНалогов.СчетУчета В(&СчетаСтраховыхВзносов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Платежи.Сумма), 0) КАК Сумма
	|ИЗ
	|	ВТ_Платежи КАК ВТ_Платежи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

Функция НалогУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода)
	
	Возврат УчетУСН.НалогУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция СуммаНалогаЗаПериодКУплате(Организация, НалоговыйПериод)
	
	Период = НачалоДня(КонецКвартала(НалоговыйПериод));
	
	Показатели = АктуальныеПоказатели(Организация, Период);
	Платежи    = ДокументыУплатыНалогов(Организация, Период);
	
	Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	СуммаКУплате = Макс(Показатели.НалогКУплате - Оплачено, 0);
	
	Возврат СуммаКУплате;
	
КонецФункции

Функция СуммаЗадолженностиПоНалогуКУплате(Организация, ГраницаПериодаЗадолженности)
	
	СледующийПериод = КонецГода(ГраницаПериодаЗадолженности) + 1;
	
	ОстатокРасчетов = УчетУСН.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, СледующийПериод);
	
	Если ОстатокРасчетов < 0 Тогда
		Возврат -ОстатокРасчетов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ОшибкаОрганизацияНеПлательщикУСН(Организация, Период, НачалоНалоговогоПериода)
	
	ПлательщикУСН = ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода);
	
	Если ЗначениеЗаполнено(Организация) И Не ПлательщикУСН Тогда
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не применяет УСН.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
	Иначе
		СтрокаСообщения = "";
	КонецЕсли;
	
	Возврат СтрокаСообщения;
	
КонецФункции

Функция ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода)
	
	Перем ДатаИзменения;
	
	ПлательщикУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период, ДатаИзменения);
	Если Не ПлательщикУСН И ДатаИзменения > НачалоНалоговогоПериода Тогда
		ПлательщикУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Возврат ПлательщикУСН;
	
КонецФункции

Функция ПрименяетсяУСНДоходы(Организация, Период, НачалоНалоговогоПериода)
	
	Перем ДатаИзменения;
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходы И ДатаИзменения > НачалоНалоговогоПериода Тогда
		ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Возврат ПрименяетсяУСНДоходы;
	
КонецФункции

Функция НачалоНалоговогоПериода(Организация, Период, ДатаРегистрации)
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало;
	
КонецФункции

Функция НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации)
	
	Возврат УчетУСН.НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации);
	
КонецФункции

Функция НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации)
	
	Возврат УчетУСН.НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации);
	
КонецФункции

Функция ПодсказкаПереносНалоговогоПериода(Организация, ПериодПомощника, ДатаРегистрации)
	
	НалоговыйПериодРасширен = НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации);
	НалоговыйПериодПропущен = НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации);
	
	Если Не НалоговыйПериодРасширен И Не НалоговыйПериодПропущен Тогда
		Возврат "";
	КонецЕсли;
	
	ГодПомощника = Год(ПериодПомощника);
	
	Если НалоговыйПериодПропущен Тогда
		
		ШаблонПодсказки = НСтр("ru = 'Отчетность по УСН за %1 год сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность и налоговые платежи за %4 год.'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки,
			Формат(ГодПомощника, "ЧГ=0"),
			Формат(ДатаРегистрации, "ДФ=dd.MM.yyyy"),
			Формат(КонецГода(ДатаРегистрации), "ДФ=dd.MM.yyyy"),
			Формат(ГодПомощника + 1, "ЧГ=0"));
		
	ИначеЕсли НалоговыйПериодРасширен Тогда
		
		ЭтоКонецГода = КонецКвартала(ПериодПомощника) = КонецГода(ПериодПомощника);
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Период с даты регистрации %1 по %2 включается в %3 за %4'"),
				Формат(ДатаРегистрации, "ДФ=dd.MM.yyyy"),
				Формат(КонецГода(ДатаРегистрации), "ДФ=dd.MM.yyyy"),
				?(ЭтоКонецГода, НСтр("ru = 'отчетность и расчет налога'"), НСтр("ru = 'расчет налога'")),
				ПредставлениеПериода(НачалоГода(ПериодПомощника), КонецКвартала(ПериодПомощника), "ФП = Истина"));
		
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяВводНачальныхОстатков(Показатели)
	
	Возврат Год(Показатели.ДатаРегистрацииОрганизации) < Год(Показатели.КонецПериода)           // Зарегистрированы ранее текущего года,
		И Не Показатели.НалоговыйПериодРасширен                                                 // но не в декабре прошлого года.
		И ЗначениеЗаполнено(Показатели.ГраницаОтчетностиПрошлыхПериодов)                        // Вели деятельность до начала учета в программе.
		И Год(Показатели.ГраницаОтчетностиПрошлыхПериодов) = (Год(Показатели.КонецПериода) - 1) // Помощник за первый год учета в программе.
		И Не УчетУСН.НачальныеОстаткиПоНалогуВведены(Показатели.Организация);                   // Начальные остатки еще не вводились.
	
КонецФункции

Функция СообщениеТребуютсяРеквизиты(Организация, НомерКвартала)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НомерКвартала = 4 Тогда
		ТекстДействия = НСтр("ru = 'подготовить отчет и оплатить налог'");
	Иначе
		ТекстДействия = НСтр("ru = 'оплатить авансовый платеж'");
	КонецЕсли;
	
	Возврат ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	
КонецФункции

Функция ПроверяемыеРеквизитыДляУплатыНалога(Организация)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("ИНН");
	
	Если ЭтоЮрлицо Тогда
		Реквизиты.Добавить("КПП");
		Реквизиты.Добавить("НаименованиеСокращенное");
		Реквизиты.Добавить("НаименованиеПолное");
	Иначе
		Реквизиты.Добавить("ФамилияИП");
		Реквизиты.Добавить("ИмяИП");
		Реквизиты.Добавить("Адрес");
	КонецЕсли;
	
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	Реквизиты.Добавить("НаименованиеНалоговогоОргана");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПроверяемыеРеквизитыДляДекларации(Организация, Период)
	
	Если ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Период) <> 4 Тогда
		// Декларация не требуется, проверять нечего.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегламентированнаяОтчетностьБП.РеквизитыОбязательныеДляОтчета(ИмяРеглОтчета(), Организация, Период);
	
КонецФункции

Функция ОшибкаСуммаНалогаОтличаетсяОтДекларации(СуммаНалога, Декларация)
	
	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(Декларация) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДанныеДекларации = Отчеты.РегламентированныйОтчетУСН.ДанныеРеглОтчета(Декларация);
	
	Если ТипЗнч(ДанныеДекларации) = Тип("ТаблицаЗначений") И ДанныеДекларации.Колонки.Найти("Сумма") <> Неопределено Тогда
		
		СуммаВДекларации = ДанныеДекларации.Итог("Сумма");
		
		Если СуммаВДекларации <> СуммаНалога Тогда
			Шаблон = НСтр("ru = 'Сумма в декларации (%1) отличается от рассчитанной'");
			ТекстОшибки = СтрШаблон(Шаблон, Формат(СуммаВДекларации, НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'")));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстПредупрежденияПриЗагрузкеВыписки(ЕстьПредупрежденияПриЗагрузкеДоходов, ЕстьПредупрежденияПриЗагрузкеВозвратов)
	
	Если ЕстьПредупрежденияПриЗагрузкеДоходов И ЕстьПредупрежденияПриЗагрузкеВозвратов Тогда
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> и <a href = ""ОткрытьВозвраты"">возвратов покупателям</a> из банка'");
	ИначеЕсли ЕстьПредупрежденияПриЗагрузкеДоходов Тогда
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> из банка'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьВозвраты"">возвратов покупателям</a> из банка'");
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстПредупреждения);
	
КонецФункции

#Область НалоговаяСтавка

Функция ПредставлениеНалоговойСтавки(РазмерСтавки, СтавкаЛьготная)
	
	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(СтрШаблон(НСтр("ru = '%1%%'"), Формат(РазмерСтавки, "ЧН=0; БЛ=")));
	
	Если СтавкаЛьготная Тогда
		ЧастиТекста.Добавить(НСтр("ru = '(льготная)'"));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиТекста, Символы.НПП);
	
КонецФункции

Функция ПредставлениеОснованияЛьготнойСтавки(ПрименениеЛьготнойСтавки, ОснованиеЛьготнойСтавки)
	
	Если Не ПрименениеЛьготнойСтавки Тогда
		Возврат "";
	КонецЕсли;
	
	НормативныеДанные = УчетУСНКлиентСервер.НормативныеДанныеОснованияЛьготы(ОснованиеЛьготнойСтавки);
	
	Если ПустаяСтрока(НормативныеДанные.НомерСтатьи)
		И ПустаяСтрока(НормативныеДанные.Пункт)
		И ПустаяСтрока(НормативныеДанные.Подпункт) Тогда
		Возврат НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(СтрШаблон(НСтр("ru = 'Статья %1'"), НормативныеДанные.НомерСтатьи));
	
	Если ЗначениеЗаполнено(НормативныеДанные.Пункт) Тогда
		ЧастиТекста.Добавить(СтрШаблон(НСтр("ru = 'п. %1'"), НормативныеДанные.Пункт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НормативныеДанные.Подпункт) Тогда
		ЧастиТекста.Добавить(СтрШаблон(НСтр("ru = 'пп. %1'"), НормативныеДанные.Подпункт));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиТекста, Символы.НПП);
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыйПоказатели(Организация, Период)
	
	Показатели = Новый Структура;
	
	// Начальные параметры
	Показатели.Вставить("Организация",   Организация);
	Показатели.Вставить("НачалоПериода", НачалоГода(Период));
	Показатели.Вставить("КонецПериода",  КонецКвартала(Период));
	Показатели.Вставить("НомерКвартала", ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Период));
	
	// Сведения о налоговом периоде
	Показатели.Вставить("ДатаРегистрацииОрганизации", Справочники.Организации.ДатаРегистрацииОрганизации(Организация));
	Показатели.Вставить("НачалоНалоговогоПериода",
		НачалоНалоговогоПериода(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("НалоговыйПериодРасширен",
		НалоговыйПериодРасширен(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("НалоговыйПериодПропущен",
		НалоговыйПериодПропущен(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("ПодсказкаПереносНалоговогоПериода",
		ПодсказкаПереносНалоговогоПериода(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	
	Показатели.Вставить("ЭтоПервыйОтчетныйПериод",
		КонецКвартала(Показатели.НачалоНалоговогоПериода) = Показатели.КонецПериода);
	
	Показатели.Вставить("ПрименяетсяОсвобождениеВТекущемПериоде",
		УчетУСН.ПрименяетсяОсвобождениеОтНалога(Организация, Период));
	
	// Ошибки
	Показатели.Вставить("СообщениеОбОшибке",
		ОшибкаОрганизацияНеПлательщикУСН(Организация, Показатели.КонецПериода, Показатели.НачалоНалоговогоПериода));
	
	Показатели.Вставить("ОшибкаНесоответствиеСуммДекларация",  "");
	
	Показатели.Вставить("СообщениеТребуютсяРеквизиты", СообщениеТребуютсяРеквизиты(Организация, Показатели.НомерКвартала));
	
	// Заполняются в ЗаполнитьНачальныеПоказатели и ЗаполнитьАктуальныеПоказатели
	Показатели.Вставить("СтавкаНалога", 0);
	Показатели.Вставить("СтавкаНалогаПредставление", "");
	
	// Учетная политика
	Показатели.Вставить("ОбъектНалогообложенияДоходы",
		ПрименяетсяУСНДоходы(Организация, Показатели.КонецПериода, Показатели.НачалоНалоговогоПериода));
	Показатели.Вставить("ПлательщикТорговогоСбора",
		УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, Показатели.НачалоНалоговогоПериода, Показатели.КонецПериода));
	Показатели.Вставить("УменьшатьНалогНаТорговыйСбор",
		УчетУСН.ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, Показатели.КонецПериода));
		
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, 
			Показатели.КонецПериода,
			Перечисления.Периодичность.Квартал);
			
	ПлательщикЕНП_ПереходныйПериод = Ложь;
	Если НачалоМесяца(Показатели.КонецПериода) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ОбщегоНазначения.ТекущаяДатаПользователя() < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Показатели.Вставить("ПлательщикЕНП",                  ПлательщикЕНП);
	Показатели.Вставить("ПлательщикЕНП_ПереходныйПериод", ПлательщикЕНП_ПереходныйПериод);
			
	// Начало учета
	Показатели.Вставить("ГраницаОтчетностиПрошлыхПериодов", '00010101');
	Показатели.Вставить("ТребуетсяВводНачальныхОстатков",   Ложь);
	
	// Представление периода
	Показатели.Вставить("ПредставлениеПериодаПояснение", ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала));
	Показатели.Вставить("ПредставлениеПериодаАванса",    ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала - 1));
	Показатели.Вставить("ПредставлениеПериода",
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Показатели.НачалоПериода, Показатели.КонецПериода, Истина));
	Показатели.Вставить("ПодсказкаПоНалогу",             "");
	
	// Действия помощника
	Показатели.Вставить("ЕстьДекларация",              Ложь);
	Показатели.Вставить("Декларация",                  Документы.РегламентированныйОтчет.ПустаяСсылка());
	Показатели.Вставить("ДекларацияПредставление",     "");
	Показатели.Вставить("ИмяРеглОтчета",               ИмяРеглОтчета());
	Показатели.Вставить("РегистрацияСуммыУбыткаУСН",   Документы.РегистрацияСуммыУбыткаУСН.ПустаяСсылка());
	Показатели.Вставить("СуммаВзносаСкорректирована",  Ложь);
	
	// Превышение 1 порога лимитов применения УСН
	Показатели.Вставить("ПрименяетсяПовышеннаяСтавкаНалога", Ложь);
	Показатели.Вставить("ПериодПревышенияЛимитов", '00010101');
	Показатели.Вставить("ПредставлениеПериодаДоПревышенияЛимитов", "");
	Показатели.Вставить("ОшибкаНеЗаполненаЧисленностьРаботников", "");
	Показатели.Вставить("СсылкаДляПереходаНеУказанаЧисленностьРаботников", "");
	Показатели.Вставить("ПовышеннаяСтавкаПрименяетсяСПервогоОтчетногоПериода", Ложь);
	
	// Применение льготной ставки налога
	Показатели.Вставить("ПрименяласьЛьготнаяСтавкаНалога", Ложь);
	Показатели.Вставить("ОснованиеЛьготнойСтавкиЗаполнено", Ложь);
	Показатели.Вставить("ОснованиеЛьготнойСтавкиПредставление", "");
	
	// Установка статуса задачи
	Показатели.Вставить("НалогНачислен", Ложь);
	
	// Суммы
	Показатели.Вставить("Доходы",                           0);
	Показатели.Вставить("ДоходыТорговыйСбор",               0);
	Показатели.Вставить("Расходы",                          0);
	Показатели.Вставить("НалоговаяБаза",                    0);
	Показатели.Вставить("НалогВсего",                       0);
	Показатели.Вставить("НалогКУплате",                     0);
	Показатели.Вставить("РасходыУменьшающиеНалог",          0);
	Показатели.Вставить("ПроцентУменьшенияНалога",          0);
	Показатели.Вставить("УменьшениеНалогаФакт",             0);
	Показатели.Вставить("ТорговыйСборУменьшающийНалог",     0);
	Показатели.Вставить("НалогИсчисленныйВсего",            0);
	Показатели.Вставить("МинимальныйНалог",                 0);
	Показатели.Вставить("ПеренесенныеУбытки",               0);
	Показатели.Вставить("АвансовыеПлатежи",                 0);
	Показатели.Вставить("АвансовыеПлатежиИсчисленные",      0);
	Показатели.Вставить("УплаченныеСтраховыеВзносы",        0);
	Показатели.Вставить("УплаченныеСтраховыеВзносыПоСроку", 0);
	Показатели.Вставить("УплаченныйТорговыйСбор",           0);
	Показатели.Вставить("УбытокОтУплатыМинимальногоНалога", 0);
	Показатели.Вставить("ВозвратыПокупателям",              0);
	Показатели.Вставить("Переплата",                        0);
	Показатели.Вставить("Задолженность",                    0);
	Показатели.Вставить("ОсвобождениеОтНалога",             0);
	Показатели.Вставить("НалоговаяБазаДоПревышенияЛимитов", 0);
	Показатели.Вставить("НалогДоПревышенияЛимитов",         0);
	Показатели.Вставить("НалогДляУведомления",              0);
	Показатели.Вставить("ВзносПоЕдиномуТарифу",             0);
	Показатели.Вставить("ВзносСДоходов",                    0);
	Показатели.Вставить("ДоляДоходовПоУСН",                 100);
	Показатели.Вставить("СуммаВзносаДляУменьшения",         0);
	Показатели.Вставить("СуммаВзносаЗаПрошлыйПериод",       0);
	Показатели.Вставить("ВзносыИспользованныеДляПатента",   0);
	Показатели.Вставить("МаксимальнаяСуммаВзноса",          0);
	
	// Подсказки
	Показатели.Вставить("ПодсказкаВзносПоЕдиномуТарифу",    "");
	Показатели.Вставить("ПодсказкаВзносСДоходов",           "");
	
	Возврат Показатели;
	
КонецФункции

Функция НовыеПараметрыПорядкаОтчетаУплатыНалога()
	
	Результат = Новый Структура;
	Результат.Вставить("Налог", Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	Результат.Вставить("ПравилоУплаты", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Результат.Вставить("СрокОплаты", '00010101');
	Результат.Вставить("СрокОтчета", '00010101');
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыТаблицыНалоговНаЕНС() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Период", '00010101');
	Результат.Вставить("Налог", Перечисления.ВидыНалогов.УСН_Доходы);
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("Периодичность", Перечисления.Периодичность.Год);
	Результат.Вставить("СрокУплаты", '00010101');
	Результат.Вставить("УникальныйИдентификатор");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПубликацияДанных

Функция ПубликуемыеДанныеПомощника(Настройки, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем Организация, Период;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	НастройкиСтруктура = ПрочитатьНастройки(Настройки, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыИзНастроек = ПрочитатьПараметрыПомощникаИзНастроек(НастройкиСтруктура, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Период = КонецКвартала(ПараметрыИзНастроек.Период);
	
	Если ЗначениеЗаполнено(ПараметрыИзНастроек.Организация) Тогда
		Организация = ПараметрыИзНастроек.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось определить организацию по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Предварительная актуализация данных.
	
	Если Не ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, Период, СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПубликуемыеПоказатели = Новый Структура;
	
	// Показатели помощника
	
	ДанныеПомощника = АктуальныеПоказателиРасчетаСПояснениями(
		Организация, ПериодПоДате(Организация, ПараметрыИзНастроек.Период));
	
	Показатели   = ДанныеПомощника.Показатели;
	ЭтапыРасчета = ДанныеПомощника.Пояснения;
	
	// Единый налоговый счет
	ДобавитьДанныеЕНС(Показатели);
	
	ДополнитьПоказателиНалоговымиПлатежами(Организация, Период, Показатели);
	
	Для Каждого ПравилоПубликации Из ПравилаПубликацииПоказателей(Показатели.НомерКвартала) Цикл // По одиночным показателям шапки
		ПубликацияДанных.ОпубликоватьЗначениеПоПравилу(Показатели, ПравилоПубликации, ПубликуемыеПоказатели);
	КонецЦикла;
	
	// Расчет налога по шагам с пояснениями
	
	ПубликуемыеЭтапыРасчета = Новый Массив;
	
	Для Каждого ЭтапРасчета Из ЭтапыРасчета Цикл
		ПубликуемыйЭтап = Новый Структура;
		
		Для Каждого ПравилоПубликации Из ПравилаПубликацииЭтапаРасчета() Цикл
			ПубликацияДанных.ОпубликоватьЗначениеПоПравилу(ЭтапРасчета, ПравилоПубликации, ПубликуемыйЭтап);
		КонецЦикла;
		
		ПубликуемыеЭтапыРасчета.Добавить(ПубликуемыйЭтап);
	КонецЦикла;
	
	ПубликуемыеПоказатели.Вставить("calculation", ПубликуемыеЭтапыРасчета);
	
	// Сведения о расчетах за предыдущие периоды и ссылка на оплату задолженности
	
	ПубликуемыеРасчетыПрошлыхЛет = ПубликуемыеРасчетыЗаПрошлыеПериоды(Организация, Период, Показатели);
	ПубликуемыеПоказатели.Вставить("previous_tax", ПубликуемыеРасчетыПрошлыхЛет);
	
	// Ссылки
	
	ПубликуемыеСсылки = ПубликуемыеГиперссылки(Организация, Период, Показатели.НалогКУплате);
	ПубликуемыеПоказатели.Вставить("links", ПубликуемыеСсылки);
	
	// Предупреждения
	МассивПредупреждений = Новый Массив;
	
	// Предупреждение об ошибках загрузки выписки.
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() И Не Показатели.НалоговыйПериодПропущен Тогда
		ПредупрежденияПриЗагрузкеВыписки =
			ПредупрежденияПриЗагрузкеВыписки(Организация, Показатели.НачалоНалоговогоПериода, Показатели.КонецПериода);
		
		Если ПредупрежденияПриЗагрузкеВыписки.ЕстьОшибкиЗагрузкиВыписки Тогда
			МассивПредупреждений.Добавить(Строка(ПредупрежденияПриЗагрузкеВыписки.ТекстОшибкиЗагрузкиВыписки));
		КонецЕсли;
	КонецЕсли;
	
	// Предупреждение, если не заполнены важные реквизиты организации.
	НезаполненныеРеквизиты = Неопределено;
	Если Не РеквизитыДляОтчетностиЗаполнены(Организация, Период, НезаполненныеРеквизиты) Тогда
		ТекстОшибки = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(Период),
			Истина);
		МассивПредупреждений.Добавить(ТекстОшибки);
	КонецЕсли;
	
	// Предупреждение о незаполненном основании льготной ставки
	Если Показатели.НомерКвартала = 4
		И УчетУСНКлиентСервер.ТребуетсяОснованиеЛьготнойСтавкиНалога(Период)
		И (Показатели.ПрименяласьЛьготнаяСтавкаНалога И Не Показатели.ОснованиеЛьготнойСтавкиЗаполнено) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнено основание для применения льготной ставки налога'");
		МассивПредупреждений.Добавить(ТекстОшибки);
		
	КонецЕсли;
	
	Если МассивПредупреждений.Количество() > 0 Тогда
		// Возвращаем результат с предупреждением.
		КодВозврата = Словарь.КодВозвратаВыполненоСПредупреждениями();
		СообщениеОбОшибке = СтрСоединить(МассивПредупреждений, Символы.ПС);
	КонецЕсли;
	
	// Преобразование полученных показателей в формат json.
	
	РезультирующееСообщение = ИнтеграцияСБанками.СериализоватьВСтрокуJSON(ПубликуемыеПоказатели);
	
	Возврат РезультирующееСообщение;
	
КонецФункции

Функция ПубликуемыеГиперссылки(Организация, Период, СуммаНалога)
	
	ПубликуемыеСсылки = Новый Массив;
	
	// Ссылка для перехода в 1С
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Проверить расчет в 1С'"),
		НавигационнаяСсылкаДляПубликации(Организация, Период));
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиПереход);
	
	ГодоваяОтчетность = (ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Период) = 4);
	
	Если ГодоваяОтчетность Тогда // КУДиР и декларация нужны только при расчете налога за год.
		// КУДиР
		ОписаниеСсылкиКУДиР = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("income_expenses_book",
			НСтр("ru = 'Книга учета доходов и расходов'"),
			АдресПубликацииКУДиР(),
			Отчеты.КнигаУчетаДоходовИРасходов.ВходящиеНастройкиПубликуемыхДанных(Организация, Период));
			
		ПубликуемыеСсылки.Добавить(ОписаниеСсылкиКУДиР);
		
		// Декларация УСН
		ОписаниеСсылкиДекларация = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("tax_return",
			НСтр("ru = 'Сформировать декларацию'"),
			Справочники.НастройкиИнтеграцииСБанками.АдресСервисаВыполненияКомандыИнтеграции(),
			Справочники.НастройкиИнтеграцииСБанками.ВходящиеНастройкиСозданияДекларации(Организация, ИмяРеглОтчета(), Период));
		
		ПубликуемыеСсылки.Добавить(ОписаниеСсылкиДекларация);
	КонецЕсли;
	
	// Для заполнения параметров сервиса оплаты и поиска задачи бухгалтера
	ВидНалога = ВидНалога(Организация, Период);
	
	// Уведомление об исчисленных суммах налога (за год уведомление не подается)
	Если Не ГодоваяОтчетность Тогда
		
		ПорядокОтчетаУплаты = ПорядокОтчетаУплатыНалога(Организация, Период);
		Налог = ПорядокОтчетаУплаты.Налог;
		УведомлениеСсылка = Справочники.НастройкиИнтеграцииСБанками.НайтиУведомлениеОбИсчисленныхСуммахНалога(
			Организация,
			ПорядокОтчетаУплаты.СрокОплаты,
			Налог);
		
		Если ЗначениеЗаполнено(УведомлениеСсылка) Тогда
			// Ранее сформированное уведомление необходимо сформировать заново,
			// даже если сумма налога после пересчета стала нулевой
			ДобавитьСсылкуНаУведомление = Истина;
		Иначе
			ДобавитьСсылкуНаУведомление = (СуммаНалога <> 0);
		КонецЕсли;
		
		Если ДобавитьСсылкуНаУведомление Тогда
		
			ОписаниеСсылкиУведомлениеЕНП = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("tax_notification",
				НСтр("ru = 'Сформировать уведомление'"),
				Справочники.НастройкиИнтеграцииСБанками.АдресСервисаВыполненияКомандыИнтеграции(),
				Справочники.НастройкиИнтеграцииСБанками.ВходящиеНастройкиСозданияУведомленияОСуммахНалога(
					Организация,
					Период,
					Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , Период),
					СуммаНалога));
			
			ПубликуемыеСсылки.Добавить(ОписаниеСсылкиУведомлениеЕНП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Ссылка для оплаты налога
	ПараметрыСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
		Организация,
		Период,
		ВидНалога,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	ОписаниеСсылкиУплата = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
		АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор(),
		НСтр("ru = 'Оплатить налог'"),
		АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса(),
		ПараметрыСервисаОплаты);
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиУплата);
	
	// Ссылка для выполнения задачи бухгалтера
	ПравилоУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(Организация, ВидНалога, Период);
	
	Если ПравилоУплаты <> Неопределено Тогда
		ПравилоУплаты.Организация = Организация; // Из функции возвращается пустой
		
		ХешЗадачи = РегистрыСведений.ЗадачиБухгалтера.СохраненнаяХешСуммаЗадачи(ПравилоУплаты);
		ОписаниеСсылкиВыполнениеЗадачи =
			ВнешнийПрограммныйИнтерфейс.ОписаниеПубликуемойСсылкиВыполнениеЗадачи(ХешЗадачи, Истина);
		
		Если ОписаниеСсылкиВыполнениеЗадачи <> Неопределено Тогда
			ОписаниеСсылкиЗадача = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
				ОписаниеСсылкиВыполнениеЗадачи.Идентификатор,
				ОписаниеСсылкиВыполнениеЗадачи.Представление,
				ОписаниеСсылкиВыполнениеЗадачи.АдресСервиса,
				ОписаниеСсылкиВыполнениеЗадачи.Параметры);
			
			ПубликуемыеСсылки.Добавить(ОписаниеСсылкиЗадача);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПубликуемыеСсылки;
	
КонецФункции

Функция ПубликуемыеРасчетыЗаПрошлыеПериоды(Организация, Период, Показатели)
	
	// Опубликуем сообщение о задолженности или переплате.
	// В случае задолженности передадим ссылку для ее уплаты.
	
	ПубликуемыеРасчетыПрошлыхЛет = Новый Структура;
	
	Словарь = СловарьРасчетыЗаПрошлыеПериоды();
	
	ТекстРасчетыПрошлыхЛет = ТекстСообщенияРасчетыПрошлыхЛет(Показатели.Задолженность,
		Показатели.ГраницаОтчетностиПрошлыхПериодов,
		Показатели.ТребуетсяВводНачальныхОстатков);
	
	ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.ОтображатьРасчеты,     ЗначениеЗаполнено(ТекстРасчетыПрошлыхЛет));
	ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.ТекстСообщенияРасчеты, ТекстРасчетыПрошлыхЛет);
	
	// Ссылка для оплаты задолженности
	
	Если Показатели.Задолженность > 0 Тогда
		
		// Задолженность рассчитывается, публикуется и оплачивается
		// за весь период с начала учета по конец прошлого года.
		ПериодЗадолженности = НачалоГода(Период) - 1;
		
		ПараметрыСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
			Организация,
			ПериодЗадолженности,
			ВидНалога(Организация, ПериодЗадолженности),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			Истина);
		
		ОписаниеСсылкиУплатаДолга = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор(),
			НСтр("ru = 'Оплатить задолженность'"),
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса(),
			ПараметрыСервисаОплаты);
		
		ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.СсылкаОплатитьЗадолженность, ОписаниеСсылкиУплатаДолга);
		
	КонецЕсли;
	
	Возврат ПубликуемыеРасчетыПрошлыхЛет;
	
КонецФункции

Функция АдресПубликацииКУДиР()
	
	ЧастиАдреса = Новый Массив;
	
	ЧастиАдреса.Добавить(ИнтеграцияСБанками.АдресСервисаПубликацияОтчетов());
	ЧастиАдреса.Добавить(Отчеты.КнигаУчетаДоходовИРасходов.ПубликуемыйИдентификатор());
	
	Возврат СтрСоединить(ЧастиАдреса, "/");
	
КонецФункции

Функция НавигационнаяСсылкаДляПубликации(Организация, Период)
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	
	ПараметрыПубликации.ИмяФормы      = "Обработка.ПомощникРасчетаНалогаУСН.Форма";
	ПараметрыПубликации.Организация   = Организация;
	ПараметрыПубликации.НачалоПериода = НачалоГода(Период);
	ПараметрыПубликации.КонецПериода  = КонецКвартала(Период);
	
	Возврат РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НастройкиСтруктурой.Свойство("date") Тогда
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле date.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn.'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp.'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

Функция ПрочитатьПараметрыПомощникаИзНастроек(НастройкиСтруктурой, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП, Организация, Период;
	
	Результат = Новый Структура("Организация, Период");
	
	Если НастройкиСтруктурой.Свойство("organization") Тогда
		НастройкиСтруктурой.organization.Свойство("inn", ОрганизацияИНН);
		НастройкиСтруктурой.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
		Если Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Период = НастройкиСтруктурой.date;
	
	Если ТипЗнч(Период) <> Тип("Дата") Или Не ЗначениеЗаполнено(Период) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Неверный формат данных в поле date! Ожидается непустая дата.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Организация = Организация;
	Результат.Период      = Период;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПоказателиНалоговымиПлатежами(Организация, Период, Показатели)
	
	Платежи  = ДокументыУплатыНалогов(Организация, Период);
	Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	ОсталосьОплатить = Макс(Показатели.НалогКУплате - Оплачено, 0);
	
	Показатели.Вставить("Оплачено", Оплачено);
	Показатели.Вставить("ОсталосьОплатить", ОсталосьОплатить);
	
КонецПроцедуры

Функция ПравилаПубликацииПоказателей(НомерКвартала)
	
	ПубликоватьАвансовыеПлатежи = НомерКвартала <> 1;
	
	Правила = ПубликацияДанных.НовыеПравилаПубликации();
	
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "Доходы",                     "income");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ВозвратыПокупателям",        "refund");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "УплаченныеСтраховыеВзносы",  "insurance_payments");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "СтавкаНалога",               "tax_rate");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "СтавкаНалогаПредставление",  "tax_rate_presentation");
	
	Если ПубликоватьАвансовыеПлатежи Тогда
		ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "АвансовыеПлатежи",           "advance_payments");
		ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ПредставлениеПериодаАванса",
			"advance_payments_period_presentation");
	КонецЕсли;
	
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "РасходыУменьшающиеНалог",    "tax_reduction");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "Переплата",                  "tax_initial_overpayment");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "НалогКУплате",               "tax_to_pay");
	
	// Дополняемые поля показателей о расчетах по налогу - см. ДополнитьПоказателиНалоговымиПлатежами()
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "Оплачено",                   "tax_paid");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ОсталосьОплатить",           "tax_left_to_pay");
	
	// Единый налоговый счет
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ДоступноСЕНС",               "tax_ens");
	
	Возврат Правила;
	
КонецФункции

Функция ПравилаПубликацииЭтапаРасчета()
	
	Правила = ПубликацияДанных.НовыеПравилаПубликации();
	
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "НомерЭтапа", "step");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "Пояснение",  "description");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "Значение",   "value");
	
	Возврат Правила;
	
КонецФункции

Функция СловарьРасчетыЗаПрошлыеПериоды()
	
	Словарь = Новый Структура;
	
	Словарь.Вставить("ОтображатьРасчеты", "show_previous_tax");
	Словарь.Вставить("ТекстСообщенияРасчеты", "previous_tax_message");
	Словарь.Вставить("СсылкаОплатитьЗадолженность", "link");
	
	Возврат Словарь;
	
КонецФункции

// Возвращает отчетный или налоговый период, с учетом сроков оплаты с ЕНС
//
// Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   ДатаЗапроса  - Дата - дата, по которой необходимо определить период
// 
// Возвращаемое значение:
//  Дата - представление налогового или отчетного периода, как конец квартала этого периода
//
Функция ПериодПоДате(Организация, ДатаЗапроса)
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, Перечисления.ВидыНалогов.УСН_Доходы, ДатаЗапроса);
	Если ЗначениеЗаполнено(Порядок) Тогда
		ПериодПоДате = Порядок.Уплата.ПериодСобытия;
	Иначе
		ПериодПоДате = КонецКвартала(ДатаЗапроса);
	КонецЕсли;
	
	Возврат ПериодПоДате;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьДанныеЕНС(Показатели)
	
	ЗадачаУСН = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН();
	Если Показатели.КонецПериода = КонецГода(Показатели.КонецПериода) Тогда
		ПравилоУплатаУСН = Обработки.МониторНалоговИОтчетности.КодПравилаУплатаИПУСН();
	Иначе
		ПравилоУплатаУСН = Обработки.МониторНалоговИОтчетности.КодПравилаУплатаАвансаУСН();
	КонецЕсли;
	
	Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(ЗадачаУСН, ПравилоУплатаУСН);
	ОстатокЕНС = Обработки.МониторНалоговИОтчетности.СуммаЕНСКЗачетуПоНалогуВзносу(
		Показатели.Организация, Правило, Показатели.КонецПериода);
		
	Показатели.Вставить("ДоступноСЕНС", ОстатокЕНС);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли