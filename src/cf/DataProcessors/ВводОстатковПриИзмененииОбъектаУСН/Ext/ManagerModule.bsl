#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает суммы остатков которые нужно ввести и суммы введенные
//
// Параметры:
//  ПараметрыВыполнения - Структура - содержит данные для расчета остатков
// 
// Возвращаемое значение:
//  Структура - рассчитанные суммы, где ключ - название суммы раздела,
//              значение - рассчитанная сумма.
//
Функция СуммыОстатковРассчитанныеИВведенные(ПараметрыВыполнения) Экспорт 
	Результат = Новый Структура;
	// Суммы по учету
	Результат.Вставить("Товары", ПолучитьОстаткиПоТоварам(ПараметрыВыполнения));
	Результат.Вставить("Материалы", ПолучитьОстаткиПоМатериалам(ПараметрыВыполнения));
	Результат.Вставить("Зарплата", ПолучитьОстаткиПоЗарплате(ПараметрыВыполнения));
	Результат.Вставить("Взносы", ПолучитьОстаткиПоВзносам(ПараметрыВыполнения));
	Результат.Вставить("Расходы", ПолучитьОстаткиПоРасходам(ПараметрыВыполнения));
	
	// Введенные суммы
	Результат.Вставить("ТоварыВведено", ПолучитьОстаткиПоТоварамВведено(ПараметрыВыполнения));
	Результат.Вставить("МатериалыВведено", ПолучитьОстаткиПоМатериаламВведено(ПараметрыВыполнения));
	Результат.Вставить("ЗарплатаВведено", ПолучитьОстаткиПоЗарплатеВведено(ПараметрыВыполнения));
	Результат.Вставить("ВзносыВведено", ПолучитьОстаткиПоВзносамВведено(ПараметрыВыполнения));
	Результат.Вставить("РасходыВведено", ПолучитьОстаткиПоРасходамВведено(ПараметрыВыполнения));
	
	Возврат Результат;
КонецФункции

// Создает документы для корректировки остатков по расходам при смене объекта УСН
//
// Параметры:
//  ПараметрыВыполнения - Структура - содержит данные для расчета остатков
// 
// Возвращаемое значение:
//   Нет
//
Функция ВвестиОстатки(ПараметрыВыполнения) Экспорт
	ДокументыОперации = Новый Массив;
	ПараметрыВыполнения.Вставить("ДокументыОперации", ДокументыОперации);
	ПараметрыВыполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН);
	
	Если ПараметрыВыполнения.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
		// Перед вводом остатков рассчитваем их суммы перед транзакцией и передадим их
		// в процедуры ввода остатков параметром.
		// Нужно для разгрузки транзакции.
		ТоварыДляВводаОстатков    = РасшифровкаПоТоварам(ПараметрыВыполнения);
		МатериалыДляВводаОстатков = РасшифровкаПоМатериалам(ПараметрыВыполнения);
		НДФЛДляВводаОстатков      = РасшифровкаПоНДФЛ(ПараметрыВыполнения);
		ЗарплатаДляВводаОстатков  = РасшифровкаПоЗарплате(ПараметрыВыполнения);
		ВзносыДляВводаОстатков    = РасшифровкаПоВзносам(ПараметрыВыполнения);
		ПроцентВыполненияВсего =
			ТоварыДляВводаОстатков.Количество()
			+ МатериалыДляВводаОстатков.Количество()
			+ НДФЛДляВводаОстатков.Количество()
			+ ЗарплатаДляВводаОстатков.Количество()
			+ ВзносыДляВводаОстатков.Количество();
		ПроцентВыполнения = 0;
		
		НачатьТранзакцию();
		Попытка
			Счетчик = УдалитьРанееВведенныеОстатки(ПараметрыВыполнения);
			// Если переходим с "по средней", нужно создать партию
			Если ДоПереходаМПЗПоСредней(ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаПерехода) Тогда
				СформироватьПартииДляОстатковПоСкладуПоРегиструХозрасчетный(ПараметрыВыполнения, "Партия");
			КонецЕсли;
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
			
			ВвестиОстаткиПоТоварам(ПараметрыВыполнения, ТоварыДляВводаОстатков);
			ПроцентВыполнения = ПроцентВыполнения + ТоварыДляВводаОстатков.Количество();
			ДлительныеОперации.СообщитьПрогресс(Окр(100 * ПроцентВыполнения/ПроцентВыполненияВсего,0));
			
			ВвестиОстаткиПоМатериалам(ПараметрыВыполнения, МатериалыДляВводаОстатков);
			ПроцентВыполнения = ПроцентВыполнения + МатериалыДляВводаОстатков.Количество();
			ДлительныеОперации.СообщитьПрогресс(Окр(100 * ПроцентВыполнения/ПроцентВыполненияВсего,0));
			
			ВвестиОстаткиПоЗарплатеИНДФЛ(ПараметрыВыполнения, ЗарплатаДляВводаОстатков, НДФЛДляВводаОстатков);
			ПроцентВыполнения = ПроцентВыполнения + ЗарплатаДляВводаОстатков.Количество() + НДФЛДляВводаОстатков.Количество();
			ДлительныеОперации.СообщитьПрогресс(Окр(100 * ПроцентВыполнения/ПроцентВыполненияВсего,0));
			
			ВвестиОстаткиПоВзносам(ПараметрыВыполнения, ВзносыДляВводаОстатков);
			ПроцентВыполнения = ПроцентВыполнения + ВзносыДляВводаОстатков.Количество();
			ДлительныеОперации.СообщитьПрогресс(Окр(100 * ПроцентВыполнения/ПроцентВыполненияВсего,0));
			
			ПараметрыВыполнения.Вставить("НаправлениеПерехода",
			Перечисления.НаправленияИзмененийНалоговыхРежимов.УСНДоходНаРасход);
			
			ЗафиксироватьВыполнениеОперацииПерехода(ПараметрыВыполнения);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	ИначеЕсли ПараметрыВыполнения.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
		НачатьТранзакцию();
		Попытка
			ДлительныеОперации.СообщитьПрогресс(0);
			Счетчик = УдалитьРанееВведенныеОстаткиПоРасходам(ПараметрыВыполнения);
			ДлительныеОперации.СообщитьПрогресс(5);
			// Если переходим с ФИФО на "по средней", нужно перевести остатки на пустую партию.
			// Это нужно для последующего правильно списания и расчетов.
			Если НЕ ДоПереходаМПЗПоСредней(ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаПерехода)
				И ДоПереходаМПЗПоСредней(ПараметрыВыполнения.Организация, ДобавитьМесяц(ПараметрыВыполнения.ДатаПерехода,1)) Тогда
				СформироватьПартииДляОстатковПоСкладуПоРегиструХозрасчетный(ПараметрыВыполнения, "ПартияПустая");
			КонецЕсли;
			ДлительныеОперации.СообщитьПрогресс(10);
			
			ВвестиОстаткиПоРасходам(ПараметрыВыполнения);
			ПараметрыВыполнения.Вставить("НаправлениеПерехода",
			Перечисления.НаправленияИзмененийНалоговыхРежимов.УСНРасходНаДоход);
			
			ЗафиксироватьВыполнениеОперацииПерехода(ПараметрыВыполнения);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	УстановитьОтметкуОВводеОстатков(ПараметрыВыполнения);
	ЗаписатьОперациюБизнесСтатистики(Счетчик);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УдалитьРанееВведенныеОстатки(ПараметрыВыполнения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(ПараметрыВыполнения.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", ПараметрыВыполнения.Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	Счетчик = "ВводОстатков";
	Пока Результат.Следующий() Цикл
		Если Результат.ДокументОперации.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ДокументОперации = Результат.ДокументОперации.ПолучитьОбъект();
		ДокументОперации.ПометкаУдаления = Истина;
		Если ТипЗнч(ДокументОперации) = Тип("ДокументОбъект.ВводНачальныхОстатков")
			Или ТипЗнч(ДокументОперации) = Тип("ДокументОбъект.Партия") Тогда
			ДокументОперации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументОперации.Записать();
		КонецЕсли;
		Счетчик = "ИсправлениеОстатков";
	КонецЦикла;
	Возврат Счетчик;
КонецФункции

Процедура ВвестиОстаткиПоТоварам(ПараметрыВыполнения, ТоварыДляВводаОстатков)
	Если Не ТоварыДляВводаОстатков.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ДокументОстатков);
	ДокументОстатков.Дата = КонецДня(ПараметрыВыполнения.ДатаПерехода);
	ДокументОстатков.Организация = ПараметрыВыполнения.Организация;
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
	ДокументОстатков.ОтражатьВНалоговомУчете = Истина;
	
	Для каждого СтрокаТоваров Из ТоварыДляВводаОстатков Цикл
		СтрокаТЧ = ДокументОстатков.НоменклатураНаСкладе.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаТоваров);
		Если ПараметрыВыполнения.Свойство("ПартияУчета") Тогда
			СтрокаТЧ.Партия = ПараметрыВыполнения.ПартияУчета;
		КонецЕсли;
		СтрокаТЧ.РасчетныйДокумент = СтрокаТоваров.Партия;
		СтрокаТЧ.СуммаНУ = СтрокаТоваров.Сумма;
		СтрокаТЧ.ВалютнаяСумма = СтрокаТоваров.Сумма;
		СтрокаТЧ.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
		СтрокаТЧ.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;
	
	ДокументОстатков.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	// запоминаем созданный документ
	Если ПараметрыВыполнения.Свойство("ДокументыОперации") Тогда
		ПараметрыВыполнения.ДокументыОперации.Добавить(ДокументОстатков.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиОстаткиПоМатериалам(ПараметрыВыполнения, МатериалыДляВводаОстатков)
	Если Не МатериалыДляВводаОстатков.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ДокументОстатков);
	ДокументОстатков.Дата = КонецДня(ПараметрыВыполнения.ДатаПерехода);
	ДокументОстатков.Организация = ПараметрыВыполнения.Организация;
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
	ДокументОстатков.ОтражатьВНалоговомУчете = Истина;
	
	Для каждого СтрокаМатериалов Из МатериалыДляВводаОстатков Цикл
		СтрокаТЧ = ДокументОстатков.НоменклатураНаСкладе.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаМатериалов);
		Если ПараметрыВыполнения.Свойство("ПартияУчета") Тогда
			СтрокаТЧ.Партия = ПараметрыВыполнения.ПартияУчета;
		КонецЕсли;
		СтрокаТЧ.РасчетныйДокумент = СтрокаМатериалов.Партия;
		СтрокаТЧ.СуммаНУ = СтрокаМатериалов.Сумма;
		СтрокаТЧ.ВалютнаяСумма = СтрокаМатериалов.Сумма;
		СтрокаТЧ.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
		СтрокаТЧ.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;
	
	ДокументОстатков.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	// запоминаем созданный документ
	Если ПараметрыВыполнения.Свойство("ДокументыОперации") Тогда
		ПараметрыВыполнения.ДокументыОперации.Добавить(ДокументОстатков.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура ВвестиОстаткиПоЗарплатеИНДФЛ(ПараметрыВыполнения, ЗарплатаДляВводаОстатков, НДФЛДляВводаОстатков)
	Если БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно() Тогда
		Возврат;
	КонецЕсли;
	
	// Ввод документов по ЗП
	Если Не ЗарплатаДляВводаОстатков.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ДокументОстатков);
	ДокументОстатков.Дата = КонецДня(ПараметрыВыполнения.ДатаПерехода);
	ДокументОстатков.Организация = ПараметрыВыполнения.Организация;
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам;
	ДокументОстатков.ОтражатьВНалоговомУчете = Истина;
	
	Для каждого СтрокаЗарплаты Из ЗарплатаДляВводаОстатков Цикл
		СтрокаТЧ = ДокументОстатков.РасчетыПоЗаработнойПлате.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаЗарплаты);
	КонецЦикла;
	
	ДокументОстатков.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	// запоминаем созданный документ
	Если ПараметрыВыполнения.Свойство("ДокументыОперации") Тогда
		ПараметрыВыполнения.ДокументыОперации.Добавить(ДокументОстатков.Ссылка);
	КонецЕсли;
	
	
	// Ввод документов по НДФЛ
	ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ДокументОстатков);
	ДокументОстатков.Дата = КонецДня(ПараметрыВыполнения.ДатаПерехода);
	ДокументОстатков.Организация = ПараметрыВыполнения.Организация;
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	ДокументОстатков.ОтражатьВНалоговомУчете = Истина;
	
	Для каждого СтрокаНДФЛ Из НДФЛДляВводаОстатков Цикл
		СтрокаТЧ = ДокументОстатков.РасчетыПоНалогамИСборам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНДФЛ);
	КонецЦикла;
	
	ДокументОстатков.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	// запоминаем созданный документ
	Если ПараметрыВыполнения.Свойство("ДокументыОперации") Тогда
		ПараметрыВыполнения.ДокументыОперации.Добавить(ДокументОстатков.Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура ВвестиОстаткиПоВзносам(ПараметрыВыполнения, ВзносыДляВводаОстатков)
	Если Не ВзносыДляВводаОстатков.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ДокументОстатков);
	ДокументОстатков.Дата = КонецДня(ПараметрыВыполнения.ДатаПерехода);
	ДокументОстатков.Организация = ПараметрыВыполнения.Организация;
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	ДокументОстатков.ОтражатьВНалоговомУчете = Истина;
	
	Для каждого СтрокаВзносы Из ВзносыДляВводаОстатков Цикл
		СтрокаТЧ = ДокументОстатков.РасчетыПоНалогамИСборам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаВзносы);
	КонецЦикла;
	
	ДокументОстатков.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	// запоминаем созданный документ
	Если ПараметрыВыполнения.Свойство("ДокументыОперации") Тогда
		ПараметрыВыполнения.ДокументыОперации.Добавить(ДокументОстатков.Ссылка);
	КонецЕсли;
КонецПроцедуры

Функция УдалитьРанееВведенныеОстаткиПоРасходам(ПараметрыВыполнения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", ПараметрыВыполнения.ДатаПерехода);
	Запрос.УстановитьПараметр("Организация", ПараметрыВыполнения.Организация);
	Запрос.УстановитьПараметр("Период", ПараметрыВыполнения.ДатаПерехода);
	
	Результат = Запрос.Выполнить().Выбрать();
	Счетчик = "ВводОстатков";
	Пока Результат.Следующий() Цикл
		Если Результат.ДокументОперации.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ДокументОперации = Результат.ДокументОперации.ПолучитьОбъект();
		ДокументОперации.ПометкаУдаления = Истина;
		ДокументОперации.Записать();
		Счетчик = "ИсправлениеОстатков";
	КонецЦикла;
	Возврат Счетчик;
КонецФункции

Процедура ВвестиОстаткиПоРасходам(ПараметрыВыполнения)
	Если ПолучитьОстаткиПоРасходам(ПараметрыВыполнения) = 0 Тогда
		Возврат;
	КонецЕсли;
	// Папаметр Период передается в каждую строку, чтобы потом заполнить
	// запись регистра с помощью ЗаполнитьЗначенияСвойств.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходыПриУСНОстатки.Организация КАК Организация,
		|	РасходыПриУСНОстатки.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
		|	РасходыПриУСНОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	РасходыПриУСНОстатки.Партия КАК Партия,
		|	РасходыПриУСНОстатки.ВидРасхода КАК ВидРасхода,
		|	РасходыПриУСНОстатки.ЭлементРасхода КАК ЭлементРасхода,
		|	РасходыПриУСНОстатки.СтатусыПартийУСН КАК СтатусыПартийУСН,
		|	РасходыПриУСНОстатки.СчетУчета КАК СчетУчета,
		|	РасходыПриУСНОстатки.Валюта КАК Валюта,
		|	РасходыПриУСНОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РасходыПриУСНОстатки.ОтражениеВУСН КАК ОтражениеВУСН,
		|	РасходыПриУСНОстатки.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	РасходыПриУСНОстатки.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
		|	-РасходыПриУСНОстатки.КоличествоОстаток КАК Количество,
		|	-РасходыПриУСНОстатки.СуммаОстаток КАК Сумма,
		|	-РасходыПриУСНОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Остатки(&ДатаПерехода, Организация = &Организация) КАК РасходыПриУСНОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(ПараметрыВыполнения.ДатаПерехода),
		ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ПараметрыВыполнения.Организация);
	Запрос.УстановитьПараметр("Период", КонецДня(ПараметрыВыполнения.ДатаПерехода));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СформироватьДокументОперацияБух(ПараметрыВыполнения, Результат, "РасходыПриУСН");
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументОперацияБух(СтруктураПараметров, РезультатЗапроса, ИмяРегистра)

	ОперацияОбъект = Документы.ОперацияБух.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(ОперацияОбъект);
	ОперацияОбъект.Дата = КонецДня(СтруктураПараметров.ДатаПерехода);
	ОперацияОбъект.Организация = СтруктураПараметров.Организация;
	ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ИмяРегистра <> "" Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
			ОписаниеОбработанногоРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ': регистр накопления ""%1"" (очистка остатков)'"),
			МетаданныеРегистра.Синоним);
		КонецЕсли;
	Иначе
		ОписаниеОбработанногоРегистра = ".";
	КонецЕсли;
	
	ОперацияОбъект.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Закрытие регистров и остатков НУ при смене объекта УСН%1'"),
	ОписаниеОбработанногоРегистра);
	ОперацияОбъект.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	ОперацияОбъект.Записать();
	// запоминаем созданный документ
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
	КонецЕсли;
	
	НаборЗаписей = ОперацияОбъект.Движения[ИмяРегистра];
	НаборЗаписей.Записывать = Истина;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПроцентВыполненияВсего = ВыборкаДетальныеЗаписи.Количество();
	// 10% заложено на предыдущие операции
	ПроцентВыполнения      = ПроцентВыполненияВсего * 0.1;
	ПроцентВыполненияВсего = ПроцентВыполненияВсего * 1.1;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		ПроцентВыполнения = ПроцентВыполнения + 1;
		ДлительныеОперации.СообщитьПрогресс(Окр(100 * ПроцентВыполнения/ПроцентВыполненияВсего, 0));
	КонецЦикла;
	
	ОперацияОбъект.Движения.Записать();
КонецПроцедуры

Функция НовыйДокументПартии(СтруктураПараметров)
	// Документ Партия
	Партия = Документы.Партия.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(Партия);
	Партия.Дата = СтруктураПараметров.ДатаПерехода;
	Партия.Организация = СтруктураПараметров.Организация;
	Партия.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
	Партия.Записать();
		
	// запоминаем созданный документ
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		СтруктураПараметров.ДокументыОперации.Добавить(Партия.Ссылка);
	КонецЕсли;
	
	Возврат Партия.Ссылка;
КонецФункции

Процедура СформироватьПартииДляОстатковПоСкладуПоРегиструХозрасчетный(СтруктураПараметров, Партия)
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта,
		|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&Счет),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(СтруктураПараметров.ДатаПерехода, ВидГраницы.Включая));
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Если Партия = "ПартияПустая" Тогда
			ПартияСсылка = Неопределено;
		ИначеЕсли Партия = "Партия" Тогда
			ПартияСсылка = НовыйДокументПартии(СтруктураПараметров);
			СтруктураПараметров.Вставить("ПартияУчета", ПартияСсылка);
		КонецЕсли;
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ОперацияОбъект = Документы.ОперацияБух.СоздатьДокумент();
		ЗаполнениеДокументов.Заполнить(ОперацияОбъект);
		ОперацияОбъект.Дата = КонецДня(СтруктураПараметров.ДатаПерехода);
		ОперацияОбъект.Организация = СтруктураПараметров.Организация;
		ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ОперацияОбъект.Содержание = НСтр(
			"ru = 'Формирование партий при смене объекта УСН: регистр бухгалтерии ""Хозрасчетный"".'");
		ОперацияОбъект.Комментарий = НСтр("ru = '#Документ создан автоматически при изменении объекта УСН.'");
		ОперацияОбъект.Записать();
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = Движение.Добавить();
			Запись.Период = СтруктураПараметров.ДатаПерехода;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.Счет;
			Запись.СчетКт = ВыборкаДетальныеЗаписи.Счет;
			
			Запись.ВалютаДт = ВыборкаДетальныеЗаписи.Валюта;
			Запись.ПодразделениеДт = ВыборкаДетальныеЗаписи.Подразделение;
			Запись.ВалютаКт = ВыборкаДетальныеЗаписи.Валюта;
			Запись.ПодразделениеКт = ВыборкаДетальныеЗаписи.Подразделение;
			
			Запись.Сумма = ВыборкаДетальныеЗаписи.СуммаОстаток;
			Запись.КоличествоДт = ВыборкаДетальныеЗаписи.КоличествоОстаток;
			Запись.КоличествоКт = ВыборкаДетальныеЗаписи.КоличествоОстаток;
			
			Запись.СубконтоКт.Очистить();
			УстановитьСубконтоОстатковХозрасчетный(ВыборкаДетальныеЗаписи.Субконто1, Запись, ПартияСсылка);
			УстановитьСубконтоОстатковХозрасчетный(ВыборкаДетальныеЗаписи.Субконто2, Запись, ПартияСсылка);
			УстановитьСубконтоОстатковХозрасчетный(ВыборкаДетальныеЗаписи.Субконто3, Запись, ПартияСсылка);
		КонецЦикла;
		
		ОперацияОбъект.Движения.Записать();
		// запоминаем созданный документ
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
			СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСубконтоОстатковХозрасчетный(Субконто, Запись, ПартияСсылка)
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетДт, Запись.СубконтоДт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, Субконто);
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетКт, Запись.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, Субконто);
	ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.Склады") Тогда
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетДт, Запись.СубконтоДт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, Субконто);
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетКт, Запись.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, Субконто);
	Иначе
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетДт, Запись.СубконтоДт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, ПартияСсылка);
		БухгалтерскийУчет.УстановитьСубконто(
			Запись.СчетКт, Запись.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, Субконто);
	КонецЕсли;
КонецПроцедуры

Процедура ЗафиксироватьВыполнениеОперацииПерехода(СтруктураПараметров)
	
	// сохраняем ссылки на документы операции
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		ДокументыОперации = СтруктураПараметров.ДокументыОперации;
		Если ДокументыОперации.Количество() > 0 Тогда
			НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
			НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
			НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
			НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
			НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации); 
			
			Для каждого ДокументОперации Из ДокументыОперации Цикл
				Запись = НаборДокументы.Добавить();
				Запись.Активность = Истина;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
				Запись.ДокументОперации = ДокументОперации;
			КонецЦикла; 
			
			НаборДокументы.Записать();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтметкуОВводеОстатков(СтруктураПараметров)
	// Устанавливает отметку о введении остатков
	РегистрыСведений.НастройкиУчетаУСН.УстановитьОтметкуВыполненияВводаОстатковПриСменеОбъектаУСН(
		СтруктураПараметров.Организация,
		НачалоГода(КонецГода(СтруктураПараметров.ДатаПерехода) + 1));
КонецПроцедуры

Функция ДоПереходаМПЗПоСредней(Организация, ДатаПерехода)
	МПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Организация, ДатаПерехода);
	Возврат МПЗ = Перечисления.СпособыОценки.ПоСредней;
КонецФункции

Функция ПолучитьОстаткиПоРасходам(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РасходыПриУСНОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Остатки(&ДатаПерехода, Организация = &Организация) КАК РасходыПриУСНОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
		ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстаткиПоРасходамВведено(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходыПриУСН.Регистратор КАК Регистратор,
		|	СУММА(РасходыПриУСН.Сумма) КАК Сумма
		|ПОМЕСТИТЬ втВведенныеОстатки
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода,ДЕНЬ)
		|	И (ТИПЗНАЧЕНИЯ(РасходыПриУСН.Регистратор) = ТИП(Документ.ВводНачальныхОстатков)
		|			ИЛИ ТИПЗНАЧЕНИЯ(РасходыПриУСН.Регистратор) = ТИП(Документ.ОперацияБух))
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходыПриУСН.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(втВведенныеОстатки.Сумма), 0) КАК СуммаОборот
		|ИЗ
		|	втВведенныеОстатки КАК втВведенныеОстатки
		|		ПРАВОЕ СОЕДИНЕНИЕ втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ПО втВведенныеОстатки.Регистратор = втДокументыВводаОстатков.ДокументОперации";
	
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстаткиПоТоварам(СтруктураПараметров)

	// Остатки неоплаченных товаров на складах
	Если ДоПереходаМПЗПоСредней(СтруктураПараметров.Организация, СтруктураПараметров.ДатаПерехода) Тогда
		
		МассивРезультатов = ОстаткиПоНоменклатуреИКредиторскойЗадолженностиПоСредней(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Товары);
		
		НеоплаченныеТовары = МассивРезультатов[1].Выбрать();
		ТоварыНаСкладах = МассивРезультатов[2].Выгрузить();
		
		Если ТоварыНаСкладах.Количество() > 0 Тогда
			ТоварыНаСкладах.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		ТоваровВсего = 0;
		Пока НеоплаченныеТовары.Следующий() Цикл
			НаСкладе = ТоварыНаСкладах.НайтиСтроки(Новый Структура("Номенклатура", НеоплаченныеТовары.Номенклатура));
			Если НаСкладе.Количество() > 0 Тогда
				ТоварНаСкладах = НаСкладе[0];
				Если ТоварНаСкладах.Сумма <> 0 Тогда
					Если НеоплаченныеТовары.СуммаОстатокКт < ТоварНаСкладах.Сумма Тогда
						ТоваровВсего = ТоваровВсего + НеоплаченныеТовары.СуммаОстатокКт;
						ТоварНаСкладах.Сумма = ТоварНаСкладах.Сумма - НеоплаченныеТовары.СуммаОстатокКт;
					ИначеЕсли НеоплаченныеТовары.СуммаОстатокКт = ТоварНаСкладах.Сумма Тогда
						ТоваровВсего = ТоваровВсего + НеоплаченныеТовары.СуммаОстатокКт;
						ТоварНаСкладах.Сумма = 0;
					Иначе
						ТоваровВсего = ТоваровВсего + ТоварНаСкладах.Сумма;
						ТоварНаСкладах.Сумма = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоваровВсего = ОстатокСуммойПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Товары);
	КонецЕсли;
	
	Возврат Окр(ТоваровВсего, 2);
КонецФункции

Функция ПолучитьОстаткиПоТоварамВведено(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.Товары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасходыПриУСН.Сумма), 0) КАК СуммаОборот
		|ИЗ
		|	втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|		ПО втДокументыВводаОстатков.ДокументОперации = РасходыПриУСН.Регистратор
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьОстаткиПоМатериалам(СтруктураПараметров)
	// Остатки неоплаченных товаров на складах
	Если ДоПереходаМПЗПоСредней(СтруктураПараметров.Организация, СтруктураПараметров.ДатаПерехода) Тогда
		
		МассивРезультатов = ОстаткиПоНоменклатуреИКредиторскойЗадолженностиПоСредней(
			СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Материалы);
		
		НеоплаченныеМатериалы = МассивРезультатов[1].Выбрать();
		МатериалыНаСкладах = МассивРезультатов[2].Выгрузить();
		
		Если МатериалыНаСкладах.Количество() > 0 Тогда
			МатериалыНаСкладах.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		МатериаловВсего = 0;
		
		Если МатериалыНаСкладах.Количество() > 0 Тогда
			МатериалыНаСкладах.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		Пока НеоплаченныеМатериалы.Следующий() Цикл
			НаСкладе = МатериалыНаСкладах.НайтиСтроки(Новый Структура("Номенклатура",
																		НеоплаченныеМатериалы.Номенклатура));
			Если НаСкладе.Количество() > 0 Тогда
				МатериалНаСкладах = НаСкладе[0];
				Если МатериалНаСкладах.Сумма <> 0 Тогда
					Если НеоплаченныеМатериалы.СуммаОстатокКт < МатериалНаСкладах.Сумма Тогда
						МатериаловВсего = МатериаловВсего + НеоплаченныеМатериалы.СуммаОстатокКт;
						МатериалНаСкладах.Сумма = МатериалНаСкладах.Сумма
															- НеоплаченныеМатериалы.СуммаОстатокКт;
					ИначеЕсли НеоплаченныеМатериалы.СуммаОстатокКт = МатериалНаСкладах.Сумма Тогда
						МатериаловВсего = МатериаловВсего + НеоплаченныеМатериалы.СуммаОстатокКт;
						МатериалНаСкладах.Сумма = 0;
					Иначе
						МатериаловВсего = МатериаловВсего + МатериалНаСкладах.Сумма;
						МатериалНаСкладах.Сумма = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МатериаловВсего = ОстатокСуммойПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;

	Возврат ОКР(МатериаловВсего, 2);
КонецФункции

Функция ПолучитьОстаткиПоМатериаламВведено(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.Материалы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасходыПриУСН.Сумма), 0) КАК СуммаОборот
		|ИЗ
		|	втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|		ПО втДокументыВводаОстатков.ДокументОперации = РасходыПриУСН.Регистратор
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьОстаткиПоЗарплате(СтруктураПараметров)
	
	Если БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно() Тогда
		Возврат 0;
	КонецЕсли;
	
	ЗарплатаВсего = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
															ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЗарплатаВсего = Результат.СуммаОстаток;
	КонецЕсли;
	
	Возврат ЗарплатаВсего;
КонецФункции

Функция ПолучитьОстаткиПоЗарплатеВведено(СтруктураПараметров)
	
	Если БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И (ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
		|			ИЛИ ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасходыПриУСН.Сумма), 0) КАК СуммаОстаток
		|ИЗ
		|	втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|		ПО втДокументыВводаОстатков.ДокументОперации = РасходыПриУСН.Регистратор
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода, ДЕНЬ)
		|	И НЕ РасходыПриУСН.СчетУчета В (&Счет)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьОстаткиПоВзносам(СтруктураПараметров)
	
	ВзносыВсего = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
															ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ВзносыВсего = Результат.СуммаОстаток;
	КонецЕсли;
	
	Возврат ВзносыВсего;
КонецФункции

Функция ПолучитьОстаткиПоВзносамВведено(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасходыПриУСН.Сумма), 0) КАК СуммаОстаток
		|ИЗ
		|	втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|		ПО втДокументыВводаОстатков.ДокументОперации = РасходыПриУСН.Регистратор
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода, ДЕНЬ)
		|	И НЕ РасходыПриУСН.СчетУчета В (&Счет)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));

	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ОстатокСуммойПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров, СчетУчета)
	ТаблицаНоменклатуры = ОстаткиПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров, СчетУчета);
	Сумма = ТаблицаНоменклатуры.Итог("Сумма");
	
	Возврат Сумма;
КонецФункции

Функция ОстаткиПоНоменклатуреИКредиторскойЗадолженностиПоСредней(СтруктураПараметров, СчетУчета)
		Запрос = Новый Запрос;
		// Если организация до перехода использовала учет МПЗ По средней, то в момент перехода мы не можем определить
		// какие товары оплачены, а какие нет. Поэтому нужно взять задолженность на 60.01, 60.21, 60.31 и посмотреть документ по
		// которому есть задолженность. После этого необходимо связать номенклатуру которая есть в неоплаченных
		// документах, с той, что храниться на складе (есть в наличии). И далее вводить остатки только на то
		// количество, которое не оплачено, вычисляя его арифметически (документ может быть оплачен частично).
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Субконто1 КАК ДокументПартии,
			|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
			|	ХозрасчетныйОстатки.Счет КАК Счет
			|ПОМЕСТИТЬ втКредиторка
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&СчетаРасчетовСПоставщиками), &СубконтоДокументРасчетов, Организация = &Организация) КАК ХозрасчетныйОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента <> 0
			|			ТОГДА ВЫБОР
			|					КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА ВЫРАЗИТЬ(втКредиторка.СуммаОстатокКт / ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента * ПоступлениеТоваровУслугТовары.Сумма КАК ЧИСЛО(15, 2))
			|					ИНАЧЕ ВЫРАЗИТЬ(втКредиторка.СуммаОстатокКт / ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента * (ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС) КАК ЧИСЛО(15, 2))
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаОстатокКт,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|			ТОГДА ПоступлениеТоваровУслугТовары.Цена * ПоступлениеТоваровУслугТовары.Ссылка.КурсВзаиморасчетов
			|		ИНАЧЕ (ПоступлениеТоваровУслугТовары.Цена + ПоступлениеТоваровУслугТовары.СуммаНДС / ПоступлениеТоваровУслугТовары.Количество) * ПоступлениеТоваровУслугТовары.Ссылка.КурсВзаиморасчетов
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента <> 0
			|				И ПоступлениеТоваровУслугТовары.Цена <> 0
			|			ТОГДА ВЫБОР
			|					КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА ВЫРАЗИТЬ(втКредиторка.СуммаОстатокКт / ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента * ПоступлениеТоваровУслугТовары.Сумма / (ПоступлениеТоваровУслугТовары.Цена * ПоступлениеТоваровУслугТовары.Ссылка.КурсВзаиморасчетов) КАК ЧИСЛО(15, 3))
			|					ИНАЧЕ ВЫРАЗИТЬ(втКредиторка.СуммаОстатокКт / ПоступлениеТоваровУслугТовары.Ссылка.СуммаДокумента * ПоступлениеТоваровУслугТовары.Сумма / (ПоступлениеТоваровУслугТовары.Цена * ПоступлениеТоваровУслугТовары.Ссылка.КурсВзаиморасчетов) КАК ЧИСЛО(15, 3))
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Количество,
			|	втКредиторка.ДокументПартии КАК ДокументПартии
			|ИЗ
			|	втКредиторка КАК втКредиторка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|		ПО втКредиторка.ДокументПартии = ПоступлениеТоваровУслугТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХозрасчетныйОстаткиТоваров.Субконто1 КАК Номенклатура,
			|	ХозрасчетныйОстаткиТоваров.СуммаОстатокДт КАК Сумма,
			|	ХозрасчетныйОстаткиТоваров.КоличествоОстатокДт КАК Количество,
			|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК Партия,
			|	&Валюта КАК Валюта,
			|	ХозрасчетныйОстаткиТоваров.Счет КАК СчетУчета
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), &СубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОстаткиТоваров";
		
		Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
																ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
		МассивСчетовУчета = Новый Массив;
		МассивСчетовУчета.Добавить(СчетУчета);
		Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
		Запрос.УстановитьПараметр("Валюта",
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

		Запрос.УстановитьПараметр("СубконтоНоменклатура",
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("СубконтоДокументРасчетов",
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

		СчетаРасчетовСПоставщиками = Новый Массив;
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
		Запрос.УстановитьПараметр("СчетаРасчетовСПоставщиками",
			БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПоставщиками));
		
		Возврат Запрос.ВыполнитьПакет();
КонецФункции

Функция ОстаткиПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров, СчетУчета)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиТоваров.Субконто1 КАК Партия,
		|	ХозрасчетныйОстаткиТоваров.СуммаОстатокДт КАК СуммаОстатокДт
		|ПОМЕСТИТЬ втХозрасчетныйОстаткиТоваровПоПартиям
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), &СубконтоПартии, Организация = &Организация) КАК ХозрасчетныйОстаткиТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Партия,
		|	ВЫБОР
		|		КОГДА втХозрасчетныйОстаткиТоваровПоПартиям.СуммаОстатокДт <= ХозрасчетныйОстатки.СуммаОстатокКт
		|			ТОГДА 1
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт / втХозрасчетныйОстаткиТоваровПоПартиям.СуммаОстатокДт
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ втХозрасчетныйОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&СчетаРасчетовСПоставщиками), &СубконтоДокументыРасчета, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетныйОстаткиТоваровПоПартиям КАК втХозрасчетныйОстаткиТоваровПоПартиям
		|		ПО ХозрасчетныйОстатки.Субконто1 = втХозрасчетныйОстаткиТоваровПоПартиям.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиТоваров.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстаткиТоваров.Субконто2 КАК Партия,
		|	ХозрасчетныйОстаткиТоваров.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстаткиТоваров.КоличествоОстатокДт КАК КоличествоОстатокДт,
		|	ХозрасчетныйОстаткиТоваров.Счет КАК Счет
		|ПОМЕСТИТЬ втХозрасчетныйОстаткиТоваров
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), &СубконтоНоменклатурыИПартии, Организация = &Организация) КАК ХозрасчетныйОстаткиТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Партия КАК Партия,
		|	ХозрасчетныйОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиТоваров.СуммаОстатокДт * ХозрасчетныйОстатки.Коэффициент КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Коэффициент * ХозрасчетныйОстаткиТоваров.КоличествоОстатокДт КАК ЧИСЛО(15, 3)) КАК Количество,
		|	&Валюта КАК Валюта,
		|	ХозрасчетныйОстаткиТоваров.Счет КАК СчетУчета
		|ИЗ
		|	втХозрасчетныйОстаткиТоваров КАК ХозрасчетныйОстаткиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХозрасчетныйОстатки КАК ХозрасчетныйОстатки
		|		ПО (ХозрасчетныйОстатки.Партия = ХозрасчетныйОстаткиТоваров.Партия)";
		
		Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
		МассивСчетовУчета = Новый Массив;
		МассивСчетовУчета.Добавить(СчетУчета);
		Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
		
		СубконтоНоменклатурыИПартии = Новый Массив;
		СубконтоНоменклатурыИПартии.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		СубконтоНоменклатурыИПартии.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		Запрос.УстановитьПараметр("СубконтоНоменклатурыИПартии", СубконтоНоменклатурыИПартии);
		Запрос.УстановитьПараметр("СубконтоПартии", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		Запрос.УстановитьПараметр("СубконтоДокументыРасчета",
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
		Запрос.УстановитьПараметр("Валюта",
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		СчетаРасчетовСПоставщиками = Новый Массив;
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
		СчетаРасчетовСПоставщиками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
		Запрос.УстановитьПараметр("СчетаРасчетовСПоставщиками",
			БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПоставщиками));
		Возврат Запрос.Выполнить().Выгрузить();
	КонецФункции

Функция РасшифровкаПоТоварам(СтруктураПараметров) Экспорт
	// Остатки неоплаченных товаров на складах
	Если ДоПереходаМПЗПоСредней(СтруктураПараметров.Организация, СтруктураПараметров.ДатаПерехода) Тогда
		МассивРезультатов = ОстаткиПоНоменклатуреИКредиторскойЗадолженностиПоСредней(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Товары);
		
		НеоплаченныеТовары = МассивРезультатов[1].Выбрать();
		ТоварыНаСкладах = МассивРезультатов[2].Выгрузить();
		Если ТоварыНаСкладах.Количество() > 0 Тогда
			ТоварыНаСкладах.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		ТаблицаТоваров = ТоварыНаСкладах.Скопировать();
		ТаблицаТоваров.Очистить();
		
		Пока НеоплаченныеТовары.Следующий() Цикл
			НаСкладе = ТоварыНаСкладах.НайтиСтроки(Новый Структура("Номенклатура", НеоплаченныеТовары.Номенклатура));
			Если НаСкладе.Количество() > 0 Тогда
				ТоварНаСкладах = НаСкладе[0];
				Если ТоварНаСкладах.Сумма <> 0 Тогда
					СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТоваров, ТоварНаСкладах);
					СтрокаТаблицыТоваров.Партия = НеоплаченныеТовары.ДокументПартии;
					Если НеоплаченныеТовары.СуммаОстатокКт < ТоварНаСкладах.Сумма Тогда
						СтрокаТаблицыТоваров.Сумма = НеоплаченныеТовары.СуммаОстатокКт;
						ТоварНаСкладах.Сумма = ТоварНаСкладах.Сумма - НеоплаченныеТовары.СуммаОстатокКт;
					ИначеЕсли НеоплаченныеТовары.СуммаОстатокКт = ТоварНаСкладах.Сумма Тогда
						СтрокаТаблицыТоваров.Сумма = НеоплаченныеТовары.СуммаОстатокКт;
						ТоварНаСкладах.Сумма = 0;
					Иначе
						ТоварНаСкладах.Сумма = 0;
					КонецЕсли;
					Если НеоплаченныеТовары.Цена <> 0 Тогда
						СтрокаТаблицыТоваров.Количество = ОКР(СтрокаТаблицыТоваров.Сумма / НеоплаченныеТовары.Цена, 2);
					Иначе
						СтрокаТаблицыТоваров.Количество = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаТоваров = ОстаткиПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Товары);
	КонецЕсли;

	ТаблицаТоваров.Сортировать("Партия, Номенклатура");
	Возврат ТаблицаТоваров;
КонецФункции

Функция РасшифровкаПоТоварамМатериаламСРасхождениями(СтруктураПараметров, РазделУчета) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Партия КАК Партия,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Сумма КАК Сумма,
		|	ТаблицаТоваров.Количество КАК Количество
		|ПОМЕСТИТЬ втТаблицаТоваровУчет
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ втДокументыВводаОстатков
		|ИЗ
		|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|	И ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации.РазделУчета = &РазделУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходыПриУСН.Партия КАК Партия,
		|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
		|	ЕСТЬNULL(РасходыПриУСН.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(РасходыПриУСН.Количество, 0) КАК Количество
		|ПОМЕСТИТЬ втТаблицаТоваровВведено
		|ИЗ
		|	втДокументыВводаОстатков КАК втДокументыВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
		|		ПО втДокументыВводаОстатков.ДокументОперации = РасходыПриУСН.Регистратор
		|ГДЕ
		|	РасходыПриУСН.Организация = &Организация
		|	И РасходыПриУСН.Период = КОНЕЦПЕРИОДА(&ДатаПерехода, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втТаблицаТоваровВведено.Партия, втТаблицаТоваровУчет.Партия) КАК ПартияРасхождения,
		|	ЕСТЬNULL(втТаблицаТоваровВведено.Номенклатура, втТаблицаТоваровУчет.Номенклатура) КАК НоменклатураРасхождения,
		|	втТаблицаТоваровВведено.Сумма КАК СуммаВведено,
		|	втТаблицаТоваровВведено.Количество КАК КоличествоВведено,
		|	втТаблицаТоваровУчет.Сумма КАК СуммаРасхождения,
		|	втТаблицаТоваровУчет.Количество КАК КоличествоРасхождения
		|ИЗ
		|	втТаблицаТоваровВведено КАК втТаблицаТоваровВведено
		|		ПОЛНОЕ СОЕДИНЕНИЕ втТаблицаТоваровУчет КАК втТаблицаТоваровУчет
		|		ПО втТаблицаТоваровВведено.Партия = втТаблицаТоваровУчет.Партия
		|			И втТаблицаТоваровВведено.Номенклатура = втТаблицаТоваровУчет.Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров", РасшифровкаПоТоварам(СтруктураПараметров));
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров", РасшифровкаПоМатериалам(СтруктураПараметров));
	КонецЕсли;
	
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваров.Сортировать("ПартияРасхождения, НоменклатураРасхождения");
	Возврат ТаблицаТоваров;
КонецФункции

Функция РасшифровкаПоМатериалам(СтруктураПараметров) Экспорт
	// Остатки неоплаченных материалов на складах
	Если ДоПереходаМПЗПоСредней(СтруктураПараметров.Организация, СтруктураПараметров.ДатаПерехода) Тогда
		МассивРезультатов = ОстаткиПоНоменклатуреИКредиторскойЗадолженностиПоСредней(СтруктураПараметров,
			ПланыСчетов.Хозрасчетный.Материалы);
		
		НеоплаченныеМатериалы= МассивРезультатов[1].Выбрать();
		МатериалыНаСкладах = МассивРезультатов[2].Выгрузить();
		
		Если МатериалыНаСкладах.Количество() > 0 Тогда
			МатериалыНаСкладах.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		ТаблицаМатериалов = МатериалыНаСкладах.Скопировать();
		ТаблицаМатериалов.Очистить();
		
		Пока НеоплаченныеМатериалы.Следующий() Цикл
			НаСкладе = МатериалыНаСкладах.НайтиСтроки(Новый Структура("Номенклатура",
																		НеоплаченныеМатериалы.Номенклатура));
			Если НаСкладе.Количество() > 0 Тогда
				МатериалНаСкладах = НаСкладе[0];
				Если МатериалНаСкладах.Сумма <> 0 Тогда
					СтрокаТаблицыТоваров = ТаблицаМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТоваров, МатериалНаСкладах);
					СтрокаТаблицыТоваров.Партия = НеоплаченныеМатериалы.ДокументПартии;
					Если НеоплаченныеМатериалы.СуммаОстатокКт < МатериалНаСкладах.Сумма Тогда
						СтрокаТаблицыТоваров.Сумма = НеоплаченныеМатериалы.СуммаОстатокКт;
						МатериалНаСкладах.Сумма = МатериалНаСкладах.Сумма - НеоплаченныеМатериалы.СуммаОстатокКт;
					ИначеЕсли НеоплаченныеМатериалы.СуммаОстатокКт = МатериалНаСкладах.Сумма Тогда
						СтрокаТаблицыТоваров.Сумма = НеоплаченныеМатериалы.СуммаОстатокКт;
						МатериалНаСкладах.Сумма = 0;
					Иначе
						МатериалНаСкладах.Сумма = 0;
					КонецЕсли;
					Если СтрокаТаблицыТоваров.Количество <> 0 Тогда
						СтрокаТаблицыТоваров.Количество = ОКР(СтрокаТаблицыТоваров.Сумма / НеоплаченныеМатериалы.Цена, 2);
					Иначе
						СтрокаТаблицыТоваров.Количество = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ТаблицаМатериалов = ОстаткиПоНоменклатуреИКредиторскойЗадолженности(СтруктураПараметров,
																			ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;

	ТаблицаМатериалов.Сортировать("Партия, Номенклатура");
	Возврат ТаблицаМатериалов;
КонецФункции

Функция РасшифровкаПоЗарплате(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК РаботникОрганизации,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ПОМЕСТИТЬ втХозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда), &Субконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК НДФЛСПревышения,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются) КАК ОтражениеВУСН,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	втХозрасчетный.РаботникОрганизации КАК РаботникОрганизации,
	|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу) КАК СпособВыплаты,
	|	втХозрасчетный.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда) КАК СчетУчета
	|ИЗ
	|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
	|		ПРАВОЕ СОЕДИНЕНИЕ втХозрасчетный КАК втХозрасчетный
	|		ПО (втХозрасчетный.РаботникОрганизации = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо)";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
															ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция РасшифровкаПоНДФЛ(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидПлатежаВБюджет,
	|	ИСТИНА КАК ВидПлатежаВБюджетДоступность,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются) КАК ОтражениеВУСН,
	|	ХозрасчетныйОстатки.Организация.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИСТИНА КАК РегистрацияВНалоговомОрганеДоступность,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКТ,
	|	ЛОЖЬ КАК СуммаКтТолькоПросмотр,
	|	ЛОЖЬ КАК СуммаТолькоПросмотр,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЛОЖЬ КАК УровеньБюджетаДоступность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), &Субконто, Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
															ВидГраницы.Включая));
															
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция РасшифровкаПоВзносам(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидПлатежаВБюджет,
	|	ИСТИНА КАК ВидПлатежаВБюджетДоступность,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются) КАК ОтражениеВУСН,
	|	ХозрасчетныйОстатки.Организация.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИСТИНА КАК РегистрацияВНалоговомОрганеДоступность,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКТ,
	|	ЛОЖЬ КАК СуммаКтТолькоПросмотр,
	|	ЛОЖЬ КАК СуммаТолькоПросмотр,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЛОЖЬ КАК УровеньБюджетаДоступность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&Счет), &Субконто, Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаПерехода", Новый Граница(КонецДня(СтруктураПараметров.ДатаПерехода),
															ВидГраницы.Включая));
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Запрос.УстановитьПараметр("Счет", БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовУчета));
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ЗаписатьОперациюБизнесСтатистики(Действие)
	Если ЗначениеЗаполнено(Действие) Тогда
		ИмяКлючевойОперации = СтрШаблон("СменаОбъектаУСН.%1", Действие);
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
		СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяКлючевойОперации);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли