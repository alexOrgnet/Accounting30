#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Организация.Пустая() Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	ОрганизацияПредставление = Объект.Организация;
	
	Если Не Объект.Организация.Пустая() Тогда
		// Рассчитаем количество периодов перехода и рассчитаем остатки
		ЗаполнитьПериодыПерехода();
	КонецЕсли;
	
	Элементы.СформироватьОстатки.Доступность = ПравоДоступа("Редактирование", Метаданные.Документы.ВводНачальныхОстатков);
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода), ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "АктуализацияЗавершенаУспешно" Тогда
		Если Параметр.Организация = Объект.Организация Тогда
			ЗаполнитьПериодыПерехода();
			ПолучитьДанныеДляОрганизации(Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Объект.ДатаПерехода = НачалоДня(КонецГода(ДобавитьМесяц(ВыбранноеЗначение.ПериодПерехода, -1)));
	РассчитатьСуммыОстатков();
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьДанныеДляОрганизации(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПредставление = Объект.Организация;
	ЗаполнитьПериодыПерехода();
	ПолучитьДанныеДляОрганизации(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыВыполненияНажатие(Элемент)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	ОткрытьФорму("Обработка.ВводОстатковПриИзмененииОбъектаУСН.Форма.ФормаВведенныеДокументы", СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПериодНажатие(Элемент)
	ОткрытьФорму("Обработка.ВводОстатковПриИзмененииОбъектаУСН.Форма.ФормаПериоды",
		Новый Структура("ПериодыПерехода, РежимВыбора", Объект.ПериодыПерехода, Истина),
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаТоварыНажатие(Элемент)
	ОткрытьФормуРасшифровки("Товары", НужноИсправитьСуммуТовары);
КонецПроцедуры

&НаКлиенте
Процедура СуммаМатериалыНажатие(Элемент)
	ОткрытьФормуРасшифровки("Материалы", НужноИсправитьСуммуМатериалы);
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗарплатаНажатие(Элемент)
	ОткрытьФормуРасшифровки("Зарплата", НужноИсправитьСуммуЗарплата);
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносыНажатие(Элемент)
	ОткрытьФормуРасшифровки("Взносы", НужноИсправитьСуммуВзносы);
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасходыНажатие(Элемент)
	ОткрытьФормуРасшифровки("Расходы", НужноИсправитьСуммуРасходы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(РазделУчета, ТребуетсяИсправление)
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("РазделУчета", РазделУчета);
	ПараметрыРасшифровки.Вставить("Организация", Объект.Организация);
	ПараметрыРасшифровки.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	ПараметрыРасшифровки.Вставить("ТребуетсяИсправление", ТребуетсяИсправление);
		
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.Заголовок               = НСтр("ru = 'Расшифровка сумм'");
	ПараметрыОткрытия.ИмяФормы                = "Обработка.ВводОстатковПриИзмененииОбъектаУСН.Форма.ФормаРасшифровкаСуммы";
	ПараметрыОткрытия.ЗамерПроизводительности = "СозданиеФормыРасшифровкиСуммСменыОбъектаУСН";
	ПараметрыОткрытия.НавигационнаяСсылка     = Неопределено;
	ПараметрыОткрытия.Уникальность            = РазделУчета;
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия,ПараметрыРасшифровки, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОстатки(Команда)
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организация", Объект.Организация);
	ПараметрыФункции.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	
	СтрокиПерехода = Объект.ПериодыПерехода.НайтиСтроки(Новый Структура("ПериодПерехода", Объект.ДатаПерехода));
	Если СтрокиПерехода.Количество() > 0 Тогда
		ПараметрыФункции.Вставить("ОбъектНалогообложения", СтрокиПерехода[0].ОбъектНалогообложения);
	КонецЕсли;
	
	ДлительнаяОперация = ВвестиОстаткиНаСервере(ПараметрыФункции, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется ввод остатков...'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВвестиОстаткиЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеЗавершения, ПараметрыОжидания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляОрганизации(АктуализироватьДанные)
	НастройкаФормы = "ПустаяФорма";
	Если Не Объект.Организация.Пустая() Тогда
		Если Объект.ПериодыПерехода.Количество() > 0 Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется подготовка данных...'");
			ОповещениеЗавершения = Новый ОписаниеОповещения("РассчитатьСуммыОстатковЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеЗавершения, ПараметрыОжидания);
		Иначе
			НастройкаФормы = "БезПереходов";
		КонецЕсли;
	КонецЕсли;
	
	Если АктуализироватьДанные Тогда
		БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаПерехода));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыПерехода()
	НастройкаФормы = "БезПереходов";
	Объект.ПериодыПерехода.Очистить();
	УправлениеФормой(ЭтотОбъект);
	Объект.ПериодыПерехода.Загрузить(
		РегистрыСведений.НастройкиСистемыНалогообложения.ПериодыСменыОбъектаУСН(Объект.Организация));
	
	Если Объект.ПериодыПерехода.Количество() > 0 Тогда
		Объект.ДатаПерехода = Объект.ПериодыПерехода[0].ПериодПерехода;
		НастройкаФормы = "";
	
		// Запуск пересчета остатков
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("Организация", Объект.Организация);
		ПараметрыФункции.Вставить("ДатаПерехода", Объект.ДатаПерехода);
		ДлительнаяОперация = РассчитатьСуммыОстатковНаСервере(ПараметрыФункции, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОстатков()
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организация",  Объект.Организация);
	ПараметрыФункции.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	
	ДлительнаяОперация = РассчитатьСуммыОстатковНаСервере(ПараметрыФункции, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется подготовка данных...'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("РассчитатьСуммыОстатковЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеЗавершения, ПараметрыОжидания);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммыОстатковНаСервере(ПараметрыФункции, УникальныйИдентификатор)
	// Функция запуска расчета на сервере
	ИмяФункции = "Обработки.ВводОстатковПриИзмененииОбъектаУСН.СуммыОстатковРассчитанныеИВведенные";
	
	// Параметры длительной операции
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет сумм остатков'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции, ПараметрыФункции);
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммыОстатковЗавершение(Результат, ДопоплнительныеПараметры) Экспорт
	// Прервали обработку
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		РассчитанныеСуммы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		СтрокиПерехода = Объект.ПериодыПерехода.НайтиСтроки(Новый Структура("ПериодПерехода", Объект.ДатаПерехода));
		Если СтрокиПерехода.Количество() > 0 Тогда
			ОбъектНалогообложения = СтрокиПерехода[0].ОбъектНалогообложения;
		КонецЕсли;
		
		ОтображениеСуммДоходы(РассчитанныеСуммы, ОбъектНалогообложения);
		ОтображениеСуммРасходы(РассчитанныеСуммы, ОбъектНалогообложения);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВвестиОстаткиНаСервере(ПараметрыФункции, УникальныйИдентификатор)
	// Функция запуска расчета на сервере
	ИмяФункции = "Обработки.ВводОстатковПриИзмененииОбъектаУСН.ВвестиОстатки";
	
	// Параметры длительной операции
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ввод остатков'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции, ПараметрыФункции);
КонецФункции

&НаКлиенте
Процедура ВвестиОстаткиЗавершение(Результат, ДопоплнительныеПараметры) Экспорт 
	// Прервали обработку
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		РассчитатьСуммыОстатков();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Созданы документы остатков.'"), , , БиблиотекаКартинок.Информация32);
		НужноИсправитьСуммуТовары    = Ложь;
		НужноИсправитьСуммуМатериалы = Ложь;
		НужноИсправитьСуммуЗарплата  = Ложь;
		НужноИсправитьСуммуВзносы    = Ложь;
		НужноИсправитьСуммуРасходы   = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокСуммы(Сумма)
	Возврат СтрШаблон("%1 %2", 
			Сумма,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
КонецФункции

&НаКлиенте
Процедура ОтображениеСуммРасходы(РассчитанныеСуммы, ОбъектНалогообложения)
	Если Не ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы") Тогда
		Возврат;
	КонецЕсли;
	
	НужноИсправитьСуммуРасходы = РассчитанныеСуммы.Расходы <> 0 И РассчитанныеСуммы.РасходыВведено <> 0;
	
	Если РассчитанныеСуммы.Расходы = 0 И РассчитанныеСуммы.РасходыВведено = 0 Тогда
		// Не вводили. Ввод остатков не нужен
		Элементы.СуммаРасходы.Заголовок = ЗаголовокСуммы(РассчитанныеСуммы.Расходы);
		НастройкаФормы = "БезПереходов";
	ИначеЕсли РассчитанныеСуммы.Расходы <> 0 И РассчитанныеСуммы.РасходыВведено = 0 Тогда
		// Не вводили. Нужен ввод.
		Элементы.СуммаРасходы.Заголовок =ЗаголовокСуммы(РассчитанныеСуммы.Расходы);
		НастройкаФормы = "ДоходНуженВвод";
	ИначеЕсли РассчитанныеСуммы.Расходы = 0 И РассчитанныеСуммы.РасходыВведено <> 0 Тогда
		// Вводили. Все введено верно.
		Элементы.СуммаРасходы.Заголовок = ЗаголовокСуммы(-РассчитанныеСуммы.РасходыВведено);
		НастройкаФормы = "ДоходВведено";
	ИначеЕсли РассчитанныеСуммы.Расходы <> 0 И РассчитанныеСуммы.РасходыВведено <> 0 Тогда
		// Вводили. Введено не верно.
		Элементы.СуммаРасходы.Заголовок = ЗаголовокСуммы(РассчитанныеСуммы.Расходы - РассчитанныеСуммы.РасходыВведено);
		НастройкаФормы = "ДоходНужноИсправление";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСуммДоходы(РассчитанныеСуммы, ОбъектНалогообложения)
	Если ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СуммаТовары.Заголовок    = ЗаголовокСуммы(РассчитанныеСуммы.Товары);
	Элементы.СуммаМатериалы.Заголовок = ЗаголовокСуммы(РассчитанныеСуммы.Материалы);
	Элементы.СуммаЗарплата.Заголовок  = ЗаголовокСуммы(РассчитанныеСуммы.Зарплата);
	Элементы.СуммаВзносы.Заголовок    = ЗаголовокСуммы(РассчитанныеСуммы.Взносы);
		
	Если РассчитанныеСуммы.Товары = 0
		И РассчитанныеСуммы.Материалы = 0
		И РассчитанныеСуммы.Зарплата = 0
		И РассчитанныеСуммы.Взносы = 0
		И РассчитанныеСуммы.ТоварыВведено = 0
		И РассчитанныеСуммы.МатериалыВведено = 0
		И РассчитанныеСуммы.ЗарплатаВведено = 0
		И РассчитанныеСуммы.ВзносыВведено = 0 Тогда
		// Не вводили. Ввод остатков не нужен
		НастройкаФормы = "БезПереходов";
	ИначеЕсли (РассчитанныеСуммы.Товары <> 0
		Или РассчитанныеСуммы.Материалы <> 0
		Или РассчитанныеСуммы.Зарплата <> 0
		Или РассчитанныеСуммы.Взносы <> 0)
		И (РассчитанныеСуммы.ТоварыВведено = 0
		И РассчитанныеСуммы.МатериалыВведено = 0
		И РассчитанныеСуммы.ЗарплатаВведено = 0
		И РассчитанныеСуммы.ВзносыВведено = 0) Тогда
		// Не вводили. Нужен ввод.
		НастройкаФормы = "РасходНуженВвод";
	ИначеЕсли (РассчитанныеСуммы.Товары = РассчитанныеСуммы.ТоварыВведено)
		И (РассчитанныеСуммы.Материалы = РассчитанныеСуммы.МатериалыВведено)
		И (РассчитанныеСуммы.Зарплата = РассчитанныеСуммы.ЗарплатаВведено)
		И (РассчитанныеСуммы.Взносы = РассчитанныеСуммы.ВзносыВведено) Тогда
		// Вводили. Все введено верно.
		НастройкаФормы = "РасходВведено";
	ИначеЕсли (РассчитанныеСуммы.Товары <> РассчитанныеСуммы.ТоварыВведено)
		Или (РассчитанныеСуммы.Материалы <> РассчитанныеСуммы.МатериалыВведено)
		Или (РассчитанныеСуммы.Зарплата <> РассчитанныеСуммы.ЗарплатаВведено)
		Или (РассчитанныеСуммы.Взносы <> РассчитанныеСуммы.ВзносыВведено) Тогда
		// Вводили. Введено не верно.
		НастройкаФормы = "РасходНужноИсправление";
		
		НужноИсправитьСуммуТовары    = РассчитанныеСуммы.Товары <> РассчитанныеСуммы.ТоварыВведено;
		НужноИсправитьСуммуМатериалы = РассчитанныеСуммы.Материалы <> РассчитанныеСуммы.МатериалыВведено;
		НужноИсправитьСуммуЗарплата  = РассчитанныеСуммы.Зарплата <> РассчитанныеСуммы.ЗарплатаВведено;
		НужноИсправитьСуммуВзносы    = РассчитанныеСуммы.Взносы <> РассчитанныеСуммы.ВзносыВведено;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	БылиСменыОбъектов = (Объект.ПериодыПерехода.Количество() > 0) И (Форма.НастройкаФормы <> "БезПереходов");
	МенялиБольшеОдногоРаза = Объект.ПериодыПерехода.Количество() > 1;
	
	Если БылиСменыОбъектов Тогда
		Элементы.НадписьПериод.Заголовок = СтрШаблон(НСтр("ru = 'Период смены объекта УСН: %1'"), 
			Формат(НачалоГода(ДобавитьМесяц(Объект.ДатаПерехода, 1)), НСтр("ru='ДФ=''ММММ гггг ""г.""'''")));
		Элементы.НадписьПериод.Гиперссылка = МенялиБольшеОдногоРаза;
	Иначе
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Организация не меняла объект налогообложения УСН или ввод остатков не требуется.'");
	КонецЕсли;
	Элементы.НадписьПериод.Видимость = Объект.ПериодыПерехода.Количество() > 0;
	Элементы.Выполнение.Видимость = БылиСменыОбъектов;
	
	Элементы.НадписьПодсказка.Видимость = Не(Форма.НастройкаФормы = "ПустаяФорма");
	
	Если Форма.НастройкаФормы = "ДоходНуженВвод" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы"", требуется сформировать остатки по налоговому учету.'");
	ИначеЕсли Форма.НастройкаФормы = "ДоходВведено" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы"", сформированы остатки по налоговому учету.'");
	ИначеЕсли Форма.НастройкаФормы = "ДоходНужноИсправление" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы"", требуется исправить расхождения в документах ввода остатков по налоговому учету.'");
	ИначеЕсли Форма.НастройкаФормы = "РасходНуженВвод" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы минус расходы"", требуется сформировать остатки по налоговому учету.'");
	ИначеЕсли Форма.НастройкаФормы = "РасходВведено" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы минус расходы"", сформированы остатки по налоговому учету.'");
	ИначеЕсли Форма.НастройкаФормы = "РасходНужноИсправление" Тогда
		Элементы.НадписьПодсказка.Заголовок = НСтр("ru = 'Объект налогообложения УСН был изменен на ""доходы минус расходы"", требуется исправить расхождения в документах ввода остатков по налоговому учету.'");
	КонецЕсли;
	
	Элементы.ГруппаНадписиСостояния.Видимость = БылиСменыОбъектов;
	
	ВидимостьРазделовДоход = Форма.НастройкаФормы = "ДоходНуженВвод"
		Или Форма.НастройкаФормы = "ДоходВведено"
		Или Форма.НастройкаФормы = "ДоходНужноИсправление";
		
	ВидимостьРазделовРасход = Форма.НастройкаФормы = "РасходНуженВвод"
		Или Форма.НастройкаФормы = "РасходВведено"
		Или Форма.НастройкаФормы = "РасходНужноИсправление";

	Элементы.ГруппаТовары.Видимость         = ВидимостьРазделовРасход;
	Элементы.РазделительТовары.Видимость    = ВидимостьРазделовРасход;
	Элементы.ГруппаМатериалы.Видимость      = ВидимостьРазделовРасход;
	Элементы.РазделительМатериалы.Видимость = ВидимостьРазделовРасход;
	Элементы.ГруппаЗарплата.Видимость       = ВидимостьРазделовРасход;
	Элементы.РазделительЗарплата.Видимость  = ВидимостьРазделовРасход;
	Элементы.ГруппаВзносы.Видимость         = ВидимостьРазделовРасход;
	Элементы.ГруппаРасходы.Видимость        = ВидимостьРазделовДоход;
	
	#Если Клиент Тогда
		Элементы.СуммаВзносы.ЦветТекста    = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаГиперссылка");
		Элементы.СуммаЗарплата.ЦветТекста  = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаГиперссылка");
		Элементы.СуммаМатериалы.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаГиперссылка");
		Элементы.СуммаТовары.ЦветТекста    = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаГиперссылка");
		Элементы.СуммаРасходы.ЦветТекста   = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаГиперссылка");
	#Иначе
		Элементы.СуммаВзносы.ЦветТекста    = ЦветаСтиля["СменаОбъектаУСНСуммаГиперссылка"];
		Элементы.СуммаЗарплата.ЦветТекста  = ЦветаСтиля["СменаОбъектаУСНСуммаГиперссылка"];
		Элементы.СуммаМатериалы.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаГиперссылка"];
		Элементы.СуммаТовары.ЦветТекста    = ЦветаСтиля["СменаОбъектаУСНСуммаГиперссылка"];
		Элементы.СуммаРасходы.ЦветТекста   = ЦветаСтиля["СменаОбъектаУСНСуммаГиперссылка"];
	#КонецЕсли
	
	Если Форма.НастройкаФормы = "ДоходНуженВвод" Или Форма.НастройкаФормы = "РасходНуженВвод" Тогда
		Элементы.НадписьРезультат.Заголовок  = НСтр("ru = 'Не выполнено'");
		#Если Клиент Тогда
			Элементы.НадписьРезультат.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСостояниеНеВыполнено");
		#Иначе
			Элементы.НадписьРезультат.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСостояниеНеВыполнено"];
		#КонецЕсли
		Элементы.СтатусРасходы.Картинка   = БиблиотекаКартинок.СерыйШар;
		Элементы.СтатусТовары.Картинка    = БиблиотекаКартинок.СерыйШар;
		Элементы.СтатусМатериалы.Картинка = БиблиотекаКартинок.СерыйШар;
		Элементы.СтатусЗарплата.Картинка  = БиблиотекаКартинок.СерыйШар;
		Элементы.СтатусВзносы.Картинка    = БиблиотекаКартинок.СерыйШар;
		Элементы.СформироватьОстатки.Заголовок = НСтр("ru = 'Сформировать начальные остатки'");
	ИначеЕсли Форма.НастройкаФормы = "ДоходВведено" Или Форма.НастройкаФормы = "РасходВведено" Тогда
		Элементы.НадписьРезультат.Заголовок  = НСтр("ru = 'Выполнено'");
		#Если Клиент Тогда
			Элементы.НадписьРезультат.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСостояниеВыполнено");
		#Иначе
			Элементы.НадписьРезультат.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСостояниеВыполнено"];
		#КонецЕсли
		Элементы.СтатусРасходы.Картинка   = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусТовары.Картинка    = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусМатериалы.Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусЗарплата.Картинка  = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусВзносы.Картинка    = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СформироватьОстатки.Заголовок = НСтр("ru = 'Обновить начальные остатки'");
	ИначеЕсли Форма.НастройкаФормы = "РасходНужноИсправление" Или Форма.НастройкаФормы = "ДоходНужноИсправление" Тогда
		Элементы.НадписьРезультат.Заголовок  = НСтр("ru = 'Есть расхождения'");
		#Если Клиент Тогда
			Элементы.НадписьРезультат.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСостояниеЕстьРасхождения");
		#Иначе
			Элементы.НадписьРезультат.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСостояниеЕстьРасхождения"];
		#КонецЕсли
		Элементы.СтатусВзносы.Картинка    = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусЗарплата.Картинка  = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусМатериалы.Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусТовары.Картинка    = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Элементы.СтатусРасходы.Картинка   = БиблиотекаКартинок.ОперацияВыполненаУспешно;
	
		Если Форма.НужноИсправитьСуммуВзносы Тогда
			Элементы.СтатусВзносы.Картинка  = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
			#Если Клиент Тогда
				Элементы.СуммаВзносы.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаЕстьРасхождения");
			#Иначе
				Элементы.СуммаВзносы.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаЕстьРасхождения"];
			#КонецЕсли
		КонецЕсли;
		Если Форма.НужноИсправитьСуммуЗарплата Тогда
			Элементы.СтатусЗарплата.Картинка  = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
			#Если Клиент Тогда
				Элементы.СуммаЗарплата.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаЕстьРасхождения");
			#Иначе
				Элементы.СуммаЗарплата.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаЕстьРасхождения"];
			#КонецЕсли
		КонецЕсли;
		Если Форма.НужноИсправитьСуммуМатериалы Тогда
			Элементы.СтатусМатериалы.Картинка  = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
			#Если Клиент Тогда
				Элементы.СуммаМатериалы.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаЕстьРасхождения");
			#Иначе
				Элементы.СуммаМатериалы.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаЕстьРасхождения"];
			#КонецЕсли
		КонецЕсли;
		Если Форма.НужноИсправитьСуммуТовары Тогда
			Элементы.СтатусТовары.Картинка  = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
			#Если Клиент Тогда
				Элементы.СуммаТовары.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаЕстьРасхождения");
			#Иначе
				Элементы.СуммаТовары.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаЕстьРасхождения"];
			#КонецЕсли
		КонецЕсли;
		Если Форма.НужноИсправитьСуммуРасходы Тогда
			Элементы.СтатусРасходы.Картинка  = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
			#Если Клиент Тогда
				Элементы.СуммаРасходы.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("СменаОбъектаУСНСуммаЕстьРасхождения");
			#Иначе
				Элементы.СуммаРасходы.ЦветТекста = ЦветаСтиля["СменаОбъектаУСНСуммаЕстьРасхождения"];
			#КонецЕсли
		КонецЕсли;
		Элементы.СформироватьОстатки.Заголовок = НСтр("ru = 'Исправить расхождения'");
	КонецЕсли;
	
	Элементы.РезультатыВыполнения.Видимость =
		Форма.НастройкаФормы = "РасходНужноИсправление"
		Или Форма.НастройкаФормы = "ДоходНужноИсправление"
		Или Форма.НастройкаФормы = "ДоходВведено"
		Или Форма.НастройкаФормы = "РасходВведено";
	Элементы.СформироватьОстатки.КнопкаПоУмолчанию =
		Не (Форма.НастройкаФормы = "ДоходВведено"
		Или Форма.НастройкаФормы = "РасходВведено");
КонецПроцедуры

#КонецОбласти
