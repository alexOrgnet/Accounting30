#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Выполняет формирование документа "Уведомление о спецрежимах налогообложения"
//
// Параметры:
//   ПараметрыВыполнения - структура с реквизитами Помощника заполнения заявления на получение патента
//
// Возвращаемое значение:
//  ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//
Функция СформироватьЗаявлениеНаПолучениеПатента(ПараметрыВыполнения, АдресРезультата = Неопределено) Экспорт
	
	СведенияОбОрганизации = СведенияОбИндивидуальномПредпринимателе(
		ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаСоставления);
	
	КодНОУчет = СведенияОбОрганизации.КодНО;
	
	ПараметрыКодаНО = НовыеПараметрыЗаполненияКодНалоговогоОргана();
	ЗаполнитьЗначенияСвойств(ПараметрыКодаНО, ПараметрыВыполнения);
	ПараметрыКодаНО.КодНалоговогоОрганаИП = ПараметрыВыполнения.КодНалоговогоОргана;
	ПараметрыКодаНО.АдрЮР_JSON = СведенияОбОрганизации.АдрЮР_JSON;
	
	КодНалоговогоОргана = КодНалоговогоОрганаПатента(ПараметрыКодаНО, КодНОУчет);
	
	ПараметрыЗаявления = Новый Структура;
	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
		Если ТипЗнч(ТекПараметр.Значение) <> Тип("ТаблицаЗначений") Тогда
			ПараметрыЗаявления.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПараметрыВыполнения.Свойство("ИмяФормы") Тогда
		ИмяФормы = РегламентированнаяОтчетность.ПолучитьАктуальнуюФормуУведомления(
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
		ПараметрыВыполнения.Вставить("ИмяФормы", ИмяФормы);
	КонецЕсли;
	
	ПараметрыЗаявления.Вставить("Стр01",  ДанныеЛистаТитульнаяСтраница(ПараметрыВыполнения, СведенияОбОрганизации, КодНалоговогоОргана));
	ПараметрыЗаявления.Вставить("Стр02",  ДанныеЛиста2(ПараметрыВыполнения));
	ПараметрыЗаявления.Вставить("ЛистыА", ДанныеЛистаА(ПараметрыВыполнения, КодНалоговогоОргана));
	ПараметрыЗаявления.Вставить("ЛистыБ", ДанныеЛистаБ(ПараметрыВыполнения, КодНалоговогоОргана, КодНОУчет));
	ПараметрыЗаявления.Вставить("ЛистыВ", ДанныеЛистаВ(ПараметрыВыполнения, КодНалоговогоОргана, КодНОУчет));
	ПараметрыЗаявления.Вставить("РегистрацияВИФНС",
		РегистрацияВНалоговомОргане(ПараметрыВыполнения.Организация, КодНалоговогоОргана));
	
	ПредставительУказан = ЗначениеЗаполнено(ПараметрыВыполнения.Представитель);
	Если ПредставительУказан И ТипЗнч(ПараметрыВыполнения.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьСтруктуруФИОПодписанта(ПараметрыВыполнения.Представитель, ПараметрыЗаявления);
	ИначеЕсли ПредставительУказан Тогда
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(ПараметрыВыполнения.Представитель);
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			ДополнитьСтруктуруФИОПодписанта(КонтактноеЛицо, ПараметрыЗаявления);
		Иначе
			ДополнитьСтруктуруФИОПодписанта(ПараметрыВыполнения.Представитель, ПараметрыЗаявления);
		КонецЕсли;
		
	Иначе
		ДополнитьСтруктуруФИОПодписанта(СведенияОбОрганизации, ПараметрыЗаявления);
	КонецЕсли;
	
	ЗаявлениеНаПатент = НайтиЗаявлениеНаПолучениеПатента(ПараметрыВыполнения);
	
	ПараметрыВыполнения.Вставить("ИмяПомощника", Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Имя);
	ПараметрыЗаявления.Вставить("ДанныеПомощникаЗаполнения", ПараметрыВыполнения);
	
	Если Не ЗначениеЗаполнено(ЗаявлениеНаПатент.Ссылка) Тогда
		
		ДокументСсылка = Отчеты.РегламентированноеУведомлениеПолучениеПатента.СформироватьНовоеУведомление(
			ЗаявлениеНаПатент.РедакцияФормы, ПараметрыЗаявления);
		
	ИначеЕсли ЗначениеЗаполнено(ЗаявлениеНаПатент.Ссылка)
		И УказыватьАдресаВФорматеФИАС(ЗаявлениеНаПатент.РедакцияФормы) Тогда
		
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", ЗаявлениеНаПатент.Ссылка);
		Отчеты.РегламентированноеУведомлениеПолучениеПатента.СформироватьНовоеУведомление(
			ЗаявлениеНаПатент.РедакцияФормы,
			ПараметрыЗаявления);
		
		ДокументСсылка = ЗаявлениеНаПатент.Ссылка;
		
	Иначе
		
		ОбновитьТекущийДокумент(ЗаявлениеНаПатент.Ссылка, ЗаявлениеНаПатент.РедакцияФормы, ПараметрыЗаявления);
		ДокументСсылка = ЗаявлениеНаПатент.Ссылка;
		
	КонецЕсли;
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(ДокументСсылка, АдресРезультата);
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

// Возвращает данные о последнем созданном заявлении
//
// Параметры:
//   ПараметрыВыполнения - Структура с возможными ключами: Организация, СсылкаНаДокумент, ИмяФормы, СоздатьНовоеУведомление
//
// Возвращаемое значение:
//  Структура, ключи:
//     - Дата - Дата (Если документ не был ранее создан, тогда пустая дата)
//     - Ссылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения (Если документ не был ранее создан, тогда Неопределено)
//     - ИмяФормы - Строка (напр., Отчет.РегламентированноеУведомлениеПолучениеПатента.Форма.Форма2017_1)
//     - РедакцияФормы - Строка (напр., Форма2020_1) - редакция формы заявления
//
Функция НайтиЗаявлениеНаПолучениеПатента(ПараметрыВыполнения) Экспорт
	
	Организация = ПараметрыВыполнения.Организация;
	
	ЗаявлениеПатент = Новый Структура;
	
	СсылкаНаОбъект = Неопределено;
	Если ПараметрыВыполнения.Свойство("СсылкаНаДокумент", СсылкаНаОбъект) Тогда
		ЗаявлениеПатент.Вставить("Ссылка", СсылкаНаОбъект);
		ЗаявлениеПатент.Вставить("ИмяФормы", ПараметрыВыполнения.ИмяФормы);
		ЗаявлениеПатент.Вставить("РедакцияФормы", РедакцияФормыЗаявления(ПараметрыВыполнения.ИмяФормы));
		Возврат ЗаявлениеПатент;
	КонецЕсли;
	
	РедакцияФормыПоУмолчанию = РегламентированнаяОтчетность.ПолучитьАктуальнуюФормуУведомления(
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
	
	ЗаявлениеПатент.Вставить("Дата", Дата(1, 1, 1));
	ЗаявлениеПатент.Вставить("Ссылка", Неопределено);
	
	ЗаявлениеПатент.Вставить(
		"ИмяФормы",
		СтрШаблон("Отчет.РегламентированноеУведомлениеПолучениеПатента.Форма.%1", РедакцияФормыПоУмолчанию));
	ЗаявлениеПатент.Вставить("РедакцияФормы", РедакцияФормыПоУмолчанию);
	
	СоздатьНовоеЗаявление = Неопределено;
	Если Не ПараметрыВыполнения.Свойство("СоздатьНовоеЗаявление", СоздатьНовоеЗаявление)
		Или СоздатьНовоеЗаявление = Ложь Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Организация);
		Отбор.Вставить("ВидУведомления",
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
		Отбор.Вставить("ИмяФормы", РедакцияФормыПоУмолчанию); // Ранее созданные заявления старых редакций не перезаполняем, создаем новые.
		
		Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
		Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
		Если Уведомления.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЗаявлениеПатент, Уведомления[0], , "ИмяФормы");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаявлениеПатент;
	
КонецФункции

// КлассификаторВидовПредпринимательскойДеятельностиПСН
//
// Параметры:
//  ДатаНачалаДействияПатента - Дата - по данному параметру определяется актуальная версия классификатора
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Код - Строка - код по классификатору видов предпринимателькой деятельности ПСН
//  * Наименование - Строка - сокращенное наименование вида деятельности
//  * НаименованиеПолное - Строка - полное наименование вида деятельности
//  * КодТипаТС - Строка - код типа транспортного средства
//  * ЭтоВодныйТранспорт - Булево - признак использования водного транспорта
//  * ЭтоПеревозкаГрузов - Булево - признак связи вида деятельности с грузоперевозками
//  * ЭтоПеревозкаПассажиров - Булево - признак связи вида деятельности с пассажирскими перевозками
//  * УказатьОбъекты - Булево - признак необходимости указать объекты для выбранного вида деятельности
//  * СоответствующиеКодыОКВЭД - СписокЗначений - список кодов ОКВЭД, связанных с данным видом деятельности ПСН
//
Функция КлассификаторВидовПредпринимательскойДеятельностиПСН(ДатаНачалаДействияПатента) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачалаДействияПатента) Тогда
		ДатаПолученияСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
	Иначе
		ДатаПолученияСведений = ДатаНачалаДействияПатента;
	КонецЕсли;
	Если Год(ДатаПолученияСведений) < 2021 Тогда
		ИмяМакета = "КлассификаторВидовПредпринимательскойДеятельностиПСН2020";
	Иначе
		ИмяМакета = "КлассификаторВидовПредпринимательскойДеятельностиПСН";
	КонецЕсли;
	
	Макет = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет(ИмяМакета);
	
	ТаблицаКлассификатора = ОбщегоНазначения.ЗначениеИзСтрокиXML(Макет.ПолучитьТекст());
	
	// Макет на 2021 год содержит временные коды для патентов, оформляемых при переходе с ЕНВД.
	// Удалим их, если переходный период завершен.
	ПереходныйПериод = УчетПСНКлиентСервер.ПереходныйПериод();
	Если Год(ДатаПолученияСведений) >= 2021 // При добавлении макета на 2022 год заменить на " = 2021"
		И (ДатаПолученияСведений < ПереходныйПериод.Начало Или ПереходныйПериод.Конец < ДатаПолученияСведений) Тогда
		УдалитьВидыДеятельностиПереходногоПериода(ТаблицаКлассификатора);
	КонецЕсли;
	
	Возврат ТаблицаКлассификатора;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список кодов видов объектов, для которых адрес не является обязательным полем.
// Используется для заполнения Листа В в заявлении на получение патента.
//
// Возвращаемое значение:
//   Массив - значения с типом строка(2).
//
Функция ВидыОбъектовБезАдреса() Экспорт
	
	КодыВидовОбъектов = Новый СписокЗначений;
	
	// 16 – автомобиль; 17 - автолавка; 18 - автомагазин; 19 - тонар; 20 - автоприцеп; 21 - передвижной торговый автомат; 22 – разносная торговля
	Для Индекс = 16 По 22 Цикл
		КодыВидовОбъектов.Добавить(Формат(Индекс, "ЧЦ=2"));
	КонецЦикла;
	КодыВидовОбъектов.Добавить("29"); // объект организации общественного питания, не имеющий зала обслуживания посетителей
	
	Возврат КодыВидовОбъектов;
	
КонецФункции

// Возвращает список кодов видов объектов, для которых не требуется указывать площадь.
// Используется для заполнения Листа В в заявлении на получение патента
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция ВидыОбъектовБезПлощади() Экспорт
	
	ДанныеМакета = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет(
		"КодыВидовДеятельностиВидаИПризнакаОбъектов");
	КодыВидыОбъектов = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеМакета.ПолучитьТекст());
	
	ОбъектыБезПлощади = Новый СписокЗначений;
	ПустыеПризнаки = КодыВидыОбъектов.НайтиСтроки(Новый Структура("ПризнакОбъекта", ""));
	Для Каждого ТекЗначение Из ПустыеПризнаки Цикл
		Если ОбъектыБезПлощади.НайтиПоЗначению(ТекЗначение.ВидОбъекта) = Неопределено
			// Для вида деятельности с кодом "65" и "94" признак объекта заполняется пользователем вручную,
			// пока ФНС не обновит рекомендуемую форму заявления
			И ТекЗначение.Код <> "65" И ТекЗначение.Код <> "94" Тогда
			ОбъектыБезПлощади.Добавить(ТекЗначение.ВидОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыБезПлощади;
	
КонецФункции

// Возвращает код вида деятельности торговли через станционарные объекты, не имеющие торговых залов.
//
// Возвращаемое значение:
//   Строка
//
Функция ВидДеятельностиТорговляБезТорговогоЗала() Экспорт
	
	// Для вида деятельности 46 - Розничная торговля, осуществляемая через объекты стационарной торговой сети, не имеющие торговых залов
	// в разных регионах зависимость суммы патента от признака разная, напр:
	//  - в Краснодарском крае в зависимости от вида объекта сумма патента зависит от площади объекта или от численности сотрудников;
	//  - в Приморском крае сумма патента зависит от количества объектов;
	//  - в Ставропольском крае сумма патента зависит от средней численности наемных работников.
	// Контроль заполнения площади объекта в таком случае выключается.
	
	Возврат "46";
	
КонецФункции

// Возвращает соответствие между кодом вида деятельности и видом объекта
//
// Возвращаемое значение:
//  Соответствие - в качестве ключа используется код вида деятельности ПСН,
//                 в качестве значения - Массив из Структура
//                  * Код - Строка
//                  * Наименование - Строка
//                  * ПризнакОбъекта - Строка
//                  * ВидОбъекта - Строка
//
Функция СоответствиеКодовИВидовОбъектов() Экспорт
	
	МакетПСН = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет("КодыВидовДеятельностиВидаИПризнакаОбъектов");
	СтрокаXML = МакетПСН.ПолучитьТекст();
	Таблица = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
	ДанныеМакета = ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	Результат = Новый Соответствие;
	
	Для Каждого РеквизитыОбъекта Из ДанныеМакета Цикл
		Если Результат.Получить(РеквизитыОбъекта.Код) = Неопределено Тогда
			Результат.Вставить(РеквизитыОбъекта.Код, Новый Массив);
		КонецЕсли;
		Результат[РеквизитыОбъекта.Код].Добавить(РеквизитыОбъекта);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает код вида деятельности ПСН по соответствующему ему коду вида деятельности ОКВЭД2,
// поиск выполняется вначале по полному коду, затем, если код ОКВЭД обозначает подгруппу
// или вид (ХХ.ХХ.Х или ХХ.ХХ.ХХ), то будет произведен поиск по группе, в которую входит указанный
// код ОКВЭД (обозначение группы - XX.XX)
//
// Параметры:
//  КодПоОКВЭД -Строка - код вида деятельности по ОКВЭД2
//  Дата - Дата - поиск идет по классификатору, актуальному для указанной даты
//
// Возвращаемое значение:
//  Строка - код по классификатору видов предпринимателькой деятельности ПСН.
//           Если код не найден, возвращается пустая строка
//
// Пример:
//  КодВидаДеятельностиПСН("62.02.3", '20200101') - вернет "15".
//  КодВидаДеятельностиПСН("62.02.1", '20200101') - вернет "62", поскольку не найден код, соответствующий
//  виду "62.02.1", вернется код соответствующий группе "62.02".
//  В обоих примерах классификатор будет взят из макета "КлассификаторВидовПредпринимательскойДеятельностиПСН2020"
//
Функция КодВидаДеятельностиПСН(КодПоОКВЭД, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(КодПоОКВЭД) Тогда
		Возврат "";
	КонецЕсли;
	
	Классификатор =
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КлассификаторВидовПредпринимательскойДеятельностиПСН(Дата);
	
	// Поиск при необходимости будет проводится также по коду верхнего уровня,
	// например, если по коду 68.20.1 ничего не найдено, то вернется соответствие для кода 68.20
	Если СтрЧислоВхождений(КодПоОКВЭД, ".") < 2 Тогда
		КодВерхнегоУровня = "";
	Иначе
		ЧастиКода = СтрРазделить(КодПоОКВЭД, ".");
		КодВерхнегоУровня = СтрШаблон("%1.%2", ЧастиКода[0], ЧастиКода[1]);
	КонецЕсли;
	
	КодПСНПоКодуОКВЭДВерхнегоУровня = "";
	
	Для Каждого СтрокаКлассификатора Из Классификатор Цикл
		Если ЗначениеЗаполнено(СтрокаКлассификатора.СоответствующиеКодыОКВЭД) Тогда
			Если СтрокаКлассификатора.СоответствующиеКодыОКВЭД.НайтиПоЗначению(КодПоОКВЭД) <> Неопределено Тогда
				Возврат СтрокаКлассификатора.Код;
			ИначеЕсли ЗначениеЗаполнено(КодВерхнегоУровня) И
				СтрокаКлассификатора.СоответствующиеКодыОКВЭД.НайтиПоЗначению(КодВерхнегоУровня) <> Неопределено Тогда
				КодПСНПоКодуОКВЭДВерхнегоУровня = СтрокаКлассификатора.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КодПСНПоКодуОКВЭДВерхнегоУровня;
	
КонецФункции

// Возвращает минимально допустимую дату окончания патента для указанной даты начала.
// Проверка переноса срока действия через границу календарного года не производится.
//
// Параметры:
//  ДатаНачала  - Дата - дата начала действия патента.
//
// Возвращаемое значение:
//   Дата   - минимально допустимый день окончания патента.
//
Функция МинимальнаяДатаОкончанияПатента(ДатаНачала) Экспорт
	
	ОдинДень = 24 * 60 * 60;
	
	Возврат ДобавитьМесяц(ДатаНачала, 1) - ОдинДень;
	
КонецФункции

// Возвращает приведенный к секундам срок, установленный законодательством для регистрации физлиц в качестве ИП.
//
// Возвращаемое значение:
//   Число  -  нормативный срок регистрации ИП в секундах.
//
Функция ВремяРегистрацииПредпринимателя() Экспорт
	
	// Срок государственной регистрации ИП - не более 3 рабочих дней
	// (п.3 ст.22.1 Федерального закона от 08.08.2001 N 129-ФЗ)
	
	Возврат 3*24*60*60;
	
КонецФункции

// Преобразует сохраненные данные заявления к актуальному формату.
// Необходимо использовать при повторном открытии формы помощника с сохраненным ранее заявлением.
//
// Параметры:
//   ДанныеЗаявления - Структура - должна содержать поля с именами реквизитов данной обработки.
//
Процедура АктуализироватьФорматСохраняемыхДанных(ДанныеЗаявления) Экспорт
	
	// Заявление всегда формируется по актуальной форме, действующей на день формирования.
	// Если вызывается повторное заполнение заявления, ранее заполненного в предыдущей редакции формы -
	// необходимо привести сохраненные параметры к формату актуального заявления и заполнять новое заявление
	// в актуальной редакции формы.
	
	// В предыдущих формах заявления указывался срок патента и дата начала.
	// Необходимо определить дату окончания, обязательную в текущей форме.
	
	СохраненнаяДатаОкончания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ДатаОкончания", '00010101');
	СохраненныйСрок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "СрокДействияПатента", 0);
	
	Если Не ЗначениеЗаполнено(СохраненнаяДатаОкончания) И ЗначениеЗаполнено(СохраненныйСрок) Тогда
		
		НачалоОтсчетаСрока = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ДатаНачала", Неопределено);
		Если Не ЗначениеЗаполнено(НачалоОтсчетаСрока) Тогда
			// Если дата начала не заполена, заявление создано при регистрации ИП.
			// В этом случае указывался только срок, отсчет окончания от момента составления заявления - то есть текущего дня.
			НачалоОтсчетаСрока = ТекущаяДатаСеанса() + ВремяРегистрацииПредпринимателя();
		КонецЕсли;
		
		РасчетноеОкончаниеСрока = КонецМесяца(ДобавитьМесяц(НачалоОтсчетаСрока, СохраненныйСрок));
		МинимальноеОкончанияСрока = МинимальнаяДатаОкончанияПатента(НачалоОтсчетаСрока);
		
		// После первичного составления заявления срок окончания и минимальный срок начала могли сдвинуться в следующий год.
		Если Год(МинимальноеОкончанияСрока) > Год(НачалоОтсчетаСрока) Тогда
			// Составляли заявление в конце года - получаем патент на весь следующий год.
			ДанныеЗаявления.Вставить("ДатаОкончания", КонецГода(МинимальноеОкончанияСрока));
		ИначеЕсли Год(РасчетноеОкончаниеСрока) > Год(МинимальноеОкончанияСрока) Тогда
			// Составляли заявление не в конце года, хотели патент до конца года.
			ДанныеЗаявления.Вставить("ДатаОкончания", КонецГода(МинимальноеОкончанияСрока));
		Иначе
			// Составляли заявление не в конце года, хотели патент на несколько месяцев не до конца года.
			ДанныеЗаявления.Вставить("ДатаОкончания", РасчетноеОкончаниеСрока);
		КонецЕсли;
		
		ДанныеЗаявления.Удалить("СрокДействияПатента");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает код налоговой инспекции: если заполнены адреса в табличных частях Адреса/Объекты
// и налоговая инспекция по месту осуществления деятельности находится в регионе, отличном от региона регистрации,
// тогда возвращается код первого заполненного адреса, иначе возвращается код по умолчанию.
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыеПараметрыЗаполненияКодНалоговогоОргана()
//   КодНОПоУмолчанию    - Строка(4)
//
// Возвращаемое значение:
//   Строка (4)
//
Функция КодНалоговогоОрганаПатента(ПараметрыВыполнения, КодНОПоУмолчанию) Экспорт
	
	КодНалоговогоОргана = "";
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.Адреса) Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Адреса Цикл
			КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу(ТекСтрока.Адрес);
			Если Не ПустаяСтрока(КодНалоговогоОргана) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВыполнения.Объекты) Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Объекты Цикл
			КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу(ТекСтрока.Адрес);
			Если Не ПустаяСтрока(КодНалоговогоОргана) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если деятельность осуществляется в регионе регистрации ИП,
	// то заявление подаётся в налоговый орган по месту регистрации (п. 2 ст. 346.35 НК РФ)
	Если ПустаяСтрока(КодНалоговогоОргана) Или Не ПустаяСтрока(ПараметрыВыполнения.КодНалоговогоОрганаИП)
		И СтрНачинаетсяС(ПараметрыВыполнения.КодНалоговогоОрганаИП, Сред(КодНалоговогоОргана, 1, 2)) Тогда
		
		КодНалоговогоОргана = ПараметрыВыполнения.КодНалоговогоОрганаИП;
		
	КонецЕсли;
	
	Если ПустаяСтрока(КодНалоговогоОргана) И ПустаяСтрока(КодНОПоУмолчанию) Тогда
		КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу(ПараметрыВыполнения.АдрЮР_JSON);
	ИначеЕсли ПустаяСтрока(КодНалоговогоОргана) Тогда
		КодНалоговогоОргана = КодНОПоУмолчанию;
	КонецЕсли;
	
	Возврат КодНалоговогоОргана;
	
КонецФункции

// Возвращает структуру с параметрами заполнения кода налогового органа.
//
// Возвращаемое значение:
//   Структура
//
Функция НовыеПараметрыЗаполненияКодНалоговогоОргана() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Адреса", Неопределено);
	ПараметрыЗаполнения.Вставить("Объекты", Неопределено);
	ПараметрыЗаполнения.Вставить("ТранспортныеСредства", Неопределено);
	ПараметрыЗаполнения.Вставить("КодНалоговогоОрганаИП", "");
	ПараметрыЗаполнения.Вставить("АдрЮР_JSON", "");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Формирует настройки классификатора ПСН и помещает их во временное хранилище, см. НовыеНастройкиКлассификатораПСН
//
// Параметры
//  ДатаНачала - Дата - начало действия патента, по этому параметру определяется актуальная версия классификатора ПСН
//  Ключ - УникальныйИдентификатор - используется для создания временного хранилища
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
//
Функция АдресНастроекКлассификатора(ДатаНачала, Ключ) Экспорт
	
	ДополнительныеНастройки = НовыеНастройкиКлассификатораПСН();
	ВидыДеятельностиПСН = Новый Массив;
	КодыВидовДеятельностиОбъекты = Новый Массив;
	КодыВидовДеятельностиТС = Новый Массив;
	КодыВидовДеятельностиГрузоперевозки = Новый Массив;
	КодыВодныйТранспорт = Новый Массив;
	КодыТиповТС = Новый Соответствие;
	ЗаголовкиСведенийОбОбъектах = Новый Соответствие;
	
	Классификатор = КлассификаторВидовПредпринимательскойДеятельностиПСН(ДатаНачала);
	Для Каждого СтрокаКлассификатора Из Классификатор Цикл
		РеквизитыВидаДеятельности = Новый Структура;
		РеквизитыВидаДеятельности.Вставить("Код", СтрокаКлассификатора.Код);
		РеквизитыВидаДеятельности.Вставить("Наименование", СтрокаКлассификатора.Наименование);
		ВидыДеятельностиПСН.Добавить(РеквизитыВидаДеятельности);
		Если СтрокаКлассификатора.УказатьОбъекты Тогда
			КодыВидовДеятельностиОбъекты.Добавить(СтрокаКлассификатора.Код);
		КонецЕсли;
		Если СтрокаКлассификатора.ЭтоПеревозкаГрузов Тогда
			КодыВидовДеятельностиТС.Добавить(СтрокаКлассификатора.Код);
			КодыВидовДеятельностиГрузоперевозки.Добавить(СтрокаКлассификатора.Код);
		ИначеЕсли СтрокаКлассификатора.ЭтоПеревозкаПассажиров Тогда
			КодыВидовДеятельностиТС.Добавить(СтрокаКлассификатора.Код);
		КонецЕсли;
		Если СтрокаКлассификатора.ЭтоВодныйТранспорт Тогда
			КодыВодныйТранспорт.Добавить(СтрокаКлассификатора.Код);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКлассификатора.КодТипаТС) Тогда
			КодыТиповТС.Вставить(СтрокаКлассификатора.Код, СтрокаКлассификатора.КодТипаТС);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ЗаголовокСведенийОбОбъектах) Тогда
			ЗаголовкиСведенийОбОбъектах.Вставить(СтрокаКлассификатора.Код, СтрокаКлассификатора.ЗаголовокСведенийОбОбъектах);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеНастройки.ВидыДеятельностиПСН = ВидыДеятельностиПСН;
	ДополнительныеНастройки.КодыВидовДеятельностиОбъекты = КодыВидовДеятельностиОбъекты;
	ДополнительныеНастройки.КодыВидовДеятельностиТС = КодыВидовДеятельностиТС;
	ДополнительныеНастройки.КодыВидовДеятельностиГрузоперевозки = КодыВидовДеятельностиГрузоперевозки;
	ДополнительныеНастройки.КодыВодныйТранспорт = КодыВодныйТранспорт;
	ДополнительныеНастройки.КодыВидыОбъектов =
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СоответствиеКодовИВидовОбъектов();
	ДополнительныеНастройки.КодыТиповТС = КодыТиповТС;
	ДополнительныеНастройки.ЗаголовкиСведенийОбОбъектах = ЗаголовкиСведенийОбОбъектах;
	
	Возврат ПоместитьВоВременноеХранилище(ДополнительныеНастройки, Ключ);
	
КонецФункции

// Возвращает редакцию формы заявления
//
// Параметры
//  ПолноеИмяФормы - Строка - Полное имя отчета, напр. Отчет.РегламентированноеУведомлениеПолучениеПатента.Форма.Форма2021_1
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
//
Функция РедакцияФормыЗаявления(ПолноеИмяФормы) Экспорт
	
	ПозицияПоследнейТочки = СтрНайти(ПолноеИмяФормы, ".", НаправлениеПоиска.СКонца);
	Возврат Прав(ПолноеИмяФормы, СтрДлина(ПолноеИмяФормы) - ПозицияПоследнейТочки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЛистаТитульнаяСтраница(ПараметрыВыполнения, СведенияОбОрганизации, КодНалоговогоОргана)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ДатаДок", ПараметрыВыполнения.ДатаСоставления);
	СтруктураДанных.Вставить("ИННШапка",СведенияОбОрганизации.ИННФЛ);
	СтруктураДанных.Вставить("Фамилия", СведенияОбОрганизации.ФамилияИП);
	СтруктураДанных.Вставить("Имя",     СведенияОбОрганизации.ИмяИП);
	СтруктураДанных.Вставить("Отчество",СведенияОбОрганизации.ОтчествоИП);
	СтруктураДанных.Вставить("Тлф",     СведенияОбОрганизации.ТелСлуж);
	СтруктураДанных.Вставить("ОГРНИП",  СведенияОбОрганизации.ОГРН);
	СтруктураДанных.Вставить("КодНО",   КодНалоговогоОргана);
	
	Если ПараметрыВыполнения.Свойство("ДатаНачала") Тогда
		СтруктураДанных.Вставить("ДатаНачПат", ПараметрыВыполнения.ДатаНачала);
	Иначе
		СтруктураДанных.Вставить("ДатаНачПат");
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ДатаОкончания") Тогда
		СтруктураДанных.Вставить("ДатаКонПат", ПараметрыВыполнения.ДатаОкончания);
	Иначе
		СтруктураДанных.Вставить("ДатаКонПат");
	КонецЕсли;
	
	ВыбраннаяФорма = РедакцияФормыЗаявления(ПараметрыВыполнения.ИмяФормы);
	
	Если Не УказыватьАдресаВФорматеФИАС(ВыбраннаяФорма) Тогда
		ДобавитьСведенияОбАдресе(СтруктураДанных, СведенияОбОрганизации.АдрЮР_JSON, ВыбраннаяФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.Представитель) Тогда
		СтруктураДанных.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПараметрыВыполнения.Представитель);
		СтруктураДанных.Вставить("ПрПодп", "2");
		СтруктураДанных.Вставить("НаимДок", ПараметрыВыполнения.ДокументПредставителя);
	Иначе
		ФИОПредставителя = СтрШаблон("%1 %2 %3",
			СведенияОбОрганизации.ФамилияИП,
			СведенияОбОрганизации.ИмяИП,
			СведенияОбОрганизации.ОтчествоИП);
		СтруктураДанных.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ФИОПредставителя);
		СтруктураДанных.Вставить("ПрПодп", "1");
		СтруктураДанных.Вставить("НаимДок", "");
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеЛиста2(ПараметрыВыполнения)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("НаимВД", ПараметрыВыполнения.НаименованиеВидаДеятельности);
	
	КодСтрокой = СтрШаблон("%1%2%3",
		ПараметрыВыполнения.КодВидаДеятельности,
		ПараметрыВыполнения.КодРегиона,
		Формат(ПараметрыВыполнения.ПорядковыйНомерВидаДеятельности, "ЧЦ=2; ЧДЦ=0; ЧВН="));
		
	СтруктураДанных.Вставить("КодВД", КодСтрокой);
	
	Если ПараметрыВыполнения.КоличествоСотрудников > 0 Тогда
		СтруктураДанных.Вставить("ПрНаемРаб",  1);
		СтруктураДанных.Вставить("ЧислНаемРаб",ПараметрыВыполнения.КоличествоСотрудников);
	Иначе
		СтруктураДанных.Вставить("ПрНаемРаб",  2);
		СтруктураДанных.Вставить("ЧислНаемРаб",0);
	КонецЕсли;
	
	Если ПараметрыВыполнения.СтавкаНалога < УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию() Тогда
		СтруктураДанных.Вставить("НалСтавка",    ПараметрыВыполнения.СтавкаНалога);
		СтруктураДанных.Вставить("ЗакСубРФСтав", ПараметрыВыполнения.НормаЗакона);
		СтруктураДанных.Вставить("ВыводитьНольНаПечать", Истина);
	Иначе
		СтруктураДанных.Вставить("НалСтавка",    "");
		СтруктураДанных.Вставить("ЗакСубРФСтав", "");
		СтруктураДанных.Вставить("ВыводитьНольНаПечать", Ложь);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеЛистаА(ПараметрыВыполнения, КодНалоговоОргана)
	
	ДанныеРезультат = Новый Массив; 
	АдресаНеУказаны = ПараметрыВыполнения.Адреса.Количество() = 0;
	ВыбраннаяФорма = РедакцияФормыЗаявления(ПараметрыВыполнения.ИмяФормы);
	
	Если АдресаНеУказаны И ПараметрыВыполнения.ТранспортныеСредства.Количество() = 0
		И ПараметрыВыполнения.Объекты.Количество() = 0 Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодРегион", Лев(КодНалоговоОргана, 2));
		СтруктураДанных.Вставить("КодНОУчет", КодНалоговоОргана);
		СтруктураДанных.Вставить("КодРегионАддр");
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	ИначеЕсли Не АдресаНеУказаны Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Адреса Цикл
			
			СтруктураДанных = Новый Структура;
			ДобавитьСведенияОбАдресе(СтруктураДанных, ТекСтрока.Адрес, ВыбраннаяФорма);
			СтруктураДанных.Вставить("КодНОУчет", "");
			ДанныеРезультат.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеРезультат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Возврат ДанныеРезультат;
	
КонецФункции

Функция ДанныеЛистаБ(ПараметрыВыполнения, КодНалоговоОргана, КодНУ)
	
	Если ПараметрыВыполнения.ТранспортныеСредства.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КодНОУчет = КодНалоговогоОрганаМестоДеятельности(КодНалоговоОргана, КодНУ);
	ДанныеРезультат = Новый Массив;
	
	
	Для Каждого ТекСтрока Из ПараметрыВыполнения.ТранспортныеСредства Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодТС",        ПараметрыВыполнения.КодТипаТС);
		СтруктураДанных.Вставить("ИдНомТС",      ТекСтрока.Номер);
		СтруктураДанных.Вставить("МаркаТС",      ТекСтрока.Марка);
		СтруктураДанных.Вставить("РегЗнакТС",    ТекСтрока.РегистрационныйЗнак);
		СтруктураДанных.Вставить("ГрузТС",       ТекСтрока.Грузоподъемность);
		СтруктураДанных.Вставить("КолПосадМест", ТекСтрока.Количество);
		СтруктураДанных.Вставить("КодРегион",    ПараметрыВыполнения.КодРегиона);
		СтруктураДанных.Вставить("КодНОУчет",    КодНОУчет);
		
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеРезультат;
	
КонецФункции

Функция ДанныеЛистаВ(ПараметрыВыполнения, КодНалоговоОргана, КодНУ)
	
	Если ПараметрыВыполнения.Объекты.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КодНОУчет = КодНалоговогоОрганаМестоДеятельности(КодНалоговоОргана, КодНУ);
	ДанныеРезультат = Новый Массив;
	
	ВыбраннаяФорма = РедакцияФормыЗаявления(ПараметрыВыполнения.ИмяФормы);
	УказыватьАдресаВФорматеФИАС = УказыватьАдресаВФорматеФИАС(ВыбраннаяФорма);
	
	Для Каждого ТекСтрока Из ПараметрыВыполнения.Объекты Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодОбъект",  ТекСтрока.ВидОбъекта);
		СтруктураДанных.Вставить("ПризОбъект", ТекСтрока.ПризнакОбъекта);
		СтруктураДанных.Вставить("ПлощОбъект", ТекСтрока.Площадь);
		ДобавитьСведенияОбАдресе(СтруктураДанных, ТекСтрока.Адрес, ВыбраннаяФорма);
		
		СтруктураДанных.Вставить("КодРегион", ПараметрыВыполнения.КодРегиона);
		СтруктураДанных.Вставить("КодНОУчет", КодНОУчет);
		
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеРезультат;
	
КонецФункции

#Область РаботаСАдресом

Процедура ДобавитьЗначениеЛиста(ТекЗначение, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы)
	
	ШаблонИмяСтраницы = "Стр. %1";
	УИД = Новый УникальныйИдентификатор;
	ТекЗначение.Вставить("УИД", УИД);
	ДанныеЗаполнения.ДанныеМногостраничныхРазделов[ИмяСтраницы].Добавить(ТекЗначение);
	НоваяСтрока = ЛистВДеревере.Строки.Добавить();
	НоваяСтрока.ИДНаименования = ИмяСтраницы;
	НоваяСтрока.ИмяМакета = ИмяСтраницы;
	НоваяСтрока.ИндексКартинки = 1;
	НоваяСтрока.Многостраничность = Истина;
	НоваяСтрока.Наименование = СтрШаблон(ШаблонИмяСтраницы, НомерСтраницы);
	НоваяСтрока.УИД = УИД;
	
КонецПроцедуры

Функция ДобавитьСведенияОбАдресе(СтруктураДанных, Адрес, ВыбраннаяФорма)
	
	АдресСтруктурой = СтруктураАдреса(ВыбраннаяФорма, Адрес);
	
	Для Каждого ТекущийПараметр Из АдресСтруктурой Цикл
		СтруктураДанных.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
	КонецЦикла;
	
КонецФункции

Функция СтруктураАдреса(ВыбраннаяФорма, АдрЮР_JSON)
	
	Результат = Новый Структура;
	
	Если Не УказыватьАдресаВФорматеФИАС(ВыбраннаяФорма) Тогда
		
		РоссийскийАдрес = Новый Соответствие;
		РоссийскийАдрес.Вставить("Индекс");
		РоссийскийАдрес.Вставить("КодРегиона");
		РоссийскийАдрес.Вставить("Район");
		РоссийскийАдрес.Вставить("Город");
		РоссийскийАдрес.Вставить("НаселенныйПункт");
		РоссийскийАдрес.Вставить("Улица");
		РоссийскийАдрес.Вставить("Дом");
		РоссийскийАдрес.Вставить("Корпус");
		РоссийскийАдрес.Вставить("Квартира");
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(АдрЮР_JSON, РоссийскийАдрес);
		
		Результат.Вставить("Индекс",        РоссийскийАдрес["Индекс"]);
		Результат.Вставить("КодРегионАддр", РоссийскийАдрес["КодРегиона"]);
		Результат.Вставить("КодРегион",     Лев(РоссийскийАдрес["КодРегиона"], 2));
		Результат.Вставить("Район",         РоссийскийАдрес["Район"]);
		Результат.Вставить("Город",         РоссийскийАдрес["Город"]);
		Результат.Вставить("НаселПункт",    РоссийскийАдрес["НаселенныйПункт"]);
		Результат.Вставить("Улица",         РоссийскийАдрес["Улица"]);
		Результат.Вставить("Дом",           РоссийскийАдрес["Дом"]);
		Результат.Вставить("Корпус",        РоссийскийАдрес["Корпус"]);
		Результат.Вставить("Кварт",         РоссийскийАдрес["Квартира"]);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВерсияАдреса", ВерсияАдресаВФорматеФИАС());
		АдресСтруктурой = УведомлениеОСпецрежимахНалогообложения.АдресВФорматеФИАС(АдрЮР_JSON, ДополнительныеПараметры);
		
		КлючиАдреса = Отчеты.РегламентированноеУведомлениеПолучениеПатента.СоответствиеПоказателейСтраницыРеквизитамАдреса(
			ВыбраннаяФорма);
		
		Для Каждого ТекущийПараметр Из КлючиАдреса Цикл
			
			Если АдресСтруктурой.Свойство(ТекущийПараметр.Значение) Тогда
				
				Результат.Вставить(ТекущийПараметр.Ключ, АдресСтруктурой[ТекущийПараметр.Значение]);
				
			ИначеЕсли ТекущийПараметр.Значение = "ЗемелУчасток" Тогда
				
				Результат.Вставить(ТекущийПараметр.Ключ, АдресСтруктурой.НомерЗемельногоУчастка);
				
			ИначеЕсли ТипЗнч(ТекущийПараметр.Значение) = Тип("Массив") Тогда
				
				Индекс = 0;
				КоличествоЭлементов = АдресСтруктурой[ТекущийПараметр.Ключ].Количество();
				
				Для Каждого ТекущееЗначение Из ТекущийПараметр.Значение Цикл
					
					Для Каждого ТекущийЭлемент Из ТекущееЗначение Цикл
						Если Индекс >= КоличествоЭлементов Тогда
							Результат.Вставить(ТекущийЭлемент.Ключ, "");
						Иначе
							ЗначениеЗаполнения = АдресСтруктурой[ТекущийПараметр.Ключ][Индекс];
							Результат.Вставить(ТекущийЭлемент.Ключ, ЗначениеЗаполнения[ТекущийЭлемент.Значение]);
						КонецЕсли;
					КонецЦикла;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить("КодРегион", АдресСтруктурой.КодРегиона);
		Результат.Вставить("КодРегионАддр", АдресСтруктурой.КодРегиона);
		
	КонецЕсли;
	
	Результат.Вставить("АдресXML", АдрЮР_JSON);
	Результат.Вставить("АдресJSON", АдрЮР_JSON);
	Результат.Вставить("Адрес9зпт", РаботаСАдресами.СведенияОбАдресе(АдрЮР_JSON).Представление);
	
	Возврат Результат;
	
КонецФункции

// Возвращает версию адреса - см. РегламентированнаяОтчетность.АдресВФорматеФИАС():
//  1 - возвращаемое свойство "МуниципальныйРайонВид" не может быть равно "4";
//  2 - возвращаемое свойство "МуниципальныйРайонВид" может быть равно "4".
//
// Возвращаемое значение:
//   Число
//
Функция ВерсияАдресаВФорматеФИАС()
	
	Возврат 2;
	
КонецФункции

Функция УказыватьАдресаВФорматеФИАС(ВыбраннаяФорма)
	
	ИменаФормСАдресомВФорматеФИАС = Новый Массив;
	ИменаФормСАдресомВФорматеФИАС.Добавить("Форма2021_1");
	
	Возврат ИменаФормСАдресомВФорматеФИАС.Найти(ВыбраннаяФорма) <> Неопределено;
	
КонецФункции

#КонецОбласти

Процедура ДополнитьСтруктуруФИОПодписанта(СведенияОФизЛице, ПараметрыЗаявления)
	
	Если ТипЗнч(СведенияОФизЛице) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
		ФИО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СведенияОФизЛице, "Фамилия, Имя, Отчество");
	ИначеЕсли ТипЗнч(СведенияОФизЛице) <> Тип("Структура") Тогда
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Строка(СведенияОФизЛице));
	Иначе
		ФИО = Новый Структура("Фамилия, Имя, Отчество");
		ФИО.Фамилия = СведенияОФизЛице.ФамилияИП;
		ФИО.Имя = СведенияОФизЛице.ИмяИП;
		ФИО.Отчество = СведенияОФизЛице.ОтчествоИП;
	КонецЕсли;
	
	ПараметрыЗаявления.Вставить("ПодписантФамилия", ФИО.Фамилия);
	ПараметрыЗаявления.Вставить("ПодписантИмя", ФИО.Имя);
	ПараметрыЗаявления.Вставить("ПодписантОтчество", ФИО.Отчество);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЛистаДерева(ИмяСтраницы, ИмяЛиста, ДанныеЗаполнения, ПараметрыЗаполнения)
	
	ДанныеЗаполнения.ДанныеМногостраничныхРазделов[ИмяСтраницы].Очистить();
	ЛистВДеревере = ДанныеЗаполнения.ДеревоСтраниц.Строки.Найти(ИмяЛиста);
	Если ЛистВДеревере <> Неопределено Тогда
		ЛистВДеревере.Строки.Очистить();
	КонецЕсли;
	
	НомерСтраницы = 1;
	
	Если ПараметрыЗаполнения.Количество() = 0 Тогда
		Области = Отчеты.РегламентированноеУведомлениеПолучениеПатента.ПолучитьМакет(ИмяСтраницы).ПолучитьОбласть("ОсновнаяЧасть").Области;
		ПустаяСтруктура = Новый Структура;
		Для Каждого ТекОбласть Из Области Цикл
			ПустаяСтруктура.Вставить(ТекОбласть.Имя);
		КонецЦикла;
		ПустаяСтруктура.Вставить("КодНОУчет");
		ДобавитьЗначениеЛиста(ПустаяСтруктура, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЗначение Из ПараметрыЗаполнения Цикл
		
		ДобавитьЗначениеЛиста(ТекЗначение, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы);
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодНалоговогоОрганаМестоДеятельности(НалоговыйОрганМестоДеятельности, НалоговыйОрганПрописка)
	
	Возврат ?(НалоговыйОрганМестоДеятельности = НалоговыйОрганПрописка, Неопределено, НалоговыйОрганМестоДеятельности);
	
КонецФункции

Функция КодНалоговогоОрганаПоАдресу(ТекущийАдрес)
	
	КодНалоговогоОргана = "";
	
	Если Не ПустаяСтрока(ТекущийАдрес) Тогда
		СведенияОбАдресе = АдресныйКлассификатор.КодыАдреса(ТекущийАдрес, "Сервис1С");
		
		Если Не ЗначениеЗаполнено(СведенияОбАдресе.КодИФНСФЛ) Тогда
			
			// Если не удалось определить код налогового органа, пробуем преобразовать в другой формат:
			//  - административно-территориальное деление -> муниципальное деление
			//  - муниципальное деление -> административно-территориальное деление
			Если СтрНайти(ТекущийАдрес, РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес()) > 0 Тогда
				ТипАдреса = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
				ТипАдресаЗамены = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
			Иначе
				ТипАдреса = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
				ТипАдресаЗамены = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
			КонецЕсли;
			
			АдресЗамены = СтрЗаменить(ТекущийАдрес, ТипАдреса, ТипАдресаЗамены);
			СведенияОбАдресе = АдресныйКлассификатор.КодыАдреса(АдресЗамены, "Сервис1С");
			
		КонецЕсли;
		
		КодНалоговогоОргана = СведенияОбАдресе.КодИФНСФЛ;
	КонецЕсли;
	
	Возврат КодНалоговогоОргана;
	
КонецФункции

// Возвращает наименование страниц с данными для документа "Уведомление о спецрежимах налогообложения"
//
// Параметры:
//   ИмяФормы  - Строка
//
// Возвращаемое значение:
//   Структура - ключи: Титульная, Лист2, ЛистА, ЛистБ, ЛистВ
//
Функция НаименованиеСтраниц(ИмяФормы)
	
	Страницы = Новый Структура;
	
	Страницы.Вставить("Титульная", СтрШаблон("%1_Титульная", ИмяФормы));
	Страницы.Вставить("Лист2", СтрШаблон("%1_Лист2", ИмяФормы));
	Страницы.Вставить("ЛистА", СтрШаблон("%1_ЛистА", ИмяФормы));
	Страницы.Вставить("ЛистБ", СтрШаблон("%1_ЛистБ", ИмяФормы));
	Страницы.Вставить("ЛистВ", СтрШаблон("%1_ЛистВ", ИмяФормы));
	
	Возврат Страницы;
	
КонецФункции

Процедура ОбновитьТекущийДокумент(ДокументСсылка, ИмяФормы, ПараметрыЗаявления)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДанныеЗаполнения = ДокументОбъект.ДанныеУведомления.Получить();
	
	Страницы = НаименованиеСтраниц(ИмяФормы);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.ДанныеУведомления[Страницы.Титульная], ПараметрыЗаявления.Стр01);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.ДанныеУведомления[Страницы.Лист2], ПараметрыЗаявления.Стр02);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистА, "Листы А", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыА);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистБ, "Листы Б", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыБ);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистВ, "Листы В", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыВ);
	ДанныеЗаполнения.Вставить("ДанныеПомощникаЗаполнения",ПараметрыЗаявления.ДанныеПомощникаЗаполнения);
	
	ДокументОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеЗаполнения);
	ДокументОбъект.ДатаПодписи = ПараметрыЗаявления.ДатаСоставления;
	
	ДокументОбъект.ПодписантФамилия  = ПараметрыЗаявления.ПодписантФамилия;
	ДокументОбъект.ПодписантИмя      = ПараметрыЗаявления.ПодписантИмя;
	ДокументОбъект.ПодписантОтчество = ПараметрыЗаявления.ПодписантОтчество;
	ДокументОбъект.РегистрацияВИФНС  = ПараметрыЗаявления.РегистрацияВИФНС;
	
	ДокументОбъект.Записать();
	
КонецПроцедуры

//Возвращает сведения об индивидуальном предпринимателе.
//
// Параметры:
//   Организация     - СправочникСсылка.Организации
//   ДатаСоставления - Дата
//
// Возвращаемое значение:
//   Структура - ключи:
//    - ИНН
//    - ФИО
//    - ТелСлуж
//    - ФамилияИП
//    - ИмяИП
//    - ОтчествоИП
//    - КодНО
//    - ОГРН
//    - АдрЮР_XML
//
Функция СведенияОбИндивидуальномПредпринимателе(Организация, ДатаСоставления)
	
	СтрокаСведений = "ИННФЛ,ФИО,ТелСлуж,ФамилияИП,ИмяИП,ОтчествоИП,КодНО,ОГРН,АдрЮР_XML, АдрЮР_JSON";
	Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаСоставления, СтрокаСведений);
	
КонецФункции

Функция НовыеНастройкиКлассификатораПСН()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ВидыДеятельностиПСН", Новый Массив);
	Настройки.Вставить("КодыВидовДеятельностиОбъекты", Новый Массив);
	Настройки.Вставить("КодыВидовДеятельностиТС", Новый Массив);
	Настройки.Вставить("КодыВидовДеятельностиГрузоперевозки", Новый Массив);
	Настройки.Вставить("КодыВодныйТранспорт", Новый Массив);
	Настройки.Вставить("КодыВидыОбъектов", Новый Соответствие);
	Настройки.Вставить("КодыТиповТС", Новый Соответствие);
	Настройки.Вставить("ЗаголовкиСведенийОбОбъектах", Новый Соответствие);
	Возврат Настройки;
	
КонецФункции

Процедура УдалитьВидыДеятельностиПереходногоПериода(ТаблицаКлассификатора)
	
	Для Каждого ВидДеятельности Из УчетПСНКлиентСервер.КодыВидовДеятельностиПереходногоПериода() Цикл
		ПараметрыОтбора = Новый Структура("Код", ВидДеятельности.Ключ);
		Для Каждого НайденнаяСтрока Из ТаблицаКлассификатора.НайтиСтроки(ПараметрыОтбора) Цикл
			ТаблицаКлассификатора.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция РегистрацияВНалоговомОргане(Организация, КодИФНС)
	
	РегистрацияПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Если ЗначениеЗаполнено(РегистрацияПоУмолчанию)
		И КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияПоУмолчанию, "Код") Тогда
		
		Возврат РегистрацияПоУмолчанию;
	КонецЕсли;
	
	Возврат Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация,"", КодИФНС);
	
КонецФункции

#КонецОбласти

#КонецЕсли

