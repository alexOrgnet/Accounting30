#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.РегистрацияНовогоБизнеса = (Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации()
		И Константы.НачалоРаботы.Получить())
		Или Параметры.Свойство("НавигацияПараметрФормы");
	
	УтратаПраваНПД = Параметры.УтратаПраваНПД;
	
	Если УтратаПраваНПД Тогда
		РазместитьНавигацию();
	Иначе
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	КонецЕсли;
	
	ПодготовитьДанныеПередОткрытием();
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УтратаПраваНПД Тогда
		Оповестить("ОткрытШагПомощника_УтратаПраваНПД", , ЭтотОбъект);
	Иначе
		РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
			РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
			НавигацияНомерШага);
	КонецЕсли;
	
	ПолучитьВидыДеятельностиВФоне();
	ПолучитьОписаниеСтавокНалогаВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
	
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ИзменениеСтавокПСНПомощник" Тогда
		
		ОбработатьИзменениеСтавокПСН(Параметр);
		
	ИначеЕсли ИмяСобытия = "ИзменитьПараметрНавигации" И ЗначениеЗаполнено(Параметр) Тогда
		
		НавигацияПараметрФормы = Параметр;
		Если НавигацияПараметрФормы = "Заявление" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли УтратаПраваНПД И ИмяСобытия = "ОткрытШагПомощника_УтратаПраваНПД" Тогда
		
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("Организация");
		НепроверяемыеРеквизиты.Добавить("ДатаСоставления");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДатаНачала) И Объект.ДатаНачала < СрокПредставленияОтчета(ДатаСоставления, Объект.ДатаНачала) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Начало действия патента должно быть не менее чем через 10 рабочих дней от даты подачи заявления'"),,
				"ДатаНачала", "Объект", Отказ);
		КонецЕсли;
		
		Если СпособПодачиДокументов = 1 И Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Представитель не заполнен!'"),, "ПредставлениеПредставителя",, Отказ);
		КонецЕсли;
		
		Если Не РеквизитыОрганизацииЗаполнены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Заполните недостающие реквизиты!'"),, "СообщениеТребуютсяРеквизиты",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрименитьПониженнуюСтавку И Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите размер пониженной ставки налога или уберите признак ""Применить пониженную ставку""'"),,
			"Объект.СтавкаНалога",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "Пример" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма.ОбразецЗаполненияВидаДеятельности");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "АдресИРеквизитыИнспекции" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПатентов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.ОперацияСПатентом.ФормаСписка");
		
	ИначеЕсли НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		Если УтратаПраваНПД Тогда
			
			СтруктураШаговПомощника = НалогНаПрофессиональныйДоходКлиентСервер.СтруктураШаговПомощникаУтратыПраваНПД();
			НавигацияПараметрФормы = СтруктураШаговПомощника[НавигационнаяСсылкаФорматированнойСтроки];
			ПерейтиНазадВПомощникеУтратыПраваНПД();
			СтандартнаяОбработка = Ложь;
			
		Иначе
			
			СохранитьДанныеПомощникаРегистрации();
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Настройки" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ", Организация), ЭтотОбъект);
		
	КонецЕсли;
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(
			НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не Объект.РегистрацияНовогоБизнеса Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормы", ЭтаФорма);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные изменены. Сохранить заявление?'"), Режим);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПолучитьВидыДеятельностиВФоне();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	ПолучитьОписаниеСтавокНалогаВФоне();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",       Организация);
	ПараметрыФормы.Вставить("Контекст",   Новый Структура);
	ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        ДатаСоставления);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.Форма.РеквизитыПредпринимателяДляОтчетности", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект);
	ВидДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаПриИзменении(Элемент)
	
	КодРегионаПриИзмененииНаСервере();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВидаДеятельностиПриИзменении(Элемент)
	
	ПорядковыйНомер = СокрЛП(Объект.ПорядковыйНомерВидаДеятельности);
	Если СтрДлина(ПорядковыйНомер) = 1 Тогда
		Объект.ПорядковыйНомерВидаДеятельности = СтрШаблон(НСтр("ru = '0%1'"), ПорядковыйНомер);
	КонецЕсли;
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПатентаПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала) Тогда
		
		Объект.ДатаОкончания = КонецГода(Объект.ДатаНачала);
		
	КонецЕсли;
	
	Если Год(ТекущаяДатаНачалаДействияПатента) <> Год(Объект.ДатаНачала)
		Или ЭтоПереходныйПериод(ТекущаяДатаНачалаДействияПатента) <> ЭтоПереходныйПериод(Объект.ДатаНачала) Тогда
		
		ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
			Объект.ДатаНачала, УникальныйИдентификатор);
		
		ПолучитьВидыДеятельностиВФоне();
		ПолучитьОписаниеСтавокНалогаВФоне();
		
	КонецЕсли;
	
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПатентаПриИзменении(Элемент)
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала)
		Или ЭтоПереходныйПериод(ТекущаяДатаНачалаДействияПатента) <> ЭтоПереходныйПериод(НачалоГода(Объект.ДатаОкончания)) Тогда
		
		Объект.ДатаНачала = НачалоГода(Объект.ДатаОкончания);
		ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
			Объект.ДатаНачала, УникальныйИдентификатор);
		
		ПолучитьВидыДеятельностиВФоне();
		ПолучитьОписаниеСтавокНалогаВФоне();
		
	КонецЕсли;
	
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеКаникулыПриИзменении(Элемент)
	
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	УстановитьПрименитьПониженнуюСтавку();
	УстановитьНормуЗакона();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПониженнуюСтавкуПриИзменении(Элемент)
	
	Если Не ПрименитьПониженнуюСтавку Тогда
		Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
		Объект.НормаЗакона = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	СпособПодачиДокументовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаСервисПриИзменении(Элемент)
	
	КодРегионаПриИзмененииНаСервере();
	
	ПолучитьВидыДеятельностиВФоне();
	ПолучитьОписаниеСтавокНалогаВФоне();
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаСервисАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(КодВидаДеятельностиСтрокой)
		Или Лев(ПолныйКодВидаДеятельности, 6) <> КодВидаДеятельностиСтрокой Тогда
		ПолныйКодВидаДеятельности = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПолныйКодВидаДеятельности) Тогда
		НайтиВидДеятельности(КодВидаДеятельностиСтрокой, Ложь);
	Иначе
		НайтиВидДеятельности(ПолныйКодВидаДеятельности, Истина);
	КонецЕсли;
	
	ПолучитьОписаниеСтавокНалогаВФоне();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораВидаДеятельности = Новый Структура;
	ПараметрыВыбораВидаДеятельности.Вставить("КодВидаДеятельности", ПолныйКодВидаДеятельности);
	ПараметрыВыбораВидаДеятельности.Вставить("АдресСпискаВидовДеятельности", АдресСпискаВидовДеятельности);
	
	ОткрытьФорму("ОбщаяФорма.ВыборВидаДеятельностиПатентнойСистемы",
		ПараметрыВыбораВидаДеятельности,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидДеятельностиПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиСервисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолныйКодВидаДеятельности = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкаНалогаВВашемРегионеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СтавкиНалогаВВашемРегионе" Тогда
		
		ПараметрыОтчета = РегиональныеСтавкиНалоговКлиент.ПараметрыОтчетаСтавкиНалогаВВашемРегионе();
		ПараметрыОтчета.Налог = "ПСН";
		ПараметрыОтчета.Режим = "Помощник";
		ПараметрыОтчета.КодРегиона = Объект.КодРегиона;
		ПараметрыОтчета.КодВидаДеятельности = ПолныйКодВидаДеятельности;
		ПараметрыОтчета.НаименованиеВидаДеятельности = ПредставлениеВидаДеятельности(
			ПолныйКодВидаДеятельности,
			Объект.НаименованиеВидаДеятельности);
		ПараметрыОтчета.Период = Объект.ДатаНачала;
		ПараметрыОтчета.ПоказыватьПрименить = Истина;
		
		ПараметрыФормы = Новый Структура("ПараметрыОтчета", ПараметрыОтчета);
		ОткрытьФорму("Отчет.СтавкиНалогаВВашемРегионе.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеНаПолучениеПатентаНажатие(Элемент)
	
	ОткрытьЗаявлениеНаПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеОПереходеНаУСННажатие(Элемент)
	
	НалогНаПрофессиональныйДоходКлиент.УведомлениеОПереходенНаУСН(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		
		СохранитьДанныеПомощникаРегистрации();
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
		
	КонецЕсли;
	
	НавигацияПараметрФормы = "Налоги";
	ПерейтиНазадВПомощникеУтратыПраваНПД();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПропуститьШаг = Ложь;
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
	
		СохранитьДанныеПомощникаРегистрации();
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительно;
		Если УтратаПраваНПД Тогда
			НавигацияПараметрФормы = "Документы";
			РазместитьНавигацию();
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		СформироватьЗаявлениеНаПолучениеПатента();
		СформироватьЗаявлениеОПереходеНаУСН();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьШаг(Команда)
	
	СохранитьДанныеПомощникаРегистрации(Истина);
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПолучениеПатента(Команда)
	
	ОткрытьЗаявлениеНаПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеУСН(Команда)
	
	НалогНаПрофессиональныйДоходКлиент.УведомлениеОПереходенНаУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Организация, , , , , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазадДополнительно(Команда)
	
	НавигацияПараметрФормы = "Заявление";
	ПерейтиНазадВПомощникеУтратыПраваНПД();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

#Область Адреса

&НаКлиенте
Процедура АдресаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		АдресНачалоВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, Элементы.АдресаАдрес.Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресПриИзменении(Элемент)
	
	АдресСтрокойПриИзменении(Элементы.Адреса.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, Элементы.АдресаАдрес.Подсказка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьКодНалоговогоОргана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

#КонецОбласти

#Область Объекты

&НаКлиенте
Процедура ОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СписокВыбора = Элементы.ОбъектыВидОбъекта.СписокВыбора;
	Если НоваяСтрока И Не Копирование И СписокВыбора.Количество() = 1 Тогда
		Элементы.Объекты.ТекущиеДанные.ВидОбъектаСтрокой = СписокВыбора[0].Значение;
		ЗаполнитьТекущиеДанныеОбъекта();
		АдресНачалоВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, Элементы.ОбъектыАдресСтрокой.Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВидОбъектаПриИзменении(Элемент)
	
	ЗаполнитьТекущиеДанныеОбъекта();
	
	ТекущиеДанные = Элементы.Объекты.ТекущиеДанные;
	Если ТекущиеДанные.ПризнакОбъекта = "" Тогда
		ТекущиеДанные.Площадь = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресСтрокойПриИзменении(Элемент)

	АдресСтрокойПриИзменении(Элементы.Объекты.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, Элементы.Объекты.ТекущиеДанные,
		Элементы.ОбъектыАдресСтрокой.Подсказка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеСредства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АдресСтрокойПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.АдресСтрокой = "" Тогда
		ТекущиеДанные.Адрес = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ТекущиеДанные, Заголовок, СтандартнаяОбработка = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	АдресПоУмолчанию = ?(Не ПустаяСтрока(ТекущиеДанные.Адрес), ТекущиеДанные.АдресСтрокой, "");
	ВидКонтактнойИнформацииАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииАдреса, ТекущиеДанные.Адрес, АдресПоУмолчанию);
	
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Не ПустаяСтрока(ВыбранноеЗначение.Представление) Тогда
	
		ТекущиеДанные.АдресСтрокой = ВыбранноеЗначение.Представление;
		ТекущиеДанные.Адрес = ВыбранноеЗначение.Значение;
	
	Иначе
	
		ТекущиеДанные.АдресСтрокой = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		ТекущиеДанные.Адрес = "";
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	ОбновитьЭлементыВидаДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидДеятельностиПереходногоПериода(Период, КодВидаДеятельности)
	
	Если Не ЗначениеЗаполнено(КодВидаДеятельности) Или Не ЭтоПереходныйПериод(НачалоГода(Период)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодыВидовДеятельностиПереходногоПериода = УчетПСНКлиентСервер.КодыВидовДеятельностиПереходногоПериода();
	Возврат КодыВидовДеятельностиПереходногоПериода.Получить(КодВидаДеятельности) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредупреждениеОбОграниченияхВидаДеятельности(КодВидаДеятельности)
	
	ЧастиПредупреждения = Новый Массив;
	
	Если КодВидаДеятельности = "94" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении деятельности стоянок для транспортных средств ограничено.'"));
	ИначеЕсли КодВидаДеятельности = "95" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении розничной торговли, осуществляемой через объекты с площадью торгового зала свыше 50 квадратных метров, ограничено.'"));
	ИначеЕсли КодВидаДеятельности = "96" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении услуг общественного питания, осуществляемых через объекты с площадью зала обслуживания свыше 50 квадратных метров, ограничено.'"));
	ИначеЕсли КодВидаДеятельности = "97" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении услуг мойки транспортных средств, полирования и предоставления аналогичных услуг ограничено.'"));
	КонецЕсли;
	
	ЧастиПредупреждения.Добавить(НСтр("ru = 'До вступления Закона субъекта РФ в силу, патент может быть получен только при переходе с ЕНВД.'"));
	ЧастиПредупреждения.Добавить(НСтр("ru = 'Такой патент выдается на срок от одного до трех месяцев (до 31 марта 2021 года).'"));
	
	Возврат СтрСоединить(ЧастиПредупреждения, Символы.ПС);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыВидаДеятельности()
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	УказатьОбъекты = ДополнительныеНастройки.КодыВидовДеятельностиОбъекты.Найти(Объект.КодВидаДеятельности) <> Неопределено;
	УказатьТС = ДополнительныеНастройки.КодыВидовДеятельностиТС.Найти(Объект.КодВидаДеятельности) <> Неопределено;
	ЗаголовкиСведенийОбОбъектах = ДополнительныеНастройки.ЗаголовкиСведенийОбОбъектах;
	
	Элементы.ГруппаСведенияОбОбъектах.Видимость = УказатьОбъекты;
	Элементы.ГруппаТранспортныеСредства.Видимость = УказатьТС;
	Элементы.ГруппаАдреса.Видимость = Не (УказатьОбъекты Или УказатьТС);
	
	Если УказатьОбъекты Тогда
		ИнициализироватьСписокВыбораОбъекта();
		ЗаголовокГруппыСведенийОбОбъектах = ЗаголовкиСведенийОбОбъектах.Получить(Объект.КодВидаДеятельности);
		Если ЗначениеЗаполнено(ЗаголовокГруппыСведенийОбОбъектах) Тогда
			Элементы.ГруппаСведенияОбОбъектах.Заголовок = ЗаголовокГруппыСведенийОбОбъектах;
		Иначе
			Элементы.ГруппаСведенияОбОбъектах.Заголовок = НСтр("ru = 'Сведения об объектах'");
		КонецЕсли;
	КонецЕсли;
	
	Если УказатьТС Тогда
		
		Если ДополнительныеНастройки.КодыВодныйТранспорт.Найти(Объект.КодВидаДеятельности) = Неопределено Тогда
			Элементы.ТранспортныеСредстваНомер.Заголовок = "VIN";
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.Заголовок = НСтр("ru = 'Регистрационный знак'");
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.ПодсказкаВвода = НСтр("ru = 'X000XX000'");
		Иначе
			Элементы.ТранспортныеСредстваНомер.Заголовок = "IMO";
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.Заголовок = НСтр("ru = 'Регистрационный номер'");
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.ПодсказкаВвода = НСтр("ru = 'AB0001RUS77'");
		КонецЕсли;
		
		КодыТиповТС = ДополнительныеНастройки.КодыТиповТС;
		Объект.КодТипаТС = КодыТиповТС[Объект.КодВидаДеятельности];
		
	Иначе
		
		Объект.КодТипаТС = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			СсылкаНаДокумент = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеЗначения()
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	Если ДанныеПомощникаРегистрации.Свойство("Патент") Тогда
		
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АктуализироватьФорматСохраняемыхДанных(ДанныеПомощникаРегистрации.Патент);
		
		Для Каждого ТекРеквизит Из ДанныеПомощникаРегистрации.Патент Цикл
			
			Если ТекРеквизит.Ключ = "ПропуститьШаг"
				Или ТекРеквизит.Ключ = "ПолныйКодВидаДеятельности"
				Или ТекРеквизит.Ключ = "РегистрацияНовогоБизнеса" Тогда
				
				Продолжить;
			КонецЕсли;
			
			Если Не Объект.Свойство(ТекРеквизит.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекРеквизит.Значение) = Тип("ТаблицаЗначений") Тогда
				Объект[ТекРеквизит.Ключ].Загрузить(ТекРеквизит.Значение);
			Иначе
				Объект[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеПомощникаРегистрации.Патент.Свойство("ПолныйКодВидаДеятельности") Тогда
			КодВидаДеятельностиСтрокой = Лев(ДанныеПомощникаРегистрации.Патент.ПолныйКодВидаДеятельности, 6);
			ПолныйКодВидаДеятельности = ДанныеПомощникаРегистрации.Патент.ПолныйКодВидаДеятельности;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(Объект.КодРегиона) Тогда
		ДанныеПомощникаРегистрации.Налоги.Свойство("КодРегионаРегистрации", Объект.КодРегиона);
	КонецЕсли;
	
	ВидДеятельностиОКВЭД = ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДокументаВОбъект(СсылкаНаДокумент)

	СтруктураОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент,
		"Организация, ДатаПодписи, ДанныеУведомления, ИмяФормы, ИмяОтчета");
	
	Организация = СтруктураОбъекта.Организация;
	ДатаСоставления = СтруктураОбъекта.ДатаПодписи;
	
	ИмяФормыОтчета = СтрШаблон("Отчет.%1.Форма.%2", СтруктураОбъекта.ИмяОтчета, СтруктураОбъекта.ИмяФормы);
	ДанныеУведомления = СтруктураОбъекта.ДанныеУведомления.Получить();
	Если ДанныеУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаЗаполнения = Неопределено;
	Если ДанныеУведомления.Свойство("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения) 
		И ДанныеПомощникаЗаполнения <> Неопределено Тогда
		
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АктуализироватьФорматСохраняемыхДанных(ДанныеПомощникаЗаполнения);
		
		РеквизитыФормы = ПолучитьРеквизиты();
		СписокРеквизитов = Новый Массив;
		Для Каждого ТекРеквизит Из РеквизитыФормы Цикл
			СписокРеквизитов.Добавить(ТекРеквизит.Имя);
		КонецЦикла;
		
		Для Каждого ТекЗначение Из ДанныеПомощникаЗаполнения Цикл
			
			Если ТипЗнч(ТекЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Для Каждого ТекСтрока Из ТекЗначение.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ТекЗначение.Ключ].Добавить(), ТекСтрока);
				КонецЦикла;
				
			ИначеЕсли Объект.Свойство(ТекЗначение.Ключ) Тогда
				
				Объект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли РегистрацияВНалоговомОргане.Свойство(ТекЗначение.Ключ) Тогда
				
				РегистрацияВНалоговомОргане[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли СписокРеквизитов.Найти(ТекЗначение.Ключ) <> Неопределено Тогда
				
				ЭтотОбъект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			СпособПодачиДокументов = 1;
		КонецЕсли;
		
		Если ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
			КодВидаДеятельностиСтрокой = Лев(ПолныйКодВидаДеятельности, 6);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионов(СписокВыбора)
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru='%1 - %2 %3'"); // например: "77 - Москва г".
	
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		
		Если Регион.ДиапазонПочтовыхИндексов = "0" Тогда //регион был включен в состав другого субъекта
			Продолжить;
		КонецЕсли;
		
		КодРегиона = Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		Представление = СтрШаблон(ШаблонПредставления, КодРегиона, Регион.Наименование, Регион.Сокращение);
		СписокВыбора.Добавить(КодРегиона, Представление);
	
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущиеДанныеОбъекта()
	
	ТекущиеДанные = Элементы.Объекты.ТекущиеДанные;
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ЗначенияКодовВидовОбъектов = ДополнительныеНастройки.КодыВидыОбъектов;
	ВидыОбъектовПоКоду = ЗначенияКодовВидовОбъектов.Получить(Объект.КодВидаДеятельности);
	
	Для Каждого ДанныеОбъекта Из ВидыОбъектовПоКоду Цикл
		Если ДанныеОбъекта.Наименование = ТекущиеДанные.ВидОбъектаСтрокой Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеОбъекта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтатусПроцессаФормированияЗаявления(Форма, ЗаявлениеСформировано = Ложь)
	
	Элементы = Форма.Элементы;
	
	Элементы.КартинкаЗаявлениеНаПолучениеПатента.Видимость = ЗаявлениеСформировано;
	Элементы.КартинкаЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	Элементы.ЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификационныйКодВидаДеятельности(КодВидаДеятельности, КодРегиона, ПорядковыйНомер)
	
	ПустойКод = "__";
	
	СтрокаВидДеятельности = ?(ПустаяСтрока(КодВидаДеятельности), ПустойКод, КодВидаДеятельности);
	СтрокаКодРегиона      = ?(ПустаяСтрока(КодРегиона), ПустойКод, КодРегиона);
	СтрокаПорядковыйНомер = ?(ПустаяСтрока(ПорядковыйНомер), ПустойКод, ПорядковыйНомер);
	
	Возврат СтрШаблон(НСтр("ru = 'Код вида деятельности: %1 - %2 - %3'"),
		СтрокаВидДеятельности, СтрокаКодРегиона, СтрокаПорядковыйНомер);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСписокВыбораОбъекта()
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ЗначенияКодовВидовОбъектов = ДополнительныеНастройки.КодыВидыОбъектов;
	ДоступныеЗначенияВыбора = ЗначенияКодовВидовОбъектов.Получить(Объект.КодВидаДеятельности);
	
	Элементы.ОбъектыВидОбъекта.СписокВыбора.Очистить();
	
	Если ДоступныеЗначенияВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЗначение Из ДоступныеЗначенияВыбора Цикл
		Элементы.ОбъектыВидОбъекта.СписокВыбора.Добавить(ТекЗначение.Наименование);
	КонецЦикла;
	
	Элементы.ОбъектыВидОбъекта.Видимость = Элементы.ОбъектыВидОбъекта.СписокВыбора.Количество() <> 1;
	Местоположение = ?(Элементы.ОбъектыВидОбъекта.Видимость, Элементы.ОбъектыАдресСтрокой, Неопределено);
	Элементы.Переместить(Элементы.ОбъектыПлощадь, Элементы.Объекты, Местоположение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированноеУведомлениеПолучениеПатента";
КонецФункции

&НаКлиенте
Процедура ОбновитьКодНалоговогоОргана()
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыНалоговойИнспекции", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КодРегионаПриИзмененииНаСервере()
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
		
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));
	
	Если Лев(Объект.КодНалоговогоОргана, 2) <> Объект.КодРегиона Тогда
		Объект.КодНалоговогоОргана = "";
	КонецЕсли;
	
	Если Сред(ПолныйКодВидаДеятельности, 3, 2) <> Объект.КодРегиона Тогда
		КодВидаДеятельностиСтрокой = "";
		ПолныйКодВидаДеятельности = "";
	КонецЕсли;
	
	УстановитьПодсказкуВвода();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбновитьСведенияОбОрганизации();
	КодРегионаПриИзмененииНаСервере();
	ОбновитьСведенияОПредставителе();
	ОбновитьКодВидаДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизации()
	
	СведенияОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		"ОГРН, РегистрацияВНалоговомОргане, КодНалоговогоОргана, КодОКВЭД2");
		
	Если ЗначениеЗаполнено(СведенияОрганизация.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияНУОбъект = СведенияОрганизация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		СпособПодачиДокументов = 1;
	Иначе
		СпособПодачиДокументов = 0;
	КонецЕсли;
	
	Объект.КодРегиона = СведенияОрганизация.КодНалоговогоОргана;
	Объект.КодНалоговогоОргана = СведенияОрганизация.КодНалоговогоОргана;
	ВидДеятельностиОКВЭД = СведенияОрганизация.КодОКВЭД2;
	
	ПроверитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОПредставителе()
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПодачиДокументов = 0 Тогда
		ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов);
		ПредставлениеПредставителя = "";
	ИначеЕсли ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя = РегистрацияВНалоговомОргане.Представитель;
	Иначе
		ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьНеиспользуемыеРеквизиты(Форма)
	
	Объект = Форма.Объект;
	
	Объект.КоличествоСотрудников = 0;
	Объект.Объекты.Очистить();
	Объект.ТранспортныеСредства.Очистить();
	Объект.Адреса.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов)
	
	РеквизитыПредставителя = Новый Массив;
	РеквизитыПредставителя.Добавить("Представитель");
	РеквизитыПредставителя.Добавить("ДокументПредставителя");
	РеквизитыПредставителя.Добавить("УполномоченноеЛицоПредставителя");
	РеквизитыПредставителя.Добавить("Доверенность");

	Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
		РегистрацияВНалоговомОргане[ТекРеквизит] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПередОткрытием()
	
	ИспользуетсяСервисРегиональныеСтавкиНалогов =
		ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегиональныеСтавкиНалогов");
	
	СпособСдачиОтчетности = "Интернет";
	
	Если ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
		ЗаполнитьСписокВыбораРегионов(Элементы.КодРегионаСервис.СписокВыбора);
	Иначе
		ЗаполнитьСписокВыбораРегионов(Элементы.КодРегиона.СписокВыбора);
	КонецЕсли;
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		
		ВосстановитьСохраненныеЗначения();
		
	Иначе
		
		Организация = Параметры.Организация;
		СсылкаНаДокумент = Параметры.Ключ;
		СоздатьНовоеЗаявление = Параметры.СоздатьНовоеЗаявление;
		ДатаСоставления = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		Если Организация.Пустая() И Не СсылкаНаДокумент.Пустая() Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Организация");
		КонецЕсли;
		
		Если Организация.Пустая() И РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			Организация = Модуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ОбновитьСведенияОбОрганизации();
		
		Если СсылкаНаДокумент.Пустая() И Не Организация.Пустая() И Не СоздатьНовоеЗаявление Тогда
			
			Заявление = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НайтиЗаявлениеНаПолучениеПатента(
				Новый Структура("Организация, СоздатьНовоеЗаявление", Организация, СоздатьНовоеЗаявление));
				
			Если Заявление <> Неопределено Тогда
				СсылкаНаДокумент = Заявление.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СсылкаНаДокумент.Пустая() Тогда
			ДанныеДокументаВОбъект(СсылкаНаДокумент);
		Иначе
			РедакцияФормыОтчета = РегламентированнаяОтчетность.ПолучитьАктуальнуюФормуУведомления(
				Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
			ИмяФормыОтчета = СтрШаблон("Отчет.РегламентированноеУведомлениеПолучениеПатента.Форма.%1", РедакцияФормыОтчета);
		КонецЕсли;
		
		ОбновитьСведенияОПредставителе();
		
	КонецЕсли;
	
	УстановитьСрокПатентаПоУмолчанию();
	ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
		Объект.ДатаНачала, УникальныйИдентификатор);
	
	Если Объект.НормаЗакона = "" Тогда
		Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	КонецЕсли;
	
	ПрименитьПониженнуюСтавку = Объект.СтавкаНалога < УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
	ОбновитьКодВидаДеятельности();
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));
	
	ИнициализироватьСписокВыбораОбъекта();
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	Если УтратаПраваНПД Тогда
		ДанныеУведомленияОПереходеНаУСН = НалогНаПрофессиональныйДоходВызовСервера.УведомлениеОПереходеНаУСНсНПД(Организация);
		Если ДанныеУведомленияОПереходеНаУСН <> Неопределено Тогда
			УведомлениеОПереходеНаУСН = ДанныеУведомленияОПереходеНаУСН.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска)
	
	РезультатСписок = Новый СписокЗначений;
	
	ЦветПоУмолчанию = ЦветаСтиля.ЦветУспешногоПоиска;
	Для Каждого ТекЗначение Из ДанныеВыбора Цикл
		Представление = ОбщегоНазначенияБП.ПодсветитьСтрокуПоиска(ТекЗначение.Представление, ТекстПоиска, ЦветПоУмолчанию);
		РезультатСписок.Добавить(ТекЗначение.Значение, Представление);
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ИНН");
	ПроверяемыеРеквизиты.Добавить("ОГРН");
	ПроверяемыеРеквизиты.Добавить("КодНалоговогоОргана");
	ПроверяемыеРеквизиты.Добавить("Адрес");
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ОбновитьКодВидаДеятельности()
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаДеятельности) Тогда
		Объект.КодВидаДеятельности = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодВидаДеятельностиПСН(
			ВидДеятельностиОКВЭД,
			Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыНалоговойИнспекции()
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыНалоговойИнспекцииНаСервере()
	
	Если Объект.Адреса.Количество() > 0 Или Объект.Объекты.Количество() > 0 Тогда
		УстановитьКодНалоговогоОргана();
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
		Объект.КодНалоговогоОргана);
	
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		
		Если Не ПустаяСтрока(РеквизитыНалоговойИнспекции.Адрес) Тогда
			МассивПодстрок = СтрРазделить(РеквизитыНалоговойИнспекции.Адрес, ",", Ложь);
			РеквизитыНалоговойИнспекции.Адрес = СтрСоединить(МассивПодстрок, ",");
		КонецЕсли;
		
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияЭлектроннаяПочта = РеквизитыНалоговойИнспекции.ЭлектроннаяПочта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Ошибка при формировании заявления на получение патента:'"));
	МассивСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСрокаСдачиОтчетности(Знач ДатаСоставления, Знач ДатаНачалаДействия)
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КоличествоДней = КоличествоДнейДоПодачиЗаявления(ДатаСоставления, ДатаНачалаДействия);
	Сутки = 24 * 60 * 60;
	
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		
		// Если не задан производственный календарь, тогда рассчитываем по календарным дням
		ДатаПоКалендарю = ДатаНачалаДействия - КоличествоДней * Сутки;
		
	Иначе
		
		// Рассчитаем срок подачи в рабочих днях до даты начала действия патента по производственному календарю
		// Дата не может быть меньше даты составления заявления
		
		РазностьДат = КалендарныеГрафики.РазностьДатПоКалендарю(ПроизводственныйКалендарь,
			ДатаСоставления,
			ДатаНачалаДействия,
			Ложь);
		
		Если РазностьДат > КоличествоДней Тогда
			ДатаПоКалендарю = КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь,
				ДатаСоставления,
				РазностьДат - КоличествоДней - 1,
				Ложь);
		Иначе
			ДатаПоКалендарю = ДатаСоставления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СрокПодачиЗаявленияПродленДоКонцаГода(ДатаСоставления, ДатаНачалаДействия) Тогда
		Представление = НСтр("ru = 'Срок подачи заявления продлен до 31 декабря 2020 года в связи с отменой ЕНВД'");
	Иначе
		Представление = СтрШаблон(НСтр("ru = 'Сдать заявление следует не позднее %1'"), Формат(ДатаПоКалендарю, "ДЛФ=DD"));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	
	НезаполненныеРеквизиты = Неопределено;
	ПроверяемыеРеквизиты   = ПроверяемыеРеквизитыОрганизации();
	
	Если Не ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(Организация, ПроверяемыеРеквизиты, НезаполненныеРеквизиты) Тогда
		
		РеквизитыОрганизацииЗаполнены = Ложь;
		СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(
			Организация, НСтр("ru = 'подготовить заявление'"));
		
	Иначе
		РеквизитыОрганизацииЗаполнены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации(ПропуститьШаг = Ложь)
	
	Структура = Новый Структура();
	
	Если Не ПропуститьШаг Тогда
		
		Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
		Для Каждого ТекРеквизит Из Реквизиты Цикл
			Структура.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
		КонецЦикла;
		
		ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
		Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
			Структура.Вставить(ТекТабличнаяЧасть.Имя, Объект[ТекТабличнаяЧасть.Имя].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	Структура.Вставить("ПолныйКодВидаДеятельности", ПолныйКодВидаДеятельности);
	
	Структура.Вставить("ПропуститьШаг", ПропуститьШаг);
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеПатент(Структура);
	
КонецПроцедуры

&НаСервере
Процедура СпособПодачиДокументовПриИзмененииНаСервере()
	
	ОбновитьСведенияОПредставителе();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокПредставленияОтчета(Знач Период, Знач ДатаНачалаДействия)
	
	КоличествоДней = КоличествоДнейДоПодачиЗаявления(Период, ДатаНачалаДействия);
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		
		// Если не задан производственный календарь, тогда рассчитываем по календарным дням
		Возврат Период + КоличествоДней * 24 * 60 * 60;
		
	КонецЕсли;
	
	Возврат КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь, Период, КоличествоДней, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоДнейДоПодачиЗаявления(Знач ДатаСоставления, Знач ДатаНачалаДействия)
	
	Если СрокПодачиЗаявленияПродленДоКонцаГода(ДатаСоставления, ДатаНачалаДействия) Тогда
		// Письмом ФНС от 09.12.2020 № СД-4-3/20310@ продлен срок подачи заявления до 31 декабря 2020 года,
		// если срок действия патента начинается в январе 2021 года.
		Возврат 0;
	Иначе
		// Срок не позднее чем за 10 дней до начала применения ПСН
		// п.2 ст. 346.45 НК РФ
		Возврат 10;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СрокПодачиЗаявленияПродленДоКонцаГода(Знач ДатаСоставления, Знач ДатаНачалаДействия)
	
	Если НачалоМесяца(ДатаСоставления) = Дата(2020, 12, 1)
		И НачалоМесяца(ДатаНачалаДействия) = Дата(2021, 1, 1) Тогда
		// Письмом ФНС от 09.12.2020 № СД-4-3/20310@ продлен срок подачи заявления до 31 декабря 2020 года,
		// если срок действия патента начинается в январе 2021 года.
		Возврат Истина;
	Иначе
		// Срок не позднее чем за 10 дней до начала применения ПСН
		// п.2 ст. 346.45 НК РФ
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьЗаявлениеНаПолучениеПатентаНаСервере()
	
	ПараметрыЗаявления = Новый Структура;
	
	Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		ПараметрыЗаявления.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
	КонецЦикла;
	
	ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
	Для Каждого ТекТаблица Из ТабличныеЧасти Цикл
		ПараметрыЗаявления.Вставить(ТекТаблица.Имя, Объект[ТекТаблица.Имя].Выгрузить());
	КонецЦикла;
	
	ПараметрыЗаявления.Вставить("Организация",                  Организация);
	ПараметрыЗаявления.Вставить("ДатаСоставления",              ДатаСоставления);
	ПараметрыЗаявления.Вставить("Представитель",                РегистрацияВНалоговомОргане.Представитель);
	ПараметрыЗаявления.Вставить("ДокументПредставителя",        РегистрацияВНалоговомОргане.ДокументПредставителя);
	ПараметрыЗаявления.Вставить("СоздатьНовоеЗаявление",        СоздатьНовоеЗаявление);
	
	Если Не СсылкаНаДокумент.Пустая() Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	КонецЕсли;
	
	Если ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
		ПараметрыЗаявления.Вставить("ПолныйКодВидаДеятельности", ПолныйКодВидаДеятельности);
	КонецЕсли;
	
	ПараметрыЗаявления.Вставить("ИмяФормы", ИмяФормыОтчета);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение заявления на получение патента'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ИмяМетода = "Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СформироватьЗаявлениеНаПолучениеПатента";
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗаявления, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявлениеНаПолучениеПатента()
	
	Если Модифицированность Тогда
		СформироватьЗаявлениеПриПереходеНаСледующийШаг();
	ИначеЕсли Не ЗначениеЗаполнено(НалоговаяИнспекцияНаименование) Тогда
		ОбновитьРеквизитыНалоговойИнспекции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиВидДеятельности(КодРегиона)
	
	КодРегионаПоУмолчанию = ?(ПустаяСтрока(КодРегиона), "77",
		УчетПСНКлиентСервер.КодРегионаСУчетомОбъединенияРегионов(КодРегиона));
	
	СсылкаНаКлассификатор = СтрШаблон(УчетПСНКлиентСервер.ШаблонСсылкиНаКлассификаторВидовДеятельности(),
		КодРегионаПоУмолчанию);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Определите наименование и код по '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Классификатору видов деятельности'"),,,, СсылкаНаКлассификатор));
	МассивСтрок.Добавить(".");
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru = 'В разделе 6 найдите строку, соответствующую вашему региону и виду деятельности. '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Пример'"),,,, "Пример"));
	
	ТекстПодсказки = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодсказкиСрокПатента(ПроизводитсяРегистрацияИП)
	
	Если ПроизводитсяРегистрацияИП Тогда
		Возврат НСтр("ru = 'При получении патента одновременно с регистрацией предпринимателя дату начала действия заполнять не требуется'");
	Иначе
		Возврат НСтр("ru = 'Патент выдается на срок не менее одного месяца в пределах календарного года.
			|Начало действия патента должно быть не менее чем через 10 рабочих дней от даты подачи заявления.'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиНормаЗакона(КодРегиона, НалоговыеКаникулы, ИнформацияСервиса)
	
	СсылкаНаЗакон = "";
	Если ИнформацияСервиса <> Неопределено Тогда
		Если НалоговыеКаникулы Тогда
			СсылкаНаЗакон = ИнформацияСервиса["НалоговыеКаникулы"]["СсылкаНаНормативныйАкт"];
		Иначе
			СсылкаНаЗакон = ИнформацияСервиса["ЛьготнаяСтавка"]["СсылкаНаНормативныйАкт"];
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СсылкаНаЗакон) Тогда
		СсылкаНаЗакон = СтрШаблон(УчетПСНКлиентСервер.ШаблонСсылкиНаЗаконРегиона(), КодРегиона);
	КонецЕсли;
	
	Если НалоговыеКаникулы Тогда
		ШаблонПодсказки = НСтр("ru='Пункт статьи <a href = %1>закона региона</a> о возможности применения налоговых каникул'");
	Иначе
		ШаблонПодсказки = НСтр("ru='Пункт статьи <a href = %1>закона региона</a> о возможности применения пониженной ставки налога'");
	КонецЕсли;
	ТекстПодсказки = СтрШаблон(ШаблонПодсказки, СсылкаНаЗакон);
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		Элементы.ГруппаПодачаДокументов.Видимость = Ложь;
		Элементы.ГруппаРеквизитыШапки.Видимость = Ложь;
		Элементы.ДатаНачалаДействияПатента.Видимость = Ложь;
		Элементы.ДатаОкончанияДействияПатента.Заголовок = НСтр("ru = 'Срок действия с даты регистрации по'");
		Элементы.ГруппаПериодДействия.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
		Элементы.ФонТребуютсяРеквизиты.Видимость = Ложь;
		Элементы.ДатаСоставления.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ГруппаПропуститьШаг.Видимость = Ложь;
		Элементы.ГруппаПодачаДокументов.Видимость = Истина;
		Элементы.ГруппаРеквизитыШапки.Видимость = Организация.Пустая();
		Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДатаНачалаДействияПатента.Видимость = Истина;
		Элементы.ГруппаПериодДействия.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		Элементы.ДатаСоставления.АвтоОтметкаНезаполненного = Истина;
		НалоговаяИнспекцияАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	КонецЕсли;
	
	Элементы.ДатаОкончанияДействияПатентаРасширеннаяПодсказка.Заголовок =
		ТекстПодсказкиСрокПатента(Объект.РегистрацияНовогоБизнеса);
	
	Элементы.КомандаНазад.Видимость  = Объект.РегистрацияНовогоБизнеса Или УтратаПраваНПД;
	Элементы.ПропуститьШаг.Видимость = Объект.РегистрацияНовогоБизнеса;
	
	Элементы.ГруппаВидДеятельности.Видимость = Не ИспользуетсяСервисРегиональныеСтавкиНалогов;
	Элементы.ГруппаВидДеятельностиСервис.Видимость = ИспользуетсяСервисРегиональныеСтавкиНалогов;
	Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Видимость = ИспользуетсяСервисРегиональныеСтавкиНалогов;
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для Каждого ТекОбъект Из Объект.Объекты Цикл
		
		ЗначенияКодовВидовОбъектов = ДополнительныеНастройки.КодыВидыОбъектов;
		Для Каждого Элемент Из ЗначенияКодовВидовОбъектов Цикл
			Для Каждого ДанныеВидаДеятельности Из Элемент.Значение Цикл
				Если ДанныеВидаДеятельности.ВидОбъекта = ТекОбъект.ВидОбъекта Тогда
					ТекОбъект.ВидОбъектаСтрокой = ДанныеВидаДеятельности.Наименование;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПодсказкуВвода();
	ОбновитьЭлементыВидаДеятельности();
	
	Если УтратаПраваНПД Тогда
		Заголовок = НалогНаПрофессиональныйДоходКлиентСервер.ЗаголовокПомощникаУтратыНПД();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		// Помощник открыт в процессе регистрации организации/ИП
		РегистрацияОрганизацииСервер.УстановитьПросмотрЭлементовФормы(
			ЭтотОбъект,
			Не РегистрацияОрганизацииСервер.ДоступенПомощникРегистрацииНовогоБизнеса());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не Объект.РегистрацияНовогоБизнеса Тогда
		Элементы.ФонТребуютсяРеквизиты.Видимость = Не Форма.РеквизитыОрганизацииЗаполнены;
		ИзменитьСтатусПроцессаФормированияЗаявления(Форма, Не (Форма.Модифицированность Или Форма.СсылкаНаДокумент.Пустая()));
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное Тогда
		
		Элементы.КодВидаДеятельностиСервис.Доступность = Форма.ИспользуетсяСервисРегиональныеСтавкиНалогов 
			И Элементы.КодВидаДеятельностиСервис.СписокВыбора.Количество() <> 0;
		
		Если ЗначениеЗаполнено(Форма.КодВидаДеятельностиСтрокой) Тогда
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Видимость = ЗначениеЗаполнено(Объект.НаименованиеВидаДеятельности);
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Заголовок = Объект.НаименованиеВидаДеятельности;
		Иначе
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаОснованиеПониженнаяСтавка.Видимость = Форма.ПрименитьПониженнуюСтавку;
		Элементы.СтавкаНалога.ТолькоПросмотр = Форма.НалоговыеКаникулы;
		
		Если ВыбранВидДеятельностиПереходногоПериода(Объект.ДатаНачала, Объект.КодВидаДеятельности) Тогда
			Элементы.ГруппаПредупреждениеОбОграничениях.Видимость = Истина;
			Элементы.ПредупреждениеОбОграничениях.Заголовок = ПредупреждениеОбОграниченияхВидаДеятельности(
				Объект.КодВидаДеятельности);
		Иначе
			Элементы.ГруппаПредупреждениеОбОграничениях.Видимость = Ложь;
			Элементы.ПредупреждениеОбОграничениях.Заголовок = "";
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда
		
		Элементы.ПредставлениеСрокаСдачиОтчетности.Заголовок =
			ПредставлениеСрокаСдачиОтчетности(Форма.ДатаСоставления, Объект.ДатаНачала);
		
		Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
		
		Если Форма.Используется1СОтчетность Тогда
			Элементы.Группа1СОтчетность.Видимость = Истина;
			Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.ОписаниеПодключить1СОтчетность.Видимость  = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.Подключить1СОтчетность.Видимость          = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.Открыть1СОтчетность.Видимость             = Форма.ЭлектронныйДокументооборотДоступен;
		Иначе
			Элементы.Группа1СОтчетность.Видимость = Ложь;
		КонецЕсли;
		Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
		
		Если Форма.УтратаПраваНПД Тогда
			
			Элементы.ГруппаИзменениеСистемыНалогообложения.Видимость = Истина;
			Элементы.ОтражениеВСистемеЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
			Элементы.УведомлениеОПереходеНаУСН.Видимость = Истина;
			
			Если ЗначениеЗаполнено(Форма.УведомлениеОПереходеНаУСН) Тогда
				Элементы.КартинкаЗаявлениеОПереходеНАУСНФормируется.Видимость = Ложь;
				Элементы.КартинкаЗаявлениеОПереходеНаУСН.Видимость = Истина;
				Элементы.ЗаявлениеОПереходеНаУСНФормируется.Видимость = Ложь;
			Иначе
				Элементы.КартинкаЗаявлениеОПереходеНАУСНФормируется.Видимость = Истина;
				Элементы.КартинкаЗаявлениеОПереходеНаУСН.Видимость = Ложь;
				Элементы.ЗаявлениеОПереходеНаУСНФормируется.Видимость = Истина;
			КонецЕсли;
			
		Иначе
			Элементы.ГруппаИзменениеСистемыНалогообложения.Видимость = Ложь;
			Элементы.ОтражениеВСистемеЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
			Элементы.УведомлениеОПереходеНаУСН.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодНалоговогоОргана()
	
	ПараметрыВыполнения = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НовыеПараметрыЗаполненияКодНалоговогоОргана();
	ПараметрыВыполнения.Адреса = Объект.Адреса;
	ПараметрыВыполнения.Объекты = Объект.Объекты;
	ПараметрыВыполнения.КодНалоговогоОрганаИП = Объект.КодНалоговогоОргана;
	
	Объект.КодНалоговогоОргана = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодНалоговогоОрганаПатента(
		ПараметрыВыполнения, РегистрацияВНалоговомОргане.Код);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуВвода()
	
	Элементы.КодНалоговогоОргана.ПодсказкаВвода = СтрШаблон("%1__", Объект.КодРегиона);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокПатентаПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		// Срок действия уже был заполнен каким-то образом. Не будем его менять.
		Возврат;
	КонецЕсли;
	
	// Заполним наиболее вероятный срок действия нового патента.
	
	Если Объект.РегистрацияНовогоБизнеса Тогда
		// При регистрации ИП на ПСН начало патента не может быть ранее даты регистрации.
		МинимальнаяДатаНачала = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя())
			+ Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВремяРегистрацииПредпринимателя();
	Иначе
		// При подаче заявления действующим ИП патент не может начинаться ранее чем через 10 дней от даты заявления.
		ТекущаяДата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		СледующийМесяц = КонецМесяца(ТекущаяДата) + 1;
		МинимальнаяДатаНачала = СрокПредставленияОтчета(ТекущаяДата, СледующийМесяц);
	КонецЕсли;
	
	// Патент не может быть выдан на срок менее месяца.
	МинимальнаяДатаОкончания
		= Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.МинимальнаяДатаОкончанияПатента(МинимальнаяДатаНачала);
	// Чаще всего предприниматели получают патент на максимальный срок.
	Объект.ДатаОкончания = КонецГода(МинимальнаяДатаОкончания);
	
	Если Не Объект.РегистрацияНовогоБизнеса Тогда
		// Если дата заявления с учетом 10-дневного исполнения не позволяет получить патент на месяц и более,
		// заявление подается на получение патента на следующий год.
		Объект.ДатаНачала = Макс(МинимальнаяДатаНачала, НачалоГода(Объект.ДатаОкончания));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ОбъектыБезПлощади = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВидыОбъектовБезПлощади();
	КодТорговляБезТорговогоЗала = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВидДеятельностиТорговляБезТорговогоЗала();
	
	//Табличная часть "Объекты"
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыПлощадь");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.ВСписке, ОбъектыБезПлощади);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыПлощадь");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.НеВСписке, ОбъектыБезПлощади);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.Площадь", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеРавно,
		КодТорговляБезТорговогоЗала);
	
	ОбъектыБезОбязательногоАдреса = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВидыОбъектовБезАдреса();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыАдресСтрокой");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.ВСписке, ОбъектыБезОбязательногоАдреса);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыАдресСтрокой");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.НеВСписке, ОбъектыБезОбязательногоАдреса);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.Адрес", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	//Табличная часть "Транспортные средства"
	
	КодыПеревозкаГрузов = Новый СписокЗначений;
	КодыПеревозкаГрузов.ЗагрузитьЗначения(ДополнительныеНастройки.КодыВидовДеятельностиГрузоперевозки);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 14);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.ТранспортныеСредства.Грузоподъемность", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 14);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.ТранспортныеСредства.Количество", ВидСравненияКомпоновкиДанных.Равно, 0);
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура СформироватьЗаявлениеПриПереходеНаСледующийШаг()
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	ДлительнаяОперация = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СформироватьЗаявлениеЗаданиеВыполнено(ДлительнаяОперация.АдресРезультата);
		
	Иначе
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявлениеЗаданиеВыполнено(АдресРезультата) Экспорт
	
	СсылкаНаДокумент = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация, ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	СоздатьНовоеЗаявление = Ложь;
	Модифицированность    = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Количество = 0;
	
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Если Количество > 20 Тогда
			Прервать;
		КонецЕсли;
		
		ТекстПоиска = СокрЛП(Текст);
		Если Найти(НРег(ЭлементСписка.Представление), НРег(ТекстПоиска)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Количество = Количество + 1;
		ИначеЕсли СтрНачинаетсяС(ЭлементСписка.Значение, ТекстПоиска)
			Или СтрНачинаетсяС(ЭлементСписка.Значение, "0" + ТекстПоиска) Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение, 
				ПредставлениеВидаДеятельности(ЭлементСписка.Значение, ЭлементСписка.Представление));
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВидаДеятельности(Код, Наименование)

	Возврат СтрШаблон("%1 - %2", Лев(Код, 6), Наименование);

КонецФункции

#Область СервисРегиональныхСтавок

&НаКлиенте
Процедура ВидДеятельностиПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	МаксимальныйРазмерСпискаВыбора = 20;
	
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Если ДанныеВыбора.Количество() >= МаксимальныйРазмерСпискаВыбора Тогда
			Прервать;
		КонецЕсли;
		
		ТекстПоиска = СокрЛП(Текст);
		Если Найти(НРег(ЭлементСписка.Представление), НРег(ТекстПоиска)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		ИначеЕсли СтрНачинаетсяС(ЭлементСписка.Значение, ТекстПоиска)
			Или СтрНачинаетсяС(ЭлементСписка.Значение, "0" + ТекстПоиска) Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение, 
				ПредставлениеВидаДеятельности(ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВидыДеятельностиВФоне()
	
	Если Не ИспользуетсяСервисРегиональныеСтавкиНалогов
		Или Не ЗначениеЗаполнено(Объект.КодРегиона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = РегиональныеСтавкиНалоговКлиент.ПараметрыМетодаВидыДеятельностиПСН();
	ПараметрыМетода.КодРегиона = Объект.КодРегиона;
	ПараметрыМетода.Период = Объект.ДатаНачала;
	
	ДлительнаяОперация = ПолучитьВидыДеятельностиВФонеНаСервере(ПараметрыМетода, УникальныйИдентификатор);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресСпискаВидовДеятельности = "";
	ЗаполнитьСписокВыбораВидовДеятельности();
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Истина;
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		Обработчик = Новый ОписаниеОповещения("ОбработкаПолученияВидовДеятельности", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	Иначе
		ОбработкаОшибкиСервисаРегиональныхСтавокНалогов(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыДеятельностиВФонеНаСервере(Знач ПараметрыМетода, Знач УникальныйИдентификатор)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Региональные ставки налогов: Список видов деятельности ПСН'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"РегиональныеСтавкиНалогов.ПолучитьВидыДеятельностиПатентаВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПолученияВидовДеятельности(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Перем ВидыДеятельности;
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" И ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
		Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Ложь;
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если Результат.КодСостояния = 200 Тогда
			СписокВидовДеятельности = Результат.Ответ;
			Если ЭтоПереходныйПериод(Объект.ДатаНачала) Тогда
				РегиональныеСтавкиНалоговКлиент.ДополнитьВидамиДеятельностиПереходногоПериода(
					Объект.КодРегиона,
					УчетПСНКлиентСервер.КодыВидовДеятельностиПереходногоПериода(),
					СписокВидовДеятельности);
			КонецЕсли;
			АдресСпискаВидовДеятельности = ПоместитьВоВременноеХранилище(
				СписокВидовДеятельности,
				УникальныйИдентификатор);
			ЗаполнитьСписокВыбораВидовДеятельности();
		Иначе
			ТекстСообщения = НСтр("ru='Сервис временно недоступен.
				|Укажите наименование и код вида деятельности самостоятельно.'");
			Обработчик = Новый ОписаниеОповещения("ОтключитьНедоступныйСервис", ЭтотОбъект);
			ПоказатьПредупреждение(Обработчик, ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Заголовок = НСтр("ru='Не удалось получить данные сервиса.'");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОшибкиСервисаРегиональныхСтавокНалогов(ПредставлениеОшибки)
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ПредставлениеОшибки, , "КодВидаДеятельностиСтрокой");
	
	Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПереходныйПериод(Период)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПереходныйПериод = УчетПСНКлиентСервер.ПереходныйПериод();
	
	Возврат ПереходныйПериод.Начало <= НачалоДня(Период) И НачалоДня(Период) <= ПереходныйПериод.Конец;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовДеятельности()
	
	Элементы.КодВидаДеятельностиСервис.СписокВыбора.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресСпискаВидовДеятельности) Тогда
		
		ВидыДеятельности = ПолучитьИзВременногоХранилища(АдресСпискаВидовДеятельности);
		Если ВидыДеятельности <> Неопределено Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Элементы.КодВидаДеятельностиСервис.СписокВыбора.Добавить(
					РеквизитыВидаДеятельности.Код,
					ПредставлениеВидаДеятельности(РеквизитыВидаДеятельности.Код, РеквизитыВидаДеятельности.Наименование));
			КонецЦикла;
		КонецЕсли;
		
		РезультатПоиска = Ложь;
		Если ПустаяСтрока(ПолныйКодВидаДеятельности) Тогда
			РезультатПоиска = НайтиВидДеятельности(КодВидаДеятельностиСтрокой, Ложь);
		Иначе
			РезультатПоиска = НайтиВидДеятельности(ПолныйКодВидаДеятельности, Истина);
		КонецЕсли;
		
		Если Не РезультатПоиска Тогда
			ПолныйКодВидаДеятельности = "";
			КодВидаДеятельностиСтрокой = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиВидДеятельности(Знач Код, ИскатьПоПолномуКоду)
	
	Код = СокрЛП(Код);
	
	КодВидаДеятельности             = Лев(Код, 2);
	КодРегионаВидаДеятельности      = Сред(Код, 3, 2);
	ПорядковыйНомерВидаДеятельности = Сред(Код, 5, 2);
	НаименованиеВидаДеятельности = "";
	
	РезультатПоиска = Ложь;
	
	Если Не ПустаяСтрока(Код) И ЭтоАдресВременногоХранилища(АдресСпискаВидовДеятельности) Тогда
		ВидыДеятельности = ПолучитьИзВременногоХранилища(АдресСпискаВидовДеятельности);
		Если ВидыДеятельности <> Неопределено И ИскатьПоПолномуКоду Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Если СокрЛП(РеквизитыВидаДеятельности.Код) = Код Тогда
					НаименованиеВидаДеятельности = РеквизитыВидаДеятельности.Наименование;
					РезультатПоиска = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ВидыДеятельности <> Неопределено И Не ИскатьПоПолномуКоду Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Если Лев(СокрЛП(РеквизитыВидаДеятельности.Код), 6) = Код Тогда
					НаименованиеВидаДеятельности = РеквизитыВидаДеятельности.Наименование;
					ПолныйКодВидаДеятельности = РеквизитыВидаДеятельности.Код;
					РезультатПоиска = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.КодВидаДеятельности <> КодВидаДеятельности Тогда
		ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
	Если РезультатПоиска Тогда
		Объект.КодВидаДеятельности = КодВидаДеятельности;
		Объект.ПорядковыйНомерВидаДеятельности = ПорядковыйНомерВидаДеятельности;
		Объект.НаименованиеВидаДеятельности = НаименованиеВидаДеятельности;
	Иначе
		Объект.КодВидаДеятельности = "";
		Объект.ПорядковыйНомерВидаДеятельности = "";
		Объект.НаименованиеВидаДеятельности = "";
	КонецЕсли;
	
	ВидДеятельностиПриИзмененииНаСервере();
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОписаниеСтавокНалогаВФоне()
	
	Если Не ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияСервисаСтавкиНалога = Неопределено;
	ДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	Если Не ЗначениеЗаполнено(Объект.КодРегиона) Тогда
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Заголовок = НСтр("ru='Укажите регион регистрации'");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПолныйКодВидаДеятельности) Тогда
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Заголовок = НСтр("ru='Укажите вид деятельности'");
		Возврат;
	КонецЕсли;
	Если Не Объект.РегистрацияНовогоБизнеса И Не ЗначениеЗаполнено(ДатаНачалаДействияПатента) Тогда
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Заголовок = НСтр("ru='Укажите дату начала действия патента'");
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = РегиональныеСтавкиНалоговКлиент.ПараметрыМетодаОписаниеСтавокПСН();
	ПараметрыМетода.КодРегиона = Объект.КодРегиона;
	ПараметрыМетода.КодВидаДеятельности = ПолныйКодВидаДеятельности;
	
	Если Не Объект.РегистрацияНовогоБизнеса Тогда
		ПараметрыМетода.Период = ДатаНачалаДействияПатента;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаПолученияОписанияСтавокНалога", ЭтотОбъект);
	
	РегиональныеСтавкиНалоговКлиент.ПолучитьОписаниеСтавокПСНВФоне(
		ЭтотОбъект,
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе, 
		Элементы.СтавкаНалогаСервисДлительнаяОперация,
		ПараметрыМетода,
		Обработчик);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияОписанияСтавокНалога(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	РегиональныеСтавкиНалоговКлиент.ОбработкаПолученияОписанияСтавокНалога(
		ДлительнаяОперация, 
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе, 
		Элементы.СтавкаНалогаСервисДлительнаяОперация);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНалога()
	
	Если НалоговыеКаникулы Тогда
		Объект.СтавкаНалога = 0;
	Иначе
		ИспользоватьСтавкуПоУмолчанию = ИнформацияСервисаСтавкиНалога = Неопределено
			Или Не ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["Применяется"];
		Если ИспользоватьСтавкуПоУмолчанию Тогда
			Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
		Иначе
			Объект.СтавкаНалога = ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["СтавкаНалога"];
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПрименитьПониженнуюСтавку();
	
	УстановитьНормуЗакона();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПрименитьПониженнуюСтавку()
	
	ПрименитьПониженнуюСтавку = Объект.СтавкаНалога < УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНормуЗакона()

	Если Не ПрименитьПониженнуюСтавку Тогда
		Объект.НормаЗакона = "";
		Возврат;
	КонецЕсли;
	
	Если ИнформацияСервисаСтавкиНалога = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если НалоговыеКаникулы Тогда
		Объект.НормаЗакона = ИнформацияСервисаСтавкиНалога["НалоговыеКаникулы"]["НормативныйАкт"];
	Иначе
		Объект.НормаЗакона = ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["НормативныйАкт"];
	КонецЕсли;
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтавокПСН(НовыеСтавки)
	
	Если ТипЗнч(НовыеСтавки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КодРегиона <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "КодРегиона") Тогда
		ТекстПредупреждения = НСтр("ru='Нельзя применить ставку налога для другого региона.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	ИначеЕсли ПолныйКодВидаДеятельности <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "КодВидаДеятельности") Тогда
		ТекстПредупреждения = НСтр("ru='Нельзя применить ставку налога для другого вида деятельности.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ИнформацияСервисаСтавкиНалога = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "Информация");
	
	НалоговыеКаникулы = НовыеСтавки.Свойство("НалоговыеКаникулы");
	Если НалоговыеКаникулы Тогда
		УстановитьСтавкуНалога();
	Иначе
		Объект.СтавкаНалога = НовыеСтавки.СтавкаНалога;
		УстановитьПрименитьПониженнуюСтавку();
		УстановитьНормуЗакона();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если НалоговыеКаникулы Тогда
		ТекущийЭлемент = Элементы.НалоговыеКаникулы;
	Иначе
		ТекущийЭлемент = Элементы.СтавкаНалога;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьНедоступныйСервис(ДополнительныеПараметры) Экспорт

	ИспользуетсяСервисРегиональныеСтавкиНалогов = Ложь;
	ОтключитьНедоступныйСервисНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОтключитьНедоступныйСервисНаСервере()

	ЗаполнитьСписокВыбораРегионов(Элементы.КодРегиона.СписокВыбора);
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДанныеКлассификатора(ВидДеятельности, КодВидаДеятельности, АдресХранилища, ДатаНачала, Ключ)
	
	ОбновитьНастройкиКлассификатораНаСервере(АдресХранилища, ДатаНачала, Ключ);
	ЗаполнитьСписокВидовДеятельности(ВидДеятельности, АдресХранилища);
	Если ВидДеятельности.СписокВыбора.НайтиПоЗначению(КодВидаДеятельности) = Неопределено Тогда
		КодВидаДеятельности = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьНастройкиКлассификатораНаСервере(АдресХранилища, ДатаНачала, Ключ)
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	АдресХранилища =
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АдресНастроекКлассификатора(ДатаНачала, Ключ);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВидовДеятельности(ВидДеятельности, АдресНастроек)
	
	ВидДеятельности.СписокВыбора.Очистить();
	НастройкиКлассификатора = ПолучитьИзВременногоХранилища(АдресНастроек);
	ВидыДеятельностиПСН = НастройкиКлассификатора.ВидыДеятельностиПСН;
	Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельностиПСН Цикл
		ВидДеятельности.СписокВыбора.Добавить(
			РеквизитыВидаДеятельности.Код,
			СтрШаблон(НСтр("ru = '%1 - %2'"), РеквизитыВидаДеятельности.Код, РеквизитыВидаДеятельности.Наименование));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Выполняет поиск по наименованию вида деятельности при вводе по строке
//
// Параметры:
//  Текст -Строка - параметр события АвтоПодбор или ОкончаниеВводаТекста
//  ДанныеВыбора - СписокЗначений - параметр события АвтоПодбор или ОкончаниеВводаТекста
//  СтандартнаяОбработка - Булево - параметр события АвтоПодбор или ОкончаниеВводаТекста
//
&НаКлиенте
Процедура ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элементы.ВидДеятельности.СписокВыбора Цикл
		НайденноеВхождение = СтрНайти(НРег(ЭлементСписка.Представление), НРег(Текст));
		Если НайденноеВхождение > 0 Тогда
			СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если СписокВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(СписокВыбора, Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимНалогообложения()
	
	Возврат "ПСНИП";
	
КонецФункции

&НаСервере
Процедура РазместитьНавигацию()
	
	СтруктураНавигацииПомощника = НалогНаПрофессиональныйДоходВызовСервера.НавигацияПомощника(
		РежимНалогообложения(),
		Организация);
	
	НавигацияПомощников.РазместитьНавигацию(ЭтотОбъект, СтруктураНавигацииПомощника, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазадВПомощникеУтратыПраваНПД()
	
	Если УтратаПраваНПД Тогда
		
		Если НавигацияПараметрФормы = "Заявление" Тогда
			РазместитьНавигацию();
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
		Иначе
			НавигацияПомощниковКлиент.ОбработатьНавигационнуюСсылку(
				НалогНаПрофессиональныйДоходКлиентСервер.НавигационнаяСсылкаШага(НавигацияПараметрФормы),
				НалогНаПрофессиональныйДоходВызовСервера.НавигацияПомощника(РежимНалогообложения(), Организация));
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявлениеОПереходеНаУСН()
	
	Если Не УтратаПраваНПД Или НавигацияПараметрФормы <> "Документы" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПредставителя = НалогНаПрофессиональныйДоходКлиентСервер.НовыеДанныеПредставителя();
	ЗаполнитьЗначенияСвойств(ДанныеПредставителя, РегистрацияВНалоговомОргане);
	
	ДлительнаяОперация = НалогНаПрофессиональныйДоходВызовСервера.СформироватьУведомлениеОПереходеНаУСНВФоне(
		Организация,
		УникальныйИдентификатор,
		"УСНДоходы",
		ДанныеПредставителя);
	
	Если ДлительнаяОперация = Неопределено Тогда
		// Ошибка проверки заполнения.
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		НалогНаПрофессиональныйДоходКлиент.ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
	Иначе
		НалогНаПрофессиональныйДоходКлиент.ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	УведомлениеОПереходеНаУСН = РезультатВыполнения.Заявление;
	
	Модифицированность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеНаПолучениеПатента()
	
	Если СсылкаНаДокумент.Пустая() Или Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

