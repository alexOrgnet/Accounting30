#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоДоступноеПользовательскоеПоле;

&НаКлиенте
Перем ЭтоДоступныйПараметрДанных;

&НаКлиенте
Перем ТекущееВыбранноеПоле;

&НаКлиенте
Перем ИдентификаторыМакетаПечатнойФормы Экспорт;

&НаКлиенте
Перем ИдентификаторыОбластей Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = Параметры.Представление;
	
	ПутьКМакетуПечатнойФормы = Параметры.ПутьКМакетуПечатнойФормы;
	ПутьКВариантуОтчета = Параметры.ПутьКВариантуОтчета;
	РежимРедактированияШаблонаДляКабинетаСотрудников = Параметры.РежимРедактированияШаблонаДляКабинетаСотрудников;
	
	Параметры.Свойство("МакетПечатнойФормы", МакетПечатнойФормы);
	Параметры.Свойство("ВариантОтчета", ВариантОтчета);
	Параметры.Свойство("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
		Если ЗначениеЗаполнено(Параметры.ДополнительныеПоляДокументов) Тогда
			Для Каждого ДополнительноеПоле Из Параметры.ДополнительныеПоляДокументов Цикл
				НовоеДополнительноеПоле = ДополнительныеПоляДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеДополнительноеПоле, ДополнительноеПоле);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьОтображениеПолейРедактора();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МакетПечатнойФормыПредварительныйПросмотр",
		"Видимость",
		Не Параметры.НеОтображатьКомандуПредварительныйПросмотр
			И Не РежимРедактированияШаблонаДляКабинетаСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НастройкиОбластей",
		"Видимость",
		РежимРедактированияШаблонаДляКабинетаСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НастройкиОтчета",
		"ОтображениеСтраниц",
		?(РежимРедактированияШаблонаДляКабинетаСотрудников,
			ОтображениеСтраницФормы.Авто,
			ОтображениеСтраницФормы.Нет));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапомнитьИдентификаторыМакетаПечатнойФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Проверка того, что данные изменены
	Если Модифицированность Тогда
		
		Отказ = Истина;
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗакрытьФорму", Истина);
		
		ЗадатьВопросОНеобходимостиСохранения(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МакетПечатнойФормыПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПечатнойФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПечатнойФормыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		ИменаРеквизитов = Новый Массив;
		Для Каждого ПараметрПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
			ИменаРеквизитов.Добавить(ПараметрПеретаскивания.ИмяПоля);
		КонецЦикла;
		
		ОбластьЯчеек = МакетПечатнойФормы.Область(Область.Верх, Область.Лево);
		ВставитьПараметрыВОбласть(ОбластьЯчеек, ИменаРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыДоступныеПоля

&НаКлиенте
Процедура ДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьПолеВыбора(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляВыбораПриАктивизацииСтроки(Элемент)
	
	ЭтоПользовательскоеПоле = Ложь;
	ЭтоПолеПараметра = СтрНачинаетсяС(Строка(Элемент.ТекущаяСтрока), "DataParameters.");
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
			ЭтоПользовательскоеПоле = ЭтоПолеПараметра;
		Иначе
			ЭтоПользовательскоеПоле =
				КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.ПолучитьОбъектПоИдентификатору(
					Элемент.ТекущаяСтрока) <> Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДоступноеПользовательскоеПоле <> ЭтоПользовательскоеПоле Тогда
		
		ЭтоДоступноеПользовательскоеПоле = ЭтоПользовательскоеПоле;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбранныеПоляИзменитьПользовательскоеПоле",
			"Доступность",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбранныеПоляСкопироватьПользовательскоеПоле",
			"Видимость",
			Не РежимРедактированияШаблонаДляКабинетаСотрудников);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбранныеПоляСкопироватьПользовательскоеПоле",
			"Доступность",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюИзменитьПользовательскоеПоле",
			"Видимость",
			ЭтоДоступноеПользовательскоеПоле);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюСкопироватьПользовательскоеПоле",
			"Видимость",
			ЭтоДоступноеПользовательскоеПоле
				И Не РежимРедактированияШаблонаДляКабинетаСотрудников);
		
	КонецЕсли;
	
	Если ЭтоДоступныйПараметрДанных <> ЭтоПолеПараметра Тогда
		ЭтоДоступныйПараметрДанных = ЭтоПолеПараметра;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДоступныеПоляВыбораКонтекстноеМенюУстановитьЗначениеПараметра",
			"Видимость",
			ЭтоДоступныйПараметрДанных
				И Не РежимРедактированияШаблонаДляКабинетаСотрудников);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыбранныеПоляУдалитьПараметр",
		"Видимость",
		ЭтоПолеПараметра
			И РежимРедактированияШаблонаДляКабинетаСотрудников);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыВыбранныеПоля

&НаКлиенте
Процедура ВыбранныеПоляПриАктивизацииСтроки(Элемент)
	
	Если ТекущееВыбранноеПоле <> Элементы.ВыбранныеПоля.ТекущиеДанные Тогда
		
		ТекущееВыбранноеПоле = Элементы.ВыбранныеПоля.ТекущиеДанные;
		ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Строка = Неопределено Тогда
		ИндексСтрокиДляВставки = Неопределено;
	Иначе
		ИндексСтрокиДляВставки = ВыбранныеПоля.Индекс(ВыбранныеПоля.НайтиПоИдентификатору(Строка));
	КонецЕсли;
	
	ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ПараметрыПеретаскивания.Значение, ИндексСтрокиДляВставки);
	
	Элементы.ВыбранныеПоля.ТекущаяСтрока = ИдентификаторСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыПараметрыМакета

&НаКлиенте
Процедура ПараметрыМакетаПриАктивизацииСтроки(Элемент)
	
	Если ТекущееВыбранноеПоле <> Элементы.ПараметрыМакета.ТекущиеДанные Тогда
		
		ТекущееВыбранноеПоле = Элементы.ПараметрыМакета.ТекущиеДанные;
		ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		ВосстановитьОформлениеМакета();
		СохранитьИзменения();
		Закрыть(ПараметрЗакрытияФормы());
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКМакетуПоУмолчанию(Команда)
	
	ВернутьсяКМакетуПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	Если Элементы.ДоступныеПоляВыбора.ТекущаяСтрока <> Неопределено Тогда
		ДобавитьПолеВыбора(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборПоля(Команда)
	
	Если Элементы.ВыбранныеПоля.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Пока Элементы.ВыбранныеПоля.ВыделенныеСтроки.Количество() > 0 Цикл
			
			ВыбранноеПоле = ВыбранныеПоля.НайтиПоИдентификатору(Элементы.ВыбранныеПоля.ВыделенныеСтроки[0]);
			ИмяПоля = ВыбранноеПоле.ИмяПоля;
			
			ВыбранныеПоля.Удалить(ВыбранноеПоле);
			
			СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля,Выбрано", ИмяПоля, Истина));
			Если СтрокиКоллекции.Количество() > 0 Тогда
				СтрокиКоллекции[0].Выбрано = Ложь;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
		Элементы.ПараметрыМакета.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Выбрано", Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИдентификатор(Команда)
	
	Если Элементы.ВыбранныеПоля.ТекущаяСтрока = Неопределено Тогда
		ИдентификаторСтрокиВыбранногоПоля = Неопределено;
	Иначе
		ИдентификаторСтрокиВыбранногоПоля = Элементы.ВыбранныеПоля.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИдентификатор(Команда)
	
	Если ИдентификаторСтрокиВыбранногоПоля <> Неопределено Тогда
		
		ВыбранноеПоле = ВыбранныеПоля.НайтиПоИдентификатору(ИдентификаторСтрокиВыбранногоПоля);
		Если ВыбранноеПоле = Неопределено Тогда
			ИдентификаторСтрокиВыбранногоПоля = Неопределено;
		Иначе
			
			ИменаРеквизитов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеПоле.ИмяПоля);
			ВставитьПараметрыВОбласть(Элементы.МакетПечатнойФормы.ТекущаяОбласть, ИменаРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПользовательскоеПоле(Команда)
	
	ОткрытьРедакторПользовательскогоПоля(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПараметра(Команда)
	
	Если ЭтоДоступныйПараметрДанных Тогда
		
		ИмяПараметра = ИмяТекущегоПараметра(Строка(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока));
		
		ПараметрНастроек = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ПараметрНастроек <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрНастроек.ИдентификаторПользовательскойНастройки) Тогда
				ПараметрНастроек.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрПользовательскихНастроек = Неопределено;
			Для Каждого ЭлементНастройки Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
				
				Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
					И ЭлементНастройки.Параметр = ПараметрНастроек.Параметр Тогда
					
					ПараметрПользовательскихНастроек = ЭлементНастройки;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПараметрПользовательскихНастроек <> Неопределено Тогда
				
				ДоступныйПараметр = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрНастроек.Параметр);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрНастроек", ПараметрПользовательскихНастроек);
				
				Оповещение = Новый ОписаниеОповещения("УстановитьЗначениеПараметраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводЗначения(Оповещение, ПараметрНастроек.Значение, ДоступныйПараметр.Заголовок, ДоступныйПараметр.ТипЗначения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	ВосстановитьОформлениеМакета();
	
	ЧастиПути = СтрРазделить(ПутьКВариантуОтчета, ".");
	КлючВарианта = ЧастиПути[ЧастиПути.Количество() - 1];
	
	ЧастиПути.Удалить(ЧастиПути.Количество() - 1);
	
	ВыбранныеПоляВНастройки(ЭтотОбъект);
	ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("МакетПечатнойФормы", МакетПечатнойФормы);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НастройкиПечатнойФормы", ПолучитьНастройки(КомпоновщикНастроекКД));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиУстановлены", Истина);
	
	Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
		ВариантОтчета = ВариантОтчетов(СтрСоединить(ЧастиПути, "."), КлючВарианта);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, ВариантОтчета, ПараметрыФормы);
	
	ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПараметр(Команда)
	
	УдалитьПараметрНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЗначениеПараметраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Не ДополнительныеПараметры.ПараметрНастроек.Использование
			Или ДополнительныеПараметры.ПараметрНастроек.Значение <> Результат Тогда
			
			ДополнительныеПараметры.ПараметрНастроек.Значение = Результат;
			ДополнительныеПараметры.ПараметрНастроек.Использование = Истина;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторПользовательскогоПоля(ТекущийЭлемент = Неопределено, Скопировать = Ложь)
	
	Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияРедактораПараметра(АдресСхемы, ТекущийЭлемент);
		Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаРедактированияПараметра", ЭтотОбъект);
		ОткрытьФорму("Обработка.НастраиваемыеПечатныеФормыЗарплатаКадры.Форма.ФормаПараметра", ПараметрыОткрытия, ЭтотОбъект,
			Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КомпоновщикНастроекКД", КомпоновщикНастроекКД);
		
		ДополнительныеПараметры = Новый Структура;
		
		Если ТекущийЭлемент <> Неопределено Тогда
			
			ПараметрыОткрытия.Вставить("ТекущийЭлемент", ТекущийЭлемент);
			
			Если Скопировать Тогда
				ПараметрыОткрытия.Вставить("Скопировать", Истина);
			Иначе
				ДополнительныеПараметры.Вставить("ТекущийЭлемент", ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаРедактированияПользовательскогоПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.НастраиваемыеПечатныеФормыЗарплатаКадры.Форма.ФормаПользовательскогоПоля", ПараметрыОткрытия, ЭтотОбъект,
			Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОткрытияРедактораПараметра(АдресСхемы, ТекущийЭлемент)
	
	ИмяПараметра = СтрЗаменить(ТекущийЭлемент, "DataParameters.", "");
	ПараметрыОткрытия = Новый Структура("Имя", ИмяПараметра);
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	Параметр = Схема.Параметры.Найти(ИмяПараметра);
	Если Параметр <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Заголовок", Параметр.Заголовок);
		ПараметрыОткрытия.Вставить("ТипЗначения", Параметр.ТипЗначения);
	КонецЕсли;
	Возврат ПараметрыОткрытия;
	
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаРедактированияПользовательскогоПоля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущийЭлемент") Тогда
			
			ВставитьВыбранноеПоле = Ложь;
			ПользовательскоеПоле = КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.ПолучитьОбъектПоИдентификатору(ДополнительныеПараметры.ТекущийЭлемент);
			
		Иначе
			
			ВставитьВыбранноеПоле = Истина;
			ПользовательскоеПоле = КомпоновщикНастроекКД.Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			
		КонецЕсли;
		
		ПользовательскоеПоле.Заголовок = Результат.Заголовок;
		
		ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Результат.ВыражениеДетальныхЗаписей);
		
		Если ЗначениеЗаполнено(Результат.ВыражениеИтоговыхЗаписей) Тогда
			ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(Результат.ВыражениеИтоговыхЗаписей);
		КонецЕсли;
		
		Если ВставитьВыбранноеПоле Тогда
			
			Элементы.ВыбранныеПоля.ТекущаяСтрока = ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным), ПараметрыМакета);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаРедактированияПараметра(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьПараметрВСхему(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПолейРедактора(УстановитьМакетПоУмолчанию = Ложь)
	
	ИдентификаторСтрокиВыбранногоПоля = Неопределено;
	Менеджер = Неопределено;
	ИмяПредопределенного = "";
	
	Если ЗначениеЗаполнено(ПутьКМакетуПечатнойФормы)
		И (УстановитьМакетПоУмолчанию Или МакетПечатнойФормы.ВысотаТаблицы = 0) Тогда
		
		// Установка макета печатной формы и настроек СКД
		Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяПредопределенныхДанных);
			СловаИмени = СтрРазделить(ИмяПредопределенныхДанных, ".");
			ИмяПредопределенного = СловаИмени[СловаИмени.Количество() - 1];
			МакетПечатнойФормы = Менеджер.МакетПечатнойФормыПоУмолчанию(ИмяПредопределенного);
		Иначе
			МакетПечатнойФормы = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакетуПечатнойФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяОтчета = "";
	КлючВарианта = "";
	Если ЗначениеЗаполнено(ПутьКВариантуОтчета) Тогда
		ИмяОтчета = ЗарплатаКадрыОтчеты.ИмяОтчетаИзПутиКВарианту(ПутьКВариантуОтчета);
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета);
	ИначеЕсли ЗначениеЗаполнено(ВариантОтчета) Тогда
		РеквизитыВариантаОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантОтчета, "Отчет,КлючВарианта");
		ИмяОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыВариантаОтчета.Отчет, "ПолноеИмя");
		КлючВарианта = РеквизитыВариантаОтчета.КлючВарианта;
	КонецЕсли;
	
	ОбъектОтчета = ОбщегоНазначения.ОбъектПоПолномуИмени(ИмяОтчета);
	
	ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СообщатьОРасхожденияхВПутяхКДанным", Истина);
	ОбъектОтчета.ИнициализироватьОтчет();
	ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("СообщатьОРасхожденияхВПутяхКДанным");
	
	Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
		
		Если УстановитьМакетПоУмолчанию Тогда
			Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
				НастройкиПечатнойФормы = Менеджер.НастройкиВариантаОтчетаПоУмолчанию(КлючВарианта, ИмяПредопределенного);
			Иначе
				НастройкиПечатнойФормы = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(КлючВарианта, Истина);
			КонецЕсли;
		Иначе
			НастройкиПечатнойФормы = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(КлючВарианта);
		КонецЕсли;
		
		Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
			НаборДанных = НастройкиПечатнойФормы.СхемаКомпоновкиДанных.НаборыДанных[0];
			Для Каждого ДополнительноеПоле Из ДополнительныеПоляДокументов Цикл
				
				ПолеНабораДанных = НаборДанных.Поля.Найти(ДополнительноеПоле.ПутьКПолю);
				Если ПолеНабораДанных = Неопределено Тогда
					ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					ПолеНабораДанных.Поле			= ДополнительноеПоле.ИмяПоля;
					ПолеНабораДанных.ПутьКДанным	= ДополнительноеПоле.ПутьКПолю;
				КонецЕсли;
				ПолеНабораДанных.ТипЗначения	= ДополнительноеПоле.Тип;
				ПолеНабораДанных.ОграничениеИспользования.Условие = Не ДополнительноеПоле.ДоступноВУсловиях;
				ПолеНабораДанных.ОграничениеИспользования.Группировка = Истина;
				ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Поле = Не ДополнительноеПоле.ДоступныРеквизиты;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Порядок = Истина;
				Если ЗначениеЗаполнено(ДополнительноеПоле.ДоступныеЗначения) Тогда
					ПолеНабораДанных.УстановитьДоступныеЗначения(ДополнительноеПоле.ДоступныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		АдресСхемы = ПоместитьВоВременноеХранилище(НастройкиПечатнойФормы.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		ЗарплатаКадрыОтчеты.ИнициализироватьИЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, НастройкиПечатнойФормы)
	Иначе
		ЗарплатаКадрыОтчеты.ЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, ОбъектОтчета, КлючВарианта);
	КонецЕсли;
	
	ЗаполнитьВыбранныеПоля();
	
	Элементы.ПараметрыМакета.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Выбрано", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОНеобходимостиСохранения(ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаНеобходимостиСохранитьИзмененияНастроекПечатнойФормы", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Настройка печатной формы была изменена.
		|Сохранить изменения?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНеобходимостиСохранитьИзмененияНастроекПечатнойФормы(Результат, ДополнительныеПараметры) Экспорт
	
	ВосстановитьОформлениеМакета();
	
	Попытка
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			СохранитьИзменения();
			Если ДополнительныеПараметры.Свойство("ЗакрытьФорму") Тогда
				Закрыть(ПараметрЗакрытияФормы());
				Возврат;
			КонецЕсли;
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			Если ДополнительныеПараметры.Свойство("ЗакрытьФорму") Тогда
				Модифицированность = Ложь;
				Закрыть();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьПустыеГруппыОтбораОбластей();
	ВыбранныеПоляВНастройки(ЭтотОбъект);
	
	КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.Очистить();
	
	НастройкиСхемы = ЗарплатаКадрыОтчеты.НоваяСтруктураНастроекПечатнойФормы();
	НастройкиСхемы.Настройки = КомпоновщикНастроекКД.Настройки;
	НастройкиСхемы.ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Если РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
		НастройкиСхемы.СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета);
		ПолноеИмяОбъектаМетаданныхОтчета = ЗарплатаКадрыОтчеты.ИмяОтчетаИзПутиКВарианту(ПутьКВариантуОтчета);
		ВариантОтчета = ЗарплатаКадрыОтчеты.ВариантОтчетаПечатнойФормыПоИмениОбъекта(ПолноеИмяОбъектаМетаданныхОтчета, КлючВарианта);
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ЗапомнитьНастройкиВариантаОтчета(ВариантОтчета, НастройкиСхемы);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РежимРедактированияШаблонаДляКабинетаСотрудников Тогда
		// Сохранение настоек макета печатной формы
		ОписаниеМакета = УправлениеПечатью.ОписаниеМакета();
		ОписаниеМакета.ИмяОбъектаМетаданныхМакета = ПутьКМакетуПечатнойФормы;
		ОписаниеМакета.АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетПечатнойФормы);
		ОписаниеМакета.ИсточникиДанных = Новый Массив;
		УправлениеПечатью.ЗаписатьМакет(ОписаниеМакета);
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ОчиститьМакетОтчетаПоСсылке(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантОтчета, "Отчет"), КлючВарианта);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПараметрЗакрытияФормы()
	
	ПараметрЗакрытия = Новый Структура;
	ПараметрЗакрытия.Вставить("Результат", Истина);
	ПараметрЗакрытия.Вставить("МакетПечатнойФормы", МакетПечатнойФормы);	
	ПараметрЗакрытия.Вставить("ВыбранныеПоля", ПараметрВыбранныеПоля());
	
	Возврат ПараметрЗакрытия;
	
КонецФункции

&НаСервере
Функция ПараметрВыбранныеПоля()
	
	ПараметрВыбранныеПоля = Новый Массив;
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ПараметрВыбранноеПоле = Новый Структура;
		ПараметрВыбранноеПоле.Вставить("ПользовательскоеПоле",(СтрНайти(ВыбранноеПоле.ПутьКДанным, "ПользовательскиеПоля") <> 0));
		ПараметрВыбранноеПоле.Вставить("ПутьКДанным", ВыбранноеПоле.ПутьКДанным);
		ПараметрВыбранноеПоле.Вставить("Имя", ВыбранноеПоле.ИмяПоля);
		ПараметрВыбранныеПоля.Добавить(ПараметрВыбранноеПоле);
	КонецЦикла;
	
	Возврат ПараметрВыбранныеПоля;
	
КонецФункции

#Область РаботаСПредставлениемМакетаПечатнойФормы

&НаКлиенте
Процедура ПриИзмененииСодержимогоОбласти(Область)
	
	ДобавитьПараметрыОбласти(ИдентификаторыМакетаПечатнойФормы, Область, Истина);
	ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы);
	
	ПараметрыМакета.Сортировать("ИмяПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеОбластиМакетаПечатнойФормы(МакетПечатнойФормы, ВыбранноеПоле = Истина)
	
	ВосстановитьОформлениеМакета();
	
	Если Не ЗначениеЗаполнено(ИдентификаторыМакетаПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееВыбранноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоля = ТекущееВыбранноеПоле.ИмяПоля;
	Если ВыбранноеПоле Тогда
		
		ЦветРамки = WebЦвета.Зеленый;
		ЦветФона = WebЦвета.СветлоЗеленый;
		
	Иначе
		
		ЦветРамки = WebЦвета.ТемноОранжевый;
		ЦветФона = WebЦвета.Оранжевый;
		
	КонецЕсли;
	
	ИдентификаторыОбластей = Новый Соответствие;
	
	Если Не ПустаяСтрока(ИмяПоля) Тогда
		
		СтрокиПараметра = ИдентификаторыМакетаПечатнойФормы.Получить(ИмяПоля);
		Если СтрокиПараметра <> Неопределено Тогда
			
			Для Каждого ОписаниеСтроки Из СтрокиПараметра Цикл
				
				НомерСтроки = ОписаниеСтроки.Ключ;
				Для Каждого ОписаниеКолонки Из ОписаниеСтроки.Значение Цикл
					
					НомерКолонки = ОписаниеКолонки.Ключ;
					Область = МакетПечатнойФормы.Область(НомерСтроки, НомерКолонки);
					
					// Запоминание настроек исходного макета
					НастройкиОбласти = Новый Структура;
					НастройкиОбласти.Вставить("Узор", Область.Узор);
					НастройкиОбласти.Вставить("ЦветУзора", Область.ЦветУзора);
					НастройкиОбласти.Вставить("ГраницаСверху", Область.ГраницаСверху);
					НастройкиОбласти.Вставить("ГраницаСлева", Область.ГраницаСлева);
					НастройкиОбласти.Вставить("ГраницаСнизу", Область.ГраницаСнизу);
					НастройкиОбласти.Вставить("ГраницаСправа", Область.ГраницаСправа);
					НастройкиОбласти.Вставить("ЦветРамки", Область.ЦветРамки);
					
					ИдентификаторыОбластей.Вставить(Область, НастройкиОбласти);
					
					// Выделение ячейки, содержащей выбранный параметр
					Область.Узор = ТипУзораТабличногоДокумента.Узор14;
					Область.ЦветУзора = ЦветФона;
					
					ЛинияВыделения = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
					Область.ГраницаСверху = ЛинияВыделения;
					Область.ГраницаСлева = ЛинияВыделения;
					Область.ГраницаСнизу = ЛинияВыделения;
					Область.ГраницаСправа = ЛинияВыделения;
					
					Область.ЦветРамки = ЦветРамки;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОформлениеМакета()
	
	Если ИдентификаторыОбластей <> Неопределено Тогда
		
		Для Каждого ОписаниеОформления Из ИдентификаторыОбластей Цикл
			
			Область = ОписаниеОформления.Ключ;
			ЗаполнитьЗначенияСвойств(Область, ОписаниеОформления.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторыОбластей = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметрыВОбласть(ОбластьЯчеек, ИменаРеквизитов)
	
	Если ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст Тогда
		ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
	ИначеЕсли ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
		ТекстОбласти = "[" + ОбластьЯчеек.Параметр + "]";
		ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ОбластьЯчеек.Текст = ТекстОбласти;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		ОбластьЯчеек.Текст = ОбластьЯчеек.Текст + " [" + ИмяРеквизита + "]";
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ПриИзмененииСодержимогоОбласти(ОбластьЯчеек);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИдентификаторамиМакетаПечатнойФормы

&НаКлиенте
Процедура ЗапомнитьИдентификаторыМакетаПечатнойФормы()
	
	ИдентификаторыМакетаПечатнойФормы = Новый Соответствие;
	Для НомерСтроки = 1 По МакетПечатнойФормы.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По МакетПечатнойФормы.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = МакетПечатнойФормы.Область(НомерСтроки, НомерКолонки);
			Если ОбластьЯчейки.Верх < НомерСтроки Или ОбластьЯчейки.Лево < НомерКолонки Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьПараметрыОбласти(ИдентификаторыМакетаПечатнойФормы, ОбластьЯчейки, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыМакета.Сортировать("ИмяПоля");
	ЗаполнитьОбластиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыОбласти(ИдентификаторыМакета, ОбластьЯчеек, ОчищатьПредыдущие)
	
	Если ОчищатьПредыдущие Тогда
		УдалитьУпоминаниеОбласти(ИдентификаторыМакета, ОбластьЯчеек);
	КонецЕсли;
	
	Если ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
		ДобавитьПараметрМакета(ИдентификаторыМакета, ОбластьЯчеек.Параметр, ОбластьЯчеек.Верх, ОбластьЯчеек.Лево);
	ИначеЕсли ОбластьЯчеек.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
		ДобавитьПараметрыШаблона(ИдентификаторыМакета, ОбластьЯчеек.Текст, ОбластьЯчеек.Верх, ОбластьЯчеек.Лево);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУпоминаниеОбласти(ИдентификаторыМакета, ОбластьЯчеек)
	
	Для Каждого ОписаниеАдресов Из ИдентификаторыМакета Цикл
		
		КолонкиСтроки = ОписаниеАдресов.Значение.Получить(ОбластьЯчеек.Верх);
		Если КолонкиСтроки <> Неопределено Тогда
			
			ОписаниеКолонки = КолонкиСтроки.Получить(ОбластьЯчеек.Лево);
			Если ОписаниеКолонки <> Неопределено Тогда
				
				КолонкиСтроки.Удалить(ОбластьЯчеек.Лево);
				Если КолонкиСтроки.Количество() = 0 Тогда
					ОписаниеАдресов.Значение.Удалить(ОбластьЯчеек.Верх);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеАдресов.Значение.Количество() = 0 Тогда
			
			СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", ОписаниеАдресов.Ключ));
			Если СтрокиКоллекции.Количество() > 0 Тогда
				ПараметрыМакета.Удалить(СтрокиКоллекции[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрМакета(ИдентификаторыМакета, ИмяПараметра, НомерСтроки, НомерКолонки)
	
	СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПараметра));
	Если СтрокиКоллекции.Количество() = 0 Тогда
		
		НоваяСтрока = ПараметрыМакета.Добавить();
		НоваяСтрока.ИмяПоля = ИмяПараметра;
		НоваяСтрока.Выбрано = ВыбранныеПоля.НайтиСтроки(Новый Структура("ИмяПоля", НоваяСтрока.ИмяПоля)).Количество() > 0;
		
	КонецЕсли;
	
	АдресаПараметра = ИдентификаторыМакета.Получить(ИмяПараметра);
	Если АдресаПараметра = Неопределено Тогда
		АдресаПараметра = Новый Соответствие;
		ИдентификаторыМакета.Вставить(ИмяПараметра, АдресаПараметра);
	КонецЕсли;
	
	КолонкиСтроки = АдресаПараметра.Получить(НомерСтроки);
	Если КолонкиСтроки = Неопределено Тогда
		КолонкиСтроки = Новый Соответствие;
		АдресаПараметра.Вставить(НомерСтроки, КолонкиСтроки);
	КонецЕсли;
	
	КолонкиСтроки.Вставить(НомерКолонки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыШаблона(ИдентификаторыМакета, ТекстШаблона, НомерСтроки, НомерКолонки)
	
	КоличествоОткрывающихСкобок = СтрЧислоВхождений(ТекстШаблона, "[");
	Для НомерВхождения =1 По КоличествоОткрывающихСкобок Цикл
		
		ПозицияОткрывающейСкобки = СтрНайти(ТекстШаблона, "[", , , НомерВхождения);
		ПозицияЗакрывающейСкобки = СтрНайти(ТекстШаблона, "]", , ПозицияОткрывающейСкобки);
		
		Если ПозицияЗакрывающейСкобки <> 0 Тогда
			
			ИмяПараметра = Сред(ТекстШаблона, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1);
			ДобавитьПараметрМакета(ИдентификаторыМакета, ИмяПараметра, НомерСтроки, НомерКолонки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользовательскийМакет()
	
	Если ЗначениеЗаполнено(ПутьКВариантуОтчета) Тогда
		УправлениеПечатью.УдалитьМакет(ПутьКМакетуПечатнойФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеПоля()
	
	ВыбранныеПоля.Очистить();
	
	ЗагруженыПользовательскиеНастройки = Ложь;
	Для Каждого ЭлементКоллекции Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ЗагруженыПользовательскиеНастройки = Истина;
			Для Каждого Элемент Из ЭлементКоллекции.Элементы Цикл
				
				ВставитьВыбранноеПолеВКоллекцию(
					ВыбранныеПоля, КомпоновщикНастроекКД, Элемент.Поле, ПараметрыМакета, , Элемент.Использование);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗагруженыПользовательскиеНастройки Тогда
		
		Для Каждого Элемент Из КомпоновщикНастроекКД.Настройки.Выбор.Элементы Цикл
			
			ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, Элемент.Поле, ПараметрыМакета, , Элемент.Использование);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеВыбора(ВыбраннаяСтрока)
	
	ОбъектКомпоновки = КомпоновщикНастроекКД.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если ОбъектКомпоновки.Папка Тогда
		ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ОбъектКомпоновки.Элементы);
	Иначе
		
		ИдентификаторСтроки = ВставитьВыбранноеПолеВКоллекцию(
			ВыбранныеПоля, КомпоновщикНастроекКД, ОбъектКомпоновки.Поле, ПараметрыМакета);
		
	КонецЕсли;
	
	Элементы.ВыбранныеПоля.ТекущаяСтрока = ИдентификаторСтроки;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ВставитьВыбранныеПоляВКоллекцию(ВставляемыеПоля, ИндексСтрокиДляВставки = Неопределено)
	
	Модифицированность = Истина;
	
	Для Каждого ВставляемыйЭлемент Из ВставляемыеПоля Цикл
		
		Если ВставляемыйЭлемент.Папка Тогда
			ИдентификаторСтроки = ВставитьВыбранныеПоляВКоллекцию(ВставляемыйЭлемент.Элементы, ИндексСтрокиДляВставки);
		Иначе
			ИдентификаторСтроки = ВставитьВыбранноеПолеВКоллекцию(
				ВыбранныеПоля, КомпоновщикНастроекКД, ВставляемыйЭлемент.Поле, ПараметрыМакета, ИндексСтрокиДляВставки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВставитьВыбранноеПолеВКоллекцию(КоллекцияВыбранныхПолей, КомпоновщикНастроекКД, Поле, ПараметрыМакета, ИндексСтрокиДляВставки = Неопределено, Использование = Истина)
	
	ИдентификаторПоля = 0;
	
	ДоступныеПоляВыбора = КомпоновщикНастроекКД.Настройки.ДоступныеПоляВыбора;
	ДоступноеПоле = ДоступныеПоляВыбора.НайтиПоле(Поле);
	
	Если ДоступноеПоле <> Неопределено Тогда
		
		Если ИндексСтрокиДляВставки = Неопределено
			Или ИндексСтрокиДляВставки < 0 Тогда
			
			НоваяСтрока = КоллекцияВыбранныхПолей.Добавить();
			
		Иначе
			НоваяСтрока = КоллекцияВыбранныхПолей.Вставить(ИндексСтрокиДляВставки);
			ИндексСтрокиДляВставки = ИндексСтрокиДляВставки + 1;
		КонецЕсли;
		
		НоваяСтрока.Использование = Использование;
		НоваяСтрока.ПутьКДанным = Поле;
		
		НоваяСтрока.Представление = ДоступноеПоле.Заголовок;
		
		Если Лев(Строка(Поле), 21) = "ПользовательскиеПоля." Тогда
			НоваяСтрока.ИмяПоля = ЗарплатаКадрыКлиентСервер.ИдентификаторМакетаПечатнойФормы(НоваяСтрока.Представление);
		Иначе
			НоваяСтрока.ИмяПоля = ЗарплатаКадрыКлиентСервер.ИдентификаторМакетаПечатнойФормы(Строка(Поле));
		КонецЕсли;
		
		СтрокиКоллекции = ПараметрыМакета.НайтиСтроки(Новый Структура("ИмяПоля", НоваяСтрока.ИмяПоля));
		Если СтрокиКоллекции.Количество() > 0 Тогда
			СтрокиКоллекции[0].Выбрано = Истина;
		КонецЕсли;
		
		ИдентификаторПоля = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат ИдентификаторПоля;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройки(КомпоновщикНастроекКД)
	Возврат КомпоновщикНастроекКД.ПолучитьНастройки();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыбранныеПоляВНастройки(Форма)
	
	УстанавливалсяИдентификаторПользовательскойНастройки = Ложь;
	Если Не ЗначениеЗаполнено(Форма.КомпоновщикНастроекКД.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		Форма.КомпоновщикНастроекКД.Настройки.Выбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		УстанавливалсяИдентификаторПользовательскойНастройки = Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из Форма.КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ЭлементВыбор = Элемент;
			Если УстанавливалсяИдентификаторПользовательскойНастройки Тогда
				ЭлементВыбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			Иначе
				ЭлементВыбор.Элементы.Очистить();
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВыбранноеПоле Из Форма.ВыбранныеПоля Цикл
		
		ВыбранноеПолеНастроек = Неопределено;
		Для Каждого ВыбранныйЭлемент Из ЭлементВыбор.Элементы Цикл
			Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных(ВыбранноеПоле.ПутьКДанным) Тогда
				ВыбранноеПолеНастроек = ВыбранныйЭлемент;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыбранноеПолеНастроек = Неопределено Тогда
			ВыбранноеПолеНастроек = ЭлементВыбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПолеНастроек.Поле = Новый ПолеКомпоновкиДанных(ВыбранноеПоле.ПутьКДанным);
		КонецЕсли;
		
		ВыбранноеПолеНастроек.Использование = ВыбранноеПоле.Использование;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантОтчетов(ИмяОбъекта, КлючВарианта)
	
	Возврат ЗарплатаКадрыОтчеты.ВариантОтчетаПечатнойФормыПоИмениОбъекта(ИмяОбъекта, КлючВарианта);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ВыбранныеПоля.ПутьКДанным");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных("ВыбранныеПоля.ПутьКДанным");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("ВыбранныеПоля.Представление"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВыбранныеПоляПутьКДанным");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ВыбранныеПоля.ПутьКДанным");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВыбранныеПоляИспользование");
	ОформляемоеПоле.Использование = Истина;
	
	// Условное оформление полей отборов
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КомпоновщикНастроекКД.Настройки.Отбор.Представление");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("КомпоновщикНастроекКД.Настройки.Отбор.Представление"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КомпоновщикНастроекКДНастройкиОтборТипГруппы");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластиДокумента()
	
	ПорядокОбластей = Новый ТаблицаЗначений;
	ПорядокОбластей.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ПорядокОбластей.Колонки.Добавить("Верх", Новый ОписаниеТипов("Число"));
	СтрокаПорядка = ПорядокОбластей.Добавить();
	СтрокаПорядка.Имя = НСтр("ru = '<сам документ>'");
	СтрокаПорядка.Верх = -1;
	
	Для Каждого ОбластьМакета Из МакетПечатнойФормы.Области Цикл
		
		Если ОбластьМакета.Низ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПорядка = ПорядокОбластей.Добавить();
		СтрокаПорядка.Имя = ОбластьМакета.Имя;
		СтрокаПорядка.Верх = ОбластьМакета.Верх;
		
	КонецЦикла;
	
	ПорядокОбластей.Сортировать("Верх");
	ИзвестныеГруппы = Новый Соответствие;
	ЛишниеГруппы = Новый Массив;
	УсловияВКорне = Новый Массив;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекКД.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И ЗначениеЗаполнено(ЭлементОтбора.Представление) Тогда
			
			ПредставлениеГруппы = ПредставлениеГруппыОтбораОбласти(ЭлементОтбора);
			Если ЗначениеЗаполнено(ПорядокОбластей.НайтиСтроки(Новый Структура("Имя", ПредставлениеГруппы))) Тогда
				ИзвестныеГруппы.Вставить(ПредставлениеГруппы, ЭлементОтбора);
			Иначе
				ЛишниеГруппы.Добавить(ЭлементОтбора);
			КонецЕсли;
		Иначе
			УсловияВКорне.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЛишняяГруппа Из ЛишниеГруппы Цикл
		КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Удалить(ЛишняяГруппа);
	КонецЦикла;
	
	Для Каждого ПорядокОбласти Из ПорядокОбластей Цикл
		ДобавитьГруппуОтбора(ПорядокОбласти.Имя, ИзвестныеГруппы);
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из УсловияВКорне Цикл
		Индекс = КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Индекс(ЭлементОтбора);
		ИндексПорядка = УсловияВКорне.Найти(ЭлементОтбора);
		Если Индекс <> ИндексПорядка Тогда
			КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Сдвинуть(ЭлементОтбора, ИндексПорядка - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПорядокОбласти Из ПорядокОбластей Цикл
		ГруппаУсловий = ИзвестныеГруппы.Получить(ПорядокОбласти.Имя);
		Если ГруппаУсловий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Индекс = КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Индекс(ГруппаУсловий);
		ИндексПорядка = ПорядокОбластей.Индекс(ПорядокОбласти) + УсловияВКорне.Количество();
		Если Индекс <> ИндексПорядка Тогда
			КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Сдвинуть(ГруппаУсловий, ИндексПорядка - Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуОтбора(Представление, ИзвестныеГруппы)
	
	ГруппаОтбора = ИзвестныеГруппы.Получить(Представление);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтбора.Представление = Представление;
		ГруппаОтбора.Использование = Истина;
		ИзвестныеГруппы.Вставить(Представление, ГруппаОтбора);
	КонецЕсли;
	УстановитьПредставлениеГруппыОтбора(ГруппаОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеГруппыОтбора(ГруппаОтбора)
	
	Представление = ПредставлениеГруппыОтбораОбласти(ГруппаОтбора);
	Если ГруппаОтбора.Элементы.Количество() = 0 Тогда
		ГруппаОтбора.Представление = Представление;
	Иначе
		ГруппаОтбора.Представление = СтрШаблон("%1 (%2)",
			Представление,
			ГруппаОтбора.Элементы.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппыОтбораОбласти(ГруппаОтбора)
	
	ПозицияСкобки = СтрНайти(ГруппаОтбора.Представление, "(");
	Если ПозицияСкобки = 0 Тогда
		Представление = ГруппаОтбора.Представление;
	Иначе
		Представление = СокрЛП(Лев(ГруппаОтбора.Представление, ПозицияСкобки - 1));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ВернутьсяКМакетуПоУмолчаниюНаСервере()
	
	УдалитьПользовательскийМакет();
	УстановитьОтображениеПолейРедактора(Истина);
	ЗаполнитьОбластиДокумента();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПечатнойФормыПриИзменении(Элемент)
	
	ЗаполнитьОбластиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеГруппыОтбораОбластей()
	
	УдаляемыеГруппы = Новый Массив;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекКД.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.Элементы.Количество() = 0 Тогда
				УдаляемыеГруппы.Добавить(ЭлементОтбора);
			Иначе
				ЭлементОтбора.Представление = ПредставлениеГруппыОтбораОбласти(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяГруппа Из УдаляемыеГруппы Цикл
		КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Удалить(УдаляемаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКДНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = КомпоновщикНастроекКД.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
			Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			Родитель = ТекущиеДанные.Родитель;
			Если Родитель = Неопределено Тогда
				Родитель = ТекущиеДанные;
			КонецЕсли;
			Если ТипЗнч(Родитель) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				УстановитьПредставлениеГруппыОтбора(Родитель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКДНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = КомпоновщикНастроекКД.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
			Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Родитель = Неопределено Тогда
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКДНастройкиОтборПередУдалением(Элемент, Отказ)
	
	Если Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = КомпоновщикНастроекКД.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
			Элементы.КомпоновщикНастроекКДНастройкиОтбор.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Родитель = Неопределено Тогда
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрВСхему(ОписаниеПараметра)
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ПараметрСхемы = Схема.Параметры.Найти(ОписаниеПараметра.Имя);
	ЭтоНовыйПараметр = ПараметрСхемы = Неопределено;
	Если ЭтоНовыйПараметр Тогда
		ПараметрСхемы = Схема.Параметры.Добавить();
		ПараметрСхемы.Имя = ОписаниеПараметра.Имя;
	КонецЕсли;
	
	ПараметрСхемы.Заголовок = ОписаниеПараметра.Заголовок;
	ПараметрСхемы.ТипЗначения = ОписаниеПараметра.ТипЗначения;
	ПараметрСхемы.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	
	ИнициализироватьКомпоновщикНастроекКДСхемой(Схема);
	
	Если ЭтоНовыйПараметр Тогда
		ИдентификаторСтроки = ВставитьВыбранноеПолеВКоллекцию(ВыбранныеПоля, КомпоновщикНастроекКД, Новый ПолеКомпоновкиДанных("ПараметрыДанных." + ПараметрСхемы.Имя), ПараметрыМакета);
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ВыбранныеПоля.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПараметрНаСервере()
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ИмяПараметра = ИмяТекущегоПараметра(Строка(Элементы.ДоступныеПоляВыбора.ТекущаяСтрока));
	ПараметрСхемы = Схема.Параметры.Найти(ИмяПараметра);
	Если ПараметрСхемы <> Неопределено Тогда
		Схема.Параметры.Удалить(ПараметрСхемы);
		ИнициализироватьКомпоновщикНастроекКДСхемой(Схема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоПараметра(ПутьКПараметру)
	ЧастиТекущегоИдентификатора = СтрРазделить(ПутьКПараметру, ".");
	Возврат ЧастиТекущегоИдентификатора[ЧастиТекущегоИдентификатора.Количество() - 1];
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекКДСхемой(Схема)
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	#Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(Схема, Новый УникальныйИдентификатор);
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	#КонецЕсли

	ОтчетыКлиентСервер.ЗагрузитьНастройки(КомпоновщикНастроекКД, КомпоновщикНастроекКД.Настройки, КомпоновщикНастроекКД.ПользовательскиеНастройки);
	КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИспользуютсяПользовательскиеНастройкиПечати", Истина);
	
КонецПроцедуры

#КонецОбласти
