
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Параметры.Свойство("АдресХранилища") Тогда
		АдресХранилища = Параметры.АдресХранилища;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ЗаполнитьПериоды();
		Заголовок = НСтр("ru = 'Загрузка отчета Яндекс.Маркет за '") + Формат(Объект.Период, "ДФ='ММММ ггг'");
	Конецесли;
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьФункциональныеОпцииФормы();
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ИспользоватьНесколькоОрганизацийБухгалтерскийУчет
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		//Если ведется учет по одной организации - пропустим указание организации
		ПодключитьОбработчикОжидания("Подключаемый_ПропуститьОрганизацию", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ШагНазад();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если ПроверкаЗаполнения() Тогда
		ШагВперед();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	Если ПроверкаЗаполнения() Тогда
		ПрочитатьНастройки();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДеревоДокументов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДеревоДокументов",   АдресХранилищаДерева);
	ПараметрыФормы.Вставить("Период", 		      Объект.Период);
	ПараметрыФормы.Вставить("Организация", 	      Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Склад",              Объект.Склад);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДеревоДокументовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаОтчетаЯндексМаркет.Форма.ФормаСписокДокументов", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаНастройка.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты;
	
	Элементы.ФормаНазад.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка
		ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие;
		
	Элементы.ФормаДалее.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты
		ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка
		ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие;
		
	Элементы.ГруппаДляДокументов.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
	
	Элементы.ГруппаОшибкаОснованияРеализации.Видимость = Форма.ОшибкаОснованияРеализации;
	Элементы.ГруппаОшибкаОснованияВозврата.Видимость = Форма.ОшибкаОснованияВозврата;
	Элементы.ГруппаОшибокНет.Видимость = НЕ (Форма.ОшибкаОснованияРеализации ИЛИ Форма.ОшибкаОснованияВозврата);
	Элементы.ГруппаОшибкиЕсть.Видимость = (Форма.ОшибкаОснованияРеализации ИЛИ Форма.ОшибкаОснованияВозврата);
	
	Элементы.ФормаДалее.Заголовок = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие, "Загрузить", "Далее");
	
	Элементы.Декорация2.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставление;
	Элементы.Декорация3.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСозданиеДокументов;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки()
	
	НастройкаИнтеграции = Справочники.НастройкиИнтеграцииМаркетплейс.НастройкаПоУмолчанию(Объект.Организация, Перечисления.ВидыМаркетплейсов.ЯндексМаркет);
	ЗаполнитьЗначенияСвойств(Объект, НастройкаИнтеграции);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	
	НастройкаИнтеграции = Справочники.НастройкиИнтеграцииМаркетплейс.НастройкаПоУмолчанию(Объект.Организация, Перечисления.ВидыМаркетплейсов.ЯндексМаркет);
	Если ЗначениеЗаполнено(НастройкаИнтеграции) Тогда
		НастройкаИнтеграцииОбъект = НастройкаИнтеграции.ПолучитьОбъект();
	Иначе
		НастройкаИнтеграцииОбъект = Справочники.НастройкиИнтеграцииМаркетплейс.СоздатьЭлемент();
		НастройкаИнтеграцииОбъект.Владелец = Объект.Организация;
		НастройкаИнтеграцииОбъект.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.ЯндексМаркет;
		НастройкаИнтеграцииОбъект.Наименование = "Яндекс.Маркет";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НастройкаИнтеграцииОбъект, Объект);
	НастройкаИнтеграцииОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, ВидыДоговоров);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДоговор()

	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец",    Объект.Контрагент);
	ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
	Объект.ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВперед()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
		ПрочитатьНастройки();
		Если ПроверкаЗаполнения() Тогда
			ШагВперед();
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка Тогда
		ЗаписатьНастройки();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие;
		ЗаполнитьСвязанныеДокументы();
		Если НЕ (ОшибкаОснованияВозврата ИЛИ ОшибкаОснованияРеализации) Тогда
			ШагВперед();
		КонецЕсли;		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставление;
		ПодключитьОбработчикОжидания("НачатьСопоставлениеНоменклатуры", 0.1, Истина);
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставление Тогда	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСозданиеДокументов;
		ПодключитьОбработчикОжидания("НачатьСозданиеДокументов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНазад()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
		Если ПроверкаЗаполнения() Тогда
			ШагНазад();
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставление Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка Тогда
		
		Если (НЕ ЗначениеЗаполнено(Объект.Контрагент))
			ИЛИ (НЕ ЗначениеЗаполнено(Объект.Склад)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
			И ЗначениеЗаполнено(Объект.Организация) 
			И ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			СоздатьДоговор();
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДействие Тогда
		
		Если КоличествоДокументовСоздать = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьПериоды()
	
	МассивДокументов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Для Каждого СтраницаОтчета Из МассивДокументов Цикл
			ДанныеДокумента = СтраницаОтчета.ДанныеДокумента;
			
			Если Не ЗначениеЗаполнено(Объект.Период) И ДанныеДокумента.Свойство("Дата") Тогда
				Объект.Период = ДанныеДокумента.Дата;
			КонецЕсли;
			Если ДанныеДокумента.Свойство("Заказчик") Тогда
			    ОрганизацияИзОтчета = ДанныеДокумента.Заказчик.НаименованиеПолное;
				Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("НаименованиеСокращенное", ДанныеДокумента.Заказчик.НаименованиеПолное);
				КонецЕсли;
			КонецЕсли;
			
			Если СтраницаОтчета.ВидДокумента = "Яндекс_Отгружено" Тогда
				Продолжить;
			ИначеЕсли СтраницаОтчета.ВидДокумента = "Яндекс_Доставлено" Тогда
				ИмяТаблицы = "Реализации";
				ИменаКолонок = "ДатаПередачи";
				ИменаКолонокСорт = "ДатаПередачи Убыв";
			ИначеЕсли СтраницаОтчета.ВидДокумента = "Яндекс_Невыкуплено" Тогда
				ИмяТаблицы = "Невыкупы";
				ИменаКолонок = "ДатаПередачи";
				ИменаКолонокСорт = "ДатаПередачи Убыв";
			ИначеЕсли СтраницаОтчета.ВидДокумента = "Яндекс_Возвращено" Тогда
				ИмяТаблицы = "Возвраты";
				ИменаКолонок = "ДатаПередачи, ДатаДоставки";
				ИменаКолонокСорт = "ДатаПередачи Убыв, ДатаДоставки Убыв";
			Конецесли;
			
			ТаблицаДат = ДанныеДокумента.ТаблицаТоваров.Скопировать(,ИменаКолонок);
			Для Каждого СтрокаТаблицы Из ТаблицаДат Цикл
				Для Каждого КолонкаТаблицы Из ТаблицаДат.Колонки Цикл
					СтрокаТаблицы[КолонкаТаблицы.Имя] = НачалоМесяца(СтрокаТаблицы[КолонкаТаблицы.Имя]);
				КонецЦикла;
			КонецЦикла;
			
			ТаблицаДат.Свернуть(ИменаКолонок);
			ТаблицаДат.Сортировать(ИменаКолонокСорт);
			
			ТаблицаДат.Колонки["ДатаПередачи"].Имя = "Период";
			Если ИмяТаблицы = "Возвраты" Тогда
				ТаблицаДат.Колонки["ДатаДоставки"].Имя = "ПериодДоставки";
			КонецЕсли;
			
			Объект[ИмяТаблицы].Очистить();
			Для Каждого СтрокаТаблицы Из ТаблицаДат Цикл
				НоваяСтрока = Объект[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);					
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область СвязанныеДокументы

&НаСервере
Процедура ЗаполнитьСвязанныеДокументы()
	
	ДатыОтгрузок = Новый Массив;
	ДатыОтгрузок.Добавить(Объект.Период);
	
	Для Каждого СтрокаТаблицы Из Объект.Реализации Цикл
		ДатыОтгрузок.Добавить(СтрокаТаблицы.Период);
	КонецЦикла;                               	
	Для Каждого СтрокаТаблицы Из Объект.Невыкупы Цикл
		ДатыОтгрузок.Добавить(СтрокаТаблицы.Период);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Возвраты Цикл
		ДатыОтгрузок.Добавить(СтрокаТаблицы.Период);
	КонецЦикла;	
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДатыОтгрузок);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатыОтгрузок", ДатыОтгрузок);
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",   Объект.Контрагент);
	Запрос.УстановитьПараметр("Склад",        Объект.Склад);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Отгрузка,
	|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, МЕСЯЦ) КАК Период,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ПОМЕСТИТЬ Отгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Склад = &Склад
	|	И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, МЕСЯЦ) В (&ДатыОтгрузок)
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отгрузки.Отгрузка КАК Отгрузка,
	|	Отгрузки.Период КАК Период,
	|	Отгрузки.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Отгрузки КАК Отгрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	ДатаОтгрузки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияОтгруженныхТоваров.Ссылка КАК Доставка,
	|	РеализацияОтгруженныхТоваров.Дата КАК ДатаДоставки,
	|	НАЧАЛОПЕРИОДА(РеализацияОтгруженныхТоваров.Дата, МЕСЯЦ) КАК ПериодДоставки,
	|	Отгрузки.Отгрузка КАК Отгрузка,
	|	Отгрузки.Период КАК Период,
	|	Отгрузки.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Отгрузки КАК Отгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО (РеализацияОтгруженныхТоваров.ДокументОтгрузки = Отгрузки.Отгрузка) И (НЕ РеализацияОтгруженныхТоваров.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	ДатаОтгрузки УБЫВ,
	|	ПериодДоставки УБЫВ,
	|	ДатаДоставки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отгрузки.Отгрузка КАК Отгрузка,
	|	Отгрузки.Период КАК Период,
	|	Отгрузки.Дата КАК ДатаОтгрузки,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Невыкуп,
	|	НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.Дата, МЕСЯЦ) КАК ПериодНевыкупа,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаНевыкупа
	|ИЗ
	|	Отгрузки КАК Отгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (Отгрузки.Отгрузка = ВозвратТоваровОтПокупателя.Сделка) И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	ДатаОтгрузки УБЫВ,
	|	ПериодНевыкупа УБЫВ,
	|	ДатаНевыкупа УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отгрузки.Отгрузка КАК Отгрузка,
	|	Отгрузки.Период КАК Период,
	|	Отгрузки.Дата КАК ДатаОтгрузки,
	|	НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.Дата, МЕСЯЦ) КАК ПериодВозврата,
	|	НАЧАЛОПЕРИОДА(РеализацияОтгруженныхТоваров.Дата, МЕСЯЦ) КАК ПериодДоставки,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаВозврата,
	|	РеализацияОтгруженныхТоваров.Ссылка КАК Доставка,
	|	РеализацияОтгруженныхТоваров.Дата КАК ДатаДоставки
	|ИЗ
	|	Отгрузки КАК Отгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ПО (РеализацияОтгруженныхТоваров.Ссылка = ВозвратТоваровОтПокупателя.Сделка) И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	|		ПО (Отгрузки.Отгрузка = РеализацияОтгруженныхТоваров.ДокументОтгрузки) И (НЕ РеализацияОтгруженныхТоваров.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДатаОтгрузки УБЫВ,
	|	ПериодДоставки УБЫВ,
	|	ДатаДоставки УБЫВ,
	|	ПериодВозврата УБЫВ,
	|	ДатаВозврата УБЫВ";
	
	Результаты = Запрос.ВыполнитьПакет();
	Отгрузки = Результаты[1].Выгрузить();
	Доставки = Результаты[2].Выгрузить();
	Невыкупы = Результаты[3].Выгрузить();
	Возвраты = Результаты[4].Выгрузить();
	
	//ДеревоДокументов
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Период",         Новый ОписаниеТипов("Дата"));
	Дерево.Колонки.Добавить("ТипДокумента",   Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Представление",  Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Создать",        Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ТекущийПериод",  Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Блокировка",     Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	Дерево.Колонки.Добавить("Документ");
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Создать       = Истина;
	НоваяСтрока.ТекущийПериод = Истина;
	НоваяСтрока.ТипДокумента  = "РеализацияТоваровУслуг";
	НоваяСтрока.Представление = Формат(КонецМесяца(Объект.Период), "ДЛФ='D'") + " Отгрузка без перехода права собственности";
	НоваяСтрока.Период        = НачалоМесяца(Объект.Период);
	НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинкиДерева(НоваяСтрока);
	
	//Доставки
	Для Каждого СтрокаДоставки Из Объект.Реализации Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Период", НачалоМесяца(СтрокаДоставки.Период));
		НайденныеОтгрузки = Доставки.НайтиСтроки(СтруктураПоиска);
		Для Каждого Отгрузка Из НайденныеОтгрузки Цикл
			СтрокаДоставки.ДокументОтгрузки = Отгрузка.Отгрузка;
			Если Отгрузка.ПериодДоставки = НачалоМесяца(Объект.Период)
				ИЛИ Не ЗначениеЗаполнено(Отгрузка.ПериодДоставки) Тогда
				Если ЗначениеЗаполнено(Отгрузка.Отгрузка) Тогда
					СтрокаДоставки.ДокументРеализации = Отгрузка.Доставка;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДоставки.ДокументРеализации) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаДоставки.Загрузить = ЗначениеЗаполнено(СтрокаДоставки.ДокументОтгрузки);

		//ДеревоДокументов
		СтрокаОтгрузка = Дерево.Строки.Найти(НачалоМесяца(СтрокаДоставки.Период), "Период", Ложь);
		Если СтрокаОтгрузка = Неопределено Тогда
			СтрокаОтгрузка = Дерево.Строки.Добавить();
			СтрокаОтгрузка.ТипДокумента = "РеализацияТоваровУслуг";
			СтрокаОтгрузка.Представление = Формат(КонецМесяца(СтрокаДоставки.Период), "ДЛФ='D'") + 
				" Отгрузка без перехода права собственности";
			СтрокаОтгрузка.Период = НачалоМесяца(СтрокаДоставки.Период);
			СтрокаОтгрузка.Документ = СтрокаДоставки.ДокументОтгрузки;
			СтрокаОтгрузка.ТекущийПериод = (НачалоМесяца(СтрокаОтгрузка.Период) = НачалоМесяца(Объект.Период));
			СтрокаОтгрузка.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаОтгрузка);
		КонецЕсли;
		СтрокаРеализации = СтрокаОтгрузка.Строки.Добавить();
		СтрокаРеализации.Создать = ЗначениеЗаполнено(СтрокаОтгрузка.Документ) ИЛИ СтрокаОтгрузка.ТекущийПериод;
		СтрокаРеализации.Блокировка = НЕ СтрокаРеализации.Создать;
		СтрокаРеализации.ТипДокумента = "РеализацияОтгруженныхТоваров";
		СтрокаРеализации.Представление = Формат(КонецМесяца(Объект.Период), "ДЛФ='D'") + 
			" Реализация товаров, отгруженных в " + НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.Период, 6));
		СтрокаРеализации.Период = НачалоМесяца(Объект.Период);
		СтрокаРеализации.ТекущийПериод = (НачалоМесяца(СтрокаРеализации.Период) = НачалоМесяца(Объект.Период));
		СтрокаРеализации.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаРеализации);
		
	КонецЦикла;
		
	//Невыкупы
	Для Каждого СтрокаДоставки Из Объект.Невыкупы Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Период", НачалоМесяца(СтрокаДоставки.Период));
		НайденныеОтгрузки = Невыкупы.НайтиСтроки(СтруктураПоиска);
		Для Каждого Отгрузка Из НайденныеОтгрузки Цикл
			СтрокаДоставки.ДокументОтгрузки = Отгрузка.Отгрузка;
			Если Отгрузка.ПериодНевыкупа = НачалоМесяца(Объект.Период)
				ИЛИ Не ЗначениеЗаполнено(Отгрузка.ПериодНевыкупа) Тогда
				Если ЗначениеЗаполнено(Отгрузка.Отгрузка) Тогда
					СтрокаДоставки.ДокументВозврата = Отгрузка.Невыкуп;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДоставки.ДокументВозврата) Тогда
				Прервать;
			КонецЕсли;							
		КонецЦикла;
		СтрокаДоставки.Загрузить = ЗначениеЗаполнено(СтрокаДоставки.ДокументОтгрузки);
		
		//ДеревоДокументов
		СтрокаОтгрузка = Дерево.Строки.Найти(СтрокаДоставки.Период, "Период", Ложь);
		Если СтрокаОтгрузка = Неопределено Тогда
			СтрокаОтгрузка = Дерево.Строки.Добавить();
			СтрокаОтгрузка.ТипДокумента = "РеализацияТоваровУслуг";
			СтрокаОтгрузка.Представление = Формат(КонецМесяца(СтрокаДоставки.Период), "ДЛФ='D'") + 
				" Отгрузка без перехода права собственности";
			СтрокаОтгрузка.Период = НачалоМесяца(СтрокаДоставки.Период);
			СтрокаОтгрузка.Документ = СтрокаДоставки.ДокументОтгрузки;
			СтрокаОтгрузка.ТекущийПериод = (НачалоМесяца(СтрокаОтгрузка.Период) = НачалоМесяца(Объект.Период));
			СтрокаОтгрузка.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаОтгрузка);
		КонецЕсли;
		СтрокаНевыкуп = СтрокаОтгрузка.Строки.Добавить();
		СтрокаНевыкуп.Создать = ЗначениеЗаполнено(СтрокаОтгрузка.Документ) ИЛИ СтрокаОтгрузка.ТекущийПериод;
		СтрокаНевыкуп.Блокировка = НЕ СтрокаОтгрузка.Создать;
		СтрокаНевыкуп.ТипДокумента = "ВозвратТоваровОтПокупателя";
		СтрокаНевыкуп.Представление = Формат(КонецМесяца(Объект.Период), "ДЛФ='D'") + 
			" Возврат (невыкуп) товаров, отгруженных в " + НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.Период, 6));
		СтрокаНевыкуп.Период = НачалоМесяца(Объект.Период);
		СтрокаНевыкуп.ТекущийПериод = (НачалоМесяца(СтрокаНевыкуп.Период) = НачалоМесяца(Объект.Период));
		СтрокаНевыкуп.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаНевыкуп);
	КонецЦикла;
	
	//Возвраты
	Для Каждого СтрокаДоставки Из Объект.Возвраты Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Период", НачалоМесяца(СтрокаДоставки.Период));
		СтруктураПоиска.Вставить("ПериодДоставки", НачалоМесяца(СтрокаДоставки.ПериодДоставки));
		НайденныеОтгрузки = Возвраты.НайтиСтроки(СтруктураПоиска);
		Для Каждого Отгрузка Из НайденныеОтгрузки Цикл
			СтрокаДоставки.ДокументРеализации = Отгрузка.Доставка;
			СтрокаДоставки.ДокументОтгрузки = Отгрузка.Отгрузка;
			Если Отгрузка.ПериодВозврата = НачалоМесяца(Объект.Период)
				ИЛИ Не ЗначениеЗаполнено(Отгрузка.ПериодВозврата) Тогда
				Если ЗначениеЗаполнено(Отгрузка.Доставка) Тогда
					СтрокаДоставки.ДокументВозврата = Отгрузка.Возврат;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДоставки.ДокументВозврата) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаДоставки.Загрузить = ЗначениеЗаполнено(СтрокаДоставки.ДокументРеализации);
		
		//ДеревоДокументов
		СтрокаОтгрузка = Дерево.Строки.Найти(СтрокаДоставки.Период, "Период", Ложь);
		Если СтрокаОтгрузка = Неопределено Тогда
			СтрокаОтгрузка = Дерево.Строки.Добавить();
			СтрокаОтгрузка.ТипДокумента = "РеализацияТоваровУслуг";
			СтрокаОтгрузка.Представление = Формат(КонецМесяца(СтрокаДоставки.Период), "ДЛФ='D'") + 
				" Отгрузка без перехода права собственности";
			СтрокаОтгрузка.Период = НачалоМесяца(СтрокаДоставки.Период);
			СтрокаОтгрузка.Документ = СтрокаДоставки.ДокументОтгрузки;
			СтрокаОтгрузка.ТекущийПериод = (НачалоМесяца(СтрокаОтгрузка.Период) = НачалоМесяца(Объект.Период));
			СтрокаОтгрузка.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаОтгрузка);
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Период", СтрокаДоставки.ПериодДоставки);
		СтруктураОтбора.Вставить("ТипДокумента", "РеализацияОтгруженныхТоваров");
		НайденныеСтроки = СтрокаОтгрузка.Строки.НайтиСтроки(СтруктураОтбора, Ложь);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаРеализации = СтрокаОтгрузка.Строки.Добавить();
			СтрокаРеализации.ТипДокумента = "РеализацияОтгруженныхТоваров";
			СтрокаРеализации.Представление = Формат(КонецМесяца(СтрокаДоставки.ПериодДоставки), "ДЛФ='D'") + 
				" Реализация товаров, отгруженных в " + Нрег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.ПериодДоставки, 6));
			СтрокаРеализации.Период = НачалоМесяца(СтрокаДоставки.ПериодДоставки);
			СтрокаРеализации.Документ = СтрокаДоставки.ДокументРеализации;
			СтрокаРеализации.ТекущийПериод = (НачалоМесяца(СтрокаРеализации.Период) = НачалоМесяца(Объект.Период));
			СтрокаРеализации.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаРеализации);
		Иначе
			СтрокаРеализации = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаВозврат = СтрокаРеализации.Строки.Добавить();
		СтрокаВозврат.ТипДокумента = "ВозвратТоваровОтПокупателя";
		Если СтрокаДоставки.Период = СтрокаДоставки.ПериодДоставки Тогда
			СтрокаВозврат.Представление = Формат(КонецМесяца(Объект.Период), "ДЛФ='D'") + 
				" Возврат товаров, отгруженных и проданных в " + НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.ПериодДоставки, 6));
		Иначе
			СтрокаВозврат.Представление = Формат(КонецМесяца(Объект.Период), "ДЛФ='D'") + 
				" Возврат товаров, отгруженных в " + НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.Период, 6)) + 
				" и проданных в " + НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(СтрокаДоставки.ПериодДоставки, 6));
		КонецЕсли;
		СтрокаВозврат.Период = НачалоМесяца(Объект.Период);
		СтрокаВозврат.ТекущийПериод = (НачалоМесяца(СтрокаВозврат.Период) = НачалоМесяца(Объект.Период));
		СтрокаВозврат.Создать = (ЗначениеЗаполнено(СтрокаРеализации.Документ) И НЕ СтрокаВозврат.Блокировка) ИЛИ (СтрокаРеализации.ТекущийПериод И СтрокаРеализации.Создать);
		СтрокаВозврат.Блокировка = НЕ СтрокаВозврат.Создать;
		СтрокаВозврат.ИндексКартинки = ПолучитьИндексКартинкиДерева(СтрокаВозврат);
	КонецЦикла;
	
	КоличествоДокументов = 1 + Объект.Реализации.Количество() + Объект.Невыкупы.Количество() + Объект.Возвраты.Количество();
	КоличествоДокументовСоздать = Дерево.Строки.НайтиСтроки(Новый Структура("Создать", Истина), Истина).Количество();
	
	ОшибкаОснованияРеализации = Дерево.Строки.НайтиСтроки(Новый Структура("Блокировка, ТекущийПериод, ТипДокумента", Истина, Истина, "РеализацияОтгруженныхТоваров"), Истина).Количество() > 0;
	ОшибкаОснованияВозврата = Дерево.Строки.НайтиСтроки(Новый Структура("Блокировка, ТекущийПериод, ТипДокумента", Истина, Истина, "ВозвратТоваровОтПокупателя"), Истина).Количество() > 0;
	
	АдресХранилищаДерева = ПоместитьВоВременноеХранилище(Дерево, ЭтотОбъект.УникальныйИдентификатор); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИндексКартинкиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ТекущийПериод Тогда
		Возврат ?(СтрокаДерева.Создать, 1, 0);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Документ) Тогда
		Возврат 2;
	КонецЕсли;
	
	Возврат 3;
		
КонецФункции

&НаКлиенте
Процедура ДеревоДокументовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоДокументов();
	УправлениеФормой(ЭтотОбъект);
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		ШагВперед();
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ОбновитьДеревоДокументов()
	
	Дерево = ПолучитьИзВременногоХранилища(АдресХранилищаДерева);
	
	КоличествоДокументов = 1 + Объект.Реализации.Количество() + Объект.Невыкупы.Количество() + Объект.Возвраты.Количество();
	КоличествоДокументовСоздать = Дерево.Строки.НайтиСтроки(Новый Структура("Создать", Истина), Истина).Количество();
	
	//ОшибкаОснованияРеализации
	ОшибкаОснованияРеализации = Ложь;
	СтрокиРеализация = Дерево.Строки.НайтиСтроки(Новый Структура("Блокировка, ТекущийПериод, ТипДокумента", Истина, Истина, "РеализацияОтгруженныхТоваров"), Истина);
	Для Каждого СтрокаДерева Из СтрокиРеализация Цикл
		ОшибкаОснованияРеализации = ПроверитьРодителяСтрокиДерева(СтрокаДерева);
		Если ОшибкаОснованияРеализации Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//ОшибкаОснованияВозврата
	ОшибкаОснованияВозврата = Ложь;
	СтрокиВозврата = Дерево.Строки.НайтиСтроки(Новый Структура("Блокировка, ТекущийПериод, ТипДокумента", Истина, Истина, "ВозвратТоваровОтПокупателя"), Истина);
	Для Каждого СтрокаДерева Из СтрокиВозврата Цикл
		ОшибкаОснованияВозврата = ПроверитьРодителяСтрокиДерева(СтрокаДерева);
		Если ОшибкаОснованияВозврата Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРодителяСтрокиДерева(СтрокаДерева)
	
	ПроверяемаяСтрока = СтрокаДерева.Родитель;
	Если ПроверяемаяСтрока = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ПроверяемаяСтрока.ТекущийПериод Тогда
		Возврат ПроверитьРодителяСтрокиДерева(ПроверяемаяСтрока);
	Иначе		
		Возврат НЕ ЗначениеЗаполнено(ПроверяемаяСтрока.Документ);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

&НаКлиенте
Процедура НачатьСопоставлениеНоменклатуры()
	
	ДлительнаяОперация 	= НачатьПолучениеСписокНеСопоставленнойНоменклатуры();
	ПараметрыОжидания 	= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СопоставлениеНоменклатуры", ЭтотОбъект);
 	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);	
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеСписокНеСопоставленнойНоменклатуры()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ДанныеФайла         = ПолучитьИзВременногоХранилища(АдресХранилища);
 	Возврат ДлительныеОперации.ВыполнитьФункцию(
				ПараметрыВыполнения, 
				"Обработки.ЗагрузкаОтчетаЯндексМаркет.СписокНеСопоставленнойНоменклатурыНаСервере", 
				ДанныеФайла, Объект.Контрагент);
	
КонецФункции

&НаКлиенте
Процедура СопоставлениеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		СписокНеСопоставленнойНоменклатуры = СписокНеСопоставленнойНоменклатурыНаСервере(Результат.АдресРезультата);
		Если СписокНеСопоставленнойНоменклатуры.Количество() > 0 Тогда
			
			НастройкиСопоставления    = Новый Структура;
			НовыеКолонкиСопоставления = Новый Массив;
			ТипСтрока300              = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(300));
				
			ДополнительныеПараметрыПоиска = Новый Структура;
		
			ДополнительныеПараметрыПоиска.Вставить("Маркетплейс", ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.ЯндексМаркет"));
			
			ДополнительныйРеквизит = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыйДополнительныйРеквизитСопоставления();
			ДополнительныйРеквизит.Имя = "КодМагазина";
			ДополнительныйРеквизит.Представление = "Ваш SKU";
			НовыеКолонкиСопоставления.Добавить(ДополнительныйРеквизит);
			
			ВидимостьКолонокСопоставления = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеНастройкиВидимостиКолонокСопоставления();
			ВидимостьКолонокСопоставления.Вставить("ЕдиницаИзмерения", Ложь);
			ВидимостьКолонокСопоставления.Вставить("Упаковка", Ложь);
			ВидимостьКолонокСопоставления.Вставить("Артикул", Ложь);
			ВидимостьКолонокСопоставления.Вставить("Штрихкод", Ложь);
			
			НастройкиСопоставления.Вставить("ВидимостьКолонокСопоставления", ВидимостьКолонокСопоставления);
			НастройкиСопоставления.Вставить("ДополнительныеРеквизитыСопоставления", НовыеКолонкиСопоставления);
			НастройкиСопоставления.Вставить("ДополнительныеПараметрыПоиска", ДополнительныеПараметрыПоиска);
			НастройкиСопоставления.Вставить("ОтключитьПоискПоШтрихкодамКомбинаций", Истина);
			НастройкиСопоставления.Вставить("ОтключитьПоискПоСловарю", Истина);
			НастройкиСопоставления.Вставить("ОграничениеТипаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			НастройкиСопоставления.Вставить("ТочностьПоискаПоУмолчанию", 100);
		
			ОбработчикОповещения = Новый ОписаниеОповещения("СопоставлениеНоменклатурыЗавершение",	ЭтотОбъект);			
			СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(СписокНеСопоставленнойНоменклатуры, НастройкиСопоставления, ОбработчикОповещения);
		Иначе
			СопоставлениеНоменклатурыЗавершение(Истина, Неопределено);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокНеСопоставленнойНоменклатурыНаСервере(АдресРезультата)
	
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
	
КонецФункции

&НаКлиенте
Процедура СопоставлениеНоменклатурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ШагВперед();
	УправлениеФормой(ЭтотОбъект);
	
Конецпроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаКлиенте
Процедура НачатьСозданиеДокументов()
	
	ОтчетМаркетплейса   = Неопределено;
	ДлительнаяОперация 	= НачатьСозданиеДокументовНаСервере(ОтчетМаркетплейса);
	ПараметрыОжидания 	= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЗавершениеСозданияДокументов", ЭтотОбъект, ОтчетМаркетплейса);
 	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеДокументовНаСервере(ОтчетМаркетплейса)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ОтчетМаркетплейса   = НайтиСоздатьОтчетЯндекса(Объект.Организация, Объект.Период);
	
	ДанныеФайла         = ПолучитьИзВременногоХранилища(АдресХранилища);
    ДеревоДокументов    = ПолучитьИзВременногоХранилища(АдресХранилищаДерева);
	
	ПараметрыДокумента  = Новый Структура;
	ПараметрыДокумента.Вставить("Организация",        Объект.Организация);
	ПараметрыДокумента.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("Склад",              Объект.Склад);
	ПараметрыДокумента.Вставить("ПериодОтчета",       Объект.Период);
	ПараметрыДокумента.Вставить("ОтчетМаркетплейса",  ОтчетМаркетплейса);
			
 	Возврат ДлительныеОперации.ВыполнитьПроцедуру(
				ПараметрыВыполнения, 
				"Обработки.ЗагрузкаОтчетаЯндексМаркет.СоздатьДокументы", 
				ПараметрыДокумента, ДанныеФайла, ДеревоДокументов);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьОтчетЯндекса(Организация, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Период));
	Запрос.УстановитьПараметр("Маркетплейс", Перечисления.ВидыМаркетплейсов.ЯндексМаркет);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетМаркетплейса.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетМаркетплейса КАК ОтчетМаркетплейса
	|ГДЕ
	|	НЕ ОтчетМаркетплейса.ПометкаУдаления
	|	И ОтчетМаркетплейса.Организация = &Организация
	|	И ОтчетМаркетплейса.Маркетплейс = &Маркетплейс
	|	И ОтчетМаркетплейса.Дата = &Дата";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	НовыйОтчетЯндекса = Документы.ОтчетМаркетплейса.СоздатьДокумент();
	НовыйОтчетЯндекса.Дата = КонецДня(Период);
	НовыйОтчетЯндекса.Организация = Организация;
	НовыйОтчетЯндекса.Маркетплейс = Перечисления.ВидыМаркетплейсов.ЯндексМаркет;
	
	Попытка
		НовыйОтчетЯндекса.Записать();
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр
			("ru = 'Не удалось записать отчет Яндекс.Маркет от %1 по организации ""%2""'"), Формат(Период, "ДЛФ=ДД"), Организация);
	КонецПопытки;
	
	Возврат НовыйОтчетЯндекса.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеСозданияДокументов(Результат, ОтчетМаркетплейса) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Закрыть();
		ПараметрыФормы = Новый Структура("Ключ", ОтчетМаркетплейса);
		ОткрытьФорму("Документ.ОтчетМаркетплейса.ФормаОбъекта", ПараметрыФормы);		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПропуститьОрганизацию()
	
	ШагВперед();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
