#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ДобавитьКолонкуИД(ТаблицаТоваров) Экспорт
	
	КолонкиТаблицыТоваров = ТаблицаТоваров.Колонки;
	
	Если КолонкиТаблицыТоваров.Найти("ИД") = Неопределено Тогда
		КолонкиТаблицыТоваров.Добавить("ИД");
	КонецЕсли;
	Если КолонкиТаблицыТоваров.Найти("ИсторияИдентификаторов") = Неопределено Тогда
		КолонкиТаблицыТоваров.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
	КонецЕсли;
		
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(СтрокаТоваров.НаимТов, " ", ""))
				+ "#" + ВРег(СтрЗаменить(СтрокаТоваров.КодМагазина, " ", "") + "#"));
				
		Если ЗначениеЗаполнено(СтрокаТоваров.КодМагазина) Тогда
			СтрокаТоваров.ИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТоваров.КодМагазина);
			СтрокаТоваров.ИсторияИдентификаторов.Добавить(НатуральныйИД);
		Иначе
			СтрокаТоваров.ИД = НатуральныйИД;						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокНеСопоставленнойНоменклатурыНаСервере(МассивДокументов, Контрагент) Экспорт
	
	МассивНеСопоставленнойНоменклатуры = Новый Массив;
	
	ИменаКолонок = "НаимТов, Артикул, СтавкаНДС, КодМагазина";
	ТаблицаТоваров = Неопределено;
	
	Если ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Для Каждого СтраницаОтчета Из МассивДокументов Цикл
			ДанныеДокумента = СтраницаОтчета.ДанныеДокумента;
			
			Если ТаблицаТоваров = Неопределено Тогда
				ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров.Скопировать(,ИменаКолонок);
			Иначе
				Для Каждого СтрокаТаблицы Из ДанныеДокумента.ТаблицаТоваров Цикл
					НоваяСтрока = ТаблицаТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		Если ТаблицаТоваров = Неопределено Тогда
			Возврат МассивНеСопоставленнойНоменклатуры;
		КонецЕсли;
		ТаблицаТоваров.Свернуть(ИменаКолонок);
	КонецЕсли;
	
	Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(Контрагент);
		
	МассивПоискаНоменклатуры  = Новый Массив;
	СопоставлениеНоменклатуры = Новый Соответствие;
	НаборНоменклатурыКонтрагентов = Новый Массив;
	
	КолонкиТаблицыТоваров = ТаблицаТоваров.Колонки;
	
	КолонкаНаимТов = КолонкиТаблицыТоваров.Найти("НаимТов");
	КолонкаНаименование = КолонкиТаблицыТоваров.Найти("Наименование");
	Если КолонкаНаимТов <> Неопределено
		И КолонкаНаименование = Неопределено Тогда
		КолонкаНаимТов.Имя = "Наименование";
	КонецЕсли;
	
	Если КолонкиТаблицыТоваров.Найти("КодМагазина") = Неопределено Тогда
		КолонкиТаблицыТоваров.Добавить("КодМагазина", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 	
	КонецЕсли;
	Если КолонкиТаблицыТоваров.Найти("ИсторияИдентификаторов") = Неопределено Тогда
		КолонкиТаблицыТоваров.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
	КонецЕсли;
	Если КолонкиТаблицыТоваров.Найти("ИД") = Неопределено Тогда
		КолонкиТаблицыТоваров.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(Владелец,);
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, СтрокаТовара);
		
		НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(СтрокаТовара.Наименование, " ", ""))
				+ "#" + ВРег(СтрЗаменить(СтрокаТовара.КодМагазина, " ", "") + "#"));
				
		Если ЗначениеЗаполнено(СтрокаТовара.КодМагазина) Тогда
			НоменклатураКонтрагента.Идентификатор = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТовара.КодМагазина);
			НоменклатураКонтрагента.ИсторияИдентификаторов.Добавить(НатуральныйИД);
			СтрокаТовара.ИсторияИдентификаторов.Добавить(НатуральныйИД);
		Иначе
			НоменклатураКонтрагента.Идентификатор = НатуральныйИД;						
		КонецЕсли;
		
		СтрокаТовара.ИД = НоменклатураКонтрагента.Идентификатор;
		
		НоменклатураКонтрагента.ИдентификаторНоменклатуры = НоменклатураКонтрагента.Идентификатор;
		
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		МассивПоискаНоменклатуры.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	МассивНайденнойНоменклатуры   = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Новый Структура("НоменклатураКонтрагента", МассивПоискаНоменклатуры), Ложь);
	
	Для Каждого СтрокаНоменклатуры Из МассивНайденнойНоменклатуры Цикл
		Идентификатор = СтрокаНоменклатуры.НоменклатураКонтрагента.Идентификатор;
		Номенклатура  = СтрокаНоменклатуры.НоменклатураИБ.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			СопоставлениеНоменклатуры.Вставить(Идентификатор, Номенклатура);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого СтрокаНоменклатуры Из НаборНоменклатурыКонтрагентов Цикл
		Если НЕ ЗначениеЗаполнено(СопоставлениеНоменклатуры.Получить(СтрокаНоменклатуры.Идентификатор)) Тогда
			МассивНеСопоставленнойНоменклатуры.Добавить(СтрокаНоменклатуры);				
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНеСопоставленнойНоменклатуры;
	
КонецФункции

Процедура СоздатьДокументы(ПараметрыДокумента, ДанныеФайла, Дерево) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	ПометитьНаУдалениеДокументы(ПараметрыДокумента.ОтчетМаркетплейса);
	
	СоздатьДокументыПоСтрокамДерева(Дерево.Строки, ПараметрыДокумента, АдресХранилища);
	
КонецПроцедуры

Процедура СоздатьДокументыПоСтрокамДерева(Строки, Знач ПараметрыДокумента, АдресХранилища)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева.Создать Тогда
									
			Если СтрокаДерева.ТипДокумента = "ВозвратТоваровОтПокупателя" И СтрокаДерева.Уровень() > 0 Тогда 
				ПараметрыДокумента.Вставить("Сделка", СтрокаДерева.Родитель.Документ);
			ИначеЕсли СтрокаДерева.ТипДокумента = "РеализацияОтгруженныхТоваров" И СтрокаДерева.Уровень() > 0 Тогда 
				ПараметрыДокумента.Вставить("ДокументОтгрузки", СтрокаДерева.Родитель.Документ);
			КонецЕсли;
			
			НовыйДокумент = Документы[СтрокаДерева.ТипДокумента].СоздатьДокументПоОтчетуЯндекса(
				АдресХранилища, ПараметрыДокумента, НачалоДня(ПараметрыДокумента.ПериодОтчета) + СтрокаДерева.Уровень());
				
			Если ЗначениеЗаполнено(НовыйДокумент) Тогда
				СтрокаДерева.Документ = НовыйДокумент;
			Конецесли;			
		КонецЕсли;
		
		СоздатьДокументыПоСтрокамДерева(СтрокаДерева.Строки, ПараметрыДокумента, АдресХранилища);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПометитьНаУдалениеДокументы(ОтчетМаркетплейса)
	
	Если НЕ ЗначениеЗаполнено(ОтчетМаркетплейса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетМаркетплейса", ОтчетМаркетплейса);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ОтчетМаркетплейса = &ОтчетМаркетплейса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияОтгруженныхТоваров.Ссылка
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|ГДЕ
	|	РеализацияОтгруженныхТоваров.ОтчетМаркетплейса = &ОтчетМаркетплейса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.ОтчетМаркетплейса = &ОтчетМаркетплейса";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокОбъект = Результат.Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли
