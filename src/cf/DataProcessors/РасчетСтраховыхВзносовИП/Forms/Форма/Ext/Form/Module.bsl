&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Периодичность = Параметры.Периодичность;
	Иначе
		Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
			Объект.Организация,
			ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ПериодСобытия = Параметры.ПериодСобытия;
	ТекущийПериод = ?(ЗначениеЗаполнено(ПериодСобытия),
		ПериодСобытия,
		КонецПериода(ОбщегоНазначения.ТекущаяДатаПользователя(), Периодичность));
	
	// Помощник открыт по публикуемой навигационной ссылке. Период передан в параметре "КонецПериода".
	Если ЗначениеЗаполнено(Параметры.КонецПериода) И Параметры.КонтекстныйВызов Тогда
		ТекущийПериод = КонецПериода(Параметры.КонецПериода, Периодичность);
	КонецЕсли;
	
	Объект.Период = ТекущийПериод;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Объект.Организация = Параметры.Организация;
	
	ПерешлиНаЕдиныйТариф = ТекущийПериод >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
			Объект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка реквизитов для отчетности
	ТекстДействия = НСтр("ru='уплатить фиксированные страховые взносы'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ВыполнениеЗадачиКалендаря = ЗначениеЗаполнено(Параметры.Правило);
	Если ВыполнениеЗадачиКалендаря Тогда
		Правило = Параметры.Правило;
		Срок    = Параметры.Срок;
	Иначе
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация,
			КонецПериода(Объект.Период, Периодичность),
			?(ПерешлиНаЕдиныйТариф,
				Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф,
				Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть));
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	Если НачалоМесяца(Срок) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Срок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПериодСобытия) Тогда
		ПериодСобытия = НачалоДня(КонецПериода(Объект.Период, Периодичность));
	КонецЕсли;
	ПростойУчетЕНС = Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	Если Не ПустаяСтрока(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	ОрганизацияПредставление = Объект.Организация;
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	НастроенПрямойОбменСБанком = НастроенПрямойОбменСБанком(Объект.Организация, СчетОрганизации);
	
	ПредупрежденияЗагрузкиВыписки = НайтиПредупрежденияПриЗагрузкеВыписки(
		Объект.Организация,
		НачалоГода(Объект.Период),
		КонецПериода(Объект.Период, Периодичность));
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияЗагрузкиВыписки);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОпределитьСвязанныеПравила();
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = Ложь;
	
	ПодаетсяЗаявлениеОЗачете = Объект.Период <> НачалоДня(КонецГода(Объект.Период));
	
	УстановитьИтоговыеПоляУведомлений();
	РассчитатьСуммыИспользуемогоОстаткаНаЕНС();
	ЗаполнитьПомощник();
	ПересчитатьРеквизитыЕНС();
	
	ТекущийЭлемент = Элементы.ОплатитьСБанковскогоСчета;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Обработка.РасчетСтраховыхВзносовИП",
		"Форма",
		НСтр("ru='Новости: Уплата фиксированных страховых взносов'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеУчетаАктуальны = Ложь;
	ПередНачаломДлительнойОперации();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ДанныеУчетаАктуальны = Ложь;
		
		ОбработкаОповещенияИзменениеВыписки();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Налог = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог)
			И ЭтоФиксированныеВзносы(Налог) Тогда
			
			ДанныеУчетаАктуальны = Ложь;
			
			ОбработкаОповещенияУплатаНалогов();
			
			ЗапуститьОбновлениеБаннераСостоянияОтправки();
			
			ПередНачаломДлительнойОперации();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов"
		Или ИмяСобытия = "Запись_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности"
		Или ИмяСобытия = "Запись_ОперацияПоЕдиномуНалоговомуСчету" Тогда
		
		ЗаполнитьУведомления();
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "ИзмененоПредупреждениеПриЗагрузкеВыписки" И ИнтерфейсИнтеграцииСБанками Тогда
		
		ПредупрежденияЗагрузкиВыписки = НайтиПредупрежденияПриЗагрузкеВыписки(
			Объект.Организация,
			НачалоГода(Объект.Период),
			КонецПериода(Объект.Период, Периодичность));
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияЗагрузкиВыписки);
		
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПродленияСроковНалоговОтчетов" И Параметр.Организация = Объект.Организация Тогда
		
		ЗаполнитьПомощник();
		УправлениеФормой();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиУчетаСтраховыхВзносовИП" Тогда 
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Период") И Параметр.Период <= Объект.Период Тогда 
			
			ПроверитьРеквизитыИЗаполнитьДанныеФормы();
			ПередНачаломДлительнойОперации();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
			ДанныеУчетаАктуальны = Ложь;
			
			ОбработкаОповещенияУплатаНалогов();
			
			ЗапуститьОбновлениеБаннераСостоянияОтправки();
			
			ПередНачаломДлительнойОперации();
	
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		
		Объект.СуммаЕНП = Объект.СуммаВзносаПФР
			+ Объект.СуммаВзносаПФРсДоходов
			+ Объект.СуммаВзносаФФОМС
			+ Объект.СуммаВзносаЕдиныйТариф;

		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			Обработки.РасчетСтраховыхВзносовИП.ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности())
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ДанныеУчетаАктуальны = Ложь;
	
	ПериодПриИзмененииНаСервере();
	
	ПередНачаломДлительнойОперации();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Объект.Организация;
	
	ДанныеУчетаАктуальны = Ложь;
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПередНачаломДлительнойОперации();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИППриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП", 0.1, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИПНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/bp30/ip_vzn_dategreg");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ПФР");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ПФР фиксированный'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаПФРВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаПФРНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаПФРУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаПФРПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаПФР);
	ПараметрыФормы.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФР"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаЕдиныйТарифНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуСуммыВзносаПоЕдиномуТарифу(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРсДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуСуммыВзносаСДоходов(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФФОМСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ФФОМС");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ФФОМС'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФФОМСВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаФФОМСНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФФОМСУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаФФОМСПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФФОМС);
	ПараметрыФормы.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФФОМС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФССНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ФСС");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос на социальное страхование'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФССВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаФССНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФССУплачено);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФСС);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФСС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежПФРсДоходовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиПФРсДоходов, "ПлатежПФРсДоходов", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежПФРОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиПФР, "ПлатежПФР", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежФФОМСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиФФОМС, "ПлатежФФОМС", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежФССОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиФСС, "ПлатежФСС", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежЕНПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиЕНП, "ПлатежЕНП", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежЕдиныйТарифОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиЕдиныйТариф, "ПлатежЕдиныйТариф", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности(Объект.Организация, Объект.Период));
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиЗагрузкиВыпискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		ВызватьИсключение НСтр("ru = 'Функциональная опция ""Интеграция с банком"" отключена'");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоГода(Объект.Период));
	ПараметрыФормы.Вставить("КонецПериода",  КонецПериода(Объект.Период, Периодичность));
	ПараметрыФормы.Вставить("ПоказатьПредупреждения", Истина);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаДоходовИнтеграцияСБанком", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверьтеНастройкуНалоговОтчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = НРег("НалогиИОтчеты") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкиУчетаКлиент.ОткрытьНастройкиАнтикризис(Объект.Организация, ИнтерфейсИнтеграцииСБанками);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрименяетсяРайонныйКоэффициентОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = НРег("НалогиИОтчеты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыНалогиИОтчеты = Новый Структура;
		ПараметрыФормыНалогиИОтчеты.Вставить("Организация", Объект.Организация);
		ПараметрыФормыНалогиИОтчеты.Вставить("ТекущаяЗакладка", "СтраховыеВзносы_Предприниматель");
		ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормыНалогиИОтчеты, , Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРДобровольноНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасчетВзносаПФРДобровольно();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежПФРДобровольноОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиПФРДобровольно, "ПлатежПФРДобровольно", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

#Область СтраницаПомощникЕНС

&НаКлиенте
Процедура ВзносПоЕдинымуТарифуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуСуммыВзносаПоЕдиномуТарифу("СуммаВзносаЕдиныйТариф");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносСДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуСуммыВзносаСДоходов("СуммаВзносаПФРсДоходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОстатокЕНСПриИзменении(Элемент)
	
	Если ИспользоватьОстатокЕНС Тогда
		СуммаСписанияСЕНС = Мин(ОстатокЕНС, ВсегоВзносов);
	Иначе
		СуммаСписанияСЕНС = 0;
	КонецЕсли;
	
	МожноЗарезервироватьНаЕНС = СуммаКРезерву(СуммаСписанияСЕНС,
		ОстатокЕНС,
		ВсегоВзносов,
		ПлатежиЕНП,
		УведомленияОбИсчисленныхНалогах);
	
	СуммаСписанияСЕНСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСписанияСЕНСПриИзменении(Элемент)
	
	СуммаСписанияСЕНСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегоКОплатеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраховыеВзносыВЕНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиЕНП,
		"СтраховыеВзносыВЕНС",
		ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент,
		НавигационнаяСсылка,
		ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКУДИР_ИП_ОСНО();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаУСННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКУДИР_ИП_УСН();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальноВозможныйДоходНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПатентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносСДоходовПояснениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки <> "РасшифроватьДоходИП" Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДоходаИП > 0 Тогда
		ОткрытьКУДИР_ИП_ОСНО();
	ИначеЕсли ПотенциальноВозможныйДоход > 0 Тогда
		ОткрытьФормуПатентов();
	Иначе
		ОткрытьКУДИР_ИП_УСН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносПФРДобровольноНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасчетВзносаПФРДобровольно();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСтраховыхВзносов(Команда)
	
	ОткрытьНастройкиНалоговИОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоУведомления);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	ОтрытьДокументЕНС(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ФормированиеДокументаЕНС("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНажатие(Команда)
	ОтрытьДокументЕНС(Команда);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявление(Команда)
	ФормированиеДокументаЕНС("Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Форма.ФормаДокумента");
КонецПроцедуры

#Область КомандыСтраницыПомощникЕНС

&НаКлиенте
Процедура УдалитьЗаявлениеНажатие(Элемент)
	
	ИдентификаторЗаявления = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	
	Если ИдентификаторЗаявления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// На форму команды добавляются с идентификатором строки таблицы
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(ИдентификаторЗаявления);
	Если СтрокаУведомления <> Неопределено Тогда
		ПометитьНаУдалениеЗаявлениеНаСервере(СтрокаУведомления.Уведомление);
		ОбновитьСведенияОбУведомлениях();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Объект.Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносПоЕдиномуТарифуЗначениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНастройкиНалоговИОтчетов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ФормированиеДокументаЕНС(ИмяФормы)
	
	АдресХранилищаТаблицыНалоги = ОписаниеТаблицыНалоги();
	Если СтрНайти(ИмяФормы, "ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") > 0 Тогда
		СкорректироватьТаблицуСУчетомСозданныхЗаявленийОЗачете(
			АдресХранилищаТаблицыНалоги,
			УведомленияОбИсчисленныхНалогах,
			УникальныйИдентификатор,
			МожноЗарезервироватьНаЕНС);
		ПравилоСобытия = ПравилоУведомления;
	Иначе
		ПравилоСобытия = Правило;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоСобытия);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", АдресХранилищаТаблицыНалоги);
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму(ИмяФормы,
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтрытьДокументЕНС(Команда)
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УпрощенныйЗачетФиксированныхВзносов = УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(
		Объект.Организация,
		Объект.Период);
	
	ЗадачаСформированаПоСтарымПравилам = УпрощенныйЗачетФиксированныхВзносов
		И ТекущийПериод >= УчетСтраховыхВзносовИП.ДатаПереходаНаУпрощенныйЗачетВзносов()
		И ЗначениеЗаполнено(Правило)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность") = Перечисления.Периодичность.Квартал;
	
	Если Не КонтекстныйВызов Или ЗадачаСформированаПоСтарымПравилам Тогда
		// Необходимость определения правила может возникнуть, когда:
		// - помощник открывается не из задачи и не из расшифровки суммы взноса, подлежащего уплате (ссылка есть в помощниках УСН и оплаты патента)
		// - в списке задач остались задачи, которые были сформированы по старым правилам - в этом случае правило нужно переопределить
		// Периодичность определяем на текущий период и формируем список выбора периодов расчета взносов, исходя из текущего периода
		Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
			Объект.Организация,
			ТекущийПериод);
	КонецЕсли;
	
	Если ПерешлиНаЕдиныйТариф Тогда
		// Взносы оплачиваются в отдельной задаче
		УплачиватьДобровольныеВзносыВФСС = Ложь;
	Иначе
		УплачиватьДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Объект.Организация, Объект.Период);
	КонецЕсли;
	
	УплачивалсяТолькоНПД = УчетнаяПолитика.УплачивалсяТолькоНПДЗаПериод(
		Объект.Организация, НачалоГода(Объект.Период), КонецГода(Объект.Период));
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаРегистрации");
	КонецЕсли;
	
	УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП = УчетСтраховыхВзносовИП.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Объект.Период);
	
	ТребуетсяАктуализироватьРасчетВзносов
		= УчетСтраховыхВзносовИП.ПериодичностьНачисления(Объект.Организация, Объект.Период) = Перечисления.Периодичность.Квартал
		И УчетСтраховыхВзносовИП.УчитыватьРасходыПриРасчетеВзносовСДоходов(Объект.Организация, Объект.Период);
	
	ТекущийПериодПользователя = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецПериодаПомощника = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Объект.Период);
	
	РасчетЗаТекущийПериод = (КонецПериодаПомощника >= ТекущийПериодПользователя);
	
	Подключена1СОтчетность = РегламентированнаяОтчетностьБП.Подключена1СОтчетность(Объект.Организация);
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПослеЗаполнения()
	
	ДоступенВыборОрганизации = НЕ ЗначениеЗаполнено(Объект.Организация)
		Или (Справочники.Организации.ИспользуетсяНесколькоОрганизаций() И Не КонтекстныйВызов);
	
	Элементы.ГруппаДеятельностьОтнесенаКПострадавшимОтКоронавируса.Видимость = 
		НачалоГода(Объект.Период) = УчетСтраховыхВзносовИП.ПериодУменьшенияВзносов_ДеятельностьОтнесенаКПострадавшимОтКоронавируса();
	
	Элементы.ДекорацияПроверьтеНастройкуНалоговОтчетов.Заголовок =
		ТекстБаннераПроверьтеНастройкуНалоговОтчетов(ИнтерфейсИнтеграцииСБанками);
	
	Элементы.ГруппаПрименяетсяРайонныйКоэффициент.Видимость = ВидимостьБаннераПрименяетсяРайонныйКоэффициент();
	
	Элементы.Организация.Видимость              = ДоступенВыборОрганизации;
	Элементы.ОрганизацияПредставление.Видимость = Не ДоступенВыборОрганизации;
	Элементы.Период.Видимость                   = (НЕ ВыполнениеЗадачиКалендаря Или НЕ ЗначениеЗаполнено(Объект.Период)) И НЕ КонтекстныйВызов;
	
	// Список выбора периода
	Элементы.Период.СписокВыбора.Очистить();
	
	ПрошлыйГод = КонецГода(ДобавитьМесяц(ТекущийПериод, -12));
	Если ПрошлыйГод >= УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП()
		И (Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(ПрошлыйГод - 86400)) Тогда
		// Добавляем прошлый год, если не знаем дату регистрации ИП или он зарегистрировался до 31 декабря
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ПрошлыйГод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ПрошлыйГод), КонецГода(ПрошлыйГод), Истина));
	КонецЕсли;
	
	// Приводим текущий период к установленной периодичности
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		ТекущийПериод = КонецГода(ТекущийПериод);
		Объект.Период = КонецГода(Объект.Период);
		
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ТекущийПериод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ТекущийПериод), КонецГода(ТекущийПериод), Истина));
	Иначе
		
		ТекущийПериод = КонецКвартала(ТекущийПериод);
		Объект.Период = КонецКвартала(Объект.Период);
		
		Для НомерКвартала = 1 По 4 Цикл
			Квартал = КонецКвартала(ДобавитьМесяц(НачалоГода(ТекущийПериод), 3*(НомерКвартала - 1)));
			Если Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(Квартал - 86400) Тогда
				// Добавляем квартал, если ИП зарегистрировался ранее последнего дня квартала
				Элементы.Период.СписокВыбора.Добавить(НачалоДня(Квартал), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				НачалоГода(Квартал), КонецКвартала(Квартал), Истина));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Показываем настройку в год регистрации предпринимателя до отмены 212-ФЗ.
	Элементы.ГруппаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Видимость = 
		Год(Объект.Период) = Год(ДатаРегистрации)
		И УчетСтраховыхВзносовИП.ПроверятьНастройкуУчетаДняРегистрации(Объект.Период);
	
	ВыполняетсяАктуализацияРасчета = ТребуетсяАктуализироватьРасчетВзносов И Не ДанныеУчетаАктуальны;
	
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяАктуализацияРасчета;
	Элементы.ГруппаСтраховыеВзносы.Видимость = Не ВыполняетсяАктуализацияРасчета;
	Элементы.ФонТребуютсяРеквизиты.Видимость = Не ВыполняетсяАктуализацияРасчета;
	Элементы.ГруппаОплата.Видимость = ПоказыватьКомандыОплаты И Не ВыполняетсяАктуализацияРасчета;
	Элементы.НастройкиСтраховыхВзносов.Видимость = Не ИнтерфейсИнтеграцииСБанками И Не ВыполняетсяАктуализацияРасчета;
	Элементы.ГруппаУведомлениеОНалогах.Видимость = Ложь;
	Элементы.ГруппаЗаявлениеОЗачете.Видимость = Ложь;
	
	ОбновитьСтатусФоновогоЗадания(ЭтотОбъект);
	
	НайтиПлатежиСвязанныеСЗадачей();
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУведомления.Периодичность, ПериодСобытия);
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, КонецПериода);
	КонецЕсли;
	
	ЗаполнитьУведомления();
	ПлательщикФиксированныхВзносов = УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(
		Объект.Организация,
		НачалоГода(Объект.Период),
		Объект.Период);
	
	Элементы.ГруппаСтраховыеВзносыПФР.Видимость = ПлательщикФиксированныхВзносов И Не ПерешлиНаЕдиныйТариф;
	Элементы.ГруппаСтраховыеВзносыПФРсДоходов.Видимость = ПлательщикФиксированныхВзносов;
	Элементы.ГруппаСтраховыеВзносыФФОМС.Видимость = ПлательщикФиксированныхВзносов И Не ПерешлиНаЕдиныйТариф;
	Элементы.ГруппаСтраховыеВзносыЕдиныйТариф.Видимость = ПлательщикФиксированныхВзносов И ПерешлиНаЕдиныйТариф;
	Элементы.СуммаВзносаПФРсДоходов.Заголовок = ?(ПерешлиНаЕдиныйТариф, НСтр("ru='С доходов'"), НСтр("ru='ПФР с доходов'"));
	
	Если ЗначениеЗаполнено(Объект.СуммаВзносаПФРДобровольно) Тогда
		// ИП на НПД платит добровольный взнос, фиксированные взносы по единому тарифу не платятся
		Элементы.ВзносПФРДобровольно.Видимость = Истина;
		Элементы.ВзносПоЕдиномуТарифу.Видимость = Ложь;
	Иначе
		Элементы.ВзносПФРДобровольно.Видимость = Ложь;
		Элементы.ВзносПоЕдиномуТарифу.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПлатежиСвязанныеСЗадачей()
	
	ОчиститьТаблицыПлатежей();
	
	ЗаполнитьТаблицыПлатежей();
	
	ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыПлатежей()
	
	ВидыПлатежей = ВидыПлатежей(ПлательщикЕНП);
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		ЭтотОбъект[ВидПлатежа.Ключ].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПлатежей()
	
	// Если периодичность платежей смешанная, т.е. в рамках года есть платежи оплачиваемые поквартально и есть
	// платежи оплачиваемые сразу за год, то отображаем все платежи за год
	ВсеПлатежи = Обработки.РасчетСтраховыхВзносовИП.ПлатежныеДокументы(
		Объект.Организация,
		Объект.Период,
		Периодичность,
		Правило);
	
	Если ВсеПлатежи <> Неопределено Тогда
		ПлатежиПоВидамВзносов = Обработки.РасчетСтраховыхВзносовИП.РазделитьПлатежиПоВидамВзносов(ВсеПлатежи);
		
		ПлатежиПФР.Загрузить(ПлатежиПоВидамВзносов.ПлатежиПФР);
		ПлатежиПФРДобровольно.Загрузить(ПлатежиПоВидамВзносов.ПлатежиПФРДобровольно);
		ПлатежиПФРсДоходов.Загрузить(ПлатежиПоВидамВзносов.ПлатежиПФРсДоходов);
		ПлатежиФФОМС.Загрузить(ПлатежиПоВидамВзносов.ПлатежиФФОМС);
		ПлатежиФСС.Загрузить(ПлатежиПоВидамВзносов.ПлатежиФСС);
		ПлатежиЕНП.Загрузить(ПлатежиПоВидамВзносов.ПлатежиЕНП);
		ПлатежиЕдиныйТариф.Загрузить(ПлатежиПоВидамВзносов.ПлатежиЕдиныйТариф);
	КонецЕсли;
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		// При упрощенном порядке каждый взнос платится отдельно по сроку списания
		// Взнос в ФСС оплачивается непосредственно в платежке
		РассчитатьСуммуВзносаКОплате();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму()
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ДокументыОплаты(ЭтотОбъект));
	
	Если ПлательщикЕНП Тогда
		ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
			ПлатежиЕНП,
			СостоянияИнтеграцииДокументов);
		ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, "СтраховыеВзносыВЕНС");
	Иначе
		ВидыПлатежей = ВидыПлатежей(ПлательщикЕНП);
		Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
			ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
				ЭтотОбъект[ВидПлатежа.Ключ], СостоянияИнтеграцииДокументов);
			ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, ВидПлатежа.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияСБанкамиФормы.ПолучитьДанныеИПоказатьБаннерСостоянияОтправки(ЭтотОбъект, СостоянияИнтеграцииДокументов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшДанныхБаннера(Знач ДокументыОплаты)
	
	Возврат ИнтеграцияСБанкамиФормы.ХэшДанныхБаннера(ДокументыОплаты);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеБаннераСостоянияОтправки()
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	Иначе
		ПередНачаломДлительнойОперации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки() Экспорт
	
	Если ХэшДанныхБаннера(ДокументыОплаты(ЭтотОбъект)) <> ХешДанныхБаннера Тогда
		НайтиПлатежиСвязанныеСЗадачей();
		УправлениеФормой();
	КонецЕсли;
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОплаты(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	ВидыПлатежей = ВидыПлатежей(Форма.ПлательщикЕНП);
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		Для Каждого Платеж Из Форма[ВидПлатежа.Ключ] Цикл
			ДокументыОплаты.Добавить(Платеж.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПлатежей(ПлательщикЕНП)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ПлатежиПФР", "ПлатежПФР");
	Соответствие.Вставить("ПлатежиПФРДобровольно", "ПлатежПФРДобровольно");
	Соответствие.Вставить("ПлатежиПФРсДоходов", "ПлатежПФРсДоходов");
	Соответствие.Вставить("ПлатежиФФОМС", "ПлатежФФОМС");
	
	Если Не ПлательщикЕНП Тогда
		Соответствие.Вставить("ПлатежиФСС", "ПлатежФСС");
	КонецЕсли;
	
	Соответствие.Вставить("ПлатежиЕНП", "ПлатежЕНП");
	Соответствие.Вставить("ПлатежиЕдиныйТариф", "ПлатежЕдиныйТариф");

	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ГруппаПредупреждениеОбОшибкахЗагрузки.Видимость = ИнтерфейсИнтеграцииСБанками
		И ЗначениеЗаполнено(Объект.Организация)
		И ЕстьОшибкиЗагрузкиВыписки;
	
	Если ПлательщикЕНП Тогда
		УправлениеСтраницейЕНС();
	Иначе
		УправлениеСтраницейДоЕНС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьЭлементаВсегоВзносов()
	
	// Проверим, какое количество элементов к уплате показано на форме
	// Если пользователю показывается всего один элемент, тогда нет смысла показывать итог
	КоличествоВидимыхЭлементов = 0;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаСтраховыеВзносыПлатежи.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Видимость И ПодчиненныйЭлемент.Имя <> "ВсегоВзносов" Тогда
			КоличествоВидимыхЭлементов = КоличествоВидимыхЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоВидимыхЭлементов > 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаСервере
Функция ВзносыОплачены()
	
	ВзносПФРОплачен = СуммаКУплате(Объект.СуммаВзносаПФР, ПлатежиПФР) = 0;
	ВзносПФРДобровольноОплачен = СуммаКУплате(Объект.СуммаВзносаПФРДобровольно, ПлатежиПФРДобровольно) = 0;
	ВзносПФРсДоходовОплачен = СуммаКУплате(Объект.СуммаВзносаПФРсДоходов, ПлатежиПФРсДоходов) = 0;
	ВзносФФОМСОплачен = СуммаКУплате(Объект.СуммаВзносаФФОМС, ПлатежиФФОМС) = 0; 
	ВзносЕдиныйТарифОплачен = СуммаКУплате(Объект.СуммаВзносаЕдиныйТариф, ПлатежиЕдиныйТариф) = 0;
	ВзносФССОплачен = СуммаКУплате(Объект.СуммаВзносаФСС, ПлатежиФСС) = 0;
	ЕНПОплачен = СуммаКУплате(Объект.СуммаЕНП, ПлатежиЕНП, ПлательщикЕНП) = 0;
	
	Возврат (ВзносПФРОплачен И ВзносПФРДобровольноОплачен И ВзносПФРсДоходовОплачен И ВзносФФОМСОплачен И ВзносФССОплачен И ВзносЕдиныйТарифОплачен)
		Или (ПлательщикЕНП И ЕНПОплачен И ВзносФССОплачен);
	
КонецФункции

&НаСервере
Функция ЕстьДокументыОплатыПоБанку()
	
	Возврат ЕстьДокументОплаты(Тип("ДокументСсылка.ПлатежноеПоручение"))
		Или ЕстьДокументОплаты(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	
КонецФункции

&НаСервере
Функция ЕстьДокументыОплатыПоКассе()
	
	Возврат ЕстьДокументОплаты(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
КонецФункции

&НаСервере
Функция ЕстьДокументОплаты(ТипДокумента)
	
	ВидыПлатежей = ВидыПлатежей(ПлательщикЕНП);
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		
		Для Каждого СтрокаОплаты Из ЭтотОбъект[ВидПлатежа.Ключ] Цикл
			Если ТипЗнч(СтрокаОплаты.Ссылка) = ТипДокумента Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастроенПрямойОбменСБанком(Организация, СчетОрганизации)
	
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "Банк");
		Если ЗначениеЗаполнено(Банк) Тогда
			НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, Банк);
			Возврат ЗначениеЗаполнено(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация,
			КонецПериода(Объект.Период, Периодичность),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
		Правило       = ПорядокУплаты.Правило;
		Срок          = ПорядокУплаты.Срок;
		ПериодСобытия = НачалоДня(КонецПериода(Объект.Период, Периодичность));
	КонецЕсли;
	
	Если НачалоМесяца(Срок) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Срок);
	КонецЕсли;
	
	ПерешлиНаЕдиныйТариф = Объект.Период >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	
	ОпределитьСвязанныеПравила();
	ПодаетсяУведомлениеПоНалогуЗаПериод = Ложь;
		
	ПодаетсяЗаявлениеОЗачете = Объект.Период <> НачалоДня(КонецГода(Объект.Период));
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ЗаполнитьПомощник();
	ПересчитатьРеквизитыЕНС();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация,
			КонецПериода(Объект.Период, Периодичность),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодСобытия) Тогда
		ПериодСобытия = НачалоДня(КонецПериода(Объект.Период, Периодичность));
	КонецЕсли;

	ОпределитьСвязанныеПравила();
	
	Если НачалоМесяца(Срок) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Срок);
	КонецЕсли;
	ПодаетсяУведомлениеПоНалогуЗаПериод = Ложь;
	
	ПодаетсяЗаявлениеОЗачете = Объект.Период <> НачалоДня(КонецГода(Объект.Период));
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ЗаполнитьПомощник();
	ПересчитатьРеквизитыЕНС();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Установить(УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП);
	
	РассчитатьСтраховыеВзносыКУплате();
	УправлениеФормой();
	
КонецПроцедуры

// Помещает часть таблицы СтраховыеВзносыУплаченные с отбором по ключу во временное хранилище
//
&НаСервере
Функция АдресТаблицыПлатежей(Ключ)
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	
	ТаблицаПлатежей = СтраховыеВзносыУплаченные.Выгрузить(СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора));
	ТаблицаПлатежей.Сортировать("Дата, Ссылка", Новый СравнениеЗначений);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПлатежей, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоФиксированныеВзносы(Знач Налог)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ЭтоФиксированныеВзносы(Налог);
	
КонецФункции

// Серверная обработка оповещения ИзменениеВыписки
//
&НаСервере
Процедура ОбработкаОповещенияИзменениеВыписки()
	
	РассчитатьСуммыИспользуемогоОстаткаНаЕНС();
	ЗаполнитьПомощник();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстБаннераПроверьтеНастройкуНалоговОтчетов(ИнтерфейсИнтеграцииСБанками)
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ТекстБаннера = НСтр("ru = 'Страховой взнос в ПФР в фиксированном размере за 2020 год снижен до 20 318 руб.
		|для индивидуальных предпринимателей, занятых в сферах деятельности, наиболее пострадавших от коронавирусной инфекции.
		|Проверьте <a href=''НалогиИОтчеты''>Настройки</a>'");
	Иначе
		ТекстБаннера = НСтр("ru = 'Страховой взнос в ПФР в фиксированном размере за 2020 год снижен до 20 318 руб.
		|для индивидуальных предпринимателей, занятых в сферах деятельности, наиболее пострадавших от коронавирусной инфекции.
		|Проверьте <a href=''НалогиИОтчеты''>Настройки налогов и отчетов</a>'");
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(СтрЗаменить(ТекстБаннера, Символы.ПС, " "));
	
КонецФункции

#Область РасчетСуммыВзносов

&НаСервере
Процедура ЗаполнитьПомощник()
	
	РассчитатьСтраховыеВзносыКУплате();
	НастроитьФормуПослеЗаполнения();
	
	Если ПлательщикЕНП И Не УпрощенныйЗачетФиксированныхВзносов Тогда
		СуммаСписанияСЕНСПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтраховыеВзносыКУплате()
	
	Если ТребуетсяАктуализироватьРасчетВзносов И Не ДанныеУчетаАктуальны Тогда
		// Рано заполнять суммы взносов, нужно дождаться актуализации операций начисления взносов.
		Возврат;
	КонецЕсли;
	
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Объект.Организация, Объект.Период, Периодичность, Правило);
	ЗаполнитьЗначенияСвойств(Объект, СтраховыеВзносыКУплате, СвойстваВзносыКУплате());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтраховыеВзносыКУплате, СвойстваВзносыНачисленоУплачено());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтраховыеВзносыКУплате.СтруктураДоходов);
	
	ЗачтеноРанееПоЕдиномуТарифу = СтраховыеВзносыКУплате.ЗачтеноРанееПоЕдиномуТарифу;
	ЗачтеноРанееПоВзносамСДоходов = СтраховыеВзносыКУплате.ЗачтеноРанееПоВзносамСДоходов;
	
	СтраховыеВзносыУплаченные.Очистить();
	
	СчетаУчетаСтраховыхВзносов = УчетСтраховыхВзносовИП.СчетаУчетаСтраховыхВзносов();
	Если СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР Тогда
				НоваяСтрока.Ключ = "ПФР";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФФОМС Тогда
				НоваяСтрока.Ключ = "ФФОМС";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФСС Тогда
				НоваяСтрока.Ключ = "ФСС";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФРДобровольно Тогда
				НоваяСтрока.Ключ = "ПФРДобровольно";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ЕдиныйТариф Тогда
				НоваяСтрока.Ключ = "ЕдиныйТариф";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Ключ = "ПФРсДоходов";
		КонецЦикла;
	КонецЕсли;
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		// При упрощенном порядке каждый взнос платится отдельно по сроку списания
		// Взнос в ФСС оплачивается непосредственно в платежке
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
			ВсегоВзносов = СуммаВзносаПФРсДоходовВсего;
		Иначе
			ВсегоВзносов = СуммаВзносаЕдиныйТарифВсего;
		КонецЕсли;
		ВсегоСтраховыхВзносов = ВсегоВзносов;
		РассчитатьСуммуВзносаКОплате();
	Иначе
		
		ВсегоВзносов = Объект.СуммаВзносаПФР
			+ Объект.СуммаВзносаПФРДобровольно
			+ Объект.СуммаВзносаПФРсДоходов
			+ Объект.СуммаВзносаФФОМС
			+ Объект.СуммаВзносаЕдиныйТариф;
		
		ВсегоСтраховыхВзносов = ВсегоВзносов;
		
		Если Не ПлательщикЕНП Тогда
			ВсегоСтраховыхВзносов = ВсегоСтраховыхВзносов + Объект.СуммаВзносаФСС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтраховыеВзносыКУплате(Знач Организация, Знач Период, Знач Периодичность, Знач Правило)
	
	Период = КонецПериода(Период, Периодичность);
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СтраховыеВзносыКУплате(Организация, Период, Периодичность, Правило);
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваВзносыКУплате()
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СвойстваВзносыКУплате();
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваВзносыНачисленоУплачено()
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СвойстваВзносыНачисленоУплачено();
	
КонецФункции

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		ПередНачаломДлительнойОперации();
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ДокументУплатыДляУдаления, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	ДанныеУчетаАктуальны = (ТипЗнч(ДокументУплатыДляУдаления) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		И ТипЗнч(ДокументУплатыДляУдаления) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	
	ЗаполнитьПомощник();
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументУплатыДляУдаления);
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманд

// Создает Платежные поручения или Выплаты наличными в зависимости от выбранного способа оплаты
// 
// Параметры:
//   СпособОплаты - ПеречислениеСсылка.СпособыОплаты
// 
// Возвращаемое значение:
//   Массив - созданные документы
//
&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммыКУплате = Новый Структура(СвойстваВзносыКУплате());
	СуммыКУплате.СуммаВзносаПФР = СуммаКУплате(Объект.СуммаВзносаПФР, ПлатежиПФР);
	СуммыКУплате.СуммаВзносаПФРДобровольно = СуммаКУплате(Объект.СуммаВзносаПФРДобровольно, ПлатежиПФРДобровольно);
	СуммыКУплате.СуммаВзносаПФРсДоходов = СуммаКУплате(Объект.СуммаВзносаПФРсДоходов, ПлатежиПФРсДоходов);
	СуммыКУплате.СуммаВзносаФФОМС = СуммаКУплате(Объект.СуммаВзносаФФОМС, ПлатежиФФОМС);
	СуммыКУплате.СуммаВзносаФСС = СуммаКУплате(Объект.СуммаВзносаФСС, ПлатежиФСС);
	СуммыКУплате.СуммаВзносаЕдиныйТариф = СуммаКУплате(Объект.СуммаВзносаЕдиныйТариф, ПлатежиЕдиныйТариф);
	СуммыКУплате.СуммаЕНП = Объект.СуммаЕНП;
	
	ТаблицаПлатежей = Обработки.РасчетСтраховыхВзносовИП.ТаблицаПлатежейДляФормированияПлатежныхПоручений(
		Объект.Организация, Объект.Период, СуммыКУплате, ПлательщикЕНП);
	
	СтруктураПараметров = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НовыеПараметрыФормированияПлатежныхДокументов();
	СтруктураПараметров.Правило         = Правило;
	СтруктураПараметров.ПериодСобытия   = Объект.Период;
	СтруктураПараметров.Организация     = Объект.Организация;
	СтруктураПараметров.НалоговыйПериод = НачалоГода(Объект.Период);
	СтруктураПараметров.Платежи         = ПоместитьВоВременноеХранилище(ТаблицаПлатежей);
	СтруктураПараметров.СпособОплаты    =  СпособОплаты;
	СтруктураПараметров.СчетОрганизации = СчетОрганизации;
	
	ЗначенияЗаполнения =
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ДанныеЗаполненияПлатежныхДокументов(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения) И ЗначенияЗаполнения.Количество() = 1 Тогда
		Возврат ЗначенияЗаполнения[0];
	Иначе
		СозданныеДокументы = 
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументыПоДаннымЗаполнения(
				СтруктураПараметров, ЗначенияЗаполнения);
	
		ЗаполнитьПомощник();
		УправлениеФормой();
	
		Возврат СозданныеДокументы;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПередУплатойНалога()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПлательщикЕНП И Не УпрощенныйЗачетФиксированныхВзносов И Не ПодаетсяЗаявлениеОЗачете Тогда
		ПредупредитьОбОтсутствииУведомления();
	Иначе
		СоздатьДокументУплатыНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	Если ТребуетсяАктуализироватьРасчетВзносов И РасчетЗаТекущийПериод Тогда
		// Требуется актуализировать данные, чтобы оплата текущего периода повлияла на расчет взносов с доходов.
		ДанныеУчетаАктуальны = Ложь;
	КонецЕсли;
	
	РезультатОплаты = СоздатьПлатежныеДокументыНаСервере(СпособУплатыНалога);
	Если РезультатОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОплаты) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", РезультатОплаты);
		ПараметрыФормы.Вставить("ПериодСобытия", Объект.Период);
		ПараметрыФормы.Вставить("Правило",       Правило);
		
		Если СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод") Тогда
			ИмяФормыУплатыНалога = "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая";
		Иначе
			ИмяФормыУплатыНалога = "Документ.РасходныйКассовыйОрдер.ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыУплатыНалога, ПараметрыФормы, , УникальныйИдентификатор);
		
	ИначеЕсли РезультатОплаты.Количество() > 0 Тогда
		ОповеститьОСозданныхДокументах(РезультатОплаты);
		Если СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод") Тогда
			ЗапуститьОбновлениеБаннераСостоянияОтправки();
		КонецЕсли;
	КонецЕсли;
	
	Если СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции") Тогда
		ПередНачаломДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданныхДокументах(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
	Если ТипСозданныхДокументов = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Оповестить("ПомощникРасчетСтраховыхВзносовИП_ВзносыУплачены", Новый Структура("Организация", Объект.Организация));
	КонецЕсли;
	
	Оповестить("ИзменилосьСостояниеДокументаИнтеграцииСБанком", Неопределено, СозданныеДокументы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаКУплате(Сумма, КоллекцияПлатежей, ПлательщикЕНП = Ложь)
	
	// Рассчитанная сумма взноса уменьшается только на сумму созданных, но не оплаченных платежей.
	// Оплаченные платежи уже отражены в учете и учтены при расчете взноса к уплате в составе ранее уплаченных сумм.
	
	СуммаПодготовленныхПлатежей = 0;
	
	Для Каждого Платеж Из КоллекцияПлатежей Цикл
		Если Не ПлательщикЕНП И Платеж.Оплачено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПодготовленныхПлатежей = СуммаПодготовленныхПлатежей + Платеж.Сумма;
	КонецЦикла;
	
	Возврат Макс(0, Сумма - СуммаПодготовленныхПлатежей);
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены =
		Обработки.РасчетСтраховыхВзносовИП.РеквизитыДляОтчетностиЗаполнены(
			Объект.Организация,
			НезаполненныеРеквизиты,
			Объект.Период);
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Объект.Организация) И НЕ РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности(Организация, Период)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ПроверяемыеРеквизитыДляОтчетности(Организация, Период);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомления()

	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстВопроса = НСтр("ru='Не подготовлено уведомление об исчисленной сумме налога.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Не сформирована операция по единому налоговому счету.
		|Продолжить?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупредитьОбОтсутствииУведомленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
	ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, ЭтотОбъект);
	ПараметрыНабораПравил.Организация = Объект.Организация;
	ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыНабораПравил);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыНалоги(ВидНалога = Неопределено, СтраховыеВзносыКУплате = Неопределено)
	
	Если СтраховыеВзносыКУплате = Неопределено Тогда
		СтраховыеВзносыКУплате = Обработки.РасчетСтраховыхВзносовИП.НовыеСтраховыеВзносыКУплате();
		СтраховыеВзносыКУплате.СуммаВзносаПФР = Объект.СуммаВзносаПФР;
		СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов = Объект.СуммаВзносаПФРсДоходов;
		СтраховыеВзносыКУплате.СуммаВзносаФФОМС = Объект.СуммаВзносаФФОМС;
		СтраховыеВзносыКУплате.СуммаВзносаЕдиныйТариф = Объект.СуммаВзносаЕдиныйТариф;
	КонецЕсли;
	
	Возврат АсинхронноеПолучениеДанныхБППлатежиВБюджет.ОписаниеТаблицыНалоги(Объект.Организация,
		Правило,
		ПериодСобытия,
		Срок,
		СтраховыеВзносыКУплате,
		ВидНалога);
	
КонецФункции

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект,
		ВсегоСтраховыхВзносов > 0, , 2, ПодаетсяЗаявлениеОЗачете);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПараметрыФормыУведомления.Свойство("Ключ") Тогда
		Если ТипЗнч(ПараметрыФормыУведомления.Ключ) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
			ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
		ИначеЕсли ТипЗнч(ПараметрыФормыУведомления.Ключ) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
			ИмяОбъекта = "ЗаявлениеОЗачетеВСчетПредстоящейОбязанности";
		Иначе
			ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
		КонецЕсли;
	Иначе
		Если ПодаетсяЗаявлениеОЗачете Тогда
			ИмяОбъекта = "ЗаявлениеОЗачетеВСчетПредстоящейОбязанности";
		ИначеЕсли ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
			ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
		Иначе
			ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУведомления()
	
	// Фактический период подачи заявления/операция на ЕНС:
	// - если ИП на УСН доходы-расходы или ОСНО - конец квартала для взносов по единому тарифу
	// - иначе- фактический срок отражения взносов
	Если УпрощенныйЗачетФиксированныхВзносов Или УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
		ПериодОтраженияУведомления = ФактическийПериодОтраженияВзносов(Правило, Срок, ПериодСобытия);
	Иначе
		ПериодОтраженияУведомления = ПериодСобытия;
	КонецЕсли;
	
	ТаблицаУведомления = Обработки.РасчетСтраховыхВзносовИП.СозданныеДокументыОтраженияНаЕНС(
		Объект.Организация,
		ПериодОтраженияУведомления,
		Правило);
	
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УстановитьИтоговыеПоляУведомлений();
	РассчитатьСуммыИспользуемогоОстаткаНаЕНС();
	Элементы.СуммаСписанияСЕНС.МаксимальноеЗначение = ОстатокЕНС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбУведомлениях()
	
	ЗаполнитьУведомления();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ВидимостьБаннераПрименяетсяРайонныйКоэффициент()
	
	Результат = УплачиватьДобровольныеВзносыВФСС
		И УчетСтраховыхВзносовИПКлиентСервер.ПрименяетсяРайонныйКоэффициентСтраховыхВзносовФСС(Объект.Период)
		И ИнформацияОРайонномКоэффициентеАктуальна(Объект.Период);
	
	Если Результат Тогда 
		РайонныйКоэффициентИП = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.РайонныйКоэффициентСтраховыхВзносовФСС(Объект.Организация, Объект.Период);
		РайонныйКоэффициентПоУмолчанию = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.РайонныйКоэффициентПоУмолчанию();
		Если РайонныйКоэффициентИП > РайонныйКоэффициентПоУмолчанию Тогда 
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОРайонномКоэффициентеАктуальна(Период)
	
	Возврат Период < Дата(2023, 1, 1);
	
КонецФункции

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		Если Объект.СуммаВзносаПФР <> 0
			Или Объект.СуммаВзносаПФРсДоходов <> 0 Тогда
			СформироватьОперациюПоЕНС(ВыполненоВТихомРежиме, Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		КонецЕсли;
		
		Если Объект.СуммаВзносаФФОМС <> 0 Тогда
			СформироватьОперациюПоЕНС(ВыполненоВТихомРежиме, Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
		КонецЕсли;

		Если Объект.СуммаВзносаЕдиныйТариф <> 0 Тогда
			СформироватьОперациюПоЕНС(ВыполненоВТихомРежиме, Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
		КонецЕсли;
	Иначе
		СформироватьОперациюПоЕНС(ВыполненоВТихомРежиме);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНС(ВыполненоВТихомРежиме, ВидНалога = Неопределено)
	
	// За год необходимо отразить всю сумму страховых взносов в учете
	СтраховыеВзносыКУплате = Обработки.РасчетСтраховыхВзносовИП.НовыеСтраховыеВзносыКУплате();
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
			СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов = СуммаВзносаПФРсДоходовВсего;
		Иначе
			СтраховыеВзносыКУплате.СуммаВзносаЕдиныйТариф = СуммаВзносаЕдиныйТарифВсего;
		КонецЕсли;
	Иначе
		СтраховыеВзносыКУплате.СуммаВзносаПФР = СуммаВзносаПФРВсего;
		СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов = СуммаВзносаПФРсДоходовВсего;
		СтраховыеВзносыКУплате.СуммаВзносаФФОМС = СуммаВзносаФФОМСВсего;
		СтраховыеВзносыКУплате.СуммаВзносаЕдиныйТариф = СуммаВзносаЕдиныйТарифВсего;
	КонецЕсли;
	
	АдресТаблицыНалоги = ОписаниеТаблицыНалоги(ВидНалога, СтраховыеВзносыКУплате);
	СкорректироватьТаблицуСУчетомСозданныхОперацийЕНС(АдресТаблицыНалоги,
		СозданныеОперацииПоЕНС(УведомленияОбИсчисленныхНалогах),
		УникальныйИдентификатор);
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		АдресТаблицыНалоги,
		Правило,
		ФактическийПериодОтраженияВзносов(Правило, Срок, ПериодСобытия),
		ВыполненоВТихомРежиме);
		
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыПоясненияДляУменьшенияНалога()
	
	Результат = Новый Структура;
	Результат.Вставить("Правило", Правило);
	Результат.Вставить("Срок", Срок);
	Результат.Вставить("ПериодСобытия", ПериодСобытия);
	Результат.Вставить("ТипНалога", "");
	Результат.Вставить("КоличествоЗаявлений", 0);
	Результат.Вставить("СуммаПоЗаявлениям", ИтогПоУведомлениям);
	Результат.Вставить("ПоказыватьСуммуЕНС", Ложь);
	Результат.Вставить("ГодовойРасчет", Ложь);
	Результат.Вставить("УпрощенныйЗачетВзносов", Ложь);
	Результат.Вставить("ПростойУчетЕНС", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПоясненияДляУменьшенияНалога(ПараметрыВыполнения)
	
	ФактическийПериодОтраженияВзносов = Формат(ФактическийПериодОтраженияВзносов(
		ПараметрыВыполнения.Правило,
		ПараметрыВыполнения.Срок,
		ПараметрыВыполнения.ПериодСобытия), "ДЛФ=DD");
	
	Если ПараметрыВыполнения.УпрощенныйЗачетВзносов Тогда
		// По упрощенному зачету взносов нужно пополнить ЕНС. 
		// До перехода на простой учет также нужно отразить сумму взносов на счете ЕНС через операцию.
		ТекстПояснения = НСтр("ru = 'Отправлять заявление о зачете сумм не требуется.'");
		Если Не ПараметрыВыполнения.ПростойУчетЕНС Тогда
			ТекстПояснения = ТекстПояснения + Символы.ПС
				+ НСтр("ru = 'Для корректного ведения расчетов по налогам нужно отразить взносы на едином налоговом счете.'");
		КонецЕсли;
	ИначеЕсли ПараметрыВыполнения.ГодовойРасчет Тогда
		// В последнем квартале не нужно подавать заявление о зачете - сумма спишется в конце года
		// Если это взносы с доходов, списание произодёт в следующем году
		ТекстШаблона = НСтр(
			"ru = 'Фактическое списание страховых взносов с ЕНС произойдет <b>%1</b> Отправлять заявление о зачете сумм не требуется.'");
		Если Не ПараметрыВыполнения.ПростойУчетЕНС Тогда
			ТекстШаблона = ТекстШаблона + Символы.ПС
				+ НСтр("ru = 'Для корректного ведения расчетов по налогам нужно отразить их на едином налоговом счете.'");
		КонецЕсли;
		ТекстПояснения = СтрШаблон(ТекстШаблона, ФактическийПериодОтраженияВзносов);
	ИначеЕсли ПараметрыВыполнения.ПоказыватьСуммуЕНС Или ПараметрыВыполнения.КоличествоЗаявлений = 0 Тогда
		// Рекомендуем проверить на ЕНС сумму, не менее суммы к резерву
		// Значение суммы к резерву отображается отдельно на форме
		ТекстПояснения = СтрШаблон(НСтр(
			"ru = 'Фактическое списание страховых взносов с ЕНС произойдет <b>%1</b> Чтобы уменьшить авансовый платеж по %2, оплаченную сумму необходимо зарезервировать.
			|
			|Перед отправкой заявления проверьте в <a href=""%3"">Личном кабинете налогоплательщика</a>, что на ЕНС достаточно средств (не менее суммы к резерву).'"),
			ФактическийПериодОтраженияВзносов,
			ПараметрыВыполнения.ТипНалога,
			ПомощникиПоУплатеНалоговИВзносов.СсылкаНаЛичныйКабинетНалогоплательщика(Ложь));
	ИначеЕсли ПараметрыВыполнения.КоличествоЗаявлений > 1 Тогда
		ТекстПояснения = СтрШаблон(НСтр(
			"ru = 'Фактическое списание страховых взносов с ЕНС произойдет <b>%1</b> Чтобы уменьшить авансовый платеж по %2, оплаченную сумму необходимо зарезервировать.
			|
			|Перед отправкой заявлений проверьте в <a href=""%3"">Личном кабинете налогоплательщика</a>, что сумма на ЕНС не менее <b>%4 руб</b>.'"),
			ФактическийПериодОтраженияВзносов,
			ПараметрыВыполнения.ТипНалога,
			ПомощникиПоУплатеНалоговИВзносов.СсылкаНаЛичныйКабинетНалогоплательщика(Ложь),
			Формат(ПараметрыВыполнения.СуммаПоЗаявлениям, "ЧДЦ=2"));
	Иначе
		ТекстПояснения = СтрШаблон(НСтр(
			"ru = 'Фактическое списание страховых взносов с ЕНС произойдет <b>%1</b> Чтобы уменьшить авансовый платеж по %2, оплаченную сумму необходимо зарезервировать.
			|
			|Перед отправкой заявления проверьте в <a href=""%3"">Личном кабинете налогоплательщика</a>, что сумма на ЕНС не менее <b>%4 руб</b>.'"),
			ФактическийПериодОтраженияВзносов,
			ПараметрыВыполнения.ТипНалога,
			ПомощникиПоУплатеНалоговИВзносов.СсылкаНаЛичныйКабинетНалогоплательщика(Ложь),
			Формат(ПараметрыВыполнения.СуммаПоЗаявлениям, "ЧДЦ=2"));
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстПояснения);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРасшифровкуСуммыВзносаПоЕдиномуТарифу(ИмяВзноса)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", ИмяВзноса);
	ПараметрыФормы.Вставить("ВидВзноса", "ЕдиныйТариф");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Фиксированный взнос по единому тарифу'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаЕдиныйТарифВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаЕдиныйТарифНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаЕдиныйТарифУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаЕдиныйТарифПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаЕдиныйТариф);
	ПараметрыФормы.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ЕдиныйТариф"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуСуммыВзносаСДоходов(ИмяВзноса)
	
	ЗаявленияОЗачете = Новый Массив;
	Для Каждого ТекущийДокумент Из УведомленияОбИсчисленныхНалогах Цикл
		Если ТипЗнч(ТекущийДокумент.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
			ЗаявленияОЗачете.Добавить(ТекущийДокумент.Уведомление);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса", ИмяВзноса);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос на обязательное пенсионное страхование с доходов'"));
	ПараметрыФормы.Вставить("Всего",     СуммаВзносаПФРсДоходовВсего);
	ПараметрыФормы.Вставить("Уплачено",  СуммаВзносаПФРсДоходовУплачено);
	ПараметрыФормы.Вставить("Сумма",     Объект.СуммаВзносаПФРсДоходов);
	ПараметрыФормы.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	ПараметрыФормы.Вставить("ЗаявленияОЗачете", ЗаявленияОЗачете);
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктураДоходов", СтруктураДоходов);
	ПараметрыФормы.Вставить("ПредельнаяСуммаВзноса", ПредельнаяСуммаВзноса);
	ПараметрыФормы.Вставить("ПараметрыРасчетаВзносаСДоходов", ПараметрыРасчетаВзносаСДоходов);
	
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФРсДоходов"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзносаСДоходов", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтраницейЕНС()
	
	// Нельзя списать больше, чем на остатке ЕНС
	Элементы.СуммаСписанияСЕНС.МаксимальноеЗначение = ОстатокЕНС;
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
			ВсегоВзносовЗаГод = СуммаВзносаПФРсДоходовВсего;
		Иначе
			ВсегоВзносовЗаГод = СуммаВзносаЕдиныйТарифВсего;
		КонецЕсли;
	Иначе
		ВсегоВзносовЗаГод = СуммаВзносаЕдиныйТарифВсего + СуммаВзносаПФРсДоходовВсего;
	КонецЕсли;
	
	ВсегоОтраженоПоБУ = СозданныеОперацииПоЕНС(УведомленияОбИсчисленныхНалогах).Итог("Сумма");
	СозданныеЗаявления = СозданныеЗаявленияОЗачете(УведомленияОбИсчисленныхНалогах);
	
	ПараметрыРасчета = НовыеПараметрыПоясненияДляУменьшенияНалога();
	ПараметрыРасчета.ГодовойРасчет = (КонецКвартала(ПериодСобытия) = КонецГода(ПериодСобытия));
	ПараметрыРасчета.КоличествоЗаявлений = СозданныеЗаявления.Количество();
	ПараметрыРасчета.ПоказыватьСуммуЕНС = ВсеЗаявленияСданы(СозданныеЗаявления);
	ПараметрыРасчета.УпрощенныйЗачетВзносов = УпрощенныйЗачетФиксированныхВзносов;
	ПараметрыРасчета.ПростойУчетЕНС = ПростойУчетЕНС;
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Период) Тогда
		ПараметрыРасчета.ТипНалога = НСтр("ru = 'НДФЛ'");
	ИначеЕсли УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Период) Тогда
		ПараметрыРасчета.ТипНалога = НСтр("ru = 'ПСН'");
	Иначе
		ПараметрыРасчета.ТипНалога = НСтр("ru = 'УСН'");
	КонецЕсли;
	
	ВсеПлатежиИсполнены = ВсеПлатежиИсполнены();
	
	Если ИспользоватьОстатокЕНС Тогда
		СуммаКДоплатеНаЕНС = Макс(0, ВсегоВзносов - ПлатежиЕНП.Итог("Сумма") - СуммаСписанияСЕНС);
	Иначе
		СуммаКДоплатеНаЕНС = Макс(0, ВсегоВзносов - ПлатежиЕНП.Итог("Сумма"));
	КонецЕсли;
	
	ВсеПлатежиПодготовлены = (СуммаКДоплатеНаЕНС <= 0);
	СкрытьПолеКОплате = Ложь; // Скрывается для упрощенного зачета, если в форме всего один показатель
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		
		Элементы.ВзносыКУплатеЗаКвартал.Видимость = Ложь;
		Элементы.ПояснениеУменьшения.Видимость = Истина;
		Элементы.НапоминаниеОСрокеПодачиЗаявления.Видимость = Ложь;
		Элементы.ГруппаСуммаКРезерву.Видимость = Ложь;
		Элементы.ГруппаЗарезервироватьОстатокНаЕНС.Видимость = Ложь;
		Элементы.ВсегоКОплате.Подсказка = "";
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
			ПредельныйДоходНеОблагаемыйВзносамиВПФР = УчетСтраховыхВзносовИП.ПредельныйДоходНеОблагаемыйВзносамиВПФР();
			Элементы.ВзносСДоходовЗаголовок.Заголовок = СтрШаблон(
				НСтр("ru = 'Списание взносов с доходов свыше %1 руб. - %2.
				|Рекомендуется пополнить ЕНС до наступления срока.'"),
				ПредельныйДоходНеОблагаемыйВзносамиВПФР,
				Формат(Срок, "ДФ=dd.MM.yyyy"));
			Элементы.ВзносСДоходовПояснение.Заголовок = ПояснениеРасчетаВзносаСДоходов(
				СуммаДоходаУСН,
				СуммаДоходаИП,
				ПотенциальноВозможныйДоход,
				ПредельныйДоходНеОблагаемыйВзносамиВПФР);
			Элементы.ВзносыПоЕдиномуТарифуЗаГод.Видимость = Ложь;
			Элементы.ГруппаРасчетВзносаСДоходов.Видимость = Истина;
			Элементы.ГруппаРасчетВзносов.ТекущаяСтраница = Элементы.ВзносыСДоходовЗаГод;
			
			ЕстьСовмещениеПСН = ПотенциальноВозможныйДоход > 0 И (СуммаДоходаУСН + СуммаДоходаИП) > 0;
			
			Если ЕстьСовмещениеПСН Тогда
				// При совмещении с патентом отображаем доходы по основной системе и потенциальный доход
				Элементы.СуммаДоходаИП.Видимость = (СуммаДоходаИП > 0);
				Элементы.СуммаДоходаУСН.Видимость = (СуммаДоходаУСН > 0);
				Элементы.ПотенциальноВозможныйДоход.Видимость = (ПотенциальноВозможныйДоход > 0);
				Элементы.ВзносСДоходовЗначение.Шрифт = Новый Шрифт(, , Истина);
			Иначе
				// Достаточно показать расчет суммы взноса с дохода
				Элементы.СуммаДоходаИП.Видимость = Ложь;
				Элементы.СуммаДоходаУСН.Видимость = Ложь;
				Элементы.ПотенциальноВозможныйДоход.Видимость = Ложь;
				Элементы.ВзносСДоходовЗначение.Шрифт = Новый Шрифт;
			КонецЕсли;
			
			Элементы.ЗачтеноРанееПоВзносамСДоходов.Видимость = (ЗачтеноРанееПоВзносамСДоходов > 0);
			
			Если ЕстьСовмещениеПСН Или ЗачтеноРанееПоВзносамСДоходов > 0 Тогда
				Элементы.ВзносСДоходовЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Авто;
			Иначе
				Элементы.ВзносСДоходовЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			КонецЕсли;
			
			// Если указывается в форме несколько показателей расчета взноса, то отображаем поле
			СкрытьПолеКОплате = (ПотенциальноВозможныйДоход + ЗачтеноРанееПоВзносамСДоходов) = 0;
			
		Иначе
			Элементы.ВзносПоЕдиномуТарифуЗаголовок.Заголовок = СтрШаблон(
				НСтр("ru = 'Списание взносов по единому тарифу - %1.
				|Рекомендуется пополнить ЕНС до наступления срока.'"), Формат(Срок, "ДФ=dd.MM.yyyy"));
			Элементы.ВзносыПоЕдиномуТарифуЗаГод.Видимость = Истина;
			Элементы.ВзносПоЕдиномуТарифуЗначение.Гиперссылка = Не ИнтерфейсИнтеграцииСБанками;
			Элементы.ГруппаРасчетВзносаСДоходов.Видимость = Ложь;
			Элементы.ГруппаРасчетВзносов.ТекущаяСтраница = Элементы.ВзносыПоЕдиномуТарифуЗаГод;
			
			Если ЗачтеноРанееПоЕдиномуТарифу > 0 Тогда
				Элементы.ЗачтеноРанееПоЕдиномуТарифу.Видимость = Истина;
				Элементы.ВзносПоЕдиномуТарифуЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Авто;
			Иначе
				Элементы.ЗачтеноРанееПоЕдиномуТарифу.Видимость = Ложь;
				Элементы.ВзносПоЕдиномуТарифуЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
				СкрытьПолеКОплате = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Элементы.ВзносыКУплатеЗаКвартал.Видимость = Истина;
		Элементы.ВзносыПоЕдиномуТарифуЗаГод.Видимость = Ложь;
		Элементы.ВзносыСДоходовЗаГод.Видимость = Ложь;
		Элементы.ГруппаРасчетВзносов.ТекущаяСтраница = Элементы.ВзносыКУплатеЗаКвартал;
		Элементы.ПояснениеУменьшения.Видимость = Истина;
		Элементы.НапоминаниеОСрокеПодачиЗаявления.Видимость = Не ПараметрыРасчета.ПоказыватьСуммуЕНС;
		Элементы.ГруппаСуммаКРезерву.Видимость = Истина;
		Элементы.ИспользоватьОстатокЕНС.Доступность = (ОстатокЕНС > 0);
		
		Если МожноЗарезервироватьНаЕНС > 0 Тогда
			Элементы.МожноЗарезервироватьНаЕНС.Видимость = Не ПараметрыРасчета.ГодовойРасчет;
			Элементы.ГруппаЗарезервироватьОстатокНаЕНС.Видимость = Не ПараметрыРасчета.ГодовойРасчет;
		Иначе
			Элементы.МожноЗарезервироватьНаЕНС.Видимость = Ложь;
			Элементы.ГруппаЗарезервироватьОстатокНаЕНС.Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СуммаВзносаПФРДобровольно) Тогда
			Элементы.ВсегоКОплате.Подсказка = НСтр("ru = 'На указанную сумму будет сформирован документ оплаты на ЕНС'");
		Иначе
			Элементы.ВсегоКОплате.Подсказка = СтрШаблон(
				НСтр("ru = 'Вы можете оплатить взносы в размере, необходимом для уменьшения авансового платежа по %1'"),
				ПараметрыРасчета.ТипНалога);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОстатокЕНС) Тогда
		Элементы.ОстатокЕНС.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ОстатокЕНС.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Элементы.ГруппаВсегоПополнитьНаЕНС.Видимость = ПоказыватьКомандыОплаты И Не ВсеПлатежиПодготовлены И Не СкрытьПолеКОплате;
	Элементы.СуммаСписанияСЕНС.Доступность = ИспользоватьОстатокЕНС;
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ПомощникЕНС;
	Элементы.ПомощникЕНС.Видимость = Истина;
	Элементы.ПомощникДоЕНС.Видимость = Ложь;
	Элементы.УменьшениеНалога.Заголовок = СтрШаблон(НСтр("ru = 'Уменьшение налога %1'"), ПараметрыРасчета.ТипНалога);
	Элементы.СформироватьОперацияПоЕНС.Видимость = Не ПростойУчетЕНС 
		И ПараметрыРасчета.ГодовойРасчет И (ВсегоОтраженоПоБУ < ВсегоВзносовЗаГод);
	
	ЕстьДокументыОплатыПоКассе = ЕстьДокументыОплатыПоКассе();
	ЕстьДокументыОплатыПоБанку = ЕстьДокументыОплатыПоБанку();
	
	ЕстьДокументыОплаты = (ЕстьДокументыОплатыПоКассе Или ЕстьДокументыОплатыПоБанку);
	
	КнопкаПоУмолчаниюОтправитьВБанк = Ложь;
	КнопкаПоУмолчаниюУплата = Ложь;
	
	Если ПоказыватьКомандыОплаты Тогда
		
		ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку();
		ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку
			И ТребуетсяВыгрузитьДокументыОплаты();
	
		НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
		
		КнопкаПоУмолчаниюОтправитьВБанк = ЗначениеЗаполнено(НеОтправленныеПлатежи) И Не ИнтерфейсИнтеграцииСБанками;
		КнопкаПоУмолчаниюУплата = Не КнопкаПоУмолчаниюОтправитьВБанк И Не ВсеПлатежиПодготовлены;
		
		Элементы.ОплатаПоКвитанцииЧтоДелатьДальше.Видимость = Не ИнтерфейсИнтеграцииСБанками И ЕстьДокументыОплатыПоКассе;
		Элементы.ОтправитьПлатежиВБанк.Видимость = ТребуетсяОтправитьДокументыОплатыПоБанку И Не ИнтерфейсИнтеграцииСБанками;
		Элементы.ВыгрузитьПлатежи.Видимость = ТребуетсяВыгрузитьДокументыОплаты И Не ИнтерфейсИнтеграцииСБанками;
		Элементы.ОплатитьПоБанку.Видимость = Не ВсеПлатежиПодготовлены;
		Элементы.ОплатитьНаличными.Видимость = Не ВсеПлатежиПодготовлены;
		
		УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОтправитьПлатежиВБанк, КнопкаПоУмолчаниюОтправитьВБанк);
		УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыгрузитьПлатежи, КнопкаПоУмолчаниюОтправитьВБанк);
		УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОплатитьПоБанку, КнопкаПоУмолчаниюУплата);
		
		Элементы.ГруппаКнопкиОплаты.Видимость = Не ВсеПлатежиПодготовлены Или Не ВсеПлатежиИсполнены;
		
	Иначе
		Элементы.ГруппаКнопкиОплаты.Видимость = Ложь;
		Элементы.ОплатаПоКвитанцииЧтоДелатьДальше.Видимость = Ложь;
		Элементы.ГруппаОтправкаПлатежейВБанк.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраховыеВзносыВЕНС.Видимость = ЕстьДокументыОплаты;
	
	КнопкаПоУмолчаниюОперацияЕНС = Не ПростойУчетЕНС И Не КнопкаПоУмолчаниюОтправитьВБанк И Не КнопкаПоУмолчаниюУплата;
	
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ЗарезервироватьОстатокНаЕНС, КнопкаПоУмолчаниюОперацияЕНС);
	
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.СформироватьОперацияПоЕНС, КнопкаПоУмолчаниюОперацияЕНС);
	Элементы.ГруппаЗаявленияОЗачете.Видимость = УведомлениеОбИсчисленныхНалогахПодготовлено;
	Элементы.ПояснениеУменьшения.Заголовок = ТекстПоясненияДляУменьшенияНалога(ПараметрыРасчета);
	
	Если ПараметрыРасчета.КоличествоЗаявлений > 1 Тогда
		Элементы.НапоминаниеОСрокеПодачиЗаявления.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Отправьте заявления в налоговую не позднее <b>%1</b>'"), Формат(Срок, "ДЛФ=DD")));
	Иначе
		Элементы.НапоминаниеОСрокеПодачиЗаявления.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Отправьте заявление в налоговую не позднее <b>%1</b>'"), Формат(Срок, "ДЛФ=DD")));
	КонецЕсли;
	
	// Элементы заявления о зачете добавляются на форму по идентификатору в таблице УведомленияОбИсчисленныхНалогах.
	// После каждого обновления таблицы идентификаторы строк меняются и нужно обновлять элементы на форме.
	КоличествоЭлементов = Элементы.ГруппаЗаявленияОЗачете.ПодчиненныеЭлементы.Количество();
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ТекущиеЭлементГруппы = Элементы.ГруппаЗаявленияОЗачете.ПодчиненныеЭлементы[КоличествоЭлементов - Индекс];
		
		Если ТекущиеЭлементГруппы.Имя = "ПредставлениеЗаявления" Или ТекущиеЭлементГруппы.Имя = "ИтогПоУведомлениям" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПодчиненныйЭлемент Из ТекущиеЭлементГруппы.ПодчиненныеЭлементы Цикл
			Элементы.Удалить(ПодчиненныйЭлемент);
		КонецЦикла;
		
		Элементы.Удалить(ТекущиеЭлементГруппы);
		
	КонецЦикла;
	
	Если УведомлениеОбИсчисленныхНалогахПодготовлено Тогда
		
		Если ПараметрыРасчета.ГодовойРасчет Или УпрощенныйЗачетФиксированныхВзносов Тогда
			ОтобразитьСозданныеДокументыНаФорме(СозданныеОперацииПоЕНС(УведомленияОбИсчисленныхНалогах));
		КонецЕсли;
		
		Если УпрощенныйЗачетФиксированныхВзносов Или Не ПараметрыРасчета.ГодовойРасчет Тогда
			ОтобразитьСозданныеДокументыНаФорме(СозданныеЗаявления)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтраницейДоЕНС()
	
	Элементы.ГруппаСтраховыеВзносыФСС.Видимость    = УплачиватьДобровольныеВзносыВФСС;
	Элементы.ГруппаВсегоСтраховыхВзносов.Видимость = ПлательщикЕНП;
	Элементы.ГруппаВсегоВзносов.Видимость          = Не ПлательщикЕНП;
	
	Если Элементы.ГруппаСтраховыеВзносыЕдиныйТариф.Видимость Тогда
		Элементы.ГруппаСтраховыеВзносыЕдиныйТариф.Видимость = Не УплачивалсяТолькоНПД;
	КонецЕсли;
	
	Элементы.ГруппаСтраховыеВзносыПФРсДоходов.Видимость = Не УплачивалсяТолькоНПД;
	Элементы.ГруппаСтраховыеВзносыПФР.Видимость = Не УплачивалсяТолькоНПД И Не ПерешлиНаЕдиныйТариф;
	Элементы.ГруппаСтраховыеВзносыФФОМС.Видимость = Не УплачивалсяТолькоНПД И Не ПерешлиНаЕдиныйТариф;

	Элементы.ГруппаСтраховыеВзносыПФРДобровольно.Видимость = СуммаВзносаПФРДобровольноВсего <> 0;
	Элементы.ВсегоВзносов.Ширина = ?(Элементы.ГруппаСтраховыеВзносыПФР.Видимость, 33, 18);
	
	Если ПерешлиНаЕдиныйТариф Тогда
		Элементы.СуммаВзносаЕдиныйТариф.Ширина = ?(УплачиватьДобровольныеВзносыВФСС, 15, 20);
		Элементы.СуммаВзносаПФРсДоходов.Ширина = ?(УплачиватьДобровольныеВзносыВФСС, 15, 20);
		Элементы.СуммаВзносаФСС.Ширина = ?(УплачиватьДобровольныеВзносыВФСС, 15, 20);
	Иначе
		Элементы.СуммаВзносаЕдиныйТариф.Ширина = 14;
		Элементы.СуммаВзносаПФРсДоходов.Ширина = 14;
		Элементы.СуммаВзносаФСС.Ширина = 14;
	КонецЕсли;

	Элементы.ВсегоСтраховыхВзносов.Ширина = ?(ПерешлиНаЕдиныйТариф, 33, 28);

	Если Элементы.ГруппаСтраховыеВзносыПФРДобровольно.Видимость Тогда
		Элементы.СуммаВзносаПФРДобровольно.Заголовок = НСтр("ru = 'На пенсионное страхование'");
	КонецЕсли;
	
	Элементы.СуммаВзносаФСС.Заголовок = ?(ПерешлиНаЕдиныйТариф, НСтр("ru = 'На социальное страхование'"), НСтр("ru = 'ФСС'"));
	
	ВзносыОплачены = ВзносыОплачены();
	
	КнопкаПоУмолчаниюУведомление = ПлательщикЕНП И Не УведомлениеОбИсчисленныхНалогахПодготовлено И Не ПодаетсяЗаявлениеОЗачете;
	КнопкаПоУмолчаниюУплата      = Не ВзносыОплачены И Не КнопкаПоУмолчаниюУведомление;
	КнопкаПоУмолчаниюЗаявление   = ПлательщикЕНП И ПодаетсяЗаявлениеОЗачете И Не КнопкаПоУмолчаниюУплата;
	
	Элементы.ОплатитьСБанковскогоСчета.Доступность       = Не ВзносыОплачены;
	Элементы.ОплатитьНаличнымиПоКвитанции.Доступность    = Не ВзносыОплачены;
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОплатитьСБанковскогоСчета,    КнопкаПоУмолчаниюУплата);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОплатитьНаличнымиПоКвитанции, КнопкаПоУмолчаниюУплата);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.СформироватьЗаявление, КнопкаПоУмолчаниюЗаявление);
	Элементы.ВыполнитьДействиеСформироватьУведомление.КнопкаПоУмолчанию = КнопкаПоУмолчаниюУведомление;
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыполнитьДействиеСформироватьУведомление, КнопкаПоУмолчаниюУведомление);
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.КнопкаПоУмолчанию = КнопкаПоУмолчаниюУведомление;
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС, КнопкаПоУмолчаниюУведомление);
	Элементы.ВыполнитьДействиеСформироватьУведомление.Видимость = ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Видимость = Не ПростойУчетЕНС И Не ПодаетсяУведомлениеПоНалогуЗаПериод;
	
	Если ПоказыватьКомандыОплаты Тогда
		
		ЕстьДокументыОплатыПоКассе = ЕстьДокументыОплатыПоКассе();
		Элементы.ДляЧегоНужнаКвитанцияЧтоДелатьДальше.Видимость =
			НЕ ИнтерфейсИнтеграцииСБанками И ЕстьДокументыОплатыПоКассе;
		
		ЕстьДокументыОплатыПоБанку = ЕстьДокументыОплатыПоБанку();
		Элементы.КакОплатитьСБанковскогоСчетаДиректБанк.Видимость = 
			НастроенПрямойОбменСБанком И ЕстьДокументыОплатыПоБанку;
		Элементы.КакОплатитьСБанковскогоСчета.Видимость = Не ЗначениеЗаполнено(СчетОрганизации);
		
	КонецЕсли;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ПомощникДоЕНС;
	Элементы.ПомощникЕНС.Видимость = Ложь;
	Элементы.ПомощникДоЕНС.Видимость = Истина;
	Если Не (ТребуетсяАктуализироватьРасчетВзносов И Не ДанныеУчетаАктуальны) Тогда
		УправлениеФормойБлокУведомление();
	КонецЕсли;
	
	Элементы.ВсегоВзносов.Видимость = ВидимостьЭлементаВсегоВзносов();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСозданныеДокументыНаФорме(СозданныеДокументы)
	
	Для Каждого ТекущееЗаявление Из СозданныеДокументы Цикл
		
		НомерКонтейнера = Формат(ТекущееЗаявление.НомерСтроки, "ЧЦ=2; ЧН=0");
		ИмяГруппы = СтрШаблон("ПредставлениеЗаявления%1", НомерКонтейнера);
		Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(
				ЭтотОбъект,
				Элементы.ПредставлениеЗаявления,
				Элементы.ГруппаЗаявленияОЗачете,
				ТекущееЗаявление.НомерСтроки);
		КонецЕсли;
		
		ИмяЭлементаЗаявление        = СтрШаблон("ЗаявлениеОЗачете%1", НомерКонтейнера);
		ИмяГруппыЗаявление          = СтрШаблон("ПредставлениеЗаявления%1", НомерКонтейнера);
		ИмяЭлементаУдалитьЗаявление = СтрШаблон("УдалитьЗаявление%1", НомерКонтейнера);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаЗаявление, "Заголовок",
			ТекущееЗаявление.ПредставлениеДокумента);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЗаявление, "Видимость",
			Истина); 
		Если СозданныеДокументы.Колонки.Найти("Сдано") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаУдалитьЗаявление, "Видимость",
				Не ТекущееЗаявление.Сдано);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СозданныеЗаявленияОЗачете(Знач УведомленияОбИсчисленныхНалогах)
	
	СозданныеЗаявления = Новый ТаблицаЗначений;
	СозданныеЗаявления.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности"));
	СозданныеЗаявления.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СозданныеЗаявления.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СозданныеЗаявления.Колонки.Добавить("ПредставлениеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	СозданныеЗаявления.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	СозданныеЗаявления.Колонки.Добавить("Сдано", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекущееУведомление Из УведомленияОбИсчисленныхНалогах Цикл
		Если ТипЗнч(ТекущееУведомление.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
			
			НоваяСтрока = СозданныеЗаявления.Добавить();
			НоваяСтрока.Ссылка = ТекущееУведомление.Уведомление;
			НоваяСтрока.Сумма = ТекущееУведомление.Сумма;
			НоваяСтрока.НомерСтроки = ТекущееУведомление.ПолучитьИдентификатор() + 1;
			
			РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееУведомление.Уведомление, "Дата, Номер, Уведомление");
			
			СостояниеДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(РеквизитыЗаявления.Уведомление);
			НоваяСтрока.Сдано = СостояниеДокумента.Сдано;
			НоваяСтрока.Дата = РеквизитыЗаявления.Дата;
			НоваяСтрока.ПредставлениеДокумента = СтрШаблон(НСтр("ru ='Заявление о зачете страховых взносов %1 от %2 на сумму %3 (%4)'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаявления.Номер),
				Формат(РеквизитыЗаявления.Дата, "ДЛФ=D"),
				Формат(ТекущееУведомление.Сумма, "ЧЦ=15; ЧДЦ=2"),
				СостояниеДокумента.Статус);
			
		КонецЕсли;
	КонецЦикла;
	
	СозданныеЗаявления.Сортировать("Дата Возр");
	Возврат СозданныеЗаявления;
	
КонецФункции

&НаСервереБезКонтекста
Функция СозданныеОперацииПоЕНС(Знач УведомленияОбИсчисленныхНалогах)
	
	СозданныеДокументы = Новый ТаблицаЗначений;
	СозданныеДокументы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету"));
	СозданныеДокументы.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СозданныеДокументы.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СозданныеДокументы.Колонки.Добавить("ПредставлениеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	СозданныеДокументы.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Для Каждого ТекущееУведомление Из УведомленияОбИсчисленныхНалогах Цикл
		Если ТипЗнч(ТекущееУведомление.Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
			
			НоваяСтрока = СозданныеДокументы.Добавить();
			НоваяСтрока.Ссылка = ТекущееУведомление.Уведомление;
			НоваяСтрока.Сумма = ТекущееУведомление.Сумма;
			НоваяСтрока.НомерСтроки = ТекущееУведомление.ПолучитьИдентификатор() + 1;
			
			РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееУведомление.Уведомление, "Дата, Номер");
			
			НоваяСтрока.Дата = РеквизитыЗаявления.Дата;
			НоваяСтрока.ПредставлениеДокумента = СтрШаблон(НСтр("ru ='Операция по единому налоговому счету %1 от %2 на сумму %3'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаявления.Номер),
				Формат(РеквизитыЗаявления.Дата, "ДЛФ=D"),
				Формат(ТекущееУведомление.Сумма, "ЧЦ=15; ЧДЦ=2"));
			
		КонецЕсли;
	КонецЦикла;
	
	СозданныеДокументы.Сортировать("Дата Возр");
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкорректироватьТаблицуСУчетомСозданныхЗаявленийОЗачете(АдресТаблицыНалоги,
		Знач УведомленияОбИсчисленныхНалогах,
		УникальныйИдентификатор,
		МожноЗарезервироватьНаЕНС)
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицыНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЗаявления = СозданныеЗаявленияОЗачете(УведомленияОбИсчисленныхНалогах);
	ДанныеДляСозданияДокумента = ПолучитьИзВременногоХранилища(АдресТаблицыНалоги);
	ДанныеТаблицыНалогов = ДанныеДляСозданияДокумента.ТаблицаНалоги;
	СтрокиКУдалению = Новый Массив;
	
	ТаблицаСкорректирована = Ложь;
	
	Если СозданныеЗаявления.Итог("Сумма") > 0 Тогда
		
		// Доработаем таблицу на случай, когда заявления о зачете создаются частично
		СтрокиКУдалению.Очистить();
		СозданныеЗаявленияПоВидамНалогов = ЕдиныйНалоговыйСчет.ЗарезервированыеСуммыПоВидамНалогов(
			ДанныеТаблицыНалогов.ВыгрузитьКолонку("Налог"),
			СозданныеЗаявления.ВыгрузитьКолонку("Ссылка"));
		
		Для Каждого ТекущаяСтрока Из ДанныеТаблицыНалогов Цикл
			
			СуммаСтрок = 0;
			ОтборСтрок = СозданныеЗаявленияПоВидамНалогов.НайтиСтроки(Новый Структура("Налог", ТекущаяСтрока.Налог));
			Для Каждого НайденнаяСтрока Из ОтборСтрок Цикл
				СуммаСтрок = СуммаСтрок + НайденнаяСтрока.Сумма;
			КонецЦикла;
			
			ТекущаяСтрока.Сумма = Макс(0, ТекущаяСтрока.Сумма - СуммаСтрок);
			Если ТекущаяСтрока.Сумма = 0 Тогда
				СтрокиКУдалению.Добавить(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСкорректирована = Истина;
		Для Каждого ТекущаяСтрока Из СтрокиКУдалению Цикл
			ДанныеТаблицыНалогов.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МожноЗарезервироватьНаЕНС < ДанныеТаблицыНалогов.Итог("Сумма") Тогда
		// Корректируем суммы заявления с учетом остатка на ЕНС по приоритету срока оплаты
		СтрокиКУдалению.Очистить();
		КРезерву = МожноЗарезервироватьНаЕНС;
		ДанныеТаблицыНалогов.Сортировать("СрокУплаты Возр");
		Для Каждого ТекущаяСтрока Из ДанныеТаблицыНалогов Цикл
			Если КРезерву <= 0 Тогда
				СтрокиКУдалению.Добавить(ТекущаяСтрока);
			Иначе
				ТекущаяСтрока.Сумма = Мин(КРезерву, ТекущаяСтрока.Сумма);
				КРезерву = КРезерву - ТекущаяСтрока.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСкорректирована = Истина;
		Для Каждого ТекущаяСтрока Из СтрокиКУдалению Цикл
			ДанныеТаблицыНалогов.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаСкорректирована Тогда
		// Удаляем старые данные таблицы для создания заявления - скорректируем суммы и запишем данные отредактированных таблиц
		УдалитьИзВременногоХранилища(АдресТаблицыНалоги);
		АдресТаблицыНалоги = ПоместитьВоВременноеХранилище(ДанныеДляСозданияДокумента, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкорректироватьТаблицуСУчетомСозданныхОперацийЕНС(АдресТаблицыНалоги, Знач ОперацииЕНС, УникальныйИдентификатор)
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицыНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСозданияДокумента = ПолучитьИзВременногоХранилища(АдресТаблицыНалоги);
	ДанныеТаблицыНалогов = ДанныеДляСозданияДокумента.ТаблицаНалоги;
	СтрокиКУдалению = Новый Массив;
	
	ТаблицаСкорректирована = Ложь;
	
	Если ОперацииЕНС.Итог("Сумма") > 0 Тогда
		
		// Доработаем таблицу на случай, когда документы создаются частично
		СозданныеОперацииПоВидамНалогов = ЕдиныйНалоговыйСчет.ОперацииЕНСПоВидамНалогов(ОперацииЕНС.ВыгрузитьКолонку("Ссылка"));
		
		Для Каждого ТекущаяСтрока Из ДанныеТаблицыНалогов Цикл
			
			СуммаСтрок = 0;
			ОтборСтрок = СозданныеОперацииПоВидамНалогов.НайтиСтроки(Новый Структура("Налог", ТекущаяСтрока.Налог));
			Для Каждого НайденнаяСтрока Из ОтборСтрок Цикл
				СуммаСтрок = СуммаСтрок + НайденнаяСтрока.Сумма;
			КонецЦикла;
			
			ТекущаяСтрока.Сумма = Макс(0, ТекущаяСтрока.Сумма - СуммаСтрок);
			Если ТекущаяСтрока.Сумма = 0 Тогда
				СтрокиКУдалению.Добавить(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСкорректирована = Истина;
		Для Каждого ТекущаяСтрока Из СтрокиКУдалению Цикл
			ДанныеТаблицыНалогов.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаСкорректирована Тогда
		//Удаляем старые данные таблицы для создания документа - скорректируем суммы и запишем данные отредактированных таблиц
		УдалитьИзВременногоХранилища(АдресТаблицыНалоги);
		АдресТаблицыНалоги = ПоместитьВоВременноеХранилище(ДанныеДляСозданияДокумента, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеПлатежиИсполнены()
	
	Если ПлатежиЕНП.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтборСтрок = ПлатежиЕНП.НайтиСтроки(Новый Структура("Оплачено", Ложь));
	Возврат ОтборСтрок.Количество() = 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаИсполненныхПлатежей(Знач ПлатежиЕНП)
	
	Результат = 0;
	
	ОтборСтрок = ПлатежиЕНП.НайтиСтроки(Новый Структура("Оплачено", Истина));
	Для Каждого ТекущаяСтрока Из ОтборСтрок Цикл
		Результат = Результат + ТекущаяСтрока.Сумма;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеЗаявленияСданы(ТаблицаЗаявлений)
	
	КоличествоЗаявлений = ТаблицаЗаявлений.Количество();
	
	Если КоличествоЗаявлений = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтборСтрок = ТаблицаЗаявлений.НайтиСтроки(Новый Структура("Сдано", Истина));
	
	Возврат ОтборСтрок.Количество() = КоличествоЗаявлений;
	
КонецФункции

&НаСервере
Процедура УстановитьИтоговыеПоляУведомлений()
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	ИтогПоУведомлениям = СозданныеЗаявленияОЗачете(УведомленияОбИсчисленныхНалогах).Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияУплатаНалогов()
	
	НайтиПлатежиСвязанныеСЗадачей();
	ЗаполнитьПомощник();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Ложь;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
	ОбработкаОповещенияУплатаНалогов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.ПлатежиЕНП Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.ПлатежиЕНП Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервере
Функция ТребуетсяВыгрузитьДокументыОплаты()
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервере
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку()
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляВыгрузкиВФайл()
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(
		Объект.Организация, НеИсполненныеПлатежи);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку()
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(
		Объект.Организация, НеОтправленныеПлатежи);
	
КонецФункции

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);	
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФактическийПериодОтраженияВзносов(Правило, Срок, ПериодСобытия)
	
	// Фиксированные взносы по единому тарифу списываются в конце года.
	// Взносы с доходов списываются после окончания отчетного года по сроку уплаты.
	
	Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
		Результат = Срок;
	Иначе
		Результат = КонецГода(ПериодСобытия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыРасшифровкиВзносаСДоходов(ИнтерфейсИнтеграцииСБанками)
	
	ИмяФормыРасшифровки = ?(ИнтерфейсИнтеграцииСБанками, "РасшифровкаДоходовИнтеграцияСБанком", "РасшифровкаДоходов");
	Возврат СтрШаблон("Обработка.ПомощникРасчетаНалогаУСН.Форма.%1", ИмяФормыРасшифровки);
	
КонецФункции

#КонецОбласти

#Область АктуализацияРасчетаВзносов

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусФоновогоЗадания(Форма, Прогресс = Неопределено)
	
	Если Прогресс <> Неопределено И ТипЗнч(Прогресс) = Тип("Структура") Тогда
		
		ПроцентПрогресса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Прогресс, "Процент", 0);
		ПроцентПредставление = Формат(ПроцентПрогресса, "ЧЦ=2; ЧДЦ=0; ЧГ=0; ЧФ=Ч%");
		
		Форма.СтатусФоновогоЗадания = СтрШаблон(НСтр("ru = 'Выполняется расчет взносов...%1'"), ПроцентПредставление);
		
	ИначеЕсли Форма.ТребуетсяАктуализироватьРасчетВзносов И Не Форма.ДанныеУчетаАктуальны Тогда
		Форма.СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет взносов...'");
	Иначе
		Форма.СтатусФоновогоЗадания = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктуализироватьРасчетВзносов()
	
	ДлительнаяОперация = АктуализироватьРасчетВзносов();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатАктуализацииРасчетаВзносов", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("СообщитьПрогрессАктуализацииРасчетаВзносов", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция АктуализироватьРасчетВзносов()
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация", Объект.Организация);
	ПараметрыРасчета.Вставить("Период", Объект.Период);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.РасчетСтраховыхВзносовИП.АктуализироватьРасчет", ПараметрыРасчета);
	
КонецФункции

&НаКлиенте
Процедура СообщитьПрогрессАктуализацииРасчетаВзносов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" И Результат.Свойство("Прогресс") Тогда
		ОбновитьСтатусФоновогоЗадания(ЭтотОбъект, Результат.Прогресс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализацииРасчетаВзносов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатАктуализации.Выполнено Тогда
		
		ДанныеУчетаАктуальны = Истина;
		ЗаполнитьПомощник();
		ПересчитатьРеквизитыЕНС();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация))
		
	Иначе
		
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект,
			РезультатАктуализации,
			НСтр("ru='Расчет взносов не выполнен. Обнаружены ошибки.
					 |Попробуйте повторно выполнить расчет.'"));
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыИЗаполнитьДанныеФормы()

	УстановитьФункциональныеОпцииФормы();
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	ЗаполнитьПомощник();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеЗаявлениеНаСервере(СсылкаНаДокумент)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
		// Необходимо скинуть статус уведомления для корректного отображения статуса задачи
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(ДокументОбъект.Уведомление,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
	КонецЕсли;
	
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыИспользуемогоОстаткаНаЕНС()
	
	ДоступныйОстаток = ЕдиныйНалоговыйСчет.ОстатокНаЕдиномНалоговомСчете(Объект.Организация, ПериодСобытия);
	СозданныеЗаявления = СозданныеЗаявленияОЗачете(УведомленияОбИсчисленныхНалогах);
	
	// Остаток на ЕНС показывается без учета совершенных платежей
	ОстатокЕНС = Макс(0, ДоступныйОстаток - СуммаИсполненныхПлатежей(ПлатежиЕНП));
	
	// Сумма к резерву рассчитывается в зависимости от настроек пользователя
	МожноЗарезервироватьНаЕНС = СуммаКРезерву(СуммаСписанияСЕНС,
		ОстатокЕНС,
		ВсегоВзносов,
		ПлатежиЕНП,
		УведомленияОбИсчисленныхНалогах);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаКРезерву(СуммаСписанияСЕНС, ОстатокЕНС, ВсегоВзносов, Знач ПлатежиЕНП, Знач УведомленияОбИсчисленныхНалогах)
	
	СуммаИсполненныхПлатежей = СуммаИсполненныхПлатежей(ПлатежиЕНП);
	СуммаУжеЗарезервированная = СозданныеЗаявленияОЗачете(УведомленияОбИсчисленныхНалогах).Итог("Сумма");
	
	// Если уже созданы все заявления о зачете, тогда резервировать больше ничего не надо
	Если СуммаУжеЗарезервированная >= ВсегоВзносов Тогда
		Возврат 0;
	КонецЕсли;
	
	ОсталосьОплатитьВзносов = Макс(0, ВсегоВзносов - СуммаУжеЗарезервированная);
	// В качестве доступной суммы для резерва показываем сумму с учетом настроек на форме:
	// если пользователь решил не использовать имеющийся остаток на ЕНС, то тогда считаем только пополнения, которые осуществлены в рамках данной задачи
	Если ЗначениеЗаполнено(СуммаСписанияСЕНС) Тогда
		МожноЗарезервироватьНаЕНС = Мин(ОсталосьОплатитьВзносов, Макс(0, СуммаСписанияСЕНС + СуммаИсполненныхПлатежей - СуммаУжеЗарезервированная));
	Иначе
		МожноЗарезервироватьНаЕНС = Мин(ОсталосьОплатитьВзносов, Макс(0, СуммаИсполненныхПлатежей - СуммаУжеЗарезервированная));
	КонецЕсли;
	
	Возврат МожноЗарезервироватьНаЕНС;
	
КонецФункции

&НаСервере
Процедура СуммаСписанияСЕНСПриИзмененииНаСервере()
	
	Объект.СуммаЕНП = Макс(0, ВсегоВзносов - СуммаСписанияСЕНС - ПлатежиЕНП.Итог("Сумма"));
	МожноЗарезервироватьНаЕНС = СуммаКРезерву(СуммаСписанияСЕНС,
		ОстатокЕНС,
		ВсегоВзносов,
		ПлатежиЕНП,
		УведомленияОбИсчисленныхНалогах);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРеквизитыЕНС()
	
	Если ПлательщикЕНП Тогда
		
		Если УпрощенныйЗачетФиксированныхВзносов Тогда
			СуммаСписанияСЕНС = 0; // Для упрощенного взноса сумма списания с ЕНС не показывается
			МожноЗарезервироватьНаЕНС = 0; // Сумму взносов не нужно резервировать через заявления
			РассчитатьСуммуВзносаКОплате();
		Иначе
			// Вычисляем признак использования остатка ЕНС:
			// если была частичная оплата, тогда считаем, что всю сумму остатка включили для использования с ЕНС
			// если оплаты не было, а тогда считаем, что зарезервированную сумму взяли с ЕНС
			Если ПлатежиЕНП.Количество() = 0 Тогда
				СуммаСписанияСЕНС = Мин(ИтогПоУведомлениям, ОстатокЕНС);
			ИначеЕсли ИтогПоУведомлениям >= ВсегоВзносов Тогда
				// Считаем суммы списания с учетом уже созданных уведомлений
				СуммаСписанияСЕНС = Макс(0, Мин(ИтогПоУведомлениям - ПлатежиЕНП.Итог("Сумма"), ОстатокЕНС));
			Иначе
				СуммаСписанияСЕНС = Макс(0, Мин(ВсегоВзносов - ПлатежиЕНП.Итог("Сумма"), ОстатокЕНС));
			КонецЕсли;
			ИспользоватьОстатокЕНС = (СуммаСписанияСЕНС > 0);
			МожноЗарезервироватьНаЕНС = СуммаКРезерву(СуммаСписанияСЕНС,
				ОстатокЕНС,
				ВсегоВзносов,
				ПлатежиЕНП,
				УведомленияОбИсчисленныхНалогах);
			Объект.СуммаЕНП = Макс(0, ВсегоВзносов - СуммаСписанияСЕНС - ПлатежиЕНП.Итог("Сумма"));
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонецПериода(Период, Периодичность)
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат КонецКвартала(Период);
	Иначе
		Возврат КонецГода(Период);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКУДИР_ИП_ОСНО()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимРасшифровки", Истина);
	СтруктураПараметров.Вставить("Организация",      Объект.Организация);
	СтруктураПараметров.Вставить("НачалоПериода",    НачалоГода(Объект.Период));
	СтруктураПараметров.Вставить("КонецПериода",     КонецКвартала(Объект.Период));
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходовПредпринимателя.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКУДИР_ИП_УСН()
	
	Если КонтекстныйВызов Тогда
		КонецПериодаРасшифровки = Объект.Период;
	Иначе
		КонецПериодаРасшифровки = КонецГода(Объект.Период);
	КонецЕсли;
	
	ПериодРасшифровкиДоходов = ПериодРасшифровкиДоходов(Объект.Организация, КонецПериодаРасшифровки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("РежимРасшифровкиНалоговойБазы", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ПериодРасшифровкиДоходов);
	
	ИмяФормыРасшифровкиВзноса = ИмяФормыРасшифровкиВзносаСДоходов(ИнтерфейсИнтеграцииСБанками);
	
	ОткрытьФорму(ИмяФормыРасшифровкиВзноса, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПатентов()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
	СтруктураПараметров.Вставить("Период", Объект.Период);
	
	ОткрытьФорму("Справочник.Патенты.ФормаСписка", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПояснениеРасчетаВзносаСДоходов(СуммаДоходаУСН, СуммаДоходаИП, ПотенциальноВозможныйДоход, ПредельныйДоход)
	
	СуммаДоходаВсего = СуммаДоходаУСН + СуммаДоходаИП + ПотенциальноВозможныйДоход;
	ЭтоСовмещениеСПатентом = (ПотенциальноВозможныйДоход > 0);
	
	Если ЭтоСовмещениеСПатентом Тогда
		// Возращаем пояснение без ссылки на расшифровку, т.к. расшифровка по показателям расчета будет на самой форме взноса
		Результат = СтрШаблон("(%1 - %2) * 1%%", СуммаДоходаВсего, ПредельныйДоход);
	Иначе
		// Расшифровываем сумму дохода через отдельную форму по ссылке
		Результат = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = '(<a href=""РасшифроватьДоходИП"">%1</a> - %2) * 1%'"),
			СуммаДоходаВсего,
			ПредельныйДоход);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиНалоговИОтчетов()
	
	ПараметрыФормыНалогиИОтчеты = Новый Структура;
	ПараметрыФормыНалогиИОтчеты.Вставить("Организация", Объект.Организация);
	ПараметрыФормыНалогиИОтчеты.Вставить("ТекущаяЗакладка", "СтраховыеВзносы_Предприниматель");
	ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормыНалогиИОтчеты, , Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодРасшифровкиДоходов(Организация, НалоговыйПериод)
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоПериода", НачалоГода(НалоговыйПериод));
	Результат.Вставить("КонецПериода", КонецДня(НалоговыйПериод));
	
	ПериодыДействияВзноса = УчетСтраховыхВзносовИП.ПериодыУплатыВзносаСДоходов(Организация, НалоговыйПериод);
	Если ЗначениеЗаполнено(ПериодыДействияВзноса) Тогда
		// Если действие единого тарифа разделено на несколько периодов в году,
		// то открываем расшифровку с начала первого периода до конца последнего
		Результат.НачалоПериода = ПериодыДействияВзноса[0].ДатаНачала;
		Результат.КонецПериода = ПериодыДействияВзноса[ПериодыДействияВзноса.Количество() - 1].ДатаОкончания;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРасчетВзносаПФРДобровольно()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", "СуммаВзносаПФРДобровольно");
	ПараметрыФормы.Вставить("ВидВзноса", "ПФРДобровольно");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Добровольный взнос в ПФР'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаПФРДобровольноВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаПФРДобровольноНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаПФРДобровольноУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаПФРДобровольноПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаПФРДобровольно);
	ПараметрыФормы.Вставить("КоэффициентПФРДобровольно", Объект.КоэффициентПФРДобровольно);
	ПараметрыФормы.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФРДобровольно"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВзносаКОплате()
	
	// Сумма очередного платежа рассчитывается с учетом поданых заявлений о зачете и оплат на ЕНС.
	// Зачет по заявлениям проходит после оплаты на ЕНС, поэтому
	// учитываем сумму по заявлениям и совершенные оплаты, которые были сделаны после подачи заявлений о резерве.
	
	КрайняяДатаПодачиЗаявления = '00010101';
	Для Каждого ТекущееЗаявление Из УведомленияОбИсчисленныхНалогах Цикл
		Если Не ЗначениеЗаполнено(ТекущееЗаявление.Уведомление)
			Или ТипЗнч(ТекущееЗаявление.Уведомление) <> Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
			
			Продолжить;
		КонецЕсли;
		ТекущееЗаявлениеДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееЗаявление.Уведомление, "Дата");
		Если ЗначениеЗаполнено(ТекущееЗаявлениеДата) И КрайняяДатаПодачиЗаявления < ТекущееЗаявлениеДата Тогда
			КрайняяДатаПодачиЗаявления = ТекущееЗаявлениеДата;
		КонецЕсли;
	КонецЦикла;
	
	СуммаОплатПослеЗаявлений = 0;
	Для Каждого ТекущийПлатеж Из ПлатежиЕНП Цикл
		Если КрайняяДатаПодачиЗаявления < ТекущийПлатеж.Дата Тогда
			СуммаОплатПослеЗаявлений = СуммаОплатПослеЗаявлений + ТекущийПлатеж.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// Оставляем к оплате сумму, которую осталось заплатить на ЕНС по конкретному виду взноса
	Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
		Объект.СуммаЕНП = СуммаВзносаПФРсДоходовВсего - ЗачтеноРанееПоВзносамСДоходов - СуммаОплатПослеЗаявлений;
	Иначе
		Объект.СуммаЕНП = СуммаВзносаЕдиныйТарифВсего - ЗачтеноРанееПоЕдиномуТарифу - СуммаОплатПослеЗаявлений;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		
		АктуализацияДляРасчетаНалога = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
		
	ИначеЕсли ТребуетсяАктуализироватьРасчетВзносов И Не ДанныеУчетаАктуальны Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_АктуализироватьРасчетВзносов", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		АктуализацияДляРасчетаНалога = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецПериода(Объект.Период, Периодичность);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если АктуализацияДляРасчетаНалога
	   И Не ЗаданиеЗапущеноВДругойФорме
	   И ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.Период) Тогда
	   
		АктуализироватьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);

	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ИдентификаторЗаданияАктуализации = Неопределено;
		
		Если ПлательщикЕНП Тогда
			Период = КонецГода(Объект.Период);
		Иначе
			Период = КонецКвартала(Объект.Период);
		КонецЕсли;
		
		ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
		ПараметрыАктуализации.Организация                  = Объект.Организация;
		ПараметрыАктуализации.Период                       = Период;
		ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
		ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыАктуализации.АктуализацияДляРасчетаНалога = АктуализацияДляРасчетаНалога;
		ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
		
		РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
		
		АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
		
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда
			ИдентификаторЗаданияАктуализации = Неопределено;
			ОбработатьРезультатАктуализации();
		Иначе
			ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		КонецЕсли;
	Иначе
		ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных",
		ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		
		РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
		УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
		АдресХранилищаАктуализации = "";
		
		Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
		 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
			ПроведенАнализВариантаАктуализации = Ложь;
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		Иначе
			ПроведенАнализВариантаАктуализации = АктуализацияДляРасчетаНалога
				И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
			АктуализацияДляРасчетаНалога = РезультатАктуализации.АктуализацияДляРасчетаНалога;
		КонецЕсли;
		
	Иначе
	
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();

	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ПересчитатьРеквизитыЕНС();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		КонецЕсли;
		
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
