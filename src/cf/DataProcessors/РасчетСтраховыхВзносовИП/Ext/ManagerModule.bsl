#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	ПараметрыЗадач.Колонки.Добавить("ИдентификаторПравила",
		ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ДлинаНаименования));
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплатыВзносов(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив видов налогов, которые соответствуют страховым взносам для организации.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Организация, для которой нужно определить виды налогов.
//  Период		 - Дата - Период, на который нужно определить виды налогов.
// 
// Возвращаемое значение:
//   - Массив значений Перечисления.ВидыНалогов - список видов налогов, который соответствует страховым взносам.
//
Функция ВидыНалоговПоСтраховымВзносам(Организация, Период) Экспорт
	
	ВидыНалогов = Новый Массив;
	Если Период < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	Иначе
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела);
	КонецЕсли;
	Если УчетнаяПолитика.ПлательщикНПДЗаПериод(Организация, НачалоГода(Период), КонецГода(Период)) Тогда
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные);
	КонецЕсли;
	Если УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период) Тогда
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	КонецЕсли;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	Возврат ВидыНалогов;
	
КонецФункции

// Проверяет, относится ли переданный налог к фиксированным страховым взносам ИП.
//
// Параметры:
//  Налог  - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - проверяемый налог.
//
// Возвращаемое значение:
//   Булево  - если Истина, налог относится к фиксированным страховым взносам ИП.
//
Функция ЭтоФиксированныеВзносы(Налог) Экспорт
	
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога)
		Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоЕдиныйНалоговыйПлатеж(ВидНалога);
	
КонецФункции

Функция СведенияОбОрганизации(Организация, Период) Экспорт
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("Организация",             Организация);
	Сведения.Вставить("ДатаНачалаДеятельности",  КалендарьБухгалтера.ДатаНачалаДеятельности(Организация));
	Сведения.Вставить("ГодНачалаДеятельности",   Год(Сведения.ДатаНачалаДеятельности));
	Сведения.Вставить("ГодТекущий",              Год(Период));
	Сведения.Вставить("РегистрацияВЭтомГоду",    Ложь);
	Сведения.Вставить("РегистрацияВПрошломГоду", Ложь);
	Сведения.Вставить("РегистрацияДо3Лет",       Ложь);
	Сведения.Вставить("РегистрацияБолее3Лет",    Ложь);
	Сведения.Вставить("ФНС_Наименование",        "");
	Сведения.Вставить("ФНС_Телефоны",            "");
	Сведения.Вставить("ФНС_Адрес",               "");
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачалаИспользованияЭДО = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	Сведения.Вставить("Подключена1СОтчетность", ЗначениеЗаполнено(ДатаНачалаИспользованияЭДО)
		И ДатаНачалаИспользованияЭДО <= Период);
	
	Сведения.Вставить("СостояниеПомощника",
		РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация).Состояние);
	
	ПрошлоЛетСРегистрации = Сведения.ГодТекущий - Сведения.ГодНачалаДеятельности;
	
	Если ПрошлоЛетСРегистрации = 0 Тогда
		Сведения.РегистрацияВЭтомГоду = Истина;
	ИначеЕсли ПрошлоЛетСРегистрации = 1 Тогда
		Сведения.РегистрацияВПрошломГоду = Истина;
	ИначеЕсли (ПрошлоЛетСРегистрации > 1 И ПрошлоЛетСРегистрации <= 3) Тогда
		Сведения.РегистрацияДо3Лет = Истина;
	Иначе
		Сведения.РегистрацияБолее3Лет = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сведения, ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Организация));
	
	Возврат Сведения;
	
КонецФункции

Процедура НачислитьВзносыЗаПрошлыеГодыВФоне(Параметры, АдресРезультата) Экспорт
	
	Период           = Параметры.Период;
	Организация      = Параметры.Организация;
	Пользователь     = Параметры.Пользователь;
	СсылкаНаОперацию = Параметры.СсылкаНаОперацию;
	СтраховыеВзносы  = Параметры.СтраховыеВзносы;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	
	Если ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
		ОперацияБУ = СсылкаНаОперацию.ПолучитьОбъект();
	Иначе
		ОперацияБУ = Документы.ОперацияБух.СоздатьДокумент();
	КонецЕсли;
	
	ОперацияБУ.Дата          = Период;
	ОперацияБУ.Организация   = Организация;
	ОперацияБУ.Ответственный = Пользователь;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	ОперацияБУ.Содержание = ТекстСодержания;
	
	ТекстКомментария = СтрШаблон(
		Нстр("ru = '#Создан автоматически обработкой ""Уплата фиксированных страховых взносов"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
	ОперацияБУ.Комментарий = ТекстКомментария;
	
	ОперацияБУ.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
	ОперацияБУ.ДополнительныеСвойства.Вставить("НеПроверятьОграничения", Истина);
	ОперацияБУ.Записать(РежимЗаписиДокумента.Запись);
	
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБУ.Ссылка, Истина);
	Для Каждого СтрокаСтраховыеВзносы Из СтраховыеВзносы Цикл
		
		Проводка = Набор.Добавить();
		
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Период      = Период;
		Проводка.СчетДт      = СтрокаСтраховыеВзносы.СчетДт;
		Проводка.СчетКт      = СтрокаСтраховыеВзносы.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			СтрокаСтраховыеВзносы.ИмяСубконтоДт,
			СтрокаСтраховыеВзносы.ЗначениеСубконтоДт);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			СтрокаСтраховыеВзносы.ИмяСубконтоКт,
			СтрокаСтраховыеВзносы.ЗначениеСубконтоКт);
		Проводка.Сумма       = СтрокаСтраховыеВзносы.Сумма;
		Проводка.Содержание  = СтрокаСтраховыеВзносы.Содержание;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
	ПоместитьВоВременноеХранилище(ОперацияБУ.Ссылка, АдресРезультата);
	
	СохранитьСостоянияПомощника(Параметры);
	
КонецПроцедуры

Процедура УдалитьВзносыЗаПрошлыеГодыВФоне(Параметры, АдресРезультата) Экспорт
	
	СсылкаНаОперацию = Параметры.СсылкаНаОперацию;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	
	Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
		Возврат;
	КонецЕсли;
		
	ОперацияБУ = СсылкаНаОперацию.ПолучитьОбъект();
	ОперацияБУ.УстановитьПометкуУдаления(Истина);
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБУ.Ссылка, Истина);
	Набор.Записать(Истина);
	
	Параметры.СсылкаНаОперацию = Неопределено;
	СохранитьСостоянияПомощника(Параметры);
	
КонецПроцедуры

Функция ДолгиПоВзносам(Организация, Период) Экспорт
	
	ВидыНалоговыхПлатежей = Новый Массив;
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	
	СчетаВзносовИП = Новый Массив;
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидПлатежа,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки");
	Запрос.УстановитьПараметр("Период", Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует описание таблицы налогов по переданным параметрам
//
// Параметры:
//  Параметры - Структура
//     * Организация - СправочникСсылка.Организация
//     * ПериодСобытия - Дата
//     * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * УникальныйИдентификатор - УникальныйИдентификатор
// Возвращаемое значение:
//   Строка - адрес на временное хранилище, в котором хранится таблица налогов
//
Функция ОписаниеТаблицыНалоги(Параметры) Экспорт
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Правило = Параметры.Правило;
	Организация = Параметры.Организация;
	ПериодСобытия = Параметры.ПериодСобытия;
	
	КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ОсновнаяРегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяРегистрацияВНалоговомОргане, "КПП");
	Параметры.Вставить("НачалоПериода",
		ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия));
	Параметры.Вставить("КонецПериода",
		ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия));
	
	ОписаниеНовойСтрокиТаблицыНалоги(ТаблицаНалоги,
		Параметры.СуммаВзносаПФР,
		Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
		Параметры,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Если ПериодСобытия < ПлатежиВБюджетКлиентСерверПереопределяемый.ПериодИзмененияСтраховыхВзносов() Тогда
		ОписаниеНовойСтрокиТаблицыНалоги(ТаблицаНалоги,
			Параметры.СуммаВзносаПФРсДоходов,
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
			Параметры,
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Иначе
		ОписаниеНовойСтрокиТаблицыНалоги(ТаблицаНалоги,
			Параметры.СуммаВзносаПФРсДоходов,
			Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела,
			Параметры,
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	КонецЕсли;
	
	ОписаниеНовойСтрокиТаблицыНалоги(ТаблицаНалоги,
		Параметры.СуммаВзносаФФОМС,
		Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС,
		Параметры,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	ОписаниеНовойСтрокиТаблицыНалоги(ТаблицаНалоги,
		Параметры.СуммаВзносаЕдиныйТариф,
		Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф,
		Параметры,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);

	ТаблицаНалоги.ЗаполнитьЗначения(ОсновнаяРегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане");
	ТаблицаНалоги.ЗаполнитьЗначения(КодПоОКТМО,                          "КодПоОКТМО");
	
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицаНалоги.Свернуть("РегистрацияВНалоговомОргане, КодПоОКТМО, Налог, КодБК, СчетУчета, СрокУплаты, НачалоПериода, КонецПериода", "Сумма");
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, Параметры.УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

#Область ПубликацияДанных

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Уплата фиксированных страховых взносов'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Уплата фиксированных страховых взносов.'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.РасчетСтраховыхВзносовИП;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ПубликуемыеДанныеПомощника(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	Если ДанныеОтчета <> Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "self_insurance_payments";
	
КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//  Период -Дата - дата в квартале, за который требуются публикуемые данные.
//
// Возвращаемое значение:
//   Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	Настройки.Вставить("date", Период);
	
	Возврат Настройки;
	
КонецФункции

// Рассчитывает сумму взноса к уплате при запросе реквизитов платежа в бюджет через внешний программный интерфейс.
//
// Параметры:
//   ПараметрыРасчета - Структура - параметры для расчета суммы налога к уплате,
//                      состав см. ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате().
//
// Возвращаемое значение:
//   Число - сумма взноса к уплате.
//
Функция СуммаНалогаКУплате(ПараметрыРасчета) Экспорт
	
	Организация                = ПараметрыРасчета.Организация;
	НалоговыйПериод            = ПараметрыРасчета.НалоговыйПериод;
	ВидНалога                  = ПараметрыРасчета.ВидНалога;
	ВидНалоговогоОбязательства = ПараметрыРасчета.ВидНалоговогоОбязательства;
	ПерешлиНаЕдиныйТариф = НалоговыйПериод >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	
	ПоддерживаемыеВидыНалогов = ВидыНалоговПоСтраховымВзносам(Организация, НалоговыйПериод);
	Если ПоддерживаемыеВидыНалогов.Найти(ВидНалога) = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, НалоговыйПериод);
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Организация, НалоговыйПериод, Периодичность);
	
	Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
		И ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела
		Или ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов;
	ИначеЕсли Не ПерешлиНаЕдиныйТариф И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаПФР;
	ИначеЕсли Не ПерешлиНаЕдиныйТариф И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаФФОМС;
	ИначеЕсли ПерешлиНаЕдиныйТариф И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаЕдиныйТариф;
	ИначеЕсли Не ПерешлиНаЕдиныйТариф И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаФСС;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УточнитьСрокУплатыВзносовСвышеПредела(СрокУплаты) Экспорт
	
	Если Не ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецМесяца(СрокУплаты) = КонецГода(СрокУплаты)
		Или КонецМесяца(СрокУплаты) = КонецКвартала(СрокУплаты) Тогда
		
		СрокУплаты = УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(
			СрокУплаты,
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьСрокУплатыВзносовЕдиныйТариф(СрокУплаты) Экспорт
	
	Если Не ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат;
	КонецЕсли;
	
	СрокУплаты = УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(СрокУплаты);
	
КонецПроцедуры

Функция ПорядокУплатыСтраховыхВзносов(Организация, ПериодСобытия) Экспорт
	
	Возврат ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
		Организация,
		ПериодСобытия,
		Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
	
КонецФункции

Функция СозданныеДокументыОтраженияНаЕНС(Организация, Период, Знач Правило = Неопределено) Экспорт
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Уведомление", Новый ОписаниеТипов(ТипыДокументов));
	Результат.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	УпрощенныйЗачетВзносов = УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, Период);
	
	Если ЗначениеЗаполнено(Правило) И УпрощенныйЗачетВзносов Тогда
		
		// При упрощенном порядке показываем справочно в переходном периоде заявления, которые были созданы ранее в налоговом периоде
		
		ВидНалога = ВидНалогаПоПравилу(Правило);
		Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
			НалоговыйПериод = НачалоГода(НачалоГода(Период) - 1);
		Иначе
			НалоговыйПериод = НачалоГода(Период);
		КонецЕсли;
		
		ЗачтенныеРанееСуммыВзносов = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговПоДокументамЗаПериод(
			Организация,
			НалоговыйПериод,
			Период,
			ВидНалога);
		ЗачтенныеРанееСуммыВзносов.Свернуть("Уведомление, Дата, Сумма");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗачтенныеРанееСуммыВзносов, Результат);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Правило) Тогда
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
			Организация,
			КонецКвартала(Период),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
		
		Правило = ПорядокУплаты.Правило;
	КонецЕсли;
	
	ПериодСобытия = НачалоДня(Период);
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	
	Если Не УпрощенныйЗачетВзносов Тогда
		// Для ИП на УСН доходы-расходы и ИП на ОСНО взносы оплачиваются поквартально и через подачу заявления о зачете сумм на ЕНС
		// Уменьшение налога проиходит только после совершения расхода
		МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуУплаты(Правило, Организация, ПериодСобытия));
		МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило, Организация, ПериодСобытия));
		МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоУплатыПоПравилуОтчета(Правило, Организация, ПериодСобытия));
		МассивПравилУведомлений.Добавить(ВыполнениеЗадачБухгалтера.ПравилоОтчетаПоПравилуУплаты(Правило, Организация, ПериодСобытия));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(МассивПравилУведомлений, Организация, ПериодСобытия),
		Результат);
	
	Результат.Свернуть("Дата, Уведомление", "Сумма");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСтраховыеВзносыКУплате() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СуммаВзносаПФР", 0);
	Результат.Вставить("СуммаВзносаПФРсДоходов", 0);
	Результат.Вставить("СуммаВзносаФФОМС", 0);
	Результат.Вставить("СуммаВзносаЕдиныйТариф", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу для вызова обработки формирования платежных поручений
//
Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(Организация, Период, СуммыКУплате, ПлательщикЕНП) Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	Если ПлательщикЕНП Тогда
		
		Если СуммыКУплате.СуммаЕНП <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаЕНП;
		КонецЕсли;
		
	Иначе
		
		// 69.06.5, ФиксированныеСтраховыеВзносы
		Если СуммыКУплате.СуммаВзносаПФР <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаПФР;
		КонецЕсли;
		
		// 69.05.1, Добровольные взносы в ПФР
		Если СуммыКУплате.СуммаВзносаПФРДобровольно <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ДОБР_орг;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаПФРДобровольно;
		КонецЕсли;
		
		// 69.06.5, СтраховыеВзносыСДоходов
		Если СуммыКУплате.СуммаВзносаПФРсДоходов <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаПФРсДоходов;
		КонецЕсли;
		
		// 69.06.3
		Если СуммыКУплате.СуммаВзносаФФОМС <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаФФОМС;
		КонецЕсли; 
		
		// 69.06.6
		Если СуммыКУплате.СуммаВзносаЕдиныйТариф <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаЕдиныйТариф;
		КонецЕсли;
		
	КонецЕсли;
	
	// 69.06.4
	Если СуммыКУплате.СуммаВзносаФСС <> 0 И Не ПлательщикЕНП Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаФСС;
	КонецЕсли;
	
	Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
		ТаблицаПлатежей, Организация, Период);
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

// Возвращает список документов на уплату взносов, отображаемых в помощнике
//
// Параметры:
//   Организация   - СправочникСсылка.Организации
//   Период        - Дата - период уплаты
//   Периодичность - ПеречислениеСсылка.Периодичность - Периодичность задачи оплаты страховых взносов ИП
//   Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило уплаты налога
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ПлатежныеДокументы(Организация, Период, Периодичность = Неопределено, Правило = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ВидыНалогов, ВидыНалоговПоСтраховымВзносам(Организация, Период), Истина);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ТипыДокументов, ПоддерживаемыеТипыПлатежныхДокументов());
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
			Организация,
			Период);
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
	Иначе
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	КонецПериода = КонецДня(Период);
	
	ВыбратьОплатыПриУпрощенномПорядкеВзносов = ЗначениеЗаполнено(Правило)
		И УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, КонецПериода);
	
	Если ВыбратьОплатыПриУпрощенномПорядкеВзносов Тогда
		ПараметрыУплатыНалогов.Правило = Правило;
	КонецЕсли;
	
	Результат = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
	Если ВыбратьОплатыПриУпрощенномПорядкеВзносов Тогда
		
		// Для переходного периода, когда в течение года были оплаты и зачет оплаченных сумм по заявлениям нужно также отразить документы оплаты
		ВидНалога = ВидНалогаПоПравилу(Правило);
		
		ЗачтенныеРанееСуммыВзносов = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговПоДокументамЗаПериод(
			Организация,
			НачалоПериода,
			КонецПериода,
			ВидНалога);
		
		// Колонки для отображения ссылок на платежные документы в форме помощника
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("ПредставлениеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(255));
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("ПоказательПериода", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		ЗачтенныеРанееСуммыВзносов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(11));
		
		ЗачтенныеРанееСуммыВзносов.ЗаполнитьЗначения(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж, "ВидНалога");
		ЗачтенныеРанееСуммыВзносов.ЗаполнитьЗначения(Период, "Период");
		Результат.Индексы.Добавить("Ссылка");
		
		Для Каждого ТекущаяСтрока Из ЗачтенныеРанееСуммыВзносов Цикл
			
			СсылкаНаДокумент = ТекущаяСтрока.Ссылка;
			ТипДокумента = ТипЗнч(СсылкаНаДокумент);
			
			Если ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				// Пробуем найти связанное платежное поручение, если не получается, тогда выводим в помощник списание
				РеквизитыДокументаОплаты = "Дата, Номер, НомерВходящегоДокумента, ВидНалоговогоОбязательства, ДокументОснование";
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Ссылка, РеквизитыДокументаОплаты);
				Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументОснование) Тогда
					// Списание связано с платежным поручением - выводим его в помощник
					СсылкаНаДокумент = ЗначенияРеквизитов.ДокументОснование;
					РеквизитыДокументаОплаты = "Дата, Номер, ПоказательПериода, ВидНалоговогоОбязательства";
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, РеквизитыДокументаОплаты)
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение")
				Или ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				
				РеквизитыДокументаОплаты = "Дата, Номер, НомерВходящегоДокумента, ПоказательПериода, ВидНалоговогоОбязательства";
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, РеквизитыДокументаОплаты);
			Иначе
				// Корректировка счета - не показываем в помощнике ручные операции
				Продолжить;
			КонецЕсли;
			
			Если Результат.Найти(СсылкаНаДокумент, "Ссылка") = Неопределено Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияРеквизитов);
				
				ПараметрыПредставления = Новый Структура("Ссылка, Дата, Номер, Сумма, Оплачено, Состояние, НомерВходящегоДокумента");
				ЗаполнитьЗначенияСвойств(ПараметрыПредставления, НоваяСтрока);
				
				НоваяСтрока.ПредставлениеДокумента = ПомощникиПоУплатеНалоговИВзносов.ПредставлениеДокументаОплаты(
					ПараметрыПредставления);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоддерживаемыеТипыПлатежныхДокументов()
	
	ПоддерживаемыеТипы = Новый Массив;
	
	ПоддерживаемыеТипы.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ПоддерживаемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Возврат ПоддерживаемыеТипы;
	
КонецФункции

Процедура СохранитьСостоянияПомощника(Параметры)
	
	ДанныеРегистра = Новый Структура;
	ДанныеРегистра.Вставить("Организация",       Параметры.Организация);
	ДанныеРегистра.Вставить("Состояние",         Параметры.Состояние);
	ДанныеРегистра.Вставить("НачислениеВзносов", Параметры.СсылкаНаОперацию);
	ДанныеРегистра.Вставить("ЗапросСправки",     Параметры.ЗапросСправки);
	
	РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.СохранитьСостояниеПомощника(ДанныеРегистра);
	
КонецПроцедуры

Функция СтатусУплатыВзносов(ПараметрыЗадачи)
	
	Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
		Возврат ПараметрыЗадачи.РучнойСтатус;
	КонецЕсли;
	
	Статус = "";
	
	Организация          = ПараметрыЗадачи.Организация;
	ПериодСобытия        = ПараметрыЗадачи.ПериодСобытия;
	ИдентификаторПравила = ПараметрыЗадачи.ИдентификаторПравила;
	ПлательщикЕНП        = УчетнаяПолитика.ПлательщикЕНП(Организация, ПериодСобытия);
	
	НачалоПериода = НачалоКвартала(ПериодСобытия);
	КонецПериода  = КонецКвартала(ПериодСобытия);
	
	УчитыватьВзносыСДоходов = (ИдентификаторПравила = ВыполнениеЗадачБухгалтера.ИдентификаторПравилаСтраховыеВзносыИПСДоходов());
	
	// Платежи
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ВидыНалогов, ВидыНалоговПоСтраховымВзносам(Организация, ПериодСобытия), Истина);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Если УчитыватьВзносыСДоходов Тогда
		ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	КонецЕсли;
	
	УпрощенныйЗачетВзносов = УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, ПериодСобытия);
	
	Если ЗначениеЗаполнено(ПараметрыЗадачи.Правило) И УпрощенныйЗачетВзносов Тогда
		// Каждый вид налога оплачивается отдельно по сроку
		ПараметрыУплатыНалогов.Правило = ПараметрыЗадачи.Правило;
	КонецЕсли;
	
	Платежи = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
	ПлатежиПоВзносам = РазделитьПлатежиПоВидамВзносов(Платежи);
	
	// Расчетные суммы "постоянных" фиксированных взносов
	
	ФиксированныеВзносы = УчетСтраховыхВзносовИП.РассчитатьФиксированныеСтраховыеВзносы(КонецПериода, Организация);
	
	ОстаткиРасчетовПоВзносам = УчетСтраховыхВзносовИП.ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(
		Организация,
		НачалоПериода);
	
	// Состояние оплаты "постоянных" фиксированных взносов
	
	ВсегоКУплате = 0;
	СтатусыПлатежей = Новый Массив;
	КоличествоПлатежейКОплатеЕНС = 0;
	КоличествоПлатежейКОплатеНеЕНС = 0;
	
	Если Не (УпрощенныйЗачетВзносов И УчитыватьВзносыСДоходов) Тогда
		
		Для Каждого КлючИЗначение Из ВсеФиксированныеВзносы() Цикл
			
			Если Не ФиксированныеВзносы.Свойство(КлючИЗначение.Ключ) Или (КлючИЗначение.Ключ = "ФСС" И ПлательщикЕНП) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидВзноса = КлючИЗначение.Ключ;
			
			ТаблицаПлатежей = ПлатежиПоВзносам["Платежи" + ВидВзноса];
			
			Начислено = ФиксированныеВзносы[ВидВзноса];
			Переплата = Макс(0, ОстаткиРасчетовПоВзносам[ВидВзноса]);
			ПлатежПоВзносу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПлатежиПоВзносам,
				ИдентификаторПлатежейПоВидуВзноса(ВидВзноса, ПлательщикЕНП));
			Оплачено  = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ТаблицаПлатежей);
			
			КУплате   = Макс(0, Начислено - Переплата - Оплачено);
			
			ВсегоКУплате = ВсегоКУплате + КУплате;
			
			Если Начислено > 0 Тогда
				Если ВидВзноса= "ФСС" И ТаблицаПлатежей.Количество() = 0 Тогда
					// Платежное поручение в ФСС контролируется отдельно, тк оно оплачивается по отдельным реквизитам не на ЕНС
					КоличествоПлатежейКОплатеНеЕНС = КоличествоПлатежейКОплатеНеЕНС + 1;
				Иначе
					КоличествоПлатежейКОплатеЕНС = КоличествоПлатежейКОплатеЕНС + 1;
				КонецЕсли;
			КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтатусыПлатежей, ТаблицаПлатежей.ВыгрузитьКолонку("Состояние"));
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОплаченоПоЕНС = 0;
	Если ПлательщикЕНП Тогда
		
		ВидНалога = УчетСтраховыхВзносовИП.ВидСтраховогоВзносаИП(УчитыватьВзносыСДоходов);
		
		// Считаем, что взнос оплачен, если проведено заявление о зачете страховых взносов
		Оплачено = ЕдиныйНалоговыйСчет.ЗарезервированнаяСуммаЗаПериод(Организация,
			НачалоГода(ПериодСобытия),
			КонецДня(ПериодСобытия),
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога));
		
		Если Оплачено <> 0 Тогда
			ОплаченоПоЕНС = Макс(0, Оплачено - ВсегоКУплате);
			ВсегоКУплате = Макс(0, ВсегоКУплате - Оплачено);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПлатежиПоВзносам, "ПлатежиЕНП") <> Неопределено Тогда
			// В случае если заявление о зачете отсутствует, вычислим статус по фактическим платежам
			ТаблицаПлатежейЕНП = ПлатежиПоВзносам["ПлатежиЕНП"];
			Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ТаблицаПлатежейЕНП);
			Если Оплачено <> 0 Тогда
				ОплаченоПоЕНС = Макс(0, Оплачено - ВсегоКУплате);
				ВсегоКУплате = Макс(0, ВсегоКУплате - Оплачено);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтатусыПлатежей, ТаблицаПлатежейЕНП.ВыгрузитьКолонку("Состояние"));
		КонецЕсли;
		
		// В случае если заявление о зачете отсутствует, вычислим статус по фактическим платежам
		ТаблицаПлатежейЕНП = ПлатежиПоВзносам["ПлатежиЕНП"];
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтатусыПлатежей, ТаблицаПлатежейЕНП.ВыгрузитьКолонку("Состояние"));
		
	КонецЕсли;
	
	КоличествоПлатежей = Макс(СтатусыПлатежей.Количество(), КоличествоПлатежейКОплатеЕНС) + КоличествоПлатежейКОплатеНеЕНС;
	Статус = ПомощникиПоУплатеНалоговИВзносов.СтатусОплаты(СтатусыПлатежей, КоличествоПлатежей);
	
	// Статус годовой задачи по взносам с доходов определяется исходя из уплаты всех взносов -
	// и "постоянной" части, и взносов с доходов.
	// При этом, если определили, что постоянная часть взносов не оплачена,
	// то состояние оплаты взносов с доходов на статус уже не повлияет.
	
	Если УчитыватьВзносыСДоходов И ВсегоКУплате = 0 Тогда
		
		Начислено = УчетСтраховыхВзносовИП.ВзносСДоходовПодлежащийУплатеЗаПериод(Организация, НачалоПериода, КонецПериода);
		
		Если ПлательщикЕНП Тогда
			Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ПлатежиПоВзносам.ПлатежиЕНП);
		Иначе
			Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ПлатежиПоВзносам.ПлатежиПФРсДоходов);
		КонецЕсли;
		
		КУплате = Макс(0, Начислено - Оплачено);
		
		ВсегоКУплате = ВсегоКУплате + КУплате;
		
	КонецЕсли;
	
	Если ОплаченоПоЕНС <> 0 Тогда
		ВсегоКУплате = Макс(0, ВсегоКУплате - ОплаченоПоЕНС);
	КонецЕсли;
	
	Если ВсегоКУплате > 0 
		И Статус = Строка(Перечисления.СостоянияБанковскихДокументов.Оплачено) Тогда
		// Все платежки оплачены, но еще остался налог к уплате
		Статус = "";
	ИначеЕсли ВсегоКУплате = 0 Тогда
		Статус = Строка(Перечисления.СостоянияБанковскихДокументов.Оплачено)
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция РазделитьПлатежиПоВидамВзносов(Платежи) Экспорт
	
	Результат = Новый Структура(
		"ПлатежиПФР,
		|ПлатежиПФРДобровольно,
		|ПлатежиПФРсДоходов,
		|ПлатежиФФОМС,
		|ПлатежиФСС,
		|ПлатежиЕдиныйТариф,
		|ПлатежиЕНП");
	
	Если ТипЗнч(Платежи) <> Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = ПараметрыОтбораПлатежейПоВзносам();
	
	Результат.ПлатежиПФР = Платежи.Скопировать(Отбор.ПФР);
	Результат.ПлатежиПФРДобровольно = Платежи.Скопировать(Отбор.ПФРДобровольно);
	Результат.ПлатежиПФРсДоходов = Платежи.Скопировать(Отбор.ПФРсДоходов);
	Результат.ПлатежиПФРсДоходов = Платежи.Скопировать(Отбор.ПФРсДоходов2023);
	Результат.ПлатежиФФОМС = Платежи.Скопировать(Отбор.ФФОМС);
	Результат.ПлатежиЕдиныйТариф = Платежи.Скопировать(Отбор.ЕдиныйТариф);
	Результат.ПлатежиФСС = Платежи.Скопировать(Отбор.ФСС);
	Результат.ПлатежиЕНП = Платежи.Скопировать(Отбор.ЕНП);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОтбораПлатежейПоВзносам()
	
	Результат = Новый Структура;
	
	// ПФР
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ПФР", Свойства);
	
	// ПФР с доходов
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	Результат.Вставить("ПФРсДоходов", Свойства);
	
	// ПФР с доходов
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела);
	
	Результат.Вставить("ПФРсДоходов2023", Свойства);
	
	// ПФР добровольные
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ПФРДобровольно", Свойства);
	
	// ФФОМС
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ФФОМС", Свойства);
	
	// Единый тариф
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ЕдиныйТариф", Свойства);
	
	// ФСС
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ФСС", Свойства);
	
	// ЕНП
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	Результат.Вставить("ЕНП", Свойства);
	
	Возврат Результат;
	
КонецФункции

Функция СтраховыеВзносыКУплате(Знач Организация, Знач НалоговыйПериод, Знач Периодичность, Знач Правило = Неопределено) Экспорт
	
	СтраховыеВзносы = Новый Структура(СвойстваВзносыКУплате() + ", " + СвойстваВзносыНачисленоУплачено());
	СтраховыеВзносы.ПредельнаяСуммаВзноса = Ложь;
	СтраховыеВзносы.СуммаВзносаПФРсДоходов = 0;
	СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего = 0;
	СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено = 0;
	СтраховыеВзносы.Вставить("СтруктураДоходов", Новый Структура); // Данные для расчета взноса с доходов
	СтраховыеВзносы.Вставить("СтраховыеВзносыСДоходовУплаченные"); // Данные для уплаченных взносов с доходов
	СтраховыеВзносы.Вставить("ФиксированныеСтраховыеВзносыУплаченные"); // Данные по оплаченным взносам по единому тарифу/фиксированные взносы
	
	Если УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, НалоговыйПериод)
		И ЗначениеЗаполнено(Правило) Тогда
		
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило) Тогда
			
			РассчитатьСтраховыеВзносыСДоходов(СтраховыеВзносы, Организация, НалоговыйПериод);
			
			СтраховыеВзносы.ЗачтеноРанееПоВзносамСДоходов = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговПоДокументамЗаПериод(
				Организация,
				НачалоГода(НалоговыйПериод),
				НалоговыйПериод,
				Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела).Итог("Сумма");
			
			СуммаЕНП = СтраховыеВзносы.СуммаВзносаПФРсДоходов;
			
		Иначе
			
			// Взносы по единому тарифу
			ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
				Организация, НалоговыйПериод, Периодичность);
			
			ЗаполнитьЗначенияСвойств(СтраховыеВзносы, ФиксированныеСтраховыеВзносыКУплате);
			СтраховыеВзносы.ФиксированныеСтраховыеВзносыУплаченные = ФиксированныеСтраховыеВзносыКУплате.СтраховыеВзносыУплаченные;
			
			СтраховыеВзносы.ЗачтеноРанееПоЕдиномуТарифу = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговПоДокументамЗаПериод(
				Организация,
				НачалоГода(НалоговыйПериод),
				НалоговыйПериод,
				Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф).Итог("Сумма");
			
			СуммаЕНП = СтраховыеВзносы.СуммаВзносаЕдиныйТариф;
			
		КонецЕсли;
		
	Иначе
		
		// Фиксированная часть страховых взносов
		ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
			Организация, НалоговыйПериод, Периодичность);
		
		ЗаполнитьЗначенияСвойств(СтраховыеВзносы, ФиксированныеСтраховыеВзносыКУплате);
		
		СтраховыеВзносы.ФиксированныеСтраховыеВзносыУплаченные = ФиксированныеСтраховыеВзносыКУплате.СтраховыеВзносыУплаченные;
		
		СтраховыеВзносы.ЗачтеноРанееПоЕдиномуТарифу = 0;
		СтраховыеВзносы.ЗачтеноРанееПоВзносамСДоходов = 0;
		
		РассчитатьСтраховыеВзносыСДоходов(СтраховыеВзносы, Организация, НалоговыйПериод);
		
		СуммаЕНП = СтраховыеВзносы.СуммаВзносаПФР
			+ СтраховыеВзносы.СуммаВзносаПФРсДоходов
			+ СтраховыеВзносы.СуммаВзносаФФОМС
			+ СтраховыеВзносы.СуммаВзносаЕдиныйТариф;
		
		Если УчетнаяПолитика.ПлательщикЕНП(Организация, НалоговыйПериод) Тогда
			// Показываем сумму пополнения ЕНС в текущем периоде с учетом зарезервированных сумм в предыдущих кварталах
			// Не учитываем зарезервированные в данном квартале суммы -
			// в помощнике необходимо показывать начисленные взносы за текущий квартал.
			// В мониторе налогов и отчетов показываем сумму, актуальную на текущий момент с учетом зарезервированных сумм
			СозданныеЗаявления = СозданныеДокументыОтраженияНаЕНС(Организация, НалоговыйПериод);
			
			Если ОбщегоНазначенияБПКлиентСервер.НомерКвартала(НалоговыйПериод) = 1 Тогда
				// В первом квартале не может быть уплаченных ранее взносов
				СтраховыеВзносы.ФиксированныеСтраховыеВзносыУплаченные.Очистить();
				СтраховыеВзносы.СуммаВзносаЕдиныйТариф = СтраховыеВзносы.СуммаВзносаЕдиныйТарифНачислено;
				СтраховыеВзносы.СтраховыеВзносыСДоходовУплаченные = Неопределено;
				СтраховыеВзносы.СуммаВзносаПФРсДоходов = СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего;
				СтраховыеВзносы.СуммаВзносаЕдиныйТарифУплачено = 0;
				СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено = 0;
			Иначе
				Для Каждого ТекущаяСтрока Из СозданныеЗаявления Цикл
					
					НайденнаяСтрока = СтраховыеВзносы.ФиксированныеСтраховыеВзносыУплаченные.Найти(ТекущаяСтрока.Уведомление, "ДокументОплаты");
					Если НайденнаяСтрока <> Неопределено Тогда
						СтраховыеВзносы.СуммаВзносаЕдиныйТарифУплачено =
							СтраховыеВзносы.СуммаВзносаЕдиныйТарифУплачено - НайденнаяСтрока.Сумма;
						СтраховыеВзносы.СуммаВзносаЕдиныйТариф = СтраховыеВзносы.СуммаВзносаЕдиныйТарифНачислено
							- СтраховыеВзносы.СуммаВзносаЕдиныйТарифУплачено;
						СтраховыеВзносы.ФиксированныеСтраховыеВзносыУплаченные.Удалить(НайденнаяСтрока);
					КонецЕсли;
					
					НайденнаяСтрока = СтраховыеВзносы.СтраховыеВзносыСДоходовУплаченные.Найти(ТекущаяСтрока.Уведомление, "ДокументОплаты");
					Если НайденнаяСтрока <> Неопределено Тогда
						СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено =
							СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено - НайденнаяСтрока.Сумма;
						СтраховыеВзносы.СуммаВзносаПФРсДоходов =
							СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего - СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено;
						СтраховыеВзносы.СтраховыеВзносыСДоходовУплаченные.Удалить(НайденнаяСтрока);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	СтраховыеВзносы.СуммаЕНП = СуммаЕНП;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция СвойстваВзносыКУплате() Экспорт
	
	Возврат "СуммаВзносаПФР,
		|СуммаВзносаПФРДобровольно,
		|КоэффициентПФРДобровольно,
		|СуммаВзносаПФРсДоходов,
		|СуммаВзносаФФОМС,
		|СуммаВзносаФСС,
		|СуммаВзносаЕдиныйТариф,
		|СуммаЕНП";
	
КонецФункции

Функция СвойстваВзносыНачисленоУплачено() Экспорт
	
	Возврат "СтруктураДоходов, ПредельнаяСуммаВзноса,
		|ПараметрыРасчетаВзносаСДоходов,
		|СуммаВзносаПФРПереплата, СуммаВзносаФФОМСПереплата, СуммаВзносаЕдиныйТарифПереплата,
		|СуммаВзносаПФРВсего, СуммаВзносаПФРДобровольноВсего, СуммаВзносаПФРсДоходовВсего, СуммаВзносаФФОМСВсего,
		|СуммаВзносаФССВсего, СуммаВзносаЕдиныйТарифВсего, СуммаВзносаПФРНачислено, СуммаВзносаФФОМСНачислено,
		|СуммаВзносаФССНачислено, СуммаВзносаЕдиныйТарифНачислено, СуммаВзносаПФРУплачено, СуммаВзносаПФРсДоходовУплачено,
		|СуммаВзносаФФОМСУплачено, СуммаВзносаФССУплачено, СуммаВзносаПФРДобровольноУплачено, СуммаВзносаЕдиныйТарифУплачено,
		|ЗачтеноРанееПоЕдиномуТарифу, ЗачтеноРанееПоВзносамСДоходов";
	
КонецФункции

// Возвращает пояснения расчета фиксированной части взносов
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - период расчета взносов
//   ФорматированнойСтрокой - Булево - Истина, если нужно вернуть пояснение в виде форматированной строки
// 
// Возвращаемое значение:
//   Структура
//  
Функция ПоясненияРасчетаВзносов(Организация, Период, ФорматированнойСтрокой = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПлатежРассчитанСДатыРегистрации", "");
	Результат.Вставить("РекомендацияПоПериодичностиУплаты", "");
	
	ДанныеДляРасчета = УчетСтраховыхВзносовИП.ДанныеДляРасчетаСтраховыхВзносов(Период, Организация);
	
	Если ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации)
		И НачалоГода(Период) < НачалоДня(ДанныеДляРасчета.ДатаРегистрации)
		И КонецДня(ДанныеДляРасчета.ДатаРегистрации) <= КонецГода(Период) Тогда
		
		ПредставлениеДатыРегистрации = Формат(ДанныеДляРасчета.ДатаРегистрации, "ДЛФ=D");
		
		Если ФорматированнойСтрокой Тогда
			
			СсылкаДатыРегистрации = Новый ФорматированнаяСтрока(ПредставлениеДатыРегистрации, , , , "ДатаРегистрации");
			
			ПлатежРассчитанСДатыРегистрации = Новый Массив;
			ПлатежРассчитанСДатыРегистрации.Добавить(НСтр("ru = 'Рассчитан с даты регистрации'"));
			ПлатежРассчитанСДатыРегистрации.Добавить(" ");
			ПлатежРассчитанСДатыРегистрации.Добавить(СсылкаДатыРегистрации);
			
			Результат.ПлатежРассчитанСДатыРегистрации = Новый ФорматированнаяСтрока(ПлатежРассчитанСДатыРегистрации);
			
		Иначе
			
			ПлатежРассчитанСДатыРегистрации = Новый Массив;
			ПлатежРассчитанСДатыРегистрации.Добавить(НСтр("ru = 'Рассчитан с даты регистрации'"));
			ПлатежРассчитанСДатыРегистрации.Добавить(ПредставлениеДатыРегистрации);
			
			Результат.ПлатежРассчитанСДатыРегистрации = СтрСоединить(ПлатежРассчитанСДатыРегистрации, " ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляРасчета.Периодичность)
		И ДанныеДляРасчета.Периодичность <> Перечисления.Периодичность.Год Тогда
		
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ДанныеДляРасчета.Периодичность, Период);
		
		Если КонецДня(КонецПериода) <> КонецГода(Период) Тогда
			
			ШаблонРекомендации =
				НСтр("ru = 'Срок уплаты фиксированной части взносов - 31 декабря, но %1 рекомендуется оплата взносов равными долями каждый %2'");
			
			ПредставлениеПериодичности = НРег(ДанныеДляРасчета.Периодичность);
			
			Если УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)) Тогда
				ПредставлениеУменьшенияНалога = НСтр("ru = 'для уменьшения авансового платежа по УСН'");
			ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)) Тогда
				ПредставлениеУменьшенияНалога = НСтр("ru = 'для уменьшения авансового платежа по НДФЛ'");
			Иначе
				ПредставлениеУменьшенияНалога = НСтр("ru = 'для уменьшения налога'");
			КонецЕсли;
			
			РекомендацияПоПериодичностиУплаты = СтрШаблон(
				ШаблонРекомендации, ПредставлениеУменьшенияНалога, ПредставлениеПериодичности);
			
			Если ФорматированнойСтрокой Тогда
				Результат.РекомендацияПоПериодичностиУплаты = Новый ФорматированнаяСтрока(РекомендацияПоПериодичностиУплаты);
			Иначе
				Результат.РекомендацияПоПериодичностиУплаты = РекомендацияПоПериодичностиУплаты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоясненияРасчетаВзносаСДоходов(Организация, Период, ПараметрыРасчета, СуммаВзносаКУплате, СуммаВзносаУплачено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СуммаВзносаЗаголовок", "");
	Результат.Вставить("СуммаВзносаПояснение", "");
	Результат.Вставить("СуммаВзносаФормула", "");
	
	Результат.Вставить("ВсегоДоходовБезВзносов", 0);
	Результат.Вставить("ВсегоДоходовБезВзносовФормула", 0);
	
	Результат.Вставить("ОблагаемаяБаза", 0);
	Результат.Вставить("ОблагаемаяБазаПояснение", "");
	Результат.Вставить("ОблагаемаяБазаФормула", "");
	
	Результат.Вставить("ФиксированнаяЧастьВзносовЗаголовок");
	
	ДанныеДляРасчета = УчетСтраховыхВзносовИП.ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация);
	
	ВсегоДоходов = ПараметрыРасчета.ВсегоДоходов;
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	
	ИспользуетсяРасчетныйМетод =                          // Применяется расчетная ставка 1/101, если:
		ПараметрыРасчета.УчитыватьРасходы                 // - при расчете облагаемого дохода учитываются расходы;
		И ПараметрыРасчета.РасчетЗаТекущийПериод          // - выполняется расчет в текущем периоде;
		И (ПараметрыРасчета.ФиксированнаяЧастьВзносов > 0 // - взносы текущего периода еще не уплачены полностью
			Или СуммаВзносаКУплате > 0);                   //   и не учтены в расходах.
	
	Если ИспользуетсяРасчетныйМетод Тогда
		
		СрокУплаты = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПараметрыРасчета.ПериодичностьНачисления, Период);
		
		ВсегоДоходовБезВзносов = ВсегоДоходов + СуммаВзносаУплачено;
		
		Результат.ВсегоДоходовБезВзносов = ВсегоДоходовБезВзносов;
		Результат.ВсегоДоходовБезВзносовФормула = СтрШаблон(НСтр("ru = '(%1 + %2)'"),
			Формат(ВсегоДоходов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(СуммаВзносаУплачено, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
		
		Результат.ФиксированнаяЧастьВзносовЗаголовок = СтрШаблон(НСтр("ru = 'Фиксированная часть к оплате до %1'"),
			Формат(СрокУплаты, "ДЛФ=D"));
		
		ОблагаемаяБаза = Макс(ВсегоДоходовБезВзносов - ПараметрыРасчета.ФиксированнаяЧастьВзносов, 0);
		
		Результат.ОблагаемаяБаза = ОблагаемаяБаза;
		Результат.ОблагаемаяБазаФормула = СтрШаблон(НСтр("ru = '(%1 - %2)'"),
			Формат(ВсегоДоходовБезВзносов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ПараметрыРасчета.ФиксированнаяЧастьВзносов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
		
		Результат.СуммаВзносаЗаголовок = СтрШаблон(НСтр("ru = 'Сумма взноса при оплате до %1'"),
			Формат(СрокУплаты, "ДЛФ=D"));
		Результат.СуммаВзносаПояснение = СтрШаблон(
			НСтр("ru = 'Определяется расчетным способом как %1/%2 облагаемой базы свыше %3 рублей:'"),
				Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=1; ЧДЦ=; ЧН=0"),
				Формат(100 + ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"),
				Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"));
		Результат.СуммаВзносаФормула = СтрШаблон(НСтр("ru = '(%1 - %2) x %3/%4'"),
			Формат(ОблагаемаяБаза, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"),
			Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"),
			Формат(100 + ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"));
		
	ИначеЕсли ПараметрыРасчета.УчитыватьРасходы Тогда
		
		Результат.СуммаВзносаЗаголовок = НСтр("ru = 'Сумма взноса'");
		Результат.СуммаВзносаПояснение = СтрШаблон(
			НСтр("ru = 'Рассчитывается как %1%% от разницы доходов и расходов свыше %2 рублей:'"),
				Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=1; ЧДЦ=; ЧН=0"),
				Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"));
		Результат.СуммаВзносаФормула = СтрШаблон(НСтр("ru = '(%1 - %2) x %3%%'"),
			Формат(ВсегоДоходов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"),
			Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"));
		
	Иначе
		
		Результат.СуммаВзносаПояснение = СтрШаблон(
			НСтр("ru = 'Рассчитывается как %1%% от дохода свыше %2 рублей:'"),
				Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=1; ЧДЦ=; ЧН=0"),
				Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"));
		Результат.СуммаВзносаФормула = СтрШаблон(НСтр("ru = '(%1 - %2) x %3%%'"),
			Формат(ВсегоДоходов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"),
			Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДляОтчетностиЗаполнены(Знач Организация, НезаполненныеРеквизиты, Знач Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизитыДляОтчетности(Организация, Период),
		НезаполненныеРеквизиты);
	
КонецФункции

Функция ПроверяемыеРеквизитыДляОтчетности(Организация, Период) Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ИНН");
	Реквизиты.Добавить("ФамилияИП");
	Реквизиты.Добавить("ИмяИП");
	Реквизиты.Добавить("Адрес");
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	Реквизиты.Добавить("НаименованиеНалоговогоОргана");
	
	Если УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период) Тогда
		Реквизиты.Добавить("КодПодчиненностиФСС");
		Реквизиты.Добавить("ИПРегистрационныйНомерФСС");
		Реквизиты.Добавить("НаименованиеТерриториальногоОрганаФСС");
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности() Экспорт
	
	Возврат НСтр("ru='уплаты фиксированных страховых взносов'");
	
КонецФункции

Функция ВсеРассчитываемыеВзносы(НалоговыйПериод)
	
	ВсеВзносы = Новый Структура;
	Если НалоговыйПериод < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		ВсеВзносы.Вставить("ПФР", "ПФР");
		ВсеВзносы.Вставить("ФФОМС", "ФФОМС");
	Иначе
		ВсеВзносы.Вставить("ЕдиныйТариф", "ЕдиныйТариф");
	КонецЕсли;
	ВсеВзносы.Вставить("ПФРсДоходов", "ПФРсДоходов");
	ВсеВзносы.Вставить("ФСС", "ФСС");
	
	Возврат ВсеВзносы;
	
КонецФункции

Функция ВсеФиксированныеВзносы()
	
	ФиксированныеВзносы = Новый Структура;
	ФиксированныеВзносы.Вставить("ПФР", "ПФР");
	ФиксированныеВзносы.Вставить("ПФРДобровольно", "ПФРДобровольно");
	ФиксированныеВзносы.Вставить("ФФОМС", "ФФОМС");
	ФиксированныеВзносы.Вставить("ФСС", "ФСС");
	ФиксированныеВзносы.Вставить("ЕдиныйТариф", "ЕдиныйТариф");
	
	Возврат ФиксированныеВзносы;
	
КонецФункции

Функция ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиЗагрузкиВыписки", Ложь);
	Результат.Вставить("ТекстОшибкиЗагрузкиВыписки", "");
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	ПараметрыОтбораПредупреждений.НачалоПериода = НачалоПериода;
	ПараметрыОтбораПредупреждений.КонецПериода = КонецПериода;
	ПараметрыОтбораПредупреждений.ТипДокументов = "ПоступлениеНаРасчетныйСчет";
	
	Результат.ЕстьОшибкиЗагрузкиВыписки =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	Результат.ТекстОшибкиЗагрузкиВыписки = ТекстПредупрежденияПриЗагрузкеВыписки();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПредупрежденияПриЗагрузкеВыписки()
	
	ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> из банка'");
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстПредупреждения);
	
КонецФункции

Процедура ОписаниеНовойСтрокиТаблицыНалоги(Таблица, Сумма, ВидНалога, Параметры, ВидНалоговогоОбязательства)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	Организация = Параметры.Организация;

	СрокУплаты = Параметры.Срок;
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		УточнитьСрокУплатыВзносовСвышеПредела(СрокУплаты);
	ИначеЕсли ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация,
			ВидНалога,
			КонецПериода,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
		Если ПорядокУплаты <> Неопределено Тогда
			СрокУплаты = ПорядокУплаты.Срок;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф
		И КонецМесяца(СрокУплаты) = КонецКвартала(СрокУплаты) Тогда
		УточнитьСрокУплатыВзносовЕдиныйТариф(СрокУплаты);
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	
	НоваяСтрока.Налог         = Налог;
	НоваяСтрока.КодБК         = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, ВидНалоговогоОбязательства, КонецПериода);
	НоваяСтрока.СчетУчета     = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, КонецПериода);
	НоваяСтрока.Сумма         = Сумма;
	НоваяСтрока.СрокУплаты    = СрокУплаты;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.КонецПериода  = КонецПериода;
	
КонецПроцедуры

Функция ИдентификаторПлатежейПоВидуВзноса(ВидВзноса, ПлательщикЕНП)
	
	Результат = Новый Структура;
	Результат.Вставить("ПФР", "ПлатежиПФР");
	Результат.Вставить("ПФРДобровольно", "ПлатежиПФРДобровольно");
	Результат.Вставить("ФФОМС", "ПлатежиФФОМС");
	Результат.Вставить("ФСС", "ПлатежиФСС");
	
	Если ПлательщикЕНП Тогда
		Результат.Вставить("ЕдиныйТариф", "ПлатежиЕНП");
	Иначе
		Результат.Вставить("ЕдиныйТариф", "ЕдиныйТариф");
	КонецЕсли;
	
	Возврат Результат[ВидВзноса];
	
КонецФункции

Функция ВидНалогаПоПравилу(Правило)
	
	ЭтоПравилоУплатыВзносовСДоходов = УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило);
	Возврат УчетСтраховыхВзносовИП.ВидСтраховогоВзносаИП(ЭтоПравилоУплатыВзносовСДоходов);
	
КонецФункции

Процедура РассчитатьСтраховыеВзносыСДоходов(Результат, Организация, НалоговыйПериод)
	
	// Взносы с доходов уплачиваются в периодах действия единого тарифа
	
	ПериодыДействияВзноса = УчетСтраховыхВзносовИП.ПериодыУплатыВзносаСДоходов(
		Организация,
		КонецКвартала(НалоговыйПериод));
	
	Результат.ПараметрыРасчетаВзносаСДоходов = УчетСтраховыхВзносовИП.НовыеПараметрыРасчетаВзносаСДоходов();
	
	Для Каждого ТекущийПериод Из ПериодыДействияВзноса Цикл
		
		СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
			Организация,
			ТекущийПериод.ДатаНачала,
			КонецДня(ТекущийПериод.ДатаОкончания));
		
		СтраховыеВзносыСДоходовКУплате = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
			Организация, НалоговыйПериод, СтруктураДоходов, Ложь);
		
		Если Не ЗначениеЗаполнено(Результат.СтруктураДоходов) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат.СтруктураДоходов, СтруктураДоходов);
		Иначе
			Для Каждого ТекущийКлючИЗначение Из Результат.СтруктураДоходов Цикл
				Результат.СтруктураДоходов[ТекущийКлючИЗначение.Ключ] = ТекущийКлючИЗначение.Значение
					+ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДоходов, ТекущийКлючИЗначение.Ключ, 0);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.ПараметрыРасчетаВзносаСДоходов) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат.ПараметрыРасчетаВзносаСДоходов,
				СтраховыеВзносыСДоходовКУплате.ПараметрыРасчетаВзносаСДоходов);
		Иначе
			Для Каждого ТекущийКлючИЗначение Из СтраховыеВзносыСДоходовКУплате.ПараметрыРасчетаВзносаСДоходов Цикл
				Если ТипЗнч(ТекущийКлючИЗначение.Значение) = Тип("Число") Тогда
					Результат.ПараметрыРасчетаВзносаСДоходов[ТекущийКлючИЗначение.Ключ] = ТекущийКлючИЗначение.Значение
						+ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ПараметрыРасчетаВзносаСДоходов, ТекущийКлючИЗначение.Ключ, 0);
				Иначе
					Результат.ПараметрыРасчетаВзносаСДоходов[ТекущийКлючИЗначение.Ключ] = ТекущийКлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат.ПредельнаяСуммаВзноса = Макс(
			Результат.ПредельнаяСуммаВзноса,
			СтраховыеВзносыСДоходовКУплате.ПредельнаяСуммаВзноса);
		
		Результат.СуммаВзносаПФРсДоходов = Результат.СуммаВзносаПФРсДоходов
			+ СтраховыеВзносыСДоходовКУплате.СуммаВзносаПФРсДоходов;
		Результат.СуммаВзносаПФРсДоходовВсего = Результат.СуммаВзносаПФРсДоходовВсего
			+ СтраховыеВзносыСДоходовКУплате.СуммаВзносаПФРсДоходовВсего;
		Результат.СуммаВзносаПФРсДоходовУплачено = Результат.СуммаВзносаПФРсДоходовУплачено
			+ СтраховыеВзносыСДоходовКУплате.СуммаВзносаПФРсДоходовУплачено;
		
		Если Не ЗначениеЗаполнено(Результат.СтраховыеВзносыСДоходовУплаченные) Тогда
			Результат.СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыСДоходовКУплате.СтраховыеВзносыУплаченные;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
				СтраховыеВзносыСДоходовКУплате.СтраховыеВзносыУплаченные,
				Результат.СтраховыеВзносыСДоходовУплаченные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область АктуализацияРасчетаВзносов

// Подготавливает параметры и вызывает процедуру которая выполнит только регламентные операции,
// необходимые для расчета фиксированнных взносов ИП.
//
// Параметры:
//  ПараметрыРасчета - Структура:
//     * Организация - СправочникСсылка.Организация
//     * Период - Дата
// Возвращаемое значение:
//   Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации()
//
Функция АктуализироватьРасчет(ПараметрыРасчета) Экспорт
	
	РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	РезультатАктуализации.АктуализацияДляРасчетаНалога = Истина;
	
	// Проверка актуальности
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация = ПараметрыРасчета.Организация;
	ПараметрыПроверки.Период      = КонецГода(ПараметрыРасчета.Период);
	ПараметрыПроверки.АктуализироватьВесьПериод = Истина;
	
	РезультатПроверки = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		РезультатАктуализации.Выполнено = Истина;
		Возврат РезультатАктуализации;
	КонецЕсли;
	
	НачалоПериодаАктуализации = РезультатПроверки.ДатаАктуальности;
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
		ПараметрыРасчета.Организация,
		ПараметрыРасчета.Период);
	
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда
		// Для ИП на ОСНО или УСН доходы-расходы оплачиваем взносы поквартально
		КонецПериодаАктуализации = КонецКвартала(ПараметрыРасчета.Период);
	Иначе
		КонецПериодаАктуализации = КонецГода(ПараметрыРасчета.Период);
	КонецЕсли;
	
	Если НачалоПериодаАктуализации > КонецПериодаАктуализации Тогда
		РезультатАктуализации.Выполнено = Истина;
		Возврат РезультатАктуализации;
	КонецЕсли;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация = ПараметрыРасчета.Организация;
	ПараметрыАктуализации.ГраницаАктуализацииНачало = НачалоПериодаАктуализации;
	ПараметрыАктуализации.Период = КонецПериодаАктуализации;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = Истина;
	ПараметрыАктуализации.АктуализироватьВесьПериод = Истина;
	
	// Актуализацию выполняем в привилегированном режиме, потому что даже у пользователей без права закрытия месяца
	// суммы взносов должны рассчитываться по актуальным данным о расходах на уплаченные ранее взносы.
	// Эти расходы формируются регламентными операциями.
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Обработки.ЗакрытиеМесяца.АктуализироватьДляРасчетаФиксированныхВзносов(ПараметрыАктуализации);
	
КонецФункции

#КонецОбласти

#Область ПубликацияДанных

Функция ПубликуемыеДанныеПомощника(Настройки, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	// Читаем настройки
	НастройкиСтруктурой = ПрочитатьНастройки(Настройки, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиСтруктурой.Свойство("organization") Тогда
		НастройкиСтруктурой.organization.Свойство("inn", ОрганизацияИНН);
		НастройкиСтруктурой.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НалоговыйПериод = НастройкиСтруктурой.date;
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Организация, НалоговыйПериод);

	Если НалоговыйПериод < УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчет страховых взносов за %1 год не поддерживается'"), Формат(НалоговыйПериод, "ДФ=yyyy"));
	КонецЕсли;
	
	// Очистим стек сообщений пользователю, чтобы не записать в результат лишние.
	ПолучитьСообщенияПользователю(Истина);
	
	// Предварительно актуализируем данные.
	Если Не ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, КонецГода(НалоговыйПериод), СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПомощника = Новый Структура;
	
	СловарьПолейJSON = СловарьПолейJSON();
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, НалоговыйПериод);
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Организация, НалоговыйПериод, Периодичность);
	
	// Заполняем массив с описанием сумм к уплате.
	ПубликуемыеВзносы = ПубликуемыеВзносы(Организация, НалоговыйПериод);
	ОписаниеВзносов = Новый Массив;
	Для Каждого ТипВзноса Из ПубликуемыеВзносы Цикл
		ОписаниеВзносов.Добавить(
			ОписаниеБлокаРасчетаСуммыВзносов(Организация, НалоговыйПериод, СтраховыеВзносыКУплате, ТипВзноса.Значение));
	КонецЦикла;
	
	ДанныеПомощника.Вставить(СловарьПолейJSON.Платежи, ОписаниеВзносов);
	
	СуммыКУплате = Новый Структура(СвойстваВзносыКУплате());
	ЗаполнитьЗначенияСвойств(СуммыКУплате, СтраховыеВзносыКУплате);
	
	ВсегоВзносов = 0;
	Для Каждого СуммаВзноса Из СуммыКУплате Цикл
		
		ЭтоСуммаЕНП = СуммаВзноса.Ключ = "СуммаЕНП";
		
		Если (ПлательщикЕНП И Не ЭтоСуммаЕНП)
			Или (Не ПлательщикЕНП И ЭтоСуммаЕНП) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоВзносов = ВсегоВзносов + СуммаВзноса.Значение;
		
	КонецЦикла;
	
	ОстатокЕНС = ЕдиныйНалоговыйСчет.ОстатокНаЕдиномНалоговомСчете(Организация, ТекущаяДатаСеанса());
	ДанныеПомощника.Вставить(СловарьПолейJSON.Всего,  ВсегоВзносов);
	ДанныеПомощника.Вставить(СловарьПолейJSON.ЕНС,    ОстатокЕНС);
	ДанныеПомощника.Вставить(СловарьПолейJSON.Ссылки, ПубликуемыеСсылки(Организация, НалоговыйПериод, СуммыКУплате));
	
	// Предупреждения
	МассивПредупреждений = Новый Массив;
	
	// Предупреждение об ошибках загрузки выписки.
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПредупрежденияПриЗагрузкеВыписки =
			ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоГода(НалоговыйПериод), КонецКвартала(НалоговыйПериод));
		
		Если ПредупрежденияПриЗагрузкеВыписки.ЕстьОшибкиЗагрузкиВыписки Тогда
			МассивПредупреждений.Добавить(Строка(ПредупрежденияПриЗагрузкеВыписки.ТекстОшибкиЗагрузкиВыписки));
		КонецЕсли;
	КонецЕсли;
	
	// Предупреждение, если не заполнены важные реквизиты организации.
	НезаполненныеРеквизиты = Неопределено;
	Если Не РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты) Тогда
		ТекстОшибки = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(),
			Истина);
		// Возвращаем результат с предупреждением.
		МассивПредупреждений.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если МассивПредупреждений.Количество() > 0 Тогда
		// Возвращаем результат с предупреждением.
		КодВозврата = Словарь.КодВозвратаВыполненоСПредупреждениями();
		СообщениеОбОшибке = СтрСоединить(МассивПредупреждений, Символы.ПС);
	КонецЕсли;
	
	Возврат РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеПомощника);
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НастройкиСтруктурой.Свойство("date") Тогда
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле date'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

Функция ПубликуемыеВзносы(Организация, НалоговыйПериод)
	
	ПубликуемыеВзносы = ВсеРассчитываемыеВзносы(НалоговыйПериод);
	
	Если Не УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, НалоговыйПериод) Тогда
		ПубликуемыеВзносы.Удалить("ФСС");
	КонецЕсли;
	
	Возврат ПубликуемыеВзносы;
	
КонецФункции

Функция ОписаниеБлокаРасчетаСуммыВзносов(Организация, НалоговыйПериод, СтраховыеВзносыКУплате, ТипВзноса)
	
	ВсеВзносы = ВсеРассчитываемыеВзносы(НалоговыйПериод);
	СловарьПолейJSON = СловарьПолейJSON();
	
	ОписаниеБлока = Новый Структура;
	ОписаниеБлока.Вставить(СловарьПолейJSON.Тип, ТипВзноса);
	
	Если ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ПФР") Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ПФР фиксированный'"));
	ИначеЕсли ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ФФОМС") Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ФФОМС'"));
	ИначеЕсли ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ЕдиныйТариф") Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'По единому тарифу'"));
	ИначеЕсли ТипВзноса = ВсеВзносы.ФСС Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ФСС'"));
	ИначеЕсли ТипВзноса = ВсеВзносы.ПФРсДоходов Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ПФР с доходов'"));
	КонецЕсли;
	
	ЧастиПояснения = Новый Массив;
	Если ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ПФР") 
		Или ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ФФОМС")
		Или ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ЕдиныйТариф") Тогда
		ПоясненияРасчета = ПоясненияРасчетаВзносов(Организация, НалоговыйПериод, Ложь);
		Если ЗначениеЗаполнено(ПоясненияРасчета.ПлатежРассчитанСДатыРегистрации) Тогда
			Если Не СтрЗаканчиваетсяНа(ПоясненияРасчета.ПлатежРассчитанСДатыРегистрации, ".")
				И ЗначениеЗаполнено(ПоясненияРасчета.РекомендацияПоПериодичностиУплаты) Тогда
				ЧастиПояснения.Добавить(ПоясненияРасчета.ПлатежРассчитанСДатыРегистрации + ".");
			Иначе
				ЧастиПояснения.Добавить(ПоясненияРасчета.ПлатежРассчитанСДатыРегистрации);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоясненияРасчета.РекомендацияПоПериодичностиУплаты) Тогда
			ЧастиПояснения.Добавить(ПоясненияРасчета.РекомендацияПоПериодичностиУплаты);
		КонецЕсли;
	ИначеЕсли ТипВзноса = ВсеВзносы.ПФРсДоходов Тогда
		ПоясненияРасчета = ПоясненияРасчетаВзносаСДоходов(
			Организация,
			НалоговыйПериод,
			СтраховыеВзносыКУплате.ПараметрыРасчетаВзносаСДоходов,
			СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов,
			СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходовУплачено);
		Если ЗначениеЗаполнено(ПоясненияРасчета.СуммаВзносаПояснение) Тогда
			ЧастиПояснения.Добавить(ПоясненияРасчета.СуммаВзносаПояснение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоясненияРасчета.СуммаВзносаФормула) Тогда
			ЧастиПояснения.Добавить(ПоясненияРасчета.СуммаВзносаФормула);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧастиПояснения.Количество() > 0 Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Описание, СтрСоединить(ЧастиПояснения, " "));
	КонецЕсли;
	
	ИмяПоляСуммы = "СуммаВзноса" + ТипВзноса;
	ОписаниеБлока.Вставить(СловарьПолейJSON.Сумма, СтраховыеВзносыКУплате[ИмяПоляСуммы]);
	
	ОписаниеБлока.Вставить(СловарьПолейJSON.Ссылка,
		ПубликуемаяСсылкаОплатыВзносов(ТипВзноса, Организация, НалоговыйПериод));
	
	Возврат ОписаниеБлока;
	
КонецФункции

Функция ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, Взнос)
	
	Возврат ВсеВзносы.Свойство(Взнос) И ТипВзноса = ВсеВзносы[Взнос];
	
КонецФункции

Функция ПубликуемыеСсылки(Организация, НалоговыйПериод, СуммыКУплате)
	
	ПубликуемыеСсылки = Новый Массив;
	
	// 1. Ссылка для перехода в 1С
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Проверить расчет в 1С'"),
		НавигационнаяСсылкаДляПубликации(Организация, НалоговыйПериод));
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиПереход);
	
	// 2. Ссылка для выполнения задачи бухгалтера
	ПравилоУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		Организация, Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф, НалоговыйПериод);
	
	Если ПравилоУплаты <> Неопределено Тогда
		ПравилоУплаты.Организация = Организация; // Из функции возвращается пустой
		
		ХешЗадачи = РегистрыСведений.ЗадачиБухгалтера.СохраненнаяХешСуммаЗадачи(ПравилоУплаты);
		ОписаниеСсылкиВыполнениеЗадачи =
			ВнешнийПрограммныйИнтерфейс.ОписаниеПубликуемойСсылкиВыполнениеЗадачи(ХешЗадачи, Истина);
		
		Если ОписаниеСсылкиВыполнениеЗадачи <> Неопределено Тогда
			ОписаниеСсылкиЗадача = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
				ОписаниеСсылкиВыполнениеЗадачи.Идентификатор,
				ОписаниеСсылкиВыполнениеЗадачи.Представление,
				ОписаниеСсылкиВыполнениеЗадачи.АдресСервиса,
				ОписаниеСсылкиВыполнениеЗадачи.Параметры);
			
			ПубликуемыеСсылки.Добавить(ОписаниеСсылкиЗадача);
		КонецЕсли;
		
		Если ОбщегоНазначенияБПКлиентСервер.НомерКвартала(НалоговыйПериод) < 4 И СуммыКУплате.СуммаЕНП <> 0
			И Не УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, НалоговыйПериод) Тогда
			
			// Можно подать заявление о зачете за 1 квартал, 1 полугодие и 9 мес.
			// За год страховые взносы зачитываются Операцией на ЕНС
			
			ТаблицаОстатковНаЕдиномНалоговомСчете = ЕдиныйНалоговыйСчет.ТаблицаОстатковНаЕдиномНалоговомСчете(
				Организация,
				КонецДня(НалоговыйПериод));
			ДоступныйОстаток = ТаблицаОстатковНаЕдиномНалоговомСчете.Итог("Сумма");
			
			Если ДоступныйОстаток <> 0 И ДоступныйОстаток >= СуммыКУплате.СуммаЕНП Тогда
				
				ОписаниеСсылкиУведомлениеЕНП = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("insurance_statement",
					НСтр("ru = 'Сформировать заявление о зачете'"),
					Справочники.НастройкиИнтеграцииСБанками.АдресСервисаВыполненияКомандыИнтеграции(),
					Справочники.НастройкиИнтеграцииСБанками.ВходящиеНастройкиСозданияЗаявленияНаЗачет(
						Организация,
						НалоговыйПериод,
						СуммыКУплате));
				
				ПубликуемыеСсылки.Добавить(ОписаниеСсылкиУведомлениеЕНП);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПубликуемыеСсылки;
	
КонецФункции

Функция НавигационнаяСсылкаДляПубликации(Организация, НалоговыйПериод)
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	
	ПараметрыПубликации.ИмяФормы      = "Обработка.РасчетСтраховыхВзносовИП.Форма";
	ПараметрыПубликации.Организация   = Организация;
	ПараметрыПубликации.НачалоПериода = НачалоГода(НалоговыйПериод);
	ПараметрыПубликации.КонецПериода  = КонецКвартала(НалоговыйПериод);
	
	Возврат РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	
КонецФункции

Функция ПубликуемаяСсылкаОплатыВзносов(ТипВзноса, Организация, НалоговыйПериод)
	
	ПараметрыПубликацииСсылки = ПараметрыПубликацииСсылкиОплаты(ТипВзноса, НалоговыйПериод);
	
	Если ПараметрыПубликацииСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСсылок = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор();
	АдресСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса();
	
	ПубликуемыеНастройки = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
		Организация,
		КонецКвартала(НалоговыйПериод),
		ПараметрыПубликацииСсылки.ВидНалога,
		ПараметрыПубликацииСсылки.ВидНалоговогоОбязательства);
	
	ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
		ИдентификаторСсылок,
		ПараметрыПубликацииСсылки.Представление,
		АдресСервисаОплаты,
		ПубликуемыеНастройки);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция ПараметрыПубликацииСсылкиОплаты(ТипВзноса, НалоговыйПериод)
	
	ВсеВзносы = ВсеРассчитываемыеВзносы(НалоговыйПериод);
	
	ОписаниеПараметра = Неопределено;
	
	Если ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ПФР") Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ПФР'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	ИначеЕсли ТипВзноса = ВсеВзносы.ПФРсДоходов Тогда
		Если НалоговыйПериод < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
			ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
				НСтр("ru = 'Оплатить взнос ПФР с доходов'"),
				Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
				Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		Иначе
			ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
				НСтр("ru = 'Оплатить пенсионный взнос с доходов'"),
				Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела,
				Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		КонецЕсли;
		
	ИначеЕсли ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ФФОМС") Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ФФОМС'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
	ИначеЕсли ПроверитьТипВзноса(ВсеВзносы, ТипВзноса, "ЕдиныйТариф") Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос по единому тарифу'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
	ИначеЕсли ТипВзноса = ВсеВзносы.ФСС Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ФСС'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЕсли;
	
	Возврат ОписаниеПараметра;
	
КонецФункции

Функция ОписаниеПубликуемойСсылкиОплаты(Представление, ВидНалога, ВидНалоговогоОбязательства)
	
	ОписаниеПубликации = Новый Структура;
	ОписаниеПубликации.Вставить("Представление", Представление);
	ОписаниеПубликации.Вставить("ВидНалога", ВидНалога);
	ОписаниеПубликации.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	
	Возврат ОписаниеПубликации;
	
КонецФункции

Функция СловарьПолейJSON()
	
	Словарь = Новый Структура;
	Словарь.Вставить("Ссылки",    "links");
	Словарь.Вставить("Ссылка",    "link");
	Словарь.Вставить("Тип",       "type");
	Словарь.Вставить("Заголовок", "title");
	Словарь.Вставить("Описание",  "description");
	Словарь.Вставить("Сумма",     "sum");
	Словарь.Вставить("Платежи",   "payments");
	Словарь.Вставить("Всего",     "total");
	Словарь.Вставить("ЕНС",       "ens");
	
	Возврат Словарь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик обновления на версию 3.0.72: дополняет данные о зарегистрированных платежах
// сведениями об уплатах с банковского счета, отраженных без платежного поручения,
// и обновляет статусы задач за страховые периоды вновь зарегистрированных платежей.
//
Процедура ОбновитьСвязанныеПлатежиИЗадачи() Экспорт
	
	// Обновление задач и документов помощника имеет смысл только за период,
	// доступный для выбора в помощнике на момент обработчика.
	ТекущийПериод = ТекущаяДатаСеанса();
	НачалоОбновляемогоПериода = НачалоГода(ДобавитьМесяц(ТекущийПериод, -12));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоОбновляемогоПериода", НачалоОбновляемогоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Предприниматели
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ЭлементыНалоговВзносыИП
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|ГДЕ
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога В (ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть), ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС), ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК Дата,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.Налог.ВидНалога КАК ВидНалога,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Дата >= &НачалоОбновляемогоПериода
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Организация В
	|			(ВЫБРАТЬ
	|				ВТ_Предприниматели.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_Предприниматели КАК ВТ_Предприниматели)
	|	И СписаниеСРасчетногоСчета.Налог В
	|			(ВЫБРАТЬ
	|				ВТ_ЭлементыНалоговВзносыИП.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ЭлементыНалоговВзносыИП КАК ВТ_ЭлементыНалоговВзносыИП)
	|	И (СписаниеСРасчетногоСчета.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТИПЗНАЧЕНИЯ(СписаниеСРасчетногоСчета.ДокументОснование) <> ТИП(Документ.ПлатежноеПоручение)
	|			ИЛИ СписаниеСРасчетногоСчета.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПлатежноеПоручение.ПустаяСсылка))";
	
	ПравилаПериодыЗадач = Новый ТаблицаЗначений;
	ПравилаПериодыЗадач.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПравилаПериодыЗадач.Колонки.Добавить("СтраховойГод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПравилаПериодыЗадач.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваЗадачи = СвойстваЗадачиПлатежа(Выборка, ПравилаПериодыЗадач);
		
		Если Не ЗначениеЗаполнено(СвойстваЗадачи.Правило) Тогда
			// Отсутствует расписание по фиксированным взносам за указанный в документе страховой год.
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			Выборка.Организация, Выборка.Ссылка, СвойстваЗадачи.Правило, СвойстваЗадачи.ПериодСобытия);
		
	КонецЦикла;
	
	// Обновим статусы задач
	
	Если ПравилаПериодыЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПравилаПериодыЗадач", ПравилаПериодыЗадач);
	Запрос.УстановитьПараметр("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач", ВыполнениеЗадачБухгалтера.СтатусыВыполненныхЗадач());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПериодыЗадач.Организация КАК Организация,
	|	ПравилаПериодыЗадач.СтраховойГод КАК СтраховойГод
	|ПОМЕСТИТЬ ОрганизацииПериодыЗадач
	|ИЗ
	|	&ПравилаПериодыЗадач КАК ПравилаПериодыЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииПериодыЗадач.Организация КАК Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ОрганизацииПериодыЗадач.СтраховойГод, ГОД)) КАК НачалоПериодаСобытий,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ОрганизацииПериодыЗадач.СтраховойГод, ГОД)) КАК КонецПериодаСобытий
	|ПОМЕСТИТЬ ОрганизацииГраницыПериодовЗадач
	|ИЗ
	|	ОрганизацииПериодыЗадач КАК ОрганизацииПериодыЗадач
	|
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииПериодыЗадач.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаЗадач
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &КодЗадачи
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	ОрганизацииГраницыПериодовЗадач КАК ОрганизацииГраницыПериодовЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ОрганизацииГраницыПериодовЗадач.Организация = ЗадачиБухгалтера.Организация
	|			И ОрганизацииГраницыПериодовЗадач.НачалоПериодаСобытий <= ЗадачиБухгалтера.ПериодСобытия
	|			И ОрганизацииГраницыПериодовЗадач.КонецПериодаСобытий >= ЗадачиБухгалтера.ПериодСобытия
	|			И (ЗадачиБухгалтера.Правило В
	|				(ВЫБРАТЬ
	|					ПравилаЗадач.Ссылка КАК Ссылка
	|				ИЗ
	|					ПравилаЗадач КАК ПравилаЗадач))
	|			И (НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач))
	|			И (НЕ ЗадачиБухгалтера.ВАрхиве)";
	
	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	// Запишем новые статусы
	Для Каждого Задача Из ТаблицаЗадач Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Задача);
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Статус = Задача.Статус;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваЗадачиПлатежа(РеквизитыПлатежа, ПравилаПериодыЗадач)
	
	СвойстваЗадачи = Новый Структура("ПериодСобытия, Правило",
		'00010101',
		Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	СтраховойГод = НачалоГода(РеквизитыПлатежа.НалоговыйПериод);
	
	ПериодичностьУплаты = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
		РеквизитыПлатежа.Организация, СтраховойГод);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", РеквизитыПлатежа.Организация);
	Отбор.Вставить("СтраховойГод", СтраховойГод);
	
	НайденныеСтроки = ПравилаПериодыЗадач.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Правило для данного года уже найдено.
		СвойстваЗадачи.Правило = НайденныеСтроки[0].Правило;
		
		ДатаСобытия = Мин(КонецГода(СтраховойГод), КонецКвартала(РеквизитыПлатежа.Дата));
		СвойстваЗадачи.ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
			ПериодичностьУплаты, ДатаСобытия);
	Иначе
		ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
			РеквизитыПлатежа.Организация, РеквизитыПлатежа.ВидНалога, КонецГода(РеквизитыПлатежа.НалоговыйПериод));
		
		Если ПорядокУплаты <> Неопределено И ЗначениеЗаполнено(ПорядокУплаты.Правило) Тогда
			СвойстваЗадачи.Правило = ПорядокУплаты.Правило;
			
			ДатаСобытия = Мин(КонецГода(ПорядокУплаты.ПериодСобытия), КонецКвартала(РеквизитыПлатежа.Дата));
			СвойстваЗадачи.ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
				ПериодичностьУплаты, ДатаСобытия);
			
			// Добавим найденное правило задачи в кэш.
			НоваяСтрока = ПравилаПериодыЗадач.Добавить();
			НоваяСтрока.Организация = РеквизитыПлатежа.Организация;
			НоваяСтрока.СтраховойГод = СтраховойГод;
			НоваяСтрока.Правило = ПорядокУплаты.Правило;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СвойстваЗадачи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
