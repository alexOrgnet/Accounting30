#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новые параметры задач:
// * Организация - СправочникСсылка.Организации
// * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
// * ПериодСобытия - Дата
// * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
// * Действие - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
// * Статус - см. РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса
// * Срок - Дата
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("Срок",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплаты(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список документов на уплату АУСН.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ПериодУплаты - Дата - период уплаты
//   ПравилоУплаты - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   ЭтоОплатаЗадолженности - Булево
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДокументыУплатыЗаПериод(Организация, ПериодУплаты, ПравилоУплаты, ЭтоОплатаЗадолженности) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.Правило = ПравилоУплаты;

	ПараметрыУплатыНалогов.ВидыНалогов = ВидыНалоговУплачиваемыхВПомощнике();
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Если ЭтоОплатаЗадолженности Тогда
		ПараметрыУплатыНалогов.ОтборОплатаЗадолженности = Истина;
	Иначе
		ПараметрыУплатыНалогов.ОтборОплатаЗадолженности = Ложь;
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(ПериодУплаты);
	КонецПериода  = КонецМесяца(ПериодУплаты);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация,
		НачалоПериода,
		КонецПериода,
		ПараметрыУплатыНалогов);
	
КонецФункции

Функция ДокументыУплатыНалога(Организация, Период, Правило, РеквизитыОплаты) Экспорт

	ТаблицаПлатежей = Неопределено;
	ТаблицаОплатыЗадолженности = Неопределено;
	ЭтоОплатаЗадолженности = Ложь;
	
	Для Каждого ДанныеОплаты Из РеквизитыОплаты Цикл
		Если ДанныеОплаты.Значение.ПоказательПериода = "0" Тогда
			ПериодОплаты = Период;
		Иначе
			ПериодОплаты = НачалоМесяца(ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДанныеОплаты.Значение.ПоказательПериода)) - 1;
		КонецЕсли;
		Если ДанныеОплаты.Значение.Тип = "НачислениеЗаМесяц" Или ДанныеОплаты.Значение.ПоказательОснования = "ТП" Тогда
			ЭтоОплатаЗадолженности = Ложь;
		Иначе
			ЭтоОплатаЗадолженности = Истина;
		КонецЕсли;

		Если ТаблицаПлатежей = Неопределено Тогда
			ТаблицаПлатежей =
				ДокументыУплатыЗаПериод(Организация, ПериодОплаты, Правило, ЭтоОплатаЗадолженности);
		Иначе
			ТаблицаОплатыЗадолженности =
				ДокументыУплатыЗаПериод(Организация, ПериодОплаты, Правило, ЭтоОплатаЗадолженности);
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаОплатыЗадолженности, ТаблицаПлатежей);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаОплатыЗадолженности = Неопределено Тогда
		ТаблицаОплатыЗадолженности =
				ДокументыУплатыЗаПериод(Организация, Период, Правило, Истина);
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаОплатыЗадолженности, ТаблицаПлатежей);
	КонецЕсли;
	
	Возврат ТаблицаПлатежей;

КонецФункции

// Возвращает сведения о начисленном налоге АУСН.
// Результат функции используется в помощнике уплаты налога АУСН, который отображает в том числе и состояние
// расчетов с ФНС из задачи бухгалтера. Для задач, у которых срок выполнения еще не наступил, помощник показывает
// не текущую задолженность, а сроки для проверки данных и поступления расчета налога от ФНС. Поэтому функция возвращает
// данные о начисленном налоге только для истекших периодов (предыдущий и более ранние месяцы).
//
// Параметры:
//   ПараметрыМетода - Структура - см. НовыйСведенияОНачисленномНалогеЗаПериод()
//
// Возвращаемое значение:
//   Структура - см. РезультатРасчетаСведенийОНачисленномНалоге()
//
Функция СведенияОНачисленномНалогеЗаПериод(ПараметрыМетода) Экспорт
	
	Результат = РезультатРасчетаСведенийОНачисленномНалоге();
	ВсеОшибки = Новый Массив;
	
	ЭтоКрайняяЗадача = ЭтоКрайняяЗадача(ПараметрыМетода.Правило, ПараметрыМетода.Организация, ПараметрыМетода.Период);
	Результат.ЭтоКрайняяЗадача = ЭтоКрайняяЗадача;
	
	Результат.ПлановаяДатаРасчета = СрокРасчетаНалогаПоУмолчанию(ПараметрыМетода.Период);
	
	ДанныеЗаПериод = Неопределено;
	Если ПараметрыМетода.ПолучитьРасчетНалога
		// В регистре "Расчет налога АУСН" могут содержаться данные за еще не истекшие периоды,
		// в этом случае проигнорируем их.
		И КонецМесяца(ПараметрыМетода.Период) < ТекущаяДатаПользователя() Тогда

		ДанныеЗаПериод = РегистрыСведений.РасчетНалогаАУСН.ДанныеЗаПериод(
			ПараметрыМетода.Организация, ПараметрыМетода.Период);

		Если ДанныеЗаПериод.Сумма <> 0 Тогда
			Результат.ЭтоПредварительныйРасчет = ДанныеЗаПериод.ПредварительныйРасчет;
		КонецЕсли;

		Результат.НачисленныйНалог = ДанныеЗаПериод.Сумма;
		Результат.ДатаРасчета = ДанныеЗаПериод.ДатаРасчета;
		Результат.РасчетНалогаПолучен = ЗначениеЗаполнено(ДанныеЗаПериод.ДатаРасчета);

	КонецЕсли;

	Если ПараметрыМетода.ПолучитьРасшифровкуНалоговойБазы Тогда

		Если ДанныеЗаПериод = Неопределено Тогда
			ДанныеЗаПериод = РегистрыСведений.РасчетНалогаАУСН.ДанныеЗаПериод(
				ПараметрыМетода.Организация, ПараметрыМетода.Период);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеЗапериод, "Доходы, Расходы, СтавкаНалога");
		
		Если Результат.Доходы < Результат.Расходы Тогда
			Результат.СтавкаНалога =
				УчетАУСНКлиентСервер.НалоговыеСтавкиАУСН().СтавкаМинимальногоНалогаАУСНДоходыМинусРасходы;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаПериод <> Неопределено И ЗначениеЗаполнено(ДанныеЗаПериод.Ошибки) Тогда
		ВсеОшибки.Добавить(ДанныеЗаПериод.Ошибки);
	КонецЕсли;
	
	Если ПараметрыМетода.ПолучитьРеквизитыОплаты Тогда
	
		ДанныеЗадолженности = ИнтеграцияАУСН.ДанныеЗадолженностиЕНС(ПараметрыМетода.Организация);
		
		Если ДанныеЗадолженности <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗадолженности.Ошибки) Тогда
				ВсеОшибки.Добавить(ДанныеЗадолженности.Ошибки);
			КонецЕсли;
			
			Результат.ДатаЗапросаЗадолженности = ДанныеЗадолженности.Дата;
			Результат.СуммаЗадолженности = Макс(ДанныеЗадолженности.Сумма, 0);
			
			ПериодКрайнейЗадачи = ПериодКрайнейЗадачи(ПараметрыМетода.Организация, ПараметрыМетода.Правило);
			Если ЗначениеЗаполнено(ПериодКрайнейЗадачи) Тогда
				Результат.ДатаНачисления = ПериодКрайнейЗадачи;
			Иначе
				Результат.ДатаНачисления = НачалоМесяца(ТекущаяДатаПользователя()) - 1;
			КонецЕсли;
			
			ПлатежныеРеквизиты = ИнтеграцияАУСН.ПлатежныеРеквизитыЕНС(ПараметрыМетода.Организация);

			Если ПлатежныеРеквизиты <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(ПлатежныеРеквизиты.Ошибки) Тогда
					ВсеОшибки.Добавить(ПлатежныеРеквизиты.Ошибки);
				Иначе
					ДанныеПлатежногоПоручения = НовыйДанныеПлатежногоПоручения();
					ЗаполнитьЗначенияСвойств(ДанныеПлатежногоПоручения, ПлатежныеРеквизиты);
					Если ЭтоКрайняяЗадача Тогда
						ДанныеПлатежногоПоручения.Сумма = Результат.НачисленныйНалог + Результат.СуммаЗадолженности;
					Иначе
						ДанныеПлатежногоПоручения.Сумма = Результат.НачисленныйНалог;
						Результат.СуммаЗадолженности = 0;
					КонецЕсли;
					// Реквизиты оплаты используются одинаковые для оплаты за все периоды.
					ДанныеПлатежногоПоручения.ПоказательПериода = "0";
					
					Если Результат.НачисленныйНалог <> 0 Или ЭтоКрайняяЗадача Тогда
						Результат.РеквизитыОплаты.Добавить(ДанныеПлатежногоПоручения);
						Результат.РеквизитыОплатыПолучены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Результат.СуммаОплаты = Результат.НачисленныйНалог;
			Результат.ТекущаяЗадолженность = ДанныеЗадолженности.Сумма;
		КонецЕсли;

	КонецЕсли;
	
	Результат.Ошибки = СтрСоединить(ВсеОшибки, Символы.ПС);
	
	Возврат Результат;

КонецФункции

// Возвращает структуру параметров для выполнения метода СведенияОНачисленномНалогеЗаПериод()
// 
// Возвращаемое значение:
//  Структура - Новый сведения о начисленном налоге за период:
// * ПолучитьРасчетНалога - Булево
// * ПолучитьРасшифровкуНалоговойБазы - Булево
// * ПолучитьРеквизитыОплаты - Булево
// * Организация - СправочникСсылка.Организации
// * Период - Дата
// * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//
Функция НовыйСведенияОНачисленномНалогеЗаПериод() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПолучитьРасчетНалога", Ложь);
	Результат.Вставить("ПолучитьРасшифровкуНалоговойБазы", Ложь);
	Результат.Вставить("ПолучитьРеквизитыОплаты", Ложь);
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Период", '00010101');
	Результат.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Определяет актуальное состояние задачи уплаты налога АУСН.
//
// Параметры:
//  Контекст - Структура - см. НовыйСведенияОНачисленномНалогеЗаПериод()
//             Достаточно установить только свойства, описывающие контекст, но не задание
//             (состав запрашиваемых сведений).
//  Сегодня  - Дата - дата, на которую определяется состояние.
//             Предназначена для упрощения тестирования функциональности, срок применения которой не наступил.
//           - Неопределено - нужны сведения на сегодня, сейчас.
// 
// Возвращаемое значение:
//  Структура - см. НовыйСостояниеЗадачиУплаты
//
Функция СостояниеЗадачиУплаты(Контекст, Знач Сегодня = Неопределено) Экспорт

	Состояние = НовыйСостояниеЗадачиУплаты();

	Если Сегодня = Неопределено Тогда
		Сегодня = НачалоДня(ТекущаяДатаПользователя());
	КонецЕсли;

	Запрос = НовыйСведенияОНачисленномНалогеЗаПериод();
	ЗаполнитьЗначенияСвойств(Запрос, Контекст);

	Запрос.ПолучитьРасчетНалога             = Истина;
	Запрос.ПолучитьРеквизитыОплаты          = Истина;

	Расчет = СведенияОНачисленномНалогеЗаПериод(Запрос);

	ПрименяетсяЕНС = УчетнаяПолитика.ПлательщикЕНП(Контекст.Организация, Сегодня);

	Состояние.ДатаРасчета = Расчет.ПлановаяДатаРасчета;
	Если Расчет.РасчетНалогаПолучен Тогда
		Состояние.РасчетФНС   = "Получен";
		Состояние.ДатаРасчета = Расчет.ДатаРасчета;
	КонецЕсли;

	Если Состояние.РасчетФНС <> "Получен" И Состояние.ДатаРасчета < Сегодня Тогда
		Состояние.РасчетФНС = "Просрочен";
	КонецЕсли;

	Если Расчет.СуммаЗадолженности > 0 Тогда
		Состояние.ЕстьЗадолженностьПрошлыхПериодов = Истина;
	КонецЕсли;

	Если Расчет.РасчетНалогаПолучен Тогда
		Состояние.ЕстьТекущееНачисление = (Расчет.НачисленныйНалог > 0);
	Иначе
		Состояние.ЕстьТекущееНачисление = (Расчет.СуммаОплаты > 0);
	КонецЕсли;
	
	Состояние.Ошибки = Расчет.Ошибки;
	
	Возврат Состояние;

КонецФункции

// Получает для организации банк из классификатора банков, используемый в основном банковском счете 
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторБанков - Основной банк организации
//
Функция ОсновнойБанкОрганизации(Организация, ПериодСобытия) Экспорт
	
	СведенияОбОрганизации = ИнтеграцияАУСН.НовыеСведенияОбОрганизации();

	ИнтеграцияАУСНПереопределяемый.ПолучитьСведенияОбОрганизации(
				Организация, НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия), СведенияОбОрганизации);

	Возврат СведенияОбОрганизации.БанкОсновногоСчета;
	
КонецФункции

// Список видов налогов, уплачиваемых с помощью обработки "Помощник уплаты налога АУСН"
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыНалогов
//
Функция ВидыНалоговУплачиваемыхВПомощнике() Экспорт

	ВидыНалогов = Новый Массив;
	
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.АУСН);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	Возврат ВидыНалогов;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтатусУплаты(ПараметрыЗадачи)

	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Правило       = ПараметрыЗадачи.Правило;

	Статус = "";
	ДокументыУплаты = ДокументыУплатыЗаПериод(Организация, ПериодСобытия, Правило, Ложь);
	Уплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ДокументыУплаты);
	Начислено = РегистрыСведений.РасчетНалогаАУСН.ДанныеЗаПериод(Организация, ПериодСобытия).Сумма;

	Если Уплачено > 0 И Уплачено >= Начислено Тогда
		Статус = "Оплачено";
	КонецЕсли;

	Возврат Статус;

КонецФункции

// Конструктор результата расчета сведений о начисленном налоге
//
// Возвращаемое значение:
//  Структура
//
Функция РезультатРасчетаСведенийОНачисленномНалоге()

	Результат = Новый Структура;
	Результат.Вставить("НачисленныйНалог",         0);
	Результат.Вставить("СуммаЗадолженности",       0);
	Результат.Вставить("Доходы",                   0);
	Результат.Вставить("Расходы",                  0);
	Результат.Вставить("СуммаОплаты",              0);
	Результат.Вставить("ЭтоПредварительныйРасчет", Ложь);
	Результат.Вставить("ДатаРасчета",              Дата(1, 1, 1));
	Результат.Вставить("ПлановаяДатаРасчета",      Дата(1, 1, 1));
	Результат.Вставить("ДатаНачисления",           ТекущаяДатаПользователя());
	Результат.Вставить("ДатаЗапросаЗадолженности", Дата(1, 1, 1));
	Результат.Вставить("РеквизитыОплаты",          Новый Массив);
	Результат.Вставить("СтавкаНалога",             0);
	Результат.Вставить("РасчетНалогаПолучен",      Ложь);
	Результат.Вставить("РеквизитыОплатыПолучены",  Ложь);
	Результат.Вставить("ЭтоКрайняяЗадача",         Ложь);
	Результат.Вставить("ТекущаяЗадолженность",     0);
	Результат.Вставить("Ошибки",                   "");

	Возврат Результат;

КонецФункции

Функция НовыйДанныеПлатежногоПоручения()

	Данные = ИнтеграцияАУСН.НовыйРеквизитыЕНС();

	Данные.Вставить("Тип",   "НачислениеЗаМесяц");
	Данные.Вставить("Сумма", 0);

	Возврат Данные;

КонецФункции

Функция ЭтоКрайняяЗадача(Правило, Организация, Период) Экспорт

	ЭтоКрайняяЗадача = Ложь;
	ПериодКрайнейЗадачи = ПериодКрайнейЗадачи(Организация, Правило);

	Если ЗначениеЗаполнено(ПериодКрайнейЗадачи) Тогда
		ЭтоКрайняяЗадача = (НачалоМесяца(Период) = НачалоМесяца(ПериодКрайнейЗадачи));
	Иначе
		ЭтоКрайняяЗадача = (НачалоМесяца(Период) <= НачалоМесяца(ТекущаяДатаПользователя()));
	КонецЕсли;

	Возврат ЭтоКрайняяЗадача;

КонецФункции

Функция ПериодКрайнейЗадачи(Организация, Правило) Экспорт
	
	// В качестве периода крайней задачи берется начало выполнения последней задачи
	// с истекшим сроком оплаты. Например, 15 марта ближайшей просроченной задачей будет
	// задача по оплате налога за январь (ее нужно было выполнить до 25 февраля), у которой начало выполнения - 1 февраля.
	// Следовательно, если оплата за январь является уже просроченной, то крайней актуальной задачей является задача
	// оплаты налога за февраль (начало выполнения просроченной задачи).
	// Если срок оплаты еще ни по одной задаче не наступил (переход на АУСН выполнен недавно),
	// то крайней будет считаться задача с началом выполнения в текущем месяце.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Срок < &НачалоДня
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.ПериодСобытия УБЫВ";
	
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаПользователя()));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачалоВыполнения;
	КонецЕсли;
	
	ЗапросПерваяЗадача = Новый Запрос;
	ЗапросПерваяЗадача.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.НачалоВыполнения МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.ПериодСобытия";
	
	ЗапросПерваяЗадача.УстановитьПараметр("Правило", Правило);
	ЗапросПерваяЗадача.УстановитьПараметр("Организация", Организация);
	ЗапросПерваяЗадача.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДатаПользователя()));
	ЗапросПерваяЗадача.УстановитьПараметр("КонецМесяца", КонецМесяца(ТекущаяДатаПользователя()));
	
	ВыборкаПерваяЗадача = ЗапросПерваяЗадача.Выполнить().Выбрать();
	Если ВыборкаПерваяЗадача.Следующий() Тогда
		Возврат ВыборкаПерваяЗадача.ПериодСобытия;
	Иначе
		Возврат Дата(1, 1, 1);
	КонецЕсли;

КонецФункции

Функция СрокРасчетаНалогаПоУмолчанию(Период) Экспорт

	СледующийМесяц = КонецМесяца(Период) + 1;

	Результат = Дата(Год(СледующийМесяц), Месяц(СледующийМесяц), ОкончаниеСрокаРасчетаНалогаДень());
	Возврат Результат;

КонецФункции

// Конструктор состояния задачи уплаты АУСН
//
// Возвращаемое значение:
//  Структура
//
Функция НовыйСостояниеЗадачиУплаты()

	Состояние = Новый Структура;

	Состояние.Вставить("ЕстьЗадолженностьПрошлыхПериодов", Ложь);
	Состояние.Вставить("ЕстьТекущееНачисление",            Ложь);
	Состояние.Вставить("РасчетФНС",                        "Ожидается"); // Ожидается, Получен, Просрочен
	Состояние.Вставить("ДатаРасчета",                      '0001-01-01');
	Состояние.Вставить("Ошибки",                           "");

	Возврат Состояние;

КонецФункции

// День месяца, не позднее которого должен быть получен расчет налога.
// 
// Возвращаемое значение:
//  Число
//
Функция ОкончаниеСрокаРасчетаНалогаДень() Экспорт

	Возврат 15;

КонецФункции

Функция ТекущаяДатаПользователя()

	Возврат ТекущаяДатаСеанса();

КонецФункции

#КонецОбласти

#КонецЕсли