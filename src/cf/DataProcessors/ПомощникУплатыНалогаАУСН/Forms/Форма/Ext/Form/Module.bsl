#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	Объект.Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПериодСобытия) Тогда
		ПериодСобытия = Параметры.ПериодСобытия;
	Иначе
		ПериодСобытия = ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если Параметры.КонтекстныйВызов Тогда
		Заголовок = Параметры.Описание;
	Иначе
		Заголовок = НСтр("ru = 'Оплата налога АУСН'");
	КонецЕсли;
	
	Объект.Период = КонецМесяца(ПериодСобытия);
	ПредставлениеПериода = ПредставлениОтчетногоПериода(ПериодСобытия);
	
	Если Не Объект.Организация.Пустая() Тогда
		
		ОсновнойБанк = РегистрыСведений.СостоянияИнтеграцииАУСН.БанкИнтеграции(Объект.Организация);
		
		Если Не ЗначениеЗаполнено(ОсновнойБанк) Тогда
			
			ОсновнойБанк = Обработки.ПомощникУплатыНалогаАУСН.ОсновнойБанкОрганизации(Объект.Организация, ПериодСобытия);
			
		КонецЕсли;
		
		СсылкаНаЛичныйКабинет = РегистрыСведений.БанкиАУСН.СсылкаЛичныйКабинет(ОсновнойБанк);
		
	КонецЕсли;
	
	МожноСоздаватьДокументыУплаты = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);

	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	ЗаполнитьНачальныеПоказатели();
	
	УправлениеФормойПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АктуализироватьДанныеОНачисленномНалогеИзСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоМесяца(Объект.Период);
	КонецПериода  = КонецМесяца(Объект.Период);
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
		ПараметрыВыбора,
		Элементы.ПредставлениеПериода, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АктуализироватьДанныеОНачисленномНалогеИзСервиса();

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизацииДляОтчетности" Тогда

		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.Организация);
		ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
		ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыОрганизации());
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение", 
			ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтотОбъект, 
			УникальныйИдентификатор,
			, , 
			ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки =
		РаботаСОповещениямиОСостоянииОбменаССервисамиКлиентСервер.ИмяДействияИнформацияОбОшибкеАУСН() Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыОшибки = Новый Структура;
		ПараметрыФормыОшибки.Вставить("ТекстОшибки", Ошибки);
		ОткрытьФорму("ОбщаяФорма.ИнформацияОбОшибкеОбменаАУСН", ПараметрыФормыОшибки, , УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки =
		РаботаСОповещениямиОСостоянииОбменаССервисамиКлиентСервер.ИмяДействияЛичныйКабинетБанка() Тогда
		НавигационнаяСсылкаФорматированнойСтроки = СсылкаНаЛичныйКабинет;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииПараметровПомощникаНаСервере();
	АктуализироватьДанныеОНачисленномНалогеИзСервиса();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеУдаленияПлатежногоДокумента = Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		Платежи,
		"Платеж",
		ОповещениеУдаленияПлатежногоДокумента);
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура НетРеквизитовДействиеИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "БанковскиеОперацииАУСН" Тогда
		
		БанковскиеСчетаДляСверки = Новый СписокЗначений();
		БанковскиеСчетаДляСверки.Добавить(ОсновнойБанк);
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",              Объект.Организация);
		ПараметрыФормы.Вставить("Период",                   Объект.Период);
		ПараметрыФормы.Вставить("КонтекстныйВызов",         Истина);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",  Истина);
		ПараметрыФормы.Вставить("БанковскиеСчетаДляСверки", БанковскиеСчетаДляСверки);
		ПараметрыФормы.Вставить("СрокЗадачи",               ПоследнийДеньУточненияДанных);
	
		ОткрытьФорму("Отчет.БанковскиеОперацииАУСН.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекстТекущаяЗадолженностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиКТекущемуРасчетуНаСервере();
	АктуализироватьДанныеОНачисленномНалогеИзСервиса();

	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПлатежныеДокументы(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитыОплаты.Количество() = 1 Тогда
		СоздатьДокументУплатыНалога();
	Иначе
		ОплатитьНаСервере();
	
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручение"));
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
		Оповестить("СписокЗадачБухгалтера_Изменение");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьСервис(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Банк", ОсновнойБанк);
	
	ОткрытьФорму("Обработка.ПодключениеАУСН.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Объект.Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеФормы

&НаСервере
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
		Элементы.СообщениеОбОшибке.Заголовок = СообщениеОбОшибке;
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаРасчетНедоступен;
	
	ИначеЕсли Не СервисПодключен Тогда
	
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСервисНеПодключен;

	ИначеЕсли Не АктуализироватьДанные Тогда
		
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаРабочая;
		
		НайтиИОтобразитьСвязанныеПлатежи();
		
		// Видимость элементов формы определяется комбинациями значений переменных:
		// * НалогРассчитан - получен расчет налога за период;
		// * ЕстьРеквизитыОплаты - получена текущая задолженность или общая сумма начисления и реквизиты для их оплаты;
		// * РасчетПросрочен - определяет истек ли срок уплаты налога за период или нет.
		НалогРассчитан = ЗначениеЗаполнено(ДатаРасчета);
		ЕстьРеквизитыОплаты = (РеквизитыОплаты.Количество() > 0);
		ТолькоУточнениеДанных = ТекущаяДатаПользователя() < ПоследнийДеньУточненияДанных() И ТекущаяЗадолженность = 0
			И Не НалогРассчитан И ЭтоКрайняяЗадача;
		ПоясненияКРасчету = ПоясненияКРасчетуНалога(ДатаРасчета, ЕстьРеквизитыОплаты, СсылкаНаЛичныйКабинет);
		РасчетПросрочен = ПоясненияКРасчету.РасчетПросрочен;
		
		// * Группа РасчетНалога
		Элементы.РасчетНалога.Заголовок = ?(ЭтоПредварительныйРасчет,
			НСтр("ru='Предварительный расчет налога'"),
			НСтр("ru='Расчет налога'"));
		Элементы.РасчетНалога.Видимость = ЕстьРеквизитыОплаты И Не ТолькоУточнениеДанных Или НалогРассчитан;
				
		// ** Группа РасчетНалогаПросрочен (Налоговая инспекция должна была рассчитать налог...)
		Элементы.ПояснениеПросроченногоРасчета.Заголовок = ПоясненияКРасчету.ПояснениеНетРеквизитов;
		Элементы.ПояснениеПросроченногоРасчета.Видимость = ЕстьРеквизитыОплаты И Не НалогРассчитан;
		
		// ** Группа ПолученныеДанные (Доходы, расходы, ставка налога, начисленный налог)
		Элементы.ПолученныеДанные.Видимость = НалогРассчитан;
		
		// ** Декорация ПояснениеРасчета (Данные ФНС на ...)
		Элементы.ПояснениеРасчета.Заголовок = ПоясненияКРасчету.Пояснение;
		Элементы.ПояснениеРасчета.Видимость = НалогРассчитан;
		
		// * ГруппаИнформацияОбОплате
		Элементы.ГруппаИнформацияОбОплате.Видимость = Не ТолькоУточнениеДанных;
		// ** Группа СуммыКОплате
		Элементы.СуммыКОплате.Видимость = ЕстьРеквизитыОплаты И ЭтоКрайняяЗадача;
		
		// Задолженность, начисление за месяц
		Элементы.СуммаЗадолженности.Видимость = (СуммаЗадолженности <> 0) И ЕстьРеквизитыОплаты;
		
		Элементы.СуммаОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru='Налог к оплате за %1'"),
			ПредставлениеПериодаСобытия(Объект.Период));
		Элементы.СуммаОплаты.Видимость = СуммаОплаты <> 0;
		
		// Пояснение к общей задолженности (Данные ФНС на...)
		Элементы.ПояснениеДатыОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='(данные ФНС на %1)'"), 
			Формат(ДатаЗапросаЗадолженности, "ДЛФ=D;"));
		Элементы.ПояснениеДатыОплаты.Видимость = ЕстьРеквизитыОплаты;
		
		// ** ГруппаТекущаяЗадолженность
		Элементы.ТекстТекущаяЗадолженность.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'По данным ФНС задолженность на %1 составляет %2 руб. (расчет за %3)
			|<a href=""РасчетТекущейЗадолженности"">Перейти к оплате за %3</a>'"),
			Формат(ДатаЗапросаЗадолженности, "ДЛФ=D;"),
			ТекущаяЗадолженность,
			ПредставлениеПериодаСобытия(ДатаНачисления));
		Элементы.ТекстТекущаяЗадолженность.Видимость =
			Не ЭтоКрайняяЗадача И НалогРассчитан И ЕстьРеквизитыОплаты И ТекущаяЗадолженность > 0;
		
		// ** ГруппаСрокОплаты
		Элементы.СрокиОплаты.Заголовок = ЗаголовокСрокиОплаты();
		Элементы.ГруппаСрокОплаты.Видимость = ЗначениеЗаполнено(СрокОплаты) И (ЕстьРеквизитыОплаты Или НалогРассчитан);
		
		// Управление видимостью и приоритетом кнопок оплаты и отправки в банк
		НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
		КнопкаПоУмолчаниюОтправитьВБанк = МожноСоздаватьДокументыУплаты И ЗначениеЗаполнено(НеОтправленныеПлатежи);
		ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку();
		ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку И ТребуетсяВыгрузитьДокументыОплаты();
	
		Элементы.ОтправитьПлатежиВБанк.Видимость = МожноСоздаватьДокументыУплаты И ТребуетсяОтправитьДокументыОплатыПоБанку;
		Элементы.ВыгрузитьПлатежи.Видимость = МожноСоздаватьДокументыУплаты И ТребуетсяВыгрузитьДокументыОплаты;
		Элементы.ОтправитьПлатежиВБанк.КнопкаПоУмолчанию = КнопкаПоУмолчаниюОтправитьВБанк;
		УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыгрузитьПлатежи, КнопкаПоУмолчаниюОтправитьВБанк);
		
		Элементы.КомандыОплатить.Видимость = ВсегоКОплате <> 0 И ЕстьРеквизитыОплаты И ЭтоКрайняяЗадача;
		НалогОплаченПолностью = Платежи.Итог("Сумма") >= ВсегоКОплате;
		Элементы.СоздатьПлатежныеДокументы.Видимость = МожноСоздаватьДокументыУплаты И Не НалогОплаченПолностью;
		Элементы.СоздатьПлатежныеДокументы.КнопкаПоУмолчанию = МожноСоздаватьДокументыУплаты
			И Не НалогОплаченПолностью И Не КнопкаПоУмолчаниюОтправитьВБанк;
		
		// ** ГруппаЛичныйКабинет
		Элементы.ЛичныйКабинет.Видимость = ЕстьРеквизитыОплаты;
			
		// * ГруппаНетРеквизитов
		Элементы.ГруппаНетРеквизитов.Видимость = Не ЕстьРеквизитыОплаты Или ТолькоУточнениеДанных;
		
		Элементы.НетРеквизитовТекст.Заголовок = ПоясненияКРасчету.ПояснениеНетРеквизитов;
		Элементы.НетРеквизитовТекст.Видимость = Не ЕстьРеквизитыОплаты Или ТолькоУточнениеДанных;
		
		Элементы.НетРеквизитовДействиеИнформация.Заголовок = ПоясненияКРасчету.Действие;
		Элементы.НетРеквизитовДействиеИнформация.Видимость = Не РасчетПросрочен И Не НалогРассчитан Или ТолькоУточнениеДанных;
		
		Элементы.НетРеквизитовДействиеПроблема.Заголовок = ПоясненияКРасчету.Действие;
		Элементы.НетРеквизитовДействиеПроблема.Видимость = РасчетПросрочен;
		
	Иначе

		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаПустая;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	ВыполнениеИзКомандногоМеню = Не Параметры.КонтекстныйВызов;
	Элементы.ПредставлениеПериода.Видимость = ВыполнениеИзКомандногоМеню;
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Элементы.Организация.Видимость = ВыполнениеИзКомандногоМеню;
		Элементы.ОрганизацияСсылка.Видимость = Не ВыполнениеИзКомандногоМеню;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ОрганизацияСсылка.Видимость = Ложь;
	КонецЕсли;
	
	ЛичныйКабинетАУСН = СтрШаблон(НСтр("ru = '<a href=""%1"">Личный кабинет сервиса АУСН</a>'"),
		РегистрыСведений.БанкиАУСН.СсылкаЛичныйКабинет(ОсновнойБанк));
	
	Элементы.ЛичныйКабинет.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ЛичныйКабинетАУСН);

	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	СообщениеОбОшибке = Новый ФорматированнаяСтрока("");

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		СообщениеОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Необходимо выбрать организацию'"));
		Возврат;
	КонецЕсли;
	
	ПрименяетсяАУСН = УчетнаяПолитика.ПрименяетсяАУСН(Объект.Организация, Объект.Период);
	Если Не ПрименяетсяАУСН Тогда
		СообщениеОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='Организация по состоянию на %1 не применяет АУСН'"), 
			Формат(КонецМесяца(Объект.Период), "ДЛФ=DD"));
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыОрганизации();
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	СервисПодключен =
		(РегистрыСведений.СостоянияИнтеграцииАУСН.СостояниеИнтеграции(Объект.Организация, ОсновнойБанк) = Перечисления.СостоянияИнтеграцииАУСН.Подключено);
	
	ПолучаемыеРеквизиты = РеквизитыПолучаемыеИзСервиса();
	Для Каждого ТекущийРеквизит Из ПолучаемыеРеквизиты Цикл
		Если ТипЗнч(ЭтотОбъект[ТекущийРеквизит]) = Тип("СписокЗначений") Тогда
			ЭтотОбъект[ТекущийРеквизит].Очистить();
		Иначе
			ЭтотОбъект[ТекущийРеквизит] = 0;
		КонецЕсли;
	КонецЦикла;
	ВсегоКОплате = 0;
	
	УстановитьПравилоИСрокОплатыНалога();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыПолучаемыеИзСервиса()
	
	Результат = Новый Массив;
	Результат.Добавить("Доходы");
	Результат.Добавить("Расходы");
	Результат.Добавить("НачисленныйНалог");
	Результат.Добавить("СуммаОплаты");
	Результат.Добавить("РеквизитыОплаты");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ПО БанковскиеСчета.Банк.Код = СостоянияИнтеграцииАУСН.Банк.Код
		|		И СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
		|		И БанковскиеСчета.Владелец = СостоянияИнтеграцииАУСН.Организация
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	БанковскиеСчета.ПометкаУдаления,
		|	БанковскийСчет";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполнения

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Или ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Объект.Организация, ПроверяемыеРеквизитыОрганизации(), Неопределено);
	
	Если Не РеквизитыЗаполнены Тогда
		ТекстДействия = НСтр("ru= 'получить данные из налоговой инспекции'");
		СообщениеОбОшибке =
			ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ИНН");
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Функция РеквизитыОплатыСоответствуютОрганизации(ТекущиеРеквизитыОплаты)
	
	ПроверяемыеРеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН");
	
	РеквизитыПлатежногоПоручения = Новый Структура;
	РеквизитыПлатежногоПоручения.Вставить("ИНН", "ИННПлательщика");
	
	ШаблонСообщения =
		НСтр("ru = '%1 в полученных от ФНС реквизитах оплаты не соответствует организации <%2>.
		|В реквизитах оплаты указан %1 <%3>.'");
	
	ТекстыПредупреждений = Новый Массив;
	Для Каждого КлючИЗначениеРеквизита Из ПроверяемыеРеквизитыОрганизации Цикл
		
		ИмяРеквизита = КлючИЗначениеРеквизита.Ключ;
		Если СокрЛП(ПроверяемыеРеквизитыОрганизации[ИмяРеквизита])
			= СокрЛП(ТекущиеРеквизитыОплаты[РеквизитыПлатежногоПоручения[ИмяРеквизита]]) Тогда
			Продолжить;
		КонецЕсли;
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ИмяРеквизита, Объект.Организация, ТекущиеРеквизитыОплаты[РеквизитыПлатежногоПоручения[ИмяРеквизита]]);
		ТекстыПредупреждений.Добавить(ТекстПредупреждения);
	КонецЦикла;
	
	Если ТекстыПредупреждений.Количество() > 0 Тогда
		
		СообщениеПользователю = СтрСоединить(ТекстыПредупреждений, Символы.ПС);
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(СообщениеПользователю);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ПоясняющиеНадписи

&НаСервере
Процедура УстановитьПравилоИСрокОплатыНалога()

	Если ЗначениеЗаполнено(Объект.Период) Тогда
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("АУСН", "2021_Уплата");
		СрокОплаты = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, Правило, Объект.Период)
	Иначе
		СрокОплаты = '00010101';
		Правило = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоясненияКРасчетуНалога(ДатаРасчетаФактическая, ЕстьРеквизитыОплаты, СсылкаНаЛичныйКабинет)
	
	Результат = НовыйПояснениеКРасчетуНалога();
	
	Результат.Действие = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = 'Разобраться в ситуации поможет <a href=""%1"">Личный кабинет сервиса АУСН</a>'"),
		СсылкаНаЛичныйКабинет);
			
	НалоговыйПериодСтрока = ПредставлениеПериодаСобытия(Объект.Период);
	ДатаРасчетаПоУмолчанию = КонецДня(Обработки.ПомощникУплатыНалогаАУСН.СрокРасчетаНалогаПоУмолчанию(Объект.Период));
	ТекущаяДатаПользователя = ТекущаяДатаПользователя();
	ПоследнийДеньУточненияДанных = ПоследнийДеньУточненияДанных();
	Результат.РасчетПросрочен = ДатаРасчетаПоУмолчанию < ТекущаяДатаПользователя;
	
	Результат.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='(данные ФНС на %1)'"),
		Формат(ДатаРасчетаФактическая, "ДЛФ=D;"));
	НалогРассчитан = ЗначениеЗаполнено(ДатаРасчетаФактическая);
	Если НалогРассчитан И Не ЕстьРеквизитыОплаты И Не Результат.РасчетПросрочен Тогда
		
		Результат.ПояснениеНетРеквизитов = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='Реквизиты оплаты и данные по текущей задолженности от ФНС еще не поступили.
			|Налоговая инспекция предоставит их не позднее <b>%1</b>'"),
			Формат(ДатаРасчетаПоУмолчанию, "ДЛФ=DD"));
	ИначеЕсли НалогРассчитан И Не ЕстьРеквизитыОплаты И Результат.РасчетПросрочен Тогда
		Результат.ПояснениеНетРеквизитов = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='Реквизиты оплаты и данные по текущей задолженности от ФНС не поступили.
			|Налоговая инспекция должна была предоставить их не позднее <b>%1</b>'"),
			Формат(ДатаРасчетаПоУмолчанию, "ДЛФ=DD"));
			
	ИначеЕсли ТекущаяДатаПользователя < ПоследнийДеньУточненияДанных Тогда
		
		Результат.ПояснениеНетРеквизитов = ПоясненияКРасчетуНалогаСрокНеИстек(ДатаРасчетаПоУмолчанию, НалоговыйПериодСтрока);

		Результат.Действие = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчет налога будет выполнен на основании данных <a href=""БанковскиеОперацииАУСН"">Банковских операций</a>.
			|Проверьте и при необходимости скорректируйте их до <b>%1</b>'"),
			Формат(ПоследнийДеньУточненияДанных, "ДЛФ=DD")));
			
	ИначеЕсли Не НалогРассчитан И Результат.РасчетПросрочен Тогда
		
		Результат.ПояснениеНетРеквизитов = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Налог за %1 не рассчитан.
			|Налоговая инспекция должна была рассчитать налог не позднее <b>%2</b>'"),
			НалоговыйПериодСтрока,
			Формат(ДатаРасчетаПоУмолчанию, "ДЛФ=DD"));
					
	ИначеЕсли Не НалогРассчитан И ЕстьРеквизитыОплаты Тогда
		
		Результат.ПояснениеНетРеквизитов = НСтр("ru='Данные ФНС по детальному расчету налога не поступили'");

	Иначе
			
		Результат.ПояснениеНетРеквизитов = ПоясненияКРасчетуНалогаСрокНеИстек(ДатаРасчетаПоУмолчанию, НалоговыйПериодСтрока);
		ПериодСледующегоРасчета = КонецМесяца(Объект.Период) + 1;
		Результат.Действие = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчет налога будет выполнен на основании данных <a href=""БанковскиеОперацииАУСН"">Банковских операций</a>.
			|Проверьте и при необходимости скорректируйте их.
			|Изменения будут отражены в расчете налога ФНС за %1'"),
			ПредставлениеПериодаСобытия(ПериодСледующегоРасчета)));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоследнийДеньУточненияДанных()
	
	Возврат КонецМесяца(Объект.Период) + КоличествоДнейДляУточненияДанных() * 24 * 60 * 60;

КонецФункции

// Новый пояснение к расчету налога.
// 
// Возвращаемое значение:
//  Структура - Новый пояснение к расчету налога:
// * РасчетПросрочен - Булево
// * Пояснение - Строка
// * ПояснениеНетРеквизитов - Строка
// * Действие - Строка
//
&НаСервере
Функция НовыйПояснениеКРасчетуНалога()
	
	Результат = Новый Структура;
	Результат.Вставить("РасчетПросрочен",        Ложь);
	Результат.Вставить("Пояснение",              "");
	Результат.Вставить("ПояснениеНетРеквизитов", "");
	Результат.Вставить("Действие",               "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоясненияКРасчетуНалогаСрокНеИстек(Знач ДатаРасчетаПоУмолчанию, Знач НалоговыйПериодСтрока)
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Налог за %1 ещё не рассчитан.
		|Налоговая инспекция рассчитает налог не позднее <b>%2</b>'"),
		НалоговыйПериодСтрока, Формат(ДатаРасчетаПоУмолчанию, "ДЛФ=DD"));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениОтчетногоПериода(Период)
	
	Возврат БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(Период),
		КонецМесяца(Период),
		Истина)
	
КонецФункции

&НаСервере
Функция ПредставлениеПериодаСобытия(Период)
	
	Возврат КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(Период), КонецМесяца(Период));
	
КонецФункции

&НаСервере
Функция КоличествоДнейДляУточненияДанных()
	
	// https://ausn.nalog.gov.ru/
	// Порядок и сроки уплаты налога на АвтоУСН:
	// Не позднее седьмого числа следующего месяца плательщику АвтоУСН следует проверить,
	// правильно ли банк разметил операции, на основе которых будет рассчитываться налог.
		
	Возврат 7;
	
КонецФункции

&НаСервере
Функция ЗаголовокСрокиОплаты()
	
	ШаблонСрокиОплатыЗаголовок = "";
	
	ТекстыЗамены = Новый Структура;
	ТекстыЗамены.Вставить("СрокОплаты", Формат(СрокОплаты, "ДЛФ=DD"));
	ТекстыЗамены.Вставить("ПериодРасчета", ПредставлениеПериодаСобытия(Объект.Период));
	
	Если ЗначениеЗаполнено(СрокОплаты) И СуммаЗадолженности > 0 Тогда
		
		ШаблонСрокиОплатыЗаголовок = НСтр("ru='Оплатить задолженность ЕНС нужно уже сейчас,
			|а налог за [ПериодРасчета] - не позднее [СрокОплаты]'");
		
	ИначеЕсли ЗначениеЗаполнено(СрокОплаты) Тогда
		
		ШаблонСрокиОплатыЗаголовок = НСтр("ru='Оплатить налог нужно не позднее [СрокОплаты]'");
			
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонСрокиОплатыЗаголовок,
				ТекстыЗамены);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущаяДатаПользователя()
	Возврат ТекущаяДатаСеанса();
КонецФункции

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанныеОНачисленномНалогеИзСервиса()
	
	Если Не СервисПодключен
		Или Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Период) Тогда
		
		УправлениеФормой();
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = АктуализироватьДанныеОНачисленномНалогеИзСервисаНаСервере();
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		АктуализироватьДанныеОНачисленномНалогеИзСервисаЗавершение(ДлительнаяОперация, Неопределено);
		Возврат;
	КонецЕсли;
	
	АктуализироватьДанные = Истина;
	Обработчик = Новый ОписаниеОповещения("АктуализироватьДанныеОНачисленномНалогеИзСервисаЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция АктуализироватьДанныеОНачисленномНалогеИзСервисаНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных о расчете налога АУСН'");
	
	ПараметрыМетода = Обработки.ПомощникУплатыНалогаАУСН.НовыйСведенияОНачисленномНалогеЗаПериод();
	
	ПараметрыМетода.ПолучитьРасчетНалога             = Истина;
	ПараметрыМетода.ПолучитьРасшифровкуНалоговойБазы = Истина;
	ПараметрыМетода.ПолучитьРеквизитыОплаты          = Истина;
	
	ПараметрыМетода.Организация = Объект.Организация;
	ПараметрыМетода.Период = Объект.Период;
	ПараметрыМетода.Правило = Правило;
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		"Обработки.ПомощникУплатыНалогаАУСН.СведенияОНачисленномНалогеЗаПериод",
		ПараметрыМетода);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура АктуализироватьДанныеОНачисленномНалогеИзСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		Ответ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если Ответ <> Неопределено Тогда
			
			РеквизитыИсключения = Новый Массив;
			РеквизитыИсключения.Добавить("РеквизитыОплаты");
			РеквизитыИсключения.Добавить("РасчетНалогаПолучен");
			РеквизитыИсключения.Добавить("РеквизитыОплатыПолучены");
			РеквизитыИсключения.Добавить("ПлановаяДатаРасчета");
			
			Для Каждого ТекущийРеквизит Из Ответ Цикл
				Если РеквизитыИсключения.Найти(ТекущийРеквизит.Ключ) = Неопределено Тогда
					ЭтотОбъект[ТекущийРеквизит.Ключ] = Ответ[ТекущийРеквизит.Ключ];
				КонецЕсли;
			КонецЦикла;
			
			РеквизитыОплаты.ЗагрузитьЗначения(Ответ.РеквизитыОплаты);
			
			Если ЗначениеЗаполнено(Ответ.Ошибки) Тогда
				ТекстЗаголовка = НСтр(
				"ru = 'При обмене с сервисом АУСН произошла ошибка. Передайте в техническую поддержку <a href = ""%1"">Информацию об ошибке</a> через <a href = ""%2"">Личный кабинет</a> банка.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
					ТекстЗаголовка,
					РаботаСОповещениямиОСостоянииОбменаССервисамиКлиентСервер.ИмяДействияИнформацияОбОшибкеАУСН(),
					РаботаСОповещениямиОСостоянииОбменаССервисамиКлиентСервер.ИмяДействияЛичныйКабинетБанка());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Не удалось получить данные расчета налога по причине:
				 |%1'"), Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	АктуализироватьДанные = Ложь;
	ВсегоКОплате = СуммаЗадолженности + СуммаОплаты;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКТекущемуРасчетуНаСервере()
	
	Объект.Период = ДатаНачисления;

	ПредставлениеПериода = ПредставлениОтчетногоПериода(Объект.Период);
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'АУСН, уплата за %1'"), ПредставлениеПериодаСобытия(Объект.Период));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	ПредставлениеПериода = ПредставлениОтчетногоПериода(РезультатВыбора.НачалоПериода);
	
	ПриИзмененииПараметровПомощникаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровПомощникаНаСервере()
	ЗаполнитьНачальныеПоказатели();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьНачальныеПоказатели();
	АктуализироватьДанныеОНачисленномНалогеИзСервиса();
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыУплатыНалога

&НаСервере
Процедура ОплатитьНаСервере()
	
	ЗначенияЗаполнения = ДанныеЗаполненияУплатыНалогаПоРеквизитам();
	
	СоздатьДокументыУплатыНалогаПоРеквизитам(ЗначенияЗаполнения);

	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыУплатыНалогаПоРеквизитам(ЗначенияЗаполнения)
	
	Для Каждого ТекущаяСтрока Из ЗначенияЗаполнения Цикл
		
		НовыйДокумент = Документы.ПлатежноеПоручение.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекущаяСтрока);
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ПравилоУплатыНалогов", Правило);
		НовыйДокумент.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря", Объект.Период);
		
		// Чтобы сообщения, связанные с ошибками заполнения, были привязаны к созданным документам,
		// сначала запишем документ.
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(НовыйДокумент.Ссылка));
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияУплатыНалогаПоРеквизитам()
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Организация);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияЗаполненияПоРеквизитам = Новый Массив;
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		Объект.Период,
		ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	
	ДанныеЗаполнения = НовыйДанныеЗаполненияПлатежногоПоручения();
	ДанныеЗаполнения.Организация = Объект.Организация;
	ДанныеЗаполнения.Дата = НачалоДня(ТекущаяДатаПользователя());
	ДанныеЗаполнения.СчетОрганизации = СчетОрганизации;
	ДанныеЗаполнения.ПоказательПериода = ПоказательПериода;
	ДанныеЗаполнения.ВидОперации = ВидОперации;
	
	ДокументыУплатыНалога = Обработки.ПомощникУплатыНалогаАУСН.ДокументыУплатыНалога(
		Объект.Организация,
		Объект.Период,
		Правило,
		РеквизитыОплаты);
		
	СозданныеДокументы = ДокументыОплатыПоПоказателям(ДокументыУплатыНалога);
	
	Для Каждого ТекущаяСтрока Из РеквизитыОплаты Цикл
		
		ТекущиеРеквизитыОплаты = ТекущаяСтрока.Значение;
		
		Если Не РеквизитыОплатыСоответствуютОрганизации(ТекущиеРеквизитыОплаты) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СуммаКОплате = СуммаКОплате(СозданныеДокументы, ТекущиеРеквизитыОплаты);
		Если СуммаКОплате <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(ДанныеЗаполнения.Организация, ДанныеЗаполнения.Дата);
		ДействуетПереходНаЕНП = ПлатежиВБюджетКлиентСервер.ДействуетПереходНаЕНП(ДанныеЗаполнения.Дата);
		
		ДанныеЗаполнения.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ТекущиеРеквизитыОплаты.КодБК, Истина);
		
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Налог, "ВидНалога");
		
		// Если в реквизитах на уплату передан КБК налога, не предусмотренного для уплаты помощником, заполним
		// реквизит "Налог" значением по умолчанию.
		Если Обработки.ПомощникУплатыНалогаАУСН.ВидыНалоговУплачиваемыхВПомощнике().Найти(ВидНалога) = Неопределено Тогда
		
			Если ДействуетПереходНаЕНП Тогда
				ДанныеЗаполнения.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
			Иначе
				ДанныеЗаполнения.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.АУСН);
			КонецЕсли;
		
		КонецЕсли;
		
		ЭтоЕНП =
			(ДанныеЗаполнения.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж));
		
		Если ЭтоЕНП Тогда
			
			КонтрагентЕНП = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(
				ДанныеЗаполнения.Налог, ДанныеЗаполнения.Организация);
			
			// Получатель ЕНП должен быть создан автоматически при обновлении или начальном заполнении базы.
			// Если этого не произошло, создадим его сейчас. В дальнейшем этот контрагент используется
			// в обработке заполнения платежного поручения.
			Если Не ЗначениеЗаполнено(КонтрагентЕНП) Тогда
				Попытка
					ДанныеГосударственныхОрганов.ДобавитьМИДолПолучателяЕНП();
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ОписаниеОшибки = НСтр("ru='Ошибка создания получателя ЕНП'") + Символы.ПС
						+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ЗаписьЖурналаРегистрации(
						ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииОшибкаЗаписиОбъекта(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.Контрагенты, , ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЗаполнения.СуммаДокумента = СуммаКОплате;
		ДанныеЗаполнения.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		ДанныеЗаполнения.ТекстПолучателя = ТекущиеРеквизитыОплаты.Получатель;
		
		Если ЗначениеЗаполнено(ТекущиеРеквизитыОплаты.БИКПолучателя)
			И ЗначениеЗаполнено(ТекущиеРеквизитыОплаты.КорреспондентскийСчетПолучателя) 
			И ЗначениеЗаполнено(ТекущиеРеквизитыОплаты.СчетПолучателя) Тогда
			РеквизитыСчетаПолучателя = Новый Структура;
			РеквизитыСчетаПолучателя.Вставить("БИК", ТекущиеРеквизитыОплаты.БИКПолучателя);
			РеквизитыСчетаПолучателя.Вставить("КоррСчет", ТекущиеРеквизитыОплаты.КорреспондентскийСчетПолучателя);
			РеквизитыСчетаПолучателя.Вставить("НаименованиеБанка", ТекущиеРеквизитыОплаты.БанкПолучателя);
			РеквизитыСчетаПолучателя.Вставить("НомерСчета", ТекущиеРеквизитыОплаты.СчетПолучателя);
			ДанныеЗаполнения.Вставить("РеквизитыСчетаПолучателя", РеквизитыСчетаПолучателя);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекущиеРеквизитыОплаты, , "ВидОперации");
		
		ЗначенияЗаполненияПоРеквизитам.Добавить(ДанныеЗаполнения);
		
		НоваяСтрока = СозданныеДокументы.Добавить();
		НоваяСтрока.ВидНалоговогоОбязательства = ДанныеЗаполнения.ВидНалоговогоОбязательства;
		НоваяСтрока.ПоказательОснования = ДанныеЗаполнения.ПоказательОснования;
		НоваяСтрока.КодБК = ТекущаяСтрока.Значение.КодБК;
		НоваяСтрока.СуммаДокумента = СуммаКОплате;
		
	КонецЦикла;
	
	Возврат ЗначенияЗаполненияПоРеквизитам;
	
КонецФункции

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументУплатыДляУдаления));
	КонецЕсли;
	
КонецПроцедуры

// Конструктор данных заполнения платежного поручения.
// 
// Возвращаемое значение:
//  Структура:
//	  * Дата - Дата
//	  * Организация - СправочникСсылка.Организации
//	  * СчетОрганизации - СправочникСсылка.БанковскиеСчета
//	  * ВидОперации - ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств
//	  * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//	  * НалоговыйПериод - Дата
//	  * ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//	  * НазначениеПлатежа - Строка
//	  * ВидПлатежа - Строка
//	  * ОчередностьПлатежа - Число
//	  * ПоказательДаты - Строка
//	  * ПоказательНомера - Строка
//	  * ПоказательОснования - Строка
//	  * ПоказательПериода - Строка
//	  * ПоказательТипа - Строка
//	  * СтатусСоставителя - Строка
//	  * КодОКАТО - Строка
//	  * СуммаДокумента - Число
//	  * КодБК - Строка
//    * ТекстПолучателя - Строка
//	  * ИННПолучателя - Строка
//	  * КПППолучателя - Строка
//
&НаСервере
Функция НовыйДанныеЗаполненияПлатежногоПоручения()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",                       Дата(1, 1, 1));
	ДанныеЗаполнения.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("СчетОрганизации",            Справочники.БанковскиеСчета.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ВидОперации",                Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НалоговыйПериод",            Объект.Период);
	ДанныеЗаполнения.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",          "");
	ДанныеЗаполнения.Вставить("ВидПлатежа",                 "");
	ДанныеЗаполнения.Вставить("ОчередностьПлатежа",         УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы());
	ДанныеЗаполнения.Вставить("ПоказательДаты",             "");
	ДанныеЗаполнения.Вставить("ПоказательНомера",           "");
	ДанныеЗаполнения.Вставить("ПоказательОснования",        "");
	ДанныеЗаполнения.Вставить("ПоказательПериода",          "");
	ДанныеЗаполнения.Вставить("ПоказательТипа",             "");
	ДанныеЗаполнения.Вставить("СтатусСоставителя",          "");
	ДанныеЗаполнения.Вставить("КодОКАТО",                   "");
	ДанныеЗаполнения.Вставить("СуммаДокумента",             0);
	ДанныеЗаполнения.Вставить("КодБК",                      "");
	ДанныеЗаполнения.Вставить("ТекстПолучателя",            "");
	ДанныеЗаполнения.Вставить("ИННПолучателя",              "");
	ДанныеЗаполнения.Вставить("КПППолучателя",              "");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере
Процедура НайтиИОтобразитьСвязанныеПлатежи()
	
	Платежи.Очистить();
	
	// Оплата начислений текущего периода и пеней
	ТаблицаПлатежей = Обработки.ПомощникУплатыНалогаАУСН.ДокументыУплатыНалога(Объект.Организация, Объект.Период, Правило, РеквизитыОплаты);
	
	Если ЗначениеЗаполнено(ТаблицаПлатежей) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			ЗаполнитьЗначенияСвойств(Платежи.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, Платежи, "Платеж");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыОплатыПоПоказателям(СозданныеДокументы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	СУММА(ПлатежноеПоручение.СуммаДокумента) КАК СуммаДокумента,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&СозданныеДокументы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.ВидНалоговогоОбязательства,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательПериода");
	
	Запрос.УстановитьПараметр("СозданныеДокументы", СозданныеДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаКОплате(СозданныеДокументы, ТекущийПлатеж)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Отбор.Вставить("ПоказательОснования",        ТекущийПлатеж.ПоказательОснования);
	Отбор.Вставить("КодБК",                      ТекущийПлатеж.КодБК);
	Отбор.Вставить("ПоказательПериода",          ТекущийПлатеж.ПоказательПериода);
	
	СуммаОплаченная = 0;
	НайденныеДокументы = СозданныеДокументы.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из НайденныеДокументы Цикл
		СуммаОплаченная = СуммаОплаченная + ТекущаяСтрока.СуммаДокумента;
	КонецЦикла;
	
	Возврат ТекущийПлатеж.Сумма - СуммаОплаченная;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	ЗначенияЗаполнения = ДанныеЗаполненияУплатыНалогаПоРеквизитам();
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения[0]);
	ПараметрыФормы.Вставить("ПериодСобытия", Объект.Период);
	ПараметрыФормы.Вставить("Правило",       Правило);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая", ПараметрыФормы, , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервере
Функция ТребуетсяВыгрузитьДокументыОплаты()
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервере
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку()
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляВыгрузкиВФайл()
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(
		Объект.Организация, НеИсполненныеПлатежи);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку()
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(
		Объект.Организация, НеОтправленныеПлатежи);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти