
&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		Объект.ДатаНачала = Параметры.ДатаНачала;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаОкончания") Тогда
		Объект.ДатаОкончания = Параметры.ДатаОкончания;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"); 	
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		РабочаяДатаПриложения = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если День(РабочаяДатаПриложения) < 25 Тогда
			Объект.ДатаНачала    = НачалоМесяца(НачалоМесяца(РабочаяДатаПриложения) - 1);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		Иначе
			Объект.ДатаНачала    = НачалоМесяца(РабочаяДатаПриложения);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	Результат = ЗапуститьПерепроведениеДокументов();
	Если ОписаниеФоновогоЗадания <> Неопределено И Результат = Неопределено Тогда
		// Ранее запущенное фоновое задание продолжает выполняться.
		Возврат;
	КонецЕсли;
	
	Если ОписаниеФоновогоЗадания.Статус = "Выполняется" Тогда
		// Отображаем для индикации ожидания специализированную форму для перепроведения и закрытия месяца.
		ОписаниеПроцесса = ЗакрытиеМесяцаКлиент.ОписаниеПроцессаДлительнойОперации();
		ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Истина;
		ОписаниеПроцесса.ИспользоватьАктуализациюРасчетовСКонтрагентами = Результат.ИспользоватьАктуализациюРасчетовСКонтрагентами;
		ОписаниеПроцесса.КоличествоОрганизаций = Результат.ДоступныеОрганизации.Количество();
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ОписаниеПроцесса.Организация = Объект.Организация;
		Иначе
			Если Результат.ДоступныеОрганизации.Количество() > 0 Тогда
				ОписаниеПроцесса.Организация = Результат.ДоступныеОрганизации[0];
			КонецЕсли;
		КонецЕсли;

		ОписаниеПроцесса.Месяц = НачалоМесяца(Результат.ДатаНачалаПерепроведения);
		Если НачалоМесяца(Результат.ДатаНачалаПерепроведения) = НачалоМесяца(Результат.ДатаОкончанияПерепроведения) Тогда
			ОписаниеПроцесса.КоличествоМесяцев = 1;
		Иначе
			НачальныйМесяц = Месяц(Результат.ДатаНачалаПерепроведения);
			КонечныйМесяц  = Месяц(Результат.ДатаОкончанияПерепроведения);
			НачальныйГод   = Год(Результат.ДатаНачалаПерепроведения);
			КонечныйГод    = Год(Результат.ДатаОкончанияПерепроведения);
			
			// Рассчитаем количество полных месяцев между двумя датами (включая месяцы обоих дат).
			Если НачальныйМесяц > КонечныйМесяц Тогда
				ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод - 1) * 12 + (12 - НачальныйМесяц + КонечныйМесяц) + 1;
			Иначе
				ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод) * 12 + (КонечныйМесяц - НачальныйМесяц) + 1;
			КонецЕсли;

		КонецЕсли;
		
		ФормаДлительнойОперации = ЗакрытиеМесяцаКлиент.ОткрытьФормуДлительнойОперации(
			ЭтотОбъект, ОписаниеФоновогоЗадания.ИдентификаторЗадания, ОписаниеПроцесса);
		
		// Запустить обработчик-метроном, который будет генерировать малые сдвиги индикатора на ФормаДлительнойОперации.
		ФормаДлительнойОперации.ЗапуститьПериодическиеПроверкиПрогресса();
		
	Иначе
		
		ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
	КонецЕсли;
	
	// Регистрируем события получения сообщений прогресса и завершения фонового задания.
	ОповещениеОЗавершенииЗадания = Новый ОписаниеОповещения("ПоказатьРезультатПерепроведения", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);  
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ЗакрытиеМесяцаКлиент.ОповещениеОПрогрессеВыполнения(ФормаДлительнойОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОписаниеФоновогоЗадания, ОповещениеОЗавершенииЗадания, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

// Запускает фоновое задание, которое перепроведет документы за период.
//
// Возвращаемое значение:
//  Структура    - описание запущенного действия:
//                * ЗаданиеВыполняется - Булево - Истина, если после выполнения функции имеется запущенное фоновое задание; иначе Ложь.
//                * ОписаниеФоновогоЗадания - Неопределено - если при текущем вызове не было запущено фоновое задание;
//                                            Структура - запущено при текущем вызове функции. См. ДлительныеОперации.ВыполнитьФункцию().
//                * ДоступныеОрганизации - Массив из СправочникСсылка.Организации - список организаций для перепроведения.
//                * ДатаНачалаПерепроведения - Дата - начало периода.
//                * ДатаОкончанияПерепроведения - Дата - конец периода.
//                * ИспользоватьАктуализациюРасчетовСКонтрагентами - Булево - используется отложенное перепроведение.
//                * ПоказатьПредупреждение - Строка - если заполнено, то содержит описание ошибки, препятствующей запуску перепроведения.
//
&НаСервере
Функция ЗапуститьПерепроведениеДокументов()
	
	// Определяем наличие особой ситуации, когда перепроведение будет идти по нескольким организациям.
	ДоступныеОрганизации = ?(ЗначениеЗаполнено(Объект.Организация),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Организация),
		ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина));
	
	// Формируем список дат, за которые должно быть выполнено перепроведение.
	ДатаНачалаПерепроведения    = Объект.ДатаНачала;
	ДатаОкончанияПерепроведения = Объект.ДатаОкончания;
	Если Не ЗначениеЗаполнено(ДатаНачалаПерепроведения) Или Не ЗначениеЗаполнено(ДатаОкончанияПерепроведения) Тогда
		
		Обработки.ГрупповоеПерепроведениеДокументов.ОпределитьГраницыПериода(
			ДоступныеОрганизации,
			ДатаНачалаПерепроведения,
			ДатаОкончанияПерепроведения);
		
	КонецЕсли;
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию, только если все это происходит в одной форме.
	Если ОписаниеФоновогоЗадания <> Неопределено Тогда
		
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ОписаниеФоновогоЗадания.ИдентификаторЗадания) Тогда
			Возврат Неопределено; // надо ждать
		КонецЕсли;
		ОписаниеФоновогоЗадания = Неопределено;
		
	КонецЕсли;

	ПараметрыПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	
	ПараметрыПерепроведения.Организация     = Объект.Организация;
	ПараметрыПерепроведения.МоментНачала    = Новый МоментВремени(ДатаНачалаПерепроведения, Неопределено);
	ПараметрыПерепроведения.ДатаОкончания   = ДатаОкончанияПерепроведения;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПерепроведения.ОстанавливатьсяПоОшибке      = Объект.ОстанавливатьсяПоОшибке;
	ПараметрыПерепроведения.СообщатьПрогрессВыполнения   = Истина;
	
	ОписаниеФоновогоЗадания = Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
	
	Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеФоновогоЗадания);
	// Если в базе включено отложенное проведение, то будем использовать актуализацию.
	ИспользоватьАктуализациюРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение");
	Результат.Вставить("ДоступныеОрганизации",        ДоступныеОрганизации);
	Результат.Вставить("ДатаНачалаПерепроведения",    ДатаНачалаПерепроведения);
	Результат.Вставить("ДатаОкончанияПерепроведения", ДатаОкончанияПерепроведения);
	Результат.Вставить("ИспользоватьАктуализациюРасчетовСКонтрагентами", ИспользоватьАктуализациюРасчетовСКонтрагентами);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатПерепроведения(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	ОписаниеФоновогоЗадания = Неопределено;
	
	Если РезультатЗадания = Неопределено
	 Или РезультатЗадания.Статус = "Отменено" Тогда
		Возврат;
	ИначеЕсли РезультатЗадания.Статус = "Ошибка" Тогда
		
		Если Не ПустаяСтрока(РезультатЗадания.ПодробноеПредставлениеОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗадания.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ПоказатьПредупреждение(, РезультатЗадания.КраткоеПредставлениеОшибки);
		Возврат;
		
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(РезультатЗадания.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
	УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Результат закрытия подготовлен в Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	
	Если Не Результат.Свойство("ПроведеноДокументов")
	 Или Не Результат.Свойство("НеУдалосьПровести")
	 Или Не Результат.Свойство("ПроведениеПрервано") Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.ВывестиИнформациюУведомлений Тогда
		
		// Покажем подробный отчет об ошибках.
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, Результат.АдресХранилищаСОшибками);
		
	ИначеЕсли Результат.НеУдалосьПровести = 0
			И Результат.НеУдалосьАктуализировать = 0
			И НЕ Результат.ПроведениеПрервано Тогда
			
		Если Результат.АктуализированоДоговоров > 0 Тогда
			ТекстСообщения = НСтр("ru='Выполнено перепроведение документов:
			| - проведено документов: %1;
			| - актуализировано договоров: %2;
			| - ошибок не обнаружено'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.ПроведеноДокументов, Результат.АктуализированоДоговоров);
		Иначе
			ТекстСообщения = НСтр("ru='Выполнено перепроведение документов:
			| - проведено документов: %1;
			| - ошибок не обнаружено'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.ПроведеноДокументов);
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
