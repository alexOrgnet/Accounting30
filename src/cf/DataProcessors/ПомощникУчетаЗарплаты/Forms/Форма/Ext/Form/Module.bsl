
#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация     = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Подключена1СОтчетность = РегламентированнаяОтчетностьБП.Подключена1СОтчетность(Объект.Организация);
	
	РежимВыплатыПоДокументу     = Параметры.РежимВыплатыПоДокументу;
	РежимВыплатыЗаПериод        = Параметры.РежимВыплатыЗаПериод;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации,
													Объект.Организация,
													ВалютаРегламентированногоУчета);
													
	ТекущаяДатаПользователя = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Объект.ПериодРегистрации = Параметры.ПериодСобытия;
	ВидНалога                = Параметры.ВидНалога;
	Правило                  = Параметры.Правило;
	
	ИспользоватьРасчетПервойПоловиныМесяца =
		УчетЗарплаты.ИспользоватьРасчетПервойПоловиныМесяца(Объект.Организация, Объект.ПериодРегистрации);
		
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
		
	Правило_НДФЛ   = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("НДФЛ_Агент_Уплата",
																			"НДФЛ_Уплата",
																			,
																			Объект.ПериодРегистрации);
	Правило_Взносы = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("СтраховыеВзносы",
																			"_УплатаСтраховыеВзносы",
																			"Допвзносы",
																			Объект.ПериодРегистрации);
	Правило_Травматизм = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("СтраховыеВзносы",
																			"_Уплата_Травматизм",
																			"Допвзносы",
																			Объект.ПериодРегистрации);
																			
	ОпределитьСвязанныеПравила();
	
	ЭтоПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮридическоеФизическоеЛицо") =
		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ЭтоПредприниматель Тогда
		ЕстьБанковскийСчет = 
			Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Организация) <> 0;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Если ТекущаяДатаПользователя = НачалоДня(ТекущаяДатаСеанса()) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса() - 21*24*60*60);
		Иначе
			Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаПользователя);
		КонецЕсли;
	КонецЕсли;
	
	ПрименяетсяАУСН = УчетнаяПолитика.ПрименяетсяАУСН(
		Объект.Организация,
		Объект.ПериодРегистрации);
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		Объект.Организация,
		Объект.ПериодРегистрации,
		Перечисления.Периодичность.Месяц);
		
	Если НачалоМесяца(Объект.ПериодРегистрации) < НачалоМесяца(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;
	
	Если Не ПлательщикЕНП_ПереходныйПериод Тогда
		Если ТекущаяДатаПользователя < ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
			ПлательщикЕНП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(Объект.ПериодРегистрации >= ДатаПереходаНаЕдиныйНалоговыйПлатеж,
		ЗначениеЗаполнено(Правило_Уведомление) И Не ПрименяетсяАУСН,
		ЗначениеЗаполнено(Правило_Уведомление) И ПлательщикЕНП_ПереходныйПериод);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, Правило_Уведомление, КонецМесяца(Объект.ПериодРегистрации));
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
										Перечисления.ДоступныеПериодыОтчета.Месяц,
										НачалоМесяца(Объект.ПериодРегистрации),
										КонецМесяца(Объект.ПериодРегистрации));
	
	Если РежимВыплатыЗаПериод Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зарплата за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	ИначеЕсли РежимВыплатыПоДокументу Тогда
		Если ТипЗнч(Параметры.РасчетныйДокумент) = Тип("ДокументСсылка.Отпуск") Тогда
			ВидВыплаты= (НСтр("ru = 'Отпускные'"));
		ИначеЕсли ТипЗнч(Параметры.РасчетныйДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			ВидВыплаты = (НСтр("ru = 'Больничные'"));
		ИначеЕсли Параметры.Аванс Тогда
			ВидВыплаты = (НСтр("ru = 'Аванс'"));
		Иначе
			ВидВыплаты = (НСтр("ru = 'Зарплата'"));
		КонецЕсли;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2 г. (%3)'"),
																			ВидВыплаты,
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	ИначеЕсли Параметры.Аванс Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Аванс за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зарплата, НДФЛ и взносы за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	КонецЕсли;
	
	ВедетсяРасчетЗарплатыДляНебольшихОрганизаций = УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций();
	
	ВидимостьПодгруппРасчета = ВедетсяРасчетЗарплатыДляНебольшихОрганизаций
								И НЕ РежимВыплатыПоДокументу
								И НЕ РежимВыплатыЗаПериод;
	
	Элементы.ГруппаРасчетКоманды.Видимость          = ВидимостьПодгруппРасчета;
	Элементы.ГруппаРасчетПодвал.Видимость           = ВидимостьПодгруппРасчета;
	Элементы.ГруппаРасчетШапка.ОтображениеПодсказки = ?(ВидимостьПодгруппРасчета И Не Параметры.Аванс,
														ОтображениеПодсказки.Кнопка,
														ОтображениеПодсказки.Нет);
	
	Если ЭтоПредприниматель Тогда
		Элементы.ДобавитьВедомостьБанк.Видимость      = ЕстьБанковскийСчет;
	КонецЕсли;
	
	Если НЕ ЕстьОбособленныеПодразделения() Тогда
		Элементы.ОКАТОИП.Видимость    = Ложь;
		Элементы.ОКАТО.Видимость      = Ложь;
		Элементы.ДействиеНалог.Ширина = 58;
	Иначе
		Если ЭтоПредприниматель Тогда
			Элементы.ОКАТО.Ширина = 16;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеДокументыАванс.Видимость = Параметры.Аванс;
	Если Параметры.Аванс Тогда
		
		Элементы.ГруппаРасчет.Видимость                = ИспользоватьРасчетПервойПоловиныМесяца;
		Элементы.ГруппаРасчетКоманды.Видимость         = Ложь;
		Элементы.ГруппаНалог.Видимость                 = ИспользоватьРасчетПервойПоловиныМесяца;
		Элементы.ГруппаВзносы.Видимость                = Ложь;
		Элементы.ДекорацияВыплата.Видимость            = ИспользоватьРасчетПервойПоловиныМесяца;
		Элементы.ОписаниеДокументы.Видимость           = ИспользоватьРасчетПервойПоловиныМесяца;
		Элементы.ДекорацияВыплатаСтатикКонец.Видимость = ИспользоватьРасчетПервойПоловиныМесяца;
		Элементы.СуммаЗадолженность.Видимость          =  ИспользоватьРасчетПервойПоловиныМесяца;
		
		Если (ИспользоватьРасчетПервойПоловиныМесяца И Объект.ПериодРегистрации < ДатаПереходаНаЕдиныйНалоговыйПлатеж)
			Или ПрименяетсяАУСН Тогда
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = '2. Выплата аванса, оплата НДФЛ'");
		Иначе
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = 'Выплата аванса'");
		КонецЕсли;
		Элементы.ДекорацияРасчет.Заголовок             = НСтр("ru = '1. Расчет аванса'");
		Элементы.ДекорацияВыплата.Заголовок            = НСтр("ru = 'Выплата аванса'");
		Элементы.ДекорацияРасчетНачало.Заголовок       = НСтр("ru = 'Налоги рассчитываются автоматически'");
		
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс();
	КонецЕсли;
	
	Если РежимВыплатыПоДокументу ИЛИ РежимВыплатыЗаПериод Тогда
		
		Элементы.ДекорацияРасчетНачало.Видимость = Ложь;
		Элементы.ГруппаВыплатаКоманды.Видимость  = Ложь;
		Элементы.ГруппаВыплатаПодвал.Видимость   = Ложь;
		Элементы.ГруппаВзносы.Видимость          = Ложь;
		
		Элементы.ДекорацияРасчет.Заголовок    = НСтр("ru = 'Расчет'");
		Если Объект.ПериодРегистрации < ДатаПереходаНаЕдиныйНалоговыйПлатеж Или ПрименяетсяАУСН Тогда
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = 'Выплата и оплата НДФЛ'");
		Иначе
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = 'Выплата'");
		КонецЕсли;
		Элементы.ДекорацияВыплата.Заголовок   = НСтр("ru = 'Выплата'");
		
	ИначеЕсли Не Параметры.Аванс Тогда
		
		Элементы.ГруппаВзносы.Видимость = Не ПрименяетсяАУСН;
		Если Объект.ПериодРегистрации < ДатаПереходаНаЕдиныйНалоговыйПлатеж Или ПрименяетсяАУСН Тогда
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = '2. Выплата зарплаты, оплата НДФЛ и страховых взносов'");
		Иначе
			Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = '2. Выплата зарплаты, оплата страховых взносов'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияПлатежныеПоручения.Видимость                   = Не Параметры.Аванс И Не ПрименяетсяАУСН;
	Элементы.ДекорацияПлатежныеПорученияАванс.Видимость              = Параметры.Аванс И Не ИспользоватьРасчетПервойПоловиныМесяца;
	Элементы.ДекорацияПлатежныеПорученияРасчетныйАванс.Видимость     = Параметры.Аванс И ИспользоватьРасчетПервойПоловиныМесяца И Не ПрименяетсяАУСН;
	Элементы.ДекорацияПлатежныеПорученияРасчетныйАвансНДФЛ.Видимость = Параметры.Аванс И ИспользоватьРасчетПервойПоловиныМесяца И ПрименяетсяАУСН;
	Элементы.ДекорацияПлатежныеПорученияАУСН.Видимость               = Не Параметры.Аванс И ПрименяетсяАУСН;
	
	Если ПлательщикЕНП 
		И Не (РежимВыплатыПоДокументу ИЛИ РежимВыплатыЗаПериод)
		И Не Параметры.Аванс 
		И Не ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
		Элементы.ГруппаНалог.Видимость = Ложь;
		Если Объект.ПериодРегистрации < ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
			Элементы.ДекорацияВзносы.Заголовок    = НСтр("ru = 'Оплата страховых взносов и НДФЛ'") 
		Иначе
			Элементы.ДекорацияВзносы.Заголовок    = НСтр("ru = 'Оплата страховых взносов'") 
		КонецЕсли;
	Иначе
		Элементы.СтраницаЕНС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияПустая;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина,
														Истина,
														Истина,
														Истина,
														НЕ Параметры.РежимВыплатыПоДокументу
															И НЕ Параметры.РежимВыплатыЗаПериод,
														НЕ Параметры.Аванс
															И ПлательщикЕНП);
	
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 0.5, Истина);
	Иначе
		ЗагрузитьРезультат(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		Если Не ПлательщикЕНП Тогда
			Если Параметр.ПоказательПериода = ПоказательПериода И Параметр.ДокументОснование = Неопределено Тогда
				Отбор = Новый Структура("КБК, ОКАТО");
				ЗаполнитьЗначенияСвойств(Отбор, Параметр);
				НайденныеПлатежи = Платежи_НДФЛ.НайтиСтроки(Отбор);
				Если НайденныеПлатежи.Количество() = 1 Тогда
					ОбновитьСведенияОДокументахОплаты(3);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Параметр.Организация = Объект.Организация Тогда
				Отбор = Новый Структура("ПлатежноеПоручение", Параметр.Ссылка);
				НайденныеПлатежи = Платежи_Взносы.НайтиСтроки(Отбор);
				Если НайденныеПлатежи.Количество() = 1 Тогда
					ОбновитьСведенияОДокументахОплаты(4);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты"
		ИЛИ ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаПоДоговоруПодряда" Тогда
		Если Параметр.Организация = Объект.Организация Тогда
			Если Параметр.Свойство("Ведомость") Тогда
				Отбор = Новый Структура("Ведомость");
				ЗаполнитьЗначенияСвойств(Отбор, Параметр);
				НайденныеВедомости = Ведомости.НайтиСтроки(Отбор);
				Если НайденныеВедомости.Количество() = 1 Тогда
					Платеж = НайденныеВедомости[0];
					Если НЕ ЗначениеЗаполнено(Платеж.ПлатежныеДокументы)
						ИЛИ Платеж.ПлатежныеДокументы = Параметр.Ссылка Тогда
						ОбновитьСведенияОДокументахОплаты(2);
					Иначе
						Если ТипЗнч(Платеж.ПлатежныеДокументы) <> Тип("СписокЗначений") Тогда
							СписокДокументов = Новый СписокЗначений;
							СписокДокументов.Добавить(Платеж.ПлатежныеДокументы);
							Платеж.ПлатежныеДокументы = СписокДокументов;
						КонецЕсли;
						Если Платеж.ПлатежныеДокументы.НайтиПоЗначению(Параметр.Ссылка) = Неопределено Тогда
							Платеж.ПлатежныеДокументы.Добавить(Параметр.Ссылка);
						КонецЕсли;
						ОбновитьСведенияОДокументахОплаты(2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Параметр.Свойство("Ведомости") Тогда
				ОбновитьСведенияОДокументахОплаты(2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		ОбновитьСведенияОДокументахОплаты();
		ПересчитатьДоступныйОстаткоЕНС();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов" Тогда
		Если Параметр.Организация = Объект.Организация Тогда
			ОбновитьСведенияОбУведомлениях();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОстатокЕНСПриИзменении(Элемент)
	
	ОтразитьИспользованиеОстаткаЕНС();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСписанияСЕНСПриИзменении(Элемент)
	
	СуммаСписанияСЕНСПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействиеНалог(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносы(Команда)
	
	ДействиеПлатеж(Команда, "Взносы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНалогБанк(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ", "ПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНалогКасса(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ", "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносыБанк(Команда)
	
	ДействиеПлатеж(Команда, "Взносы", "ПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносыКасса(Команда)
	
	ДействиеПлатеж(Команда, "Взносы", "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПлатежныйДокумент(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПлатежныйДокументВедомости(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыплата(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
	ТекущийДокумент = ПараметрыВедомости.Ведомость;
	Если ТекущийДокумент <> Неопределено Тогда
		ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"),
			"Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаОбъекта", "Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта");
		
		ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных",
												ТекущийДокумент,
												ПараметрыВедомости.ВедомостьВерсияДанных);
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																ЭтотОбъект,
																ВозвращаемыеПараметры);
		ОткрытьФорму(ИмяФормыПлатежногоДокумента,
			Новый Структура("Ключ, КонтекстныйВызов", ТекущийДокумент, Истина),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчет(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ПараметрыФормыРасчета(Идентификатор);
	ТекущийДокумент = ТекущаяСтрока.Документ;
	Если ТекущийДокумент <> Неопределено Тогда
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.Отпуск") Тогда
			ИмяОбъекта = "Отпуск";
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			ИмяОбъекта = "БольничныйЛист";
		Иначе
			ИмяОбъекта = "НачислениеЗарплаты";
		КонецЕсли;
		
		СведенияОДокументе = Новый Структура;
		СведенияОДокументе.Вставить("Ссылка",       ТекущийДокумент);
		СведенияОДокументе.Вставить("Сотрудник",    ТекущаяСтрока.Сотрудник);
		СведенияОДокументе.Вставить("Сумма",        ТекущаяСтрока.Сумма);
		СведенияОДокументе.Вставить("ВерсияДанных", ТекущаяСтрока.ВерсияДанных);
		
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента",
																ЭтотОбъект,
																Новый Структура("СведенияОДокументе", СведенияОДокументе));
		ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
			Новый Структура("Ключ, КонтекстныйВызов", ТекущийДокумент, Истина),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпуск(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.Отпуск.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБольничный(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.БольничныйЛист.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВедомостьБанк(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации, СпособВыплаты",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации), СпособВыплаты);
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения, КонтекстныйВызов", ПараметрыДокумента, Истина),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВедомостьКасса(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации, СпособВыплаты",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации), СпособВыплаты);
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения, КонтекстныйВызов", ПараметрыДокумента, Истина),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Результат = СформироватьДокументыНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     Правило_Уведомление);
	ПараметрыУведомления.Вставить("ПериодСобытия",               Объект.ПериодРегистрации);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("Правило",                     Правило_Взносы);
	ПараметрыУведомления.Вставить("ПериодСобытия",               Объект.ПериодРегистрации);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатежныйДокументВыплатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		
		ОткрытьПлатежныйДокументВедомости(Идентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
		
		УдалитьПлатежныйДокументВедомости(Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНалогПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		
		ОткрытьПлатежныйДокумент(Идентификатор, "НДФЛ");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
		
		УдалитьПлатежныйДокумент(Идентификатор, "НДФЛ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВзносыПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		
		ОткрытьПлатежныйДокумент(Идентификатор, "Взносы");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
		
		УдалитьПлатежныйДокумент(Идентификатор, "Взносы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции
&НаСервере
Функция НалогКУплате()
	ВидВзносаЕдиныйТариф = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносыЕдиныйТариф);
	ВзносыЕдиныйТариф = РасчетВзносы.НайтиСтроки(Новый Структура("Налог", ВидВзносаЕдиныйТариф));
	НалогКУплате = 0;
	Для Каждого Взнос Из ВзносыЕдиныйТариф Цикл
		НалогКУплате = НалогКУплате + Взнос.Сумма;
	КонецЦикла;
	
	Возврат НалогКУплате;
КонецФункции

&НаСервере
Функция СуммаПлатежныхПоручений()
	СуммаПлатежныхПоручений = Платежи_Взносы.Итог("Сумма");
	Для Каждого Платеж Из Платежи_Взносы Цикл
		Если Платеж.ВидНалога <> Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж 
			Или Платеж.Состояние = Перечисления.СостоянияБанковскихДокументов.Отклонено 
			Или Не ЗначениеЗаполнено(Платеж.Состояние) Тогда
			СуммаПлатежныхПоручений = СуммаПлатежныхПоручений - Платеж.Сумма;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаПлатежныхПоручений;
КонецФункции

&НаСервере
Процедура ПересчитатьСуммыЕНС()
	НалогКУплате = НалогКУплате();
	СуммаПлатежныхПоручений = СуммаПлатежныхПоручений();
	
	Объект.СуммаЕНП = Макс(0, НалогКУплате - СуммаСписанияСЕНС - СуммаПлатежныхПоручений);
	
	Элементы.СуммаСписанияСЕНС.Доступность = ИспользоватьОстатокЕНС;
	Элементы.ГруппаВсегоПополнитьНаЕНС.Видимость = Объект.СуммаЕНП > 0;
	УстановитьВидимостьКнопокОплаты();
	Элементы.СуммаСписанияСЕНС.МаксимальноеЗначение = Мин(ОстатокЕНС, НалогКУплате - СуммаПлатежныхПоручений);
КонецПроцедуры

&НаСервере
Процедура ОтразитьИспользованиеОстаткаЕНС()
	НалогКУплате = НалогКУплате();
	СуммаПлатежныхПоручений = СуммаПлатежныхПоручений();
	
	// Если все оплатили - то списывать не надо
	Если НалогКУплате - СуммаПлатежныхПоручений <= 0 Тогда
		Элементы.ИспользоватьОстатокЕНС.Доступность = Ложь;
		ИспользоватьОстатокЕНС = Ложь;
	КонецЕсли;
	
	Если ИспользоватьОстатокЕНС Тогда
		СуммаСписанияСЕНС = Мин(ОстатокЕНС, НалогКУплате - СуммаПлатежныхПоручений);
	Иначе
		СуммаСписанияСЕНС = 0;
	КонецЕсли;
	Элементы.СуммаСписанияСЕНС.Доступность = ИспользоватьОстатокЕНС;
	
	Объект.СуммаЕНП = Макс(0, НалогКУплате - СуммаСписанияСЕНС - СуммаПлатежныхПоручений);
	
	Элементы.ГруппаВсегоПополнитьНаЕНС.Видимость = Объект.СуммаЕНП > 0;
	УстановитьВидимостьКнопокОплаты();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокОплаты()
	НужныКнопкиОплаты = Объект.СуммаЕНП > 0;
	
	Для Каждого Платеж Из Платежи_Взносы Цикл
		
		Если Платеж.ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж
			И ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение)
			И Не Платеж.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			Если ЭтоПредприниматель
				И ЕстьБанковскийСчет Тогда
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = Ложь;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = НужныКнопкиОплаты;
			Иначе
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = НужныКнопкиОплаты;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = Ложь;
			КонецЕсли;
			Элементы["ОписаниеВзносыСумма" + НомерКонтейнера].Видимость = НужныКнопкиОплаты;
			Элементы["Сумма_Взносы" + НомерКонтейнера].Заголовок = Строка(Объект.СуммаЕНП);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуЕНС()

	ОстатокЕНС = Обработки.МониторНалоговИОтчетности.СуммаЕНСКЗачетуПоНалогуВзносу(Объект.Организация,
		Правило_Взносы, КонецДня(Объект.ПериодРегистрации), Ложь);
	
	// Нельзя списать больше, чем на остатке ЕНС
	НулевойОстаток = ОстатокЕНС = 0;
	Если НулевойОстаток Тогда
		СуммаСписанияСЕНС = 0;
		ИспользоватьОстатокЕНС = Ложь;
	Иначе
		ИспользоватьОстатокЕНС = Истина;
		ОтразитьИспользованиеОстаткаЕНС();
	КонецЕсли;
	Элементы.СуммаСписанияСЕНС.Доступность = Не НулевойОстаток;
	Элементы.ИспользоватьОстатокЕНС.Доступность = Не НулевойОстаток;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокЕНС()
	
	ПересчитатьСуммыЕНС();
	
КонецПроцедуры

&НаСервере
Процедура СуммаСписанияСЕНСПриИзмененииНаСервере()

	Объект.СуммаЕНП = Макс(0, НалогКУплате() - СуммаСписанияСЕНС - СуммаПлатежныхПоручений());
	
	УправлениеФормойБлокЕНС();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДоступныйОстаткоЕНС()
	ОстатокЕНС = Обработки.МониторНалоговИОтчетности.СуммаЕНСКЗачетуПоНалогуВзносу(Объект.Организация,
		Правило_Взносы, КонецДня(Объект.ПериодРегистрации), Истина);
КонецПроцедуры

&НаСервере
Функция ЕстьОбособленныеПодразделения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованияБюджетнойКлассификации(ИмяТаблицыПлатежей, СтатусПлательщика = Неопределено)
	
	Для Каждого Платеж Из ЭтотОбъект[ИмяТаблицыПлатежей] Цикл
		
		Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
			// Вид налога по декларации
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
		ИначеЕсли ЗначениеЗаполнено(ВидНалога) Тогда
			// Вид налога по коду задачи
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		ИначеЕсли Не ПустаяСтрока(Платеж.КБК) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК, , СтатусПлательщика);
		КонецЕсли;
		
		Если ПустаяСтрока(Платеж.КБК) Тогда
			// Декларация без кода КБК
			Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Платеж.Налог, , Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Платеж.Налог) Тогда
			Если Платеж.Налог <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыНалоговИПлатежейВБюджет.ЕдиныйНалоговыйПлатеж")
				И Платеж.ВидНалога <> ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ") Тогда
				Платеж.Наименование = Строка(Платеж.Налог);
			КонецЕсли;
		Иначе
			
			ЭталонныйКБК = ПлатежиВБюджетКлиентСервер.ШаблонКБК(Платеж.КБК);
			ОписаниеКБК  = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиКодДоходаБюджета(
				ЭталонныйКБК, Год(ТекущаяДатаПользователя));
				
			Если Не ПустаяСтрока(ОписаниеКБК.КраткоеНаименование) Тогда
				Платеж.Наименование = ОписаниеКБК.КраткоеНаименование;
			ИначеЕсли Не ПустаяСтрока(ОписаниеКБК.Наименование) Тогда
				Платеж.Наименование = ОписаниеКБК.Наименование;
			Иначе
				Платеж.Наименование = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платеж по КБК %1'"), Платеж.КБК);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПлатежногоДокумента(ДокументСсылка)
	
	Возврат Обработки.ПомощникУчетаЗарплаты.ПредставлениеПлатежногоДокумента(ДокументСсылка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруРазделов(СводРасчетов, РасчетныеДокументы, Ведомости, Платежи_НДФЛ, Платежи_Взносы, Уведомления)
	
	СтруктураРазделов = Новый Структура();
	СтруктураРазделов.Вставить("СводРасчетов",       СводРасчетов);
	СтруктураРазделов.Вставить("РасчетныеДокументы", РасчетныеДокументы);
	СтруктураРазделов.Вставить("Ведомости",          Ведомости);
	СтруктураРазделов.Вставить("Платежи_НДФЛ",       Платежи_НДФЛ);
	СтруктураРазделов.Вставить("Платежи_Взносы",     Платежи_Взносы);
	СтруктураРазделов.Вставить("Уведомления",        Уведомления);
	
	Возврат СтруктураРазделов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраниласьВерсияДанных(Документ, ВерсияДанных)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВерсияДанных") = ВерсияДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранилисьВерсииДанных(СписокНовый, СписокИсходный)
	
	Если СписокНовый.Количество() <> СписокИсходный.Количество() Тогда
		Возврат Ложь;
	ИначеЕсли СписокНовый.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ДокументИсходый ИЗ СписокИсходный Цикл
		ДокументНовый = СписокНовый.НайтиПоЗначению(ДокументИсходый.Значение);
		Если ДокументНовый = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ДокументИсходый.Представление <> 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНовый.Значение, "ВерсияДанных") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВедомостьПоДоговоруПодряда(Ведомость)
	
	Возврат УчетЗарплаты.ВедомостьПоДоговоруПодряда(Ведомость);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуФормироватьПлатежныеДокументы(Организация, ЗначениеНастройки)
	
	Обработки.ПомощникУчетаЗарплаты.СохранитьНастройкуФормироватьПлатежныеДокументы(Организация, ЗначениеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Функция ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов, Пересчитать = Ложь)
	
	ПараметрыОбработки = СформироватьПараметрыОбработки();
	ПараметрыОбработки.Пересчитать       = Пересчитать;
	ПараметрыОбработки.СтруктураРазделов = СтруктураРазделов;
	
	НаименованиеЗадания = НСтр("ru = 'Помощник учета зарплаты: получение данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникУчетаЗарплаты.ПодготовитьДанные", 
			ПараметрыОбработки, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьДокументыНаСервере()
	
 	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина,
														Истина,
														Истина,
														Истина,
														НЕ Параметры.РежимВыплатыПоДокументу
															И НЕ Параметры.РежимВыплатыЗаПериод,
														НЕ Параметры.Аванс
															И ПлательщикЕНП
															И Не ПравилоУплатыВыполняетсяЕдинымПомощником);
															
															
															
	Если Параметры.РежимВыплатыПоДокументу ИЛИ Параметры.РежимВыплатыЗаПериод Тогда
		СводРасчетов.Очистить();
		Возврат ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	КонецЕсли;
	
	ПараметрыОбработки = СформироватьПараметрыОбработки();
	ПараметрыОбработки.Пересчитать       = Ложь;
	ПараметрыОбработки.СтруктураРазделов = СтруктураРазделов;
	
	НаименованиеЗадания = НСтр("ru = 'Помощник учета зарплаты: формирование документов данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникУчетаЗарплаты.СформироватьДокументы",
			ПараметрыОбработки, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ОбработатьДобавлениеРасчетногоДокументаНаСервере(СведенияОДокументе)
	
	ПолностьюПересчитатьДокументНачисления = ВедетсяРасчетЗарплатыДляНебольшихОрганизаций;
	ПеречитатьНДФЛ = Истина;
	Если СведенияОДокументе <> Неопределено Тогда
		
		// Пересчет вызывается только в случае, если произошли изменения в расчетных документах
		ДокументСсылка = СведенияОДокументе.Ссылка;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
			ПолностьюПересчитатьДокументНачисления = Ложь;
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Начислено") = СведенияОДокументе.Сумма Тогда
				ПеречитатьНДФЛ = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск") Тогда
			
			РеквизитыДокумента = 
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
															"Проведен, Сотрудник, ПериодРегистрации, Начислено");
			
			Если РеквизитыДокумента.Проведен
				И РеквизитыДокумента.Сотрудник = СведенияОДокументе.Сотрудник
				И РеквизитыДокумента.Начислено = СведенияОДокументе.Сумма
				И НачалоМесяца(РеквизитыДокумента.ПериодРегистрации) = НачалоМесяца(Объект.ПериодРегистрации) Тогда
				ПолностьюПересчитатьДокументНачисления = Ложь;
				ПеречитатьНДФЛ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Истина, Ложь, ПеречитатьНДФЛ, Истина, Ложь);
		
	Возврат ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов, ПолностьюПересчитатьДокументНачисления);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДобавлениеРасчетногоДокумента(РезультатЗакрытия = Неопределено,
													ДополнительныеПараметры = Неопределено) Экспорт
	
	СведенияОДокументе = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда
		СведенияОДокументе = ДополнительныеПараметры.СведенияОДокументе;
		Если СохраниласьВерсияДанных(СведенияОДокументе.Ссылка, СведенияОДокументе.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ОбработатьДобавлениеРасчетногоДокументаНаСервере(СведенияОДокументе);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеВедомости(РезультатЗакрытия = Неопределено,
												ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СписокДокументов") Тогда
			Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
				Если СохранилисьВерсииДанных(РезультатЗакрытия, ДополнительныеПараметры.СписокДокументов) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Истина, Ложь, Ложь, Ложь);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеПлатежногоДокументаНаНДФЛ(РезультатЗакрытия = Неопределено,
																ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Ложь, Истина, Ложь, Ложь);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеПлатежногоДокументаНаВзносы(РезультатЗакрытия = Неопределено,
																ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Ложь, ПлательщикЕНП, Истина, Ложь);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

#Область ДлительныеОперации

&НаСервере
Функция СформироватьПараметрыОбработки()
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",                            Объект.Организация);
	ПараметрыОбработки.Вставить("ПериодРегистрации",                      Объект.ПериодРегистрации);
	ПараметрыОбработки.Вставить("СводРасчетов",                           РеквизитФормыВЗначение("СводРасчетов"));
	ПараметрыОбработки.Вставить("РасчетныеДокументы",                     РеквизитФормыВЗначение("РасчетныеДокументы"));
	ПараметрыОбработки.Вставить("Ведомости",                              РеквизитФормыВЗначение("Ведомости"));
	ПараметрыОбработки.Вставить("Платежи_НДФЛ",                           РеквизитФормыВЗначение("Платежи_НДФЛ"));
	ПараметрыОбработки.Вставить("Платежи_Взносы",                         РеквизитФормыВЗначение("Платежи_Взносы"));
	ПараметрыОбработки.Вставить("Уведомления",                            РеквизитФормыВЗначение("УведомленияОбИсчисленныхНалогах"));
	ПараметрыОбработки.Вставить("Правило_НДФЛ",                           Правило_НДФЛ);
	ПараметрыОбработки.Вставить("Правило_Взносы",                         Правило_Взносы);
	ПараметрыОбработки.Вставить("Правило_Травматизм",                     Правило_Травматизм);
	ПараметрыОбработки.Вставить("Правило_Уведомление",                    Правило_Уведомление);
	ПараметрыОбработки.Вставить("РасчетВзносы",                           РеквизитФормыВЗначение("РасчетВзносы"));
	ПараметрыОбработки.Вставить("РасчетНДФЛ",                             РеквизитФормыВЗначение("РасчетНДФЛ"));
	ПараметрыОбработки.Вставить("Пересчитать",                            Ложь);
	ПараметрыОбработки.Вставить("СчетОрганизации",                        Объект.СчетОрганизации);
	ПараметрыОбработки.Вставить("ЭтоПредприниматель",                     ЭтоПредприниматель);
	ПараметрыОбработки.Вставить("ПлательщикЕНП",                          ПлательщикЕНП);
	ПараметрыОбработки.Вставить("ПодаетсяУведомлениеПоНалогуЗаПериод",    ПодаетсяУведомлениеПоНалогуЗаПериод);
	ПараметрыОбработки.Вставить("Аванс",                                  Параметры.Аванс);
	ПараметрыОбработки.Вставить("ИспользоватьРасчетПервойПоловиныМесяца", ИспользоватьРасчетПервойПоловиныМесяца);
	ПараметрыОбработки.Вставить("СтруктураРазделов",                      "");
	ПараметрыОбработки.Вставить("ПрименяетсяАУСН",                        ПрименяетсяАУСН);
	ПараметрыОбработки.Вставить("ФормироватьПлатежныеДокументы",          ФормироватьПлатежныеДокументы);
	ПараметрыОбработки.Вставить("РежимВыплатыПоДокументу",                Параметры.РежимВыплатыПоДокументу);
	ПараметрыОбработки.Вставить("РежимВыплатыЗаПериод",                   Параметры.РежимВыплатыЗаПериод);
	ПараметрыОбработки.Вставить("РасчетныйДокумент",                      Параметры.РасчетныйДокумент);
	ПараметрыОбработки.Вставить("ДатаВыплаты",                            Параметры.ДатаВыплаты);
	ПараметрыОбработки.Вставить("МассивВедомостей",                       Неопределено);
	
	ПараметрыОбработки.Вставить("ПравилоУплатыВыполняетсяЕдинымПомощником", ПравилоУплатыВыполняетсяЕдинымПомощником);
	
	
	Если СводРасчетов.Количество() = 0
			И (Параметры.РежимВыплатыПоДокументу
			ИЛИ Параметры.РежимВыплатыЗаПериод) Тогда
		ПараметрыОбработки.Вставить("ГенерироватьКомплект", Истина);
	Иначе
		ПараметрыОбработки.Вставить("ГенерироватьКомплект", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии()
	
	Попытка
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат(Ложь);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат(Ложь);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтруктураРазделов = Результат.СтруктураРазделов;
		Если НЕ Параметры.Аванс Или ИспользоватьРасчетПервойПоловиныМесяца Тогда
			Если СтруктураРазделов.РасчетныеДокументы Тогда
				ЗначениеВРеквизитФормы(Результат.РасчетныеДокументы, "РасчетныеДокументы");
				ОбновитьИзображение(1);
			КонецЕсли;
		КонецЕсли;
		Если СтруктураРазделов.Ведомости Тогда
			ЗначениеВРеквизитФормы(Результат.Ведомости, "Ведомости");
			ОбновитьИзображение(2);
		КонецЕсли;
		Если НЕ Параметры.Аванс Или ИспользоватьРасчетПервойПоловиныМесяца Тогда
			Если СтруктураРазделов.Платежи_НДФЛ Тогда
				ЗначениеВРеквизитФормы(Результат.Платежи_НДФЛ, "Платежи_НДФЛ");
				ЗаполнитьНаименованияБюджетнойКлассификации("Платежи_НДФЛ", "02");
				ОбновитьИзображение(3);
			КонецЕсли;
			Если СтруктураРазделов.Платежи_Взносы Тогда
				ЗначениеВРеквизитФормы(Результат.Платежи_Взносы, "Платежи_Взносы");
				ЗаполнитьНаименованияБюджетнойКлассификации("Платежи_Взносы");
				ОбновитьИзображение(4);
			КонецЕсли;
			Если СтруктураРазделов.СводРасчетов Тогда
				ЗначениеВРеквизитФормы(Результат.СводРасчетов, "СводРасчетов");
				ОбновитьИзображение(5);
			КонецЕсли;
			Если СтруктураРазделов.Уведомления Тогда
				УведомленияОбИсчисленныхНалогах.Очистить();
				Для Каждого СтрокаТаблицы Из Результат.Уведомления Цикл
					ЗаполнитьЗначенияСвойств(УведомленияОбИсчисленныхНалогах.Добавить(), СтрокаТаблицы);
				КонецЦикла;
				ЗначениеВРеквизитФормы(Результат.РасчетВзносы, "РасчетВзносы");
				ЗначениеВРеквизитФормы(Результат.РасчетНДФЛ, "РасчетНДФЛ");
				ОбновитьИзображение(6);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПрименяетсяАУСН Тогда
		ФормироватьПлатежныеДокументы = Истина;
	ИначеЕсли ДокументыСформированы Тогда
		ФормироватьПлатежныеДокументы = ЕстьПлатежныеПоручения;
	Иначе
		ФормироватьПлатежныеДокументы
			= Обработки.ПомощникУчетаЗарплаты.ФормироватьПлатежныеДокументы(Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;
	
	ОформитьСобытиеПередачаСведенийВФНС();
	
	УправлениеФормой(ЭтотОбъект);
	
	// ЕНС
	РассчитатьСуммуЕНС();
	УправлениеФормойБлокЕНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(ПоказатьФормуОжидания = Истина)
	
	Если ПоказатьФормуОжидания И
		(ФормаДлительнойОперации = Неопределено
			ИЛИ НЕ ФормаДлительнойОперации.Открыта()) Тогда
			
			ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.ДлительнаяОперация",
				Новый Структура("ИдентификаторВладельца", УникальныйИдентификатор),
				ЭтотОбъект,
				ВладелецФормы,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьРезультат", 0.5, Истина);
			
	Иначе
		ЗагрузитьРезультатЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьРезультат()
	
	ЗагрузитьРезультатЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатЗавершение()
	
	ЗагрузитьРезультатНаСервере();
	Оповестить("ЗарплатаРассчитана_ПомощникУчетаЗарплаты", Новый Структура("Организация", Объект.Организация));
	Оповестить("Закрыть_ДлительнаяОперация",, УникальныйИдентификатор);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтрисовкаФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияРабочая;
		Элементы.СтраницаСобытияПустая.Видимость = Ложь;
	КонецЕсли;
	
	ВыплатыАУСНВПрограмме = форма.ПрименяетсяАУСН И Форма.ФормироватьПлатежныеДокументы;
	ВыплатыАУСНЧерезБанк  = форма.ПрименяетсяАУСН И Не Форма.ФормироватьПлатежныеДокументы;
	
	Элементы.НастройкаДокументы.Видимость = Форма.ПрименяетсяАУСН И Не Форма.ДокументыСформированы;
	
	Элементы.ГруппаДокументыПодвал.Видимость = Не Форма.ДокументыСформированы;
	Элементы.ГруппаРезультат.Видимость = Форма.ДокументыСформированы;
	
	Элементы.ГруппаРезультатПечать.Видимость = Не Форма.ПрименяетсяАУСН
		И (Форма.ЕстьВедомостьВБанк Или Форма.ЕстьВедомостьВКассу Или Форма.ЕстьВыдачаНаличных);
		
	Элементы.ГруппаРезультатПроверка.Видимость           = Форма.ПрименяетсяАУСН;
	Элементы.ГруппаРезультатОтправка.Видимость           = Форма.ЕстьНеотправленныеПлатежныеПоручения
		И (Не Форма.ПрименяетсяАУСН Или ВыплатыАУСНВПрограмме);
	Элементы.ГруппаРезультатОтчетность.Видимость         = Не Форма.ПрименяетсяАУСН
		И Форма.УведомлениеОбИсчисленныхНалогахПодготовлено И Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ГруппаРезультатСведенияВБанк.Видимость      = ВыплатыАУСНЧерезБанк;
	Элементы.ГруппаРезультатПояснения.Видимость          = ВыплатыАУСНЧерезБанк;
	Элементы.ГруппаРезультатСведенияВНалоговую.Видимость = ВыплатыАУСНВПрограмме
		И Форма.ТребуютсяСведенияВНалоговую И Не Форма.Параметры.Аванс;
	
	Элементы.ГруппаРезультатПодвал.Видимость = Форма.ФормироватьПлатежныеДокументы;
	
	Элементы.ДекорацияОписаниеДокументыАванс.Видимость   = Форма.Параметры.Аванс
															И НЕ Форма.ЕстьВедомостьВБанк
															И НЕ Форма.ЕстьВедомостьВКассу;
	Элементы.ГруппаСобытиеДокументыСуммаАванса.Видимость = Форма.Параметры.Аванс И Не Форма.ИспользоватьРасчетПервойПоловиныМесяца
															И (Форма.ЕстьВедомостьВБанк
																ИЛИ Форма.ЕстьВедомостьВКассу);
	
	Элементы.ДекорацияСпискиПеречислений.Видимость = Форма.ЕстьВедомостьВБанк;
	Элементы.ДекорацияПлатежныеВедомости.Видимость = Форма.ЕстьВедомостьВКассу;
	Элементы.ДекорацияВыдачаНаличных.Видимость     = Форма.ЕстьВыдачаНаличных;
	
	Элементы.ГруппаУведомлениеОНалогах.Видимость   = Форма.ПлательщикЕНП
		И Не Форма.Параметры.Аванс
		И Не Форма.Параметры.РежимВыплатыПоДокументу
		И Не Форма.Параметры.РежимВыплатыЗаПериод
		И Не Форма.ПравилоУплатыВыполняетсяЕдинымПомощником;
		
	Элементы.ВыполнитьДействиеСформироватьУведомление.Видимость =
		Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Видимость =
		Не Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение(НомерРаздела = 0)
	
	// Номер раздела:
	// 0 - вся форма
	// 1 - документы начисления
	// 2 - документы выплаты
	// 3 - НДФЛ
	// 4 - взносы
	// 5 - свод
	// 6 - уведомления
	
	ЕстьДокументыВедомость = Ложь;
	ЕстьДокументыНДФЛ      = Ложь;
	ЕстьДокументыВзносы    = Ложь;
	
	ЕстьПлатежныеПоручения = Ложь;
	ЕстьВыдачаНаличных     = Ложь;
	ЕстьВедомостьВБанк     = Ложь;
	ЕстьВедомостьВКассу    = Ложь;
	
	СписокПоручений = Новый Массив;
	
	// Предварительная отрисовка формы - готовим раздел-шаблон
	Если НЕ Параметры.РежимВыплатыПоДокументу И НЕ Параметры.РежимВыплатыЗаПериод Тогда
		Для Каждого СтрокаРасчета Из СводРасчетов Цикл
			Если СтрокаРасчета.Порядок = 1 Тогда
				Элементы.ГруппаВыплатаКоманды.Видимость = СтрокаРасчета.Сумма <> 0;
				Элементы.СуммаЗадолженность.Заголовок   = 
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчета.Сумма, , , " "); // ЧРГ=' '
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьДокументыВедомость = Ведомости.Количество() > 0;
	Для Каждого Платеж Из Ведомости Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежныеДокументы) Тогда
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьПлатежныеПоручения И ТипЗнч(Платеж.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
				Если Платеж.ПлатежныеДокументы.Количество() <> 0 И Платеж.Оплачено Тогда
					ЕстьПлатежныеПоручения = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежныеДокументы) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
			Если ТипЗнч(Платеж.ПлатежныеДокументы) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				СписокПоручений.Добавить(Платеж.ПлатежныеДокументы);
			ИначеЕсли ТипЗнч(Платеж.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
				Для Каждого Документ Из Платеж.ПлатежныеДокументы Цикл
					Если ТипЗнч(Документ.Значение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
						СписокПоручений.Добавить(Документ.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЕстьВедомостьВБанк И ТипЗнч(Платеж.Ведомость) =
				Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			ЕстьВедомостьВБанк = Истина;
		КонецЕсли;
		Если НЕ ЕстьВедомостьВКассу И ТипЗнч(Платеж.Ведомость) =
				Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			ЕстьВедомостьВКассу = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж Из Платежи_НДФЛ Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			ЕстьДокументыНДФЛ = Истина;
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежноеПоручение) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
			Если ТипЗнч(Платеж.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				СписокПоручений.Добавить(Платеж.ПлатежноеПоручение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж Из Платежи_Взносы Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			ЕстьДокументыВзносы = Истина;
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежноеПоручение) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
			Если ТипЗнч(Платеж.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				СписокПоручений.Добавить(Платеж.ПлатежноеПоручение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НеотправленныеПлатежи = НеотправленныеПлатежи(Объект.Организация, СписокПоручений);
	ЕстьНеотправленныеПлатежныеПоручения = ЗначениеЗаполнено(НеотправленныеПлатежи);
	
	КУдалению = Новый Массив;
	
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 0 Тогда
		// Заполним контейнер данными событий по начислениям
		СуммаИтогРасчет  = 0;
		Для Каждого РасчетныйДокумент Из РасчетныеДокументы Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(РасчетныйДокумент.ПолучитьИдентификатор());
			Если Элементы.Найти("ОписаниеРасчет" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеРасчет, Элементы.СобытиеРасчет, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеНачислениеЗарплаты(РасчетныйДокумент, НомерКонтейнера);
			Элементы["ОписаниеРасчет" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогРасчет = СуммаИтогРасчет + ?(РасчетныйДокумент.Аванс, 0, РасчетныйДокумент.Сумма);
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеРасчет.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеРасчет.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если РасчетныеДокументы.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элемент = Элементы["СуммаИтогРасчет"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогРасчет, , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Если НомерРаздела = 2 ИЛИ НомерРаздела = 0 Тогда
		// Заполним контейнер данными событий по выплате
		СуммаИтогВыплата = 0;
		Для Каждого Ведомость Из Ведомости Цикл
			ЭтоЗарплатныйПроект = Ложь;
			Если ТипЗнч(Ведомость.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
				ЭтоЗарплатныйПроект = ЗначениеЗаполнено(Ведомость.ЗарплатныйПроект);
			КонецЕсли;
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Ведомость.ПолучитьИдентификатор());
			Если Элементы.Найти("ОписаниеВыплата" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма,
												Элементы.ОписаниеВыплата,
												Элементы.СобытиеВыплата,
												НомерКонтейнера);
				Элементы["ДекорацияПлатежныйДокументВыплата" + НомерКонтейнера].УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияПлатежныйДокументВыплатаОбработкаНавигационнойСсылки");
			КонецЕсли;
			ОформитьСобытиеВыплатаЗарплаты(Ведомость, НомерКонтейнера);
			Элементы["ОписаниеВыплата" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогВыплата = СуммаИтогВыплата + Ведомость.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеВыплата.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеВыплата.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Ведомости.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Параметры.РежимВыплатыПоДокументу И НЕ Параметры.РежимВыплатыЗаПериод Тогда
			Если СуммаИтогВыплата <> 0 Тогда
				Элементы.ГруппаВыплатаПодвал.Видимость = Истина;
				Элементы.ГруппаВыплатаШапка.Отображение = ОтображениеОбычнойГруппы.Нет;
			Иначе
				Элементы.ГруппаВыплатаПодвал.Видимость = Ложь;
				Элементы.ГруппаВыплатаШапка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			КонецЕсли;
		
			Элемент = Элементы["СуммаИтогВыплата"];
			Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогВыплата, , , " "); // ЧРГ=' '
		Иначе
			Элементы.ГруппаВыплата.Видимость = СуммаИтогВыплата <> 0;
		КонецЕсли;
		
		// Заполним контейнер ведомостей АУСН данными ведомостей
		Для Каждого Ведомость Из Ведомости Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Ведомость.ПолучитьИдентификатор());
			Если Элементы.Найти("ГруппаРезультатПроверкаВедомость" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтотОбъект,
												Элементы.ГруппаРезультатПроверкаВедомость,
												Элементы.ГруппаРезультатПроверкаПравая,
												НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеВедомостьНаВыплатуЗарплаты(Ведомость, НомерКонтейнера);
			Элементы["ГруппаРезультатПроверкаВедомость" + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ГруппаРезультатПроверкаВедомость.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.ГруппаРезультатПроверкаПравая.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Ведомости.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НомерРаздела = 3 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по НДФЛ
		
		// Сначала определим необходимость расшифровывать ставку налога
		СтавкиНалога = Платежи_НДФЛ.Выгрузить(,"НалогСПревышения");
		СтавкиНалога.Свернуть("НалогСПревышения");
		РасшифровыватьСтавкуНалога = СтавкиНалога.Количество() > 1;
		
		СуммаИтогНалог   = 0;
		Для Каждого Платеж Из Платежи_НДФЛ Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеНалог" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеНалог, Элементы.СобытиеНалог, НомерКонтейнера);
				Элементы["ДекорацияНалогПлатеж" + НомерКонтейнера].УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияНалогПлатежОбработкаНавигационнойСсылки");
			КонецЕсли;
			ОформитьСобытиеУплатаНДФЛ(Платеж, НомерКонтейнера);
			
			Если ЭтоПредприниматель 
				И НЕ ЗначениеЗаполнено(Платеж.ПлатежноеПоручение)
				И ЕстьБанковскийСчет Тогда
				Элементы["ОписаниеНалогДействие" + НомерКонтейнера].Видимость    = Ложь;
				Элементы["ОписаниеНалогДействиеИП" + НомерКонтейнера].Видимость  = Истина;
				Элементы["СтавкаНалогаИП" + НомерКонтейнера].Видимость  = РасшифровыватьСтавкуНалога;
			Иначе
				Элементы["ОписаниеНалогДействие" + НомерКонтейнера].Видимость    = Истина;
				Элементы["ОписаниеНалогДействиеИП" + НомерКонтейнера].Видимость  = Ложь;
				Элементы["СтавкаНалога" + НомерКонтейнера].Видимость  = РасшифровыватьСтавкуНалога;
			КонецЕсли;
			
			Элементы["ОписаниеНалог" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогНалог = СуммаИтогНалог + Платеж.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеНалог.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеНалог.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Платежи_НДФЛ.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаНалог.Видимость = СуммаИтогНалог;
		Элементы.ГруппаНалогПодвал.Видимость = СуммаИтогНалог <> 0 И Платежи_НДФЛ.Количество()>1;
		
		Элемент = Элементы["СуммаИтогНалог"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогНалог, , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Если НомерРаздела = 4 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по взносам
		СуммаИтогВзносы   = 0;
		Для Каждого Платеж Из Платежи_Взносы Цикл
			
			Если Платеж.ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж 
				И ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеВзносы" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеВзносы, Элементы.СобытиеВзносы, НомерКонтейнера);
				Элементы["ДекорацияВзносыПлатеж" + НомерКонтейнера].УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияВзносыПлатежОбработкаНавигационнойСсылки");
			КонецЕсли;
			ОформитьСобытиеУплатаВзносов(Платеж, НомерКонтейнера);
			
			Если ЭтоПредприниматель 
				И НЕ ЗначениеЗаполнено(Платеж.ПлатежноеПоручение)
				И ЕстьБанковскийСчет Тогда
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = Ложь;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = Истина;
			Иначе
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = Истина;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = Ложь;
			КонецЕсли;
			
			Элементы["ОписаниеВзносы" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогВзносы = СуммаИтогВзносы + Платеж.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеВзносы.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеВзносы.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Платежи_Взносы.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаВзносыПодвал.Видимость = СуммаИтогВзносы <> 0;
		
		Элемент = Элементы["СуммаИтогВзносы"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогВзносы, , , " "); // ЧРГ=' '
		
		ПересчитатьСуммыЕНС();
	КонецЕсли;
	
	Если НомерРаздела = 5 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по НДФЛ
		Для Каждого Показатель Из СводРасчетов Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Показатель.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеДокументы" + НомерКонтейнера) = Неопределено Тогда
				ПомощникиПоУплатеНалоговИВзносов.КопироватьЭлементСПодчиненными(ЭтаФорма,
												Элементы.ОписаниеДокументы,
												Элементы.СобытиеДокументы,
												НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеСводРасчетов(Показатель, НомерКонтейнера);
			
			Элементы["ОписаниеДокументы" + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеДокументы.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеДокументы.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если СводРасчетов.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		ПересчитатьСуммыЕНС();
		
	КонецЕсли;
	
	Если Параметры.Аванс Тогда
		Элементы.СуммаАванс.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Ведомости.Итог("Сумма"), , , " "); // ЧРГ=' '
	КонецЕсли;
	
	ПомощникиПоУплатеНалоговИВзносов.УдалитьНеиспользуемыеЭлементы(ЭтотОбъект, КУдалению);
	
	Если НомерРаздела = 6 Или НомерРаздела = 0 Тогда
		УправлениеФормойБлокУведомление();
		ОтразитьИспользованиеОстаткаЕНС();
	КонецЕсли;
	
	ДокументыСформированы = ЕстьДокументыВедомость
							ИЛИ ЕстьДокументыНДФЛ
							ИЛИ ЕстьДокументыВзносы
							ИЛИ УведомлениеОбИсчисленныхНалогахПодготовлено;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНДФЛ(Событие, Номер)
	
	// Описание
	ЭлементДокумента = Элементы["ДекорацияНалогПлатеж" + Номер];
	ЭлементДействия = Элементы["ДействиеНалог" + Номер];
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручениеПредставление) Тогда
		ЭлементДокумента.Видимость = Истина;
		ЭлементДокумента.Заголовок = ПредставлениеПлатежа(Событие);
		ЭлементДействия.Видимость = Ложь;
	Иначе
		ЭлементДокумента.Видимость = Ложь;
		ЭлементДействия.Видимость = Истина;
	КонецЕсли;
	
	// Ставка НДФЛ
	Если Событие.НалогСПревышения Тогда
		ЗаголовокСтавкаНалога = НСтр("ru = 'Налог с превышения'");
	Иначе
		ЗаголовокСтавкаНалога = НСтр("ru = 'Налог'");
	КонецЕсли;
	
	Элемент = Элементы["СтавкаНалогаИП" + Номер];
	Элемент.Заголовок = ЗаголовокСтавкаНалога;
		
	Элемент = Элементы["СтавкаНалога" + Номер];
	Элемент.Заголовок = ЗаголовокСтавкаНалога;
	
	// ОКАТО
	Если ЭтоПредприниматель Тогда
		ЗаголовокОКАТО = СтрШаблон(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКАТО);
	Иначе
		ЗаголовокОКАТО = СтрШаблон(
			НСтр("ru = '%1/КПП: %2/%3'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКАТО,
			Событие.КПП)
	КонецЕсли;
	
	Элемент = Элементы["ОКАТОИП" + Номер];
	Элемент.Заголовок = ЗаголовокОКАТО;
		
	Элемент = Элементы["ОКАТО" + Номер];
	Элемент.Заголовок = ЗаголовокОКАТО;
	
	// Сумма
	Элемент = Элементы["Сумма" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаВзносов(Событие, Номер)
	
	// Описание
	ЭлементДокумента = Элементы["ДекорацияВзносыПлатеж" + Номер];
	ЭлементДействия = Элементы["ДействиеВзносы" + Номер];
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручениеПредставление) Тогда
		ЭлементДокумента.Видимость = Истина;
		ЭлементДокумента.Заголовок = ПредставлениеПлатежа(Событие);
		ЭлементДействия.Видимость = Ложь;
	Иначе
		ЭлементДокумента.Видимость = Ложь;
		ЭлементДействия.Видимость = Истина;
	КонецЕсли;
	
	// Наименование
	Элемент = Элементы["НаименованиеИП_Взносы" + Номер];
	Элемент.Заголовок = Событие.Наименование;
		
	Элемент = Элементы["Наименование_Взносы" + Номер];
	Элемент.Заголовок = Событие.Наименование;
	
	// Сумма
	Элемент = Элементы["Сумма_Взносы" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеВыплатаЗарплаты(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеВыплата" + Номер];
	Элемент.Заголовок = Событие.ВедомостьПредставление;
	
	// Сумма
	Элемент = Элементы["СуммаВыплата" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
	// Документ
	ЭлементДокумента = Элементы["ДекорацияПлатежныйДокументВыплата" + Номер];
	ЭлементДействия = Элементы["ПлатежныйДокументВыплата" + Номер];
	
	Если ЗначениеЗаполнено(Событие.ПлатежныеДокументыПредставление) Тогда
		ЭлементДокумента.Видимость = Истина;
		ЭлементДокумента.Заголовок = ПредставлениеПлатежаВедомости(Событие);
		ЭлементДействия.Видимость = Ложь;
	Иначе
		ЭлементДокумента.Видимость = Ложь;
		ЭлементДействия.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеНачислениеЗарплаты(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеРасчет" + Номер];
	Элемент.Заголовок = Событие.ДокументПредставление;
	Элемент.Доступность = Не Событие.Аванс;
	
	// Сумма
	Элемент = Элементы["СуммаРасчет" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеСводРасчетов(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеДокументы" + Номер];
	Элемент.Заголовок = Событие.Показатель;
	
	// Сумма
	Элемент = Элементы["СуммаДокументы" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	Если Событие.Порядок = 1 Тогда
		Если Ведомости.Итог("Сумма")<> 0 И Событие.Сумма <> Ведомости.Итог("Сумма") Тогда
			Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Ведомости.Итог("Сумма"), , , " "); // ЧРГ=' '
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеВедомостьНаВыплатуЗарплаты(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеВедомость" + Номер];
	Элемент.Заголовок = Событие.ВедомостьПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеПередачаСведенийВФНС()
	
	ТребуютсяСведенияВНалоговую = Ложь;
	
	Если Не ПрименяетсяАУСН Или Не ФормироватьПлатежныеДокументы Или Параметры.Аванс Тогда
		Возврат;
	КонецЕсли;
	
	Порядок = ПорядокПредоставленияОтчетаСведенияНДФЛ_АУСН(Объект.Организация, Объект.ПериодРегистрации);
	
	Если Не ЗначениеЗаполнено(Порядок) Тогда
		// В месяце помощника платежные документы на выплату зарплаты не оформлялись либо оформлены в ЛК банка,
		// передача сведений непосредственно в ФНС не требуется.
		Возврат;
	КонецЕсли;
	
	ТребуютсяСведенияВНалоговую = Истина;
	
	СрокПодачиСведений = Порядок.Срок;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Отчет о выплатах АУСН'"), , , , "0"));
	ЧастиСтроки.Добавить(" - ");
	ЧастиСтроки.Добавить(СтрШаблон(НСтр("ru = 'и перенесите данные в личный кабинет на сайте ФНС не позднее %1'"), Формат(СрокПодачиСведений, "ДЛФ=DD")));
	
	ЗаголовокТекстаСведения = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
	Элементы.ДекорацияСведенияВНалоговуюОтчетПоВыплатам.Заголовок = ЗаголовокТекстаСведения;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПлатежа(СтрокаКоллекцииПлатежей)
	
	СвойстваПлатежа = Новый Структура("ПлатежноеПоручение, Оплачено, Состояние, ПлатежноеПоручениеПредставление");
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СтрокаКоллекцииПлатежей);
	
	ПредставлениеПлатежа = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СвойстваПлатежа.Состояние) Тогда
		СтатусОплаты = ?(СвойстваПлатежа.Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
	Иначе
		СтатусОплаты = Строка(СвойстваПлатежа.Состояние);
	КонецЕсли;
	
	ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1 (%2)",
		СвойстваПлатежа.ПлатежноеПоручениеПредставление, СтатусОплаты), , , , "ОткрытьДокумент"));
	
	ТипПлатежногоДокумента = ТипЗнч(СвойстваПлатежа.ПлатежноеПоручение);
	
	Если Не ПравоДоступа("Изменение", СвойстваПлатежа.ПлатежноеПоручение.Метаданные()) Тогда
		Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	Конецесли;
	
	Если (СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Отправлено)
		Или (ТипПлатежногоДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
		ПредставлениеПлатежа.Добавить("  ");
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	
КонецФункции

&НаСервере
Функция ПредставлениеПлатежаВедомости(СтрокаКоллекцииПлатежей)
	
	СвойстваПлатежа = Новый Структура("ПлатежныеДокументы, Состояния, Оплачено, ПлатежныеДокументыПредставление");
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СтрокаКоллекцииПлатежей);
	
	ПредставлениеПлатежа = Новый Массив;
	
	Если ТипЗнч(СвойстваПлатежа.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
		Если СвойстваПлатежа.ПлатежныеДокументы.Количество() = 1 Тогда
			ПлатежныйДокумент = СвойстваПлатежа.ПлатежныеДокументы[0].Значение;
			СостояниеПлатежа = СвойстваПлатежа.Состояния[0].Значение;
		Иначе
			ПлатежныйДокумент = Неопределено;
			СостояниеПлатежа = Неопределено;
		КонецЕсли;
	Иначе
		ПлатежныйДокумент = СвойстваПлатежа.ПлатежныеДокументы;
		СостояниеПлатежа = СвойстваПлатежа.Состояния;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
		Если Не ЗначениеЗаполнено(СостояниеПлатежа) Тогда
			СтатусОплаты = ?(СвойстваПлатежа.Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
		Иначе
			СтатусОплаты = Строка(СостояниеПлатежа);
		КонецЕсли;
	
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1 (%2)",
			СвойстваПлатежа.ПлатежныеДокументыПредставление, СтатусОплаты), , , , "ОткрытьДокумент"));
		
		ТипПлатежногоДокумента = ТипЗнч(ПлатежныйДокумент);
	
		Если Не ПравоДоступа("Изменение", ПлатежныйДокумент.Метаданные()) Тогда
			Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
		Конецесли;
	
		Если (СостояниеПлатежа <> Перечисления.СостоянияБанковскихДокументов.Оплачено
			И СостояниеПлатежа <> Перечисления.СостоянияБанковскихДокументов.Отправлено)
			Или (ТипПлатежногоДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
			ПредставлениеПлатежа.Добавить("  ");
			ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
			КонецЕсли;
	Иначе
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1",
			СвойстваПлатежа.ПлатежныеДокументыПредставление), , , , "ОткрытьДокумент"));
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	
КонецФункции

#КонецОбласти

#Область ПолучениеДокументов

&НаКлиенте
Процедура ДействиеПлатеж(Команда, СуффиксТаблицы, ИмяПлатежногоДокумента = Неопределено)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПлатежныйДокумент(Идентификатор, СуффиксТаблицы, ИмяПлатежногоДокумента);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВедомости(Идентификатор)
	
	ПараметрыВедомости = Новый Структура("Ведомость, ЗарплатныйПроект, ВедомостьВерсияДанных");
	
	СтрокаВедомости = Ведомости.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаВедомости = Неопределено Тогда
		Возврат ПараметрыВедомости;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыВедомости, СтрокаВедомости);
	
	Возврат ПараметрыВедомости;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРасчета(Идентификатор)
	
	СтрокаРасчета = РасчетныеДокументы.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаРасчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Документ, Сотрудник, Сумма, ВерсияДанных", 
		СтрокаРасчета.Документ, СтрокаРасчета.Сотрудник, СтрокаРасчета.Сумма, СтрокаРасчета.ВерсияДанных);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаВедомости(Идентификатор)
	
	СтрокаВедомости = Ведомости.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаВедомости = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаВедомости.ПлатежныеДокументы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ПлатежныеДокументы, ПлатежныеДокументыВерсияДанных, ОплатаЧерезКассу, ОплатаЧерезБанк",
		СтрокаВедомости.ПлатежныеДокументы, СтрокаВедомости.ПлатежныеДокументыВерсияДанных, СтрокаВедомости.ОплатаЧерезКассу, СтрокаВедомости.ОплатаЧерезБанк);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор, УплатаНаличными = Ложь, СуффиксТаблицы)
	
	ТекущаяТаблица = ЭтотОбъект["Платежи_" + СуффиксТаблицы];
	СтрокаПлатежа = ТекущаяТаблица.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	ТекущееПравило = ЭтотОбъект["Правило_" + СуффиксТаблицы];
	Если СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ И ПлательщикЕНП Тогда
		ТекущееПравило = Правило_Травматизм;
	ИначеЕсли СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж Тогда
		СтрокаПлатежа.Сумма = Объект.СуммаЕНП;
	КонецЕсли;
	
	Возврат Обработки.ПомощникУчетаЗарплаты.ПараметрыФормыПлатежногоДокументаПоСтроке(
				СтрокаПлатежа,
				ТекущееПравило,
				УплатаНаличными,
				ЭтоПредприниматель,
				Объект.Организация,
				Объект.ПериодРегистрации);
	
КонецФункции

&НаСервере
Процедура ОбновитьСведенияОДокументахОплаты(НомерРаздела = 0)
	
	// Номер раздела:
	// см. ОбновитьИзображение
	
	ДокументыОплаты = Новый Массив;
	Если НомерРаздела = 0 Или НомерРаздела = 2 Тогда
		Для Каждого СтрокаТаблицы Из Ведомости Цикл
			Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыОплаты,
					СтрокаТаблицы.ПлатежныеДокументы.ВыгрузитьЗначения(),
					Истина);
			Иначе
				ДокументыОплаты.Добавить(СтрокаТаблицы.ПлатежныеДокументы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НомерРаздела = 0 Или НомерРаздела = 3 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыОплаты,
			ОбщегоНазначения.ВыгрузитьКолонку(Платежи_НДФЛ, "ПлатежноеПоручение", Истина),
			Истина);
	КонецЕсли;
	Если НомерРаздела = 0 Или НомерРаздела = 4 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыОплаты,
			ОбщегоНазначения.ВыгрузитьКолонку(Платежи_Взносы, "ПлатежноеПоручение", Истина),
			Истина);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументыОплаты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("ДокументыОплаты", ДокументыОплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияБанковскихДокументов.СсылкаНаОбъект КАК Ссылка,
	|	СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено) КАК Оплачено,
	|	СостоянияБанковскихДокументов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|ГДЕ
	|	СостоянияБанковскихДокументов.Организация = &Организация
	|	И СостоянияБанковскихДокументов.СсылкаНаОбъект В(&ДокументыОплаты)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Ссылка");
	
	ОбновляемыеРазделы = Новый Массив;
	
	Если НомерРаздела = 0 Или НомерРаздела = 2 Тогда
		Для Каждого Платеж Из Ведомости Цикл
			Если ТипЗнч(Платеж.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
				Оплачено = Истина;
				Оплачены = 0;
				СостоянияДокументов = Новый СписокЗначений;
				Для Каждого СтрокаСписка Из Платеж.ПлатежныеДокументы Цикл
					ЗначениеВыборки = Результат.Найти(СтрокаСписка.Значение, "Ссылка");
					Если ЗначениеВыборки = Неопределено Тогда
						СостоянияДокументов.Добавить(Перечисления.СостоянияБанковскихДокументов.ПустаяСсылка());
						Продолжить;
					КонецЕсли;
					Если ЗначениеВыборки.Оплачено Тогда
						Оплачены = Оплачены + 1;
					Иначе
						Оплачено = Ложь;
					КонецЕсли;
					СостоянияДокументов.Добавить(ЗначениеВыборки.Состояние);
				КонецЦикла;
				Платеж.Оплачено = Оплачено;
				Платеж.Состояния = СостоянияДокументов;
				Платеж.ПлатежныеДокументыПредставление =
					Обработки.ПомощникУчетаЗарплаты.ПредставлениеСпискаДокументов(Платеж.ПлатежныеДокументы.Количество(),
						Оплачены,
						Платеж.ОплатаЧерезБанк);
				ОбновляемыеРазделы.Добавить(2);
			Иначе
				ЗначениеВыборки = Результат.Найти(Платеж.ПлатежныеДокументы, "Ссылка");
				Если ЗначениеВыборки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Платеж.Оплачено = ЗначениеВыборки.Оплачено;
				Платеж.Состояния = ЗначениеВыборки.Состояние;
				Платеж.ПлатежныеДокументыПредставление = 
					ПредставлениеПлатежногоДокумента(ЗначениеВыборки.Ссылка);
				ОбновляемыеРазделы.Добавить(2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НомерРаздела = 0 Или НомерРаздела = 3 Тогда
		Для Каждого Платеж Из Платежи_НДФЛ Цикл
			ЗначениеВыборки = Результат.Найти(Платеж.ПлатежноеПоручение, "Ссылка");
			Если ЗначениеВыборки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Платеж.Оплачено = ЗначениеВыборки.Оплачено;
			Платеж.Состояние = ЗначениеВыборки.Состояние;
			Платеж.ПлатежноеПоручениеПредставление = 
				ПредставлениеПлатежногоДокумента(ЗначениеВыборки.Ссылка);
			ОбновляемыеРазделы.Добавить(3);
		КонецЦикла;
	КонецЕсли;
	
	Если НомерРаздела = 0 Или НомерРаздела = 4 Тогда
		Для Каждого Платеж Из Платежи_Взносы Цикл
			ЗначениеВыборки = Результат.Найти(Платеж.ПлатежноеПоручение, "Ссылка");
			Если ЗначениеВыборки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Платеж.Оплачено = ЗначениеВыборки.Оплачено;
			Платеж.Состояние = ЗначениеВыборки.Состояние;
			Платеж.ПлатежноеПоручениеПредставление =
				ПредставлениеПлатежногоДокумента(ЗначениеВыборки.Ссылка);
			ОбновляемыеРазделы.Добавить(4);
		КонецЦикла;
		РассчитатьСуммуЕНС();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбновляемыеРазделы);
	Для Каждого ЗначениеМассива Из ОбновляемыеРазделы Цикл
		ОбновитьИзображение(ЗначениеМассива);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьДокументов

&НаКлиенте
Процедура ДекорацияПлатежныеВедомостиОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВедомостьНаВыплатуЗарплатыВКассу",
														"Т53",
														МассивДокументов, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыдачаНаличныхОбработкаНавигационнойСсылки(Элемент,
																НавигационнаяСсылкаФорматированнойСтроки,
																СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежныеДокументы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_НДФЛ Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_Взносы Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйКассовыйОрдер",
														"РКО",
														МассивДокументов,
														ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСпискиПеречисленийОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВедомостьНаВыплатуЗарплатыВБанк",
														"СписокПеречислений",
														МассивДокументов,
														ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатежныеПорученияОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежныеДокументы);
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка ИЗ СтрокаТаблицы.ПлатежныеДокументы Цикл
				Если ТипЗнч(СтрокаСписка.Значение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СписокДокументов.Добавить(СтрокаСписка.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_НДФЛ Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_Взносы Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	НеотправленныеПлатежи = НеотправленныеПлатежи(Объект.Организация, СписокДокументов);
	
	ПериодДокументов = ПомощникиПоУплатеНалоговИВзносовВызовСервера.ПериодПлатежныхДокументов(НеотправленныеПлатежи);
	
	СписокДокументов.ЗагрузитьЗначения(НеотправленныеПлатежи);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("РежимПоУмолчанию", "ГруппаВыгрузка");
	ПараметрыОбработки.Вставить("Организация",      Объект.Организация);
	ПараметрыОбработки.Вставить("НачалоПериода",    ПериодДокументов.НачалоПериода);
	ПараметрыОбработки.Вставить("КонецПериода",     ПериодДокументов.КонецПериода);
	ПараметрыОбработки.Вставить("СписокДокументов", СписокДокументов);
	ПараметрыОбработки.Вставить("УплатаНалогов",    Истина);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел",         ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"));
	ПараметрыФормы.Вставить("ОтборОрган",     ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("ВидУведомления", ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ИсчисленныеСуммыНалогов"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПлатежныеДокументыПриИзменении(Элемент)
	
	СохранитьНастройкуФормироватьПлатежныеДокументы(Объект.Организация, ФормироватьПлатежныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияВБанкОтчетПоВыплатамОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ПараметрыОтчетаВыплатыСотрудникамАУСН(Объект.Организация, Объект.ПериодРегистрации);
	
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияВНалоговуюОтчетПоВыплатамОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеДействия = ОписаниеДействияСведенияОВыплатахАУСН(Объект.Организация, Объект.ПериодРегистрации);
	
	ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОтчетаВыплатыСотрудникамАУСН(Организация, Период)
	
	Возврат Обработки.ПомощникУчетаЗарплаты.ПараметрыОтчетаВыплатыСотрудникамАУСН(Организация, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеДействияСведенияОВыплатахАУСН(Организация, Период)
	
	ПараметрыЗадачи = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	
	ПорядокПредоставленияОтчета = ПорядокПредоставленияОтчетаСведенияНДФЛ_АУСН(Организация, НачалоДня(КонецМесяца(Период)));
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ПорядокПредоставленияОтчета);
	ПараметрыЗадачи.Организация = Организация; // В универсальном механизме списка задач не заполняется.
	
	Возврат ВыполнениеЗадачБухгалтера.ОписаниеДействия(ПараметрыЗадачи);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПорядокПредоставленияОтчетаСведенияНДФЛ_АУСН(Организация, Период)
	
	ОтборПравила = Новый Структура;
	ОтборПравила.Вставить("Задача", ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету());
	ОтборПравила.Вставить("Отчет",  ВыполнениеЗадачБухгалтера.ИдентификаторПравилаПередачаСведенийОСотрудникахАУСН());
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация,
		ОтборПравила,
		Период,
		Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	
	Если Порядок <> Неопределено И Порядок.Отчет <> Неопределено Тогда
		Возврат Порядок.Отчет;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Уведомления

&НаСервере
Процедура ОбновитьСведенияОбУведомлениях()
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУведомления();
	
	ОбновитьИзображение(6);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	СуммаИсключение = 0;
	МассивСтрок = Платежи_Взносы.НайтиСтроки(Новый Структура("ВидНалога", Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ));
	Для Каждого ЗаписьМассива Из МассивСтрок Цикл
		СуммаИсключение = ЗаписьМассива.Сумма;
	КонецЦикла;
	
	СуммаКУплате = РасчетНДФЛ.Итог("Сумма") + РасчетВзносы.Итог("Сумма") - СуммаИсключение;
	
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект,
		СуммаКУплате > 0, , 2);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = Обработки.ПомощникУчетаЗарплаты.ТаблицаНалогиДляУведомления(Объект.Организация,
		Объект.ПериодРегистрации,
		РасчетВзносы,
		?(ПрименяетсяАУСН, РасчетНДФЛ, Неопределено));
		
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, Объект.ПериодРегистрации, Правило_Уведомление, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУведомления()
	
	Правила = Новый Массив;
	Правила.Добавить(Правило_Взносы);
	Правила.Добавить(Правило_НДФЛ);
	Правила.Добавить(Правило_Уведомление);
	
	ТаблицаУведомления = Обработки.ПомощникУчетаЗарплаты.ПолучитьУведомления(Объект.Организация, Правила, Объект.ПериодРегистрации);
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	Если Объект.ПериодРегистрации < ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
		Если УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Объект.ПериодРегистрации) Тогда
			Правило_Уведомление = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("СтраховыеВзносы",
																					"_Уведомление",
																					,
																					Объект.ПериодРегистрации);
		КонецЕсли;
	Иначе
		Если Правило_Взносы.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			Правило_Уведомление = Обработки.ПомощникУчетаЗарплаты.ПравилоУведомленияПоПравилуУплаты(Правило_Взносы, Объект.Организация, Объект.ПериодРегистрации);
		ИначеЕсли Правило_Взносы.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
			Правило_Уведомление = ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило_Взносы, Объект.Организация, Объект.ПериодРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	ПравилоУплатыВыполняетсяЕдинымПомощником = Ложь;
	Если ЗначениеЗаполнено(Правило_Взносы) Тогда
		ПравилоУплатыВыполняетсяЕдинымПомощником = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило_Взносы, "ВыполняетсяЕдинымПомощником");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		ОписаниеТаблицыНалоги(),
		Правило_Взносы,
		Объект.ПериодРегистрации,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);	
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция НеотправленныеПлатежи(Организация, ДокументыОплаты)
	
	НеотправленныеПлатежи = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОплаты", ДокументыОплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияБанковскихДокументов.СсылкаНаОбъект КАК Ссылка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК Банк,
	|	СостоянияБанковскихДокументов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО СостоянияБанковскихДокументов.СсылкаНаОбъект = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	СостоянияБанковскихДокументов.СсылкаНаОбъект В(&ДокументыОплаты)
	|ИТОГИ ПО
	|	Банк";
	
	ВыборкаБанк = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБанк.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаБанк.Банк) Тогда
			НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, ВыборкаБанк.Банк);
			ЕстьНастройкаОбмена = ЗначениеЗаполнено(НастройкаОбмена);
			
			Выборка = ВыборкаБанк.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЕстьНастройкаОбмена Тогда
					Если Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(Выборка.Состояние)
						И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(Выборка.Состояние)
						И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(Выборка.Состояние) Тогда
						НеотправленныеПлатежи.Добавить(Выборка.Ссылка);
					КонецЕсли;
				Иначе
					Если Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(Выборка.Состояние)
						И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(Выборка.Состояние) Тогда
						НеотправленныеПлатежи.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеотправленныеПлатежи;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор, СуффиксТаблицы, ИмяПлатежногоДокумента = Неопределено)
	
	ТекущийДокумент = ПараметрыФормыПлатежногоДокумента(Идентификатор,
														ИмяПлатежногоДокумента = "РасходныйКассовыйОрдер",
														СуффиксТаблицы);
	
	ВозвращаемыеПараметры = Неопределено;
	Если ТекущийДокумент.Свойство("Ключ") Тогда
		ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных",
												ТекущийДокумент.Ключ, ТекущийДокумент.ВерсияДанных);
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеПлатежногоДокументаНа" + СуффиксТаблицы,
															ЭтотОбъект,
															ВозвращаемыеПараметры);
	
	Если ТекущийДокумент.Свойство("Ключ") Тогда
		Если ИмяПлатежногоДокумента = Неопределено Тогда
			ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент.Ключ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
												"Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
												"Документ.ПлатежноеПоручение.ФормаОбъекта");
		Иначе
			ИмяФормыПлатежногоДокумента = "Документ." + ИмяПлатежногоДокумента + ".ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(
			ИмяФормыПлатежногоДокумента,
			Новый Структура("Ключ,Налоги", ТекущийДокумент.Ключ, Истина),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ИмяФормыПлатежногоДокумента = Неопределено Тогда
			ИмяФормыПлатежногоДокумента = ?(ТекущийДокумент.УплатаНаличными,
												"Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
												"Документ.ПлатежноеПоручение.ФормаОбъекта");
		Иначе
			ИмяФормыПлатежногоДокумента = "Документ." + ИмяПлатежногоДокумента + ".ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(
			ИмяФормыПлатежногоДокумента,
			ТекущийДокумент,
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежныйДокументВедомости(Идентификатор)

	ТекущийДокумент = ПараметрыФормыПлатежногоДокументаВедомости(Идентификатор);
	Если ТекущийДокумент <> Неопределено Тогда
		
		ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
		
		Если ТипЗнч(ТекущийДокумент.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
			
			ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных, СписокДокументов", 
													ТекущийДокумент.ПлатежныеДокументы,
													ТекущийДокумент.ПлатежныеДокументыВерсияДанных,
													ТекущийДокумент.ПлатежныеДокументы);
			
			ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																ЭтотОбъект,
																ВозвращаемыеПараметры);
			
			ПараметрыЗаполнения  = Новый Структура();
			ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
			ПараметрыЗаполнения.Вставить("СчетОрганизации",    Объект.СчетОрганизации);
			ПараметрыЗаполнения.Вставить("ПлатежнаяВедомость", ПараметрыВедомости.Ведомость);
			ПараметрыЗаполнения.Вставить("РежимПомощника",     Истина);
			Если ТекущийДокумент.ОплатаЧерезБанк Тогда
				ИмяФормыОбработкиВыплаты = "Обработка.ВыплатаЗарплатыПлатежнымиПоручениями.Форма";
			Иначе
				ИмяФормыОбработкиВыплаты = "Обработка.ВыплатаЗарплатыРасходнымиОрдерами.Форма";
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормыОбработкиВыплаты,
							ПараметрыЗаполнения,
							ЭтаФорма,
							,
							,
							,
							ОткрытьДокументОповещение,
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных", 
				ТекущийДокумент.ПлатежныеДокументы, ТекущийДокумент.ПлатежныеДокументыВерсияДанных);
				
			ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																	ЭтотОбъект,
																	ВозвращаемыеПараметры);
			
			ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент.ПлатежныеДокументы) =
				Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
			ОткрытьФорму(ИмяФормыПлатежногоДокумента,
				Новый Структура("Ключ",
					ТекущийДокумент.ПлатежныеДокументы),
				ЭтаФорма,
				,
				,
				,
				ОткрытьДокументОповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
		ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
		Если ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			
			Если ВедомостьПоДоговоруПодряда(ПараметрыВедомости.Ведомость) Тогда
				
				ПараметрыЗаполнения  = Новый Структура();
				ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
				ПараметрыЗаполнения.Вставить("ПлатежнаяВедомость", ПараметрыВедомости.Ведомость);
				ПараметрыЗаполнения.Вставить("РежимПомощника",     Истина);
				ОткрытьФорму("Обработка.ВыплатаЗарплатыРасходнымиОрдерами.Форма",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Иначе
			
				МассивДокументовКасса = Новый Массив;
				МассивДокументовКасса.Добавить(ПараметрыВедомости.Ведомость);
				ЗначенияЗаполнения  = Новый Структура("ДанныеЗаполнения",    МассивДокументовКасса);
				ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения",  ЗначенияЗаполнения);
				ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			Если ЗначениеЗаполнено(ПараметрыВедомости.ЗарплатныйПроект) Тогда
				МассивДокументовБанк = Новый Массив;
				МассивДокументовБанк.Добавить(ПараметрыВедомости.Ведомость);
				ЗначенияЗаполнения  = Новый Структура("ДанныеЗаполнения",    МассивДокументовБанк);
				ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения",  ЗначенияЗаполнения);
				ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПараметрыЗаполнения  = Новый Структура();
				ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
				ПараметрыЗаполнения.Вставить("СчетОрганизации",    Объект.СчетОрганизации);
				ПараметрыЗаполнения.Вставить("ПлатежнаяВедомость", ПараметрыВедомости.Ведомость);
				ПараметрыЗаполнения.Вставить("РежимПомощника",     Истина);
				ОткрытьФорму("Обработка.ВыплатаЗарплатыПлатежнымиПоручениями.Форма",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокумент(Идентификатор, СуффиксТаблицы)
	
	ТаблицаПлатежа = ЭтотОбъект["Платежи_" + СуффиксТаблицы];
	СтрокаПлатежа = ТаблицаПлатежа.НайтиПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить %1?'"), СтрокаПлатежа.ПлатежноеПоручениеПредставление);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументДляУдаления", СтрокаПлатежа.ПлатежноеПоручение);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПлатежныйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокументВедомости(Идентификатор)
	
	СтрокаПлатежа = Ведомости.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(СтрокаПлатежа.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
		Если СтрокаПлатежа.ПлатежныеДокументы.Количество() = 1 Тогда
			ПлатежныйДокумент = СтрокаПлатежа.ПлатежныеДокументы[0].Значение;
		Иначе
			ПлатежныйДокумент = Неопределено;
		КонецЕсли;
	Иначе
		ПлатежныйДокумент = СтрокаПлатежа.ПлатежныеДокументы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить %1?'"), СтрокаПлатежа.ПлатежныеДокументыПредставление);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументДляУдаления", ПлатежныйДокумент);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПлатежныйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатежныйДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УдалитьДокументУплаты(ДополнительныеПараметры.ДокументДляУдаления);
		
		СтруктураРазделов = СформироватьСтруктуруРазделов(Ложь, Ложь, Истина, ПлательщикЕНП, Истина, Ложь);
		
		Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
		
		Если НЕ Результат.ЗаданиеВыполнено Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			АдресХранилища       = Результат.АдресХранилища;
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		Иначе
			ЗагрузитьРезультат();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти
