#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице колонку статус.
//
// Параметры:
//  ПараметрыВыплат - ТаблицаЗначений:
//   * Организация       - СправочникСсылка.Организации
//   * ПериодРегистрации - Дата
//   * Аванс             - Булево
//   * Статус            - Строка
//
Процедура ЗаполнитьСтатусыЗадачВыплатыЗарплаты(ПараметрыВыплат) Экспорт
	
	ТаблицаСостоянийУплатВБюджет = ПараметрыВыплат.СкопироватьКолонки();
	
	Для Каждого ПараметрыВыплаты Из ПараметрыВыплат Цикл
		
		Если ПараметрыВыплаты.СтатусУстановленВручную Тогда
			ПараметрыВыплаты.Статус = ПараметрыВыплаты.РучнойСтатус;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("Организация",             ПараметрыВыплаты.Организация);
		ПараметрыОбработки.Вставить("ПериодРегистрации",       ПараметрыВыплаты.ПериодРегистрации);
		ПараметрыОбработки.Вставить("Аванс",                   ПараметрыВыплаты.Аванс);
		ПараметрыОбработки.Вставить("Ведомости",               Ведомости()); // будет заполнена в ПодготовитьСведенияОВыплатеЗаработнойПлаты()
		ПараметрыОбработки.Вставить("Платежи_НДФЛ",            Платежи_НДФЛ()); // будет заполнена в ПодготовитьСведенияПоНДФЛ()
		ПараметрыОбработки.Вставить("РасчетныйДокумент",       Неопределено);
		ПараметрыОбработки.Вставить("РежимВыплатыПоДокументу", Ложь);
		ПараметрыОбработки.Вставить("РежимВыплатыЗаПериод",    Ложь);
		ПараметрыОбработки.Вставить("МассивВедомостей",        Неопределено);
		ПараметрыОбработки.Вставить("ИспользоватьРасчетПервойПоловиныМесяца",
				УчетЗарплаты.ИспользоватьРасчетПервойПоловиныМесяца(ПараметрыВыплаты.Организация, ПараметрыВыплаты.ПериодРегистрации));
		ПараметрыОбработки.Вставить("УчитыватьДанныеВнешнейПрограмммы",
			Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));
		ПараметрыОбработки.Вставить("ПлательщикЕНП",
				ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
					ПараметрыВыплаты.Организация,
					ПараметрыВыплаты.ПериодРегистрации,
					Перечисления.Периодичность.Месяц));
		ПараметрыОбработки.Вставить("ПрименяетсяАУСН",
				УчетнаяПолитика.ПрименяетсяАУСН(
					ПараметрыВыплаты.Организация,
					ПараметрыВыплаты.ПериодРегистрации));
		
		ПараметрыВыплаты.Статус = "";
		
		// Оплата ведомостей
		
		ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		
		ОплаченыВедомости = ПараметрыОбработки.Ведомости.Количество() <> 0
			И ПараметрыОбработки.Ведомости.Найти(Ложь, "Оплачено") = Неопределено;
			
		УплаченНДФЛ = Истина;
		Если Не (ПараметрыВыплаты.Аванс И ПараметрыВыплаты.ПериодРегистрации < УчетЗарплаты.ДатаНачалаУдержанияНДФЛПоАвансам())
			И (ПараметрыВыплаты.ПериодРегистрации < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж()) Тогда
				// Уплата НДФЛ
				ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
				УплаченНДФЛ = ПараметрыОбработки.Платежи_НДФЛ.Количество() <> 0
							И ПараметрыОбработки.Платежи_НДФЛ.Найти(Ложь, "Оплачено") = Неопределено;
		КонецЕсли;
		
		Если ОплаченыВедомости И УплаченНДФЛ Тогда
			ПараметрыВыплаты.Статус = "Выплачено";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в переданной таблице колонку статус.
//
//  Параметры:
//   * Организация   - СправочникСсылка.Организации
//   * ПериодСобытия - Дата
//   * Статус        - Строка
//
Процедура ЗаполнитьСтатусыЗадачУплатыВБюджет(ПараметрыЗадач) Экспорт
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	СводРасчетов = Новый ТаблицаЗначений;
	СводРасчетов.Колонки.Добавить("Показатель");
	СводРасчетов.Колонки.Добавить("Сумма");
	СводРасчетов.Колонки.Добавить("Порядок");
	
	ТипыПлатежногоПоручения = Новый Массив;
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи = Новый ТаблицаЗначений;
	Платежи.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи.Колонки.Добавить("Дата",                Новый ОписаниеТипов("Дата"));
	Платежи.Колонки.Добавить("ВерсияДанных",        Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КБК",                 Метаданные.Документы.ПлатежноеПоручение.Реквизиты.КодБК.Тип);
	Платежи.Колонки.Добавить("ОКАТО",               Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Платежи.Колонки.Добавить("Сумма",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Платежи.Колонки.Добавить("Наименование",        Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("Налог",               Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи.Колонки.Добавить("Оплачено",            Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("НазначениеПлатежа",   Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КПП",                 ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Платежи.Колонки.Добавить("ВидНалога",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Платежи.Колонки.Добавить("ПлатежноеПоручениеПредставление", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("ПлатежноеПоручение",  Новый ОписаниеТипов(ТипыПлатежногоПоручения));
	Платежи.Колонки.Добавить("Состояние",           Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	
	ПараметрыУплат = Новый Структура();
	ПараметрыУплат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	ПараметрыУплат.Вставить("ПериодРегистрации",         '00010101');
	ПараметрыУплат.Вставить("СводРасчетов",              Новый ТаблицаЗначений);
	ПараметрыУплат.Вставить("Платежи_Взносы",            Новый ТаблицаЗначений);
	ПараметрыУплат.Вставить("ПараметрыСтраховыхВзносов");
	ПараметрыУплат.Вставить("РасчетныйДокумент");
	ПараметрыУплат.Вставить("РежимВыплатыПоДокументу",   Ложь);
	ПараметрыУплат.Вставить("РежимВыплатыЗаПериод",      Ложь);
	ПараметрыУплат.Вставить("Аванс",                     Ложь);
	ПараметрыУплат.Вставить("ИспользоватьРасчетПервойПоловиныМесяца", Ложь);
	ПараметрыУплат.Вставить("ПлательщикЕНП",             Ложь);
	ПараметрыУплат.Вставить("ПрименяетсяАУСН",           Ложь);
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
			ПараметрыЗадачи.Статус = ПараметрыЗадачи.РучнойСтатус;
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗадачи.Статус = "";
		
		Организация = ПараметрыЗадачи.Организация;
		ПериодРегистрации = ПараметрыЗадачи.ПериодСобытия;
		
		ПараметрыУплат.Организация    = Организация;
		ПараметрыУплат.СводРасчетов   = СводРасчетов.СкопироватьКолонки();
		ПараметрыУплат.Платежи_Взносы = Платежи.СкопироватьКолонки();
		Если НачалоГода(ПериодРегистрации) <> НачалоГода(ПараметрыУплат.ПериодРегистрации) Тогда
			// Если еще не вычисляли за этот год. Иначе использовали бы ранее вычисленные.
			ПараметрыУплат.ПараметрыСтраховыхВзносов = Неопределено;
		КонецЕсли;
		ПараметрыУплат.ПериодРегистрации       = ПериодРегистрации;
		ПараметрыУплат.РасчетныйДокумент       = Неопределено;
		ПараметрыУплат.РежимВыплатыПоДокументу = Ложь;
		ПараметрыУплат.РежимВыплатыЗаПериод    = Ложь;
		ПараметрыУплат.Аванс                   = Ложь;
		ПараметрыУплат.ИспользоватьРасчетПервойПоловиныМесяца =
			УчетЗарплаты.ИспользоватьРасчетПервойПоловиныМесяца(Организация, ПериодРегистрации);
		ПараметрыУплат.ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
			Организация, ПериодРегистрации, Перечисления.Периодичность.Месяц);
		ПараметрыУплат.ПрименяетсяАУСН = УчетнаяПолитика.ПрименяетсяАУСН(Организация, ПериодРегистрации);
				
		ВариантВыборкиСтраховыхВзносов = ?(ПериодРегистрации > НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(),
			ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносы,
			ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносыТравматизм);
		
		ПодготовитьСводРасчетов(ПараметрыУплат,      ВариантВыборкиСтраховыхВзносов);
		ПодготовитьСведенияПоВзносам(ПараметрыУплат, ВариантВыборкиСтраховыхВзносов);
		
		СтрокаВзносы = ПараметрыУплат.СводРасчетов.Найти("Страховые взносы", "Показатель");
		СтрокаНДФЛ   = ПараметрыУплат.СводРасчетов.Найти("НДФЛ", "Показатель");
		
		Если (СтрокаВзносы = Неопределено Или СтрокаВзносы.Сумма = 0)
			И (СтрокаНДФЛ = Неопределено Или СтрокаНДФЛ.Сумма = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		НеобходимоУплатить = ?(СтрокаВзносы = Неопределено, 0, СтрокаВзносы.Сумма)
			 + ?(СтрокаНДФЛ = Неопределено, 0, СтрокаНДФЛ.Сумма);
		
		ПлатежиОплачено = ПараметрыУплат.Платежи_Взносы.Скопировать(Новый Структура("Оплачено", Истина));
		
		Уплачено = ПлатежиОплачено.Итог("Сумма");
		
		Если Уплачено > 0 И Уплачено >= НеобходимоУплатить Тогда
			ПараметрыЗадачи.Статус = "Оплачено";
		Иначе
			ПлатежныеПоручения = ПараметрыУплат.Платежи_Взносы.ВыгрузитьКолонку("ПлатежноеПоручение");
			ПараметрыЗадачи.Статус = ПомощникиПоУплатеНалоговИВзносов.СтатусОплатыПлатежныхПоручений(ПлатежныеПоручения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Собирает данные для отображения в Помощнике, запускает механизмы генерации документов
//
// Параметры:
//  ПараметрыОбработки - Структура
//  АдресХранилища     - Строка.
//
Процедура ПодготовитьДанные(ПараметрыОбработки, АдресХранилища) Экспорт
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	СтруктураРазделов       = ПараметрыОбработки.СтруктураРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СтруктураРазделов", СтруктураРазделов);
	
	Если НЕ ПараметрыОбработки.Аванс Или ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
		
		Если СтруктураРазделов.СводРасчетов Или СтруктураРазделов.Платежи_Взносы Или СтруктураРазделов.Уведомления Тогда
			ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
				НачалоГода(ПараметрыОбработки.ПериодРегистрации));
			ПараметрыОбработки.Вставить("ПараметрыСтраховыхВзносов", ПараметрыСтраховыхВзносов);	
			Если Месяц(ПараметрыОбработки.ПериодРегистрации) = 12 Тогда
				НовыеПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
					НачалоГода(ДобавитьМесяц(ПараметрыОбработки.ПериодРегистрации, 1)));
			Иначе
				НовыеПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов.Скопировать();
			КонецЕсли;
			ПараметрыОбработки.Вставить("НовыеПараметрыСтраховыхВзносов", НовыеПараметрыСтраховыхВзносов);
		КонецЕсли;
		
		Если СтруктураРазделов.РасчетныеДокументы Тогда
			Если ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
				ПодготовитьСведенияОНачисленииАванса(ПараметрыОбработки);
			Иначе
				ПодготовитьСведенияОНачисленииЗаработнойПлаты(ПараметрыОбработки);
			КонецЕсли;
			РезультатВыполнения.Вставить("РасчетныеДокументы", ПараметрыОбработки.РасчетныеДокументы);
		КонецЕсли;
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			Если ПараметрыОбработки.ГенерироватьКомплект Тогда
				ПараметрыОбработки.Вставить("МассивВедомостей", Новый Массив);
				СоздатьВедомостиПоРасчетномуДокументу(ПараметрыОбработки, РезультатВыполнения, АдресХранилища);
			Иначе
				ПараметрыОбработки.Вставить("МассивВедомостей", ПараметрыОбработки.Ведомости.ВыгрузитьКолонку("Ведомость"));
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРазделов.СводРасчетов Тогда
			ПодготовитьСводРасчетов(ПараметрыОбработки, ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносыТравматизм);
			РезультатВыполнения.Вставить("СводРасчетов", ПараметрыОбработки.СводРасчетов);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_НДФЛ Тогда
			ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
			Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
				Если ПараметрыОбработки.ГенерироватьКомплект Тогда
					СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
				КонецЕсли;
				ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
			КонецЕсли;
			РезультатВыполнения.Вставить("Платежи_НДФЛ", ПараметрыОбработки.Платежи_НДФЛ);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_Взносы Тогда
			ПодготовитьСведенияПоВзносам(ПараметрыОбработки, ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносыТравматизм);
			РезультатВыполнения.Вставить("Платежи_Взносы", ПараметрыОбработки.Платежи_Взносы);
		КонецЕсли;
		
		Если СтруктураРазделов.Уведомления Тогда
			ПодготовитьСведенияПоРасчетамВзносов(ПараметрыОбработки);
			ПодготовитьСведенияОбУведомлениях(ПараметрыОбработки);
			РезультатВыполнения.Вставить("Уведомления",  ПараметрыОбработки.Уведомления);
			РезультатВыполнения.Вставить("РасчетВзносы", ПараметрыОбработки.РасчетВзносы);
			Если ПараметрыОбработки.ПериодРегистрации < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
				ПодготовитьСведенияПоРасчетамНДФЛ(ПараметрыОбработки);
			КонецЕсли;
			РезультатВыполнения.Вставить("РасчетНДФЛ", ПараметрыОбработки.РасчетНДФЛ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРазделов.Ведомости Тогда
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
			Если ПараметрыОбработки.ГенерироватьКомплект Тогда
				СформироватьДокументыОплатыВедомостей(ПараметрыОбработки);
			КонецЕсли;
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		Иначе
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		КонецЕсли;
		РезультатВыполнения.Вставить("Ведомости", ПараметрыОбработки.Ведомости);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Формирует представление платежного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка (ПлатежноеПоручение, РасходныйКассовыйОрдер);
//
Функция ПредставлениеПлатежногоДокумента(ДокументСсылка) Экспорт
	
	ПредставлениеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата");
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь);
	ДатаДокумента          = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента);

КонецФункции

// Формирует коплект документов зарплаты (ведомости, платежные поручнеия, РКО)
//
// Параметры:
//  ПараметрыОбработки - Структура
//  АдресХранилища     - Строка.
//
Процедура СформироватьДокументы(ПараметрыОбработки, АдресХранилища) Экспорт
	
	СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки);
	
	Если НЕ ПараметрыОбработки.Аванс Тогда
		Если ПараметрыОбработки.Платежи_НДФЛ.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
		КонецЕсли;
		Если ПараметрыОбработки.Платежи_Взносы.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки);
		КонецЕсли;
		Если Не ПараметрыОбработки.РежимВыплатыПоДокументу И Не ПараметрыОбработки.РежимВыплатыЗаПериод 
			И Не ПараметрыОбработки.ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
			Если ПараметрыОбработки.РасчетВзносы.Количество() > 0
				Или ПараметрыОбработки.РасчетНДФЛ.Количество() > 0 Тогда
				СформироватьУведомление(ПараметрыОбработки);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
		Если ПараметрыОбработки.Платежи_НДФЛ.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
	
	ПодготовитьДанные(ПараметрыОбработки, АдресХранилища);
	
КонецПроцедуры

// Определяет правило уплаты налогов для задачи выплаты зарплаты (это может быть правило НДФЛ, взносов или выплаты)
//
// Параметры:
//  ИдентификаторЗадачи  - Строка
//  ИдентификаторПравила - Строка
//  ИмяИсключение        - Строка
//  ПериодРегистрации    - Дата.
//
Функция ТекущееПравилоЗадачи(ИдентификаторЗадачи, ИдентификаторПравила, ИмяИсключение = " ", ПериодРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                      ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи",         ИдентификаторЗадачи);
	Запрос.УстановитьПараметр("ИдентификаторПравила",        ИдентификаторПравила);
	Запрос.УстановитьПараметр("ШаблонИдентификатораПравила", "%" + ИдентификаторПравила + "%");
	Запрос.УстановитьПараметр("ИмяИсключение",               ИмяИсключение);
	Запрос.УстановитьПараметр("ШаблонИмениИсключения",       "%" + ИмяИсключение + "%");
	Запрос.УстановитьПараметр("Уведомление",                 СтрНайти(ИдентификаторПравила, "Уведомление") > 0);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|			ИЛИ ВЫБОР
	|				КОГДА &Уведомление
	|					ТОГДА ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА НЕ &Уведомление
	|					ТОГДА ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторПравила
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Код ПОДОБНО &ШаблонИдентификатораПравила)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Код <> &ИмяИсключение
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Код ПОДОБНО &ШаблонИмениИсключения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Определяет вид создавемого документа уплаты, и заполненяет передаваемые параметры
//
// Параметры:
//  СтрокаПлатежа      - Строка таблицы значений
//  Правило            - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  УплатаНаличными    - Булево
//  ЭтоПредприниматель - Булево
//  Организация        - СправочникСсылка.Организации
//  ПериодРегистрации  - Дата.
//
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа,
													Правило,
													УплатаНаличными,
													ЭтоПредприниматель,
													Организация,
													ПериодРегистрации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ, ВерсияДанных", СтрокаПлатежа.ПлатежноеПоручение, СтрокаПлатежа.ВерсияДанных);
	КонецЕсли;
	
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
		Организация,
		ПериодРегистрации,
		Перечисления.Периодичность.Месяц);
	
	Если ЭтоПредприниматель Тогда
		Если НЕ УплатаНаличными Тогда
			Если Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Организация) = 0 Тогда
				УплатаНаличными = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СпособОплаты = ?(УплатаНаличными,
						Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
						Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	СтраховыеВзносы_ФСС_НСиПЗ = 
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
		
	Если ПлательщикЕНП Тогда
		Периодичность     = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		ОснованиеПлатежа  = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	Иначе
		Если СтрокаПлатежа.Налог = СтраховыеВзносы_ФСС_НСиПЗ Тогда
			Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		Иначе
			Периодичность = "МС";
		КонецЕсли;
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодРегистрации, Периодичность);
		ОснованиеПлатежа  = "";
	КонецЕсли;
	
	// Параметры формы для заполнения нового платежного документа
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа(); // Передаем параметры в структуре, потому что их много
	ОписаниеПлатежа.Период              = ПериодРегистрации;
	ОписаниеПлатежа.Налог               = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ОписаниеПлатежа.Организация         = Организация;
	ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.Аванс               = Ложь;
	ОписаниеПлатежа.КБК                 = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО               = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КПППлательщика      = СтрокаПлатежа.КПП;
	ОписаниеПлатежа.КодНалоговогоОргана = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма               = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание            = СтрокаПлатежа.НазначениеПлатежа;
	ОписаниеПлатежа.Декларация          = Неопределено;
	ОписаниеПлатежа.ДатаДекларации      = "";
	ОписаниеПлатежа.ОснованиеПлатежа    = ОснованиеПлатежа;
	
	Если Не СтрокаПлатежа.Налог = СтраховыеВзносы_ФСС_НСиПЗ Тогда
		Если ПлательщикЕНП Тогда
			РеквизитыГоловнойОрганизации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
				Организация, СтрокаПлатежа.Налог, ПериодРегистрации);
			ОписаниеПлатежа.КПППлательщика = РеквизитыГоловнойОрганизации.КПП;
			ОписаниеПлатежа.ОКАТО          = РеквизитыГоловнойОрганизации.ОКТМО;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	ПараметрыФормыПлатежногоДокумента = Новый Структура();
	ПараметрыФормыПлатежногоДокумента.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормыПлатежногоДокумента.Вставить("ПериодСобытия",      ПериодРегистрации);
	ПараметрыФормыПлатежногоДокумента.Вставить("Правило",            Правило);
	ПараметрыФормыПлатежногоДокумента.Вставить("УплатаНаличными",    УплатаНаличными);
	ПараметрыФормыПлатежногоДокумента.Вставить("Налоги",             Истина);
	
	Возврат ПараметрыФормыПлатежногоДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьНачисленияПлатежнымиДокументами(Правила,
													Платежи,
													ПоказательПериода,
													Организация,
													РежимВыплатыПоДокументу = Ложь,
													ПлательщикЕНП = Ложь)
	
	Если Платежи.Колонки.Найти("ПереходныйКБК") = Неопределено Тогда
		Платежи.Колонки.Добавить("ПереходныйКБК", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	КонецЕсли;
	
	ТаблицаПлатежей = Платежи.Скопировать();
	ТаблицаПлатежей.Колонки.Добавить("ИндексПлатежа", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		СтрокаПлатежа.ИндексПлатежа = ТаблицаПлатежей.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Платежи.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ТекущиеПлатежи.КБК КАК КБК,
	|	ВТ_ТекущиеПлатежи.ПереходныйКБК КАК ПереходныйКБК,
	|	ВТ_ТекущиеПлатежи.ОКАТО КАК ОКАТО,
	|	ВТ_ТекущиеПлатежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ВЫБОР
	|		КОГДА ВТ_ТекущиеПлатежи.КПП = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ВТ_ТекущиеПлатежи.КПП
	|	КОНЕЦ КАК КПП,
	|	ВТ_ТекущиеПлатежи.Сумма КАК Сумма,
	|	ВТ_ТекущиеПлатежи.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ ВТ_ТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК ВТ_ТекущиеПлатежи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.КБК КАК КБК,
	|	Платежи.ПереходныйКБК КАК ПереходныйКБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ВЫБОР
	|		КОГДА Платежи.КПП = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ Платежи.КПП
	|	КОНЕЦ КАК КПП,
	|	Платежи.Сумма КАК Сумма
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	ВТ_ТекущиеПлатежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило В(&Правила)
	|	И НАЧАЛОПЕРИОДА(ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодСобытия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.КПППлательщика = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ПлатежноеПоручение.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|	И ПлатежноеПоручение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ИСТИНА КАК Оплачено,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка) КАК Состояние,
	|	""0"" КАК КПП,
	|	РасходныйКассовыйОрдер.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено)),
	|	ВЫБОР
	|		КОГДА ВТПлатежныеПоручения.КПППлательщика = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ВТПлатежныеПоручения.КПППлательщика
	|	КОНЕЦ,
	|	ВТПлатежныеПоручения.ВерсияДанных
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.Оплачено КАК Оплачено,
	|	ПлатежиПоПравилу.Состояние КАК Состояние,
	|	ПлатежиПоПравилу.Сумма КАК Сумма,
	|	ПлатежиПоПравилу.Дата КАК Дата,
	|	ПлатежиПоПравилу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТекущиеПлатежи КАК Платежи
	|		ПО (ПлатежиПоПравилу.КБК = Платежи.КБК
	|				ИЛИ ПлатежиПоПравилу.КБК = Платежи.ПереходныйКБК)
	|			И (&УсловиеОКАТО)
	|			И ПлатежиПоПравилу.КПП = Платежи.КПП
	|			И (&УсловиеСумма)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правила",       Правила);
	Запрос.УстановитьПараметр("Платежи",       ТаблицаПлатежей);
	Запрос.УстановитьПараметр("ПериодСобытия", ПоказательПериода);
	
	Если РежимВыплатыПоДокументу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСумма", "ПлатежиПоПравилу.Сумма = Платежи.Сумма");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСумма", "Истина");
	КонецЕсли;
	Если ПлательщикЕНП Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОКАТО", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОКАТО", "ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПогашенныеСуммы = Новый Соответствие;
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Платеж = ТаблицаПлатежей[Выборка.ИндексПлатежа];
			
			Если Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				СуммаВыборки = Выборка.Сумма;
				Если ПогашенныеСуммы.Получить(Выборка.ПлатежноеПоручение) <> Неопределено Тогда
					СуммаВыборки = Макс(0, СуммаВыборки - ПогашенныеСуммы[Выборка.ПлатежноеПоручение]);
				КонецЕсли;
					
				Если Платеж.Сумма - СуммаВыборки < 0 Тогда
					ЗаполнитьЗначенияСвойств(Платеж, Выборка);
					Платеж.ПлатежноеПоручениеПредставление =
							ПредставлениеПлатежногоДокумента(Выборка.ПлатежноеПоручение);
					Если ПогашенныеСуммы.Получить(Выборка.ПлатежноеПоручение) = Неопределено Тогда
						ПогашенныеСуммы.Вставить(Выборка.ПлатежноеПоручение, Платеж.Сумма);
					Иначе
						ПогашенныеСуммы[Выборка.ПлатежноеПоручение] = ПогашенныеСуммы[Выборка.ПлатежноеПоручение] + Платеж.Сумма;
					КонецЕсли;
				Иначе
					Платеж.Сумма = Платеж.Сумма - СуммаВыборки;
					
					Если СуммаВыборки > 0 Тогда
						НоваяСтрока = Платежи.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
						НоваяСтрока.ПлатежноеПоручение              = Выборка.ПлатежноеПоручение;
						НоваяСтрока.Оплачено                        = Выборка.Оплачено;
						НоваяСтрока.Состояние                       = Выборка.Состояние;
						НоваяСтрока.ПлатежноеПоручениеПредставление =
								ПредставлениеПлатежногоДокумента(Выборка.ПлатежноеПоручение);
						НоваяСтрока.Сумма                           = СуммаВыборки;
						НоваяСтрока.Дата                            = Выборка.Дата;
						НоваяСтрока.ВерсияДанных                    = Выборка.ВерсияДанных;
						Если ПогашенныеСуммы.Получить(Выборка.ПлатежноеПоручение) = Неопределено Тогда
							ПогашенныеСуммы.Вставить(Выборка.ПлатежноеПоручение, НоваяСтрока.Сумма);
						Иначе
							ПогашенныеСуммы[Выборка.ПлатежноеПоручение] = ПогашенныеСуммы[Выборка.ПлатежноеПоручение] + НоваяСтрока.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) И Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение Тогда
				Платеж.Оплачено = Выборка.Оплачено;
				Если ПогашенныеСуммы.Получить(Выборка.ПлатежноеПоручение) = Неопределено Тогда
					ПогашенныеСуммы.Вставить(Выборка.ПлатежноеПоручение, Платеж.Сумма);
				Иначе
					ПогашенныеСуммы[Выборка.ПлатежноеПоручение] = ПогашенныеСуммы[Выборка.ПлатежноеПоручение] + Платеж.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) И Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.ПлатежноеПоручение              = "";
			НоваяСтрока.Оплачено                        = Ложь;
			НоваяСтрока.ПлатежноеПоручениеПредставление = "";
			НоваяСтрока.Сумма                           = Платеж.Сумма;
			Платеж.Сумма                                = 0;
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
			НоваяСтрока.ВерсияДанных                    = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж ИЗ ТаблицаПлатежей Цикл
		Если Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Сортировать("Дата");
	
КонецПроцедуры

// Возвращает таблицу, соответствующую реквизиту "Ведомости" в основной форме помощника.
//
Функция Ведомости()
	
	Ведомости = Новый ТаблицаЗначений;
	
	ТипыВедомости = Новый Массив;
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты"));
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"));
	
	ТипыПлатежныеДокументы = Новый Массив;
	ТипыПлатежныеДокументы.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежныеДокументы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыПлатежныеДокументы.Добавить(Тип("СписокЗначений"));
	
	ТипыСостояния = Новый Массив;
	ТипыСостояния.Добавить(Тип("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	ТипыСостояния.Добавить(Тип("СписокЗначений"));
	
	Ведомости.Колонки.Добавить("ПлатежныеДокументыВерсияДанных",  Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ВедомостьВерсияДанных",           Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ВедомостьПредставление",          Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ЗарплатныйПроект",                Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты"));
	Ведомости.Колонки.Добавить("Оплачено",                        Новый ОписаниеТипов("Булево"));
	Ведомости.Колонки.Добавить("ПлатежныеДокументыПредставление", Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ПлатежныеДокументы",              Новый ОписаниеТипов(ТипыПлатежныеДокументы));
	Ведомости.Колонки.Добавить("Сумма",                           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Ведомости.Колонки.Добавить("Ведомость",                       Новый ОписаниеТипов(ТипыВедомости));
	Ведомости.Колонки.Добавить("ОплатаЧерезКассу",                Новый ОписаниеТипов("Булево"));
	Ведомости.Колонки.Добавить("ОплатаЧерезБанк",                 Новый ОписаниеТипов("Булево"));
	Ведомости.Колонки.Добавить("Состояния",                       Новый ОписаниеТипов(ТипыСостояния));
	
	Возврат Ведомости;
	
КонецФункции

// Возвращает массив актуальных правил по переданному идентификатору задачи
//
Функция Правила(ИдентификаторЗадачи, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", ИдентификаторЗадачи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|					ИЛИ ВЫБОР
	|						КОГДА МЕСЯЦ(&Период) = 1
	|							ТОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) >= ГОД(&Период) - 1
	|						ИНАЧЕ МЕСЯЦ(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) >= МЕСЯЦ(&Период) - 1
	|								И ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = ГОД(&Период)
	|					КОНЕЦ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивПравил = Результат.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивПравил;
	
КонецФункции

// Возвращает таблицу, соответствующую реквизиту "Платежи_НДФЛ" в основной форме помощника.
//
Функция Платежи_НДФЛ()
	
	Платежи_НДФЛ = Новый ТаблицаЗначений;
	
	ТипыПлатежногоПоручения = Новый Массив;
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи_НДФЛ.Колонки.Добавить("КБК",                             ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Платежи_НДФЛ.Колонки.Добавить("ОКАТО",                           ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Платежи_НДФЛ.Колонки.Добавить("Сумма",                           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Платежи_НДФЛ.Колонки.Добавить("Наименование",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("ПлатежноеПоручение",              Новый ОписаниеТипов(ТипыПлатежногоПоручения));
	Платежи_НДФЛ.Колонки.Добавить("Оплачено",                        Новый ОписаниеТипов("Булево"));
	Платежи_НДФЛ.Колонки.Добавить("КодНалоговогоОргана",             ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("НазначениеПлатежа",               ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("ВидНалога",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Платежи_НДФЛ.Колонки.Добавить("Налог",                           Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи_НДФЛ.Колонки.Добавить("Организация",                     Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи_НДФЛ.Колонки.Добавить("ПлатежноеПоручениеПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("Дата",                            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Платежи_НДФЛ.Колонки.Добавить("КПП",                             ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Платежи_НДФЛ.Колонки.Добавить("ВерсияДанных",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("Состояние",                       Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	
	Возврат Платежи_НДФЛ;
	
КонецФункции

#Область ПолучениеДанных

Процедура ПодготовитьСводРасчетов(ПараметрыОбработки, ВариантВыборкиСтраховыхВзносов)
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	ПараметрыОбработки.СводРасчетов.Очистить();
	
	ПараметрыСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "ПараметрыСтраховыхВзносов");
	Если ПараметрыСтраховыхВзносов = Неопределено Тогда
		ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
			НачалоГода(ПараметрыОбработки.ПериодРегистрации));
		Если ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносы Тогда
			СчетУчетаТравматизм = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
			СтрокаТравматизм = ПараметрыСтраховыхВзносов.Найти(СчетУчетаТравматизм, "СчетУчета");
			Если СтрокаТравматизм <> Неопределено Тогда
				// Кешируем в переменную не в точности то же значение, которое хранится в повторно-используемой функции.
				СтрокаТравматизмИндекс = ПараметрыСтраховыхВзносов.Индекс(СтрокаТравматизм);
				ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов.Скопировать();
				ПараметрыСтраховыхВзносов.Удалить(СтрокаТравматизмИндекс);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОбработки.Вставить("ПараметрыСтраховыхВзносов", ПараметрыСтраховыхВзносов);
	КонецЕсли;
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	ПериодРегистрацииНачало = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	ПериодРегистрацииКонец  = КонецМесяца(ПараметрыОбработки.ПериодРегистрации);
	ПериодОстатков          = ДобавитьМесяц(?(ПараметрыОбработки.ПериодРегистрации < ТекущаяДатаСеанса(),
											ТекущаяДатаСеанса(),
											ПараметрыОбработки.ПериодРегистрации),1);
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	КонецМесяца(ПараметрыОбработки.ПериодРегистрации)+1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",       НачалоМесяца(ПараметрыОбработки.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрацииНачало", ПериодРегистрацииНачало);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец",  ПериодРегистрацииКонец);
	Запрос.УстановитьПараметр("ПериодОстатков",          ПериодОстатков);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов",   СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",             ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто",        ЗначенияСубконто);
	Запрос.УстановитьПараметр("РасчетныйДокумент",       ПараметрыОбработки.РасчетныйДокумент);
	Запрос.УстановитьПараметр("ПлательщикЕНП",           ПараметрыОбработки.ПлательщикЕНП);
	Запрос.УстановитьПараметр("ПрименяетсяАУСН",         ПараметрыОбработки.ПрименяетсяАУСН);
	Запрос.УстановитьПараметр("Аванс",                   ПараметрыОбработки.Аванс
		И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца);
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		
		СуммаНДФЛ    = 0;
		Если ПараметрыОбработки.ПлательщикЕНП
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			ТаблицаНДФЛ    = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
				ПериодРегистрацииНачало,
				ПараметрыОбработки.ПлательщикЕНП,
				ПараметрыОбработки.Аванс);
			СуммаНДФЛ      = ТаблицаНДФЛ.Итог("Сумма");
			Если ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
				ТаблицаНДФЛАванс = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
					ПериодРегистрацииНачало,
					ПараметрыОбработки.ПлательщикЕНП,
					Истина);
				СуммаНДФЛ = Макс(0, СуммаНДФЛ - ТаблицаНДФЛАванс.Итог("Сумма"));
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СуммаНДФЛ", СуммаНДФЛ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ВсеРегистраторы
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен
		|	И БольничныйЛист.ПериодРегистрации = &ПериодРегистрации
		|	И БольничныйЛист.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.ПериодРегистрации = &ПериодРегистрации
		|	И Отпуск.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплаты.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Проведен
		|	И НачислениеЗарплаты.МесяцНачисления = &ПериодРегистрации
		|	И НачислениеЗарплаты.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеРегистраторы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	ВТ_ВсеРегистраторы КАК ВТ_ВсеРегистраторы
		|ГДЕ
		|	&Условие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(НачисленияУдержанияПоСотрудникамАвансом.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ_НачисленияУдержанияПоСотрудникамАвансом
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникамАвансом.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникамАвансом.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Ссылка
		|			ИЗ
		|				ВТ_Регистраторы)
		|	И НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Зарплата к выплате"" КАК Показатель,
		|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК Сумма,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ ВТ_СводРасчетов
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Организация = &Организация
		|	И ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	ЕСТЬNULL(НачисленияУдержанияПоСотрудникам.Сумма, 0) - ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(ВТ_НачисленияУдержанияПоСотрудникамАвансом.Сумма) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_НачисленияУдержанияПоСотрудникамАвансом.Сумма
		|	КОНЕЦ,
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам,
		|	ВТ_НачисленияУдержанияПоСотрудникамАвансом КАК ВТ_НачисленияУдержанияПоСотрудникамАвансом
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Ссылка
		|			ИЗ
		|				ВТ_Регистраторы)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|	И НЕ &ПлательщикЕНП
		|	И НЕ &Аванс
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Сумма,
		|	ВТ_НачисленияУдержанияПоСотрудникамАвансом.Сумма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(&СуммаНДФЛ),
		|	2
		|ГДЕ
		|	&ПлательщикЕНП
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Аванс к выплате"",
		|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате),
		|	1
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
		|ГДЕ
		|	ЗарплатаКВыплатеАвансом.Организация = &Организация
		|	И ЗарплатаКВыплатеАвансом.Регистратор = &РасчетныйДокумент
		|	И &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|				ТОГДА НачисленияУдержанияПоСотрудникамАвансом.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникамАвансом.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникамАвансом.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Ссылка
		|			ИЗ
		|				ВТ_Регистраторы)
		|	И НЕ &ПлательщикЕНП
		|	И &Аванс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СводРасчетов.Показатель КАК Показатель,
		|	СУММА(ВТ_СводРасчетов.Сумма) КАК Сумма,
		|	ВТ_СводРасчетов.Порядок КАК Порядок
		|ИЗ
		|	ВТ_СводРасчетов КАК ВТ_СводРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СводРасчетов.Показатель,
		|	ВТ_СводРасчетов.Порядок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ВТ_ВсеРегистраторы.Ссылка = &РасчетныйДокумент");
		ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Истина");
		КонецЕсли;
		
	Иначе
		
		СуммаВзносов    = 0;
		СуммаТравматизм = 0;
		СуммаНДФЛ       = 0;
		Если ПараметрыОбработки.ПлательщикЕНП
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			ТаблицаНДФЛ    = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
				ПериодРегистрацииНачало,
				ПараметрыОбработки.ПлательщикЕНП,
				ПараметрыОбработки.Аванс);
			Если Не ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
				ТаблицаНДФЛАванс = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
					ПериодРегистрацииНачало,
					ПараметрыОбработки.ПлательщикЕНП,
					Истина);
				СуммаНДФЛ = - ТаблицаНДФЛАванс.Итог("Сумма");
			КонецЕсли;
			СуммаНДФЛ = Макс(0, СуммаНДФЛ + ТаблицаНДФЛ.Итог("Сумма"));
			Если Не ПараметрыОбработки.ПрименяетсяАУСН Тогда
				ТаблицаВзносов = УчетЗарплаты.ИсчисленныеСтраховыеВзносыЗаПериод(ПараметрыОбработки.Организация,
					ПериодРегистрацииНачало,
					ВариантВыборкиСтраховыхВзносов);
				Если ПериодРегистрацииНачало >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
					СчетУчетаТравматизм = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
					СтрокаТравматизм = ТаблицаВзносов.Найти(СчетУчетаТравматизм, "СчетУчета");
					Если СтрокаТравматизм <> Неопределено Тогда
						СуммаТравматизм = СтрокаТравматизм.Сумма;
					КонецЕсли;
				КонецЕсли;
				СуммаВзносов = ТаблицаВзносов.Итог("Сумма") - СуммаТравматизм;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СуммаВзносов",    СуммаВзносов);
		Запрос.УстановитьПараметр("СуммаТравматизм", СуммаТравматизм);
		Запрос.УстановитьПараметр("СуммаНДФЛ",       СуммаНДФЛ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""Зарплата к выплате"" КАК Показатель,
		|	СУММА(ВЫБОР
		|			КОГДА ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток < 0
		|				ТОГДА 0
		|			ИНАЧЕ ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
		|		КОНЕЦ) КАК Сумма,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ ВТ_СводРасчетов
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
		|			&ПериодОстатков,
		|			НЕ &Аванс
		|				И Организация = &Организация
		|				И ПериодВзаиморасчетов <= &ПериодРегистрации) КАК ЗарплатаКВыплатеОстатки
		|ГДЕ
		|	НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ПериодРегистрацииНачало И &ПериодРегистрацииКонец
		|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НЕ &ПлательщикЕНП
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|				ТОГДА -НачисленияУдержанияПоСотрудникамАвансом.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникамАвансом.Период МЕЖДУ &ПериодРегистрацииНачало И &ПериодРегистрацииКонец
		|	И НачисленияУдержанияПоСотрудникамАвансом.Организация = &Организация
		|	И НЕ &ПлательщикЕНП
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(&СуммаНДФЛ),
		|	2
		|ГДЕ
		|	&ПлательщикЕНП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Страховые взносы"",
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт),
		|	3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоСледующегоПериода,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			НЕ &Аванс
		|				И НЕ &ПлательщикЕНП
		|				И НЕ &ПрименяетсяАУСН
		|				И Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Страховые взносы"",
		|	СУММА(&СуммаВзносов),
		|	3
		|ГДЕ
		|	&ПлательщикЕНП
		|	И НЕ &ПрименяетсяАУСН
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Травматизм"",
		|	СУММА(&СуммаТравматизм),
		|	4
		|ГДЕ
		|	&ПлательщикЕНП
		|	И НЕ &ПрименяетсяАУСН
		|	И НЕ &Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Аванс к выплате"",
		|	СУММА(ВЫБОР
		|			КОГДА ЗарплатаКВыплатеАвансомОстатки.СуммаКВыплатеОстаток < 0
		|				ТОГДА 0
		|			ИНАЧЕ ЗарплатаКВыплатеАвансомОстатки.СуммаКВыплатеОстаток
		|		КОНЕЦ),
		|	1
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплатеАвансом.Остатки(
		|			&ПериодОстатков,
		|			&Аванс
		|				И Организация = &Организация
		|				И ПериодВзаиморасчетов <= &ПериодРегистрации) КАК ЗарплатаКВыплатеАвансомОстатки
		|ГДЕ
		|	&Аванс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|				ТОГДА НачисленияУдержанияПоСотрудникамАвансом.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникамАвансом.Период МЕЖДУ &ПериодРегистрацииНачало И &ПериодРегистрацииКонец
		|	И НачисленияУдержанияПоСотрудникамАвансом.Организация = &Организация
		|	И НЕ &ПлательщикЕНП
		|	И &Аванс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СводРасчетов.Показатель КАК Показатель,
		|	СУММА(ВТ_СводРасчетов.Сумма) КАК Сумма,
		|	ВТ_СводРасчетов.Порядок КАК Порядок
		|ИЗ
		|	ВТ_СводРасчетов КАК ВТ_СводРасчетов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_СводРасчетов.Порядок > 1
		|				ТОГДА ЕСТЬNULL(ВТ_СводРасчетов.Сумма, 0) <> 0
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СводРасчетов.Показатель,
		|	ВТ_СводРасчетов.Порядок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	КонецЕсли;
	
	ПараметрыОбработки.СводРасчетов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки)
	
	Ведомости = ПараметрыОбработки.Ведомости.СкопироватьКолонки();
	
	ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	
	СпособыВыплаты = Новый Массив;
	Если ПараметрыОбработки.Аванс Тогда
		СпособыВыплаты.Добавить(Справочники.СпособыВыплатыЗарплаты.Аванс());
	Иначе
		СпособыВыплаты.Добавить(Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию());
		СпособыВыплаты.Добавить(Справочники.СпособыВыплатыЗарплаты.ДоговорПодряда());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("МассивВедомостей",  ПараметрыОбработки.МассивВедомостей);
	Запрос.УстановитьПараметр("СпособыВыплаты",    СпособыВыплаты);
	Запрос.УстановитьПараметр("Аванс",             ПараметрыОбработки.Аванс);
	Запрос.УстановитьПараметр("УчитыватьДанныеВнешнейПрограмммы",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "УчитыватьДанныеВнешнейПрограмммы", Ложь));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ВерсияДанных КАК ВерсияДанных,
	|	ИСТИНА КАК ОплатаЧерезБанк,
	|	ЛОЖЬ КАК ОплатаЧерезКассу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты В(&СпособыВыплаты)
	|	И &УсловиеБанк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу,
	|	НЕОПРЕДЕЛЕНО,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ВерсияДанных,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВКассу.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВКассу.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СпособВыплаты В(&СпособыВыплаты)
	|	И &УсловиеКасса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	ВедомостьНаВыплатуЗарплаты.ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВедомостьНаВыплатуЗарплаты.ВидМестаВыплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект), ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВедомостьНаВыплатуЗарплаты.ВидМестаВыплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса), ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Раздатчик))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.Организация = &Организация
	|	И НЕ ВедомостьНаВыплатуЗарплаты.ПометкаУдаления
	|	И ВедомостьНаВыплатуЗарплаты.СуммаДокумента <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплаты.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НЕ &Аванс
	|	И &УчитыватьДанныеВнешнейПрограмммы
	|	И &УсловиеВедомости";
	
	Если ПараметрыОбработки.МассивВедомостей = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКасса",     "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеБанк",      "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВедомости", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКасса",     "ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В (&МассивВедомостей)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеБанк",      "ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В (&МассивВедомостей)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВедомости", "ВедомостьНаВыплатуЗарплаты.Ссылка В (&МассивВедомостей)");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НоваяСтрока = Ведомости.Добавить();
		НоваяСтрока.Ведомость              = Результат.Ссылка;
		НоваяСтрока.ВедомостьПредставление = ПредставлениеВедомости(Результат.Ссылка, ПараметрыОбработки.ПрименяетсяАУСН);
		НоваяСтрока.Сумма                  = Результат.СуммаПоДокументу;
		НоваяСтрока.ЗарплатныйПроект       = Результат.ЗарплатныйПроект;
		НоваяСтрока.ВедомостьВерсияДанных  = Результат.ВерсияДанных;
		НоваяСтрока.ОплатаЧерезКассу       = Результат.ОплатаЧерезКассу;
		НоваяСтрока.ОплатаЧерезБанк        = Результат.ОплатаЧерезБанк;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости.ВыгрузитьКолонку("Ведомость"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручение.ДокументОснование КАК Ведомость,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оплачено,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено)) КАК Состояние,
	|	ПлатежноеПоручение.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	(ПлатежноеПоручение.ДокументОснование В (&Ведомости)
	|			ИЛИ ПлатежноеПоручение.ПлатежнаяВедомость В (&Ведомости))
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Проведен,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка),
	|	РасходныйКассовыйОрдер.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда))
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость В(&Ведомости)
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка),
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость В(&Ведомости)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления";
	
	СуществующиеДокументы = Запрос.Выполнить().Выгрузить();
	ОтборВедомость = Новый Структура("Ведомость");
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		ОтборВедомость.Ведомость = СтрокаТаблицы.Ведомость;
		МассивДокументов = СуществующиеДокументы.НайтиСтроки(ОтборВедомость);
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивДокументов.Количество() = 1 Тогда
			СтрокаТаблицы.ПлатежныеДокументы              = МассивДокументов[0].ПлатежныйДокумент;
			СтрокаТаблицы.Оплачено                        = МассивДокументов[0].Оплачено;
			СтрокаТаблицы.Состояния                       = МассивДокументов[0].Состояние;
			СтрокаТаблицы.ПлатежныеДокументыПредставление =
				ПредставлениеПлатежногоДокумента(МассивДокументов[0].ПлатежныйДокумент);
			СтрокаТаблицы.ПлатежныеДокументыВерсияДанных  = МассивДокументов[0].ВерсияДанных;
		Иначе
			Оплачено = Истина;
			СписокДокументов = Новый СписокЗначений;
			Оплачены = 0;
			СостоянияДокументов = Новый СписокЗначений;
			Для Каждого ЗначениеМассива ИЗ МассивДокументов Цикл
				СписокДокументов.Добавить(ЗначениеМассива.ПлатежныйДокумент, ЗначениеМассива.ВерсияДанных);
				Если НЕ ЗначениеМассива.Оплачено Тогда
					Оплачено = Ложь;
				Иначе
					Оплачены = Оплачены + 1;
				КонецЕсли;
				СостоянияДокументов.Добавить(ЗначениеМассива.Состояние);
			КонецЦикла;
			СтрокаТаблицы.ПлатежныеДокументы = СписокДокументов;
			СтрокаТаблицы.Состояния = СостоянияДокументов;
			
			СтрокаТаблицы.ПлатежныеДокументыПредставление =
				ПредставлениеСпискаДокументов(МассивДокументов.Количество(),
					Оплачены,
					СтрокаТаблицы.ОплатаЧерезБанк);
			
			СтрокаТаблицы.Оплачено = Оплачено;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбработки.Ведомости = Ведомости;
	
КонецПроцедуры

Функция ПредставлениеСпискаДокументов(ВсегоДокументов, ОплаченоДокументов, ОплатаЧерезБанк) Экспорт
	
	Представление = "";
	
	Если ОплатаЧерезБанк Тогда
		ОписаниеДокументов = НСтр("ru = 'Платежные поручения'");
	Иначе
		ОписаниеДокументов = НСтр("ru = 'Выдача наличных'");
	КонецЕсли;
	
	Если ОплаченоДокументов > 0 И ВсегоДокументов = ОплаченоДокументов Тогда
		Представление =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 (оплачены)'"),
				ОписаниеДокументов,
				ВсегоДокументов);
	Иначе
		Представление =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 (оплачено %3)'"),
				ОписаниеДокументов,
				ВсегоДокументов,
				ОплаченоДокументов);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ПодготовитьСведенияОНачисленииЗаработнойПлаты(ПараметрыОбработки)
	
	ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("РасчетныйДокумент", ПараметрыОбработки.РасчетныйДокумент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыНачисления.Ссылка КАК Документ,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Сумма,
	|	NULL КАК Сотрудник,
	|	""Зарплата и налоги"" КАК ДокументПредставление,
	|	3 КАК Порядок,
	|	NULL КАК ДатаНачала,
	|	NULL КАК ДатаОкончания,
	|	NULL КАК ФизическоеЛицо,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	|	И НЕ НачислениеЗарплатыНачисления.Ссылка.ПерваяПоловинаМесяца
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНачисления.Ссылка,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(ОтпускНачисления.Результат),
	|	ОтпускНачисления.Сотрудник,
	|	""Отпуск"",
	|	2,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо,
	|	ОтпускНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(ОтпускНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ОтпускНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	ОтпускНачисления.Сотрудник,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо,
	|	ОтпускНачисления.Ссылка.ВерсияДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(БольничныйЛистНачисления.Результат),
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	1,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо,
	|	БольничныйЛистНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|ГДЕ
	|	БольничныйЛистНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(БольничныйЛистНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И БольничныйЛистНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо,
	|	БольничныйЛистНачисления.Ссылка.ВерсияДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка,
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.МесяцНачисления,
	|	СУММА(НачислениеЗарплатыНачисленияПоДоговорам.Результат),
	|	NULL,
	|	""Зарплата и налоги"",
	|	3,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачислениеЗарплатыНачисленияПоДоговорам
	|ГДЕ
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка,
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.МесяцНачисления,
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка.ВерсияДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ";
	
	Запрос.Выполнить();
	
	Если ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.ДокументОснование КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), Организация = &Организация) КАК ЗарплатаКВыплатеОстатки
		|ГДЕ
		|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток <> 0
		|	И ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов = &ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_Начисления.Документ КАК Документ,
	|	ВТ_Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	СУММА(ВТ_Начисления.Сумма) КАК Сумма,
	|	ВТ_Начисления.Сотрудник КАК Сотрудник,
	|	ВТ_Начисления.ДокументПредставление КАК ДокументПредставление,
	|	ВТ_Начисления.Порядок КАК Порядок,
	|	ВТ_Начисления.ДатаНачала КАК ДатаНачала,
	|	ВТ_Начисления.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Начисления.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТ_Начисления КАК ВТ_Начисления
	|ГДЕ
	|	&УсловиеРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Начисления.Порядок,
	|	ВТ_Начисления.ДатаНачала,
	|	ВТ_Начисления.ДокументПредставление,
	|	ВТ_Начисления.ДатаОкончания,
	|	ВТ_Начисления.ФизическоеЛицо,
	|	ВТ_Начисления.ВерсияДанных,
	|	ВТ_Начисления.Сотрудник,
	|	ВТ_Начисления.Документ,
	|	ВТ_Начисления.ПериодРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Документ";
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "ВТ_Начисления.Документ = &РасчетныйДокумент");
	ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "ВТ_Начисления.Документ В (Выбрать ВТ_Регистраторы.Ссылка ИЗ ВТ_Регистраторы)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыОбработки.Пересчитать Тогда
		ПараметрыОбработки.Пересчитать = Результат.Количество() <> ПараметрыОбработки.РасчетныеДокументы.Количество()
			ИЛИ Результат.Итог("Сумма") <> ПараметрыОбработки.РасчетныеДокументы.Итог("Сумма");
	КонецЕсли;
		
	ПараметрыОбработки.РасчетныеДокументы.Очистить();
	
	ЕстьНачислениеЗарплаты = Ложь;
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
			ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,СтрокаТаблицы.ФизическоеЛицо, ПериодРегистрации);
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 (%2, с %3 по %4)'"), 
													НоваяСтрока.ДокументПредставление,
													ДанныеФизическогоЛица.Представление,
													Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy"),
													Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		Иначе
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 за %2 г.'"),
													НоваяСтрока.ДокументПредставление,
													ПредставлениеПериодаРегистрации);
			ЕстьНачислениеЗарплаты = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ПараметрыОбработки.РежимВыплатыПоДокументу И Не ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		Если ЕстьНачислениеЗарплаты И ПараметрыОбработки.Пересчитать Тогда
			ДокументНачисленияОбъект = ПодготовитьДокументНачисления(ПериодРегистрации, ПараметрыОбработки.Организация);
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументов = ПараметрыОбработки.РасчетныеДокументы.НайтиСтроки(
				Новый Структура("Документ", ДокументНачисленияОбъект.Ссылка));
			МассивДокументов[0].Сумма = ДокументНачисленияОбъект.Начислено;
		ИначеЕсли НЕ ЕстьНачислениеЗарплаты Тогда
			ДокументНачисленияОбъект = ПодготовитьДокументНачисления(ПериодРегистрации, ПараметрыОбработки.Организация);
			ДокументНачисленияОбъект.Дата = КонецМесяца(ПериодРегистрации);
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
			НоваяСтрока.Документ = ДокументНачисленияОбъект.Ссылка;
			НоваяСтрока.Сумма = ДокументНачисленияОбъект.Начисления.Итог("Результат");
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Зарплата и налоги за %1 г.'"),
				ПредставлениеПериодаРегистрации);
		КонецЕсли;
		Если ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
			ПодготовитьСведенияОНачисленииАванса(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСведенияОНачисленииАванса(ПараметрыОбработки)
	
	ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("РасчетныйДокумент", ПараметрыОбработки.РасчетныйДокумент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыНачисления.Ссылка КАК Документ,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Сумма,
	|	""Аванс и налоги"" КАК ДокументПредставление,
	|	3 КАК Порядок,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	|	И НачислениеЗарплатыНачисления.Ссылка.ПерваяПоловинаМесяца
	|	И &УсловиеРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНачисления.Ссылка,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ";
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "НачислениеЗарплатыНачисления.Ссылка = &РасчетныйДокумент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыОбработки.Пересчитать Тогда
		ПараметрыОбработки.Пересчитать = Результат.Количество() <> ПараметрыОбработки.РасчетныеДокументы.Количество()
			ИЛИ Результат.Итог("Сумма") <> ПараметрыОбработки.РасчетныеДокументы.Итог("Сумма");
	КонецЕсли;
	
	ВыделитьАванс = Не ПараметрыОбработки.Аванс;
	Если Не ВыделитьАванс Тогда
		ПараметрыОбработки.РасчетныеДокументы.Очистить();
	КонецЕсли;
	
	ЕстьНачислениеЗарплаты = Ложь;
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ВыделитьАванс Тогда
			НоваяСтрока.Аванс = Истина;
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'В т.ч.аванс за %1 г.'"),
													ПредставлениеПериодаРегистрации);
		Иначе
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 за %2 г.'"),
													НоваяСтрока.ДокументПредставление,
													ПредставлениеПериодаРегистрации);
			ЕстьНачислениеЗарплаты = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ПараметрыОбработки.РежимВыплатыПоДокументу И Не ПараметрыОбработки.РежимВыплатыЗаПериод И Не ВыделитьАванс Тогда
		Если ЕстьНачислениеЗарплаты И ПараметрыОбработки.Пересчитать Тогда
			ДокументНачисленияОбъект = ПодготовитьДокументНачисления(ПериодРегистрации, ПараметрыОбработки.Организация, Истина);
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументов = ПараметрыОбработки.РасчетныеДокументы.НайтиСтроки(
				Новый Структура("Документ", ДокументНачисленияОбъект.Ссылка));
			МассивДокументов[0].Сумма = ДокументНачисленияОбъект.Начислено;
		ИначеЕсли НЕ ЕстьНачислениеЗарплаты Тогда
			ДокументНачисленияОбъект = ПодготовитьДокументНачисления(ПериодРегистрации, ПараметрыОбработки.Организация, Истина);
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
			НоваяСтрока.Документ = ДокументНачисленияОбъект.Ссылка;
			НоваяСтрока.Сумма = ДокументНачисленияОбъект.Начисления.Итог("Результат");
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(ВыделитьАванс, НСтр("ru = 'В т.ч.аванс за %1 г.'"), НСтр("ru = 'Аванс и налоги за %1 г.'")),
				ПредставлениеПериодаРегистрации);
			НоваяСтрока.Аванс = ВыделитьАванс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДокументНачисления(ПериодРегистрации, Организация, Аванс = Ложь)
	
	ДокументНачисленияСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(
			НачалоМесяца(ПериодРегистрации), Организация, , Аванс);
	Если Не ЗначениеЗаполнено(ДокументНачисленияСсылка) Тогда
		ДокументНачисленияОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		ДокументНачисленияОбъект.Организация = Организация;
		ДокументНачисленияОбъект.МесяцНачисления = НачалоМесяца(ПериодРегистрации);
	Иначе
		ДокументНачисленияОбъект = ДокументНачисленияСсылка.ПолучитьОбъект();
		ДокументНачисленияОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Возврат ДокументНачисленияОбъект;
	
КонецФункции

Процедура ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки)
	
	Если Не ПараметрыОбработки.ПрименяетсяАУСН
		И ПараметрыОбработки.ПериодРегистрации >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		Возврат;
	КонецЕсли;
	
	Платежи = ПараметрыОбработки.Платежи_НДФЛ.СкопироватьКолонки();
	
	Налог_ДоходыДоПредела    = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	Налог_ДоходыСвышеПредела = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины);
	
	СчетУчетаНДФЛ_ДоходыДоПредела    = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог_ДоходыДоПредела, ПараметрыОбработки.ПериодРегистрации);
	СчетУчетаНДФЛ_ДоходыСвышеПредела = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог_ДоходыСвышеПредела, ПараметрыОбработки.ПериодРегистрации);
	Если НЕ ЗначениеЗаполнено(СчетУчетаНДФЛ_ДоходыДоПредела)
		ИЛИ НЕ ЗначениеЗаполнено(СчетУчетаНДФЛ_ДоходыСвышеПредела) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																			ПараметрыОбработки.ПериодРегистрации);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц,
																			ПараметрыОбработки.ПериодРегистрации);
	
	КБК_ДоходыДоПредела    = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог_ДоходыДоПредела, , ПараметрыОбработки.ПериодРегистрации);
	КБК_ДоходыСвышеПредела = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог_ДоходыСвышеПредела, , ПараметрыОбработки.ПериодРегистрации);
	
	Если ПараметрыОбработки.ПлательщикЕНП
		И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		Или (ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца) Тогда
		
		ТаблицаНалоговВзносов = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
			НачалоПериода,
			ПараметрыОбработки.ПлательщикЕНП,
			ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца);
		
	Иначе
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",                      ПараметрыОбработки.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",                    НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",                     КонецПериода);
		Запрос.УстановитьПараметр("Налог_ДоходыДоПредела",            Налог_ДоходыДоПредела);
		Запрос.УстановитьПараметр("Налог_ДоходыСвышеПредела",         Налог_ДоходыСвышеПредела);
		Запрос.УстановитьПараметр("СчетУчетаНДФЛ_ДоходыДоПредела",    СчетУчетаНДФЛ_ДоходыДоПредела);
		Запрос.УстановитьПараметр("СчетУчетаНДФЛ_ДоходыСвышеПредела", СчетУчетаНДФЛ_ДоходыСвышеПредела);
		Запрос.УстановитьПараметр("КБК_ДоходыДоПредела",              КБК_ДоходыДоПредела);
		Запрос.УстановитьПараметр("КБК_ДоходыСвышеПредела",           КБК_ДоходыСвышеПредела);
		Запрос.УстановитьПараметр("ВидНалоговогоОбязательства",       Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Запрос.УстановитьПараметр("РасчетныйДокумент",                ПараметрыОбработки.РасчетныйДокумент);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		
		ТекстДопУсловия = "Истина";
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БольничныйЛист.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ВсеРегистраторы
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|ГДЕ
			|	БольничныйЛист.Проведен
			|	И БольничныйЛист.ПериодРегистрации = &НачалоПериода
			|	И БольничныйЛист.Организация = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Отпуск.Ссылка
			|ИЗ
			|	Документ.Отпуск КАК Отпуск
			|ГДЕ
			|	Отпуск.Проведен
			|	И Отпуск.ПериодРегистрации = &НачалоПериода
			|	И Отпуск.Организация = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НачислениеЗарплаты.Ссылка
			|ИЗ
			|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
			|ГДЕ
			|	НачислениеЗарплаты.Проведен
			|	И НачислениеЗарплаты.МесяцНачисления = &НачалоПериода
			|	И НачислениеЗарплаты.Организация = &Организация
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВсеРегистраторы.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_Регистраторы
			|ИЗ
			|	ВТ_ВсеРегистраторы КАК ВТ_ВсеРегистраторы
			|ГДЕ
			|	&Условие1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			
			Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "ВТ_ВсеРегистраторы.Ссылка = &РасчетныйДокумент");
			ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "Истина");
			КонецЕсли;
			
			Запрос.Выполнить();
			
			ТекстДопУсловия = "#ИмяРегистра.Регистратор В
						|			(ВЫБРАТЬ
						|				ВТ_Регистраторы.Ссылка
						|			ИЗ
						|				ВТ_Регистраторы)";
			
		КонецЕсли;
		
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			
			НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыДоПредела КАК СчетУчета,
			|	&КБК_ДоходыДоПредела КАК КБК,
			|	&Налог_ДоходыДоПредела КАК Налог,
			|	Ложь КАК НалогСПревышения,
			|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
			|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
			|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана,
			|	РегистрацииВНалоговомОргане.КПП КАК КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Счет = &СчетУчетаНДФЛ_ДоходыДоПредела,
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = &ВидНалоговогоОбязательства,
			|			,
			|			) КАК ХозрасчетныйОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|		ПО ХозрасчетныйОбороты.Субконто2 = РегистрацииВНалоговомОргане.Ссылка
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
			|	И &ДопУсловие
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрацииВНалоговомОргане.Ссылка,
			|	РегистрацииВНалоговомОргане.Код,
			|	РегистрацииВНалоговомОргане.КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыСвышеПредела,
			|	&КБК_ДоходыСвышеПредела,
			|	&Налог_ДоходыСвышеПредела,
			|	Истина,
			|	&ВидНалоговогоОбязательства,
			|	РегистрацииВНалоговомОргане.Ссылка,
			|	РегистрацииВНалоговомОргане.Код,
			|	РегистрацииВНалоговомОргане.КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт)
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Счет = &СчетУчетаНДФЛ_ДоходыСвышеПредела,
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = &ВидНалоговогоОбязательства,
			|			,
			|			) КАК ХозрасчетныйОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|		ПО ХозрасчетныйОбороты.Субконто2 = РегистрацииВНалоговомОргане.Ссылка
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
			|	И &ДопУсловие
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрацииВНалоговомОргане.Ссылка,
			|	РегистрацииВНалоговомОргане.Код,
			|	РегистрацииВНалоговомОргане.КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО
			|
			|УПОРЯДОЧИТЬ ПО
			|	КодПоОКТМО,
			|	КПП,
			|	КодНалоговогоОргана,
			|	РегистрацияВНалоговомОргане";
			
			ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "ХозрасчетныйОбороты");
			
			
		ИначеЕсли БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Тогда
			
			Запрос.УстановитьПараметр("МесяцНалоговогоПериода",  КонецДня(КонецПериода));
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыДоПредела КАК СчетУчета,
			|	&КБК_ДоходыДоПредела КАК КБК,
			|	&Налог_ДоходыДоПредела КАК Налог,
			|	ЛОЖЬ КАК НалогСПревышения,
			|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП КАК КПП,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
			|	СУММА(РасчетыПоНДФЛ.СуммаПриход) КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Организация = &Организация
			|				И КОНЕЦПЕРИОДА(МесяцНалоговогоПериода, МЕСЯЦ) = &МесяцНалоговогоПериода) КАК РасчетыПоНДФЛ
			|ГДЕ
			|	&ДопУсловие
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыСвышеПредела,
			|	&КБК_ДоходыСвышеПредела,
			|	&Налог_ДоходыСвышеПредела,
			|	ИСТИНА,
			|	&ВидНалоговогоОбязательства,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО,
			|	СУММА(РасчетыПоНДФЛ.СуммаСПревышенияПриход)
			|ИЗ
			|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Организация = &Организация
			|				И КОНЕЦПЕРИОДА(МесяцНалоговогоПериода, МЕСЯЦ) = &МесяцНалоговогоПериода) КАК РасчетыПоНДФЛ
			|ГДЕ
			|	&ДопУсловие
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП,
			|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО
			|
			|УПОРЯДОЧИТЬ ПО
			|	КодПоОКТМО,
			|	КПП,
			|	КодНалоговогоОргана,
			|	РегистрацияВНалоговомОргане";
			
			ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "РасчетыПоНДФЛ");
			
		Иначе
			
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыДоПредела КАК СчетУчета,
			|	&КБК_ДоходыДоПредела КАК КБК,
			|	&Налог_ДоходыДоПредела КАК Налог,
			|	Ложь КАК НалогСПревышения,
			|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
			|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
			|	"""" КАК КодНалоговогоОргана,
			|	"""" КАК КПП,
			|	"""" КАК КодПоОКТМО,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Счет = &СчетУчетаНДФЛ_ДоходыДоПредела,
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = &ВидНалоговогоОбязательства,
			|			,
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
			|	И &ДопУсловие
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&СчетУчетаНДФЛ_ДоходыСвышеПредела,
			|	&КБК_ДоходыСвышеПредела,
			|	&Налог_ДоходыСвышеПредела,
			|	Истина,
			|	&ВидНалоговогоОбязательства,
			|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка),
			|	"""",
			|	"""",
			|	"""",
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт)
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			Счет = &СчетУчетаНДФЛ_ДоходыСвышеПредела,
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = &ВидНалоговогоОбязательства,
			|			,
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
			|	И &ДопУсловие";
			
			ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "ХозрасчетныйОбороты");
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", ТекстДопУсловия);
		Запрос.Текст = ТекстЗапроса;
		
		ТаблицаНалоговВзносов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыОбработки.Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПараметрыОбработки.ПериодРегистрации);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Организация, "ЮридическоеФизическоеЛицо") =
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		КППОрганизации      = "0";
	Иначе
		КППОрганизации      = Справочники.Организации.КППНаДату(ПараметрыОбработки.Организация, КонецПериода, Истина);
	КонецЕсли;
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		ПараметрыОбработки.Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Истина);
		
	РеквизитыЕдиногоНалоговогоПлатежа =
		ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ПараметрыОбработки.Организация,
			КонецМесяца(ПараметрыОбработки.ПериодРегистрации));
		
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговВзносов Цикл
		
		СтрокаНалога = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТаблицы);
		
		СтрокаНалога.ОКАТО = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоОКТМО), СтрокаТаблицы.КодПоОКТМО, КодТерритории);
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(СтрокаНалога.ОКАТО, ПараметрыОбработки.ПериодРегистрации);
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КПП) Тогда
			СтрокаНалога.КПП = КППОрганизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КодНалоговогоОргана) Тогда
			СтрокаНалога.КодНалоговогоОргана = КодНалоговогоОргана;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаНалога.Налог) И ЗначениеЗаполнено(СтрокаНалога.КБК) Тогда
			Если СтрокаНалога.КБК = КБК_ДоходыДоПредела Тогда
				СтрокаНалога.Налог     = Налог_ДоходыДоПредела;
				СтрокаНалога.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
			ИначеЕсли СтрокаНалога.КБК = КБК_ДоходыСвышеПредела Тогда
				СтрокаНалога.Налог = Налог_ДоходыСвышеПредела;
				СтрокаНалога.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивПравил = Правила("НДФЛ_Агент_Уплата", ПараметрыОбработки.ПериодРегистрации);
	
	ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
		Платежи,
		ПараметрыОбработки.ПериодРегистрации,
		ПараметрыОбработки.Организация,
		ПараметрыОбработки.РежимВыплатыПоДокументу
			Или (ПараметрыОбработки.Аванс
				И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца),
				ПараметрыОбработки.ПлательщикЕНП);
	
	Если ПараметрыОбработки.ПлательщикЕНП Тогда
		
		ОбработатьТаблицуПлатежейЕНП(Платежи, МассивПравил, ПараметрыОбработки, РеквизитыЕдиногоНалоговогоПлатежа);
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			ПроверяемыйВидНалога = Перечисления.ВидыНалогов.НДФЛ;
		ИначеЕсли УчетЗарплаты.ПрименяетсяЕдиныйТарифСтраховыхВзносов(ПараметрыОбработки.ПериодРегистрации) Тогда
			ПроверяемыйВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносыЕдиныйТариф;
		Иначе
			ПроверяемыйВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
		КонецЕсли;
		
		СрокУплатыНалога = '00010101';
		ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			ПараметрыОбработки.Организация,
			ПроверяемыйВидНалога,
			КонецМесяца(ПараметрыОбработки.ПериодРегистрации),
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
		Если ПорядокУплаты <> Неопределено Тогда
			СрокУплатыНалога = ПорядокУплаты.Срок;
		КонецЕсли;
		
		ОпределитьТекущиеПравила(ПараметрыОбработки);
		ПодготовитьСведенияОбУведомлениях(ПараметрыОбработки);
		
	КонецЕсли;
	
	Если Не ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца Тогда
		
		ПлатежиАванс = Платежи.СкопироватьКолонки();
		ТаблицаНалоговВзносов = УчетЗарплаты.ИсчисленныйНДФЛЗаПериод(ПараметрыОбработки.Организация,
			НачалоПериода,
			ПараметрыОбработки.ПлательщикЕНП,
			Истина);
			
		Для Каждого СтрокаТаблицы Из ТаблицаНалоговВзносов Цикл
			
			СтрокаНалога = ПлатежиАванс.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТаблицы);
			
			СтрокаНалога.ОКАТО = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоОКТМО), СтрокаТаблицы.КодПоОКТМО, КодТерритории);
			ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(СтрокаНалога.ОКАТО, ПараметрыОбработки.ПериодРегистрации);
			Если НЕ ЗначениеЗаполнено(СтрокаНалога.КПП) Тогда
				СтрокаНалога.КПП = КППОрганизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаНалога.КодНалоговогоОргана) Тогда
				СтрокаНалога.КодНалоговогоОргана = КодНалоговогоОргана;
			КонецЕсли;
			
		КонецЦикла;
		
		ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
			ПлатежиАванс,
			ПараметрыОбработки.ПериодРегистрации,
			ПараметрыОбработки.Организация,
			Истина,
			ПараметрыОбработки.ПлательщикЕНП);
		
		Если ПараметрыОбработки.ПлательщикЕНП Тогда
			ОбработатьТаблицуПлатежейЕНП(ПлатежиАванс, МассивПравил, ПараметрыОбработки, РеквизитыЕдиногоНалоговогоПлатежа);
		КонецЕсли;
			
		МассивСтрокКУдалению = Новый Массив;
		ПлатежиАванс.Свернуть("ПлатежноеПоручение", "Сумма");
		Для Каждого СтрокаТаблицы Из ПлатежиАванс Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПлатежноеПоручение) Тогда
				МассивСтрок = Платежи.НайтиСтроки(Новый Структура("ПлатежноеПоручение", СтрокаТаблицы.ПлатежноеПоручение));
				Если МассивСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				СуммаАванса = СтрокаТаблицы.Сумма;
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					Если СуммаАванса > 0 Тогда
						СуммаПогашенная = Мин(СтрокаМассива.Сумма, СуммаАванса);
						СтрокаМассива.Сумма = СтрокаМассива.Сумма - СуммаПогашенная;
						СуммаАванса = Макс(0, СуммаАванса - СуммаПогашенная);
						Если СтрокаМассива.Сумма = 0 Тогда
							МассивСтрокКУдалению.Добавить(СтрокаМассива);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
			Платежи.Удалить(СтрокаМассива);
		КонецЦикла;
			
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("Платежи_НДФЛ", Платежи);
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоВзносам(ПараметрыОбработки, ВариантВыборкиСтраховыхВзносов)
	
	Если ПараметрыОбработки.ПрименяетсяАУСН Тогда
		// При АУСН страховые взносы с ФОТ не уплачиваются.
		Возврат;
	КонецЕсли;
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	Платежи = ПараметрыОбработки.Платежи_Взносы.СкопироватьКолонки();
	
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	КонецМесяца(ПараметрыОбработки.ПериодРегистрации)+1);
	НачалоТекущегоПериода   = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	КонецТекущегоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	
	ПараметрыСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "ПараметрыСтраховыхВзносов");
	СчетУчетаТравматизм = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
	Если ПараметрыСтраховыхВзносов = Неопределено Тогда
		ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
			НачалоГода(ПараметрыОбработки.ПериодРегистрации));
		Если ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносы Тогда
			СтрокаТравматизм = ПараметрыСтраховыхВзносов.Найти(СчетУчетаТравматизм, "СчетУчета");
			Если СтрокаТравматизм <> Неопределено Тогда
				// Изменяем копию закешированного значения.
				СтрокаТравматизмИндекс = ПараметрыСтраховыхВзносов.Индекс(СтрокаТравматизм);
				ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов.Скопировать();
				ПараметрыСтраховыхВзносов.Удалить(СтрокаТравматизмИндекс);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОбработки.Вставить("ПараметрыСтраховыхВзносов", ПараметрыСтраховыхВзносов);
	КонецЕсли;
	НовыеПараметрыСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "НовыеПараметрыСтраховыхВзносов");
	Если НовыеПараметрыСтраховыхВзносов = Неопределено Тогда
		Если Месяц(ПараметрыОбработки.ПериодРегистрации) = 12 Тогда
			НовыеПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
				НачалоГода(ДобавитьМесяц(ПараметрыОбработки.ПериодРегистрации, 1)));
			Если ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносы Тогда
				СтрокаТравматизм = НовыеПараметрыСтраховыхВзносов.Найти(СчетУчетаТравматизм, "СчетУчета");
				Если СтрокаТравматизм <> Неопределено Тогда
					// Изменяем копию закешированного значения.
					СтрокаТравматизмИндекс = НовыеПараметрыСтраховыхВзносов.Индекс(СтрокаТравматизм);
					НовыеПараметрыСтраховыхВзносов = НовыеПараметрыСтраховыхВзносов.Скопировать();
					НовыеПараметрыСтраховыхВзносов.Удалить(СтрокаТравматизмИндекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НовыеПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов.Скопировать();
		КонецЕсли;
		ПараметрыОбработки.Вставить("НовыеПараметрыСтраховыхВзносов", НовыеПараметрыСтраховыхВзносов);
	КонецЕсли;
	
	ПереходныйПериод = КонецТекущегоПериода = КонецГода(КонецТекущегоПериода)
		И ОбщегоНазначения.ТекущаяДатаПользователя() > КонецГода(КонецТекущегоПериода);
	
	Если Платежи.Колонки.Найти("ПереходныйКБК") = Неопределено Тогда
		Платежи.Колонки.Добавить("ПереходныйКБК", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	КонецЕсли;
	
	ИспользуетсяЕдиныйТариф = УчетЗарплаты.ПрименяетсяЕдиныйТарифСтраховыхВзносов(ПараметрыОбработки.ПериодРегистрации);
	
	Если ПараметрыОбработки.ПлательщикЕНП
		И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТаблицаВзносов = УчетЗарплаты.ИсчисленныеСтраховыеВзносыЗаПериод(ПараметрыОбработки.Организация,
			НачалоТекущегоПериода,
			ВариантВыборкиСтраховыхВзносов);
		
	Иначе
		
		СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",             ПараметрыОбработки.Организация);
		Запрос.УстановитьПараметр("НачалоСледующегоПериода", НачалоСледующегоПериода);
		Запрос.УстановитьПараметр("НачалоПериода",           НачалоТекущегоПериода);
		Запрос.УстановитьПараметр("КонецПериода",            КонецТекущегоПериода);
		
		ЗначенияСубконто = Новый Массив;
		ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
		
		// Для получения остатков.
		Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", СчетаСтраховыхВзносов);
		Запрос.УстановитьПараметр("ВидСубконто",           ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		Запрос.УстановитьПараметр("ЗначенияСубконто",      ЗначенияСубконто);
		Запрос.УстановитьПараметр("СчетИсключение",        ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоСледующегоПериода,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.СуммаОборотДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто),
		|			КорСчет = &СчетИсключение,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
		|	ХозрасчетныйОбороты.Субконто1 КАК ВидНалоговогоОбязательства,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто),
		|			,
		|			) КАК ХозрасчетныйОбороты";
		
		Результат     = Запрос.ВыполнитьПакет();
		ТаблицаВзносов = Результат[0].Выгрузить();
		Если ТаблицаВзносов.Количество() = 0 Тогда
			// возможно оформлено месяц в месяц
			ТаблицаВзносов   = Результат[1].Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыОбработки.Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПараметрыОбработки.ПериодРегистрации);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Организация, "ЮридическоеФизическоеЛицо") =
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		КППОрганизации      = "0";
	Иначе
		КППОрганизации      = Справочники.Организации.КППНаДату(ПараметрыОбработки.Организация, КонецТекущегоПериода, Истина);
	КонецЕсли;
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	РеквизитыЕдиногоНалоговогоПлатежа =
		ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ПараметрыОбработки.Организация,
			КонецМесяца(ПараметрыОбработки.ПериодРегистрации));
	
	Для Каждого СтрокаТаблицы Из ТаблицаВзносов Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, СтрокаТаблицы);
		Платеж.Организация = ПараметрыОбработки.Организация;
		Платеж.ОКАТО       = КодТерритории;
		Платеж.КПП         = КППОрганизации;
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		Если ПереходныйПериод Тогда
			РеквизитыПоСчету = НовыеПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
			Если РеквизитыПоСчету.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
			КонецЕсли;
			РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
			Если РеквизитыПоСчету.Количество() <> 0 Тогда
				Платеж.ПереходныйКБК = РеквизитыПоСчету[0].КБК;
			КонецЕсли;
		Иначе
			РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
			Если РеквизитыПоСчету.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
			КонецЕсли;
		КонецЕсли;
		Платеж.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж.Налог, "ВидНалога");
		ШаблонНаименования    = НСтр("ru = '%1%2:'");
		Если Платеж.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			НаименованиеНалога = НСтр("ru = 'Травматизм'");
		Иначе
			НаименованиеНалога    = Строка(Платеж.Налог);
		КонецЕсли;
		УточнениеНаименования = "";
		Если СтрокаТаблицы.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Платеж.Налог);
		Если ПравилаЗаполнения.СохранятьКодТерриторииПриЗаписи Тогда
			КлючНастройкиУплатыНалога = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
				Платеж.Налог, Платеж.Организация, Неопределено);
			Если ЗначениеЗаполнено(КлючНастройкиУплатыНалога) Тогда
				ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
					КлючНастройкиУплатыНалога, ПараметрыОбработки.ПериодРегистрации, Платеж.Организация);
				Если ЗначениеЗаполнено(ДанныеЗаполнения) И ДанныеЗаполнения.Свойство("КодОКАТО") И ЗначениеЗаполнено(ДанныеЗаполнения.КодОКАТО) Тогда
					ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(
						ДанныеЗаполнения.КодОКАТО, ПараметрыОбработки.ПериодРегистрации);
					Платеж.ОКАТО = ДанныеЗаполнения.КодОКАТО;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(ПараметрыОбработки.Организация,
																					ВидГосударственногоОргана,
																					Истина);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
		
	КонецЦикла;
	
	МассивПравил = Правила("СтраховыеВзносы", ПараметрыОбработки.ПериодРегистрации);
	
	ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
												Платежи,
												ПараметрыОбработки.ПериодРегистрации,
												ПараметрыОбработки.Организация,
												,
												ПараметрыОбработки.ПлательщикЕНП);
												
	
	Если ПараметрыОбработки.ПлательщикЕНП Тогда
		
		ДополнитьТаблицуПлатежей(ПараметрыОбработки, Платежи);
		
		Для Каждого Платеж Из Платежи Цикл
			Если Платеж.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
				Если ИспользуетсяЕдиныйТариф Тогда
					Платеж.Наименование = НСтр("ru = 'Травматизм'");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если Не Платеж.Оплачено Тогда
				ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
			КонецЕсли;
			Если ИспользуетсяЕдиныйТариф Тогда
				Платеж.Наименование = НСтр("ru = 'Страховые взносы по единому тарифу'");
			Иначе
				Платеж.Наименование = НСтр("ru = 'Страховые взносы (ПФР, ФОМС, ФСС), НДФЛ'");
			КонецЕсли;
			Платеж.ПереходныйКБК = "";
		КонецЦикла;
		
		КолонкиСвертки      = "";
		КолонкиСуммирования = "";
		Для Каждого Колонка Из Платежи.Колонки Цикл
			Если Колонка.Имя = "Сумма" Или Колонка.Имя = "СуммаОплачено" Тогда
				КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования = "", КолонкиСуммирования, ",") + Колонка.Имя;
			ИначеЕсли Колонка.Имя = "Индекс" Тогда
				Продолжить;
			Иначе
				КолонкиСвертки = КолонкиСвертки + ?(КолонкиСвертки = "", КолонкиСвертки, ",") + Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		Платежи.Свернуть(КолонкиСвертки, КолонкиСуммирования);
		
		ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
													Платежи,
													ПараметрыОбработки.ПериодРегистрации,
													ПараметрыОбработки.Организация,
													,
													ПараметрыОбработки.ПлательщикЕНП);
													
		Если УчетЗарплаты.ПрименяетсяЕдиныйТарифСтраховыхВзносов(КонецТекущегоПериода) Тогда
			ПроверяемыйВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносыЕдиныйТариф;
		Иначе
			ПроверяемыйВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
		КонецЕсли;
		
		СрокУплатыНалога = '00010101';
		ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			ПараметрыОбработки.Организация,
			ПроверяемыйВидНалога,
			КонецТекущегоПериода,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
		Если ПорядокУплаты <> Неопределено Тогда
			СрокУплатыНалога = ПорядокУплаты.Срок;
		КонецЕсли;
		ОпределитьТекущиеПравила(ПараметрыОбработки);
		ПодготовитьСведенияОбУведомлениях(ПараметрыОбработки);
		
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("Платежи_Взносы", Платежи);
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоРасчетамВзносов(ПараметрыОбработки)
	
	Если Не ПараметрыОбработки.ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыборкиСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ВариантыВыборкиСтраховыхВзносов();
	
	РасчетВзносы = ПараметрыОбработки.РасчетВзносы.СкопироватьКолонки();
	
	ПараметрыСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "ПараметрыСтраховыхВзносов");
	Если ПараметрыСтраховыхВзносов = Неопределено Тогда
		ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов(
			НачалоГода(ПараметрыОбработки.ПериодРегистрации));
		ПараметрыОбработки.Вставить("ПараметрыСтраховыхВзносов", ПараметрыСтраховыхВзносов);
	КонецЕсли;
	
	НачалоТекущегоПериода   = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	КонецТекущегоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТаблицаВзносов = УчетЗарплаты.ИсчисленныеСтраховыеВзносыЗаПериод(ПараметрыОбработки.Организация,
			НачалоТекущегоПериода,
			ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносыТравматизм);
		
		КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыОбработки.Организация);
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПараметрыОбработки.ПериодРегистрации);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Организация, "ЮридическоеФизическоеЛицо") =
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			КППОрганизации      = "0";
		Иначе
			КППОрганизации      = Справочники.Организации.КППНаДату(ПараметрыОбработки.Организация, КонецТекущегоПериода, Истина);
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаВзносов Цикл
			Платеж = РасчетВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(Платеж, СтрокаТаблицы);
			Платеж.Организация = ПараметрыОбработки.Организация;
			Платеж.ОКАТО       = КодТерритории;
			Платеж.КПП         = КППОрганизации;
			СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
			РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
			Если РеквизитыПоСчету.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("РасчетВзносы", РасчетВзносы);
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоРасчетамНДФЛ(ПараметрыОбработки)
	
	Если Не ПараметрыОбработки.ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНДФЛ = ВыполнениеЗадачБухгалтера.ПараметрыНДФЛ(ПараметрыОбработки.ПериодРегистрации);
	
	ТаблицаНДФЛ = УчетЗарплаты.УдержанныйНДФЛЗаПериод(ПараметрыОбработки.Организация, ПараметрыОбработки.ПериодРегистрации);
	
	ПараметрыОбработки.Вставить("РасчетНДФЛ", ТаблицаНДФЛ);
	
КонецПроцедуры

Функция ПредставлениеВедомости(ДокументСсылка, ПрименяетсяАУСН)
	
	ПредставлениеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата");
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента          = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		ПредставлениеДокумента = НСтр("ru = 'Платежная ведомость'");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ПредставлениеДокумента = ?(ПрименяетсяАУСН,
			НСтр("ru = 'Ведомость в банк'"),
			НСтр("ru = 'Реестр перечислений'"));
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента);

КонецФункции

Процедура ОпределитьТекущиеПравила(ПараметрыОбработки)
	
	ПериодРегистрации = ПараметрыОбработки.ПериодРегистрации;
	Организация       = ПараметрыОбработки.Организация;
	
	Правило_НДФЛ   = ТекущееПравилоЗадачи("НДФЛ_Агент_Уплата", "НДФЛ_Уплата", , ПериодРегистрации);
	Правило_Взносы = ТекущееПравилоЗадачи("СтраховыеВзносы", "_УплатаСтраховыеВзносы", "Допвзносы", ПериодРегистрации);
	Если ПериодРегистрации < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		Если УчетнаяПолитика.ПлательщикЕНП(Организация, ПериодРегистрации) Тогда
			Правило_Уведомление = ТекущееПравилоЗадачи("СтраховыеВзносы", "_Уведомление", , ПериодРегистрации);
		КонецЕсли;
	Иначе
		Если Правило_Взносы.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			Правило_Уведомление = ПравилоУведомленияПоПравилуУплаты(Правило_Взносы, Организация, ПериодРегистрации);
		ИначеЕсли Правило_Взносы.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
			Правило_Уведомление = ВыполнениеЗадачБухгалтера.ПравилоУведомленияПоПравилуОтчета(Правило_Взносы, Организация, ПериодРегистрации);
		КонецЕсли;
	КонецЕсли;
	ПараметрыОбработки.Вставить("Правило_НДФЛ",        Правило_НДФЛ);
	ПараметрыОбработки.Вставить("Правило_Взносы",      Правило_Взносы);
	ПараметрыОбработки.Вставить("Правило_Уведомление", Правило_Уведомление);
	
КонецПроцедуры

Процедура ПодготовитьСведенияОбУведомлениях(ПараметрыОбработки)
	
	Правила = Новый Массив;
	Правила.Добавить(ПараметрыОбработки.Правило_Взносы);
	Правила.Добавить(ПараметрыОбработки.Правило_НДФЛ);
	Правила.Добавить(ПараметрыОбработки.Правило_Уведомление);
	
	Уведомления = ПолучитьУведомления(ПараметрыОбработки.Организация, Правила, ПараметрыОбработки.ПериодРегистрации);
	
	ПараметрыОбработки.Вставить("Уведомления", Уведомления);
	
КонецПроцедуры

Функция ПолучитьУведомления(Организация, МассивПравилУведомлений, ПериодСобытия) Экспорт
	
	ТаблицаУведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Организация,
		ПериодСобытия);
	
	Возврат ТаблицаУведомления;
	
КонецФункции

Функция ПравилоУведомленияПоПравилуУплаты(ПравилоУплаты, Организация, ПериодОтчета) Экспорт
	
	// Ищем задачу по представлению этого отчета, а из нее - подходящее правило
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача",       ПравилоУплаты.Владелец);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаОтчета
	|		ПО ЗадачиБухгалтера.Правило = ПравилаОтчета.Ссылка
	|ГДЕ
	|	ПравилаОтчета.Владелец = &Задача
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодОтчета
	|	И ПравилаОтчета.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаЗадач = Результат.Выгрузить();
		ПравилоУведомления = ВыполнениеЗадачБухгалтера.ПодобратьРелевантноеПравилоОтчета(ТаблицаЗадач.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоУведомления;
	КонецЕсли;
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	// Задачи за базовый период еще могут быть не созданы
	ОтборПравил.ИмяЗадачи       = ПравилоУплаты.Владелец.Код;
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
	// Принцип составления расписания: в течение периода обзора период должен завершиться.
	ОтборПравил.НачалоИнтервала = ПериодОтчета;
	ОтборПравил.КонецИнтервала  = КонецДня(ПериодОтчета) + 1;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Если ЗначениеЗаполнено(Расписание) Тогда
		Расписание.Сортировать("РегистрацияВНалоговомОргане, Правило", Новый СравнениеЗначений);
		ПравилоОтчета = ВыполнениеЗадачБухгалтера.ПодобратьРелевантноеПравилоОтчета(Расписание.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоОтчета;
	КонецЕсли;
	
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	
КонецФункции

Процедура ДополнитьТаблицуПлатежей(ПараметрыОбработки, Платежи)
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	Если Не ПараметрыОбработки.Свойство("Платежи_НДФЛ") Тогда
		ПараметрыОбработки.Вставить("Платежи_НДФЛ", Платежи_НДФЛ());
		ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
	КонецЕсли;
	Если ПараметрыОбработки.Свойство("Платежи_НДФЛ") Тогда
		Для Каждого Платеж Из ПараметрыОбработки.Платежи_НДФЛ Цикл
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
			НоваяСтрока.Организация = ПараметрыОбработки.Организация;
			НоваяСтрока.Дата = ?(ЗначениеЗаполнено(НоваяСтрока.Дата), НоваяСтрока.Дата, КонецГода(ДатаСегодня)+1);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьТаблицуПлатежейЕНП(Платежи, МассивПравил, ПараметрыОбработки, РеквизитыЕдиногоНалоговогоПлатежа)
	
	Для Каждого Платеж Из Платежи Цикл
		Если Платеж.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			Продолжить;
		КонецЕсли;
		Если Не Платеж.Оплачено Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
		КонецЕсли;
		Платеж.Наименование = НСтр("ru = 'Налог'");
	КонецЦикла;
	
	КолонкиСвертки      = "";
	КолонкиСуммирования = "";
	Для Каждого Колонка Из Платежи.Колонки Цикл
		Если Колонка.Имя = "Сумма" Или Колонка.Имя = "СуммаОплачено" Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования = "", КолонкиСуммирования, ",") + Колонка.Имя;
		ИначеЕсли Колонка.Имя = "Индекс" Тогда
			Продолжить;
		Иначе
			КолонкиСвертки = КолонкиСвертки + ?(КолонкиСвертки = "", КолонкиСвертки, ",") + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	Платежи.Свернуть(КолонкиСвертки, КолонкиСуммирования);
	
	ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
												Платежи,
												ПараметрыОбработки.ПериодРегистрации,
												ПараметрыОбработки.Организация,
												ПараметрыОбработки.РежимВыплатыПоДокументу
													Или (ПараметрыОбработки.Аванс
														И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца),
														ПараметрыОбработки.ПлательщикЕНП);
КонецПроцедуры
#КонецОбласти

#Область ГенераторКомплектовДокументов

Процедура СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОбработки.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|	И НЕ ЗарплатныеПроекты.ПометкаУдаления";
	
	ЗарплатныеПроекты = Запрос.Выполнить().Выгрузить();
	
	ВидыМестВыплатыНаличные = Перечисления.ВидыМестВыплатыЗарплаты.Наличные();
	Для Каждого ВидМестаВыплаты ИЗ ВидыМестВыплатыНаличные Цикл
		ДобавитьВедомость(ВидМестаВыплаты, , , Ложь,   ПараметрыОбработки);
		ДобавитьВедомость(ВидМестаВыплаты, , , Истина, ПараметрыОбработки);
	КонецЦикла;
	
	ВидыДоходовИсполнительногоПроизводства = Новый Массив;
	ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения);
	Если НЕ ПараметрыОбработки.Аванс Тогда
		ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий);
		ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые);
		ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые);
	КонецЕсли;
	
	ВидыМестВыплатыБезналичные = Перечисления.ВидыМестВыплатыЗарплаты.Безналичные();
	Для Каждого ВидМестаВыплаты ИЗ ВидыМестВыплатыБезналичные Цикл
		Для Каждого ВидДоходаИсполнительногоПроизводства ИЗ ВидыДоходовИсполнительногоПроизводства Цикл
			Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
				// Для зарплатных проектов
				Для Каждого ЗарплатныйПроект ИЗ ЗарплатныеПроекты Цикл
					ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект.Ссылка, ВидДоходаИсполнительногоПроизводства, Ложь,   ПараметрыОбработки);
					ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект.Ссылка, ВидДоходаИсполнительногоПроизводства, Истина, ПараметрыОбработки);
				КонецЦикла;
			Иначе
				// Для личных счетов
				ДобавитьВедомость(ВидМестаВыплаты, , ВидДоходаИсполнительногоПроизводства, Ложь,   ПараметрыОбработки);
				ДобавитьВедомость(ВидМестаВыплаты, , ВидДоходаИсполнительногоПроизводства, Истина, ПараметрыОбработки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СформироватьДокументыОплатыВедомостей(ПараметрыОбработки);
	
КонецПроцедуры

Процедура ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект = Неопределено, ВидДоходаИсполнительногоПроизводства = Неопределено, ДоговорыГПХ, ПараметрыОбработки)
	
	ДокументМенеджер = ВедомостьНаВыплатуЗарплаты.МенеджерДокументаПоВидуМестаВыплаты(ВидМестаВыплаты);
	Если ДокументМенеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВедомостьНаВыплатуЗарплатыБазовый.ДанныеЗаполненияВедомости();
	ДанныеЗаполнения.Шапка.Организация       = ПараметрыОбработки.Организация;
	ДанныеЗаполнения.Шапка.Дата              = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДанныеЗаполнения.Шапка.ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	ДанныеЗаполнения.Шапка.Вставить("ВидМестаВыплаты", ВидМестаВыплаты);
	Если НЕ ПараметрыОбработки.Аванс Тогда
		Если ДоговорыГПХ Тогда
			ДанныеЗаполнения.Шапка.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ДоговорПодряда();
		Иначе
			ДанныеЗаполнения.Шапка.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
		КонецЕсли;
	Иначе
		Если ДоговорыГПХ Тогда
			Возврат;
		КонецЕсли;
		ДанныеЗаполнения.Шапка.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс();
	КонецЕсли;
	Округление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Шапка.СпособВыплаты, "Округление");
	Если ЗначениеЗаполнено(Округление) Тогда
		ДанныеЗаполнения.Шапка.Округление    = Округление;
	Иначе
		ДанныеЗаполнения.Шапка.Округление    = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	Ведомость.Заполнить(ДанныеЗаполнения);
	Если ЗарплатныйПроект <> Неопределено Тогда
		Ведомость.ЗарплатныйПроект = ЗарплатныйПроект;
	КонецЕсли;
	
	Если ВидДоходаИсполнительногоПроизводства <> Неопределено Тогда
		Ведомость.ВидДоходаИсполнительногоПроизводства = ВидДоходаИсполнительногоПроизводства;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Ведомость, ДанныеЗаполнения.Шапка);
	ЗаполнитьЗарплату(Ведомость);
	
	Если Ведомость.Зарплата.Количество() <> 0 Тогда
		
		Ведомость.Записать(РежимЗаписиДокумента.Проведение);
	
		НоваяСтрока = ПараметрыОбработки.Ведомости.Добавить();
		НоваяСтрока.Ведомость = Ведомость.Ссылка;
		НоваяСтрока.Сумма     = Ведомость.СуммаПоДокументу;
		Если ЗарплатныйПроект <> Неопределено Тогда
			НоваяСтрока.ЗарплатныйПроект = ЗарплатныйПроект;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки)
	
	Если (ПараметрыОбработки.ПлательщикЕНП И Не ПараметрыОбработки.ПрименяетсяАУСН
		И Не (ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод))
		И Не (ПараметрыОбработки.Аванс И ПараметрыОбработки.ИспользоватьРасчетПервойПоловиныМесяца) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработки.ПрименяетсяАУСН И Не ПараметрыОбработки.ФормироватьПлатежныеДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ПараметрыОбработки.ДатаВыплаты),
						ПараметрыОбработки.ДатаВыплаты,
						ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_НДФЛ Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ПараметрыОбработки.Правило_НДФЛ,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
				И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			ДокументОбъект.Дата = ДатаДокумента;
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			ДокументОбъект.Дата = ДатаДокумента;
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		ПараметрыОбработки.Платежи_НДФЛ.ВыгрузитьКолонку("ПлатежноеПоручение"));
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки)
	
	Если ПараметрыОбработки.ПрименяетсяАУСН Тогда
		// При АУСН страховые взносы с ФОТ не уплачиваются.
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_Взносы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж 
			И ПараметрыОбработки.ПравилоУплатыВыполняетсяЕдинымПомощником Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееПравило = ПараметрыОбработки.Правило_Взносы;
		Если СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные Тогда
			ТекущееПравило = ТекущееПравилоЗадачи("СтраховыеВзносы", "_Уплата_Допвзносы",
													,
													ПараметрыОбработки.ПериодРегистрации);
		ИначеЕсли ПараметрыОбработки.ПлательщикЕНП
			И СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			ТекущееПравило = ПараметрыОбработки.Правило_Травматизм;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ТекущееПравило,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
			И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		ПараметрыОбработки.Платежи_Взносы.ВыгрузитьКолонку("ПлатежноеПоручение"));
	
КонецПроцедуры

Процедура СформироватьУведомление(ПараметрыОбработки)
	
	ТаблицаНалоги = ТаблицаНалогиДляУведомления(ПараметрыОбработки.Организация,
		ПараметрыОбработки.ПериодРегистрации,
		ПараметрыОбработки.РасчетВзносы,
		?(ПараметрыОбработки.ПрименяетсяАУСН, ПараметрыОбработки.РасчетНДФЛ, Неопределено));
		
	Если ТаблицаНалоги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработки.ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ПараметрыОбработкиУведомления = ПараметрыОбработки.Правило_Уведомление;
		ДокументОбъект = Документы.УведомлениеОбИсчисленныхСуммахНалогов.СоздатьДокумент();
	Иначе
		ПараметрыОбработкиУведомления = ПараметрыОбработки.Правило_Взносы;
		ДокументОбъект = Документы.ОперацияПоЕдиномуНалоговомуСчету.СоздатьДокумент();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
	КонецЕсли;
	ДокументОбъект.Организация = ПараметрыОбработки.Организация;
	ДокументОбъект.Дата        = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ДокументОбъект.Налоги.Загрузить(ТаблицаНалоги);
	
	ВыполнениеЗадачБухгалтера.УстановитьСвойстваУведомленияПриРегистрации(
		ДокументОбъект,
		ПараметрыОбработкиУведомления,
		ПараметрыОбработки.ПериодРегистрации);
		
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ТаблицаНалогиДляУведомления(Организация, Период, РасчетВзносы, РасчетНДФЛ = Неопределено) Экспорт
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Если ТипЗнч(РасчетВзносы) = Тип("ТаблицаЗначений") Тогда
		РасчетНалоги = РасчетВзносы.Скопировать();
	Иначе
		РасчетНалоги = РасчетВзносы.Выгрузить();
	КонецЕсли;
	
	Если РасчетНДФЛ <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетНДФЛ, РасчетНалоги);
	КонецЕсли;
	
	РасчетНалоги.Свернуть("Организация, КПП, Налог, ВидНалога, КБК, ОКАТО", "Сумма");
	
	КонецПериода = КонецМесяца(Период);
	
	Налоги = ОбщегоНазначения.ВыгрузитьКолонку(РасчетНалоги, "Налог", Истина);
	ВидыНалогов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Налоги, "ВидНалога");
	Для Каждого СтрокаРасчета Из РасчетНалоги Цикл
		
		ВидНалога = ВидыНалогов[СтрокаРасчета.Налог];
		
		Если ВидНалога = Неопределено Тогда
			Продолжить;
		ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			Продолжить;
		КонецЕсли;
		
		СрокУплатыНалога = '00010101';
		ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация,
			ВидНалога,
			КонецПериода,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
		Если ПорядокУплаты <> Неопределено Тогда
			СрокУплатыНалога = ПорядокУплаты.Срок;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		НоваяСтрока.РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, КонецПериода);
		НоваяСтрока.КодПоОКТМО                  = СтрокаРасчета.ОКАТО;
		НоваяСтрока.Налог                       = СтрокаРасчета.Налог;
		НоваяСтрока.КодБК                       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(СтрокаРасчета.Налог,, КонецПериода);
		НоваяСтрока.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаРасчета.Налог, КонецПериода);
		НоваяСтрока.Сумма                       = СтрокаРасчета.Сумма;
		НоваяСтрока.СрокУплаты                  = СрокУплатыНалога;
		НоваяСтрока.НачалоПериода               = НачалоМесяца(Период);
		НоваяСтрока.КонецПериода                = КонецМесяца(Период);
		
	КонецЦикла;
	
	Возврат ТаблицаНалоги;
	
КонецФункции

Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа, Правило, ПериодСобытия)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, Правило, ПериодСобытия);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СформироватьДокументыОплатыВедомостей(ПараметрыОбработки)
	
	Если ПараметрыОбработки.ПрименяетсяАУСН И Не ПараметрыОбработки.ФормироватьПлатежныеДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ПараметрыОбработки.ДатаВыплаты),
										ПараметрыОбработки.ДатаВыплаты,
										ОбщегоНазначения.ТекущаяДатаПользователя());
	
	СтатьяДвиженияДенежныхСредств =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаТруда");
	
	СозданныеПлатежныеПоручения = Новый Массив;
	
	Для Каждого ПараметрыВедомости ИЗ ПараметрыОбработки.Ведомости Цикл
		
		Если ЗначениеЗаполнено(ПараметрыВедомости.ПлатежныеДокументы) Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			
			Если УчетЗарплаты.ВедомостьПоДоговоруПодряда(ПараметрыВедомости.Ведомость) Тогда
				
				ОбработкаОбъект = Новый Структура();
				ОбработкаОбъект.Вставить("Организация",                   ПараметрыОбработки.Организация);
				ОбработкаОбъект.Вставить("ПлатежнаяВедомость",            ПараметрыВедомости.Ведомость);
				ОбработкаОбъект.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				ОбработкаОбъект.Вставить("ДатаРКО",                       ДатаДокумента);
				ОбработкаОбъект.Вставить("РКО",                           Новый ТаблицаЗначений);
				ОбработкаОбъект.Вставить("РежимПомощника",                Истина);
				ПараметрыДопОбработки = Новый Структура("Объект", ОбработкаОбъект);
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Автозаполнение(ПараметрыДопОбработки,
																				АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыРасходнымиОрдерами.СоздатьРКО(ПараметрыДопОбработки,
																							АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыРасходнымиОрдерами.ПровестиРКО(ПараметрыДопОбработки,
																							АдресХранилища);
																							
			Иначе
				
				МассивДокументовКасса = Новый Массив;
				МассивДокументовКасса.Добавить(ПараметрыВедомости.Ведомость);
				
				ДокументВыплаты = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				ДокументВыплаты.Заполнить(МассивДокументовКасса);
				ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ДокументВыплаты.Дата = ДатаДокумента;
				ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			
			Если ЗначениеЗаполнено(ПараметрыВедомости.ЗарплатныйПроект) Тогда
				
				ДокументВыплаты = Документы.ПлатежноеПоручение.СоздатьДокумент();
				ДокументВыплаты.Заполнить(ПараметрыВедомости.Ведомость);
				ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ДокументВыплаты.Дата = ДатаДокумента;
				ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
				СозданныеПлатежныеПоручения.Добавить(ДокументВыплаты.Ссылка);
				
			Иначе
				
				ОбработкаОбъект = Новый Структура();
				ОбработкаОбъект.Вставить("Организация",                   ПараметрыОбработки.Организация);
				ОбработкаОбъект.Вставить("СчетОрганизации",               ПараметрыОбработки.СчетОрганизации);
				ОбработкаОбъект.Вставить("ПлатежнаяВедомость",            ПараметрыВедомости.Ведомость);
				ОбработкаОбъект.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				ОбработкаОбъект.Вставить("ДатаПлатежныхПоручений",        ДатаДокумента);
				ОбработкаОбъект.Вставить("ПлатежныеПоручения",            Новый ТаблицаЗначений);
				ОбработкаОбъект.Вставить("РежимПомощника",                Истина);
				ПараметрыДопОбработки = Новый Структура("Объект", ОбработкаОбъект);
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.Автозаполнение(ПараметрыДопОбработки,
																				АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.СоздатьПлатежныеПоручения(ПараметрыДопОбработки,
																							АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.ПровестиПлатежныеПоручения(ПараметрыДопОбработки,
																							АдресХранилища);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		СозданныеПлатежныеПоручения);
	
КонецПроцедуры

#КонецОбласти

#Область ГенераторКомплектаВРежимеВыплатыПоДокументу

Процедура СоздатьВедомостиПоРасчетномуДокументу(ПараметрыОбработки, РезультатВыполнения, АдресХранилища)
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация",
																					ПараметрыОбработки.Организация));
	
	ПараметрыСоздания = Новый Структура();
	ПараметрыСоздания.Вставить("УникальныйИдентификаторФормы",
		АдресХранилища);
	ПараметрыСоздания.Вставить("ДатаВыплаты",
		ПараметрыОбработки.ДатаВыплаты);
	ПараметрыСоздания.Вставить("Аванс",
		ПараметрыОбработки.Аванс);
		
	МассивВедомостей = Новый Массив;
	
	ВыборкаКлючейВедомостей = КлючиВедомостейПоРасчетномуДокументу(ПараметрыОбработки.РасчетныйДокумент, ПараметрыСоздания);
	
	Пока ВыборкаКлючейВедомостей.Следующий() Цикл
		
		Ведомость = НоваяВедомостьПоРасчетномуДокументу(ПараметрыОбработки.РасчетныйДокумент,
															ВыборкаКлючейВедомостей,
															ПараметрыСоздания);
		
		ЗаполнитьЗарплату(Ведомость);
		
		Если Ведомость.Зарплата.Количество() <> 0 Тогда
			
			Ведомость.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивВедомостей.Добавить(Ведомость.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОбработки.МассивВедомостей = МассивВедомостей;
	
КонецПроцедуры

Функция КлючиВедомостейПоРасчетномуДокументу(РасчетныйДокумент, ПараметрыСоздания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Если ПараметрыСоздания.Аванс Тогда
		СпособВыплатыЗарплата = Справочники.СпособыВыплатыЗарплаты.Аванс();
	Иначе
		СпособВыплатыЗарплата = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	КонецЕсли;
	СпособВыплатыДоговор  = Справочники.СпособыВыплатыЗарплаты.ДоговорПодряда();
	
	Запрос.УстановитьПараметр("РасчетныйДокумент",		РасчетныйДокумент);
	Запрос.УстановитьПараметр("ДатаВыплаты",			ПараметрыСоздания.ДатаВыплаты);
	Запрос.УстановитьПараметр("СпособВыплатыЗарплата",	СпособВыплатыЗарплата);
	Запрос.УстановитьПараметр("СпособВыплатыДоговор",	СпособВыплатыДоговор);
	Запрос.УстановитьПараметр("ОкруглениеЗарплата",		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпособВыплатыЗарплата, "Округление"));
	Запрос.УстановитьПараметр("ОкруглениеДоговор",		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпособВыплатыДоговор, "Округление"));
	Запрос.УстановитьПараметр("Аванс",					ПараметрыСоздания.Аванс);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Сотрудник,
	|	&ДатаВыплаты КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	#ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент";
	
	Если ПараметрыСоздания.Аванс Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ЗарплатаКВыплате", "РегистрНакопления.ЗарплатаКВыплатеАвансом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ЗарплатаКВыплате", "РегистрНакопления.ЗарплатаКВыплате");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Получаем кадровые данные сотрудников.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСотрудникиИПериод");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ, Истина, "Подразделение, ВидМестаВыплаты, ЗарплатныйПроект");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Организация КАК Организация,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)) КАК ВидМестаВыплаты,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ЗарплатныйПроект, ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)) КАК ЗарплатныйПроект,
	|	ВЫБОР
	|		КОГДА РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|			ТОГДА &СпособВыплатыДоговор
	|		ИНАЧЕ &СпособВыплатыЗарплата
	|	КОНЕЦ КАК СпособВыплаты,
	|	ВЫБОР
	|		КОГДА РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|			ТОГДА &ОкруглениеДоговор
	|		ИНАЧЕ &ОкруглениеЗарплата
	|	КОНЕЦ КАК Округление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)) = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка)
	|		ИНАЧЕ ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства
	|	КОНЕЦ КАК ВидДоходаИсполнительногоПроизводства
	|ИЗ
	|	#ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ЗарплатаКВыплате.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО ЗарплатаКВыплате.Сотрудник = РолиСотрудников.Сотрудник
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент
	|	И ВЫБОР
	|			КОГДА &Аванс
	|				ТОГДА РолиСотрудников.РольСотрудника <> ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Организация,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)),
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ЗарплатныйПроект, ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|			ТОГДА &СпособВыплатыДоговор
	|		ИНАЧЕ &СпособВыплатыЗарплата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|			ТОГДА &ОкруглениеДоговор
	|		ИНАЧЕ &ОкруглениеЗарплата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)) = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка)
	|		ИНАЧЕ ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодРегистрации,
	|	Подразделение,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	ВидМестаВыплаты,
	|	ВидДоходаИсполнительногоПроизводства";
	
	Если ПараметрыСоздания.Аванс Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ЗарплатаКВыплате", "РегистрНакопления.ЗарплатаКВыплатеАвансом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ЗарплатаКВыплате", "РегистрНакопления.ЗарплатаКВыплате");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаЗарплатыКВыплатеПоРасчетномуДокументу = Запрос.Выполнить().Выбрать();

	Возврат ВыборкаЗарплатыКВыплатеПоРасчетномуДокументу
	
КонецФункции

Функция НоваяВедомостьПоРасчетномуДокументу(РасчетныйДокумент, КлючВедомости, ПараметрыСоздания)
	
	ДокументМенеджер = ВедомостьНаВыплатуЗарплаты.МенеджерДокументаПоВидуМестаВыплаты(КлючВедомости.ВидМестаВыплаты);
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВедомостьНаВыплатуЗарплатыБазовый.ДанныеЗаполненияВедомости();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, КлючВедомости);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, ПараметрыСоздания);
	
	ДанныеЗаполнения.Шапка.Вставить("ВидМестаВыплаты",
		КлючВедомости.ВидМестаВыплаты);
	ДанныеЗаполнения.Шапка.Вставить("ЗарплатныйПроект",
		КлючВедомости.ЗарплатныйПроект);
	ДанныеЗаполнения.Шапка.Вставить("ВидДоходаИсполнительногоПроизводства",
		КлючВедомости.ВидДоходаИсполнительногоПроизводства);
	
	ДанныеЗаполнения.Шапка.Дата = ПараметрыСоздания.ДатаВыплаты;
	
	ЗаполнитьЗначенияСвойств(Ведомость, ДанныеЗаполнения.Шапка);
	Ведомость.Заполнить(ДанныеЗаполнения);
	
	Ведомость.ДополнительныеСвойства.Вставить("Основания", РасчетныйДокумент);
	
	Возврат Ведомость
	
КонецФункции

Процедура ЗаполнитьЗарплату(Ведомость)
	
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(Ведомость);
	
	Если Ведомость.ДополнительныеСвойства.Свойство("Основания") Тогда
		ПараметрыЗаполнения.ОписаниеОперации.ДокументыОснования.Добавить(Ведомость.ДополнительныеСвойства.Основания);
	КонецЕсли;
	
	Зарплата = ВедомостьНаВыплатуЗарплаты.ЗарплатаКВыплате(
		ПараметрыЗаполнения.ОписаниеОперации,
		ПараметрыЗаполнения.ОтборСотрудников,
		ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты,
		ПараметрыЗаполнения.Финансирование,
		Ведомость.Ссылка);
	
	НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
		Зарплата, 
		ПараметрыЗаполнения.ОписаниеОперации, 
		ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
		ПараметрыЗаполнения.Финансирование,
		Ведомость.Ссылка);
	
	Ведомость.ЗагрузитьВыплаты(Зарплата, НДФЛ);
	
КонецПроцедуры

#КонецОбласти

Функция ИмяНастройкиФормироватьПлатежныеДокументы(Организация)
	
	Возврат СтрШаблон("ФормироватьПлатежныеДокументы%1", Строка(Организация.УникальныйИдентификатор()));
	
КонецФункции

Функция КлючНастроекПомощника()
	
	Возврат "ПомощникУчетаЗарплаты";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыОтчетаВыплатыСотрудникамАУСН(Организация, Период, СвойстваЗадачи = Неопределено) Экспорт
	
	ПериодОтчета = Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период));
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("Организация", Организация);
	ОтборОтчета.Вставить("Период", ПериодОтчета);
	
	Отчет         = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет.ВыплатыПриИспользованииАУСН");
	ВариантОтчета = ВариантыОтчетов.ВариантОтчета(Отчет, "ВыплатыПриИспользованииАУСН");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ВариантОтчета);
	ПараметрыФормы.Вставить("Отбор", ОтборОтчета);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Если СвойстваЗадачи <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВызовИзСпискаЗадач", Истина);
		ПараметрыФормы.Вставить("СвойстваЗадачи", СвойстваЗадачи);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ФормироватьПлатежныеДокументы(Организация, Период) Экспорт
	
	Возврат УчетЗарплаты.ОформленыПлатежныеПорученияНаВыплатыСотрудникамАУСН(Организация, Период)
		Или ПолучитьНастройкуФормироватьПлатежныеДокументы(Организация);
	
КонецФункции

Функция ПолучитьНастройкуФормироватьПлатежныеДокументы(Организация)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючНастроекПомощника(),
		ИмяНастройкиФормироватьПлатежныеДокументы(Организация),
		Ложь);
	
КонецФункции

Процедура СохранитьНастройкуФормироватьПлатежныеДокументы(Организация, ЗначениеНастройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючНастроекПомощника(),
		ИмяНастройкиФормироватьПлатежныеДокументы(Организация),
		ЗначениеНастройки);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
