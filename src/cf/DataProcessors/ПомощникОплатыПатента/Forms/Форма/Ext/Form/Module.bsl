
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	Организация      = Параметры.Организация;
	Патент           = Параметры.Патент;
	ДокументПатент   = Параметры.ДокументПатент;
	ПериодСобытия    = Параметры.ПериодСобытия;
	Срок             = Параметры.Срок;
	Действие         = Параметры.Действие;
	
	Если Не ЗначениеЗаполнено(ДокументПатент)
		И Не УчетПСН.ИспользуетсяНесколькоПатентов(Организация, ПериодСобытия) Тогда
		ДокументПатент = УчетПСН.ДанныеПатентаПоУмолчанию(Организация, ПериодСобытия);
	КонецЕсли;
	
	Патент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПатент, "Патент");
	
	Правило = Патент;
	ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, Срок);
	ЕдиныйНалоговыйПлатеж = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	КБК_ЕНП = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ЕдиныйНалоговыйПлатеж, Срок);
	ПростойУчетЕНС = Срок >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	ЕстьПравоСозданияДокументов = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	ЕстьПравоАктуализироватьДанные       = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	ЕстьПравоСозданияУведомления         = ПравоДоступа("Изменение", Метаданные.Документы.УведомлениеОСпецрежимахНалогообложения);
	ЕстьПравоСозданияУведомленияОНалогах = ПравоДоступа("Изменение", Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов);
	
	ДанныеУчетаАктуальны = Истина;
	ТребуетсяПроверятьАктуальность = Истина;
	ВозможнаБыстраяАктуализация = Истина;
	
	ЗаполнитьПоказателиРассчитатьНалог();
	Подключена1СОтчетность = РегламентированнаяОтчетностьБП.Подключена1СОтчетность(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеПатента" Тогда
		
		// Изменены реквизиты патента.
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Ссылка") И Параметр.Ссылка = ДокументПатент Тогда
			
			ЗаполнитьПоказателиРассчитатьНалог();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		// Записан документ ПлатежноеПоручение или РасходныйКассовыйОрдер с видом операции "Уплата налога".
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Организация
			И (Параметр.КБК = КБК Или (ПлательщикЕНП И Параметр.КБК = КБК_ЕНП)) Тогда
			
			ОбработатьЗаписьДокументаНаУплатуНалога();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_РасходыНаКассовуюТехнику" Тогда
		
		ЗаполнитьРасходыРассчитатьНалог();
	
	ИначеЕсли ИмяСобытия = "Запись_РасходыНаОнлайнКассыУменьшающиеНалогПСН"
		И Параметр = РегистрацияВНалоговомОргане Тогда
		
		ЗаполнитьРасходыРассчитатьНалог();
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		ОбработатьЗаписьДокументаНаУплатуНалога();
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОСпецрежимахНалогообложения" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация", Неопределено) = Организация Тогда
			ВидУведомления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ВидУведомления", Неопределено);
			Если ВидУведомления = ПредопределенноеЗначение(
					"Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУменьшениеНалогаККТ")
					И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "РегистрацияВИФНС", Неопределено) =
						РегистрацияВНалоговомОргане Тогда
				ЗаполнитьПоказателиУведомления();
				УправлениеФормой();
			ИначеЕсли ВидУведомления = ПредопределенноеЗначение(
					"Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы") Тогда
				УведомлениеНайдено = Ложь;
				Для Каждого Строка Из Уведомления Цикл
					Если Строка.Ссылка = Источник Тогда
						УведомлениеНайдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Патент", Неопределено) = Патент
					Или УведомлениеНайдено Тогда
					ЗаполнитьПоказателиРассчитатьНалог();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "Запись_УменьшениеНалогаПСНнаСтраховыеВзносы"
		И ТипЗнч(Параметр) = Тип("Структура")
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация", Неопределено) = Организация Тогда
		
		ЗаполнитьПоказателиРассчитатьНалог();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПродленияСроковНалоговОтчетов" И Параметр.Организация = Организация Тогда
		
		ЗаполнитьПоказателиРассчитатьНалог();
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов" И Параметр.Организация = Организация Тогда
		
		ОбновитьСведенияОбУведомлениях();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация)
		И ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Организации - юридические лица не могут применять патентную систему налогообложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", , Отказ);
		
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, ТекстСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиСпискаДокументов(
		Платежи, "Платеж", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиДокумента(Элемент,
		ТекстСсылки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УведомлениеУменьшениеСтраховыеВзносыОбработкаНавигационнойСсылки(Элемент, ТекстСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыУведомлений = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиСпискаДокументов(
		Уведомления, "УведомлениеУменьшениеСтраховыеВзносы", ОповещениеУдаленияУведомления());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиДокумента(Элемент,
		ТекстСсылки, ПараметрыУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИФНСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, РегистрацияВНалоговомОргане);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРасходыНаОнлайнКассыОбработкаНавигационнойСсылки(Элемент, ТекстСсылки, СтандартнаяОбработка)
	
	Если ТекстСсылки = "ДобавитьРасходыНаККТ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("УменьшаемыйНалог",
			ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.Патент"));
		ЗначенияЗаполнения.Вставить("Организация", Организация);
		ЗначенияЗаполнения.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ВызовИзПомощника",   Истина);
		
		ОткрытьФорму("Документ.РасходыНаОнлайнКассыУменьшающиеНалоги.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНаОнлайнКассыВсегоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьСписокРасходыНаОнлайнКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйВычетДругиеПатентыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьРаспределениеРасходовНаОнлайнКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Уведомление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	СпособУплатыНалога = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	ПередУплатойНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомление(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = УчетПСНВызовСервера.ДанныеЗаполненияУведомленияОбУменьшенииНалога(
		Организация,
		РегистрацияВНалоговомОргане);
	
	// Если есть уведомление, созданное сегодня - перезаполним существующее, иначе создадим новое.
	Если ЗначениеЗаполнено(Уведомление) И НачалоДня(УведомлениеДата) = НачалоДня(ТекущаяДата()) Тогда
		ДанныеЗаполнения.Вставить("Ссылка", Уведомление);
	КонецЕсли;
	
	УведомлениеОСпецрежимахНалогообложенияИнтеграцияКлиент.ОткрытьИЗаполнитьФормуУведомленияККТ(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомлениеУменьшениеНаСтраховыеВзносы(Команда)
	
	ОповещениеЗакрытиеПомощника = Новый ОписаниеОповещения("ОбработатьЗакрытиеПомощника", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("Период", ДатаПроверкиРасходов);
	ПараметрыФормы.Вставить("Срок", КонецГода(ПериодСобытия));
	
	ОткрытьФорму(
		"Обработка.ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеЗакрытиеПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Организация);
	ПараметрыУведомления.Вставить("Правило",                     ПравилоУведомления);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Организация);
	ПараметрыУведомления.Вставить("Правило",                     Правило);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежиВБанк(Команда)
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Если ЗначениеЗаполнено(ДокументыОплатыПоБанку) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументыОплатыПоБанку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежи(Команда)
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ПомощникиПоУплатеНалоговИВзносовКлиент.ПроверитьИВыгрузитьПлатежныеДокументы(
		Организация, ДокументыОплатыВФайл, Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеНажатие(Элемент)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Элемент.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУведомлениеНаСервере(Идентификатор);
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоказателиРассчитатьНалог()
	
	Если Не ЗначениеЗаполнено(Патент)
		Или Не ЗначениеЗаполнено(ДокументПатент) Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСвязанныеПравила();
	
	Если НачалоМесяца(ПериодСобытия) < НачалоМесяца(ДобавитьМесяц(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), -1)) Тогда
		ПлательщикЕНП_ПереходныйПериод = УчетнаяПолитика.ПлательщикЕНП(Организация, ПериодСобытия);
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(ПериодСобытия >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(),
		Ложь,
		ПлательщикЕНП_ПереходныйПериод);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		СрокПодачиУведомления = ВыполнениеЗадачБухгалтера.СрокВыполненияЗадачи(Объект.Организация, ПравилоУведомления, ПериодСобытия);
	КонецЕсли;
	
	ЗаполнитьДанныеПатента();
	
	ДатаПроверкиРасходов = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.ДатаПроверкиРасходовПоПатентам(
		ДатаОкончания);
	
	ЗаполнитьРасходыУменьшающиеНалог();
	
	ЗаполнитьПоказателиУведомления();
	
	НайтиИОтобразитьДокументыОплаты();
	
	ЗаполнитьУведомления();
	
	РасчетСуммыКУплате();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходыРассчитатьНалог()
	
	ЗаполнитьРасходыУменьшающиеНалог();
	
	ЗаполнитьПоказателиУведомления();
	
	НайтиИОтобразитьДокументыОплаты();
	
	РасчетСуммыКУплате();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПатента()
	
	Показатели = Обработки.ПомощникОплатыПатента.ПоказателиПатента(ДокументПатент, Срок);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходыУменьшающиеНалог()
	
	Уведомления.Очистить();
	
	Если ПрименяетсяВычетПоОнлайнКассам Тогда
		ПоказателиРасходовККМ = Обработки.ПомощникОплатыПатента.ПоказателиРасходовККМУменьшающихНалог(
			Организация, РегистрацияВНалоговомОргане, Патент, ВидПлатежа);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоказателиРасходовККМ);
	КонецЕсли;
	
	Если ПрименяетсяУменьшениеНалогаНаСуммуСтраховыхВзносов Тогда
		ПоказателиРасходовСтраховыеВзносы =
			Обработки.ПомощникОплатыПатента.ПоказателиРасходовСтраховыеВзносы(
				Организация, ДокументПатент, ДатаНачала, ДатаПроверкиРасходов, КонецГода(ПериодСобытия));
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоказателиРасходовСтраховыеВзносы);
		Для Каждого ДанныеУведомления Из ПоказателиРасходовСтраховыеВзносы.СведенияОбУведомлениях Цикл
			Строка = Уведомления.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ДанныеУведомления);
		КонецЦикла;
			
		ПомощникиПоУплатеНалоговИВзносов.ОтобразитьДокументы(
			ЭтотОбъект, Уведомления, "УведомлениеУменьшениеСтраховыеВзносы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиУведомления()
	
	Если Не ПрименяетсяВычетПоОнлайнКассам Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиУведомления = Обработки.ПомощникОплатыПатента.ПоказателиУведомления(
		Организация, РегистрацияВНалоговомОргане, Патент, Срок);
	
	Если ПоказателиУведомления.ЕстьУведомление Тогда
		
		Уведомление = ПоказателиУведомления.Уведомление;
		УведомлениеПредставление = ПоказателиУведомления.УведомлениеПредставление;
		УведомлениеДата = ПоказателиУведомления.УведомлениеДата;
		
		УведомлениеАктуально = ПоказателиУведомленияСоответствуютПомощнику(ПоказателиУведомления);
		
	Иначе
		
		Уведомление = Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка();
		УведомлениеПредставление = "";
		УведомлениеДата = '00010101';
		УведомлениеАктуально = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказателиУведомленияСоответствуютПомощнику(ПоказателиУведомления)
	
	СравниваемыеПоказатели = Обработки.ПомощникОплатыПатента.СравниваемыеПоказателиУведомления();
	
	Для Каждого ИмяПоказателя Из СравниваемыеПоказатели Цикл
		
		Если ПоказателиУведомления[ИмяПоказателя] <> ЭтотОбъект[ИмяПоказателя] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НайтиИОтобразитьДокументыОплаты()
	
	ДокументыУплаты = Обработки.ПомощникОплатыПатента.ДокументыУплатыПатента(
		Организация,
		Патент,
		ПериодСобытия,
		ВидНалога);
	
	Платежи.Загрузить(ДокументыУплаты);
	
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, Платежи, "Платеж");
	
КонецПроцедуры

&НаСервере
Процедура РасчетСуммыКУплате()
	
	Уплачено = Платежи.Итог("Сумма");
	
	НалогИсчисленный = НалогПоПатенту - УменьшениеСтраховыеВзносыТекущийПатент - СуммаОсвобожденияОтНалога;
	СуммаНалога = Макс(НалогИсчисленный - Уплачено, 0);
	СуммаКУплате = Макс(СуммаНалога - НалоговыйВычетТекущийПлатеж, 0);
	
	УправлениеФормой();
	
КонецПроцедуры

#Область ОбработкаСобытийСпискаПлатежей

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Функция ОповещениеУдаленияУведомления()
	Возврат Новый ОписаниеОповещения("УдалитьУведомлениеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ДокументУплатыДляУдаления, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУведомлениеЗавершение(СсылкаНаУдаление, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаУдаление) Тогда
		УдалитьУведомление(СсылкаНаУдаление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументУплатыДляУдаления);
	
	НайтиИОтобразитьДокументыОплаты();
	
	РасчетСуммыКУплате();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомление(СсылкаНаУдаление)
	
	УведомлениеОбъект = СсылкаНаУдаление.ПолучитьОбъект();
	УведомлениеОбъект.УстановитьПометкуУдаления(Истина);
	ЗаполнитьПоказателиРассчитатьНалог();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработатьЗаписьДокументаНаУплатуНалога()
	
	НайтиИОтобразитьДокументыОплаты();
	РасчетСуммыКУплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУплатойНалога()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	Если ПлательщикЕНП И Не ПростойУчетЕНС И Не УведомлениеОбИсчисленныхНалогахПодготовлено Тогда
		ПредупредитьОбОтсутствииУведомления();
	Иначе
		СоздатьДокументУплатыНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	СуммаНалогаКУплате = Макс(0, СуммаКУплате);
	ОписаниеДействияПлатеж = ОписаниеДействияДляНовогоДокументаУплатыНалога(Организация, ДокументПатент,
		СуммаНалогаКУплате, СпособУплатыНалога, ПериодСобытия, Срок);
	
	Если ОписаниеДействияПлатеж <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДействияДляНовогоДокументаУплатыНалога(Организация, ДокументПатент, Сумма, СпособУплаты, ПериодСобытия, Срок)
	
	Возврат ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежПоПатенту(
		Организация, ДокументПатент, Сумма, СпособУплаты, ПериодСобытия, Срок);
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПрименяетсяВычетПоОнлайнКассам = УчетПСН.ПрименяетсяВычетПоОнлайнКассам(Организация, ПериодСобытия);
	
	ПрименяетсяОсвобождениеОтНалога
		= УчетПСНКлиентСервер.ПрименяетсяОсвобождениеОтНалога(Организация, ДатаНачала, ДатаОкончания);
	
	ПрименяетсяУменьшениеНалогаНаСуммуСтраховыхВзносов =
		ДатаНачала >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРасходыНаОнлайнКассы()
	
	Отбор = Новый Структура;
	Отбор.Вставить("УменьшаемыйНалог",
		ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.Патент"));
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("УменьшаемыйНалог",
		ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.Патент"));
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", ДатаОкончания);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	ОткрытьФорму("Документ.РасходыНаОнлайнКассыУменьшающиеНалоги.Форма.ФормаСписокРасходов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРаспределениеРасходовНаОнлайнКассы()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ТекущийПатент", Патент);
	ПараметрыФормы.Вставить("РасходыНаОнлайнКассыВсего", РасходыНаОнлайнКассыВсего);
	ПараметрыФормы.Вставить("НалоговыйВычетТекущийПатент", НалоговыйВычетТекущийПатент);
	
	ОткрытьФорму("Обработка.ПомощникОплатыПатента.Форма.РаспределениеВычетаПоПатентам", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеФормой()
	
	ОформитьОсвобождениеОтНалога();
	
	ОформитьТекущийПлатеж();
	
	ОформитьРасходыНаОнлайнКассыВсего();
	
	ОформитьРасходыСтраховыеВзносы();
	
	ОформитьНалоговыйВычет();
	
	ОформитьУведомление();
	
	ОформитьКомандыФормы();
	
	ОформитьСуммуКУплате();
	
	ОформитьАктуализацию();
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьАктуализацию()
	
	ВыполняетсяФоновоеЗадание = ВыполняетсяФоновоеЗадание();
	
	Элементы.ГруппаКомандыУплаты.Видимость = Не ВыполняетсяФоновоеЗадание И ДанныеУчетаАктуальны;
	Элементы.ГруппаРасчетПлатежа.Видимость = Не ВыполняетсяФоновоеЗадание И ДанныеУчетаАктуальны;
	Элементы.ГруппаАктуализироватьДанныеУчета.Видимость = Не ДанныеУчетаАктуальны
		И Не ВозможнаБыстраяАктуализация
		И Не ВыполняетсяФоновоеЗадание;
	Элементы.АктуализироватьДанныеУчета.Доступность = ЕстьПравоАктуализироватьДанные;
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость  = ВыполняетсяФоновоеЗадание;
	Элементы.ГруппаУведомлениеОНалогах.Видимость    = ПлательщикЕНП
		И Не ПростойУчетЕНС
		И Не ВыполняетсяФоновоеЗадание
		И ДанныеУчетаАктуальны;
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.АктуализироватьДанныеУчета, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОсвобождениеОтНалога()
	
	// Освобождение от налога
	Элементы.ГруппаОсвобождениеОтНалога.Видимость = ПрименяетсяОсвобождениеОтНалога;
	Элементы.ГруппаНалогПоПатентуКУплате.Видимость = ПрименяетсяОсвобождениеОтНалога;
	
	Элементы.ОсвобождениеОтНалогаРасширеннаяПодсказка.Заголовок = УчетПСНКлиентСервер.ТекстПодсказкиОсвобождениеОтНалога(
		ПрименяетсяОсвобождениеОтНалога,
		СуммаОсвобожденияОтНалога,
		ПотенциальноВозможныйГодовойДоход,
		ДатаНачала,
		ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьТекущийПлатеж()
	
	ВыполняетсяФоновоеЗадание = ВыполняетсяФоновоеЗадание();
	
	Элементы.ГруппаПредыдущийПлатеж.Видимость = ПредыдущийПлатеж > 0;
	Элементы.ГруппаПлатежиПоПатенту.Видимость = ДваПлатежа;
	
	Элементы.НадписьТекущийПлатеж.Заголовок    = ТекущийПлатежОписание;
	Элементы.НадписьПредыдущийПлатеж.Заголовок = ПредыдущийПлатежОписание;
	
	Элементы.СуммаНалога.Видимость          = ПрименяетсяВычетПоОнлайнКассам;
	Элементы.СуммаНалогаБезВычета.Видимость = НЕ ПрименяетсяВычетПоОнлайнКассам;
	
	Элементы.ГруппаРасходыНаОнлайнКассы.Видимость = ПрименяетсяВычетПоОнлайнКассам И
		Не ВыполняетсяФоновоеЗадание И ДанныеУчетаАктуальны;
		
	Элементы.ГруппаОплатаНалога.Видимость = (ПлательщикЕНП Или ПрименяетсяВычетПоОнлайнКассам) И
		Не ВыполняетсяФоновоеЗадание И ДанныеУчетаАктуальны;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРасходыНаОнлайнКассыВсего()
	
	Если НЕ ПрименяетсяВычетПоОнлайнКассам Тогда
		Возврат;
	КонецЕсли;
	
	ФорматСумм = "ЧДЦ=; ЧН=0";
	
	ЭлементыНадписи = Новый Массив;
	
	Если РасходыНаОнлайнКассыВсего = 0 Тогда
		
		Элементы.РасходыНаОнлайнКассыВсего.Видимость = Ложь;
		НадписьРасходыНаОнлайнКассы =
			Новый ФорматированнаяСтрока(НСтр("ru = 'Добавить сведения о расходах'"), , , , "ДобавитьРасходыНаККТ");
		
	Иначе
		
		Элементы.РасходыНаОнлайнКассыВсего.Видимость = Истина;
		
		Если РасходыНаОнлайнКассыКоличествоКасс > 1 Тогда // Одну кассу не показываем.
			ТекстКоличествоКасс = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 касса;;%1 кассы;%1 касс;%1 касс'"),
				РасходыНаОнлайнКассыКоличествоКасс);
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1)'"), ТекстКоличествоКасс);
		Иначе
			ТекстНадписи = "";
		КонецЕсли;
		
		НадписьРасходыНаОнлайнКассы = Новый ФорматированнаяСтрока(ТекстНадписи);
		Элементы.НадписьРасходыНаОнлайнКассы.Видимость = Не ПустаяСтрока(ТекстНадписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРасходыСтраховыеВзносы()
	
	Элементы.ГруппаУменьшениеНалога.Видимость = ПрименяетсяУменьшениеНалогаНаСуммуСтраховыхВзносов И
		Не ВыполняетсяФоновоеЗадание() И ДанныеУчетаАктуальны;
	
	Если Не ПрименяетсяУменьшениеНалогаНаСуммуСтраховыхВзносов Тогда
		
		Элементы.ГруппаНалогИсчисленный.Видимость = Ложь;
		
		Элементы.НадписьСуммаКУплате.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Налог к уплате:'"), Новый Шрифт(Новый Шрифт, , , Истина));
	Иначе
		Элементы.ГруппаНалогИсчисленный.Видимость = Истина;
		ЗаголовокНалогИсчисленный = Новый Массив;
		ОплатаПервойЧасти = ДваПлатежа И ПредыдущийПлатеж = 0;
		Если ОплатаПервойЧасти Тогда
			ЗаголовокНалогИсчисленный.Добавить(НСтр("ru = 'Налог исчисленный = 1/3 стоимости - Уменьшение налога'"));
		Иначе
			ЗаголовокНалогИсчисленный.Добавить(НСтр("ru = 'Налог исчисленный = Налог по патенту - Уменьшение налога'"));
		КонецЕсли;
		ЗаголовокНалогИсчисленный.Добавить(Символы.ПС);
		ФормулаНалогИсчисленный = СтрШаблон(НСтр("ru = '(%1 - %2)'"),
			НалогПоПатенту,
			УменьшениеСтраховыеВзносыТекущийПатент);
		ЗаголовокНалогИсчисленный.Добавить(ФормулаНалогИсчисленный);
		Элементы.НадписьНалогИсчисленный.Заголовок = СтрСоединить(ЗаголовокНалогИсчисленный);
		
		ЗаголовокНалогКУплате = Новый Массив;
		НачалоЗаголовкаНалогКУплате = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Налог к уплате '"), Новый Шрифт(Новый Шрифт, , , Истина));
		ОкончаниеЗаголовкаНалогКУплате = НСтр("ru = '= Налог исчисленный - Оплачено ранее'");
		ЗаголовокНалогКУплате.Добавить(Новый ФорматированнаяСтрока(
			НачалоЗаголовкаНалогКУплате, ОкончаниеЗаголовкаНалогКУплате, Символы.ПС));
		ФормулаНалогКУплате = СтрШаблон(НСтр("ru = '(%1 - %2)'"),
			НалогИсчисленный,
			Уплачено);
		ЗаголовокНалогКУплате.Добавить(ФормулаНалогКУплате);
		Элементы.НадписьСуммаКУплате.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНалогКУплате);
	КонецЕсли;
	
	Если ОстатокРасходыСтраховыеВзносы > 0 Тогда
		Элементы.ГруппаУведомлениеУменьшениеНалогаСтраховыеВзносы.Видимость = Истина;
		Элементы.ПояснениеУведомлениеУменьшениеНалогаСтраховыеВзносы.Заголовок = СтрШаблон(
			НСтр("ru = 'Доступно уменьшение налога на сумму до %1. Чтобы уменьшить налог сформируйте и подайте уведомление в налоговую инспекцию'"),
			СтрокаСЧислом(НСтр("ru = ';%1 рубль;;%1 рубля;%1 рублей;%1 рубля'"),
			ОстатокРасходыСтраховыеВзносы, ВидЧисловогоЗначения.Количественное));
	Иначе
		Элементы.ГруппаУведомлениеУменьшениеНалогаСтраховыеВзносы.Видимость = Ложь;
	КонецЕсли;
	
	ОтображатьПодсказкуДляНеСданыхУведомлений = Ложь;
	Для Каждого СведенияУведомление Из Уведомления Цикл
		Если Не СведенияУведомление.Сдано Тогда
			ОтображатьПодсказкуДляНеСданыхУведомлений = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НадписьПодсказкаДляНеСданыхУведомлений.Видимость = ОтображатьПодсказкуДляНеСданыхУведомлений;
	
	Если УменьшениеСтраховыеВзносыТекущийПатент = 0 Тогда
		Элементы.НадписьУменьшениеНалогаСтраховыеВзносы.Видимость = Ложь;
		Элементы.УменьшениеНалогаСтраховыеВзносы.Видимость = Ложь;
	Иначе
		Элементы.НадписьУменьшениеНалогаСтраховыеВзносы.Видимость = Истина;
		Элементы.УменьшениеНалогаСтраховыеВзносы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьНалоговыйВычет()
	
	Если НЕ ПрименяетсяВычетПоОнлайнКассам Тогда // Незачем отображать невидимое.
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаУведомление.Видимость = РасходыНаОнлайнКассыВсего > 0;
	
	ОтображатьРасшифровкуВычета = ТребуетсяОтобразитьРасшифровкуВычета();
	
	Элементы.НалоговыйВычетТекущийПлатеж.Видимость = ОтображатьРасшифровкуВычета;
	Элементы.ГруппаПоясненияВычета.Видимость       = ОтображатьРасшифровкуВычета;
	
	Элементы.НалоговыйВычетДругиеПатенты.Видимость   = НалоговыйВычетДругиеПатенты > 0;
	Элементы.НалоговыйВычетСледующийПлатеж.Видимость = НалоговыйВычетСледующийПлатеж > 0;
	Элементы.НалоговыйВычетОстаток.Видимость         = НалоговыйВычетОстаток > 0;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьУведомление()
	
	Если НЕ ПрименяетсяВычетПоОнлайнКассам Тогда // Незачем отображать невидимое.
		Возврат;
	КонецЕсли;
	
	ОтображатьУведомление            = РасходыНаОнлайнКассыВсего > 0;
	
	Элементы.ГруппаУведомление.Видимость = ОтображатьУведомление;
	
	Элементы.СформироватьУведомление.Видимость  = НЕ УведомлениеАктуально;
	Элементы.УведомлениеПредставление.Видимость = УведомлениеАктуально;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьКомандыФормы()
	
	ТребуетсяУведомление = ЕстьПравоСозданияУведомления
		И ПрименяетсяВычетПоОнлайнКассам
		И РасходыНаОнлайнКассыВсего > 0
		И (НЕ ЗначениеЗаполнено(Уведомление) ИЛИ НЕ УведомлениеАктуально);
		
	Элементы.СформироватьУведомление.Доступность = ТребуетсяУведомление;
	
	ТребуетсяУведомлениеОНалогах = ЕстьПравоСозданияУведомленияОНалогах
		И УведомленияОбИсчисленныхНалогах.Количество() = 0 И ТекущийПлатеж > 0;
		
	Элементы.ВыполнитьДействиеСформироватьУведомление.Видимость = ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Видимость = Не ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьУведомление.Доступность = ТребуетсяУведомлениеОНалогах;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Доступность = ТребуетсяУведомлениеОНалогах;
	
	ТребуетсяУплата = ЕстьПравоСозданияДокументов И СуммаКУплате > 0;
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	
	Элементы.ОплатитьСБанковскогоСчета.Видимость    = ТребуетсяУплата;
	Элементы.ОплатитьНаличнымиПоКвитанции.Видимость = ТребуетсяУплата;
	
	ТребуетсяОтправитьДокументыОплатыПоБанку = ТребуетсяОтправитьДокументыОплатыПоДиректБанку();
	ТребуетсяВыгрузитьДокументыОплаты = Не ТребуетсяОтправитьДокументыОплатыПоБанку И ТребуетсяВыгрузитьДокументыОплаты();
	
	Элементы.ОтправитьПлатежиВБанк.Видимость = ЕстьПравоСозданияДокументов И ТребуетсяОтправитьДокументыОплатыПоБанку;
	Элементы.ВыгрузитьПлатежи.Видимость = ЕстьПравоСозданияДокументов И ТребуетсяВыгрузитьДокументыОплаты;
	
	УведомлениеПоУмолчанию         = ТребуетсяУведомление;
	УведомлениеОНалогахПоУмолчанию = Не УведомлениеПоУмолчанию И ПлательщикЕНП И Не ПростойУчетЕНС
		И Не УведомлениеОбИсчисленныхНалогахПодготовлено И ТребуетсяУплата;
	ОтправитьВБанкПоУмолчанию      = Не УведомлениеПоУмолчанию
		И Не УведомлениеОНалогахПоУмолчанию
		И ЗначениеЗаполнено(НеОтправленныеПлатежи);
	УплатаПоУмолчанию              = Не УведомлениеПоУмолчанию
		И Не УведомлениеОНалогахПоУмолчанию
		И Не ОтправитьВБанкПоУмолчанию И ТребуетсяУплата;
	
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.СформироватьУведомление, УведомлениеПоУмолчанию);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыполнитьДействиеСформироватьУведомление, УведомлениеОНалогахПоУмолчанию);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС, УведомлениеОНалогахПоУмолчанию);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОплатитьСБанковскогоСчета, УплатаПоУмолчанию);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ОтправитьПлатежиВБанк, ОтправитьВБанкПоУмолчанию);
	УстановитьВидПоУмолчаниюОформлением(ЭтотОбъект, Элементы.ВыгрузитьПлатежи, ОтправитьВБанкПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСуммуКУплате()
	
	ЕстьРасшифровкаВычета = ТребуетсяОтобразитьРасшифровкуВычета();
	
	Элементы.СуммаКУплате.Заголовок = ?(ЕстьРасшифровкаВычета,
		НСтр("ru = 'Текущий платеж с учетом уменьшения'"),
		НСтр("ru = 'Текущий платеж с учетом расходов'"));
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяОтобразитьРасшифровкуВычета()
	
	ТребуетсяРасшифровкаВычета = НалоговыйВычетДругиеПатенты > 0
		ИЛИ НалоговыйВычетОстаток > 0
		ИЛИ НалоговыйВычетСледующийПлатеж > 0;
	
	Возврат ТребуетсяРасшифровкаВычета;
	
КонецФункции

&НаСервере
Функция ВыполняетсяФоновоеЗадание()
	
	Возврат ТребуетсяПроверятьАктуальность
		Или ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации);
		
КонецФункции

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	ВозможнаБыстраяАктуализация = ЕстьПравоАктуализироватьДанные;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ТребуетсяПроверятьАктуальность Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		ВозможнаБыстраяАктуализация = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация = Организация;
	ПараметрыПроверки.Период = КонецКвартала(ПериодАктуализации());
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ТребуетсяПроверятьАктуальность = Ложь;
		УправлениеФормой();
		
	ИначеЕсли ВозможнаБыстраяАктуализация И Не ЗаданиеЗапущеноВДругойФорме И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ПериодСобытия) Тогда
		
		ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, УникальныйИдентификатор);
		Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			АктуализироватьДанные();
		Иначе
			
			ДанныеУчетаАктуальны = Ложь;
			
			Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
				// Задание запущено в другой форме
				ЗаданиеЗапущеноВДругойФорме = Истина;
				ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
					ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
			Иначе
				ЗаданиеЗапущеноВДругойФорме = Ложь;
			КонецЕсли;
			
			ОбновитьСтатусФоновогоЗадания();
			
		КонецЕсли;
		
	Иначе
		
		ТребуетсяПроверятьАктуальность = Ложь;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(ПериодАктуализации());
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = ВозможнаБыстраяАктуализация;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		УправлениеФормой();
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		
		ПроверитьАктуальностьДанных();
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		
		РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
		Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
		 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
			ПроведенАнализВариантаАктуализации = Ложь;
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		Иначе
			ПроведенАнализВариантаАктуализации = ВозможнаБыстраяАктуализация
				И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
			ВозможнаБыстраяАктуализация = РезультатАктуализации.АктуализацияДляРасчетаНалога;
		КонецЕсли;
		
	Иначе
		
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	ТребуетсяПроверятьАктуальность = Ложь;
	
	Если ДанныеУчетаАктуальны Тогда
		ЗаполнитьПоказателиРассчитатьНалог();
	ИначеЕсли Не ДанныеУчетаАктуальны И Не ПроведенАнализВариантаАктуализации Тогда
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект,
			РезультатАктуализации,
			НСтр("ru='Расчет налога не выполнен. Обнаружены ошибки.'"));
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = СтрШаблон(НСтр("ru = 'Выполняется расчет платежа...%1'"), ПроцентВыполнения);
		
	ИначеЕсли ТребуетсяПроверятьАктуальность Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ТребуетсяПроверятьАктуальность = Ложь;
	
КонецФункции

&НаКлиенте
Функция ПериодАктуализации()
	
	ТекущийПериод = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если КонецКвартала(ТекущийПериод) < КонецКвартала(ПериодСобытия) Тогда
		Возврат ТекущийПериод;
	Иначе
		Возврат ПериодСобытия;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеПомощника(ПараметрЗакрытия, ДопПараметры) Экспорт
	
	ЗаполнитьПоказателиРассчитатьНалог();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ, КонтекстныйВызов", СтрокаУведомления.Уведомление, Истина);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило, КонтекстныйВызов",
		ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты, Истина);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомления()

	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстВопроса = НСтр("ru='Не подготовлено уведомление об исчисленной сумме налога.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Не сформирована операция по единому налоговому счету.
		|Продолжить?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупредитьОбОтсутствииУведомленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтсутствииУведомленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвязанныеПравила()
	
	ПараметрыНабораПравил = ВыполнениеЗадачБухгалтера.ПараметрыНабораПравил();
	ЗаполнитьЗначенияСвойств(ПараметрыНабораПравил, ЭтотОбъект);
	ПараметрыНабораПравил.Организация = Организация;
	ВыполнениеЗадачБухгалтера.ОпределитьСвязанныеПравила(ПараметрыНабораПравил);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыНабораПравил);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Организация,
		ОписаниеТаблицыНалоги(),
		Правило,
		ПериодСобытия,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = ЕдиныйНалоговыйСчет.ОписаниеТаблицыНалогов();
	
	Реквизиты     = Документы.ОперацияСПатентом.РеквизитыНалоговогоПлатежа(ДокументПатент);
	НачалоПериода = НачалоМесяца(Срок);
	КонецПериода  = КонецМесяца(Срок);
	
	НоваяСтрока = ТаблицаНалоги.Добавить();
	
	НоваяСтрока.РегистрацияВНалоговомОргане = Реквизиты.РегистрацияВНалоговомОргане;
	НоваяСтрока.КодПоОКТМО                  = Реквизиты.ОКАТО;
	НоваяСтрока.Налог                       = Реквизиты.Налог;
	НоваяСтрока.КодБК                       = Реквизиты.КБК;
	НоваяСтрока.СчетУчета                   = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Реквизиты.Налог, КонецПериода);
	НоваяСтрока.Сумма                       = СуммаКУплате;
	НоваяСтрока.СрокУплаты                  = Срок;
	НоваяСтрока.НачалоПериода               = НачалоПериода;
	НоваяСтрока.КонецПериода                = КонецПериода;
		
	ТаблицыНалогов = ЕдиныйНалоговыйСчет.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции

&НаСервере
Процедура ОбновитьСведенияОбУведомлениях()
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоказателиРассчитатьНалог();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ПомощникиПоУплатеНалоговИВзносов.УправлениеФормойБлокУведомление(ЭтотОбъект,
		НалогИсчисленный > 0,
		,
		?(Срок >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж(), 2, 0));
	Элементы.ГруппаУведомлениеОНалогах.Видимость = ПлательщикЕНП И Не ПростойУчетЕНС
		И Не ВыполняетсяФоновоеЗадание() И ДанныеУчетаАктуальны;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомления()
	
	МассивПравилУведомлений = Новый Массив;
	МассивПравилУведомлений.Добавить(Правило);
	
	ТаблицаУведомления = ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений(
		МассивПравилУведомлений,
		Организация,
		ПериодСобытия);
	
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатежныеДокументыЗавершение(ПлатежныеПоручения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеПоручения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыгрузкуПлатежейНаСервере(ПлатежныеПоручения)
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеПоручения Цикл
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежныйДокумент, Перечисления.СостоянияБанковскихДокументов.Отправлено);
	КонецЦикла;
	
	ОбработатьЗаписьДокументаНаУплатуНалога();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеИсполненныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеОтправленныеПлатежи(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.Платежи Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеУспешнойОтправки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОшибки(СтрокаОплаты.Состояние)
			И Не ПомощникиПоУплатеНалоговИВзносовКлиентСервер.СостояниеОплачено(СтрокаОплаты.Состояние) Тогда
			ДокументыОплаты.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаСервере
Функция ТребуетсяВыгрузитьДокументыОплаты()
	
	ДокументыОплатыВФайл = ПлатежныеДокументыДляВыгрузкиВФайл();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыВФайл);
	
КонецФункции

&НаСервере
Функция ТребуетсяОтправитьДокументыОплатыПоДиректБанку()
	
	ДокументыОплатыПоБанку = ПлатежныеДокументыДляОтправкиПоДиректБанку();
	
	Возврат ЗначениеЗаполнено(ДокументыОплатыПоБанку);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляВыгрузкиВФайл()
	
	НеИсполненныеПлатежи = НеИсполненныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыДляВыгрузкиВФайл(
		Организация, НеИсполненныеПлатежи);
	
КонецФункции

&НаСервере
Функция ПлатежныеДокументыДляОтправкиПоДиректБанку()
	
	НеОтправленныеПлатежи = НеОтправленныеПлатежи(ЭтотОбъект);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ПлатежныеДокументыПоДиректБанку(
		Организация, НеОтправленныеПлатежи);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	ПолужирныйШрифт = ЭтоКнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ПолужирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомлениеНаСервере(Идентификатор)
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);	
	Если СтрокаУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУведомленияОбъект = СтрокаУведомления.Уведомление.ПолучитьОбъект();
	ДокументУведомленияОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти
