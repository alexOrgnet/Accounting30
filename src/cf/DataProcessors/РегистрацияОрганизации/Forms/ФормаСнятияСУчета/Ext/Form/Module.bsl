#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	Заявление = Параметры.Заявление;
	ДатаСоставления = ОбщегоНазначения.ТекущаяДатаПользователя();
	ИННиОГРН = Обработки.РегистрацияОрганизации.ИННиОГРН(Организация, ДатаСоставления);
	
	ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР = ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР();
	ВыбраннаяФорма = РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
		ДатаСоставления,
		ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР);
	
	ВыдатьНаБумажномНосителе = Истина;
	ТекущийЭтап = ШагОсновное();
	
	РегистрирующийОрганАдресНаКарте        = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	РегистрирующийОрганПрежнийАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	МФЦАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	Элементы.УплатаГоспошлиныЗаголовокДекорация.Заголовок = СтрШаблон(НСтр("ru = 'Оплатите госпошлину %1 руб.'"),
		РегистрацияОрганизацииКлиентСервер.СуммаПошлиныЗаПрекращениеДеятельностиИП());
	
	ПодачаДокументовВЭлектронномВидеДоступна = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПоддерживаетсяФормированиеПакетаДляВнесенияИзмененийВЕГРЮЛ();
	СписокНалоговыхОрганов = РегистрыСведений.РегистрирующиеНалоговыеОрганы.СписокРегистрирующихОрганов();
	Элементы.РегистрирующийОрганСписок.СписокВыбора.Очистить();
	
	Для Каждого ЗначениеСписка Из СписокНалоговыхОрганов Цикл
		Элементы.РегистрирующийОрганСписок.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
	УстановитьФорматОтправкиДокументов();
	
	Если ПодачаДокументовВЭлектронномВидеДоступна Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
	Иначе
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	УстановитьКодРегистрирующегоОргана();
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодНалоговогоОргана");
	РегистрирующийОрган = Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(КодНалоговогоОргана, Ложь);
	
	РегистрирующийОрганНаименование = РегистрирующийОрган.Наименование;
	РегистрирующийОрганАдрес = РегистрирующийОрган.Адрес;
	РегистрирующийОрганТелефон = РегистрирующийОрган.Телефон;
	РегистрирующийОрганИнформация = РегистрирующийОрган.Информация;
	
	УстановитьПредставлениеПрикрепленныхФайлов();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущийЭтап = ШагОсновное() Тогда
		
		// Способ подачи документов
		Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран способ подачи документов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособПодачиДокументов", , Отказ);
		КонецЕсли;
		
		Если Не РегистрацияОрганизацииСервер.КонтанктнаяИнформацияПодтверждена(
			ЭтотОбъект,
			ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительТелефонПредставление")) Тогда
			
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноОнлайнПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовИФНСЛичноПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовМФЦличноПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаАдресИФНСНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура МФЦАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеБлижайшийМФЦ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеПриИзменении(Элемент)
	
	РегистрацияОрганизацииКлиент.ЗаявительТелефонПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
	ТелефонЗаявителяПриИзменении(ЗаявительТелефонПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(Организация);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.Телефон);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗаявительТелефонЗначениеJSON);
	ПараметрыОткрытия.Вставить("Представление", ЗаявительТелефонПредставление);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаявительТелефонЗначениеJSON = ВыбранноеЗначение.Значение;
	ЗаявительТелефонПредставление = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительEMailПредставлениеПриИзменении(Элемент)
	
	ЗаявительEMailПриИзменении();
	
	РегистрацияОрганизацииКлиент.ЗаявительПочтаПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительEMailПриИзменении()
	
	ЗаявительEMailПредставление = СокрЛП(ЗаявительEMailПредставление);
	Если ПустаяСтрока(ЗаявительEMailПредставление) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаявительEMailЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(Организация);
	
	// Формируем внутренние значения полей по тексту и параметрам формирования
	ЗаявительEMailЗначениеJSON =
		КонтактнаяИнформацияПоПредставлению(ЗаявительEMailПредставление, ПараметрыКонтактнойИнформации.Email);
	
	КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияТелефона = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Телефон", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияПочты = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Почта", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
	КодПодтвержденияТелефона = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияПочтаНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляПочты = Неопределено;
	КодПодтвержденияПочты = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОПрекращенииДеятельностиНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Заявление) Тогда
		
		РеквизитыЗаявления = РеквизитыЗаявления(Заявление);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Заявление);
		ПараметрыФормы.Вставить("Организация", РеквизитыЗаявления.Организация);
		ФормаОтчета = ПолучитьФорму(РеквизитыЗаявления.ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
		Если ДоступнаПечатьPDF417(ВыбраннаяФорма) Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		Иначе
			ИмяОтчета = ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР();
			РегистрацияОрганизацииКлиент.ОткрытьФормуПредварительногоПросмотраЗаявленияБезДвумерногоКода(
				ФормаОтчета,
				ИмяОтчета,
				СтрШаблон(НСтр("ru = '%1.pdf'"), Элемент.Заголовок));
		КонецЕсли;
		
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 не создано'"), Элемент.Заголовок);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИнструкциюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ОткрытьПрисоединенныйКЗаявлениюФайл(
		Заявление,
		"ИнструкцияПоПрекращениюДеятельностиИП",
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганКодПриИзменении(Элемент)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганКодПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганСписокАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганСписокАвтоПодбор(ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	РегистрацияОрганизацииКлиент.ОткрытьПрисоединенныйКЗаявлениюФайл(
		Заявление,
		"КвитанцияНаОплатуГоспошлины",
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПодписиДокументовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ОткрытьЖурналРегистрацииПриОшибкиПодписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныеДокументыЗначениеНажатие(Элемент)
	
	ДанныеФайла = РегистрацияОрганизацииВызовСервера.ДанныеФайлаДляОткрытия(
		ПодписанныеДокументы,
		УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.СтатусОтправкиОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		Заявление,
		РегистрацияОрганизацииКлиентСервер.ТипФайлаЛистЗаписиЕГР(),
		УникальныйИдентификатор,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыслатьСМССКодом(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьПисьмоНаПочту(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаШагЗаявление(Команда)
	
	ЗаполнитьЗаявлениеНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаПредыдущийШаг(Команда)
	
	ТекущийЭтап = ШагОсновное();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированноеЗаявление(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Заявление, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СканЗаявлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, Заявление, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнойДокумент(Команда)
	
	ИмяНовогоЭлемента = ДобавитьИнойДокументНаСервере();
	
	Если ЗначениеЗаполнено(ИмяНовогоЭлемента) Тогда
		РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(
			ЭтотОбъект,
			Заявление,
			ИмяНовогоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументы(Команда)
	
	ПроверитьИПодписатьДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписанныеДокументы(Команда)
	
	ОчиститьПодписанныеДокументыИУстановитьКодРегистрирующегоОргана();
	Оповестить("ОбновитьСтатусЗаявленияНаГосРегистрацию", Организация, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйИнойДокумент(Команда)
	
	НомерДокумента = СтрЗаменить(ТекущийЭлемент.Имя, "ОчиститьОтсканированныйИнойДокумент", "");
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ИнойДокумент,
		НомерДокумента,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
	ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦ(Команда)
	
	ПоказатьНаКартеБлижайшийМФЦ(Элементы.ПоказатьБлижайшийМФЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ТекущийЭтап = ШагОсновное() Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.Основное;
		УправлениеСтраницейОсновное(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = ШагДокументы() Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.Документы;
		УправлениеСтраницейДокументы(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = ШагОжидание() Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.Ожидание;
		
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницейОсновное(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСпособПодачиДокументоЭлектронно.Видимость = Форма.ПодачаДокументовВЭлектронномВидеДоступна;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметрыКонтактнойИнформации(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницейДокументы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.УслугаКонсультации.Видимость = ОказываютсяУслугиКонсультации();
	
	ПодсказкаКЗаявлениям = РегистрацияОрганизацииКлиентСервер.ТекстПодсказкиКСформированнымДокументам(
		Форма.СпособПодачиДокументов,
		Форма.ФорматОтправкиДокументов,
		Форма.ДатаСоставления,
		Истина);
	Элементы.ЗаявлениеОПрекращенииДеятельностиДекорация.Подсказка = ПодсказкаКЗаявлениям;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		
		ПараметрыОтображения = ПараметрыОтображенияЭлементовФормы(Форма);
		Элементы.РегистрацияИзменений.Видимость = Ложь;
		Элементы.ИнструкцияПользователя.Видимость = Истина;
		РегистрацияОрганизацииКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(Форма, ПараметрыОтображения);
		
	Иначе
		
		// Уплата госпошлины
		УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
			Форма.ДатаСоставления,
			Форма.СпособПодачиДокументов);
		
		Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не Форма.КвитанцияПодготовлена;
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость = Форма.КвитанцияПодготовлена;
	
		Элементы.ЗаголовокПакетДокументов.Заголовок = Нстр("ru = 'Документы готовы. Проверьте их и распечатайте.'");
		Элементы.ПодписьДокументовЭЦП.Видимость = Ложь;
		Элементы.РегистрацияИзмененийЭлектронно.Видимость = Ложь;
		Элементы.УплатаГоспошлины.Видимость = УплачиваетсяГоспошлинаЗаРегистрацию;
		Элементы.РегистрацияИзменений.Видимость = Истина;
		
		РегистрацияЧерезМФЦ = (Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично);
		
		Если РегистрацияЧерезМФЦ Тогда
			Элементы.ИнструкцияПользователя.Видимость = Истина;
			Элементы.Инструкция.Видимость = Ложь;
			Элементы.РегистрацияИзмененийМФЦ.Видимость = Истина;
			Элементы.РегистрацияИзмененийИФНС.Видимость = Ложь;
			Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Ложь;
			Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Ложь;
		Иначе
			Элементы.ИнструкцияПользователя.Видимость = Ложь;
			Элементы.Инструкция.Видимость = Истина;
			Элементы.РегистрацияИзмененийМФЦ.Видимость = Ложь;
			Элементы.РегистрацияИзмененийИФНС.Видимость = Истина;
			Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не Форма.КвитанцияПодготовлена;
			Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Истина;
			
			ОпределенРегистрирующийОрган = Не ПустаяСтрока(Форма.РегистрирующийОрганКод);
			Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган;
			Элементы.РегистрирующийОрганИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганИнформация);
			Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ОпределенРегистрирующийОрган;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ШагОсновное()
	
	Возврат "Основное";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШагДокументы()
	
	Возврат "Документы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШагОжидание()
	
	Возврат "Ожидание";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ТекущийЭтап = ШагДокументы() Тогда
		
		Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) 
			И Не ЗначениеЗаполнено(Форма.ПодписанныеДокументы) Тогда
			
			Если Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
				Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Истина;
				Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
			Иначе
				Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Ложь;
				Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
			
			Элементы.Готово.КнопкаПоУмолчанию = Ложь;
			
		Иначе
			Элементы.Готово.КнопкаПоУмолчанию = Истина;
			Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ЗаполнитьЗаявление.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтображенияЭлементовФормы(Форма)
	
	Результат = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде();
	Результат.Заявление = Форма.Заявление;
	Результат.ДатаСоставления = Форма.ДатаСоставления;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОказываютсяУслугиКонсультации()
	
	Возврат Обработки.РегистрацияОрганизации.ОказываютсяУслугиКонсультации();
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыЗаявления(Знач Заявление)
	
	РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявление, "Организация, ИмяОтчета, ИмяФормы");
	РеквизитыЗаявления.Вставить("ПолноеИмяФормы",
		СтрШаблон("Отчет.%1.Форма.%2", РеквизитыЗаявления.ИмяОтчета, РеквизитыЗаявления.ИмяФормы));
	
	Возврат РеквизитыЗаявления;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ВыбраннаяФорма)
	
	Возврат Отчеты[ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР()].ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяОбъектаЗаявлениеРегистрацииИзмененийЕГР()
	
	КодыФорм = Обработки.РегистрацияОрганизации.КодыФормЗаявлений();
	ИмяОтчета = Обработки.РегистрацияОрганизации.ИмяРегламентированногоУведомления(КодыФорм.ЗаявлениеОПрекращенииДеятельностиИП);
	
	Возврат ИмяОтчета;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматОтправкиДокументов()
	
	ДоступныеФорматы = РегистрацияОрганизацииСервер.ДоступныеФорматыОтправкиДокументов();
	ДоступнаПечатьPDF417 = ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
	Для Каждого ТекущаяСтрока Из ДоступныеФорматы Цикл
		
		ИмяЭлемента = СтрШаблон("ФорматОтправкиДокументов%1", ТекущаяСтрока.Порядок);
		
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяЭлемента].Подсказка = ТекущаяСтрока.Подсказка;
		Элементы[ИмяЭлемента].СписокВыбора.Очистить();
		Элементы[ИмяЭлемента].СписокВыбора.Добавить(ТекущаяСтрока.Тип, ТекущаяСтрока.Наименование);
		
		Если ТекущаяСтрока.Тип = "XML" Тогда
			Элементы[ИмяЭлемента].Доступность = ДоступнаПечатьPDF417;
			Если Не ДоступнаПечатьPDF417 Тогда
				Элементы[ИмяЭлемента].Подсказка = НСтр("ru = 'Пока формат выгрузки не опубликован.
					|Вы можете отправить заявление в виде отсканированного документа.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ФорматОтправкиДокументов) Или Не ДоступнаПечатьPDF417 Тогда
		ФорматОтправкиДокументов = РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Телефон()
	
	Если ТребуетсяИсправлениеНомераТелефонаЗаявителя(ЗаявительТелефонПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьНомерТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительТелефонПредставление"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Почта()
	
	Если ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(ЗаявительEMailПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьАдресЭлектроннойПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительEMailПредставление"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Телефон()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительТелефонПредставление"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Почта()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительEMailПредставление"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Телефон()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Почта()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефона;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияПочты;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Телефон(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Почта(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СканИнойДокументНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, Заявление, Элемент.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеПараметрыКонтактнойИнформации(Форма, ИмяТекущегоЭлемента = "")
	
	Возврат РегистрацияОрганизацииКлиентСервер.ДополнительныеПараметрыКонтактнойИнформации(
		Форма.ЗаявительТелефонПредставление,
		Форма.ЗаявительEMailПредставление,
		"ЗаявительТелефонПредставление",
		"ЗаявительEMailПредставление",
		ИмяТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(АдресЭлектроннойПочты)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительEMailПредставление", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительEMailПредставление", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеНомераТелефонаЗаявителя(НомерТелефона)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительТелефонПредставление", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефона)
		Или Не ЗначениеЗаполнено(ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефона)) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительТелефонПредставление", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ТелефонЗаявителяПриИзменении(Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаявительТелефонПредставление = "";
		ЗаявительТелефонЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(Организация);
	
	// Формируем внутренние значения полей по тексту и параметрам формирования
	Телефон = ОрганизацииФормыКлиентСервер.ТелефонДляЗаявления(Текст);
	ЗаявительТелефонПредставление = Телефон;
	ЗаявительТелефонЗначениеJSON = КонтактнаяИнформацияПоПредставлению(Телефон, ПараметрыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПолученияКонтактнойИнформацииЗаявителя(Организация)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Владелец", Неопределено);
	Параметры.Вставить("EMail", Неопределено);
	Параметры.Вставить("АдресПрописки", Неопределено);
	Параметры.Вставить("АдресДляИнформирования", Неопределено);
	Параметры.Вставить("Телефон", Неопределено);
	
	Параметры.Владелец = Организация;
	Параметры.Email =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailОрганизации");
	Параметры.АдресПрописки =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
	Параметры.Телефон =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации");
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач Представление, Знач ВидКонтактнойИнформации)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьФормуНаСервере()
	
	РеквизитыИП = Новый Массив;
	РеквизитыИП.Добавить("ИННРук");
	РеквизитыИП.Добавить("АдрПрописки_JSON");
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаСоставления,
		РеквизитыИП);
	
	ИННЗаявителя = СведенияОбОрганизации.ИННРук;
	ЗаявительАдресПропискиЗначениеJSON = СведенияОбОрганизации.АдрПрописки_JSON;
	
	Если ЗначениеЗаполнено(Заявление) Тогда
		
		РеквизитДанныеУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявление, "ДанныеУведомления");
		Если РеквизитДанныеУведомления <> Неопределено Тогда
			
			ДанныеУведомления = РеквизитДанныеУведомления.Получить();
			ДанныеПомощника = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУведомления, "ДанныеПомощникаЗаполнения");
			
			Если ЗначениеЗаполнено(ДанныеПомощника) Тогда
				
				ЗаявительТелефонЗначениеJSON = ДанныеПомощника.ДанныеЗаявителя.ТелефонРабочийЗначениеJSON;
				ЗаявительТелефонПредставление = ДанныеПомощника.ДанныеЗаявителя.ТелефонРабочийПредставление;
				
				ЗаявительEMailЗначениеJSON = ДанныеПомощника.ДанныеЗаявителя.EMailЗначениеJSON;
				ЗаявительEMailПредставление = ДанныеПомощника.ДанныеЗаявителя.EMailЗначениеПредставление;
				
				ВыдатьНаБумажномНосителе = ДанныеПомощника.ВыдатьНаБумажномНосителе;
				Если Не ДоступнаПечатьPDF417(ВыбраннаяФорма) Тогда
					ФорматОтправкиДокументов = РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию();
				Иначе
					ФорматОтправкиДокументов = ДанныеПомощника.ФорматОтправкиДокументов;
				КонецЕсли;
				СпособПодачиДокументов = ДанныеПомощника.СпособПодачиДокументов;
				ЭлектроннаяПочтаПодтверждена = ДанныеПомощника.ЭлектроннаяПочтаПодтверждена;
				НомерТелефонаПодтвержден = ДанныеПомощника.НомерТелефонаПодтвержден;
				
				ТекущийЭтап = ШагДокументы();
				
				ДокументКвитанция = РегистрацияОрганизацииВызовСервера.ДокументПоИдентификатору(
					Заявление,
					"КвитанцияНаОплатуГоспошлины",
					УникальныйИдентификатор);
				КвитанцияПодготовлена = ЗначениеЗаполнено(ДокументКвитанция);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(Организация);
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Организация, , , Ложь);
		
		// Телефон
		ТелефонЗаявителя = ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.Телефон);
		ЗаявительТелефонЗначениеJSON = ТелефонЗаявителя.ЗначениеJSON;
		ЗаявительТелефонПредставление = ТелефонЗаявителя.Представление;
		
		// E-mail
		EMailЗаявителя = ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.Email);
		ЗаявительEMailЗначениеJSON = EMailЗаявителя.ЗначениеJSON;
		ЗаявительEMailПредставление = EMailЗаявителя.Представление;
	
	КонецЕсли;
	
	РегистрацияОрганизацииСервер.УстановитьПросмотрЭлементовФормы(
		ЭтотОбъект,
		Не РегистрацияОрганизацииСервер.ДоступенПомощникРегистрацииНовогоБизнеса());
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ВидКонтактнойИнформации)
	
	Результат = Новый Структура("ЗначениеJSON, Представление", "", "");
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	
	КонтактнаяИнформацияПоВиду = КонтактнаяИнформацияОбъекта.Скопировать(Отбор);
	Если КонтактнаяИнформацияПоВиду.Количество() > 0 Тогда
		КонтактнаяИнформацияПоВиду.Сортировать("Дата УБЫВ");
		Результат.ЗначениеJSON = КонтактнаяИнформацияПоВиду[0].Значение;
		Результат.Представление = КонтактнаяИнформацияПоВиду[0].Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПредставлениеПрикрепленныхФайлов()
	
	Если Не РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииСервер.УстановитьПредставлениеПрикрепленныхФайлов(ЭтотОбъект, Заявление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКартеБлижайшийМФЦ(Элемент)
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(ЗаявительАдресПропискиЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

#Область СозданиеЗаявления

&НаСервере
Функция ДанныеПомощникаЗаполнения()
	
	
	Результат = Обработки.РегистрацияОрганизации.НовыеДанныеПомощникаЗаполненияЗаявленияОПрекращенииДеятельностиИП();
	
	// Данные заявления
	Результат.Организация = Организация;
	Результат.ДатаСоставления = ДатаСоставления;
	Результат.СпособПодачиДокументов = СпособПодачиДокументов;
	Результат.ВыдатьНаБумажномНосителе = ВыдатьНаБумажномНосителе;
	Результат.НомерТелефонаПодтвержден = НомерТелефонаПодтвержден;
	Результат.ЭлектроннаяПочтаПодтверждена = ЭлектроннаяПочтаПодтверждена;
	Результат.ФорматОтправкиДокументов = ФорматОтправкиДокументов;
	
	Результат.РегистрирующийОрган.Наименование = РегистрирующийОрганНаименование;
	Результат.РегистрирующийОрган.Код = РегистрирующийОрганКод;
	Результат.РегистрирующийОрган.Адрес = РегистрирующийОрганАдрес;
	Результат.РегистрирующийОрган.Телефон = РегистрирующийОрганТелефон;
	Результат.РегистрирующийОрган.Информация = РегистрирующийОрганИнформация;
	
	РеквизитыОрганизации = Новый Массив;
	РеквизитыОрганизации.Добавить("ОГРН");
	РеквизитыОрганизации.Добавить("ИННФЛ");
	РеквизитыОрганизации.Добавить("ФамилияИП");
	РеквизитыОрганизации.Добавить("ОтчествоИП");
	РеквизитыОрганизации.Добавить("ИмяИП");
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаСоставления,
		РеквизитыОрганизации);
	
	Результат.ДанныеЗаявителя.Фамилия = СведенияОбОрганизации.ФамилияИП;
	Результат.ДанныеЗаявителя.Отчество = СведенияОбОрганизации.ОтчествоИП;
	Результат.ДанныеЗаявителя.Имя = СведенияОбОрганизации.ИмяИП;
	Результат.ДанныеЗаявителя.ОГРН = СведенияОбОрганизации.ОГРН;
	Результат.ДанныеЗаявителя.ИНН = СведенияОбОрганизации.ИННФЛ;
	Результат.ДанныеЗаявителя.ТелефонРабочийЗначениеJSON = ЗаявительТелефонЗначениеJSON;
	Результат.ДанныеЗаявителя.ТелефонРабочийПредставление = ЗаявительТелефонПредставление;
	Результат.ДанныеЗаявителя.EMailЗначениеJSON = ЗаявительEMailЗначениеJSON;
	Результат.ДанныеЗаявителя.EMailЗначениеПредставление = ЗаявительEMailПредставление;
	Результат.ДанныеЗаявителя.АдресПропискиЗначениеJSON = ЗаявительАдресПропискиЗначениеJSON;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаявлениеНаКлиенте(ЗакрытьФормуПослеВыполнения = Ложь)
	
	Если Не ЗакрытьФормуПослеВыполнения И Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьЗаявлениеВФоне();
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		ПоказатьИндикаторОжидания();
		
		ПараметрыОповещения = Новый Структура("ЗакрытьФормуПослеВыполнения", ЗакрытьФормуПослеВыполнения);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПослеЗаполненияЗаявления", ЭтотОбъект, ПараметрыОповещения);
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, НастройкиОжидания);
	Иначе
		ТекущийЭтап = ШагОсновное();
		УправлениеФормой(ЭтотОбъект);
		ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет созданное ранее заявление с учетом сведений,
// указанных на закладке Заявление
//
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция ЗаполнитьЗаявлениеВФоне()
	
	ИмяПроцедуры = "Обработки.РегистрацияОрганизации.СоздатьЗаявлениеОПрекращенииДеятельностиИП";
	
	ПараметрыПроцедуры = Обработки.РегистрацияОрганизации.НовыеПараметрыСозданияЗаявленияОПрекращенииДеятельностиИП();
	ПараметрыПроцедуры.Модифицированность = Модифицированность;
	ПараметрыПроцедуры.Заявление = Заявление;
	ПараметрыПроцедуры.ДанныеПомощникаЗаполнения = ДанныеПомощникаЗаполнения();
	ПараметрыПроцедуры.ИмяФормы = ВыбраннаяФорма;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для снятия ИП с учета'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеЗаполненияЗаявления(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	ЗакрытьФорму = (ДлительнаяОперация.Статус = "Выполнено") И ДополнительныеПараметры.ЗакрытьФормуПослеВыполнения;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Результат = ОбработатьРезультатСозданияЗаполненияЗаявления(ДлительнаяОперация.АдресРезультата);
		Если Результат <> Неопределено Тогда
			ОповеститьОбИзменении(Результат);
		КонецЕсли;
		Модифицированность = Ложь;
		ТекущийЭтап = ШагДокументы();
		Оповестить("ОбновитьСтатусЗаявленияНаГосРегистрацию", Организация, ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	Иначе
		ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатСозданияЗаполненияЗаявления(АдресРезультата)
	
	Результат = Неопределено;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Свойство("Заявление", Заявление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заявление) Тогда
		
		Заявление = РезультатВыполнения.Заявление;
		КвитанцияПодготовлена = РезультатВыполнения.КвитанцияПодготовлена;
		ЗаявлениеСостояниеОтправки = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Заявление);
		Результат = Заявление;
		
		ВидыПрикрепленныхДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
		ПараметрыОтображения = ПараметрыОтображенияЭлементовФормы(ЭтотОбъект);
		
		Если Не ЗаявлениеСостояниеОтправки.ВРаботе Тогда
			// Если документы подаются лично в ИФНС или МФЦ, то сразу в списке создаем задачу об указании даты закрытия
			ОбновитьИЗаполнитьЗадачиСнятияСУчета(Организация);
		КонецЕсли;
		
		Если Модифицированность Тогда
			Для Каждого ТекущийВидДокумента Из ВидыПрикрепленныхДокументов Цикл
				
				РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
					ЭтотОбъект,
					ТекущийВидДокумента.Значение, ,
					ПараметрыОтображения);
				
				Если ТекущийВидДокумента.Значение = ВидыПрикрепленныхДокументов.ИнойДокумент Тогда
					РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация)
	
	ТекстОшибки = НСтр("ru = 'Ошибка при создании пакета документов:
	|%1'");
	
	ВызватьИсключение СтрШаблон(ТекстОшибки, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторОжидания()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.Ожидание;
	
	// Запускаем индикатор с задержкой, достаточной для загрузки в веб-кленте
	ЗапуститьИндикаторОжидания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьИндикаторОжидания()
	
	Если ТекущийЭтап = ШагДокументы() Тогда
		ОтключитьОбработчикОжидания("ЗапуститьИндикаторОжидания");
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = ШагОжидание();
	ИндикаторОжидания = Элементы.ДлительнаяОперацияКартинка;
	
	Если ИндикаторОжидания.Видимость Тогда
		ИндикаторОжидания.Видимость = Ложь;
		ПодключитьОбработчикОжидания("ЗапуститьИндикаторОжидания", 0.5, Истина);
	Иначе
		ИндикаторОжидания.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодписаниеДокументов

&НаСервере
Функция ДобавитьИнойДокументНаСервере(НомерИногоДокумента = "")
	
	Возврат РегистрацияОрганизацииСервер.ДобавитьИнойДокумент(ЭтотОбъект, НомерИногоДокумента);
	
КонецФункции

&НаСервере
Процедура ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента)
	
	РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект, НомерДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтсканированногоФайлаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаЗавершение(
		ЭтотОбъект,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		РезультатВыбора,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИПодписатьДокументы()
	
	ПараметрыЗаявления = РегистрацияОрганизацииКлиент.НовыеПараметрыПодписанияЗаявления();
	ПараметрыЗаявления.EMailЗаявителя = ЗаявительEMailПредставление;
	ПараметрыЗаявления.Заявление = Заявление;
	ПараметрыЗаявления.ИННЗаявителя = ИННЗаявителя;
	ПараметрыЗаявления.ВидДокумента = "ЗаявлениеПоФормеР26001";
	
	ПараметрыЗаявления.ЗаявлениеВXML = РегистрацияОрганизацииКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(
		ДатаСоставления,
		СпособПодачиДокументов,
		ФорматОтправкиДокументов);
	
	РегистрацияОрганизацииКлиент.ПроверитьИПодписатьДокументы(ЭтотОбъект, ПараметрыЗаявления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументыЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы)
		И РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		
		ОбновитьИЗаполнитьЗадачиСнятияСУчета(Организация);
		Оповестить("ОбновитьСтатусЗаявленияНаГосРегистрацию", Организация, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры)
	
	РегистрацияОрганизацииСервер.ОбработатьРезультатПодписанияДокументов(
		ЭтотОбъект,
		РезультатПодписания,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы)
		И СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно Тогда
		// При подаче заявления через личный кабинет статус устанавливается вручную
		РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(
			Заявление,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодписанныеДокументыИУстановитьКодРегистрирующегоОргана()
	
	УстановитьКодРегистрирующегоОргана();
	ОчиститьПодписанныеДокументыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодРегистрирующегоОргана()
	
	РегистрирующийОрганКод = Обработки.РегистрацияОрганизации.КодРегистрирующегоОргана(
		ЗаявительАдресПропискиЗначениеJSON,
		ЗначениеРеквизитаОбъекта(Организация, "ИНН"),
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодписанныеДокументыНаСервере()
	
	РегистрацияОрганизацииВызовСервера.УдалитьПрикрепленныеФайлы(
		Заявление,
		РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
	
	ПодписанныеДокументы = Неопределено;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИЗаполнитьЗадачиСнятияСУчета(Организация)
	
	ПараметрыВыполнения = Новый Структура;
	
	ПараметрыВыполнения.Вставить("Организация", Организация);
	ПараметрыВыполнения.Вставить("ОбновитьИЗаполнитьЗадачиСнятияСУчета", Истина);
	
	АдресХранилищаОбновленияЗадач = Неопределено;
	КалендарьБухгалтера.ЗаполнитьВФоне(ПараметрыВыполнения, АдресХранилищаОбновленияЗадач);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
