
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуетсяСервисРегистрации = Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации();
	Параметры.Свойство("Заявление", ЗаявлениеОРегистрации);
	Параметры.Свойство("НавигацияПараметрФормы", НавигацияПараметрФормы);
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	ВыдатьНаБумажномНосителе = Истина;
	
	УстановитьЗначенияПоУмолчанию();
	ПодготовитьФормуНаСервере();
	
	УстановитьУсловноеОформление();
	
	ВидОрганизации = "ИндивидуальныйПредприниматель";
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	НалоговаяИнспекцияАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	СсылкаАдресМФЦНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Истина);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "КонтактныеДанные";
	ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме = РазмещеныНаФорме;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Организация, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// В случае формирования заявления до даты изменений схемы подачи документов
	// при открытии формы заново перенаправляем пользователя на шаг "Заявление"
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		
		ДатаЗаявления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявлениеОРегистрации, "Дата");
		Если Не РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаЗаявления)
			И РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСозданияЗаявления) Тогда
		
			НавигацияПараметрФормы = "Заявление";
			ДанныеМодифицированы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	ПроверитьСоответствиеТребованиямИНН();
	// Восстановим признак модифицированности формы
	// для того, чтобы была выполнена запись объекта при переходе к следующему шагу.
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Все данные сохраняются в настройках формы и при последующем открытии восстанавливаются.
	// Поэтому сохраним модифицированность формы, чтобы при следующем открытии помощника восстановить форму.
	// В базу данные запишутся, после того как пользователь двинется дальше по помощнику.
	ДанныеМодифицированы = Модифицированность;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		Если Параметр = "Заявление" Тогда
			ИзменитьЭтап(1);
		ИначеЕсли Параметр = "Документы" Тогда
			ИзменитьЭтап(3);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершенаРаботаПомощникаНачалаРаботы" Тогда
		
		// Работа помощника начала работы может быть завершена в другом окне (например, из окна БыстрыйСтарт).
		// В этом случае нужно закрыть окно помощника регистрации. Но пользователь мог начать изменять значение какого-нибудь
		// текстового поля и при закрытии окна сработает обработчик "ПриИзменении" и форма станет Модифицированной и не сможет
		// закрыться без вопроса. Для этого изменяем текущий элемент и снимаем модифицированность.
		ЭтотОбъект.ТекущийЭлемент = Элементы.СформироватьДокументыКнопка;
		ЭтотОбъект.Модифицированность = Ложь;
		Если ЭтотОбъект.Открыта() Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьСтатусЗаявленияНаГосРегистрацию" И Параметр = Организация.Ссылка Тогда
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Персональные данные
	
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	
	Если КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
	КонецЕсли;
	
	// ИНН
	
	РезультатПроверкиИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Организация.ИНН, Ложь);
	Если ЗначениеЗаполнено(РезультатПроверкиИНН.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиИНН.ОписаниеОшибки, , "Организация.ИНН", , Отказ);
	КонецЕсли;
	
	// Контактные данные
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Организация, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Способ подачи документов
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ подачи документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособПодачиДокументов", , Отказ);
	КонецЕсли;
	
	Если СпособПодачиДокументов = "ИФНСпредставитель" 
		И Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Представитель не заполнен!'"),, "ПредставлениеПредставителя", , Отказ);
		
	КонецЕсли;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов)
		И Не ЗначениеЗаполнено(Организация.ИНН) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "ИНН");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Организация.ИНН", , Отказ);
	КонецЕсли;
	
	Если Не РегистрацияОрганизацииСервер.КонтанктнаяИнформацияПодтверждена(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонОрганизации")) Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СохранитьДанныеЗаявления();
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьСпособПодачиДокументовПоУмолчанию();
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ФизическоеЛицо.Пол, Организация.ОтчествоИП);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(
		ЭтотОбъект,
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации,
		Модифицированность,
		СтандартнаяОбработка,
		Новый Структура("Заголовок", Элемент.Заголовок));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	РегистрацияОрганизацииКлиент.ЗаявительТелефонПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEmailОрганизации = СокрЛП(КонтактнаяИнформацияПолеEmailОрганизации);
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	РегистрацияОрганизацииКлиент.ЗаявительПочтаПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНомерПаспортаПриИзменении(Элемент)
	
	МассивПодстрок = СтрРазделить(СерияНомерПаспорта, " ", Истина);
	
	Если МассивПодстрок.Количество() = 3 Тогда
		ПаспортныеДанные.Номер = МассивПодстрок[2];
		МассивПодстрок.Удалить(2);
	Иначе
		ПаспортныеДанные.Номер = "";
	КонецЕсли;
	
	ПаспортныеДанные.Серия = СтрСоединить(МассивПодстрок, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПаспортныеДанные.Период) И ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ПаспортныеДанные.Период = ПаспортныеДанные.ДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Организация.ИНН = СокрЛП(Организация.ИНН);
	
	ФизическоеЛицо.ИНН = Организация.ИНН;
	
	ИННОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеИндивидуальногоПредпринимателя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаАдресИФНСНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаАдресМФЦНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеБлижайшийМФЦ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеОРегистрацииИПНажатие(Элемент)
	
	ЗаявлениеРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаУведомлениеОПереходеНаУСННажатие(Элемент)
	
	УведомлениеОПереходенНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеНаПолучениеПатентаНажатие(Элемент)
	
	ЗаявлениеПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнструкцияРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = "ИФНСпредставитель";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
			РегистрацияВНалоговомОргане[ТекРеквизит.Значение] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("СкрытьДоверенностьЭДО", Истина);
	ПараметрыФормы.Вставить("ИмяФормы", "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителяСервисеРегистрации");
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаДокументаОснованияДляПроживанияВРФ(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БессрочныйВидНаЖительствоПриИзменении(Элемент)
	
	ОбработатьИзменениеБессрочныйВидНаЖительство(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияИПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ФамилияИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияИПОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ФамилияИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ИмяИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИПОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ИмяИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ОтчествоИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИПОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Организация.ОтчествоИП", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоМестоРожденияПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Место рождения'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ФизическоеЛицо.МестоРожденияПредставление", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоМестоРожденияПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Место рождения'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ФизическоеЛицо.МестоРожденияПредставление", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКемВыданАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбработатьИзменениеКемВыданПаспорт(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКемВыданОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьИзменениеКемВыданПаспорт(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КемВыданИностранныйПаспортАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбработатьИзменениеКемВыданПаспорт(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КемВыданИностранныйПаспортОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьИзменениеКемВыданПаспорт(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияЛатиницейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ПаспортныеДанные.ФамилияЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияЛатиницейОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ПаспортныеДанные.ФамилияЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛатиницейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ПаспортныеДанные.ИмяЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛатиницейОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ПаспортныеДанные.ИмяЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоЛатиницейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ОтчествоЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоЛатиницейОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "ОтчествоЛатиницей", ЗаголовокЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	
	ОбработатьИзменениеСтраныГражданства(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияТелефона = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Телефон", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияПочты = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Почта", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
	КодПодтвержденияТелефона = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияПочтаНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляПочты = Неопределено;
	КодПодтвержденияПочты = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСозданияЗаявленияПриИзменении(Элемент)
	
	ДатаСозданияЗаявленияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ФормированиеДокументовВЭлектронномВиде

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноОнлайнПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СканЗаявлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканЗаявлениеНаПолучениеПатентаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканУведомлениеОПереходеНаУСННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканДокументПодтверждающийЛичностьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканДокументПодтверждающийАдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганКодПриИзменении(Элемент)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганКодПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганСписокАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганСписокАвтоПодбор(ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныеДокументыЗначениеНажатие(Элемент)
	
	ДанныеФайла = РегистрацияОрганизацииВызовСервера.ДанныеФайлаДляОткрытия(
		ПодписанныеДокументы,
		УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПодписиДокументовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ОткрытьЖурналРегистрацииПриОшибкиПодписания();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.СтатусОтправкиОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		ЗаявлениеОРегистрации,
		РегистрацияОрганизацииКлиентСервер.ТипФайлаЛистЗаписиЕГР(Организация.ЮридическоеФизическоеЛицо),
		УникальныйИдентификатор,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыслатьСМССКодом(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьПисьмоНаПочту(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	СохранитьДанныеЗаявления();
	
	Если Организация.Ссылка.Пустая() Или Модифицированность Тогда
		
		ДлительнаяОперация = ЗаписатьДанныеВФоне();
		
		Если ДлительнаяОперация = Неопределено Тогда
			// Ошибка проверки заполнения.
			Возврат;
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
				РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(Организация.Ссылка);
				Если ЗначениеЗаполнено(РеквизитыЗаявления) Тогда
					ЗаявлениеОРегистрации = РеквизитыЗаявления.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
				// Для электронного способа подачи документов предварительно проверяем выгрузку отчета
				ОшибкаПроверкиЗаявления = РегистрацияОрганизацииКлиентСервер.ОшибкаПроверкиВыгрузкиЗаявления(ЗаявлениеОРегистрации);
				Если ЗначениеЗаполнено(ОшибкаПроверкиЗаявления) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаПроверкиЗаявления, ЗаявлениеОРегистрации);
					ИзменитьЭтап(1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		
			ИзменитьЭтап(2);
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
			
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап(3);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВФоне()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГражданинРФ = Гражданство = КодРоссии;
	ИностранныйГражданин = Не ГражданинРФ
		И Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	
	ОбновитьДанныеДокументов(ГражданинРФ, ИностранныйГражданин);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для регистрации организации'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ПараметрыФормированияДокументов = ПараметрыФормированияДокументов();
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РегистрацияОрганизации.СформироватьДокументыИПВФоне", ПараметрыФормированияДокументов, НастройкиЗапуска);
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	ПараметрыФормированияДокументов = Новый Структура;
	
	// Организация
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка",                        Организация.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо",     Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ДанныеОрганизации.Вставить("ИндивидуальныйПредприниматель", ДанныеИндивидуальногоПредпринимателя());
	ДанныеОрганизации.Вставить("КодОКВЭД2",                     Организация.КодОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2",            Организация.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",      Организация.ДополнительныеКодыОКВЭД2);
	
	ДанныеОрганизации.Вставить("УчетнаяПолитика",           ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураУчетнойПолитики));
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", ДанныеРегистрацииВНалоговомОргане());
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ПараметрыФормированияДокументов.Вставить("СпособРегистрации", СпособРегистрации(СпособПодачиДокументов));
	ПараметрыФормированияДокументов.Вставить("СпособПодачиДокументов", СпособПодачиДокументов);
	ПараметрыФормированияДокументов.Вставить("ДатаСоставления", ДатаСозданияЗаявления);
	ПараметрыФормированияДокументов.Вставить("Представитель", РегистрацияВНалоговомОргане.Представитель);
	ПараметрыФормированияДокументов.Вставить("ДокументПредставителя", РегистрацияВНалоговомОргане.ДокументПредставителя);
	ПараметрыФормированияДокументов.Вставить("ЗаявлениеПатент", ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики));
	ПараметрыФормированияДокументов.Вставить("ОтчествоЛатиницей", ОтчествоЛатиницей);
	ПараметрыФормированияДокументов.Вставить("ВыдатьНаБумажномНосителе", ВыдатьНаБумажномНосителе);
	ПараметрыФормированияДокументов.Вставить("ФорматОтправкиДокументов", ФорматОтправкиДокументов);
	
	ДанныеПаспорта = Новый Структура;
	ДанныеПаспорта.Вставить("Серия", ПаспортныеДанные.Серия);
	ДанныеПаспорта.Вставить("Номер", ПаспортныеДанные.Номер);
	ПараметрыФормированияДокументов.Вставить("ДанныеПаспорта", ДанныеПаспорта);
	
	ДанныеОснованияДляПроживания = Новый Структура;
	ДанныеОснованияДляПроживания.Вставить("Серия", ДанныеОснованияДляПроживанияВРФ.Серия);
	ДанныеОснованияДляПроживания.Вставить("Номер", ДанныеОснованияДляПроживанияВРФ.Номер);
	ПараметрыФормированияДокументов.Вставить("ДанныеОснованияДляПроживания", ДанныеОснованияДляПроживания);
	
	Возврат ПараметрыФормированияДокументов;
	
КонецФункции

&НаСервере
Функция ДанныеИндивидуальногоПредпринимателя()
	
	ДанныеИндивидуальногоПредпринимателя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеИндивидуальногоПредпринимателя.Ссылка                     = ФизическоеЛицо.Ссылка;
	ДанныеИндивидуальногоПредпринимателя.Фамилия                    = Организация.ФамилияИП;
	ДанныеИндивидуальногоПредпринимателя.Имя                        = Организация.ИмяИП;
	ДанныеИндивидуальногоПредпринимателя.Отчество                   = Организация.ОтчествоИП;
	ДанныеИндивидуальногоПредпринимателя.Пол                        = ФизическоеЛицо.Пол;
	ДанныеИндивидуальногоПредпринимателя.ИНН                        = Организация.ИНН;
	ДанныеИндивидуальногоПредпринимателя.ДатаРождения               = ФизическоеЛицо.ДатаРождения;
	ДанныеИндивидуальногоПредпринимателя.МестоРожденияПредставление = ФизическоеЛицо.МестоРожденияПредставление;
	ДанныеИндивидуальногоПредпринимателя.ОтчествоЛатиницей          = ОтчествоЛатиницей;
	
	ДанныеИндивидуальногоПредпринимателя.АдресПропискиЗначениеJSON  =
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	ДанныеИндивидуальногоПредпринимателя.ТелефонРабочийЗначениеJSON =
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеТелефонОрганизации);
	
	ДанныеИндивидуальногоПредпринимателя.EMailЗначениеJSON =
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			КонтактнаяИнформацияПолеEmailОрганизации,
			Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	ГражданинРФ = Гражданство = КодРоссии;
	ИностранныйГражданин = Не ГражданинРФ
		И Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	
	Если ГражданинРФ Или ИностранныйГражданин Тогда
		ДанныеИндивидуальногоПредпринимателя.Гражданство =
			УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Гражданство);
	КонецЕсли;
	
	ОбновитьДанныеДокументов(ГражданинРФ, ИностранныйГражданин);
	ЗаполнитьЗначенияСвойств(ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные, ПаспортныеДанные);
	
	Если Не ГражданинРФ Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИндивидуальногоПредпринимателя.ДанныеОснованияДляПроживанияВРФ,
			ДанныеОснованияДляПроживанияВРФ);
		ДанныеИндивидуальногоПредпринимателя.ДанныеОснованияДляПроживанияВРФ.ВидДокумента = ВидДокумента;
	КонецЕсли;
	
	Возврат ДанныеИндивидуальногоПредпринимателя;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДокументов(ГражданинРФ, ИностранныйГражданин)
	
	Если ГражданинРФ Тогда
		СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(СерияНомерПаспорта);
		ПаспортныеДанные.Серия = СерияИНомерПаспорта.Серия;
		ПаспортныеДанные.Номер = СерияИНомерПаспорта.Номер;
	ИначеЕсли ИностранныйГражданин Тогда
		ПаспортныеДанные.Серия = "";
		ПаспортныеДанные.Номер = СерияНомерИностранногоПаспорта;
	КонецЕсли;
	
	Если Не ГражданинРФ Тогда
		СерияИНомерОснованияДляПроживанияВРФ = ДокументыФизическихЛицБП.СерияНомерДокументаРаздельно(
			СерияНомерОснованияДляПроживания);
		ДанныеОснованияДляПроживанияВРФ.Серия = СерияИНомерОснованияДляПроживанияВРФ.Серия;
		ДанныеОснованияДляПроживанияВРФ.Номер = СерияИНомерОснованияДляПроживанияВРФ.Номер;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРегистрацииВНалоговомОргане()
	
	ДанныеРегистрацииВНалоговомОргане = Обработки.РегистрацияОрганизации.НовыеДанныеРегистрацииВНалоговомОргане();
	АдресПропискиЗначениеПолей = ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(АдресПропискиЗначениеПолей);
	Если СведенияОНалоговомОргане <> Неопределено И ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
		ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
		ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО          = СведенияОНалоговомОргане.КодПоОКТМО;
		ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО          = СведенияОНалоговомОргане.КодПоОКАТО;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
		ДанныеРегистрацииВНалоговомОргане.Вставить(ТекРеквизит.Значение, РегистрацияВНалоговомОргане[ТекРеквизит.Значение]);
	КонецЦикла;
	
	Возврат ДанныеРегистрацииВНалоговомОргане;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизации(Команда)
	
	ИзменитьЭтап(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПодготовитьНачалоРаботы();
	ОбновитьИнтерфейс();
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	
	ОткрытьФормуНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииИП(Команда)
	
	ЗаявлениеРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеУСН(Команда)
	
	УведомлениеОПереходенНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПолучениеПатента(Команда)
	
	ЗаявлениеПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	АдресХранилища = КвитанцияНаОплатуГоспошлины(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Квитанция на оплату госпошлины.pdf'");
	
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦ(Команда)
	
	ПоказатьНаКартеБлижайшийМФЦ(Элементы.ПоказатьБлижайшийМФЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	СохранитьДанныеЗаявления();
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
	
КонецПроцедуры

#Область ПрикрепленныеДокументы

&НаКлиенте
Процедура ОчиститьОтсканированноеЗаявление(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Заявление, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканЗаявленияНаПолучениеПатента(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Патент, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканУведомленияОПереходеНаУСН(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().УведомлениеОПереходеНаУСН, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументПодтверждающийЛичность(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ДокументПодтверждающийЛичность, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументПодтверждающийАдрес(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ДокументПодтверждающийАдрес, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйИнойДокумент(Команда)
	
	НомерДокумента = СтрЗаменить(ТекущийЭлемент.Имя, "ОчиститьОтсканированныйИнойДокумент", "");
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ИнойДокумент,
		НомерДокумента,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
	ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнойДокумент(Команда)
	
	ИмяНовогоЭлемента = ДобавитьИнойДокументНаСервере();
	
	Если ЗначениеЗаполнено(ИмяНовогоЭлемента) Тогда
		РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(
			ЭтотОбъект,
			ЗаявлениеОРегистрации,
			ИмяНовогоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписанныеДокументы(Команда)
	
	ОчиститьПодписанныеДокументыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументы(Команда)
	
	ПроверитьИПодписатьДокументы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЕстьУведомлениеУСН = ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики);
	ЕстьПатент = ПодаетсяЗаявлениеНаПолучениеПатента(Форма.СтруктураУчетнойПолитики);
	
	РегистрацияЧерезМФЦ = (Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично);
	РегистрацияЧерезМФЦСпецрежим = РегистрацияЧерезМФЦ И (ЕстьУведомлениеУСН Или ЕстьПатент);
	
	ОпределенРегистрирующийОрган = ЗначениеЗаполнено(Форма.РегистрирующийОрганНаименование);
	
	Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.ПоказатьБлижайшийМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.РегистрирующийОрганИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганИнформация);
	
	Элементы.ГруппаУведомлениеОПереходеНаУСН.Видимость = ЕстьУведомлениеУСН;
	
	Если ЕстьУведомлениеУСН Тогда
		Если Форма.СтруктураУчетнойПолитики.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.АУСН") Тогда
			ТекстПодсказкиМФЦлично = НСтр("ru = 'Заявление о регистрации подается лично в МФЦ.
				|После регистрации в течение 30 дней нужно подать уведомление о переходе на АУСН через личный кабинет налогоплательщика.'");
		Иначе
			ТекстПодсказкиМФЦлично = НСтр("ru = 'Заявление о регистрации подается лично в МФЦ.
				|После регистрации в течение 30 дней нужно подать уведомление о переходе на УСН в Налоговую инспекцию.'");
		КонецЕсли;
	Иначе
		ТекстПодсказкиМФЦлично = НСтр("ru = 'Документы подаются лично в МФЦ'");
	КонецЕсли;
	Элементы.ГруппаМФЦлично.Подсказка = ТекстПодсказкиМФЦлично;
	
	Элементы.УслугаКонсультации.Видимость = ОказываютсяУслугиКонсультации();
	
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	ПараметрыПримененияАУСН = ПараметрыПримененияАУСН(Форма.Организация.Ссылка, Форма.ДатаСозданияЗаявления);
	Элементы.ПодачаУведомленийЗаголовокДекорацияИФНС.Заголовок = ПараметрыПримененияАУСН.Заголовок;
	Элементы.ПодачаУведомленияУСН.Заголовок = ПараметрыПримененияАУСН.ОписаниеШага;
	
	Если ПараметрыПримененияАУСН.Применяется Тогда
		Элементы.ГруппаПодачаУведомлений.Видимость = Истина;
		Элементы.ПодачаУведомленияУСН.Видимость = Истина;
		Элементы.ПодачаУведомленияУСНПатент.Видимость = Ложь;
		Элементы.НалоговаяИнспекция.Видимость = Ложь;
		Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость = Ложь;
		Элементы.УведомлениеОПереходеНаУНСПримечание.Заголовок = НСтр("ru = 'необязательно'");
	Иначе
		Элементы.ГруппаПодачаУведомлений.Видимость = РегистрацияЧерезМФЦСпецрежим;
		Элементы.ПодачаУведомленияУСН.Видимость = Не ЕстьПатент;
		Элементы.ПодачаУведомленияУСНПатент.Видимость = ЕстьПатент;
		Элементы.НалоговаяИнспекция.Видимость = ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование);
		Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость =
			Не ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование);
		Элементы.УведомлениеОПереходеНаУНСПримечание.Заголовок = НСтр("ru = 'распечатайте 2 экземпляра'");
	КонецЕсли;
	
	Элементы.ПодачаДокументовСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
	
	УведомлениеОСпецРежимеНалогообложения = НайтиЗаявлениеПолучениеПатента(
		Форма.Организация.Ссылка, Форма.СтруктураУчетнойПолитики);
		
	Форма.Элементы.ГруппаЗаявлениеНаПолучениеПатента.Видимость = УведомлениеОСпецРежимеНалогообложения <> Неопределено
		И ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка);
		
	ОбработатьИзменениеСтраныГражданства(Форма);
	ОбработатьИзменениеВидаДокументаОснованияДляПроживанияВРФ(Форма);
	ОбработатьИзменениеБессрочныйВидНаЖительство(Форма);
	
	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		Форма.ДатаСозданияЗаявления,
		Форма.СпособПодачиДокументов);
	
	ПодсказкаКЗаявлениям = РегистрацияОрганизацииКлиентСервер.ТекстПодсказкиКСформированнымДокументам(
		Форма.СпособПодачиДокументов,
		Форма.ФорматОтправкиДокументов,
		Форма.ДатаСозданияЗаявления,
		Истина);
	Элементы.ЗаявлениеОРегистрацииИППримечание.Заголовок = ПодсказкаКЗаявлениям;
	Элементы.ЗаявлениеНаПолучениеПатентаПримечание.Заголовок = ПодсказкаКЗаявлениям;
	Элементы.УведомлениеОПереходеНаУНСПримечание.Заголовок = ПодсказкаКЗаявлениям;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРегистрация Тогда
		
		Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
			
			Элементы.Инструкция.Видимость = Ложь;
			Элементы.ИнструкцияСпецрежимМФЦ.Видимость = Ложь;
			Элементы.ПодачаДокументов.Видимость = Ложь;
			
			РегистрацияОрганизацииКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(
				Форма,
				ПараметрыОтображенияЭлементовФормы(Форма));
			
			ГражданинРФ = (Форма.Гражданство = Форма.КодРоссии);
			ОтправлятьЗаявлениеВXMLФормате = РегистрацияОрганизацииКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(
				Форма.ДатаСозданияЗаявления,
				Форма.СпособПодачиДокументов,
				Форма.ФорматОтправкиДокументов);
				
			Если ОтправлятьЗаявлениеВXMLФормате И ГражданинРФ Тогда
				Элементы.ПодписьДокументовЭЦППодсказка.Заголовок =
					НСтр("ru = 'При необходимости прикрепите подписанные и отсканированные документы (формат файлов - BMP, JPEG, TIFF, PNG).
					|Подтверждающие документы могут потребоваться, если отсутствует постоянная регистрация, если заявитель несовершеннолетний и в других случаях.'");
			Иначе
				Элементы.ПодписьДокументовЭЦППодсказка.Заголовок =
					НСтр("ru = 'Прикрепите подписанные и отсканированные документы (формат файлов - BMP, JPEG, TIFF, PNG).
					|После загрузки файлов необходимо подписать документы электронной подписью.'");
			КонецЕсли;
			
			Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
			Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
			
		Иначе
			
			Элементы.ЗаголовокПакетДокументов.Заголовок = Нстр("ru = 'Документы готовы. Проверьте их, распечатайте, но не подписывайте.'");
			Элементы.ПодписьДокументовЭЦП.Видимость = Ложь;
			Элементы.РегистрацияИзмененийЭлектронно.Видимость = Ложь;
			Элементы.УплатаГоспошлины.Видимость = УплачиваетсяГоспошлинаЗаРегистрацию;
			Элементы.ПодачаДокументов.Видимость = Истина;
			
			Элементы.Инструкция.Видимость = Не РегистрацияЧерезМФЦСпецрежим;
			Элементы.ИнструкцияСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
			
			Элементы.ЗаявлениеОРегистрацииИППримечание.Заголовок = "";
			Элементы.ЗаявлениеНаПолучениеПатентаПримечание.Заголовок = "";
			
			Если УплачиваетсяГоспошлинаЗаРегистрацию Тогда
				Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
				Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
			Иначе
				Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап2;
				Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаГоспошлины = РегистрацияОрганизацииКлиентСервер.СуммаГосударственнойПошлиныЗаРегистрацию();
	ТекстПодсказкиИФНСлично = НСтр("ru = 'Документы подаются лично в Налоговую инспекцию.
		|Требуется заплатить госпошлину в размере %1 руб.'");
	
	Элементы.ГруппаИФНСличноРасширеннаяПодсказка.Заголовок = СтрШаблон(ТекстПодсказкиИФНСлично, СуммаГоспошлины);
	Элементы.ГруппаИФНСличноИностранныйГражданинРасширеннаяПодсказка.Заголовок = Элементы.ГруппаИФНСличноРасширеннаяПодсказка.Заголовок;
	УстановитьКнопкуПоУмолчанию(Форма);
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаВводДанных Тогда
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметрыКонтактнойИнформации(Форма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСтраныГражданства(Форма)
	
	Элементы = Форма.Элементы;
	ГражданствоРФ = Форма.Гражданство = Форма.КодРоссии;
	ЕстьГражданство =
		Форма.Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	Элементы.ГруппаИностранныйПаспорт.Видимость = Не ГражданствоРФ И ЕстьГражданство;
	Элементы.ОснованиеДляПроживанияВРФ.Видимость = Не ГражданствоРФ;
	Элементы.ГруппаПаспортРФ.Видимость = ГражданствоРФ;
	Элементы.КонтактныеДанные.Видимость = ГражданствоРФ;
	Элементы.КонтактныеДанныеИностранныйГражданин.Видимость = Не ГражданствоРФ;
	Элементы.ГруппаСпособПодачиДокументов.Видимость = ГражданствоРФ;
	Элементы.ГруппаСпособПодачиДокументовИностранныйГражданин.Видимость = Не ГражданствоРФ;
	Элементы.УзнатьИНН.Видимость = Форма.СервисУзнатьИННДоступен И ГражданствоРФ;
	Если Элементы.ОснованиеДляПроживанияВРФ.Видимость И Не ЗначениеЗаполнено(Форма.ВидДокумента) Тогда
		Форма.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
	КонецЕсли;
	Если ГражданствоРФ Или Не ЕстьГражданство Тогда
		Форма.СерияНомерИностранногоПаспорта = "";
	КонецЕсли;
	Если Не ГражданствоРФ Тогда
		Форма.СерияНомерПаспорта = "";
		Форма.ФизическоеЛицо.МестоРожденияПредставление = "";
	КонецЕсли;
	
	Элементы.ФизическоеЛицоМестоРожденияПредставление.Видимость = ГражданствоРФ;
	ОбработатьИзменениеВидаДокументаОснованияДляПроживанияВРФ(Форма);
	
	ДоступныеСпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.ДоступныеСпособыПодачиДокументов(
		Форма.ДатаСозданияЗаявления);
	
	Если Не ГражданствоРФ Тогда
		// Для иностранных граждан способ подачи выделен отдельно
		Элементы.СпособПодачиДокументовПочтаИностранныйГражданин.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
			РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().Почта);
		
		Элементы.ГруппаЧерезПредставителяИностранныйГражданин.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
			РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСпредставитель);
		
	Иначе
		
		Элементы.СпособПодачиДокументовПочта.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
			РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().Почта);
		
		Элементы.ГруппаЧерезПредставителя.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
			РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСпредставитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеВидаДокументаОснованияДляПроживанияВРФ(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора() Тогда
		РазрешенияНаВременноеПроживание = Истина;
		Форма.ВидНаЖительствоБессрочный = Ложь;
	Иначе
		РазрешенияНаВременноеПроживание = Ложь;
		Форма.ВидНаЖительствоБессрочный = Не ЗначениеЗаполнено(Форма.ДанныеОснованияДляПроживанияВРФ.СрокДействия);
	КонецЕсли;
	
	Элементы.ВидНаЖительствоБессрочный.Видимость = Не РазрешенияНаВременноеПроживание;
	
	ОбработатьИзменениеБессрочныйВидНаЖительство(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОказываютсяУслугиКонсультации()
	
	Возврат Обработки.РегистрацияОрганизации.ОказываютсяУслугиКонсультации();
	
КонецФункции

&НаКлиенте
Процедура ЗаявлениеРегистрацияИП()
	
	Если ЗаявлениеОРегистрации <> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ИмяФормыЗаявления = РегистрацияОрганизацииВызовСервера.ИмяФормыЗаявления(ЗаявлениеОРегистрации);
		Если ИмяФормыЗаявления = "" Тогда
			Возврат;
		КонецЕсли;
		
		ФормаОтчета = ПолучитьФорму(ИмяФормыЗаявления, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		Если ДоступнаПечатьPDF417(ВыбраннаяФорма) Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		Иначе
			РегистрацияОрганизацииКлиент.ОткрытьФормуПредварительногоПросмотраЗаявленияБезДвумерногоКода(
				ФормаОтчета,
				"РегламентированноеУведомлениеФормаР21001",
				Нстр("ru = 'Заявление о регистрации.pdf'"));
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Заявление о регистрации не создано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияРегистрацияИП()
	
	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	
	ДанныеНалоговойИнспекции = Новый Структура;
	ДанныеНалоговойИнспекции.Вставить("НаименованиеФНС", НалоговаяИнспекцияНаименование);
	ДанныеНалоговойИнспекции.Вставить("АдресФНС",        НалоговаяИнспекцияАдрес);
	ДанныеНалоговойИнспекции.Вставить("ТелефонФНС",      НалоговаяИнспекцияТелефон);
	
	РеквизитыЗаявления = Новый Структура;
	РеквизитыЗаявления.Вставить("СпособПодачиДокументов", СпособПодачиДокументов);
	РеквизитыЗаявления.Вставить("ДатаСозданияЗаявления", ДатаСозданияЗаявления);
	РеквизитыЗаявления.Вставить("Гражданство",           Гражданство);
	РеквизитыЗаявления.Вставить("КодыОКВЭД2",            ВыбранныеКодыОКВЭД2(ЭтотОбъект));
	
	Инструкция = ИнструкцияРегистрацияИПНаСервере(РеквизитыЗаявления,
		ДанныеРегистрирующегоОргана,
		ДанныеНалоговойИнспекции,
		СтруктураУчетнойПолитики);
	
	ВывестиИнструкцию(Инструкция);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьИнструкциюВоВременноеХранилищеНаСервере(Инструкция)
	
	АдресХранилища = Неопределено;
	ИмяФайла       = ПолучитьИмяВременногоФайла("pdf");
	
	Попытка
		Инструкция.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись инструкции по регистрации во временный файл'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнструкцияРегистрацияИПНаСервере(РеквизитыЗаявления, ДанныеРегистрирующегоОргана, ДанныеНалоговойИнспекции, СтруктураУчетнойПолитики)
	
	ПараметрыВыполнения = Обработки.РегистрацияОрганизации.НовыйПараметрыИнструкцииРегистрацииИП();
	
	ПараметрыВыполнения.ДанныеРегистрирующегоОргана = ДанныеРегистрирующегоОргана;
	ПараметрыВыполнения.ДанныеНалоговойИнспекции = ДанныеНалоговойИнспекции;
	ПараметрыВыполнения.СпособПодачиДокументов = РеквизитыЗаявления.СпособПодачиДокументов;
	ПараметрыВыполнения.СтранаГражданства = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(
		РеквизитыЗаявления.Гражданство);
	ПараметрыВыполнения.ДатаСоставления = РеквизитыЗаявления.ДатаСозданияЗаявления;
	
	ВыборСпецрежимаНалогообложения = Обработки.РегистрацияОрганизации.НовыйВыборСпецрежимаНалогообложения();
	ВыборСпецрежимаНалогообложения.УСН = ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	ВыборСпецрежимаНалогообложения.АУСН = Обработки.РегистрацияОрганизации.ПрименяетсяАУСН(СтруктураУчетнойПолитики);
	ВыборСпецрежимаНалогообложения.Патент = ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики);
	ПараметрыВыполнения.ВыборСпецрежимаНалогообложения = ВыборСпецрежимаНалогообложения;
	ПараметрыВыполнения.ТребуетсяСправкаОбОтсутствииСудимости = ТребуетсяСправкаОбОтсутствииСудимости(РеквизитыЗаявления.КодыОКВЭД2);
	
	Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацияИП(ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура УведомлениеОПереходенНаУСН()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиУведомлениеОПереходеНаУСН(Организация.Ссылка, СтруктураУчетнойПолитики);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Уведомление о переходе на УСН не создано'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Уведомление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КвитанцияНаОплатуГоспошлины(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.КвитанцияНаОплатуГоспошлины(ОрганизацияСсылка);
	
КонецФункции

&НаКлиенте
Процедура ЗаявлениеПолучениеПатента()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиЗаявлениеПолучениеПатента(Организация.Ссылка, СтруктураУчетнойПолитики);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы,
			ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Организация.Ссылка);
	Если СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСпредставитель Тогда
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "2");
	Иначе
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "1");
		ПараметрыЗаполнения.Вставить("НомерТелефонаПодписанта", КонтактнаяИнформацияПолеТелефонОрганизации);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
	ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаявлениеЗаполнено = ЗначениеЗаполнено(ЗаявлениеОРегистрации);
	
	Если ИспользуетсяСервисРегистрации Или Не ЗаявлениеЗаполнено Тогда
		ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
		ОрганизацияСсылка = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	ИначеЕсли ЗаявлениеЗаполнено Тогда
		ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаЗаполнения(ЗаявлениеОРегистрации);
		ОрганизацияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявлениеОРегистрации, "Организация");
	КонецЕсли;
	
	ДанныеЗаявления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "Заявление");
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ПрочитатьДанныеОрганизации(ОрганизацияСсылка);
	ИначеЕсли ДанныеЗаявления <> Неопределено Тогда
		// Организация ещё не создана, читаем данные из реквизитов заявления
		Организация.ФамилияИП = ДанныеПомощникаРегистрации.Заявление.Фамилия;
		Организация.ИмяИП = ДанныеПомощникаРегистрации.Заявление.Имя;
		Организация.ОтчествоИП = ДанныеПомощникаРегистрации.Заявление.Отчество;
		ОтчествоЛатиницей = ДанныеПомощникаРегистрации.Заявление.ОтчествоЛатиницей;
		Организация.ИНН = ДанныеПомощникаРегистрации.Заявление.ИНН;
		ФизическоеЛицо.ДатаРождения = ДанныеПомощникаРегистрации.Заявление.ДатаРождения;
		СерияНомерПаспорта = ДанныеПомощникаРегистрации.Заявление.СерияНомерПаспорта;
		ПаспортныеДанные.КемВыдан = ДанныеПомощникаРегистрации.Заявление.КемВыданПаспорт;
		ПаспортныеДанные.ДатаВыдачи = ДанныеПомощникаРегистрации.Заявление.ДатаВыдачи;
		ПаспортныеДанные.КодПодразделения = ДанныеПомощникаРегистрации.Заявление.КодПодразделения;
		ФизическоеЛицо.МестоРожденияПредставление = ДанныеПомощникаРегистрации.Заявление.МестоРождения;
		
		Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Заявление.Телефон) Тогда
			ДобавитьКонтактнуюИнформацию(
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
				ДанныеПомощникаРегистрации.Заявление.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Заявление.Телефон) Тогда
			ДобавитьКонтактнуюИнформацию(
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
				ДанныеПомощникаРегистрации.Заявление.Email);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Заявление.АдресXML) Тогда
			КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ДанныеПомощникаРегистрации.Заявление.АдресXML);
			ДобавитьКонтактнуюИнформацию(
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
				ДанныеПомощникаРегистрации.Заявление.АдресXML,
				КонтактнаяИнформацияПолеЮрАдресОрганизации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Заявление.Пол) Тогда
			ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица[ДанныеПомощникаРегистрации.Заявление.Пол];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПомощникаРегистрации.Заявление.Гражданство) Тогда
			Гражданство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПомощникаРегистрации.Заявление.Гражданство, "Код");
		КонецЕсли;
		
	КонецЕсли;
	
	// Если на предыдущих этапах, что-то было изменено, то установим модифицированность у формы.
	Если ЗначениеЗаполнено(ОрганизацияСсылка)
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "Модифицированность", Ложь) Тогда
		
		Модифицированность = Истина;
	КонецЕсли;
	
	СервисУзнатьИННДоступен = Обработки.РегистрацияОрганизации.СервисУзнатьИННДоступен();
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	// Установим данные ОКВЭД
	Если ДанныеПомощникаРегистрации.Свойство("ВидДеятельности") Тогда
		ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
		Если Организация.КодОКВЭД2 <> ВидДеятельности.ОсновнойКод Тогда
			Организация.КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
		КонецЕсли;
		Если Организация.НаименованиеОКВЭД2 <> ВидДеятельности.ОсновноеНаименование Тогда
			Организация.НаименованиеОКВЭД2 = ВидДеятельности.ОсновноеНаименование;
		КонецЕсли;
		Если Организация.ДополнительныеКодыОКВЭД2 <> ВидДеятельности.ДополнительныеКоды Тогда
			Организация.ДополнительныеКодыОКВЭД2 = ВидДеятельности.ДополнительныеКоды;
		КонецЕсли;
	КонецЕсли;
	
	// Установим учетную политику
	ОрганизацииФормы.ПрочитатьУчетнуюПолитику(ЭтотОбъект, Организация.Ссылка);
	
	Если ДанныеПомощникаРегистрации.Свойство("Налоги") Тогда
		СохраненнаяСтруктураУчетнойПолитики = ДанныеПомощникаРегистрации.Налоги.СтруктураУчетнойПолитики;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураУчетнойПолитики, СохраненнаяСтруктураУчетнойПолитики, Истина);
	КонецЕсли;
	
	СвойстваСтраныИГражданства = РегистрацияОрганизацииСервер.СвойстваСтраныИГражданстваПоУмолчанию();
	КодРоссии = СвойстваСтраныИГражданства.КодРоссии;
	
	ПрочитатьДанныеЗаявления();
	ПрочитатьФизическоеЛицо();
	
	ИнициализироватьРеквизитыПредставителя();
	
	// Обход ошибки веб-клиента
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И Не ЗначениеЗаполнено(Гражданство) Тогда
		Гражданство = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаГражданство(), ИмяКлючаГражданство());
	КонецЕсли;
	
	Элементы.Гражданство.СписокВыбора.Очистить();
	Для Каждого ЗначениеСписка Из СвойстваСтраныИГражданства.СписокВыбораГражданства Цикл
		Элементы.Гражданство.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Гражданство) И ЗначениеЗаполнено(СвойстваСтраныИГражданства.Гражданство) Тогда
		Гражданство = СвойстваСтраныИГражданства.Гражданство;
	КонецЕсли;
	
	Если ДанныеПомощникаРегистрации.Свойство("Заявление") Тогда
		ФорматОтправкиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ФорматОтправкиДокументов");
		СпособПодачиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "СпособПодачиДокументов");
		ВыдатьНаБумажномНосителе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ВыдатьНаБумажномНосителе");
		НомерТелефонаПодтвержден = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "НомерТелефонаПодтвержден");
		ЭлектроннаяПочтаПодтверждена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ЭлектроннаяПочтаПодтверждена");
	ИначеЕсли ДанныеПомощникаРегистрации <> Неопределено И ТекущийЭтап <> 2 Тогда
		ФорматОтправкиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "ФорматОтправкиДокументов");
		СпособПодачиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "СпособПодачиДокументов");
		ВыдатьНаБумажномНосителе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "ВыдатьНаБумажномНосителе");
		НомерТелефонаПодтвержден = Истина;
		ЭлектроннаяПочтаПодтверждена = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
	КонецЕсли;
	
	ПодачаДокументовВЭлектронномВидеДоступна = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПоддерживаетсяФормированиеПакетаДляВнесенияИзмененийВЕГРЮЛ();
	
	СписокНалоговыхОрганов = РегистрыСведений.РегистрирующиеНалоговыеОрганы.СписокРегистрирующихОрганов();
	Элементы.РегистрирующийОрганСписок.СписокВыбора.Очистить();
	
	Для Каждого ЗначениеСписка Из СписокНалоговыхОрганов Цикл
		Элементы.РегистрирующийОрганСписок.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
	РегистрацияОрганизацииСервер.УстановитьПросмотрЭлементовФормы(
		ЭтотОбъект,
		Не РегистрацияОрганизацииСервер.ДоступенПомощникРегистрацииНовогоБизнеса());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеОрганизации(ОрганизацияСсылка)
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации")
		И ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		// СтандартныеПодсистемы.КонтактнаяИнформация
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ОрганизацияОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭтап(НомерЭтапа)
	
	Если НомерЭтапа = 1 Тогда
		
		Если Не ЗначениеЗаполнено(Организация.КодНалоговогоОргана) Тогда
			ОпределитьКодНалоговогоОргана();
		КонецЕсли;
		ОпределитьРегистрирующийОрган();
		
		Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации)
			И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
			ПрочитатьКонтактнуюИнформациюПользователя();
		КонецЕсли;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.СформироватьДокументыКнопка.КнопкаПоУмолчанию = Истина;
		
		ОбновитьПредставлениеПредставителя();
		
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ИначеЕсли НомерЭтапа = 3 Тогда
		
		// Обход ошибки веб-клиента
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаГражданство(), ИмяКлючаГражданство(), Гражданство);
		КонецЕсли;
		
		ОпределитьРегистрирующийОрган();
		ОпределитьТерриториальнуюНалоговуюИнспекцию();
		
		КвитанцияОбОплатеГоспошлины = 
			Обработки.РегистрацияОрганизации.ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация.Ссылка);
		КвитанцияОбОплатеГоспошлиныПолучена = КвитанцияОбОплатеГоспошлины <> Неопределено
							И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КвитанцияОбОплатеГоспошлины, "ПометкаУдаления");
		
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = Не КвитанцияОбОплатеГоспошлиныПолучена;
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость  = КвитанцияОбОплатеГоспошлиныПолучена;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРегистрация;
		Элементы.НачатьРаботу.КнопкаПоУмолчанию = Истина;
		
		УстановитьВидимостьБаннераНачалоРаботы();
		УстановитьПредставлениеПрикрепленныхФайлов();
		
		ТекущийЭлемент = Элементы.ХочуКонсультацию;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	ТекущийЭтап = НомерЭтапа;
	
	РазместитьНавигациюНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики)
	
	Возврат Обработки.РегистрацияОрганизации.ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики <> Неопределено
		И СтруктураУчетнойПолитики.Свойство("ПрименяетсяУСНПатент")
		И СтруктураУчетнойПолитики.ПрименяетсяУСНПатент Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
	
	Если ДатаСозданияЗаявления = '00010101' Тогда
		ДатаСозданияЗаявления = ТекущаяДата();
	КонецЕсли;
	
	ВыбраннаяФорма = ФормаЗаявленияПоУмолчанию(ДатаСозданияЗаявления);
	
	УстановитьФорматОтправкиДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Срок действия основание для проживания
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокДействияОснованияДляПроживания");
	
	ГруппаИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаИли.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		НоваяГруппа,
		"ВидДокумента",
		ВидСравненияКомпоновкиДанных.Равно,
		РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора());
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		НоваяГруппа,
		"СрокДействияОснованияДляПроживания",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаИли.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		НоваяГруппа,
		"ВидДокумента",
		ВидСравненияКомпоновкиДанных.НеРавно,
		РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора());
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		НоваяГруппа,
		"ВидНаЖительствоБессрочный",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		НоваяГруппа,
		"СрокДействияОснованияДляПроживания",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении()
	
	ОрганизацииФормыКлиент.ФИОПриИзменении(Организация);
	
	Если Не Организация.ИндивидуальныйПредприниматель.Пустая() Тогда
		// Изменяется существующий элемент справочника
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ФамилияИП) Или ПустаяСтрока(Организация.ИмяИП) Тогда
		// Искать физическое лицо рано
		Возврат;
	КонецЕсли;
	
	Фамилия = Организация.ФамилияИП;
	Имя = Организация.ИмяИП;
	Отчество = Организация.ОтчествоИП;
	
	ИндивидуальныйПредприниматель = НайтиФизическоеЛицо(Фамилия, Имя, Отчество, Организация.ИНН);
	
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		
		Организация.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
		ПрочитатьФизическоеЛицо();
		
		Если ПустаяСтрока(Организация.ИНН) Тогда
			
			Организация.ИНН = ФизическоеЛицо.ИНН;
			ИННОбработатьИзменение();
			
			// Восстановим ФИО, если различаются
			Организация.ФамилияИП = Фамилия;
			Организация.ИмяИП = Имя;
			Организация.ОтчествоИП = Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОбработатьИзменение()
	
	ПроверитьСоответствиеТребованиямИНН();
	
	Если Не Организация.Ссылка.Пустая() Тогда
		// Изменяется существующий элемент справочника
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = НайтиОрганизацию(Организация.ИНН);
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		УстановитьОрганизацию(ОрганизацияСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеТребованиямИНН()
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Организация.ИНН, Ложь);
	
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		ЦветВыделенияНекорректногоЗначения = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой");
		НадписьПоясненияНекорректногоИНН   = Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки, , ЦветВыделенияНекорректногоЗначения);
	Иначе
		НадписьПоясненияНекорректногоИНН  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиФизическоеЛицо(Знач Фамилия, Знач Имя, Знач Отчество = "", Знач ИНН = "")
	
	Возврат Справочники.Организации.ФизическоеЛицо(Фамилия, Имя, Отчество, ИНН);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизацию(Знач ИНН = "")
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОрганизацию(ОрганизацияСсылка)
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	ДанныеПомощникаРегистрации.Заявление.Ссылка = ОрганизацияСсылка;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонтактнуюИнформациюПользователя()
	
	// Получим контактные данные пользователя
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		
		МассивПользователей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийПользователь);
		МассивВидовКИ = Новый Массив;
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПользователей, , МассивВидовКИ);
		Для Каждого СтрокаКонтактнойИнформции Из ТаблицаКонтактнойИнформации Цикл
			
			Если СтрокаКонтактнойИнформции.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
				И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
				
				КонтактнаяИнформацияПолеEmailОрганизации = СтрокаКонтактнойИнформции.Представление;
				НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
					Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеEmailОрганизации"));
				Если НайденныеСтроки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтрокаКонтактнойИнформции, "Представление, Значение");
				КонецЕсли;
				
			ИначеЕсли СтрокаКонтактнойИнформции.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя
				И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
				
				КонтактнаяИнформацияПолеТелефонОрганизации = СтрокаКонтактнойИнформции.Представление;
				ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеТелефонОрганизации);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНачалоРаботы()
	
	// Установить стандартный интерфейс.
	
	Константы.НачалоРаботы.Установить(Ложь);
	
	Константы.РегистрацияНеЗавершена.Установить(Истина);
	
	УстановитьВидимостьБаннераНачалоРаботы();
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	Обработки.НачалоРаботы.УстановитьПодходящийИнтерфейс(
		ВидОрганизации,
		НаименованиеСистемыНалогообложения(ДанныеПомощникаРегистрации.Налоги.ВыбранныйРежим),
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация),
		ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
	);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБаннераНачалоРаботы()
	
	ВидимостьБаннераНачалоРаботы = Константы.НачалоРаботы.Получить();
	
	ПредставлениеПрограммы = ОбщегоНазначенияБП.ПредставлениеПрограммыПредложныйПадеж();
	Элементы.ЗаголовокНачалоРаботы.Заголовок =
		СтрШаблон(НСтр("ru = 'Начните работу в %1'"), ПредставлениеПрограммы);
	
	Команды.НачатьРаботу.Подсказка = 
		СтрШаблон(НСтр("ru = 'Закрыть помощник и начать работу в %1'"), ПредставлениеПрограммы);
	
	Элементы.НачалоРаботы.Видимость = ВидимостьБаннераНачалоРаботы;
	Элементы.НачатьРаботу.КнопкаПоУмолчанию = ВидимостьБаннераНачалоРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНачалаРаботы()
	
	Если ОбщегоНазначенияБПВызовСервера.ЭтоПростойИнтерфейс() Тогда
		ОткрытьФорму("Обработка.ПанелиПростойИнтерфейс.Форма.ПанельПомощь");
	Иначе
		ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФизическоеЛицо()
	
	Если Не ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицоОбъект = Организация.ИндивидуальныйПредприниматель.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Если Не ЗначениеЗаполнено(СерияНомерПаспорта)
		И Не ЗначениеЗаполнено(СерияНомерИностранногоПаспорта)
		И Не ЗначениеЗаполнено(СерияНомерОснованияДляПроживания) Тогда
		
		ДанныеФизЛица = КадровыеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель, ДатаСозданияЗаявления);
		
		Если ДанныеФизЛица <> Неопределено Тогда
			
			КодыФНСВидовДокументов = ДокументыФизическихЛицБП.КодыФНСВидовДокументов();
			
			ПаспортныеДанные.ВидДокумента = ДанныеФизЛица.ДокументВид;
			ПаспортныеДанные.Период = ДанныеФизЛица.ДокументПериодРегистрации;
			ПаспортныеДанные.КодПодразделения = ДанныеФизЛица.ДокументКодПодразделения;
			ПаспортныеДанные.Серия = ДанныеФизЛица.ДокументСерия;
			ПаспортныеДанные.Номер = ДанныеФизЛица.ДокументНомер;
			ПаспортныеДанные.ДатаВыдачи = ДанныеФизЛица.ДокументДатаВыдачи;
			ПаспортныеДанные.СрокДействия = ДанныеФизЛица.ДокументСрокДействия;
			ПаспортныеДанные.КемВыдан = ДанныеФизЛица.ДокументКемВыдан;
			ПаспортныеДанные.СтранаВыдачи = ДанныеФизЛица.ДокументСтранаВыдачи;
			ПаспортныеДанные.Представление = ДанныеФизЛица.ДокументПредставление;
			ПаспортныеДанные.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			
			Если ДанныеФизЛица.ДокументКодМВД = КодыФНСВидовДокументов.ПаспортГражданинаРФ Тогда
				СерияНомерПаспорта = СтрШаблон("%1 %2", ДанныеФизЛица.ДокументСерия, ДанныеФизЛица.ДокументНомер);
				Гражданство = КодРоссии;
			Иначе
				Гражданство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.Страна, "Код");
				ПаспортныеДанные.ФамилияЛатиницей = ДанныеФизЛица.ФамилияЛатиницей;
				ПаспортныеДанные.ИмяЛатиницей = ДанныеФизЛица.ИмяЛатиницей;
				ВидДокумента = ДанныеФизЛица.ВидДокумента;
				ВидНаЖительствоБессрочный = Не ЗначениеЗаполнено(ДанныеФизЛица.ОснованияДляПроживанияВРФ.СрокДействия);
				СерияНомерИностранногоПаспорта = ?(ЗначениеЗаполнено(ДанныеФизЛица.ДокументСерия),
					СтрШаблон("%1 %2", ДанныеФизЛица.ДокументСерия, ДанныеФизЛица.ДокументНомер), ДанныеФизЛица.ДокументНомер);
				СерияНомерОснованияДляПроживания = СтрШаблон("%1 %2",
					ДанныеФизЛица.ОснованияДляПроживанияВРФ.Серия,
					ДанныеФизЛица.ОснованияДляПроживанияВРФ.Номер);
				ЗаполнитьЗначенияСвойств(ДанныеОснованияДляПроживанияВРФ, ДанныеФизЛица.ОснованияДляПроживанияВРФ);
			КонецЕсли;
		Иначе
			НоваяЗаписьДокументыФизЛиц = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
			ЗначениеВРеквизитФормы(НоваяЗаписьДокументыФизЛиц, "ПаспортныеДанные");
			СерияНомерПаспорта = "";
			СерияНомерИностранногоПаспорта = "";
			СерияНомерОснованияДляПроживания = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЗаявления()
	
	РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(Организация.Ссылка);
	
	Если РеквизитыЗаявления <> Неопределено И ЗначениеЗаполнено(РеквизитыЗаявления.Ссылка) Тогда
		ДанныеУведомления = Отчеты.РегламентированноеУведомлениеФормаР21001.ДанныеУведомления(РеквизитыЗаявления.Ссылка);
		ДанныеУведомления.Свойство("СпособРегистрации", СпособРегистрации);
		ДатаСозданияЗаявления = РеквизитыЗаявления.Дата;
		ВыбраннаяФорма = ФормаЗаявленияПоУмолчанию(ДатаСозданияЗаявления);
		ЗаявлениеОРегистрации = РеквизитыЗаявления.Ссылка;
		УстановитьФорматОтправкиДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьКодНалоговогоОргана()
	
	ДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане();
	Организация.КодНалоговогоОргана = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРегистрирующийОрган()
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		РегистрирующийОрганКод = Обработки.РегистрацияОрганизации.КодРегистрирующегоОргана(
			ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации),
			Организация.ИНН,
			Истина);
	Иначе
		РегистрирующийОрганКод = Организация.КодНалоговогоОргана;
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана = Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(
		РегистрирующийОрганКод,
		Ложь);
	
	Если РеквизитыРегистрирующегоОргана <> Неопределено Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон      = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес        = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация   = РеквизитыРегистрирующегоОргана.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТерриториальнуюНалоговуюИнспекцию()
	
	Если СпособПодачиДокументов <> РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции =
		Обработки.РегистрацияОрганизации.РеквизитыНалоговойИнспекции(Организация.КодНалоговогоОргана);
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияИнформация   = РеквизитыНалоговойИнспекции.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
		
		ОповеститьОбИзменении(Организация.Ссылка);
		ОповеститьОбИзменении(Организация.ИндивидуальныйПредприниматель);
		
	Иначе
		ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаявления()
	
	СпособРегистрации = СпособРегистрации(СпособПодачиДокументов);
	
	ДанныеЗаявления = Обработки.РегистрацияОрганизации.НовыеДанныеЗаявления();
	ДанныеЗаявления.Фамилия           = Организация.ФамилияИП;
	ДанныеЗаявления.Имя               = Организация.ИмяИП;
	ДанныеЗаявления.Отчество          = Организация.ОтчествоИП;
	ДанныеЗаявления.Пол               = Строка(ФизическоеЛицо.Пол);
	ДанныеЗаявления.ИНН               = Организация.ИНН;
	ДанныеЗаявления.Телефон           = КонтактнаяИнформацияПолеТелефонОрганизации;
	ДанныеЗаявления.Email             = КонтактнаяИнформацияПолеEmailОрганизации;
	ДанныеЗаявления.СпособРегистрации = Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(СпособРегистрации);
	ДанныеЗаявления.Гражданство       = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Гражданство);
	ДанныеЗаявления.ОтчествоЛатиницей = ОтчествоЛатиницей;
	
	ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации),
		,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	ДанныеЗаявления.НомерТелефонаПодтвержден = НомерТелефонаПодтвержден;
	ДанныеЗаявления.ЭлектроннаяПочтаПодтверждена = ЭлектроннаяПочтаПодтверждена;
	ДанныеЗаявления.Ссылка = Организация.Ссылка;
	ДанныеЗаявления.ВыдатьНаБумажномНосителе = ВыдатьНаБумажномНосителе;
	ДанныеЗаявления.СпособПодачиДокументов = СпособПодачиДокументов;
	ДанныеЗаявления.ФорматОтправкиДокументов = ФорматОтправкиДокументов;
	
	ДанныеЗаявления.ДатаРождения = ФизическоеЛицо.ДатаРождения;
	ДанныеЗаявления.СерияНомерПаспорта = СерияНомерПаспорта;
	ДанныеЗаявления.КемВыданПаспорт = ПаспортныеДанные.КемВыдан;
	ДанныеЗаявления.ДатаВыдачи = ПаспортныеДанные.ДатаВыдачи;
	ДанныеЗаявления.КодПодразделения = ПаспортныеДанные.КодПодразделения;
	ДанныеЗаявления.МестоРождения = ФизическоеЛицо.МестоРожденияПредставление;
	
	Возврат ДанныеЗаявления;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ДанныеЗаявления = ДанныеЗаявления();
	ДанныеЗаявления.Ссылка = РезультатВыполнения.Организация;
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления);
	
	РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(РезультатВыполнения.Организация);
	Если ЗначениеЗаполнено(РеквизитыЗаявления) Тогда
		ЗаявлениеОРегистрации = РеквизитыЗаявления.Ссылка;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	ОшибкаПодписанияДокументов = Ложь;
	НетСертификатаПодписи = Ложь;
	Модифицированность = Ложь;
	
	ОчиститьПодписанныеДокументыНаСервере();
	ВидыПрикрепленныхДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
	ПараметрыОтображения = ПараметрыОтображенияЭлементовФормы(ЭтотОбъект);
	
	Для Каждого ТекущийВидДокумента Из ВидыПрикрепленныхДокументов Цикл
		
		РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
			ЭтотОбъект,
			ТекущийВидДокумента.Значение, ,
			ПараметрыОтображения);
		
		Если ТекущийВидДокумента.Значение = ВидыПрикрепленныхДокументов.ИнойДокумент Тогда
			РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьЭтап(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация)
	
	// Если при создании документов прозошла ошибка,
	// то нужно вернуться на этап заполнения данных и вывести сообщение об ошибке.
	ИзменитьЭтап(1);
	
	Текст = НСтр("ru = 'Ошибка при формировании документов:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р21001");
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиУведомлениеОПереходеНаУСН(Знач ОрганизацияСсылка, Знач СтруктураУчетнойПолитики)
	
	Если Не ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = Обработки.РегистрацияОрганизации.ПолноеИмяФормыПоУмолчанию("РегламентированноеУведомлениеПереходНаУСН");
	
	УведомлениеОСпецРежимеНалогообложения = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
		ОрганизацияСсылка,
		ВидУведомления,
		ИмяФормыПоУмолчанию);
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаявлениеПолучениеПатента(Знач ОрганизацияСсылка, Знач СтруктураУчетнойПолитики)
	
	Если Не ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
	ИмяФормыПоУмолчанию = УчетПСНВызовСервера.ИмяФормыЗаявления(ВидУведомления);
	
	УведомлениеОСпецРежимеНалогообложения = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
		ОрганизацияСсылка,
		ВидУведомления,
		ИмяФормыПоУмолчанию);
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

&НаКлиенте
Процедура ВывестиИнструкцию(Инструкция)
	
	АдресХранилища = ПоместитьИнструкциюВоВременноеХранилищеНаСервере(Инструкция);
	
	ИмяФайла = "Инструкция по регистрации ИП.pdf";
	
	Попытка
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать файл.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНавигациюНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		СтруктураПараметров.Вставить("Заявление", ЗаявлениеОРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация.Ссылка) Тогда
		СтруктураПараметров.Вставить("Организация", Организация.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НавигацияПараметрФормы", НавигацияПараметрФормы);
	
	Если ТекущийЭтап = 1 Тогда
		СтруктураПараметров.НавигацияПараметрФормы = "Заявление";
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = Истина;
	Иначе
		СтруктураПараметров.НавигацияПараметрФормы = "Документы";
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = (ТекущийЭтап <> 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособРегистрации(СпособПодачиДокументов)
	
	Возврат РегистрацияОрганизацииКлиентСервер.СпособРегистрацииПоСпособуПодачиДокументов(СпособПодачиДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеБлижайшийМФЦ(Элемент)
	
	АдресДляПоискаЗначениеJSON = ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(АдресДляПоискаЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПредставителя()
	
	Если Не Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
		
		РегистрацияНУОбъект = Организация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		ПредставлениеПредставителя  = РегистрацияВНалоговомОргане.Представитель;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя  = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = "ИФНСпредставитель";
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыПредставителя()

	РеквизитыПредставителя.Добавить("Представитель");
	РеквизитыПредставителя.Добавить("ДокументПредставителя");
	РеквизитыПредставителя.Добавить("УполномоченноеЛицоПредставителя");
	РеквизитыПредставителя.Добавить("Доверенность");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяКлючаГражданство()
	
	Возврат "Гражданство";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФорма2014(Знач ИмяФормы)
	
	Возврат ИмяФормы = "Форма2014_1";
	
КонецФункции

#Область КонтактнаяИнформация

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеJSONКонтактнойИнформации(Форма, Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = Элемент.Имя;
	ДанныеИсточника = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].Значение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Организация.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Организация, Результат);
	ПослеИзмененияКонтактнойИнформации(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ИмяРеквизита")
		И Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		
		ОпределитьКодНалоговогоОргана();
		ОпределитьРегистрирующийОрган();
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанных(Отказ)
	
	ДопустимоВФИОКромеКириллицы = РегистрацияОрганизацииКлиентСервер.УниверсальныеСимволыВПаспортныхДанных();
	
	Если НЕ ЗначениеЗаполнено(Организация.ФамилияИП) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ФамилияИП", , Отказ);
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ФамилияИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Фамилия заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ФамилияИП", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация.ИмяИП) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ИмяИП", , Отказ);
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ИмяИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Имя заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ИмяИП", , Отказ);
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ОтчествоИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Отчество заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ОтчествоИП", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	ИначеЕсли ФизическоеЛицо.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Пол", , Отказ);
	КонецЕсли;
	
	// Паспортные данные
	
	ГражданинРФ = Ложь;
	ИностранныйГражданин = Ложь;
	ЛицоБезГражданства = Ложь;
	Если Не ЗначениеЗаполнено(Гражданство) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Гражданство'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Гражданство", , Отказ);
	Иначе
		ГражданинРФ = Гражданство = КодРоссии;
		ЛицоБезГражданства = Гражданство = РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
		ИностранныйГражданин = Не ГражданинРФ И Не ЛицоБезГражданства;
	КонецЕсли;
	
	Если ГражданинРФ И Не ЗначениеЗаполнено(СерияНомерПаспорта) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерПаспорта", , Отказ);
	ИначеЕсли ГражданинРФ Тогда
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(СерияНомерПаспорта));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерПаспорта", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ИностранныйГражданин И Не ЗначениеЗаполнено(СерияНомерИностранногоПаспорта) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерИностранногоПаспорта", , Отказ);
	КонецЕсли;
	
	Если Не ЭтоФорма2014(ВыбраннаяФорма) И Не ЛицоБезГражданства Тогда
		
		УниверсальныеСимволы = РегистрацияОрганизацииКлиентСервер.УниверсальныеСимволыВПаспортныхДанных();
		
		ТекстСообщения = "";
		
		Если ИностранныйГражданин И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
			ПаспортныеДанные.КемВыдан, Ложь, УниверсальныеСимволы) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Кем выдан"" заполняется латиницей'");
			
		ИначеЕсли Не ИностранныйГражданин И Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
			ПаспортныеДанные.КемВыдан, Ложь, УниверсальныеСимволы) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Кем выдан"" заполняется на русском языке'");
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КемВыдан", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЛицоБезГражданства И Не ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КемВыдан", , Отказ);
	КонецЕсли;
	
	Если Не ЛицоБезГражданства И Не ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
	ИначеЕсли Не ЛицоБезГражданства Тогда
		ПричинаОшибки = "";
		Если Не Обработки.РегистрацияОрганизации.ПаспортДействителен(
			ПаспортныеДанные.ДатаВыдачи, ФизическоеЛицо.ДатаРождения, ПричинаОшибки, ГражданинРФ) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Паспорт недействителен: %1'"), ПричинаОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ГражданинРФ И ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия)
		И ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи > ДанныеОснованияДляПроживанияВРФ.СрокДействия Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Срок действия документа (%1) не может быть меньше даты его выдачи (%2)'"),
			Формат(ДанныеОснованияДляПроживанияВРФ.СрокДействия, "ДЛФ=DD"),
			Формат(ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.СрокДействия", , Отказ);
	КонецЕсли;
	
	Если ГражданинРФ И Не ЗначениеЗаполнено(ПаспортныеДанные.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
	ИначеЕсли ГражданинРФ Тогда
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортныеДанные.КодПодразделения));
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ГражданинРФ И Не ЗначениеЗаполнено(ФизическоеЛицо.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
	Если ИностранныйГражданин Или ЛицоБезГражданства Тогда
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Вид документа'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидДокумента", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СерияНомерОснованияДляПроживания) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерОснованияДляПроживания", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.КемВыдан) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.КемВыдан", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Действует с'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия)
			И (ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора()
				Или Не ВидНаЖительствоБессрочный) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Действует по'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.СрокДействия", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКемВыданПаспорт(Текст)
	
	ЗаголовокЭлемента = НСтр("ru = 'Поле ""Кем выдан""'");
	
	Если ЭтоФорма2014(ВыбраннаяФорма) Тогда
		ВводитсяКириллицей = Истина;
	Иначе
		ВводитсяКириллицей = (Гражданство = КодРоссии);
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст,
		"ПаспортныеДанные.КемВыдан",
		ЗаголовокЭлемента,
		ВводитсяКириллицей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеБессрочныйВидНаЖительство(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СрокДействияОснованияДляПроживания.Доступность = Не Форма.ВидНаЖительствоБессрочный;
	
	Если Форма.ВидНаЖительствоБессрочный Тогда
		Форма.ДанныеОснованияДляПроживанияВРФ.СрокДействия = '00010101';
		Элементы.СрокДействияОснованияДляПроживания.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.СрокДействияОснованияДляПроживания.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированноеУведомлениеФормаР21001.ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФормаЗаявленияПоУмолчанию(Период)
	
	Возврат РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
		Период,
		"РегламентированноеУведомлениеФормаР21001");
	
КонецФункции

Функция НаименованиеСистемыНалогообложения(СистемаНалогообложения)
	
	СоответствиеСистемыНалогообложения = Новый Соответствие;
	СоответствиеСистемыНалогообложения.Вставить("УСНДоходыИП", "УпрощеннаяДоходы");
	СоответствиеСистемыНалогообложения.Вставить("УСНДоходыРасходыИП", "УпрощеннаяДоходыМинусРасходы");
	СоответствиеСистемыНалогообложения.Вставить("ПСНИП", "Патентная");
	СоответствиеСистемыНалогообложения.Вставить("НПДИП", "НалогНаПрофессиональныйДоход");
	СоответствиеСистемыНалогообложения.Вставить("ОСНОИП", "Общая");
	СоответствиеСистемыНалогообложения.Вставить("ЕНВДИП", "ЕНВД");
	
	Результат = СоответствиеСистемыНалогообложения.Получить(СистемаНалогообложения);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат "Общая";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыПримененияАУСН(Организация, Период)
	
	Возврат Обработки.РегистрацияОрганизации.ОписаниеШагаДляПереходаНаАУСН(Организация, Период);
	
КонецФункции

#Область ПодписаниеДокументов

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтображенияЭлементовФормы(Форма)
	
	Результат = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде();
	Результат.Заявление = Форма.ЗаявлениеОРегистрации;
	Результат.ЭтоЮрЛицо = Ложь;
	Результат.ЕстьУведомлениеОПереходеНаУСН = ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики);
	Результат.ЕстьПатент = ПодаетсяЗаявлениеНаПолучениеПатента(Форма.СтруктураУчетнойПолитики);
	Результат.ДатаСоставления = Форма.ДатаСозданияЗаявления;
	
	Если Форма.Гражданство <> Форма.КодРоссии Тогда
		Результат.НуженДокументПодтверждающийЛичность = Истина;
		Результат.НуженДокументПодтверждающийАдрес = Истина;
	КонецЕсли;
	
	Результат.ТребуетсяСправкаОбОтсутствииСудимости = ТребуетсяСправкаОбОтсутствииСудимости(ВыбранныеКодыОКВЭД2(Форма));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьИнойДокументНаСервере(НомерИногоДокумента = "")
	
	Возврат РегистрацияОрганизацииСервер.ДобавитьИнойДокумент(ЭтотОбъект, НомерИногоДокумента);
	
КонецФункции

&НаСервере
Процедура ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента)
	
	РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект, НомерДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодписанныеДокументыНаСервере()
	
	РегистрацияОрганизацииВызовСервера.УдалитьПрикрепленныеФайлы(
		ЗаявлениеОРегистрации,
		РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
	
	ПодписанныеДокументы = Неопределено;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИПодписатьДокументы()
	
	ПараметрыЗаявления = РегистрацияОрганизацииКлиент.НовыеПараметрыПодписанияЗаявления();
	ПараметрыЗаявления.EMailЗаявителя = КонтактнаяИнформацияПолеEmailОрганизации;
	ПараметрыЗаявления.Заявление = ЗаявлениеОРегистрации;
	ПараметрыЗаявления.ИННЗаявителя = Организация.ИНН;
	ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияИП();
	ПараметрыЗаявления.ЕстьПатент = ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики);
	ПараметрыЗаявления.ЕстьУведомлениеОПереходеУСН = ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	ПараметрыЗаявления.ИностранныйГражданин = (Гражданство <> КодРоссии);
	ПараметрыЗаявления.НуженДокументПодтверждающийАдрес = ПараметрыЗаявления.ИностранныйГражданин;
	ПараметрыЗаявления.ЗаявлениеВXML = РегистрацияОрганизацииКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(
		ДатаСозданияЗаявления,
		СпособПодачиДокументов,
		ФорматОтправкиДокументов);
	
	РегистрацияОрганизацииКлиент.ПроверитьИПодписатьДокументы(ЭтотОбъект, ПараметрыЗаявления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументыЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы) Тогда
		
		Если СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
			Оповестить("ОбновитьСтатусЗаявленияНаГосРегистрацию", Организация.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры)
	
	РегистрацияОрганизацииСервер.ОбработатьРезультатПодписанияДокументов(
		ЭтотОбъект,
		РезультатПодписания,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы) Тогда
		
		Если СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно Тогда
			// При подаче заявления через личный кабинет статус устанавливается вручную
			СтатусУведомлений = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой();
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ЗаявлениеОРегистрации, СтатусУведомлений);
		Иначе
			// Для сопутствующих документов устанавливаем статус "Сдано", основной статус отправки будет отражаться в заявлении о регистрации
			СтатусУведомлений = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаСдано();
		КонецЕсли;
		
		ЗаявлениеНаПатент = НайтиЗаявлениеПолучениеПатента(Организация.Ссылка, СтруктураУчетнойПолитики);
		Если ЗначениеЗаполнено(ЗаявлениеНаПатент) Тогда
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ЗаявлениеНаПатент, СтатусУведомлений);
		КонецЕсли;
		
		УведомлениеОПереходеНаУСН = НайтиУведомлениеОПереходеНаУСН(Организация.Ссылка, СтруктураУчетнойПолитики);
		Если ЗначениеЗаполнено(УведомлениеОПереходеНаУСН) Тогда
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(УведомлениеОПереходеНаУСН, СтатусУведомлений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПрикрепленныхФайлов()
	
	Если Не РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииСервер.УстановитьПредставлениеПрикрепленныхФайлов(ЭтотОбъект, ЗаявлениеОРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтсканированногоФайлаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаЗавершение(
		ЭтотОбъект,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		РезультатВыбора,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРегистрация Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ПодписанныеДокументы)
			И РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		
			Элементы.НачатьРаботу.КнопкаПоУмолчанию = Ложь;
			
			Если Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
				Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
				Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Истина;
			Иначе
				Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Истина;
				Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Ложь;
			КонецЕсли;
		
		Иначе
			Элементы.НачатьРаботу.КнопкаПоУмолчанию = Форма.ИспользуетсяСервисРегистрации;
			Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
			Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.СформироватьДокументыКнопка.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Телефон()
	
	Если ТребуетсяИсправлениеНомераТелефонаЗаявителя(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьНомерТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Почта()
	
	Если ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьАдресЭлектроннойПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEmailОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Телефон()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Почта()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEmailОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Телефон()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Почта()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефона;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияПочты;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Телефон(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Почта(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СканИнойДокументНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеПараметрыКонтактнойИнформации(Форма, ИмяТекущегоЭлемента = "")
	
	Возврат РегистрацияОрганизацииКлиентСервер.ДополнительныеПараметрыКонтактнойИнформации(
		Форма.КонтактнаяИнформацияПолеТелефонОрганизации,
		Форма.КонтактнаяИнформацияПолеEmailОрганизации,
		"КонтактнаяИнформацияПолеТелефонОрганизации",
		"КонтактнаяИнформацияПолеEmailОрганизации",
		ИмяТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(АдресЭлектроннойПочты)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеНомераТелефонаЗаявителя(НомерТелефона)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефона)
		Или Не ЗначениеЗаполнено(ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефона)) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранныеКодыОКВЭД2(Форма)
	
	КодыОКВЭД2 = Новый Массив;
	
	Если ЗначениеЗаполнено(Форма.Организация.КодОКВЭД2) Тогда
		КодыОКВЭД2.Добавить(Форма.Организация.КодОКВЭД2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Организация.ДополнительныеКодыОКВЭД2) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			КодыОКВЭД2,
			СтрРазделить(Форма.Организация.ДополнительныеКодыОКВЭД2, ";"));
	КонецЕсли;
	
	Возврат КодыОКВЭД2;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяСправкаОбОтсутствииСудимости(ПроверяемыеОКВЭД)
	
	Возврат Обработки.РегистрацияОрганизации.ТребуетсяСправкаОбОтсутствииСудимости(ПроверяемыеОКВЭД);
	
КонецФункции

&НаСервере
Процедура УстановитьФорматОтправкиДокументов()
	
	ДоступныеФорматы = РегистрацияОрганизацииСервер.ДоступныеФорматыОтправкиДокументов();
	ДоступнаПечатьPDF417 = ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
	Для Каждого ТекущаяСтрока Из ДоступныеФорматы Цикл
		
		ИмяЭлемента = СтрШаблон("ФорматОтправкиДокументов%1", ТекущаяСтрока.Порядок);
		
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяЭлемента].Подсказка = ТекущаяСтрока.Подсказка;
		Элементы[ИмяЭлемента].СписокВыбора.Очистить();
		Элементы[ИмяЭлемента].СписокВыбора.Добавить(ТекущаяСтрока.Тип, ТекущаяСтрока.Наименование);
		
		Если ТекущаяСтрока.Тип = "XML" Тогда
			Элементы[ИмяЭлемента].Доступность = ДоступнаПечатьPDF417;
			Если Не ДоступнаПечатьPDF417 Тогда
				Элементы[ИмяЭлемента].Подсказка = НСтр("ru = 'Пока формат выгрузки не опубликован.
					|Вы можете отправить заявление в виде отсканированного документа.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ФорматОтправкиДокументов) Или Не ДоступнаПечатьPDF417 Тогда
		ФорматОтправкиДокументов = РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаСозданияЗаявленияПриИзмененииНаСервере()
	
	ВыбраннаяФорма = ФормаЗаявленияПоУмолчанию(ДатаСозданияЗаявления);
	УстановитьСпособПодачиДокументовПоУмолчанию();
	УстановитьФорматОтправкиДокументов();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособПодачиДокументовПоУмолчанию()
	
	ДоступныеСпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.ДоступныеСпособыПодачиДокументов(
		ДатаСозданияЗаявления);
	
	Если Не ДоступныеСпособыПодачиДокументов.Свойство(СпособПодачиДокументов) Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
		ДанныеМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеЗаявления()
	
	Если ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики) Тогда
		Обработки.РегистрацияОрганизации.ОбновитьНавигациюФормы(ЭтотОбъект, Истина);
	КонецЕсли;
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформацию(Вид, Значение, Представление = Неопределено)
	
	НоваяСтрока = Организация.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вид, "Тип");
	НоваяСтрока.Вид = Вид;
	НоваяСтрока.ВидДляСписка = Вид;
	НоваяСтрока.Значение = Значение;
	Если Представление = Неопределено Тогда
		НоваяСтрока.Представление = Значение;
	Иначе
		НоваяСтрока.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КадровыеДанныеФизЛица(ФизЛицо, Период)
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("ДокументПериодРегистрации");
	ИменаРеквизитов.Добавить("ДокументВид");
	ИменаРеквизитов.Добавить("ДокументКодМВД");
	ИменаРеквизитов.Добавить("ДокументСерия");
	ИменаРеквизитов.Добавить("ДокументНомер");
	ИменаРеквизитов.Добавить("ДокументДатаВыдачи");
	ИменаРеквизитов.Добавить("ДокументСрокДействия");
	ИменаРеквизитов.Добавить("ДокументКемВыдан");
	ИменаРеквизитов.Добавить("ДокументКодПодразделения");
	ИменаРеквизитов.Добавить("ДокументСтранаВыдачи");
	ИменаРеквизитов.Добавить("ДокументПредставление");
	ИменаРеквизитов.Добавить("Страна");
	
	СписокФизЛиц = Новый Массив;
	СписокФизЛиц.Добавить(ФизЛицо);
	
	ДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизЛиц, ИменаРеквизитов, Период);
	
	Если Не ЗначениеЗаполнено(ДанныеФизЛиц) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеФизЛиц[0]);
	Результат.Вставить("ФамилияЛатиницей", "");
	Результат.Вставить("ИмяЛатиницей", "");
	Результат.Вставить("ВидДокумента", 0);
	Результат.Вставить("ОснованияДляПроживанияВРФ", Новый Структура);
	
	КодыФНСВидовДокументов = ДокументыФизическихЛицБП.КодыФНСВидовДокументов();
	
	Если Результат.ДокументКодМВД <> КодыФНСВидовДокументов.ПаспортГражданинаРФ Тогда
		// Дополним ФИО латиницей и основание для проживания в РФ для нерезидента
		
		Результат.ОснованияДляПроживанияВРФ.Вставить("Период");
		Результат.ОснованияДляПроживанияВРФ.Вставить("ФизЛицо");
		Результат.ОснованияДляПроживанияВРФ.Вставить("КемВыдан");
		Результат.ОснованияДляПроживанияВРФ.Вставить("Серия");
		Результат.ОснованияДляПроживанияВРФ.Вставить("Номер");
		Результат.ОснованияДляПроживанияВРФ.Вставить("ДатаВыдачи");
		Результат.ОснованияДляПроживанияВРФ.Вставить("СрокДействия");
		Результат.ОснованияДляПроживанияВРФ.Вставить("Представление");
		
		ДокументыФизическихЛиц = КадровыйУчет.ДокументыФизическихЛиц(СписокФизЛиц, Истина, , Период);
		ВидНаЖительство = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыФНСВидовДокументов.ВидНаЖительство);
		ВременноеПроживание = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыФНСВидовДокументов.РазрешениеНаВременноеПроживание);
		
		Для Каждого ТекущийДокумент Из ДокументыФизическихЛиц Цикл
			
			Если ЗначениеЗаполнено(ТекущийДокумент.ФамилияЛатиницей) Тогда
				Результат.ФамилияЛатиницей = ТекущийДокумент.ФамилияЛатиницей;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийДокумент.ФамилияЛатиницей) Тогда
				Результат.ИмяЛатиницей = ТекущийДокумент.ФамилияЛатиницей;
			КонецЕсли;
			
			Если ТекущийДокумент.ВидДокумента = ВидНаЖительство Тогда
				Результат.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеВидаНаЖительствоВСпискеВыбора();
				ЗаполнитьЗначенияСвойств(Результат.ОснованияДляПроживанияВРФ, ТекущийДокумент);
			ИначеЕсли ТекущийДокумент.ВидДокумента = ВременноеПроживание Тогда
				Результат.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
				ЗаполнитьЗначенияСвойств(Результат.ОснованияДляПроживанияВРФ, ТекущийДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти