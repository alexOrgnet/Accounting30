
&НаКлиенте
Перем ТипУчредителяНовойСтроки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуетсяСервисРегистрации = Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации();
	ДатаСозданияЗаявления = ОбщегоНазначения.ТекущаяДатаПользователя();
	Параметры.Свойство("Заявление", ЗаявлениеОРегистрации);
	Параметры.Свойство("НавигацияПараметрФормы", НавигацияПараметрФормы);
	
	ВыбраннаяФорма = РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
		ДатаСозданияЗаявления,
		"РегламентированноеУведомлениеФормаР11001");
	
	УстановитьУсловноеОформление();
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	НалоговаяИнспекцияАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	СсылкаАдресМФЦНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	ИспользоватьТиповыеУставы = РегистрацияОрганизацииСервер.ИспользоватьТиповыеУставы(ВыбраннаяФорма);
	
	Обработки.РегистрацияОрганизации.ПодготовитьСтруктуруНавигацииПомощникаРегистрации();
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	УстановитьЗначенияПоУмолчанию();
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Истина);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактныеДанные";
	ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме = РазмещеныНаФорме;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Организация, ПараметрыРазмещенияКонтактнойИнформации);
	
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, Истина);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактныеДанныеРуководителя";
	ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме = РазмещеныНаФорме;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Руководитель, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// В случае формирования заявления до даты изменений схемы подачи документов
	// при открытии формы заново перенаправляем пользователя на шаг "Заявление"
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		
		ДатаЗаявления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявлениеОРегистрации, "Дата");
		Если Не РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаЗаявления)
			И РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСозданияЗаявления) Тогда
			
			НавигацияПараметрФормы = "Заявление";
			ДанныеМодифицированы = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(НомерЭтапаДокументы(ИспользоватьТиповыеУставы));
	ИначеЕсли НавигацияПараметрФормы = "Устав" Тогда
		ИзменитьЭтап(НомерЭтапаУстав());
	Иначе
		ИзменитьЭтап(НомерЭтапаВводДанных());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	// Восстановим признак модифицированности формы
	// для того, чтобы была выполнена запись объекта при переходе к следующему шагу.
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ВидДокумента <> РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора()
		И Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия) Тогда
		
		ВидНаЖительствоБессрочный = Истина;
	КонецЕсли;
	
	ДоступныеСпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.ДоступныеСпособыПодачиДокументов(
		ДатаСозданияЗаявления);
	
	Если Не ДоступныеСпособыПодачиДокументов.Свойство(СпособПодачиДокументов) Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
		ДанныеМодифицированы = Истина;
	КонецЕсли;
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(НомерЭтапаДокументы(ИспользоватьТиповыеУставы));
	ИначеЕсли НавигацияПараметрФормы = "Устав" Тогда 
		ИзменитьЭтап(НомерЭтапаУстав());
	Иначе
		ИзменитьЭтап(НомерЭтапаВводДанных());
	КонецЕсли;
	
	Если Не ИспользоватьТиповыеУставы Тогда
		УставВид = ЗначениеВидУставаИндивидуальный();
	КонецЕсли;
	
	Если УказыватьОтветственногоЗаГоспошлину(ЭтотОбъект) Тогда
		Элементы.ОтветственныйЗаОплатуПошлины.СписокВыбора.ЗагрузитьЗначения(ТекущийСписокУчредителей(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Все данные сохраняются в настройках формы и при последующем открытии восстанавливаются.
	// Поэтому сохраним модифицированность формы, чтобы при следующем открытии помощника восстановить форму.
	// В базу данные запишутся, после того как пользователь двинется дальше по помощнику.
	ДанныеМодифицированы = Модифицированность;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		Если Параметр = "Заявление" Тогда
			ИзменитьЭтап(НомерЭтапаВводДанных());
		ИначеЕсли Параметр = "Устав" Тогда
			ИзменитьЭтап(НомерЭтапаУстав());
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершенаРаботаПомощникаНачалаРаботы" Тогда
		
		// Работа помощника начала работы может быть завершена в другом окне (например, из окна БыстрыйСтарт).
		// В этом случае нужно закрыть окно помощника регистрации. Но пользователь мог начать изменять значение какого-нибудь
		// текстового поля и при закрытии окна сработает обработчик "ПриИзменении" и форма станет Модифицированной и не сможет
		// закрыться без вопроса. Для этого изменяем текущий элемент и снимаем модифицированность.
		ЭтотОбъект.ТекущийЭлемент = Элементы.СформироватьДокументы;
		ЭтотОбъект.Модифицированность = Ложь;
		Если ЭтотОбъект.Открыта() Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Если Параметр = Организация.Ссылка
			ИЛИ Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация.Ссылка) Тогда
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Организация.Ссылка));
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = РуководительСсылка Тогда
		ПрочитатьДанныеРуководителя();
		ОбработатьИзменениеСтраныГражданства();
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ОбновитьСтатусЗаявленияНаГосРегистрацию" И Параметр = Организация.Ссылка Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущийЭтап = НомерЭтапаВводДанных() Тогда
		
		ВыполнитьПроверкуЗаполненияДанныхЭтапа1(Отказ, ПроверяемыеРеквизиты);
		
	ИначеЕсли ТекущийЭтап = НомерЭтапаУстав() И ИспользоватьТиповыеУставы Тогда
		
		ВыполнитьПроверкуЗаполненияДанныхЭтапа2(Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СохранитьДанныеЗаявления();
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	Префикс = НСтр("ru='ООО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Организация.НаименованиеСокращенное = Префикс + " " + СокрЛП(СтрЗаменить(Организация.НаименованиеСокращенное, Префикс, ""));
	ЧислоКавычек = СтрЧислоВхождений(Организация.НаименованиеСокращенное, """");
	Если ЧислоКавычек = 0 Тогда
		Организация.НаименованиеСокращенное = Префикс + " " 
			+ """" + Сред(Организация.НаименованиеСокращенное, СтрДлина(Префикс) + 2) + """";
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.НаименованиеПолное)
		Или ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеСоответствуетСокращенномуНаименованию(
			НаименованиеСокращенноеДоИзменения, Организация.НаименованиеПолное) Тогда
		Организация.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(
			Организация.НаименованиеСокращенное);
	КонецЕсли;
	
	Организация.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(
		Организация.НаименованиеСокращенное);
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияТелефонРабочийФизическиеЛицаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияРуководителяПриИзменении(Элемент)
	
	ФИОРуководителяПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРуководителяПриИзменении(Элемент)
	
	ФИОРуководителяПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(Руководитель.Пол, Руководитель.Отчество);
	ФИОРуководителяПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННРуководителяПриИзменении(Элемент)
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	УстановитьВидимостьОшибкиИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьДоступВЕГРЮЛРуководительПриИзменении(Элемент)
	
	// Если Руководитель является единственным учредителем, то тогда признак ограничения доступа автоматически проставляется
	Если ЕдинственныйУчредительРуководитель Тогда
		ОграничитьДоступВЕГРЮЛУчастники = ОграничитьДоступВЕГРЮЛРуководитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.ВыборАдресаФизическогоЛица(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.ВыборАдресаФизическогоЛица(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, "Адрес места проживания");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	РегистрацияОрганизацииКлиент.ЗаявительТелефонПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEMailФизическиеЛицаПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEMailФизическиеЛица = СокрЛП(КонтактнаяИнформацияПолеEMailФизическиеЛица);
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	РегистрацияОрганизацииКлиент.ЗаявительПочтаПриИзменении(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияТелефона = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Телефон", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияПочты = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Почта", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
	КодПодтвержденияТелефона = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияПочтаНажатие(Элемент)
	
	СрокПовторнойОтправкиКодаДляПочты = Неопределено;
	КодПодтвержденияПочты = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдинственныйУчредительРуководительПриИзменении(Элемент)
	
	Если Учредители.Количество() > 0 Тогда
		Учредители.Очистить();
	КонецЕсли;
	
	Если ЕдинственныйУчредительРуководитель Тогда
		ФормированиеУставногоКапитала.УставныйКапитал = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();
	Иначе
		// До снятия флажка руководитель был единственным учредителем,
		// поэтому добавим его в список учредителей.
		Если Не ПустаяСтрока(Руководитель.Фамилия) И Не ПустаяСтрока(Руководитель.Имя) Тогда
			Если ЗаписатьРуководителя() Тогда
				ОповеститьОбИзменении(Руководитель.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если Не Руководитель.Ссылка.Пустая() Тогда
			НоваяСтрока = Учредители.Добавить();
			УчредителиПриНачалеРедактированияНовойСтроки(НоваяСтрока, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
			НоваяСтрока.Учредитель = Руководитель.Ссылка;
			НоваяСтрока.СуммаВзноса = ФормированиеУставногоКапитала.УставныйКапитал;
		КонецЕсли;
		УчредителиСуммаВзносаПриИзменении();
	КонецЕсли;
	
	УстановитьВидимостьГруппыУчредителей(ЭтотОбъект);
	УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(ЭтотОбъект);
	ОбработатьИзменениеУчредителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУставаПриИзменении(Элемент)
	
	ТипУставаПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТиповогоУставаПриИзменении(Элемент)
	
	НомерТиповогоУставаПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УставДобровольныйВыходИзОбществаПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура УставРешенияПодтверждаютсяНотариальноПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура УставПродажаДолиУчастникамБезСогласияПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура УставПродажаДолиТретьимЛицамБезСогласияПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура УставОтсутствуетПреимущественноеПравоПриПродажеПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура УставНаследованиеБезСогласияПриИзменении(Элемент)
	
	ПриИзмененииПараметровУстава();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	Если ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора() Тогда
		ВидНаЖительствоБессрочный = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	
	ОбработатьИзменениеСтраныГражданства();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БессрочныйВидНаЖительствоПриИзменении(Элемент)
	
	Если ВидНаЖительствоБессрочный Тогда
		ДанныеОснованияДляПроживанияВРФ.СрокДействия = '00010101';
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Фамилия", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Фамилия'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Фамилия", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Имя", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Имя'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Имя", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Отчество", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Отчество'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(Текст, "Руководитель.Отчество", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Место рождения'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "Руководитель.МестоРожденияПредставление", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Место рождения'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "Руководитель.МестоРожденияПредставление", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортКемВыданАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Кем выдан паспорт'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ПаспортныеДанныеРуководителя.КемВыдан", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортКемВыданОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Кем выдан паспорт'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ПаспортныеДанныеРуководителя.КемВыдан", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйПаспортКемВыданАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Кем выдан паспорт'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ПаспортныеДанныеРуководителя.КемВыдан", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйПаспортКемВыданОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаголовокЭлемента = НСтр("ru = 'Кем выдан паспорт'");
	РегистрацияОрганизацииКлиент.ПроверкаЯзыкаВвода(
		Текст, "ПаспортныеДанныеРуководителя.КемВыдан", ЗаголовокЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовИФНСличноПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(ЭтотОбъект);
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовМФЦличноПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(ЭтотОбъект);
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаОплатуПошлиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ТекущийСписокУчредителей(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаОплатуПошлиныАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ТекущийСписокУчредителей(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаОплатуПошлиныОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ТекущийСписокУчредителей(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСозданияЗаявленияПриИзменении(Элемент)
	
	ДоступныеСпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.ДоступныеСпособыПодачиДокументов(
		ДатаСозданияЗаявления);
	
	Если Не ДоступныеСпособыПодачиДокументов.Свойство(СпособПодачиДокументов) Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ФормированиеДокументовВЭлектронномВиде

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноОнлайнПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СканЗаявлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканУставНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканПротоколНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканДоговорНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканРешениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканДокументПодтверждающийАдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СканУведомлениеОПереходеНаУСННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганКодПриИзменении(Элемент)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганКодПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганСписокАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.РегистрирующийОрганСписокАвтоПодбор(ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныеДокументыЗначениеНажатие(Элемент)
	
	ДанныеФайла = РегистрацияОрганизацииВызовСервера.ДанныеФайлаДляОткрытия(
		ПодписанныеДокументы,
		УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПодписиДокументовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ОткрытьЖурналРегистрацииПриОшибкиПодписания();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.СтатусОтправкиОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		ЗаявлениеОРегистрации,
		РегистрацияОрганизацииКлиентСервер.ТипФайлаЛистЗаписиЕГР(Организация.ЮридическоеФизическоеЛицо),
		УникальныйИдентификатор,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчредители

&НаКлиенте
Процедура УчредителиПриИзменении(Элемент)
	
	ОбработатьИзменениеУчредителя();
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование 
		ИЛИ ТипУчредителяНовойСтроки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	Оповещение = Новый ОписаниеОповещения("ДобавитьУчредителяЗавершение", ЭтотОбъект);
	Элементы.Учредители.ТекущийЭлемент = Элементы.УчредителиУчредитель;
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.Учредители);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Учредители.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		УчредителиПриНачалеРедактированияНовойСтроки(ТекущиеДанные, ТипУчредителяНовойСтроки);
		ТипУчредителяНовойСтроки = Неопределено;
	КонецЕсли;
	
	МассивПараметрыВыбора = Новый Массив;
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Элементы.УчредителиУчредитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		МассивПараметрыВыбора.Добавить(НовыйПараметр);
	Иначе
		Элементы.УчредителиУчредитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	Элементы.УчредителиУчредитель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	
	УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриНачалеРедактированияНовойСтроки(ТекущиеДанные, Знач ТипУчредителя = Неопределено)
	
	Если Не ЗначениеЗаполнено(ТипУчредителя) Тогда
		ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонецЕсли;
	
	ТекущиеДанные.НадписьПредставитель = НСтр("ru = 'Представитель:'");
	ТекущиеДанные.НадписьДолжность     = НСтр("ru = 'Должность:'");
	ТекущиеДанные.НадписьНаОсновании   = НСтр("ru = 'На основании:'");
	ТекущиеДанные.ТипУчредителя        = ТипУчредителя;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		УчредителиСуммаВзносаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПослеУдаления(Элемент)
	
	УчредителиСуммаВзносаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиСуммаВзносаПриИзменении()
	
	ФормированиеУставногоКапитала.УставныйКапитал = Учредители.Итог("СуммаВзноса");
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораФизическогоЛица", ПараметрыФормы, Элемент);
	ИначеЕсли ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораЮридическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ЗначениеЗаполнено(ТекущиеДанные.Учредитель) Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Учредитель);
	Иначе
		ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	КонецЕсли;
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаЮридическогоЛица", ПараметрыФормы, Элемент);
	Иначе
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаЮридическогоЛица", ПараметрыФормы, Элемент);
	Иначе
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставительУчредителя) Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ПредставительУчредителя);
	КонецЕсли;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Представитель учредителя'"));
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru='Представитель учредителя'"));
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Учредители.ТекущиеДанные;
	РуководительНаОсновании = РегистрацияОрганизацииКлиентСервер.ОснованиеПолномочийПредставителя();
	ПрочееНаОсновании       = НСтр("ru='Доверенности №'");
	Если РегистрацияОрганизацииКлиентСервер.ЭтоДолжностьРуководителя(ТекущиеДанные.ДолжностьПредставителя) Тогда
		ТекущиеДанные.ПредставительНаОсновании = РуководительНаОсновании;
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.ПредставительНаОсновании)
		ИЛИ ТекущиеДанные.ПредставительНаОсновании = РуководительНаОсновании Тогда
		ТекущиеДанные.ПредставительНаОсновании = ПрочееНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьУчредителяФизическоеЛицо(Команда)
	
	ТипУчредителяНовойСтроки = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	ТекущийЭлемент = Элементы.Учредители;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчредителяЮридическоеЛицо(Команда)
	
	ТипУчредителяНовойСтроки = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	ТекущийЭлемент = Элементы.Учредители;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьСМССКодом(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьПисьмоНаПочту(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Организация.Ссылка.Пустая() Или Модифицированность
		Или ВыбраннаяФормаИзменена(ЗаявлениеОРегистрации, ВыбраннаяФорма) Тогда
		
		ДлительнаяОперация = ЗаписатьДанныеВФоне();
		
		Если ДлительнаяОперация = Неопределено Тогда
			// Ошибка проверки заполнения.
			Возврат;
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
			
		Иначе
			
			ИзменитьЭтап(НомерЭтапаОжидание(ИспользоватьТиповыеУставы));
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
			
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап(НомерЭтапаДокументы(ИспользоватьТиповыеУставы));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизации(Команда)
	
	ИзменитьЭтап(НомерЭтапаИзменение(ИспользоватьТиповыеУставы));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаАдресИФНСНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаАдресМФЦНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеБлижайшийМФЦ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресХранилища = ИнструкцияРегистрацияООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Инструкция по регистрации ООО.pdf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииОООНажатие(Элемент)
	
	ЗаявлениеОРегистрацииООО(Организация.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УставОООНажатие(Элемент)
	
	АдресХранилища = УставООО(Организация.Ссылка, ВыбраннаяФорма);
	
	ИмяФайла = НСтр("ru='Устав ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеЕдинственногоУчредителяОООНажатие(Элемент)
	
	АдресХранилища = РешениеЕдинственногоУчредителяООО(Организация.Ссылка, ДатаСозданияЗаявления, УставНомерТиповогоУстава);
	
	ИмяФайла = НСтр("ru='Решение единственного учредителя.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейОООНажатие(Элемент)
	
	АдресХранилища = ПротоколСобранияУчредителейООО(Организация.Ссылка, ДатаСозданияЗаявления, УставНомерТиповогоУстава);
	
	ИмяФайла = НСтр("ru='Протокол собрания учредителей ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейЕдинственногоУчредителяОООНажатие(Элемент)
	
	АдресХранилища = ПротоколСобранияУчредителейЕдинственногоУчредителяООО(
		Организация.Ссылка,
		ДатаСозданияЗаявления,
		УставНомерТиповогоУстава);
	
	ИмяФайла = СтрШаблон(НСтр("ru='Образец протокола собрания учредителей %1.rtf'"), НаименованиеЕдинственногоУчредителя);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "_");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбУчрежденииОООНажатие(Элемент)
	
	АдресХранилища = ДоговорОбУчрежденииООО(Организация.Ссылка, ДатаСозданияЗаявления, ОтветственныйЗаОплатуПошлины);
	
	ИмяФайла = НСтр("ru='Договор об учреждении ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеОПереходеНаУСНОООНажатие(Элемент)
	
	УведомлениеОПереходеНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	АдресХранилища = КвитанцияНаОплатуГоспошлины(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Квитанция на оплату госпошлины.pdf'");
	
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦ(Команда)
	
	ПоказатьНаКартеБлижайшийМФЦ(Элементы.ПоказатьБлижайшийМФЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПредупреждениеОбОшибке = Новый Структура;
	Если НЕ ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке) Тогда
		ВызватьИсключение ПредупреждениеОбОшибке;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	
	ОткрытьФормуНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	СохранитьДанныеЗаявления();
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУстав(Команда)
	
	СохранитьДанныеЗаявления();
	
	Если ИспользоватьТиповыеУставы Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьЭтап(НомерЭтапаУстав());
	Иначе
		СформироватьДокументы(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНомерТиповогоУставаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ОткрытьФормуПросмотраТиповогоУстава(
		ЭтотОбъект,
		УставНомерТиповогоУстава,
		УникальныйИдентификатор);
	
КонецПроцедуры

#Область ПрикрепленныеДокументы

&НаКлиенте
Процедура ОчиститьОтсканированноеЗаявление(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Заявление, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйПротокол(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Протокол, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйДоговор(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Договор, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
	КонецПроцедуры
	
&НаКлиенте
Процедура ОчиститьОтсканированныйУстав(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Устав, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйРешение(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().Решение, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументПодтверждающийАдрес(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ДокументПодтверждающийАдрес, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканУведомленияОПереходеНаУСН(Команда)
	
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().УведомлениеОПереходеНаУСН, ,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтсканированныйИнойДокумент(Команда)
	
	НомерДокумента = СтрЗаменить(ТекущийЭлемент.Имя, "ОчиститьОтсканированныйИнойДокумент", "");
	РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
		ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ИнойДокумент,
		НомерДокумента,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
	
	ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнойДокумент(Команда)
	
	ИмяНовогоЭлемента = ДобавитьИнойДокументНаСервере();
	
	Если ЗначениеЗаполнено(ИмяНовогоЭлемента) Тогда
		РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(
			ЭтотОбъект,
			ЗаявлениеОРегистрации,
			ИмяНовогоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписанныеДокументы(Команда)
	
	ОчиститьПодписанныеДокументыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументы(Команда)
	
	ПроверитьИПодписатьДокументы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
		
		ОповеститьОбИзменении(Организация.Ссылка);
		ОповеститьОбИзменении(ФизическоеЛицоРуководитель.Ссылка);
		
	Иначе
		ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаявления()
	
	СпособРегистрации = СпособРегистрации(СпособПодачиДокументов);
	
	ДанныеЗаявления = Обработки.РегистрацияОрганизации.НовыеДанныеЗаявления();
	
	ДанныеЗаявления.НаименованиеОрганизации       = Организация.НаименованиеСокращенное;
	ДанныеЗаявления.ПолноеНаименованиеОрганизации = Организация.НаименованиеПолное;
	ДанныеЗаявления.Фамилия                       = Руководитель.Фамилия;
	ДанныеЗаявления.Имя                           = Руководитель.Имя;
	ДанныеЗаявления.Отчество                      = Руководитель.Отчество;
	ДанныеЗаявления.Пол                           = Строка(Руководитель.Пол);
	ДанныеЗаявления.ИНН                           = Руководитель.ИНН;
	ДанныеЗаявления.Телефон                       = КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
	ДанныеЗаявления.Email                         = КонтактнаяИнформацияПолеEMailФизическиеЛица;
	ДанныеЗаявления.СпособРегистрации =
		Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(СпособРегистрации);
	
	ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации),
		,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	ДанныеЗаявления.ВидУстава           = УставВид;
	ДанныеЗаявления.НомерТиповогоУстава = УставНомерТиповогоУстава;
	ДанныеЗаявления.ВыдатьНаБумажномНосителе = ВыдатьНаБумажномНосителе;
	
	ДанныеЗаявления.НомерТелефонаПодтвержден = НомерТелефонаПодтвержден;
	ДанныеЗаявления.ЭлектроннаяПочтаПодтверждена = ЭлектроннаяПочтаПодтверждена;
	
	ДанныеЗаявления.ФорматОтправкиДокументов = ФорматОтправкиДокументов;
	ДанныеЗаявления.Ссылка = Организация.Ссылка;
	ДанныеЗаявления.СпособПодачиДокументов = СпособПодачиДокументов;
	
	Возврат ДанныеЗаявления;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатВыполнения.Свойство("УставныйКапитал") Тогда
		УставныйКапиталОбъект = РезультатВыполнения.УставныйКапитал.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(УставныйКапиталОбъект, "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	ДанныеЗаявления = ДанныеЗаявления();
	ДанныеЗаявления.Ссылка = РезультатВыполнения.Организация;
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления);
	
	ПодготовитьФормуНаСервере();
	
	ОшибкаПодписанияДокументов = Ложь;
	НетСертификатаПодписи = Ложь;
	Модифицированность = Ложь;
	
	ОчиститьПодписанныеДокументыНаСервере();
	ВидыПрикрепленныхДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
	ПараметрыОтображения = ПараметрыОтображенияЭлементовФормы(ЭтотОбъект);
	
	Для Каждого ТекущийВидДокумента Из ВидыПрикрепленныхДокументов Цикл
		
		РегистрацияОрганизацииКлиентСервер.ОчиститьПрикрепленныйДокумент(
			ЭтотОбъект,
			ТекущийВидДокумента.Значение, ,
			ПараметрыОтображения);
		
		Если ТекущийВидДокумента.Значение = ВидыПрикрепленныхДокументов.ИнойДокумент Тогда
			РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьЭтап(НомерЭтапаДокументы(ИспользоватьТиповыеУставы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация)
	
	// Если при создании документов прозошла ошибка,
	// то нужно вернуться на этап заполнения данных и вывести сообщение об ошибке.
	ИзменитьЭтап(НомерЭтапаВводДанных());
	
	Текст = НСтр("ru = 'Ошибка при формировании документов:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиУведомлениеОСпецРежимеНалогообложения(Знач ОрганизацияСсылка)
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = Обработки.РегистрацияОрганизации.ПолноеИмяФормыПоУмолчанию("РегламентированноеУведомлениеПереходНаУСН");
	
	Возврат Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
												ОрганизацияСсылка, ВидУведомления, ИмяФормыПоУмолчанию);
	
КонецФункции

&НаСервере
Процедура ВыполнитьПроверкуЗаполненияДанныхЭтапа1(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	ПустойАдрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	ДопустимоВНаименованииКромеКириллицы = "!""№()+-., 0123456789";
	ДопустимоВФИОКромеКириллицы = РегистрацияОрганизацииКлиентСервер.УниверсальныеСимволыВПаспортныхДанных();
	
	// Сокращенное наименование
	Префикс = НСтр("ru='ООО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если НЕ ЗначениеЗаполнено(Организация.НаименованиеСокращенное) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сокращенное наименование'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.НаименованиеСокращенное, 
		Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Сокращенное наименование заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	ИначеЕсли СтрНайти(Организация.НаименованиеСокращенное, Префикс) <> 1 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Сокращенное наименование должно начинаться с ""%1""'"), Префикс);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	КонецЕсли;
	
	// Полное наименование
	Префикс = НСтр("ru='Общество с ограниченной ответственностью'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если НЕ ЗначениеЗаполнено(Организация.НаименованиеПолное) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Полное наименование'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.НаименованиеПолное,
		Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Полное наименование заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	ИначеЕсли СтрНайти(Организация.НаименованиеПолное, Префикс) <> 1 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Полное наименование должно начинаться со слов ""%1""'"), Префикс);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	КонецЕсли;
	
	// Юридический адрес
	Если КонтактнаяИнформацияПолеЮрАдресОрганизации = ПустойАдрес Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Юридический адрес'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ);
	
	// Адрес руководителя
	Если Гражданство = КодРоссии Тогда
		Если КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = ПустойАдрес Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Адрес руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
		КонецЕсли;
	Иначе
		Если КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛица = ПустойАдрес Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Адрес руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛица", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// ИНН руководителя
	ТекстСообщения = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ИНН", , Отказ);
	КонецЕсли;
	
	// Телефон руководителя
	Если НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	ИначеЕсли НЕ ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(
		КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Электронная почта руководителя
	Если ЕдинственныйУчредительРуководитель
		Или Не РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСозданияЗаявления) Тогда
		
		ПроверитьЗаполнениеАдресаЭлектроннойПочты(
			"КонтактнаяИнформацияПолеEMailФизическиеЛица",
			НСтр("ru = 'E-mail заявителя'"),
			Отказ);
	КонецЕсли;
	
	// Учредители
	
	МинимальныйУставныйКапитал = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();
	Если ЕдинственныйУчредительРуководитель Тогда
		
		// Уставный капитал
		Если ФормированиеУставногоКапитала.УставныйКапитал < МинимальныйУставныйКапитал Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Уставный капитал не может быть меньше %1 руб.'"),
				Формат(МинимальныйУставныйКапитал, "ЧДЦ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ФормированиеУставногоКапитала.УставныйКапитал", , Отказ);
		КонецЕсли;
		
	Иначе
		
		ИмяСписка = НСтр("ru = 'Учредители'");
		
		Если Учредители.Количество() = 0 Тогда
			
			// Заполнение списка учредителей
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", , , , ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Учредители", , Отказ);
			
		Иначе
			
			Для Индекс = 0 По Учредители.Количество() - 1 Цикл
				СтрокаТаблицы = Учредители[Индекс];
				НомерСтроки = Формат(Индекс + 1, "ЧГ=");
				ПутьКСтроке = "Учредители[" + Формат(Индекс, "ЧГ=") + "].";
				
				// Учредитель
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Учредитель) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", , НСтр("ru = 'Учредитель'"), НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
						, ПутьКСтроке + "Учредитель", , Отказ);
				КонецЕсли;
				
				Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					
					// Представитель учредителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставительУчредителя) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'Представитель'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ПредставительУчредителя", , Отказ);
					КонецЕсли;
					
					// Должность представителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДолжностьПредставителя) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'Должность представителя'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ДолжностьПредставителя", , Отказ);
					КонецЕсли;
					
					// Основание полномочий представителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставительНаОсновании) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'На основании'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ПредставительНаОсновании", , Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзноса) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", , НСтр("ru = 'Сумма взноса'"), НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКСтроке + "СуммаВзноса", , Отказ);
				КонецЕсли;
			КонецЦикла;
			
			// Уставный капитал
			Если Учредители.Итог("СуммаВзноса") < МинимальныйУставныйКапитал Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Уставный капитал не может быть меньше %1 руб.'"),
					Формат(МинимальныйУставныйКапитал, "ЧДЦ="));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Учредители", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Способ подачи документов
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ подачи документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособПодачиДокументов", , Отказ);
	КонецЕсли;
	
	Если УказыватьОтветственногоЗаГоспошлину(ЭтотОбъект) Тогда
		ПроверяемыеРеквизиты.Добавить("ОтветственныйЗаОплатуПошлины");
	КонецЕсли;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов)
		И Не ЗначениеЗаполнено(Руководитель.ИНН) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите ИНН руководителя'"), , "Руководитель.ИНН", , Отказ);
	КонецЕсли;
	
	Если Не РегистрацияОрганизацииСервер.КонтанктнаяИнформацияПодтверждена(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица")) Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ)
	
	ДопустимоКромеКириллицы = "-. 0123456789";
	
	// Фамилия руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Фамилия) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Фамилия", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Фамилия,
		Истина, ДопустимоКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Фамилия заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Фамилия", , Отказ);
	КонецЕсли;
	
	// Имя руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Имя) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Имя", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Имя,
		Истина, ДопустимоКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Имя заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Имя", , Отказ);
	КонецЕсли;
	
	// Отчество руководителя
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Отчество,
		Истина, ДопустимоКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Отчество заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Отчество", , Отказ);
	КонецЕсли;
	
	// Дата рождения руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ДатаРождения", , Отказ);
	ИначеЕсли Руководитель.ДатаРождения > ДатаСозданияЗаявления Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ДатаРождения", , Отказ);
	КонецЕсли;
	
	// Место рождения руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "Руководитель.МестоРожденияПредставление", , Отказ);
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
			Руководитель.МестоРожденияПредставление, Ложь, ДопустимоКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Место рождения заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "Руководитель.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
	// Пол руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Пол) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Пол", , Отказ);
	КонецЕсли;
	
	// Должность руководителя
	Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.Должность", , Отказ);
	КонецЕсли;
	
	// Срок полномочий руководителя
	Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Срок полномочий руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.СрокПолномочий", , Отказ);
	КонецЕсли;
	
	// Гражданство
	Если Не ЗначениеЗаполнено(Гражданство) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Гражданство'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Гражданство", , Отказ);
	КонецЕсли;

	// Серия и номер паспорта руководителя
	ГражданинРФ = Гражданство = КодРоссии;
	ЕстьГражданство =
		Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	Если ГражданинРФ И Не ЗначениеЗаполнено(ПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
	ИначеЕсли ГражданинРФ Тогда
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортСерияНомер));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
		КонецЕсли;
	ИначеЕсли ЕстьГражданство И Не ЗначениеЗаполнено(ИностранныйПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИностранныйПаспортСерияНомер", , Отказ);
	КонецЕсли;
	
	// Кем выдан паспорта руководителя
	Если ЕстьГражданство И Не ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан паспорт'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.КемВыдан", , Отказ);
	ИначеЕсли ЕстьГражданство И Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
		ПаспортныеДанныеРуководителя.КемВыдан, Ложь, ДопустимоКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Кем выдан паспорт заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
			"ПаспортныеДанныеРуководителя.КемВыдан", , Отказ);
	КонецЕсли;
	
	// Дата выдачи паспорта руководителя
	Если ЕстьГражданство И Не ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
			"ПаспортныеДанныеРуководителя.ДатаВыдачи", , Отказ);
	ИначеЕсли ЕстьГражданство Тогда
		ПричинаОшибки = "";
		Если Не Обработки.РегистрацияОрганизации.ПаспортДействителен(
			ПаспортныеДанныеРуководителя.ДатаВыдачи, Руководитель.ДатаРождения, ПричинаОшибки, ГражданинРФ) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Паспорт недействителен: %1'"), ПричинаОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанныеРуководителя.ДатаВыдачи", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Код подразделения паспорта руководителя
	Если ГражданинРФ И Не ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.КодПодразделения", , Отказ);
	ИначеЕсли ГражданинРФ Тогда
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ПаспортныеДанныеРуководителя.КодПодразделения);
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ПаспортныеДанныеРуководителя.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьГражданство Тогда
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Вид документа'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидДокумента", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СерияНомерОснованияДляПроживания) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерОснованияДляПроживания", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.КемВыдан) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.КемВыдан", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи", , Отказ);
		КонецЕсли;
		Если ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора()
			И Не ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Действует до'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.СрокДействия", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьГражданство И ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия)
		И ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи > ДанныеОснованияДляПроживанияВРФ.СрокДействия Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Срок действия документа (%1) не может быть меньше даты его выдачи (%2)'"),
			Формат(ДанныеОснованияДляПроживанияВРФ.СрокДействия, "ДЛФ=DD"),
			Формат(ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДанныеОснованияДляПроживанияВРФ.СрокДействия", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаявлениеЗаполнено = ЗначениеЗаполнено(ЗаявлениеОРегистрации);
	
	Если ИспользуетсяСервисРегистрации Или Не ЗаявлениеЗаполнено Тогда
		ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
		ОрганизацияСсылка = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	ИначеЕсли ЗаявлениеЗаполнено Тогда
		ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаЗаполнения(ЗаявлениеОРегистрации);
		ОрганизацияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявлениеОРегистрации, "Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ПрочитатьДанныеОрганизации(ОрганизацияСсылка);
	КонецЕсли;
	
	// Если на предыдущих этапах, что-то было изменено, то установим модифицированность у формы.
	Если ЗначениеЗаполнено(ОрганизацияСсылка)
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "Модифицированность", Ложь) Тогда
		
		Модифицированность = Истина;
	КонецЕсли;
	
	РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(ОрганизацияСсылка);
	Если ЗначениеЗаполнено(РеквизитыЗаявления) Тогда
		ЗаявлениеОРегистрации = РеквизитыЗаявления.Ссылка;
	КонецЕсли;
	
	СервисУзнатьИННДоступен = Обработки.РегистрацияОрганизации.СервисУзнатьИННДоступен();
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	// Установим ОКВЭД
	Если ДанныеПомощникаРегистрации.Свойство("ВидДеятельности") Тогда
		ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
		Если Организация.КодОКВЭД2 <> ВидДеятельности.ОсновнойКод Тогда
			Организация.КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
		КонецЕсли;
		Если Организация.НаименованиеОКВЭД2 <> ВидДеятельности.ОсновноеНаименование Тогда
			Организация.НаименованиеОКВЭД2 = ВидДеятельности.ОсновноеНаименование;
		КонецЕсли;
		Если Организация.ДополнительныеКодыОКВЭД2 <> ВидДеятельности.ДополнительныеКоды Тогда
			Организация.ДополнительныеКодыОКВЭД2 = ВидДеятельности.ДополнительныеКоды;
		КонецЕсли;
	КонецЕсли;
	
	// Установим учетную политику
	ОрганизацииФормы.ПрочитатьУчетнуюПолитику(ЭтотОбъект, Организация.Ссылка);
	
	Если ДанныеПомощникаРегистрации.Свойство("Налоги") Тогда
		СохраненнаяСтруктураУчетнойПолитики = ДанныеПомощникаРегистрации.Налоги.СтруктураУчетнойПолитики;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураУчетнойПолитики, СохраненнаяСтруктураУчетнойПолитики, Истина);
	КонецЕсли;
	
	УставНомерТиповогоУстава = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации,
		"НомерТиповогоУстава",
		РегистрацияОрганизацииКлиентСервер.НомерУставаПоУмолчанию());
	
	ПрочитатьОтветственныеЛица();
	ПрочитатьДанныеРуководителя();
	ПрочитатьДанныеУчредителей();
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	УстановитьВидимостьОшибкиИНН(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ДанныеЗаявления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "Заявление");
	Если ДанныеЗаявления <> Неопределено Тогда
		ФорматОтправкиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ФорматОтправкиДокументов");
		СпособПодачиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "СпособПодачиДокументов");
		ВыдатьНаБумажномНосителе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ВыдатьНаБумажномНосителе");
		НомерТелефонаПодтвержден = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "НомерТелефонаПодтвержден");
		ЭлектроннаяПочтаПодтверждена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаявления, "ЭлектроннаяПочтаПодтверждена");
	ИначеЕсли ДанныеПомощникаРегистрации <> Неопределено Тогда
		ФорматОтправкиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "ФорматОтправкиДокументов");
		СпособПодачиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "СпособПодачиДокументов");
		ВыдатьНаБумажномНосителе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаРегистрации, "ВыдатьНаБумажномНосителе");
		НомерТелефонаПодтвержден = Истина;
		ЭлектроннаяПочтаПодтверждена = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
	КонецЕсли;
	
	СвойстваСтраныИГражданства = РегистрацияОрганизацииСервер.СвойстваСтраныИГражданстваПоУмолчанию();
	Гражданство = СвойстваСтраныИГражданства.Гражданство;
	КодРоссии = СвойстваСтраныИГражданства.КодРоссии;
	
	Элементы.Гражданство.СписокВыбора.Очистить();
	Для Каждого ЗначениеСписка Из СвойстваСтраныИГражданства.СписокВыбораГражданства Цикл
		Элементы.Гражданство.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
	ПодачаДокументовВЭлектронномВидеДоступна = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПоддерживаетсяФормированиеПакетаДляВнесенияИзмененийВЕГРЮЛ();
	
	СписокНалоговыхОрганов = РегистрыСведений.РегистрирующиеНалоговыеОрганы.СписокРегистрирующихОрганов();
	Элементы.РегистрирующийОрганСписок.СписокВыбора.Очистить();
	
	Для Каждого ЗначениеСписка Из СписокНалоговыхОрганов Цикл
		Элементы.РегистрирующийОрганСписок.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КодНалоговогоОргана) И ДанныеПомощникаРегистрации.Свойство("ДанныеОрганизации") Тогда
		КодНалоговогоОргана = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеПомощникаРегистрации.ДанныеОрганизации,
			"КодНалоговогоОргана");
		ЮридическийАдресЗначениеJSON = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеПомощникаРегистрации.ДанныеОрганизации,
			"ЮридическийАдресЗначениеJSON");
		РегистрирующийОрганКод = Обработки.РегистрацияОрганизации.КодРегистрирующегоОргана(
			ЮридическийАдресЗначениеJSON,
			Организация.ИНН,
			Истина);
	КонецЕсли;
	
	РегистрацияОрганизацииСервер.УстановитьПросмотрЭлементовФормы(
		ЭтотОбъект,
		Не РегистрацияОрганизацииСервер.ДоступенПомощникРегистрацииНовогоБизнеса());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеОрганизации(ОрганизацияСсылка)
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации")
		И ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		// СтандартныеПодсистемы.КонтактнаяИнформация
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ОрганизацияОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
	КонецЕсли;
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОтветственныеЛица.СрокПолномочий = 5;
	ЕдинственныйУчредительРуководитель      = Истина;
	
	СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
	
	ФормированиеУставногоКапитала.СпособРегистрации = СпособРегистрации(СпособПодачиДокументов);
	ФормированиеУставногоКапитала.УставныйКапитал   = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();
	
	УставВид = ?(ИспользоватьТиповыеУставы, ЗначениеВидУставаТиповой(), ЗначениеВидУставаИндивидуальный());
	
	УстановитьФорматОтправкиДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЦветСтиля_НезаполненныйРеквизит = ЦветаСтиля.НезаполненныйРеквизит;
	
	// Юридический адрес
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСтиля_НезаполненныйРеквизит);
	
	// Адрес руководителя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛица",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСтиля_НезаполненныйРеквизит);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСтиля_НезаполненныйРеквизит);
	
	// Представитель учредителя - юридического лица, должность и основание полномочий.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительУчредителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьПредставитель");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьДолжность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиДолжностьПредставителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьНаОсновании");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительНаОсновании");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ТипУчредителя",
		ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчредителяЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТипУчредителяНовойСтроки = ВыбранныйЭлемент.Значение;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОшибкиИНН(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НадписьОшибкаИННРуководителя.Видимость = НЕ ПустаяСтрока(Форма.НадписьОшибкаИННРуководителя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаУчредитель Из Учредители Цикл
		СтрокаУчредитель.НадписьПредставитель = НСтр("ru='Представитель:'");
		СтрокаУчредитель.НадписьДолжность     = НСтр("ru='Должность:'");
		СтрокаУчредитель.НадписьНаОсновании   = НСтр("ru='На основании:'");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.Свойство("ИмяРеквизита")
		И Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		ПриИзмененииЮрАдресаОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЮрАдресаОрганизации()
	
	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	ОпределитьКодНалоговогоОргана();
	ОпределитьРегистрирующийОрган();
	ОбработатьИзменениеЮрАдресаОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ДанныеПриемника[0].Значение = ДанныеИсточника[0].Значение;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтветственныеЛица()
	
	Если НЕ ЗначениеЗаполнено(Организация.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация.Ссылка);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий КАК СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизаций";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ОтветственныеЛица, Выборка);
		РуководительСсылка = Выборка.ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеРуководителя()
	
	ОрганизацииФормы.ПрочитатьДанныеФизическогоЛица(ЭтотОбъект, РуководительСсылка, ИменаРеквизитовФизическогоЛица());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеУчредителей()
	
	Если НЕ ЗначениеЗаполнено(Организация.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка); 
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеУставногоКапитала.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеУставногоКапитала КАК ФормированиеУставногоКапитала
	|ГДЕ
	|	ФормированиеУставногоКапитала.Организация = &Организация
	|	И НЕ ФормированиеУставногоКапитала.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	РуководительСсылка = ОтветственныеЛица.ФизическоеЛицо;
	ЕдинственныйУчредительРуководитель = ФормированиеУставногоКапитала.Учредители.Количество() = 0
		ИЛИ ФормированиеУставногоКапитала.Учредители.Количество() = 1 
		И ФормированиеУставногоКапитала.Учредители[0].Учредитель = РуководительСсылка;
		
	ТаблицаУчредители = ФормированиеУставногоКапитала.Учредители.Выгрузить();
	Учредители.Загрузить(ТаблицаУчредители);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВФоне()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для регистрации организации'");
	
	ПараметрыФормированияДокументов = ПараметрыФормированияДокументов();
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РегистрацияОрганизации.СформироватьДокументыОООВФоне", ПараметрыФормированияДокументов, НастройкиЗапуска);
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	ПараметрыФормированияДокументов = Новый Структура;
	
	// Организация
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка",                    Организация.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ДанныеОрганизации.Вставить("НаименованиеСокращенное",   Организация.НаименованиеСокращенное);
	ДанныеОрганизации.Вставить("НаименованиеПолное",        Организация.НаименованиеПолное);
	ДанныеОрганизации.Вставить("Наименование",              Организация.Наименование);
	ДанныеОрганизации.Вставить("ЮридическийАдресЗначениеJSON", 
			ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации));
	ДанныеОрганизации.Вставить("КодНалоговогоОргана",       КодНалоговогоОргана);
	ДанныеОрганизации.Вставить("КодОКВЭД2",                 Организация.КодОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2",        Организация.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",  Организация.ДополнительныеКодыОКВЭД2);
	ДанныеОрганизации.Вставить("ЭлектроннаяПочта",          КонтактнаяИнформацияПолеEmailОрганизации);
	ДанныеОрганизации.Вставить("ОграничитьДоступВЕГРЮЛРуководитель", ОграничитьДоступВЕГРЮЛРуководитель);
	ДанныеОрганизации.Вставить("ОграничитьДоступВЕГРЮЛУчастники", ОграничитьДоступВЕГРЮЛУчастники);
	
	ДанныеОрганизации.Вставить("УчетнаяПолитика",           ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураУчетнойПолитики));
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	
	ПараметрыФормированияДокументов.Вставить("ДанныеРуководителя", ДанныеРуководителя());
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОДолжностиРуководителя", ДанныеОДолжностиРуководителя());
	
	ДанныеУставногоКапитала = Новый Структура();
	ДанныеУставногоКапитала.Вставить("Ссылка",            ФормированиеУставногоКапитала.Ссылка);
	ДанныеУставногоКапитала.Вставить("УставныйКапитал",   ФормированиеУставногоКапитала.УставныйКапитал);
	ДанныеУставногоКапитала.Вставить("Учредители",        Учредители.Выгрузить());
	
	ДанныеУставногоКапитала.Вставить("СпособРегистрации", СпособРегистрации(СпособПодачиДокументов));
	ДанныеУставногоКапитала.Вставить("ЕдинственныйУчредительРуководитель", ЕдинственныйУчредительРуководитель);
	
	ПараметрыФормированияДокументов.Вставить("ДанныеУставногоКапитала", ДанныеУставногоКапитала);
	ПараметрыФормированияДокументов.Вставить("СпособРегистрации", СпособРегистрации(СпособПодачиДокументов));
	ПараметрыФормированияДокументов.Вставить("СпособПодачиДокументов", СпособПодачиДокументов);
	
	ПараметрыФормированияДокументов.Вставить("НомерТиповогоУстава", УставНомерТиповогоУстава);
	ПараметрыФормированияДокументов.Вставить("ВыдатьНаБумажномНосителе", ВыдатьНаБумажномНосителе);
	ПараметрыФормированияДокументов.Вставить("ОтветственныйЗаОплатуПошлины", ОтветственныйЗаОплатуПошлины);
	ПараметрыФормированияДокументов.Вставить("ДатаСоставления", ДатаСозданияЗаявления);
	
	ПараметрыФормированияДокументов.Вставить("НомерТелефонаПодтвержден", НомерТелефонаПодтвержден);
	ПараметрыФормированияДокументов.Вставить("ЭлектроннаяПочтаПодтверждена", ЭлектроннаяПочтаПодтверждена);
	
	ПараметрыФормированияДокументов.Вставить("ФорматОтправкиДокументов", ФорматОтправкиДокументов);
	
	Возврат ПараметрыФормированияДокументов;
	
КонецФункции

&НаСервере
Функция ДанныеРуководителя()
	
	ДанныеРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеРуководителя.Ссылка                     = Руководитель.Ссылка;
	ДанныеРуководителя.Фамилия                    = Руководитель.Фамилия;
	ДанныеРуководителя.Имя                        = Руководитель.Имя;
	ДанныеРуководителя.Отчество                   = Руководитель.Отчество;
	ДанныеРуководителя.Пол                        = Руководитель.Пол;
	ДанныеРуководителя.ИНН                        = Руководитель.ИНН;
	ДанныеРуководителя.ДатаРождения               = Руководитель.ДатаРождения;
	ДанныеРуководителя.МестоРожденияПредставление = Руководитель.МестоРожденияПредставление;
	
	ГражданинРФ = Гражданство = КодРоссии;
	ИностранныйГражданин =
		Не ГражданинРФ И Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	
	Если ГражданинРФ Тогда
		ДанныеРуководителя.АдресПропискиЗначениеJSON  =
			ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица);
	Иначе
		ДанныеРуководителя.АдресИнформированияЗначениеJSON =
			ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеАдресДляИнформированияФизическиеЛица);
	КонецЕсли;
	
	ДанныеРуководителя.ТелефонРабочийЗначениеJSON = ЗначениеJSONКонтактнойИнформации(
		ЭтотОбъект,
		Элементы.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица);
	
	ДанныеРуководителя.EMailЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		КонтактнаяИнформацияПолеEMailФизическиеЛица,
		Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	Если ГражданинРФ Или ИностранныйГражданин Тогда
		ДанныеРуководителя.Гражданство =
			УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Гражданство);
		
		Если ГражданинРФ Тогда
			СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
			ДанныеРуководителя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
			ДанныеРуководителя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
			ДанныеРуководителя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанныеРуководителя.КодПодразделения;
		ИначеЕсли ИностранныйГражданин Тогда
			ДанныеРуководителя.ПаспортныеДанные.Номер = ИностранныйПаспортСерияНомер;
		КонецЕсли;
		ДанныеРуководителя.ПаспортныеДанные.КемВыдан   = ПаспортныеДанныеРуководителя.КемВыдан;
		ДанныеРуководителя.ПаспортныеДанные.ДатаВыдачи = ПаспортныеДанныеРуководителя.ДатаВыдачи;
	Иначе
		СерияИНомерОснованияДляПроживанияВРФ =
			ДокументыФизическихЛицБП.СерияНомерДокументаРаздельно(СерияНомерОснованияДляПроживания);
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя.ДанныеОснованияДляПроживанияВРФ,
			ДанныеОснованияДляПроживанияВРФ);
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя.ДанныеОснованияДляПроживанияВРФ,
			СерияИНомерОснованияДляПроживанияВРФ);
		ДанныеРуководителя.ДанныеОснованияДляПроживанияВРФ.ВидДокумента = ВидДокумента;
	КонецЕсли;
	
	Возврат ДанныеРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеОДолжностиРуководителя()
	
	ДанныеОДолжностиРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеДолжности();
	ДанныеОДолжностиРуководителя.ДатаНазначения = ОтветственныеЛица.Период;
	ДанныеОДолжностиРуководителя.Должность      = ОтветственныеЛица.Должность;
	ДанныеОДолжностиРуководителя.СрокПолномочий = ОтветственныеЛица.СрокПолномочий;
	
	Возврат ДанныеОДолжностиРуководителя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеJSONКонтактнойИнформации(Форма, Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = Элемент.Имя;
	ДанныеИсточника = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].Значение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ЗаписатьРуководителя()
	
	РуководительСсылка = Обработки.РегистрацияОрганизации.ЗаписатьФизическоеЛицо(ДанныеРуководителя());
	ПрочитатьДанныеРуководителя();
	
	Возврат Не РуководительСсылка.Пустая();
	
КонецФункции

&НаСервере
Функция ИменаРеквизитовФизическогоЛица()

	Имена = Новый Структура;
	Имена.Вставить("ФизическоеЛицо", "Руководитель");
	Имена.Вставить("ПаспортныеДанные", "ПаспортныеДанныеРуководителя");
	Имена.Вставить("СерияНомерПаспорта", "ПаспортСерияНомер");
	Имена.Вставить("ИностранныйПаспортСерияНомер", "ИностранныйПаспортСерияНомер");
	Имена.Вставить("ДанныеОснованияДляПроживанияВРФ", "ДанныеОснованияДляПроживанияВРФ");
	Имена.Вставить("СерияНомерОснованияДляПроживания", "СерияНомерОснованияДляПроживания");
	Имена.Вставить("ВидОснованияДляПроживанияВРФ", "ВидДокумента");
	Имена.Вставить("Гражданство", "Гражданство");
	Имена.Вставить("ГруппаКонтактныеДанные", "ГруппаКонтактныеДанныеРуководителя");
	Возврат Имена;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОбОшибкеИНН(Знач ИНН)
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ИНН) Тогда
		ЦифрыИНН = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ИНН);
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЦифрыИНН, Ложь, ТекстСообщения);
	КонецЕсли;
	Возврат ТекстСообщения;

КонецФункции

&НаСервереБезКонтекста
Функция ПодаетсяУведомлениеОПереходеНаУСН(Знач СтруктураУчетнойПолитики)
	
	Возврат Обработки.РегистрацияОрганизации.ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	
КонецФункции

&НаСервере
Процедура ИзменитьЭтап(НомерЭтапа)
	
	Если НомерЭтапа = НомерЭтапаВводДанных() Тогда
		
		Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
			ОпределитьКодНалоговогоОргана();
		КонецЕсли;
		ОпределитьРегистрирующийОрган();
		
		УстановитьВидимостьСтраницы("СтраницаВводДанных");
		
	ИначеЕсли НомерЭтапа = НомерЭтапаОжидание(ИспользоватьТиповыеУставы) Тогда
		
		УстановитьВидимостьСтраницы("СтраницаОжидание");
		
	ИначеЕсли НомерЭтапа = НомерЭтапаУстав() Тогда
		
		Если Не ЗначениеЗаполнено(УставАдресТиповыеУставы) Тогда
			
			УставАдресТиповыеУставы = Обработки.РегистрацияОрганизации.ПодготовитьТаблицуТиповыхУставов(УникальныйИдентификатор);
			
			Если УставНомерТиповогоУстава = 0 Тогда
				УставНомерТиповогоУстава = НомерТиповогоУстава();
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьСтраницы("СтраницаУстав");
	
	ИначеЕсли НомерЭтапа = НомерЭтапаДокументы(ИспользоватьТиповыеУставы) Тогда
		
		Если Не ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
			РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(Организация.Ссылка);
			Если ЗначениеЗаполнено(РеквизитыЗаявления) Тогда
				ЗаявлениеОРегистрации = РеквизитыЗаявления.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
			
			// Для электронного способа подачи документов предварительно проверяем выгрузку отчета
			ОшибкаПроверкиЗаявления = РегистрацияОрганизацииКлиентСервер.ОшибкаПроверкиВыгрузкиЗаявления(ЗаявлениеОРегистрации);
			Если ЗначениеЗаполнено(ОшибкаПроверкиЗаявления) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОшибкаПроверкиЗаявления, ЗаявлениеОРегистрации);
				НомерЭтапа = НомерЭтапаВводДанных();
				УстановитьВидимостьСтраницы("СтраницаВводДанных");
			Иначе
				УстановитьВидимостьСтраницы("СтраницаРегистрация");
			КонецЕсли;
			
			УстановитьПредставлениеПрикрепленныхФайлов();
			
		Иначе
			ОпределитьРегистрирующийОрган();
			ОпределитьТерриториальнуюНалоговуюИнспекцию();
			
			КвитанцияОбОплатеГоспошлины = 
				Обработки.РегистрацияОрганизации.ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация.Ссылка);
			
			КвитанцияОбОплатеГоспошлиныПолучена = КвитанцияОбОплатеГоспошлины <> Неопределено
				И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КвитанцияОбОплатеГоспошлины, "ПометкаУдаления");
			
			УстановитьВидимостьСтраницы("СтраницаРегистрация");
			ТекущийЭлемент = Элементы.ХочуКонсультацию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийЭтап = НомерЭтапа;
	
	УправлениеФормой(ЭтотОбъект);
	
	РазместитьНавигациюНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ТекущийЭтап = НомерЭтапаВводДанных() Тогда
		
		УправлениеЗакладкойВводДанных(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = НомерЭтапаУстав() И Форма.ТекущийЭтап <> НомерЭтапаОжидание(Форма.ИспользоватьТиповыеУставы) Тогда
		
		УправлениеЗакладкойУстав(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = НомерЭтапаДокументы(Форма.ИспользоватьТиповыеУставы) Тогда
		
		УправлениеЗакладкойДокументы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойВводДанных(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ДанныеОснованияДляПроживанияВРФСрокДействия.АвтоОтметкаНезаполненного =
		Форма.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
	Элементы.ДанныеОснованияДляПроживанияВРФСрокДействия.ОтметкаНезаполненного =
		Элементы.ДанныеОснованияДляПроживанияВРФСрокДействия.АвтоОтметкаНезаполненного
		И Не ЗначениеЗаполнено(Форма.ДанныеОснованияДляПроживанияВРФ.СрокДействия);
	
	УстановитьВидимостьЭлементовГруппПаспортныеДанныеИОснованиеДляПроживанияВРФ(Форма);
	
	УстановитьВидимостьГруппыУчредителей(Форма);
	
	УстановитьВидимостьОшибкиИНН(Форма);
	
	Элементы.КомандаВыбратьУстав.КнопкаПоУмолчанию = Истина;
	
	Если ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики) Тогда
		Элементы.ГруппаУведомлениеОПереходеНаУСНООО.Видимость = Истина;
		
		ТекстПодсказкиИФНСлично = НСтр("ru = 'Руководитель подает в Налоговую инспекцию весь комплект документов.
			|Требуется заплатить госпошлину в размере %1 руб.'");
		ТекстПодсказкиМФЦлично = НСтр("ru = 'Руководитель подает в МФЦ заявление и учредительные документы.
			|После регистрации в течение 30 дней нужно подать уведомление о переходе на УСН в Налоговую инспекцию.'");
	Иначе
		Элементы.ГруппаУведомлениеОПереходеНаУСНООО.Видимость = Ложь;
		
		ТекстПодсказкиИФНСлично = НСтр("ru = 'Руководитель лично подает документы в Налоговую инспекцию.
			|Требуется заплатить госпошлину в размере %1 руб.'");
		ТекстПодсказкиМФЦлично = НСтр("ru = 'Руководитель лично подает документы в МФЦ'");
	КонецЕсли;
	
	СуммаГоспошлины = РегистрацияОрганизацииКлиентСервер.СуммаГосударственнойПошлиныЗаРегистрацию(Истина);
	Элементы.ГруппаИФНСличноРасширеннаяПодсказка.Заголовок = СтрШаблон(ТекстПодсказкиИФНСлично, СуммаГоспошлины);
	Элементы.ГруппаМФЦличноРасширеннаяПодсказка.Заголовок = ТекстПодсказкиМФЦлично;
	
	Элементы.КонтактнаяИнформацияПолеEmailОрганизации.Видимость = Не ЭтоФорма2014(Форма.ВыбраннаяФорма);
	ОбработатьИзменениеЮрАдресаОрганизации(Форма);
	
	ЭтоВидНаЖительство =
		Форма.ВидДокумента <> РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
	
	Элементы.ВидНаЖительствоБессрочный.Видимость = ЭтоВидНаЖительство;
	Элементы.ДанныеОснованияДляПроживанияВРФСрокДействия.Доступность =
		Не ЭтоВидНаЖительство
		Или ЭтоВидНаЖительство И Не Форма.ВидНаЖительствоБессрочный;
	
	ДоступныеСпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.ДоступныеСпособыПодачиДокументов(
		Форма.ДатаСозданияЗаявления);
	
	Элементы.СпособПодачиДокументовПочта.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
		РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().Почта);
	
	Элементы.СпособПодачиДокументовИФНСпредставитель.Видимость = ДоступныеСпособыПодачиДокументов.Свойство(
		РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСпредставитель);
	
	УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(Форма);
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметрыКонтактнойИнформации(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДокументы(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоТиповойУстав = ВыбранТиповойУстав(Форма.УставВид);
	
	ТекстНадписи = СтрШаблон(НСтр("ru='Вы выбрали %1'"),
		РегистрацияОрганизацииКлиентСервер.ИмяТиповогоУстава(Форма.УставНомерТиповогоУстава));
	
	Форма.НадписьОписаниеТиповойУстав        = ТекстНадписи;
	Элементы.ГруппаУставООО.Видимость        = Не ЭтоТиповойУстав;
	Элементы.ГруппаТиповойУставООО.Видимость = ЭтоТиповойУстав;
	
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = Не Форма.КвитанцияОбОплатеГоспошлиныПолучена;
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость  = Форма.КвитанцияОбОплатеГоспошлиныПолучена;
	
	КоличествоУчредителей = Форма.ФормированиеУставногоКапитала.Учредители.Количество();
	ТипУчредителя = Форма.ФормированиеУставногоКапитала.Учредители[0].ТипУчредителя;
	ПервыйУчредительЮридическоеЛицо = (ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ОдинУчредительЮридическоеЛицо = (КоличествоУчредителей = 1) И ПервыйУчредительЮридическоеЛицо;
	ОдинУчредительФизическоеЛицо = (КоличествоУчредителей = 1) И НЕ ПервыйУчредительЮридическоеЛицо;
	
	НесколькоУчредителей = (КоличествоУчредителей > 1);
	Элементы.ГруппаПротоколСобранияУчредителейЕдинственногоУчредителяООО.Видимость = ОдинУчредительЮридическоеЛицо;
	Элементы.ГруппаРешениеЕдинственногоУчредителяООО.Видимость = ОдинУчредительФизическоеЛицо;
	Элементы.ГруппаПротоколСобранияУчредителейООО.Видимость    = НесколькоУчредителей;
	Элементы.ГруппаДоговорОбУчрежденииООО.Видимость            = НесколькоУчредителей;
	Если ОдинУчредительЮридическоеЛицо Тогда
		Учредитель = Форма.ФормированиеУставногоКапитала.Учредители[0].Учредитель;
		Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителяООО.Заголовок =
			СтрШаблон(НСтр("ru = 'Образец протокола собрания учредителей %1'"), СокрЛП(Учредитель));
	КонецЕсли;
	
	Элементы.ПредупреждениеДляНесколькихУчредителей.Видимость = НЕ Форма.ЕдинственныйУчредительРуководитель;
	
	Если ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики) Тогда
		Элементы.ГруппаУведомлениеОПереходеНаУСНООО.Видимость = Истина;
	Иначе
		Элементы.ГруппаУведомлениеОПереходеНаУСНООО.Видимость = Ложь;
	КонецЕсли;
	
	КоличествоЭкземпляров = КоличествоУчредителей + 1;
	КоличествоЭкземпляровПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		КоличествоЭкземпляров, НСтр("ru = 'экземпляр, экземпляра, экземпляров'"));
	Элементы.ДоговорОбУчрежденииОООПримечание.Заголовок = НСтр("ru = 'распечатайте'") + " " + КоличествоЭкземпляровПрописью;
	
	РегистрацияЧерезМФЦ = (Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично);
	РегистрацияЧерезМФЦСпецрежим = РегистрацияЧерезМФЦ И ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики);
	ОпределенРегистрирующийОрган = ЗначениеЗаполнено(Форма.РегистрирующийОрганНаименование);
	
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.РегистрирующийОрганИнформация.Видимость   = ЗначениеЗаполнено(Форма.РегистрирующийОрганИнформация);
	Элементы.АдресИРеквизитыВашейИнспекции.Видимость   = Не ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	
	Элементы.ПоказатьБлижайшийМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.Инструкция.Видимость = Не РегистрацияЧерезМФЦСпецрежим;
	Элементы.ИнструкцияСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
	Элементы.ПодачаДокументовСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
	
	ПараметрыПримененияАУСН = ПараметрыПримененияАУСН(Форма.Организация.Ссылка, Форма.ДатаСозданияЗаявления);
	Элементы.ПодачаУведомленийЗаголовокДекорацияИФНС.Заголовок = ПараметрыПримененияАУСН.Заголовок;
	Элементы.ПодачаУведомленияУСН.Заголовок = ПараметрыПримененияАУСН.ОписаниеШага;
	
	Если ПараметрыПримененияАУСН.Применяется Тогда
		Элементы.ГруппаПодачаУведомлений.Видимость = Истина;
		Элементы.НалоговаяИнспекция.Видимость = Ложь;
		Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость = Ложь;
		Элементы.УведомлениеОПереходеНаУНСОООПримечание.Заголовок = НСтр("ru = 'необязательно'");
	Иначе
		Элементы.ГруппаПодачаУведомлений.Видимость = РегистрацияЧерезМФЦСпецрежим;
		Если ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование) Тогда
			Элементы.НалоговаяИнспекция.Видимость = Истина;
			Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость = Ложь;
		Иначе
			Элементы.НалоговаяИнспекция.Видимость = Ложь;
			Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость = Истина;
		КонецЕсли;
		Элементы.УведомлениеОПереходеНаУНСОООПримечание.Заголовок = НСтр("ru = 'распечатайте 2 экземпляра'");
	КонецЕсли;
	
	Элементы.УслугаКонсультации.Видимость = ОказываютсяУслугиКонсультации();
	
	ПредставлениеПрограммы = ПредставлениеПрограммы();
	Элементы.ЗаголовокНачалоРаботы.Заголовок =
		СтрШаблон(НСтр("ru = 'Начните работу в %1'"), ПредставлениеПрограммы);
	
#Если Сервер Тогда
	Форма.Команды.НачатьРаботу.Подсказка = 
		СтрШаблон(НСтр("ru = 'Закрыть помощник и начать работу в %1'"), ПредставлениеПрограммы);
#КонецЕсли

	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		Форма.ДатаСозданияЗаявления,
		Форма.СпособПодачиДокументов,
		Истина); // При регистрации формируются учредительные документы
	
	ПодсказкаКЗаявлениям = РегистрацияОрганизацииКлиентСервер.ТекстПодсказкиКСформированнымДокументам(
		Форма.СпособПодачиДокументов,
		Форма.ФорматОтправкиДокументов,
		Форма.ДатаСозданияЗаявления,
		Истина);
	Элементы.ЗаявлениеОРегистрацииОООПримечание.Заголовок = ПодсказкаКЗаявлениям;
	Элементы.УведомлениеОПереходеНаУНСОООПримечание.Заголовок = ПодсказкаКЗаявлениям;
	
	ПодсказкаКДокументам = РегистрацияОрганизацииКлиентСервер.ТекстПодсказкиКСформированнымДокументам(
		Форма.СпособПодачиДокументов,
		Форма.ФорматОтправкиДокументов,
		Форма.ДатаСозданияЗаявления);
	Элементы.ДоговорОбУчрежденииОООПримечание.Заголовок = ПодсказкаКДокументам;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		
		Элементы.ИнструкцияСпецрежимМФЦ.Видимость = Ложь;
		Элементы.ПодачаДокументов.Видимость = Ложь;
		Элементы.УплатаГоспошлины.Видимость = Ложь;
		
		Элементы.ПротоколСобранияУчредителейОООПримечание.Заголовок = ПодсказкаКДокументам;
		Элементы.РешениеЕдинственногоУчредителяОООПримечание.Заголовок = ПодсказкаКДокументам;
		
		РегистрацияОрганизацииКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(
			Форма,
			ПараметрыОтображенияЭлементовФормы(Форма));
		
		Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
		Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
		
	Иначе
		
		Элементы.ЗаголовокПакетДокументов.Заголовок = Нстр("ru = 'Документы готовы. Проверьте их, распечатайте, но не подписывайте.'");
		
		Элементы.ИнструкцияСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
		Элементы.ПодачаДокументов.Видимость = Истина;
		Элементы.УплатаГоспошлины.Видимость = УплачиваетсяГоспошлинаЗаРегистрацию;
		Элементы.ПодписьДокументовЭЦП.Видимость = Ложь;
		Элементы.РегистрацияИзмененийЭлектронно.Видимость = Ложь;
		Элементы.ДоговорОбУчрежденииОООПримечание.Видимость = Истина;
		Элементы.ЗаявлениеОРегистрацииОООПримечание.Заголовок = "";
		Элементы.ПротоколСобранияУчредителейОООПримечание.Заголовок = "";
		Элементы.РешениеЕдинственногоУчредителяОООПримечание.Заголовок = "";
		
		Если УплачиваетсяГоспошлинаЗаРегистрацию Тогда
			Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
			Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
		Иначе
			Элементы.КартинкаПодачаДокументов.Картинка = БиблиотекаКартинок.РегистрацияЭтап2;
			Элементы.ПодачаУведомленийЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементаОтветственныйЗаОплатуПошлины(Форма)
	
	Элементы = Форма.Элементы;
	
	Если УказыватьОтветственногоЗаГоспошлину(Форма) Тогда
		Элементы.ГруппаОтветственныйЗаОплатуПошлины.Видимость = Истина;
	Иначе
		Форма.ОтветственныйЗаОплатуПошлины = Неопределено;
		Элементы.ГруппаОтветственныйЗаОплатуПошлины.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПрограммы()
	
	Возврат ОбщегоНазначенияБП.ПредставлениеПрограммыПредложныйПадеж();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказыватьБаннерНачалоРаботы()
	
	Возврат Константы.НачалоРаботы.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОказываютсяУслугиКонсультации()
	
	Возврат Обработки.РегистрацияОрганизации.ОказываютсяУслугиКонсультации();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтраницы(ИмяСтраницы)
	
	Страницы = Новый Массив;
	Страницы.Добавить("СтраницаВводДанных");
	Страницы.Добавить("СтраницаУстав");
	Страницы.Добавить("СтраницаРегистрация");
	
	Для Каждого Страница ИЗ Страницы Цикл
		Элементы[Страница].Видимость = Страница = ИмяСтраницы;
	КонецЦикла;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьГруппыУчредителей(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаЕдинственныйУчредительРуководитель.Видимость = Форма.ЕдинственныйУчредительРуководитель;
	Элементы.ГруппаНесколькоУчредителей.Видимость               = НЕ Форма.ЕдинственныйУчредительРуководитель;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовГруппПаспортныеДанныеИОснованиеДляПроживанияВРФ(Форма)
	
	Элементы = Форма.Элементы;
	ГражданствоРФ = Форма.Гражданство = Форма.КодРоссии;
	ЕстьГражданство =
		Форма.Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	Элементы.ПаспортныеДанныеИностранныйГражданин.Видимость = Не ГражданствоРФ И ЕстьГражданство;
	Элементы.ГруппаДанныеОснованияДляПроживанияВРФ.Видимость = Не ЕстьГражданство;
	Элементы.ПаспортныеДанныеРФ.Видимость = ГражданствоРФ;
	Элементы.ГруппаКонтактныеДанныеРуководителя.Видимость = ГражданствоРФ;
	Элементы.ГруппаКонтактныеДанныеРуководителяИностранныйГражданин.Видимость = Не ГражданствоРФ;
	Элементы.УзнатьИНН.Видимость = Форма.СервисУзнатьИННДоступен И ГражданствоРФ;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьКодНалоговогоОргана()
	
	ЮридическийАдресЗначениеJSON = 
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЮридическийАдресЗначениеJSON);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
			КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРегистрирующийОрган()
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		РегистрирующийОрганКод = Обработки.РегистрацияОрганизации.КодРегистрирующегоОргана(
			ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации),
			Организация.ИНН,
			Истина);
	Иначе
		РегистрирующийОрганКод = КодНалоговогоОргана;
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана = Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(
		РегистрирующийОрганКод,
		Истина);
		
	Если РеквизитыРегистрирующегоОргана <> Неопределено Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон      = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес        = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация   = РеквизитыРегистрирующегоОргана.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТерриториальнуюНалоговуюИнспекцию()
	
	Если СпособПодачиДокументов <> РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции =
		Обработки.РегистрацияОрганизации.РеквизитыНалоговойИнспекции(КодНалоговогоОргана);
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияИнформация   = РеквизитыНалоговойИнспекции.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииООО(ОрганизацияСсылка)
	
	Если ЗаявлениеОРегистрации <> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации);
		ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
		
		ИмяФормыЗаявления = РегистрацияОрганизацииВызовСервера.ИмяФормыЗаявления(ЗаявлениеОРегистрации);
		Если ИмяФормыЗаявления = "" Тогда
			Возврат;
		КонецЕсли;
		
		ФормаОтчета = ПолучитьФорму(ИмяФормыЗаявления, ПараметрыФормы, ЭтотОбъект, ОрганизацияСсылка);
		
		Если ДоступнаПечатьPDF417(ВыбраннаяФорма) Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		Иначе
			РегистрацияОрганизацииКлиент.ОткрытьФормуПредварительногоПросмотраЗаявленияБезДвумерногоКода(
				ФормаОтчета,
				"РегламентированноеУведомлениеФормаР11001",
				Нстр("ru = 'Заявление о регистрации.pdf'"));
		КонецЕсли;
		
		РазблокироватьДанные(ЗаявлениеОРегистрации, ФормаОтчета.УникальныйИдентификатор);
		ФормаОтчета = Неопределено;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Заявление о регистрации не создано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р11001");
	
КонецФункции

&НаСервереБезКонтекста
Функция УставООО(ОрганизацияСсылка, ИмяФормы)
	
	Возврат Обработки.РегистрацияОрганизации.УставООО(ОрганизацияСсылка, ИмяФормы);
	
КонецФункции

&НаСервереБезКонтекста
Функция РешениеЕдинственногоУчредителяООО(ОрганизацияСсылка, ДатаСоставления, НомерТиповогоУстава)
	
	Возврат Обработки.РегистрацияОрганизации.РешениеЕдинственногоУчредителяООО(
		ОрганизацияСсылка,
		ДатаСоставления,
		НомерТиповогоУстава);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколСобранияУчредителейООО(ОрганизацияСсылка, ДатаСоставления, НомерТиповогоУстава)
	
	Возврат Обработки.РегистрацияОрганизации.ПротоколСобранияУчредителейООО(
		ОрганизацияСсылка,
		ДатаСоставления,
		НомерТиповогоУстава);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколСобранияУчредителейЕдинственногоУчредителяООО(ОрганизацияСсылка, ДатаСоставления, НомерТиповогоУстава)
	
	Возврат Обработки.РегистрацияОрганизации.ПротоколСобранияУчредителейЕдинственногоУчредителяООО(
		ОрганизацияСсылка,
		ДатаСоставления,
		НомерТиповогоУстава);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоговорОбУчрежденииООО(ОрганизацияСсылка, ДатаСоставления, ОтветственныйЗаОплатуПошлины)
	
	Возврат Обработки.РегистрацияОрганизации.ДоговорОбУчрежденииООО(ОрганизацияСсылка,
		ДатаСоставления,
		ОтветственныйЗаОплатуПошлины);
	
КонецФункции

&НаКлиенте
Процедура УведомлениеОПереходеНаУСН()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиУведомлениеОСпецРежимеНалогообложения(Организация.Ссылка);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Уведомление о переходе на УСН не создано'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Уведомление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КвитанцияНаОплатуГоспошлины(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.КвитанцияНаОплатуГоспошлины(ОрганизацияСсылка);
	
КонецФункции

&НаСервере
Функция ИнструкцияРегистрацияООО(ОрганизацияСсылка)
	
	ВыборСпецрежимаНалогообложения = Обработки.РегистрацияОрганизации.НовыйВыборСпецрежимаНалогообложения();
	ВыборСпецрежимаНалогообложения.УСН = ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	ВыборСпецрежимаНалогообложения.АУСН = Обработки.РегистрацияОрганизации.ПрименяетсяАУСН(СтруктураУчетнойПолитики);
	
	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	
	ДанныеНалоговойИнспекции = Новый Структура;
	ДанныеНалоговойИнспекции.Вставить("НаименованиеФНС", НалоговаяИнспекцияНаименование);
	ДанныеНалоговойИнспекции.Вставить("АдресФНС",        НалоговаяИнспекцияАдрес);
	ДанныеНалоговойИнспекции.Вставить("ТелефонФНС",      НалоговаяИнспекцияТелефон);
	
	Если ЕдинственныйУчредительРуководитель Тогда
		КоличествоУчредителей = 1;
		ОдинУчредительЮридическоеЛицо = Ложь;
	Иначе
		КоличествоУчредителей = ФормированиеУставногоКапитала.Учредители.Количество();
		Если КоличествоУчредителей = 1 Тогда
			ТипУчредителя = ФормированиеУставногоКапитала.Учредители[0].ТипУчредителя;
			ОдинУчредительЮридическоеЛицо = ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			ОдинУчредительЮридическоеЛицо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИнструкции = Обработки.РегистрацияОрганизации.НовыйПараметрыИнструкцииРегистрацииООО();
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции.ВыборСпецрежимаНалогообложения, ВыборСпецрежимаНалогообложения);
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции.ДанныеНалоговойИнспекции, ДанныеНалоговойИнспекции);
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции.ДанныеРегистрирующегоОргана, ДанныеРегистрирующегоОргана);
	ПараметрыИнструкции.ВидУстава = УставВид;
	ПараметрыИнструкции.КоличествоУчредителей = КоличествоУчредителей;
	ПараметрыИнструкции.ОдинУчредительЮридическоеЛицо = ОдинУчредительЮридическоеЛицо;
	ПараметрыИнструкции.ДатаСоставления = ДатаСозданияЗаявления;
	
	ПараметрыИнструкции.Гражданство = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Гражданство);
	ПараметрыИнструкции.ЕстьИностранцы =
		РегистрацияОрганизацииСервер.ЕстьУчредителиИлиПредставителиИностранныеГраждане(Учредители);
	
	Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацииООО(ПараметрыИнструкции);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНачалаРаботы()
	
	Если ОбщегоНазначенияБПВызовСервера.ЭтоПростойИнтерфейс() Тогда
		ОткрытьФорму("Обработка.ПанелиПростойИнтерфейс.Форма.ПанельПомощь");
	Иначе
		ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке)
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.НачалоРаботы.Установить(Ложь);
		Константы.РегистрацияНеЗавершена.Установить(Истина);
		
		ДокументОбъект = ФормированиеУставногоКапитала.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокументОбъект, "ФормированиеУставногоКапитала");
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Текст = НСтр("ru = 'Ошибка при начале работы:'");
		СведенияОбОшибке = ИнформацияОбОшибке();
		ПредупреждениеОбОшибке.Вставить("Текст",    Текст + Символы.ПС + КраткоеПредставлениеОшибки(СведенияОбОшибке));
		ПредупреждениеОбОшибке.Вставить("Подробно", ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УправлениеФормой(ЭтотОбъект);
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	Обработки.НачалоРаботы.УстановитьПодходящийИнтерфейс(
		"",
		НаименованиеСистемыНалогообложения(ДанныеПомощникаРегистрации.Налоги.ВыбранныйРежим),
		Истина,
		ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
	);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
	
	Возврат Истина;
		
КонецФункции

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура РазместитьНавигациюНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		СтруктураПараметров.Вставить("Заявление", ЗаявлениеОРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация.Ссылка) Тогда
		СтруктураПараметров.Вставить("Организация", Организация.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НавигацияПараметрФормы", НавигацияПараметрФормы);
	
	Если ТекущийЭтап = НомерЭтапаВводДанных() Тогда
		СтруктураПараметров.НавигацияПараметрФормы = "Заявление";
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = Истина;
	ИначеЕсли ТекущийЭтап = НомерЭтапаУстав() И ИспользоватьТиповыеУставы Тогда
		СтруктураПараметров.НавигацияПараметрФормы = "Устав";
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = Истина;
	Иначе
		СтруктураПараметров.НавигацияПараметрФормы = "Документы";
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = (ТекущийЭтап <> НомерЭтапаОжидание(ИспользоватьТиповыеУставы));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеРуководителя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИННРуководителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОРуководителяПриИзменении()
	
	Если Не ЕдинственныйУчредительРуководитель
		И Не Руководитель.Ссылка.Пустая()
		И Не ПустаяСтрока(Руководитель.Фамилия)
		И Не ПустаяСтрока(Руководитель.Имя) Тогда
		
		НайденныеСтроки =  Учредители.НайтиСтроки(Новый Структура("Учредитель", Руководитель.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Руководитель является одним из учредителей.
			// Запишем, чтобы обновить представление в таблице Учредители.
			Если ЗаписатьРуководителя() Тогда
				ОповеститьОбИзменении(Руководитель.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособРегистрации(СпособПодачиДокументов)
	
	Возврат РегистрацияОрганизацииКлиентСервер.СпособРегистрацииПоСпособуПодачиДокументов(СпособПодачиДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеБлижайшийМФЦ(Элемент)
	
	АдресДляПоискаЗначениеJSON = ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(АдресДляПоискаЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	ПослеИзмененияКонтактнойИнформации(Результат);
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Организация, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтраныГражданства()
	
	ГражданствоРФ = Гражданство = КодРоссии;
	ЕстьГражданство =
		Гражданство <> РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства();
	Если Не ЕстьГражданство И Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВидДокумента = РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
	КонецЕсли;
	Если ГражданствоРФ Или Не ЕстьГражданство Тогда
		ИностранныйПаспортСерияНомер = "";
	КонецЕсли;
	Если Не ГражданствоРФ Тогда
		ПаспортСерияНомер = "";
	КонецЕсли;
	Если ЕстьГражданство Тогда
		СерияНомерОснованияДляПроживания = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуЗаполненияДанныхЭтапа2(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если ВыбранТиповойУстав(УставВид) И Не ЗначениеЗаполнено(УставНомерТиповогоУстава) Тогда
		ТекстСообщения = НСтр("ru = 'Выберите номер типового устава'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УставНомерТиповогоУстава", ,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойУстав(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
	
	// Заполнение списка выбора
	Если Элементы.УставНомерТиповогоУстава.СписокВыбора.Количество() = 0 Тогда
		Элементы.УставНомерТиповогоУстава.СписокВыбора.ЗагрузитьЗначения(
			ПолучитьСписокНомеровУставов(Форма.УставАдресТиповыеУставы));
	КонецЕсли;
	
	УстановитьВидимостьХарактеристикУстава(Форма);
	УстановитьНадписьНомерУстава(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокНомеровУставов(АдресХранилища)
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТиповыеУставы = ПолучитьИзВременногоХранилища(АдресХранилища);
	Возврат ТиповыеУставы.ВыгрузитьКолонку("НомерУстава");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьХарактеристикУстава(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоТиповойУстав = ВыбранТиповойУстав(Форма.УставВид);
	
	Элементы.НадписьТиповойУстав.Видимость = ЭтоТиповойУстав;
	Элементы.НадписьИндивидуальныйУстав.Видимость = Не ЭтоТиповойУстав;
	
	Элементы.ГруппаТиповойУстав.Видимость = ЭтоТиповойУстав;
	Элементы.ГруппаРезультатВыбораТиповогоУстава.Видимость = ЭтоТиповойУстав;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНомерУстава(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ВыбранТиповойУстав(Форма.УставВид) Тогда
		
		Форма.ТиповойУставОООПримечание = ?(ЗначениеЗаполнено(Форма.УставНомерТиповогоУстава), 
			НСтр("ru='распечатывать не нужно'"), НСтр("ru = 'отсутствует типовой устав с такими параметрами'"));
		Форма.НадписьНомерТиповогоУстава = РегистрацияОрганизацииКлиентСервер.ИмяТиповогоУстава(
			Форма.УставНомерТиповогоУстава);
		
		Элементы.ГруппаНадписьУстав.Видимость = ЗначениеЗаполнено(Форма.УставНомерТиповогоУстава);
	Иначе
		Форма.ТиповойУставОООПримечание = "";
		Форма.НадписьНомерТиповогоУстава = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранТиповойУстав(ВидУстава)
	
	Возврат ВидУстава = ЗначениеВидУставаТиповой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ТипУставаПриИзмененииНаСервере(Форма)
	
	Форма.УставНомерТиповогоУстава = НомерУставаПоУмолчанию(Форма.УставВид); 
	НомерТиповогоУставаПриИзмененииНаСервере(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерУставаПоУмолчанию(ВидУстава)
	
	Возврат ?(ВыбранТиповойУстав(ВидУстава), РегистрацияОрганизацииКлиентСервер.НомерУставаПоУмолчанию(), 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НомерТиповогоУставаПриИзмененииНаСервере(Форма)

	УстановитьПараметрыТиповогоУстава(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыТиповогоУстава(Форма)
	
	Если ВыбранТиповойУстав(Форма.УставВид) Тогда
		
		ДанныеУстава = ПолучитьДанныеТиповогоУстава(РегистрацияОрганизацииКлиентСервер.НовыйДанныеТиповогоУстава(),
			Форма.УставНомерТиповогоУстава,
			Форма.УставАдресТиповыеУставы);
		
		ЗаполнитьЗначенияСвойств(Форма, ДанныеУстава);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеТиповогоУстава(ДанныеУстава, НомерУстава, Адрес)
	
	ТиповыеУставы = ПолучитьИзВременногоХранилища(Адрес);
	
	НайденнаяСтрока = ТиповыеУставы.Найти(НомерУстава, "НомерУстава");
	Если НайденнаяСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеУстава, НайденнаяСтрока);
	КонецЕсли;
	
	Возврат ДанныеУстава;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПараметровУстава()
	
	УставНомерТиповогоУстава = НомерТиповогоУстава();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция НомерТиповогоУстава()
	
	ДанныеТиповогоУстава = РегистрацияОрганизацииКлиентСервер.НовыйДанныеТиповогоУстава();
	ЗаполнитьЗначенияСвойств(ДанныеТиповогоУстава, ЭтотОбъект);
	
	Возврат ОпределитьНомерТиповогоУстава(УставАдресТиповыеУставы, ДанныеТиповогоУстава);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьНомерТиповогоУстава(Адрес, ДанныеУстава)
	
	НомерУстава = 0;
	Если Не ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат НомерУстава;
	КонецЕсли;
	
	ТиповыеУставы = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ТиповыеУставы) = Тип("ТаблицаЗначений") Тогда
		НайденныеСтроки = ТиповыеУставы.НайтиСтроки(ДанныеУстава);
		НомерУстава = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].НомерУстава, НомерУстава);
	КонецЕсли;
	
	Возврат НомерУстава;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаВводДанных()
	
	Возврат 1;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаУстав()
	
	Возврат 2;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаИзменение(ИспользоватьТиповыеУставы)
	
	Возврат ?(ИспользоватьТиповыеУставы, 2, 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаДокументы(ИспользоватьТиповыеУставы)
	
	Возврат ?(ИспользоватьТиповыеУставы, 4, 3);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаОжидание(ИспользоватьТиповыеУставы)
	
	Возврат ?(ИспользоватьТиповыеУставы, 3, 2);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеАдресаЭлектроннойПочты(ИмяРеквизита, ИмяПоля, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , ИмяПоля);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, ,
			ИмяРеквизита, ,
			Отказ);
		
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЗначениеРеквизита) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", ИмяПоля);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, ,
			ИмяРеквизита, ,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеЮрАдресаОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ЭтоФорма2014(Форма.ВыбраннаяФорма) Тогда
		ОграничениеВЕГРЮЛПоАдресуВозможно = Ложь;
	Иначе
		ЗначениеJSON = ЗначениеJSONКонтактнойИнформации(Форма, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
		ОграничениеВЕГРЮЛПоАдресуВозможно = ОграничениеВЕГРЮЛПоАдресуВозможно(ЗначениеJSON);
		
		Если Не ОграничениеВЕГРЮЛПоАдресуВозможно Тогда
			Форма.ОграничитьДоступВЕГРЮЛРуководитель = Ложь;
			Форма.ОграничитьДоступВЕГРЮЛУчастники = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОграничитьДоступВЕГРЮЛРуководитель.Видимость = ОграничениеВЕГРЮЛПоАдресуВозможно;
	Элементы.ОграничитьДоступВЕГРЮЛУчастники.Видимость = ОграничениеВЕГРЮЛПоАдресуВозможно;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОграничениеВЕГРЮЛПоАдресуВозможно(ЗначениеJSON)
	
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		ЗначениеJSON, ,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Согласно Постановления Правительства РФ от 06.06.2019 N 729 доступ к содержащимся в ЕГРЮЛ сведениям
	// может быть ограничен для юридических лиц, находящихся на территории нижеуказанных территорий
	
	КодыРегионов = Новый Массив;
	КодыРегионов.Добавить("91"); // Республика Крым
	КодыРегионов.Добавить("92"); // г. Севастополь
	
	КодРегиона = РаботаСАдресами.СведенияОбАдресе(АдресXML).КодРегиона;
	
	Возврат КодыРегионов.Найти(КодРегиона) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФорма2014(Знач ИмяФормы)
	
	Возврат ИмяФормы = "Форма2014_1";
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированноеУведомлениеФормаР11001.ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВидУставаИндивидуальный()
	
	Возврат "Индивидуальный";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВидУставаТиповой()
	
	Возврат "Типовой";
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазблокироватьДанные(Ключ, УникальныйИдентификатор)
	
	РазблокироватьДанныеДляРедактирования(Ключ, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыбраннаяФормаИзменена(ЗаявлениеОРегистрации, ВыбраннаяФорма)
	
	ИмяФормыЗаявления = РегистрацияОрганизацииВызовСервера.ИмяФормыЗаявления(ЗаявлениеОРегистрации);
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) И СтрНайти(ИмяФормыЗаявления, ВыбраннаяФорма) = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область УчредителиВыступаютЗаявителями

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписокУчредителей(Форма)
	
	ТипЮридическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
	ДанныеВыбора = Новый Массив;
	Для Каждого ТекущийУчредитель Из Форма.Учредители Цикл
		Если ТекущийУчредитель.ТипУчредителя = ТипЮридическоеЛицо
			И ДанныеВыбора.Найти(ТекущийУчредитель.ПредставительУчредителя) = Неопределено Тогда
			
			ДанныеВыбора.Добавить(ТекущийУчредитель.ПредставительУчредителя);
		ИначеЕсли ТекущийУчредитель.ТипУчредителя <> ТипЮридическоеЛицо
			И ДанныеВыбора.Найти(ТекущийУчредитель.Учредитель) = Неопределено Тогда
			
			ДанныеВыбора.Добавить(ТекущийУчредитель.Учредитель);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УказыватьОтветственногоЗаГоспошлину(Форма)
	
	Возврат Не Форма.ЕдинственныйУчредительРуководитель
		И РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(Форма.ДатаСозданияЗаявления)
		И Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеУчредителя()
	
	Если ЕдинственныйУчредительРуководитель Или Не ЗначениеЗаполнено(Учредители) Тогда
		ОтветственныйЗаОплатуПошлины = Неопределено;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Учредитель", ОтветственныйЗаОплатуПошлины);
	
	Если Не ЗначениеЗаполнено(ОтветственныйЗаОплатуПошлины)
		Или Учредители.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Элементы.ОтветственныйЗаОплатуПошлины.СписокВыбора.ЗагрузитьЗначения(ТекущийСписокУчредителей(ЭтотОбъект));
		ОтветственныйЗаОплатуПошлины = Учредители[0].Учредитель;
		
КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция НаименованиеСистемыНалогообложения(СистемаНалогообложения)
	
	СоответствиеСистемыНалогообложения = Новый Соответствие;
	СоответствиеСистемыНалогообложения.Вставить("УСНДоходыООО", "УпрощеннаяДоходы");
	СоответствиеСистемыНалогообложения.Вставить("УСНДоходыРасходыООО", "УпрощеннаяДоходыМинусРасходы");
	СоответствиеСистемыНалогообложения.Вставить("ОСНОООО", "Общая");
	СоответствиеСистемыНалогообложения.Вставить("ЕНВДООО", "ЕНВД");
	
	Результат = СоответствиеСистемыНалогообложения.Получить(СистемаНалогообложения);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат "Общая";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыПримененияАУСН(Организация, Период)
	
	Возврат Обработки.РегистрацияОрганизации.ОписаниеШагаДляПереходаНаАУСН(Организация, Период);
	
КонецФункции

#Область ПодписаниеДокументов

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтображенияЭлементовФормы(Форма)
	
	Результат = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде();
	Результат.Заявление = Форма.ЗаявлениеОРегистрации;
	Результат.ЭтоЮрЛицо = Истина;
	Результат.ЕстьУведомлениеОПереходеНаУСН = ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики);
	Результат.ЕдинственныйУчредительФизическоеЛицо = Форма.ЕдинственныйУчредительРуководитель;
	Результат.ЕдинственныйУчредительЮридическоеЛицо = Не Форма.ЕдинственныйУчредительРуководитель;
	Результат.ОтображатьИндивидуальныйУстав = Не ВыбранТиповойУстав(Форма.УставВид);
	Результат.НуженДокументПодтверждающийАдрес = Истина;
	
	УчредителиПоТипам = РегистрацияОрганизацииКлиентСервер.УчредителиПоТипам(Форма);
	КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
	КоличествоФизическихЛиц  = УчредителиПоТипам.ФизическиеЛица.Количество();
	
	Результат.ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
	Результат.ЕдинственныйУчредительЮридическоеЛицо = (КоличествоЮридическихЛиц = 1) И (КоличествоФизическихЛиц = 0);
	
	Результат.ДатаСоставления = Форма.ДатаСозданияЗаявления;
	
	Если КоличествоЮридическихЛиц > 0 Тогда
		Результат.Вставить("ОбразецПротокола", УчредителиПоТипам.ЮридическиеЛица[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьИнойДокументНаСервере(НомерИногоДокумента = "")
	
	Возврат РегистрацияОрганизацииСервер.ДобавитьИнойДокумент(ЭтотОбъект, НомерИногоДокумента);
	
КонецФункции

&НаСервере
Процедура ОчиститьПрикрепленныйИнойДокументНаСервере(НомерДокумента)
	
	РегистрацияОрганизацииСервер.ОчиститьПрикрепленныйИнойДокумент(ЭтотОбъект, НомерДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодписанныеДокументыНаСервере()
	
	РегистрацияОрганизацииВызовСервера.УдалитьПрикрепленныеФайлы(
		ЗаявлениеОРегистрации,
		РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
	
	ПодписанныеДокументы = Неопределено;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИПодписатьДокументы()
	
	ПараметрыЗаявления = РегистрацияОрганизацииКлиент.НовыеПараметрыПодписанияЗаявления();
	ПараметрыЗаявления.EMailЗаявителя = КонтактнаяИнформацияПолеEMailФизическиеЛица;
	ПараметрыЗаявления.Заявление = ЗаявлениеОРегистрации;
	ПараметрыЗаявления.ИННЗаявителя = Руководитель.ИНН;
	ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО();
	ПараметрыЗаявления.ЕстьУведомлениеОПереходеУСН = ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	ПараметрыЗаявления.ЭтоЮрЛицо = Истина;
	ПараметрыЗаявления.Учредители = РегистрацияОрганизацииКлиентСервер.УчредителиПоТипам(ЭтотОбъект);
	ПараметрыЗаявления.ОтображатьИндивидуальныйУстав = Не ВыбранТиповойУстав(УставВид);
	ПараметрыЗаявления.НуженДокументПодтверждающийАдрес = Истина;
	ПараметрыЗаявления.НуженДоговорОбУчрежденииООО = Истина;
	ПараметрыЗаявления.ЗаявлениеВXML = РегистрацияОрганизацииКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(
		ДатаСозданияЗаявления,
		СпособПодачиДокументов,
		ФорматОтправкиДокументов);
	
	РегистрацияОрганизацииКлиент.ПроверитьИПодписатьДокументы(ЭтотОбъект, ПараметрыЗаявления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументыЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы)
		И СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
		
		УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
		Оповестить("ОбновитьСтатусЗаявленияНаГосРегистрацию", Организация.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры)
	
	РегистрацияОрганизацииСервер.ОбработатьРезультатПодписанияДокументов(
		ЭтотОбъект,
		РезультатПодписания,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы) Тогда
		
		Если СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно Тогда
			// При подаче заявления через личный кабинет статус устанавливается вручную
			СтатусУведомлений = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой();
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ЗаявлениеОРегистрации, СтатусУведомлений);
		Иначе
			// Для уведомления о переходе на УСН устанавливаем статус "Сдано", основной статус отправки будет отражаться в заявлении о регистрации
			СтатусУведомлений = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаСдано();
		КонецЕсли;
		
		УведомлениеОПереходеНаУСН = НайтиУведомлениеОСпецРежимеНалогообложения(Организация.Ссылка);
		Если ЗначениеЗаполнено(УведомлениеОПереходеНаУСН) Тогда
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(УведомлениеОПереходеНаУСН, СтатусУведомлений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПрикрепленныхФайлов()
	
	Если Не РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииСервер.УстановитьПредставлениеПрикрепленныхФайлов(ЭтотОбъект, ЗаявлениеОРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтсканированногоФайлаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаЗавершение(
		ЭтотОбъект,
		ПараметрыОтображенияЭлементовФормы(ЭтотОбъект),
		РезультатВыбора,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидимостьБаннераНачалоРаботы = ПоказыватьБаннерНачалоРаботы() И Форма.ИспользуетсяСервисРегистрации;
	Элементы.НачалоРаботы.Видимость = ВидимостьБаннераНачалоРаботы;
	
	Если Не ЗначениеЗаполнено(Форма.ПодписанныеДокументы)
		И РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
	
		Элементы.НачатьРаботу.КнопкаПоУмолчанию = Ложь;
		
		Если Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
			Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
			Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Истина;
			Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	
	Иначе
		Элементы.НачатьРаботу.КнопкаПоУмолчанию = ВидимостьБаннераНачалоРаботы;
		Элементы.ПодписатьДокументы.КнопкаПоУмолчанию = Ложь;
		Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Телефон()
	
	Если ТребуетсяИсправлениеНомераТелефонаЗаявителя(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьНомерТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Почта()
	
	Если ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(КонтактнаяИнформацияПолеEMailФизическиеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ПодтвердитьАдресЭлектроннойПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEMailФизическиеЛица"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Телефон()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Почта()
	
	РегистрацияОрганизацииКлиент.ПроверитьКодПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEMailФизическиеЛица"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Телефон()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Почта()
	
	РегистрацияОрганизацииКлиент.ПовторнаяОтправкаКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефона;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияПочты;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Телефон(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияТелефона(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Почта(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ПослеОтправкиКодаПодтвержденияПочты(
		ЭтотОбъект,
		ДлительнаяОперация,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СканИнойДокументНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РегистрацияОрганизацииКлиент.ВыборОтсканированногоФайлаНажатие(ЭтотОбъект, ЗаявлениеОРегистрации, Элемент.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеПараметрыКонтактнойИнформации(Форма, ИмяТекущегоЭлемента = "")
	
	Возврат РегистрацияОрганизацииКлиентСервер.ДополнительныеПараметрыКонтактнойИнформации(
		Форма.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица,
		Форма.КонтактнаяИнформацияПолеEMailФизическиеЛица,
		"КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица",
		"КонтактнаяИнформацияПолеEMailФизическиеЛица",
		ИмяТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(АдресЭлектроннойПочты)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеНомераТелефонаЗаявителя(НомерТелефона)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефона)
		Или Не ЗначениеЗаполнено(ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефона)) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматОтправкиДокументов()
	
	ДоступныеФорматы = РегистрацияОрганизацииСервер.ДоступныеФорматыОтправкиДокументов();
	
	Для Каждого ТекущаяСтрока Из ДоступныеФорматы Цикл
		
		ИмяЭлемента = СтрШаблон("ФорматОтправкиДокументов%1", ТекущаяСтрока.Порядок);
		
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяЭлемента].Подсказка = ТекущаяСтрока.Подсказка;
		Элементы[ИмяЭлемента].СписокВыбора.Очистить();
		Элементы[ИмяЭлемента].СписокВыбора.Добавить(ТекущаяСтрока.Тип, ТекущаяСтрока.Наименование);
		
	КонецЦикла;
	
	ФорматОтправкиДокументов = РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеЗаявления()
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
