#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОтправкаДанныхВЛичныйКабинет

Процедура ОтправитьДанныеРегистрацииВЛичныйКабинет()
	
	СтруктураДанных = СтруктураДанныхПомощникаДляЛичногоКабинета();
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетодаДанныеРегистрации());
	
КонецПроцедуры

Процедура ОтправитьЗапросНаПолучениеКонсультации() Экспорт
	
	ОтправитьЗапросВЛичныйКабинет(Неопределено, ИмяМетодаЗапросКонсультации());
	
КонецПроцедуры

Процедура ОтправитьОписаниеНавигацииВЛичныйКабинет(ОписаниеНавигацииДляЛичногоКабинета)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Route", ОписаниеНавигацииДляЛичногоКабинета);
	ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетодаДанныеОНавигации());
	
КонецПроцедуры

#Область ИменаМетодовЛичногоКабинета

Функция ИмяМетодаЗапросКонсультации()
	
	ИмяМетода = "reg_support_request";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

Функция ИмяМетодаДанныеОНавигации()
	
	ИмяМетода = "reg_route_update";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

Функция ИмяМетодаДанныеРегистрации()
	
	ИмяМетода = "registration";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

#КонецОбласти

#Область ИменаШаговДляЛичногоКабинета

Функция ИмяШагаНачалоДляЛичногоКабинета()

	Возврат "Start";

КонецФункции

Функция ИмяШагаФормаБизнесаДляЛичногоКабинета()

	Возврат "BusinessForm";

КонецФункции

Функция ИмяШагаОКВЭДДляЛичногоКабинета()

	Возврат "OKVED";

КонецФункции

Функция ИмяШагаНалогиДляЛичногоКабинета()

	Возврат "TaxSystem";

КонецФункции

Функция ИмяШагаЗаявлениеДляЛичногоКабинета()

	Возврат "Details";

КонецФункции

Функция ИмяШагаПатентДляЛичногоКабинета()

	Возврат "Patent";

КонецФункции

Функция ИмяШагаУставДляЛичногоКабинета()

	Возврат "Charter";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВзаимодействияСЛичнымКабинетом

Функция ОказываютсяУслугиКонсультации() Экспорт
	
	УслугаДоступна = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегистрации")
		Или ТарификацияБПВызовСервераПовтИсп.ОказываютсяКонсультацииБухОбслуживание();
	
	Возврат УслугаДоступна
		И Не ПустаяСтрока(Константы.АдресСервисаРегистрации.Получить())
		И ОбщегоНазначения.РазделениеВключено();
	
КонецФункции

Функция СтруктураДанныхПомощникаДляЛичногоКабинета()
	
	СтруктураНавигации = СтруктураНавигацииПомощникаРегистрации();
	Если СтруктураНавигации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	СтруктураДанных = НовыйСтруктураДанныхРегистрацииДляЛичногоКабинета();
	
	// Считаем, что предыдущий шаг перед открытым - это выполненный этап.
	ПройденныйШаг = НомерШагаПомощника() - 1;
	Если ПройденныйШаг = 0 Тогда
		// Если это первый шаг, то отправляем в личный кабинет пустую структуру.
		СтруктураДанных.Stage = ИмяШагаНачалоДляЛичногоКабинета();
		Возврат СтруктураДанных;
	КонецЕсли;
	
	// Имя шага
	СтруктураШага = СтруктураНавигации[НавигацияПомощниковКлиентСервер.ИмяШага(ПройденныйШаг)];
	СтруктураДанных.Stage = СтруктураШага.ИмяШагаДляЛК;
	
	Для НомерШага = 1 По ПройденныйШаг Цикл
		СтруктураШага = СтруктураНавигации[НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага)];
		Если СтруктураШага.ИмяШагаДляЛК = ИмяШагаФормаБизнесаДляЛичногоКабинета() Тогда
			
			// Форма бизнеса
			ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
			Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СтруктураДанных.BusinessForm = "ООО";
			ИначеЕсли ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СтруктураДанных.BusinessForm = "ИП";
			КонецЕсли;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаОКВЭДДляЛичногоКабинета() Тогда
			
			// ОКВЭД
			ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
			СтруктураДанных.OKVED.Code = ВидДеятельности.ОсновнойКод;
			СтруктураДанных.OKVED.Description = ВидДеятельности.ОсновноеНаименование;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаНалогиДляЛичногоКабинета() Тогда
			
			// Система налогообложения
			НалоговыйРежим = ДанныеПомощникаРегистрации.Налоги.ВыбранныйРежим;
			// Очистим выбранный режим от формы собственности.
			НалоговыйРежим = СтрЗаменить(НалоговыйРежим, "ИП", "");
			НалоговыйРежим = СтрЗаменить(НалоговыйРежим, "ООО", "");
			// Приведем налоговый режим к согласованным наименованиям.
			Если НалоговыйРежим = "УСНДоходыРасходы" Тогда
				НалоговыйРежим = "УСНДоходыМинусРасходы";
			ИначеЕсли НалоговыйРежим = "ПСН" Тогда
				НалоговыйРежим = "Патент";
			КонецЕсли;
			СтруктураДанных.TaxSystem = НалоговыйРежим;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаЗаявлениеДляЛичногоКабинета() Тогда
			
			// Данные заявления
			Заявление = ДанныеПомощникаРегистрации.Заявление;
			
			Если Заявление.Свойство("СпособРегистрации") Тогда
				СтруктураДанных.RegistrationMethod = Заявление.СпособРегистрации;
			КонецЕсли;
			Если Заявление.Свойство("НаименованиеОрганизации") Тогда
				СтруктураДанных.ShortOrgName = Заявление.НаименованиеОрганизации;
			КонецЕсли;
			Если Заявление.Свойство("ПолноеНаименованиеОрганизации") Тогда
				СтруктураДанных.FullOrgName = Заявление.ПолноеНаименованиеОрганизации;
			КонецЕсли;
			Если Заявление.Свойство("АдресXML") Тогда
				СтруктураДанных.AddressFields = Заявление.АдресXML;
			КонецЕсли;
			// PersonDetail
			Если Заявление.Свойство("Фамилия") Тогда
				СтруктураДанных.PersonDetail.Surname = Заявление.Фамилия;
			КонецЕсли;
			Если Заявление.Свойство("Имя") Тогда
				СтруктураДанных.PersonDetail.Name = Заявление.Имя;
			КонецЕсли;
			Если Заявление.Свойство("Отчество") Тогда
				СтруктураДанных.PersonDetail.MiddleName = Заявление.Отчество;
			КонецЕсли;
			Если Заявление.Свойство("Пол") Тогда
				СтруктураДанных.PersonDetail.Sex = Заявление.Пол;
			КонецЕсли;
			Если Заявление.Свойство("ИНН") Тогда
				СтруктураДанных.PersonDetail.INN = Заявление.ИНН;
			КонецЕсли;
			// Contacts
			Если Заявление.Свойство("Телефон") Тогда
				СтруктураДанных.Contacts.Phone = Заявление.Телефон;
			КонецЕсли;
			Если Заявление.Свойство("Email") Тогда
				СтруктураДанных.Contacts.Email = Заявление.Email;
			КонецЕсли;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаУставДляЛичногоКабинета() Тогда
			
			// Данные заявления
			Заявление = ДанныеПомощникаРегистрации.Заявление;
			
			Если Заявление.Свойство("ВидУстава") Тогда
				СтруктураДанных.Charter.CharterForm = Заявление.ВидУстава;
			КонецЕсли;
			Если Заявление.Свойство("НомерТиповогоУстава") Тогда
				СтруктураДанных.Charter.CharterNumber = Заявление.НомерТиповогоУстава;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция НовыйСтруктураДанныхРегистрацииДляЛичногоКабинета()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Stage",              "");
	СтруктураДанных.Вставить("BusinessForm",       "");
	СтруктураДанных.Вставить("TaxSystem",          "");
	СтруктураДанных.Вставить("RegistrationMethod", "");
	СтруктураДанных.Вставить("ShortOrgName",       "");
	СтруктураДанных.Вставить("FullOrgName",        "");
	СтруктураДанных.Вставить("AddressFields",      "");
	СтруктураДанных.Вставить("OKVED",              Новый Структура);
	СтруктураДанных.Вставить("PersonDetail",       Новый Структура);
	СтруктураДанных.Вставить("Contacts",           Новый Структура);
	СтруктураДанных.Вставить("Patent",             "");
	СтруктураДанных.Вставить("Charter",            Новый Структура);
	
	// OKVED
	СтруктураДанных.OKVED.Вставить("Code", "");
	СтруктураДанных.OKVED.Вставить("Description", "");
	
	// PersonDetail
	СтруктураДанных.PersonDetail.Вставить("Surname", "");
	СтруктураДанных.PersonDetail.Вставить("Name", "");
	СтруктураДанных.PersonDetail.Вставить("MiddleName", "");
	СтруктураДанных.PersonDetail.Вставить("Sex", "");
	СтруктураДанных.PersonDetail.Вставить("INN", "");
	
	// Contacts
	СтруктураДанных.Contacts.Вставить("Phone", "");
	СтруктураДанных.Contacts.Вставить("Email", "");
	
	// Charter
	СтруктураДанных.Charter.Вставить("CharterForm", "");
	СтруктураДанных.Charter.Вставить("CharterNumber", "");
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетода)
	
	// Выполняем отправку данных в личный кабинет с помощью фонового задания.
	// Мы не ждем обратную связь от личного кабинета, поэтому никак не обрабатываем результат.
	// Вся необходимая информация будет записана в журнал регистрации.
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СтруктураДанных", СтруктураДанных);
	ПараметрыПроцедуры.Вставить("ИмяМетода", ИмяМетода);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ОтправитьЗапросВЛичныйКабинетВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне)
	
КонецПроцедуры

Процедура ОтправитьЗапросВЛичныйКабинетВФоне(Параметры, АдресРезультата) Экспорт
	
	ПараметрыСоединения = ПараметрыСоединения();
	Если ПараметрыСоединения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = СоединениеССерверомРегистрации(ПараметрыСоединения);
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьНаСервере = ПараметрыСоединения.ПутьНаСервере + ?(Прав(ПараметрыСоединения.ПутьНаСервере, 1) = "/", "", "/");
	Запрос = Новый HTTPЗапрос(ПутьНаСервере + Параметры.ИмяМетода);
	Если Параметры.СтруктураДанных <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(СтруктураВJSON(Параметры.СтруктураДанных));
	КонецЕсли;
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	ЗаписатьИнформациюВЖурналРегистрации(Ответ)
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Ответ)
	
	Если Ответ.КодСостояния = 200 Тогда
		ПараметрыОтвета = JSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,НСтр("ru='Успешная синхронизация с личным кабинетом.'"));
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ПараметрыОтвета = JSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		Если ПараметрыОтвета.Свойство("error") Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Код ошибки: %1. Описание ошибки: %2'"),ПараметрыОтвета.error.code, ПараметрыОтвета.error.text);
		Иначе
			ТекстОшибки = НСтр("ru='Неизвестная ошибка'");
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,ТекстОшибки);
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрОбластьДанных(ИмяМетода)
	
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	ИмяМетода = ИмяМетода + СтрШаблон("?app=%1", Формат(РазделительСеанса, "ЧГ=0"));
	
КонецПроцедуры

Функция JSONВСтруктуру(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Структура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураВJSON(Структура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПараметрыСоединения()
	
	АдресСервиса = Константы.АдресСервисаРегистрации.Получить();
	Если НЕ ЗначениеЗаполнено(АдресСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Логин = Константы.ИмяПользователяСервисаРегистрации.Получить();
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	ПараметрыСоединения.Схема = ?(ЗначениеЗаполнено(ПараметрыСоединения.Схема), ПараметрыСоединения.Схема, "http");
	ПараметрыСоединения.Вставить("Прокси", ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Схема));
	ПараметрыСоединения.Вставить("Таймаут", 20);
	ПараметрыСоединения.Вставить("Логин", Логин);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСоединения.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Логин, "ПарольПользователяСервисаРегистрации", Истина));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция СоединениеССерверомРегистрации(ПараметрыСоединения)
	
	Соединение = Неопределено;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			ПараметрыСоединения.Хост,
			ПараметрыСоединения.Порт,
			ПараметрыСоединения.Логин,
			ПараметрыСоединения.Пароль, 
			ПараметрыСоединения.Прокси,
			ПараметрыСоединения.Таймаут,
			?(НРег(ПараметрыСоединения.Схема) = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Регистрация организации.Личный кабинет'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ХранениеДанных

// Функция возвращает структуру с данными помощника регистрации.
// 
// Возвращаемое значение:
//    Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Функция ДанныеПомощникаРегистрации() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаДанныеПомощникаРегистрации(),
		НовыйСтруктураДанныхПомощникаРегистрации());
	
КонецФункции

Процедура УдалитьДанныеПомощникаРегистрации() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		ИмяКлючаНастроек(),
		ИмяКлючаДанныеПомощникаРегистрации(),
		Неопределено);
	
КонецПроцедуры

// Функция возвращает структуру с данными заявления помощника регистрации.
// 
// Возвращаемое значение:
//    Структура.
//
Функция НовыеДанныеЗаявления() Экспорт

	ДанныеЗаявления = Новый Структура;
	ДанныеЗаявления.Вставить("СпособРегистрации",             "");
	ДанныеЗаявления.Вставить("Ссылка",                        Справочники.Организации.ПустаяСсылка());
	ДанныеЗаявления.Вставить("НаименованиеОрганизации",       "");
	ДанныеЗаявления.Вставить("ПолноеНаименованиеОрганизации", "");
	ДанныеЗаявления.Вставить("Фамилия",                       "");
	ДанныеЗаявления.Вставить("Имя",                           "");
	ДанныеЗаявления.Вставить("Отчество",                      "");
	ДанныеЗаявления.Вставить("Пол",                           "");
	ДанныеЗаявления.Вставить("ИНН",                           "");
	ДанныеЗаявления.Вставить("Телефон",                       "");
	ДанныеЗаявления.Вставить("Email",                         "");
	ДанныеЗаявления.Вставить("АдресXML",                      "");
	ДанныеЗаявления.Вставить("Гражданство",                   Справочники.СтраныМира.ПустаяСсылка());
	ДанныеЗаявления.Вставить("ОтчествоЛатиницей",             "");
	ДанныеЗаявления.Вставить("ВидУстава",                     "");
	ДанныеЗаявления.Вставить("НомерТиповогоУстава",            0);
	ДанныеЗаявления.Вставить("ВыдатьНаБумажномНосителе",       Истина);
	ДанныеЗаявления.Вставить("НомерТелефонаПодтвержден",       Ложь);
	ДанныеЗаявления.Вставить("ЭлектроннаяПочтаПодтверждена",   Ложь);
	ДанныеЗаявления.Вставить("ФорматОтправкиДокументов", РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию());
	ДанныеЗаявления.Вставить("СпособПодачиДокументов", "");
	ДанныеЗаявления.Вставить("ДатаРождения", '00010101');
	ДанныеЗаявления.Вставить("СерияНомерПаспорта", "");
	ДанныеЗаявления.Вставить("КемВыданПаспорт", "");
	ДанныеЗаявления.Вставить("ДатаВыдачи", "");
	ДанныеЗаявления.Вставить("КодПодразделения", "");
	ДанныеЗаявления.Вставить("МестоРождения", "");
	
	Возврат ДанныеЗаявления;
	
КонецФункции

// Функция возвращает название способа регистрации в виде строки:
// Параметры:
//    СпособРегистрации - Число
// Возвращаемое значение:
//    Строка - Одно из значений - "Почтой", "Представитель" или "Лично"
//
Функция НазваниеСпособаРегистрации(СпособРегистрации) Экспорт
	
	Если СпособРегистрации = 3 Тогда
		НазваниеСпособаРегистрации = "Почтой";
	ИначеЕсли СпособРегистрации = 2 Тогда
		НазваниеСпособаРегистрации = "Представитель";
	Иначе
		НазваниеСпособаРегистрации = "Лично";
	КонецЕсли;
	Возврат НазваниеСпособаРегистрации;
	
КонецФункции

Функция НовыйСтруктураДанныхПомощникаРегистрации()
	
	ДанныеПомощникаРегистрации = Новый Структура;
	ДанныеПомощникаРегистрации.Вставить("Модифицированность", Ложь);
	ДанныеПомощникаРегистрации.Вставить("ФормаБизнеса",       Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("ВидДеятельности",    Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("Налоги",             Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("Заявление",          НовыеДанныеЗаявления());
	
	// Форма бизнеса
	ДанныеПомощникаРегистрации.ФормаБизнеса.Вставить("ЮридическоеФизическоеЛицо");
	
	// Вид деятельности
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ОсновнойКод",          "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ОсновноеНаименование", "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ДополнительныеКоды",   "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ВыбранныеКодыОКВЭД",   Новый СписокЗначений);
	// Налогообложение
	ДанныеПомощникаРегистрации.Налоги.Вставить("СтруктураУчетнойПолитики", Новый Структура);
	ДанныеПомощникаРегистрации.Налоги.Вставить("ВыбранныйРежим",           "");
	
	ДанныеПомощникаРегистрации.Налоги.Вставить("КодРегионаРегистрации", "");
	
	// Патент
	ДанныеПомощникаРегистрации.Вставить("Патент", Новый Структура);
	
	МетаданныеОбработки = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента;
	
	РеквизитыПатента = МетаданныеОбработки.Реквизиты;
	Для Каждого ТекРеквизит Из РеквизитыПатента Цикл
		ДанныеПомощникаРегистрации.Патент.Вставить(ТекРеквизит.Имя, ТекРеквизит.Тип.ПривестиЗначение());
	КонецЦикла;
	ДанныеПомощникаРегистрации.Патент.Вставить("ПолныйКодВидаДеятельности", "");
	
	ТабличныеЧасти = МетаданныеОбработки.ТабличныеЧасти;
	Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
		ДанныеПомощникаРегистрации.Патент.Вставить(ТекТабличнаяЧасть.Имя, Новый ТаблицаЗначений);
	КонецЦикла;
	
	ДанныеПомощникаРегистрации.Патент.Вставить("ПропуститьШаг", Истина);
	
	Возврат ДанныеПомощникаРегистрации;
	
КонецФункции

Процедура СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаДанныеПомощникаРегистрации(),
		ДанныеПомощникаРегистрации);
	
КонецПроцедуры

// Сохраняет данные шага "Заявление".
// Параметры:
//    Заявление - Структура - см. НовыеДанныеЗаявления().
//
Процедура СохранитьДанныеЗаявления(Заявление) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.Заявление, Заявление) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.Заявление, Заявление);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные шага "Налоги".
// Параметры:
//    Налоги - Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Процедура СохранитьДанныеНалоги(Налоги) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.Налоги, Налоги) Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.Налоги, Налоги);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет основной код ОКВЭД, если помощник начинается с шага "Налоги".
// 
// Параметры:
//    ОКВЭД - Структура - с ключами Код и наименование.
//
Процедура СохранитьОсновнойОКВЭД(ОКВЭД) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	Если ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод <> ОКВЭД.Код 
		ИЛИ ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод <> ОКВЭД.Наименование Тогда
		
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод = ОКВЭД.Код;
		ДанныеПомощникаРегистрации.ВидДеятельности.ОсновноеНаименование = ОКВЭД.Наименование;
		ДанныеПомощникаРегистрации.ВидДеятельности.ВыбранныеКодыОКВЭД.Добавить(ОКВЭД.Код);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
КонецПроцедуры

// Сохраняет данные шага "ФормаБизнеса".
// 
// Параметры:
//    ЮридическоеФизическоеЛицо - Перечисление.ЮридическоеФизическоеЛицо.
//
Процедура СохранитьДанныеФормаБизнеса(ЮридическоеФизическоеЛицо) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицо Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
	ДополнитьСтруктуруНавигацииПомощникаРегистрации();
	
КонецПроцедуры

// Сохраняет данные шага "Патент".
// Параметры:
//    Патент - Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Процедура СохранитьДанныеПатент(Патент) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	СтруктураПатент = Неопределено;
	
	Если Не ДанныеПомощникаРегистрации.Свойство("Патент", СтруктураПатент)
		Или СтруктураПатент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.Патент, Патент) Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		Для Каждого СвойствоПатента Из Патент Цикл
			ДанныеПомощникаРегистрации.Патент.Вставить(СвойствоПатента.Ключ, СвойствоПатента.Значение);
		КонецЦикла;
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные шага "Вид деятельности".
//
// Параметры:
//    ДанныеОКВЭД - Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Процедура СохранитьДанныеОКВЭД(ДанныеОКВЭД) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.ВидДеятельности, ДанныеОКВЭД) Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.ВидДеятельности, ДанныеОКВЭД);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНомерШага(НомерШага)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаНомерШагаПомощника(),
		НомерШага);
	
КонецПроцедуры 

Функция ИмяКлючаНомерШагаПомощника()
	
	Возврат "НомерШага";
	
КонецФункции

Функция ИмяКлючаДанныеПомощникаРегистрации()

	Возврат "ДанныеПомощникаРегистрации";

КонецФункции

Функция ИмяКлючаНастроек()
	
	Если Не ИспользуетсяСервисРегистрации() Тогда
		// При регистрации организации из программы настройки сохраняются только в процессе создания организации
		Возврат "ПомощникРегистрацииВПрограмме";
	Иначе
		// При регистрации из сервиса процесс подготовки сохраняется в хранилище общих настроек
		Возврат "ПомощникРегистрации";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Навигация

// Размещает на форме элементы навигации по помощнику регистрации.
// 
// Параметры:
//
// Форма - Управляемая форма.
// Параметры - Структура - Структура параметров формы.
//
Процедура РазместитьНавигацию(Форма, Параметры = Неопределено) Экспорт
	
	Если Не ИспользуетсяСервисРегистрации() Тогда
		СтруктураНавигацииПомощника = СтруктураНавигацииПомощникаПриРегистрацииВПрограмме(Параметры);
	Иначе
		СтруктураНавигацииПомощника = СтруктураНавигацииПомощникаРегистрации();
	КонецЕсли;
	
	Если СтруктураНавигацииПомощника <> Неопределено Тогда
		НавигацияПомощников.РазместитьНавигацию(Форма, СтруктураНавигацииПомощника, Параметры);
		Если Форма.НавигацияНомерШага <> 0 Тогда
			СохранитьНомерШага(Форма.НавигацияНомерШага);
			Если ИспользуетсяСервисРегистрации() Тогда
				ОтправитьДанныеРегистрацииВЛичныйКабинет();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураНавигацииПомощникаПриРегистрацииВПрограмме(Параметры)
	
	НавигацияПараметрФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НавигацияПараметрФормы", "");
	Если Не ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		Возврат СтруктураНавигацииПомощникаРегистрации();
	КонецЕсли;
	
	НоваяРегистрация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НоваяРегистрация", Ложь);
	
	Если НоваяРегистрация Тогда
		// В сервисе регистрации реквизиты восстанавливаются из хранилища общих настроек,
		// для остальных случаев, например при создании организации, зачищаем все предыдущие настройки
		УдалитьДанныеПомощникаРегистрации();
		// Запуск регистрации новой организации в программе
		Результат = НавигацияПомощникаРегистрации().Структура;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаНастроек(), ИмяКлючаСтруктураНавигации(), Результат);
	КонецЕсли;
	
	Если НавигацияПараметрФормы = "ОКВЭД"
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		
		// Создание заявления из списка 1С-Отчетность через выбор вида уведомления
		ДанныеПомощника = НовыйСтруктураДанныхПомощникаРегистрации();
		ДанныеПомощника.ФормаБизнеса.ЮридическоеФизическоеЛицо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Параметры,
			"ЮридическоеФизическоеЛицо");
		
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощника);
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КонтекстныйВызов", Ложь)
		И ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Заявление")) Тогда
		
		// Открывается ранее созданное заявление о регистрации - восстанавливаем шаги
		ДанныеПомощника = НовыйСтруктураДанныхПомощникаРегистрации();

		ДанныеУведомления = ДанныеПомощникаЗаполнения(Параметры.Заявление);
		Если ЗначениеЗаполнено(ДанныеУведомления) И ДанныеУведомления.Свойство("ДанныеОрганизации") Тогда
			ДанныеПомощника.ВидДеятельности.ОсновнойКод = ДанныеУведомления.ДанныеОрганизации.КодОКВЭД2;
			ДанныеПомощника.ВидДеятельности.ОсновноеНаименование = ДанныеУведомления.ДанныеОрганизации.НаименованиеОКВЭД2;
			ДанныеПомощника.ВидДеятельности.ДополнительныеКоды = ДанныеУведомления.ДанныеОрганизации.ДополнительныеКодыОКВЭД2;
			Если ДанныеУведомления.ДанныеОрганизации.Свойство("ДанныеРегистрацииВНалоговомОргане") Тогда
				ДанныеПомощника.Налоги.КодРегионаРегистрации = Лев(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеУведомления.ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане,
					"КодНалоговогоОргана", ""), 2);
			Иначе
				ДанныеПомощника.Налоги.КодРегионаРегистрации = Лев(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеУведомления.ДанныеОрганизации,
					"КодНалоговогоОргана", ""), 2);
			КонецЕсли;
			
			ДанныеПомощника.Налоги.ВыбранныйРежим = РежимНалогообложенияПомощника(Параметры.Организация);
			ДанныеПомощника.Заявление.НомерТиповогоУстава = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДанныеУведомления, "НомерТиповогоУстава", 0);
			
			Если ДанныеПомощника.Налоги.ВыбранныйРежим = "ПСНИП" Тогда
				ПараметрыПатента = Новый Структура;
				ПараметрыПатента.Вставить("Организация", Параметры.Организация);
				Патент = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НайтиЗаявлениеНаПолучениеПатента(ПараметрыПатента);
				СсылкаНаЗаявление = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Патент, "Ссылка");
				Если ЗначениеЗаполнено(СсылкаНаЗаявление) Тогда
					ЗаполнитьЗначенияСвойств(ДанныеПомощника.Патент, ДанныеПомощникаЗаполнения(СсылкаНаЗаявление));
				КонецЕсли;
			КонецЕсли;
			
			ДанныеПомощника.ФормаБизнеса.ЮридическоеФизическоеЛицо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДанныеУведомления.ДанныеОрганизации,
				"ЮридическоеФизическоеЛицо");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПомощника.ФормаБизнеса.ЮридическоеФизическоеЛицо) Тогда
			
			ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.Организация,
				"ЮридическоеФизическоеЛицо");
			
			Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
				ДанныеПомощника.ФормаБизнеса.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
			Иначе
				ДанныеПомощника.ФормаБизнеса.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = НавигацияПомощникаРегистрации().Структура;
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощника);
	Иначе
		Результат = СтруктураНавигацииПомощникаРегистрации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура создает и сохраняет маршрут помощника регистрации
// в зависимости от переданного параметра. Обязательно должен быть передан один из двух параметров.
// 
// Параметры:
//  ПараметрЗапускаПомощника - Строка - Параметр запуска приложения, в зависимости от которого формируется маршрут.
//
Функция ПодготовитьСтруктуруНавигацииПомощникаРегистрации(ПараметрЗапускаПомощника = "") Экспорт
	
	Если ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяВыборВидаДеятельности()) Тогда
		НавигацияПомощника = НавигацияПомощникаВыбораОКВЭД();
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяВыборСистемыНалогообложения()) Тогда
		НавигацияПомощника = НавигацияПомощникаВыбораСистемыНалогообложения();
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяТестИПИлиООО()) Тогда
		НавигацияПомощника = НавигацияПомощникаВыбораОрганизационноПравовойФормы();
	Иначе
		НавигацияПомощника = НавигацияПомощникаРегистрации();
	КонецЕсли;
	
	Если НавигацияПомощника <> Неопределено Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ИмяКлючаНастроек(),
			ИмяКлючаСтруктураНавигации(),
			НавигацияПомощника.Структура);
			
		Если Не ПустаяСтрока(НавигацияПомощника.Описание) И ИспользуетсяСервисРегистрации() Тогда
			ОтправитьОписаниеНавигацииВЛичныйКабинет(НавигацияПомощника.Описание);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НавигацияПомощника;
	
КонецФункции

Функция НавигацияПомощникаРегистрации()
	
	НомерШагаДокументы = НомерШагаДокументы();
	ИспользоватьШагУстав = ИспользоватьШагУстав();
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаФормаБизнеса(1));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаОКВЭД(2));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаРежимНалогообложения(3));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(4), СтруктураШагаЗаявление(4));
	
	Если ИспользоватьШагУстав Тогда
		СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы - 1), СтруктураШагаУстав(НомерШагаДокументы - 1));
	КонецЕсли;
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы), СтруктураШагаДокументы(НомерШагаДокументы));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	Если ИспользоватьШагУстав Тогда
		ИменаШагов.Добавить(ИмяШагаУставДляЛичногоКабинета());
	КонецЕсли;
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	СтруктураНавигации.Описание = СтрСоединить(ИменаШагов, ",");
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция НавигацияПомощникаВыбораОКВЭД()
	
	НомерШагаДокументы = НомерШагаДокументы();
	ИспользоватьШагУстав = ИспользоватьШагУстав();
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаОКВЭД(1));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаФормаБизнеса(2));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаРежимНалогообложения(3));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(4), СтруктураШагаЗаявление(4));
	Если ИспользоватьШагУстав Тогда
		СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы - 1), СтруктураШагаУстав(НомерШагаДокументы - 1));
	КонецЕсли;
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы), СтруктураШагаДокументы(НомерШагаДокументы));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	Если ИспользоватьШагУстав Тогда
		ИменаШагов.Добавить(ИмяШагаУставДляЛичногоКабинета());
	КонецЕсли;
	
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	СтруктураНавигации.Описание = СтрСоединить(ИменаШагов, ",");
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция НавигацияПомощникаВыбораСистемыНалогообложения()
	
	НомерШагаДокументы = НомерШагаДокументы();
	ИспользоватьШагУстав = ИспользоватьШагУстав();
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаРежимНалогообложения(1, "РежимНалогообложенияИФормаБизнеса"));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаФормаБизнеса(2, "ПодтвердитьФормуБизнеса"));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаОКВЭД(3));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(4), СтруктураШагаЗаявление(4));
	Если ИспользоватьШагУстав Тогда
		СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы - 1), СтруктураШагаУстав(НомерШагаДокументы - 1));
	КонецЕсли;
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы), СтруктураШагаДокументы(НомерШагаДокументы));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	Если ИспользоватьШагУстав Тогда
		ИменаШагов.Добавить(ИмяШагаУставДляЛичногоКабинета());
	КонецЕсли;
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	СтруктураНавигации.Описание = СтрСоединить(ИменаШагов, ",");
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция НавигацияПомощникаВыбораОрганизационноПравовойФормы()
	
	НомерШагаДокументы = НомерШагаДокументы();
	ИспользоватьШагУстав = ИспользоватьШагУстав();
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаФормаБизнеса(1, "ПройтиТест"));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаОКВЭД(2));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаРежимНалогообложения(3));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(4), СтруктураШагаЗаявление(4));
	Если ИспользоватьШагУстав Тогда
		СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы - 1), СтруктураШагаУстав(НомерШагаДокументы - 1));
	КонецЕсли;
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы), СтруктураШагаДокументы(НомерШагаДокументы));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	Если ИспользоватьШагУстав Тогда
		ИменаШагов.Добавить(ИмяШагаУставДляЛичногоКабинета());
	КонецЕсли;
	
	СтруктураНавигации.Описание = СтрСоединить(ИменаШагов, ",");
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция СтруктураНавигацииПомощникаИзмененийЕГР(ИмяОтчета) Экспорт
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаСписокИзмененийЕГР(1));
	
	НомерШага = 2;
	Если ИмяОтчета = "РегламентированноеУведомлениеФормаР13014" Тогда
		
		СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага),
			СтруктураШагаУставДляИзмененияЕГР(НомерШага));
		НомерШага = НомерШага + 1;
		
	КонецЕсли;
	
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага),
		СтруктураШагаЗаявлениеДляИзмененияЕГР(НомерШага));
	
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага + 1),
		СтруктураШагаДокументыДляИзмененияЕГР(НомерШага + 1));
	
	Возврат СтруктураНавигации;
	
КонецФункции

// Функция возвращает сохраненную ранее структуру навигации.
//
Функция СтруктураНавигацииПомощникаРегистрации() Экспорт
	
	СтруктураНавигацииПомощника = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаСтруктураНавигации());
		
	Если СтруктураНавигацииПомощника <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураНавигацииПомощника Цикл
			СтруктураШага = КлючИЗначение.Значение;
			Если СтруктураШага.ОпределятьИмяФормы Тогда
				ПараметрыФормы = СтруктураШага.СтруктураПараметровФормы;
				СтруктураШага.ИмяФормы = ИмяФормыШага(ПараметрыФормы.НавигацияПараметрФормы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураНавигацииПомощника;
	
КонецФункции

// Функция возвращает имя формы, которую нужно открыть для этого параметра.
// Используется в случае, если одному шагу может соответствовать несколько форм.
//
// Параметры:
//    НавигацияПараметрФормы - Строка - Параметр навигации шага для которого нужно определить форму.
//
// Возвращаемое значение:
//    ИмяФормы - Строка - Имя формы, которую нужно открыть.
//
Функция ИмяФормыШага(НавигацияПараметрФормы)
	
	ИмяФормыШага = "";
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	Если НавигацияПараметрФормы = "Документы" Или НавигацияПараметрФормы = "Заявление" Тогда
		
		ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ИмяФормыШага = ИмяФормыЗаявлениеООО();
		Иначе
			ИмяФормыШага = ИмяФормыЗаявлениеИП();
		КонецЕсли;
		
	ИначеЕсли НавигацияПараметрФормы = "Устав" Тогда
		
		ИмяФормыШага = ИмяФормыЗаявлениеООО();
		
	КонецЕсли;
	
	Возврат ИмяФормыШага;
	
КонецФункции

// Функция возвращает номер последнего показанного шага.
// Используется для того, чтобы открыть тот же шаг при повторном запуске.
//
// Возвращаемое значение:
//    Число - Номер шага.
Функция НомерШагаПомощника() Экспорт
	
	НомерШага = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаНомерШагаПомощника());
	
	Если Не ЗначениеЗаполнено(НомерШага) Тогда
		НомерШага = 1;
	КонецЕсли;
	
	Возврат НомерШага;
	
КонецФункции

#Область ИменаФорм

Функция ИмяФормыЗаявлениеИП()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.РегистрацияИП";
	
КонецФункции

Функция ИмяФормыЗаявлениеООО()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.РегистрацияООО";
	
КонецФункции

#КонецОбласти

#Область ОписаниеШагов

Функция СтруктураШагаФормаБизнеса(НомерШага, НавигацияПараметрФормы = "ФормаБизнеса")
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ТестИПилиООО";
	СтруктураШага.ТекстНавигации = НСтр("ru='Форма бизнеса'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаФормаБизнесаДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = НавигацияПараметрФормы;
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаОКВЭД(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ФормаВыбораВидовДеятельности";
	СтруктураШага.ТекстНавигации = НСтр("ru='Вид деятельности'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаОКВЭДДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ОКВЭД";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаРежимНалогообложения(НомерШага, НавигацияПараметрФормы = "РежимНалогообложения")
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.СравнениеРежимовНалогообложения.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru='Налоги'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаНалогиДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = НавигацияПараметрФормы;
	СтруктураШага.СтруктураПараметровФормы.Вставить("КлючНазначенияИспользования", НРег("Регистрация"));
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаЗаявление(НомерШага)
	
	СтруктураШага                    = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника       = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага          = НомерШага;
	СтруктураШага.ОпределятьИмяФормы = Истина; // см. ИмяФормыШага()
	СтруктураШага.ТекстНавигации     = НСтр("ru='Заявление'");
	СтруктураШага.ИмяШагаДляЛК       = ИмяШагаЗаявлениеДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Заявление";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаДокументы(НомерШага)
	
	СтруктураШага                    = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника       = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага          = НомерШага;
	СтруктураШага.ОпределятьИмяФормы = Истина; // см. ИмяФормыШага()
	СтруктураШага.ТекстНавигации     = НСтр("ru='Документы'");
	СтруктураШага.ИмяШагаДляЛК       = ИмяШагаЗаявлениеДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Документы";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаСписокИзмененийЕГР(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Изменения'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_СписокИзменений";
	
	ДобавитьКлючевыеПараметрыПомощникаВнесенияИзмененийЕГР(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаУставДляИзмененияЕГР(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Устав'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_Устав";
	
	ДобавитьКлючевыеПараметрыПомощникаВнесенияИзмененийЕГР(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаЗаявлениеДляИзмененияЕГР(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Заявление'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_Заявление";
	
	ДобавитьКлючевыеПараметрыПомощникаВнесенияИзмененийЕГР(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаДокументыДляИзмененияЕГР(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ЗаголовокФормы = НСтр("ru = 'Внесение изменений в ЕГРЮЛ (ЕГРИП)'");
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Регистрация'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_Документы";
	
	ДобавитьКлючевыеПараметрыПомощникаВнесенияИзмененийЕГР(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Процедура ДобавитьКлючевыеПараметрыПомощникаВнесенияИзмененийЕГР(СтруктураШага)
	
	СтруктураШага.СтруктураПараметровФормы.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
КонецПроцедуры

Функция СтруктураШагаПатент(НомерШага, НавигацияПараметрФормы = "Патент")
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru='Патент'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаПатентДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = НавигацияПараметрФормы;
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаУстав(НомерШага)
	
	СтруктураШага                    = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника       = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага          = НомерШага;
	СтруктураШага.ОпределятьИмяФормы = Истина; // см. ИмяФормыШага()
	СтруктураШага.ТекстНавигации     = НСтр("ru='Устав'");
	СтруктураШага.ИмяШагаДляЛК       = ИмяШагаУставДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Устав";
	
	Возврат СтруктураШага;
	
КонецФункции

#КонецОбласти

#Область Имена

Функция ИмяКлючаСтруктураНавигации()
	
	Возврат НСтр("ru='СтруктураНавигации'");
	
КонецФункции 

Функция ИмяВыборВидаДеятельности()
	
	Возврат ВРег("OKVED");
	
КонецФункции

Функция ИмяВыборСистемыНалогообложения()
	
	Возврат ВРег("TaxSystem");
	
КонецФункции

Функция ИмяТестИПИлиООО()
	
	Возврат ВРег("businessform");
	
КонецФункции

Функция ИмяНачалоРаботы()
	
	Возврат ВРег("start");
	
КонецФункции

Функция ИмяИзменениеЕГР()
	
	Возврат ВРег("register_changes");
	
КонецФункции

// Функция возвращает массив запуска ключей помощника.
// Используется для определения структуры навигации помощника.
//
Функция МассивКлючейЗапуска() Экспорт

	МассивКлючейЗапуска = Новый Массив;
	МассивКлючейЗапуска.Добавить(ИмяНачалоРаботы());
	МассивКлючейЗапуска.Добавить(ИмяВыборВидаДеятельности());
	МассивКлючейЗапуска.Добавить(ИмяТестИПИлиООО());
	МассивКлючейЗапуска.Добавить(ИмяВыборСистемыНалогообложения());
	МассивКлючейЗапуска.Добавить(ИмяВыборПатент());
	МассивКлючейЗапуска.Добавить(ИмяИзменениеЕГР());
	Возврат МассивКлючейЗапуска;

КонецФункции

Функция ИмяВыборПатент()
	
	Возврат ВРег("Patent");
	
КонецФункции 

#КонецОбласти

// Функция возвращает структуру навигации по шагам: 
// - Форма бизнеса
// - Вид деятельности
// - Налоги
// - Патент (шаг может отсутствовать)
// - Заявление
// - Документы
// 
// Параметры:
//   НуженШагПатент - булево. Определяет видимость шага "Патент"
//
Функция СтруктураНавигацииРегистрацияИП(НуженШагПатент = Ложь)
	
	СтруктураТекущая = СтруктураНавигацииПомощникаРегистрации();
	
	Если СтруктураТекущая = Неопределено Тогда
		Возврат СтруктураТекущая;
	КонецЕсли;
	
	ИмяШагаПатент = ИмяШагаПатентДляЛичногоКабинета();
	ШагПатентИмеется = Ложь;
	
	ИмяШагаУстав = ИмяШагаУставДляЛичногоКабинета();
	ШагУставИмеется = Ложь;
	
	Для Каждого ТекущийШаг Из СтруктураТекущая Цикл
		Если ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаПатент Тогда
			ШагПатентИмеется = Истина;
		КонецЕсли;
		Если ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаУстав Тогда
			ШагУставИмеется = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНавигации = Новый Структура;
	НомерШага = 1;
	
	Для Каждого ТекущийШаг Из СтруктураТекущая Цикл
		
		Если ШагУставИмеется И ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаУстав Тогда
			// Шаг Устав может быть только для организации.
			// Исключаем ситуации, когда пользователь начал регистрировать ООО, потом перевыбрал форму бизнеса на ИП
			Продолжить;
		КонецЕсли;
		
		СтруктураШага = ТекущийШаг.Значение;
		СтруктураШага.Вставить("НомерШага", НомерШага);
		СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага), СтруктураШага);
		НомерШага = НомерШага + 1;
		
	КонецЦикла;
	
	Если Не (НуженШагПатент Или ШагПатентИмеется) Или НуженШагПатент И ШагПатентИмеется Тогда
		// Нет шага Патент
		Возврат СтруктураНавигации;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура;
	ИмяШагаНалоги = ИмяШагаНалогиДляЛичногоКабинета();
	НомерШага = 1;
	
	Для Каждого ТекущийШаг Из СтруктураНавигации Цикл
		
		Если Не НуженШагПатент И ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаПатент Тогда
			// При регистрации ИП пользователь вначале выбрал ПСН, потом переключился на другую систему
			Продолжить;
		КонецЕсли;
		
		СтруктураШага = ТекущийШаг.Значение;
		СтруктураШага.Вставить("НомерШага", НомерШага);
		СтруктураРезультат.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага), СтруктураШага);
		
		НомерШага = НомерШага + 1;
		
		Если НуженШагПатент И ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаНалоги Тогда
			// Пользователь на шаге Налоги выбрал Патент
			СтруктураРезультат.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(НомерШага), СтруктураШагаПатент(НомерШага));
			НомерШага = НомерШага + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция обновляет навигацию формы
// 
// Параметры:
//   Форма - Управляемая форма
//   НуженШагПатента - булево. Определяет видимость шага "Патент"
//
Процедура ОбновитьНавигациюФормы(Форма, НуженШагПатент) Экспорт
	
	СтруктураНавигацииПомощника = СтруктураНавигацииРегистрацияИП(НуженШагПатент);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаСтруктураНавигации(),
		СтруктураНавигацииПомощника);
	
	РазместитьНавигацию(Форма);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруНавигацииПомощникаРегистрации()
	
	СтруктураНавигацииПомощника = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаСтруктураНавигации());
		
	Если СтруктураНавигацииПомощника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерШагаДокументы = СтруктураНавигацииПомощника.Количество();
	НомерШагаДокументы        = НомерШагаДокументы();
	
	Если ТекущийНомерШагаДокументы = НомерШагаДокументы Тогда
		Возврат;
	КонецЕсли;
	
	// Смещаем шаги Заявление и Документы относительно сохраненной структуры на положение по умолчанию
	// Напр., сначала регистрировали ИП на Патенте, затем переключились на форму бизнеса ООО - нужно удалить шаг Патент
	
	ИмяШагаДокументы        = НавигацияПомощниковКлиентСервер.ИмяШага(НомерШагаДокументы);
	ИмяШагаДокументыТекущее = НавигацияПомощниковКлиентСервер.ИмяШага(ТекущийНомерШагаДокументы);
	
	НомерШагаПатент = 0;
	Для Каждого ТекущийШаг Из СтруктураНавигацииПомощника Цикл
		Если ТекущийШаг.Значение.ИмяШагаДляЛК = ИмяШагаПатентДляЛичногоКабинета() Тогда
			НомерШагаПатент = ТекущийШаг.Значение.НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерШагаПатент <> 0 Тогда
		ИндексШага = НомерШагаПатент;
		Пока ИндексШага < ТекущийНомерШагаДокументы Цикл
			ЗаменяемыйШаг = НавигацияПомощниковКлиентСервер.ИмяШага(ИндексШага);
			ЗамещающийШаг = НавигацияПомощниковКлиентСервер.ИмяШага(ИндексШага + 1);
			ЗаполнитьЗначенияСвойств(СтруктураНавигацииПомощника[ЗаменяемыйШаг], СтруктураНавигацииПомощника[ЗамещающийШаг]);
			ИндексШага = ИндексШага + 1;
		КонецЦикла;
		СтруктураНавигацииПомощника.Удалить(ИмяШагаДокументыТекущее);
	ИначеЕсли ТекущийНомерШагаДокументы > НомерШагаДокументы Тогда
		СтруктураНавигацииПомощника[ИмяШагаДокументы] = СтруктураШагаДокументы(НомерШагаДокументы);
		СтруктураНавигацииПомощника.Удалить(ИмяШагаДокументыТекущее);
	Иначе
		СтруктураНавигацииПомощника[ИмяШагаДокументыТекущее] = СтруктураШагаДокументы(НомерШагаДокументы);
	КонецЕсли;
	
	ИменаШагов = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураНавигацииПомощника Цикл
		ИменаШагов.Добавить(КлючИЗначение.Значение.ИмяШагаДляЛК);
	КонецЦикла;
	
	ОписаниеДляЛичногоКабинета = СтрСоединить(ИменаШагов, ",");
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаСтруктураНавигации(),
		СтруктураНавигацииПомощника);
		
	Если Не ПустаяСтрока(ОписаниеДляЛичногоКабинета) И ИспользуетсяСервисРегистрации() Тогда
		ОтправитьОписаниеНавигацииВЛичныйКабинет(ОписаниеДляЛичногоКабинета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДереваОКВЭД

Процедура ЗаполнитьКлассификаторВФормеВыбораОКВЭД(Параметры, АдресХранилища) Экспорт
	
	ТаблицаОКВЭД = РегистрыСведений.КлассификаторОКВЭД2.ТаблицаКлассификатора();
	
	КлассификаторДляПоиска = РегистрыСведений.КлассификаторОКВЭД2.НовыйТаблицаДляПоискаОКВЭД();
	
	НомерТекущейСтроки = 0;
	
	ЗаполнитьДеревоПоТаблице(ТаблицаОКВЭД, НомерТекущейСтроки, Параметры.Классификатор.Строки, 0,
		Параметры.Выбранные, КлассификаторДляПоиска);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("КлассификаторДляПоиска", КлассификаторДляПоиска);
	РезультатВыполнения.Вставить("Классификатор",          Параметры.Классификатор);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПоТаблице(Таблица,
		НомерТекущейСтроки, ИсходныйУзел, ТекущийУровеньДерева, Выбранные, КлассификаторДляПоиска)
	
	Пока Таблица.Количество() > НомерТекущейСтроки Цикл
		
		СтрокаТаблицы = Таблица[НомерТекущейСтроки];
		
		КоличествоЦифрВКоде = СтрДлина(СтрЗаменить(СтрокаТаблицы.Код, ".", ""));
		
		УровеньУзла = КоличествоЦифрВКоде - 2; // Две цифры это нулевой уровень
		
		Если УровеньУзла > ТекущийУровеньДерева Тогда // Новый уровень вниз
			
			ЗаполнитьДеревоПоТаблице(
				Таблица, НомерТекущейСтроки,
				ИсходныйУзел[ИсходныйУзел.Количество()-1].Строки, ТекущийУровеньДерева + 1,
				Выбранные, КлассификаторДляПоиска);
			
		ИначеЕсли УровеньУзла < ТекущийУровеньДерева Тогда // На уровень вверх
			
			ТекущийУровеньДерева = ТекущийУровеньДерева - 1;
			Возврат;
			
		Иначе
			
			НовыйУзел = ИсходныйУзел.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйУзел, СтрокаТаблицы);
			
			НовыйУзел.Выбран = Выбранные.Найти(НовыйУзел.Код, "Код") <> Неопределено;
			
			Если НовыйУзел.ДоступенДляВыбора Тогда
				ЗаполнитьЗначенияСвойств(КлассификаторДляПоиска.Добавить(), СтрокаТаблицы);
			КонецЕсли;
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументовВФоне

Процедура СформироватьДокументыОООВФоне(ПараметрыФормированияДокументов, АдресРезультата = Неопределено) Экспорт
	
	РезультатФормированияДокументов = Новый Структура();
	
	НачатьТранзакцию();
	Попытка
		
		// Организация
		ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
		ЗаписатьНовоеЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации);
		
		// Учетная политика
		ДанныеУчетнойПолитики = ДанныеОрганизации.УчетнаяПолитика;
		ДанныеУчетнойПолитики.Вставить("Организация", РезультатФормированияДокументов.Организация);
		НастройкиУчета.ОчисткаНастроекУчетнойПолитики(РезультатФормированияДокументов.Организация);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
		
		// Руководитель
		ДанныеРуководителя           = ПараметрыФормированияДокументов.ДанныеРуководителя;
		ДанныеОДолжностиРуководителя = ПараметрыФормированияДокументов.ДанныеОДолжностиРуководителя;
		ЗаписатьРуководителя(РезультатФормированияДокументов, ДанныеРуководителя, ДанныеОДолжностиРуководителя);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		//Уставный капитал
		ДанныеУставногоКапитала = ПараметрыФормированияДокументов.ДанныеУставногоКапитала;
		ЗаписатьФормированиеУставногоКапитала(РезультатФормированияДокументов, ДанныеУставногоКапитала);
		
		АдресКвитанцииНаОплатуГоспошлины = Неопределено;
		ДатаСоставления = ПараметрыФормированияДокументов.ДатаСоставления;
		
		УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
			ДатаСоставления,
			ПараметрыФормированияДокументов.СпособПодачиДокументов,
			Истина); // При регистрации формируются учредительные документы
		
		Если СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
			
			Если РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСоставления)
				И ЗначениеЗаполнено(ПараметрыФормированияДокументов.ОтветственныйЗаОплатуПошлины) Тогда
				
				МассивПоказателей = Новый Массив;;
				МассивПоказателей.Добавить("Имя");
				МассивПоказателей.Добавить("Фамилия");
				МассивПоказателей.Добавить("Отчество");
				МассивПоказателей.Добавить("ИНН");
				МассивПоказателей.Добавить("Страна");
				ИменаСвойствФизЛица = СтрСоединить(МассивПоказателей, ",");
				
				ДатаЗаписиОбъектов = ОбщегоНазначения.ТекущаяДатаПользователя();
				СведенияОбОтветственном = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина,
					ПараметрыФормированияДокументов.ОтветственныйЗаОплатуПошлины,
					ИменаСвойствФизЛица,
					ДатаЗаписиОбъектов);
				
				ОтветственныйЗаОплатуПошлины = Новый Структура(ИменаСвойствФизЛица);
				
				Если ЗначениеЗаполнено(СведенияОбОтветственном) Тогда
					ЗаполнитьЗначенияСвойств(ОтветственныйЗаОплатуПошлины, СведенияОбОтветственном[0]);
				КонецЕсли;
				
				Если Не ЭтоРоссия(ОтветственныйЗаОплатуПошлины.Страна) Тогда
					ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				Иначе
					ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				КонецЕсли;
				
				КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					ПараметрыФормированияДокументов.ОтветственныйЗаОплатуПошлины,
					ВидКонтактнойИнформации,
					ДатаЗаписиОбъектов,
					Ложь);
				
				Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
					ОтветственныйЗаОплатуПошлины.Вставить("АдресПропискиЗначениеJSON", КонтактнаяИнформация[0].Значение);
				Иначе
					ОтветственныйЗаОплатуПошлины.Вставить("АдресПропискиЗначениеJSON", "");
				КонецЕсли;
				
				Если УплачиваетсяГоспошлинаЗаРегистрацию Тогда
					АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
						"РегистрацияЮрлица",
						ОтветственныйЗаОплатуПошлины,
						ДанныеОрганизации.ЮридическийАдресЗначениеJSON,
						КБКНалогаПоСпособуПодачиДокументов(ПараметрыФормированияДокументов.СпособПодачиДокументов),
						РегистрацияОрганизацииКлиентСервер.СуммаГосударственнойПошлиныЗаРегистрацию(Истина));
				КонецЕсли;
				
			ИначеЕсли УплачиваетсяГоспошлинаЗаРегистрацию И ЗначениеЗаполнено(ДанныеРуководителя.АдресПропискиЗначениеJSON) Тогда
				// Поддерживается только схема, когда руководителю выписывают доверенность
				// на подачу и получение документов гос.регистрации ООО
				АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
					"РегистрацияЮрлица",
					ДанныеРуководителя,
					ДанныеОрганизации.ЮридическийАдресЗначениеJSON,
					КБКНалогаПоСпособуПодачиДокументов(ПараметрыФормированияДокументов.СпособПодачиДокументов),
					РегистрацияОрганизацииКлиентСервер.СуммаГосударственнойПошлиныЗаРегистрацию(Истина));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
			ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(
					РезультатФормированияДокументов.Организация, АдресКвитанцииНаОплатуГоспошлины);
		Иначе
			ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(
					РезультатФормированияДокументов.Организация);
		КонецЕсли;
		
		// Заявление о регистрации индивидуального предпринимателя
		ПараметрыЗаявленияОРегистрацииООО = ПараметрыЗаявленияОРегистрации(РезультатФормированияДокументов.Организация);
		ПараметрыЗаявленияОРегистрацииООО.ИмяФормы = РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
			ДатаСоставления,
			"РегламентированноеУведомлениеФормаР11001");
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаявленияОРегистрацииООО.ДополнительныеПараметры, ПараметрыФормированияДокументов);
		
		ПараметрыЗаявленияОРегистрацииООО.ДополнительныеПараметры.Вставить("ОграничитьДоступВЕГРЮЛРуководитель",
			ДанныеОрганизации.ОграничитьДоступВЕГРЮЛРуководитель);
		ПараметрыЗаявленияОРегистрацииООО.ДополнительныеПараметры.Вставить("ОграничитьДоступВЕГРЮЛУчастники",
			ДанныеОрганизации.ОграничитьДоступВЕГРЮЛУчастники);
		ПараметрыЗаявленияОРегистрацииООО.ДополнительныеПараметры.Вставить("НомерТиповогоУстава",
			ПараметрыФормированияДокументов.НомерТиповогоУстава);
		
		ЗаявлениеОРегистрацииООО = Отчеты.РегламентированноеУведомлениеФормаР11001.СоздатьЗаполненноеУведомление(
			ПараметрыЗаявленияОРегистрацииООО,
			НайтиЗаявлениеОРегистрации(РезультатФормированияДокументов.Организация, "Р11001"));
		
		СохранитьДанныеПомощникаЗаполнения(ЗаявлениеОРегистрацииООО, ПараметрыФормированияДокументов);
		
		РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(
			ЗаявлениеОРегистрацииООО,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
		
		// Заявление о переходе на УСН
		Если ПодаетсяУведомлениеОПереходеНаУСН(ДанныеУчетнойПолитики) Тогда
			
			ЗаписатьДанныеУведомленияОПереходеНаУСН(
				РезультатФормированияДокументов.Организация,
				ДанныеОрганизации.КодНалоговогоОргана,
				ДанныеРуководителя,
				ПараметрыФормированияДокументов.СпособРегистрации);
			
		КонецЕсли;
	
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияДокументов, АдресРезультата);
	
	ЗаписатьОперациюБизнесСтатистикиНомерТиповогоУстава(ПараметрыФормированияДокументов.НомерТиповогоУстава);
	
КонецПроцедуры

Процедура СформироватьДокументыИПВФоне(ПараметрыФормированияДокументов, АдресРезультата = Неопределено) Экспорт
	
	РезультатФормированияДокументов = Новый Структура();
	
	НачатьТранзакцию();
	Попытка
		
		// Организация
		ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
		ЗаписатьНовогоИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации);
		
		// Учетная политика
		ДанныеУчетнойПолитики = ДанныеОрганизации.УчетнаяПолитика;
		ДанныеУчетнойПолитики.Вставить("Организация", РезультатФормированияДокументов.Организация);
		НастройкиУчета.ОчисткаНастроекУчетнойПолитики(РезультатФормированияДокументов.Организация);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ПараметрыФормированияДокументов.ДатаСоставления,
		ПараметрыФормированияДокументов.СпособПодачиДокументов);
	
	Попытка
		
		Если УплачиваетсяГоспошлинаЗаРегистрацию И СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
			// Квитанция на оплату госпошлины из веб-сервиса
			АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
				"РегистрацияИП",
				ДанныеОрганизации.ИндивидуальныйПредприниматель,
				ДанныеОрганизации.ИндивидуальныйПредприниматель.АдресПропискиЗначениеJSON,
				КБКНалогаПоСпособуПодачиДокументов(ПараметрыФормированияДокументов.СпособПодачиДокументов),
				РегистрацияОрганизацииКлиентСервер.СуммаГосударственнойПошлиныЗаРегистрацию());
		Иначе
			АдресКвитанцииНаОплатуГоспошлины = Неопределено;
		КонецЕсли;
		Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
			ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(
				РезультатФормированияДокументов.Организация, АдресКвитанцииНаОплатуГоспошлины);
		Иначе
			ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(
				РезультатФормированияДокументов.Организация);
		КонецЕсли;
		
		// Заявление о регистрации индивидуального предпринимателя
		ДанныеДокументов = Новый Структура;
		ДанныеДокументов.Вставить("ДанныеПаспорта", ПараметрыФормированияДокументов.ДанныеПаспорта);
		ДанныеДокументов.Вставить(
			"ДанныеОснованияДляПроживания", ПараметрыФормированияДокументов.ДанныеОснованияДляПроживания);
		ПараметрыЗаявленияОРегистрацииИП = ПараметрыЗаявленияОРегистрации(РезультатФормированияДокументов.Организация);
		ЗаполнитьЗначенияСвойств(ПараметрыЗаявленияОРегистрацииИП.ДополнительныеПараметры, ПараметрыФормированияДокументов);
		
		Период = ПараметрыФормированияДокументов.ДатаСоставления;
		ИмяФормы = РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
			Период,
			"РегламентированноеУведомлениеФормаР21001");
		
		ПараметрыЗаявленияОРегистрацииИП.ИмяФормы = ИмяФормы;
		ПараметрыЗаявленияОРегистрацииИП.ДополнительныеПараметры.ДанныеДокументов = ДанныеДокументов;
		
		ЗаявлениеОРегистрацииИП = Отчеты.РегламентированноеУведомлениеФормаР21001.СоздатьЗаполненноеУведомление(
			ПараметрыЗаявленияОРегистрацииИП,
			НайтиЗаявлениеОРегистрации(РезультатФормированияДокументов.Организация, "Р21001"));
		
		СохранитьДанныеПомощникаЗаполнения(ЗаявлениеОРегистрацииИП, ПараметрыФормированияДокументов);
		
		РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(
			ЗаявлениеОРегистрацииИП,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
		
		// Заявление о переходе на УСН
		Если ПодаетсяУведомлениеОПереходеНаУСН(ДанныеУчетнойПолитики) Тогда
			
			ЗаписатьДанныеУведомленияОПереходеНаУСН(
				РезультатФормированияДокументов.Организация,
				ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана,
				ДанныеОрганизации.ИндивидуальныйПредприниматель,
				ПараметрыФормированияДокументов.СпособРегистрации);
			
		КонецЕсли;
		
		ПараметрыПатент = ПараметрыЗаявлениеНаПолучениеПатента(
			ПараметрыФормированияДокументов,
			РезультатФормированияДокументов.Организация);
		
		Если ПараметрыПатент <> Неопределено Тогда
			СсылкаНаПатент = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СформироватьЗаявлениеНаПолучениеПатента(ПараметрыПатент);
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(
				СсылкаНаПатент,
				ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияДокументов, АдресРезультата);
	
КонецПроцедуры

Функция ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица) Экспорт
	Перем ПаспортныеДанные;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Ссылка) Тогда
		ФизическоеЛицоОбъект = ДанныеФизическогоЛица.Ссылка.ПолучитьОбъект();
	Иначе
		ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизическоеЛицоОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, ДанныеФизическогоЛица, "Фамилия,Имя,Отчество,Пол,ИНН");
	
	Если ДанныеФизическогоЛица.Свойство("ДатаРождения") Тогда
		ФизическоеЛицоОбъект.ДатаРождения = ДанныеФизическогоЛица.ДатаРождения;
	КонецЕсли;
	Если ДанныеФизическогоЛица.Свойство("МестоРожденияПредставление") Тогда
		ФизическоеЛицоОбъект.МестоРожденияПредставление = ДанныеФизическогоЛица.МестоРожденияПредставление;
	КонецЕсли;
	
	ФизическоеЛицоОбъект.ФИО = СокрП(ФизическоеЛицоОбъект.Фамилия + " " + ФизическоеЛицоОбъект.Имя + " " + ФизическоеЛицоОбъект.Отчество);
	ФизическоеЛицоОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФизическоеЛицоОбъект.Фамилия, ФизическоеЛицоОбъект.Имя, ФизическоеЛицоОбъект.Отчество, "");
	ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены");
	
	Если ДанныеФизическогоЛица.Свойство("АдресПропискиЗначениеJSON")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.АдресПропискиЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ФизическоеЛицоОбъект,
			ДанныеФизическогоЛица.АдресПропискиЗначениеJSON,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	КонецЕсли;
	Если ДанныеФизическогоЛица.Свойство("АдресИнформированияЗначениеJSON")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.АдресИнформированияЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ФизическоеЛицоОбъект,
			ДанныеФизическогоЛица.АдресИнформированияЗначениеJSON,
			Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	КонецЕсли;
	Если ДанныеФизическогоЛица.Свойство("ТелефонРабочийЗначениеJSON")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.ТелефонРабочийЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
			ДанныеФизическогоЛица.ТелефонРабочийЗначениеJSON, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	КонецЕсли;
	Если ДанныеФизическогоЛица.Свойство("EMailЗначениеJSON")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.EMailЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
			ДанныеФизическогоЛица.EMailЗначениеJSON, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	КонецЕсли;
	
	ФизическоеЛицоОбъект.Записать();
	
	Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоОбъект.Ссылка);
	Запись = Набор.Добавить();
	Запись.Фамилия  = ФизическоеЛицоОбъект.Фамилия;
	Запись.Имя      = ФизическоеЛицоОбъект.Имя;
	Запись.Отчество = ФизическоеЛицоОбъект.Отчество;
	Запись.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	Запись.Период   = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	Набор.Записать();
	
	Если ДанныеФизическогоЛица.Свойство("Гражданство") Тогда
		ЗаписиГражданство = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
		ЗаписиГражданство.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоОбъект.Ссылка);
		ЗаписиГражданство.Прочитать();
		Если ЗаписиГражданство.Количество() = 0 Тогда
			ЗаписьГражданство = ЗаписиГражданство.Добавить();
			ЗаписьГражданство.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			ЗаписьГражданство.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
			ЗаписьГражданство.Страна = ДанныеФизическогоЛица.Гражданство;
		Иначе
			Для Каждого ЗаписьГражданство Из ЗаписиГражданство Цикл
				Если ЗаписьГражданство.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
					ЗаписьГражданство.Страна = ДанныеФизическогоЛица.Гражданство;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаписиГражданство.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ЗаписиГражданство.Записать();
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("ПаспортныеДанные") И ДанныеФизическогоЛица.Свойство("Гражданство") Тогда
		
		ГражданинРФ =
			ДанныеФизическогоЛица.Гражданство = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
		КодыВидовДокументов = ДокументыФизическихЛицБП.КодыФНСВидовДокументов();
		ЗаполненаДатаВыдачи = ЗначениеЗаполнено(ДанныеФизическогоЛица.ПаспортныеДанные.ДатаВыдачи);
		
		// Паспортные данные
		Если ГражданинРФ И ЗаполненаДатаВыдачи Тогда
			ПаспортРФ = ВидДокументаПаспортРФ();
			ДокументыФизическихЛицБП.ДобавитьСведенияОДокументеФизЛица(
				ПаспортРФ, ФизическоеЛицоОбъект.Ссылка, ДанныеФизическогоЛица.ПаспортныеДанные, Истина);
		ИначеЕсли ЗначениеЗаполнено(ДанныеФизическогоЛица.Гражданство) И ЗаполненаДатаВыдачи Тогда
			ПаспортИностранногоГосударства = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(
			КодыВидовДокументов.ИностранныйПаспорт);
			ДокументыФизическихЛицБП.ДобавитьСведенияОДокументеФизЛица(
				ПаспортИностранногоГосударства,
				ФизическоеЛицоОбъект.Ссылка,
				ДанныеФизическогоЛица.ПаспортныеДанные,
				Истина,
				ДанныеФизическогоЛица.Гражданство);
		КонецЕсли;
		
		Если Не ГражданинРФ И ДанныеФизическогоЛица.Свойство("ДанныеОснованияДляПроживанияВРФ")
			И ЗначениеЗаполнено(ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Номер) Тогда
			ОснованиеРазрешениеНаВременноеПроживание = ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.ВидДокумента =
				РегистрацияОрганизацииКлиентСервер.ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора();
			ВидДокумента = ?(ОснованиеРазрешениеНаВременноеПроживание,
				ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыВидовДокументов.РазрешениеНаВременноеПроживание),
				ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыВидовДокументов.ВидНаЖительство));
			// Для лиц без гражданства является документом, удостоверяющим личность
			УдостоверяетЛичность = Не ЗначениеЗаполнено(ДанныеФизическогоЛица.Гражданство);
			
			ДокументыФизическихЛицБП.ДобавитьСведенияОДокументеФизЛица(
				ВидДокумента,
				ФизическоеЛицоОбъект.Ссылка,
				ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ,
				УдостоверяетЛичность);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФизическоеЛицоОбъект.Ссылка;
	
КонецФункции

Функция НовыеДанныеРуководителя() Экспорт
	
	ДанныеРуководителя = Новый Структура();
	ДанныеРуководителя.Вставить("Ссылка", Справочники.ФизическиеЛица.ПустаяСсылка()); // Ссылка на справочник ФизическиеЛица
	ДанныеРуководителя.Вставить("Фамилия", "");
	ДанныеРуководителя.Вставить("Имя", "");
	ДанныеРуководителя.Вставить("Отчество", "");
	ДанныеРуководителя.Вставить("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеРуководителя.Вставить("ИНН", "");
	
	Возврат ДанныеРуководителя;
	
КонецФункции

Функция НовыеДанныеФизическогоЛица() Экспорт
	
	ДанныеФизическогоЛица = Новый Структура();
	ДанныеФизическогоЛица.Вставить("Ссылка",                     Справочники.ФизическиеЛица.ПустаяСсылка()); // Ссылка на справочник ФизическиеЛица
	ДанныеФизическогоЛица.Вставить("Фамилия",                    "");
	ДанныеФизическогоЛица.Вставить("Имя",                        "");
	ДанныеФизическогоЛица.Вставить("Отчество",                   "");
	ДанныеФизическогоЛица.Вставить("Пол",                        Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеФизическогоЛица.Вставить("ИНН",                        "");
	ДанныеФизическогоЛица.Вставить("ДатаРождения",               '00010101');
	ДанныеФизическогоЛица.Вставить("МестоРожденияПредставление", "");
	ДанныеФизическогоЛица.Вставить("Гражданство",                Справочники.СтраныМира.ПустаяСсылка());
	ДанныеФизическогоЛица.Вставить("ОтчествоЛатиницей",          "");
	
	ДанныеФизическогоЛица.Вставить("ПаспортныеДанные", Новый Структура());
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("Серия",             "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("Номер",             "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("КемВыдан",          "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("ДатаВыдачи",        '00010101');
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("КодПодразделения",  "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("ФамилияЛатиницей",  "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("ИмяЛатиницей",      "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("ДокументКодМВД",    "");
	
	ДанныеФизическогоЛица.Вставить("ДанныеОснованияДляПроживанияВРФ", Новый Структура());
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("ВидДокумента",   "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("ДокументКодМВД", "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("Серия",          "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("Номер",          "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("КемВыдан",       "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("ДатаВыдачи",     "");
	ДанныеФизическогоЛица.ДанныеОснованияДляПроживанияВРФ.Вставить("СрокДействия",   "");
	
	ДанныеФизическогоЛица.Вставить("АдресПрописки", "");
	// JSON-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица
	ДанныеФизическогоЛица.Вставить("АдресПропискиЗначениеJSON", "");
	ДанныеФизическогоЛица.Вставить("АдресИнформирования", "");
	// JSON-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица
	ДанныеФизическогоЛица.Вставить("АдресИнформированияЗначениеJSON", "");
	ДанныеФизическогоЛица.Вставить("ТелефонРабочий", "");
	// JSON-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица
	ДанныеФизическогоЛица.Вставить("ТелефонРабочийЗначениеJSON", "");
	ДанныеФизическогоЛица.Вставить("EMail", "");
	// JSON-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица
	ДанныеФизическогоЛица.Вставить("EMailЗначениеJSON", "");
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

Функция НовыеДанныеДолжности() Экспорт
	
	ДанныеДолжности = Новый Структура();
	ДанныеДолжности.Вставить("Должность",      Справочники.Должности.ПустаяСсылка());
	ДанныеДолжности.Вставить("ДатаНазначения", '00010101');
	ДанныеДолжности.Вставить("СрокПолномочий", 0); // Число лет
	
	Возврат ДанныеДолжности;
	
КонецФункции

Функция НовыеДанныеРегистрацииВНалоговомОргане() Экспорт
	
	ДанныеРегистрации = Новый Структура();
	ДанныеРегистрации.Вставить("КодНалоговогоОргана", "");
	ДанныеРегистрации.Вставить("КодПоОКТМО", "");
	ДанныеРегистрации.Вставить("КодПоОКАТО", "");
	
	Возврат ДанныеРегистрации;
	
КонецФункции

// Находит актуальные заявления по выбранной организации и возвращает в структуре
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - содержит ссылки на документы и состояние их отправки
//
Функция НайтиАктуальныеЗаявленияОВнесенииИзмененийЕГР(Организация) Экспорт
	
	АктуальныеЗаявления = Новый Структура;
	АктуальныеЗаявления.Вставить("Заявление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	АктуальныеЗаявления.Вставить("Состояние", Неопределено);
	АктуальныеЗаявления.Вставить("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	АктуальныеЗаявления.Вставить("ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки", Неопределено);
	АктуальныеЗаявления.Вставить("СтатусОтправкиЗаявленияВФНС", Неопределено);
	АктуальныеЗаявления.Вставить("ВерсияОбменаСФНС", 0);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КодыФорм = КодыФормЗаявлений();
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			
			РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеРегистрацииИзмененийЕГРЮЛ);
			АктуальныеЗаявления.Заявление = РеквизитыЗаявления.Заявление;
			
			СвойстваОтправкиОнлайн = СвойстваОтправкиЗаявленияВФНСОнлайн(РеквизитыЗаявления.Заявление);
			
			Если СвойстваОтправкиОнлайн <> Неопределено Тогда
				// Если заявление отправлено онлайн, то проверим актуальный статус заявления
				ЗаполнитьЗначенияСвойств(АктуальныеЗаявления, СвойстваОтправкиОнлайн);
			Иначе
				АктуальныеЗаявления.Состояние = РеквизитыЗаявления.Состояние;
			КонецЕсли;
			
			РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов);
			АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы = РеквизитыЗаявления.Заявление;
			АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки = РеквизитыЗаявления.Состояние;
		Иначе
			
			РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеРегистрацииИзмененийЕГРИП);
			АктуальныеЗаявления.Заявление = РеквизитыЗаявления.Заявление;
			
			СвойстваОтправкиОнлайн = СвойстваОтправкиЗаявленияВФНСОнлайн(РеквизитыЗаявления.Заявление);
			
			Если СвойстваОтправкиОнлайн <> Неопределено Тогда
				// Если заявление отправлено онлайн, то проверим актуальный статус заявления
				ЗаполнитьЗначенияСвойств(АктуальныеЗаявления, СвойстваОтправкиОнлайн);
			Иначе
				АктуальныеЗаявления.Состояние = РеквизитыЗаявления.Состояние;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат АктуальныеЗаявления;
	
КонецФункции

// Находит актуальное заявление на регистрацию ООО/ИП по выбранной организации и возвращает в его свойства
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - содержит ссылку на документ и состояние отправки
//
Функция АктуальноеЗаявлениеНаРегистрациюОрганизации(Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Заявление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	Результат.Вставить("Состояние", Неопределено);
	Результат.Вставить("СтатусОтправкиЗаявленияВФНС", Неопределено);
	Результат.Вставить("ВерсияОбменаСФНС", 0);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КодыФорм = КодыФормЗаявлений();
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			
			РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеРегистрацииООО);
			Результат.Заявление = РеквизитыЗаявления.Заявление;
			
			СвойстваОтправкиОнлайн = СвойстваОтправкиЗаявленияВФНСОнлайн(РеквизитыЗаявления.Заявление);
			
			Если СвойстваОтправкиОнлайн <> Неопределено Тогда
				// Если заявление отправлено онлайн, то проверим актуальный статус заявления
				ЗаполнитьЗначенияСвойств(Результат, СвойстваОтправкиОнлайн);
			Иначе
				Результат.Состояние = РеквизитыЗаявления.Состояние;
			КонецЕсли;
			
		Иначе
			
			РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеРегистрацииИП);
			Результат.Заявление = РеквизитыЗаявления.Заявление;
			
			СвойстваОтправкиОнлайн = СвойстваОтправкиЗаявленияВФНСОнлайн(РеквизитыЗаявления.Заявление);
			
			Если СвойстваОтправкиОнлайн <> Неопределено Тогда
				// Если заявление отправлено онлайн, то проверим актуальный статус заявления
				ЗаполнитьЗначенияСвойств(Результат, СвойстваОтправкиОнлайн);
			Иначе
				Результат.Состояние = РеквизитыЗаявления.Состояние;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит актуальные заявления о прекращении деятельности по выбранной организации и возвращает в структуре
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - содержит ссылки на документы и состояние их отправки
//
Функция АктуальноеЗаявлениеОСнятииСУчета(Организация) Экспорт
	
	АктуальныеЗаявления = Новый Структура;
	АктуальныеЗаявления.Вставить("Заявление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	АктуальныеЗаявления.Вставить("Состояние", Неопределено);
	АктуальныеЗаявления.Вставить("СтатусОтправкиЗаявленияВФНС", Неопределено);
	АктуальныеЗаявления.Вставить("ВерсияОбменаСФНС", 0);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		КодыФорм = КодыФормЗаявлений();
		РеквизитыЗаявления = НайтиАктуальноеЗаявлениеВЕГР(Организация, КодыФорм.ЗаявлениеОПрекращенииДеятельностиИП);
		АктуальныеЗаявления.Заявление = РеквизитыЗаявления.Заявление;
		
		СвойстваОтправкиОнлайн = СвойстваОтправкиЗаявленияВФНСОнлайн(РеквизитыЗаявления.Заявление);
		
		Если СвойстваОтправкиОнлайн <> Неопределено Тогда
			// Если заявление отправлено онлайн, то проверим актуальный статус заявления
			ЗаполнитьЗначенияСвойств(АктуальныеЗаявления, СвойстваОтправкиОнлайн);
		Иначе
			АктуальныеЗаявления.Состояние = РеквизитыЗаявления.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АктуальныеЗаявления;
	
КонецФункции

Функция СвойстваОтправкиЗаявленияВФНСОнлайн(Заявление)
	
	Результат = Новый Структура("Состояние, СтатусОтправкиЗаявленияВФНС, ВерсияОбменаСФНС");
	СостояниеОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваЗаявленияРегистрацииЮЛ(Заявление);
	
	Если СостояниеОтправки <> Неопределено И ЗначениеЗаполнено(СостояниеОтправки.СтатусОтправки) Тогда
		Результат.Состояние = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(
			Заявление,
			Перечисления.ТипыКонтролирующихОрганов.РегистрацияЮЛФНС);
		Результат.СтатусОтправкиЗаявленияВФНС = СостояниеОтправки.СтатусОтправки;
		Результат.ВерсияОбменаСФНС = СостояниеОтправки.ВерсияОбмена;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит заявление по определенной форме, по которому не завершено внесение изменений в ЕГР или прекращение деятельности.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой нужно найти созданное заявление
//   КодФормы    - Строка - См. КодыФормЗаявлений()
//
Функция НайтиАктуальноеЗаявлениеВЕГР(Организация, КодФормы)
	
	Результат = Новый Структура;
	Результат.Вставить("Заявление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	Результат.Вставить("Состояние", Неопределено);
	
	ФормыБезПроверкиДанныхПомощника = КодыФормЗаявленийБезПроверкиДанныхПомощника();
	
	Если ФормыБезПроверкиДанныхПомощника.Найти(КодФормы) <> Неопределено Тогда
		РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(Организация, КодФормы);
		Если РеквизитыЗаявления <> Неопределено
			И КодыФормЗаявленийРегистрацииНовогоБизнеса().Найти(КодФормы) <> Неопределено Тогда
			// Для форм регистрации ООО и ИП актуальным заявление считаем до тех пор, пока в организации не будет заполнены реквизиты из Листа записи ЕГР
			РеквизитыЕГР = Новый Массив;
			РеквизитыЕГР.Добавить("ОГРН");
			РеквизитыЕГР.Добавить("ИНН");
			СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
				Организация,
				ОбщегоНазначения.ТекущаяДатаПользователя(),
				РеквизитыЕГР);
			Если Не ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Или Не ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
				Результат.Заявление = РеквизитыЗаявления.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Для заявлений на изменения в ЕГРЮЛ/ЕГРИП важны реквизиты, которые были указаны в помощнике
		РеквизитыЗаявления = НайтиЗаявлениеОРегистрации(Организация, КодФормы, Истина);
	КонецЕсли;
	
	Если РеквизитыЗаявления = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваЗаявленияРегистрацииЮЛ(
		РеквизитыЗаявления.Ссылка);
	
	Если СвойстваОтправки <> Неопределено И ЗначениеЗаполнено(СвойстваОтправки.СтатусОтправки) Тогда
		СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(
			РеквизитыЗаявления.Ссылка,
			Перечисления.ТипыКонтролирующихОрганов.РегистрацияЮЛФНС);
	Иначе
		СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(РеквизитыЗаявления.Ссылка);
	КонецЕсли;
	
	ФинальныеСтатусы = РегистрацияОрганизацииСервер.ФинальныеСтатусыЗаявлений(); // Изменение зарегистрировано - при отправке онлайн
	
	Если ФинальныеСтатусы.Найти(СостояниеОтправки.Статус) <> Неопределено
		И КодФормы <> КодыФормЗаявлений().ЗаявлениеОПрекращенииДеятельностиИП Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Заявление = РеквизитыЗаявления.Ссылка;
	Результат.Состояние = СостояниеОтправки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты последнего уведомления заданной формы
//
Функция НайтиЗаявлениеОРегистрации(Организация, КодФормы, СодержитДанныеПомощникаЗаполнения = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или ПустаяСтрока(КодФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ВидУведомления", Перечисления.ВидыУведомленийОСпецрежимахНалогообложения["Форма" + КодФормы]);
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
	
	ЗаявлениеОРегистрации = Новый Структура;
	ЗаявлениеОРегистрации.Вставить("Ссылка", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	ЗаявлениеОРегистрации.Вставить("Дата", Дата(1, 1, 1));
	ЗаявлениеОРегистрации.Вставить("ИмяФормы", "");
	
	ИмяОтчета = ИмяРегламентированногоУведомления(КодФормы);
	
	ТаблицаФорм = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
	Если ТаблицаФорм.Количество() > 1 Тогда
		ТаблицаФорм.Сортировать("ДатаНачала Убыв");
	КонецЕсли;
	ИмяФормы = ТаблицаФорм[0].ИмяФормы;
	
	ПолноеИмяФормы = СтрШаблон(
		"Отчет.%1.Форма.%2",
		ИмяОтчета,
		ИмяФормы);
	Для Каждого НайденноеЗаявление Из Уведомления Цикл
		Если СодержитДанныеПомощникаЗаполнения Тогда
			Если Не ЗначениеЗаполнено(ДанныеПомощникаЗаполнения(НайденноеЗаявление.Ссылка)) Тогда
				// Найденное заявление создано вручную
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаявлениеОРегистрации, НайденноеЗаявление);
		ЗаявлениеОРегистрации.Вставить("ИмяФормы", ПолноеИмяФормы);
		Прервать;
	КонецЦикла;
	
	Если ПустаяСтрока(ЗаявлениеОРегистрации.ИмяФормы) Тогда
		ЗаявлениеОРегистрации.Вставить("ИмяФормы", ПолноеИмяФормы);
	КонецЕсли;
	
	Возврат ЗаявлениеОРегистрации;
	
КонецФункции

Функция НайтиУведомлениеОСпецРежимеНалогообложения(Организация, ВидУведомления, ИмяФормыПоУмолчанию) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УведомлениеОСпецРежимеНалогообложения = Новый Структура;
	УведомлениеОСпецРежимеНалогообложения.Вставить("Ссылка", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	УведомлениеОСпецРежимеНалогообложения.Вставить("Дата", Дата(1, 1, 1));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ВидУведомления", ВидУведомления);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Если Уведомления.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(УведомлениеОСпецРежимеНалогообложения, Уведомления[0]);
		ПозицияПоследнейТочки =  СтрНайти(ИмяФормыПоУмолчанию, ".", НаправлениеПоиска.СКонца);
		ИмяФормы = Лев(ИмяФормыПоУмолчанию, ПозицияПоследнейТочки) + Уведомления[0].ИмяФормы;
		УведомлениеОСпецРежимеНалогообложения.Вставить("ИмяФормы", ИмяФормы);
	Иначе
		УведомлениеОСпецРежимеНалогообложения.Вставить("ИмяФормы", ИмяФормыПоУмолчанию);
	КонецЕсли;
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

Функция ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики) Экспорт
	
	Если СтруктураУчетнойПолитики <> Неопределено
		И СтруктураУчетнойПолитики.Свойство("СистемаНалогообложения")
		И (СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
			Или СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.АУСН) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
	
КонецФункции

Процедура ЗаписатьНовоеЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации,
		"Наименование, НаименованиеСокращенное, НаименованиеПолное, ЮридическоеФизическоеЛицо,
		|КодОКВЭД2, НаименованиеОКВЭД2, ДополнительныеКодыОКВЭД2");
	ОрганизацияОбъект.ИНН = "";
	ОрганизацияОбъект.КПП = "";
	ОрганизацияОбъект.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЮридическийАдресЗначениеJSON);
	ЗаписатьАдресЭлектроннойПочтыОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЭлектроннаяПочта);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	// Очищаем регистрацию в НО. Она будет заполнена позже, после ввода данных об организации
	ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	ОрганизацияОбъект.КодНалоговогоОргана = "";
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьНовогоИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации)
	
	ДанныеПредпринимателя = ДанныеОрганизации.ИндивидуальныйПредприниматель;
	
	ИндивидуальныйПредприниматель = ЗаписатьФизическоеЛицо(ДанныеПредпринимателя);
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации,
		"ЮридическоеФизическоеЛицо, КодОКВЭД2, НаименованиеОКВЭД2, ДополнительныеКодыОКВЭД2");
	
	ОрганизацияОбъект.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.ФамилияИП  = ДанныеПредпринимателя.Фамилия;
	ОрганизацияОбъект.ИмяИП      = ДанныеПредпринимателя.Имя;
	ОрганизацияОбъект.ОтчествоИП = ДанныеПредпринимателя.Отчество;
	ОрганизацияОбъект.ИНН        = ДанныеПредпринимателя.ИНН;
	ОрганизацияОбъект.КПП        = "";
	
	
	ОрганизацияОбъект.НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеИндивидуальногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеИндивидуальногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
										ОрганизацияОбъект.Ссылка, 
										"",
										ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеПредпринимателя.АдресПропискиЗначениеJSON);
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.EMailЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.EMailЗначениеJSON, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	КонецЕсли;
	
	ЗаписиГражданствоОрганизации = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	ЗаписиГражданствоОрганизации.Отбор.ФизическоеЛицо.Установить(ИндивидуальныйПредприниматель);
	ЗаписиГражданствоОрганизации.Прочитать();
	Если ЗаписиГражданствоОрганизации.Количество() = 0 Тогда
		ЗаписьГражданство = ЗаписиГражданствоОрганизации.Добавить();
		ЗаписьГражданство.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		ЗаписьГражданство.ФизическоеЛицо = ИндивидуальныйПредприниматель;
		ЗаписьГражданство.Страна = ДанныеПредпринимателя.Гражданство;
	Иначе
		Для Каждого ЗаписьГражданство Из ЗаписиГражданствоОрганизации Цикл
			Если ЗаписьГражданство.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
				ЗаписьГражданство.Страна = ДанныеПредпринимателя.Гражданство;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписиГражданствоОрганизации.Записать();
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияСсылка, КПП, ДанныеРегистрацииВНалоговомОргане, РегистрацияВНалоговомОргане = Неопределено)
	
	Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана) Тогда
		
		РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
			ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
		
		Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
			ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
		КонецЕсли;
		
		Если РегистрацияВНалоговомОргане = Неопределено Тогда
			РегистрацияВНалоговомОргане = ОрганизацияСсылка.РегистрацияВНалоговомОргане;
		КонецЕсли;
		Если ОбщегоНазначения.СсылкаСуществует(РегистрацияВНалоговомОргане) Тогда
			РегистрацияОбъект = РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Иначе
			РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			РегистрацияОбъект.УстановитьСсылкуНового(РегистрацияВНалоговомОргане);
			РегистрацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
		
		РегистрацияОбъект.Владелец         = ОрганизацияСсылка;
		РегистрацияОбъект.Код              = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		РегистрацияОбъект.КодРегиона       = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
		РегистрацияОбъект.Наименование     = РеквизитыНалоговогоОргана.Наименование;
		РегистрацияОбъект.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
		ЗаполнитьЗначенияСвойств(РегистрацияОбъект, ДанныеРегистрацииВНалоговомОргане);
		РегистрацияОбъект.КПП              = КПП;
		РегистрацияОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРуководителя(РезультатФормированияДокументов, ДанныеРуководителя, ДанныеДолжности)
	
	Организация = РезультатФормированияДокументов.Организация;
	
	Руководитель = ЗаписатьФизическоеЛицо(ДанныеРуководителя);
	
	// Запись руководителя в ответственные лица
	ОтветственныеЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
	ОтветственныеЛица.Отбор.СтруктурнаяЕдиница.Установить(Организация);
	ОтветственныеЛица.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	ОтветственноеЛицо = ОтветственныеЛица.Добавить();
	ОтветственноеЛицо.Период = ?(ЗначениеЗаполнено(ДанныеДолжности.ДатаНазначения), 
									ДанныеДолжности.ДатаНазначения, ТекущаяДатаСеанса());
	ОтветственноеЛицо.СтруктурнаяЕдиница = Организация;
	ОтветственноеЛицо.ФизическоеЛицо     = Руководитель;
	ОтветственноеЛицо.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
	ОтветственноеЛицо.Должность          = ДанныеДолжности.Должность;
	ОтветственноеЛицо.СрокПолномочий     = ДанныеДолжности.СрокПолномочий;
	
	ОтветственныеЛица.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	ОтветственныеЛица.Записать();
	
	РезультатФормированияДокументов.Вставить("Руководитель", Руководитель);
	
КонецПроцедуры

Процедура ЗаписатьФормированиеУставногоКапитала(РезультатФормированияДокументов, ДанныеУставногоКапитала, ДатаРегистрации = Неопределено)
	
	Организация  = РезультатФормированияДокументов.Организация;
	Руководитель = РезультатФормированияДокументов.Руководитель;
	
	Если ЗначениеЗаполнено(ДанныеУставногоКапитала.Ссылка) Тогда
		УставныйКапиталОбъект = ДанныеУставногоКапитала.Ссылка.ПолучитьОбъект();
	Иначе
		УставныйКапиталОбъект = Документы.ФормированиеУставногоКапитала.СоздатьДокумент();
		ЗаполнениеДокументов.Заполнить(УставныйКапиталОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		УставныйКапиталОбъект.Дата = ДатаРегистрации;
	Иначе
		УставныйКапиталОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(УставныйКапиталОбъект, ДанныеУставногоКапитала, "УставныйКапитал, СпособРегистрации");
	УставныйКапиталОбъект.Организация = Организация;
	УставныйКапиталОбъект.СформированПомощникомРегистрации = Истина;
	УставныйКапиталОбъект.Учредители.Очистить();
	Если ДанныеУставногоКапитала.ЕдинственныйУчредительРуководитель Тогда
		НоваяСтрока = УставныйКапиталОбъект.Учредители.Добавить();
		НоваяСтрока.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		НоваяСтрока.Учредитель    = Руководитель;
		НоваяСтрока.СуммаВзноса   = УставныйКапиталОбъект.УставныйКапитал;
	Иначе
		УставныйКапиталОбъект.Учредители.Загрузить(ДанныеУставногоКапитала.Учредители);
	КонецЕсли;
	
	УставныйКапиталОбъект.Комментарий =  НСтр("ru='#Сформирован помощником регистрации'");
	
	Если УставныйКапиталОбъект.Проведен Тогда
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	РезультатФормированияДокументов.Вставить("УставныйКапитал", УставныйКапиталОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьДанныеУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации)
	
	ПараметрыУведомленияОПереходеНаУСН = ПараметрыУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации);
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = ПолноеИмяФормыПоУмолчанию("РегламентированноеУведомлениеПереходНаУСН");
	
	ЗаявлениеОПереходеНаУСН = Отчеты.РегламентированноеУведомлениеПереходНаУСН.СоздатьЗаполненноеУведомление(
		ПараметрыУведомленияОПереходеНаУСН,
		НайтиУведомлениеОСпецРежимеНалогообложения(Организация, ВидУведомления, ИмяФормыПоУмолчанию));
	
	РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(
		ЗаявлениеОПереходеНаУСН,
		ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
	
КонецПроцедуры

Процедура ЗаписатьАдресОрганизации(ОрганизацияОбъект, АдресЗначениеJSON)
	
	Если Не ЗначениеЗаполнено(АдресЗначениеJSON) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект, АдресЗначениеJSON,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект, АдресЗначениеJSON,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект, АдресЗначениеJSON,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	
КонецПроцедуры

Процедура ЗаписатьАдресЭлектроннойПочтыОрганизации(ОрганизацияОбъект, АдресЗначение)
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект, АдресЗначение,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
КонецПроцедуры

Процедура ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(Организация, АдресКвитанцииНаОплатуГоспошлины)
	
	СуществующаяКвитанция = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если СуществующаяКвитанция = Неопределено Тогда
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", Организация);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИменаФайлов().КвитанцияНаОплатуГоспошлины);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "pdf");
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресКвитанцииНаОплатуГоспошлины);
	Иначе
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресКвитанцииНаОплатуГоспошлины);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
		РаботаСФайлами.ОбновитьФайл(СуществующаяКвитанция, ПараметрыФайла);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СуществующаяКвитанция, "ПометкаУдаления") Тогда
			СуществующаяКвитанцияОбъект = СуществующаяКвитанция.ПолучитьОбъект();
			СуществующаяКвитанцияОбъект.УстановитьПометкуУдаления(Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(Организация)
	
	СуществующаяКвитанция = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если СуществующаяКвитанция <> Неопределено Тогда
		СуществующаяКвитанцияОбъект = СуществующаяКвитанция.ПолучитьОбъект();
		СуществующаяКвитанцияОбъект.УстановитьПометкуУдаления(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация) Экспорт
	
	Возврат Справочники.Организации.ПрикрепленныйФайлПоИмени(Организация, ИменаФайлов().КвитанцияНаОплатуГоспошлины)
	
КонецФункции

Функция ПараметрыЗаявленияОРегистрации(Организация)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация");
	ПараметрыЗаполнения.Вставить("СпособРегистрации");
	ПараметрыЗаполнения.Вставить("ОтчествоЛатиницей", "");
	ПараметрыЗаполнения.Вставить("ДанныеДокументов", Неопределено);
	ПараметрыЗаполнения.Вставить("ДатаСоставления");
	ПараметрыЗаполнения.Вставить("СпособПодачиДокументов");
	ПараметрыЗаполнения.Вставить("ВыдатьНаБумажномНосителе", Ложь);
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ИмяФормы");
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

Функция ПараметрыУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",       Организация);
	ПараметрыЗаполнения.Вставить("СпособРегистрации", СпособРегистрации);
	ПараметрыЗаполнения.Вставить("КОД_НО",            КодНалоговогоОргана);
	Если СпособРегистрации = 2 Тогда
		
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "2");
		
	Иначе
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "1");
		
		ПредставлениеТелефона = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			Подписант.ТелефонРабочийЗначениеJSON);
		ПараметрыЗаполнения.Вставить("НомерТелефонаПодписанта", ПредставлениеТелефона);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") =
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ПараметрыЗаполнения.Вставить("ФамилияПодписанта",       Подписант.Фамилия);
			ПараметрыЗаполнения.Вставить("ИмяПодписанта",           Подписант.Имя);
			ПараметрыЗаполнения.Вставить("ОтчествоПодписанта",      Подписант.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

#КонецОбласти

#Область РегистрацияОрганизации

#Область ЗаполнениеЗаявлениеОРегистрацииИП

Функция КлючиПоказателейУведомленияРегистрацияИП(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат КлючиПоказателейУведомленияРегистрацияИП_2014();
	Иначе
		Возврат КлючиПоказателейУведомленияРегистрацияИП_2020(ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейУведомленияРегистрацияИП_2014()
	
	Результат = Новый Структура("Лист001, Лист002, Лист003, Лист004, Лист005");
	
	// Стр001 - данные об ИП
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010101", "ФамилияИП");
	Результат.Лист001.Вставить("П01010102", "ИмяИП");
	Результат.Лист001.Вставить("П01010103", "ОтчествоИП");
	Результат.Лист001.Вставить("П01020000", "ИННФЛ");
	Результат.Лист001.Вставить("П01030000", "Пол");
	Результат.Лист001.Вставить("П01040100", "ДатаРожд");
	Результат.Лист001.Вставить("П01040200", "МестоРождИП");
	Результат.Лист001.Вставить("П01050000", "ГражданствоВариант");
	Результат.Лист001.Вставить("П01050100", "Гражданство");
	Результат.Лист001.Вставить("П01010201", "ФамилияЛатиницей");
	Результат.Лист001.Вставить("П01010202", "ИмяЛатиницей");
	Результат.Лист001.Вставить("П01010203", "ОтчествоЛатиницей");
	
	// Стр002 - Адрес ИП и удостоверение личности
	
	Результат.Лист002 = Новый Структура;
	
	ДобавитьКлючиСтруктурыАдреса_2014(Результат.Лист002);
	
	Результат.Лист002.Вставить("П01070100", "КодУдостовенияЛичности");
	Результат.Лист002.Вставить("П01070200", "СерияНомерУдостовенияЛичности");
	Результат.Лист002.Вставить("П01070300", "ДатаВыдачиУдостовенияЛичности");
	Результат.Лист002.Вставить("П01070400", "ОрганВыдавшийУдостовениеЛичности");
	
	Результат.Лист002.Вставить("П01070501", "КодПодразделенияУдостовенияЛичности1");
	Результат.Лист002.Вставить("П01070502", "КодПодразделенияУдостовенияЛичности2");
	
	// Стр003 - Документы иностранцев или лиц без гражданства
	
	Результат.Лист003 = Новый Структура;
	Результат.Лист003.Вставить("П01080100", "КодРазрешенияПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080200", "СерияНомерПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080300", "ДатаВыдачиПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080400", "КемВыданПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080500", "СрокДействияПроживаниеВРФ");
	
	// ЛистА - Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	
	Результат.Лист004 = Новый Структура;
	Результат.Лист004.Вставить("А01010000", "ОсновнойОКВЭД");
	
	Результат.Вставить("МногострочнаяЧасть1", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	// ЛистБ - контакты
	
	Результат.Лист005 = Новый Структура;
	Результат.Лист005.Вставить("Б01010000", "СпособРегистрации");
	Результат.Лист005.Вставить("Б01020000", "ТелефонСлужебный");
	Результат.Лист005.Вставить("Б01030000", "АдресЭлектроннойПочтыОрганизации");
	
	Возврат Результат;
	
КонецФункции

Функция КлючиПоказателейУведомленияРегистрацияИП_2020(ИмяФормы)
	
	Результат = Новый Структура("Лист001, Лист002, Лист003, Лист004, Лист005");
	
	// Стр001 - данные об ИП
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010101", "ФамилияИП");
	Результат.Лист001.Вставить("П01010102", "ИмяИП");
	Результат.Лист001.Вставить("П01010103", "ОтчествоИП");
	Результат.Лист001.Вставить("П01020000", "ИННФЛ");
	Результат.Лист001.Вставить("П01030000", "Пол");
	Результат.Лист001.Вставить("П01040100", "ДатаРожд");
	Результат.Лист001.Вставить("П01040200", "МестоРождИП");
	Результат.Лист001.Вставить("П01050000", "ГражданствоВариант");
	Результат.Лист001.Вставить("П01050100", "Гражданство");
	Результат.Лист001.Вставить("П01010201", "ФамилияЛатиницей");
	Результат.Лист001.Вставить("П01010202", "ИмяЛатиницей");
	Результат.Лист001.Вставить("П01010203", "ОтчествоЛатиницей");
	
	// Стр002 - Адрес ИП и удостоверение личности
	
	Результат.Лист002 = Новый Структура;
	
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР21001.СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы);
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат, Результат.Лист002, СтруктураАдреса);
	
	Результат.Лист002.Вставить("П01060100", "КодУдостовенияЛичности");
	Результат.Лист002.Вставить("П01060200", "СерияНомерУдостовенияЛичности");
	Результат.Лист002.Вставить("П01060300", "ДатаВыдачиУдостовенияЛичности");
	Результат.Лист002.Вставить("П01060400", "ОрганВыдавшийУдостовениеЛичности");
	
	Результат.Лист002.Вставить("П01060501", "КодПодразделенияУдостовенияЛичности1");
	Результат.Лист002.Вставить("П01060502", "КодПодразделенияУдостовенияЛичности2");
	
	// Стр003 - Документы иностранцев или лиц без гражданства
	
	Результат.Лист003 = Новый Структура;
	Результат.Лист003.Вставить("П01080100", "КодРазрешенияПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080200", "СерияНомерПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080300", "ДатаВыдачиПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080400", "КемВыданПроживаниеВРФ");
	Результат.Лист003.Вставить("П01080501", "СрокДействияПроживаниеВРФБессрочно");
	Результат.Лист003.Вставить("П01080502", "СрокДействияПроживаниеВРФ");
	Результат.Лист003.Вставить("П01090100", "АдресЭлектроннойПочтыИП");
	
	// ЛистА - Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	
	Результат.Лист004 = Новый Структура;
	Результат.Лист004.Вставить("А01010000", "ОсновнойОКВЭД");
	
	Результат.Вставить("МногострочнаяЧастьА010200", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	// ЛистБ - контакты
	
	Результат.Лист005 = Новый Структура;
	Результат.Лист005.Вставить("Б01020100", "АдресЭлектроннойПочтыОрганизации");
	Результат.Лист005.Вставить("Б01020200", "ВыдатьНаБумажномНосителе");
	Результат.Лист005.Вставить("Б01030100", "ТелефонСлужебный");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбИП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ФамилияИП", "");
	Результат.Вставить("ИмяИП", "");
	Результат.Вставить("ОтчествоИП", "");
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("Пол", "");
	Результат.Вставить("ДатаРожд");
	Результат.Вставить("МестоРождИП", "");
	Результат.Вставить("ГражданствоВариант");
	Результат.Вставить("Гражданство", "");
	Результат.Вставить("ФамилияЛатиницей", "");
	Результат.Вставить("ИмяЛатиницей", "");
	Результат.Вставить("ОтчествоЛатиницей", "");
	Результат.Вставить("АдресЭлектроннойПочтыИП", "");
	
	Результат.Вставить("КодУдостовенияЛичности", "");
	Результат.Вставить("СерияНомерУдостовенияЛичности", "");
	Результат.Вставить("ДатаВыдачиУдостовенияЛичности", "");
	Результат.Вставить("ОрганВыдавшийУдостовениеЛичности", "");
	
	Результат.Вставить("КодПодразделенияУдостовенияЛичности1", "");
	Результат.Вставить("КодПодразделенияУдостовенияЛичности2", "");
	
	Результат.Вставить("КодРазрешенияПроживаниеВРФ", "");
	Результат.Вставить("СерияНомерПроживаниеВРФ", "");
	Результат.Вставить("ДатаВыдачиПроживаниеВРФ", "");
	Результат.Вставить("КемВыданПроживаниеВРФ", "");
	Результат.Вставить("СрокДействияПроживаниеВРФ");
	Результат.Вставить("СрокДействияПроживаниеВРФБессрочно", "");
	
	Результат.Вставить("ОсновнойОКВЭД", "");
	Результат.Вставить("ДополнительныеКодыОКВЭД", Новый ТаблицаЗначений);
	
	Результат.Вставить("СпособРегистрации", "");
	Результат.Вставить("ТелефонСлужебный", "");
	Результат.Вставить("АдресЭлектроннойПочтыОрганизации", "");
	Результат.Вставить("ВыдатьНаБумажномНосителе", "");
	
	Результат.Вставить("АдресXML", "");
	
	Возврат Результат;
	
КонецФункции

Функция КлючСтруктурыПоЗначению(Коллекция, Значение)
	
	Для Каждого ТекущийПараметр Из Коллекция Цикл
		Если ТекущийПараметр.Значение = Значение Тогда
			Возврат ТекущийПараметр.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСведенияОГражданстве(Результат, ФизическоеЛицо, Гражданство, ПараметрыЗаполнения)
	
	СтранаРФ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
	ГражданинРФ = (Гражданство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтранаРФ, "Код"));
	
	КодыВидовДокументов = ДокументыФизическихЛицБП.КодыФНСВидовДокументов();
	
	СерияПаспорта = "";
	НомерПаспорта = "";
	СерияОснованияДляПроживания = "";
	НомерОснованияДляПроживания = "";
	
	Если ТипЗнч(ПараметрыЗаполнения.ДанныеДокументов) = Тип("Структура") Тогда
		ПараметрыЗаполнения.ДанныеДокументов.ДанныеПаспорта.Свойство("Серия", СерияПаспорта);
		ПараметрыЗаполнения.ДанныеДокументов.ДанныеПаспорта.Свойство("Номер", НомерПаспорта);
		ПараметрыЗаполнения.ДанныеДокументов.ДанныеОснованияДляПроживания.Свойство("Серия", СерияОснованияДляПроживания);
		ПараметрыЗаполнения.ДанныеДокументов.ДанныеОснованияДляПроживания.Свойство("Номер", НомерОснованияДляПроживания);
	КонецЕсли;
	
	Если ГражданинРФ Тогда
		
		Результат.ГражданствоВариант = "1";
		Результат.Гражданство = "";
		
	Иначе
		// Если предприниматель не является гражданином РФ, то потребуются данные о паспорте,
		// выданном иностранным государством, а также сведения о документе основании для
		// проживания в РФ (вид на жительство или разрешение на временное проживание)
		ДокументыИП = КадровыйУчет.ДокументыФизическихЛиц(ФизическоеЛицо, Истина);
		Если ЗначениеЗаполнено(Гражданство) Тогда
			// Иностранец
			ИностранныйПаспорт = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыВидовДокументов.ИностранныйПаспорт);
			ДанныеИностранногоПаспорта = Неопределено;
			ОтборПоСтрокам = Новый Структура("ВидДокумента", ИностранныйПаспорт);
			СтрокиИностранныеПаспорта = ДокументыИП.НайтиСтроки(ОтборПоСтрокам);
			Для Каждого ДанныеПаспорта Из СтрокиИностранныеПаспорта Цикл
				Если ДанныеПаспорта.Серия = СерияПаспорта И ДанныеПаспорта.Номер = НомерПаспорта Тогда
					ДанныеИностранногоПаспорта = ДанныеПаспорта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ДанныеИностранногоПаспорта <> Неопределено Тогда
				Результат.ФамилияЛатиницей = ДанныеИностранногоПаспорта.ФамилияЛатиницей;
				Результат.ИмяЛатиницей = ДанныеИностранногоПаспорта.ИмяЛатиницей;
			КонецЕсли;
			Результат.ОтчествоЛатиницей = ПараметрыЗаполнения.ОтчествоЛатиницей;
			Результат.ГражданствоВариант = "2";
			Результат.Гражданство = Гражданство;
		Иначе 
			//Лицо без гражданства
			Результат.ГражданствоВариант = "3";
			Результат.Гражданство = "";
		КонецЕсли;
		
		// Документы иностранцев или лиц без гражданства
		
		ВидНаЖительство = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыВидовДокументов.ВидНаЖительство);
		ВременноеПроживание = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодыВидовДокументов.РазрешениеНаВременноеПроживание);
		
		ВидыДокументовОснованияДляПроживанияВРФ = Новый Массив;
		ВидыДокументовОснованияДляПроживанияВРФ.Добавить(ВидНаЖительство);
		ВидыДокументовОснованияДляПроживанияВРФ.Добавить(ВременноеПроживание);
		
		ДанныеОснованияДляПроживанияВРФ = ДокументыФизическихЛицБП.ДанныеДействующегоДокумента(
			ДокументыИП,
			ВидыДокументовОснованияДляПроживанияВРФ,
			СерияОснованияДляПроживания,
			НомерОснованияДляПроживания,
			// Для лиц без гражданства основание для проживания в РФ является документом удостоверяющим личность
			ЗначениеЗаполнено(Гражданство));
		
		КодРазрешения = "";
		Если ДанныеОснованияДляПроживанияВРФ.ВидДокумента = ВидНаЖительство Тогда
			КодРазрешения = "1";
		ИначеЕсли ДанныеОснованияДляПроживанияВРФ.ВидДокумента = ВременноеПроживание Тогда
			КодРазрешения = "2";
		КонецЕсли;
		
		Если КодРазрешения <> "" Тогда
			
			СерияНомер = "";
			Если ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.Серия) Тогда
				СерияНомер = СтрШаблон("%1 %2", ДанныеОснованияДляПроживанияВРФ.Серия, ДанныеОснованияДляПроживанияВРФ.Номер);
			Иначе
				СерияНомер = ДанныеОснованияДляПроживанияВРФ.Номер;
			КонецЕсли;
			
			Результат.КодРазрешенияПроживаниеВРФ = КодРазрешения;
			Результат.СерияНомерПроживаниеВРФ = СерияНомер;
			Результат.ДатаВыдачиПроживаниеВРФ = ДанныеОснованияДляПроживанияВРФ.ДатаВыдачи;
			Результат.КемВыданПроживаниеВРФ = ДанныеОснованияДляПроживанияВРФ.КемВыдан;
			Результат.СрокДействияПроживаниеВРФ = ДанныеОснованияДляПроживанияВРФ.СрокДействия;
			Если ЗначениеЗаполнено(ДанныеОснованияДляПроживанияВРФ.СрокДействия) Тогда
				Результат.СрокДействияПроживаниеВРФБессрочно = "2";
			Иначе
				Результат.СрокДействияПроживаниеВРФБессрочно = "1";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнияет заявление о постановке на учет в качестве индивидуального предпринимателя.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры регламентированного отчета (см. РегламентированноеУведомлениеФормаР21001.СоздатьЗаполненноеУведомление)
//   Контейнер       - Структура - данные регламентированного отчета (см. РегламентированноеУведомлениеФормаР21001.СоздатьЗаполненноеУведомление)
//
Процедура ЗаполнитьУведомлениеОПостановкеНаУчетИП(ПараметрыОтчета, Контейнер) Экспорт
	
	Период = Неопределено;
	Если Не ПараметрыОтчета.ПараметрыЗаполнения.Свойство("ДатаСоставления", Период) Или Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ИмяФормы = ПараметрыОтчета.ИмяФормы;
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	КлючиПоказателей = КлючиПоказателейУведомленияРегистрацияИП(ИмяФормы);
	
	РеквизитыИП = Новый Массив;
	РеквизитыИП.Добавить("ФамилияИП");
	РеквизитыИП.Добавить("ИмяИП");
	РеквизитыИП.Добавить("ОтчествоИП");
	РеквизитыИП.Добавить("ИННФЛ");
	РеквизитыИП.Добавить("Пол");
	РеквизитыИП.Добавить("ДатаРожд");
	РеквизитыИП.Добавить("МестоРождИП");
	РеквизитыИП.Добавить("Гражд");
	РеквизитыИП.Добавить("КодУдЛичн");
	РеквизитыИП.Добавить("СерияУдЛичн");
	РеквизитыИП.Добавить("НомерУдЛичн");
	РеквизитыИП.Добавить("ДатаУдЛичн");
	РеквизитыИП.Добавить("ОрганВыданУдЛичн");
	РеквизитыИП.Добавить("КодПодрУдЛичн");
	РеквизитыИП.Добавить("ТелСлуж");
	РеквизитыИП.Добавить("АдресЭлектроннойПочтыОрганизации");
	РеквизитыИП.Добавить("ОКВЭД2");
	РеквизитыИП.Добавить("ДополнительныеКодыОКВЭД2");
	РеквизитыИП.Добавить("АдрЮР_JSON");
	РеквизитыИП.Добавить("АдрЮР_XML");
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		ПараметрыОтчета.Организация,
		Период,
		РеквизитыИП);
	
	СведенияОбИП = НовыйСведенияОбИП();
	ЗаполнитьЗначенияСвойств(СведенияОбИП, СведенияОбОрганизации);
	СведенияОбИП.Пол = Формат(СведенияОбОрганизации.Пол, "ЧГ=0");
	СведенияОбИП.АдресЭлектроннойПочтыИП = СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации;
	
	ЗаполнитьСведенияОГражданстве(
		СведенияОбИП,
		ПараметрыОтчета.Организация.ИндивидуальныйПредприниматель,
		СведенияОбОрганизации.Гражд,
		ПараметрыЗаполнения);
	
	// Адрес
	АдресСтруктурой = СтруктураАдреса(ИмяФормы, СведенияОбОрганизации.АдрЮР_JSON);
	ДобавитьСведенияОбАдресе(СведенияОбИП, АдресСтруктурой, КлючиПоказателей);
	СведенияОбИП.АдресXML = СведенияОбОрганизации.АдрЮР_XML;
	
	// Удостоверение личности
	СведенияОбИП.КодУдостовенияЛичности = СведенияОбОрганизации.КодУдЛичн;
	СведенияОбИП.СерияНомерУдостовенияЛичности = ПредставлениеУдостоверенияЛичности(
		СведенияОбОрганизации.СерияУдЛичн,
		СведенияОбОрганизации.НомерУдЛичн);
	
	СведенияОбИП.ДатаВыдачиУдостовенияЛичности = СведенияОбОрганизации.ДатаУдЛичн;
	СведенияОбИП.ОрганВыдавшийУдостовениеЛичности = СведенияОбОрганизации.ОрганВыданУдЛичн;
	
	ЧастиКода = ЧастиКодаПодразделения(СведенияОбОрганизации.КодПодрУдЛичн);
	
	СведенияОбИП.КодПодразделенияУдостовенияЛичности1 = ЧастиКода.Часть1;
	СведенияОбИП.КодПодразделенияУдостовенияЛичности2 = ЧастиКода.Часть2;
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	
	СведенияОбИП.ОсновнойОКВЭД = СведенияОбОрганизации.ОКВЭД2;
	
	ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
		КлючиПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭД.КодОКВЭД,
		СведенияОбИП.ДополнительныеКодыОКВЭД,
		СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь));
	
	СпособРегистрации = 0;
	ПараметрыЗаполнения.Свойство("СпособРегистрации", СпособРегистрации);
	
	СведенияОбИП.СпособРегистрации = СпособРегистрации;
	СведенияОбИП.ТелефонСлужебный = НомерТелефонаВРазрешенномФормате(СведенияОбОрганизации.ТелСлуж, ИмяФормы);
	СведенияОбИП.АдресЭлектроннойПочтыОрганизации = СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации;
	СведенияОбИП.ВыдатьНаБумажномНосителе = Формат(ПараметрыЗаполнения.ВыдатьНаБумажномНосителе, "БЛ=; БИ=1");
	
	ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, СведенияОбИП);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЗаявлениеОРегистрацииЮЛ

Функция КлючиПоказателейУведомленияРегистрацияЮЛ(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат КлючиПоказателейУведомленияРегистрацияЮЛ_2014();
	Иначе
		Возврат КлючиПоказателейУведомленияРегистрацияЮЛ_2020(ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейУведомленияРегистрацияЮЛ_2014()
	
	Результат = Новый Структура("Лист001, ЛистА, ЛистВ, ЛистЕ, ЛистИ, ЛистН");
	
	#Область Лист001
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "НаименованиеПолное");
	Результат.Лист001.Вставить("П01010200", "НаименованиеСокращенное");
	Результат.Лист001.Вставить("П01030000", "ВидКапитала");
	Результат.Лист001.Вставить("П01030100", "УставныйКапитал");
	
	ДобавитьКлючиСтруктурыАдреса_2014(Результат.Лист001);
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения об учредителе - российском юридическом лице.
	
	Данные_ЛистА = Новый Структура;
	Данные_ЛистА.Вставить("А01010000", "ОГРН");
	Данные_ЛистА.Вставить("А01020000", "ИНН");
	Данные_ЛистА.Вставить("А01030000", "ПолноеНаименование");
	Данные_ЛистА.Вставить("А01040100", "СуммаВзноса");
	Данные_ЛистА.Вставить("А01040201", "ДоляУставногоКапитала");
	
	Результат.ЛистА = "Сведения_УчредителиЮрЛица";
	Результат.Вставить("Сведения_УчредителиЮрЛица", Данные_ЛистА);
	
	#КонецОбласти
	
	#Область ЛистБ
	
	// Сведения об учредителе - иностранном юридическом лице.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об учредителе - физическом лице.
	
	Данные_ЛистВ = Новый Структура;
	Данные_ЛистВ.Вставить("В01010100", "Фамилия");
	Данные_ЛистВ.Вставить("В01010200", "Имя");
	Данные_ЛистВ.Вставить("В01010300", "Отчество");
	Данные_ЛистВ.Вставить("В01020000", "ИННФЛ");
	Данные_ЛистВ.Вставить("В01030100", "ДатаРождения");
	Данные_ЛистВ.Вставить("В01030200", "МестоРождения");
	Данные_ЛистВ.Вставить("В01050100", "ДокументКодМВД");
	Данные_ЛистВ.Вставить("В01050200", "ДокументСерияНомер");
	Данные_ЛистВ.Вставить("В01050300", "ДокументДатаВыдачи");
	Данные_ЛистВ.Вставить("В01050400", "ДокументКемВыдан");
	Данные_ЛистВ.Вставить("В01050501", "КодПодразделенияЧасть1");
	Данные_ЛистВ.Вставить("В01050502", "КодПодразделенияЧасть2");
	Данные_ЛистВ.Вставить("В01070100", "СуммаВзноса");
	Данные_ЛистВ.Вставить("В01070201", "ДоляУставногоКапитала");
	Данные_ЛистВ.Вставить("В01060201", "КодСтраны");
	Данные_ЛистВ.Вставить("В01060202", "АдресИнформирования");
	
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистВ);
	Результат.ЛистВ = "Сведения_УчредителиФизЛица";
	Результат.Вставить("Сведения_УчредителиФизЛица", Данные_ЛистВ);
	
	#КонецОбласти
	
	#Область ЛистГ
	
	// Сведения об учредителе - Российской Федерации, субъекте Российской Федерации, муниципальном образовании.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистД
	
	// Сведения о паевом инвестиционном фонде, в состав имущества которого включается доля в уставном капитале
	// создаваемого юридического лица.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистЕ
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица.
	
	Данные_ЛистЕ = Новый Структура;
	Данные_ЛистЕ.Вставить("Е01010000", "Фамилия");
	Данные_ЛистЕ.Вставить("Е01020000", "Имя");
	Данные_ЛистЕ.Вставить("Е01030000", "Отчество");
	Данные_ЛистЕ.Вставить("Е02000000", "ИННФЛ");
	Данные_ЛистЕ.Вставить("Е03010000", "ДатаРождения");
	Данные_ЛистЕ.Вставить("Е03020000", "МестоРождения");
	Данные_ЛистЕ.Вставить("Е04000000", "Должность");
	Данные_ЛистЕ.Вставить("Е05010000", "ДокументКодМВД");
	Данные_ЛистЕ.Вставить("Е05020000", "ДокументСерияНомер");
	Данные_ЛистЕ.Вставить("Е05030000", "ДокументДатаВыдачи");
	Данные_ЛистЕ.Вставить("Е05040000", "ДокументКемВыдан");
	Данные_ЛистЕ.Вставить("Е05050100", "КодПодразделенияЧасть1");
	Данные_ЛистЕ.Вставить("Е05050200", "КодПодразделенияЧасть2");
	Данные_ЛистЕ.Вставить("Е06020100", "КодСтраны");
	Данные_ЛистЕ.Вставить("Е06020200", "АдресИнформирования");
	Данные_ЛистЕ.Вставить("Е07000000", "Телефон");
	
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистЕ);
	Результат.ЛистЕ = "Сведения_ФизЛицаСПравомПодписи";
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Данные_ЛистЕ);
	
	#КонецОбласти
	
	#Область ЛистЖ
	
	// Сведения об управляющей организации.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистЗ
	
	// Сведения об управляющем.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистИ
	
	Результат.ЛистИ = Новый Структура;
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности.
	Результат.ЛистИ.Вставить("А01010000", "ОсновнойОКВЭД");
	// Дополнительные коды
	Результат.Вставить("МногострочнаяЧасть1", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	#КонецОбласти
	
	#Область ЛистК
	
	// Сведения о держателе реестра акционеров акционерного общества - регистраторе.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистЛ
	
	// Сведения о крестьянском (фермерском) хозяйстве, на базе которого создается производственный кооператив
	// или хозяйственное товарищество.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистМ
	
	// Сведения о согласовании создания юридического лица с иностранными инвестициями
	// на территории закрытого административно-территориального образования (ЗАТО).
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистН
	
	// Сведения о заявителе.
	
	Данные_ЛистН = Новый Структура;
	Данные_ЛистН.Вставить("Н01000000", "ВидЗаявителя");
	Данные_ЛистН.Вставить("Н02010000", "ОГРН");
	Данные_ЛистН.Вставить("Н02020000", "ИНН");
	Данные_ЛистН.Вставить("Н02030000", "ПолноеНаименование");
	Данные_ЛистН.Вставить("Н04060100", "Телефон");
	Данные_ЛистН.Вставить("Н04060200", "АдресЭлектроннойПочты");
	Данные_ЛистН.Вставить("Н04010100", "Фамилия");
	Данные_ЛистН.Вставить("Н04010200", "Имя");
	Данные_ЛистН.Вставить("Н04010300", "Отчество");
	Данные_ЛистН.Вставить("Н04020000", "ИННФЛ");
	Данные_ЛистН.Вставить("Н04030100", "ДатаРождения");
	Данные_ЛистН.Вставить("Н04030200", "МестоРождения");
	Данные_ЛистН.Вставить("Н04040100", "ДокументКодМВД");
	Данные_ЛистН.Вставить("Н04040200", "ДокументСерияНомер");
	Данные_ЛистН.Вставить("Н04040300", "ДокументДатаВыдачи");
	Данные_ЛистН.Вставить("Н04040400", "ДокументКемВыдан");
	Данные_ЛистН.Вставить("Н04040501", "КодПодразделенияЧасть1");
	Данные_ЛистН.Вставить("Н04040502", "КодПодразделенияЧасть2");
	Данные_ЛистН.Вставить("Н04050201", "КодСтраны");
	Данные_ЛистН.Вставить("Н04050202", "АдресИнформирования");
	Данные_ЛистН.Вставить("Н05000000", "СпособПолученияДокументов");
	
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистН);
	Результат.ЛистН = "Сведения_Заявители";
	Результат.Вставить("Сведения_Заявители", Данные_ЛистН);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция КлючиПоказателейУведомленияРегистрацияЮЛ_2020(ИмяФормы)
	
	Результат = Новый Структура("Лист001, ЛистА, ЛистБ, ЛистЕ, ЛистЖ, ЛистЗ, ЛистИ");
	
	#Область Лист001
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "НаименованиеПолное");
	Результат.Лист001.Вставить("П01010200", "НаименованиеСокращенное");
	
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР11001.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"МестоНахождения");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат, Результат.Лист001, СтруктураАдреса, "МестоНахождение_");
	
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР11001.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"Адрес");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат, Результат.Лист001, СтруктураАдреса);
	
	Результат.Лист001.Вставить("П01050100", "АдресЭлектроннойПочтыОрганизации");
	Результат.Лист001.Вставить("П01060101", "ВидКапитала");
	Результат.Лист001.Вставить("П01060102", "УставныйКапитал");
	Результат.Лист001.Вставить("П01080100", "НомерТиповогоУстава");
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения об учредителе - российском юридическом лице.
	
	Данные_ЛистА = Новый Структура;
	Данные_ЛистА.Вставить("А01010100", "ОГРН");
	Данные_ЛистА.Вставить("А01010200", "ИНН");
	Данные_ЛистА.Вставить("А01020100", "ИННИностранноеЮЛ");
	Данные_ЛистА.Вставить("А01020200", "ПолноеНаименование");
	Данные_ЛистА.Вставить("А01020300", "НаименованиеНаИностранномЯзыке");
	Данные_ЛистА.Вставить("А01020400", "КодСтраны");
	Данные_ЛистА.Вставить("А01020500", "РегистрационныйНомер");
	Данные_ЛистА.Вставить("А01020600", "КодНалогоплательщика");
	Данные_ЛистА.Вставить("А01030100", "СуммаВзноса");
	Данные_ЛистА.Вставить("А01030200", "ДоляУставногоКапитала");
	Данные_ЛистА.Вставить("А01030301", "ДоляДробьюЧислитель");
	Данные_ЛистА.Вставить("А01030302", "ДоляДробьюЗнаменатель");
	Данные_ЛистА.Вставить("А01040500", "ОграничитьДоступКСведениям");
	
	Результат.ЛистА = "Сведения_УчредителиЮрЛица";
	Результат.Вставить("Сведения_УчредителиЮрЛица", Данные_ЛистА);
	
	#КонецОбласти
	
	#Область ЛистБ
	
	// Сведения об учредителе - физическом лице.
	
	Данные_ЛистБ = Новый Структура;
	Данные_ЛистБ.Вставить("Б01010101", "Фамилия");
	Данные_ЛистБ.Вставить("Б01010102", "Имя");
	Данные_ЛистБ.Вставить("Б01010103", "Отчество");
	Данные_ЛистБ.Вставить("Б01020100", "ИННФЛ");
	Данные_ЛистБ.Вставить("Б01030100", "Пол");
	Данные_ЛистБ.Вставить("Б01040100", "ДатаРождения");
	Данные_ЛистБ.Вставить("Б01040200", "МестоРождения");
	Данные_ЛистБ.Вставить("Б01050100", "Гражданство");
	Данные_ЛистБ.Вставить("Б01050200", "КодСтраны");
	Данные_ЛистБ.Вставить("Б01060100", "ДокументКодМВД");
	Данные_ЛистБ.Вставить("Б01060200", "ДокументСерияНомер");
	Данные_ЛистБ.Вставить("Б01060300", "ДокументДатаВыдачи");
	Данные_ЛистБ.Вставить("Б01060400", "ДокументКемВыдан");
	Данные_ЛистБ.Вставить("Б01060501", "КодПодразделенияЧасть1");
	Данные_ЛистБ.Вставить("Б01060502", "КодПодразделенияЧасть2");
	Данные_ЛистБ.Вставить("Б01070100", "ОГРНИП");
	Данные_ЛистБ.Вставить("Б01080100", "СуммаВзноса");
	Данные_ЛистБ.Вставить("Б01080200", "ДоляУставногоКапитала");
	Данные_ЛистБ.Вставить("Б01080301", "ДоляДробьюЧислитель");
	Данные_ЛистБ.Вставить("Б01080302", "ДоляДробьюЗнаменатель");
	Данные_ЛистБ.Вставить("Б01100100", "ОграничитьДоступКСведениям");
	
	Результат.ЛистБ = "Сведения_УчредителиФизЛица";
	Результат.Вставить("Сведения_УчредителиФизЛица", Данные_ЛистБ);
	
	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об учредителе – Российской Федерации, субъекте Российской Федерации, муниципальном образовании.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистГ
	
	// Сведения о паевом инвестиционном фонде, в состав имущества которого
	// включается доля в уставном капитале создаваемого юридического лица.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистД
	
	// Сведения о включении доли в уставном/складочном капитале создаваемого юридического лица
	// в состав общего имущества участников договора инвестиционного товарищества.
	// Не заполняется.
	
	#КонецОбласти
	
	#Область ЛистЕ
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица.
	
	Данные_ЛистЕ = Новый Структура;
	Данные_ЛистЕ.Вставить("Е01010100", "ОГРН_ЮЛ");
	Данные_ЛистЕ.Вставить("Е01010200", "ИНН_ЮЛ");
	Данные_ЛистЕ.Вставить("Е01010300", "ОграничитьДоступКСведениям_ЮЛ");
	Данные_ЛистЕ.Вставить("Е01020100", "ИННИностранноеЮЛ");
	Данные_ЛистЕ.Вставить("Е01020200", "НЗА");
	Данные_ЛистЕ.Вставить("Е01020300", "ОграничитьДоступКСведениям_ИностранноеЮЛ");
	Данные_ЛистЕ.Вставить("Е01030101", "Фамилия");
	Данные_ЛистЕ.Вставить("Е01030102", "Имя");
	Данные_ЛистЕ.Вставить("Е01030103", "Отчество");
	Данные_ЛистЕ.Вставить("Е01030300", "ИННФЛ");
	Данные_ЛистЕ.Вставить("Е01030400", "Пол");
	Данные_ЛистЕ.Вставить("Е01030500", "ДатаРождения");
	Данные_ЛистЕ.Вставить("Е01030600", "МестоРождения");
	Данные_ЛистЕ.Вставить("Е01030700", "Гражданство");
	Данные_ЛистЕ.Вставить("Е01030800", "КодСтраны");
	Данные_ЛистЕ.Вставить("Е01030900", "ДокументКодМВД");
	Данные_ЛистЕ.Вставить("Е01031000", "ДокументСерияНомер");
	Данные_ЛистЕ.Вставить("Е01031100", "ДокументДатаВыдачи");
	Данные_ЛистЕ.Вставить("Е01031200", "ДокументКемВыдан");
	Данные_ЛистЕ.Вставить("Е01031301", "КодПодразделенияЧасть1");
	Данные_ЛистЕ.Вставить("Е01031302", "КодПодразделенияЧасть2");
	Данные_ЛистЕ.Вставить("Е01031400", "Должность");
	Данные_ЛистЕ.Вставить("Е01031500", "ОГРНИПУправляющего");
	Данные_ЛистЕ.Вставить("Е01031600", "ОграничитьДоступКСведениям");
	
	Результат.ЛистЕ = "Сведения_ФизЛицаСПравомПодписи";
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Данные_ЛистЕ);
	
	#КонецОбласти
	
	#Область ЛистЖ
	
	Результат.ЛистЖ = Новый Структура;
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности.
	
	Результат.ЛистЖ.Вставить("Ж01010100", "ОсновнойОКВЭД");
	// Дополнительные коды
	Результат.Вставить("МногострочнаяЧастьЖ010201", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("Ж01020100"));
	
	#КонецОбласти
	
	#Область ЛистЗ
	
	// Ограничение доступа к сведениям о юридическом лице.
	
	КолонкиТаблицы = Новый Структура;
	КолонкиТаблицы.Вставить("ИмяКолонки", "З01010100");
	
	Результат.Вставить("МногострочнаяЧастьЗ010101", "ОграниченияДоступаКСведениям");
	Результат.Вставить("КолонкиТаблицыОграниченияДоступаКСведениям", КолонкиТаблицы);
	
	#КонецОбласти
	
	#Область ЛистИ
	
	// Сведения о заявителе.
	
	Данные_ЛистИ = Новый Структура;
	Данные_ЛистИ.Вставить("И01010100", "ВидЗаявителя");
	Данные_ЛистИ.Вставить("И01020100", "ОГРН");
	Данные_ЛистИ.Вставить("И01020200", "ИНН");
	Данные_ЛистИ.Вставить("И01020300", "ПолноеНаименование");
	Данные_ЛистИ.Вставить("И01030101", "Фамилия");
	Данные_ЛистИ.Вставить("И01030102", "Имя");
	Данные_ЛистИ.Вставить("И01030103", "Отчество");
	Данные_ЛистИ.Вставить("И01030200", "ИННФЛ");
	Данные_ЛистИ.Вставить("И01030300", "ДатаРождения");
	Данные_ЛистИ.Вставить("И01030400", "МестоРождения");
	Данные_ЛистИ.Вставить("И01030500", "ДокументКодМВД");
	Данные_ЛистИ.Вставить("И01030600", "ДокументСерияНомер");
	Данные_ЛистИ.Вставить("И01030700", "ДокументДатаВыдачи");
	Данные_ЛистИ.Вставить("И01030800", "ДокументКемВыдан");
	Данные_ЛистИ.Вставить("И01030901", "КодПодразделенияЧасть1");
	Данные_ЛистИ.Вставить("И01030902", "КодПодразделенияЧасть2");
	Данные_ЛистИ.Вставить("И01040100", "АдресЭлектроннойПочты");
	Данные_ЛистИ.Вставить("И01040200", "ВыдатьНаБумажномНосителе");
	Данные_ЛистИ.Вставить("И01040300", "Телефон");
	
	Результат.ЛистИ = "Сведения_Заявители";
	Результат.Вставить("Сведения_Заявители", Данные_ЛистИ);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбОрганизации()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеПолное", "");
	Результат.Вставить("НаименованиеСокращенное", "");
	Результат.Вставить("ОсновнойОКВЭД", "");
	Результат.Вставить("УставныйКапитал", "");
	Результат.Вставить("ВидКапитала", "");
	Результат.Вставить("АдресЭлектроннойПочтыОрганизации", "");
	Результат.Вставить("АдресXML", "");
	Результат.Вставить("НомерТиповогоУстава", "");
	
	Результат.Вставить("ДополнительныеКодыОКВЭД", Новый ТаблицаЗначений);
	Результат.Вставить("ОграниченияДоступаКСведениям", Новый ТаблицаЗначений);
	Результат.Вставить("Сведения_УчредителиЮрЛица", Новый Массив);
	Результат.Вставить("Сведения_УчредителиФизЛица", Новый Массив);
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Новый Массив);
	Результат.Вставить("Сведения_Заявители", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОФизическихЛицах()
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ДатаРождения", "");
	Результат.Вставить("МестоРождения");
	Результат.Вставить("Должность");
	Результат.Вставить("ДокументКодМВД");
	Результат.Вставить("ДокументСерияНомер", "");
	Результат.Вставить("ДокументДатаВыдачи", "");
	Результат.Вставить("ДокументКемВыдан", "");
	Результат.Вставить("КодПодразделенияЧасть1", "");
	Результат.Вставить("КодПодразделенияЧасть2", "");
	Результат.Вставить("СуммаВзноса", 0);
	Результат.Вставить("ДоляУставногоКапитала", 0);
	Результат.Вставить("АдресXML",  "");
	Результат.Вставить("АдресИнформирования");
	Результат.Вставить("АдресЭлектроннойПочты", "");
	Результат.Вставить("Телефон", "");
	Результат.Вставить("Гражданство", "");
	Результат.Вставить("КодСтраны", "");
	Результат.Вставить("Пол", "");
	Результат.Вставить("ФамилияЛатиницей", "");
	Результат.Вставить("ИмяЛатиницей", "");
	Результат.Вставить("ОтчествоЛатиницей", "");
	Результат.Вставить("ОграничитьДоступКСведениям", 0);
	
	Результат.Вставить("ОграничитьДоступКСведениям_ЮЛ", "");
	
	Результат.Вставить("ОГРНИП", ""); // Не заполняется
	Результат.Вставить("ДоляДробьюЧислитель", ""); // Не заполняется
	Результат.Вставить("ДоляДробьюЗнаменатель", ""); // Не заполняется
	
	// Сведения о лице, имеющем право без доверенности действовать от имени юридического лица
	Результат.Вставить("ОГРН_ЮЛ", ""); // Не заполняется
	Результат.Вставить("ИНН_ЮЛ", ""); // Не заполняется
	Результат.Вставить("ИННИностранноеЮЛ", ""); // Не заполняется
	Результат.Вставить("НЗА", ""); // Не заполняется
	Результат.Вставить("ОграничитьДоступКСведениям_ИностранноеЮЛ", ""); // Не заполняется
	Результат.Вставить("ОГРНИПУправляющего", ""); // Не заполняется
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСведенияОФизическомЛице(Результат, СведенияОФизическомЛице)
	
	Результат.ДокументСерияНомер = ПредставлениеУдостоверенияЛичности(
		СведенияОФизическомЛице.ДокументСерия,
		СведенияОФизическомЛице.ДокументНомер);
	
	Результат.ИННФЛ = СведенияОФизическомЛице.ИНН;
	ЧастиКодаПодразделения = ЧастиКодаПодразделения(СведенияОФизическомЛице.ДокументКодПодразделения);
	Результат.КодПодразделенияЧасть1 = ЧастиКодаПодразделения.Часть1;
	Результат.КодПодразделенияЧасть2 = ЧастиКодаПодразделения.Часть2;
	
	Если СведенияОФизическомЛице.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Результат.Пол = "1";
	Иначе
		Результат.Пол = "2";
	КонецЕсли;
	
	Если ЭтоРоссия(СведенияОФизическомЛице.Страна) Тогда
		
		Результат.МестоРождения = СведенияОФизическомЛице.МестоРожденияПредставление;
		Результат.Гражданство = "1";
		Результат.КодСтраны = "";
		
	Иначе
		
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.Страна) Тогда
			Результат.Гражданство = "2";
			Результат.КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОФизическомЛице.Страна, "Код");
		Иначе
			Результат.Гражданство = "3";
		КонецЕсли;
		
		ЗаполнитьФИОЛатиницей(Результат, СведенияОФизическомЛице.ФизическоеЛицо);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРоссия(Страна)
	
	СтранаРФ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
	Возврат Страна = СтранаРФ;
	
КонецФункции

Процедура ЗаполнитьФИОЛатиницей(Результат, ФизическоеЛицо)
	
	РеквизитыФизЛица = Новый Массив;
	РеквизитыФизЛица.Добавить("ФамилияЛатиницей");
	РеквизитыФизЛица.Добавить("ИмяЛатиницей");
	РеквизитыФизЛица.Добавить("ОтчествоЛатиницей");
	
	ФИОЛатиницей = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(
		ФизическоеЛицо,
		РеквизитыФизЛица,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ЗаполнитьЗначенияСвойств(Результат, ФИОЛатиницей);
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиАдреса(Результат, ИмяФормы, СведенияОФизическомЛице, КлючиПоказателей)
	
	УказанАдресИнформирования = ТипЗнч(СведенияОФизическомЛице.АдресИнформированияСтруктурой) = Тип("Структура");
	
	Если ЗначениеЗаполнено(СведенияОФизическомЛице.АдресПрописки) Тогда
		АдресJSON = СведенияОФизическомЛице.АдресСтруктурой.ЗначениеJSON;
		АдресXML = СведенияОФизическомЛице.АдресСтруктурой.ЗначенияПолей;
	ИначеЕсли УказанАдресИнформирования И СведенияОФизическомЛице.АдресИнформированияСтруктурой.АдресРФ Тогда
		АдресJSON = СведенияОФизическомЛице.АдресИнформированияСтруктурой.ЗначениеJSON;
		АдресXML = СведенияОФизическомЛице.АдресИнформированияСтруктурой.ЗначенияПолей;
	Иначе
		АдресJSON = Неопределено;
		АдресXML = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресJSON) Тогда
		АдресСтруктурой = СтруктураАдреса(ИмяФормы, АдресJSON);
		ДобавитьСведенияОбАдресе(Результат, АдресСтруктурой, КлючиПоказателей);
		Результат.АдресXML = АдресXML;
	ИначеЕсли УказанАдресИнформирования Тогда
		Результат.КодСтраны = СведенияОФизическомЛице.АдресИнформированияСтруктурой.КодСтраны;
		Результат.АдресИнформирования = СведенияОФизическомЛице.АдресИнформированияСтруктурой.Представление;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеОграниченияДоступаКСведениям(ОграничитьДоступКСведениям)
	
	Если ОграничитьДоступКСведениям Тогда
		Возврат "1";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Заполнение заявления о постановке ООО на учет в качестве налогоплательщика.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры регламентированного отчета (см. РегламентированноеУведомлениеФормаР11001.СоздатьЗаполненноеУведомление)
//   Контейнер       - Структура - данные регламентированного отчета (см. РегламентированноеУведомлениеФормаР11001.СоздатьЗаполненноеУведомление)
//
Процедура ЗаполнитьЗаявлениеОПостановкеНаУчетООО(ПараметрыОтчета, Контейнер) Экспорт
	
	Период = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(ПараметрыОтчета.Организация, Период, Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(ПараметрыОтчета.Организация, Период, Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	КлючиПоказателей = КлючиПоказателейУведомленияРегистрацияЮЛ(ПараметрыОтчета.ИмяФормы);
	
	РеквизитыОрганизации = Новый Массив;
	РеквизитыОрганизации.Добавить("НаимЮЛПол");
	РеквизитыОрганизации.Добавить("НаимЮЛСокр");
	РеквизитыОрганизации.Добавить("ТелСлуж");
	РеквизитыОрганизации.Добавить("АдресЭлектроннойПочтыОрганизации");
	РеквизитыОрганизации.Добавить("АдресЭлПочтыРук");
	РеквизитыОрганизации.Добавить("ОКВЭД2");
	РеквизитыОрганизации.Добавить("ДополнительныеКодыОКВЭД2");
	РеквизитыОрганизации.Добавить("АдрЮР_JSON");
	РеквизитыОрганизации.Добавить("АдрЮР_XML");
	
	ДанныеОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		ПараметрыОтчета.Организация,
		Период,
		РеквизитыОрганизации);
	
	СведенияОбОрганизации = НовыйСведенияОбОрганизации();
	
	СведенияОбОрганизации.НаименованиеПолное = ДанныеОрганизации.НаимЮЛПол;
	СведенияОбОрганизации.НаименованиеСокращенное = ДанныеОрганизации.НаимЮЛСокр;
	СведенияОбОрганизации.УставныйКапитал = ДанныеУчредителей.УставныйКапитал;
	СведенияОбОрганизации.ВидКапитала = "1"; // Уставный капитал
	СведенияОбОрганизации.НомерТиповогоУстава = Формат(ПараметрыЗаполнения.НомерТиповогоУстава, "ЧЦ=2; ЧВН=");
	СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации = ДанныеОрганизации.АдресЭлектроннойПочтыОрганизации;
	
	// Адрес
	АдресСтруктурой = СтруктураАдреса(ПараметрыОтчета.ИмяФормы, ДанныеОрганизации.АдрЮР_JSON);
	ДобавитьСведенияОбАдресе(СведенияОбОрганизации, АдресСтруктурой, КлючиПоказателей, Истина);
	СведенияОбОрганизации.АдресXML = ДанныеОрганизации.АдрЮР_XML;
	
	// Сведения об учредителе - российском юридическом лице
	
	ОграничитьДоступУчастники = ЗначениеОграниченияДоступаКСведениям(ПараметрыЗаполнения.ОграничитьДоступВЕГРЮЛУчастники);
	
	Отбор = Новый Структура("ЭтоЮридическоеЛицо", Истина);
	
	УчредителиЮридическиеЛица = ДанныеУчредителей.Учредители.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из УчредителиЮридическиеЛица Цикл
		
		НовыйУчредитель = НовыйСведенияОбУчредителяхЮридическихЛицах();
		НовыйУчредитель.ОГРН = ТекущаяСтрока.СведенияОЮридическомЛице.ОГРН;
		НовыйУчредитель.ИНН = ТекущаяСтрока.СведенияОЮридическомЛице.ИНН;
		НовыйУчредитель.СуммаВзноса = ТекущаяСтрока.СуммаВзноса;
		НовыйУчредитель.ДоляУставногоКапитала = ТекущаяСтрока.ДоляУставногоКапитала;
		НовыйУчредитель.ОграничитьДоступКСведениям = ОграничитьДоступУчастники;
		
		СведенияОбОрганизации.Сведения_УчредителиЮрЛица.Добавить(НовыйУчредитель);
		
	КонецЦикла;
	
	// Сведения об учредителе - физическом лице
	
	Отбор.ЭтоЮридическоеЛицо = Ложь;
	
	УчредителиФизическиеЛица = ДанныеУчредителей.Учредители.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из УчредителиФизическиеЛица Цикл
		
		НовыйУчредитель = НовыйСведенияОФизическихЛицах();
		СведенияОФизическомЛице = ТекущаяСтрока.СведенияОФизическомЛице;
		
		ЗаполнитьЗначенияСвойств(НовыйУчредитель, ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(НовыйУчредитель, СведенияОФизическомЛице);
		
		ЗаполнитьДаннымиАдреса(НовыйУчредитель, ПараметрыОтчета.ИмяФормы, СведенияОФизическомЛице, КлючиПоказателей);
		ДополнитьСведенияОФизическомЛице(НовыйУчредитель, СведенияОФизическомЛице);
		
		НовыйУчредитель.ОграничитьДоступКСведениям = ОграничитьДоступУчастники;
		
		СведенияОбОрганизации.Сведения_УчредителиФизЛица.Добавить(НовыйУчредитель);
		
	КонецЦикла;
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
	
	СведенияОРуководителе = НовыйСведенияОФизическихЛицах();
	
	СведенияОФизическомЛице = ДанныеРуководителя.СведенияОФизическомЛице;
	ЗаполнитьЗначенияСвойств(СведенияОРуководителе, СведенияОФизическомЛице);
	СведенияОРуководителе.Должность = ДанныеРуководителя.ДолжностьПредставление;
	
	ЗаполнитьДаннымиАдреса(СведенияОРуководителе, ПараметрыОтчета.ИмяФормы, СведенияОФизическомЛице, КлючиПоказателей);
	ДополнитьСведенияОФизическомЛице(СведенияОРуководителе, СведенияОФизическомЛице);
	
	СведенияОРуководителе.ОграничитьДоступКСведениям = ЗначениеОграниченияДоступаКСведениям(
		ПараметрыЗаполнения.ОграничитьДоступВЕГРЮЛРуководитель);
	
	СведенияОбОрганизации.Сведения_ФизЛицаСПравомПодписи.Добавить(СведенияОРуководителе);
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	СведенияОбОрганизации.ОсновнойОКВЭД = ДанныеОрганизации.ОКВЭД2;
	
	// Дополнительные коды
	ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
		КлючиПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭД.КодОКВЭД,
		СведенияОбОрганизации.ДополнительныеКодыОКВЭД,
		СтрРазделить(ДанныеОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь));
	
	// Сведения о заявителях
	
	КоличествоУчредителей = ДанныеУчредителей.Учредители.Количество();
	НомерЛиста = 0;
	
	НотариусПодаетДокументыСамостоятельно = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(
		ПараметрыЗаполнения.ДатаСоставления);
	
	Для Каждого СтрокаТаблицы Из ДанныеУчредителей.Учредители Цикл
		
		НомерЛиста = НомерЛиста + 1;
		
		НовыйЗаявитель = НовыйСведенияОФизическихЛицах();
		
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			СведенияОЗаявителе = СтрокаТаблицы.СведенияОЮридическомЛице.Представитель;
			ВидЗаявителя = "2";
		Иначе
			СведенияОЗаявителе = СтрокаТаблицы.СведенияОФизическомЛице;
			ВидЗаявителя = "1";
		КонецЕсли;
		
		Если ПараметрыОтчета.ИмяФормы = "Форма2014_1"
			И (СтрокаТаблицы.ЭтоЮридическоеЛицо Или КоличествоУчредителей > 1) Тогда
			// В случае если лист Н заявления заполняется в отношении единственного учредителя - физического лица
			// (в разделе 1 проставлено значение 1), раздел 4 не заполняется.
			
			ЗаполнитьЗначенияСвойств(НовыйЗаявитель, СведенияОЗаявителе);
			
			ЗаполнитьДаннымиАдреса(НовыйЗаявитель, ПараметрыОтчета.ИмяФормы, СведенияОЗаявителе, КлючиПоказателей);
			ДополнитьСведенияОФизическомЛице(НовыйЗаявитель, СведенияОЗаявителе);
			
		ИначеЕсли ПараметрыОтчета.ИмяФормы <> "Форма2014_1" И СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			
			ЗаполнитьЗначенияСвойств(НовыйЗаявитель, СведенияОЗаявителе);
			ЗаполнитьДаннымиАдреса(НовыйЗаявитель, ПараметрыОтчета.ИмяФормы, СведенияОЗаявителе, КлючиПоказателей);
			ДополнитьСведенияОФизическомЛице(НовыйЗаявитель, СведенияОЗаявителе);
			
		Иначе
			// Достаточно указать ФИО и ИНН, остальные сведения могут не указываться,
			// если в отношении физического лица заполнен лист Б настоящего заявления
			
			НовыйЗаявитель.ИННФЛ = СведенияОЗаявителе.ИНН;
			ЗаполнитьЗначенияСвойств(НовыйЗаявитель, СведенияОЗаявителе, "Фамилия, Имя, Отчество");
			Если ЭтоРоссия(СведенияОЗаявителе.Страна) Тогда
				ЗаполнитьФИОЛатиницей(НовыйЗаявитель, СведенияОЗаявителе.ФизическоеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
		// Дополнительные поля
		НовыйЗаявитель.Вставить("ВидЗаявителя", ВидЗаявителя);
		НовыйЗаявитель.Вставить("ОГРН", "");
		НовыйЗаявитель.Вставить("ИНН", "");
		НовыйЗаявитель.Вставить("СпособПолученияДокументов");
		НовыйЗаявитель.Вставить("ПолноеНаименование", "");
		
		// Реквизиты юридического лица
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			// Если учредителем является юридическое лицо, то необходимо указать ИНН и ОГРН организации.
			НовыйЗаявитель.ОГРН = СтрокаТаблицы.СведенияОЮридическомЛице.ОГРН;
			НовыйЗаявитель.ИНН = СтрокаТаблицы.СведенияОЮридическомЛице.ИНН;
			НовыйЗаявитель.ОграничитьДоступКСведениям_ЮЛ = ОграничитьДоступУчастники;
		КонецЕсли;
		
		НовыйЗаявитель.Телефон = НомерТелефонаВРазрешенномФормате(СведенияОЗаявителе.Телефон, ПараметрыОтчета.ИмяФормы);
		
		Если НотариусПодаетДокументыСамостоятельно Тогда
			НовыйЗаявитель.АдресЭлектроннойПочты = СведенияОЗаявителе.Email;
		Иначе
			НовыйЗаявитель.АдресЭлектроннойПочты = ДанныеРуководителя.СведенияОФизическомЛице.Email;
		КонецЕсли;
		
		// Получение документов
		Если НомерЛиста = 1 Тогда
			// В случае если лист Н заявления оформляется в отношении двух и более лиц, поле, состоящее из одного знакоместа,
			// заполняется только на первом из оформляемых листов Н заявления.
			
			// Пока поддерживается только регистрация руководителем по доверенности.
			Если ДанныеУчредителей.СпособРегистрации = 1 Тогда
				НовыйЗаявитель.СпособПолученияДокументов = "2";
			Иначе
				НовыйЗаявитель.СпособПолученияДокументов = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЗаявитель.Вставить("ВыдатьНаБумажномНосителе",
			Формат(ПараметрыЗаполнения.ВыдатьНаБумажномНосителе, "БЛ=; БИ=1"));
		
		СведенияОбОрганизации.Сведения_Заявители.Добавить(НовыйЗаявитель);
		
	КонецЦикла;
	
	// Ограничение доступа к сведениям в ЕГРЮЛ
	Если КлючиПоказателей.Свойство("КолонкиТаблицыОграниченияДоступаКСведениям")
		И (ПараметрыЗаполнения.ОграничитьДоступВЕГРЮЛУчастники
			Или ПараметрыЗаполнения.ОграничитьДоступВЕГРЮЛРуководитель) Тогда
		
		// Правительство РФ Постановление от 6 июня 2019 г. N 729
		// Об определении случаев, в которых доступ к содержавшимся в едином государственном реестре юридических лиц
		// сведениям (локументам, сдержавшим сведения) о юридическом лице может быть ограничен
		
		ИмяКолонки = КлючиПоказателей.КолонкиТаблицыОграниченияДоступаКСведениям.ИмяКолонки;
		НоваяКолонка = СведенияОбОрганизации.ОграниченияДоступаКСведениям.Колонки.Добавить(ИмяКолонки);
		НоваяСтрока = СведенияОбОрганизации.ОграниченияДоступаКСведениям.Добавить();
		НоваяСтрока[ИмяКолонки] = НСтр("ru = 'Юридическое лицо имеет место нахождения на территории Республики Крым или территории г. Севастополя.'");
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, СведенияОбОрганизации);
	
КонецПроцедуры

#КонецОбласти

// Возвращает табличный документ с инструкцией по регистрации ИП.
//
// Параметры:
// Параметры:
//   ПараметрыВыполнения - Структура - См. НовыйПараметрыИнструкцииРегистрацииИП()
//
// Возвращаемое значение:
//  Результат - Табличный документ
//
Функция ИнструкцияРегистрацияИП(ПараметрыВыполнения) Экспорт
	
	СпособПодачиДокументов = ПараметрыВыполнения.СпособПодачиДокументов;
	ВыборСпецрежимаНалогообложения = ПараметрыВыполнения.ВыборСпецрежимаНалогообложения;
	ДанныеРегистрирующегоОргана = ПараметрыВыполнения.ДанныеРегистрирующегоОргана;
	ДанныеНалоговойИнспекции = ПараметрыВыполнения.ДанныеНалоговойИнспекции;
	СтранаГражданства = ПараметрыВыполнения.СтранаГражданства;
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	Результат = Новый ТабличныйДокумент;
	
	ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИП");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументСпецрежимНалогообложения1",           "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения1Примечание", "");
	Параметры.Вставить("ПолучениеДокументовСпецрежим1",               "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения2",           "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения2Примечание", "");
	Параметры.Вставить("ПолучениеДокументовСпецрежим2",               "");
	Параметры.Вставить("ДокументСпецрежимНалогообложенияВТексте",     "");
	Параметры.Вставить("УдостоверениеЛичности",                       "");
	Параметры.Вставить("НомерШага",                                   "");
	
	НомерСпецрежима = 0;
	
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		
		НомерСпецрежима = НомерСпецрежима + 1;
		
		ВДвухЭкземплярахТекст = ?(СпособПодачиДокументов = СпособыПодачиДокументов.Почта, "", " (2 экземпляра)");
		
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уведомление о переходе на УСН%1'"), ВДвухЭкземплярахТекст);
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима + "Примечание"] = "Дата уведомления – дата подачи документа в ИФНС";
		
		Параметры["ПолучениеДокументовСпецрежим" + НомерСпецрежима] = "Получить один экземпляр уведомления о применении УСН с датой,
												 |печатью и подписью сотрудника налоговой";
		
		Параметры.ДокументСпецрежимНалогообложенияВТексте = НСтр("ru = 'уведомление о переходе на УСН'");
	КонецЕсли;
	
	Если ВыборСпецрежимаНалогообложения.Патент Тогда
		
		НомерСпецрежима = НомерСпецрежима + 1;
		
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима]           = "Заявление на получение патента";
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима + "Примечание"] = "Дата заявления – дата подачи документа в ИФНС";
		
	КонецЕсли;
	
	СпецРежим1 = (НомерСпецрежима > 0);
	СпецРежим2 = (НомерСпецрежима > 1);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ДанныеРегистрирующегоОргана);
	
	Область = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСлично
		Или СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично Тогда
		Область.Параметры.Заголовок = "Инструкция по регистрации ИП";
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		Область.Параметры.Заголовок = "Инструкция регистрации ИП через представителя";
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		Область.Параметры.Заголовок = "Инструкция регистрации ИП по почте";
	КонецЕсли;
	
	Область.НижнийКолонтитул.Выводить              = Истина;
	Область.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	Область.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	Область.НижнийКолонтитул.НачальнаяСтраница     = 1;
	Область.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(Область);
	
	НомерШага = 0;
	
	ИностранныйГражданин = СтранаГражданства <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия")
		И ЗначениеЗаполнено(СтранаГражданства);
	ЛицоБезГражданства = Не ЗначениеЗаполнено(СтранаГражданства);
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииРегистрации();
	ПараметрыИнструкции.СпособПодачиДокументов = СпособПодачиДокументов;
	ПараметрыИнструкции.ЕстьАдресИнспекции     = ЗначениеЗаполнено(Параметры.НаименованиеФНС);
	ПараметрыИнструкции.СпецРежим1             = СпецРежим1;
	ПараметрыИнструкции.СпецРежим2             = СпецРежим2;
	ПараметрыИнструкции.РегистрацияЧерезМФЦ    = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.ИностранныйГражданин   = ИностранныйГражданин;
	ПараметрыИнструкции.ДатаСоставления        = ПараметрыВыполнения.ДатаСоставления;
	ПараметрыИнструкции.ТребуетсяСправкаОбОтсутствииСудимости = ПараметрыВыполнения.ТребуетсяСправкаОбОтсутствииСудимости;
	ПараметрыИнструкции.УплачиваетсяГоспошлина = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ПараметрыВыполнения.ДатаСоставления,
		СпособПодачиДокументов);
	
	Если ИностранныйГражданин Тогда
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ПереводДокументов", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Результат.Вывести(Область);
		
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель
		Или СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		
		ИмяОбласти = ?(ЛицоБезГражданства, "ЗаверениеКопийУНотариусаБезГражданства", "ЗаверениеКопийУНотариуса");
		Область = ПолучитьОбластьИнструкцииРегистрация(ИмяОбласти, ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	Если ИностранныйГражданин Тогда
		НомерПунктаСпецРежим1 = 8;
		НомерПунктаСпецРежим2 = 9;
	ИначеЕсли ЛицоБезГражданства Тогда
		НомерПунктаСпецРежим1 = 6;
		НомерПунктаСпецРежим2 = 7;
	Иначе
		НомерПунктаСпецРежим1 = 5;
		НомерПунктаСпецРежим2 = 6;
	КонецЕсли;
	
	Если Не ПараметрыИнструкции.УплачиваетсяГоспошлина Тогда
		
		НомерПунктаСпецРежим1 = НомерПунктаСпецРежим1 - 1;
		НомерПунктаСпецРежим2 = НомерПунктаСпецРежим2 - 1;
	КонецЕсли;
	
	Параметры.Вставить("НомерПунктаСпецРежим1", НомерПунктаСпецРежим1);
	Параметры.Вставить("НомерПунктаСпецРежим2", НомерПунктаСпецРежим2);
	
	Если ИностранныйГражданин Тогда
		Область = ПолучитьОбластьИнструкцииРегистрация(
			"ПодготовкаДокументовИностранныйГражданин", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	ИначеЕсли ЛицоБезГражданства Тогда
		Область = ПолучитьОбластьИнструкцииРегистрация(
			"ПодготовкаДокументовЛицоБезГражданства", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
		Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	Иначе
		Область = ПолучитьОбластьИнструкцииРегистрация("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
	КонецЕсли;
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Параметры.Вставить("ПояснениеПриПодачеДокументов", ПояснениеПриПодачеДокументов(
		СпособПодачиДокументов,
		ПараметрыВыполнения.ТребуетсяСправкаОбОтсутствииСудимости));
	
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если Не ИностранныйГражданин И
		Не (ЛицоБезГражданства И СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель) Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Параметры.УдостоверениеЛичности = ?(ЛицоБезГражданства, "Документ, удостоверяющий личность", "Паспорт");
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично И СпецРежим1 Тогда
		// Документы спецрежима подаются в территориальную ИНФС
		ПараметрыИнструкции.РегистрацияЧерезМФЦ = Ложь;
		ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(ДанныеНалоговойИнспекции.НаименованиеФНС);
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументовСпецрежим", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Параметры.Вставить("НаименованиеФНС", ДанныеНалоговойИнспекции.НаименованиеФНС);
		Параметры.Вставить("АдресФНС",        ДанныеНалоговойИнспекции.АдресФНС);
		Параметры.Вставить("ТелефонФНС",      ДанныеНалоговойИнспекции.ТелефонФНС);
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
	КонецЕсли;
	
	Если ВыборСпецрежимаНалогообложения.АУСН Тогда
		ДобавитьОбластьИнструкцииПереходаНаАУСН(Результат, НомерШага, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыИнструкцииРегистрацииИП() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодачиДокументов");
	Результат.Вставить("ВыборСпецрежимаНалогообложения", Новый Структура);
	Результат.Вставить("ДанныеРегистрирующегоОргана", Новый Структура);
	Результат.Вставить("ДанныеНалоговойИнспекции", Новый Структура);
	Результат.Вставить("СтранаГражданства");
	Результат.Вставить("ДатаСоставления"); // Дата составления заявления о регистрации
	Результат.Вставить("ТребуетсяСправкаОбОтсутствииСудимости", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыИнструкцииРегистрацииООО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоУчредителей", 0);
	Результат.Вставить("ОдинУчредительЮридическоеЛицо", Ложь);
	Результат.Вставить("СпособПодачиДокументов", 1); // Значения: "1" - лично, "2" - через преставителя, "3" - по почте
	Результат.Вставить("ВыборСпецрежимаНалогообложения", НовыйВыборСпецрежимаНалогообложения());
	Результат.Вставить("ДанныеРегистрирующегоОргана", НовыйДанныеНалоговойИнспекции());
	Результат.Вставить("ДанныеНалоговойИнспекции", НовыйДанныеНалоговойИнспекции());
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("Гражданство");
	Результат.Вставить("ЕстьИностранцы", Ложь);
	Результат.Вставить("ВидУстава", "Типовой"); // Значения: "Типовой", "Индивидуальный"
	Результат.Вставить("ВыбраннаяФорма", "");
	Результат.Вставить("ДатаСоставления");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеНалоговойИнспекции()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеФНС", "");
	Результат.Вставить("АдресФНС", "");
	Результат.Вставить("ТелефонФНС", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает табличный документ с инструкцией по регистрации ООО.
//
// Параметры:
//  ПараметрыВыполнения - Структура - см. НовыйПараметрыИнструкцииРегистрацииООО()
//
// Возвращаемое значение:
//  Результат - Табличный документ
//
Функция ИнструкцияРегистрацииООО(ПараметрыВыполнения) Экспорт
	
	КоличествоУчредителей = ПараметрыВыполнения.КоличествоУчредителей;
	СпособПодачиДокументов = ПараметрыВыполнения.СпособПодачиДокументов;
	ВыборСпецрежимаНалогообложения = ПараметрыВыполнения.ВыборСпецрежимаНалогообложения;
	ДанныеРегистрирующегоОргана = ПараметрыВыполнения.ДанныеРегистрирующегоОргана;
	ДанныеНалоговойИнспекции = ПараметрыВыполнения.ДанныеНалоговойИнспекции;
	УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;
	Гражданство = ПараметрыВыполнения.Гражданство;
	ЕстьИностранцы = ПараметрыВыполнения.ЕстьИностранцы;
	ВидУстава = ПараметрыВыполнения.ВидУстава;
	
	Период = ПараметрыВыполнения.ДатаСоставления;
	НотариусПодаетДокументыСамостоятельно = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(Период);
	
	ОдинУчредитель = КоличествоУчредителей <= 1;
	
	Если ОдинУчредитель Тогда
		ИмяМакетаИнструкция = "ИнструкцияРегистрацииОООДляОдногоУчредителя";
	Иначе
		ИмяМакетаИнструкция = "ИнструкцияРегистрацииОООДляНесколькихУчредителей";
	КонецЕсли;
	
	ШаблонИнструкции = ПолучитьМакет(ИмяМакетаИнструкция);
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСлично
		Или СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция по регистрации ООО";
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция регистрации ООО через представителя";
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция регистрации ООО по почте";
	КонецЕсли;
	
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииРегистрации();
	ПараметрыИнструкции.СпособПодачиДокументов  = СпособПодачиДокументов;
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(ДанныеРегистрирующегоОргана.НаименованиеФНС);
	ПараметрыИнструкции.СпецРежим1         = ВыборСпецрежимаНалогообложения.УСН;
	ПараметрыИнструкции.ОдинУчредительЮридическоеЛицо = ПараметрыВыполнения.ОдинУчредительЮридическоеЛицо;
	ПараметрыИнструкции.РегистрацияЧерезМФЦ = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.Паспорт = ПредставлениеДокументаУдостоверяющегоЛичность(Гражданство);
	ПараметрыИнструкции.ЕдинственныйУчредитель = (КоличествоУчредителей = 1);
	ПараметрыИнструкции.УплачиваетсяГоспошлина = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		Период,
		СпособПодачиДокументов,
		Истина); // При регистрации формируются учредительные документы
	
	Если НотариусПодаетДокументыСамостоятельно Тогда
		// Учредители сами предоставляют документы в регистрирующий орган
		ПараметрыИнструкции.ИностранныйГражданин = ЕстьИностранцы;
	Иначе
		ПараметрыИнструкции.ИностранныйГражданин = ЗначениеЗаполнено(Гражданство)
			И Гражданство <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
		
	КонецЕсли;
	
	ПараметрыИнструкции.ВидУстава = ВидУстава;
	ПараметрыИнструкции.ДатаСоставления = Период;
	
	НаименованиеЛиста = НаименованиеЛистаПодписиРегистрацииООО(ПараметрыВыполнения.ВыбраннаяФорма);
	
	Если Не ОдинУчредитель Тогда
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры = НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага,
			ПараметрыИнструкции.Паспорт,
			НаименованиеЛиста);
		
		Параметры.Вставить("КоличествоЭкземпляров", КоличествоУчредителей + 1);
		Область.Параметры.Заполнить(Параметры);
		
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	Если Не НотариусПодаетДокументыСамостоятельно
		И (СпособПодачиДокументов <> СпособыПодачиДокументов.ИФНСлично Или Не ОдинУчредитель) Тогда
		
		ИмяОбласти = ?(ЕстьИностранцы И Не ОдинУчредитель, "ЗаверениеКопийУНотариусаИностранныеГраждане", "ЗаверениеКопийУНотариуса");
		Область = ПолучитьОбластьИнструкцииРегистрация(ИмяОбласти, ШаблонИнструкции, ПараметрыИнструкции);
		Параметры = НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага,
			ПараметрыИнструкции.Паспорт,
			НаименованиеЛиста);
		
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага,
		ПараметрыИнструкции.Паспорт,
		НаименованиеЛиста);
	
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		Параметры.Вставить("ДокументСпецрежимНалогообложения",
			НСтр("ru='Уведомление о переходе на УСН (2 экземпляра)'"));
		Параметры.Вставить("ДокументСпецрежимНалогообложенияПримечание", 
			НСтр("ru='Дата уведомления – дата подачи документа в налоговую инспекцию'"));
	КонецЕсли;
	
	Если НотариусПодаетДокументыСамостоятельно Тогда
		НомерПунктаКвитанция = 2;
		Смещение = ?(ОдинУчредитель, 0, -1);
	Иначе
		НомерПунктаКвитанция = 3;
		Смещение = 0;
	КонецЕсли;
	
	Если Не ПараметрыИнструкции.УплачиваетсяГоспошлина Тогда
		Смещение = Смещение - 1;
	КонецЕсли;
	
	Параметры.Вставить("НомерПунктаКвитанция", НомерПунктаКвитанция);
	
	Если ОдинУчредитель Тогда
		// Номер пункта определяет количество пунктов в списке документов до пункта с уставом.
		НомерПункта = ?(СпособПодачиДокументов = СпособыПодачиДокументов.Почта, 2, 3);
	Иначе
		НомерПункта = ?(СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель, 4, 3);
	КонецЕсли;
	
	Если ВидУстава = "Индивидуальный" Тогда
		Параметры.Вставить("НомерПунктаУстава", УвеличитьЗначениеНаЕдиницу(НомерПункта) + Смещение);
	КонецЕсли;
	
	Параметры.Вставить("НомерПунктаПротокол", УвеличитьЗначениеНаЕдиницу(НомерПункта) + Смещение);
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		Параметры.Вставить("НомерПунктаСпецРежим", УвеличитьЗначениеНаЕдиницу(НомерПункта) + Смещение);
	КонецЕсли;
	Параметры.Вставить("НомерПунктаПисьмо", УвеличитьЗначениеНаЕдиницу(НомерПункта) + Смещение);
	Область.Параметры.Заполнить(Параметры);
	
	Результат.Вывести(Область);
	
	Если НЕ ОдинУчредитель
		И СпособПодачиДокументов <> СпособыПодачиДокументов.ИФНСпредставитель
		И Не НотариусПодаетДокументыСамостоятельно Тогда
		
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага,
		ПараметрыИнструкции.Паспорт,
		НаименованиеЛиста);
	
	Параметры.Вставить("НаименованиеФНС", ДанныеРегистрирующегоОргана.НаименованиеФНС);
	Параметры.Вставить("АдресФНС",        ДанныеРегистрирующегоОргана.АдресФНС);
	Параметры.Вставить("ТелефонФНС",      ДанныеРегистрирующегоОргана.ТелефонФНС);
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если НотариусПодаетДокументыСамостоятельно
		И СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСлично Тогда
		
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
		
	ИначеЕсли Не НотариусПодаетДокументыСамостоятельно
		И ОдинУчредитель
		И СпособПодачиДокументов <> СпособыПодачиДокументов.ИФНСпредставитель Тогда
		
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	// Выводим область "Получение документов"
	Область = ПолучитьОбластьИнструкцииРегистрация("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага,
		ПараметрыИнструкции.Паспорт,
		НаименованиеЛиста);
	
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично И ВыборСпецрежимаНалогообложения.УСН Тогда
		// Документы спецрежима подаются в территориальную ИФНС
		ПараметрыИнструкции.РегистрацияЧерезМФЦ = Ложь;
		ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(ДанныеНалоговойИнспекции.НаименованиеФНС);
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументовСпецрежим", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Параметры.Вставить("ДокументСпецрежимНалогообложенияВТексте", НСтр("ru='уведомление о переходе на УСН'"));
		Параметры.Вставить("НаименованиеФНС", ДанныеНалоговойИнспекции.НаименованиеФНС);
		Параметры.Вставить("АдресФНС",        ДанныеНалоговойИнспекции.АдресФНС);
		Параметры.Вставить("ТелефонФНС",      ДанныеНалоговойИнспекции.ТелефонФНС);
		Область.Параметры.Заполнить(Параметры);
		Результат.Вывести(Область);
	КонецЕсли;
	
	Если ВыборСпецрежимаНалогообложения.АУСН Тогда
		ДобавитьОбластьИнструкцииПереходаНаАУСН(Результат, НомерШага, Истина);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция НовыйПараметрыЗаполненияИнструкцииРегистрацияООО(НомерШага, Паспорт, НаименованиеЛиста)
	
	Результат = Новый Структура();
	Результат.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Результат.Вставить("Паспорт", Паспорт);
	Результат.Вставить("НаименованиеЛиста", НаименованиеЛиста);
	
	Возврат Результат;
	
КонецФункции

// Формирует печатную форму решения физического лица - единственного учредителя нового ООО.
//
// Параметры:
//  Организация         - СправочникСсылка.Организации - Регистрируемая организация
//  ДатаСоставления     - Дата - Дата составления заявления по форме Р11001
//  НомерТиповогоУстава - Число - Номер типового устава
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция РешениеЕдинственногоУчредителяООО(Организация, ДатаСоставления, НомерТиповогоУстава) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ДанныеУчредителей.Учредители[0].ЭтоЮридическоеЛицо Тогда
		ТекстСообщения = НСтр("ru='Единственный учредитель должен быть физическим лицом.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура();
	ПараметрыТекста.Вставить("Город", "");
	ПараметрыТекста.Вставить("Дата", "");
	ПараметрыТекста.Вставить("НаименованиеОрганизации", "");
	ПараметрыТекста.Вставить("ФИОПолные", "");
	ПараметрыТекста.Вставить("Гражданство", "");
	ПараметрыТекста.Вставить("ДокументПредставление", "");
	ПараметрыТекста.Вставить("АдресПоПропискеПредставление", "");
	ПараметрыТекста.Вставить("УставныйКапитал", "");
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", "");
	ПараметрыТекста.Вставить("ДолжностьДиректора", "");
	ПараметрыТекста.Вставить("ФИОДиректора", "");
	ПараметрыТекста.Вставить("СрокПолномочийДиректора", "");
	ПараметрыТекста.Вставить("АдресОрганизации", "");
	
	ДанныеУчредителя = ДанныеУчредителей.Учредители[0];
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "НаименованиеПолное, НаименованиеСокращенное");
	ПараметрыТекста.Вставить("НаименованиеПолное", СведенияОбОрганизации.НаименованиеПолное);
	ПараметрыТекста.Вставить("НаименованиеСокращенное", СведенияОбОрганизации.НаименованиеСокращенное);
	НаименованиеПолноеВРодительномПадеже = НаименованиеПолноеВРодительномПадеже(СокрЛ(СведенияОбОрганизации.НаименованиеПолное));
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже);
	
	ПараметрыТекста.Вставить("ДокументПредставление", ТекстСоСтрочнойБуквы(ДанныеУчредителя.СведенияОФизическомЛице.ДокументПредставление)); 
	ПараметрыТекста.Вставить("ФИОПолные", ДанныеУчредителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("Гражданство", ПредставлениеГражданстваСтраны(ДанныеУчредителя.СведенияОФизическомЛице.СтранаПолноеНаименование));
	
	Если ЗначениеЗаполнено(ДанныеУчредителя.СведенияОФизическомЛице.АдресПрописки) Тогда
		АдресУчредителя = ДанныеУчредителя.СведенияОФизическомЛице.АдресПрописки;
	Иначе
		АдресУчредителя = ДанныеУчредителя.СведенияОФизическомЛице.АдресИнформирования;
	КонецЕсли;
	ПараметрыТекста.Вставить("АдресПоПропискеПредставление", АдресУчредителя);
	ПараметрыТекста.Вставить("УставныйКапитал", Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0"));
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописи);
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", НРег(УставныйКапиталПрописью));
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление));
	ПараметрыТекста.Вставить("ФИОДиректора",       ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ДокументДиректораПредставление", ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление));
	ПараметрыТекста.Вставить("АдресДиректораПредставление", ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки);
	
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыТекста.Вставить("АдресОрганизации", Адрес.Представление);
	
	Если Адрес.Количество() > 0 Тогда
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			СловаАдреса = СтрРазделить(Адрес.Город, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(Адрес.НаселенныйПункт, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			СловаАдреса = СтрРазделить(Адрес.Регион, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекста.Вставить("Дата", Формат(ДатаСоставления,"Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	
	Макет = ПолучитьМакет("РешениеЕдинственногоУчредителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	ВыбранТиповойУстав = ЗначениеЗаполнено(НомерТиповогоУстава);
	НенужныеПараграфы = Новый Массив;
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.Отступ = 10;
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("	%1", Параграф.Элементы[0].Текст);
		КонецЕсли;
		
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			
			Если ТипЗнч(ЭлементПараграфа) <> Тип("ТекстФорматированногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]") <> 0 Тогда
					
				Если ВыбранТиповойУстав Тогда
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
				Иначе
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]", "");
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]") <> 0 Тогда
				
				Если Не ВыбранТиповойУстав Тогда
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
				Иначе
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]", "");
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[НомерТиповогоУстава]",
						Формат(НомерТиповогоУстава, "ЧДЦ=0"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Параграф Из НенужныеПараграфы Цикл
		ДокументРезультат.Элементы.Удалить(Параграф);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

// Формирует печатную форму протокола собрания учредителей организации - единственного учредителя нового ООО.
//
// Параметры:
//   Организация         - СправочникСсылка.Организации - Регистрируемая организация
//   ДатаСоставления     - Дата - Дата составления заявления по форме Р11001
//   НомерТиповогоУстава - Число - Номер типового устава, выбранного при регистрации организации
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция ПротоколСобранияУчредителейЕдинственногоУчредителяООО(Организация, ДатаСоставления, НомерТиповогоУстава) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если НЕ ДанныеУчредителей.Учредители[0].ЭтоЮридическоеЛицо Тогда
		ТекстСообщения = НСтр("ru='Единственный учредитель должен быть юридическим лицом.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("НаименованиеПолное");
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже");
	ПараметрыТекста.Вставить("НаименованиеСокращенное");
	ПараметрыТекста.Вставить("НаименованиеУчредителяПолноеВРодительномПадеже");
	ПараметрыТекста.Вставить("УставныйКапитал");
	ПараметрыТекста.Вставить("УставныйКапиталПрописью");
	ПараметрыТекста.Вставить("НаименованиеОрганизации");
	ПараметрыТекста.Вставить("ДолжностьДиректора");
	ПараметрыТекста.Вставить("ФИОДиректора");
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью");
	ПараметрыТекста.Вставить("АдресДиректораПредставление");
	ПараметрыТекста.Вставить("ДокументДиректораПредставление");
	ПараметрыТекста.Вставить("АдресОрганизации");
	ПараметрыТекста.Вставить("Город");
	ПараметрыТекста.Вставить("Дата");
	
	ДанныеУчредителя = ДанныеУчредителей.Учредители[0];
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"НаименованиеПолное,НаименованиеСокращенное");
	ПараметрыТекста.НаименованиеСокращенное = РеквизитыОрганизации.НаименованиеСокращенное;
	ПараметрыТекста.НаименованиеПолное = РеквизитыОрганизации.НаименованиеПолное;
	ПараметрыТекста.НаименованиеПолноеВРодительномПадеже = 
		НаименованиеПолноеВРодительномПадеже(СокрЛП(РеквизитыОрганизации.НаименованиеПолное));
		
	ПараметрыТекста.НаименованиеУчредителяПолноеВРодительномПадеже =
		НаименованиеПолноеВРодительномПадеже(СокрЛП(ДанныеУчредителя.СведенияОЮридическомЛице.ПолноеНаименование));
	
	ПараметрыТекста.УставныйКапитал = Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0");
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописи);
	ПараметрыТекста.УставныйКапиталПрописью = НРег(УставныйКапиталПрописью);
	
	ПараметрыТекста.ДолжностьДиректора = ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление);
	ПараметрыТекста.ФИОДиректора       = ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные;
	ПараметрыТекста.ДокументДиректораПредставление = 
		ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление);
	ПараметрыТекста.АдресДиректораПредставление     = ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки;
	ПараметрыТекста.СрокПолномочийДиректораПрописью = СрокПолномочийПрописью(ДанныеРуководителя.СрокПолномочий);
	
	АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыТекста.АдресОрганизации = АдресСтруктурой.Представление;
	
	Если АдресСтруктурой.Количество() > 0 Тогда
		СловаАдреса = Новый Массив;
		Если АдресСтруктурой.Свойство("Город") 
			И ЗначениеЗаполнено(АдресСтруктурой.Город) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.Город, " ");
		ИначеЕсли АдресСтруктурой.Свойство("НаселенныйПункт") 
			И ЗначениеЗаполнено(АдресСтруктурой.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.НаселенныйПункт, " ");
		ИначеЕсли АдресСтруктурой.Свойство("Регион") 
			И ЗначениеЗаполнено(АдресСтруктурой.Регион) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.Регион, " ");
		КонецЕсли;
		Если СловаАдреса.Количество() > 0 Тогда 
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Город = СтрШаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекста.Дата = Формат(ДатаСоставления,"Л=ru; ДФ='dd MMMM yyyy ''г.'''");
	
	Макет = ПолучитьМакет("ПротоколСобранияУчредителейЕдинственногоУчредителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	УдалитьБлокПоручения = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСоставления);
	ВыбранТиповойУстав = ЗначениеЗаполнено(НомерТиповогоУстава);
	
	НенужныеПараграфы = Новый Массив;
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.Отступ = 10;
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("	%1", Параграф.Элементы[0].Текст);
		КонецЕсли;
		
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			
			Если ТипЗнч(ЭлементПараграфа) <> Тип("ТекстФорматированногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ЭлементПараграфа.Текст, "[МеткаПорученияДиректору]") <> 0 Тогда
				
				Если УдалитьБлокПоручения Тогда
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
				Иначе
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаПорученияДиректору]", "");
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]") <> 0 Тогда
					
				Если ВыбранТиповойУстав Тогда
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
				Иначе
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]", "");
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]") <> 0 Тогда
				
				Если Не ВыбранТиповойУстав Тогда
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
				Иначе
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]", "");
					ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[НомерТиповогоУстава]",
						Формат(НомерТиповогоУстава, "ЧДЦ=0"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Параграф Из НенужныеПараграфы Цикл
		ДокументРезультат.Элементы.Удалить(Параграф);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция НовыеПараметрыИнструкцииРегистрации()
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодачиДокументов", "");
	Результат.Вставить("ВидУстава",              "");
	Результат.Вставить("РегистрацияЧерезМФЦ", Ложь);
	Результат.Вставить("ЕстьАдресИнспекции", Ложь);
	Результат.Вставить("СпецРежим1", Ложь);
	Результат.Вставить("СпецРежим2", Ложь);
	Результат.Вставить("Паспорт", "");
	Результат.Вставить("ОдинУчредительЮридическоеЛицо", Ложь);
	Результат.Вставить("ИностранныйГражданин", Ложь);
	Результат.Вставить("НаименованиеЛиста", "");
	Результат.Вставить("ДатаСоставления");
	Результат.Вставить("ЕдинственныйУчредитель", Истина);
	Результат.Вставить("ТребуетсяСправкаОбОтсутствииСудимости", Ложь);
	Результат.Вставить("УплачиваетсяГоспошлина", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОбластьИнструкцииРегистрация(ИмяОбласти, Шаблон, Параметры)
	
	Область = Шаблон.ПолучитьОбласть(ИмяОбласти);
	
	ОбластиИндивидуальныйУстав = МассивОбластейИндивидуальныйУстав();
	ОбластиТиповойУстав        = МассивОбластейТиповойУстав();
	
	НотариусПодаетДокументыСамостоятельно = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(
		Параметры.ДатаСоставления);
	
	// Удалим все вложенные области, которые не содержат в наименовании нужного способа регистрации.
	ВсегоОбластей = Область.Области.Количество();
	УдаляемыеОбласти = Новый Массив;
	
	Для НомерОбласти = 1 По ВсегоОбластей Цикл
		
		ВложеннаяОбласть = Область.Области[ВсегоОбластей-НомерОбласти];
		
		Если ИмяОбласти = ВложеннаяОбласть.Имя Тогда
			
			Продолжить;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "ЕстьАдресФНС") <> 0 Тогда
			
			Если Не Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "НетАдресаФНС") <> 0 Тогда
			
			Если Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПодачаДокументовСпецрежим1МФЦлично" Тогда
			
			Если Не Параметры.СпецРежим1 Или Параметры.СпецРежим2 Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "СправкаОСудимости" Тогда
			
			Если Не Параметры.ТребуетсяСправкаОбОтсутствииСудимости Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "Спецрежим1") <> 0 Тогда
			
			Если НЕ Параметры.СпецРежим1 
				ИЛИ СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0 Тогда
				
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "Спецрежим2") <> 0 Тогда
			
			Если НЕ Параметры.СпецРежим2 
				ИЛИ СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0 Тогда
				
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ОдинУчредительЮридическоеЛицо" Тогда
			
			Если НЕ Параметры.ОдинУчредительЮридическоеЛицо Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "Устав"
				Или ВложеннаяОбласть.Имя = "ПолучениеДокументовУстав"
				Или ВложеннаяОбласть.Имя = "ПроведениеСобранияУчредителейУстав"
				Или ВложеннаяОбласть.Имя = "ПолучениеДокументовУстав" Тогда
				
			Если Параметры.ВидУстава = "Типовой" Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПолучениеДокументовТиповойУстав" Тогда
			
			Если Параметры.ВидУстава = "Индивидуальный" Тогда
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ОбластиИндивидуальныйУстав.Найти(ВложеннаяОбласть.Имя) <> Неопределено Тогда
			
			Если Параметры.ВидУстава = "Типовой"
				Или СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0 Тогда
				
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли ОбластиТиповойУстав.Найти(ВложеннаяОбласть.Имя) <> Неопределено Тогда
			
			Если Параметры.ВидУстава = "Индивидуальный"
				Или СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0 Тогда
				
				УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0 Тогда
			
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			
		ИначеЕсли Не Параметры.УплачиваетсяГоспошлина
			И (СтрНайти(ВложеннаяОбласть.Имя, "УплатаГоспошлины") <> 0
			Или СтрНайти(ВложеннаяОбласть.Имя, "Квитанция") <> 0) Тогда
			
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			
		ИначеЕсли Не Параметры.УплачиваетсяГоспошлина
			И СтрНайти(ВложеннаяОбласть.Имя, "НотариусОтправкаДокументов") <> 0 Тогда
			
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			
		КонецЕсли;
		
		Если Параметры.ИностранныйГражданин И СтрНайти(ВложеннаяОбласть.Имя, "ГражданинРФ") <> 0 Тогда
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
		ИначеЕсли Не Параметры.ИностранныйГражданин И СтрНайти(ВложеннаяОбласть.Имя, "ИностранныйГражданин") <> 0 Тогда
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
		КонецЕсли;
		
		Если Не Параметры.ЕдинственныйУчредитель И УдалитьОбластьНотариусПодаетДокументыСамостоятельно(
			ВложеннаяОбласть.Имя,
			НотариусПодаетДокументыСамостоятельно) Тогда
			
			УдаляемыеОбласти.Добавить(ВложеннаяОбласть.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяОбласть Из УдаляемыеОбласти Цикл
		
		Если Область.Области.Найти(ТекущаяОбласть) <> Неопределено Тогда
			Область.УдалитьОбласть(Область.Области[ТекущаяОбласть], ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

Функция УдалитьОбластьНотариусПодаетДокументыСамостоятельно(ИмяОбласти, УчредителиРегистрируютсяСамостоятельно)
	
	Если УчредителиРегистрируютсяСамостоятельно Тогда
		
		ИменаОбластейПоручениеРуководителю = Новый Массив;
		ИменаОбластейПоручениеРуководителю.Добавить("ПодготовкаДокументовРуководитель");
		ИменаОбластейПоручениеРуководителю.Добавить("ПоручениеРуководителю");
		ИменаОбластейПоручениеРуководителю.Добавить("ПодачаДокументовИФНС");
		ИменаОбластейПоручениеРуководителю.Добавить("ПодачаДокументовМФЦ");
		ИменаОбластейПоручениеРуководителю.Добавить("ПолучениеДокументовИФНС");
		ИменаОбластейПоручениеРуководителю.Добавить("ПолучениеДокументовМФЦ");
		ИменаОбластейПоручениеРуководителю.Добавить("ПодачаДокументовПослеРегистрации");
		ИменаОбластейПоручениеРуководителю.Добавить("ПоручениеРуководителю");
	
		Для Каждого ТекущееИмяОбласти Из ИменаОбластейПоручениеРуководителю Цикл
			Если СтрНайти(ИмяОбласти, ТекущееИмяОбласти) <> 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИменаОбластейУчредителиСамиРегистрируют = Новый Массив;
		ИменаОбластейУчредителиСамиРегистрируют.Добавить("ПодготовкаДокументовУчредители");
		ИменаОбластейУчредителиСамиРегистрируют.Добавить("ПодачаДокументовУчредители");
		ИменаОбластейУчредителиСамиРегистрируют.Добавить("ПолучениеДокументовУчредители");
		ИменаОбластейУчредителиСамиРегистрируют.Добавить("ПодачаДокументовПослеРегистрацииУчредители");
		
		Для Каждого ТекущееИмяОбласти Из ИменаОбластейУчредителиСамиРегистрируют Цикл
			Если СтрНайти(ИмяОбласти, ТекущееИмяОбласти) <> 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МассивОбластейИндивидуальныйУстав()
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииИФНСличноУстав");
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииИФНСпредставительУстав");
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииМФЦличноУстав");
	МассивОбластей.Добавить("ПолучениеДокументовУстав");
	МассивОбластей.Добавить("ПолучениеДокументовИФНСличноУстав");
	МассивОбластей.Добавить("ПолучениеДокументовИФНСпредставительУстав");
	
	Возврат МассивОбластей;
	
КонецФункции

Функция МассивОбластейТиповойУстав()
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииИФНСлично");
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииИФНСпредставитель");
	МассивОбластей.Добавить("ПодачаДокументовПослеРегистрацииМФЦлично");
	МассивОбластей.Добавить("ПолучениеДокументовИФНСлично");
	МассивОбластей.Добавить("ПолучениеДокументовИФНСпредставитель");
	МассивОбластей.Добавить("ПолучениеДокументовМФЦличноКопии");
	
	Возврат МассивОбластей;
	
КонецФункции

// Возвращает адрес во временном хранилище на заполненный Протокол собрания учредителей ООО
//
// Параметры:
//   Организация         - СправочникСсылка.Организации - Регистрируемая организация
//   ДатаСоставления     - Дата - Дата составления заявления по форме Р11001
//   НомерТиповогоУстава - Число - Номер типового устава, выбранного при регистрации организации
//
// Возвращаемое значение:
//   Строка - Адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF
//
Функция ПротоколСобранияУчредителейООО(Организация, ДатаСоставления, НомерТиповогоУстава) Экспорт
	
	Период = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, Период, Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, Период, Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура();
	
	Для Каждого СтрокаТаблицы Из ДанныеУчредителей.Учредители Цикл
		
		ПараметрыТекста.Вставить("СуммаВзноса" + СтрокаТаблицы.НомерСтроки, 
			СтрокаТаблицы.СуммаВзноса);
		ПараметрыТекста.Вставить("СуммаВзносаПрописью" + СтрокаТаблицы.НомерСтроки, 
			НРег(СтрокаТаблицы.СуммаВзносаПрописью));
		ПараметрыТекста.Вставить("ДоляВУставномКапитале" + СтрокаТаблицы.НомерСтроки, 
			СтрокаТаблицы.ДоляУставногоКапиталаСтрокой + "%");
		
		ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОЮридическомЛице.Представитель);
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОЮридическомЛице);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОФизическомЛице);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СведенияОФизическомЛице.АдресПрописки)
				И ЗначениеЗаполнено(СтрокаТаблицы.СведенияОФизическомЛице.АдресИнформирования) Тогда
				ПараметрыУчредителя.АдресПрописки = СтрокаТаблицы.СведенияОФизическомЛице.АдресИнформирования;
			КонецЕсли;
			ПараметрыУчредителя.Гражданство = ПредставлениеГражданстваСтраны(СтрокаТаблицы.СведенияОФизическомЛице.СтранаПолноеНаименование);
		КонецЕсли;
		
		ПараметрыУчредителя.ДокументПредставление  = ТекстСоСтрочнойБуквы(ПараметрыУчредителя.ДокументПредставление);
		ПараметрыУчредителя.ДолжностьПредставителя = ТекстСоСтрочнойБуквы(ПараметрыУчредителя.ДолжностьПредставителя);
		
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			
			ПараметрыТекста.Вставить("НаименованиеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				ПараметрыУчредителя.ПолноеНаименование);
			ПараметрыТекста.Вставить("КраткоеПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				ПараметрыУчредителя.ПолноеНаименование);
			
			ПредставлениеУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("ЮридическоеЛицо"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставлениеУчредителя);
			
			ПредставительУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("Представитель"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставительУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставительУчредителя);
			
		Иначе
			ПараметрыТекста.Вставить("КраткоеПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				СтрокаТаблицы.СведенияОФизическомЛице.ФИОПолные);
			
			ПредставлениеУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("ФизическоеЛицо"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставлениеУчредителя);
			
			ПараметрыТекста.Вставить("ПредставительУчредителя" + СтрокаТаблицы.НомерСтроки,
				СтрокаТаблицы.СведенияОФизическомЛице.ФИОПолные);
		КонецЕсли;
		
	КонецЦикла;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);

	ПараметрыТекста.Вставить("НаименованиеПолное",      СведенияОбОрганизации.ПолноеНаименование);
	ПараметрыТекста.Вставить("НаименованиеСокращенное", СведенияОбОрганизации.СокращенноеНаименование);
	НаименованиеПолноеВРодительномПадеже = НаименованиеПолноеВРодительномПадеже(
		СокрЛ(СведенияОбОрганизации.ПолноеНаименование));
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже);
	
	ПараметрыТекста.Вставить("УставныйКапитал", Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0"));
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописи);
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", ТекстСоСтрочнойБуквы(УставныйКапиталПрописью));
	
	ПараметрыТекста.Вставить("ФИОДиректора",       ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ДолжностьДиректора", ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление));
	ПараметрыТекста.Вставить("ДокументДиректораПредставление", 
		ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление));
	ПараметрыТекста.Вставить("АдресДиректораПредставление", ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки);
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью", СрокПолномочийПрописью(ДанныеРуководителя.СрокПолномочий));
		
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	ПараметрыТекста.Вставить("АдресОрганизации", Адрес.Представление);
	
	Если Адрес.Количество() > 0 Тогда
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			СловаАдреса = СтрРазделить(Адрес.Город, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(Адрес.НаселенныйПункт, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			СловаАдреса = СтрРазделить(Адрес.Регион, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		КонецЕсли;
	КонецЕсли;

	ПараметрыТекста.Вставить("Дата", Формат(ДатаСоставления, "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
		
	Макет = ПолучитьМакет("ПротоколСобранияУчредителей");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	УдалитьБлокПоручения = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСоставления);
	ВыбранТиповойУстав = ЗначениеЗаполнено(НомерТиповогоУстава);
	
	НенужныеПараграфы = Новый Массив;
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине 
			И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("    %1", Параграф.Элементы[0].Текст);
		КонецЕсли;
		// Удалим строки в которых остались незаполненные параметры.
		// Число учредителей может быть любым от 2 до 50.
		// Исходный текст рассчитан на 50 учредителей, поэтому, если их меньше,
		// то некоторые строки могли остаться с незаполненными параметрами.
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если ТипЗнч(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				
				Если (СтрНайти(ЭлементПараграфа.Текст, "[КраткоеПредставлениеУчредителя") <> 0
					ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[ПредставительУчредителя") <> 0
					ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[ПредставлениеУчредителя") <> 0
					ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[НаименованиеУчредителя") <> 0
					ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[МеткаРевизора]") <> 0 ) Тогда
					
					НенужныеПараграфы.Добавить(Параграф);
					Прервать;
					
				ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаПорученияДиректору]") <> 0 Тогда
					
					Если УдалитьБлокПоручения Тогда
						НенужныеПараграфы.Добавить(Параграф);
						Прервать;
					Иначе
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаПорученияДиректору]", "");
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]") <> 0 Тогда
					
					Если ВыбранТиповойУстав Тогда
						НенужныеПараграфы.Добавить(Параграф);
						Прервать;
					Иначе
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаИндивидуальныйУстав]", "");
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]") <> 0 Тогда
					
					Если Не ВыбранТиповойУстав Тогда
						НенужныеПараграфы.Добавить(Параграф);
						Прервать;
					Иначе
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаТиповойУстав]", "");
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[НомерТиповогоУстава]",
							Формат(НомерТиповогоУстава, "ЧДЦ=0"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Параграф Из НенужныеПараграфы Цикл
		ДокументРезультат.Элементы.Удалить(Параграф);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ДоговорОбУчрежденииООО(Организация, ДатаСоставления, ОтветственныйЗаОплатуПошлины = Неопределено) Экспорт
	
	Период = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, Период, Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, Период);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	
	ТекстHTML = ПолучитьМакет("ДоговорОбУчрежденииООО").ПолучитьТекст();
	
	ПолноеНаименованиеОрганизацииВРодительномПадеже = СокрЛП(СведенияОбОрганизации.ПолноеНаименование);
	СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
	Если Лев(ВРЕГ(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРЕГ(СловоОбщество) Тогда
		ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
			+ СРЕД(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
	КонецЕсли;
	
	ПодставитьПараметрВТекст(ТекстHTML, "ПолноеНаименованиеОрганизацииВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
	ПодставитьПараметрВТекст(ТекстHTML, "ДатаДоговора", Формат(ДатаСоставления, "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	ГородПоЮридическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
		СведенияОбОрганизации.ЗначениеJSONЮридическийАдрес);
	ПодставитьПараметрВТекст(ТекстHTML, "ГородПоЮридическомуАдресуОрганизации", ГородПоЮридическомуАдресу);
	
	// Подготовим описания учредителей
	ОписаниеУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ОписаниеУчредителей = ОписаниеУчредителей + ОписаниеУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "ОписаниеУчредителей", ОписаниеУчредителей);
	
	ПодставитьПараметрВТекст(ТекстHTML, "ПолноеНаименованиеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	ПодставитьПараметрВТекст(ТекстHTML, "КраткоеНаименованиеОрганизации", СведенияОбОрганизации.СокращенноеНаименование);
	ПодставитьПараметрВТекст(ТекстHTML, "ЮридическийАдресОрганизации", СведенияОбОрганизации.ЮридическийАдрес);
	
	СуммаУстановногоКапитала = ДанныеУчредителей.УставныйКапитал;
	
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СуммаУстановногоКапиталаПрописью = ЧислоПрописью(СуммаУстановногоКапитала, "Л=ru", Валюта.ПараметрыПрописи);
	
	ПодставитьПараметрВТекст(ТекстHTML, "СуммаУставногоКапитала", Формат(СуммаУстановногоКапитала, "ЧДЦ=2; ЧГ=3,0"));
	ПодставитьПараметрВТекст(ТекстHTML, "СуммаУставногоКапиталаПрописью", СуммаУстановногоКапиталаПрописью);
	
	ОписаниеУставногоКапиталаУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ОписаниеУставногоКапиталаУчредителей = ОписаниеУставногоКапиталаУчредителей 
			+ ОписаниеУставногоКапиталаУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "УставныйКапиталУчредителей", ОписаниеУставногоКапиталаУчредителей);
		
	ПодставитьПараметрВТекст(ТекстHTML, "ДолжностьРуководителяОрганизации", 
		СведенияОбОрганизации.ДолжностьРуководителяПредставление);
	
	ПодставитьПараметрВТекст(ТекстHTML, "ОтветственныйЗаОплатуГоспошлины", ОтветственныйЗаОплатуПошлины);
	
	ПодписиУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ПодписиУчредителей = ПодписиУчредителей + ПодписьУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "ПодписиУчредителей", ПодписиУчредителей);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(ТекстHTML, Новый Структура());
	
	НотариусПодаетДокументыСамостоятельно = РегистрацияОрганизацииКлиентСервер.НотариусПодаетДокументыСамостоятельно(ДатаСоставления);
	НенужныеПараграфы = Новый Массив;
	НомерПункта = 6; // динамические пункты скрываемых параграфов
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если ТипЗнч(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				
				Если СтрНайти(ЭлементПараграфа.Текст, "[МеткаОтветственныйЗаОплатуГоспошлины]") <> 0 Тогда
					
					Если Не НотариусПодаетДокументыСамостоятельно Или Не ЗначениеЗаполнено(ОтветственныйЗаОплатуПошлины) Тогда
						НенужныеПараграфы.Добавить(Параграф);
						Прервать;
					Иначе
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаОтветственныйЗаОплатуГоспошлины]", "");
						ПодставитьПараметрВТекст(ЭлементПараграфа.Текст, "НомерПункта", НомерПункта);
						НомерПункта = НомерПункта + 1;
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ЭлементПараграфа.Текст, "[МеткаУчредителиВыступаютЗаявителями]") <> 0 Тогда
					
					Если Не НотариусПодаетДокументыСамостоятельно Тогда
						НенужныеПараграфы.Добавить(Параграф);
						Прервать;
					Иначе
						ЭлементПараграфа.Текст = СтрЗаменить(ЭлементПараграфа.Текст, "[МеткаУчредителиВыступаютЗаявителями]", "");
						ПодставитьПараметрВТекст(ЭлементПараграфа.Текст, "НомерПункта", НомерПункта);
						НомерПункта = НомерПункта + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Параграф Из НенужныеПараграфы Цикл
		ДокументРезультат.Элементы.Удалить(Параграф);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция КвитанцияНаОплатуГоспошлины(Организация) Экспорт
	
	КвитанцияПрисоединенныйФайл = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если КвитанцияПрисоединенныйФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(КвитанцияПрисоединенныйФайл));
	
КонецФункции

Функция ПриказОВступленииВДолжностьРуководителя(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса());
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ФорматДат = "Л=ru_RU; ДФ=dd.MM.yyyy";
	
	ПараметрыТекста = Новый Структура();
	
	НаименованияОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"НаименованиеСокращенное, НаименованиеПолное");
	ПараметрыТекста.Вставить("НаименованиеСокращенное", НаименованияОрганизации.НаименованиеСокращенное);
	ПараметрыТекста.Вставить("НаименованиеПолное", НаименованияОрганизации.НаименованиеПолное);
	
	ПараметрыТекста.Вставить("ФИОПолныеДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ИОФамилияДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ИОФамилия);
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", ДанныеРуководителя.ДолжностьПредставление);
	ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
		СокрЛП(НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ДанныеРуководителя.ДолжностьПредставление, 2, ДанныеРуководителя.Должность))));
		
	ДатаПриказа = ДанныеРуководителя.Период;
	ПараметрыТекста.Вставить("ДатаПриказа",  Формат(ДатаПриказа, ФорматДат));
	ПараметрыТекста.Вставить("НомерПриказа", "№ 1");
	
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
		Город = Адрес.Город;
	ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
		Город = Адрес.НаселенныйПункт;
	ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
		Город = СтрЗаменить(Адрес.Регион, " г", "");
	Иначе
		Город = "";
	КонецЕсли;
	ПараметрыТекста.Вставить("Город", Город);
	
	Если ДанныеУчредителей.Учредители.Количество() > 1 Тогда
		ШаблонОснования = НСтр("ru='протокол общего собрания участников общества от %1 № 1'");
	Иначе
		ШаблонОснования = НСтр("ru='решение единственного участника от %1 № 1'");
	КонецЕсли;
	ПараметрыТекста.Вставить("Основание", СтрШаблон(ШаблонОснования, Формат(ДатаПриказа, ФорматДат)));
	
	ПараметрыТекста.Вставить("ДатаНачала", Формат(ДатаПриказа, ФорматДат));
	ПараметрыТекста.Вставить("ДатаКонца", Формат(ДобавитьМесяц(ДатаПриказа, ДанныеРуководителя.СрокПолномочий * 12), ФорматДат));
	
	Макет = ПолучитьМакет("ПриказОВступленииВДолжностьРуководителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	ШрифтТекстаУчредительныхДокументов = Новый Шрифт("Times New Roman", 12);
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.МеждустрочныйИнтервал = 1.5;
		Для Каждого Элемент Из Параграф.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				Элемент.Шрифт = ШрифтТекстаУчредительныхДокументов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция СформироватьПриказОВступленииВДолжностьРуководителя(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет             = УправлениеПечатью.МакетПечатнойФормы("Обработка.РегистрацияОрганизации.ПриказОВступленииВДолжностьРуководителя");
	ОбластьДоговора   = Макет.ПолучитьОбласть("ТекстПриказа");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организации", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	НомерСтрокиНачало = 0;
	ФорматДат = "Л=ru_RU; ДФ=dd.MM.yyyy";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НомерСтрокиНачало > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеУчредителей = ДанныеУчредителейОрганизации(Выборка.Ссылка, ТекущаяДатаСеанса());
		Если ДанныеУчредителей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеРуководителя = ДанныеРуководителяОрганизации(Выборка.Ссылка, ТекущаяДатаСеанса(), Истина);
		Если ДанныеРуководителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТекста = Новый Структура();
		
		НаименованияОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Ссылка, 
			"НаименованиеСокращенное, НаименованиеПолное");
		ПараметрыТекста.Вставить("НаименованиеСокращенное", НаименованияОрганизации.НаименованиеСокращенное);
		ПараметрыТекста.Вставить("НаименованиеПолное", НаименованияОрганизации.НаименованиеПолное);
		
		ПараметрыТекста.Вставить("ФИОПолныеДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
		ПараметрыТекста.Вставить("ИОФамилияДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ИОФамилия);
		
		ПараметрыТекста.Вставить("ДолжностьДиректора", ДанныеРуководителя.ДолжностьПредставление);
		ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
			СокрЛП(НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ДанныеРуководителя.ДолжностьПредставление, 2, ДанныеРуководителя.Должность))));
			
		ДатаПриказа = ДанныеРуководителя.Период;
		ПараметрыТекста.Вставить("ДатаПриказа",  Формат(ДатаПриказа, ФорматДат));
		ПараметрыТекста.Вставить("НомерПриказа", "№ 1");
		
		Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Выборка.Ссылка, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			Город = Адрес.Город;
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			Город = Адрес.НаселенныйПункт;
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			Город = СтрЗаменить(Адрес.Регион, " г", "");
		Иначе
			Город = "";
		КонецЕсли;
		ПараметрыТекста.Вставить("Город", Город);
		
		Если ДанныеУчредителей.Учредители.Количество() > 1 Тогда
			ШаблонОснования = НСтр("ru='протокол общего собрания участников общества от %1 № 1'");
		Иначе
			ШаблонОснования = НСтр("ru='решение единственного участника от %1 № 1'");
		КонецЕсли;
		ПараметрыТекста.Вставить("Основание", СтрШаблон(ШаблонОснования, Формат(ДатаПриказа, ФорматДат)));
		
		ПараметрыТекста.Вставить("ДатаНачала", Формат(ДатаПриказа, ФорматДат));
		ПараметрыТекста.Вставить("ДатаКонца", Формат(ДобавитьМесяц(ДатаПриказа, ДанныеРуководителя.СрокПолномочий * 12), ФорматДат));
		
		ОбластьДоговора.Параметры.Заполнить(ПараметрыТекста);
		ТабличныйДокумент.Вывести(ОбластьДоговора);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция РеквизитыРегистрирующегоОргана(КодНалоговогоОргана, ЭтоЮридическоеЛицо) Экспорт
	
	РеквизитыРегистрирующегоОргана = НовыеРеквизитыРегистрирующегоОргана();
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат РеквизитыРегистрирующегоОргана;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		Возврат РеквизитыРегистрирующегоОргана;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыРегистрирующегоОргана = РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ;
	Иначе
		РеквизитыРегистрирующегоОргана = РеквизитыНалоговогоОргана.РегистрирующийОрганИП;
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана.Наименование = СтрЗаменить(РеквизитыРегистрирующегоОргана.Наименование, 
		НСтр("ru='инспекция Федеральной налоговой службы'"),
		НСтр("ru='ИФНС'"));
	
	Если Не ПустаяСтрока(РеквизитыРегистрирующегоОргана.Адрес) Тогда
		МассивПодстрок = СтрРазделить(РеквизитыРегистрирующегоОргана.Адрес, ",", Ложь);
		РеквизитыРегистрирующегоОргана.Адрес = СтрСоединить(МассивПодстрок, ",");
	КонецЕсли;
	
	Возврат РеквизитыРегистрирующегоОргана;
	
КонецФункции

Функция РеквизитыНалоговойИнспекции(КодНалоговогоОргана) Экспорт
	
	РеквизитыНалоговойИнспекции = НовыеРеквизитыРегистрирующегоОргана();
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат РеквизитыНалоговойИнспекции;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		Возврат РеквизитыНалоговойИнспекции;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РеквизитыНалоговойИнспекции, РеквизитыНалоговогоОргана);
	
	РеквизитыНалоговойИнспекции.Наименование = СтрЗаменить(РеквизитыНалоговойИнспекции.Наименование, 
		НСтр("ru='инспекция Федеральной налоговой службы'"), 
		НСтр("ru='ИФНС'"));
	
	Если Не ПустаяСтрока(РеквизитыНалоговойИнспекции.Адрес) Тогда
		МассивПодстрок = СтрРазделить(РеквизитыНалоговойИнспекции.Адрес, ",", Ложь);
		РеквизитыНалоговойИнспекции.Адрес = СтрСоединить(МассивПодстрок, ",");
	КонецЕсли;
	
	Возврат РеквизитыНалоговойИнспекции;
	
КонецФункции

Функция НовыеРеквизитыРегистрирующегоОргана()
	
	РеквизитыГосударственногоОргана = Новый Структура;
	РеквизитыГосударственногоОргана.Вставить("Наименование", "");
	РеквизитыГосударственногоОргана.Вставить("Телефон", "");
	РеквизитыГосударственногоОргана.Вставить("Адрес", "");
	РеквизитыГосударственногоОргана.Вставить("Информация", "");
	РеквизитыГосударственногоОргана.Вставить("Код", "");
	
	Возврат РеквизитыГосударственногоОргана;
	
КонецФункции

Функция ДанныеУчредителейОрганизации(Организация, Дата, Подробно = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеУставногоКапитала.Ссылка КАК Ссылка,
	|	ФормированиеУставногоКапитала.Дата КАК Дата,
	|	ФормированиеУставногоКапитала.Организация КАК Организация,
	|	ФормированиеУставногоКапитала.УставныйКапиталДоИзменения КАК УставныйКапиталДоИзменения,
	|	ФормированиеУставногоКапитала.УставныйКапитал КАК УставныйКапитал,
	|	ФормированиеУставногоКапитала.СпособРегистрации КАК СпособРегистрации,
	|	ФормированиеУставногоКапитала.Учредители.(
	|		НомерСтроки КАК НомерСтроки,
	|		ФормированиеУставногоКапитала.Учредители.Учредитель ССЫЛКА Справочник.Контрагенты КАК ЭтоЮридическоеЛицо,
	|		Учредитель КАК Учредитель,
	|		СуммаВзносаДоИзменения КАК СуммаВзносаДоИзменения,
	|		СуммаВзноса КАК СуммаВзноса,
	|		ПредставительУчредителя КАК ПредставительУчредителя,
	|		ДолжностьПредставителя КАК ДолжностьПредставителя,
	|		ПредставительНаОсновании КАК ПредставительНаОсновании
	|	) КАК Учредители
	|ИЗ
	|	Документ.ФормированиеУставногоКапитала КАК ФормированиеУставногоКапитала
	|ГДЕ
	|	ФормированиеУставногоКапитала.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ФормированиеУставногоКапитала.Дата, ДЕНЬ) <= &Дата
	|	И НЕ ФормированиеУставногоКапитала.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Данные = Новый Структура;
		Данные.Вставить("Дата",              Выборка.Дата);
		Данные.Вставить("Организация",       Выборка.Организация);
		Данные.Вставить("УставныйКапиталДоИзменения", Выборка.УставныйКапиталДоИзменения);
		Данные.Вставить("УставныйКапитал",   Выборка.УставныйКапитал);
		Данные.Вставить("СпособРегистрации", Выборка.СпособРегистрации);
		Данные.Вставить("Учредители",        Выборка.Учредители.Выгрузить());
		Данные.Учредители.Сортировать("НомерСтроки");
		Если Подробно Тогда
			ЗаполнитьПодробнуюИнформациюОбУчредителях(Данные.Учредители);
		КонецЕсли;
		
		Данные.Вставить("НовыеУчастники",    Данные.Учредители.Скопировать(Новый Структура("СуммаВзносаДоИзменения", 0)));
		Данные.Вставить("ВышедшиеУчастники", Данные.Учредители.Скопировать(Новый Структура("СуммаВзноса", 0)));
		
		Возврат Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДанныеРуководителяОрганизации(Организация, Дата, Подробно = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.Должность.Наименование КАК ДолжностьПредставление,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий КАК СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизаций";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СведенияОРуководителе = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
		Если Подробно Тогда
			ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОРуководителе);
		КонецЕсли;
		Возврат СведенияОРуководителе;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция НаименованиеПолноеВРодительномПадеже(Знач НаименованиеПолное)
	
	Склоняемое = НСтр("ru='Общество'");
	СклоняемоеВРодительномПадеже = НСтр("ru='Общества'");
	
	Если СтрНачинаетсяС(НаименованиеПолное, Склоняемое) Тогда
		СклоняемоеВРодительномПадеже = НРег(СклоняемоеВРодительномПадеже);
	ИначеЕсли СтрНачинаетсяС(НаименованиеПолное, ВРег(Склоняемое)) Тогда
		СклоняемоеВРодительномПадеже = ВРег(СклоняемоеВРодительномПадеже);
	ИначеЕсли СтрНачинаетсяС(НаименованиеПолное, НРег(Склоняемое)) Тогда
		СклоняемоеВРодительномПадеже = НРег(СклоняемоеВРодительномПадеже);
	Иначе
		Возврат НаименованиеПолное;
	КонецЕсли;
	
	Результат = СклоняемоеВРодительномПадеже + Сред(НаименованиеПолное, СтрДлина(Склоняемое) + 1);
	
	Возврат Результат;
	
КонецФункции

Функция УвеличитьЗначениеНаЕдиницу(НомерПункта)
	НомерПункта = НомерПункта + 1;
	Возврат НомерПункта;
КонецФункции

Функция ИмяПрограммы()
	
	Возврат ОбщегоНазначенияБП.ПредставлениеПрограммы();
	
КонецФункции

Функция СрокПолномочийПрописью(СрокПолномочий)
	
	Результат = СтрШаблон("%1 (%2) %3",
		Формат(СрокПолномочий, "ЧДЦ=; ЧГ=0"),
		СокрП(ЧислоПрописью(СрокПолномочий, "Л=ru_RU", ",,,,,,,,0")),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СрокПолномочий, "год,года,лет", Ложь)
		);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПоляПротокола(ИмяПоля)

	Если ИмяПоля = "ЮридическоеЛицо" Тогда
		
		Шаблон = "[ПолноеНаименование], ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП], адрес места нахождения: [ЮридическийАдрес]. Представитель: [ДолжностьПредставителя] [ФИОПолные], действует на основании [ПредставительНаОсновании]";
		
	ИначеЕсли ИмяПоля = "ФизическоеЛицо" Тогда
		
		Шаблон = "[ФИОПолные], [Гражданство], [ДокументПредставление], место регистрации: [АдресПрописки]";
		
	ИначеЕсли ИмяПоля = "Представитель" Тогда
		
		Шаблон = "[ФИОПолные], [ДолжностьПредставителя]";
		
	Иначе
		
		Шаблон = "";
		
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

Функция НовыйПараметрыУчредителяДляПротокола()
	
	ПараметрыУчредителя = Новый Структура();
	
	ПараметрыУчредителя.Вставить("ПолноеНаименование");
	ПараметрыУчредителя.Вставить("ЮридическийАдрес");
	ПараметрыУчредителя.Вставить("ОГРН");
	ПараметрыУчредителя.Вставить("ИНН");
	ПараметрыУчредителя.Вставить("КПП");
	ПараметрыУчредителя.Вставить("ФИОПолные");
	ПараметрыУчредителя.Вставить("Гражданство");
	ПараметрыУчредителя.Вставить("АдресПрописки");
	ПараметрыУчредителя.Вставить("ДокументПредставление");
	ПараметрыУчредителя.Вставить("ДолжностьПредставителя");
	ПараметрыУчредителя.Вставить("ПредставительНаОсновании");
	
	Возврат ПараметрыУчредителя;
	
КонецФункции

Процедура ЗаполнитьПодробнуюИнформациюОбУчредителях(ТаблицаУчредителей)
	
	ТаблицаУчредителей.Колонки.Добавить("СуммаВзносаСтрокой",    Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("СуммаВзносаПрописью",   Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("ДоляУставногоКапитала", ОписаниеТипаДоляУчредителя());
	ТаблицаУчредителей.Колонки.Добавить("ДоляУставногоКапиталаСтрокой", Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("СведенияОЮридическомЛице",     Новый ОписаниеТипов("Структура"));
	ТаблицаУчредителей.Колонки.Добавить("СведенияОФизическомЛице",      Новый ОписаниеТипов("Структура"));
	
	СуммаВзносаВсего = ТаблицаУчредителей.Итог("СуммаВзноса");
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МассивВзносов = ТаблицаУчредителей.ВыгрузитьКолонку("СуммаВзноса");
	МассивДолей = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100,
		МассивВзносов,
		РазрядностьДробнойЧастиДолиУчредителя());
	
	Если МассивДолей <> Неопределено Тогда
		ТаблицаУчредителей.ЗагрузитьКолонку(МассивДолей, "ДоляУставногоКапитала");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУчредителей Цикл
		
		СтрокаТаблицы.СуммаВзносаСтрокой = Формат(СтрокаТаблицы.СуммаВзноса, "ЧДЦ=2; ЧГ=3,0");
		СтрокаТаблицы.СуммаВзносаПрописью = ЧислоПрописью(СтрокаТаблицы.СуммаВзноса, "Л=ru", Валюта.ПараметрыПрописи);
		СтрокаТаблицы.ДоляУставногоКапиталаСтрокой = Формат(СтрокаТаблицы.ДоляУставногоКапитала, "ЧГ=0");
		
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			СтрокаТаблицы.СведенияОЮридическомЛице = СведенияОбУчредителеЮридическомЛице(
				СтрокаТаблицы.Учредитель,
				СтрокаТаблицы.ПредставительУчредителя,
				СтрокаТаблицы.ДолжностьПредставителя,
				СтрокаТаблицы.ПредставительНаОсновании);
		Иначе
			
			СтрокаТаблицы.СведенияОФизическомЛице = СведенияОбУчредителеФизическомЛице(СтрокаТаблицы.Учредитель);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОбУчредителеЮридическомЛице(ЮридическоеЛицо, ПредставительУчредителя, ДолжностьПредставителя, ПредставительНаОсновании)
	
	СведенияОЮридическомЛице = Новый Структура;
	
	СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ЮридическоеЛицо);
	СведенияОЮридическомЛице.Вставить("ПолноеНаименование", СведенияОЮрФизЛице.ПолноеНаименование);
	СведенияОЮридическомЛице.Вставить("ИНН", СведенияОЮрФизЛице.ИНН);
	СведенияОЮридическомЛице.Вставить("КПП", СведенияОЮрФизЛице.КПП);
	СведенияОЮридическомЛице.Вставить("ОГРН", СведенияОЮрФизЛице.ОГРН);
	СведенияОЮридическомЛице.Вставить("ЮридическийАдрес", СведенияОЮрФизЛице.ЮридическийАдрес);
	СведенияОЮридическомЛице.Вставить("Телефон", СведенияОЮрФизЛице.Телефоны);
	СведенияОЮридическомЛице.Вставить("Email", СведенияОЮрФизЛице.Email);
	
	Если ЗначениеЗаполнено(ПредставительУчредителя) Тогда
		ДанныеПредставителя = СведенияОбУчредителеФизическомЛице(ПредставительУчредителя);
		НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьПредставителя, "Наименование");
		ДанныеПредставителя.Вставить("Должность", НаименованиеДолжности);
		ДанныеПредставителя.Вставить("ДолжностьРодительныйПадеж", СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеДолжности, 2, ДолжностьПредставителя));
		ДанныеПредставителя.Вставить("ОснованияПолномочийРодительныйПадеж", ПредставительНаОсновании);
	КонецЕсли;
	СведенияОЮридическомЛице.Вставить("Представитель", ДанныеПредставителя);
	
	Возврат СведенияОЮридическомЛице;
	
КонецФункции

Функция СведенияОбУчредителеФизическомЛице(ФизическоеЛицо)
	
	СписокКадровыхДанных = "Фамилия,Имя,Отчество,Пол,ДатаРождения,МестоРожденияПредставление,ИНН,"
			+ "ФамилияИО,ИОФамилия,ФИОПолные,ДокументВид,ДокументСрокДействия,ДокументКодМВД,"
			+ "ДокументСерия,ДокументНомер,ДокументДатаВыдачи,"
			+ "ДокументКемВыдан,ДокументКодПодразделения,Страна,СтранаПолноеНаименование";
	
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо,
		СписокКадровыхДанных, ТекущаяДатаСеанса());
	
	Если КадровыеДанныеФизЛиц.Количество() = 0 Тогда
		Возврат Новый Структура(СписокКадровыхДанных);
	КонецЕсли;
	
	ДанныеФизическогоЛица = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КадровыеДанныеФизЛиц[0]);
	ДанныеФизическогоЛица.Вставить("ДокументПредставление", ПредставлениеДокументаФизическогоЛица(ДанныеФизическогоЛица));
	
	ДанныеФизическогоЛица.Вставить("ФИОРодительныйПадеж", 
		СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные, 
			2, ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
	
	ДанныеФизическогоЛица.Вставить("ФИОВинительныйПадеж",
		СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные,
			4, ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
	
	Если ДанныеФизическогоЛица.Страна = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, , Ложь);
		АдресПрописки = АдресСтруктурой.Представление;
		АдресИнформированияСтруктурой = "";
		АдресИнформирования = "";
		
		// В данных физлица код подразделения может быть указан не по шаблону 111-111 - преобразуем к нужному формату
		ДокументКодПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ДанныеФизическогоЛица.ДокументКодПодразделения);
		Если ЗначениеЗаполнено(ДокументКодПодразделения) И СтрДлина(ДокументКодПодразделения) = 6 Тогда
			ДанныеФизическогоЛица.ДокументКодПодразделения = СтрШаблон("%1-%2", Лев(ДокументКодПодразделения, 3), Прав(ДокументКодПодразделения, 3));
		КонецЕсли;
		
	Иначе
		АдресСтруктурой = "";
		АдресПрописки = "";
		АдресИнформированияСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, , Ложь);
		АдресИнформирования = АдресИнформированияСтруктурой.Представление;
	КонецЕсли;
	
	ДанныеФизическогоЛица.Вставить("АдресСтруктурой", АдресСтруктурой);
	ДанныеФизическогоЛица.Вставить("АдресПрописки", АдресПрописки);
	ДанныеФизическогоЛица.Вставить("АдресИнформированияСтруктурой", АдресИнформированияСтруктурой);
	ДанныеФизическогоЛица.Вставить("АдресИнформирования", АдресИнформирования);

	ДанныеФизическогоЛица.Вставить("Телефон", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица));
	ДанныеФизическогоЛица.Вставить("Email", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо,
			Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

Функция ПредставлениеДокументаФизическогоЛица(КадровыеДанные)
	
	ТекстСерия = ", серия: %1";
	ТекстНомер = ", № %1";
	ТекстДатаВыдачи = ", выдан: %1 года";
	ТекстСрокДействия = ", действует до: %1 года";
	ТекстКодПодразделения = ", № подр. %1";
	
	Возврат Строка(КадровыеДанные.ДокументВид)
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСерия), СтрШаблон(ТекстСерия, КадровыеДанные.ДокументСерия), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументНомер), СтрШаблон(ТекстНомер, КадровыеДанные.ДокументНомер), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументДатаВыдачи), СтрШаблон(ТекстДатаВыдачи, Формат(КадровыеДанные.ДокументДатаВыдачи,"Л=ru_RU; ДФ='дд ММММ гггг'")), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСрокДействия), СтрШаблон(ТекстСрокДействия, Формат(КадровыеДанные.ДокументСрокДействия,"Л=ru_RU; ДФ='дд ММММ гггг'")), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументКемВыдан), ", " + КадровыеДанные.ДокументКемВыдан, "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументКодПодразделения) И КадровыеДанные.ДокументВид = ВидДокументаПаспортРФ(),
			СтрШаблон(ТекстКодПодразделения, КадровыеДанные.ДокументКодПодразделения), "");
	
КонецФункции

Процедура ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОРуководителе)
	
	СписокДанных = "Фамилия,Имя,Отчество,Пол,ДатаРождения,МестоРожденияПредставление,Страна,ИНН,"
		+ "ФамилияИО,ИОФамилия,ФИОПолные,ДокументВид,ДокументСрокДействия,ДокументКодМВД,"
		+ "ДокументСерия,ДокументНомер,ДокументДатаВыдачи,"
		+ "ДокументКемВыдан,ДокументКодПодразделения,ДокументПредставление";
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СведенияОРуководителе.ФизическоеЛицо,
		СписокДанных, ТекущаяДатаСеанса());
	
	ДанныеФизическогоЛица = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КадровыеДанные[0]);
	ДанныеФизическогоЛица.Вставить("ДокументПредставление", ПредставлениеДокументаФизическогоЛица(ДанныеФизическогоЛица));
	
	ДанныеФизическогоЛица.Вставить("ФИОПолныеРодительныйПадеж",
		СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные,
			2, СведенияОРуководителе.ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
	
	ДанныеФизическогоЛица.Вставить("ФИОПолныеВинительныйПадеж",
		СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные,
			4, СведенияОРуководителе.ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
	
	Если ДанныеФизическогоЛица.Страна = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			СведенияОРуководителе.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, , Ложь);
		АдресПрописки = АдресСтруктурой.Представление;
		АдресИнформированияСтруктурой = "";
		АдресИнформирования = "";
	Иначе
		АдресСтруктурой = "";
		АдресПрописки = "";
		АдресИнформированияСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			СведенияОРуководителе.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, , Ложь);
		АдресИнформирования = АдресИнформированияСтруктурой.Представление;
	КонецЕсли;
	
	ДанныеФизическогоЛица.Вставить("АдресСтруктурой", АдресСтруктурой);
	ДанныеФизическогоЛица.Вставить("АдресПрописки", АдресПрописки);
	ДанныеФизическогоЛица.Вставить("АдресИнформированияСтруктурой", АдресИнформированияСтруктурой);
	ДанныеФизическогоЛица.Вставить("АдресИнформирования", АдресИнформирования);
	
	ДанныеФизическогоЛица.Вставить("Телефон", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СведенияОРуководителе.ФизическоеЛицо, 
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица));
	ДанныеФизическогоЛица.Вставить("Email", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СведенияОРуководителе.ФизическоеЛицо, 
			Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
	
	СведенияОРуководителе.Вставить("СведенияОФизическомЛице", ДанныеФизическогоЛица);
	
КонецПроцедуры

Функция ОписаниеУчредителя(Учредитель)
	
	ОписаниеУчредителя = "";
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		
		Реквизиты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ОГРН %1, ИНН %2, КПП %3, адрес места нахождения: %4'"),
			Учредитель.СведенияОЮридическомЛице.ОГРН,
			Учредитель.СведенияОЮридическомЛице.ИНН,
			Учредитель.СведенияОЮридическомЛице.КПП,
			Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес);
		
		Если Учредитель.СведенияОЮридическомЛице.Представитель.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ТекстДействующего = НСтр("ru = 'действующего'")
		Иначе
			ТекстДействующего = НСтр("ru = 'действующей'")
		КонецЕсли;
		
		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG> (%2) в лице %3 %4, %5 на основании %6,<BR>'"),
			Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
			Реквизиты,
			Учредитель.СведенияОЮридическомЛице.Представитель.ДолжностьРодительныйПадеж,
			Учредитель.СведенияОЮридическомЛице.Представитель.ФИОРодительныйПадеж,
			ТекстДействующего,
			Учредитель.СведенияОЮридическомЛице.Представитель.ОснованияПолномочийРодительныйПадеж);
		
	Иначе
		
		Адрес = ?(ЗначениеЗаполнено(Учредитель.СведенияОФизическомЛице.АдресПрописки),
			Учредитель.СведенияОФизическомЛице.АдресПрописки,
			Учредитель.СведенияОФизическомЛице.АдресИнформирования);
		
		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG> (%2, зарегистрирован по адресу: %3),<BR>'"),
			Учредитель.СведенияОФизическомЛице.ФИОПолные,
			Учредитель.СведенияОФизическомЛице.ДокументПредставление,
			Адрес);
		
	КонецЕсли;
	
	Возврат ОписаниеУчредителя;
	
КонецФункции

Функция ОписаниеДолейУставногоКапитала(Учредители)
	
	ОписаниеДолейУставногоКапитала = "";
	
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.СуммаВзноса <> 0 Тогда
			ОписаниеДолейУставногоКапитала = ОписаниеДолейУставногоКапитала
				+ ОписаниеУставногоКапиталаУчредителя(Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеДолейУставногоКапитала;
	
КонецФункции

Функция ОписаниеУставногоКапиталаУчредителя(Учредитель)
	
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		НаименованиеУчредителя = Учредитель.СведенияОЮридическомЛице.ПолноеНаименование;
	Иначе
		НаименованиеУчредителя = Учредитель.СведенияОФизическомЛице.ФИОПолные;
	КонецЕсли;
	
	ОписаниеУставногоКапиталаУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '<LI><DIV align=left>%1 - номинальная стоимость доли %2 рублей (%3), что составляет %4 %5 Уставного капитала.</DIV></LI>'"),
		НаименованиеУчредителя,
		Учредитель.СуммаВзносаСтрокой,
		Учредитель.СуммаВзносаПрописью,
		Учредитель.ДоляУставногоКапиталаСтрокой, 
		"%");
		
	Возврат ОписаниеУставногоКапиталаУчредителя;
	
КонецФункции

Функция ПодписьУчредителя(Учредитель)
	
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		
		ПодписьУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG><BR>Адрес: %2<BR>ИНН / КПП: %3 / %4<BR>Телефон: %5<BR>E-mail: %6<BR><BR>_____________________ %7 %8'"),
			Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
			Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес,
			Учредитель.СведенияОЮридическомЛице.ИНН,
			Учредитель.СведенияОЮридическомЛице.КПП,
			Учредитель.СведенияОЮридическомЛице.Телефон,
			Учредитель.СведенияОЮридическомЛице.Email,
			Учредитель.СведенияОЮридическомЛице.Представитель.Должность,
			Учредитель.СведенияОЮридическомЛице.Представитель.ФамилияИО);
		
	Иначе
		
		АдресУчредителя =
			?(ЗначениеЗаполнено(Учредитель.СведенияОФизическомЛице.АдресПрописки),
			Учредитель.СведенияОФизическомЛице.АдресПрописки,
			Учредитель.СведенияОФизическомЛице.АдресИнформирования);
		
		ПодписьУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG><BR>Адрес: %2<BR>ИНН: %3<BR>Телефон: %4<BR>E-mail: %5<BR><BR>_____________________ %8'"),
			Учредитель.СведенияОФизическомЛице.ФИОПолные,
			АдресУчредителя,
			Учредитель.СведенияОФизическомЛице.ИНН,
			Учредитель.СведенияОФизическомЛице.Телефон,
			Учредитель.СведенияОФизическомЛице.Email,
			Учредитель.СведенияОФизическомЛице.ФамилияИО);
		
	КонецЕсли;
	
	Возврат "<P>" + ПодписьУчредителя + "</P><BR>";
	
КонецФункции

Процедура ПодставитьПараметрВТекст(ТекстHTML, ИмяПараметра, ЗначениеПараметра)
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "{"+ИмяПараметра+"}", ЗначениеПараметра);
	
КонецПроцедуры

Функция ТекстСоСтрочнойБуквы(Текст)

	Возврат НРег(Лев(Текст, 1)) + Сред(Текст, 2);

КонецФункции

Функция СкопироватьКлючиСтруктуры(СтруктураИсточник)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Ключ = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Структура") Тогда
			ПустоеЗначение = СкопироватьКлючиСтруктуры(Значение);
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		ИначеЕсли ТипЗначения = Тип("СписокЗначений") И Значение.Количество() <> 0 Тогда
			ПустоеЗначение = Новый СписокЗначений;
			ПустоеЗначение.Добавить(СкопироватьКлючиСтруктуры(Значение[0].Значение));
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		Иначе
			ПустоеЗначение = Неопределено;
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Регистрация организации'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Процедура очищает хранилище общих настроек после завершения регистрации.
//
Процедура ОчиститьСлужебныеДанныеПослеРегистрации() Экспорт
	
	ВыборкаНастроек = ХранилищеОбщихНастроек.Выбрать(Новый Структура("КлючОбъекта", ИмяКлючаНастроек()));
	Пока ВыборкаНастроек.Следующий() Цикл
		ХранилищеОбщихНастроек.Удалить(
			ВыборкаНастроек.КлючОбъекта,
			ВыборкаНастроек.КлючНастроек,
			ВыборкаНастроек.Пользователь);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеГражданстваСтраны(СтранаПолноеНаименование)
	
	Если Не ЗначениеЗаполнено(СтранаПолноеНаименование) Тогда
		Возврат НСтр("ru = 'без гражданства'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'гражданство: %1'"), СтранаПолноеНаименование);
	
КонецФункции

#КонецОбласти

#Область ПолучениеИНН

Процедура ПолучитьКартинкуСКодомВФоне(ПараметрыПолучения, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКодаПолученияИНН = ДанныеСервисаРегистрации.ДанныеКодаПолученияИНН();
	
	ПоместитьВоВременноеХранилище(ДанныеКодаПолученияИНН, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьИННВФоне(ПараметрыПолучения, АдресРезультата = Неопределено) Экспорт
	
	ДанныеИНН = ДанныеСервисаРегистрации.ОпределитьИНН(ПараметрыПолучения.ДанныеФизическогоЛица, ПараметрыПолучения.Токен, ПараметрыПолучения.КодСКартинки);
	
	ПоместитьВоВременноеХранилище(ДанныеИНН, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ВнесениеИзмененийЕГРЮЛиЕГРИП

// Функция проверяет доступность внесения изменений в ЕГР по организационно-правовой форме организации.
//
// Параметры:
//   ЭтоИндивидуальныйПредприниматель - Булево - признак, является ли организация индивидуальным предпринимателем.
//   ПравоваяФорма - Строка - организационно-правовая форма организации.
//
// Возвращаемое значение:
//   Булево - Истина, если поддерживается внесение изменений в ЕГР для ОПФ организации.
//
Функция ДоступноВнесениеИзмененийЕГР(ЭтоИндивидуальныйПредприниматель, ПравоваяФорма) Экспорт
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.РегистрацияОрганизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для ИП всегда доступно внесение изменений в ЕГР.
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравоваяФорма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПоддерживаемаяПравоваяФорма Из РегистрацияОрганизацииКлиентСервер.ПоддерживаемыеПравовыеФормы() Цикл
		Если ВРег(СокрЛП(ПоддерживаемаяПравоваяФорма)) = ВРег(СокрЛП(ПравоваяФорма)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ЗаполнениеДаннымиЕГР

// Заполняет реквизиты объекта и формы данными, полученными из госреестров.
//
// Параметры:
//   ОтветДанныхЕГР - Структура - см. ОрганизацииФормыДляОтчетности.НовыйОтветДанныхЕГР(),
//                                результат запроса к сервису, предоставляющему данные госреестров
//   Форма  - ФормаКлиентскогоПриложения - форма РегистрацияОрганизации.ВнесениеИзмененийЕГР
//
Процедура ЗаполнитьДаннымиЕГР(ОтветДанныхЕГР, Форма) Экспорт
	
	ДанныеЕГР = ПолучитьИзВременногоХранилища(ОтветДанныхЕГР.АдресДанных);
	Если ТипЗнч(ДанныеЕГР) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем реквизит формы
	СуществующаяОрганизация = Справочники.Организации.НайтиОрганизацию(ДанныеЕГР.ИНН);
	Если ЗначениеЗаполнено(СуществующаяОрганизация) Тогда
		ОрганизацияОбъект = СуществующаяОрганизация.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияОбъект.Заполнить(Неопределено);
	КонецЕсли;
	ОрганизацияОбъект.ЮридическоеФизическоеЛицо = ДанныеЕГР.ЮридическоеФизическоеЛицо;
	Форма.ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Объект");
	
	// Обработка заполнения по умолчанию
	ОрганизацииФормыДляОтчетности.ЗаполнитьДаннымиЕГР(ОтветДанныхЕГР, Форма);
	
	Если ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
		И ЗначениеЗаполнено(ДанныеЕГР.ЮридическийАдрес) Тогда
		Форма.ЮридическийАдрес = ДанныеЕГР.ЮридическийАдрес.Представление;
		Форма.ЮридическийАдресЗначениеJSON = ДанныеЕГР.ЮридическийАдрес.КонтактнаяИнформация; // JSON-строка
	КонецЕсли;
	
	НомерТиповогоУстава = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЕГР, "НомерТиповогоУстава");
	Если ЗначениеЗаполнено(НомерТиповогоУстава) Тогда
		Форма.НомерТиповогоУставаПрежний = ОбщегоНазначения.ОписаниеТипаЧисло(2).ПривестиЗначение(НомерТиповогоУстава);
	Иначе
		Форма.НомерТиповогоУставаПрежний = 0;
	КонецЕсли;
	
	Форма.НомерТиповогоУстава = Форма.НомерТиповогоУставаПрежний;
	
КонецПроцедуры

// Получает сведения об учредителях, коды ОКВЭД, размер уставного капитала.
//
// Параметры:
//   ИННЗапрос        - Строка - ИНН, для которого следует получить информацию.
//   АдресРезультата  - Строка.
//
Процедура ПолучитьИнформациюОбУчредителяхИКодахОКВЭДВФоне(ИННЗапрос, АдресРезультата = Неопределено) Экспорт
	
	ИНН = СокрЛП(ИННЗапрос);
	ЭтоЮридическоеЛицо = (СтрДлина(ИНН) = 10);
	Если ЭтоЮридическоеЛицо Тогда
		ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхЮридическогоЛицаПоИНН(ИНН);
	Иначе
		ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	
	ДополнитьИнформациейОПредставителяхУчредителей(ИнформацияОСвязях);
	
	ПоместитьВоВременноеХранилище(ИнформацияОСвязях, АдресРезультата);
	
КонецПроцедуры

// Процедура заполнения дополнительных реквизитов формы и объекта после заполнения из ЕГР.
//
Процедура ЗаполнитьДополнительныеРеквизитыПоДаннымЕГР(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.РуководительНаименование = ФИО(Форма.РуководительФамилия, Форма.РуководительИмя, Форма.РуководительОтчество);
	Форма.ИННиОГРН = ИННиОГРН(Объект.Ссылка, Форма.ДатаРешения);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Объект.НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеИндивидуальногоПредпринимателя(
			Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
		Объект.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеИндивидуальногоПредпринимателя(
			Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.НаименованиеСокращенное) Тогда
		Форма.НаименованиеСокращенное = Объект.НаименованиеСокращенное;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.НаименованиеПолное) Тогда
		Форма.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		Форма.КодОКВЭД2 = Объект.КодОКВЭД2;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения об учредителях, коды ОКВЭД, размер уставного капитала.
//
// Параметры:
//   ИнформацияОСвязях - Структура - см. РаботаСКонтрагентами.НоваяИнформацияОСвязяхЮридическогоЛица()
//                       результат запроса к сервису, возвращающему информацию о связях юридического лица,
//                       его руководителей и учредителей с другими лицами по данным ЕГРЮЛ
//   Форма  - ФормаКлиентскогоПриложения - форма РегистрацияОрганизации.ВнесениеИзмененийЕГР
//
Процедура ЗаполнитьИнформацияОСвязях(ИнформацияОСвязях, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ИнформацияОСвязях.Свойство("УставныйКапитал", Форма.УставныйКапитал);
	
	Форма.Учредители.Очистить();
	Если ИнформацияОСвязях.Свойство("Учредители") Тогда
		
		Учредители = ИнформацияОСвязях.Учредители.Скопировать();
		Учредители.Колонки.Учредитель.Имя = "Наименование";
		Учредители.Колонки.СуммаКапитала.Имя = "СуммаВзноса";
		Для Каждого Учредитель Из Учредители Цикл
			Учредитель.Наименование = НаименованиеПолное(Учредитель.Наименование);
		КонецЦикла;
		
		ФизическиеЛицаКонтрагенты = НайтиУчредителейСредиФизическихЛицКонтрагентов(Учредители);
		
		МассивКоэффициентов = Учредители.ВыгрузитьКолонку("СуммаВзноса");
		МассивДолей = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(100, МассивКоэффициентов, 2);
		
		Для Индекс = 0 По Учредители.Количество() - 1 Цикл
			
			Учредитель = Учредители[Индекс];
			
			ФизическоеЛицоКонтрагент = УчредительФизическоеЛицоКонтрагент(Учредитель, ФизическиеЛицаКонтрагенты);
			
			НоваяСтрока = Форма.Учредители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Учредитель);
			
			Если ФизическоеЛицоКонтрагент <> Неопределено Тогда
				НоваяСтрока.Ссылка = ФизическоеЛицоКонтрагент.Ссылка;
				НоваяСтрока.Наименование = ФизическоеЛицоКонтрагент.НаименованиеПолное;
			КонецЕсли;
			
			НоваяСтрока.ДоляУчастия = ?(МассивДолей <> Неопределено, МассивДолей[Индекс], 0);
			НоваяСтрока.ТипУчредителя = ТипУчредителя(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ВидыДеятельности.Очистить();
	Если ИнформацияОСвязях.Свойство("ВидыДеятельности") Тогда
		
		ТаблицаВидовДеятельности = ИнформацияОСвязях.ВидыДеятельности;
		
		ОсновнойКод = ?(ЗначениеЗаполнено(Объект.КодОКВЭД2), Объект.КодОКВЭД2, "");
		ДополнительныеКоды = Новый Массив;
		Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
			Если ВидДеятельности.Классификатор = "ОКВЭД2" Тогда
				ЗаполнитьЗначенияСвойств(Форма.ВидыДеятельности.Добавить(), ВидДеятельности);
				Если ВидДеятельности.Код <> ОсновнойКод Тогда
					ДополнительныеКоды.Добавить(ВидДеятельности.Код);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДополнительныеКодыОКВЭД2 = СтрСоединить(ДополнительныеКоды, ";");
		
	КонецЕсли;
	
	Если Форма.ВидыДеятельности.Количество() = 0
		И ЗначениеЗаполнено(Объект.КодОКВЭД2) Тогда
		НоваяСтрока = Форма.ВидыДеятельности.Добавить();
		НоваяСтрока.Код = Объект.КодОКВЭД2;
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеПолное(НаименованиеЕГР)
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	
	НаименованиеПолное = НаименованиеЕГР;
	Для каждого ПравоваяФорма Из ПравовыеФормы Цикл
		Если СтрНачинаетсяС(НаименованиеЕГР, ВРег(ПравоваяФорма) + " ") Тогда
			НаименованиеПолное = ПравоваяФорма + Сред(НаименованиеЕГР, СтрДлина(ПравоваяФорма) + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаименованиеПолное;
	
КонецФункции

Функция ТипУчредителя(Учредитель)
	
	Если ТипЗнч(Учредитель.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ТипЗнч(Учредитель.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	ДлинаИНН = СтрДлина(СокрЛП(Учредитель.ИНН));
	Если ДлинаИНН = 10 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ИначеЕсли ДлинаИНН = 12 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Учредитель.Наименование, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
КонецФункции

Процедура ДополнитьИнформациейОПредставителяхУчредителей(ИнформацияОСвязях)
	
	Если Не ИнформацияОСвязях.Свойство("Учредители") Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОСвязях.Учредители.Колонки.Добавить("ПредставительУчредителя", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИнформацияОСвязях.Учредители.Колонки.Добавить("ДолжностьПредставителя", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ИнформацияОСвязях.Учредители.Колонки.Добавить("ПредставительНаОсновании", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Для Каждого Учредитель Из ИнформацияОСвязях.Учредители Цикл
		
		Если ПустаяСтрока(Учредитель.ИНН) Тогда
			Продолжить;
		КонецЕсли;
		
		ДлинаИНН = СтрДлина(СокрЛП(Учредитель.ИНН));
		Если ДлинаИНН <> 10 Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Учредитель.ИНН);
		ДанныеУчредителя = Новый Структура("ОписаниеОшибки", "");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОписаниеОшибки) Тогда
			ДанныеУчредителя.ОписаниеОшибки = СведенияОКонтрагенте.ОписаниеОшибки;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ЕГРЮЛ) Тогда
			ДанныеУчредителя = СведенияОКонтрагенте.ЕГРЮЛ;
		Иначе
			ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
			ДанныеУчредителя.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, Учредитель.ИНН);
		КонецЕсли;
		ДанныеУчредителя.Вставить("ИНН", Учредитель.ИНН);
		Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
		Если Не ЗначениеЗаполнено(ДанныеУчредителя.ОписаниеОшибки) Тогда
			Если ЗначениеЗаполнено(ДанныеУчредителя.Руководители) Тогда
				ЗаполнитьЗначенияСвойств(Руководитель, ДанныеУчредителя.Руководители[0]);
			Иначе
				Руководитель = Неопределено;
			КонецЕсли;
			ДанныеУчредителя.Вставить("Руководитель", Руководитель);
			ДанныеУчредителя.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(ДанныеУчредителя.ВидДеятельности), ДанныеУчредителя.ВидДеятельности.Код, Неопределено));
			ДанныеУчредителя.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(ДанныеУчредителя.ВидДеятельности) И ДанныеУчредителя.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеУчредителя.ОписаниеОшибки) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Контрагенты,
				,
				ДанныеУчредителя.ОписаниеОшибки);
			ВызватьИсключение ДанныеУчредителя.ОписаниеОшибки;
		КонецЕсли;
		
		СведенияОРуководителе = СведенияОРуководителеУчредителя(ДанныеУчредителя);
		ЗаполнитьЗначенияСвойств(Учредитель, СведенияОРуководителе);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОРуководителеУчредителя(ДанныеУчредителя, СоздаватьФизЛицо = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставительУчредителя", Справочники.ФизическиеЛица.ПустаяСсылка());
	Результат.Вставить("ДолжностьПредставителя", Справочники.Должности.ПустаяСсылка());
	Результат.Вставить("ПредставительНаОсновании", "");
	
	Если ДанныеУчредителя.Свойство("Руководитель") И ДанныеУчредителя.Руководитель <> Неопределено Тогда
		
		РуководительСсылка = Справочники.Организации.ФизическоеЛицо(
			ДанныеУчредителя.Руководитель.Фамилия,
			ДанныеУчредителя.Руководитель.Имя,
			ДанныеУчредителя.Руководитель.Отчество,
			ДанныеУчредителя.Руководитель.ИНН);
			
		Если ЗначениеЗаполнено(РуководительСсылка) Тогда
			Результат.ПредставительУчредителя = РуководительСсылка;
		ИначеЕсли СоздаватьФизЛицо Тогда
			ДанныеФизическогоЛица = НовыеДанныеФизическогоЛица();
			ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ДанныеУчредителя.Руководитель);
			ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеФизическогоЛица.Пол, ДанныеФизическогоЛица.Отчество);
			Результат.ПредставительУчредителя = ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ПредставительУчредителя) Тогда
			Результат.ДолжностьПредставителя = РаботаСДолжностямиБППовтИсп.ДолжностьПоНаименованию(ДанныеУчредителя.Руководитель.Должность);
		КонецЕсли;
		
		Результат.ПредставительНаОсновании = РегистрацияОрганизацииКлиентСервер.ОснованиеПолномочийПредставителя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура отложенного заполнения наименований видов деятельности в коллекции формы.
// Из ЕГРЮЛ возвращаются только коды ОКВЭД, наименования заполняем из макета при необходимости.
// Например, перед открытием формы ИзменениеВидовДеятельности.
//
// Параметры:
//   КоллекцияВидовДеятельности - ДанныеФормыКоллекция с колонками:
//     * Код - Строка - код ОКВЭД
//     * ЭтоОКВЭД2 - Булево - Истина, если это ОКВЭД2
//     * Наименование - Строка - наименование вида деятельности
//
Процедура ЗаполнитьНаименованияВидовДеятельности(КоллекцияВидовДеятельности) Экспорт
	
	Перем ОКВЭД, ОКВЭД2;
	
	Для Каждого ВидДеятельности Из КоллекцияВидовДеятельности Цикл
		
		Если ВидДеятельности.ЭтоОКВЭД2 Тогда
			Если ОКВЭД2 = Неопределено Тогда
				ОКВЭД2 = РегистрыСведений.КлассификаторОКВЭД2.ФиксированноеСоответствиеКодНаименование();
			КонецЕсли;
			Классификатор = ОКВЭД2;
		Иначе
			Если ОКВЭД = Неопределено Тогда
				ОКВЭД = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД");
			КонецЕсли;
			Классификатор = ОКВЭД;
		КонецЕсли;
		
		Наименование = Классификатор.Получить(ВидДеятельности.Код);
		ВидДеятельности.Наименование = ?(Наименование <> Неопределено, Наименование, "");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьУчредителей

// Записывает учредителей.
//
// Параметры:
//   Учредители - ТаблицаЗначений - таблица с колонками:
//     * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//     * Наименование - Строка - ФИО физического или наименование юридического лица
//     * ИНН - Строка
//     * ПредставительУчредителя - СправочникСсылка.ФизическиеЛица - представитель юридического лица
//     * ДолжностьПредставителя - СправочникСсылка.Должности - должность представителя юридического лица
//     * ПредставительНаОсновании - Строка - представитель юридического лица
//   АдресРезультата - Строка - адрес временного хранилища для таблицы учредителей
//
Процедура ЗаписатьУчредителейВФоне(Знач Учредители, АдресРезультата = Неопределено) Экспорт
	
	Результат = ЗаписатьУчредителей(Учредители);
	
	ПоместитьВоВременноеХранилище(Результат.Учредители, АдресРезультата);
	
КонецПроцедуры

// Записывает учредителей.
//
// Параметры:
//   Учредители - ТаблицаЗначений - таблица с колонками:
//     * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//     * Наименование - Строка - ФИО физического или наименование юридического лица
//     * ИНН - Строка
//     * ПредставительУчредителя - СправочникСсылка.ФизическиеЛица - представитель юридического лица
//     * ДолжностьПредставителя - СправочникСсылка.Должности - должность представителя юридического лица
//     * ПредставительНаОсновании - Строка - представитель юридического лица
//
// Возвращаемое значение:
//   Структура
//
Функция ЗаписатьУчредителей(Знач Учредители) Экспорт
	
	ФизическиеЛицаКонтрагенты = НайтиУчредителейСредиФизическихЛицКонтрагентов(Учредители);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Учредитель Из Учредители Цикл
			
			Если Учредитель.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Если Не ПустаяСтрока(Учредитель.ИНН) Тогда
					СведенияОбОрганизации = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Учредитель.ИНН);
					ДанныеЗаполненияПоИНН = Новый Структура("ОписаниеОшибки", "");
					Если ЗначениеЗаполнено(СведенияОбОрганизации.ОписаниеОшибки) Тогда
						ДанныеЗаполненияПоИНН.ОписаниеОшибки = СведенияОбОрганизации.ОписаниеОшибки;
					ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.ЕГРЮЛ) Тогда
						ДанныеЗаполненияПоИНН = СведенияОбОрганизации.ЕГРЮЛ;
					Иначе
						ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
						ДанныеЗаполненияПоИНН.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, Учредитель.ИНН);
					КонецЕсли;
					ДанныеЗаполненияПоИНН.Вставить("ИНН", Учредитель.ИНН);
					Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
					Если Не ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.ОписаниеОшибки) Тогда
						Если ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.Руководители) Тогда
							ЗаполнитьЗначенияСвойств(Руководитель, ДанныеЗаполненияПоИНН.Руководители[0]);
						Иначе
							Руководитель = Неопределено;
						КонецЕсли;
						ДанныеЗаполненияПоИНН.Вставить("Руководитель", Руководитель);
						ДанныеЗаполненияПоИНН.Вставить("КодОКВЭД",
							?(ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.ВидДеятельности), ДанныеЗаполненияПоИНН.ВидДеятельности.Код, Неопределено));
						ДанныеЗаполненияПоИНН.Вставить("ЭтоОКВЭД2",  
							?(ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.ВидДеятельности) И ДанныеЗаполненияПоИНН.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.ОписаниеОшибки) Тогда
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.Контрагенты,
								,
								ДанныеЗаполненияПоИНН.ОписаниеОшибки);
						ВызватьИсключение ДанныеЗаполненияПоИНН.ОписаниеОшибки;
					КонецЕсли;
					
					ДанныеЗаполнения = Новый Структура;
					ДанныеЗаполнения.Вставить("ИНН", ДанныеЗаполненияПоИНН.ИНН);
					ДанныеЗаполнения.Вставить("КПП", ДанныеЗаполненияПоИНН.КПП);
					ДанныеЗаполнения.Вставить("Наименование", ДанныеЗаполненияПоИНН.Наименование);
					ДанныеЗаполнения.Вставить("НаименованиеПолное", ДанныеЗаполненияПоИНН.НаименованиеПолное);
					ДанныеЗаполнения.Вставить("НаименованиеСокращенное", ДанныеЗаполненияПоИНН.НаименованиеСокращенное);
					ДанныеЗаполнения.Вставить("РегистрационныйНомер", ДанныеЗаполненияПоИНН.РегистрационныйНомер);
					ДанныеЗаполнения.Вставить("ДатаРегистрации", ДанныеЗаполненияПоИНН.ДатаРегистрации);
					ДанныеЗаполнения.Вставить("ЮридическийАдресЗначениеJSON", ДанныеЗаполненияПоИНН.ЮридическийАдрес.КонтактнаяИнформация);
					Если ЗначениеЗаполнено(ДанныеЗаполненияПоИНН.Телефон) Тогда
						ДанныеЗаполнения.Вставить("ТелефонЗначениеJSON", ДанныеЗаполненияПоИНН.Телефон.КонтактнаяИнформация);
					КонецЕсли;
					ДанныеЗаполнения.Вставить("Руководитель", ДанныеЗаполненияПоИНН.Руководитель);
					
					ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения, ФизическиеЛицаКонтрагенты);
				ИначеЕсли Не ПустаяСтрока(Учредитель.Наименование) Тогда
					ДанныеЗаполнения = Новый Структура;
					ДанныеЗаполнения.Вставить("Наименование", Учредитель.Наименование);
					ДанныеЗаполнения.Вставить("НаименованиеПолное", Учредитель.Наименование);
					ДанныеЗаполнения.Вставить("НаименованиеСокращенное", Учредитель.Наименование);
					ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения, ФизическиеЛицаКонтрагенты);
				КонецЕсли;
				
			ИначеЕсли Учредитель.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ЗаписатьУчредителяФизическоеЛицо(Учредитель, ФизическиеЛицаКонтрагенты);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Новый Структура("Учредители", Учредители);
	
КонецФункции

Процедура ЗаписатьУчредителяФизическоеЛицо(Учредитель, ФизическиеЛицаКонтрагенты)
	
	Если ПустаяСтрока(Учредитель.ИНН) И ПустаяСтрока(Учредитель.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = УчредительФизическоеЛицоКонтрагент(
		Учредитель, ФизическиеЛицаКонтрагенты, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Если ФизическоеЛицо <> Неопределено Тогда
		Учредитель.Ссылка = ФизическоеЛицо.Ссылка;
		Учредитель.Наименование = ФизическоеЛицо.НаименованиеПолное;
	Иначе
		ДанныеФизическогоЛица = НовыеДанныеФизическогоЛица();
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ФизическиеЛицаКлиентСервер.ЧастиИмени(Учредитель.Наименование));
		ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеФизическогоЛица.Пол, ДанныеФизическогоЛица.Отчество);
		ДанныеФизическогоЛица.ИНН = Учредитель.ИНН;
		Учредитель.Ссылка = ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения, ФизическиеЛицаКонтрагенты)
	
	Если ПустаяСтрока(Учредитель.ИНН) И ПустаяСтрока(Учредитель.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = УчредительФизическоеЛицоКонтрагент(
		Учредитель, ФизическиеЛицаКонтрагенты, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Если Контрагент <> Неопределено Тогда
		Учредитель.Ссылка = Контрагент.Ссылка;
		Учредитель.Наименование = Контрагент.НаименованиеПолное;
	Иначе
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Заполнить(ДанныеЗаполнения);
		КонтрагентОбъект.Записать();
		Учредитель.Ссылка = КонтрагентОбъект.Ссылка;
		Учредитель.Наименование = КонтрагентОбъект.НаименованиеПолное;
	КонецЕсли;
	
	СведенияОРуководителеУчредителя = СведенияОРуководителеУчредителя(ДанныеЗаполнения, Истина);
	ЗаполнитьЗначенияСвойств(Учредитель, СведенияОРуководителеУчредителя);
	
КонецПроцедуры

// Ищет в справочниках ФизическиеЛица и Контрагенты учредителей по ИНН, ФИО и наименованию.
//
// Параметры:
//   Учредители - ТаблицаЗначений - таблица с колонками:
//     * Наименование - Строка - ФИО физического или наименование юридического лица
//     * ИНН - Строка
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция НайтиУчредителейСредиФизическихЛицКонтрагентов(Учредители)
	
	ИННУчредителей = ОбщегоНазначения.ВыгрузитьКолонку(Учредители, "ИНН", Истина);
	НаименованияУчредителей = ОбщегоНазначения.ВыгрузитьКолонку(Учредители, "Наименование", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИННУчредителей", ИННУчредителей);
	Запрос.УстановитьПараметр("НаименованияУчредителей", НаименованияУчредителей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&ИННУчредителей)
	|	И НЕ Контрагенты.ИНН ПОДОБНО """"
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НаименованиеПолное В(&НаименованияУчредителей)
	|	И Контрагенты.ИНН ПОДОБНО """"
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо),
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.ФИО,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН В(&ИННУчредителей)
	|	И НЕ ФизическиеЛица.ИНН ПОДОБНО """"
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо),
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.ФИО,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ФИО В(&НаименованияУчредителей)
	|	И ФизическиеЛица.ИНН ПОДОБНО """"
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ФизическиеЛицаКонтрагенты = Запрос.Выполнить().Выгрузить();
	ВидЮридическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	МассивУдаляемыхСтрок = Новый Массив;
	
	// Исключим ситуации, когда для юридического лица указывается некорректный ИНН.
	// Для юридических лиц выполняется запрос реквизитов через сервис - не нужно подавать заведомо ошибочные ИНН.
	Для Каждого ТекущаяСтрока Из ФизическиеЛицаКонтрагенты Цикл
		Если ТекущаяСтрока.ЮридическоеФизическоеЛицо = ВидЮридическоеЛицо И СтрДлина(ТекущаяСтрока.ИНН) > 10 Тогда
			МассивУдаляемыхСтрок.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ИндексЭлемента = МассивУдаляемыхСтрок.Количество() - 1;
	Пока ИндексЭлемента >=0 Цикл
		ФизическиеЛицаКонтрагенты.Удалить(МассивУдаляемыхСтрок[ИндексЭлемента]);
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	Возврат ФизическиеЛицаКонтрагенты;
	
КонецФункции

Функция УчредительФизическоеЛицоКонтрагент(Учредитель, ФизическиеЛицаКонтрагенты, ЮридическоеФизическоеЛицо = Неопределено)
	
	Если Не ПустаяСтрока(Учредитель.ИНН) Тогда
		Отбор = Новый Структура("ИНН", Учредитель.ИНН);
	ИначеЕсли Не ПустаяСтрока(Учредитель.Наименование) Тогда
		Отбор = Новый Структура("Наименование", Учредитель.Наименование);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо <> Неопределено Тогда
		Отбор.Вставить("ЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	КонецЕсли;
	
	НайденныеУчредители = ФизическиеЛицаКонтрагенты.НайтиСтроки(Отбор);
	Если НайденныеУчредители.Количество() <> 0 Тогда
		ИскомыйУчредитель = НайденныеУчредители[0];
		Для Индекс = 1 По НайденныеУчредители.ВГраница() Цикл
			Если НайденныеУчредители[Индекс].Приоритет < ИскомыйУчредитель.Приоритет Тогда
				ИскомыйУчредитель = НайденныеУчредители[Индекс];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИскомыйУчредитель;
	
КонецФункции

Функция ФИО(Фамилия, Имя, Отчество)
	
	Строки = Новый Массив;
	Если Не ПустаяСтрока(Фамилия) Тогда
		Строки.Добавить(Фамилия);
	КонецЕсли;
	Если Не ПустаяСтрока(Имя) Тогда
		Строки.Добавить(Имя);
	КонецЕсли;
	Если Не ПустаяСтрока(Отчество) Тогда
		Строки.Добавить(Отчество);
	КонецЕсли;
	
	Возврат СтрСоединить(Строки, " ");
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитовУчредителей

// Проверяет все ли необходимые реквизиты учредителя заполнены
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяЗаполнены(Учредитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Учредитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Учредитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат РеквизитыУчредителяКонтрагентаЗаполнены(Учредитель);
	ИначеЕсли ТипЗнч(Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат РеквизитыУчредителяФизическогоЛицаЗаполнены(Учредитель);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверки реквизитов юридического лица
//
// Параметры:
//   Учредитель - СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяКонтрагентаЗаполнены(Учредитель)
	
	ПроверяемыеРеквизиты = "НаименованиеПолное, ИНН, КПП, РегистрационныйНомер, ДатаРегистрации";
	ПроверяемаяКонтактнаяИнформация = "ЮрАдресКонтрагента";
	
	Возврат ПроверитьРеквизитыУчредителя(Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация);
	
КонецФункции

// Функция проверки реквизитов физического лица
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяФизическогоЛицаЗаполнены(Учредитель)
	
	ПроверяемыеРеквизиты = "Фамилия, Имя, Пол, ДатаРождения";
	ПроверяемаяКонтактнаяИнформация =
		"АдресДляИнформированияФизическиеЛица, АдресПоПропискеФизическиеЛица, ТелефонРабочийФизическиеЛица";
	ПроверяемыеДанныеПаспортаРФ = "Серия, Номер, ДатаВыдачи, КемВыдан, КодПодразделения";
	ПроверяемыеДанныеУдостоверенийЛичностиНеГражданРФ = "Номер, ДатаВыдачи, КемВыдан";
	
	Возврат ПроверитьРеквизитыУчредителя(
		Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация, ПроверяемыеДанныеПаспортаРФ,
		ПроверяемыеДанныеУдостоверенийЛичностиНеГражданРФ);
	
КонецФункции

// Функция проверки заполнения реквизитов учредителя
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//   ПроверяемыеРеквизиты - Строка - имена проверяемых реквизитов объекта разделенные запятыми
//   ПроверяемаяКонтактнаяИнформация - Строка - имена проверяемых видов контактной информации разделенные запятыми
//   ПроверяемыеПаспортныеДанные - Строка - имена проверяемых реквизитов регистра ДокументыФизическихЛиц разделенные запятыми
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция ПроверитьРеквизитыУчредителя(Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация = "", ПроверяемыеПаспортныеДанныеРФ = "", ПроверяемыеПаспортныеДанныеНеГражданРФ = "")
	
	ПроверяемыеРеквизиты = СтрЗаменить(ПроверяемыеРеквизиты, " ", "");
	ПроверяемаяКонтактнаяИнформация = СтрЗаменить(ПроверяемаяКонтактнаяИнформация, " ", "");
	ПроверяемыеПаспортныеДанныеРФ = СтрЗаменить(ПроверяемыеПаспортныеДанныеРФ, " ", "");
	ПроверяемыеПаспортныеДанныеНеГражданРФ = СтрЗаменить(ПроверяемыеПаспортныеДанныеНеГражданРФ, " ", "");
	
	// Проверка заполнения значений реквизитов
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Учредитель, ПроверяемыеРеквизиты);
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		ЗначениеРеквизита = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения контактной информации
	ВидыКонтактнойИнформацииПоТипам = РазложитьПроверяемуюКонтактнуюИнформациюПоТипам(ПроверяемаяКонтактнаяИнформация);
	
	Для Каждого СтрокаПроверяемогоТипа Из ВидыКонтактнойИнформацииПоТипам Цикл
		НайденнаяКонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Учредитель), СтрокаПроверяемогоТипа.Тип, СтрокаПроверяемогоТипа.Виды);
		Если НайденнаяКонтактнаяИнформация.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения связанных регистров сведений
	Если ТипЗнч(Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДокументыФизическихЛицСрезПоследних.Период КАК Период,
			|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
			|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
			|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
			|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
			|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
			|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
			|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
			|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения,
			|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
			|	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление,
			|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента КАК УдалитьВидДокумента,
			|	ДокументыФизическихЛицСрезПоследних.ФамилияЛатиницей КАК ФамилияЛатиницей,
			|	ДокументыФизическихЛицСрезПоследних.ИмяЛатиницей КАК ИмяЛатиницей,
			|	ДокументыФизическихЛицСрезПоследних.СтранаВыдачи КАК СтранаВыдачи
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
			|			,
			|			Физлицо = &ФизЛицо
			|				И ВидДокумента В (&ВидыДокументов)
			|				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних";
		
		Запрос.УстановитьПараметр("ФизЛицо", Учредитель);
		Запрос.УстановитьПараметр("ВидыДокументов", РазрешенныеВидыДокументовУдостоверяющихЛичность());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Возврат Ложь;
		Иначе
			
			ГражданинРФ = (Выборка.ВидДокумента = ВидДокументаПаспортРФ());
			
			Если ГражданинРФ Тогда
				ПроверяемыеДанныеУдостоверенияЛичности = ПроверяемыеПаспортныеДанныеРФ;
				ЦифровыеРеквизиты = ОписаниеЦифровыхРеквизитовПаспортаРФ();
			Иначе
				ПроверяемыеДанныеУдостоверенияЛичности = ПроверяемыеПаспортныеДанныеНеГражданРФ;
				ЦифровыеРеквизиты = Неопределено;
			КонецЕсли;
			
			Для Каждого РеквизитПаспорта Из СтрРазделить(ПроверяемыеДанныеУдостоверенияЛичности, ",") Цикл
				ЗначениеРеквизита = Выборка[РеквизитПаспорта];
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Возврат Ложь;
				ИначеЕсли ГражданинРФ
					И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЦифровыеРеквизиты, РеквизитПаспорта) <> Неопределено Тогда
					
					ЗначениеЧислом = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ЗначениеРеквизита));
					Если СтрДлина(ЗначениеЧислом) <> ЦифровыеРеквизиты[РеквизитПаспорта] Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеЦифровыхРеквизитовПаспортаРФ()
	
	Результат = Новый Структура;
	Результат.Вставить("Серия", 4);
	Результат.Вставить("Номер", 6);
	Результат.Вставить("КодПодразделения", 6);
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаПаспортРФ()
	
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	
КонецФункции

Функция РазрешенныеВидыДокументовУдостоверяющихЛичность()
	
	Результат = Новый Массив;
	КодыВидовДокументов = ДокументыФизическихЛицБП.КодыФНСВидовДокументов();
	Для Каждого ТекущийВидДокумента Из КодыВидовДокументов Цикл
		Результат.Добавить(ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(ТекущийВидДокумента.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументовДляВнесенияИзмененийЕГРЮЛиЕГРИП

Процедура СоздатьЗаявлениеОВнесенииИзмененийЕГР(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	ДанныеПомощникаЗаполнения = Параметры.ДанныеПомощникаЗаполнения;
	ДанныеОрганизации = ДанныеПомощникаЗаполнения.ДанныеОрганизации;
	
	// Если заявление создается при начале работы, нужно записать новую организацию
	Если ПолучитьФункциональнуюОпцию("НачалоРаботы") Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			// Организация
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
				ЗаписатьОрганизацию(ДанныеОрганизации));
			
			// Учетная политика
			ДанныеУчетнойПолитики = УчетнаяПолитикаПоУмолчанию(ДанныеОрганизации.ЮридическоеФизическоеЛицо);
			ДанныеУчетнойПолитики.Вставить("Организация", Результат.Организация);
			НастройкиУчета.ОчисткаНастроекУчетнойПолитики(Результат.Организация);
			НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		Организация = Результат.Организация;
	Иначе
		Организация = ДанныеОрганизации.Ссылка;
	КонецЕсли;
	
	Попытка
		
		Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Учредители
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
				ЗаписатьУчредителей(ДанныеОрганизации.Учредители));
		КонецЕсли;
		
		// Регистрирующий орган
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
			ОпределитьРегистрирующийОрган(ДанныеПомощникаЗаполнения));
		
		// Заявление о регистрации изменений
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
			СоздатьЗаявлениеРегистрацииИзменений(Организация, Параметры));
		
		ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(Результат,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ВладелецСоздаваемыхФайлов(ИмяФормы, ИзмененияВносятсяВУчредительныеДокументы, Параметры)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Результат = ?(ИзмененияВносятсяВУчредительныеДокументы,
			Параметры.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы,
			Параметры.ЗаявлениеОВнесенииИзмененийЕГР);
	Иначе
		Результат = Параметры.ЗаявлениеОВнесенииИзмененийЕГР;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗаявлениеОВнесенииИзмененийЕГР(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	// Флаг модифицированности данных заявления - т.к. заявление уже создано, проверяем изменены ли данные,
	// на основании которых заполнено заявление
	Модифицированность = Параметры.Модифицированность;
	
	ДанныеПомощникаЗаполнения = Параметры.ДанныеПомощникаЗаполнения;
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	ДанныеЗаявителя = ДанныеПомощникаЗаполнения.ДанныеЗаявителя;
	ДанныеОрганизации = ДанныеПомощникаЗаполнения.ДанныеОрганизации;
	
	ЭтоЮрЛицо = (ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ДанныеПротоколаРешения = Новый Структура("Номер, Дата", "___", ДанныеПомощникаЗаполнения.ДатаРешения);
	
	ИменаФайлов = ИменаФайлов();
	
	ВладелецФайлов = ВладелецСоздаваемыхФайлов(Параметры.ИмяФормы,
		ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
		Параметры);
	
	СтатусЗаявления = ?(Параметры.ЗаявлениеВРаботе,
		ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой(),
		ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
	
	ПакетДокументов = Новый Массив;
	
	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ДанныеПомощникаЗаполнения.ДатаРешения,
		ДанныеПомощникаЗаполнения.СпособПодачиДокументов,
		ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
		Ложь);
	
	Попытка
		
		Если Модифицированность Тогда
			// Заявитель
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
				ЗаписатьЗаявителя(ДанныеЗаявителя));
			// Заявление о регистрации изменений
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
				СоздатьЗаявлениеРегистрацииИзменений(ДанныеОрганизации.Ссылка, Параметры));
			
			ВладелецФайлов = ВладелецСоздаваемыхФайлов(Параметры.ИмяФормы,
				ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
				Результат);
			
			ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(Результат,
				СтатусЗаявления);
		Иначе
			ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(Параметры,
				СтатусЗаявления);
		КонецЕсли;
		
		// Регистрирующий орган
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
			ОпределитьРегистрирующийОрган(ДанныеПомощникаЗаполнения));
			
		Если ЭтоЮрЛицо Тогда
			
			Если Модифицированность Тогда
				// Протокол собрания или решение единственного учредителя
				УчредителиПоТипам = УчредителиПоТипам(ДанныеОрганизации.Учредители);
				КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
				КоличествоФизическихЛиц  = УчредителиПоТипам.ФизическиеЛица.Количество();
				ЕдинственныйУчредительЮридическоеЛицо = (КоличествоЮридическихЛиц = 1) И (КоличествоФизическихЛиц = 0);
				ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
				НесколькоУчредителей = (Не ЕдинственныйУчредительЮридическоеЛицо И Не ЕдинственныйУчредительФизическоеЛицо);
				
				Если ЕдинственныйУчредительФизическоеЛицо Тогда
					ИмяМакетаПротоколаРешения = "РешениеЕдинственногоУчредителяДляИзмененияРеквизитов";
					ИмяФайлаПротоколаРешения = ИменаФайлов.РешениеЕдинственногоУчредителя;
				ИначеЕсли НесколькоУчредителей Тогда
					ИмяМакетаПротоколаРешения = "ПротоколСобранияУчредителейДляИзмененияРеквизитов";
					ИмяФайлаПротоколаРешения = ИменаФайлов.ПротоколСобранияУчредителей;
				ИначеЕсли ЕдинственныйУчредительЮридическоеЛицо Тогда
					ИмяМакетаПротоколаРешения = "ПротоколСобранияУчредителейЕдинственногоУчредителяДляИзмененияРеквизитов";
					ИмяФайлаПротоколаРешения = ИменаФайлов.ПротоколСобранияУчредителейЕдинственногоУчредителя;
				КонецЕсли;
				
				Если ИмяМакетаПротоколаРешения <> Неопределено Тогда
					ПротоколРешениеУчредителейООО = ПротоколРешениеУчредителейОООДляИзмененияРеквизитов(ДанныеПомощникаЗаполнения, ИмяМакетаПротоколаРешения);
				КонецЕсли;
				Если ПротоколРешениеУчредителейООО <> Неопределено Тогда
					ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов, ИмяФайлаПротоколаРешения, ПротоколРешениеУчредителейООО));
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы Тогда
				
				Если Модифицированность Тогда
					// Устав
					УставООО = УставОООНоваяРедакция(
						ДанныеПомощникаЗаполнения,
						ДанныеПротоколаРешения,
						ЭтоЗаявлениеР13014(Параметры.ДанныеПомощникаЗаполнения.ДатаСоставления));
					Если УставООО <> Неопределено Тогда
						ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов, ИменаФайлов.Устав, УставООО));
					КонецЕсли;
				КонецЕсли;
				
				Если УплачиваетсяГоспошлинаЗаРегистрацию Тогда
					
					АдресРегистрации = ?(Изменено.Местоположение,
						ДанныеПомощникаЗаполнения.ЮридическийАдресНовыйЗначениеJSON,
						ДанныеОрганизации.ЮридическийАдресЗначениеJSON);
					
					СуммаПошлины = СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы();
					
					Если Модифицированность И СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
						// Квитанция на оплату госпошлины из веб-сервиса.
						КвитанцияНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
							"ИзмененияВУставеЮрлица",
							ДанныеЗаявителя,
							АдресРегистрации,
							КБКНалогаПоСпособуПодачиДокументов(ДанныеПомощникаЗаполнения.СпособПодачиДокументов),
							СуммаПошлины);
						Если КвитанцияНаОплатуГоспошлины <> Неопределено Тогда
							ПакетДокументов.Добавить(НовыйДокумент(
								ВладелецФайлов,
								ИменаФайлов.КвитанцияНаОплатуГоспошлины,
								КвитанцияНаОплатуГоспошлины,
								"pdf"));
						КонецЕсли;
					КонецЕсли;
					
					Если СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
						// Реквизиты платежа на оплату госпошлины из веб-сервиса.
						ПлатежныеРеквизитыОплатаГоспошлины = ДанныеСервисаРегистрации.ПлатежныеРеквизитыОплатаГоспошлины(
							ДанныеЗаявителя,
							АдресРегистрации,
							КБКНалогаПоСпособуПодачиДокументов(ДанныеПомощникаЗаполнения.СпособПодачиДокументов),
							СуммаПошлины);
						Если ПлатежныеРеквизитыОплатаГоспошлины <> Неопределено Тогда
							Результат.Вставить("ПлатежныеРеквизитыОплатаГоспошлины", ПлатежныеРеквизитыОплатаГоспошлины);
						КонецЕсли;
					КонецЕсли;
				
				КонецЕсли;
				
			Иначе
				ПлатежныеРеквизитыОплатаГоспошлины = Неопределено;
			КонецЕсли;
			
			Если Модифицированность Тогда
				// Инструкция
				РеквизитыПрежнегоРегистрирующегоОргана = Неопределено;
				Результат.Свойство("РеквизитыПрежнегоРегистрирующегоОргана", РеквизитыПрежнегоРегистрирующегоОргана);
				
				ПараметрыИнструкции = Новый Структура;
				ПараметрыИнструкции.Вставить("РеквизитыРегистрирующегоОргана", Результат.РеквизитыРегистрирующегоОргана);
				ПараметрыИнструкции.Вставить("РеквизитыПрежнегоРегистрирующегоОргана", РеквизитыПрежнегоРегистрирующегоОргана);
				ПараметрыИнструкции.Вставить("ПлатежныеРеквизитыОплатаГоспошлины", ПлатежныеРеквизитыОплатаГоспошлины);
				ПараметрыИнструкции.Вставить("ИмяФормы", Параметры.ИмяФормы);
				
				Инструкция = ИнструкцияРегистрацияИзмененийЕГРЮЛ(ДанныеПомощникаЗаполнения, ПараметрыИнструкции);
				Если Инструкция <> Неопределено Тогда
					ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов, ИменаФайлов.ИнструкцияПоВнесениюИзмененийВЕГРЮЛ, Инструкция, "pdf"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Модифицированность Тогда
				
				// Контактная информация ИП хранится в справочнике "Организации" и задается на втором этапе.
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат,
					ЗаписатьКонтактнуюИнформациюИндивидуальногоПредпринимателя(ДанныеОрганизации));
				
				Инструкция = ИнструкцияРегистрацияИзмененийЕГРИП(ДанныеПомощникаЗаполнения,
					Результат.РеквизитыРегистрирующегоОргана,
					Параметры.ИмяФормы);
				
				Если Инструкция <> Неопределено Тогда
					ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов, ИменаФайлов.ИнструкцияПоВнесениюИзмененийВЕГРИП, Инструкция, "pdf"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныеПрисоединенныеФайлы = ПрисоединенныеФайлыЗаявленияПоИмени(ВладелецФайлов, ИменаФайлов());
		Для Каждого Документ Из ПакетДокументов Цикл
			ПараметрыФайла = Документ.ПараметрыФайла;
			СуществующийФайл = НайденныеПрисоединенныеФайлы.Найти(ПараметрыФайла.ИмяБезРасширения, "Наименование");
			Если СуществующийФайл = Неопределено Тогда
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Документ.АдресФайла);
			Иначе
				ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", Документ.АдресФайла);
				ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
				РаботаСФайлами.ОбновитьФайл(СуществующийФайл.Ссылка, ПараметрыФайла);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(Параметры, СтатусЗаявления)
	
	Перем ЗаявлениеОВнесенииИзменений, ЗаявлениеОВнесенииИзмененийУчредительныеДокументы;
	
	Если Параметры.Свойство("ЗаявлениеОВнесенииИзмененийЕГР",
		ЗаявлениеОВнесенииИзменений) Тогда
		
		РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ЗаявлениеОВнесенииИзменений, СтатусЗаявления);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы",
		ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
		
		РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы, СтатусЗаявления);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйДокумент(Владелец, ИмяДокумента, АдресФайла, РасширениеБезТочки = "rtf")
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Владелец);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяДокумента);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	НовыйДокумент = Новый Структура;
	НовыйДокумент.Вставить("ПараметрыФайла", ПараметрыФайла);
	НовыйДокумент.Вставить("АдресФайла",     АдресФайла);
	
	Возврат НовыйДокумент;
	
КонецФункции

Функция ЗаписатьОрганизацию(ДанныеОрганизации)
	
	Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат ЗаписатьЮридическоеЛицо(ДанныеОрганизации);
	Иначе
		Возврат ЗаписатьИндивидуальногоПредпринимателя(ДанныеОрганизации);
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьЮридическоеЛицо(ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		СуществующаяОрганизация = Справочники.Организации.НайтиОрганизацию(ДанныеОрганизации.ИНН);
		Если ЗначениеЗаполнено(СуществующаяОрганизация) Тогда
			ОрганизацияОбъект = СуществующаяОрганизация.ПолучитьОбъект();
		Иначе
			ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
			ОрганизацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации, , "Ссылка");
	
	ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
				ОрганизацияОбъект.Ссылка, 
				ОрганизацияОбъект.КПП,
				ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЮридическийАдресЗначениеJSON);
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь); // Не выполнять обработчики при записи
	ОрганизацияОбъект.Записать();
	
	ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	
	Результат = Новый Структура("Организация", ОрганизацияОбъект.Ссылка);
	
	ЗаписатьРуководителя(Результат, ДанныеОрганизации.ДанныеРуководителя, ДанныеОрганизации.ДанныеОДолжностиРуководителя);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеЮридическогоЛица() Экспорт
	
	ДанныеОрганизации = Новый Структура();
	
	ДанныеОрганизации.Вставить("Ссылка", Справочники.Организации.ПустаяСсылка());
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ДанныеОрганизации.Вставить("Наименование", "");
	ДанныеОрганизации.Вставить("ИНН", "");
	ДанныеОрганизации.Вставить("КПП", "");
	ДанныеОрганизации.Вставить("ОГРН", "");
	ДанныеОрганизации.Вставить("ДатаРегистрации", Дата(1, 1, 1));
	ДанныеОрганизации.Вставить("НаименованиеСокращенное", "");
	ДанныеОрганизации.Вставить("НаименованиеПолное", "");
	
	ДанныеОрганизации.Вставить("ЮридическийАдрес", "");
	ДанныеОрганизации.Вставить("ЮридическийАдресЗначениеJSON", "");
	
	ДанныеОрганизации.Вставить("КодНалоговогоОргана", "");
	
	ДанныеОрганизации.Вставить("РегистрационныйНомерПФР", "");
	ДанныеОрганизации.Вставить("КодОрганаПФР", "");
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаПФР","");
	
	ДанныеОрганизации.Вставить("РегистрационныйНомерФСС", "");
	ДанныеОрганизации.Вставить("КодПодчиненностиФСС", "");
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаФСС", "");
	
	ДанныеОрганизации.Вставить("КодОКВЭД2", "");
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2", "");
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2", "");
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", НовыеДанныеРегистрацииВНалоговомОргане());
	
	ДанныеОрганизации.Вставить("ДанныеРуководителя", НовыеДанныеФизическогоЛица());
	ДанныеОрганизации.Вставить("ДанныеОДолжностиРуководителя", НовыеДанныеДолжности());
	ДанныеОрганизации.Вставить("УставныйКапитал", 0);
	ДанныеОрганизации.Вставить("Учредители", НоваяТаблицаУчредителей());
	
	Возврат ДанныеОрганизации;
	
КонецФункции

Функция НоваяТаблицаУчредителей() Экспорт
	
	ТипыУчредителей = Новый Массив;
	ТипыУчредителей.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ТипыУчредителей.Добавить(Тип("СправочникСсылка.Контрагенты"));
	
	ТаблицаУчредителей = Новый ТаблицаЗначений;
	ТаблицаУчредителей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипыУчредителей));
	ТаблицаУчредителей.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаУчредителей.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ТаблицаУчредителей.Колонки.Добавить("ДоляУчастия", ОписаниеТипаДоляУчредителя());
	ТаблицаУчредителей.Колонки.Добавить("СуммаВзноса", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаУчредителей.Колонки.Добавить("ТипУчредителя", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
	ТаблицаУчредителей.Колонки.Добавить("ПредставительУчредителя", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаУчредителей.Колонки.Добавить("ДолжностьПредставителя", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаУчредителей.Колонки.Добавить("ПредставительНаОсновании", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ТаблицаУчредителей;
	
КонецФункции

// Возвращает структуру таблиц по типам учредителей
//
// Параметры:
//  ТаблицаУчредителей - ТаблицаЗначений - см. НоваяТаблицаУчредителей()
//
// Возвращаемое значение:
//   Структура
//
Функция УчредителиПоТипам(ТаблицаУчредителей)
	
	ОтборЮридическиеЛица = Новый Структура("ТипУчредителя", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	УчредителиЮридическиеЛица = ТаблицаУчредителей.Скопировать(ОтборЮридическиеЛица);
	
	ОтборФизическиеЛица = Новый Структура("ТипУчредителя", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	УчредителиФизическиеЛица = ТаблицаУчредителей.Скопировать(ОтборФизическиеЛица);
	
	Возврат Новый Структура("ЮридическиеЛица, ФизическиеЛица", УчредителиЮридическиеЛица, УчредителиФизическиеЛица);
	
КонецФункции

Функция ЗаписатьИндивидуальногоПредпринимателя(ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		СуществующаяОрганизация = Справочники.Организации.НайтиОрганизацию(ДанныеОрганизации.ИНН);
		Если ЗначениеЗаполнено(СуществующаяОрганизация) Тогда
			ОрганизацияОбъект = СуществующаяОрганизация.ПолучитьОбъект();
		Иначе
			ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
			ОрганизацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПредпринимателя = ДанныеОрганизации.ИндивидуальныйПредприниматель;
	Если Не ЗначениеЗаполнено(ДанныеПредпринимателя.Ссылка) Тогда
		Если ЗначениеЗаполнено(ОрганизацияОбъект.ИндивидуальныйПредприниматель) Тогда
			ДанныеПредпринимателя.Ссылка = ОрганизацияОбъект.ИндивидуальныйПредприниматель;
		Иначе
			СуществующееФизическоеЛицо = Справочники.Организации.ФизическоеЛицо(
				ДанныеПредпринимателя.Фамилия,
				ДанныеПредпринимателя.Имя,
				ДанныеПредпринимателя.Отчество,
				ДанныеПредпринимателя.ИНН);
			Если СуществующееФизическоеЛицо <> Неопределено Тогда
				ДанныеПредпринимателя.Ссылка = СуществующееФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИндивидуальныйПредприниматель = ЗаписатьФизическоеЛицо(ДанныеПредпринимателя);
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации, , "Ссылка");
	
	ОрганизацияОбъект.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.ФамилияИП  = ДанныеПредпринимателя.Фамилия;
	ОрганизацияОбъект.ИмяИП      = ДанныеПредпринимателя.Имя;
	ОрганизацияОбъект.ОтчествоИП = ДанныеПредпринимателя.Отчество;
	ОрганизацияОбъект.ИНН        = ДанныеПредпринимателя.ИНН;
	ОрганизацияОбъект.КПП        = "";
	
	ОрганизацияОбъект.НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеИндивидуальногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеИндивидуальногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
										ОрганизацияОбъект.Ссылка, 
										"",
										ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеПредпринимателя.АдресПропискиЗначениеJSON);
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.EMailЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.EMailЗначениеJSON, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	КонецЕсли;
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	
	Возврат Новый Структура("Организация", ОрганизацияОбъект.Ссылка);
	
КонецФункции

Функция ЗаписатьКонтактнуюИнформациюИндивидуальногоПредпринимателя(ДанныеОрганизации)
	
	Если Не ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	ДанныеПредпринимателя = ДанныеОрганизации.ИндивидуальныйПредприниматель;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеПредпринимателя.АдресПропискиЗначениеJSON);
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.ТелефонРабочийЗначениеJSON, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПредпринимателя.EMailЗначениеJSON) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияОбъект,
				ДанныеПредпринимателя.EMailЗначениеJSON, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	КонецЕсли;
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	Возврат Новый Структура("Организация", ОрганизацияОбъект.Ссылка);
	
КонецФункции

Функция ЗаписатьЗаявителя(ДанныеЗаявителя) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаявителя.Ссылка) Тогда
		СуществующееФизическоеЛицо = Справочники.Организации.ФизическоеЛицо(
			ДанныеЗаявителя.Фамилия,
			ДанныеЗаявителя.Имя,
			ДанныеЗаявителя.Отчество,
			ДанныеЗаявителя.ИНН);
		Если СуществующееФизическоеЛицо <> Неопределено Тогда
			ДанныеЗаявителя.Ссылка = СуществующееФизическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Заявитель = ЗаписатьФизическоеЛицо(ДанныеЗаявителя);
	
	Возврат Новый Структура("Заявитель", Заявитель);
	
КонецФункции

Функция СоздатьЗаявлениеРегистрацииИзменений(Организация, ПараметрыФормированияДокументов)
	
	ЗаявлениеОВнесенииИзмененийЕГР = ПараметрыФормированияДокументов.ЗаявлениеОВнесенииИзмененийЕГР;
	ЗаявлениеОВнесенииИзмененийУчредительныеДокументы = ПараметрыФормированияДокументов.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы;
	ДанныеПомощникаЗаполнения = ПараметрыФормированияДокументов.ДанныеПомощникаЗаполнения;
	
	// Создаем или перезаполняем заявления по данным помощника
	ПараметрыЗаявления = ПараметрыЗаявленияОРегистрацииИзменений(Организация,
		ДанныеПомощникаЗаполнения,
		ПараметрыФормированияДокументов.ИмяФормы);
	
	КодыФормЗаявлений = КодыФормЗаявлений(ПараметрыФормированияДокументов.ДанныеПомощникаЗаполнения.ДатаРешения);
	
	Если ДанныеПомощникаЗаполнения.ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		Если ПараметрыФормированияДокументов.ИмяФормы = "Форма2014_1" Тогда
			
			Если Не ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы
				Или ДанныеПомощникаЗаполнения.ИзмененияТребуютУведомления
				Или ДанныеПомощникаЗаполнения.Изменено.Руководитель Тогда
				ИмяОтчета = ИмяРегламентированногоУведомления(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРЮЛ);
				ЗаявлениеОВнесенииИзмененийЕГР = Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(ПараметрыЗаявления, ЗаявлениеОВнесенииИзмененийЕГР);
			КонецЕсли;
			Если ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы Тогда
				ИмяОтчета = ИмяРегламентированногоУведомления(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов);
				ЗаявлениеОВнесенииИзмененийУчредительныеДокументы = Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(
					ПараметрыЗаявления, ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
			КонецЕсли;
			
		Иначе
			
			ИмяОтчета = ИмяРегламентированногоУведомления(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРЮЛ);
			ЗаявлениеОВнесенииИзмененийЕГР = Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(ПараметрыЗаявления, ЗаявлениеОВнесенииИзмененийЕГР);
			
			Если ПараметрыЗаявления.ДополнительныеПараметры.ИзмененияВносятсяВУчредительныеДокументы
				Или ПараметрыЗаявления.ДополнительныеПараметры.ИзменитьВидУстава
				И ПараметрыЗаявления.ДополнительныеПараметры.НомерТиповогоУстава = 0 Тогда
				
				СформироватьИндивидуальныйУстав(ПараметрыФормированияДокументов, ЗаявлениеОВнесенииИзмененийЕГР);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ИмяОтчета = ИмяРегламентированногоУведомления(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРИП);
		ЗаявлениеОВнесенииИзмененийЕГР = Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(ПараметрыЗаявления, ЗаявлениеОВнесенииИзмененийЕГР);
	КонецЕсли;
	
	// Сохраняем данные помощника в созданном заявлении
	Результат = Новый Структура;
	Если ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийЕГР) Тогда
		СохранитьДанныеПомощникаЗаполнения(ЗаявлениеОВнесенииИзмененийЕГР, ДанныеПомощникаЗаполнения);
		Результат.Вставить("ЗаявлениеОВнесенииИзмененийЕГР", ЗаявлениеОВнесенииИзмененийЕГР);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
		СохранитьДанныеПомощникаЗаполнения(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы, ДанныеПомощникаЗаполнения);
		Результат.Вставить("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы", ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьДанныеПомощникаЗаполнения(ЭкземплярУведомления, ДанныеПомощникаЗаполнения)
	
	Если Не ЗначениеЗаполнено(ЭкземплярУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	ВидУведомления = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ВидУведомления(ЭкземплярУведомления);
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(ВидУведомления);
	
	Отчеты[ИмяОтчета].СохранитьДанныеПомощника(ЭкземплярУведомления, ДанныеПомощникаЗаполнения);
	
КонецПроцедуры

Функция ПараметрыЗаявленияОРегистрацииИзменений(Организация, Знач ПараметрыЗаполнения, ИмяФормы)
	
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	ПараметрыЗаявления.Вставить("ИмяФормы", ИмяФормы);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийУчредительныхДокументов(ПараметрыОтчета, Контейнер) Экспорт
	Перем ДанныеЗаявителя;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	Изменено = ПараметрыЗаполнения.Изменено;
	ДанныеОрганизации = ПараметрыЗаполнения.ДанныеОрганизации;
	
	Если Изменено.УставныйКапитал Тогда
		Учредители = ДанныеУчредителейДляЗаявлениеОВнесенииИзмененийЕГР(ПараметрыЗаполнения);
	КонецЕсли;
	
	// Титульный лист
	Контейнер.Лист001.П01010000 = ДанныеОрганизации.ОГРН;
	Контейнер.Лист001.П01020000 = ДанныеОрганизации.ИНН;
	Контейнер.Лист001.П01030000 = ДанныеОрганизации.НаименованиеПолное;
	
	// Лист А "Сведения о наименовании юридического лица"
	// Заполняется в случае изменении полного или сокращенного наименования юридического лица.
	Если Изменено.СокращенноеНаименование Или Изменено.ПолноеНаименование Тогда
		Контейнер.ЛистА.А01000000 = ПараметрыЗаполнения.НаименованиеПолноеНовое;
		Контейнер.ЛистА.А02000000 = ПараметрыЗаполнения.НаименованиеСокращенноеНовое;
	КонецЕсли;
	
	// Лист Б "Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа".
	// Заполняется в случае изменения юридического адреса.
	Если Изменено.Местоположение
		Или (Изменено.ЮридическийАдрес И ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы) Тогда
		
		ЮридическийАдресНовый = ПараметрыЗаполнения.ЮридическийАдресНовыйЗначениеJSON;
		СтруктураАдреса = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(ЮридическийАдресНовый);
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(ЮридическийАдресНовый, СтруктураАдреса);
		ОбработатьЭлементыАдреса(СтруктураАдреса);
		ЗаполнитьЗначенияСвойств(Контейнер.ЛистБ, СтруктураАдреса);
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
			ЮридическийАдресНовый, , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Контейнер.ЛистБ.Вставить("АдресXML", АдресXML);
	КонецЕсли;
	
	// Лист В "Сведения о размере уставного капитала"
	// Заполняется в случае изменения размера уставного капитала.
	// В случае заполнения листа В заявления заполняются также соответственно листы Г, Д, Е, Ж, З, И заявления.
	Если Изменено.УставныйКапитал Тогда
		Контейнер.ЛистВ.В01000000 = "1";
		// Вид изменения, Размер, Дата принятия решения об уменьшении уставного капитала
		Если ПараметрыЗаполнения.ДанныеОрганизации.УставныйКапитал < ПараметрыЗаполнения.УставныйКапиталНовый Тогда
			Контейнер.ЛистВ.В02000000 = "1"; // увеличение уставного капитала
			Контейнер.ЛистВ.В03000000 = ПараметрыЗаполнения.УставныйКапиталНовый;
			Контейнер.ЛистВ.В04000000 = "";
		ИначеЕсли ПараметрыЗаполнения.УставныйКапиталНовый < ПараметрыЗаполнения.ДанныеОрганизации.УставныйКапитал Тогда
			Контейнер.ЛистВ.В02000000 = "2"; // уменьшение уставного капитала
			Контейнер.ЛистВ.В03000000 = ПараметрыЗаполнения.УставныйКапиталНовый;
			Контейнер.ЛистВ.В04000000 = ""; // Заполняется вручную
		КонецЕсли;
		// Дата публикации сообщения о принятии решения об уменьшении уставного капитала в органе печати.
		Контейнер.ЛистВ.В05010000 = "";
		Контейнер.ЛистВ.В05020000 = "";
	КонецЕсли;
	
	// Лист Г "Сведения об участнике - российском юридическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаГ = СкопироватьКлючиСтруктуры(Контейнер.ЛистГ[0].Значение);
	Контейнер.ЛистГ.Очистить();
	
	Если Изменено.УставныйКапитал Тогда
		
		УчастникиЮридическиеЛица = Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Истина));
		УчастникиЮридическиеЛица.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаТаблицы Из УчастникиЮридическиеЛица Цикл
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаГ);
			СведенияОЮридическомЛице = СтрокаТаблицы.СведенияОЮридическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г03010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г03020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г03030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.Г04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Г04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
			Иначе
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.Г04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Г04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистГ.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.ЛистГ.Количество() = 0 Тогда
		Контейнер.ЛистГ.Добавить(ШаблонЛистаГ);
	КонецЕсли;
	
	// Лист Д "Сведения об участнике - иностранном юридическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаД = СкопироватьКлючиСтруктуры(Контейнер.ЛистД[0].Значение);
	Контейнер.ЛистД.Очистить();
	Контейнер.ЛистД.Добавить(ШаблонЛистаД);
	
	// Лист Е "Сведения об участнике - физическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаЕ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЕ[0].Значение);
	Контейнер.ЛистЕ.Очистить();
	
	Если Изменено.УставныйКапитал Тогда
		
		УчастникиФизическиеЛица = Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Ложь));
		УчастникиФизическиеЛица.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаТаблицы Из УчастникиФизическиеЛица Цикл
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаЕ);
			СведенияОФизическомЛице = СтрокаТаблицы.СведенияОФизическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, вносимые в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е03010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е03010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е03010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е03020000 = СведенияОФизическомЛице.ИНН;
				// Дата и место рождения
				НовыйЛист.Е03030100 = СведенияОФизическомЛице.ДатаРождения;
				НовыйЛист.Е03030200 = СведенияОФизическомЛице.МестоРожденияПредставление;
				// Паспортные данные
				НовыйЛист.Е03050100 = СведенияОФизическомЛице.ДокументКодМВД;
				НовыйЛист.Е03050200 = "" + СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер;
				НовыйЛист.Е03050300 = СведенияОФизическомЛице.ДокументДатаВыдачи;
				НовыйЛист.Е03050400 = СведенияОФизическомЛице.ДокументКемВыдан;
				ЧастиКодаПодразделения = ЧастиКодаПодразделения(СведенияОФизическомЛице.ДокументКодПодразделения);
				НовыйЛист.Е03050501 = ЧастиКодаПодразделения.Часть1;
				НовыйЛист.Е03050502 = ЧастиКодаПодразделения.Часть2;
				// Адрес
				Если ЗначениеЗаполнено(СведенияОФизическомЛице.АдресПрописки) Тогда
					РоссийскийАдрес = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СведенияОФизическомЛице.АдресСтруктурой);
				ИначеЕсли ЗначениеЗаполнено(СведенияОФизическомЛице.АдресИнформирования)
					И СведенияОФизическомЛице.АдресИнформированияСтруктурой.АдресРФ Тогда
					РоссийскийАдрес = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
						СведенияОФизическомЛице.АдресИнформированияСтруктурой);
				Иначе
					РоссийскийАдрес = Неопределено;
				КонецЕсли;
				Если РоссийскийАдрес <> Неопределено Тогда
					АдресXML = РоссийскийАдрес.ЗначенияПолей;
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(РоссийскийАдрес.ЗначениеJSON, РоссийскийАдрес);
					ОбработатьЭлементыАдреса(РоссийскийАдрес);
					ЗаполнитьЗначенияСвойств(НовыйЛист, РоссийскийАдрес);
					НовыйЛист.Вставить("АдресXML", АдресXML);
				Иначе
					НовыйЛист.Е040203050201 = СведенияОФизическомЛице.АдресИнформированияСтруктурой.КодСтраны;
					НовыйЛист.Е040203050202 = СведенияОФизическомЛице.АдресИнформированияСтруктурой.Представление;
				КонецЕсли;
				// Доля в уставном капитале
				НовыйЛист.Е04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Е04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е02020000 = СведенияОФизическомЛице.ИНН;
			Иначе
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е02020000 = СведенияОФизическомЛице.ИНН;
				// Доля в уставном капитале
				НовыйЛист.Е04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Е04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистЕ.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.ЛистЕ.Количество() = 0 Тогда
		Контейнер.ЛистЕ.Добавить(ШаблонЛистаЕ);
	КонецЕсли;
	
	// Лист Ж "Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании"
	ШаблонЛистаЖ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЖ1[0].Значение);
	Контейнер.ЛистЖ1.Очистить();
	Контейнер.ЛистЖ1.Добавить(ШаблонЛистаЖ);
	
	// Лист З "Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица"
	ШаблонЛистаЗ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЗ[0].Значение);
	Контейнер.ЛистЗ.Очистить();
	Контейнер.ЛистЗ.Добавить(ШаблонЛистаЗ);
	
	// Лист И "Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу"
	// Заполняется в случае уменьшения уставного капитала общества с ограниченной ответственностью за счет погашения доли, принадлежащей обществу.
	ШаблонЛистаИ = СкопироватьКлючиСтруктуры(Контейнер.ЛистИ[0].Значение);
	Контейнер.ЛистИ.Очистить();
	Контейнер.ЛистИ.Добавить(ШаблонЛистаИ);
	
	// Лист К заявления "Сведения о филиале/представительстве" 
	// Заполняется в случае, если вносимые в учредительные документы юридического лица изменения связаны с изменением сведений
	//  о филиале и (или) представительстве юридического лица.
	ШаблонЛистаК = СкопироватьКлючиСтруктуры(Контейнер.ЛистК[0].Значение);
	Контейнер.ЛистК.Очистить();
	Контейнер.ЛистК.Добавить(ШаблонЛистаК);
	
	// Лист Л "Сведения о кодах по ОКВЭД"
	Если Изменено.ОсновнойВидДеятельности Тогда
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.ЛистЛ1.А01010000 = ПараметрыЗаполнения.КодОКВЭД2Новый;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.ЛистЛ2.А01010000 = ДанныеОрганизации.КодОКВЭД2;
	КонецЕсли;
	Если Изменено.ВидыДеятельности Тогда
		ИзмененияВидовДеятельности = ИзмененияВидовДеятельности(ПараметрыЗаполнения);
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для Каждого ДобавленныйКодОКВЭД Из ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД Цикл
			Контейнер.МногострочнаяЧасть1.Добавить().А01020000 = ДобавленныйКодОКВЭД;
		КонецЦикла;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.МногострочнаяЧасть2.Очистить();
		Для Каждого УдаленныйКодОКВЭД Из ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД Цикл
			Контейнер.МногострочнаяЧасть2.Добавить().А01020000 = УдаленныйКодОКВЭД;
		КонецЦикла;
	КонецЕсли;
	
	// Лист М "Сведения о заявителе"
	Если ПараметрыЗаполнения.Свойство("ДанныеЗаявителя", ДанныеЗаявителя) Тогда
		// Вид заявителя
		Контейнер.ЛистМ.М01000000 = 1; // 1 - руководитель постоянно действующего исполнительного органа
		// ФИО
		Контейнер.ЛистМ.М03010100 = ДанныеЗаявителя.Фамилия;
		Контейнер.ЛистМ.М03010200 = ДанныеЗаявителя.Имя;
		Контейнер.ЛистМ.М03010300 = ДанныеЗаявителя.Отчество;
		// ИНН
		Контейнер.ЛистМ.М03020000 = ДанныеЗаявителя.ИНН;
		// Дата и место рождения
		Контейнер.ЛистМ.М03030100 = ДанныеЗаявителя.ДатаРождения;
		Контейнер.ЛистМ.М03030200 = ДанныеЗаявителя.МестоРожденияПредставление;
		// Паспортные данные
		Контейнер.ЛистМ.М03040100 = ДанныеЗаявителя.ПаспортныеДанные.ДокументКодМВД;
		Контейнер.ЛистМ.М03040200 = СтрШаблон("%1 %2", ДанныеЗаявителя.ПаспортныеДанные.Серия, ДанныеЗаявителя.ПаспортныеДанные.Номер);
		Контейнер.ЛистМ.М03040300 = ДанныеЗаявителя.ПаспортныеДанные.ДатаВыдачи;
		Контейнер.ЛистМ.М03040400 = ДанныеЗаявителя.ПаспортныеДанные.КемВыдан;
		ЧастиКодаПодразделения = ЧастиКодаПодразделения(ДанныеЗаявителя.ПаспортныеДанные.КодПодразделения);
		Контейнер.ЛистМ.М03040501 = ЧастиКодаПодразделения.Часть1;
		Контейнер.ЛистМ.М03040502 = ЧастиКодаПодразделения.Часть2;
		// Адрес
		ДополнительныеПараметрыКИ = Новый Структура("НаименованиеВключаетСокращение", Ложь);
		Если ЗначениеЗаполнено(ДанныеЗаявителя.АдресПропискиЗначениеJSON) Тогда
			РоссийскийАдрес = ДанныеЗаявителя.АдресПропискиЗначениеJSON;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗаявителя.АдресИнформированияЗначениеJSON)
			И УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(
				ДанныеЗаявителя.АдресИнформированияЗначениеJSON) =
				ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
			РоссийскийАдрес = ДанныеЗаявителя.АдресИнформированияЗначениеJSON;
		Иначе
			РоссийскийАдрес = Неопределено;
		КонецЕсли;
		Если РоссийскийАдрес <> Неопределено Тогда
			АдресСтруктурой = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(РоссийскийАдрес, ДополнительныеПараметрыКИ);
			РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(РоссийскийАдрес, АдресСтруктурой);
			ОбработатьЭлементыАдреса(АдресСтруктурой);
			ЗаполнитьЗначенияСвойств(Контейнер.ЛистМ, АдресСтруктурой);
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
				РоссийскийАдрес, , Перечисления.ТипыКонтактнойИнформации.Адрес);
			Контейнер.ЛистМ.Вставить("АдресXML", АдресXML);
		Иначе
			АдресСтруктурой = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(
				ДанныеЗаявителя.АдресИнформированияЗначениеJSON, ДополнительныеПараметрыКИ);
			Контейнер.ЛистМ.М03050201 = АдресСтруктурой.КодСтраны;
			Контейнер.ЛистМ.М03050202 = АдресСтруктурой.Представление;
		КонецЕсли;
		// Телефон
		Контейнер.ЛистМ.М03060100 = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			ДанныеЗаявителя.ТелефонРабочийЗначениеJSON);
		// EMail
		Контейнер.ЛистМ.М03060200 = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			ДанныеЗаявителя.EMailЗначениеJSON);
		// Получение документов
		Если ПараметрыЗаполнения.Свойство("СпособРегистрации") Тогда
			Контейнер.ЛистМ.М04000000 = ПараметрыЗаполнения.СпособРегистрации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаявлениеРегистрацииИзменениийЕГРЮЛ

Функция КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2014();
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Возврат КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2020(ИмяФормы);
	Иначе
		Возврат КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2021(ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2014()
	
	Результат = Новый Структура("Лист001, ЛистБ, ЛистВ1, ЛистД, ЛистК, ЛистН1, ЛистН2, ЛистР");
	
	#Область ТитульныйЛист
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010000", "ОГРН");
	Результат.Лист001.Вставить("П01020000", "ИНН");
	Результат.Лист001.Вставить("П01030000", "НаименованиеПолное");
	Результат.Лист001.Вставить("П02000000", "ПричинаИзменения");
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения о наименовании юридического лица
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистБ
	
	// Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа
	// Заполняется в случае изменения юридического адреса
	
	Результат.ЛистБ = Новый Структура;
	ДобавитьКлючиСтруктурыАдреса_2014(Результат.ЛистБ);
	
	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об участнике - российском юридическом лице
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистВ1 = Новый Структура;
	Данные_ЛистВ1.Вставить("В01000000", "ПричинаИзменения");
	Данные_ЛистВ1.Вставить("В02010000", "ОГРНТекущий");
	Данные_ЛистВ1.Вставить("В02020000", "ИННТекущий");
	Данные_ЛистВ1.Вставить("В02030000", "ПолноеНаименованиеТекущее");
	Данные_ЛистВ1.Вставить("В03010000", "ОГРН");
	Данные_ЛистВ1.Вставить("В03020000", "ИНН");
	Данные_ЛистВ1.Вставить("В03030000", "ПолноеНаименование");
	Данные_ЛистВ1.Вставить("В04010000", "СуммаВзноса");
	Данные_ЛистВ1.Вставить("В04020100", "ДоляУставногоКапитала");
	
	Результат.ЛистВ1 = "Сведения_УчредителиЮрЛица";
	Результат.Вставить("Сведения_УчредителиЮрЛица", Данные_ЛистВ1);
	
	#КонецОбласти
	
	#Область ЛистГ
	
	// Сведения об участнике - иностранном юридическом лице
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистД
	
	// Сведения об участнике - физическом лиц
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистД = Новый Структура;
	Данные_ЛистД.Вставить("Д01000000", "ПричинаИзменения");
	Данные_ЛистД.Вставить("Д02010100", "ФамилияТекущая");
	Данные_ЛистД.Вставить("Д02010200", "ИмяТекущее");
	Данные_ЛистД.Вставить("Д02010300", "ОтчествоТекущее");
	Данные_ЛистД.Вставить("Д02020000", "ИННТекущий");
	Данные_ЛистД.Вставить("Д03010100", "Фамилия");
	Данные_ЛистД.Вставить("Д03010200", "Имя");
	Данные_ЛистД.Вставить("Д03010300", "Отчество");
	Данные_ЛистД.Вставить("Д03020000", "ИННФЛ");
	Данные_ЛистД.Вставить("Д03030100", "ДатаРождения");
	Данные_ЛистД.Вставить("Д03030200", "МестоРождения");
	Данные_ЛистД.Вставить("Д03050100", "ДокументКодМВД");
	Данные_ЛистД.Вставить("Д03050200", "ДокументСерияНомер");
	Данные_ЛистД.Вставить("Д03050300", "ДокументДатаВыдачи");
	Данные_ЛистД.Вставить("Д03050400", "ДокументКемВыдан");
	Данные_ЛистД.Вставить("Д03050501", "КодПодразделенияЧасть1");
	Данные_ЛистД.Вставить("Д03050502", "КодПодразделенияЧасть2");
	Данные_ЛистД.Вставить("Д03060201", "КодСтраны");
	Данные_ЛистД.Вставить("Д03060202", "АдресИнформирования");
	Данные_ЛистД.Вставить("Д04010000", "СуммаВзноса");
	Данные_ЛистД.Вставить("Д04020100", "ДоляУставногоКапитала");
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистД);
	
	Результат.ЛистД = "Сведения_УчредителиФизЛица";
	Результат.Вставить("Сведения_УчредителиФизЛица", Данные_ЛистД);
	
	#КонецОбласти
	
	#Область ЛистЕ
	
	// Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЖ
	
	// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЗ
	
	// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистИ
	
	// Сведения о держателе реестра акционеров акционерного общества
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистК
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
	// Заполняется при смене руководителя
	
	Данные_ЛистК = Новый Структура;
	Данные_ЛистК.Вставить("К01000000", "ПричинаИзменения");
	Данные_ЛистК.Вставить("К02010100", "ФамилияТекущая");
	Данные_ЛистК.Вставить("К02010200", "ИмяТекущее");
	Данные_ЛистК.Вставить("К02010300", "ОтчествоТекущее");
	Данные_ЛистК.Вставить("К02020000", "ИННТекущий");
	Данные_ЛистК.Вставить("К03010100", "Фамилия");
	Данные_ЛистК.Вставить("К03010200", "Имя");
	Данные_ЛистК.Вставить("К03010300", "Отчество");
	Данные_ЛистК.Вставить("К03020000", "ИННФЛ");
	Данные_ЛистК.Вставить("К03030100", "ДатаРождения");
	Данные_ЛистК.Вставить("К03030200", "МестоРождения");
	Данные_ЛистК.Вставить("К03040000", "Должность");
	Данные_ЛистК.Вставить("К03050100", "ДокументКодМВД");
	Данные_ЛистК.Вставить("К03050200", "ДокументСерияНомер");
	Данные_ЛистК.Вставить("К03050300", "ДокументДатаВыдачи");
	Данные_ЛистК.Вставить("К03050400", "ДокументКемВыдан");
	Данные_ЛистК.Вставить("К03050501", "КодПодразделенияЧасть1");
	Данные_ЛистК.Вставить("К03050502", "КодПодразделенияЧасть2");
	Данные_ЛистК.Вставить("К03060201", "КодСтраны");
	Данные_ЛистК.Вставить("К03060202", "АдресИнформирования");
	Данные_ЛистК.Вставить("К03070000", "Телефон");
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистК);
	
	Результат.ЛистК = "Сведения_ФизЛицаСПравомПодписи";
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Данные_ЛистК);
	
	#КонецОбласти
	
	#Область ЛистЛ
	
	// Сведения об управляющей организации
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистМ
	
	// Сведения об управляющем
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистН
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	// Заполняется при изменении кодов ОКВЭД
	
	Результат.ЛистН1 = Новый Структура;
	Результат.ЛистН1.Вставить("А01010000", "ОсновнойОКВЭД");
	// Дополнительные коды
	Результат.Вставить("МногострочнаяЧасть1", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	Результат.ЛистН2 = Новый Структура;
	Результат.ЛистН2.Вставить("А01010000", "ОсновнойОКВЭДКИсключению");
	// Дополнительные коды
	Результат.Вставить("МногострочнаяЧасть1", "ДополнительныеКодыОКВЭДКИсключению");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭДКИсключению",
		КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	#КонецОбласти
	
	#Область ЛистО
	
	// Сведения о филиале/представительстве
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистП
	
	// Сведения о размере уставного капитала (складочного капитала, уставного фонда, паевого фонда)
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистР
	
	// Сведения о заявителе
	
	Данные_ЛистР = Новый Структура;
	Данные_ЛистР.Вставить("Р01000000", "ВидЗаявителя");
	Данные_ЛистР.Вставить("Р02010000", "ОГРН");
	Данные_ЛистР.Вставить("Р02020000", "ИНН");
	Данные_ЛистР.Вставить("Р02030000", "НаименованиеПолное");
	Данные_ЛистР.Вставить("Р04010100", "Фамилия");
	Данные_ЛистР.Вставить("Р04010200", "Имя");
	Данные_ЛистР.Вставить("Р04010300", "Отчество");
	Данные_ЛистР.Вставить("Р04020000", "ИННФЛ");
	Данные_ЛистР.Вставить("Р04030100", "ДатаРождения");
	Данные_ЛистР.Вставить("Р04030200", "МестоРождения");
	Данные_ЛистР.Вставить("Р04040100", "ДокументКодМВД");
	Данные_ЛистР.Вставить("Р04040200", "ДокументСерияНомер");
	Данные_ЛистР.Вставить("Р04040300", "ДокументДатаВыдачи");
	Данные_ЛистР.Вставить("Р04040400", "ДокументКемВыдан");
	Данные_ЛистР.Вставить("Р04040501", "КодПодразделенияЧасть1");
	Данные_ЛистР.Вставить("Р04040502", "КодПодразделенияЧасть2");
	Данные_ЛистР.Вставить("Р04050201", "КодСтраны");
	Данные_ЛистР.Вставить("Р04050202", "АдресИнформирования");
	Данные_ЛистР.Вставить("Р04060100", "Телефон");
	Данные_ЛистР.Вставить("Р04060200", "АдресЭлектроннойПочты");
	Данные_ЛистР.Вставить("Р05000000", "СпособПолученияДокументов");
	ДобавитьКлючиСтруктурыАдреса_2014(Данные_ЛистР);
	
	Результат.ЛистР = "Сведения_Заявители";
	Результат.Вставить("Сведения_Заявители", Данные_ЛистР);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2020(ИмяФормы)
	
	Результат = Новый Структура("Лист001, ЛистА, ЛистБ, ЛистВ, ЛистГ, ЛистИ, ЛистК, ЛистН");
	
	#Область ТитульныйЛист
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "ОГРН");
	Результат.Лист001.Вставить("П01010200", "ИНН");
	Результат.Лист001.Вставить("П01020100", "ПричинаИзменения");
	Результат.Лист001.Вставить("П01020200", "ВидИзмененияУстава");
	Результат.Лист001.Вставить("П01020300", "НомерТиповогоУстава");
	Результат.Лист001.Вставить("П01040100", "ВидИзмененияУставногоКапитала");
	Результат.Лист001.Вставить("П01040200", "РазмерУставногоКапитала");
	Результат.Лист001.Вставить("П01060100", "ВидИзмененияМестонахождения");
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения о наименовании юридического лица
	
	Результат.ЛистА = Новый Структура;
	Результат.ЛистА.Вставить("А01010100", "НаименованиеПолное");
	Результат.ЛистА.Вставить("А01010200", "ПричинаИзмененияНаименования");
	Результат.ЛистА.Вставить("А01010300", "НаименованиеСокращенное");
	
	#КонецОбласти
	
	#Область ЛистБ
	
	// Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа
	// Заполняется в случае изменения юридического адреса
	
	Результат.ЛистБ = Новый Структура;
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР13014.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"МестоНахождения");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат.ЛистБ, Результат.ЛистБ, СтруктураАдреса, "МестоНахождение_");
	
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР13014.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"АдресБ0102");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат.ЛистБ, Результат.ЛистБ, СтруктураАдреса);
	
	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об участнике - российском юридическом лице
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистВ = Новый Структура;
	Данные_ЛистВ.Вставить("В01010100", "ПричинаИзменения");
	Данные_ЛистВ.Вставить("В01020100", "ОГРНТекущий");
	Данные_ЛистВ.Вставить("В01020200", "ИННТекущий");
	Данные_ЛистВ.Вставить("В01020400", "ПолноеНаименованиеТекущее");
	Данные_ЛистВ.Вставить("В01030100", "ОГРН");
	Данные_ЛистВ.Вставить("В01030200", "ИНН");
	Данные_ЛистВ.Вставить("В01030400", "ПолноеНаименование");
	Данные_ЛистВ.Вставить("В01040100", "СуммаВзноса");
	Данные_ЛистВ.Вставить("В01040200", "ДоляУставногоКапитала");
	
	Результат.ЛистВ = "Сведения_УчредителиЮрЛица";
	Результат.Вставить("Сведения_УчредителиЮрЛица", Данные_ЛистВ);
	
	#КонецОбласти
	
	#Область ЛистГ
	
	// Сведения об участнике - физическом лиц
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистГ = Новый Структура;
	Данные_ЛистГ.Вставить("Г01010100", "ПричинаИзменения");
	Данные_ЛистГ.Вставить("Г01020101", "ФамилияТекущая");
	Данные_ЛистГ.Вставить("Г01020102", "ИмяТекущее");
	Данные_ЛистГ.Вставить("Г01020103", "ОтчествоТекущее");
	Данные_ЛистГ.Вставить("Г01020200", "ИННТекущий");
	Данные_ЛистГ.Вставить("Г01030101", "Фамилия");
	Данные_ЛистГ.Вставить("Г01030102", "Имя");
	Данные_ЛистГ.Вставить("Г01030103", "Отчество");
	Данные_ЛистГ.Вставить("Г01030200", "ИННФЛ");
	Данные_ЛистГ.Вставить("Г01030300", "Пол");
	Данные_ЛистГ.Вставить("Г01030400", "ДатаРождения");
	Данные_ЛистГ.Вставить("Г01030500", "МестоРождения");
	Данные_ЛистГ.Вставить("Г01030600", "Гражданство");
	Данные_ЛистГ.Вставить("Г01030700", "КодСтраны");
	Данные_ЛистГ.Вставить("Г01030800", "ДокументКодМВД");
	Данные_ЛистГ.Вставить("Г01030900", "ДокументСерияНомер");
	Данные_ЛистГ.Вставить("Г01031000", "ДокументДатаВыдачи");
	Данные_ЛистГ.Вставить("Г01031100", "ДокументКемВыдан");
	Данные_ЛистГ.Вставить("Г01031201", "КодПодразделенияЧасть1");
	Данные_ЛистГ.Вставить("Г01031202", "КодПодразделенияЧасть2");
	Данные_ЛистГ.Вставить("Г01040100", "СуммаВзноса");
	Данные_ЛистГ.Вставить("Г01040200", "ДоляУставногоКапитала");
	
	Результат.ЛистГ = "Сведения_УчредителиФизЛица";
	Результат.Вставить("Сведения_УчредителиФизЛица", Данные_ЛистГ);
	
	#КонецОбласти
	
	#Область ЛистД
	
	// Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЕ
	
	// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЖ
	
	// Сведения о включении доли в уставном/складочном капитале юридического лица
	// в состав общего имущества участников договора инвестиционного товарищества
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЗ
	
	// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистИ
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
	// Заполняется при смене руководителя
	
	Данные_ЛистИ = Новый Структура;
	Данные_ЛистИ.Вставить("И01010100", "ПричинаИзменения");
	Данные_ЛистИ.Вставить("И01020301", "ФамилияТекущая");
	Данные_ЛистИ.Вставить("И01020302", "ИмяТекущее");
	Данные_ЛистИ.Вставить("И01020303", "ОтчествоТекущее");
	Данные_ЛистИ.Вставить("И01020400", "ИННТекущий");
	Данные_ЛистИ.Вставить("И01030501", "Фамилия");
	Данные_ЛистИ.Вставить("И01030502", "Имя");
	Данные_ЛистИ.Вставить("И01030503", "Отчество");
	Данные_ЛистИ.Вставить("И01030600", "ИННФЛ");
	Данные_ЛистИ.Вставить("И01030700", "Пол");
	Данные_ЛистИ.Вставить("И01030800", "ДатаРождения");
	Данные_ЛистИ.Вставить("И01030900", "МестоРождения");
	Данные_ЛистИ.Вставить("И01031000", "Гражданство");
	Данные_ЛистИ.Вставить("И01031100", "КодСтраны");
	Данные_ЛистИ.Вставить("И01031200", "ДокументКодМВД");
	Данные_ЛистИ.Вставить("И01031300", "ДокументСерияНомер");
	Данные_ЛистИ.Вставить("И01031400", "ДокументДатаВыдачи");
	Данные_ЛистИ.Вставить("И01031500", "ДокументКемВыдан");
	Данные_ЛистИ.Вставить("И01031601", "КодПодразделенияЧасть1");
	Данные_ЛистИ.Вставить("И01031602", "КодПодразделенияЧасть2");
	Данные_ЛистИ.Вставить("И01031700", "Должность");
	
	Результат.ЛистИ = "Сведения_ФизЛицаСПравомПодписи";
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Данные_ЛистИ);
	
	#КонецОбласти
	
	#Область ЛистК
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	// Заполняется при изменении кодов ОКВЭД
	
	Результат.ЛистК = Новый Структура;
	Результат.ЛистК.Вставить("К01010100", "ОсновнойОКВЭД");
	// Дополнительные коды
	Результат.ЛистК.Вставить("МногострочнаяЧастьК010102", "ДополнительныеКодыОКВЭД");
	Результат.ЛистК.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("К01010200"));
	
	Результат.ЛистК.Вставить("К01020100", "ОсновнойОКВЭДКИсключению");
	// Дополнительные коды
	Результат.ЛистК.Вставить("МногострочнаяЧастьК010202", "ДополнительныеКодыОКВЭДКИсключению");
	Результат.ЛистК.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭДКИсключению",
		КолонкиТаблицыДополнительныеКодыОКВЭД("К01020200"));
	
	#КонецОбласти
	
	#Область ЛистЛ
	
	// Сведения о филиале/представительстве
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистМ
	
	// Ограничение доступа к сведениям о юридическом лице
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистН
	
	// Сведения о заявителе
	
	Данные_ЛистН = Новый Структура;
	Данные_ЛистН.Вставить("Н01010100", "ВидЗаявителя");
	Данные_ЛистН.Вставить("Н01020101", "Фамилия");
	Данные_ЛистН.Вставить("Н01020102", "Имя");
	Данные_ЛистН.Вставить("Н01020103", "Отчество");
	Данные_ЛистН.Вставить("Н01020200", "ИННФЛ");
	Данные_ЛистН.Вставить("Н01020300", "ДатаРождения");
	Данные_ЛистН.Вставить("Н01020400", "МестоРождения");
	Данные_ЛистН.Вставить("Н01020500", "ДокументКодМВД");
	Данные_ЛистН.Вставить("Н01020600", "ДокументСерияНомер");
	Данные_ЛистН.Вставить("Н01020700", "ДокументДатаВыдачи");
	Данные_ЛистН.Вставить("Н01020800", "ДокументКемВыдан");
	Данные_ЛистН.Вставить("Н01020901", "КодПодразделенияЧасть1");
	Данные_ЛистН.Вставить("Н01020902", "КодПодразделенияЧасть2");
	Данные_ЛистН.Вставить("Н01030100", "АдресЭлектроннойПочты");
	Данные_ЛистН.Вставить("Н01030200", "ВыдатьНаБумажномНосителе");
	Данные_ЛистН.Вставить("Н01030300", "Телефон");
	
	Результат.ЛистН = "Сведения_Заявители";
	Результат.Вставить("Сведения_Заявители", Данные_ЛистН);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ_2021(ИмяФормы)
	
	Результат = Новый Структура("Лист001, ЛистА, ЛистБ, ЛистВ, ЛистГ, ЛистИ, ЛистК, ЛистП");
	
	#Область ТитульныйЛист
	
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "ОГРН");
	Результат.Лист001.Вставить("П01010200", "ИНН");
	Результат.Лист001.Вставить("П01020100", "ПричинаИзменения");
	Результат.Лист001.Вставить("П01020200", "ВидИзмененияУстава");
	Результат.Лист001.Вставить("П01020300", "НомерТиповогоУстава");
	Результат.Лист001.Вставить("П01040100", "ВидИзмененияУставногоКапитала");
	Результат.Лист001.Вставить("П01040200", "РазмерУставногоКапитала");
	Результат.Лист001.Вставить("П01060100", "ВидИзмененияМестонахождения");
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения о наименовании юридического лица
	
	Результат.ЛистА = Новый Структура;
	Результат.ЛистА.Вставить("А01010100", "НаименованиеПолное");
	Результат.ЛистА.Вставить("А01010200", "ПричинаИзмененияНаименования");
	Результат.ЛистА.Вставить("А01010300", "НаименованиеСокращенное");
	
	#КонецОбласти
	
	#Область ЛистБ
	
	// Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа
	// Заполняется в случае изменения юридического адреса
	
	Результат.ЛистБ = Новый Структура;
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР13014.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"МестоНахождения");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат.ЛистБ, Результат.ЛистБ, СтруктураАдреса, "МестоНахождение_");
	
	СтруктураАдреса = Отчеты.РегламентированноеУведомлениеФормаР13014.СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИмяФормы,
		"АдресБ0102");
	
	ДобавитьКлючиАдресаВСтруктуруПоказателей(Результат.ЛистБ, Результат.ЛистБ, СтруктураАдреса);
	
	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об участнике - российском юридическом лице
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистВ = Новый Структура;
	Данные_ЛистВ.Вставить("В01010100", "ПричинаИзменения");
	Данные_ЛистВ.Вставить("В01020100", "ОГРНТекущий");
	Данные_ЛистВ.Вставить("В01020200", "ИННТекущий");
	Данные_ЛистВ.Вставить("В01030100", "ОГРН");
	Данные_ЛистВ.Вставить("В01030200", "ИНН");
	Данные_ЛистВ.Вставить("В01040100", "СуммаВзноса");
	Данные_ЛистВ.Вставить("В01040200", "ДоляУставногоКапитала");
	
	Результат.ЛистВ = "Сведения_УчредителиЮрЛица";
	Результат.Вставить("Сведения_УчредителиЮрЛица", Данные_ЛистВ);
	
	#КонецОбласти
	
	#Область ЛистГ
	
	// Сведения об участнике - физическом лиц
	// Заполняется при изменении состава участников общества
	
	Данные_ЛистГ = Новый Структура;
	Данные_ЛистГ.Вставить("Г01010100", "ПричинаИзменения");
	Данные_ЛистГ.Вставить("Г01020101", "ФамилияТекущая");
	Данные_ЛистГ.Вставить("Г01020102", "ИмяТекущее");
	Данные_ЛистГ.Вставить("Г01020103", "ОтчествоТекущее");
	Данные_ЛистГ.Вставить("Г01020200", "ИННТекущий");
	Данные_ЛистГ.Вставить("Г01030101", "Фамилия");
	Данные_ЛистГ.Вставить("Г01030102", "Имя");
	Данные_ЛистГ.Вставить("Г01030103", "Отчество");
	Данные_ЛистГ.Вставить("Г01030200", "ИННФЛ");
	Данные_ЛистГ.Вставить("Г01030300", "Пол");
	Данные_ЛистГ.Вставить("Г01030400", "ДатаРождения");
	Данные_ЛистГ.Вставить("Г01030500", "МестоРождения");
	Данные_ЛистГ.Вставить("Г01030600", "Гражданство");
	Данные_ЛистГ.Вставить("Г01030700", "КодСтраны");
	Данные_ЛистГ.Вставить("Г01030800", "ДокументКодМВД");
	Данные_ЛистГ.Вставить("Г01030900", "ДокументСерияНомер");
	Данные_ЛистГ.Вставить("Г01031000", "ДокументДатаВыдачи");
	Данные_ЛистГ.Вставить("Г01031100", "ДокументКемВыдан");
	Данные_ЛистГ.Вставить("Г01031201", "КодПодразделенияЧасть1");
	Данные_ЛистГ.Вставить("Г01031202", "КодПодразделенияЧасть2");
	Данные_ЛистГ.Вставить("Г01040100", "СуммаВзноса");
	Данные_ЛистГ.Вставить("Г01040200", "ДоляУставногоКапитала");
	
	Результат.ЛистГ = "Сведения_УчредителиФизЛица";
	Результат.Вставить("Сведения_УчредителиФизЛица", Данные_ЛистГ);
	
	#КонецОбласти
	
	#Область ЛистД
	
	// Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЕ
	
	// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЖ
	
	// Сведения о включении доли в уставном/складочном капитале юридического лица
	// в состав общего имущества участников договора инвестиционного товарищества
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистЗ
	
	// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистИ
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
	// Заполняется при смене руководителя
	
	Данные_ЛистИ = Новый Структура;
	Данные_ЛистИ.Вставить("И01010100", "ПричинаИзменения");
	Данные_ЛистИ.Вставить("И01020301", "ФамилияТекущая");
	Данные_ЛистИ.Вставить("И01020302", "ИмяТекущее");
	Данные_ЛистИ.Вставить("И01020303", "ОтчествоТекущее");
	Данные_ЛистИ.Вставить("И01020400", "ИННТекущий");
	Данные_ЛистИ.Вставить("И01030501", "Фамилия");
	Данные_ЛистИ.Вставить("И01030502", "Имя");
	Данные_ЛистИ.Вставить("И01030503", "Отчество");
	Данные_ЛистИ.Вставить("И01030600", "ИННФЛ");
	Данные_ЛистИ.Вставить("И01030700", "Пол");
	Данные_ЛистИ.Вставить("И01030800", "ДатаРождения");
	Данные_ЛистИ.Вставить("И01030900", "МестоРождения");
	Данные_ЛистИ.Вставить("И01031000", "Гражданство");
	Данные_ЛистИ.Вставить("И01031100", "КодСтраны");
	Данные_ЛистИ.Вставить("И01031200", "ДокументКодМВД");
	Данные_ЛистИ.Вставить("И01031300", "ДокументСерияНомер");
	Данные_ЛистИ.Вставить("И01031400", "ДокументДатаВыдачи");
	Данные_ЛистИ.Вставить("И01031500", "ДокументКемВыдан");
	Данные_ЛистИ.Вставить("И01031601", "КодПодразделенияЧасть1");
	Данные_ЛистИ.Вставить("И01031602", "КодПодразделенияЧасть2");
	Данные_ЛистИ.Вставить("И01031700", "Должность");
	
	Результат.ЛистИ = "Сведения_ФизЛицаСПравомПодписи";
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Данные_ЛистИ);
	
	#КонецОбласти
	
	#Область ЛистК
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	// Заполняется при изменении кодов ОКВЭД
	
	Результат.ЛистК = Новый Структура;
	Результат.ЛистК.Вставить("К01010100", "ОсновнойОКВЭД");
	// Дополнительные коды
	Результат.ЛистК.Вставить("МногострочнаяЧастьК010102", "ДополнительныеКодыОКВЭД");
	Результат.ЛистК.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("К01010200"));
	
	Результат.ЛистК.Вставить("К01020100", "ОсновнойОКВЭДКИсключению");
	// Дополнительные коды
	Результат.ЛистК.Вставить("МногострочнаяЧастьК010202", "ДополнительныеКодыОКВЭДКИсключению");
	Результат.ЛистК.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭДКИсключению",
		КолонкиТаблицыДополнительныеКодыОКВЭД("К01020200"));
	
	#КонецОбласти
	
	#Область ЛистЛ
	
	// Сведения о филиале/представительстве
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистМ
	
	// Ограничение доступа к сведениям о юридическом лице
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистН
	
	// Сведения о договоре конвертируемого займа
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистО
	
	// Изменения, вносимые в учредительный документ юридического лица
	// Не заполняется
	
	#КонецОбласти
	
	#Область ЛистП
	
	// Сведения о заявителе
	
	Данные_ЛистП = Новый Структура;
	Данные_ЛистП.Вставить("П01010100", "ВидЗаявителя");
	Данные_ЛистП.Вставить("П01020101", "Фамилия");
	Данные_ЛистП.Вставить("П01020102", "Имя");
	Данные_ЛистП.Вставить("П01020103", "Отчество");
	Данные_ЛистП.Вставить("П01020200", "ИННФЛ");
	Данные_ЛистП.Вставить("П01020300", "ДатаРождения");
	Данные_ЛистП.Вставить("П01020400", "МестоРождения");
	Данные_ЛистП.Вставить("П01020500", "ДокументКодМВД");
	Данные_ЛистП.Вставить("П01020600", "ДокументСерияНомер");
	Данные_ЛистП.Вставить("П01020700", "ДокументДатаВыдачи");
	Данные_ЛистП.Вставить("П01020800", "ДокументКемВыдан");
	Данные_ЛистП.Вставить("П01020901", "КодПодразделенияЧасть1");
	Данные_ЛистП.Вставить("П01020902", "КодПодразделенияЧасть2");
	Данные_ЛистП.Вставить("П01030100", "АдресЭлектроннойПочты");
	Данные_ЛистП.Вставить("П01030200", "ВыдатьНаБумажномНосителе");
	Данные_ЛистП.Вставить("П01030300", "Телефон");
	
	Результат.ЛистП = "Сведения_Заявители";
	Результат.Вставить("Сведения_Заявители", Данные_ЛистП);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбИзмененииВЕГРЮЛ()
	
	Результат = Новый Структура;
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("НаименованиеПолное", "");
	Результат.Вставить("ПричинаИзменения", "");
	Результат.Вставить("АдресXML", "");
	
	Результат.Вставить("ОсновнойОКВЭД", "");
	Результат.Вставить("ОсновнойОКВЭДКИсключению", "");
	
	Результат.Вставить("НаименованиеПолное", "");
	Результат.Вставить("ПричинаИзмененияНаименования", "");
	Результат.Вставить("НаименованиеСокращенное", "");
	
	Результат.Вставить("ВидИзмененияУстава", "");
	Результат.Вставить("НомерТиповогоУстава", "");
	Результат.Вставить("ВидИзмененияУставногоКапитала", "");
	Результат.Вставить("РазмерУставногоКапитала", "");
	Результат.Вставить("ВидИзмененияМестонахождения", "");
	
	Результат.Вставить("ДополнительныеКодыОКВЭД", Новый ТаблицаЗначений);
	Результат.Вставить("ДополнительныеКодыОКВЭДКИсключению", Новый ТаблицаЗначений);
	Результат.Вставить("Сведения_УчредителиЮрЛица", Новый Массив);
	Результат.Вставить("Сведения_УчредителиФизЛица", Новый Массив);
	Результат.Вставить("Сведения_ФизЛицаСПравомПодписи", Новый Массив);
	Результат.Вставить("Сведения_Заявители", Новый Массив);
	Результат.Вставить("Сведения_Заявитель", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбИзмененииУчредителей()
	
	Результат = НовыйСведенияОбУчредителяхЮридическихЛицах();
	Результат.Вставить("ПричинаИзменения");
	Результат.Вставить("ОГРНТекущий");
	Результат.Вставить("ИННТекущий");
	Результат.Вставить("ПолноеНаименованиеТекущее");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбИзмененииДанныхФизЛиц()
	
	Результат = НовыйСведенияОФизическихЛицах();
	Результат.Вставить("ПричинаИзменения");
	Результат.Вставить("ФамилияТекущая");
	Результат.Вставить("ИмяТекущее");
	Результат.Вставить("ОтчествоТекущее");
	Результат.Вставить("ИННТекущий");
	
	Возврат Результат;
	
КонецФункции

Функция ПричинаПодачиЗаявленияИзмененийВЕГРЮЛ(ЭтоЗаявлениеР13014, ИзмененУстав, ИзмененияВносятсяВУчредительныеДокументы, НомерТиповогоУстава)

	Если Не ЭтоЗаявлениеР13014 Тогда
		Возврат "1";
	КонецЕсли;
	
	Результат = "";
	ПрименяетсяТиповойУстав = ЗначениеЗаполнено(НомерТиповогоУстава);
	
	Если (ИзмененУстав Или ИзмененияВносятсяВУчредительныеДокументы) И Не ПрименяетсяТиповойУстав Тогда
		Результат = "1"; // в связи с изменением сведений о юридическом лице и в учредительных документах
	ИначеЕсли ИзмененУстав Тогда
		Результат = "3"; // в связи с изменением сведений о юридическом лице, в учредительных документах или в уставе
	Иначе
		Результат = "2"; // в связи с изменением сведений о юридическом лице
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ИсточникКлючейПоказателейОКВЭД(ЭтоЗаявлениеР13014, КлючиПоказателей)
	
	Если ЭтоЗаявлениеР13014 Тогда
		Возврат КлючиПоказателей.ЛистК;
	Иначе
		Возврат КлючиПоказателей;
	КонецЕсли;
	
КонецФункции

Функция ВидЗаявителяИзмененийвЕГРЮЛ(ЭтоЗаявлениеР1304)
	
	Если ЭтоЗаявлениеР1304 Тогда
		Возврат "1"; // 1 - лицо, действующее от имени юридического лица без доверенности
	Иначе
		Возврат "01"; // 01 - руководитель постоянно действующего исполнительного органа
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеОФизическомЛицеЕГРЮЛ(Результат, ДанныеФизЛица, ИмяФормы, КлючиПоказателей)
	
	УказанАдресИнформирования = ЗначениеЗаполнено(ДанныеФизЛица.АдресИнформирования);
		
	Если ЗначениеЗаполнено(ДанныеФизЛица.АдресПрописки) Тогда
		АдресJSON = ДанныеФизЛица.АдресПропискиЗначениеJSON;
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресJSON);
	ИначеЕсли УказанАдресИнформирования И ЭтоРоссия(УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(
		ДанныеФизЛица.АдресИнформированияЗначениеJSON).Ссылка) Тогда
		
		АдресJSON = ДанныеФизЛица.АдресИнформированияЗначениеJSON;
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресJSON);
	Иначе
		АдресJSON = Неопределено;
		АдресXML = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресJSON) Тогда
		АдресСтруктурой = СтруктураАдреса(ИмяФормы, АдресJSON);
		ДобавитьСведенияОбАдресе(Результат, АдресСтруктурой, КлючиПоказателей);
		Результат.АдресXML = АдресXML;
	ИначеЕсли УказанАдресИнформирования Тогда
		Результат.КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.Гражданство, "Код");
		Результат.АдресИнформирования = ДанныеФизЛица.АдресИнформирования;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизЛица.ДанныеОснованияДляПроживанияВРФ.ВидДокумента) Тогда
		ПаспортныеДанные = ДанныеФизЛица.ДанныеОснованияДляПроживанияВРФ;
	Иначе
		ПаспортныеДанные = ДанныеФизЛица.ПаспортныеДанные;
		ЧастиКодаПодразделения = ЧастиКодаПодразделения(ПаспортныеДанные.КодПодразделения);
		Результат.КодПодразделенияЧасть1 = ЧастиКодаПодразделения.Часть1;
		Результат.КодПодразделенияЧасть2 = ЧастиКодаПодразделения.Часть2;
	КонецЕсли;
	
	Результат.ДокументКодМВД = ПаспортныеДанные.ДокументКодМВД;
	Результат.ДокументКемВыдан = ПаспортныеДанные.КемВыдан;
	Результат.ДокументДатаВыдачи = ПаспортныеДанные.ДатаВыдачи;
	
	Результат.ДокументСерияНомер = ПредставлениеУдостоверенияЛичности(ПаспортныеДанные.Серия, ПаспортныеДанные.Номер);
	
	Результат.ИННФЛ = ДанныеФизЛица.ИНН;
	
	Если ДанныеФизЛица.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Результат.Пол = "1";
	Иначе
		Результат.Пол = "2";
	КонецЕсли;
	
	Если ЭтоРоссия(ДанныеФизЛица.Гражданство) Тогда
		
		Результат.МестоРождения = ДанныеФизЛица.МестоРожденияПредставление;
		Результат.Гражданство = "1";
		Результат.КодСтраны = "";
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеФизЛица.Гражданство) Тогда
			Результат.Гражданство = "2";
			Результат.КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.Гражданство, "Код");
		Иначе
			Результат.Гражданство = "3";
		КонецЕсли;
		
		ЗаполнитьФИОЛатиницей(Результат, ДанныеФизЛица.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗаявлениеР13014(Период)
	
	КодыФормЗаявлений = КодыФормЗаявлений(Период);
	Возврат (КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРЮЛ = "Р13014");
	
КонецФункции

Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРЮЛ(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	Изменено = ПараметрыЗаполнения.Изменено;
	ДанныеОрганизации = ПараметрыЗаполнения.ДанныеОрганизации;
	
	ЭтоЗаявлениеР13014 = ЭтоЗаявлениеР13014(ПараметрыЗаполнения.ДатаСоставления);
	
	Если ЭтоЗаявлениеР13014 Тогда
		ВнестиИзмененияВУчредителей = Изменено.Учредители;
	Иначе
		ВнестиИзмененияВУчредителей = Изменено.Учредители И Не Изменено.УставныйКапитал;
	КонецЕсли;
	
	Если ВнестиИзмененияВУчредителей Тогда
		Учредители = ДанныеУчредителейДляЗаявлениеОВнесенииИзмененийЕГР(ПараметрыЗаполнения);
	КонецЕсли;
	
	ИмяФормы = Неопределено;
	
	Если Не ПараметрыОтчета.Свойство("ИмяФормы", ИмяФормы) Или Не ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = "Форма2014_1";
	КонецЕсли;
	
	КлючиПоказателей = КлючиПоказателейЗаявленияРегистрацииИзмененийЕГРЮЛ(ИмяФормы);
	
	СведенияОбИзменениях = НовыйСведенияОбИзмененииВЕГРЮЛ();
	СведенияОбИзменениях.ОГРН = ДанныеОрганизации.ОГРН;
	СведенияОбИзменениях.ИНН = ДанныеОрганизации.ИНН;
	СведенияОбИзменениях.ПричинаИзменения = ПричинаПодачиЗаявленияИзмененийВЕГРЮЛ(
		ЭтоЗаявлениеР13014,
		Изменено.Устав,
		ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
		ПараметрыЗаполнения.НомерТиповогоУстава);
	
	Если Не ЭтоЗаявлениеР13014 Тогда
		// В редакциях до Р13014 всегда заполняется полное наименование на титульном листе
		СведенияОбИзменениях.НаименованиеПолное = ДанныеОрганизации.НаименованиеПолное;
	Иначе
		
		Если Изменено.ПолноеНаименование Тогда
			СведенияОбИзменениях.НаименованиеПолное = ПараметрыЗаполнения.НаименованиеПолноеНовое;
		КонецЕсли;
		
		Если Изменено.СокращенноеНаименование Тогда
			СведенияОбИзменениях.ПричинаИзмененияНаименования = "1"; // 1 – внести сведения/изменить сведения
			СведенияОбИзменениях.НаименованиеСокращенное = ПараметрыЗаполнения.НаименованиеСокращенноеНовое;
			Если Не Изменено.ПолноеНаименование Тогда
				// При заполнении Листа А указываем текущее наименование организации, если меняли только сокращенное
				СведенияОбИзменениях.НаименованиеПолное = ДанныеОрганизации.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СведенияОбИзменениях.ПричинаИзменения = "1" Тогда
		
		Если Изменено.Устав Тогда
			СведенияОбИзменениях.ВидИзмененияУстава = "1"; // учредительный документ в новой редакции
		Иначе
			СведенияОбИзменениях.ВидИзмененияУстава = "2"; // изменения, внесенные в учредительный документ
		КонецЕсли;
		
	КонецЕсли;
	
	Если Изменено.Устав Тогда
		СведенияОбИзменениях.НомерТиповогоУстава = Формат(ПараметрыЗаполнения.НомерТиповогоУстава, "ЧЦ=2; ЧВН=");
	КонецЕсли;
	
	Если Изменено.УставныйКапитал Тогда
		
		Если ПараметрыЗаполнения.УставныйКапитал > ПараметрыЗаполнения.УставныйКапиталНовый Тогда
			СведенияОбИзменениях.ВидИзмененияУставногоКапитала = "1"; // принято решение об уменьшении уставного капитала
		Иначе
			СведенияОбИзменениях.ВидИзмененияУставногоКапитала = "3"; // изменен размер уставного капитала/складочного капитала/уставного фонда/паевого фонда
		КонецЕсли;
		
		СведенияОбИзменениях.РазмерУставногоКапитала = ПараметрыЗаполнения.УставныйКапиталНовый;
		
	КонецЕсли;
	
	Если Изменено.Местоположение Тогда
		СведенияОбИзменениях.ВидИзмененияМестонахождения = "1"; // принято решение об изменении места нахождения
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Тогда
		АдресСтруктурой = СтруктураАдреса(ИмяФормы, ПараметрыЗаполнения.ЮридическийАдресНовыйЗначениеJSON);
		
		Если ЭтоЗаявлениеР13014 Тогда
			ДобавитьСведенияОбАдресе(СведенияОбИзменениях,
				АдресСтруктурой,
				КлючиПоказателей.ЛистБ,
				Изменено.Местоположение);
		Иначе
			ДобавитьСведенияОбАдресе(СведенияОбИзменениях, АдресСтруктурой, КлючиПоказателей);
		КонецЕсли;
		
		СведенияОбИзменениях.АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
			ПараметрыЗаполнения.ЮридическийАдресНовыйЗначениеJSON);
	КонецЕсли;
	
	// Сведения об участнике - российском юридическом лице
	
	Если ВнестиИзмененияВУчредителей Тогда
		
		УчастникиЮридическиеЛица = Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Истина));
		УчастникиЮридическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиЮридическиеЛица Цикл
			
			НовыйЛист = НовыйСведенияОбИзмененииУчредителей();
			СведенияОЮридическомЛице = СтрокаТаблицы.СведенияОЮридическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				НовыйЛист.ПричинаИзменения = "1"; // внесение сведений о новом участнике
				// 3. Сведения об участнике/учредителе, подлежащие внесению в Единый государственный реестр юридических лиц
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОЮридическомЛице);
				ЗаполнитьЗначенияСвойств(НовыйЛист, СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				НовыйЛист.ПричинаИзменения = "2"; // внесение сведений о прекращении участия
				// 2. Сведения об участнике/учредителе, содержащиеся в Едином государственном реестре юридических лиц
				НовыйЛист.ОГРНТекущий = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.ИННТекущий = СведенияОЮридическомЛице.ИНН;
			Иначе
				НовыйЛист.ПричинаИзменения = "3"; // внесение изменений в сведения об участнике
				// 2. Сведения об участнике/учредителе, содержащиеся в Едином государственном реестре юридических лиц
				НовыйЛист.ОГРНТекущий = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.ИННТекущий = СведенияОЮридическомЛице.ИНН;
				// 3. Сведения об участнике/учредителе, подлежащие внесению в Единый государственный реестр юридических лиц
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОЮридическомЛице);
				ЗаполнитьЗначенияСвойств(НовыйЛист, СтрокаТаблицы);
			КонецЕсли;
			
			СведенияОбИзменениях.Сведения_УчредителиЮрЛица.Добавить(НовыйЛист);
			
		КонецЦикла;
		
		// Сведения об участнике - физическом лиц
		
		УчастникиФизическиеЛица = Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Ложь));
		УчастникиФизическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиФизическиеЛица Цикл
			
			НовыйЛист = НовыйСведенияОбИзмененииДанныхФизЛиц();
			СведенияОФизическомЛице = СтрокаТаблицы.СведенияОФизическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				НовыйЛист.ПричинаИзменения = "1"; // внесение сведений о новом участнике
				// 3. Сведения об участнике/учредителе, подлежащие внесению в Единый государственный реестр юридических лиц
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице);
				ЗаполнитьЗначенияСвойств(НовыйЛист, СтрокаТаблицы);
				ЗаполнитьДаннымиАдреса(НовыйЛист, ИмяФормы, СведенияОФизическомЛице, КлючиПоказателей);
				ДополнитьСведенияОФизическомЛице(НовыйЛист, СведенияОФизическомЛице);
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				НовыйЛист.ПричинаИзменения = "2"; // внесение сведений о прекращении участия
				// 2. Сведения об участнике/учредителе, содержащиеся в Едином государственном реестре юридических лиц
				НовыйЛист.ФамилияТекущая = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.ИмяТекущее = СведенияОФизическомЛице.Имя;
				НовыйЛист.ОтчествоТекущее = СведенияОФизическомЛице.Отчество;
				НовыйЛист.ИННТекущий = СведенияОФизическомЛице.ИНН;
			Иначе
				НовыйЛист.ПричинаИзменения = "3"; // внесение изменений в сведения об участнике
				// 2. Сведения об участнике/учредителе, содержащиеся в Едином государственном реестре юридических лиц
				НовыйЛист.ФамилияТекущая = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.ИмяТекущее = СведенияОФизическомЛице.Имя;
				НовыйЛист.ОтчествоТекущее = СведенияОФизическомЛице.Отчество;
				НовыйЛист.ИННТекущий = СведенияОФизическомЛице.ИНН;
				// 3. Сведения об участнике/учредителе, подлежащие внесению в Единый государственный реестр юридических лиц
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице);
				ЗаполнитьЗначенияСвойств(НовыйЛист, СтрокаТаблицы);
				ЗаполнитьДаннымиАдреса(НовыйЛист, ИмяФормы, СведенияОФизическомЛице, КлючиПоказателей);
				ДополнитьСведенияОФизическомЛице(НовыйЛист, СведенияОФизическомЛице);
			КонецЕсли;
			
			СведенияОбИзменениях.Сведения_УчредителиФизЛица.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
	Если Изменено.Руководитель Тогда
		
		// Прежний руководитель
		ДанныеРуководителя = ПараметрыЗаполнения.ДанныеОрганизации.ДанныеРуководителя;
		
		НовыйЛист = НовыйСведенияОбИзмененииДанныхФизЛиц();
		НовыйЛист.ПричинаИзменения = "2"; // Прекращение полномочий
		НовыйЛист.ФамилияТекущая = ДанныеРуководителя.Фамилия;
		НовыйЛист.ИмяТекущее = ДанныеРуководителя.Имя;
		НовыйЛист.ОтчествоТекущее = ДанныеРуководителя.Отчество;
		НовыйЛист.ИННТекущий = ДанныеРуководителя.ИНН;
		
		СведенияОбИзменениях.Сведения_ФизЛицаСПравомПодписи.Добавить(НовыйЛист);
		
		// Новый руководитель
		ДанныеНовогоРуководителя = ПараметрыЗаполнения.ДанныеНовогоРуководителя;
		ДанныеОДолжностиНовогоРуководителя = ПараметрыЗаполнения.ДанныеОДолжностиНовогоРуководителя;
		
		НовыйЛист = НовыйСведенияОбИзмененииДанныхФизЛиц();
		НовыйЛист.ПричинаИзменения = "1"; // Возложение полномочий
		ЗаполнитьЗначенияСвойств(НовыйЛист, ДанныеНовогоРуководителя);
		ЗаполнитьДанныеОФизическомЛицеЕГРЮЛ(НовыйЛист, ДанныеНовогоРуководителя, ИмяФормы, КлючиПоказателей);
		
		НовыйЛист.Должность = Строка(ДанныеОДолжностиНовогоРуководителя.Должность);
		НовыйЛист.Телефон = НомерТелефонаВРазрешенномФормате(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ДанныеНовогоРуководителя.ТелефонРабочийЗначениеJSON),
			ИмяФормы);
		
		СведенияОбИзменениях.Сведения_ФизЛицаСПравомПодписи.Добавить(НовыйЛист);
		
	КонецЕсли;
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности
	
	Если ЭтоЗаявлениеР13014 Тогда
		ВнестиИзмененияВОсновнойОКВЭД = Изменено.ОсновнойВидДеятельности;
	Иначе
		ВнестиИзмененияВОсновнойОКВЭД = Изменено.ОсновнойВидДеятельности
			И Не ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы;
	КонецЕсли;
	
	Если ВнестиИзмененияВОсновнойОКВЭД Тогда
		СведенияОбИзменениях.ОсновнойОКВЭД = ПараметрыЗаполнения.КодОКВЭД2Новый;
		СведенияОбИзменениях.ОсновнойОКВЭДКИсключению = ДанныеОрганизации.КодОКВЭД2;
	КонецЕсли;
	
	Если ЭтоЗаявлениеР13014 Тогда
		ВнестиИзмененияВОКВЭД = Изменено.ВидыДеятельности;
	Иначе
		ВнестиИзмененияВОКВЭД = Изменено.ВидыДеятельности
			И Не ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы;
	КонецЕсли;
	
	Если ВнестиИзмененияВОКВЭД Тогда
		
		ИзмененияВидовДеятельности = ИзмененияВидовДеятельности(ПараметрыЗаполнения);
		ИсточикКлючейПоказателей = ИсточникКлючейПоказателейОКВЭД(ЭтоЗаявлениеР13014, КлючиПоказателей);
		
		// Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРИП
		ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
			ИсточикКлючейПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭД.КодОКВЭД,
			СведенияОбИзменениях.ДополнительныеКодыОКВЭД,
			ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД);
		
		// Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРИП
		ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
			ИсточикКлючейПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭДКИсключению.КодОКВЭД,
			СведенияОбИзменениях.ДополнительныеКодыОКВЭДКИсключению,
			ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД);
		
	КонецЕсли;
	
	// Сведения о заявителе
	ДанныеЗаявителя = Неопределено;
	Если ПараметрыЗаполнения.Свойство("ДанныеЗаявителя", ДанныеЗаявителя) Тогда
		
		НовыйЛист = НовыйСведенияОбИзмененииДанныхФизЛиц();
		
		ЗаполнитьЗначенияСвойств(НовыйЛист, ДанныеЗаявителя);
		НовыйЛист.Вставить("ВидЗаявителя", ВидЗаявителяИзмененийвЕГРЮЛ(ЭтоЗаявлениеР13014));
		// Сведения о юридическом лице, от имени которого действует заявитель
		НовыйЛист.Вставить("ОГРН", ДанныеОрганизации.ОГРН);
		НовыйЛист.Вставить("ИНН", ДанныеОрганизации.ИНН);
		НовыйЛист.Вставить("НаименованиеПолное", ДанныеОрганизации.НаименованиеПолное);
		
		ЗаполнитьДанныеОФизическомЛицеЕГРЮЛ(НовыйЛист, ДанныеЗаявителя, ИмяФормы, КлючиПоказателей);
		
		НовыйЛист.Телефон = НомерТелефонаВРазрешенномФормате(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ДанныеЗаявителя.ТелефонРабочийЗначениеJSON),
			ИмяФормы);
		
		НовыйЛист.АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			ПараметрыЗаполнения.ДанныеЗаявителя.EMailЗначениеJSON);
		
		Если ПараметрыЗаполнения.Свойство("СпособРегистрации") Тогда
			НовыйЛист.Вставить("СпособПолученияДокументов", Формат(ПараметрыЗаполнения.СпособРегистрации, "ЧЦ=1; ЧГ=0"));
		КонецЕсли;
		
		Если ПараметрыЗаполнения.Свойство("ВыдатьНаБумажномНосителе") И ПараметрыЗаполнения.ВыдатьНаБумажномНосителе Тогда
			НовыйЛист.Вставить("ВыдатьНаБумажномНосителе", "1");
		КонецЕсли;
		
		СведенияОбИзменениях.Сведения_Заявители.Добавить(НовыйЛист);
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, СведенияОбИзменениях);
	
КонецПроцедуры

Процедура СформироватьИндивидуальныйУстав(ПараметрыВыполнения, ВладелецФайлов)
	
	ДанныеПомощникаЗаполнения = ПараметрыВыполнения.ДанныеПомощникаЗаполнения;
	ДанныеПротоколаРешения = Новый Структура("Номер, Дата", "___", ДанныеПомощникаЗаполнения.ДатаРешения);
	
	УставООО = УставОООНоваяРедакция(ДанныеПомощникаЗаполнения,
		ДанныеПротоколаРешения,
		ЭтоЗаявлениеР13014(ПараметрыВыполнения.ДанныеПомощникаЗаполнения.ДатаСоставления));
	
	Документ = НовыйДокумент(ВладелецФайлов, ИменаФайлов().Устав, УставООО);
	ПараметрыФайла = Документ.ПараметрыФайла;
	
	НайденныеПрисоединенныеФайлы = ПрисоединенныеФайлыЗаявленияПоИмени(ВладелецФайлов, ИменаФайлов());
	
	СуществующийФайл = НайденныеПрисоединенныеФайлы.Найти(ПараметрыФайла.ИмяБезРасширения, "Наименование");
	Если СуществующийФайл = Неопределено Тогда
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Документ.АдресФайла);
	Иначе
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", Документ.АдресФайла);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		РаботаСФайлами.ОбновитьФайл(СуществующийФайл.Ссылка, ПараметрыФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаявлениеРегистрацииИзмененийЕГРИП

Функция КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП_2014();
	Иначе
		Возврат КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП_2020();
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП_2014()
	
	Результат = Новый Структура("Лист001, ЛистЕ1, ЛистЕ2, ЛистЖ");
	
	// Титульный лист
	// Сведения об индивидуальном предпринимателе, содержащиеся в ЕГРИП
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "ОГРН");
	Результат.Лист001.Вставить("П01010200", "Фамилия");
	Результат.Лист001.Вставить("П01010300", "Имя");
	Результат.Лист001.Вставить("П01010400", "Отчество");
	Результат.Лист001.Вставить("П01010500", "ИНН");
	Результат.Лист001.Вставить("П01020100", "ПричинаИзменения");
	
	// Лист Е "Сведения о кодах по Общероссийскому классификатору видов экономической деятельности"
	// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
	Результат.ЛистЕ1 = Новый Структура;
	Результат.ЛистЕ1.Вставить("А01010000", "ОсновнойКодОКВЭД");
	
	// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
	Результат.ЛистЕ2 = Новый Структура;
	Результат.ЛистЕ2.Вставить("А01010000", "ОсновнойКодОКВЭДИсключить");
	
	// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
	Результат.Вставить("МногострочнаяЧасть1", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
	Результат.Вставить("МногострочнаяЧасть2", "ДополнительныеКодыОКВЭДИсключить");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭДИсключить", КолонкиТаблицыДополнительныеКодыОКВЭД("А01020000"));
	
	// Лист Ж
	Результат.ЛистЖ = Новый Структура;
	Результат.ЛистЖ.Вставить("Ж01010000", "СпособРегистрации");
	Результат.ЛистЖ.Вставить("Ж01020000", "ТелефонРабочий");
	Результат.ЛистЖ.Вставить("Ж01030000", "АдресЭлектроннойПочты");
	
	Возврат Результат;
	
КонецФункции

Функция КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП_2020()
	
	Результат = Новый Структура("Лист001, ЛистД1, ЛистД2, ЛистЕ");
	
	// Титульный лист
	// Сведения об индивидуальном предпринимателе, содержащиеся в ЕГРИП
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "ОГРН");
	Результат.Лист001.Вставить("П01010201", "Фамилия");
	Результат.Лист001.Вставить("П01010202", "Имя");
	Результат.Лист001.Вставить("П01010203", "Отчество");
	Результат.Лист001.Вставить("П01020100", "ПричинаИзменения");
	Результат.Лист001.Вставить("П01030100", "ДейтвиеСЭлектроннойПочтой");
	Результат.Лист001.Вставить("П01030200", "ЭлектроннаяПочтаЕГРИП");
	
	// Лист Д "Сведения о кодах по Общероссийскому классификатору видов экономической деятельности"
	// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
	Результат.ЛистД1 = Новый Структура;
	Результат.ЛистД1.Вставить("Д01010100", "ОсновнойКодОКВЭД");
	
	// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
	Результат.ЛистД2 = Новый Структура;
	Результат.ЛистД2.Вставить("Д01020100", "ОсновнойКодОКВЭДИсключить");
	
	// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
	Результат.Вставить("МногострочнаяЧастьД010102", "ДополнительныеКодыОКВЭД");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭД", КолонкиТаблицыДополнительныеКодыОКВЭД("Д01010200"));
	
	// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
	Результат.Вставить("МногострочнаяЧастьД010202", "ДополнительныеКодыОКВЭДИсключить");
	Результат.Вставить("КолонкиТаблицыДополнительныеКодыОКВЭДИсключить", КолонкиТаблицыДополнительныеКодыОКВЭД("Д01020200"));
	
	// Лист Е
	Результат.ЛистЕ = Новый Структура;
	Результат.ЛистЕ.Вставить("Е01020100", "АдресЭлектроннойПочты");
	Результат.ЛистЕ.Вставить("Е01020200", "ВыдатьНаБумажномНосителе");
	Результат.ЛистЕ.Вставить("Е01030100", "ТелефонРабочий");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСведенияОбИзмененииВЕГРИП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПричинаИзменения", "");
	Результат.Вставить("ДейтвиеСЭлектроннойПочтой", "");
	Результат.Вставить("ЭлектроннаяПочтаЕГРИП", "");
	
	Результат.Вставить("ОсновнойКодОКВЭД", "");
	Результат.Вставить("ОсновнойКодОКВЭДИсключить", "");
	Результат.Вставить("ДополнительныеКодыОКВЭД", Новый ТаблицаЗначений);
	Результат.Вставить("ДополнительныеКодыОКВЭДИсключить", Новый ТаблицаЗначений);
	
	Результат.Вставить("СпособРегистрации", "");
	Результат.Вставить("ВыдатьНаБумажномНосителе", "");
	Результат.Вставить("ТелефонРабочий", "");
	Результат.Вставить("АдресЭлектроннойПочты", "");
	
	Возврат Результат;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных регламентированного отчета
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры регламентированного отчета (см. РегламентированноеУведомлениеФормаР24001.СоздатьЗаполненноеУведомление)
//   Контейнер - Структура - данные регламентированного отчета (см. РегламентированноеУведомлениеФормаР24001.СоздатьЗаполненноеУведомление)
//
Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРИП(ПараметрыОтчета, Контейнер) Экспорт
	
	КлючиПоказателей = КлючиПоказателейЗаявлениеРегистрацииИзмененийЕГРИП(ПараметрыОтчета.ИмяФормы);
	
	СведенияОбИзменениях = НовыйСведенияОбИзмененииВЕГРИП();
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	ДанныеОрганизации = ПараметрыЗаполнения.ДанныеОрганизации;
	
	СведенияОбИзменениях.ОГРН = ДанныеОрганизации.ОГРН;
	СведенияОбИзменениях.Фамилия = ДанныеОрганизации.ИндивидуальныйПредприниматель.Фамилия;
	СведенияОбИзменениях.Имя = ДанныеОрганизации.ИндивидуальныйПредприниматель.Имя;
	СведенияОбИзменениях.Отчество = ДанныеОрганизации.ИндивидуальныйПредприниматель.Отчество;
	СведенияОбИзменениях.ИНН = ДанныеОрганизации.ИНН;
	СведенияОбИзменениях.ПричинаИзменения = "1"; // в связи с изменением сведений об индивидуальном предпринимателе
	
	Если ПараметрыЗаполнения.Изменено.ОсновнойВидДеятельности Тогда
		
		// Код ОКВЭД, подлежащий внесению в ЕГРИП
		СведенияОбИзменениях.ОсновнойКодОКВЭД = ПараметрыЗаполнения.КодОКВЭД2Новый;
		// Код ОКВЭД, подлежащий исключению из ЕГРИП
		СведенияОбИзменениях.ОсновнойКодОКВЭДИсключить = ДанныеОрганизации.КодОКВЭД2;
		
	КонецЕсли;
	
	// Таблица добавления новых кодов ОКВЭД
	Если ПараметрыЗаполнения.Изменено.ВидыДеятельности Тогда
		
		ИзмененияВидовДеятельности = ИзмененияВидовДеятельности(ПараметрыЗаполнения);
		
		// Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРИП
		ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
			КлючиПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭД.КодОКВЭД,
			СведенияОбИзменениях.ДополнительныеКодыОКВЭД,
			ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД);
		
		// Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРИП
		ЗаполнитьТаблицуДополнительныхКодовОКВЭД(
			КлючиПоказателей.КолонкиТаблицыДополнительныеКодыОКВЭДИсключить.КодОКВЭД,
			СведенияОбИзменениях.ДополнительныеКодыОКВЭДИсключить,
			ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД);
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("СпособРегистрации") Тогда
		СведенияОбИзменениях.СпособРегистрации = Формат(ПараметрыЗаполнения.СпособРегистрации, "ЧГ=0");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ВыдатьНаБумажномНосителе") Тогда
		СведенияОбИзменениях.ВыдатьНаБумажномНосителе = Формат(ПараметрыЗаполнения.ВыдатьНаБумажномНосителе, "БЛ=; БИ=1");
	КонецЕсли;
	
	ДанныеЗаявителя = Неопределено;
	Если ПараметрыЗаполнения.Свойство("ДанныеЗаявителя", ДанныеЗаявителя) Тогда
		
		СведенияОбИзменениях.ТелефонРабочий = НомерТелефонаВРазрешенномФормате(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ДанныеЗаявителя.ТелефонРабочийЗначениеJSON),
			ПараметрыОтчета.ИмяФормы);
		
		СведенияОбИзменениях.АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			ДанныеЗаявителя.EMailЗначениеJSON);
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, СведенияОбИзменениях);
	
КонецПроцедуры

#КонецОбласти

// Возвращает сумму государственной пошлины за внесение изменений в учредительные документы
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы() Экспорт
	
	Возврат 800;
	
КонецФункции

// Возвращает учетную политику по умолчанию при внесении изменений в ЕГРЮЛ/ЕГРИП
//
Функция УчетнаяПолитикаПоУмолчанию(ЮридическоеФизическоеЛицо)
	
	ЭтоЮрЛицо = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ВидОрганизации = ?(ЭтоЮрЛицо, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	СистемаНалогообложения = "УпрощеннаяДоходы";
	ПлательщикЕНВД = Ложь;
	ПрименяетсяУСНПатент = Ложь;
	
	Возврат РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
		ВидОрганизации,
		СистемаНалогообложения,
		ПлательщикЕНВД,
		ПрименяетсяУСНПатент);
	
КонецФункции

Функция СведенияОНалоговомОрганеПоАдресу(Знач Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьРегистрирующийОрган(ДанныеПомощникаЗаполнения) Экспорт
	
	Результат = Новый Структура;
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	ДанныеОрганизации = ДанныеПомощникаЗаполнения.ДанныеОрганизации;
	ДанныеЗаявителя = ДанныеПомощникаЗаполнения.ДанныеЗаявителя;
	Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Если Изменено.Местоположение Тогда
			// Изменения регистрируются по новому местоположению
			АдресРегистрации = ДанныеПомощникаЗаполнения.ЮридическийАдресНовыйЗначениеJSON;
		Иначе
			// Изменения регистрируются по юридическому адресу
			АдресРегистрации = ДанныеОрганизации.ЮридическийАдресЗначениеJSON;
		КонецЕсли;
	Иначе
		// Изменения регистрируются по адресу прописки
		АдресРегистрации = ДанныеЗаявителя.АдресПропискиЗначениеJSON;
	КонецЕсли;
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(АдресРегистрации);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
	Иначе
		КодНалоговогоОргана = "";
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ДанныеОрганизации.Ссылка);
	РеквизитыРегистрирующегоОргана = РеквизитыРегистрирующегоОргана(КодНалоговогоОргана, ЭтоЮрЛицо);
	КодРегистрирующегоОргана = "";
	
	Если Не ЗначениеЗаполнено(РеквизитыРегистрирующегоОргана.Код)
		Или СтрДлина(РеквизитыРегистрирующегоОргана.Код) <> 4 Тогда
		
		КодРегистрирующегоОргана = КодРегистрирующегоОргана(АдресРегистрации, ДанныеОрганизации.ИНН, ЭтоЮрЛицо);
	Иначе
		КодРегистрирующегоОргана = РеквизитыРегистрирующегоОргана.Код;
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана.Код = КодРегистрирующегоОргана;
	Результат.Вставить("РеквизитыРегистрирующегоОргана", РеквизитыРегистрирующегоОргана);
	
	Если Изменено.Местоположение Тогда
		
		СведенияОПрежнемНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеОрганизации.ЮридическийАдресЗначениеJSON);
		Если СведенияОПрежнемНалоговомОргане <> Неопределено Тогда
			КодПрежнегоНалоговогоОргана = СведенияОПрежнемНалоговомОргане.КодНалоговогоОргана;
		Иначе
			КодПрежнегоНалоговогоОргана = "";
		КонецЕсли;
		
		Результат.Вставить("РеквизитыПрежнегоРегистрирующегоОргана",
			РеквизитыРегистрирующегоОргана(КодПрежнегоНалоговогоОргана, Истина));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеУчредителейДляЗаявлениеОВнесенииИзмененийЕГР(ДанныеПомощникаЗаполнения)
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.Учредители Или Изменено.УставныйКапитал Тогда
		
		Учредители = ДанныеПомощникаЗаполнения.УчредителиНовые.Скопировать();
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(Учредители);
		Учредители.Колонки.Добавить("СуммаВзносаДоИзменения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		Учредители.Колонки.Добавить("ДоляУчастияДоИзменения", ОписаниеТипаДоляУчредителя());
		
		УчредителиДоИзменения = ДанныеПомощникаЗаполнения.ДанныеОрганизации.Учредители.Скопировать();
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(УчредителиДоИзменения);
		Для Каждого СтрокаТаблицы Из УчредителиДоИзменения Цикл
			НайденныеСтроки = Учредители.НайтиСтроки(Новый Структура("Ссылка", СтрокаТаблицы.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Внесены сведения о прекращении участия
				НоваяСтрока = Учредители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "СуммаВзноса, ДоляУчастия");
				НоваяСтрока.СуммаВзносаДоИзменения = СтрокаТаблицы.СуммаВзноса;
				НоваяСтрока.ДоляУчастияДоИзменения = СтрокаТаблицы.ДоляУчастия;
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				НайденныеСтроки[0].СуммаВзносаДоИзменения = СтрокаТаблицы.СуммаВзноса;
			Иначе
				ВызватьИсключение НСтр("ru = 'В таблице учредителей обнаружены дубли участников'");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Учредители = ДанныеПомощникаЗаполнения.ДанныеОрганизации.Учредители.Скопировать();
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(Учредители);
		Учредители.Колонки.Добавить("СуммаВзносаДоИзменения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		Учредители.ЗагрузитьКолонку(Учредители.ВыгрузитьКолонку("СуммаВзносаДоИзменения"), "СуммаВзноса");
	КонецЕсли;
	
	Учредители.Колонки.Ссылка.Имя = "Учредитель";
	Учредители.Колонки.Добавить("ЭтоЮридическоеЛицо", Новый ОписаниеТипов("Булево"));
	Для Каждого Участник Из Учредители Цикл
		Участник.ЭтоЮридическоеЛицо = Участник.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЦикла;
	Учредители.Колонки.Удалить("ТипУчредителя");
	
	ЗаполнитьПодробнуюИнформациюОбУчредителях(Учредители);
	
	Возврат Учредители;
	
КонецФункции

// Возвращает код регистрирующего органа по ИНН организации/ИП
//
// Параметры:
//   ИНН - Строка - ИНН юридического лица или индивидуального предпринимателя
//   ЭтоЮрЛицо - Булево - Признак, указывающий это ИНН юридического лица или нет
//
Функция КодРегистрирующегоОрганаПоИНН(ИНН, ЭтоЮрЛицо) Экспорт
	
	КодРегистрирующегоОргана = "";
	
	Если ЭтоЮрЛицо Тогда
		РеквизитыОрганизации = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		Если РеквизитыОрганизации.ЕГРЮЛ <> Неопределено Тогда
			КодРегистрирующегоОргана = РеквизитыОрганизации.ЕГРЮЛ.РегистрирующийОрган.Код;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодРегистрирующегоОргана;
	
КонецФункции

// Возвращает код регистрирующего органа по адресу или ИНН организации.
// Сначала вычисляется код по адресу из классификатора (см. РегистрСведений.РегистрирующиеНалоговыеОрганы).
// Если код по классификатору не найден, выполняется поиск кода по ИНН.
//
// Параметры:
//   Адрес     - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO-пакету Адрес
//   ИНН       - Строка - ИНН юридического лица или индивидуального предпринимателя
//   ЭтоЮрЛицо - Булево - Признак, указывающий это ИНН юридического лица или нет
//
Функция КодРегистрирующегоОргана(Адрес, ИНН, ЭтоЮрЛицо) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		Результат = РегистрыСведений.РегистрирующиеНалоговыеОрганы.КодРегистрирующегоОрганаВРегионе(
			РаботаСАдресами.СведенияОбАдресе(Адрес).КодРегиона);
	КонецЕсли;
	
	// В случае, когда классификатор регистрирующих органов не заполнен,
	// пробуем определить код регистрирующей налоговой по ИНН.
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = КодРегистрирующегоОрганаПоИНН(ИНН, ЭтоЮрЛицо);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УставООО

// Формирует печатную форму устава организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой формируется устав.
//  ИмяФормы    - Строка - Имя формы заявления о регистрации ООО
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция УставООО(Организация, ИмяФормы) Экспорт
	
	Период = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, Период);
	Если ДанныеУчредителей = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных об учредителях организации.'");
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, Период);
	Если ДанныеРуководителя = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных о руководителе организации.'");
	КонецЕсли;
	
	РеквизитыОрганизации = Новый Массив;
	РеквизитыОрганизации.Добавить("НаимЮЛПол");
	РеквизитыОрганизации.Добавить("НаимЮЛСокр");
	РеквизитыОрганизации.Добавить("АдрЮР_JSON");
	
	ДанныеОрганизации = НовыеДанныеЮридическогоЛица();
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "НаименованиеСокращенное, НаименованиеПолное"));
		
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		Организация,
		Период,
		РеквизитыОрганизации);
	
	Если ИмяФормы = "Форма2014_1" Тогда
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		МестоНахождения = АдресСтруктурой.Представление;
	Иначе
		МестоНахождения = МестоНахожденияОрганизации(СведенияОбОрганизации.АдрЮР_JSON);
	КонецЕсли;
	
	ДанныеОрганизации.НаименованиеСокращенное = СведенияОбОрганизации.НаимЮЛСокр;
	ДанныеОрганизации.НаименованиеПолное = СведенияОбОрганизации.НаимЮЛПол;
	ДанныеОрганизации.ЮридическийАдрес = МестоНахождения;
	ДанныеОрганизации.ЮридическийАдресЗначениеJSON = СведенияОбОрганизации.АдрЮР_JSON;
	
	ДанныеОрганизации.УставныйКапитал = ДанныеУчредителей.УставныйКапитал;
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации.ДанныеОДолжностиРуководителя, ДанныеРуководителя);
	
	ДанныеПротоколаРешения = Новый Структура("Номер, Дата", "1", ДанныеУчредителей.Дата);
	
	Возврат ЗаполнитьУставООО(ДанныеОрганизации, ДанныеПротоколаРешения, ИмяМакетаУставаООО(ДанныеОрганизации.Учредители));
	
КонецФункции

Функция УставОООНоваяРедакция(ДанныеПомощникаЗаполнения, ДанныеПротоколаРешения, ЭтоЗаявлениеР13014)
	
	ДанныеОрганизации = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПомощникаЗаполнения.ДанныеОрганизации);
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.ПолноеНаименование Или Изменено.СокращенноеНаименование Тогда
		ДанныеОрганизации.НаименованиеПолное = ДанныеПомощникаЗаполнения.НаименованиеПолноеНовое;
		ДанныеОрганизации.НаименованиеСокращенное = ДанныеПомощникаЗаполнения.НаименованиеСокращенноеНовое;
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
		ЮридическийАдрес = ДанныеПомощникаЗаполнения.ЮридическийАдресНовый;
		ЮридическийАдресJSON = ДанныеПомощникаЗаполнения.ЮридическийАдресНовыйЗначениеJSON;
	Иначе
		ЮридическийАдрес = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ЮридическийАдрес;
		ЮридическийАдресJSON = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ЮридическийАдресЗначениеJSON;
	КонецЕсли;
		
	Если ЭтоЗаявлениеР13014 Тогда
		МестоНахождения = МестоНахожденияОрганизации(ЮридическийАдресJSON);
	Иначе
		МестоНахождения = ЮридическийАдрес;
	КонецЕсли;
	
	ДанныеОрганизации.ЮридическийАдрес = МестоНахождения;
	ДанныеОрганизации.ЮридическийАдресЗначениеJSON = ЮридическийАдресJSON;
	
	Если Изменено.УставныйКапитал Тогда
		ДанныеОрганизации.УставныйКапитал = ДанныеПомощникаЗаполнения.УставныйКапиталНовый;
	КонецЕсли;
	
	Если Изменено.Руководитель Тогда
		ДанныеОрганизации.ДанныеОДолжностиРуководителя = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя);
	КонецЕсли;
	
	Возврат ЗаполнитьУставООО(ДанныеОрганизации, ДанныеПротоколаРешения, ИмяМакетаУставаООО(ДанныеОрганизации.Учредители));
	
КонецФункции

Функция ИмяМакетаУставаООО(Учредители)
	
	Если ТребуетсяСобраниеУчредителей(Учредители) Тогда
		ИмяМакета = "УставОбщества";
	Иначе
		ИмяМакета = "УставЕдинственногоУчредителя";
	КонецЕсли;
	
	Возврат ИмяМакета;
	
КонецФункции

// Возвращает представление адреса место нахождния организации
//
// Параметры:
//   АдресJSON - Строка - адрес в формате JSON
//
// Возвращаемое значение:
//      Строка
//
Функция МестоНахожденияОрганизации(АдресJSON)
	
	АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(АдресJSON);
	РеквизитыМестонахождения = Новый Массив;
	
	КодГородскогоОкруга = "2";
	Регион = "";
	Если ЗначениеЗаполнено(АдресСтруктурой.Регион) Тогда
		Регион = ЭлементАдресаССокращением(АдресСтруктурой.Регион, АдресСтруктурой.РегионСокращение);
	КонецЕсли;
	
	РеквизитыМестонахождения.Добавить(Регион);
	
	Если Не РаботаСАдресами.ЭтоГородФедеральногоЗначения(Регион) Тогда
		
		Если ЗначениеЗаполнено(АдресСтруктурой.МуниципальныйРайон)
			И АдресСтруктурой.КодМуниципальногоРайона <> КодГородскогоОкруга Тогда
			
			РеквизитыМестонахождения.Добавить(АдресСтруктурой.МуниципальныйРайон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСтруктурой.Район) И АдресСтруктурой.КодМуниципальногоРайона <> КодГородскогоОкруга Тогда
			РеквизитыМестонахождения.Добавить(ЭлементАдресаССокращением(
				АдресСтруктурой.Район,
				АдресСтруктурой.РайонСокращение));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСтруктурой.НаселенныйПункт) Тогда
			РеквизитыМестонахождения.Добавить(ЭлементАдресаССокращением(
				АдресСтруктурой.НаселенныйПункт,
				АдресСтруктурой.НаселенныйПунктСокращение));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСтруктурой.Город) Тогда
			РеквизитыМестонахождения.Добавить(ЭлементАдресаССокращением(
				АдресСтруктурой.Город,
				АдресСтруктурой.ГородСокращение));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(РеквизитыМестонахождения, ", ");
	
КонецФункции

Функция ЭлементАдресаССокращением(Значение, Сокращение)
	
	Возврат СокрЛП(СтрШаблон("%1 %2", Значение, Сокращение));
	
КонецФункции

Функция ЗаполнитьУставООО(ДанныеОрганизации, ДанныеПротоколаРешения, ИмяМакета)
	
	ПараметрыТекста = Новый Структура();
	
	ПараметрыТекста.Вставить("НомерПротокола", ДанныеПротоколаРешения.Номер);
	ПараметрыТекста.Вставить("ДатаПротокола", Формат(ДанныеПротоколаРешения.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
	
	ПараметрыТекста.Вставить("НаименованиеСокращенное", ДанныеОрганизации.НаименованиеСокращенное);
	ПараметрыТекста.Вставить("НаименованиеПолное", ДанныеОрганизации.НаименованиеПолное);
	
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже(ДанныеОрганизации.НаименованиеПолное));
	
	ПараметрыТекста.Вставить("ЮрАдресОрганизации", ДанныеОрганизации.ЮридическийАдрес);
	
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталСВалютой = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДанныеОрганизации.УставныйКапитал, Валюта);
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеОрганизации.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописи);
	ПараметрыТекста.Вставить("УставныйКапитал", СтрШаблон("%1 (%2)", УставныйКапиталСВалютой, УставныйКапиталПрописью));
	
	ДолжностьДиректораСтрокой = Строка(ДанныеОрганизации.ДанныеОДолжностиРуководителя.Должность);
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", Строка(ДолжностьДиректораСтрокой));
	ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 2)));
	ПараметрыТекста.Вставить("ДолжностьДиректораВДательномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 3)));
	ПараметрыТекста.Вставить("ДолжностьДиректораВТворительномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 5)));
	
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью", СрокПолномочийПрописью(ДанныеОрганизации.ДанныеОДолжностиРуководителя.СрокПолномочий));
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	ШрифтТекстаУчредительныхДокументов = Новый Шрифт("Times New Roman", 12);
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.МеждустрочныйИнтервал = 1.5;
		Для Каждого Элемент Из Параграф.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				Элемент.Шрифт = ШрифтТекстаУчредительныхДокументов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресХранилища;
	
КонецФункции

// Формирует типовой устав ООО
// Параметры:
//		НомерУстава - Число - номер выбранного типового устава.
//		ДанныеУстава - Структура - Ключи:
//                                  *УставПродажаДолиУчастникамБезСогласия - Булево
//                                  *УставПродажаДолиТретьимЛицамБезСогласия - Булево
//                                  *УставНаследованиеБезСогласия - Булево
//                                  *УставНетПреимущественногоПраваПриПродаже - Булево
//                                  *УставРазрешаетсяДобровольныйВыход - Булево
//                                  *УставРешенияПодтверждаютсяНотариально - Булево
//		УникальныйИдентификатор - УникальныйИдентификатор - используется для сохранения адреса временного хранилища
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате PDF.
//
Функция ТиповойУставООО(НомерУстава, ДанныеУстава, УникальныйИдентификатор) Экспорт
	
	Макет = ПолучитьМакет("ТиповойУставООО");
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим первые пункты устава всегда без изменений
	Область = Макет.ПолучитьОбласть("Часть1");
	Область.Параметры.НомерУстава = НомерУстава;
	Результат.Вывести(Область);
	
	// Выводим Продажа другим участникам без согласия остальных
	ИмяОбласти = ?(ДанныеУстава.УставПродажаДолиУчастникамБезСогласия, "УставПродажаДолиУчастникамБезСогласия1", "УставПродажаДолиУчастникамБезСогласия0");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Результат.Вывести(Область);
	
	// Выводим Продажа третьим лицам без согласия других участников
	ИмяОбласти = ?(ДанныеУстава.УставПродажаДолиТретьимЛицамБезСогласия, "УставПродажаДолиТретьимЛицамБезСогласия1", "УставПродажаДолиТретьимЛицамБезСогласия0");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Результат.Вывести(Область);
	
	// Выводим Наследование без согласия других участников
	ИмяОбласти = ?(ДанныеУстава.УставНаследованиеБезСогласия, "УставНаследованиеБезСогласия1", "УставНаследованиеБезСогласия0");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Результат.Вывести(Область);
	
	// Выводим Пункт 6 типового устава без изменений
	Область = Макет.ПолучитьОбласть("Пункт6");
	Результат.Вывести(Область);
	
	НомерПункта = 6;
	
	// Выводим Отсутствует преимущественное право при продаже третьим лицам
	Если ДанныеУстава.УставОтсутствуетПреимущественноеПравоПриПродаже Тогда
		Область = Макет.ПолучитьОбласть("УставОтсутствуетПреимущественноеПравоПриПродаже");
		Результат.Вывести(Область);
		
		НомерПункта = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	КонецЕсли;
	
	// Выводим Выход из общества
	Область = Макет.ПолучитьОбласть("ВыходИзОбществаЗаголовок");
	Результат.Вывести(Область);
	
	ИмяОбласти = ?(ДанныеУстава.УставДобровольныйВыходИзОбщества, "УставДобровольныйВыходИзОбщества1", "УставДобровольныйВыходИзОбщества0");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.НомерВыходИзОбщества = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Результат.Вывести(Область);
	
	// Выводим начало раздела Управление обществом без изменений
	Область = Макет.ПолучитьОбласть("УправлениеВОбществе");
	Область.Параметры.НомерВысшийОрган = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Результат.Вывести(Область);
	
	// Выводим способ принятия решений
	ИмяОбласти = ?(ДанныеУстава.УставРешенияПодтверждаютсяНотариально, "УставРешенияПодтверждаютсяНотариально1", "УставРешенияПодтверждаютсяНотариально0");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.НомерПринятиеРешения = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Результат.Вывести(Область);
		
	// Выводим Способ управления
	Область = Макет.ПолучитьОбласть("СпособУправленияЕдинолично");
	Область.Параметры.НомерУправление = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Результат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Часть2");
	Область.Параметры.НомерПрава              = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Область.Параметры.НомерХранениеДокументов = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Область.Параметры.НомерСделки             = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Область.Параметры.НомерРеорганизация      = УвеличитьЗначениеНаЕдиницу(НомерПункта);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрацияОрганизации.ТиповойУставООО'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Адрес;
	
КонецФункции

#КонецОбласти

#Область ПротоколРешениеУчредителейООО

// Формирует печатную форму решения учредителей ООО в зависимости от переданного макета
//
Функция ПротоколРешениеУчредителейОООДляИзмененияРеквизитов(ДанныеПомощникаЗаполнения, ИмяМакета)
	
	ДанныеПечати = ДанныеПечатиПротоколаРешенияДляИзмененияРеквизитов(ДанныеПомощникаЗаполнения);
	
	ТекстHTML = ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ТекстHTML = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстHTML, ДанныеПечати.ПараметрыПечати);
	
	УдалитьБлокиHTML(ТекстHTML, ДанныеПечати.БлокиКУдалению);
	
	ПодставитьНомераПунктов(ТекстHTML, "[НомерПункта]");
	ПодставитьНомераПунктов(ТекстHTML, "[НомерПунктаПовестка]");
	ПодставитьНомераПунктовТекстом(ТекстHTML);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(ТекстHTML, Новый Структура());
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Процедура УдалитьБлокиHTML(ТекстHTML, БлокиКУдалению)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ЧтениеHTML.Закрыть();
	
	Для Каждого БлокКУдалению Из БлокиКУдалению Цикл
		УдаляемыйБлок = ДокументDOM.ПолучитьЭлементПоИдентификатору(БлокКУдалению);
		Если УдаляемыйБлок <> Неопределено Тогда
			УдаляемыйБлок.РодительскийУзел.УдалитьДочерний(УдаляемыйБлок);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьHTML);
	
	ТекстHTML = ЗаписьHTML.Закрыть();
	
КонецПроцедуры

Процедура ПодставитьНомераПунктов(ТекстHTML, ТегНомерПункта)
	
	НомерПункта = 0;
	
	ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	Пока ПозицияНомераПункта <> 0 Цикл
		НомерПункта = НомерПункта + 1;
		ТекстHTML = Лев(ТекстHTML, ПозицияНомераПункта - 1)
			+ Формат(НомерПункта, "ЧДЦ=") 
			+ Сред(ТекстHTML, ПозицияНомераПункта + СтрДлина(ТегНомерПункта));
		
		ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодставитьНомераПунктовТекстом(ТекстHTML)
	
	НомерПункта = 0;
	
	ТегНомерПункта = "[НомерПунктаТекстом]";
	ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	Пока ПозицияНомераПункта <> 0 Цикл
		НомерПункта = НомерПункта + 1;
		ТекстHTML = Лев(ТекстHTML, ПозицияНомераПункта - 1)
			+ НомерПунктаТекстом(НомерПункта)
			+ Сред(ТекстHTML, ПозицияНомераПункта + СтрДлина(ТегНомерПункта));
		
		ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	КонецЦикла;
	
	
КонецПроцедуры

Функция НомерПунктаТекстом(НомерПункта)
	
	Если НомерПункта = 1 Тогда
		Возврат НСтр("ru='первому'");
	ИначеЕсли НомерПункта = 2 Тогда
		Возврат НСтр("ru='второму'");
	ИначеЕсли НомерПункта = 3 Тогда
		Возврат НСтр("ru='третьему'");
	ИначеЕсли НомерПункта = 4 Тогда
		Возврат НСтр("ru='четвертому'");
	ИначеЕсли НомерПункта = 5 Тогда
		Возврат НСтр("ru='пятому'");
	ИначеЕсли НомерПункта = 6 Тогда
		Возврат НСтр("ru='шестому'");
	ИначеЕсли НомерПункта = 7 Тогда
		Возврат НСтр("ru='седьмому'");
	ИначеЕсли НомерПункта = 8 Тогда
		Возврат НСтр("ru='восьмому'");
	ИначеЕсли НомерПункта = 9 Тогда
		Возврат НСтр("ru='девятому'");
	ИначеЕсли НомерПункта = 10 Тогда
		Возврат НСтр("ru='десятому'");
	ИначеЕсли НомерПункта = 11 Тогда
		Возврат НСтр("ru='одиннадцатому'");
	ИначеЕсли НомерПункта = 12 Тогда
		Возврат НСтр("ru='двенадцатому'");
	ИначеЕсли НомерПункта = 13 Тогда
		Возврат НСтр("ru='тринадцатому'");
	ИначеЕсли НомерПункта = 14 Тогда
		Возврат НСтр("ru='четырнадцатому'");
	ИначеЕсли НомерПункта = 15 Тогда
		Возврат НСтр("ru='пятнадцатому'");
	ИначеЕсли НомерПункта = 16 Тогда
		Возврат НСтр("ru='шестнадцатому'");
	ИначеЕсли НомерПункта = 17 Тогда
		Возврат НСтр("ru='семнадцатому'");
	ИначеЕсли НомерПункта = 18 Тогда
		Возврат НСтр("ru='восемнадцатому'");
	ИначеЕсли НомерПункта = 19 Тогда
		Возврат НСтр("ru='девятнадцатому'");
	ИначеЕсли НомерПункта = 20 Тогда
		Возврат НСтр("ru='двадцатому'");
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции 

Функция ДанныеПечатиПротоколаРешенияДляИзмененияРеквизитов(ДанныеПомощникаЗаполнения)
	
	ПараметрыПечати = Новый Структура;
	БлокиКУдалению  = Новый Массив;
	
	ЗаполнитьОбщиеДанныеДляИзмененияРеквизитов(ПараметрыПечати, ДанныеПомощникаЗаполнения.ДанныеОрганизации, ДанныеПомощникаЗаполнения.ДатаРешения);
	
	ЗаполнитьДанныеУчредителейДляИзмененияРеквизитов(ПараметрыПечати, ДанныеПомощникаЗаполнения.ДанныеОрганизации.Учредители);
	
	Если ДанныеПомощникаЗаполнения.Изменено.Руководитель Тогда
		ДанныеРуководителя = ДанныеПомощникаЗаполнения.ДанныеНовогоРуководителя;
		ДанныеОДолжностиРуководителя = ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя;
	Иначе
		ДанныеРуководителя = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ДанныеРуководителя;
		ДанныеОДолжностиРуководителя = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ДанныеОДолжностиРуководителя;
	КонецЕсли;
	ЗаполнитьДанныеРуководителяДляИзмененияРеквизитов(ПараметрыПечати, ДанныеРуководителя, ДанныеОДолжностиРуководителя);
	
	ЗаполнитьДанныеИзмененияРуководителя(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ЗаполнитьДанныеНаименованияДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ЗаполнитьДанныеАдресаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ЗаполнитьДанныеИзмененияУчредителей(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ЗаполнитьДанныеИзмененияОсновногоОКВЭД(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ИзмененияВидовДеятельности = ИзмененияВидовДеятельности(ДанныеПомощникаЗаполнения, Истина);
	
	ЗаполнитьДанныеДобавленияДополнительныхОКВЭД(ПараметрыПечати, БлокиКУдалению, ИзмененияВидовДеятельности);
	ЗаполнитьДанныеИсключенияДополнительныхОКВЭД(ПараметрыПечати, БлокиКУдалению, ИзмененияВидовДеятельности);
	
	ЗаполнитьДанныеИзмененияУставаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения);
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("ПараметрыПечати", ПараметрыПечати);
	ДанныеПечати.Вставить("БлокиКУДалению", БлокиКУдалению);
	Возврат ДанныеПечати;
	
КонецФункции

Функция ОписаниеУчастниковОбщества(Учредители)
	
	ОписаниеУчастников = "";
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.ЭтоЮридическоеЛицо Тогда
			НаименованиеУчредителя = Учредитель.СведенияОЮридическомЛице.ПолноеНаименование;
		Иначе
			НаименованиеУчредителя = Учредитель.СведенияОФизическомЛице.ФИОПолные;
		КонецЕсли;
		
		ОписаниеУчастников = ОписаниеУчастников + СтрШаблон(НСтр("ru = '<LI>%1.</LI>'"), НаименованиеУчредителя);
	КонецЦикла;
	
	Возврат ОписаниеУчастников;
	
КонецФункции

Процедура ЗаполнитьОбщиеДанныеДляИзмененияРеквизитов(ПараметрыПечати, ДанныеОрганизации, ДатаРешения)
	
	ПолноеНаименованиеОрганизацииВРодительномПадеже = СокрЛП(ДанныеОрганизации.НаименованиеПолное);
	СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
	Если Лев(ВРег(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРег(СловоОбщество) Тогда
		ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
			+ Сред(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
	КонецЕсли;
	
	Город = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(ДанныеОрганизации.ЮридическийАдресЗначениеJSON);
	
	ПараметрыПечати.Вставить("НаименованиеПолноеВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
	ПараметрыПечати.Вставить("ДатаПроведения",                       Формат(ДатаРешения, "ДФ='dd MMMM yyyy ''г.'''"));
	ПараметрыПечати.Вставить("МестоПроведения",                      Город);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчредителейДляИзмененияРеквизитов(ПараметрыПечати, Учредители)
	
	ДополнительныеСведенияОбУчредителях = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Учредители Цикл
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			СведенияОбУчредителе = СведенияОбУчредителеЮридическомЛице(
				СтрокаТаблицы.Ссылка,
				СтрокаТаблицы.ПредставительУчредителя,
				СтрокаТаблицы.ДолжностьПредставителя,
				СтрокаТаблицы.ПредставительНаОсновании);
		Иначе
			СведенияОбУчредителе = СведенияОбУчредителеФизическомЛице(СтрокаТаблицы.Ссылка);
		КонецЕсли;
		ДополнительныеСведенияОбУчредителях.Вставить(СтрокаТаблицы.Ссылка, СведенияОбУчредителе);
	КонецЦикла;
	
	Если Учредители.Количество() = 1 Тогда
		СтрокаТаблицы = Учредители[0];
		ДанныеУчредителя = ДополнительныеСведенияОбУчредителях[СтрокаТаблицы.Ссылка];
		
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ПолноеНаименованиеОрганизацииВРодительномПадеже = СокрЛП(ДанныеУчредителя.ПолноеНаименование);
			СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
			Если Лев(ВРег(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРег(СловоОбщество) Тогда
				ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
					+ СРед(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
			КонецЕсли;
			ПараметрыПечати.Вставить("НаименованиеУчредителяПолноеВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
		Иначе
			ПараметрыПечати.Вставить("ФИОПолные",                    ДанныеУчредителя.ФИОПолные);
			ПараметрыПечати.Вставить("ФИОПолныеРодительныйПадеж",    ДанныеУчредителя.ФИОРодительныйПадеж);
			ПараметрыПечати.Вставить("ДокументПредставление",        ДанныеУчредителя.ДокументПредставление);
			ПараметрыПечати.Вставить("АдресПоПропискеПредставление", ДанныеУчредителя.АдресПрописки);
			ПараметрыПечати.Вставить("Принял",
				?(ДанныеУчредителя.Пол = Перечисления.ПолФизическогоЛица.Женский, НСтр("ru = 'приняла'"), НСтр("ru = 'принял'")));
		КонецЕсли;
		
	Иначе
		ПараметрыПечати.Вставить("ПредставлениеУчредителей", ПредставлениеУчредителейДляИзмененияРеквизитов(Учредители, ДополнительныеСведенияОбУчредителях));
		ПараметрыПечати.Вставить("ПодписиУчредителей", ПодписиУчредителейДляИзмененияРеквизитов(Учредители, ДополнительныеСведенияОбУчредителях));
		ПараметрыПечати.Вставить("РешениеГолосования", РешениеГолосованияДляПротоколаСобранияУчредителей());
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеУчредителейДляИзмененияРеквизитов(Учредители, ДополнительныеСведенияОбУчредителях)
	
	ПредставлениеУчредителей = "";
	
	Если ДополнительныеСведенияОбУчредителях.Количество() = 0 Тогда
		Возврат ПредставлениеУчредителей;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Учредители Цикл
		
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Шаблон = "<LI><DIV align=left>[ПолноеНаименование], ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП], адрес места нахождения: [ЮридическийАдрес]. "
				+ "Представитель: [ДолжностьПредставителя] [ФИОПолные], действует на основании [ПредставительНаОсновании]</DIV></LI>";
		Иначе
			Шаблон = "<LI><DIV align=left>Гражданин Российской Федерации [ФИОПолные], "
				+ "[ДокументПредставление], место регистрации: [АдресПрописки]</DIV></LI>";
		КонецЕсли;
		
		ДополнительныеСведения = ДополнительныеСведенияОбУчредителях[СтрокаТаблицы.Ссылка];
		
		ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, ДополнительныеСведения.Представитель);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, ДополнительныеСведения);
		
		ПредставлениеУчредителей = ПредставлениеУчредителей
			+ СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыУчредителя)
			+ Символы.ПС
			+ Символы.ПС;
	КонецЦикла;
	
	Возврат ПредставлениеУчредителей;
	
КонецФункции

Функция ПодписиУчредителейДляИзмененияРеквизитов(Учредители, ДополнительныеСведенияОбУчредителях)
	
	ПодписиУчредителей = "";
	Если ДополнительныеСведенияОбУчредителях.Количество() = 0 Тогда
		Возврат ПодписиУчредителей;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Учредители Цикл
		
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Шаблон = "<BR>[ПолноеНаименование] <BR>Представитель:_____________________[ДолжностьПредставителя] [ФИОПолные]";
		Иначе
			Шаблон = "<BR>_____________________[ДолжностьПредставителя] [ФИОПолные]";
		КонецЕсли;
		
		ДополнительныеСведения = ДополнительныеСведенияОбУчредителях[СтрокаТаблицы.Ссылка];
		
		ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, ДополнительныеСведения.Представитель);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, ДополнительныеСведения);
		
		ПодписиУчредителей = ПодписиУчредителей
			+ СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыУчредителя)
			+ Символы.ПС
			+ Символы.ПС;
	КонецЦикла;
	
	Возврат ПодписиУчредителей;
	
КонецФункции

Функция РешениеГолосованияДляПротоколаСобранияУчредителей()
	
	Возврат "<P align=justify>Результаты голосования: ""За"" - единогласно, ""Против"" - нет, ""Воздержался"" - нет</P>
			|<P align=justify><STRONG>Решение принято единогласно.</STRONG></P>";
	
КонецФункции

Процедура ЗаполнитьДанныеРуководителяДляИзмененияРеквизитов(ПараметрыПечати, ДанныеРуководителя, ДанныеОДолжностиРуководителя)
	
	ПараметрыПечати.Вставить("ФИОРуководителяВРодительномПадеже", 
		СклонениеПредставленийОбъектов.ПросклонятьФИО(
			ФИО(ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество),
			2,
			ДанныеРуководителя.Ссылка,
			ПолДляСклонений(ДанныеРуководителя.Пол)));
	
	ПараметрыПечати.Вставить("ФИОРуководителяВВинительномПадеже", 
		СклонениеПредставленийОбъектов.ПросклонятьФИО(
			ФИО(ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество),
			4,
			ДанныеРуководителя.Ссылка,
			ПолДляСклонений(ДанныеРуководителя.Пол)));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияРуководителя(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.Руководитель Тогда
		
		ДанныеРуководителя = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ДанныеРуководителя;
		ДанныеОДолжностиРуководителя = ДанныеПомощникаЗаполнения.ДанныеОрганизации.ДанныеОДолжностиРуководителя;
		
		ПараметрыПечати.Вставить("ФИОСтарогоРуководителяВРодительномПадеже", 
			СклонениеПредставленийОбъектов.ПросклонятьФИО(
				ФИО(ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество),
				2,
				ДанныеРуководителя.Ссылка,
				ПолДляСклонений(ДанныеРуководителя.Пол)));
		
		ПараметрыПечати.Вставить("ФИОСтарогоРуководителяВВинительномПадеже", 
			СклонениеПредставленийОбъектов.ПросклонятьФИО(
				ФИО(ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество),
				4,
				ДанныеРуководителя.Ссылка,
				ПолДляСклонений(ДанныеРуководителя.Пол)));
		
		ПараметрыПечати.Вставить("ДолжностьСтарогоРуководителяРодительныйПадеж", 
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(ДанныеОДолжностиРуководителя.Должность),
				2,
				ДанныеОДолжностиРуководителя.Должность));
		
		ДанныеНовогоРуководителя = ДанныеПомощникаЗаполнения.ДанныеНовогоРуководителя;
		ДанныеОДолжностиНовогоРуководителя = ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя;
		
		ПараметрыПечати.Вставить("ДокументРуководителя", СтрШаблон("Паспорт гражданина РФ, серия: %1, № %2, выдан: %3 %4 года, код подразделения %5",
			ДанныеНовогоРуководителя.ПаспортныеДанные.Серия,
			ДанныеНовогоРуководителя.ПаспортныеДанные.Номер,
			ДанныеНовогоРуководителя.ПаспортныеДанные.КемВыдан,
			Формат(ДанныеНовогоРуководителя.ПаспортныеДанные.ДатаВыдачи, "ДФ='дд ММММ гггг'"),
			ДанныеНовогоРуководителя.ПаспортныеДанные.КодПодразделения));
		
		ПараметрыПечати.Вставить("АдресРуководителя", ДанныеНовогоРуководителя.АдресПрописки);
		
		ПараметрыПечати.Вставить("ДолжностьРуководителяРодительныйПадеж", 
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(ДанныеОДолжностиНовогоРуководителя.Должность),
				2,
				ДанныеОДолжностиНовогоРуководителя.Должность));
		
	Иначе
		БлокиКУдалению.Добавить("Руководитель");
		БлокиКУдалению.Добавить("ПовесткаРуководитель");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНаименованияДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.ПолноеНаименование Или Изменено.СокращенноеНаименование Тогда
		
		ОписаниеНаименований = Новый Массив;
		
		Если Изменено.ПолноеНаименование Тогда
			ОписаниеНаименований.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = 'полное наименование - %1'"),
				ДанныеПомощникаЗаполнения.НаименованиеПолноеНовое));
		КонецЕсли;
		
		Если Изменено.СокращенноеНаименование Тогда
			ОписаниеНаименований.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = 'сокращенное наименование - %1'"), 
				ДанныеПомощникаЗаполнения.НаименованиеСокращенноеНовое));
		КонецЕсли;
		
		ПараметрыПечати.Вставить("ОписаниеНовогоНаименования", СтрСоединить(ОписаниеНаименований, ","));
		
	Иначе
		БлокиКУдалению.Добавить("Наименование");
		БлокиКУдалению.Добавить("ПовесткаНаименование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеАдресаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
		
		ПараметрыПечати.Вставить("НовыйАдресОрганизации", ДанныеПомощникаЗаполнения.ЮридическийАдресНовый);
		
	Иначе
		
		БлокиКУдалению.Добавить("Адрес");
		БлокиКУдалению.Добавить("ПовесткаАдрес");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияУчредителей(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	УставныйКапиталДоИзменения = ДанныеПомощникаЗаполнения.ДанныеОрганизации.УставныйКапитал;
	
	Если Изменено.УставныйКапитал Или Изменено.Учредители Тогда
		Учредители = ДанныеУчредителейДляЗаявлениеОВнесенииИзмененийЕГР(ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	Если Изменено.УставныйКапитал Тогда
		
		ПараметрыПечати.Вставить("УставныйКапиталДоИзменения", Формат(УставныйКапиталДоИзменения, "ЧДЦ=2; ЧГ=3,0"));
		ПараметрыПечати.Вставить("УставныйКапиталДоИзмененияПрописью",
			ЧислоПрописью(УставныйКапиталДоИзменения, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописи));
		
		ПараметрыПечати.Вставить("УставныйКапитал", ДанныеПомощникаЗаполнения.УставныйКапиталНовый);
		ПараметрыПечати.Вставить("УставныйКапиталПрописью",
			ЧислоПрописью(ДанныеПомощникаЗаполнения.УставныйКапиталНовый, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописи));
			
	КонецЕсли;
	
	// Есть увеличение уставного капитала.
	Если Изменено.УставныйКапитал И УставныйКапиталДоИзменения < ДанныеПомощникаЗаполнения.УставныйКапиталНовый Тогда
		ОписаниеИзмененияУставногоКапитала = ОписаниеИзмененияУставногоКапиталаДляИзмененияРеквизитов(Учредители);
		ПараметрыПечати.Вставить("ОписаниеИзмененияУставногоКапитала", ОписаниеИзмененияУставногоКапитала);
	Иначе
		БлокиКУдалению.Добавить("УвеличениеУставногоКапитала");
		БлокиКУдалению.Добавить("ПовесткаУвеличениеУставногоКапитала");
	КонецЕсли;
	
	// Есть уменьшение уставного капитала.
	Если Изменено.УставныйКапитал И ДанныеПомощникаЗаполнения.УставныйКапиталНовый < УставныйКапиталДоИзменения Тогда
		
		УставныйКапиталУменьшение = УставныйКапиталДоИзменения - ДанныеПомощникаЗаполнения.УставныйКапиталНовый;
		
		ПараметрыПечати.Вставить("УставныйКапиталУменьшение", Формат(УставныйКапиталУменьшение, "ЧДЦ=2; ЧГ=3,0"));
		ПараметрыПечати.Вставить("УставныйКапиталУменьшениеПрописью",
			ЧислоПрописью(УставныйКапиталУменьшение, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописи));
		
	Иначе
		БлокиКУдалению.Добавить("УменьшениеУставногоКапитала");
		БлокиКУдалению.Добавить("ПовесткаУменьшениеУставногоКапитала");
	КонецЕсли;
	
	Если Изменено.Учредители Тогда
		НовыеУчастники    = Учредители.Скопировать(Новый Структура("СуммаВзносаДоИзменения", 0));
		ВышедшиеУчастники = Учредители.Скопировать(Новый Структура("СуммаВзноса", 0));
	КонецЕсли;
	
	// Есть новые участники.
	Если Изменено.Учредители И НовыеУчастники.Количество() > 0 Тогда
		ПараметрыПечати.Вставить("ОписаниеВводаНовыхУчастников", ОписаниеВводаНовыхУчастников(НовыеУчастники));
		ПараметрыПечати.Вставить("ОписаниеНовыхУчастников",      ОписаниеУчастниковОбщества(НовыеУчастники));
		ПараметрыПечати.Вставить("ОписаниеДолейНовыхУчастников", ОписаниеДолейУставногоКапитала(НовыеУчастники));
	Иначе
		ПараметрыПечати.Вставить("ОписаниеВводаНовыхУчастников", "");
		
		БлокиКУдалению.Добавить("ПовесткаНовыеУчастникиОбщества");
		БлокиКУдалению.Добавить("НовыеУчастникиОбщества");
	КонецЕсли;
	
	// Есть вышедшие участники.
	Если Изменено.Учредители И ВышедшиеУчастники.Количество() > 0 Тогда
		ПараметрыПечати.Вставить("ОписаниеВышедшихУчастников", ОписаниеУчастниковОбщества(ВышедшиеУчастники));
	Иначе
		БлокиКУдалению.Добавить("ПовесткаВышедшиеУчастникиОбщества");
		БлокиКУдалению.Добавить("ВышедшиеУчастникиОбщества");
	КонецЕсли;
	
	// Если доля вышедших участников равна доле новых участников, то считаем, что это продажа доли.
	// Общество в таком случае ничего не выплачивает.
	Если Изменено.Учредители И НовыеУчастники.Количество() > 0 И ВышедшиеУчастники.Количество() > 0 
		И НовыеУчастники.Итог("СуммаВзноса") = ВышедшиеУчастники.Итог("СуммаВзносаДоИзменения") Тогда
		БлокиКУдалению.Добавить("ВыплатыБывшимУчастникиОбщества");
	КонецЕсли;
	
	// Есть перераспределение уставного капитала.
	Если (Изменено.УставныйКапитал Или Изменено.Учредители) И ИзмененыДолиУчастников(Учредители) Тогда
		ПараметрыПечати.Вставить("ОписаниеДолейУставногоКапитала", ОписаниеДолейУставногоКапитала(Учредители));
	Иначе
		БлокиКУдалению.Добавить("ПовесткаРаспределениеУставногоКапитала");
		БлокиКУдалению.Добавить("РаспределениеУставногоКапитала");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияОсновногоОКВЭД(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	Изменено = ДанныеПомощникаЗаполнения.Изменено;
	
	Если Изменено.ОсновнойВидДеятельности Тогда
		
		ТаблицаВидовДеятельности = РегистрыСведений.КлассификаторОКВЭД2.ТаблицаКлассификатора();
		
		ПараметрыПечати.Вставить("ОсновнойВидДеятельности",
			ОписаниеВидаДеятельности(ДанныеПомощникаЗаполнения.КодОКВЭД2Новый, ТаблицаВидовДеятельности));
		
	Иначе
		БлокиКУдалению.Добавить("ОсновнойВидДеятельности");
		БлокиКУдалению.Добавить("ПовесткаОсновнойВидДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДобавленияДополнительныхОКВЭД(ПараметрыПечати, БлокиКУдалению, ИзмененияВидовДеятельности)
	
	Если ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД.Количество() > 0 Тогда
		ТаблицаВидовДеятельности = РегистрыСведений.КлассификаторОКВЭД2.ТаблицаКлассификатора();
		ОписаниеНовыхВидовДеятельности = ОписаниеВидовДеятельности(ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД, ТаблицаВидовДеятельности);
		ПараметрыПечати.Вставить("ОписаниеНовыхВидовДеятельности", ОписаниеНовыхВидовДеятельности);
	Иначе
		БлокиКУдалению.Добавить("НовыеВидыДеятельности");
		БлокиКУдалению.Добавить("ПовесткаНовыеВидыДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИсключенияДополнительныхОКВЭД(ПараметрыПечати, БлокиКУдалению, ИзмененияВидовДеятельности)
	
	Если ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД.Количество() > 0 Тогда
		ТаблицаВидовДеятельности = РегистрыСведений.КлассификаторОКВЭД2.ТаблицаКлассификатора();
		ОписаниеИсключенныхВидовДеятельности = ОписаниеВидовДеятельности(ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД, ТаблицаВидовДеятельности);
		ПараметрыПечати.Вставить("ОписаниеИсключенныхВидовДеятельности", ОписаниеИсключенныхВидовДеятельности);
	Иначе
		БлокиКУдалению.Добавить("ИсключенныеВидыДеятельности");
		БлокиКУдалению.Добавить("ПовесткаИсключенныеВидыДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмененияВидовДеятельности(ДанныеПомощникаЗаполнения, ЭтоУтверждениеПовестки = Ложь)
	
	ИзмененияВидовДеятельности = Новый Структура("ДобавленныеКодыОКВЭД, УдаленныеКодыОКВЭД", Новый Массив, Новый Массив);
	
	Если ДанныеПомощникаЗаполнения.Изменено.ВидыДеятельности Тогда
		ДополнительныеКодыОКВЭД2Новые = СтрРазделить(ДанныеПомощникаЗаполнения.ДополнительныеКодыОКВЭД2Новые, ";", Ложь);
		ДополнительныеКодыОКВЭД2      = СтрРазделить(ДанныеПомощникаЗаполнения.ДанныеОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2Новые Цикл
			Если ЭтоУтверждениеПовестки И ДанныеПомощникаЗаполнения.Изменено.ОсновнойВидДеятельности
				И ДанныеПомощникаЗаполнения.ДанныеОрганизации.КодОКВЭД2 = ДополнительныйКод Тогда
				// В протоколе (решении) при смене основного ОКВЭД на существующий код из дополнительных
				// не нужно показывать отдельный пункт с добавлением существующего ОКВЭД
				Продолжить;
			КонецЕсли;
			Если ДополнительныеКодыОКВЭД2.Найти(ДополнительныйКод) = Неопределено Тогда
				ИзмененияВидовДеятельности.ДобавленныеКодыОКВЭД.Добавить(ДополнительныйКод);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2 Цикл
			Если ЭтоУтверждениеПовестки И ДанныеПомощникаЗаполнения.Изменено.ОсновнойВидДеятельности
				И ДанныеПомощникаЗаполнения.КодОКВЭД2Новый = ДополнительныйКод Тогда
				// В протоколе (решении) при смене основного ОКВЭД на существующий код из дополнительных
				// не нужно показывать отдельный пункт с удалением ОКВЭД
				Продолжить;
			КонецЕсли;
			Если ДополнительныеКодыОКВЭД2Новые.Найти(ДополнительныйКод) = Неопределено Тогда
				ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД.Добавить(ДополнительныйКод);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДополнительныеКодыОКВЭД2Новые = Новый Массив;
	КонецЕсли;
	
	Если ЭтоУтверждениеПовестки И ДанныеПомощникаЗаполнения.Изменено.ОсновнойВидДеятельности
		И ДополнительныеКодыОКВЭД2Новые.Найти(ДанныеПомощникаЗаполнения.ДанныеОрганизации.КодОКВЭД2) = Неопределено Тогда
		// Удаление основного кода из ОКВЭД
		ИзмененияВидовДеятельности.УдаленныеКодыОКВЭД.Добавить(ДанныеПомощникаЗаполнения.ДанныеОрганизации.КодОКВЭД2);
	КонецЕсли;
	
	Возврат ИзмененияВидовДеятельности;
	
КонецФункции

Процедура ЗаполнитьДанныеИзмененияУставаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеПомощникаЗаполнения)
	
	ВыбранТиповойУстав = ДанныеПомощникаЗаполнения.ИзменитьВидУстава И ЗначениеЗаполнено(ДанныеПомощникаЗаполнения.НомерТиповогоУстава);
	ПоказыватьПовесткуОСменеУстава = (ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы 
		Или ДанныеПомощникаЗаполнения.Изменено.Устав) И Не ЗначениеЗаполнено(ДанныеПомощникаЗаполнения.НомерТиповогоУстава);
	
	Если Не ПоказыватьПовесткуОСменеУстава Тогда
		БлокиКУдалению.Добавить("ПовесткаНоваяРедакцияУстава");
		БлокиКУдалению.Добавить("НоваяРедакцияУстава");
	КонецЕсли;
	
	Если Не ВыбранТиповойУстав Тогда
		БлокиКУдалению.Добавить("ПовесткаТиповойУстав");
		БлокиКУдалению.Добавить("ТиповойУстав");
	Иначе
		ПараметрыПечати.Вставить("НомерТиповогоУстава", ДанныеПомощникаЗаполнения.НомерТиповогоУстава);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеИзмененияУставногоКапиталаДляИзмененияРеквизитов(Учредители)
	
	ОписанияИзмененийУставногоКапитала = Новый Массив;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Для Каждого Учредитель ИЗ Учредители Цикл
		
		ДополнительныйВзнос = Учредитель.СуммаВзноса - Учредитель.СуммаВзносаДоИзменения;
		
		Если ДополнительныйВзнос > 0 Тогда
			
			ОписаниеУчредителяРодительныйПадеж = ?(Учредитель.ЭтоЮридическоеЛицо,
				Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
				Учредитель.СведенияОФизическомЛице.ФИОРодительныйПадеж);
			
			ОписанияИзмененийУставногоКапитала.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = '%1 в виде денежных средств в размере %2 рублей (%3)'"),
				ОписаниеУчредителяРодительныйПадеж,
				Формат(ДополнительныйВзнос, "ЧДЦ=2; ЧГ=3,0"),
				ЧислоПрописью(ДополнительныйВзнос, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописи)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияИзмененийУставногоКапитала.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли ОписанияИзмененийУставногоКапитала.Количество() = 1 Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'вклада %1.</P>
				|<P align=justify>Вклад в уставный капитал должен быть внесен в течение 5 дней со дня принятия данного решения.'"),
			СтрСоединить(ОписанияИзмененийУставногоКапитала, ","));
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'вкладов:</P>
				|<P><UL><LI>%1</LI></UL></P><P></P>
				|<P align=justify>Вклады в уставный капитал должны быть внесены в течение 5 дней со дня принятия данного решения.'"),
			СтрСоединить(ОписанияИзмененийУставногоКапитала, "</LI><LI>"));
	КонецЕсли;
	
КонецФункции

Функция ОписаниеВводаНовыхУчастников(НовыеУчредители)
	
	ОписаниеУчредителей = "";
	Для Каждого Учредитель Из НовыеУчредители Цикл
		
		Если Учредитель.ЭтоЮридическоеЛицо Тогда
			ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании поданного заявления ввести в состав участников Общества %1, ИНН %2, КПП %3, адрес места нахождения: %4.'"),
				Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
				Учредитель.СведенияОЮридическомЛице.ИНН,
				Учредитель.СведенияОЮридическомЛице.КПП,
				Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес);
		Иначе
			ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании поданного заявления ввести в состав участников Общества гражданина Российской Федерации %1, %2, место регистрации: %3.'"),
					Учредитель.СведенияОФизическомЛице.ФИОВинительныйПадеж,
					Учредитель.СведенияОФизическомЛице.ДокументПредставление,
					Учредитель.СведенияОФизическомЛице.АдресПрописки);
		КонецЕсли;
		
		ОписаниеУчредителей = ОписаниеУчредителей + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<DIV><P align=justify>[НомерПункта]. %1</P>
				|</DIV>'"),
				ОписаниеУчредителя);
	КонецЦикла;
	
	Возврат ОписаниеУчредителей;
	
КонецФункции

Функция ИзмененыДолиУчастников(Учредители)
	
	УчредителиИзменены = Ложь;
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.СуммаВзносаДоИзменения <> Учредитель.СуммаВзноса Тогда
			УчредителиИзменены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УчредителиИзменены;
	
КонецФункции

Функция ОписаниеВидовДеятельности(КодыОКВЭД2, ТаблицаОКВЭД)
	
	ОписаниеВидовДеятельности = "";
	
	Для Каждого КодОКВЭД2 ИЗ КодыОКВЭД2 Цикл
		
		ОписаниеВидовДеятельности = ОписаниеВидовДеятельности + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<LI><DIV align=left>%1</DIV></LI>'"),
				ОписаниеВидаДеятельности(КодОКВЭД2, ТаблицаОКВЭД));
		
	КонецЦикла;
	
	Возврат ОписаниеВидовДеятельности;
	
КонецФункции

Функция ОписаниеВидаДеятельности(КодОКВЭД2, ТаблицаОКВЭД)
	
	ОписаниеОКВЭД = "";
	
	СтрокиКодаОКВЭД2 = ТаблицаОКВЭД.НайтиСтроки(Новый Структура("Код", КодОКВЭД2));
	Если СтрокиКодаОКВЭД2.Количество() > 0 Тогда
		ОписаниеОКВЭД = СтрокиКодаОКВЭД2[0].Наименование;
	КонецЕсли;
	
	Если ОписаниеОКВЭД = "" Тогда
		Возврат КодОКВЭД2;
	Иначе
		Возврат СтрШаблон("%1 - %2", КодОКВЭД2, ОписаниеОКВЭД);
	КонецЕсли;
	
КонецФункции

Функция ПолДляСклонений(Пол)
	
	Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Возврат 1;
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Возврат 2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнструкцияПоРегистрации

Функция ИнструкцияРегистрацияИзмененийЕГРИП(ДанныеПомощникаЗаполнения, РеквизитыРегистрирующегоОргана, ИмяФормы)

	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	СпособПодачиДокументов = ДанныеПомощникаЗаполнения.СпособПодачиДокументов;
	
	ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРИП");
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ИП'");
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НаименованиеЛиста", НаименованиеЛистаПодписиИзмененийЕГРИП(ИмяФормы));
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.СпособПодачиДокументов = СпособПодачиДокументов;
	ПараметрыИнструкции.РегистрацияЧерезМФЦ    = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.ЕстьАдресИнспекции     = ЗначениеЗаполнено(РеквизитыРегистрирующегоОргана.Наименование);
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель
		Или СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		// Выводим область "Сходите к нотариусу".
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеКопийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПомощникаЗаполнения.ВидыДеятельностиНовые) Тогда
		ПараметрыИнструкции.ТребуетсяСправкаОбОтсутствииСудимости = ДанныеПомощникаЗаполнения.ТребуетсяСправкаОбОтсутствииСудимости;
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыНомераШагов.Вставить("ПояснениеПриПодачеДокументов", ПояснениеПриПодачеДокументов(
		СпособПодачиДокументов,
		ПараметрыИнструкции.ТребуетсяСправкаОбОтсутствииСудимости));
	
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Если ПараметрыИнструкции.ЕстьАдресИнспекции И Не ПараметрыИнструкции.РегистрацияЧерезМФЦ Тогда
		Область.Параметры.НаименованиеФНС = РеквизитыРегистрирующегоОргана.Наименование;
		Область.Параметры.АдресФНС = РеквизитыРегистрирующегоОргана.Адрес;
		Область.Параметры.ТелефонФНС = РеквизитыРегистрирующегоОргана.Телефон;
	КонецЕсли;
	
	Результат.Вывести(Область);
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ИнструкцияРегистрацияИзмененийЕГРЮЛ(ДанныеПомощникаЗаполнения, ДополнительныеПараметры)
	
	Если ДанныеПомощникаЗаполнения.ИзмененияТребуютУведомления Тогда
		Инструкция = ИнструкцияРегистрацияИзмененийЕГРЮЛсУведомлением(ДанныеПомощникаЗаполнения, ДополнительныеПараметры);
	Иначе
		Инструкция = ИнструкцияРегистрацияИзмененийЕГРЮЛбезУведомления(ДанныеПомощникаЗаполнения, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат Инструкция;
	
КонецФункции

Функция ИнструкцияРегистрацияИзмененийЕГРЮЛсУведомлением(ДанныеПомощникаЗаполнения, ДополнительныеПараметры)
	
	РеквизитыРегистрирующегоОргана = ДополнительныеПараметры.РеквизитыРегистрирующегоОргана;
	РеквизитыПрежнегоРегистрирующегоОргана = ДополнительныеПараметры.РеквизитыПрежнегоРегистрирующегоОргана;
	ПлатежныеРеквизитыОплатаГоспошлины = ДополнительныеПараметры.ПлатежныеРеквизитыОплатаГоспошлины;
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	СпособПодачиДокументов = ДанныеПомощникаЗаполнения.СпособПодачиДокументов;
	
	ТребуетсяСобраниеУчредителей = ТребуетсяСобраниеУчредителей(ДанныеПомощникаЗаполнения.ДанныеОрганизации.Учредители);
	
	Если ТребуетсяСобраниеУчредителей Тогда
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛНесколькоУчредителей");
	Иначе
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛОдинУчредитель");
	КонецЕсли;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.СпособПодачиДокументов = СпособПодачиДокументов;
	ПараметрыИнструкции.Паспорт = ПредставлениеДокументаУдостоверяющегоЛичность(ДанныеПомощникаЗаполнения.Гражданство);
	ПараметрыИнструкции.РегистрацияЧерезМФЦ = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(РеквизитыРегистрирующегоОргана.Наименование);
	ПараметрыИнструкции.ЕстьАдресПрежнейИнспекции = ЗначениеЗаполнено(РеквизитыПрежнегоРегистрирующегоОргана.Наименование);
	ПараметрыИнструкции.ИзмененияТребуютУведомления = ДанныеПомощникаЗаполнения.ИзмененияТребуютУведомления;
	ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы = ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы;
	ПараметрыИнструкции.НесколькоУчредителей = ТребуетсяСобраниеУчредителей;
	ПараметрыИнструкции.ЕстьПлатежныеРеквизиты = ЗначениеЗаполнено(ПлатежныеРеквизитыОплатаГоспошлины);
	ПараметрыИнструкции.ЭтоЗаявлениеР13014 = ЭтоЗаявлениеР13014(ДанныеПомощникаЗаполнения.ДатаСоставления);
	ПараметрыИнструкции.ИзмененЮридическийАдрес = ДанныеПомощникаЗаполнения.Изменено.ЮридическийАдрес;
	
	Если ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы И Не ДанныеПомощникаЗаполнения.Изменено.Устав
		Или Не ЗначениеЗаполнено(ДанныеПомощникаЗаполнения.НомерТиповогоУстава) И ДанныеПомощникаЗаполнения.Изменено.Устав Тогда
		
		ПараметрыИнструкции.ИспользуетсяИндивидуальныйУстав = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяСобраниеУчредителей Тогда
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛНесколькоУчредителейСменаМестоположения");
	Иначе
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛОдинУчредительСменаМестоположения");
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ООО'");
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	// Выводим область "Собрание учредителей".
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов = Новый Структура;
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;

	// Выводим область "Сходите к нотариусу".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеЗаявленийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыНомераШагов.Вставить("НаименованиеЛиста", НаименованиеЛистаПодписиИзмененийЕГРЮЛ(ДополнительныеПараметры.ИмяФормы));
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаНотариальнаяДоверенность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Если Не ПараметрыИнструкции.ЭтоЗаявлениеР13014 Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Иначе
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13014", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыПодготовкаДокументов = Новый Структура;
	ПараметрыПодготовкаДокументов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыПодготовкаДокументов.Вставить("СуммаПошлины", СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	
	НомерПункта = ?(ПараметрыИнструкции.НесколькоУчредителей, 1, 0);
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	ИначеЕсли СпособПодачиДокументов <> СпособыПодачиДокументов.Почта Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаРешение",   УвеличитьЗначениеНаЕдиницу(НомерПункта));
	
	Если Не ПараметрыИнструкции.ЭтоЗаявлениеР13014 Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Иначе
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13014", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Если ПараметрыИнструкции.ИспользуетсяИндивидуальныйУстав Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаУстав", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ДанныеПомощникаЗаполнения.ДатаСоставления,
		ДанныеПомощникаЗаполнения.СпособПодачиДокументов,
		ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
		Ложь); // Новая организация не создаётся
	
	Если УплачиваетсяГоспошлинаЗаРегистрацию Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		НомерПунктаУстава = 5;
	Иначе
		НомерПунктаУстав = 4;
	КонецЕсли;
	
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаАдрес",     УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Если ПараметрыИнструкции.ЕстьПлатежныеРеквизиты Тогда
		Область.Параметры.Заполнить(ПлатежныеРеквизитыОплатаГоспошлины);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыПодготовкаДокументов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов в прежнюю налоговую".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументовВПрежнююНалоговую", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Если ПараметрыИнструкции.ЕстьАдресПрежнейИнспекции И Не ПараметрыИнструкции.РегистрацияЧерезМФЦ Тогда
		Область.Параметры.НаименованиеФНС = РеквизитыПрежнегоРегистрирующегоОргана.Наименование;
		Область.Параметры.АдресФНС = РеквизитыПрежнегоРегистрирующегоОргана.Адрес;
		Область.Параметры.ТелефонФНС = РеквизитыПрежнегоРегистрирующегоОргана.Телефон;
	КонецЕсли;
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументовИзПрежнейНалоговой", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Результат.Вывести(Область);
	
	// Выводим область "Ожидание".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("Ожидание", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыНомераШагов.Вставить("НомерПунктаУстав", НомерПунктаУстав);
	
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Если ПараметрыИнструкции.ЕстьАдресИнспекции И Не ПараметрыИнструкции.РегистрацияЧерезМФЦ Тогда
		Область.Параметры.НаименованиеФНС = РеквизитыРегистрирующегоОргана.Наименование;
		Область.Параметры.АдресФНС = РеквизитыРегистрирующегоОргана.Адрес;
		Область.Параметры.ТелефонФНС = РеквизитыРегистрирующегоОргана.Телефон;
	КонецЕсли;
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;

КонецФункции

Функция ИнструкцияРегистрацияИзмененийЕГРЮЛбезУведомления(ДанныеПомощникаЗаполнения, ДополнительныеПараметры)
	
	РеквизитыРегистрирующегоОргана = ДополнительныеПараметры.РеквизитыРегистрирующегоОргана;
	ПлатежныеРеквизитыОплатаГоспошлины = ДополнительныеПараметры.ПлатежныеРеквизитыОплатаГоспошлины;
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	СпособПодачиДокументов = ДанныеПомощникаЗаполнения.СпособПодачиДокументов;
	
	ТребуетсяСобраниеУчредителей = ТребуетсяСобраниеУчредителей(ДанныеПомощникаЗаполнения.ДанныеОрганизации.Учредители);
	
	Если ТребуетсяСобраниеУчредителей Тогда
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛНесколькоУчредителей");
	Иначе
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛОдинУчредитель");
	КонецЕсли;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.СпособПодачиДокументов = СпособПодачиДокументов;
	ПараметрыИнструкции.Паспорт = ПредставлениеДокументаУдостоверяющегоЛичность(ДанныеПомощникаЗаполнения.Гражданство);
	ПараметрыИнструкции.РегистрацияЧерезМФЦ = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(РеквизитыРегистрирующегоОргана.Наименование);
	ПараметрыИнструкции.ИзмененияТребуютУведомления = ДанныеПомощникаЗаполнения.ИзмененияТребуютУведомления;
	ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы = ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы;
	ПараметрыИнструкции.НесколькоУчредителей = ТребуетсяСобраниеУчредителей;
	ПараметрыИнструкции.ЕстьПлатежныеРеквизиты = ЗначениеЗаполнено(ПлатежныеРеквизитыОплатаГоспошлины);
	ПараметрыИнструкции.ЭтоЗаявлениеР13014 = ЭтоЗаявлениеР13014(ДанныеПомощникаЗаполнения.ДатаСоставления);
	ПараметрыИнструкции.ИзмененЮридическийАдрес = ДанныеПомощникаЗаполнения.Изменено.ЮридическийАдрес;
	
	Если ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы И Не ДанныеПомощникаЗаполнения.Изменено.Устав
		Или Не ЗначениеЗаполнено(ДанныеПомощникаЗаполнения.НомерТиповогоУстава) И ДанныеПомощникаЗаполнения.Изменено.Устав Тогда
		
		ПараметрыИнструкции.ИспользуетсяИндивидуальныйУстав = Истина;
		
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ООО'");
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.Почта Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	// Выводим область "Собрание учредителей".
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов = Новый Структура;
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;
	
	// Выводим область "Сходите к нотариусу".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеЗаявленийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыНомераШагов.Вставить("НаименованиеЛиста", НаименованиеЛистаПодписиИзмененийЕГРЮЛ(ДополнительныеПараметры.ИмяФормы));
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаНотариальнаяДоверенность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Если Не ПараметрыИнструкции.ЭтоЗаявлениеР13014 Тогда
		Если ПараметрыИнструкции.ИзмененияТребуютУведомления Тогда
			ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
		Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
			ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	Иначе
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13014", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыПодготовкаДокументов = Новый Структура;
	ПараметрыПодготовкаДокументов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыПодготовкаДокументов.Вставить("СуммаПошлины", СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	ИначеЕсли СпособПодачиДокументов <> СпособыПодачиДокументов.Почта Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаРешение", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	
	Если ПараметрыИнструкции.ИзмененияТребуютУведомления И Не ПараметрыИнструкции.ЭтоЗаявлениеР13014 Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Иначе
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13014", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		Если ПараметрыИнструкции.ИспользуетсяИндивидуальныйУстав Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаУстав", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	КонецЕсли;
	
	УплачиваетсяГоспошлинаЗаРегистрацию = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ДанныеПомощникаЗаполнения.ДатаСоставления,
		ДанныеПомощникаЗаполнения.СпособПодачиДокументов,
		ДанныеПомощникаЗаполнения.ИзмененияВносятсяВУчредительныеДокументы,
		Ложь); // Новая организация не создаётся
	
	Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
		
		Если Не ПараметрыИнструкции.ЭтоЗаявлениеР13014 Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаУстав", УвеличитьЗначениеНаЕдиницу(НомерПункта));
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		ИначеЕсли УплачиваетсяГоспошлинаЗаРегистрацию Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
		
		Если ПараметрыИнструкции.ЕстьПлатежныеРеквизиты Тогда
			Область.Параметры.Заполнить(ПлатежныеРеквизитыОплатаГоспошлины);
		КонецЕсли;
		
	ИначеЕсли ПараметрыИнструкции.ЭтоЗаявлениеР13014 И УплачиваетсяГоспошлинаЗаРегистрацию Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Если ПараметрыИнструкции.ИзмененЮридическийАдрес Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаАдрес", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыПодготовкаДокументов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Если ПараметрыИнструкции.ЕстьАдресИнспекции И Не ПараметрыИнструкции.РегистрацияЧерезМФЦ Тогда
		Область.Параметры.НаименованиеФНС = РеквизитыРегистрирующегоОргана.Наименование;
		Область.Параметры.АдресФНС = РеквизитыРегистрирующегоОргана.Адрес;
		Область.Параметры.ТелефонФНС = РеквизитыРегистрирующегоОргана.Телефон;
	КонецЕсли;
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(ПараметрыИнструкции);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьОбластьИнструкцииВнесенияИзменений(ИмяОбласти, Шаблон, Параметры)
	
	Область = Шаблон.ПолучитьОбласть(ИмяОбласти);
	
	// Удалим все вложенные области, которые не содержат в наименовании нужного способа регистрации.
	ВсегоОбластей = Область.Области.Количество();
	
	Для НомерОбласти = 1 По ВсегоОбластей Цикл
		
		ВложеннаяОбласть = Область.Области[ВсегоОбластей-НомерОбласти];
		
		Если ИмяОбласти = ВложеннаяОбласть.Имя Тогда
			
			Продолжить;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПлатежныеРеквизиты" Тогда
			
			Если НЕ Параметры.ЕстьПлатежныеРеквизиты Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПодтверждениеАдреса" Тогда
			
			Если НЕ Параметры.ЕстьСменаАдреса Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресФНС" Тогда
			
			Если НЕ Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаФНС" Тогда 
			
			Если Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресПрежнейФНС" Тогда
			
			Если НЕ Параметры.ЕстьАдресПрежнейИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаПрежнейФНС" Тогда 
			
			Если Параметры.ЕстьАдресПрежнейИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
		
		ИначеЕсли ВложеннаяОбласть.Имя = "ОдинУчредительЮридическоеЛицо" Тогда
			
			Если НЕ Параметры.ОдинУчредительЮридическоеЛицо Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли Не Параметры.ИзмененЮридическийАдрес И СтрНайти(ВложеннаяОбласть.Имя, "_СменаАдреса") <> 0 Тогда
			
			Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		ИначеЕсли ВложеннаяОбласть.Имя = "СправкаОСудимости" Тогда
			
			Если Не Параметры.ТребуетсяСправкаОбОтсутствииСудимости Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, Параметры.СпособПодачиДокументов) = 0
			И СтрНайти(ВложеннаяОбласть.Имя, "_Форма") = 0 Тогда
			
			Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Р13001") Тогда
			
			Если НЕ Параметры.ИзмененияВносятсяВУчредительныеДокументы Или Параметры.ЭтоЗаявлениеР13014 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Р14001") Тогда
			
			Если НЕ Параметры.ИзмененияТребуютУведомления Или Параметры.ЭтоЗаявлениеР13014 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Р13014") Тогда
			
			Если Не Параметры.ЭтоЗаявлениеР13014 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			ИначеЕсли (СтрНайти(ВложеннаяОбласть.Имя, "Квитанция") > 0 Или СтрНайти(ВложеннаяОбласть.Имя, "Госпошлина") > 0)
				И Не Параметры.ИзмененияВносятсяВУчредительныеДокументы Тогда
				
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Устав") Тогда
			
			Если Не Параметры.ИспользуетсяИндивидуальныйУстав Тогда
				
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Форма2014") Тогда
			
			Если Параметры.ЭтоЗаявлениеР13014 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

Функция НовыеПараметрыИнструкцииВнесенияИзменений()
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодачиДокументов",                   "");
	Результат.Вставить("Паспорт",                                  "");
	Результат.Вставить("РегистрацияЧерезМФЦ",                      Ложь);
	Результат.Вставить("ЕстьАдресИнспекции",                       Ложь);
	Результат.Вставить("ЕстьАдресПрежнейИнспекции",                Ложь);
	Результат.Вставить("ИзмененияТребуютУведомления",              Ложь);
	Результат.Вставить("ИзмененияВносятсяВУчредительныеДокументы", Ложь);
	Результат.Вставить("ОдинУчредительЮридическоеЛицо",            Ложь);
	Результат.Вставить("НесколькоУчредителей",                     Ложь);
	Результат.Вставить("ЕстьПлатежныеРеквизиты",                   Ложь);
	Результат.Вставить("ЭтоЗаявлениеР13014",                       "");
	Результат.Вставить("ИспользуетсяИндивидуальныйУстав",          Ложь);
	Результат.Вставить("ИзмененЮридическийАдрес",                  Ложь);
	Результат.Вставить("ТребуетсяСправкаОбОтсутствииСудимости",    Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеОПрекращенииДеятельностиИП

Функция КлючиПоказателейЗаявлениеОПрекращенииДеятельностиИП(ИмяФормы)
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат КлючиПоказателейЗаявлениеОПрекращенииДеятельностиИП_2020();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейЗаявлениеОПрекращенииДеятельностиИП_2020()
	
	Результат = Новый Структура("Лист001, Лист002");
	
	// Титульный лист
	// Сведения об индивидуальном предпринимателе, содержащиеся в ЕГРИП
	Результат.Лист001 = Новый Структура;
	Результат.Лист001.Вставить("П01010100", "ОГРН");
	Результат.Лист001.Вставить("П01010201", "Фамилия");
	Результат.Лист001.Вставить("П01010202", "Имя");
	Результат.Лист001.Вставить("П01010203", "Отчество");
	Результат.Лист001.Вставить("П01020001", "АдресЭлектроннойПочты");
	Результат.Лист001.Вставить("П01020002", "ВыдатьНаБумажномНосителе");
	Результат.Лист001.Вставить("П01030000", "ТелефонРабочий");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОПрекращенииДеятельности()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	
	Результат.Вставить("ВыдатьНаБумажномНосителе", "");
	Результат.Вставить("ТелефонРабочий", "");
	Результат.Вставить("АдресЭлектроннойПочты", "");
	
	Возврат Результат;
	
КонецФункции

// Формирует и заполняет заявление о прекращении деятельности ИП
//
// Параметры:
//   Параметры       - Структура - См. НовыеПараметрыСозданияЗаявленияОПрекращенииДеятельностиИП()
//   АдресРезультата - Строка - Адрес результат во временном хранилище
//
Процедура СоздатьЗаявлениеОПрекращенииДеятельностиИП(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Результат = Новый Структура("Заявление, КвитанцияПодготовлена");
	
	// Флаг модифицированности данных заявления - т.к. заявление уже создано, проверяем изменены ли данные,
	// на основании которых заполнено заявление
 	Модифицированность = Параметры.Модифицированность;
	
	ДанныеПомощника = Параметры.ДанныеПомощникаЗаполнения;
	
	ИменаФайлов = ИменаФайлов();
	ВладелецФайлов = Неопределено;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(ДанныеПомощника.СпособПодачиДокументов) Тогда
		СтатусЗаявления = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой();
	Иначе
		СтатусЗаявления = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой();
	КонецЕсли;
	
	ПараметрыЗаявления = ПараметрыЗаявленияОРегистрацииИзменений(ДанныеПомощника.Организация,
		ДанныеПомощника,
		Параметры.ИмяФормы);
	
	УплачиваетсяГоспошлина = РегистрацияОрганизацииКлиентСервер.УплачиваетсяГоспошлинаЗаРегистрацию(
		ДанныеПомощника.ДатаСоставления,
		ДанныеПомощника.СпособПодачиДокументов);
	ПакетДокументов = Новый Массив;
	
	Попытка
		
		Если Модифицированность Тогда
			
			ИмяОтчета = ИмяРегламентированногоУведомления(КодыФормЗаявлений().ЗаявлениеОПрекращенииДеятельностиИП);
			ВладелецФайлов = Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(ПараметрыЗаявления, Параметры.Заявление);
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ВладелецФайлов, СтатусЗаявления);
			
			Инструкция = ИнструкцияПрекращениеДеятельностиИП(ДанныеПомощника);
			
			Если Инструкция <> Неопределено Тогда
				ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов,
					ИменаФайлов.ИнструкцияПоПрекращениюДеятельностиИП,
					Инструкция,
					"pdf"));
			КонецЕсли;
			
		Иначе
			ВладелецФайлов = Параметры.Заявление;
			РегистрацияОрганизацииСервер.СохранитьСтатусОтправкиУведомления(ВладелецФайлов, СтатусЗаявления);
		КонецЕсли;
		
		Если УплачиваетсяГоспошлина И СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
			
			КБК = КБКНалогаПоСпособуПодачиДокументов(ДанныеПомощника.СпособПодачиДокументов);
			СуммаПошлины = РегистрацияОрганизацииКлиентСервер.СуммаПошлиныЗаПрекращениеДеятельностиИП();
			
			// Квитанция на оплату госпошлины из веб-сервиса
			АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
				"РегистрацияИП",
				ДанныеПомощника.ДанныеЗаявителя,
				ДанныеПомощника.ДанныеЗаявителя.АдресПропискиЗначениеJSON,
				КБК,
				СуммаПошлины);
			
		Иначе
			АдресКвитанцииНаОплатуГоспошлины = Неопределено;
		КонецЕсли;
		
		Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
			ПакетДокументов.Добавить(НовыйДокумент(ВладелецФайлов,
				ИменаФайлов.КвитанцияНаОплатуГоспошлины,
				АдресКвитанцииНаОплатуГоспошлины,
				"pdf"));
			КвитанцияПодготовлена = Истина;
		Иначе
			КвитанцияПодготовлена = Ложь;
		КонецЕсли;
		
		НайденныеПрисоединенныеФайлы = ПрисоединенныеФайлыЗаявленияПоИмени(ВладелецФайлов, ИменаФайлов);
		Для Каждого Документ Из ПакетДокументов Цикл
			ПараметрыФайла = Документ.ПараметрыФайла;
			СуществующийФайл = НайденныеПрисоединенныеФайлы.Найти(ПараметрыФайла.ИмяБезРасширения, "Наименование");
			Если СуществующийФайл = Неопределено Тогда
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Документ.АдресФайла);
			Иначе
				ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", Документ.АдресФайла);
				ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
				РаботаСФайлами.ОбновитьФайл(СуществующийФайл.Ссылка, ПараметрыФайла);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Сохраняем данные помощника в созданном заявлении
	
	Если ЗначениеЗаполнено(ВладелецФайлов) Тогда
		СохранитьДанныеПомощникаЗаполнения(ВладелецФайлов, ДанныеПомощника);
	КонецЕсли;
	
	Результат.Заявление = ВладелецФайлов;
	Результат.КвитанцияПодготовлена = КвитанцияПодготовлена;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных регламентированного отчета
//
// Параметры:
//   ПараметрыЗаполнения - Структура - параметры регламентированного отчета (см. РегламентированноеУведомлениеФормаР26001.СоздатьЗаполненноеУведомление)
//   Контейнер - Структура - данные регламентированного отчета (см. РегламентированноеУведомлениеФормаР26001.СоздатьЗаполненноеУведомление)
//
Процедура ЗаполнитьЗаявлениеОПрекращенииДеятельностиИП(ПараметрыУведомления, Контейнер) Экспорт
	
	КлючиПоказателей = КлючиПоказателейЗаявлениеОПрекращенииДеятельностиИП(ПараметрыУведомления.ИмяФормы);
	Если КлючиПоказателей = Неопределено Или Не ПараметрыУведомления.Свойство("ПараметрыЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ПараметрыУведомления.ПараметрыЗаполнения;
	СведенияОбИзменениях = НовыеСведенияОПрекращенииДеятельности();
	
	Если ДанныеЗаполнения.Свойство("ВыдатьНаБумажномНосителе") Тогда
		СведенияОбИзменениях.ВыдатьНаБумажномНосителе = Формат(ДанныеЗаполнения.ВыдатьНаБумажномНосителе, "БЛ=; БИ=1");
	КонецЕсли;
	
	ДанныеЗаявителя = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДанныеЗаявителя", ДанныеЗаявителя) Тогда
		
		ЗаполнитьЗначенияСвойств(СведенияОбИзменениях, ДанныеЗаявителя);
		СведенияОбИзменениях.ТелефонРабочий = НомерТелефонаВРазрешенномФормате(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ДанныеЗаявителя.ТелефонРабочийЗначениеJSON),
			ПараметрыУведомления.ИмяФормы);
		
		СведенияОбИзменениях.АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			ДанныеЗаявителя.EMailЗначениеJSON);
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, СведенияОбИзменениях);
	
КонецПроцедуры

Функция НовыеПараметрыИнструкцииПрекращениеДеятельностиИП()
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодачиДокументов", "");
	Результат.Вставить("ЕстьСотрудники",         Ложь);
	Результат.Вставить("ПодключенаКасса",        Ложь);
	Результат.Вставить("ПрименяетсяУСН",         Ложь);
	Результат.Вставить("ПрименяетсяПСН",         Ложь);
	Результат.Вставить("ПлательщикНДФЛ",         Ложь);
	Результат.Вставить("ВЭлектронномВиде",       Ложь);
	Результат.Вставить("РегистрацияЧерезМФЦ",    Ложь);
	Результат.Вставить("ЕстьАдресИнспекции",     Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ИнструкцияПрекращениеДеятельностиИП(ПараметрыВыполнения)

	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	СпособПодачиДокументов = ПараметрыВыполнения.СпособПодачиДокументов;
	
	ШаблонИнструкции = ПолучитьМакет("ИнструкцияПрекращениеДеятельностиИП");
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Результат.Вывести(ОбластьЗаголовка);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров") Тогда
		СреднесписочнаяЧисленность = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
			ПараметрыВыполнения.Организация,
			НачалоГода(ПараметрыВыполнения.ДатаСоставления),
			КонецКвартала(ПараметрыВыполнения.ДатаСоставления));
			
		ЕстьСотрудники = (СреднесписочнаяЧисленность.Численность <> 0);
	Иначе
		ЕстьСотрудники = Ложь;
	КонецЕсли;
	
	Если ЕстьСотрудники Тогда
		НомерШага = 3;
	Иначе
		НомерШага = 1;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") Тогда
		ТипыКассовойТехники = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыКассовойТехники);
		
		ПодключенаКасса = ЗначениеЗаполнено(СписокДоступныхУстройств);
	Иначе
		ПодключенаКасса = Ложь;
	КонецЕсли;
	
	ПодачаВЭлектронномВиде = РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаСоставления);
	ПрименяетсяПСН = УчетнаяПолитика.ПрименяетсяУСНПатент(ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаСоставления);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаСоставления);
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииПрекращениеДеятельностиИП();
	ПараметрыИнструкции.СпособПодачиДокументов = СпособПодачиДокументов;
	ПараметрыИнструкции.РегистрацияЧерезМФЦ    = (СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично);
	ПараметрыИнструкции.ВЭлектронномВиде       = ПодачаВЭлектронномВиде;
	ПараметрыИнструкции.ЕстьАдресИнспекции     = ЗначениеЗаполнено(ПараметрыВыполнения.РегистрирующийОрган.Наименование);
	ПараметрыИнструкции.ЕстьСотрудники         = ЕстьСотрудники;
	ПараметрыИнструкции.ПодключенаКасса        = ПодключенаКасса;
	ПараметрыИнструкции.ПрименяетсяУСН         = ПрименяетсяУСН;
	ПараметрыИнструкции.ПрименяетсяПСН         = ПрименяетсяПСН;
	ПараметрыИнструкции.ПлательщикНДФЛ         = ПлательщикНДФЛ;
	
	// Шаг 1. Увольте сотрудников
	// Шаг 2. Сдайте отчетность и заплатите взносы за сотрудников.
	Если ЕстьСотрудники Тогда
		Область = ПолучитьОбластьИнструкцииСнятияСУчета("ОбластьСотрудники", ШаблонИнструкции, ПараметрыИнструкции);
		Результат.Вывести(Область);
	КонецЕсли;
	
	// Выводим область "Снимите кассу с учета".
	Если ПодключенаКасса Тогда
		Область = ПолучитьОбластьИнструкцииСнятияСУчета("ОбластьКасса", ШаблонИнструкции, ПараметрыИнструкции);
		Область.Параметры.НомерШага = НомерШага;
		Результат.Вывести(Область);
		УвеличитьЗначениеНаЕдиницу(НомерШага);
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	Если Не ПодачаВЭлектронномВиде Тогда
		Область = ПолучитьОбластьИнструкцииСнятияСУчета("ПодготовкаДокументовИФНСЛичноМФЦЛично",
			ШаблонИнструкции,
			ПараметрыИнструкции);
		Область.Параметры.НомерШага = НомерШага;
		Результат.Вывести(Область);
		УвеличитьЗначениеНаЕдиницу(НомерШага);
	КонецЕсли;
	
	// Выводим область "Подача документов".
	Если ПодачаВЭлектронномВиде Тогда
		Область = ПолучитьОбластьИнструкцииСнятияСУчета("ПодачаДокументовИФНСэлектронно",
			ШаблонИнструкции,
			ПараметрыИнструкции);
	Иначе
		Область = ПолучитьОбластьИнструкцииСнятияСУчета("ПодачаДокументовИФНСЛичноМФЦЛично",
			ШаблонИнструкции,
			ПараметрыИнструкции);
		Если ПараметрыИнструкции.ЕстьАдресИнспекции И Не ПараметрыИнструкции.РегистрацияЧерезМФЦ Тогда
			Область.Параметры.НаименованиеФНС = ПараметрыВыполнения.РегистрирующийОрган.Наименование;
			Область.Параметры.АдресФНС = ПараметрыВыполнения.РегистрирующийОрган.Адрес;
			Область.Параметры.ТелефонФНС = ПараметрыВыполнения.РегистрирующийОрган.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Область.Параметры.НомерШага = НомерШага;
	Результат.Вывести(Область);
	УвеличитьЗначениеНаЕдиницу(НомерШага);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииСнятияСУчета("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Область.Параметры.НомерШага = НомерШага;
	Результат.Вывести(Область);
	УвеличитьЗначениеНаЕдиницу(НомерШага);
	
	// Выводим область "Страховые взносы".
	Область = ПолучитьОбластьИнструкцииСнятияСУчета("СтраховыеВзносы", ШаблонИнструкции, ПараметрыИнструкции);
	Область.Параметры.НомерШага = НомерШага;
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(Результат, Область) Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	Результат.Вывести(Область);
	УвеличитьЗначениеНаЕдиницу(НомерШага);
	
	// Выводим область "Закройте банковский счет".
	Область = ПолучитьОбластьИнструкцииСнятияСУчета("ЗакрытьСчет", ШаблонИнструкции, ПараметрыИнструкции);
	Область.Параметры.НомерШага = НомерШага;
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(Результат, Область) Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	Результат.Вывести(Область);
	УвеличитьЗначениеНаЕдиницу(НомерШага);
	
	// Выводим область "Сохраните документы" и подвал на одной странице - 
	// если не помещается, переносим на другую страницу.
	ПроверяемаяОбласть = Новый Массив;
	
	Область = ПолучитьОбластьИнструкцииСнятияСУчета("СохранитьДокументы", ШаблонИнструкции, ПараметрыИнструкции);
	Область.Параметры.НомерШага = НомерШага;
	ПроверяемаяОбласть.Добавить(Область);
	УвеличитьЗначениеНаЕдиницу(НомерШага);
	ОбластьПодвал = ПолучитьОбластьИнструкцииСнятияСУчета("Подвал", ШаблонИнструкции, ПараметрыИнструкции);
	ПроверяемаяОбласть.Добавить(ОбластьПодвал);
	
	ПустаяОбласть = ПолучитьОбластьИнструкцииСнятияСУчета("ПустаяСтрока", ШаблонИнструкции, ПараметрыИнструкции);
	ПроверяемаяОбласть.Добавить(ПустаяОбласть);
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(Результат, ПроверяемаяОбласть) Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	Результат.Вывести(Область);
	
	ПроверяемаяОбласть.Очистить();
	ПроверяемаяОбласть.Добавить(ПустаяОбласть);
	ПроверяемаяОбласть.Добавить(ОбластьПодвал);
	
	// Выводим подвал в конце страницы
	Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(Результат, ПроверяемаяОбласть) Цикл
		Результат.Вывести(ПустаяОбласть);
		ПроверяемаяОбласть.Очистить();
		ПроверяемаяОбласть.Добавить(ПустаяОбласть);
		ПроверяемаяОбласть.Добавить(ОбластьПодвал);
	КонецЦикла;
	Результат.Вывести(ОбластьПодвал);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьОбластьИнструкцииСнятияСУчета(ИмяОбласти, Шаблон, Параметры)
	
	Область = Шаблон.ПолучитьОбласть(ИмяОбласти);
	
	// Удалим все вложенные области, которые не содержат в наименовании нужного способа регистрации.
	ВсегоОбластей = Область.Области.Количество();
	
	Для НомерОбласти = 1 По ВсегоОбластей Цикл
		
		ВложеннаяОбласть = Область.Области[ВсегоОбластей-НомерОбласти];
		
		Если ИмяОбласти = ВложеннаяОбласть.Имя Тогда
			
			Продолжить;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресФНС" Тогда
			
			Если Не Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаФНС" Тогда
			
			Если Параметры.ЕстьАдресИнспекции Или Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПодачаДокументовИФНСлично" Тогда
			
			Если Параметры.РегистрацияЧерезМФЦ Или Параметры.ВЭлектронномВиде Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПодачаДокументовМФЦлично" Тогда
			
			Если Не Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПрименяетсяУСН" Тогда
			
			Если Не Параметры.ПрименяетсяУСН Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПрименяетсяПСН" Тогда
			
			Если Не Параметры.ПрименяетсяПСН Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПлательщикНДФЛ" Тогда
			
			Если Не Параметры.ПлательщикНДФЛ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПолучениеДокументовМФЦлично" Тогда
			
			Если Не Параметры.РегистрацияЧерезМФЦ Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

Функция НовыеДанныеПомощникаЗаполненияЗаявленияОПрекращенииДеятельностиИП() ЭКспорт
	
	ДанныеЗаявителя = Новый Структура;
	ДанныеЗаявителя.Вставить("ТелефонРабочийЗначениеJSON", "");
	ДанныеЗаявителя.Вставить("ТелефонРабочийПредставление", "");
	ДанныеЗаявителя.Вставить("EMailЗначениеJSON", "");
	ДанныеЗаявителя.Вставить("EMailЗначениеПредставление", "");
	ДанныеЗаявителя.Вставить("АдресПропискиЗначениеJSON", "");
	ДанныеЗаявителя.Вставить("Фамилия", "");
	ДанныеЗаявителя.Вставить("Имя", "");
	ДанныеЗаявителя.Вставить("Отчество", "");
	ДанныеЗаявителя.Вставить("ОГРН", "");
	ДанныеЗаявителя.Вставить("ИНН", "");
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация"); // СправочникСсылка.Организации
	Результат.Вставить("СпособПодачиДокументов"); // Структура - см. РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов()
	Результат.Вставить("ДатаСоставления", '00010101');
	Результат.Вставить("РегистрирующийОрган", НовыеРеквизитыРегистрирующегоОргана());
	Результат.Вставить("ДанныеЗаявителя", ДанныеЗаявителя);
	Результат.Вставить("ВыдатьНаБумажномНосителе", Ложь);
	Результат.Вставить("НомерТелефонаПодтвержден", Ложь);
	Результат.Вставить("ЭлектроннаяПочтаПодтверждена", Ложь);
	Результат.Вставить("ФорматОтправкиДокументов", РегистрацияОрганизацииСервер.ФорматПодачиДокументовПоУмолчанию());
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыСозданияЗаявленияОПрекращенииДеятельностиИП() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Модифицированность", Ложь);
	Результат.Вставить("Заявление");
	Результат.Вставить("ДанныеПомощникаЗаполнения", НовыеДанныеПомощникаЗаполненияЗаявленияОПрекращенииДеятельностиИП());
	Результат.Вставить("ИмяФормы", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеРеквизитовОрганизацииПоЗаявлению

// Функция проверяет наличие незавершенного процесса внесения изменений в ЕГР или прекращения деятельности
// по статусам заявлений.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//   Булево - Истина, если есть незавершенный процесс внесения изменений в ЕГР или прекращения деятельности.
//
Функция СостояниеЗаявленияВЕГР(Организация) Экспорт
	
	Состояние = Новый Структура;
	Состояние.Вставить("Изменения", Ложь);
	Состояние.Вставить("Заявление", Ложь);
	Состояние.Вставить("Документы", Ложь);
	Состояние.Вставить("ОбновитьСтатус", Ложь);
	Состояние.Вставить("Ошибка", Ложь);
	Состояние.Вставить("ЛистЗаписиЕГР", Ложь);
	Состояние.Вставить("ЗаявлениеСсылка", Неопределено);
	Состояние.Вставить("ВерсияОбменаСФНС", 0);
	Состояние.Вставить("СнятиеСУчета", Ложь);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Состояние;
	КонецЕсли;
	
	СостояниеОтправки = Неопределено;
	// Сначала находим актуальные заявления о прекращении деятельности:
	// если не инициировано снятие с учета, тогда пытаемся найти заявления о внесении изменений в ЕГР
	АктуальныеЗаявления = АктуальноеЗаявлениеОСнятииСУчета(Организация);
	Если Не ЗначениеЗаполнено(АктуальныеЗаявления.Заявление) Тогда
		АктуальныеЗаявления = НайтиАктуальныеЗаявленияОВнесенииИзмененийЕГР(Организация);
	Иначе
		Состояние.СнятиеСУчета = Истина;
	КонецЕсли;
	
	ВнесенииИзмененийДокументы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АктуальныеЗаявления,
		"ЗаявлениеОВнесенииИзмененийУчредительныеДокументы");
	
	Если ЗначениеЗаполнено(ВнесенииИзмененийДокументы) Тогда
		СостояниеЗаявления = АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки;
	ИначеЕсли ЗначениеЗаполнено(АктуальныеЗаявления.Заявление) Тогда
		СостояниеЗаявления = АктуальныеЗаявления.Состояние;
		Состояние.ЗаявлениеСсылка = АктуальныеЗаявления.Заявление;
	КонецЕсли;
	
	Если СостояниеЗаявления = Неопределено Тогда
		Возврат Состояние;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС) Тогда
		Состояние.ОбновитьСтатус = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Отправлен
			Или АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Доставлен);
		Состояние.Ошибка = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.НеПринят);
		Состояние.ЛистЗаписиЕГР = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Сдан);
		Состояние.ВерсияОбменаСФНС = АктуальныеЗаявления.ВерсияОбменаСФНС;
	КонецЕсли;
	
	Состояние.Заявление = (СостояниеЗаявления.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
	Состояние.Документы = (СостояниеЗаявления.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой())
		Или (СостояниеЗаявления.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой()
		Или СостояниеЗаявления.Статус = ДокументооборотРегистрацияВФНС.СтатусыЭтаповОтправки(Истина).Зарегистрировано);
	Состояние.Изменения = Не (Состояние.Заявление Или Состояние.Документы);
	
	Возврат Состояние;
	
КонецФункции

// Функция проверяет наличие незавершенного процесса регистрации организации/ИП
// по статусам заявлений.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//   Булево - Истина, если есть незавершенный процесс регистрации организации/ИП.
//
Функция СостояниеРегистрацииОрганизации(Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Состояние", Неопределено);
	Результат.Вставить("Заявление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	Результат.Вставить("ОбновитьСтатус", Ложь);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ЛистЗаписиЕГР", Ложь);
	Результат.Вставить("ВерсияОбменаСФНС", 0);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	АктуальныеЗаявления = АктуальноеЗаявлениеНаРегистрациюОрганизации(Организация);
	
	Если ЗначениеЗаполнено(АктуальныеЗаявления.Заявление) Тогда
		ЗаполнитьЗначенияСвойств(Результат, АктуальныеЗаявления);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Состояние) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС) Тогда
		Результат.ОбновитьСтатус = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Отправлен
			Или АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Доставлен);
		Результат.Ошибка = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.НеПринят);
		Результат.ЛистЗаписиЕГР = (АктуальныеЗаявления.СтатусОтправкиЗаявленияВФНС = Перечисления.СтатусыОтправки.Сдан);
		Результат.ВерсияОбменаСФНС = АктуальныеЗаявления.ВерсияОбменаСФНС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура проверяет регистрацию изменений, указанных в актуальном заявлении, в ЕГРЮЛ/ЕГРИП
// и готовит данные для обновления реквизитов организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   АдресРезультата - Строка - адрес куда будет помещен результат проверки - структура с ключами:
//      * ИзмененияВнесеныВЕГР - Булево - результат сравнения данных помощника с данными ЕГР
//      * ОжиданиеОтвета - Булево - выполняется длительная операция на веб-сервисе и необходим повторный вызов процедуры.
//      * ОбновляемыеРеквизиты - Структура - измененные реквизиты организации с новыми значениями.
//      * ЕстьЛистЗаписиЕГР - Булево - получен лист записи ЕГР от налогового органа (для случая подачи заявления онлайн)
//
Процедура ПодготовитьДанныеДляЗавершенияРегистрацииИзмененийЕГРВФоне(Организация, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененияВнесеныВЕГР", Ложь);
	Результат.Вставить("ОжиданиеОтвета", Ложь);
	Результат.Вставить("ДанныеПомощникаЗаполнения", Неопределено);
	Результат.Вставить("ЕстьЛистЗаписиЕГР", Ложь);
	Результат.Вставить("ВРаботе", Истина);
	Результат.Вставить("СнятиеСУчета", Ложь);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Сначала находим актуальные заявления о прекращении деятельности:
	// если не инициировано снятие с учета, тогда пытаемся найти заявления о внесении изменений в ЕГР
	АктуальныеЗаявления = АктуальноеЗаявлениеОСнятииСУчета(Организация);
	Если Не ЗначениеЗаполнено(АктуальныеЗаявления.Заявление) Тогда
		АктуальныеЗаявления = НайтиАктуальныеЗаявленияОВнесенииИзмененийЕГР(Организация);
	Иначе
		Результат.СнятиеСУчета = Истина;
	КонецЕсли;
	
	ВнесенииИзмененийДокументы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АктуальныеЗаявления,
		"ЗаявлениеОВнесенииИзмененийУчредительныеДокументы");
	ДанныеПомощника = ДанныеПомощникаЗаполнения(АктуальныеЗаявления.Заявление);
	Если ДанныеПомощника.Количество() = 0 И ЗначениеЗаполнено(ВнесенииИзмененийДокументы) Тогда
		ДанныеПомощника = ДанныеПомощникаЗаполнения(ВнесенииИзмененийДокументы);
	КонецЕсли;
	
	// В заявлении нет данных помощника, возможно оно заполнено вручную.
	Если ДанныеПомощника.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Контактная информация могла быть сохранена в старом формате, приведем поля контактной информации к новому формату.
	КонвертироватьКонтактнуюИнформациюПомощникаРегистрацииИзменений(ДанныеПомощника);
	
	Результат.ДанныеПомощникаЗаполнения = ДанныеПомощника;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ИзмененияВнесеныВЕГР(ДанныеПомощника), Истина);
	
	// Если изменения зарегистрированы в реестре, сохраним результат сравнения, чтобы не вызывать лишний раз веб-сервис.
	Если Результат.ИзмененияВнесеныВЕГР Тогда
		ДанныеПомощника.Вставить("ИзмененияВнесеныВЕГР", Результат.ИзмененияВнесеныВЕГР);
		Если ЗначениеЗаполнено(АктуальныеЗаявления.Заявление) Тогда
			СохранитьДанныеПомощникаЗаполнения(АктуальныеЗаявления.Заявление, ДанныеПомощника);
			СтатусЗаявления = АктуальныеЗаявления.Состояние.Статус;
		КонецЕсли;
		Если ЗначениеЗаполнено(АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
			СохранитьДанныеПомощникаЗаполнения(АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы, ДанныеПомощника);
			СтатусЗаявления = АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки.Статус;
		КонецЕсли;
		ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(АктуальныеЗаявления, СтатусЗаявления);
	КонецЕсли;
	
	// При способе регистрации онлайн, Лист записи ЕГР высылается в электронном виде
	СпособПодачиДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощника, "СпособПодачиДокументов");
	Если ЗначениеЗаполнено(СпособПодачиДокументов)
		И СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн
		И АктуальныеЗаявления.Состояние.Сдано Тогда
		
		Результат.ЕстьЛистЗаписиЕГР = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктуальныеЗаявления.Состояние) Тогда
		Результат.ВРаботе = АктуальныеЗаявления.Состояние.ВРаботе;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Процедура завершает процесс внесения изменений в ЕГР:
//   - устанавливает финальный статус у заявлений о внесении изменений,
//   - отражает в программе изменение состава учредителей и/или размера уставного капитала,
//   - записывает новые сведения в информационную базу, если ЭтоНачалоРаботы
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
Функция ЗавершитьВнесениеИзмененийЕГР(Организация, ДатаРегистрацииИзмененийЕГР) Экспорт
	
	АктуальныеЗаявления = НайтиАктуальныеЗаявленияОВнесенииИзмененийЕГР(Организация);
	
	ДанныеПомощника = ДанныеПомощникаЗаполнения(АктуальныеЗаявления.Заявление);
	Если ДанныеПомощника.Количество() = 0 И ЗначениеЗаполнено(АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
		ДанныеПомощника = ДанныеПомощникаЗаполнения(АктуальныеЗаявления.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЗаписатьИзменениеУставногоКапитала(ДанныеПомощника, ДатаРегистрацииИзмененийЕГР);
		
		ЗаписатьСтатусЗаявленияОВнесенииИзмененийЕГР(
			АктуальныеЗаявления,
			РегистрацияОрганизацииКлиентСервер.ФинальныйСтатусЗаявленияВЕГР());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось обновить реквизиты организации:
			|%1'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации,
			,
			ОписаниеОшибки);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ИзмененияВнесеныВЕГР(ДанныеПомощника)
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененияВнесеныВЕГР", Ложь);
	Результат.Вставить("ОжиданиеОтвета", Ложь);
	
	Если ТипЗнч(ДанныеПомощника) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если ранее уже сравнили данные ЕГР с данными помощника, еще раз сравнивать не нужно.
	Если ДанныеПомощника.Свойство("ИзмененияВнесеныВЕГР")
		И ДанныеПомощника.ИзмененияВнесеныВЕГР Тогда
		Результат.ИзмененияВнесеныВЕГР = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Изменено = Неопределено;
	Если Не ДанныеПомощника.Свойство("Изменено", Изменено) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросДанныхЕГР = ОрганизацииФормыДляОтчетностиКлиентСервер.НовыйЗапросДанныхЕГР();
	ЗапросДанныхЕГР.ИНН = ДанныеПомощника.ДанныеОрганизации.ИНН;
	ЗапросДанныхЕГР.ЮридическоеФизическоеЛицо = ДанныеПомощника.ДанныеОрганизации.ЮридическоеФизическоеЛицо;
	ЗапросДанныхЕГР.ОбъектЗаполнен = Истина;
	ЗапросДанныхЕГР.ОтборОПФ = РегистрацияОрганизацииКлиентСервер.ПоддерживаемыеПравовыеФормы();
	
	ОтветДанныхЕГР = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(ЗапросДанныхЕГР);
	Если Не ЭтоАдресВременногоХранилища(ОтветДанныхЕГР.АдресДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеЕГР = ПолучитьИзВременногоХранилища(ОтветДанныхЕГР.АдресДанных);
	Если ТипЗнч(ДанныеЕГР) <> Тип("Структура") Тогда
		Результат.ИзмененияВнесеныВЕГР = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ИзмененыОсновныеСведения = Изменено.СокращенноеНаименование
		Или Изменено.ПолноеНаименование
		Или Изменено.ЮридическийАдрес Или Изменено.Местоположение
		Или Изменено.Руководитель
		Или Изменено.ОсновнойВидДеятельности;
	
	Если ИзмененыОсновныеСведения Тогда 
		
		Результат.ИзмененияВнесеныВЕГР = Истина;
		
		// Проверяем только те реквизиты, которые были изменены в помощнике.
		Если Изменено.СокращенноеНаименование Тогда
			Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР И ДанныеЕГР.Свойство("НаименованиеСокращенное")
				И (ВРег(ДанныеПомощника.НаименованиеСокращенноеНовое) = ВРег(ДанныеЕГР.НаименованиеСокращенное));
		КонецЕсли;
		
		Если Изменено.ПолноеНаименование Тогда
			Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР И ДанныеЕГР.Свойство("НаименованиеСокращенное")
				И (ВРег(ДанныеПомощника.НаименованиеПолноеНовое) = ВРег(ДанныеЕГР.НаименованиеПолное));
		КонецЕсли;
		
		Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
			Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
				И ДанныеЕГР.Свойство("ЮридическийАдрес")
				И УправлениеКонтактнойИнформациейБП.СравнитьАдреса(
					ДанныеПомощника.ЮридическийАдресНовыйЗначениеJSON, ДанныеЕГР.ЮридическийАдрес.КонтактнаяИнформация);
		КонецЕсли;
		
		Если Изменено.Руководитель Тогда
			ДанныеОДолжности = ДанныеПомощника.ДанныеОДолжностиНовогоРуководителя;
			Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
				И ДанныеЕГР.Свойство("Руководитель")
				И ДанныеРуководителяСовпадают(ДанныеПомощника.ДанныеНовогоРуководителя, ДанныеЕГР.Руководитель)
				И ВРег(Строка(ДанныеОДолжности.Должность)) = ВРег(ДанныеЕГР.Руководитель.Должность);
		КонецЕсли;
		
		Если Изменено.ОсновнойВидДеятельности Тогда
			Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
				И ДанныеЕГР.Свойство("КодОКВЭД")
				И (ДанныеПомощника.КодОКВЭД2Новый = ДанныеЕГР.КодОКВЭД);
		КонецЕсли;
		
		// Изменение основных сведений еще не внесено в ЕГР, проверять изменение учредителей и кодов ОКВЭД не требуется.
		Если Не Результат.ИзмененияВнесеныВЕГР Тогда
			Возврат Результат;
		КонецЕсли;
	
	КонецЕсли;
	
	// Данные об учредителях и дополнительных кодах ОКВЭД получаются отдельным запросом.
	ИзмененыДополнительныеСведения = Изменено.Учредители Или Изменено.УставныйКапитал Или Изменено.ВидыДеятельности;
	
	Если ИзмененыДополнительныеСведения Тогда
		
		АдресДанныхЕГР = ПоместитьВоВременноеХранилище(Неопределено);
		ПолучитьИнформациюОбУчредителяхИКодахОКВЭДВФоне(ДанныеПомощника.ДанныеОрганизации.ИНН, АдресДанныхЕГР);
		ИнформацияОСвязях = ПолучитьИзВременногоХранилища(АдресДанныхЕГР);
		
		Результат.ОжиданиеОтвета = ИнформацияОСвязях.ОжиданиеОтвета; 
		
		Если Не Результат.ОжиданиеОтвета Тогда
			
			Результат.ИзмененияВнесеныВЕГР = Истина;
			
			Если Изменено.Учредители Тогда
				Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
					И ИнформацияОСвязях.Свойство("Учредители")
					И УчредителиСовпадают(ДанныеПомощника.УчредителиНовые, ИнформацияОСвязях.Учредители);
			КонецЕсли;
			
			Если Изменено.УставныйКапитал Тогда
				Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
					И ИнформацияОСвязях.Свойство("УставныйКапитал")
					И (ДанныеПомощника.УставныйКапиталНовый = ИнформацияОСвязях.УставныйКапитал);
			КонецЕсли;
			
			Если Изменено.ВидыДеятельности Тогда
				Результат.ИзмененияВнесеныВЕГР = Результат.ИзмененияВнесеныВЕГР
					И ИнформацияОСвязях.Свойство("ВидыДеятельности")
					И ВидыДеятельностиСовпадают(ДанныеПомощника.ВидыДеятельностиНовые, ИнформацияОСвязях.ВидыДеятельности);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеРуководителяСовпадают(РуководительИзПомощника, РуководительИзЕГР)
	
	СравниваемыеПоля = Новый Массив;
	СравниваемыеПоля.Добавить("Фамилия");
	СравниваемыеПоля.Добавить("Имя");
	СравниваемыеПоля.Добавить("Отчество");
	СравниваемыеПоля.Добавить("ИНН");
	
	Для Каждого Поле Из СравниваемыеПоля Цикл
		ЗначениеИзПомощника = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РуководительИзПомощника, Поле);
		ЗначениеИзЕГР = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РуководительИзЕГР, Поле);
		Если ВРег(СокрЛП(ЗначениеИзПомощника)) <> ВРег(СокрЛП(ЗначениеИзЕГР)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УчредителиСовпадают(Знач УчредителиПомощника, Знач УчредителиЕГР)
	
	Если ТипЗнч(УчредителиПомощника) <> ТипЗнч(УчредителиЕГР) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если УчредителиПомощника.Количество() <> УчредителиЕГР.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УчредителиЕГР.Колонки.Учредитель.Имя = "Наименование";
	УчредителиЕГР.Колонки.СуммаКапитала.Имя = "СуммаВзноса";
	
	// Приведем значения колонки "Наименование" в обеих таблицах к одному регистру.
	Для Каждого Учредитель Из УчредителиПомощника Цикл
		Учредитель.Наименование = ВРег(Учредитель.Наименование);
	КонецЦикла;
	
	Для Каждого Учредитель Из УчредителиЕГР Цикл
		Учредитель.Наименование = ВРег(Учредитель.Наименование);
	КонецЦикла;
	
	КолонкиСравнения = "Наименование,ИНН,СуммаВзноса";
	
	Возврат Не ОбщегоНазначения.КоллекцииИдентичны(УчредителиПомощника, УчредителиЕГР, КолонкиСравнения);
	
КонецФункции

Функция ВидыДеятельностиСовпадают(Знач ВидыДеятельностиПомощника, Знач ВидыДеятельностиЕГР)
	
	Если ТипЗнч(ВидыДеятельностиПомощника) <> ТипЗнч(ВидыДеятельностиЕГР) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СравниваемыеКолонки = "Код,ЭтоОКВЭД2";
	
	Если ВидыДеятельностиЕГР.Колонки.Найти("ЭтоОКВЭД2") = Неопределено Тогда
		ВидыДеятельностиЕГР.Колонки.Добавить("ЭтоОКВЭД2", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаВидыДеятельностиЕГР Из ВидыДеятельностиЕГР Цикл
		СтрокаВидыДеятельностиЕГР.ЭтоОКВЭД2 = (СтрокаВидыДеятельностиЕГР.Классификатор = "ОКВЭД2");
	КонецЦикла;
	
	Возврат ОбщегоНазначения.КоллекцииИдентичны(ВидыДеятельностиПомощника, ВидыДеятельностиЕГР, СравниваемыеКолонки);
	
КонецФункции

Процедура ЗаписатьИзменениеУставногоКапитала(ДанныеПомощника, ДатаРегистрацииИзмененийЕГР)
	
	Перем Изменено;
	
	Если Не ДанныеПомощника.Свойство("Изменено", Изменено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Изменено.Учредители Или Изменено.УставныйКапитал) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = ДанныеПомощника.ДанныеОрганизации;
	
	УставныйКапиталОбъект = Документы.ФормированиеУставногоКапитала.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(УставныйКапиталОбъект);
	
	УставныйКапиталОбъект.Дата = ДатаРегистрацииИзмененийЕГР;
	
	УставныйКапиталОбъект.Организация = ДанныеОрганизации.Ссылка;
	УставныйКапиталОбъект.УставныйКапиталДоИзменения = ДанныеОрганизации.УставныйКапитал;
	
	Если ДанныеПомощника.УставныйКапиталНовый <> 0 Тогда
		УставныйКапиталОбъект.УставныйКапитал = ДанныеПомощника.УставныйКапиталНовый;
	Иначе
		УставныйКапиталОбъект.УставныйКапитал = ДанныеОрганизации.УставныйКапитал;
	КонецЕсли;
	
	УставныйКапиталОбъект.СпособРегистрации = ДанныеПомощника.СпособРегистрации;
	УставныйКапиталОбъект.СформированПомощникомРегистрации = Истина;
	УставныйКапиталОбъект.ИзменениеУставногоКапитала = Истина;
	
	УставныйКапиталОбъект.Учредители.Очистить();
	
	УчредителиДоИзменения = ДанныеОрганизации.Учредители.Скопировать();
	УчредителиДоИзменения.Колонки.Ссылка.Имя = "Учредитель";
	УчредителиДоИзменения.Колонки.СуммаВзноса.Имя = "СуммаВзносаДоИзменения";
	
	УставныйКапиталОбъект.Учредители.Загрузить(УчредителиДоИзменения);
	
	Если Изменено.Учредители Тогда
		
		Для Каждого Учредитель Из ДанныеПомощника.УчредителиНовые Цикл
			СтрокиУчредителя = УставныйКапиталОбъект.Учредители.НайтиСтроки(Новый Структура("Учредитель", Учредитель.Ссылка));
			Если СтрокиУчредителя.Количество() > 0 Тогда
				СтрокиУчредителя[0].СуммаВзноса = Учредитель.СуммаВзноса;
			Иначе
				СтрокаУчредителя = УставныйКапиталОбъект.Учредители.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУчредителя, Учредитель);
				СтрокаУчредителя.Учредитель = Учредитель.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Учредители не изменились, скопируем сумму взноса до изменения в колонку сумма взноса после изменения.
		УставныйКапиталОбъект.Учредители.ЗагрузитьКолонку(
			УставныйКапиталОбъект.Учредители.ВыгрузитьКолонку("СуммаВзносаДоИзменения"), "СуммаВзноса");
		
	КонецЕсли;
	
	УставныйКапиталОбъект.Комментарий =  НСтр("ru='#Сформирован помощником регистрации'");
	
	УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ДанныеПомощника.Вставить("ФормированиеУставногоКапитала", УставныйКапиталОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяФормыПоУмолчанию(ИмяОтчета, Знач Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ДействующиеФормы = ДействующиеФормы(ИмяОтчета, Период);
	Если ДействующиеФормы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Выбираем самую новую из вступивших в силу форм отчета
	Для Каждого Строка Из ДействующиеФормы Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаКонецДействия) Или ТекущаяДатаПользователя <= Строка.ДатаКонецДействия Тогда
			ВыбраннаяФорма = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраннаяФорма = Неопределено Тогда
		// Форма отчета одна, но еще не вступила в силу
		ВыбраннаяФорма = ДействующиеФормы[0];
	КонецЕсли;
	
	Возврат СтрШаблон("Отчет.%1.Форма.%2", ИмяОтчета, ВыбраннаяФорма.ФормаОтчета);
	
КонецФункции

Функция ДействующиеФормы(ИмяОтчета, Знач Период)
	
	Период = НачалоДня(Период);
	
	ДействующиеФормы = Новый Массив;
	
	ТаблицаФормОтчета = Отчеты[ИмяОтчета].ТаблицаФормОтчета();
	ТаблицаФормОтчета.Сортировать("ДатаНачалоДействия Убыв");
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия <= Период) И (Период <= Строка.ДатаКонецДействия Или Не ЗначениеЗаполнено(Строка.ДатаКонецДействия)) Тогда
			ДействующиеФормы.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеФормы;
	
КонецФункции

// Возвращает Истина, если сервис 1С:Контрагент подключен и доступен.
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенСервис1СКонтрагент() Экспорт
	
	Возврат РаботаСКонтрагентамиБП.Сервис1СКонтрагентПодключен();
	
КонецФункции

// Проверяет срок действия паспорта
//
// Параметры:
//   ДатаВыдачи - Дата - дата выдачи
//   ДатаРождения - Дата - дата рождения
//   Причина - Строка - исходящий параметр - причина, по которой паспорт признан недействительным
//   ГражданинРФ - Булево - Истина, если проверяется российский паспорт
//
// Возвращаемое значение:
//   Булево
//
Функция ПаспортДействителен(ДатаВыдачи, ДатаРождения = Неопределено, Причина = "", ГражданинРФ = Истина) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	Если Сегодня < ДатаВыдачи Тогда
		Причина = НСтр("ru = 'выдан позже текущей даты'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаРождения <> Неопределено Тогда
		Если ДатаВыдачи < ДатаРождения Тогда
			Причина = НСтр("ru = 'выдан раньше рождения'");
			Возврат Ложь;
		КонецЕсли;
		Если ГражданинРФ Тогда
			Возраст45 = ДобавитьМесяц(ДатаРождения, 12 * 45);
			Если ДатаВыдачи <= Возраст45 И Возраст45 <= Сегодня Тогда
				Причина = НСтр("ru = 'нарушен срок замены в 45 лет'");
				Возврат Ложь;
			КонецЕсли;
			Возраст20 = ДобавитьМесяц(ДатаРождения, 12 * 20);
			Если ДатаВыдачи <= Возраст20 И Возраст20 <= Сегодня Тогда
				Причина = НСтр("ru = 'нарушен срок замены в 20 лет'");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КодыФормЗаявлений(Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	КодыФорм = Новый Структура;
	КодыФорм.Вставить("ЗаявлениеРегистрацииООО", "Р11001");
	
	Если Период < НачалоДействияФормы13014() Тогда
		КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийУчредительныхДокументов", "Р13001");
		КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийЕГРЮЛ", "Р14001");
	Иначе
		КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийУчредительныхДокументов");
		КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийЕГРЮЛ", "Р13014");
	КонецЕсли;
	
	КодыФорм.Вставить("ЗаявлениеРегистрацииИП", "Р21001");
	КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийЕГРИП", "Р24001");
	КодыФорм.Вставить("ЗаявлениеОПрекращенииДеятельностиИП", "Р26001");
	
	Возврат КодыФорм;
	
КонецФункции

Функция НачалоДействияФормы13014()
	Возврат '20201125';
КонецФункции

Функция ИменаФайлов() Экспорт
	
	ИменаФайлов = Новый Структура;
	ИменаФайлов.Вставить("Устав", НСтр("ru = 'Устав'"));
	ИменаФайлов.Вставить("РешениеЕдинственногоУчредителя", НСтр("ru = 'Решение единственного учредителя'"));
	ИменаФайлов.Вставить("ПротоколСобранияУчредителейЕдинственногоУчредителя", НСтр("ru = 'Образец протокола собрания учредителей'"));
	ИменаФайлов.Вставить("ПротоколСобранияУчредителей", НСтр("ru = 'Протокол собрания учредителей'"));
	ИменаФайлов.Вставить("КвитанцияНаОплатуГоспошлины", НСтр("ru = 'Квитанция на оплату госпошлины'"));
	ИменаФайлов.Вставить("ИнструкцияПоВнесениюИзмененийВЕГРИП", НСтр("ru = 'Инструкция по внесению изменений в ЕГРИП'"));
	ИменаФайлов.Вставить("ИнструкцияПоВнесениюИзмененийВЕГРЮЛ", НСтр("ru = 'Инструкция по внесению изменений в ЕГРЮЛ'"));
	ИменаФайлов.Вставить("ИнструкцияПоПрекращениюДеятельностиИП", НСтр("ru = 'Инструкция по прекращению деятельности ИП'"));
	
	Возврат ИменаФайлов;
	
КонецФункции

// Возвращает данные помощника заполнения регламентированного уведомления
//
// Параметры:
//   Заявление - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Р11001, Р21001, Р13014, Р24001, Р26001, Форма № 26.5-1 (получение патента)
//
// Возвращаемое значение:
//   Структура, Неопределено
//
Функция ДанныеПомощникаЗаполнения(Заявление) Экспорт
	
	ДанныеУведомления = Заявление.ДанныеУведомления.Получить();
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУведомления, "ДанныеПомощникаЗаполнения", Новый Структура);
	
КонецФункции

Функция ПрисоединенныйФайлЗаявленияПоИмени(Заявление, ИмяФайла) Экспорт
	
	НайденныеПрисоединенныеФайлы = ПрисоединенныеФайлыЗаявленияПоИмени(Заявление, Новый Структура("ИмяФайла", ИмяФайла));
	ФайлЗаявления = НайденныеПрисоединенныеФайлы.Найти(ИмяФайла, "Наименование");
	
	Если ЗначениеЗаполнено(ФайлЗаявления) Тогда
		Возврат ФайлЗаявления.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПрисоединенныеФайлыЗаявленияПоИмени(Заявление, ИменаФайлов)
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Заявление, Файлы);
	
	МассивИмен = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаФайлов Цикл
		МассивИмен.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПрисоединенныеФайлы", Файлы);
	Запрос.Параметры.Вставить("МассивИмен", МассивИмен);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка,
	|	ПрисоединенныеФайлы.Наименование
	|ИЗ
	|	Справочник.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)
	|	И ПрисоединенныеФайлы.Наименование В(&МассивИмен)
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
	
	ТаблицаПоименованныхСсылок = Запрос.Выполнить().Выгрузить();
	ТаблицаПоименованныхСсылок.Индексы.Добавить("Наименование");
	
	Возврат ТаблицаПоименованныхСсылок;
	
КонецФункции

Функция ИспользуетсяСервисРегистрации() Экспорт
	
	Возврат СервисРегистрацииДоступен()
		И (ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегистрации")
			Или ТарификацияБПВызовСервераПовтИсп.ИспользоватьСервисРегистрации());
	
КонецФункции

Функция СервисРегистрацииДоступен()
	
	Возврат ОбщегоНазначения.РазделениеВключено() Или РежимОтладкиСервисаРегистрации();
	
КонецФункции

Функция СервисУзнатьИННДоступен() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() Или РежимОтладкиСервисаРегистрации();
	
КонецФункции

Функция СервисКвитанцияНаОплатуГоспошлиныДоступен() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() Или РежимОтладкиСервисаРегистрации();
	
КонецФункции

Функция РежимОтладкиСервисаРегистрации() Экспорт
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Возврат СтрНайти(ВРег(ПараметрЗапускаПриложения), "СЕРВИСРЕГИСТРАЦИИ") > 0;
	
КонецФункции

Процедура КонвертироватьКонтактнуюИнформациюПомощникаРегистрацииИзменений(ДанныеПомощника) Экспорт
	
	Если ДанныеПомощника.Свойство("ЮридическийАдресНовыйЗначенияПолей") Тогда
		АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
			ДанныеПомощника.ЮридическийАдресНовыйЗначенияПолей);
		
		ДанныеПомощника.Вставить("ЮридическийАдресНовыйЗначениеJSON", АдресJSON);
		ДанныеПомощника.Удалить("ЮридическийАдресНовыйЗначенияПолей");
	КонецЕсли;
	
	Если Не ДанныеПомощника.Свойство("ДанныеОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = ДанныеПомощника.ДанныеОрганизации;
	
	Если ДанныеОрганизации.Свойство("ЮридическийАдресЗначенияПолей") Тогда
		АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеОрганизации.ЮридическийАдресЗначенияПолей);
		
		ДанныеОрганизации.Вставить("ЮридическийАдресЗначениеJSON", АдресJSON);
		ДанныеОрганизации.Удалить("ЮридическийАдресЗначенияПолей");
	КонецЕсли;
	
	КонвертироватьКонтактнуюИнформациюФизическогоЛица(ДанныеОрганизации); // для ИП
	
	Если ДанныеОрганизации.Свойство("ДанныеРуководителя") Тогда
		КонвертироватьКонтактнуюИнформациюФизическогоЛица(ДанныеОрганизации.ДанныеРуководителя);
	КонецЕсли;
	
	Если ДанныеПомощника.Свойство("ДанныеНовогоРуководителя") Тогда
		КонвертироватьКонтактнуюИнформациюФизическогоЛица(ДанныеПомощника.ДанныеНовогоРуководителя);
	КонецЕсли;
	
	Если ДанныеПомощника.Свойство("ДанныеЗаявителя") Тогда
		КонвертироватьКонтактнуюИнформациюФизическогоЛица(ДанныеПомощника.ДанныеЗаявителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертироватьКонтактнуюИнформациюФизическогоЛица(ДанныеФизическогоЛица)
	
	Если ДанныеФизическогоЛица.Свойство("АдресПропискиЗначенияПолей") Тогда
		АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеФизическогоЛица.АдресПропискиЗначенияПолей);
		
		ДанныеФизическогоЛица.Вставить("АдресПропискиЗначениеJSON", АдресJSON);
		ДанныеФизическогоЛица.Удалить("АдресПропискиЗначенияПолей");
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("ТелефонРабочийЗначенияПолей") Тогда
		ТелефонJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеФизическогоЛица.ТелефонРабочийЗначенияПолей);
		
		ДанныеФизическогоЛица.Вставить("ТелефонРабочийЗначениеJSON", ТелефонJSON);
		ДанныеФизическогоЛица.Удалить("ТелефонРабочийЗначенияПолей");
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("EMailЗначенияПолей") Тогда
		EMailJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеФизическогоЛица.EMailЗначенияПолей);
		
		ДанныеФизическогоЛица.Вставить("EMailЗначениеJSON", EMailJSON);
		ДанныеФизическогоЛица.Удалить("EMailЗначенияПолей");
	КонецЕсли;
	
КонецПроцедуры

Функция КБКНалогаПоСпособуПодачиДокументов(СпособПодачиДокументов) Экспорт
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
			Перечисления.ВидыНалогов.Госпошлина_ГосрегистрацияОрганизаций, Истина);
	Если СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично Тогда
		КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
			Налог, Перечисления.ВидыПлатежейВГосБюджет.ГосрегистрацияОрганизацийЧерезМФЦ);
	Иначе
		КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, Перечисления.ВидыПлатежейВГосБюджет.Налог);
	КонецЕсли;
	
	Возврат КБК;
	
КонецФункции

// Возвращает Истина, если выполняется регистрация ООО и доступно использование типовых уставов
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьШагУстав()
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	ЭтоРегистрацияООО          = (ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ИспользоватьТиповыеУставы  = РегистрацияОрганизацииСервер.ИспользоватьТиповыеУставы();
	
	Возврат (ЭтоРегистрацияООО И ИспользоватьТиповыеУставы);
	
КонецФункции

Функция НомерШагаДокументы()
	
	Возврат ?(ИспользоватьШагУстав(), 6, 5);
	
КонецФункции

// Формирует таблицу типовых уставов для поиска по номеру и набору параметров
//
// Параметры:
//  УникальныйИдентификатор
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит таблицу значений.
//
Функция ПодготовитьТаблицуТиповыхУставов(УникальныйИдентификатор) Экспорт
	
	МакетУставов = ПолучитьМакет("ТиповыеУставы");
	
	ОбластьИменаКолонок = МакетУставов.ПолучитьОбласть("ИменаКолонок");
	ОбластьПараметры = МакетУставов.ПолучитьОбласть("ПараметрыУставов");
	
	КоличествоУставов = ОбластьПараметры.ВысотаТаблицы;
	КоличествоПараметров = ОбластьПараметры.ШиринаТаблицы;
	
	ТиповыеУставы = Новый ТаблицаЗначений;
	ТиповыеУставы.Колонки.Добавить("НомерУстава", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	
	ДанныеТиповогоУстава = Новый Структура;
	Для НомерКолонки = 2 По КоличествоПараметров Цикл
		ИмяПараметра = ОбластьИменаКолонок.Область(1, НомерКолонки).Текст;
		ТиповыеУставы.Колонки.Добавить(ИмяПараметра, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Для НомерСтроки = 1 По КоличествоУставов Цикл
		
		НовСтрока = ТиповыеУставы.Добавить();
		
		Для НомерКолонки = 1 По КоличествоПараметров Цикл
			
			ИмяКолонки = ОбластьИменаКолонок.Область(1, НомерКолонки).Текст;
			ЗначениеПараметра = ОбластьПараметры.Область(НомерСтроки, НомерКолонки).Текст;
			
			Если ТипЗнч(НовСтрока[ИмяКолонки]) = Тип("Булево") Тогда
				НовСтрока[ИмяКолонки] = ?(ЗначениеПараметра = "1", Истина, Ложь);
			Иначе
				НовСтрока[ИмяКолонки] = ЗначениеПараметра;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(ТиповыеУставы, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

Процедура ЗаписатьОперациюБизнесСтатистикиНомерТиповогоУстава(НомерТиповогоУстава) Экспорт
	
	Если Не ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерТиповогоУстава > 0 Тогда
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("СтатистикаБП.РегистрацияОрганизации.НомерТиповогоУстава", НомерТиповогоУстава);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаявлениеНаПолучениеПатента(ПараметрыВыполнения, Организация)
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	РеквизитыПатента = Неопределено;
	Если НЕ ПараметрыВыполнения.ЗаявлениеПатент
		ИЛИ (НЕ ДанныеПомощникаРегистрации.Свойство("Патент", РеквизитыПатента)
		ИЛИ РеквизитыПатента.Свойство("ПропуститьШаг") И РеквизитыПатента.ПропуститьШаг = Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АктуализироватьФорматСохраняемыхДанных(РеквизитыПатента);
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого ТекРеквизит Из РеквизитыПатента Цикл
		СтруктураРезультат.Вставить(ТекРеквизит.Ключ, ТекРеквизит.Значение);
	КонецЦикла;
	
	СтруктураРезультат.Вставить("Организация", Организация);
	СтруктураРезультат.Вставить("ДатаСоставления", ПараметрыВыполнения.ДатаСоставления);
	СтруктураРезультат.Вставить("Представитель", ПараметрыВыполнения.Представитель);
	СтруктураРезультат.Вставить("ДокументПредставителя", ПараметрыВыполнения.ДокументПредставителя);
	СтруктураРезультат.Вставить("КодНалоговогоОргана",
		ПараметрыВыполнения.ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ОбработатьЭлементыАдреса(СтруктураАдреса)
	
	Для Каждого Элемент Из СтруктураАдреса Цикл
		Если Прав(Элемент.Ключ, СтрДлина("Сокращение")) = "Сокращение" Тогда 
			БезСокр = СтрЗаменить(Элемент.Ключ, "Сокращение", "");
			
			Если Прав(СтруктураАдреса[БезСокр], СтрДлина(Элемент.Значение)) = Элемент.Значение Тогда
				СтруктураАдреса[БезСокр] = СокрЛП(
					Лев(СтруктураАдреса[БезСокр], СтрДлина(СтруктураАдреса[БезСокр]) - СтрДлина(Элемент.Значение)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Дом)
		И ЗначениеЗаполнено(СтруктураАдреса.ТипДома) Тогда
		
		СтруктураАдреса.ТипДома = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Корпус)
		И ЗначениеЗаполнено(СтруктураАдреса.ТипКорпуса) Тогда
		
		СтруктураАдреса.ТипКорпуса = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Квартира)
		И ЗначениеЗаполнено(СтруктураАдреса.ТипКвартиры) Тогда
		
		СтруктураАдреса.ТипКвартиры = "";
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеДокументаУдостоверяющегоЛичность(Гражданство)
	
	Если Не ЗначениеЗаполнено(Гражданство) Тогда
		Возврат "Документ, удостоверяющий личность";
	ИначеЕсли Гражданство = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		Возврат "Паспорт";
	Иначе
		Возврат "Паспорт и нотариально заверенный перевод на русский язык";
	КонецЕсли;
	
КонецФункции

Функция РазложитьПроверяемуюКонтактнуюИнформациюПоТипам(ПроверяемаяКонтактнаяИнформация)
	
	ИменаВидовКонтактнойИнформации = СтрРазделить(ПроверяемаяКонтактнаяИнформация, ",");
	ВидыКонтактнойИнформацииПоТипам = Новый ТаблицаЗначений;
	ВидыКонтактнойИнформацииПоТипам.Колонки.Добавить("Тип");
	ВидыКонтактнойИнформацииПоТипам.Колонки.Добавить("Виды");
	Для Каждого ИмяВидаКонтактнойИнформации Из ИменаВидовКонтактнойИнформации Цикл
		ВидКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
			СтрШаблон("Справочник.ВидыКонтактнойИнформации.%1", ИмяВидаКонтактнойИнформации));
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТипКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВидКонтактнойИнформации, "Тип");
			СтрокаПроверяемогоРеквизита = ВидыКонтактнойИнформацииПоТипам.Найти(ТипКонтактнойИнформации, "Тип");
			Если СтрокаПроверяемогоРеквизита = Неопределено Тогда
				СтрокаПроверяемогоРеквизита = ВидыКонтактнойИнформацииПоТипам.Добавить();
				СтрокаПроверяемогоРеквизита.Тип = ТипКонтактнойИнформации;
				СтрокаПроверяемогоРеквизита.Виды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
			Иначе
				СтрокаПроверяемогоРеквизита.Виды.Добавить(ВидКонтактнойИнформации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыКонтактнойИнформацииПоТипам;
	
КонецФункции

Функция ЧастиКодаПодразделения(КодПодразделения)
	
	Результат = Новый Структура("Часть1, Часть2");
	ЧастиКода = СтрРазделить(КодПодразделения, "-", Ложь);
	
	Количество = ЧастиКода.Количество();
	Если Количество >= 2 Тогда
		Результат.Часть1 = ЧастиКода[0];
		Результат.Часть2 = ЧастиКода[1];
	ИначеЕсли Количество <> 0 Тогда
		Результат.Часть1 = ЧастиКода[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуДополнительныхКодовОКВЭД(ИмяКолонки, ТаблицаДанных, ДополнительныеКоды)
	
	ТаблицаДанных.Колонки.Добавить(
		ИмяКолонки,
		ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.КлассификаторОКВЭД2.ДлинаКода));
	
	Для Каждого ТекущийОКВЭД Из ДополнительныеКоды Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока[ИмяКолонки] = ТекущийОКВЭД;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруКонтейнера(Контейнер, КлючиПоказателей, ДанныеЗаполнения)
	
	Для Каждого ТекущийЛист Из КлючиПоказателей Цикл
		
		ИмяЛиста = ТекущийЛист.Ключ;
		ТипЗначения = ТипЗнч(ТекущийЛист.Значение);
		
		Если ТипЗначения = Тип("Строка") Тогда
			
			ТипЗначенияЛиста =  ТипЗнч(Контейнер[ИмяЛиста]);
			Если ТипЗначенияЛиста = Тип("СписокЗначений") Тогда
				
				// Страницы листа
				ШаблонСтраницы = КлючиПоказателей[ТекущийЛист.Значение];
				
				Если ЗначениеЗаполнено(ДанныеЗаполнения[ТекущийЛист.Значение]) Тогда
					Контейнер[ИмяЛиста].Очистить();
				КонецЕсли;
				
				Для Каждого ТекущийЭлемент Из ДанныеЗаполнения[ТекущийЛист.Значение] Цикл
					
					НовыйЭлемент = Новый Структура;
					Для Каждого ТекущееПоле Из ШаблонСтраницы Цикл
						Если ТекущийЭлемент.Свойство(ТекущееПоле.Значение) Тогда
							НовыйЭлемент.Вставить(ТекущееПоле.Ключ, ТекущийЭлемент[ТекущееПоле.Значение]);
						КонецЕсли;
					КонецЦикла;
					
					Контейнер[ИмяЛиста].Добавить(НовыйЭлемент);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗначенияЛиста = Тип("Структура") Тогда
				
				ЗаполнитьДанныеСтруктурыЛиста(Контейнер[ИмяЛиста],
					КлючиПоказателей[ТекущийЛист.Значение],
					ДанныеЗаполнения[ТекущийЛист.Значение]);
				
			Иначе
				
				// Многострочные части заявления
				Контейнер.Вставить(ИмяЛиста, ДанныеЗаполнения[ТекущийЛист.Значение]);
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = Тип("Структура") И Не ЭтоСлужебныйРеквизит(ТекущийЛист.Ключ) Тогда
			
			ДанныеЛиста = Контейнер[ИмяЛиста];
			ЗаполнитьДанныеСтруктурыЛиста(ДанныеЛиста, ТекущийЛист.Значение, ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтруктурыЛиста(ДанныеЛиста, ЗначенияЗаполнения, ДанныеЗаполнения)
	
	Для Каждого ТекущийПараметр Из ЗначенияЗаполнения Цикл
		
		Если ТипЗнч(ТекущийПараметр.Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство(ТекущийПараметр.Значение)
			И ЗначениеЗаполнено(ДанныеЗаполнения[ТекущийПараметр.Значение]) Тогда
			
			ДанныеЛиста.Вставить(ТекущийПараметр.Ключ, ДанныеЗаполнения[ТекущийПараметр.Значение]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСлужебныйРеквизит(РеквизитДляПроверки)
	
	// Для ключей показателей предусмотрены служебные реквизиты, необходимые для заполнения:
	//  - КолонкиТаблицы - описывают структуру колонок таблицы значения регламентированного отчета
	//  - Сведения_ - описывают списки страниц, включенных в лист регламентированного отчета
	
	СлужебныеРеквизиты = Новый Массив;
	СлужебныеРеквизиты.Добавить("КолонкиТаблицы");
	СлужебныеРеквизиты.Добавить("Сведения_");
	
	Для Каждого ТекущийРеквизит Из СлужебныеРеквизиты Цикл
		Если СтрНачинаетсяС(РеквизитДляПроверки, ТекущийРеквизит) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает имя отчета регламентированного уведомления
//
// Параметры:
//   КодФормы - Строка - код формы уведомления, напр. Р24001
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяРегламентированногоУведомления(КодФормы) Экспорт
	
	Возврат СтрШаблон("РегламентированноеУведомлениеФорма%1", КодФормы);
	
КонецФункции

// Возвращает версию адреса - см. РегламентированнаяОтчетность.АдресВФорматеФИАС():
//  1 - возвращаемое свойство "МуниципальныйРайонВид" не может быть равно "4";
//  2 - возвращаемое свойство "МуниципальныйРайонВид" может быть равно "4".
//
// Возвращаемое значение:
//   Число
//
Функция ВерсияАдресаВФорматеФИАС()
	
	Возврат 2;
	
КонецФункции

Функция СтруктураАдреса(ИмяФормы, АдрЮР_JSON)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Результат = УправлениеКонтактнойИнформациейБП.НовыйСтруктураАдреса();
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(АдрЮР_JSON, Результат);
		ОбработатьЭлементыАдреса(Результат);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВерсияАдреса", ВерсияАдресаВФорматеФИАС());
		Результат = УведомлениеОСпецрежимахНалогообложения.АдресВФорматеФИАС(АдрЮР_JSON, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеУдостоверенияЛичности(СерияДокумента, НомерДокумента)
	
	Возврат СокрЛП(СтрШаблон("%1 %2", СерияДокумента, НомерДокумента));
	
КонецФункции

Процедура ДобавитьКлючиАдресаВСтруктуруПоказателей(СтруктураПоказателей, ДанныеЛиста, Коллекция, ПрефиксЗначения = "")
	
	Если ТипЗнч(Коллекция) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийПараметр Из Коллекция Цикл
		
		Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Массив") Тогда
			
			ИмяТабличнойЧасти = "";
			КолонкиТаблицы = Новый Структура;
			Для Каждого ТекущийКлюч Из ТекущийПараметр.Значение Цикл
				
				ТипЗначения = ТипЗнч(ТекущийКлюч);
				Если ТипЗначения = Тип("Строка") Тогда
					ИмяТабличнойЧасти = ТекущийКлюч;
				ИначеЕсли ТипЗначения = Тип("Структура") Тогда
					КолонкиТаблицы = ТекущийКлюч;
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПоказателей.Вставить(СтрШаблон("МногострочнаяЧасть%1", ТекущийПараметр.Ключ), ИмяТабличнойЧасти);
			СтруктураПоказателей.Вставить(СтрШаблон("КолонкиТаблицы%1", ИмяТабличнойЧасти), КолонкиТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(ПрефиксЗначения) Тогда
			ДанныеЛиста.Вставить(ТекущийПараметр.Ключ, СтрШаблон("%1%2", ПрефиксЗначения, ТекущийПараметр.Значение));
		Иначе
			ДанныеЛиста.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкиТаблицыДополнительныеКодыОКВЭД(ИмяКолонкиКодОКВЭД)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОКВЭД", ИмяКолонкиКодОКВЭД);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьКлючиСтруктурыАдреса_2014(ДанныеЛиста)
	
	ДанныеЛиста.Вставить("Индекс",                    "Индекс");
	ДанныеЛиста.Вставить("КодРегиона",                "КодРегиона");
	ДанныеЛиста.Вставить("РайонСокращение",           "РайонСокращение");
	ДанныеЛиста.Вставить("Район",                     "Район");
	ДанныеЛиста.Вставить("ГородСокращение",           "ГородСокращение");
	ДанныеЛиста.Вставить("Город",                     "Город");
	ДанныеЛиста.Вставить("НаселенныйПунктСокращение", "НаселенныйПунктСокращение");
	ДанныеЛиста.Вставить("НаселенныйПункт",           "НаселенныйПункт");
	ДанныеЛиста.Вставить("УлицаСокращение",           "УлицаСокращение");
	ДанныеЛиста.Вставить("Улица",                     "Улица");
	ДанныеЛиста.Вставить("ТипДома",                   "ТипДома");
	ДанныеЛиста.Вставить("Дом",                       "Дом");
	ДанныеЛиста.Вставить("ТипКорпуса",                "ТипКорпуса");
	ДанныеЛиста.Вставить("Корпус",                    "Корпус");
	ДанныеЛиста.Вставить("ТипКвартиры",               "ТипКвартиры");
	ДанныеЛиста.Вставить("Квартира",                  "Квартира");
	ДанныеЛиста.Вставить("АдресXML",                  "АдресXML");
	
КонецФункции

Процедура ДобавитьСведенияОбАдресе(Результат, АдресСтруктурой, КлючиПоказателей, ДобавитьМестоНахождение = Ложь)
	
	Для Каждого ТекущийПараметр Из АдресСтруктурой Цикл
		
		Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Массив") Тогда
			
			// Если в структуре адреса есть многострочная часть, то её необходимо расшифровать в таблицу значений,
			// где имена колонок - имена ключей, которые определены тут: Отчеты.РегламентированноеУведомлениеФормаР21001.СоответствиеПоказателейСтраницыРеквизитамАдреса()
			СтруктураКолонок = Неопределено;
			Если Не КлючиПоказателей.Свойство(СтрШаблон("КолонкиТаблицы%1", ТекущийПараметр.Ключ), СтруктураКолонок)
				Или Не ЗначениеЗаполнено(СтруктураКолонок) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаДопАдресов = Новый ТаблицаЗначений;
			Для Каждого ТекущаяКолонка Из СтруктураКолонок Цикл
				ТаблицаДопАдресов.Колонки.Добавить(ТекущаяКолонка.Ключ, ОбщегоНазначения.ОписаниеТипаСтрока(255));
			КонецЦикла;
			
			Для Каждого ТекущаяСтрока Из ТекущийПараметр.Значение Цикл
				
				НоваяСтрока = ТаблицаДопАдресов.Добавить();
				ПустаяСтрока = Истина;
				
				Для Каждого ТекущаяКолонка Из ТекущаяСтрока Цикл
					
					ИмяКолонки = КлючСтруктурыПоЗначению(СтруктураКолонок, ТекущаяКолонка.Ключ);
					Если ИмяКолонки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока[ИмяКолонки] = ТекущаяКолонка.Значение;
					ПустаяСтрока = Ложь;
					
				КонецЦикла;
				
				Если ПустаяСтрока Тогда
					ТаблицаДопАдресов.Удалить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
			Результат.Вставить(ТекущийПараметр.Ключ, ТаблицаДопАдресов);
		Иначе
			Результат.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавитьМестоНахождение И АдресСтруктурой.Свойство("ИдентификаторАдресногоОбъекта") Тогда
		
		Если КодГородаФедеральногоЗначения(Результат.КодРегиона) Тогда
			
			Результат.Вставить("МестоНахождение_КодРегиона", Результат.КодРегиона);
			
		Иначе
			
			Для Каждого ТекущиеКлюч Из АдресСтруктурой Цикл
				КлючМестоНахождения = СтрШаблон("МестоНахождение_%1", ТекущиеКлюч.Ключ);
				Результат.Вставить(КлючМестоНахождения, ТекущиеКлюч.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НомерТелефонаВРазрешенномФормате(ЗначениеСтрокой, ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат ЗначениеСтрокой;
	КонецЕсли;
	
	// Приказ ФНС России от 31.08.2020 N ЕД-7-14/617@
	//
	// Номер телефона, который указывается в форме заявления, должен представлять собой
	// номер мобильной связи или стационарного телефона.
	// Номер телефона указывается в формате:
	// - код страны (например, "+7")
	// - код города (до 5 знаков) или код мобильного оператора связи (до 3 знаков)
	// - номер телефона без пробелов, прочерков, скобок.
	// Пример заполнения: +79991234567
	
	Результат = "";
	
	КодСимвола0 = 48; // 0
	КодСимвола9 = 57; // 9
	
	РазрешенныеСимволы = Новый Массив;
	РазрешенныеСимволы.Добавить(Символ(43)); // +
	
	Для КодСимвола = КодСимвола0 По КодСимвола9 Цикл
		РазрешенныеСимволы.Добавить(Символ(КодСимвола));
	КонецЦикла;
	
	КоличествоСимволов = СтрДлина(ЗначениеСтрокой);
	СимволыНомера = Новый Массив;
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		
		ТекущийСимвол = Сред(ЗначениеСтрокой, НомерСимвола, 1);
		Если РазрешенныеСимволы.Найти(ТекущийСимвол) <> Неопределено Тогда
			СимволыНомера.Добавить(ТекущийСимвол);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(СимволыНомера);
	
КонецФункции

Функция НаименованиеЛистаПодписиИзмененийЕГРИП(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат "Ж";
	Иначе
		Возврат "Е";
	КонецЕсли;
	
КонецФункции

Функция НаименованиеЛистаПодписиИзмененийЕГРЮЛ(ИмяФормы)
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат "Н";
	Иначе
		Возврат "П";
	КонецЕсли;
	
КонецФункции

Функция НаименованиеЛистаПодписиРегистрацииООО(ИмяФормы)
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат "Н";
	Иначе
		Возврат "И";
	КонецЕсли;
	
КонецФункции

Функция НовыйСведенияОбУчредителяхЮридическихЛицах()
	
	Результат = Новый Структура;
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("СуммаВзноса", 0);
	Результат.Вставить("ДоляУставногоКапитала", 0);
	Результат.Вставить("ОграничитьДоступКСведениям", "");
	
	// Не заполняется
	Результат.Вставить("ИННИностранноеЮЛ", "");
	Результат.Вставить("ПолноеНаименование", "");
	Результат.Вставить("НаименованиеНаИностранномЯзыке", "");
	Результат.Вставить("КодСтраны", "");
	Результат.Вставить("РегистрационныйНомер", "");
	Результат.Вставить("КодНалогоплательщика", "");
	Результат.Вставить("ДоляДробьюЧислитель", 0);
	Результат.Вставить("ДоляДробьюЗнаменатель", 0);
	
	Возврат Результат;
	
КонецФункции

Функция КодГородаФедеральногоЗначения(КодГорода)
	
	ГородаФедеральногоЗначения = Новый Массив;
	ГородаФедеральногоЗначения.Добавить("77"); // Москва
	ГородаФедеральногоЗначения.Добавить("78"); // Санкт-Петербург
	ГородаФедеральногоЗначения.Добавить("92"); // Севастополь
	ГородаФедеральногоЗначения.Добавить("99"); // Байконур
	
	Возврат ГородаФедеральногоЗначения.Найти(КодГорода) <> Неопределено;
	
КонецФункции

Функция ПрименяетсяАУСН(СтруктураУчетнойПолитики) Экспорт

	Если СтруктураУчетнойПолитики <> Неопределено
		И СтруктураУчетнойПолитики.Свойство("СистемаНалогообложения")
		И СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.АУСН Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйВыборСпецрежимаНалогообложения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УСН", Ложь);
	Результат.Вставить("АУСН", Ложь);
	Результат.Вставить("Патент", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОбластьИнструкцииПереходаНаАУСН(ТабличныйДокумент, НомерШага, ЭтоЮрЛицо)
	
	Параметры = Новый Структура;
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Параметры.Вставить("СсылкаНаЛичныйКабинет", СсылкаНаЛичныйКабинетНалогоплательщика(ЭтоЮрЛицо));
	
	МакетАУСН = ПолучитьМакет("ИнструкцияПоПереходуНаАУСН");
	МакетАУСН.Параметры.Заполнить(Параметры);
	
	Для Каждого ТекущаяОбласть Из МакетАУСН.Области Цикл
		
		Область = МакетАУСН.ПолучитьОбласть(ТекущаяОбласть.Имя);
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Область) Тогда
			ТабличныйДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на личный кабинет налогоплательщика.
//
// Параметры:
//   ЭтоЮрЛицо - Булево
//
// Возвращаемое значение:
//   Строка
//
Функция СсылкаНаЛичныйКабинетНалогоплательщика(ЭтоЮрЛицо) Экспорт
	
	Если ЭтоЮрЛицо Тогда
		Возврат "http://lkul.nalog.ru/";
	Иначе
		Возврат "https://lkip2.nalog.ru/";
	КонецЕсли;
	
КонецФункции

Функция НовыйПараметрыПримененияАУСН()
    
    Результат = Новый Структура;
    Результат.Вставить("Применяется", Ложь); // Признак применения АУСН
    Результат.Вставить("ОписаниеШага", ""); // Описание шага для перехода на АУСН
    Результат.Вставить("Заголовок", ""); // Заголовок шага для перехода на АУСН
    
    Возврат Результат;
    
КонецФункции
 
// Возвращает описание шага при переходе на АУСН
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой применяется АУСН
//   Период      - Дата - Дата перехода на АУСН
//
// Возвращаемое значение:
//   Структура - См. НовыйПараметрыПримененияАУСН()
//
Функция ОписаниеШагаДляПереходаНаАУСН(Организация, Период) Экспорт
	
	Результат = НовыйПараметрыПримененияАУСН();
	
	ЭтоЮрЛицо = Справочники.Организации.ЭтоЮрЛицо(Организация);
	
	ПрименяетсяАУСН = УчетнаяПолитика.ПрименяетсяАУСН(Организация, Период);
	Результат.Применяется = ПрименяетсяАУСН;
	
	Если Не ПрименяетсяАУСН Тогда
		
		Результат.Заголовок = НСтр("ru = 'Подайте документы в ИФНС'");
		
		Если ЭтоЮрЛицо Тогда
			Результат.ОписаниеШага = НСтр("ru = 'В течение 30 дней после регистрации ООО в Налоговую инспекцию нужно подать уведомление о переходе на УСН'");
		Иначе
			Результат.ОписаниеШага = НСтр("ru = 'В течение 30 дней после регистрации ИП в Налоговую инспекцию нужно подать уведомление о переходе на УСН'");
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Заголовок = НСтр("ru = 'Подайте заявление о переходе на АУСН'");
	СсылкаНаЛичныйКабинетНалогоплательщика = СсылкаНаЛичныйКабинетНалогоплательщика(ЭтоЮрЛицо);
	
	Результат.ОписаниеШага = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(
		НСтр("ru = 'В течение 30 дней после регистрации нужно подать уведомление о переходе на АУСН.
		|
		|Зайдите в <a href=""%1"">Личный кабинет налогоплательщика</a>.
		|В меню выберите пункт для перехода на АУСН и выберите банк из предложенного списка партнеров.'"),
		СсылкаНаЛичныйКабинетНалогоплательщика));
	
	Возврат Результат;
	
КонецФункции

// Отправляет код подтверждения на указанный контакт
//
// Параметры:
//   ПараметрыВыполнения - Структура
//     * СпособПодтверждения - Строка - Телефон, Почта
//     * Значение            - Строка - Номер телефона или адрес электронной почты
//   АдресХранилища - Строка
//
Процедура ОтправитьКодПодтвержденияВФоне(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	ОтветОтСервиса = ДокументооборотРегистрацияВФНС.СервисРегистрацииФНСРаботоспособность();
	Если Не ОтветОтСервиса.Выполнено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Сервис для отправки кодов подтверждения недоступен.
			|Обратитесь к администратору.
			|%1'"),
			ОтветОтСервиса.Ошибка);
	КонецЕсли;
	
	ПараметрыПроверки = ДокументооборотРегистрацияВФНС.ПараметрыОтправкиКодаПодтверждения();
	ПараметрыПроверки.Тип = ПараметрыВыполнения.СпособПодтверждения;
	ПараметрыПроверки.ПредметОтправки = ПараметрыВыполнения.Значение;
	ПараметрыПроверки.Идентификатор = ПараметрыВыполнения.ИдентификаторКода;
	
	ДанныеПодтверждения = ДокументооборотРегистрацияВФНС.СервисРегистрацииФНСПолучитьКодПодтверждения(ПараметрыПроверки);
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ДанныеХранилища = Неопределено И ТипЗнч(ДанныеХранилища) <> Тип("Структура") Тогда
		ДанныеХранилища = Новый Структура;
	КонецЕсли;
	
	ДанныеХранилища.Вставить(ПараметрыВыполнения.СпособПодтверждения, ДанныеПодтверждения);
	
	ПоместитьВоВременноеХранилище(ДанныеХранилища, АдресХранилища);
	
КонецПроцедуры

// Возвращает перечень видов предпринимательской деятельности, для которых при регистрации в налоговой
// необходимо подтвердить отсутствие судимости согласно пп."к" п.1 ст.22.1 Федерального закона от 08.08.2001 N 129-ФЗ
//
// Возвращаемое значение:
//   Массив:
//   * Значение - Строка - код по классификатору ОКВЭД2
//
Функция ПереченьОКВЭДДляПроверкиСудимости()
	
	// Постановление Правительства РФ от 16.04.2011 N 285 - перечень ОКВЭД в сфере образования, ДЮСШ, культуры и пр.
	// Постановление Правительства РФ от 23.01.2023 № 69 - перечень ОКВЭД в сфере перевозок
	
	Макет = ПолучитьМакет("ПереченьОКВЭДДляПроверкиСудимости");
	Результат = ОбщегоНазначения.ЗначениеИзСтрокиXML(Макет.ПолучитьТекст());
	
	Возврат Результат.ВыгрузитьКолонку("Код");
	
КонецФункции

// Проверяет, есть ли в указанном списке ОКВЭД виды деятельности, для которых требуется справка об отсутствии судимости
//
// Параметры:
//   ПроверяемыеОКВЭД - Массив - Список кодов ОКВЭД, которые необходимо проверить
//
// Возвращаемое значение:
//   Булево
//
Функция ТребуетсяСправкаОбОтсутствииСудимости(ПроверяемыеОКВЭД) Экспорт
	
	// Федеральный закон от 11.06.2022 № 156-ФЗ
	ДатаНачалаПроверки = '20230301';
	
	Если ТекущаяДатаСеанса() < ДатаНачалаПроверки Или Не ЗначениеЗаполнено(ПроверяемыеОКВЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПереченьОсобыхОКВЭД = ПереченьОКВЭДДляПроверкиСудимости();
	
	Для Каждого ТекущийОКВЭД Из ПроверяемыеОКВЭД Цикл
		Если ПереченьОсобыхОКВЭД.Найти(ТекущийОКВЭД) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПояснениеПриПодачеДокументов(СпособПодачиДокументов, ПроверяетсяСудимость)
	
	СтрокиПояснения = Новый Массив;
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	
	Если ПроверяетсяСудимость Тогда
		СтрокиПояснения.Добавить(НСтр("ru ='Налоговая инспекция проверит информацию об отсутствии судимости и после регистрации отправит по электронной почте лист записи ЕГРИП.'"));
	Иначе
		СтрокиПояснения.Добавить(НСтр("ru ='После регистрации налоговая инспекция отправит по электронной почте лист записи ЕГРИП.'"));
	КонецЕсли;
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСпредставитель Тогда
		СтрокиПояснения.Добавить(НСтр("ru ='Если нужен бумажный экземпляр, Представитель должен сообщить об этом сотруднику инспекции при подаче документов.'"));
	ИначеЕсли СпособПодачиДокументов = СпособыПодачиДокументов.МФЦлично Тогда
		СтрокиПояснения.Добавить(НСтр("ru ='Если нужен бумажный экземпляр, сообщите об этом сотруднику МФЦ при подаче документов.'"));
	Иначе
		СтрокиПояснения.Добавить(НСтр("ru ='Если нужен бумажный экземпляр, сообщите об этом сотруднику инспекции при подаче документов.'"));
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПояснения, " ");
	
КонецФункции

Функция ТребуетсяСобраниеУчредителей(Учредители)
	
	УчредителиПоТипам = УчредителиПоТипам(Учредители);
	КоличествоУчредителей = Учредители.Количество();
	КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
	КоличествоФизическихЛиц = УчредителиПоТипам.ФизическиеЛица.Количество();
	
	Если КоличествоУчредителей > 1 Или (КоличествоЮридическихЛиц = 1 И КоличествоФизическихЛиц = 0) Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИННиОГРН(Организация, ДатаСоставления) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ШаблонИННиОГРН = НСтр("ru = 'ИНН %1, ОГРН %2'");
		РеквизитИНН = "ИННЮЛ";
	Иначе
		ШаблонИННиОГРН = НСтр("ru = 'ИНН %1, ОГРНИП %2'");
		РеквизитИНН = "ИННФЛ";
	КонецЕсли;
	
	РеквизитыОрганизации = Новый Массив;
	РеквизитыОрганизации.Добавить("ОГРН");
	РеквизитыОрганизации.Добавить(РеквизитИНН);
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаСоставления,
		РеквизитыОрганизации);
	
	Возврат СтрШаблон(ШаблонИННиОГРН, СведенияОбОрганизации[РеквизитИНН], СведенияОбОрганизации.ОГРН);
	
КонецФункции

// Возвращает разрядность дробной части для указания доли учредителя в форме Р13014
//
// Возвращаемое значение:
//   Число
//
Функция РазрядностьДробнойЧастиДолиУчредителя()
	
	Возврат 15;
	
КонецФункции

Функция ОписаниеТипаДоляУчредителя()
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, РазрядностьДробнойЧастиДолиУчредителя()));
	
КонецФункции

Функция КодыФормЗаявленийБезПроверкиДанныхПомощника()
	
	КодыФорм = КодыФормЗаявлений();
	
	Результат = КодыФормЗаявленийРегистрацииНовогоБизнеса();
	// Если заполнено заявление о снятии ИП с учета, в помощнике или без него, нужно отображать статус заявления в организации
	Результат.Добавить(КодыФорм.ЗаявлениеОПрекращенииДеятельностиИП);
	
	Возврат Результат;
	
КонецФункции

Функция КодыФормЗаявленийРегистрацииНовогоБизнеса()
	
	КодыФорм = КодыФормЗаявлений();
	
	Результат = Новый Массив;
	Результат.Добавить(КодыФорм.ЗаявлениеРегистрацииИП); // Р21001
	Результат.Добавить(КодыФорм.ЗаявлениеРегистрацииООО); // Р11001
	
	Возврат Результат;
	
КонецФункции

Функция РежимНалогообложенияПомощника(Организация)
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, ТекущаяДата);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ФормаБизнеса = "ООО";
	Иначе
		ФормаБизнеса = "ИП";
	КонецЕсли;
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход Тогда
		
		Возврат "НПДИП";
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.АУСН Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ТекущаяДата) Тогда
			Возврат СтрШаблон("АУСНДоходы%1", ФормаБизнеса);
		Иначе
			Возврат СтрШаблон("АУСНДоходыМинусРасходы%1", ФормаБизнеса);
		КонецЕсли;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущаяДата) Тогда
			Возврат "ПСНИП";
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ТекущаяДата) Тогда
			Возврат СтрШаблон("УСНДоходы%1", ФормаБизнеса);
		Иначе
			Возврат СтрШаблон("УСНДоходыРасходы%1", ФормаБизнеса);
		КонецЕсли;
		
	Иначе
		
		Возврат СтрШаблон("ОСНО%1", ФормаБизнеса);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли