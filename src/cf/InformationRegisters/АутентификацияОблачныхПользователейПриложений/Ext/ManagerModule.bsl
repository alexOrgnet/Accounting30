
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает аутентифицированного пользователя и его приложение, которому был выдан токен.
//
// Параметры:
//   Токен - Строка - токен аутентификации
//
// Возвращаемое значение:
//   Структура - данные аутентификации
//      *Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр облачного приложения
//      *Пользователь - СправочникСсылка.Пользователь - пользователь этого облачного приложения
//   Неопределено - если токен невалиден
//
Функция АутентифицированныйПользователь(Токен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Аутентификация.Приложение КАК Приложение,
	|	Аутентификация.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.АутентификацияОблачныхПользователейПриложений КАК Аутентификация
	|ГДЕ
	|	Аутентификация.Токен = &Токен";
	
	Запрос.Параметры.Вставить("Токен", Токен);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 2 Тогда
		// Уникальность токенов контроллируется на этапе их выдачи.
		// Наличие более одной записи указывает на дескредитацию токена.
		// Обрабатываем ситуацию так же, как и в случае предъявления невалидного токена.
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Приложение, Пользователь", Выборка.Приложение, Выборка.Пользователь);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Выдает токен аутентификации пользователю из облачного приложения. Один и тот же пользователь
// может быть подключен из разных приложений, поэтому каждой паре "пользователь + приложение" выдается
// отдельный токен аутентификации.
// Предыдущий выданный токен отзывается.
//
// Параметры:
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр облачного приложения
//   Пользователь - СправочникСсылка.Пользователь - пользователь
//
// Возвращаемое значение:
//   Токен - Строка - токен аутентификации
//
Функция ВыдатьАутентификацию(Приложение, Пользователь) Экспорт
	
	ДлинаТокена = Метаданные.РегистрыСведений.АутентификацияОблачныхПользователейПриложений.Ресурсы.Токен.Тип.КвалификаторыСтроки.Длина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛОЖЬ КАК Уникальный
	|ИЗ
	|	РегистрСведений.АутентификацияОблачныхПользователейПриложений КАК Аутентификация
	|ГДЕ
	|	Аутентификация.Токен = &Токен";
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.АутентификацияОблачныхПользователейПриложений");
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Уникальный = Ложь;
		Пока Не Уникальный Цикл
			
			Токен = СоздатьЗначениеТокена(ДлинаТокена);
			Запрос.Параметры.Вставить("Токен", Токен);
			Уникальный = Запрос.Выполнить().Пустой();
			
		КонецЦикла;
		
		Запись = РегистрыСведений.АутентификацияОблачныхПользователейПриложений.СоздатьМенеджерЗаписи();
		Запись.Приложение = Приложение;
		Запись.Пользователь = Пользователь;
		Запись.Токен = Токен;
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаписьЖурналаРегистрации(
			"РегистрСведений.АутентификацияОблачныхПользователейПриложений",
			УровеньЖурналаРегистрации.Информация,
			РегистрыСведений.АутентификацияОблачныхПользователейПриложений,
			Приложение,
			Прав(Токен, 4)); // приложение публичное, запишем только последние 4 символа
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Токен;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьЗначениеТокена(МаксимальнаяДлина)
	
	// Для генерации токена не используется СоздатьПароль, потому что она ориентирована на запоминание пароля человеком,
	// за счет этого редуцирует сложность.
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	
	ДопустимыеСимволыТокена = СимволыТокена();
	РазмерностьСимвола = СтрДлина(ДопустимыеСимволыТокена);
	
	СимволыТокена = Новый Массив(МаксимальнаяДлина);
	Для ИндексСимвола = 0 По МаксимальнаяДлина - 1 Цикл
		
		Значение = Генератор.СлучайноеЧисло(1, РазмерностьСимвола);
		СимволыТокена[ИндексСимвола] = Сред(ДопустимыеСимволыТокена, Значение, 1);
		
	КонецЦикла;
	
	Возврат СтрСоединить(СимволыТокена, "");
	
КонецФункции

Функция СимволыТокена()
	
	// Используются символы, допустимые в MIME base64 - см. RFC 2045
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	
КонецФункции

#КонецОбласти

#КонецЕсли
