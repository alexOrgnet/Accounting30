#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Удаляет записи регистра согласно переданным идентификаторам
//
// Параметры:
//  Идентификаторы - Массив из Строка
//
Процедура ОчиститьЗаписи(Идентификаторы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеДокументыАУСН.Организация,
		|	БанковскиеДокументыАУСН.Документ,
		|	БанковскиеДокументыАУСН.Идентификатор,
		|	БанковскиеДокументыАУСН.ОтправитьВБанк,
		|	БанковскиеДокументыАУСН.ДанныеВФорматеСервиса,
		|	БанковскиеДокументыАУСН.ИдентификаторПолучателя
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Идентификатор В (&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того, что документ был загружен из сервиса АУСН
//
// Параметры:
//  Документ - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.ПоступлениеНаРасчетныйСчет - проверяемый
//             документ
//
// Возвращаемое значение:
//  Булево
//
Функция ДокументЗагруженИзСервиса(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ПризнакНайденногоДокумента
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Изменяет значения ресурса СтатусАУСН и реквизита ДатаОбмена у записи с переданным идентификатором
//
// Параметры:
//  ИдентификаторАУСН - Строка - идентификатор, по которому осуществляется отбор записи
//  Статус - ПеречислениеСсылка.СтатусыОбменаАУСН - новое значение ресурса СтатусАУСН
//  СообщитьВТехподдержкуБанка - Булево - признак необходимости оповещения банка партнера о том, что ФНС
//                               отклонила переданную разметку АУСН
//  ОтветФНС - Строка - текст в формате xml с результатом отправки разметки банковских операций в ФНС
//
Процедура ИзменитьСтатус(ИдентификаторАУСН, Статус, СообщитьВТехподдержкуБанка = Ложь, ОтветФНС = "") Экспорт
	
	Ключи = ДанныеДокумента( , ИдентификаторАУСН);
	Если Ключи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Ключи.Организация);
	Набор.Отбор.Документ.Установить(Ключи.Документ);
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		Запись.СтатусОбменаАУСН = Статус;
		Запись.ДатаОбмена = ТекущаяДата();
		Запись.ОшибкаНаСторонеБанка = СообщитьВТехподдержкуБанка;
		Запись.ОтветФНС = Новый ХранилищеЗначения(ОтветФНС);
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры

// Возвращает значения измерений, ресурсов и реквизитов записи, устанавливая отбор в зависимости от переданных
// параметров
//
// Параметры:
//  Документ - ДокументСсылка.ПоступлениеНаРасчетныйСчет, ДокументСсылка.СписаниеСРасчетногоСчета, Неопределено
//             заполняется, если требуется отбор по значению измерения Документ
//  Идентификатор - Строка, Неопределено - заполняется, если требуется отбор по значению ресурса Идентификатор
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса, Неопределено
//
Функция ДанныеДокумента(Документ = Неопределено, Идентификатор = Неопределено) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор,
		|	БанковскиеДокументыАУСН.ОтправитьВБанк КАК ОтправитьВБанк,
		|	БанковскиеДокументыАУСН.СтатусОбменаАУСН КАК СтатусОбменаАУСН,
		|	БанковскиеДокументыАУСН.ДанныеВФорматеСервиса КАК ДанныеВФорматеСервиса,
		|	БанковскиеДокументыАУСН.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	БанковскиеДокументыАУСН.ДатаОбмена КАК ДатаОбмена,
		|	БанковскиеДокументыАУСН.ОшибкаНаСторонеБанка КАК ОшибкаНаСторонеБанка
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН";
	
	СхемаЗапроса = СхемыЗапросов.Создать(ТекстЗапроса);
	ТочкаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, "БанковскиеДокументыАУСН");
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Документ) Тогда
		ТочкаЗапроса.Оператор.Отбор.Добавить("БанковскиеДокументыАУСН.Документ = &Документ");
		Запрос.УстановитьПараметр("Документ", Документ);
	ИначеЕсли ЗначениеЗаполнено(Идентификатор) Тогда
		ТочкаЗапроса.Оператор.Отбор.Добавить("БанковскиеДокументыАУСН.Идентификатор = &Идентификатор");
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что банковская операция АУСН отклонена ФНС
//
// Параметры:
//  Ссылка - ДокументСсылка.ПоступлениеНаРасчетныйСчет, ДокументСсылка.СписаниеСРасчетногоСчета
//
// Возвращаемое значение:
//  Булево
//
Функция ОперацияОтклоненаФНС(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДанныеДокументаАУСН = ДанныеДокумента(Ссылка);
	ОтклоненФНС = ДанныеДокументаАУСН <> Неопределено И ДанныеДокументаАУСН.СтатусОбменаАУСН =
		Перечисления.СтатусыОбменаАУСН.Отклонен;
	Возврат ОтклоненФНС;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// 
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные в формате сервиса для указанного документа
//
// Параметры:
//  Документ - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.ПоступлениеНаРасчетныйСчет
//
// Возвращаемое значение:
//  Строка - данные в формате сервиса АУСН, полученные при загрузке документа
//
Функция ДанныеВФорматеСервиса(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.БанковскиеДокументыАУСН.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Возврат МенеджерЗаписи.ДанныеВФорматеСервиса.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает данные в формате сервиса для указанных документов
//
// Параметры:
//  Идентификаторы - Массив из Строка - идентификаторы АУСН
//
// Возвращаемое значение:
//  Строка - данные в формате сервиса АУСН, полученные при загрузке документов
//
Функция ДанныеВФорматеСервисаПоИдентификаторам(Идентификаторы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.БанковскиеДокументыАУСН.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Результат.Добавить(МенеджерЗаписи.ДанныеВФорматеСервиса.Получить());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

Функция ОтветФНС(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.БанковскиеДокументыАУСН.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Возврат МенеджерЗаписи.ОтветФНС.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Отложенный обработчик обновления: очищает удаляемое измерение "Банк"
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура УдалитьДанныеИзмеренияБанк(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.УдалитьБанк КАК УдалитьБанк,
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор,
		|	БанковскиеДокументыАУСН.ОтправитьВБанк КАК ОтправитьВБанк,
		|	БанковскиеДокументыАУСН.ДанныеВФорматеСервиса КАК ДанныеВФорматеСервиса,
		|	БанковскиеДокументыАУСН.ИдентификаторПолучателя КАК ИдентификаторПолучателя
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
		|ИТОГИ
		|	МИНИМУМ(Организация),
		|	МИНИМУМ(УдалитьБанк)
		|ПО
		|	Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПустойБанк = Справочники.Банки.ПустаяСсылка();
	
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		НаборПустой = СоздатьНаборЗаписей();
		НаборПустой.Отбор.Организация.Установить(ВыборкаПоДокументу.Организация);
		НаборПустой.Отбор.УдалитьБанк.Установить(ПустойБанк);
		НаборПустой.Отбор.Документ.Установить(ВыборкаПоДокументу.Документ);
		Запись = НаборПустой.Добавить();
		Запись.УдалитьБанк = ПустойБанк;
		
		Выборка = ВыборкаПоДокументу.Выбрать();
		ПерваяЗапись = Истина;
		Пока Выборка.Следующий() Цикл
			Если ПерваяЗапись Тогда
				ЗаполнитьЗначенияСвойств(Запись, Выборка, , "УдалитьБанк");
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборПустой);
				ПерваяЗапись = Ложь;
			КонецЕсли;
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.УдалитьБанк.Установить(Выборка.УдалитьБанк);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, все ли записи были обработаны процедурой УдалитьДанныеИзмеренияБанк
//
// Параметры:
//   Параметры - Структура - см. документацию к БСП.
//
// Возвращаемое значение:
//   Булево - Истина, то можно редактировать и записывать данные,
//            Ложь - данные недоступны, пока не будут обработаны процедурой обновления.
//
Функция УдаленыВсеДанныеИзмеренияБанк(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеДокументыАУСН.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
	|ГДЕ
	|	БанковскиеДокументыАУСН.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли