#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает в записи регистра период (интервал) расчета, отличающийся от целого месяца.
//
// Параметры:
//  Запись  - РегистрСведенийЗапись.РасчетАмортизации
//  Начало - Дата - начало интервала
//  Конец  - Дата - конец интервала
//
Процедура УстановитьНеполныйПериодЗаписи(Запись, Начало, Конец) Экспорт
	
	Если ТривиальныйПериод(Начало, Конец) Тогда
		Возврат;
	КонецЕсли;
	
	Запись.ПериодРасчета      = Начало;
	Запись.КонецПериодаЗатрат = Конец;
	
КонецПроцедуры

// Определяет период (интервал), для которого можно не заполнять реквизит КонецПериодаЗатрат
//
// Параметры:
//  Начало - Дата - начало интервала
//  Конец  - Дата - конец интервала
// 
// Возвращаемое значение:
//  Булево - Истина, если заполнение КонецПериодаЗатрат избыточно
//
Функция ТривиальныйПериод(Начало, Конец) Экспорт
	Возврат Начало = НачалоМесяца(Начало) И КонецДня(Конец) = КонецМесяца(Конец);
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПериод(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетАмортизации.Организация КАК Организация,
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.ПериодРасчета КАК ПериодРасчета
	|ПОМЕСТИТЬ вт_Регистраторы
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.Период = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Регистраторы.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, КОНЕЦПЕРИОДА(вт_Регистраторы.ПериодРасчета, МЕСЯЦ)) КАК Период
	|ИЗ
	|	вт_Регистраторы КАК вт_Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО вт_Регистраторы.Организация = ДанныеПервичныхДокументов.Организация
	|			И вт_Регистраторы.Регистратор = ДанныеПервичныхДокументов.Документ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ВыборкаЗаписи = Результат.Выбрать();
	Пока ВыборкаЗаписи.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.Период) Тогда
				СтрокаНабора.Период = ВыборкаЗаписи.Период;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Расчет амортизации""
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетНалогаНаИмущество,, 
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения поля СтоимостьДляАмортизацииБУ,
// которое в предыдущих версиях заполнялось неверными для ФСБУ 6 значениями.
// Сейчас значения поля используются в справке-расчете, поэтому верное заполнение стало важным.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//         Добавляется поле Курсор - момент времени, до которого выполнена обработка данных.
//
Процедура ЗаполнитьСтоимостьДляАмортизацииБУ(ПараметрыОбработчика) Экспорт
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.МоментВремени КАК Курсор,
	|	РасчетАмортизации.Период КАК Период,
	|	РасчетАмортизации.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Записи
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК ПервоеПрименение
	|		ПО РасчетАмортизации.Организация = ПервоеПрименение.Организация
	|ГДЕ
	|	(РасчетАмортизации.Период >= &НачалоОбязательногоПрименения
	|			ИЛИ РасчетАмортизации.Период >= &НачалоДосрочногоПрименения
	|				И ЕСТЬNULL(ПервоеПрименение.ПрименятьФСБУ6Досрочно, ЛОЖЬ))
	|	И РасчетАмортизации.СтоимостьДляАмортизацииБУ <> РасчетАмортизации.ОстаточнаяСтоимостьБУ - РасчетАмортизации.ЛиквидационнаяСтоимость
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Записи.Регистратор КАК Регистратор,
	|	Записи.Курсор КАК Курсор,
	|	Записи.Период КАК Период
	|ИЗ
	|	Записи КАК Записи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		ЗапросРасчетАмортизации = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РасчетАмортизации");
		ЗапросРасчетАмортизации.Оператор.Отбор.Добавить("РасчетАмортизации.МоментВремени < &Курсор");
		ТекстЗапроса = ЗапросРасчетАмортизации.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	Запрос.УстановитьПараметр(
		"НачалоОбязательногоПрименения",
		БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр(
		"НачалоДосрочногоПрименения",
		БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетАмортизации.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Выборка.Регистратор);
	
		НаборЗаписей = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей.Прочитать();
				
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.СтоимостьДляАмортизацииБУ = Макс(0, Запись.ОстаточнаяСтоимостьБУ - Запись.ЛиквидационнаяСтоимость);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщение = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ЗаполнитьСтоимостьДляАмортизацииБУ.
	                                    |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетАмортизации,
				Выборка.Регистратор,
				Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения поля КомпонентАмортизации, которое в прошлых версиях имело составной тип.
//
// Для сужения составного типа составное измерение КомпонентАмортизации "пересоздано":
// переименовано в УдалитьКомпонентАмортизации, одновременно добавлено измерение с именем КомпонентАмортизации, имеющее несоставной тип.
// Этот обработчик заполняет новое измерение КомпонентАмортизации по данным УдалитьКомпонентАмортизации.
//
// Здесь отступление от п. 2 стандарта разработки 706 "Ограничения на переименование объектов метаданных" -
// пересоздается только проблемное измерение, а не весь регистр.
// Отступление вызвано сокращением времени технологического простоя функциональности расчета амортизации:
// записей в регистре часто много, при этом поле КомпонентАмортизации, как правило, заполняется в незначительном числе записей.
//
// В соответствии со стандартом разработки 534 "Удаление устаревших объектов метаданных из конфигурации"
// данные в замещаемом поле должны быть очищены в одной из следующих версий.
// Для этого следует выполнить обработчик обновления ОчиститьУдалитьКомпонентАмортизации
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//         Добавляется поле Курсор - момент времени, до которого выполнена обработка данных.
//
Процедура СократитьСоставТиповКомпонентАмортизации(ПараметрыОбработчика) Экспорт
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.МоментВремени КАК Курсор,
	|	РасчетАмортизации.Период КАК Период,
	|	РасчетАмортизации.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Записи
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
	|		ПО РасчетАмортизации.УдалитьКомпонентАмортизации = КомпонентыАмортизации.Ссылка
	|ГДЕ
	|	РасчетАмортизации.КомпонентАмортизации <> РасчетАмортизации.УдалитьКомпонентАмортизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Записи.Регистратор КАК Регистратор,
	|	Записи.Курсор КАК Курсор
	|ИЗ
	|	Записи КАК Записи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		ЗапросРасчетАмортизации = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РасчетАмортизации");
		ЗапросРасчетАмортизации.Оператор.Отбор.Добавить("РасчетАмортизации.МоментВремени < &Курсор");
		ТекстЗапроса = ЗапросРасчетАмортизации.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетАмортизации.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Выборка.Регистратор);
	
		НаборЗаписей = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.УдалитьКомпонентАмортизации) Тогда
					Продолжить;
				КонецЕсли;
				Запись.КомпонентАмортизации = Запись.УдалитьКомпонентАмортизации;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщение = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика СократитьСоставТиповКомпонентАмортизации.
	                                    |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетАмортизации,
				Выборка.Регистратор,
				Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, требуется ли обработка данных с помощью СократитьСоставТиповКомпонентАмортизации.
//
// Параметры:
//  ПроверяемыйОбъект - Структура - см. документацию к БСП раздел "Блокировка необработанных данных в пользовательском интерфейсе"
// 
// Возвращаемое значение:
//  Булево - Ложь, если объект требует обработки.
//
Функция СокращенСоставТиповКомпонентАмортизации(ПроверяемыйОбъект) Экспорт
	
	РегламентнаяОперация = Неопределено;
	
	КомпонентыАмортизацииОС.НачатьПроверкуБлокировкиНеобработанныхДанныхРасчетАмортизации(РегламентнаяОперация, ПроверяемыйОбъект);
	
	Если РегламентнаяОперация = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РегламентнаяОперация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетАмортизации.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизацииОС
	|		ПО РасчетАмортизации.УдалитьКомпонентАмортизации = КомпонентыАмортизацииОС.Ссылка
	|ГДЕ
	|	РасчетАмортизации.Регистратор = &Ссылка
	|	И РасчетАмортизации.УдалитьКомпонентАмортизации <> РасчетАмортизации.КомпонентАмортизации";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Обработчик очистки поля УдалитьКомпонентАмортизации.
//
// Очистка поля должна быть выполнена перед обновлением на версию, в которой поле удалено.
// В противном случае можно получить ситуацию, когда обновление не будет возможно в связи с появлением неуникальных наборов измерений.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//         Добавляется поле Курсор - момент времени, до которого выполнена обработка данных.
//
Процедура ОчиститьУдалитьКомпонентАмортизации(ПараметрыОбработчика) Экспорт
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.МоментВремени КАК Курсор,
	|	РасчетАмортизации.Период КАК Период,
	|	РасчетАмортизации.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Записи
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.УдалитьКомпонентАмортизации <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Записи.Регистратор КАК Регистратор,
	|	Записи.Курсор КАК Курсор
	|ИЗ
	|	Записи КАК Записи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		ЗапросРасчетАмортизации = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РасчетАмортизации");
		ЗапросРасчетАмортизации.Оператор.Отбор.Добавить("РасчетАмортизации.МоментВремени < &Курсор");
		ТекстЗапроса = ЗапросРасчетАмортизации.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетАмортизации.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Выборка.Регистратор);
	
		НаборЗаписей = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей.Прочитать();
			
			ЗаписиДляУдаления = Новый Массив;
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Если Запись.УдалитьКомпонентАмортизации = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Запись.УдалитьКомпонентАмортизации) = Тип("СправочникСсылка.КомпонентыАмортизацииОС")
					И Запись.УдалитьКомпонентАмортизации <> Запись.КомпонентАмортизации Тогда
					ЗаписиДляУдаления.Добавить(Запись);
				ИначеЕсли ТипЗнч(Запись.УдалитьКомпонентАмортизации) = Тип("СправочникСсылка.ОсновныеСредства")
					И Запись.УдалитьКомпонентАмортизации <> Запись.Объект Тогда
					ЗаписиДляУдаления.Добавить(Запись);
				КонецЕсли;
				
				Запись.УдалитьКомпонентАмортизации = Неопределено;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ЗаписиДляУдаления) Тогда
			
				СериализуемаяКоллекция = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетАмортизации);
				Для Каждого Запись Из ЗаписиДляУдаления Цикл
					ЗаполнитьЗначенияСвойств(СериализуемаяКоллекция.Добавить(), Запись);
				КонецЦикла;
				
				Писатель = Новый ЗаписьJSON();
				Писатель.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
				
				СериализуемыйОбъект = СериализаторXDTO.ЗаписатьXDTO(СериализуемаяКоллекция);
				ФабрикаXDTO.ЗаписатьJSON(Писатель, СериализуемыйОбъект, НазначениеТипаXML.Явное);
				
				Протокол = Писатель.Закрыть();
				
				Для Каждого Запись Из ЗаписиДляУдаления Цикл
					НаборЗаписей.Удалить(Запись);
				КонецЦикла;
				
				Сообщение = СтрШаблон(НСтр("ru = 'Обработчик ОчиститьУдалитьКомпонентАмортизации удалил записи, которые могли препятствовать обновлению на будущие версии программы.
	                                        |Данные удаленных записей:
	                                        |%1'"), Протокол);
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.РасчетАмортизации,
					Выборка.Регистратор,
					Сообщение);
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщение = СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении обработчика ОчиститьУдалитьКомпонентАмортизации.
                      |Ошибка не препятствует текущей работе, однако может помешать обновлению на одну из следующих версий программы.
                      |Для возможности удаления очистите значения измерения УдалитьКомпонентАмортизации в регистре.
                      |Подробная информация о причинах ошибки:
                      |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетАмортизации,
				Выборка.Регистратор,
				Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
