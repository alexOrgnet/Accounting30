#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// 
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Возвращает признак наличия документов сервиса АУСН с ошибкой обработки
//
// Параметры:
//  Организация - СправочникСсылка.Организации, Неопределено
//  Банк - СправочникСсылка.КлассификаторБанков, Неопределено
//
// Возвращаемое значение:
//  Булево - Истина, если есть документы с ошибкой обработки
//
Функция ЕстьДокументыСОшибками(Организация = Неопределено, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Схема = СхемыЗапросов.Создать(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыАУСН.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|ГДЕ
		|	ДокументыАУСН.Статус = Значение(Перечисление.СтатусыДокументовАУСН.ОшибкаОбработкиПользователем)");
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		ТаблицаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(Схема, "ДокументыАУСН");
		ТаблицаЗапроса.Оператор.Отбор.Добавить("Организация = &Организация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Банк) Тогда
		ИдентификаторБанка = РегистрыСведений.БанкиАУСН.Идентификатор(Банк);
		Запрос.УстановитьПараметр("ИдентификаторБанка", ИдентификаторБанка);
		ТаблицаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(Схема, "ДокументыАУСН");
		ТаблицаЗапроса.Оператор.Отбор.Добавить("ИдентификаторБанка = &ИдентификаторБанка");
	КонецЕсли;
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПодготовитьКПовторномуЧтению(Идентификаторы) Экспорт
	
	Выборка = КлючиЗаписейДокументов(Идентификаторы);
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Тип.Установить(Выборка.Тип);
		НаборЗаписей.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		НаборЗаписей.Отбор.ИдентификаторБанка.Установить(Выборка.ИдентификаторБанка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Статус = Перечисления.СтатусыДокументовАУСН.ОтправленоПользователю;
			Запись.ПрочитатьПовторно = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецФункции

// Записывает информацию о документе, загруженном из сервиса Автоматизированная УСН
// 
// Параметры:
//   Организация - ОпределяемыйТип.Организация
//   Тип - ПеречислениеСсылка.ТипыДокументовАУСН
//   Идентификатор - Строка - идентификатор документа
//   Статус - ПеречислениеСсылка.СтатусыДокументовАУСН
//   Данные - Строка -  преобразованные в строку Base64 двоичные данные zip-архива файлов, содержащих информацию о документе
//   ИдентификаторБанка - Строка - идентификатор банка, с которым настроена интеграция, см. РегистрСведений.БанкиАУСН
//   ДатаИзменения - Дата - дата UTC, на которую актуальна информация в документе
//   
Процедура ЗаписатьДокумент(Организация, Тип, Идентификатор, Статус, Данные, ИдентификаторБанка, ДатаИзменения) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.Статус = Статус;
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные);
	МенеджерЗаписи.ИдентификаторБанка = ИдентификаторБанка;
	Если ЗначениеЗаполнено(ДатаИзменения) Тогда
		МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
	Иначе
		МенеджерЗаписи.ДатаИзменения = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Возвращает записи регистра сведений ДокументыАУСН с указанным статусом
//
// Параметры:
//  Статус - ПеречислениеСсылка.СтатусыДокументовАУСН, Неопределено - отбор будет установлен по переданному статусу документа
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка из результата запроса к регистру сведений ДокументыАУСН, выполненного
//                               с отбором, значения которого устанавливаются из переданного параметра
//
Функция НайтиДокументы(Статус = Неопределено) Экспорт
	
	Схема = Новый СхемаЗапроса();
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыАУСН.Организация КАК Организация,
		|	ДокументыАУСН.Тип КАК Тип,
		|	ДокументыАУСН.Идентификатор КАК Идентификатор,
		|	ДокументыАУСН.Статус КАК Статус,
		|	ДокументыАУСН.Данные КАК Данные,
		|	ДокументыАУСН.ИдентификаторБанка КАК ИдентификаторБанка,
		|	ДокументыАУСН.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыАУСН.ДатаИзменения";
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	ОператорЗапроса = Схема.ПакетЗапросов[0].Операторы[0];
	Если ЗначениеЗаполнено(Статус) Тогда
		ОператорЗапроса.Отбор.Добавить("ДокументыАУСН.Статус = &Статус");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Определяет наиболее свежий документ (ответ сервиса) определенного типа.
// Применяется для запросов типа instant, предоставляющих состояние объекта (платежные реквизиты, остаток на счете и т.п.)
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовАУСН
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - спозиционирована на единственной записи, содержит поля Данные и ДатаИзменения регистра
//
Функция АктуальныйДокумент(ТипДокумента, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",         ТипДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыАУСН.Данные КАК Данные,
	|	ДокументыАУСН.ДатаИзменения КАК ДатаИзменения,
	|	ДокументыАУСН.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
	|ГДЕ
	|	ДокументыАУСН.Организация = &Организация
	|	И ДокументыАУСН.Тип = &Тип
	|	И ДокументыАУСН.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовАУСН.ОбработаноПользователем)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыАУСН.ДатаИзменения УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка;
	
КонецФункции

// Возвращает содержимое наиболее свежего документа (ответа сервиса) определенного типа.
// Применяется для запросов типа instant, предоставляющих состояние объекта (платежные реквизиты, остаток на счете и т.п.)
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовАУСН
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Структура - ключи:
//    * Дата       - Дата - локальная дата получения ответа от сервиса
//    * Содержимое - ОбъектXDTO - содержит ответ сервиса, освобожденный от конвертов
//  Неопределено - отсутствуют данные этого типа
//
Функция АктуальныйОтветСервиса(ТипДокумента, Организация) Экспорт
	
	Документ = АктуальныйДокумент(ТипДокумента, Организация);
	Если Документ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРазбора = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	
	ДанныеДокумента = ИнтеграцияАУСН.РасшифроватьДанныеДокумента(Документ, КаталогРазбора);
	
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогРазбора);
		
	Если ДанныеДокумента = Неопределено Или Не ДанныеДокумента.Свойство("Ответ") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Дата",       МестноеВремя(Документ.ДатаИзменения));
	Ответ.Вставить("Содержимое", ДанныеДокумента.Ответ);
	Ответ.Вставить("Фабрика",    ДанныеДокумента.Фабрика);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает выборку со значениями измерений регистра ДокументыАУСН по переданным идентификаторам документов
//
// Параметры:
//  Идентификаторы - Строка, Массив из Строка - идентификаторы документов сервиса АУСН.
//                   Допустимо передать один идентификатор строкой.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция КлючиЗаписейДокументов(Идентификаторы) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыАУСН.Организация КАК Организация,
		|	ДокументыАУСН.Тип КАК Тип,
		|	ДокументыАУСН.Идентификатор КАК Идентификатор,
		|	ДокументыАУСН.ИдентификаторБанка КАК ИдентификаторБанка
		|ИЗ
		|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|ГДЕ
		|	ДокументыАУСН.Идентификатор В (&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#КонецЕсли