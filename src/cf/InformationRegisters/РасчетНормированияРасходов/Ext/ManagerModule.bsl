
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.Организация.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ЭтотСписок.Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: заполняет в регистре ресурс ПредельныйРазмер, предназначенный для отображения в справке-расчете;
// вызывается в версии, в которой добавлен ресурс.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьПредельныйРазмер(ПараметрыОбработчика) Экспорт
	
	// Заполняет ресурс ПредельныйРазмер умножением ресурса СуммаБазы на процент нормирования.
	// Если значение ресурса СуммаБазы составляет копейки, то после умножения на процент нормирования
	// и округления в результате получится ноль. В таких случаях считаем, что ресурс ПредельныйРазмер заполнен.
	Курсор = Неопределено;
	ПараметрыОбработчика.Свойство("Курсор", Курсор);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.ПериодРасчета КАК Период
	|ИЗ
	|	РегистрСведений.РасчетНормированияРасходов КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ НормыРасходов КАК НормыРасходов
	|		ПО (НормыРасходов.ВидРасходов = ДанныеРегистра.ВидОперации)
	|ГДЕ
	|	(ВЫРАЗИТЬ(ДанныеРегистра.СуммаБазы * ЕСТЬNULL(НормыРасходов.Норма, 1) КАК ЧИСЛО(15, 2))) <> 0
	|	И ДанныеРегистра.ПредельныйРазмер = 0
	|	И ДанныеРегистра.Регистратор.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеРегистра.ПериодРасчета УБЫВ,
	|	Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВременнуюТаблицуНормыРасходов(Запрос.МенеджерВременныхТаблиц);
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("НормыРасходов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Курсор) Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "ДанныеРегистра");
		СхемаЗапроса.Оператор.Отбор.Добавить(
			"ДанныеРегистра.Регистратор < &Регистратор И ДанныеРегистра.ПериодРасчета = &Период ИЛИ ДанныеРегистра.ПериодРасчета < &Период");
		ТекстЗапроса = СхемаЗапроса.Схема.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Регистратор", Курсор.Регистратор);
		Запрос.УстановитьПараметр("Период", Курсор.Период);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Курсор = Новый Структура("Период, Регистратор", Выборка.Период, Выборка.Ссылка);

		Регистратор = Выборка.Ссылка;
		
		ПараметрыОбработчика.Вставить("Курсор", Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетНормированияРасходов.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.РасчетНормированияРасходов.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				Если Не ЗначениеЗаполнено(Запись.ПредельныйРазмер) И ЗначениеЗаполнено(Запись.ВидОперации) Тогда
					Если Запись.ВидОперации = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
						Запись.ПредельныйРазмер = Запись.СуммаБазы;
					Иначе
						Норма = НалоговыйУчет.НормаРасходов(Запись.ВидОперации);
						Запись.ПредельныйРазмер = ?(Норма = 0, 0, НалоговыйУчет.ПредельныйРазмерРасходов(Запись.СуммаБазы, Норма));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетНормированияРасходов,
				Регистратор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

// Проверяет, все ли документы были обработаны процедурой ЗаполнитьПредельныйРазмер()
//
// Параметры:
//   Параметры - Структура - см. документацию к БСП.
//
// Возвращаемое значение:
//   Булево - Истина, то можно редактировать и записывать данные,
//            Ложь - данные недоступны, пока не будут обработаны процедурой обновления.
//
Функция ЗаполненРесурсПредельныйРазмер(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВременнуюТаблицуНормыРасходов(Запрос.МенеджерВременныхТаблиц);
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("НормыРасходов") = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНормированияРасходов.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.РасчетНормированияРасходов КАК РасчетНормированияРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НормыРасходов КАК НормыРасходов
	|		ПО (НормыРасходов.ВидРасходов = РасчетНормированияРасходов.ВидОперации)
	|ГДЕ
	|	(ВЫРАЗИТЬ(РасчетНормированияРасходов.СуммаБазы * ЕСТЬNULL(НормыРасходов.Норма, 1) КАК ЧИСЛО(15, 2))) <> 0
	|	И РасчетНормированияРасходов.ПредельныйРазмер = 0";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВременнуюТаблицуНормыРасходов(МенеджерВременныхТаблиц)
	
	НормыРасходов = Новый ТаблицаЗначений;
	НормыРасходов.Колонки.Добавить("ВидРасходов", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	НормыРасходов.Колонки.Добавить("Норма", ОбщегоНазначения.ОписаниеТипаЧисло(3,2));
	
	Для Каждого ВидРасходов Из Перечисления.ВидыРасходовНУ.НормируемыеРасходы() Цикл
		
		Если ВидРасходов = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНормыРасходов = НормыРасходов.Добавить();
		СтрокаНормыРасходов.ВидРасходов = ВидРасходов;
		СтрокаНормыРасходов.Норма = НалоговыйУчет.НормаРасходов(ВидРасходов);

	КонецЦикла;
	
	ТочкаЗапроса = СхемыЗапросов.ПоместитьТаблицуЗначений(НормыРасходов, "НормыРасходов");
	ТочкаЗапроса.Запрос.Индекс.Добавить("ВидРасходов");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТочкаЗапроса.Схема.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("НормыРасходов", НормыРасходов);
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#КонецЕсли
