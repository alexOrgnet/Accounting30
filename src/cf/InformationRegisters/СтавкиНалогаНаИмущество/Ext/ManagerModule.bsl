#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает налоговую ставку по умолчанию
//
// Возвращаемое значение:
//  Число - ставка налога в %
//
Функция НалоговаяСтавкаПоУмолчанию() Экспорт
	
	Возврат 2.2;
	
КонецФункции

// Возвращает налоговую ставку по умолчанию
//
// Возвращаемое значение:
//  Число - ставка налога в %
//
Функция НалоговаяСтавкаДвижимоеИмуществоПоУмолчанию() Экспорт
	
	Возврат 1.1;
	
КонецФункции

Процедура УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения) Экспорт
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Период",
		НачалоГода(ТекущаяДатаСеанса()));
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Организация",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"НалоговаяСтавка",
		НалоговаяСтавкаПоУмолчанию());
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"НалоговаяСтавкаДвижимоеИмущество",
		НалоговаяСтавкаДвижимоеИмуществоПоУмолчанию());
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления
	
Процедура ЗаполнитьДанныеЛьгот(Параметры) Экспорт

	// Ранее в целях применения льгот использовались следующие ресурсы:
	// - ОсвобождениеОтНалогообложения - признак освобождения от налогообложения
	// - КодНалоговойЛьготыОсвобождениеОтНалогообложения - код льготы в виде освобождения
	// - СнижениеНалоговойСтавки - признак льготы в виде снижения ставки
	//   (ставка при этом всегда бралась из НалоговаяСтавка, а УдалитьСниженнаяНалоговаяСтавка не использовался)
	// - УменьшениеСуммыНалогаВПроцентах - признак льготы в виде уменьшения суммы налога на процент
	// - ПроцентУменьшения - процент уменьшения суммы налога, если УменьшениеСуммыНалогаВПроцентах = Истина
	// В новой архитектуре все эти ресурсы заменяет ОснованиеЛьготы.
	
	// Обрабатываем все записи одной порцией, т.к. ожидается, что их немного (максимум = количество организаций в ИБ * несколько периодов настройки по каждой).
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНалогаНаИмущество.Период КАК Период,
	|	СтавкиНалогаНаИмущество.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество КАК СтавкиНалогаНаИмущество
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО СтавкиНалогаНаИмущество.Организация = Организации.Ссылка
	|ГДЕ
	|	СтавкиНалогаНаИмущество.ОснованиеЛьготы = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И (СтавкиНалогаНаИмущество.УдалитьОсвобождениеОтНалогообложения
	|	ИЛИ СтавкиНалогаНаИмущество.УдалитьСнижениеНалоговойСтавки
	|	ИЛИ СтавкиНалогаНаИмущество.УдалитьУменьшениеСуммыНалогаВПроцентах)";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		// Нет записей к обработке
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;					
	КонецЕсли; 
	
	ВыборкаЗаписей = РезультатЗапроса.Выбрать();
	
	// Для региональных льгот указываем тип региона (по коду регистрации в налоговом органе)
	ОписаниеТипаКодРегиона = ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);
	
	// Созданные элементы справочника льгот кэшируем в таблице
	Льготы = Новый ТаблицаЗначений;
	Льготы.Колонки.Добавить("ОснованиеЛьготы", Новый ОписаниеТипов("СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам"));
	Льготы.Колонки.Добавить("КодЛьготы", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	Льготы.Колонки.Добавить("ВидЛьготы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЛьготПоИмущественнымНалогам"));
	Льготы.Колонки.Добавить("ПроцентУменьшения", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	Льготы.Колонки.Добавить("КодРегиона", ОписаниеТипаКодРегиона);
	Льготы.Колонки.Добавить("УстановленаМестнымНормативнымАктом", Новый ОписаниеТипов("Булево"));
					
	// Для создания региональных льгот и для поиска уже созданных требуются данные классификатора
	ОписаниеЛьгот = ЛьготыПоИмущественнымНалогамПовтИсп.ДанныеОЛьготахПоИмущественнымНалогам(
		Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество,
		Ложь);
	
	КэшКодовРегионов = Новый Соответствие;
	
	КоличествоОшибок = 0;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗаписей);
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
				
		ПоискЛьготы = Новый Структура;
		ОснованиеЛьготы = Неопределено;
		
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготы) И МенеджерЗаписи.УдалитьОсвобождениеОтНалогообложения Тогда
			 						
			ПоискЛьготы.Вставить("КодЛьготы", МенеджерЗаписи.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения);
			ПоискЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
			
			Если Не ЗначениеЗаполнено(МенеджерЗаписи.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
				// Считаем, что это региональная льгота в виде освобождения. Код 2012000.
				ПоискЛьготы.Вставить("КодЛьготы", 2012000);
				ПоискЛьготы.Вставить("КодРегиона", КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов, ОписаниеТипаКодРегиона));
				ПоискЛьготы.Вставить("УстановленаМестнымНормативнымАктом", Истина); 
			ИначеЕсли Лев(МенеджерЗаписи.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения, 4) = "2012" Тогда
				// С 2012 начинаются коды региональных льгот (в ином случае будет найдена/создана федеральная льгота)
				ПоискЛьготы.Вставить("КодРегиона", КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов, ОписаниеТипаКодРегиона));
				ПоискЛьготы.Вставить("УстановленаМестнымНормативнымАктом", Истина); 
			КонецЕсли;	
			
		ИначеЕсли Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготы) И МенеджерЗаписи.УдалитьСнижениеНалоговойСтавки Тогда	 
			 						
			// Такая льгота всегда региональная, за исключением одного случая:
			// льгота 2010402 является федеральной (указана в НК), но применяется только в Калининградской области.
			// Это льгота в виде снижения ставки налога на 50%.
			// Но так как здесь нельзя вычислить процент снижения (нет основной ставки), то всегда считаем льготу региональной. 
			ПоискЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной);
			ПоискЛьготы.Вставить("КодРегиона", КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов, ОписаниеТипаКодРегиона));
			ПоискЛьготы.Вставить("УстановленаМестнымНормативнымАктом", Истина); 
				
			ОписаниеЛьготы = ОписаниеЛьгот.МестныеЛьготы[ПоискЛьготы.ВидЛьготы];
			Если ОписаниеЛьготы = Неопределено Тогда
				// Считаем, что это региональная льгота с кодом 2012400.
				ПоискЛьготы.Вставить("КодЛьготы", 2012400);
			Иначе 
				ПоискЛьготы.Вставить("КодЛьготы", ОписаниеЛьготы.КодЛьготы);
			КонецЕсли;	
											
		ИначеЕсли Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготы) И МенеджерЗаписи.УдалитьУменьшениеСуммыНалогаВПроцентах Тогда	 
			// Региональная льгота
			
			ПоискЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент);
			ПоискЛьготы.Вставить("КодРегиона", КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов, ОписаниеТипаКодРегиона));
			ПоискЛьготы.Вставить("ПроцентУменьшения", МенеджерЗаписи.УдалитьПроцентУменьшения);
			ПоискЛьготы.Вставить("УстановленаМестнымНормативнымАктом", Истина); 
			
			ОписаниеЛьготы = ОписаниеЛьгот.МестныеЛьготы[ПоискЛьготы.ВидЛьготы];
			Если ОписаниеЛьготы = Неопределено Тогда
				// Считаем, что это региональная льгота с кодом 2012500.
				ПоискЛьготы.Вставить("КодЛьготы", 2012500);
			Иначе 
				ПоискЛьготы.Вставить("КодЛьготы", ОписаниеЛьготы.КодЛьготы);
			КонецЕсли;	
						
		КонецЕсли;	 
		
		НачатьТранзакцию();
		
		Попытка
			
			СозданныеЛьготы = Льготы.НайтиСтроки(ПоискЛьготы);		
			Если СозданныеЛьготы.Количество() > 0 Тогда
				ОснованиеЛьготы = СозданныеЛьготы[0].ОснованиеЛьготы;
			ИначеЕсли ПоискЛьготы.Свойство("УстановленаМестнымНормативнымАктом") И ПоискЛьготы.УстановленаМестнымНормативнымАктом Тогда
				ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.МестнаяЛьготаПоПараметрам(
					Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество,
					ПоискЛьготы);
			Иначе
				ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.ФедеральнаяЛьготаПоКоду(
					Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество,
					ПоискЛьготы.КодЛьготы);
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(ОснованиеЛьготы) Тогда
				ОснованиеЛьготыОбъект = Справочники.ОснованияЛьготПоИмущественнымНалогам.СоздатьЭлемент();
				ОснованиеЛьготыОбъект.Заполнить(ПоискЛьготы);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОснованиеЛьготыОбъект);
				ОснованиеЛьготы = ОснованиеЛьготыОбъект.Ссылка;
			КонецЕсли;
			
			МенеджерЗаписи.ОснованиеЛьготы = ОснованиеЛьготы;
			СтрокаКэша = Льготы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКэша, ПоискЛьготы);
			СтрокаКэша.ОснованиеЛьготы = ОснованиеЛьготы;
				
			МенеджерЗаписи.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ТекстСообщения = Новый Массив;
			Описание = НСтр("ru = 'Не удалось обработать запись регистра ""Налог на имущество""
				|(период: %1, организация: %2) по причине:'");
			
			Описание = СтрЗаменить(Описание, Символы.ПС, " ");
			Описание = СтрШаблон(Описание, 
				Формат(ВыборкаЗаписей.Период, "ДЛФ=D"),
				ВыборкаЗаписей.Организация);
			
			ТекстСообщения.Добавить(Описание);
			ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);
						
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество,
				,
				ТекстСообщения);
						
		КонецПопытки;
		
	КонецЦикла;	
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.СтавкиНалогаНаИмущество.ЗаполнитьДанныеЛьгот""
			|не удалось обработать некоторые записи со льготами. Количество ошибок: %1'"), 
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры	

// Функция проверяет, обработана ли запись (см. ЗаполнитьДанныеЛьгот()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция ЗаписьОбработана(Параметры) Экспорт

	Данные = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийМенеджерЗаписи.СтавкиНалогаНаИмущество") 
  		 Или ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Данные = Параметры.Данные;
  	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийНаборЗаписей.СтавкиНалогаНаИмущество")
  		 И Параметры.Данные.Количество() > 0 Тогда
    	Данные = Параметры.Данные[0];
    КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат ЗначениеЗаполнено(Данные.ОснованиеЛьготы) 
		 Или Не(Данные.УдалитьОсвобождениеОтНалогообложения
		 Или Данные.УдалитьСнижениеНалоговойСтавки
		 Или Данные.УдалитьУменьшениеСуммыНалогаВПроцентах);

КонецФункции

Процедура ИсправитьКодРегионаВОснованияхЛьгот(Параметры) Экспорт
	
	// Выберем те основания льгот, где код региона = 99, но при этом организация зарегистрирована в другом регионе (ошибочный код региона).
	// Также на всякий случай проверим, что такие основания льгот не используются по какой-то другой организации, зарегистрированной на Байконуре
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмущество.ОснованиеЛьготы,
	|	ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмущество.Организация.РегистрацияВНалоговомОргане.Код, """"), 1, 2) КАК КодРегиона
	|ПОМЕСТИТЬ ЛьготыКОбработке
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество КАК СтавкиНалогаНаИмущество
	|ГДЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмущество.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом, ЛОЖЬ)
	|	И СтавкиНалогаНаИмущество.ОснованиеЛьготы.КодРегиона = 99
	|	И ЕСТЬNULL(СтавкиНалогаНаИмущество.Организация.РегистрацияВНалоговомОргане.Код, """") <> """"
	|	И ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмущество.Организация.РегистрацияВНалоговомОргане.Код, """"), 1, 2) <> ""99""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОснованиеЛьготы,
	|	ВЫБОР
	|		КОГДА
	|			СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.Код, """"), 1, 2)
	|		ИНАЧЕ
	|			ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Организация.РегистрацияВНалоговомОргане.Код,
	|			""""), 1, 2)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК
	|		СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом, ЛОЖЬ)
	|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОснованиеЛьготы.КодРегиона = 99
	|	И ВЫБОР
	|		КОГДА
	|			СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.Код, """"), 1, 2)
	|		ИНАЧЕ
	|			ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Организация.РегистрацияВНалоговомОргане.Код,
	|			""""), 1, 2)
	|	КОНЕЦ НЕ В ("""", ""99"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмущество.ОснованиеЛьготы
	|ПОМЕСТИТЬ ЛьготыИсключения
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество КАК СтавкиНалогаНаИмущество
	|ГДЕ
	|	ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмущество.Организация.РегистрацияВНалоговомОргане.Код, """"), 1, 2) = ""99""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОснованиеЛьготы
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК
	|		СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	ВЫБОР
	|		КОГДА
	|			СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.Код, """"), 1, 2)
	|		ИНАЧЕ
	|			ПОДСТРОКА(ЕСТЬNULL(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Организация.РегистрацияВНалоговомОргане.Код,
	|			""""), 1, 2)
	|	КОНЕЦ = ""99""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛьготыКОбработке.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	МАКСИМУМ(ЛьготыКОбработке.КодРегиона) КАК КодРегиона
	|ИЗ
	|	ЛьготыКОбработке КАК ЛьготыКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛьготыИсключения КАК ЛьготыИсключения
	|		ПО ЛьготыКОбработке.ОснованиеЛьготы = ЛьготыИсключения.ОснованиеЛьготы
	|ГДЕ
	|	ЛьготыИсключения.ОснованиеЛьготы ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ЛьготыКОбработке.ОснованиеЛьготы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// Нет записей к обработке
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;					
	КонецЕсли; 
	
	ВыборкаЛьгот = РезультатЗапроса.Выбрать();
	
	ОписаниеТипаКодРегиона = ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);
	КоличествоОшибок = 0;	
	
	Пока ВыборкаЛьгот.Следующий() Цикл
		
		Попытка			
			
			ОснованиеЛьготыОбъект = ВыборкаЛьгот.ОснованиеЛьготы.ПолучитьОбъект();
			ОснованиеЛьготыОбъект.КодРегиона = ОписаниеТипаКодРегиона.ПривестиЗначение(ВыборкаЛьгот.КодРегиона);		
			ОснованиеЛьготыОбъект.Наименование = ЛьготыПоИмущественнымНалогамКлиентСервер.НаименованиеМестнойЛьготы(
				ОснованиеЛьготыОбъект,
				АдресныйКлассификатор.НаименованиеРегионаПоКоду(ОснованиеЛьготыОбъект.КодРегиона));
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОснованиеЛьготыОбъект);						
		
		Исключение
			
			КоличествоОшибок = КоличествоОшибок + 1;
			НаименованиеЛьготы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЛьгот.ОснованиеЛьготы, "Наименование");
			
			ТекстСообщения = Новый Массив;
			Описание = НСтр("ru = 'Не удалось обработать льготу ""%1"" по причине:'");
			
			Описание = СтрШаблон(Описание, НаименованиеЛьготы);
			
			ТекстСообщения.Добавить(Описание);
			ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);
						
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество,
				,
				ТекстСообщения);
						
		КонецПопытки;
		
	КонецЦикла;	
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.СтавкиНалогаНаИмущество.ИсправитьКодРегионаВОснованияхЛьгот""
			|не удалось обработать некоторые региональные льготы. Количество ошибок: %1'"), 
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
		
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений;
	
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов"           , КодыЛьгот);
	Параметры.Вставить("СписокПериодовДействия", СписокОбластей);
	Параметры.Вставить("ТекущийПериод"         , НазваниеОбласти);
	
	Возврат Параметры;
	
КонецФункции

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть;
	
КонецПроцедуры

Функция КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов, ОписаниеТипаКодРегиона)
	
	КодРегиона = КэшКодовРегионов[МенеджерЗаписи.Организация];
	
	Если КодРегиона = Неопределено Тогда
		КодРегиона = ОписаниеТипаКодРегиона.ПривестиЗначение(
			Лев(Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.Организация, "РегистрацияВНалоговомОргане.Код")), 2));
		КэшКодовРегионов.Вставить(МенеджерЗаписи.Организация, КодРегиона);
	КонецЕсли;
		
	Возврат КодРегиона;
	
КонецФункции

#КонецОбласти

#КонецЕсли