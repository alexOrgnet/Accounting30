
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет в очередь запрос на получение данных, запускает обработку очереди запросов.
// 
// Параметры:
//   Приложение - СправочникСсылка.ОблачныеПриложения - приложение, из которого пришел запрос
//   Пользователь - СправочникСсылка.Пользователи - пользователь приложения
//   ДанныеЗапроса - Структура - см. СообщенияОтчетностиОблачныхПриложений.НовыйПараметрыЗапросаДанных()
//
// Возвращаемое значение:
//   ИдентификаторЗапроса - Строка - идентификатор запроса в очереди
//
Функция Создать(Приложение, Пользователь, ДанныеЗапроса) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЗапросыОблачныхПриложений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЗапроса = Новый УникальныйИдентификатор();
	
	МенеджерЗаписи.Приложение = Приложение;
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Запрос = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ДанныеЗапроса);
	МенеджерЗаписи.ДатаПолучения = ТекущаяУниверсальнаяДата();
	
	МенеджерЗаписи.Записать();
	
	// Сразу запускаем фоновую обработку запроса.
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"СообщенияОблачныхПриложений.ОбработатьЗапросыОблачныхПриложений");
	
	Возврат XMLСтрока(МенеджерЗаписи.ИдентификаторЗапроса);
КонецФункции

// Читает из очереди запросов ответ на обработанный запрос
// 
// Параметры:
//   ИдентификаторЗапроса - Строка - идентификатор запроса в очереди
//   Пользователь - СправочникСсылка.Пользователи - пользователь приложения,
//                  который отправил этот запрос
//
// Возвращаемое значение:
//   Ответ - Строка - JSON строка, содержащая ответ на запрос.
//           Если запрос ещё не обработан, то возвращается пустая строка.
//           Неопределено - если такой запрос не найден
//
Функция ПрочитатьОтвет(ИдентификаторЗапроса, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыОблачныхПриложений.Обработан КАК Обработан,
	|	ЗапросыОблачныхПриложений.Ответ КАК Ответ
	|ИЗ
	|	РегистрСведений.ЗапросыОблачныхПриложений КАК ЗапросыОблачныхПриложений
	|ГДЕ
	|	ЗапросыОблачныхПриложений.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ЗапросыОблачныхПриложений.Пользователь = &Пользователь";
	
	Запрос.Параметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	// Дополнительно проверяем, что ответ предназначен именно этому пользователю.
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.Обработан, Выборка.Ответ, "");
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Подтверждает получение ответа. Удаляет ответ на запрос.
//
// Параметры:
//   ИдентификаторЗапроса - Строка - идентификатор запроса в очереди
//   Пользователь - СправочникСсылка.Пользователи - пользователь приложения,
//                  который отправил этот запрос
//
Процедура ОтметитьПрочитано(ИдентификаторЗапроса, Пользователь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЗапросыОблачныхПриложений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЗапроса = ИдентификаторЗапроса;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.Пользователь = Пользователь Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Запускает обработку очереди запросов от облачных приложений.
//
Процедура ОбработатьЗапросы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыОблачныхПриложений.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	ЗапросыОблачныхПриложений.Приложение КАК Приложение,
	|	ЗапросыОблачныхПриложений.Пользователь КАК Пользователь,
	|	ЗапросыОблачныхПриложений.Запрос КАК Запрос,
	|	ЗапросыОблачныхПриложений.Ответ КАК Ответ,
	|	ЗапросыОблачныхПриложений.ДатаПолучения КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.ЗапросыОблачныхПриложений КАК ЗапросыОблачныхПриложений
	|ГДЕ
	|	НЕ ЗапросыОблачныхПриложений.Обработан
	|	И ЗапросыОблачныхПриложений.ДатаПолучения МЕЖДУ &ДатаНачало И &ДатаКонец";
	
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	// Ограничим временной порог выборки запросов, чтобы не обрабатывать запросы,
	// которые заведомо уже устарели.
	Запрос.Параметры.Вставить("ДатаНачало", ТекущаяДата - 3600);
	Запрос.Параметры.Вставить("ДатаКонец", ТекущаяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЗапросыОблачныхПриложений");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗапроса", Выборка.ИдентификаторЗапроса);
		
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Ответ = СообщенияОтчетностиОблачныхПриложений.ОтветНаЗапросОблачногоПриложения(
				Выборка.Пользователь,
				Выборка.Запрос);
			
			МенеджерЗаписи = РегистрыСведений.ЗапросыОблачныхПриложений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Обработан = Истина;
			МенеджерЗаписи.Ответ = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Ответ);
			МенеджерЗаписи.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// Запрос может обрабатываться в другом потоке.
			ОтменитьТранзакцию();
			ШаблонТекста = "ru = 'Не удалось заблокировать для обработки запрос %1'";
			ТекстОшибки = СтрШаблон(ШаблонТекста, XMLСтрока(Выборка.ИдентификаторЗапроса));
			ЗаписатьОшибкуОбработкиЗапроса(НСтр(ТекстОшибки, ОбщегоНазначения.КодОсновногоЯзыка()));
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОшибкуОбработкиЗапроса(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		"ЗапросыОблачныхПриложений",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений.ЗапросыОблачныхПриложений
		,,
		ТекстОшибки);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
