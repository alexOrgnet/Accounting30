
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные о предмете аренды.
//
// Параметры:
//  ПараметрыПредмета - Структура:
//     * ДатаСведений - Дата - дата, на которую нужно получить данные
//     * Организация - СправочникСсылка.Организации - организация документа поступления
//     * Контрагент - СправочникСсылка.Контрагенты - контрагент документа поступления
//     * ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор поступления
//     * ПредметАренды - СправочникСсылка.ОсновныеСредства - предмет аренды, по которому нужны данные
// 
// Возвращаемое значение:
//   - Структура - см. НовыйДанныеОПредметеАренды
//
Функция ДанныеПредмета(ПараметрыПредмета) Экспорт
	
	Данные = НовыйДанныеПредмета();
	
	Если Не (ЗначениеЗаполнено(ПараметрыПредмета.ДатаСведений)
		И ЗначениеЗаполнено(ПараметрыПредмета.Организация)
		И ЗначениеЗаполнено(ПараметрыПредмета.Контрагент)
		И ЗначениеЗаполнено(ПараметрыПредмета.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ПараметрыПредмета.ПредметАренды)) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПредметовАренды.Регистратор КАК ДокументПоступления,
		|	ВЫБОР
		|		КОГДА ДанныеПредметовАренды.Лизинг
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоДоговоруАренды)
		|	КОНЕЦ КАК СпособПоступления,
		|	ДанныеПредметовАренды.НалоговыйУчетИмуществаВедетЛизингополучатель КАК НалоговыйУчетИмуществаВедетЛизингополучатель,
		|	ДанныеПредметовАренды.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ДанныеПредметовАренды.СуммаРуб КАК СуммаРуб,
		|	ДанныеПредметовАренды.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ДанныеПредметовАренды.РасходыЛизингодателя КАК РасходыЛизингодателя,
		|	ИСТИНА КАК ЕстьДанныеОПоступлении
		|ИЗ
		|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И ПредметАренды = &ПредметАренды) КАК ДанныеПредметовАренды");
	Запрос.УстановитьПараметр("ДатаСведений", Новый Граница(ПараметрыПредмета.ДатаСведений, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", ПараметрыПредмета.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыПредмета.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыПредмета.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПредметАренды", ПараметрыПредмета.ПредметАренды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Возвращает факт поступления предметов аренды по договору на нужную дату.
//
// Параметры:
//  ПараметрыПоступления - Структура:
//     * ДатаСведений - Дата - дата, на которую нужно получить данные
//     * Организация - СправочникСсылка.Организации - организация документа поступления
//     * Контрагент - СправочникСсылка.Контрагенты - контрагент документа поступления
//     * ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор поступления
// 
// Возвращаемое значение:
//   - Булево - было ли поступление предметов аренды по договору на дату сведений
//
Функция БылоПоступление(ПараметрыПоступления) Экспорт
	
	Если Не (ЗначениеЗаполнено(ПараметрыПоступления.ДатаСведений)
		И ЗначениеЗаполнено(ПараметрыПоступления.Организация)
		И ЗначениеЗаполнено(ПараметрыПоступления.Контрагент)
		И ЗначениеЗаполнено(ПараметрыПоступления.ДоговорКонтрагента)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДанныеПредметовАренды.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ДанныеПредметовАренды КАК ДанныеПредметовАренды
		|ГДЕ
		|	ДанныеПредметовАренды.Период < &ДатаСведений
		|	И ДанныеПредметовАренды.Организация = &Организация
		|	И ДанныеПредметовАренды.Контрагент = &Контрагент
		|	И ДанныеПредметовАренды.ДоговорКонтрагента = &ДоговорКонтрагента");
	Запрос.УстановитьПараметр("ДатаСведений", ПараметрыПоступления.ДатаСведений);
	Запрос.УстановитьПараметр("Организация", ПараметрыПоступления.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыПоступления.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыПоступления.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеПредмета()
	
	Данные = Новый Структура;
	Данные.Вставить("ДокументПоступления", Неопределено);
	Данные.Вставить("СпособПоступления", Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды);
	Данные.Вставить("НалоговыйУчетИмуществаВедетЛизингополучатель", Ложь);
	Данные.Вставить("СуммаВзаиморасчетов", 0);
	Данные.Вставить("СуммаРуб", 0);
	Данные.Вставить("СуммаНДСВзаиморасчетов", 0);
	Данные.Вставить("РасходыЛизингодателя", 0);
	Данные.Вставить("ЕстьДанныеОПоступлении", Ложь);
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецЕсли
