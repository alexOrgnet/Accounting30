#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ИнтеграцияИСМП.ЗаполнитьСписокВыбораДальнейшееДействие(
		Элементы.СтраницаОформленоОтборДальнейшееДействие.СписокВыбора, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
	
	НастроитьЭлементыФормыПриСоздании();
	УстановитьБыстрыйОтборСервер();
	
	ЕстьСертификатыДляПодписанияНаСервере = ЕстьСертификатыДляПодписанияНаСервере(ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
	ИнтеграцияИС.УстановитьПризнакПравоИзмененияФормыСписка(ЭтотОбъект);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеСпискаДокументовИС(
		ЭтотОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ИмяСобытия,
		Параметр,
		Источник);
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ПерваяВыбраннаяОрганизация(ЭтотОбъект) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Источник, Событие, Данные, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницаОформленоОтборСтатусПриИзменении(Элемент)
	
	ИспользоватьОтборПоСтатусуИСМП = (ЗначениеЗаполнено(Статус)
		И Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПодключеноКОборудованию"));
	ИспользоватьОтборПоСтатусуПодключения = (Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПодключеноКОборудованию"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "СтатусИСМП", Статус, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтборПоСтатусуИСМП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Статус",
		ПредопределенноеЗначение("Перечисление.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено"),
		ВидСравненияКомпоновкиДанных.Равно,,
		ИспользоватьОтборПоСтатусуПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборДальнейшееДействиеПриИзменении(Элемент)
	
	УстановитьОтборПоДальнейшемуДействиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборОтветственныйПриИзменении(Элемент)
	
	ОтветственныйОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("Подключаемый_ВыборОрганизацииЗавершение", ЭтотОбъект);
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("Подключаемый_ВыборОрганизацииЗавершение", ЭтотОбъект);
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииПриИзменении(Элемент)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	ЕстьСертификатыДляПодписанияНаСервере = ЕстьСертификатыДляПодписанияНаСервере(ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	ЕстьСертификатыДляПодписанияНаСервере = ЕстьСертификатыДляПодписанияНаСервере(ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	ЕстьСертификатыДляПодписанияНаСервере = ЕстьСертификатыДляПодписанияНаСервере(ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	ЕстьСертификатыДляПодписанияНаСервере = ЕстьСертификатыДляПодписанияНаСервере(ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПодключенияКОборудованию(Элементы.Список.ТекущиеДанные.КодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДействиеКомандыОтключить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиКодМаркировки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	ОткрытьФормуПодключенияКОборудованию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКодовМаркировки(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВидПродукции", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ПараметрыОткрытияФормы.Вставить("Организация",  ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Штрихкоды",    КодыМаркировкиВыделенныхСтрок());
	
	ОткрытьФорму(
		"Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	ДействиеКомандыОтключить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ИнтеграцияИСМПКлиент.ПодготовитьСообщенияКПередаче(
		Элементы.Список,
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияИСМПКлиент.ВыполнитьОбмен(
		ЭтотОбъект,
		ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокументы(Команда)
	
	ДокументыКАрхивированию = ДокументыКАрхивированию();
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, ДокументыКАрхивированию, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДокументыКАрхивированию()
	
	ДокументыКАрхивированию = Новый Массив;
	
	КодыМаркировки = Новый Массив;
	Для Каждого ЭлементСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		КодыМаркировки.Добавить(ЭлементСписка.КодМаркировки);
	КонецЦикла;
	
	Подключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПолучитьПодключениеКОборудованию(КодыМаркировки);
	
	Для Каждого КлючИЗначение Из Подключения Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.Документ) Тогда
			ДокументыКАрхивированию.Добавить(КлючИЗначение.Значение.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыКАрхивированию;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Не ИнтеграцияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс() Тогда
		Элементы.Подразделение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КодМаркировкиХарактеристика.Видимость = ИнтеграцияИС.ХарактеристикиИспользуются();
	Элементы.КодМаркировкиСерия.Видимость          = ИнтеграцияИС.СерииИспользуются();
	
	Элементы.НастройкиНеВыполнены.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.НастройкиНеВыполнены.ОтображениеСостояния.Текст = НСтр("ru = 'Организация не выбрана'");
	Элементы.НастройкиНеВыполнены.ОтображениеСостояния.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Ошибки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусИСМП");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.ЗагрузитьЗначения(Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СтатусыОшибок());
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиОшибкаПередачиГосИС);
	
	// Требуется ожидание
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.ЗагрузитьЗначения(Документы.ПодключениеКегаКОборудованиюРозливаИСМП.ВсеТребующиеОжидания()); 
	ОтборЭлемента.ПравоеЗначение = СписокДействий;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиПередаетсяГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Статус.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПодключенияКОборудованиюРозливаИСМП.Отключено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передайте отчет о подключении'"));
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияШтрихкода()
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект,, ВидМаркируемойПродукции);
	КонецЕсли;
	
	ПараметрыСканирования.Организация = ПерваяВыбраннаяОрганизация(ЭтотОбъект);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПодключитьКегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВопросОтключитьКегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> "Отключить" Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьКегНаСервере();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтключитьКегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "Оформлено");
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция КодыМаркировкиВыделенныхСтрок()
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВозвращаемоеЗначение.Добавить(СтрокаСписка.КодМаркировки);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПерваяВыбраннаяОрганизация(Форма)
	Если Форма.Организации.Количество() Тогда
		Возврат Форма.Организации[0].Значение;
	ИначеЕсли ЗначениеЗаполнено(Форма.Организации) Тогда
		Возврат Форма.Организации;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДействиеКомандыОтключить()
	
	ОчиститьСообщения();
	
	КоличествоВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВопросОтключениеКегЗавершение = Новый ОписаниеОповещения("Подключаемый_ВопросОтключитьКегЗавершение", ЭтотОбъект);
	
	КнопкиДиалога = Новый СписокЗначений();
	КнопкиДиалога.Добавить("Отключить", НСтр("ru = 'Отключить'"));
	КнопкиДиалога.Добавить("Отмена",    НСтр("ru = 'Отмена'"));
	ПоказатьВопрос(
		ВопросОтключениеКегЗавершение,
		СтрШаблон(НСтр("ru = 'Отключить кеги по выделенными строкам (%1)?'"), КоличествоВыделенныхСтрок),
		КнопкиДиалога,,
		"Отключить");
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьКегНаСервере()
	
	ТаблицаКодовМаркировки = РегистрыСведений.КегиНаОборудованииРозливаИСМП.НоваяТаблицаОтключенияКегОтОборудованияРозлива();
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
		НоваяСтрока.КодМаркировки = ВыделеннаяСтрока.КодМаркировки;
	КонецЦикла;
	
	Результат = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ОтключитьКегиОтОборудованияРозлива(ТаблицаКодовМаркировки);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСертификатыДляПодписанияНаСервере(Организация)
	СертификатыДляПодписанияНаСервере = ИнтеграцияИС.СертификатыДляПодписанияНаСервере();
	СтруктураПоиска = Новый Структура("Организация", Организация);
	Возврат (СертификатыДляПодписанияНаСервере <> Неопределено
		И СертификатыДляПодписанияНаСервере.Сертификаты.НайтиСтроки(СтруктураПоиска).Количество());
КонецФункции

#Область ОтборДальнейшиеДействия

&НаСервереБезКонтекста
Функция ВсеТребующиеДействия()
	
	Возврат Документы.ПодключениеКегаКОборудованиюРозливаИСМП.ВсеТребующиеДействия();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеТребующиеОжидания()
	
	Возврат Документы.ПодключениеКегаКОборудованиюРозливаИСМП.ВсеТребующиеОжидания();
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоДальнейшемуДействиюСервер()
	
	ИнтеграцияИСМП.УстановитьОтборПоДальнейшемуДействию(
		Список, ДальнейшееДействие, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБыстрыйОтборСервер()
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("Организации", Организации);
		
		Если ЗначениеЗаполнено(Организации) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организации,,, Истина);
			ОрганизацииПредставление = Строка(Организации);
		КонецЕсли;
		
		ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	
	Если ИнтеграцияИСМП.НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоДальнейшемуДействиюСервер();
	КонецЕсли;
	
	НастроитьОтоборажениеФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтоборажениеФормы(Форма)
	
	Если ПерваяВыбраннаяОрганизация(Форма) = Неопределено Тогда
		Форма.Элементы.СтраницыЭлементы.ТекущаяСтраница = Форма.Элементы.СтраницаНастройкиНеВыполены;
	Иначе
		Форма.Элементы.СтраницыЭлементы.ТекущаяСтраница = Форма.Элементы.СтраницаЭлементы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам()
	
	СобытияФормИСМП.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОтборПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкоды

//@skip-warning
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект,
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбораДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбораДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		ОбработатьШтрихкодКодаМаркировки(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Недопустимый формат штрихкода'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКодаМаркировки(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры)
	
	ОткрытьФормуПодключенияКОборудованию(
		РезультатВыбораДанныеШтрихкода.ШтрихкодУпаковки,
		РезультатВыбораДанныеШтрихкода.ОсобоеСостояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияКОборудованию(КодМаркировки = Неопределено, ОсобоеСостояние = Неопределено)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Организация", ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	Если ОсобоеСостояние <> Неопределено Тогда
		ПараметрыОткрытияФормы.Вставить("ОсобоеСостояние", ОсобоеСостояние);
	КонецЕсли;
	Если КодМаркировки <> Неопределено Тогда
		ПараметрыОткрытияФормы.Вставить("КодМаркировки", КодМаркировки);
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.КегиНаОборудованииРозливаИСМП.Форма.ФормаПодключенияКегаКОборудованию",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Подключаемый_ПодключитьКегЗавершение", ЭтотОбъект));
	
	ШтрихкодированиеИСВызовСервера.ОчиститьКэшМаркируемойПродукции(КэшМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ПараметрыСканированияЛокальные = ПараметрыСканированияШтрихкода();
	
	Штрихкод = "";
	Если РезультатВыбораДанныеШтрихкода.Свойство("ФорматBase64")
		И РезультатВыбораДанныеШтрихкода.ФорматBase64 Тогда
		Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(РезультатВыбораДанныеШтрихкода.Штрихкод);
	Иначе
		Штрихкод = РезультатВыбораДанныеШтрихкода.Штрихкод;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(Штрихкод, ВидМаркируемойПродукции);
	
	Если ДанныеРазбора <> Неопределено
		И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидМаркируемойПродукции].Найти(
			ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Штрихкод не является штрихкодом потребительской упаковки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, РезультатВыбораДанныеШтрихкода, ПараметрыСканированияЛокальные);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#КонецОбласти
