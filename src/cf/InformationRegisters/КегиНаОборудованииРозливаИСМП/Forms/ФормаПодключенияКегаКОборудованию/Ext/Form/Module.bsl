#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьНачальныеПараметрыПриСоздании();
	
	НастроитьЭлементыФормы();
	
	СброситьРазмерыИПоложениеОкна();
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.
			                      |Открытие формы производится из документа Подключение к оборудованию розлива ИС МП.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЭтоИндивидуальныйПредприниматель Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АдресПодключенияСтрокой");
		МассивНепроверяемыхРеквизитов.Добавить("КодФИАС");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокРеализации) И ЗначениеЗаполнено(ДатаПодключения)
		И СрокРеализации < ДатаПодключения Тогда
		ТекстСообщения = Нстр("ru = 'Дата истечения срока годности не может быть ранее даты подключения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "СрокРеализации", Отказ);
	КонецЕсли;
	
	Если ТипЗнч(ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад")) = Тип("Строка") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ИнтеграцияИСМППереопределяемый.ПриОпределенииОбработкиПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Источник, Событие, Данные, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Документ Тогда
		
		ОбновитьСтатусИСМП();
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьСтатусИСМП();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОстаток" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ВидПродукции", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
		ПараметрыОткрытияФормы.Вставить("Организация",  Организация);
		ПараметрыОткрытияФормы.Вставить("Штрихкоды",    КодМаркировкиОтключить);
		
		ОткрытьФорму(
			"Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор());
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Документ);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьКодМаркировкиОтключитьВБуферОбмена" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, Строка(КодМаркировкиОтключить));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресПодключенияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	АдресПодключенияСтрокой = ВыбранноеЗначение.Представление;
	АдресПодключения        = ВыбранноеЗначение.КонтактнаяИнформация;
	КомментарийАдресаПодключения = ВыбранноеЗначение.Комментарий;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		КодФИАС = ИдентификаторФИАСПоДаннымАдреса(АдресПодключения);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	АдресПодключенияСтрокой = "";
	АдресПодключения        = "";
	КомментарийАдресаПодключения   = "";
КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		АдресПодключения        = "";
		АдресПодключенияСтрокой = "";
		КомментарийАдресаПодключения   = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	АдресПодключенияСтрокой = Текст;
	АдресПодключения = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдресаПодключения, КомментарийАдресаПодключения);

КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> АдресПодключенияСтрокой Тогда
		АдресПодключенияСтрокой = Элемент.ТекстРедактирования;
		АдресПодключения        = "";
	КонецЕсли;
	
	ВидКонтактнойИнформацииАдресаПодключения.НастройкиПроверки.ПроверятьКорректность   = Истина;
	ВидКонтактнойИнформацииАдресаПодключения.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииАдресаПодключения,
		АдресПодключения,
		АдресПодключенияСтрокой,
		КомментарийАдресаПодключения);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	КомментарийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодМаркировкиПриИзменении(Элемент)
	
	КодМаркировкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКОборудованию(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоздания = СоздатьПодключениеКегаКОборудованиюНаСервере();
	
	Если ЗначениеЗаполнено(ДанныеСоздания.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеСоздания.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Статус   = ПредопределенноеЗначение("Перечисление.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено");
	Документ = ДанныеСоздания.Документ;
	
	ОтключитьОтОборудования                    = Ложь;
	Элементы.ОтключитьОтОборудования.Видимость = Ложь;
	
	Если ЕстьДоступныеСертификаты Тогда
		ПередатьДанныеВСервис();
	Иначе
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзменения = ИзменитьПодключениеКегиКОборудованиюНаСервере();
	
	Если ЗначениеЗаполнено(ДанныеИзменения.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеИзменения.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПередатьДанныеВСервис();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзменения = ИзменитьПодключениеКегиКОборудованиюНаСервере(Истина);
	
	Если ЗначениеЗаполнено(ДанныеИзменения.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеИзменения.ТекстОшибки);
	Иначе
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодФИАС(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьМестаОсуществленияДеятельностиЗавершение = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнитьМестаОсуществленияДеятельностиЗавершение",
		ЭтотОбъект);
		
	ПараметрыЗапросаДанных = ИнтерфейсИСМПКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапросаДанных.Организация           = Организация;
	ПараметрыЗапросаДанных.ОповещениеОЗавершении = ЗаполнитьМестаОсуществленияДеятельностиЗавершение;
	ПараметрыЗапросаДанных.Параметры             = Новый Структура();
	ПараметрыЗапросаДанных.Параметры.Вставить("ВидПродукции", ВидПродукции);
	
	ИнтерфейсИСМПКлиент.МестаОсуществленияДеятельности(ПараметрыЗапросаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Архивировать(Команда)
	
	АрхивитроватьДокументЗавершение = Новый ОписаниеОповещения("АрхивитроватьДокументЗавершение", ЭтотОбъект);
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Документ, ИнтеграцияИСМПКлиент, АрхивитроватьДокументЗавершение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередатьДанныеВСервис()
	
	ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Ссылка             = Документ;
	ПараметрыОбработкиДокументов.Организация        = Организация;
	ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперацииПодключенияКеги", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
	ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
		ЭтотОбъект,
		ПараметрыОбработкиДокументов,
		ОписаниеПриЗавершении);
	
	ОбновитьСтатусИСМП();
	НастроитьЭлементыФормы();
	
	Оповестить(
		ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(), ВладелецФормы),,
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОбновитьПредставлениеСтатуса();
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Документ);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Документ);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
		
		КонецЕсли;
		
	КонецЕсли;

	ОбновитьПредставлениеСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатуса()

	ЗначениеСтатуса = Статус;
	Если СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПустаяСсылка() Тогда
		ЗначениеСтатуса = НСтр("ru = 'К подключению'");
	КонецЕсли;
	
	ДанныеСтатуса = Новый Массив();
	ДанныеСтатуса.Добавить(НСтр("ru = 'Статус:'"));
	ДанныеСтатуса.Добавить(" ");
	ДанныеСтатуса.Добавить(Строка(ЗначениеСтатуса));
	
	Если Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СтатусыОшибок().Найти(СтатусИСМП) <> Неопределено Тогда
		ДанныеСтатуса.Добавить(
			Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					НСтр("ru = ', ошибка передачи'"),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")"));
	КонецЕсли;
	
	Элементы.СтатусПредставление.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивитроватьДокументЗавершение(Изменения, ДополнительныеПараметры) Экспорт
	
	Если Изменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изменение Из Изменения Цикл
		Если Изменение.Объект = Документ Тогда
			Закрыть(Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперацииПодключенияКеги(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЕстьОшибка = Ложь;
		Для Каждого СтрокаДанных Из Результат Цикл
			Если СтрокаДанных.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи") Тогда
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОшибка Тогда
			Закрыть(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПодключениеКегаКОборудованиюНаСервере()
	
	ДанныеПодключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ИнициализироватьДанныеПодключенияКОборудованию();
	ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект);
	ДанныеПодключения.Статус        = Перечисления.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено;
	ДанныеПодключения.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ОтключитьОтОборудования И ЗначениеЗаполнено(КодМаркировкиОтключить) Тогда
		
		ДанныеОтключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ИнициализироватьДанныеПодключенияКОборудованию();
		ДанныеОтключения.КодМаркировки = КодМаркировкиОтключить;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПодключитьКегКОборудованиюРозлива(
		ДанныеПодключения,
		ДанныеОтключения);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ИзменитьПодключениеКегиКОборудованиюНаСервере(ТолькоРегистрСведений = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	СохраненныеДанные = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПолучитьПодключениеКОборудованию(КодМаркировки)[КодМаркировки];
	ДанныеПодключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ИнициализироватьДанныеПодключенияКОборудованию();
	
	Если ТолькоРегистрСведений Тогда
		
		МожноРедактироватьПоля        = МожноРедактироватьПоля();
		ДанныеПодключения.Комментарий = Комментарий;
		ДанныеПодключения.Склад       = Склад;
		ДанныеПодключения.ОбъемСлива  = ОбъемСлива;
		
		Если МожноРедактироватьПоля Тогда
			ДанныеПодключения.Подразделение = Подразделение;
		КонецЕсли;
		Если Не ЭтоИндивидуальныйПредприниматель Или МожноРедактироватьПоля Тогда
			ДанныеПодключения.АдресПодключения        = АдресПодключения;
			ДанныеПодключения.АдресПодключенияСтрокой = АдресПодключенияСтрокой;
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект);
		ДанныеПодключения.Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("КодМаркировки", КодМаркировки);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Если Не ТолькоРегистрСведений Тогда
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеПодключения);
			ДокументОбъект.КодМаркировки = КодМаркировки;
			ДокументОбъект.Дата          = ТекущаяДатаСеанса();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		РегистрыСведений.КегиНаОборудованииРозливаИСМП.УстановитьПодключениеКОборудованию(ДанныеПодключения, СохраненныеДанные);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
				
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка записи данных подключения к оборудованию розлива %1:
				       |%2'"),
			КодМаркировки,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Ошибка записи данных подключения к оборудованию розлива %1:
				       |%2'"),
			КодМаркировки,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиПодробно);
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
&НаСервере
Процедура НастроитьЭлементыФормы()
	
	МожноРедактироватьПоля    = МожноРедактироватьПоля();
	ТребуетсяПередачаДанных   = ТребуетсяПередачаДанных(ЭтотОбъект);
	ПодключенВоВнешнейСистеме = (Статус = Перечисления.СтатусыПодключенияКОборудованиюРозливаИСМП.ПодключеноВоВнешнейСистеме);
	
	Элементы.АдресПодключенияСтрокой.ТолькоПросмотр = ЭтоРедактированиеЗаписи И ЭтоИндивидуальныйПредприниматель;
	Элементы.Подразделение.ТолькоПросмотр           = Не МожноРедактироватьПоля;
	Элементы.ДатаПодключения.ТолькоПросмотр         = Не МожноРедактироватьПоля;
	Элементы.СрокРеализации.ТолькоПросмотр          = Не МожноРедактироватьПоля;
	Элементы.КодФИАС.ТолькоПросмотр                 = Не МожноРедактироватьПоля;
	Элементы.ПолучитьКодФИАС.Доступность            = МожноРедактироватьПоля;
	Элементы.ПоискПоШтрихкоду.Видимость             = Не ЭтоРедактированиеЗаписи;
	Элементы.ОтключитьОтОборудования.Видимость      = ЗначениеЗаполнено(КодМаркировкиОтключить);
	Элементы.КодМаркировки.ТолькоПросмотр           = ЭтоРедактированиеЗаписи;
	Элементы.АдресПодключенияСтрокой.РедактированиеТекста = Не ЭтоИндивидуальныйПредприниматель;
	Элементы.КодФИАС.Видимость                      = ЭтоИндивидуальныйПредприниматель;
	Элементы.ПолучитьКодФИАС.Видимость              = ЭтоИндивидуальныйПредприниматель;
	Элементы.Архивировать.Видимость                 = ЗначениеЗаполнено(Документ);
	Элементы.Комментарий.Видимость                  = Не ПодключенВоВнешнейСистеме;
	Элементы.ОбъемСлива.Видимость                   = Не ПодключенВоВнешнейСистеме;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Элементы.ОбщаяКомандаПротоколОбменаИСМП.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ПодключитьКОборудованию.Видимость = Ложь;
	Элементы.ПередатьДанные.Видимость          = Ложь;
	Элементы.Записать.Видимость                = Ложь;
	
	Если Не ЗначениеЗаполнено(Документ)
		И Не ЗначениеЗаполнено(Статус) Тогда
		Элементы.ПодключитьКОборудованию.Видимость = Истина;
	ИначеЕсли ТребуетсяПередачаДанных И ЕстьДоступныеСертификаты Тогда
		Элементы.ПередатьДанные.Видимость         = Истина;
		Элементы.ПередатьДанные.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Записать.Видимость         = Истина;
		Элементы.Записать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если Не ЕстьДоступныеСертификаты Тогда
		Элементы.ПодключитьКОборудованию.Заголовок = НСтр( "ru = 'Готово'");
	КонецЕсли;
	
	ДанныеЗаголовка = Новый Массив();
	ДанныеЗаголовка.Добавить(НСтр( "ru = 'Отключить код маркировки'"));
	ДанныеЗаголовка.Добавить(" ");
	ДанныеЗаголовка.Добавить(
		Новый ФорматированнаяСтрока(
			Строка(КодМаркировкиОтключить),
			Новый Шрифт(,,,, Истина),
			ЦветаСтиля.ЦветГиперссылкиГосИС,,
			"СкопироватьКодМаркировкиОтключитьВБуферОбмена"));
	ДанныеЗаголовка.Добавить(" ");
	ДанныеЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр( "ru = 'Показать остаток'"),,,, "ПоказатьОстаток"));
 
	Элементы.ОтключитьОтОборудования.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеЗаголовка);
	
	ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПараметрыПриСоздании()
	
	Организация      = Параметры.Организация;
	ВидПродукции     = Перечисления.ВидыПродукцииИС.Пиво;
	КодМаркировки    = Параметры.КодМаркировки;
	Номенклатура     = Параметры.Номенклатура;
	Характеристика   = Параметры.Характеристика;
	Серия            = Параметры.Серия;
	
	ИспользоватьОбособленныеПодразделения = ИнтеграцияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	РеквизитыОрганизации = ИнтеграцияИС.ИННКППGLNОрганизации(Организация, Подразделение);
	ЭтоИндивидуальныйПредприниматель = (СтрДлина(РеквизитыОрганизации.ИНН) > 10);
	Элементы.АдресПодключенияСтрокой.ОтметкаНезаполненного = ЭтоИндивидуальныйПредприниматель;
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Элементы.АдресПодключенияСтрокой.АвтоОтметкаНезаполненного = Неопределено;
	Иначе
		Элементы.АдресПодключенияСтрокой.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Элементы.Подразделение.Видимость = Ложь;
	Иначе
		Элементы.Подразделение.Видимость = ИспользоватьОбособленныеПодразделения;
	КонецЕсли;
	
	СертификатыПользователя = ИнтеграцияИС.СертификатыПользователяДляПодписиПоОрганизации(Организация, Истина);
	Если СертификатыПользователя.Количество() Тогда
		ЕстьДоступныеСертификаты = Истина;
	Иначе
		СертификатыДляПодписанияНаСервере = ИнтеграцияИС.СертификатыДляПодписанияНаСервере();
		СтруктураПоиска = Новый Структура("Организация", Организация);
		Если СертификатыДляПодписанияНаСервере <> Неопределено
			И СертификатыДляПодписанияНаСервере.Сертификаты.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			ЕстьДоступныеСертификаты = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад")) = Тип("Строка") Тогда
		Элементы.Склад.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодуУпаковки();
	ОбновитьСтатусИСМП();
	
	Если Не ЭтоРедактированиеЗаписи Тогда
		ДатаПодключения = ТекущаяДатаСеанса();
		ДанныеЗаполнения = ЗаполнениеОбъектовПоСтатистикеИСМП.ДанныеЗаполненияПодключениеКегаКОборудованиюРозливаИСМП(
			Организация);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоШтрихкодуУпаковки()

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ВидПродукции", ВидПродукции);
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		
		ДанныеПодключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПолучитьПодключениеКОборудованию(КодМаркировки)[КодМаркировки];
		
		Если ДанныеПодключения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПодключения);
			ЭтоРедактированиеЗаписи = Истина;
		КонецЕсли;
		
		ЗначенияРеквизитов = ЗначенияРеквизитовШтрихкодаУпаковки(КодМаркировки);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов,, "ВидПродукции");
		ВозвращаемоеЗначение.ВидПродукции = ЗначенияРеквизитов.ВидПродукции;
		
	Иначе
		
		КодМаркировки    = Неопределено;
		Номенклатура     = Неопределено;
		Характеристика   = Неопределено;
		Серия            = Неопределено;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПередачаДанных(Форма)
	
	Возврат (ЗначениеЗаполнено(Форма.Документ)
		И (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.Черновик")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи")));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеКомментарии()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 30
		|	КегиНаОборудованииРозливаИСМП.Комментарий КАК Комментарий,
		|	МАКСИМУМ(КегиНаОборудованииРозливаИСМП.ДатаПодключения) КАК ДатаПодключения
		|ИЗ
		|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК КегиНаОборудованииРозливаИСМП
		|ГДЕ
		|	КегиНаОборудованииРозливаИСМП.Комментарий <> """"
		|	И КегиНаОборудованииРозливаИСМП.Склад = &Склад
		|	И КегиНаОборудованииРозливаИСМП.Организация = &Организация
		|СГРУППИРОВАТЬ ПО
		|	КегиНаОборудованииРозливаИСМП.Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПодключения УБЫВ";
	
	Запрос.УстановитьПараметр("Склад",       Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Элементы.Комментарий.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комментарий"));
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("РегистрСведений.КегиНаОборудованииРозливаИСМП.Форма.ФормаПодключенияКегаКОборудованию", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКегОтключенияОтОборудования()
	
	ОтключитьОтОборудования = Ложь;
	КодМаркировкиОтключить   = Неопределено;
	
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Возврат;
	ИначеЕсли ЭтоРедактированиеЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Запрос         = Новый Запрос;
	ТекстыЗапросов = Новый СписокЗначений();
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КегиНаОборудованииРозливаИСМП.КодМаркировки
		|ИЗ
		|	РегистрСведений.КегиНаОборудованииРозливаИСМП КАК КегиНаОборудованииРозливаИСМП
		|ГДЕ
		|	КегиНаОборудованииРозливаИСМП.КодМаркировки <> &КодМаркировки
		|	И КегиНаОборудованииРозливаИСМП.Комментарий = &Комментарий
		|	И КегиНаОборудованииРозливаИСМП.Склад       = &Склад
		|	И КегиНаОборудованииРозливаИСМП.Организация = &Организация
		|	И КегиНаОборудованииРозливаИСМП.Статус      = ЗНАЧЕНИЕ(Перечисление.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено)",
		"КодМаркировкиОтключить");
	
	Запрос.УстановитьПараметр("Комментарий",            Комментарий);
	Запрос.УстановитьПараметр("КодМаркировки",          КодМаркировки);
	Запрос.УстановитьПараметр("Склад",                  Склад);
	Запрос.УстановитьПараметр("Документ",               Документ);
	Запрос.УстановитьПараметр("Организация",            Организация);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапросов);
	
	//@skip-warning
	ВыборкаКодМаркировкиОтключить = РезультатЗапроса["КодМаркировкиОтключить"].Выбрать();
	
	Пока ВыборкаКодМаркировкиОтключить.Следующий() Цикл
		КодМаркировкиОтключить  = ВыборкаКодМаркировкиОтключить.КодМаркировки;
		ОтключитьОтОборудования = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъемСливаПоСтатистике()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодключениеКегаКОборудованиюРозливаИСМП.ОбъемСлива,
		|	ПодключениеКегаКОборудованиюРозливаИСМП.Дата КАК Дата
		|ИЗ
		|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК ПодключениеКегаКОборудованиюРозливаИСМП
		|ГДЕ
		|	ПодключениеКегаКОборудованиюРозливаИСМП.Проведен
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Организация = &Организация
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Склад = &Склад
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Комментарий = &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Комментарий", Комментарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъемСлива = ВыборкаДетальныеЗаписи.ОбъемСлива;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КодМаркировкиПриИзмененииНаСервере()
	
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	ЗначенияРеквизитов = ЗаполнитьДанныеПоШтрихкодуУпаковки();
	
	ТекстОшибки = Неопределено;
	
	Если ЗначенияРеквизитов.ВидПродукции <> ВидПродукции Тогда
		
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Вид продукции ""%1"" выбранного кода маркировки не соответствует виду продукции ""%2""'"),
			ЗначенияРеквизитов.ВидПродукции,
			ВидПродукции);
			
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		
		ОписаниеНоменклаутры = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(Номенклатура)[Номенклатура];
		
		Если Не ЗначениеЗаполнено(ОписаниеНоменклаутры.ВариантЧастичногоВыбытия) Тогда
			ТекстОшибки = СтрШаблон(НСтр(
				"ru = 'Для номенклатуры ""%1"" не настроена продажа на разлив'"),
				ИнтеграцияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстОшибки <> Неопределено Тогда
		
		КодМаркировки = Неопределено;
		ЗаполнитьДанныеПоШтрихкодуУпаковки();
		ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСтатусИСМП();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	НастроитьЭлементыФормы();
	
	СобытияФормИСМП.ПриИзмененииЭлемента(ЭтотОбъект, Элементы.Склад, Новый Структура);
	
КонецПроцедуры

&НаСервере
Процедура КомментарийПриИзмененииНаСервере()
	
	ЗаполнитьКегОтключенияОтОборудования();
	ЗаполнитьОбъемСливаПоСтатистике();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовШтрихкодаУпаковки(КодМаркировки, ЗаполнятьВидПродукции = Ложь)
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодМаркировки, "Номенклатура, Характеристика, Серия");
	Результат.Вставить("ВидПродукции", ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Результат.Номенклатура));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МожноРедактироватьПоля()
	Возврат (Не ЗначениеЗаполнено(Документ)
		Или СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи)
КонецФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкоды

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, ВидПродукции);
	
	Если ДанныеРазбора <> Неопределено
		И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(
			ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) = Неопределено Тогда
		ДанныеШтрихкода.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр(
			"ru = 'Штрихкод не является штрихкодом потребительской упаковки'"));
		ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	
	ШтрихкодированиеИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияШтрихкода()

	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ВладелецФормы);
	ПараметрыСканирования.Организация = Организация;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
КонецФункции

//@skip-warning
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект,
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ЗаполнитьМестаОсуществленияДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СписокВыбора            = Новый СписокЗначений;
	ДанныеАдресовПоКодуФИАС = Новый Соответствие();
	КоличествоЭлементов     = Результат.Результат.Количество();
	
	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из Результат.Результат Цикл
			
		ПредставлениеАдреса = СтрокаДанных.КодФИАС;
		Если ЗначениеЗаполнено(СтрокаДанных.ПредставлениеАдреса) Тогда
			ПредставлениеАдреса = СтрокаДанных.ПредставлениеАдреса;
		КонецЕсли;
		
		ДанныеАдресаПоКодуФИАС = Новый Структура("ПредставлениеАдреса, ДанныеАдреса");
		ЗаполнитьЗначенияСвойств(ДанныеАдресаПоКодуФИАС, СтрокаДанных);
		ДанныеАдресовПоКодуФИАС.Вставить(СтрокаДанных.КодФИАС, ДанныеАдресаПоКодуФИАС);
		
		СписокВыбора.Добавить(СтрокаДанных.КодФИАС, ПредставлениеАдреса);
			
	КонецЦикла;
	
	Если КоличествоЭлементов = 1 Тогда
		
		КодФИАС                 = Результат.Результат[0].КодФИАС;
		АдресПодключения        = ДанныеАдресовПоКодуФИАС[КодФИАС].ДанныеАдреса;
		АдресПодключенияСтрокой = ДанныеАдресовПоКодуФИАС[КодФИАС].ПредставлениеАдреса;
		
	Иначе
		
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения(
				"Подключаемый_ВыборКодаФИАСЗавершение", ЭтотОбъект, ДанныеАдресовПоКодуФИАС),
			СписокВыбора,
			Элементы.КодФИАС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Отказ = Не ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода);
	
	Иначе
		ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		Отказ = Истина;
		ДанныеШтрихкода.ОбработанСОшибками = Истина;
		ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
		ВывестиСообщениеОбОшибке(ЭтотОбъект,
			ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	Иначе
		ВывестиСообщениеОбОшибке(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода)
	
	Если ЭтоРедактированиеЗаписи Тогда
		Если ДанныеШтрихкода.ШтрихкодУпаковки <> КодМаркировки Тогда
			ВывестиСообщениеОбОшибке(
				ЭтотОбъект,
				СтрШаблон(
					НСтр("ru = 'Отсканированный код маркировки %1 отличается от редактируемого %2'"),
					ДанныеШтрихкода.Штрихкод,
					КодМаркировки));
		КонецЕсли;
		Возврат Ложь;
	Иначе
		КодМаркировки = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	ОбработатьШтрихкодКодаМаркировкиНаСервере();
	
	ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкодКодаМаркировкиНаСервере()
	
	ЗаполнитьДанныеПоШтрихкодуУпаковки();
	ОбновитьСтатусИСМП();
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	НастроитьЭлементыФормы();
	
	ШтрихкодированиеИСВызовСервера.ОчиститьКэшМаркируемойПродукции(КэшМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода)
	
	ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеШтрихкода);
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОбОшибке(Форма, Знач ТекстСообщения = "")
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Заголовок = ТекстСообщения;
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Видимость = ЗначениеЗаполнено(ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияНоменклатуры(Форма)
	
	ПараметрыПредставленияНоменклатуры = ИнтеграцияИСКлиентСервер.ПараметрыПредставленияНоменклатуры();
	ПараметрыПредставленияНоменклатуры.Номенклатура   = Форма.Номенклатура;
	ПараметрыПредставленияНоменклатуры.Характеристика = Форма.Характеристика;
	ПараметрыПредставленияНоменклатуры.Серия          = Форма.Серия;
	ПараметрыПредставленияНоменклатуры.ТолькоПросмотр = Истина;
	ПараметрыПредставленияНоменклатуры.ДляОтображения = Истина;
	
	Форма.Представление = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатурыФорматированнойСтрокой(
		ПараметрыПредставленияНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыборКодаФИАСЗавершение(Результат, ДанныеАдресовПоКодуФИАС) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодФИАС = Результат.Значение;
	
	ДанныеАдресаПоКодуФИАС = ДанныеАдресовПоКодуФИАС[КодФИАС];
	Если ДанныеАдресаПоКодуФИАС <> Неопределено Тогда
		АдресПодключения        = ДанныеАдресаПоКодуФИАС.ДанныеАдреса;
		АдресПодключенияСтрокой = ДанныеАдресаПоКодуФИАС.ПредставлениеАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторФИАСПоДаннымАдреса(АдресПодключения)
	
	Возврат ИнтеграцияИСМП.ИдентификаторФИАСПоДаннымАдреса(АдресПодключения).Идентификатор;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииАдресаПодключения = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	АдресПодключенияСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		АдресПодключения);
	КомментарийАдресаПодключения = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(
		АдресПодключения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
