#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры для выбора кода льготы.
//
// Параметры:
//  НазваниеМакета - Строка - Макет из которого необходимо получить списки кодов.
//  ТекущийПериод - Дата - Период для первоначального позиционирования формы выбора.
// 
// Возвращаемое значение:
//  Параметры - Структура.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений;
	
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов"           , КодыЛьгот);
	Параметры.Вставить("СписокПериодовДействия", СписокОбластей);
	Параметры.Вставить("ТекущийПериод"         , НазваниеОбласти);
	
	Возврат Параметры;
	
КонецФункции

Процедура ПроверитьОпциюУплачиваетсяЗемельныйНалог(НаборЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УплачиваетсяЗемельныйНалог = Константы.УплачиваетсяЗемельныйНалог.Получить();
	ВНабореЕстьРегистрация = Ложь;
	
	// Если записывается первая регистрация (других нет), то включаем опцию
	Для Каждого Запись Из НаборЗаписей Цикл		
		ВНабореЕстьРегистрация = ВНабореЕстьРегистрация Или Запись.ВключатьВНалоговуюБазу;
		Если Запись.ВключатьВНалоговуюБазу И Не УплачиваетсяЗемельныйНалог Тогда		
			Константы.УплачиваетсяЗемельныйНалог.Установить(Истина);
			Возврат;			
		КонецЕсли;
	КонецЦикла;
	
	// Если в наборе нет записей регистрации (т.е. либо только записи о снятии с учета, либо удаление регистрации),
	// то, возможно, опцию нужно отключить
	Если УплачиваетсяЗемельныйНалог И Не ВНабореЕстьРегистрация И Не ЕстьЗемельныеУчастки() Тогда
		Константы.УплачиваетсяЗемельныйНалог.Установить(Ложь);
	КонецЕсли;		
	
КонецПроцедуры

Функция ЕстьЗемельныеУчастки(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияЗемельныхУчастков.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|ГДЕ
		|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";

	Иначе
	
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", Дата(Год(НачалоПериода), Месяц(НачалоПериода), 15));
		Запрос.УстановитьПараметр("КонецПериода", Дата(Год(КонецПериода), Месяц(КонецПериода), 15));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияЗемельныхУчастков.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РегистрацияЗемельныхУчастков
		|ГДЕ
		|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияЗемельныхУчастков.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|ГДЕ
		|	РегистрацияЗемельныхУчастков.Организация = &Организация
		|	И РегистрацияЗемельныхУчастков.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";
		
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьЛьготыПоЗемельномуНалогу(Организация, Период, Периодичность) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", Дата(Год(НачалоПериода), Месяц(НачалоПериода), 15));
	// Земельные участки, снятые с учета до 15.01 или поставленные на учет после 15.12 не попадут в расчет налога
	Запрос.УстановитьПараметр("КонецПериода", Дата(Год(КонецПериода), Месяц(КонецПериода), 15));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК
	|		РегистрацияЗемельныхУчастковСрезПоследних
	|ГДЕ
	|	РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу
	|	И
	|		РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыПоНалоговойБазе <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСуммыНалога <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСтавки <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастков.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.Организация = &Организация
	|	И РегистрацияЗемельныхУчастков.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьОпциюУплачиваетсяЗемельныйНалог() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЕстьЗемельныеУчастки() Тогда
		Константы.УплачиваетсяЗемельныйНалог.Установить(Истина);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЛьгот(Параметры) Экспорт

	// В прежней структуре регистра можно было указать одновременно 3 льготы: по налоговой базе (освобождение или
	// снижение на долю или указанную сумму), уменьшение суммы рассчитанного налога (на процент или указанную сумму) и
	// снижение налоговой ставки до указанной. В новой архитектуре также останется возможность указать до трех льгот.
	// Рассмотрим, как показатели каждой из трех льгот трансформируются в новую структуру регистра.
	//
	// 1. Налоговая льгота по налоговой базе определялась показателем НалоговаяЛьготаПоНалоговойБазе[До2020] (перечисление).
	//    В этом случае как дополнительные данные могли использоваться показатели:
	//    а. КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395 (если применяется федеральная льгота, указанная в
	//       ст. 395 НК)
	//    б. УменьшениеНалоговойБазыПоСтатье391 вместе с КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391 (в программе
	//       льготы по ст. 391 не применяется с 2017 года, да и фактически не применяется к организациям - там только
	//       льготы для физ лиц).
	//    в. УменьшениеНалоговойБазыНаСумму (показатель применялся до 2017 года)
	//
	//    Льготы "б" и "в" могли применяться одновременно (при этом каждая из этих льгот применялась только при значении
	//    НалоговаяЛьготаПоНалоговойБазе равным УменьшениеНалоговойБазы).
	//
	//    Теперь эта функция перешла к ОснованиеЛьготыПоНалоговойБазе (справочник) - там хранится и вид льготы, и ее код.
	//    Элементы справочника находятся/создаются на основании вида льготы в НалоговаяЛьготаПоНалоговойБазе и, при
	//    необходимости, кода льготы. Все льготы, кроме освобождения по ст. 395, будут местными.
	//    Льготы по ст. 391 (если где-то установлены в прошлых периодах) в виде снижения суммы
	//    налога (до 2017 года - на 10000) игнорируем, т.к. новый расчет применяется с 2020 года, а прежний расчет смотрит
	//    на прежние реквизиты регистра (в частности, УменьшениеНалоговойБазыПоСтатье391[До2020]).
	//    УменьшениеНалоговойБазыНаСумму, как таковой, не имеет значения: вид льготы в этом случае указан в
	//    НалоговаяЛьготаПоНалоговойБазе, а сумма уменьшения налоговой базы указана в НеОблагаемаяНалогомСумма - а этот
	//    реквизит остается.
	// 
	// 2. Налоговая льгота в виде уменьшения суммы налога определялась по значениям показателей ПроцентУменьшенияСуммыНалога[До2020]
	//    и СуммаУменьшенияСуммыНалога.
	//
	//	  Теперь эта функция перешла к ОснованиеЛьготыСнижениеСуммыНалога (справочник). Процент уменьшения суммы налога -
	//    это фиксированный атрибут конкретной льготы (в конкретном пункте местного закона указан процент уменьшения),
	//    поэтому показатель в регистре больше не требуется.
	//
	// 3. Налоговая льгота в виде снижения ставки определялась по значению показателя СниженнаяНалоговаяСтавка.
	//
	//    Теперь эта функция перешла к ОснованиеЛьготыСнижениеСтавки (справочник), но показатель СниженнаяНалоговаяСтавка
	//    остается, т.к. снижение ставки может быть относительным (например, "ставка налога снижается на 50 % в случае..."),
	//    т.е. для каждого участка будет своя.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РегистрацияЗемельныхУчастков.Период,
	|	РегистрацияЗемельныхУчастков.Организация,
	|	РегистрацияЗемельныхУчастков.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РегистрацияЗемельныхУчастков.Организация = Организации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО РегистрацияЗемельныхУчастков.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И (РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазеДо2020 НЕ В
	|	(ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеПрименяется))
	|	ИЛИ РегистрацияЗемельныхУчастков.ПроцентУменьшенияСуммыНалогаДо2020 > 0
	|	ИЛИ РегистрацияЗемельныхУчастков.СуммаУменьшенияСуммыНалога > 0
	|	ИЛИ РегистрацияЗемельныхУчастков.СниженнаяНалоговаяСтавка > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацияЗемельныхУчастков.Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		// Обработаны все записи
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;					
	КонецЕсли; 
	
	ВыборкаЗаписей = РезультатЗапроса.Выбрать();
	
	// Созданные элементы справочника льгот кэшируем в виде таблицы в параметрах
	Если Параметры.Свойство("Льготы") Тогда
		Льготы = Параметры.Льготы;
	Иначе
		Льготы = Новый ТаблицаЗначений;
		Льготы.Колонки.Добавить("ОснованиеЛьготы", Новый ОписаниеТипов("СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам"));
		Льготы.Колонки.Добавить("КодЛьготы", ОбщегоНазначения.ОписаниеТипаСтрока(7));
		Льготы.Колонки.Добавить("ВидЛьготы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЛьготПоИмущественнымНалогам"));
		Льготы.Колонки.Добавить("ПроцентУменьшения", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
		Льготы.Колонки.Добавить("КодРегиона", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
		Льготы.Колонки.Добавить("КодПоОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
		Льготы.Колонки.Добавить("УстановленаМестнымНормативнымАктом", Новый ОписаниеТипов("Булево"));
		
		Параметры.Вставить("Льготы", Льготы);
	КонецЕсли;	 
	
	// Также кэшируем в параметрах данные, полученные из регистраций в налоговых органах
	Если Параметры.Свойство("КэшКодовРегионов") Тогда
		КэшКодовРегионов = Параметры.КэшКодовРегионов;
	Иначе
		КэшКодовРегионов = Новый Соответствие;
		
		Параметры.Вставить("КэшКодовРегионов", КэшКодовРегионов);
	КонецЕсли;
	
	Если Параметры.Свойство("КэшОКТМООрганизаций") Тогда
		КэшОКТМООрганизаций = Параметры.КэшОКТМООрганизаций;
	Иначе
		// таблицу не индексируем - не ожидаем в ней очень много записей
		КэшОКТМООрганизаций = Новый ТаблицаЗначений;
		КэшОКТМООрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КэшОКТМООрганизаций.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		КэшОКТМООрганизаций.Колонки.Добавить("КодПоОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
		
		Параметры.Вставить("КэшОКТМООрганизаций", КэшОКТМООрганизаций);
	КонецЕсли;
	
	КоличествоОшибок = 0;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗаписей);
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		КодРегиона = КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов);
		КодПоОКТМО = ОКТМОМуниципальногоОбразованияПоМенеджеруЗаписи(МенеджерЗаписи, КэшОКТМООрганизаций);
				
		ЕстьЛьготаПоНалоговойБазе = Ложь;
		ЕстьЛьготаПоСуммеНалога = Ложь;
		ЕстьЛьготаПоНалоговойСтавке = Ложь;
				
		// В прежнем расчете налога льгота в виде уменьшения суммы налога была приоритетнее освобождения, если эти две
		// льготы были указаны одновременно. В новом расчете это поведение меняется: освобождение имеет высший приоритет,
		// т.к. при освобождении прочие льготы не имеют смысла.
		// Как следствие, в указанной выше ситуации при явном перезакрытии прошлых периодов сумма налога поменяется
		// (обнулится в период действия освобождения). Считаем это нормальным поведением.
		// Тем не менее, даже при наличии освобождения проверяем и заполняем другие льготы, чтобы добавить в справочник
		// все упомянутые льготы.
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготыПоНалоговойБазе) Тогда 
			
			Если МенеджерЗаписи.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
			 			
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				ПоискЛьготыПоНалоговойБазе = Новый Структура;
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", МенеджерЗаписи.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395До2020);
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
		
			ИначеЕсли МенеджерЗаписи.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ОсвобождениеОтНалогообложенияМестное Тогда
			 			
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде освобождения. Код 3022400.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022400");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
			
			ИначеЕсли МенеджерЗаписи.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеОблагаемаяНалогомПлощадь Тогда
					
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде необлагаемой доли площади. Код 3022300.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022300");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади);
			
			ИначеЕсли МенеджерЗаписи.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.УменьшениеНалоговойБазы Тогда
					
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде налогового вычета. Код 3022100.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022100");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму);
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если МенеджерЗаписи.ПроцентУменьшенияСуммыНалогаДо2020 > 0 Или МенеджерЗаписи.СуммаУменьшенияСуммыНалога > 0
			 И Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготыСнижениеСуммыНалога) Тогда
			
			ЕстьЛьготаПоСуммеНалога = Истина;
			
			// Это местная льгота в виде уменьшения суммы налога. Код 3022200.
			ПоискЛьготыПоСуммеНалога = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
			ПоискЛьготыПоСуммеНалога.Вставить("КодЛьготы", "3022200");
			Если МенеджерЗаписи.ПроцентУменьшенияСуммыНалогаДо2020 > 0 Тогда
				ПоискЛьготыПоСуммеНалога.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент);
				ПоискЛьготыПоСуммеНалога.Вставить("ПроцентУменьшения", МенеджерЗаписи.ПроцентУменьшенияСуммыНалогаДо2020);
			Иначе
				// Снижение суммы налога на фиксированную сумму
				ПоискЛьготыПоСуммеНалога.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму);
			КонецЕсли;
		
		КонецЕсли;
		
		Если МенеджерЗаписи.СниженнаяНалоговаяСтавка > 0
			 И Не ЗначениеЗаполнено(МенеджерЗаписи.ОснованиеЛьготыСнижениеСтавки) Тогда
			
			ЕстьЛьготаПоНалоговойСтавке = Истина;
			
			// Это местная льгота в виде уменьшения ставки налога. Код 3022500.
			ПоискЛьготыПоНалоговойСтавке = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
			ПоискЛьготыПоНалоговойСтавке.Вставить("КодЛьготы", "3022500");
			ПоискЛьготыПоНалоговойСтавке.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной);
		
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ЕстьЛьготаПоНалоговойБазе Тогда
				МенеджерЗаписи.ОснованиеЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоНалоговойБазе,
					Льготы);
			КонецЕсли;
				
			Если ЕстьЛьготаПоСуммеНалога Тогда
				МенеджерЗаписи.ОснованиеЛьготыСнижениеСуммыНалога = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоСуммеНалога,
					Льготы);
			КонецЕсли;
			
			Если ЕстьЛьготаПоНалоговойСтавке Тогда
				МенеджерЗаписи.ОснованиеЛьготыСнижениеСтавки = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоНалоговойСтавке,
					Льготы);
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ТекстСообщения = Новый Массив;
			Описание = НСтр("ru = 'Не удалось обработать запись регистра ""Регистрация земельных участков""
				|(период: %1, организация: %2, основное средство: %3) по причине:'");
			
			Описание = СтрЗаменить(Описание, Символы.ПС, " ");
			Описание = СтрШаблон(Описание, 
				Формат(ВыборкаЗаписей.Период, "ДЛФ=D"),
				ВыборкаЗаписей.Организация,
				ВыборкаЗаписей.ОсновноеСредство);
			
			ТекстСообщения.Добавить(Описание);
			ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);
						
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.РегистрацияЗемельныхУчастков,
				,
				ТекстСообщения);
						
		КонецПопытки;
		
	КонецЦикла;	
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.РегистрацияЗемельныхУчастков.ЗаполнитьДанныеЛьгот""
			|не удалось обработать некоторые записи со льготами. Количество ошибок: %1'"), 
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, обработана ли запись (см. ЗаполнитьДанныеЛьгот()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция ЗаписьОбработана(Параметры) Экспорт

	Данные = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийМенеджерЗаписи.РегистрацияЗемельныхУчастков") 
  		 Или ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Данные = Параметры.Данные;
  	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийНаборЗаписей.РегистрацияЗемельныхУчастков")
  		 И Параметры.Данные.Количество() > 0 Тогда
    	Данные = Параметры.Данные[0];
    КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	ТребуетсяОбработкаЗаписи = Данные.ВключатьВНалоговуюБазу 
		И Данные.ОснованиеЛьготыПоНалоговойБазе = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И Данные.ОснованиеЛьготыСнижениеСуммыНалога = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И Данные.ОснованиеЛьготыСнижениеСтавки = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И (ЗначениеЗаполнено(Данные.НалоговаяЛьготаПоНалоговойБазеДо2020)
			И Данные.НалоговаяЛьготаПоНалоговойБазеДо2020 <> Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеПрименяется
		ИЛИ Данные.ПроцентУменьшенияСуммыНалогаДо2020 > 0
		ИЛИ Данные.СуммаУменьшенияСуммыНалога > 0
		ИЛИ Данные.СниженнаяНалоговаяСтавка > 0);
	
	Возврат Не ТребуетсяОбработкаЗаписи;

КонецФункции	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть;
	
КонецПроцедуры

// Получает код региона из регистрации в налоговом органе, либо из регистрации организации, указанных в записи регистра
Функция КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов)
	
	Если МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		КодРегиона = КэшКодовРегионов[МенеджерЗаписи.НалоговыйОрган];
		Если КодРегиона = Неопределено Тогда
			КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.НалоговыйОрган, "КодРегиона");
			КэшКодовРегионов.Вставить(МенеджерЗаписи.НалоговыйОрган, КодРегиона);
		КонецЕсли;
	Иначе
		// Не учитываем историю регистрации организации: считаем маловероятным, что менялся регион
		КодРегиона = КэшКодовРегионов[МенеджерЗаписи.Организация];
		Если КодРегиона = Неопределено Тогда
			КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.Организация, "РегистрацияВНалоговомОргане.КодРегиона");
			КэшКодовРегионов.Вставить(МенеджерЗаписи.Организация, КодРегиона);
		КонецЕсли;
	КонецЕсли;

	Возврат КодРегиона;
	
КонецФункции

// Получает 8-значный код ОКТМО либо непосредственно из записи, либо из регистрации организации, указанной в записи.
// Если в исходных данных указан 11-значный код населенного пункта, то возвращаются первые 8 знаков.
Функция ОКТМОМуниципальногоОбразованияПоМенеджеруЗаписи(МенеджерЗаписи, КэшОКТМООрганизаций)
	
	Если МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане
		 Или МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
		КодПоОКТМО = Лев(СокрЛП(МенеджерЗаписи.КодПоОКТМО), 8);
	Иначе
		Отбор = Новый Структура("Организация, Период", МенеджерЗаписи.Организация, МенеджерЗаписи.Период);
		Результат = КэшОКТМООрганизаций.НайтиСтроки(Отбор);
		Если Результат.Количество() > 0 Тогда
			КодПоОКТМО = Результат[0].КодПоОКТМО;
		Иначе
			КодПоОКТМО = Справочники.Организации.КодПоОКТМОНаДату(МенеджерЗаписи.Организация, МенеджерЗаписи.Период);
			КодПоОКТМО = Лев(СокрЛП(КодПоОКТМО), 8);
			СтрокаОКТМО = КэшОКТМООрганизаций.Добавить();
			СтрокаОКТМО.Организация = МенеджерЗаписи.Организация;
			СтрокаОКТМО.Период = МенеджерЗаписи.Период;
			СтрокаОКТМО.КодПоОКТМО = КодПоОКТМО;
		КонецЕсли;
	КонецЕсли;

	Возврат КодПоОКТМО;
	
КонецФункции

#КонецОбласти

#КонецЕсли