
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ЗначенияЗаполнения);
		
		// Все льготы по земельному налогу делятся на 3 ТИПА: снижение налоговой базы, снижение суммы налога и
		// снижение ставки. А внутри каждого типа есть несколько ВИДОВ льгот. В параметрах формы определены до 3 льгот:
		// максимум по одной для каждого типа. Ниже при закрытии формы также контролируем, чтобы по каждому типу было
		// установлено не более одного вида льготы.
		ТипыЛьгот = Новый Массив;
		ТипыЛьгот.Добавить("ПоНалоговойБазе");
		ТипыЛьгот.Добавить("СнижениеСуммыНалога");
		ТипыЛьгот.Добавить("СнижениеСтавки");
		
		Для каждого ТипЛьготы из ТипыЛьгот Цикл
			Если Параметры.ЗначенияЗаполнения.Свойство("ОснованиеЛьготы" + ТипЛьготы) 
				 И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения["ОснованиеЛьготы" + ТипЛьготы]) Тогда
				НоваяЛьгота = Льготы.Добавить();
				НоваяЛьгота.ОснованиеЛьготы = Параметры.ЗначенияЗаполнения["ОснованиеЛьготы" + ТипЛьготы];
				НоваяЛьгота.НачалоДействияЛьготы = Параметры.ЗначенияЗаполнения["НачалоДействияЛьготы" + ТипЛьготы];
				НоваяЛьгота.ОкончаниеДействияЛьготы = Параметры.ЗначенияЗаполнения["ОкончаниеДействияЛьготы" + ТипЛьготы];
				НоваяЛьгота.ВидЛьготы = Параметры.ЗначенияЗаполнения["ВидЛьготы" + ТипЛьготы];
				Если НоваяЛьгота.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент Тогда
					НоваяЛьгота.ПроцентУменьшения = Параметры.ЗначенияЗаполнения.ПроцентУменьшенияСуммыНалога;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Если Льготы.Количество() = 0 Тогда
		Льготы.Добавить();
	КонецЕсли;

	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();

	ВывестиЭлементыТаблицыЛьгот();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам" Тогда
		
		Для каждого СтрокаЛьгот из Льготы Цикл
			Если Параметр.Организация = Организация И Параметр.Льгота = СтрокаЛьгот.ОснованиеЛьготы Тогда
				УстановитьТекстПодсказкиЛьготы(СтрокаЛьгот.ПолучитьИдентификатор());	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина; // закрытие формы обрабатывается в ЗаписатьДанные()
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Отбор = Новый Структура("ВидЛьготы");
	
	Отбор.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади;
	Если Льготы.НайтиСтроки(Отбор).Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоляНеОблагаемойНалогомПлощадиЧислитель");
		МассивНепроверяемыхРеквизитов.Добавить("ДоляНеОблагаемойНалогомПлощадиЗнаменатель");
	КонецЕсли;
	
	Отбор.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму;
	Если Льготы.НайтиСтроки(Отбор).Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НеОблагаемаяНалогомСумма");
	КонецЕсли;
	
	Отбор.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму;
	Если Льготы.НайтиСтроки(Отбор).Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаУменьшенияСуммыНалога");
	КонецЕсли;
	
	Отбор.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной;
	Отбор2 = Новый Структура("ВидЛьготы");
	Отбор2.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент;
	Если Льготы.НайтиСтроки(Отбор).Количество() = 0 И Льготы.НайтиСтроки(Отбор2).Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СниженнаяНалоговаяСтавка");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОснованиеЛьготыПриИзменении(Элемент)
	ИдентификаторСтрокиТаблицы = Число(СтрЗаменить(Элемент.Имя, "ОснованиеЛьготы", ""));
	ОснованиеЛьготыПриИзмененииНаСервере(ИдентификаторСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеЛьготыОчистка(Элемент, СтандартнаяОбработка)
	ИдентификаторСтрокиТаблицы = Число(СтрЗаменить(Элемент.Имя, "ОснованиеЛьготы", ""));
	УдалитьЛьготуНаСервере(ИдентификаторСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеЛьготыРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторСтрокиТаблицы = СтрЗаменить(Элемент.Имя, "РасширеннаяПодсказка", "");
	ИдентификаторСтрокиТаблицы = Число(СтрЗаменить(ИдентификаторСтрокиТаблицы, "ОснованиеЛьготы", ""));
	СтрокаЛьгот = Льготы.Получить(ИдентификаторСтрокиТаблицы); 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Владелец", СтрокаЛьгот.ОснованиеЛьготы);
	Отбор.Вставить("ОсновноеСредство", ОсновноеСредство);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам.ФормаСписка", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьЛьготу(Команда)
	ДобавитьЛьготуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗаписатьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиЭлементыТаблицыЛьгот()
	
	// Первая строка таблицы льгот всегда отображена, даже если нет ни одной льготы.
	// В этой строке достаточно только настроить элементы формы.
	// Идентификатор этой строки всегда 0: она добавляется при создании формы и более не удаляется.
	// Поэтому суффикс элементов формы, связанных с этой строкой, - также 0.
	// Эти элементы одновременно служат шаблоном для остальных строк.
	// У всех прочих строк таблицы льгот идентификатор не связан с позицией строки в таблице (идентификатор задается 
	// строке инкрементально и единожды на время ее жизни, а строки могут добавляться/удаляться), поэтому суффикс
	// элементов формы - это идентификатор связанной строки таблицы льгот.
	НастроитьЭлементыСтрокиЛьготы(0);
	
	Для ИндексСтрокиТаблицы = 1 По Льготы.Количество()-1 Цикл
		ВывестиЭлементыСтрокиЛьготы(
			Льготы[ИндексСтрокиТаблицы].ПолучитьИдентификатор(),
			ИндексСтрокиТаблицы);
	КонецЦикла;
	
	// Можно ввести не более трех льгот (по одной каждого типа). Принаджлежность льгот к разным типам проверяется при
	// закрытии формы (см. ЗаписатьДанные()). Здесь ограничиваем только по количеству.
	Элементы.ДобавитьЛьготу.Видимость = Льготы.Количество() < 3;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЭлементыСтрокиЛьготы(ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы)

	// Создаем элементы формы копированием элементов первой льготы 
	СкопироватьЭлементФормыРекурсивно(
		Элементы.ГруппаЛьгота0,
		Элементы.ГруппаЛьготы,
		ИдентификаторСтрокиТаблицы,
		ИндексСтрокиТаблицы);
	
	// Настраиваем элементы добавленной строки по виду льготы
	НастроитьЭлементыСтрокиЛьготы(ИдентификаторСтрокиТаблицы);

КонецПроцедуры

&НаСервере
Процедура СкопироватьЭлементФормыРекурсивно(Знач ЭлементИсточник, Родитель, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы)
	
	// ЭлементИсточник - это всегда элемент первой строки, поэтому имя всегда заканчивается на 0 (идентификатор первой строки).
	ИмяЭлементаБезИндекса = СтрЗаменить(ЭлементИсточник.Имя, "0", "");
	
	ИмяНовогоЭлемента = ИмяЭлементаБезИндекса + ИдентификаторСтрокиТаблицы;

	НовыйЭлемент = СкопироватьЭлементФормы(ЭлементИсточник, Родитель, ИмяНовогоЭлемента, ИндексСтрокиТаблицы);
	
	Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаФормы") Тогда
		Для каждого ПодчиненныйЭлемент Из ЭлементИсточник.ПодчиненныеЭлементы Цикл
			СкопироватьЭлементФормыРекурсивно(ПодчиненныйЭлемент, НовыйЭлемент, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СкопироватьЭлементФормы(ЭлементИсточник, Родитель, ИмяНовогоЭлемента, ИндексСтрокиТаблицы)

	ТипИсточника = ТипЗнч(ЭлементИсточник);
	НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипИсточника, Родитель);
	НовыйЭлемент.Вид = ЭлементИсточник.Вид;

	Если ТипИсточника = Тип("ПолеФормы") Тогда
		// Некоторые свойства поля формы вызывают ошибку при копировании, поэтому исключаем их из заполнения
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник,, "ПутьКДанным, ВыделенныйТекст, СписокВыбора");
		// При заполнении меняем свойство ПутьКДанным, если оно ссылается на таблицу льгот
		// (например, на "Льготы[0].ОснованиеЛьготы", где 0 - это индекс строки таблицы Льготы).
		// ЭлементИсточник - это всегда элемент первой строки, поэтому индекс строки в ПутьКДанным равен 0.
		// Если источник данных не ссылает на таблицу, то он останется тот же, что в первой строке.
		НовыйЭлемент.ПутьКДанным = СтрЗаменить(ЭлементИсточник.ПутьКДанным, "0", ИндексСтрокиТаблицы);

		// Копируем обработчики события "ПриИзменении" и "Очистка" (другие не используются)
		ДействиеПриИзменении = ЭлементИсточник.ПолучитьДействие("ПриИзменении");
		Если ДействиеПриИзменении <> "" Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
		КонецЕсли;
		ДействиеОчистка = ЭлементИсточник.ПолучитьДействие("Очистка");
		Если ДействиеОчистка <> "" Тогда
			НовыйЭлемент.УстановитьДействие("Очистка", ДействиеОчистка);
		КонецЕсли;
		
		// Скопируем расширенную подказку
		Если ЭлементИсточник.ОтображениеПодсказки <> ОтображениеПодсказки.ОтображатьАвто Тогда
			НовыйЭлемент.РасширеннаяПодсказка.Заголовок = ЭлементИсточник.РасширеннаяПодсказка.Заголовок;
			НовыйЭлемент.РасширеннаяПодсказка.Шрифт = ЭлементИсточник.РасширеннаяПодсказка.Шрифт;
			НовыйЭлемент.РасширеннаяПодсказка.УстановитьДействие(
				"ОбработкаНавигационнойСсылки",
				ЭлементИсточник.РасширеннаяПодсказка.ПолучитьДействие("ОбработкаНавигационнойСсылки")
			);
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ГруппаФормы") Тогда
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник,, "ПутьКДаннымЗаголовка");
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник);
	КонецЕсли;
	
	Возврат НовыйЭлемент;

КонецФункции

&НаСервере
Процедура НастроитьЭлементыСтрокиЛьготы(ИдентификаторСтрокиТаблицы)

	СтрокаЛьгот = Льготы.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	
	ПрименяетсяЛьгота = ЗначениеЗаполнено(СтрокаЛьгот.ОснованиеЛьготы);
	
	Если ПрименяетсяЛьгота Тогда
		Элементы["ОснованиеЛьготы" + ИдентификаторСтрокиТаблицы].ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы["ОснованиеЛьготы" + ИдентификаторСтрокиТаблицы].ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ПрименяетсяЛьгота И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ОсновноеСредство) Тогда
		УстановитьТекстПодсказкиЛьготы(ИдентификаторСтрокиТаблицы);
	Иначе	 
		Элементы["ОснованиеЛьготы" + ИдентификаторСтрокиТаблицы + "РасширеннаяПодсказка"].Заголовок = "";
	КонецЕсли;	 
	
	Элементы["ГруппаПериодДействия" + ИдентификаторСтрокиТаблицы].Видимость = ПрименяетсяЛьгота;
	Элементы["ГруппаНеОблагаемаяНалогомПлощадь" + ИдентификаторСтрокиТаблицы].Видимость = 
		СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади");
	Элементы["НеОблагаемаяНалогомСумма" + ИдентификаторСтрокиТаблицы].Видимость = 
		СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму");
	Элементы["СуммаУменьшенияСуммыНалога" + ИдентификаторСтрокиТаблицы].Видимость = 
		СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму");
	Элементы["СниженнаяНалоговаяСтавка" + ИдентификаторСтрокиТаблицы].Видимость = 
		(СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной")
		Или СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент"));

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПодсказкиЛьготы(ИдентификаторСтрокиТаблицы)
	СтрокаЛьгот = Льготы.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Элементы["ОснованиеЛьготы" + ИдентификаторСтрокиТаблицы + "РасширеннаяПодсказка"].Заголовок =
		ЛьготыПоИмущественнымНалогам.ТекстПодсказкиЛьготы(
			СтрокаЛьгот.ОснованиеЛьготы,
			Организация,
			ТекущаяДатаПользователя,
			ОсновноеСредство);
КонецПроцедуры

&НаСервере
Процедура ОснованиеЛьготыПриИзмененииНаСервере(ИдентификаторСтрокиТаблицы)	
	
	СтрокаЛьгот = Льготы.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	
	Если ЗначениеЗаполнено(СтрокаЛьгот.ОснованиеЛьготы) Тогда
		РеквизитыЛьготы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЛьгот.ОснованиеЛьготы, "ВидЛьготы, ПроцентУменьшения");
		ЗаполнитьЗначенияСвойств(СтрокаЛьгот, РеквизитыЛьготы);
	Иначе
		СтрокаЛьгот.ВидЛьготы = Перечисления.ВидыЛьготПоИмущественнымНалогам.ПустаяСсылка();
		СтрокаЛьгот.ПроцентУменьшения = 0;
	КонецЕсли;
	
	НастроитьЭлементыСтрокиЛьготы(ИдентификаторСтрокиТаблицы);

КонецПроцедуры

&НаСервере
Процедура ДобавитьЛьготуНаСервере()
	
	СтрокаЛьгот = Льготы.Добавить();
	ВывестиЭлементыСтрокиЛьготы(СтрокаЛьгот.ПолучитьИдентификатор(), Льготы.Количество()-1);
	
	Элементы.ДобавитьЛьготу.Видимость = Льготы.Количество() < 3;
	
	ТекущийЭлемент = Элементы["ОснованиеЛьготы" + СтрокаЛьгот.ПолучитьИдентификатор()];
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛьготуНаСервере(ИдентификаторСтрокиТаблицы)

	// Не удаляем первую строку
	УдаляемаяСтрокаЛьгот = Льготы.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Если УдаляемаяСтрокаЛьгот = Неопределено Или Льготы.Индекс(УдаляемаяСтрокаЛьгот) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем строку из таблицы
	Льготы.Удалить(УдаляемаяСтрокаЛьгот);

	// Далее удаляем элементы формы: просто удаляем всю группу элементов по данной льготе
	ИмяУдаляемогоЭлемента = "ГруппаЛьгота" + ИдентификаторСтрокиТаблицы;
	УдаляемыйЭлемент = Элементы.Найти(ИмяУдаляемогоЭлемента);
	Если УдаляемыйЭлемент <> Неопределено Тогда
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЕсли;
	
	Элементы.ДобавитьЛьготу.Видимость = Льготы.Количество() < 3;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьДанные();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьДанные()
	
	Отказ = Ложь;
	
	Если СниженнаяНалоговаяСтавка > НалоговаяСтавка Тогда
		ШаблонСообщения = НСтр("ru = 'Сниженная налоговая ставка не может превышать основную налоговую ставку %1%!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(НалоговаяСтавка, "ЧЦ=5; ЧДЦ=4"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СниженнаяНалоговаяСтавка", , Отказ);
	КонецЕсли;
	
	ПараметрыЛьготы = ЛьготыПоИмущественнымНалогамКлиентСервер.НовыеПараметрыОписанияЛьготыПоЗемельномуНалогу();
	
	ШаблонСообщения = НСтр("ru = 'Вы выбрали льготу вида ""%1"". Также выше выбрана льгота вида ""%2"".
		|Такое сочетание невозможно. Выберите льготу другого вида.'");
	ШаблонСообщения = СтрЗаменить(ШаблонСообщения, Символы.ПС, " ");
	Для каждого СтрокаЛьгот из Льготы Цикл
		Если СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.Освобождение")
			 Или СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади")
			 Или СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму") Тогда
			Если ЗначениеЗаполнено(ПараметрыЛьготы.ОснованиеЛьготыПоНалоговойБазе) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаЛьгот.ВидЛьготы, ПараметрыЛьготы.ВидЛьготыПоНалоговойБазе);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСообщения,
					,
					СтрШаблон("Льготы[%1].ОснованиеЛьготы", Льготы.Индекс(СтрокаЛьгот)),
					,
					Отказ);
			Иначе
				ПараметрыЛьготы.ОснованиеЛьготыПоНалоговойБазе = СтрокаЛьгот.ОснованиеЛьготы;
				ПараметрыЛьготы.НачалоДействияЛьготыПоНалоговойБазе = СтрокаЛьгот.НачалоДействияЛьготы;
				ПараметрыЛьготы.ОкончаниеДействияЛьготыПоНалоговойБазе = СтрокаЛьгот.ОкончаниеДействияЛьготы;
				ПараметрыЛьготы.ВидЛьготыПоНалоговойБазе = СтрокаЛьгот.ВидЛьготы;
			КонецЕсли;
		ИначеЕсли СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент")
			 Или СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму") Тогда
			Если ЗначениеЗаполнено(ПараметрыЛьготы.ОснованиеЛьготыСнижениеСуммыНалога) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаЛьгот.ВидЛьготы, ПараметрыЛьготы.ВидЛьготыСнижениеСуммыНалога);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСообщения,
					,
					СтрШаблон("Льготы[%1].ОснованиеЛьготы", Льготы.Индекс(СтрокаЛьгот)),
					,
					Отказ);
			Иначе
				ПараметрыЛьготы.ОснованиеЛьготыСнижениеСуммыНалога = СтрокаЛьгот.ОснованиеЛьготы;
				ПараметрыЛьготы.НачалоДействияЛьготыСнижениеСуммыНалога = СтрокаЛьгот.НачалоДействияЛьготы;
				ПараметрыЛьготы.ОкончаниеДействияЛьготыСнижениеСуммыНалога = СтрокаЛьгот.ОкончаниеДействияЛьготы;
				ПараметрыЛьготы.ВидЛьготыСнижениеСуммыНалога = СтрокаЛьгот.ВидЛьготы;
				Если СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент") Тогда
					ПараметрыЛьготы.ПроцентУменьшенияСуммыНалога = СтрокаЛьгот.ПроцентУменьшения;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной")
			 Или СтрокаЛьгот.ВидЛьготы = ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент") Тогда
			Если ЗначениеЗаполнено(ПараметрыЛьготы.ОснованиеЛьготыСнижениеСтавки) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаЛьгот.ВидЛьготы, ПараметрыЛьготы.ВидЛьготыСнижениеСтавки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСообщения,
					,
					СтрШаблон("Льготы[%1].ОснованиеЛьготы", Льготы.Индекс(СтрокаЛьгот)),
					,
					Отказ);
			Иначе
				ПараметрыЛьготы.ОснованиеЛьготыСнижениеСтавки = СтрокаЛьгот.ОснованиеЛьготы;
				ПараметрыЛьготы.НачалоДействияЛьготыСнижениеСтавки = СтрокаЛьгот.НачалоДействияЛьготы;
				ПараметрыЛьготы.ОкончаниеДействияЛьготыСнижениеСтавки = СтрокаЛьгот.ОкончаниеДействияЛьготы;
				ПараметрыЛьготы.ВидЛьготыСнижениеСтавки = СтрокаЛьгот.ВидЛьготы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	// Льгота по налоговой базе
	Если ПараметрыЛьготы.ВидЛьготыПоНалоговойБазе <> ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади") Тогда
		ДоляНеОблагаемойНалогомПлощадиЧислитель = 0;
		ДоляНеОблагаемойНалогомПлощадиЗнаменатель = 0;
	КонецЕсли;
	
	Если ПараметрыЛьготы.ВидЛьготыПоНалоговойБазе <> ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму") Тогда
		НеОблагаемаяНалогомСумма = 0;
	КонецЕсли;
	
	// Льгота по сумме налога
	Если ПараметрыЛьготы.ВидЛьготыСнижениеСуммыНалога <> ПредопределенноеЗначение("Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму") Тогда
		СуммаУменьшенияСуммыНалога = 0;
	КонецЕсли;
	
	// Льгота по налоговой ставке
	Если Не ЗначениеЗаполнено(ПараметрыЛьготы.ОснованиеЛьготыСнижениеСтавки) Тогда
		СниженнаяНалоговаяСтавка = 0;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЛьготы, ЭтотОбъект);
	
	Модифицированность = Ложь;
	
	ОповеститьОВыборе(ПараметрыЛьготы);
	
КонецПроцедуры

#КонецОбласти
