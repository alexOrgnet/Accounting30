// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Отправить статистику в сервис.
Процедура ОтправитьСтатистикуВСервис() Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаОтправкаСтатистикиРекламы();
	Если ПараметрыЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПрофилей = Новый СписокЗначений(); // СписокЗначений Из Строка
	ДатыКУдалению = Новый Массив; // Массив из Дата
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		
		Дата = ПараметрЗапроса.forDay; // Дата
		ДатыКУдалению.Добавить(Дата);
		
		ПараметрЗапроса.forDay = Формат(Дата, "ДФ=yyyy-MM-dd;"); // Дата
		СписокПрофилей.Добавить(ПараметрЗапроса.profileId);
		
	КонецЦикла;
	
	Данные = РекламныйСервисСлужебный.ЗначениеВJSON(ПараметрыЗапроса);
	
	ХешСумма = ХешСуммаЗапросаСтатистики(СписокПрофилей, Данные);
	
	Запрос = РекламныйСервисСлужебный.ЗапросОтправкаСтатистикиРекламы(Данные, ХешСумма);
	Ответ = РекламныйСервисСлужебный.ВыполнитьЗапрос(Запрос);
	Если Ответ.Отказ Тогда
		
		Если Ответ.Ответ.КодСостояния = 401 Тогда
			Комментарий = НСтр("ru = 'Отсутствует заголовок ""X-Advertising-Content-Key"" с подписью сообщения'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли Ответ.Ответ.КодСостояния = 403 Тогда
			Комментарий = НСтр("ru = 'Подпись в заголовке ""X-Advertising-Content-Key"" не валидная'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ШаблонСобытия = НСтр("ru = '%1 Отправка статистики взаимодействия потребителей с рекламой в сервис.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтрШаблон(ШаблонСобытия, РекламныйСервисСлужебный.ИмяСобытияРекламногоСервиса());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			Комментарий);
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ДатаКУдалению Из ДатыКУдалению Цикл
		ОчиститьСтатистикуЗаДень(ДатаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Добавить событие.
// 
// Измерение "ИдентификаторРекламы" имеет тип ОпределяемыйТип.ИдентификаторРекламы (Строка) 
// потому что справочник Реклама в режиме сервиса не разделенный, 
// и добавление/удаление элементов производится в неразделенном режиме. При этом данный регистр разделенный,
// удаление записей из не разделенного режима не возможно и записи статистики нужны для отправки в сервис 
// после окончания существования рекламы
// 
// Параметры:
//  ПараметрыСобытия см.НовыйПараметрыСобытияВзаимодействия
//
Процедура СоздатьНаборыЗаписей(Знач ПараметрыСобытия) Экспорт
	
	ИдентификаторыРекламы = ПараметрыСобытия.ИдентификаторыРекламы;
	ИмяФормы = ПараметрыСобытия.ИмяФормы;
	СобытиеВзаимодействия = ПараметрыСобытия.СобытиеВзаимодействия;
	Дата = ПараметрыСобытия.Дата;
	ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияВзаимодействия();
	ПрофильПотребителя = ПараметрыСобытия.ПрофильПотребителя;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаСобытийВзаимодействияРекламы");
		ЭлементБлокировки.УстановитьЗначение("Дата", Дата);
		ЭлементБлокировки.УстановитьЗначение("ПрофильПотребителя", ПрофильПотребителя);
		ЭлементБлокировки.УстановитьЗначение("ИмяФормы", ИмяФормы);
		ЭлементБлокировки.УстановитьЗначение("СобытиеВзаимодействия", СобытиеВзаимодействия);
		
		ЭлементБлокировки.ИсточникДанных = ПараметрыСобытия.ИдентификаторыРекламы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторРекламы", "Идентификатор");
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Дата);
		НаборЗаписей.Отбор.ПрофильПотребителя.Установить(ПрофильПотребителя);
		НаборЗаписей.Отбор.ИмяФормы.Установить(ИмяФормы);
		НаборЗаписей.Отбор.СобытиеВзаимодействия.Установить(СобытиеВзаимодействия);
		
		Для Каждого СтрокаИдентификатора Из ИдентификаторыРекламы Цикл
			
			ИдентификаторРекламы = 
				РекламныйСервисСлужебный.ПривестиТипКИдентификаторуРекламы(
					СтрокаИдентификатора.Идентификатор); // ОпределяемыйТип.ИдентификаторРекламы
			
			НаборЗаписей.Отбор.ИдентификаторРекламы.Установить(ИдентификаторРекламы);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				СтрокаЗаписи = НаборЗаписей[0];
			Иначе
				
				СтрокаЗаписи = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ПараметрыСобытия);
				СтрокаЗаписи.ИдентификаторРекламы = ИдентификаторРекламы;
				
			КонецЕсли;
			
			СтрокаЗаписи.Количество = СтрокаЗаписи.Количество + 1;
			
			Если НаборЗаписей.ПроверитьЗаполнение() Тогда
				НаборЗаписей.Записать();
			Иначе
				
				Комментарий = НСтр(
					"ru = 'Ошибка проверки заполнения записи регистра ""СтатистикаСобытийВзаимодействияРекламы"".'");
				ЗаписьЖурналаРегистрации(
					ИмяСобытия, 
					УровеньЖурналаРегистрации.Ошибка, , 
					ИдентификаторРекламы, 
					Комментарий);
				
			КонецЕсли;
		
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , 
			ИдентификаторРекламы, 
			Комментарий);
		
		ВызватьИсключение Комментарий;
		
	КонецПопытки;
	
КонецПроцедуры

// Новый параметры события взаимодействия с рекламными данными.
// 
// Возвращаемое значение:
//  Структура - Новый параметры события:
// * Дата 								- Дата - дата показа без времени
// * ИдентификаторыРекламы 				- см. НовыйТаблицаИдентификаторовРекламы
// * ИмяФормы 							- Строка - полное имя формы вызова.
// * СобытиеВзаимодействия 				- ПеречислениеСсылка.СобытияВзаимодействияРекламы - по умолчанию показ рекламы.
// * ПрофильПотребителя 				- ОпределяемыйТип.ПрофильПотребителяРекламы, Произвольный - профиль потребителя
//
Функция НовыйПараметрыСобытияВзаимодействия() Экспорт
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Дата", ТекущаяДатаСеанса());
	
	ИдентификаторыРекламы = НовыйТаблицаИдентификаторовРекламы();
	ПараметрыСобытия.Вставить("ИдентификаторыРекламы", ИдентификаторыРекламы);
	
	ПараметрыСобытия.Вставить("ИмяФормы", "");
	ПараметрыСобытия.Вставить("СобытиеВзаимодействия", 
		Перечисления.СобытияВзаимодействияРекламы.ПереходПоСсылке);
	
	ОписаниеТипаПрофиль = РекламныйСервисСлужебный.ПустойПрофильПотребителя();
	ПараметрыСобытия.Вставить("ПрофильПотребителя", ОписаниеТипаПрофиль);
	
	Возврат ПараметрыСобытия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

// Конструктор параметры запроса отправка статистики рекламы.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса отправка статистики рекламы:
// * profileId - Строка - Идентификатор Профиля Потребителя.
// * forDay - Строка, Дата - Формат: "2022-11-02". Дата к которой относится передаваемая статистика.
// * advertisingStatistics - Массив из см. НовыйДанныеАгрегированнойСтатистикиРекламы - Агрегированная статистика.
//
Функция НовыйПараметрЗапросаОтправкиСтатистикиРекламы()

	Результат = Новый Структура;
	Результат.Вставить("profileId", "");
	Результат.Вставить("forDay", "");
	Результат.Вставить("advertisingStatistics", Новый Массив);
	
	Возврат Результат;

КонецФункции

// Конструктор - данные агрегированной статистики рекламы.
// 
// Возвращаемое значение:
//  Структура - Новый данные агрегированной статистики рекламы:
// * advertisingId - Строка - Идентификатор Рекламы.
// * mediaContexts - Массив из см.НовыйДанныеСтатистикиРекламы - Статистика по взаимодействию Потребителя с Рекламой.
//
Функция НовыйДанныеАгрегированнойСтатистикиРекламы()
	
	Результат = Новый Структура;
	Результат.Вставить("advertisingId", "");
	Результат.Вставить("mediaContexts", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Конструктор - данные статистики рекламы.
// 
// Возвращаемое значение:
//  Структура - Новый данные статистики рекламы:
// * screenId - Строка - Идентификатор экранной формы.
// * showsNumber - Число - Количество показов Рекламы на экранной форме.
// * actionsNumber - Число - Количество Целевых действий (переходов по Рекламе) на экранной форме.
//
Функция НовыйДанныеСтатистикиРекламы()
	
	Результат = Новый Структура;
	Результат.Вставить("screenId", "");
	Результат.Вставить("showsNumber", 0);
	Результат.Вставить("actionsNumber", 0);
	
	Возврат Результат;
	
КонецФункции

// Новый таблица идентификаторов рекламы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Идентификатор - Строка
//
Функция НовыйТаблицаИдентификаторовРекламы()
	
	ИдентификаторыРекламы = Новый ТаблицаЗначений;
	ИдентификаторыРекламы.Колонки.Добавить("Идентификатор");
	
	Возврат ИдентификаторыРекламы;
	
КонецФункции

#КонецОбласти

// Конструктор параметры запроса отправка статистики рекламы.
// 
// Возвращаемое значение:
//  Массив из Структура см. НовыйПараметрЗапросаОтправкиСтатистикиРекламы
//
Функция ПараметрыЗапросаОтправкаСтатистикиРекламы()
	
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПараметрыЗапроса = Новый Массив; // Массив из см. НовыйПараметрЗапросаОтправкиСтатистикиРекламы
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатистикаСобытийВзаимодействия.Дата КАК Дата,
			|	СтатистикаСобытийВзаимодействия.ПрофильПотребителя КАК ПрофильПотребителя,
			|	СтатистикаСобытийВзаимодействия.ИдентификаторРекламы КАК ИдентификаторРекламы,
			|	СтатистикаСобытийВзаимодействия.ИмяФормы КАК ИмяФормы,
			|	СтатистикаСобытийВзаимодействия.СобытиеВзаимодействия КАК СобытиеВзаимодействия,
			|	СтатистикаСобытийВзаимодействия.Количество КАК Количество
			|ИЗ
			|	РегистрСведений.СтатистикаСобытийВзаимодействияРекламы КАК СтатистикаСобытийВзаимодействия
			|ГДЕ
			|	СтатистикаСобытийВзаимодействия.Дата < &НачалоТекущегоДня
			|ИТОГИ
			|ПО
			|	Дата,
			|	ПрофильПотребителя,
			|	ИдентификаторРекламы,
			|	ИмяФормы";
		
		Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
		
		УстановитьПривилегированныйРежим(Истина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаСобытийВзаимодействияРекламы");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Дата", "Дата");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			Дата = ВыборкаПериод.Дата; // Дата
			
			ВыборкаПрофиль = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПрофиль.Следующий() Цикл
				
				ПараметрЗапроса = НовыйПараметрЗапросаОтправкиСтатистикиРекламы();
				ПараметрЗапроса.forDay = Дата;
				
				// Идентификатор профиля
				ПрофильПотребителя = ВыборкаПрофиль.ПрофильПотребителя; // ОпределяемыйТип.ПрофильПотребителяРекламы
				ИдПрофильПотребителя = 
					РекламныйСервисСлужебный.ИдентификаторПользователяИБПоПрофилюПотребителя(ПрофильПотребителя);
				
				ОбщегоНазначенияКлиентСервер.Проверить(
					ТипЗнч(ИдПрофильПотребителя) = Тип("Строка"), 
					НСтр("ru = 'Тип идентификатора профиля потребителя не является строковым.'"), 
					"РекламныйСервисСлужебный.ПараметрыЗапросаОтправкаСтатистикиРекламы");
				
				ОбщегоНазначенияКлиентСервер.Проверить(
					Не ПустаяСтрока(ИдПрофильПотребителя), 
					НСтр("ru = 'Идентификатор профиля потребителя не заполнен.'"), 
					"РекламныйСервисСлужебный.ПараметрыЗапросаОтправкаСтатистикиРекламы");
				
				ПараметрЗапроса.profileId = ИдПрофильПотребителя;
				
				// Агрегированная статистика
				ВыборкаИдентификаторРекламы = ВыборкаПрофиль.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаИдентификаторРекламы.Следующий() Цикл
					
					ДанныеАгрегированнойСтатистики = НовыйДанныеАгрегированнойСтатистикиРекламы();
					
					ИдентификаторРекламы = ВыборкаИдентификаторРекламы.ИдентификаторРекламы; // Строка
					ДанныеАгрегированнойСтатистики.advertisingId = ИдентификаторРекламы;
					
					ВыборкаФорма = ВыборкаИдентификаторРекламы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаФорма.Следующий() Цикл
						
						ДанныеСтатистики = НовыйДанныеСтатистикиРекламы();
						
						ИмяФормы = ВыборкаФорма.ИмяФормы; // Строка
						ДанныеСтатистики.screenId = ИмяФормы;
						
						Выборка = ВыборкаФорма.Выбрать();
						Пока Выборка.Следующий() Цикл
							
							Количество = Выборка.Количество; // Число
							Если Выборка.СобытиеВзаимодействия = 
									Перечисления.СобытияВзаимодействияРекламы.ПереходПоСсылке Тогда
								ДанныеСтатистики.actionsNumber = Количество;
							ИначеЕсли Выборка.СобытиеВзаимодействия = 
									Перечисления.СобытияВзаимодействияРекламы.ПоказРекламы Тогда 
								ДанныеСтатистики.showsNumber = Количество;
							КонецЕсли;
							
						КонецЦикла;
						
						ДанныеАгрегированнойСтатистики.mediaContexts.Добавить(ДанныеСтатистики);
						ПараметрЗапроса.advertisingStatistics.Добавить(ДанныеАгрегированнойСтатистики);
						
					КонецЦикла;
				
				КонецЦикла;
				
				ПараметрыЗапроса.Добавить(ПараметрЗапроса);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияОтправкиСтатистикиВзаимодействия();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,, , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		НСтр("ru = 'РекламныйСервис: ПараметрыЗапросаОтправкаСтатистикиРекламы'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ДатаНачала);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Очистить статистику за день.
// 
// Параметры:
//  Дата - Дата
//
Процедура ОчиститьСтатистикуЗаДень(Знач Дата)
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаСобытийВзаимодействияРекламы");
		ЭлементБлокировки.УстановитьЗначение("Дата", Дата);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Дата);
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
				РекламныйСервисСлужебный.ИмяСобытияОтправкиСтатистикиВзаимодействия(), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Хеш сумма запроса статистики.
// 
// Параметры:
//  СписокПрофилей - СписокЗначений из Строка
//  Данные - Строка
// 
// Возвращаемое значение:
//  Строка -  Хеш сумма запроса статистики
//
Функция ХешСуммаЗапросаСтатистики(СписокПрофилей, Данные)
	
	СписокПрофилей.СортироватьПоЗначению();
	СписокПрофилейСтрокой = СтрСоединить(СписокПрофилей.ВыгрузитьЗначения(), ";");
	КлючШифрования = СтрШаблон("%1%2", СписокПрофилейСтрокой, "1C Enterprise");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(КлючШифрования);
	Хеширование.Добавить(Данные);
	ХешСуммаСтрока = Base64Строка(Хеширование.ХешСумма);
	
	Возврат ХешСуммаСтрока;
	
КонецФункции

#КонецОбласти

#КонецЕсли
