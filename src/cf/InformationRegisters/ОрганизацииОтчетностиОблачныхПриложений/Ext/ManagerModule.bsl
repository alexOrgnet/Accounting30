
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает доступные подключенные облачные приложения пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого
//                 будет получен список приложений
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//      *Идентификатор - уникальный идентификатор экземпляра приложения
//      *Адрес - URI облачного приложения
//      *ПриложениеСсылка - СправочникСсылка.ОблачныеПриложения - экземпляр приложения
//      *Наименование - Строка - имя приложения в сервисе
//
Функция Приложения(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииОтчетности.Организация.Владелец.Код КАК Идентификатор,
	|	ОрганизацииОтчетности.Организация.Владелец.Адрес КАК Адрес,
	|	ОрганизацииОтчетности.Организация.Владелец КАК ПриложениеСсылка,
	|	ОрганизацииОтчетности.Организация.Владелец.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ОрганизацииОтчетностиОблачныхПриложений КАК ОрганизацииОтчетности
	|ГДЕ
	|	ОрганизацииОтчетности.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает доступные организации облачных приложений пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого
//                 будет получен список организаций
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//      *ОрганизацияСсылка - СправочникСсылка.ОрганизацииОблачныхПриложений - организация приложения
//      *ОрганизацияИдентификатор - Строка - уникальный идентификатор организации
//      *ОрганизацияНаименование - Строка - наименование организации
//      *ПриложениеИдентификатор - Строка - уникальный идентификатор экземпляра приложения
//      *ПриложениеАдрес - Строка - URI облачного приложения
//      *ПриложениеСсылка - СправочникСсылка.ОблачныеПриложения - экземпляр приложения
//      *ПриложениеНаименование - Строка - имя облачного приложения в Сервисе
//      *Подключено - Булево
//
Функция Организации(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииОтчетности.Организация КАК ОрганизацияСсылка,
	|	ОрганизацииОтчетности.Организация.Код КАК ОрганизацияИдентификатор,
	|	ОрганизацииОтчетности.Организация.Наименование КАК ОрганизацияНаименование,
	|	ОрганизацииОтчетности.Организация.Владелец.Код КАК ПриложениеИдентификатор,
	|	ОрганизацииОтчетности.Организация.Владелец.Адрес КАК ПриложениеАдрес,
	|	ОрганизацииОтчетности.Организация.Владелец КАК ПриложениеСсылка,
	|	ОрганизацииОтчетности.Организация.Владелец.Наименование КАК ПриложениеНаименование,
	|	ОрганизацииОтчетности.ВыводитьВКалендарь КАК ВыводитьВКалендарь
	|ИЗ
	|	РегистрСведений.ОрганизацииОтчетностиОблачныхПриложений КАК ОрганизацииОтчетности
	|ГДЕ
	|	ОрганизацииОтчетности.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриложениеНаименование,
	|	ОрганизацияНаименование";
	
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Изменяет состояние (выводить или нет в календарь отчетности) данные по организации из облачного приложения
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь
//   Организация - СправочникСсылка.ОблачныеОрганизации - организация из облачного приложения
//   ВыводитьВКалендарь - Булево - признак того, нужно ли организацию выводить в Календарь отчетности.
//
Процедура УстановитьСостояние(Пользователь, Организация, ВыводитьВКалендарь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Приложение = Организация.Владелец;
	МенеджерЗаписи.ВыводитьВКалендарь = ВыводитьВКалендарь;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет все организации приложения из списка подключенных к календарю отчетности.
// Облачное приложение становится "отключенным".
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь
//   Приложение - СправочникСсылка.ОблачныеОрганизации - экземпляр облачного приложения
//
Процедура ОтключитьПриложение(Пользователь, Приложение) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли