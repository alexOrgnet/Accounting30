#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа().

Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: заполняет в регистре измерение ВидРасходовНУ
// значением ПеречислениеСсылка.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности;
// вызывается в версии, в которой добавлено измерение.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьВидРасходовНУ(ПараметрыОбработчика) Экспорт
	
	Курсор = Неопределено;
	ПараметрыОбработчика.Свойство("Курсор", Курсор);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.Период КАК Период
	|ИЗ
	|	РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)
	|	И ДанныеРегистра.Регистратор.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеРегистра.Период УБЫВ,
	|	Ссылка";
	
	Запрос = Новый Запрос;
	Если Не ЗначениеЗаполнено(Курсор) Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "ДанныеРегистра");
		СхемаЗапроса.Оператор.Отбор.Добавить(
			"ДанныеРегистра.Регистратор < &Регистратор И ДанныеРегистра.Период = &Период ИЛИ ДанныеРегистра.Период < &Период");
		ТекстЗапроса = СхемаЗапроса.Схема.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Регистратор", Курсор.Регистратор);
		Запрос.УстановитьПараметр("Период", Курсор.Период);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Курсор = Новый Структура("Период, Регистратор", Выборка.Период, Выборка.Ссылка);

		Регистратор = Выборка.Ссылка;
		
		ПараметрыОбработчика.Вставить("Курсор", Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.РасчетБазыНормированияПоДоговорамСтрахования.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				Если Не ЗначениеЗаполнено(Запись.ВидРасходовНУ) Тогда
					Запись.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетБазыНормированияПоДоговорамСтрахования,
				Регистратор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

// Проверяет, все ли документы были обработаны процедурой ЗаполнитьВидРасходовНУ()
//
// Параметры:
//   Параметры - Структура - см. документацию к БСП.
//
// Возвращаемое значение:
//   Булево - Истина, то можно редактировать и записывать данные,
//            Ложь - данные недоступны, пока не будут обработаны процедурой обновления.
//
Функция ЗаполненыВидыРасходовНУ(Параметры) Экспорт

	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Данные, "ВидОперации");
	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("Строка") Тогда
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов;
	Иначе
		ВидОперации = Параметры.Данные.ВидОперации;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли