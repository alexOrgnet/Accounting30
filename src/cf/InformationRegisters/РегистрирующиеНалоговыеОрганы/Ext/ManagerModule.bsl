#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Загружает в фоне актуальные коды регистрирующих органов из сервиса классификаторов
// Параметры см. в комментарии к ДлительныеОперации.ВыполнитьВФоне()
//
Процедура ЗагрузитьДанныеИзСервисаКлассификаторов(Параметры, АдресРезультата) Экспорт

	Классификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВСервисеКлассификаторов());
	РезультатЗагрузкиСтавок = РаботаСКлассификаторами.ОбновитьКлассификаторы(Классификаторы);
		
	Если Не ПустаяСтрока(РезультатЗагрузкиСтавок.КодОшибки) Тогда
		
		ШаблонСообщения = НСтр("ru = 'При загрузке кодов регистрирующих органов с сервиса классификаторов возникла ошибка:
			|%1'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, РезультатЗагрузкиСтавок.ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление кодов регистрирующих органов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.РегистрирующиеНалоговыеОрганы, ,
			ТекстСообщения);
			
	КонецЕсли;

КонецПроцедуры

// Возвращает идентификатор классификатора регистрирующих органов в сервисе классификаторов
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторВСервисеКлассификаторов() Экспорт
	
	Возврат "RegistrationTaxOffice";
	
КонецФункции

// Возвращает список налоговых органов, выполняющих функции регистрации ООО и ИП
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СписокРегистрирующихОрганов() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегистрирующиеНалоговыеОрганы.КодНалоговогоОргана КАК Код,
	|	РегистрирующиеНалоговыеОрганы.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РегистрирующиеНалоговыеОрганы КАК РегистрирующиеНалоговыеОрганы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Код, СтрШаблон("%1 - %2", Выборка.Код, Выборка.Наименование));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает код регистрирующего органа в конкретном регионе
//
// Возвращаемое значение:
//   Строка - 4-значный код по СОУН
//
Функция КодРегистрирующегоОрганаВРегионе(КодРегиона) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(РегистрирующиеНалоговыеОрганы.КодНалоговогоОргана), """") КАК Код
	|ИЗ
	|	РегистрСведений.РегистрирующиеНалоговыеОрганы КАК РегистрирующиеНалоговыеОрганы
	|ГДЕ
	|	РегистрирующиеНалоговыеОрганы.КодРегиона = &КодРегиона");
	
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Код;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ИнтернетПоддержкаПользователей.РаботаСКлассификаторами
// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Налоговые органы, осуществляющие регистрацию ЮЛ и ИП'");
	Описатель.Идентификатор          = ИдентификаторВСервисеКлассификаторов();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторВСервисеКлассификаторов() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	
	ДанныеКлассификатора.Колонки.Добавить("КодРегиона", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ДанныеКлассификатора.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(4));
	ДанныеКлассификатора.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	// Прочитаем данные объекта XDTO из файла XML
	НовоеЧтениеXML = Новый ЧтениеXML;
	НовоеЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(НовоеЧтениеXML);
	
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	Если СвойстваОбъекта.Получить("РегистрирующийОрган") = Неопределено
		Или ТипЗнч(ОбъектXDTO.РегистрирующийОрган) <> Тип("СписокXDTO") Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выполнено обновление кодов регистрирующих органов: некорректный формат файла классификатора'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление кодов регистрирующих органов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.РегистрирующиеНалоговыеОрганы, ,
			ТекстСообщения);
		
		Обработан = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ОбъектXDTO.РегистрирующийОрган Цикл
		ЗаполнитьЗначенияСвойств(ДанныеКлассификатора.Добавить(), ТекущаяСтрока);
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.РегистрирующиеНалоговыеОрганы.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ДанныеКлассификатора);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
	Обработан = Не ЕстьОшибки;
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКлассификаторами

#КонецОбласти

#КонецЕсли