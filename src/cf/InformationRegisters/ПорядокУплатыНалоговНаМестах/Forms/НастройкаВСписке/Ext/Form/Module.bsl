
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	Если НЕ ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Параметры.Налог) Тогда
		ВызватьИсключение НСтр("ru = 'Форма предназначена для открытия только из настроек конкретного налога'");
	КонецЕсли;
	
	// Инициализируем параметры формы
	Организация = Параметры.Организация;
	Налог = Параметры.Налог;
		
	КодНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Налог, "Код");
		
	ТекстПодсказкиДействие = "";
	ТекстПодсказкиДанные = "";
	
	Если КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		
		// Для транспортного налога используется новый регистр настроек.
		// Если не выполнен обработчик начального заполнения новых настроек, то блокируем форму.
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
			РегистрыСведений.ПорядокУплатыНалоговПоРегионам.СоздатьНаборЗаписей(),
			ЭтотОбъект);
		
		ШаблонЗаголовка = НСтр("ru='Транспортный налог: уплата авансов (%1)'");
		
		ТекстПодсказкиДействие = НСтр("ru = 'Регионы, в которых уплачиваются авансы по налогу'");
		ТекстПодсказкиДанные = СтрШаблон(
			НСтр("ru = 'Показаны регионы, где <a href=""%1"">зарегистрированы транспортные средства</a>.'"), "РегистрацииТранспортныхСредств");
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыНалоговПоРегионам) Тогда
			Элементы.УплатаНалога.ТолькоПросмотр = Истина;
		КонецЕсли;	
		
	ИначеЕсли КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
		
		ШаблонЗаголовка = НСтр("ru='Земельный налог: уплата авансов (%1)'");
					
		ТекстПодсказкиДействие = НСтр("ru = 'Налоговые органы, в которые уплачиваются авансы по налогу'");
		ТекстПодсказкиДанные = СтрШаблон(
			НСтр("ru = 'Показаны регистрации в налоговых органах <a href=""%1"">по месту нахождения земельных участков</a>.'"),
			"РегистрацииЗемельныхУчастков");
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах) Тогда
			Элементы.УплатаНалога.ТолькоПросмотр = Истина;
		КонецЕсли;	
		
	ИначеЕсли КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		
		// Для налога на имущество используется новый регистр настроек.
		// Если не выполнен обработчик начального заполнения новых настроек, то блокируем форму.
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
			РегистрыСведений.ПорядокУплатыНалоговПоРегионам.СоздатьНаборЗаписей(),
			ЭтотОбъект);
		
		ШаблонЗаголовка = НСтр("ru='Налог на имущество: уплата авансов (%1)'");
		
		ТекстПодсказкиДействие = НСтр("ru = 'Регионы, в которых уплачиваются авансы по налогу'");
		ТекстПодсказкиДанные = СтрШаблон(
			НСтр("ru = 'Показаны регионы, где <a href=""%1"">учтено недвижимое имущество</a>.'"), "ОбъектыСОсобымПорядкомНалогообложения");
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыНалоговПоРегионам) Тогда
			Элементы.УплатаНалога.ТолькоПросмотр = Истина;
		КонецЕсли;	

	Иначе	
			
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Настройка уплаты авансов не поддерживается для налога (%1)'"), Налог);
		
	КонецЕсли;
	
	НачалоИспользованияНастроек = РегистрыСведений.ПорядокУплатыНалоговПоРегионам.НачалоИспользованияНастроек(КодНалога); 
	
	// Данная форма настроек применяется в отношении налоговых периодов начиная с 2021 года.
	// Ограничения "снизу" нет, но настройка "задним числом" маловероятна.
	ДатаИзменения = Макс(НачалоИспользованияНастроек, НачалоГода(ОбщегоНазначения.РабочаяДатаПользователя()));
	
	Заголовок = СтрШаблон(ШаблонЗаголовка, Организация);
	
	Элементы.ПодсказкаДействие.Заголовок = ТекстПодсказкиДействие;
	Элементы.ПодсказкаДанные.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказкиДанные);
	
	Элементы.НадписьИстория.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(
		Нстр("ru='Для просмотра настроек за периоды до %1 года перейдите в <a href=""ПорядокУплатыНалоговНаМестах"">Порядок уплаты налогов на местах</a>.'")),
		Год(НачалоИспользованияНастроек));
							
	ЗаполнитьТаблицуУплатаАвансов();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбъектыСОсобымПорядкомНалогообложения" Тогда
		
		ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РегистрацииТранспортныхСредств" Тогда
		
		ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("РегистрСведений.РегистрацияТранспортныхСредств.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РегистрацииЗемельныхУчастков" Тогда
		
		ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("РегистрСведений.РегистрацияЗемельныхУчастков.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияПриИзменении(Элемент)
		
	Если ДатаИзменения >= НачалоИспользованияНастроек Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
		ЗаполнитьТаблицуУплатаАвансов();
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИстория;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УплачиваютсяАвансыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УплатаНалога.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период",      ДатаИзменения);
	СтруктураЗаписи.Вставить("Организация", Организация);
	СтруктураЗаписи.Вставить("Налог",       Налог);
	
	Если КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() 
		 Или КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		СтруктураЗаписи.Вставить("КодРегиона", ТекущиеДанные.КодРегиона);
	Иначе
		СтруктураЗаписи.Вставить("РегистрацияВНалоговомОргане", ТекущиеДанные.РегистрацияВНалоговомОргане);
	КонецЕсли;	
	
	СтруктураЗаписи.Вставить("УплачиваютсяАвансы", ТекущиеДанные.УплачиваютсяАвансы);
	
	Попытка
		ЗаписатьИзменения(СтруктураЗаписи);
	Исключение
		// Отменим выбор
		ТекущиеДанные.УплачиваютсяАвансы = Не ТекущиеДанные.УплачиваютсяАвансы; 
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИсторияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПорядокУплатыНалоговНаМестах" Тогда
	
		ПараметрыФормы = Новый Структура("Налог, Отбор",
			Налог,
			Новый Структура("Организация", Организация));
		
		ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговНаМестах.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект);
			
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ДобавитьГод(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ДобавитьГод(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Форма.Элементы.ГруппаРегистрацияВНалоговомОргане.Видимость = (Форма.КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог());
	Форма.Элементы.НаименованиеРегиона.Видимость = (Форма.КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество()
		Или Форма.КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог());
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуУплатаАвансов()

	УплатаНалога.Очистить();

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Налог", Налог);
	Запрос.УстановитьПараметр("Период", ДатаИзменения);
	
	Если КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		Запрос.Текст = ТекстЗапросаУплатаАвансовНалогНаИмущество();
	ИначеЕсли КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		Запрос.Текст = ТекстЗапросаУплатаАвансовТранспортныйНалог();
		// В расчете налога участвуют объекты, которые зарегистрированы (и не сняты с учета) по 15 января включительно.
		// Не ограничиваем период "сверху", т.к. настройки текущего года могут применяться и в дальнейшем.
		Запрос.УстановитьПараметр("НачалоГода", Дата(Год(ДатаИзменения), 1, 15)); 
	ИначеЕсли КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
		Запрос.Текст = ТекстЗапросаУплатаАвансовЗемельныйНалог();
		// В расчете налога участвуют объекты, которые зарегистрированы (и не сняты с учета) по 15 января включительно.
		// Не ограничиваем период "сверху", т.к. настройки текущего года могут применяться и в дальнейшем.
		Запрос.УстановитьПараметр("НачалоГода", Дата(Год(ДатаИзменения), 1, 15)); 
	Иначе
		Возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	// Заполним классификатор регионов для формирования наименований регионов.
	// В форме закэшированы данные классификатора, чтобы при каждом запросе данных с клиента (при изменении периода)
	// не "дергать" его заново.
	ЗаполнитьКлассификаторРегионов();
	
	ВыборкаПоРегионам = РезультатЗапроса.Выбрать();
	ШаблонПредставления = НСтр("ru='%1, %2 %3'");  //например: "77, Москва г" 
	ПоискВКлассификаторе = Новый Структура("КодСубъектаРФ");
	
	Пока ВыборкаПоРегионам.Следующий() Цикл
		
		СтрокаРегиона = УплатаНалога.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРегиона, ВыборкаПоРегионам);
		
		ПоискВКлассификаторе.КодСубъектаРФ = ВыборкаПоРегионам.КодРегиона;
		СтрокиКлассификатора = КлассификаторСубъектовРФ.НайтиСтроки(ПоискВКлассификаторе);
		Если СтрокиКлассификатора.Количество() > 0 Тогда
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
				СтрокиКлассификатора[0].КодСубъектаРФ,
				СтрокиКлассификатора[0].Наименование,
				СтрокиКлассификатора[0].Сокращение);
		Иначе
			Представление = ВыборкаПоРегионам.КодРегиона;	
		КонецЕсли;	
		
		СтрокаРегиона.НаименованиеРегиона = Представление;
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаУплатаАвансовНалогНаИмущество()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.КодРегиона КАК КодРегиона
	|ПОМЕСТИТЬ Регионы
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.КодРегиона
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Организация = &Организация
	|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Период > &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&Период, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодРегиона
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.Период > &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУплатыНалоговПоРегионам.КодРегиона КАК КодРегиона,
	|	ПорядокУплатыНалоговПоРегионам.УплачиваютсяАвансы КАК УплачиваютсяАвансы
	|ПОМЕСТИТЬ УплатаАвансов
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговПоРегионам.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Налог = &Налог) КАК ПорядокУплатыНалоговПоРегионам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодРегиона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регионы.КодРегиона КАК КодРегиона,
	|	ЕСТЬNULL(УплатаАвансов.УплачиваютсяАвансы, ЛОЖЬ) КАК УплачиваютсяАвансы
	|ИЗ
	|	Регионы КАК Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ УплатаАвансов КАК УплатаАвансов
	|		ПО Регионы.КодРегиона = УплатаАвансов.КодРегиона";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаУплатаАвансовТранспортныйНалог()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган.КодРегиона КАК КодРегиона
	|ПОМЕСТИТЬ Регионы
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&НачалоГода, Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
	|ГДЕ
	|	РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
	|	И РегистрацияТранспортныхСредствСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияТранспортныхСредств.НалоговыйОрган.КодРегиона
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
	|ГДЕ
	|	РегистрацияТранспортныхСредств.Организация = &Организация
	|	И РегистрацияТранспортныхСредств.Период > &НачалоГода
	|	И РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
	|	И РегистрацияТранспортныхСредств.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&НачалоГода, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодРегиона
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.Период > &НачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУплатыНалоговПоРегионам.КодРегиона КАК КодРегиона,
	|	ПорядокУплатыНалоговПоРегионам.УплачиваютсяАвансы КАК УплачиваютсяАвансы
	|ПОМЕСТИТЬ УплатаАвансов
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговПоРегионам.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Налог = &Налог) КАК ПорядокУплатыНалоговПоРегионам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодРегиона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регионы.КодРегиона КАК КодРегиона,
	|	ЕСТЬNULL(УплатаАвансов.УплачиваютсяАвансы, ЛОЖЬ) КАК УплачиваютсяАвансы
	|ИЗ
	|	Регионы КАК Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ УплатаАвансов КАК УплатаАвансов
	|		ПО Регионы.КодРегиона = УплатаАвансов.КодРегиона";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ТекстЗапросаУплатаАвансовЗемельныйНалог()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияЗемельныхУчастковСрезПоследних.НалоговыйОрган КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ РегистрацииУчастков
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&НачалоГода, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
	|ГДЕ
	|	РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу
	|	И РегистрацияЗемельныхУчастковСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияЗемельныхУчастков.НалоговыйОрган
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.Организация = &Организация
	|	И РегистрацияЗемельныхУчастков.Период > &НачалоГода
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И РегистрацияЗемельныхУчастков.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&НачалоГода, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.Период > &НачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УплатаАвансовПоНалогамНаМестахСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	УплатаАвансовПоНалогамНаМестахСрезПоследних.УплачиваютсяАвансы КАК УплачиваютсяАвансы
	|ПОМЕСТИТЬ УплатаАвансов
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Налог = &Налог) КАК УплатаАвансовПоНалогамНаМестахСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииУчастков.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	РегистрацииУчастков.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(УплатаАвансов.УплачиваютсяАвансы, ЛОЖЬ) КАК УплачиваютсяАвансы
	|ИЗ
	|	РегистрацииУчастков КАК РегистрацииУчастков
	|		ЛЕВОЕ СОЕДИНЕНИЕ УплатаАвансов КАК УплатаАвансов
	|		ПО РегистрацииУчастков.РегистрацияВНалоговомОргане = УплатаАвансов.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодРегиона";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ЗаполнитьКлассификаторРегионов()
	
	Если КлассификаторСубъектовРФ.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;	
			
	КлассификаторСубъектовРФ.Загрузить(АдресныйКлассификатор.СубъектыРФ());
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьИзменения(СтруктураЗаписи)
	
	Если КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Или
		 КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		МенеджерЗаписи = РегистрыСведений.ПорядокУплатыНалоговПоРегионам.СоздатьМенеджерЗаписи();
	Иначе
		МенеджерЗаписи = РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьМенеджерЗаписи();
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи,, "УплачиваютсяАвансы");
		
	// Прочитаем запись из БД, чтобы не затереть те поля, которые здесь не меняются
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.УплачиваютсяАвансы = СтруктураЗаписи.УплачиваютсяАвансы;
	Иначе
		// Значения измерений сброшены - заполним вновь
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	КонецЕсли;
		
	МенеджерЗаписи.Записать(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГод(ЧислоЛет)
	
	Год = Год(ДатаИзменения) + ЧислоЛет;
	ДатаИзменения = Дата(Год, 1, 1);
	
	Если ДатаИзменения >= НачалоИспользованияНастроек Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
		ЗаполнитьТаблицуУплатаАвансов();
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИстория;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
