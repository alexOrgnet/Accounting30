#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры для выбора кода льготы.
//
// Параметры:
//  НазваниеМакета - Строка - Макет из которого необходимо получить списки кодов.
//  ТекущийПериод - Дата - Период для первоначального позиционирования формы выбора.
// 
// Возвращаемое значение:
//  Параметры - Структура.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений;
	
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов"           , КодыЛьгот);
	Параметры.Вставить("СписокПериодовДействия", СписокОбластей);
	Параметры.Вставить("ТекущийПериод"         , НазваниеОбласти);
	
	Возврат Параметры;
	
КонецФункции

Процедура ПроверитьЗначениеОпцииВедетсяУчетПлатежейВПлатон(НаборЗаписей, Отказ, Замещение) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетПлатежейВПлатон") И НаборЗаписей.Количество() > 0 Тогда
	
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.ЗарегистрированоВРеестреСистемыПлатон Тогда
		
				УстановитьПривилегированныйРежим(Истина);
				Константы.ВедетсяУчетПлатежейВПлатон.Установить(Истина);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьОпциюУплачиваетсяТранспортныйНалог(НаборЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УплачиваетсяТранспортныйНалог = Константы.УплачиваетсяТранспортныйНалог.Получить();
	ВНабореЕстьРегистрация = Ложь;
	
	// Если записывается первая регистрация (других нет), то включаем опцию
	Для Каждого Запись Из НаборЗаписей Цикл		
		ВНабореЕстьРегистрация = ВНабореЕстьРегистрация Или Запись.ВключатьВНалоговуюБазу;
		Если Запись.ВключатьВНалоговуюБазу И Не УплачиваетсяТранспортныйНалог Тогда		
			Константы.УплачиваетсяТранспортныйНалог.Установить(Истина);
			Возврат;			
		КонецЕсли;
	КонецЦикла;
	
	// Если в наборе нет записей регистрации (т.е. либо только записи о снятии с учета, либо удаление регистрации),
	// то, возможно, опцию нужно отключить
	Если УплачиваетсяТранспортныйНалог И Не ВНабореЕстьРегистрация И Не ЕстьТранспортныеСредства() Тогда
		Константы.УплачиваетсяТранспортныйНалог.Установить(Ложь);
	КонецЕсли;		
	
КонецПроцедуры

Функция СписокКодовЕдиницИзмеренияНалоговойБазы() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", НСтр("ru='л. с.'"));
	Список.Добавить("999", НСтр("ru='Кгс'"));
	Список.Добавить("181", НСтр("ru='БРТ'"));
	Список.Добавить("796", НСтр("ru='шт'"));
	
	Возврат Список;
	
КонецФункции

Функция КодыВидовТС(Год) Экспорт

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = ПолучитьМакет("ВидыТранспортныхСредств");
	ТекущаяОбласть = ОбластьМакетаАктуальныхВидовТС(Макет, Год);  
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции

Функция КатегорииТСПоКодуВида() Экспорт

	КатегорииТСПоКодуВида = Новый Соответствие;
	
	Макет = ПолучитьМакет("КодыВидовИКатегорииТС");
	КодыВидовИКатегорииТС = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	Для Каждого СтрокаВида Из КодыВидовИКатегорииТС Цикл
		КатегорииТСПоКодуВида.Вставить(СтрокаВида.КодВида, СтрокаВида.НомерКатегории);
	КонецЦикла; 
	
	Возврат КатегорииТСПоКодуВида;
	
КонецФункции

Функция ЕстьТранспортныеСредства(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода",  ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.Организация = &Организация
		|	И РегистрацияТранспортныхСредств.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу";
				
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьЛьготыПоТранспортномуНалогу(Организация, Период, Периодичность) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	// ТС, снятые с учета до 15.01 или поставленные на учет после 15.12 не попадут в расчет налога
	Запрос.УстановитьПараметр("НачалоПериода", Дата(Год(НачалоПериода), Месяц(НачалоПериода), 15));
	Запрос.УстановитьПараметр("КонецПериода", Дата(Год(КонецПериода), Месяц(КонецПериода), 15));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияТССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РегистрацияТССрезПоследних
	|ГДЕ
	|	РегистрацияТССрезПоследних.ВключатьВНалоговуюБазу
	|	И НЕ РегистрацияТССрезПоследних.НалоговаяЛьгота В (ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ПустаяССылка), ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияТранспортныхСредств.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
	|ГДЕ
	|	РегистрацияТранспортныхСредств.Организация = &Организация
	|	И РегистрацияТранспортныхСредств.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
	|	И НЕ РегистрацияТранспортныхСредств.НалоговаяЛьгота В (ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ПустаяССылка), ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется))";
		
	Возврат Не Запрос.Выполнить().Пустой();	
		
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьОпциюУплачиваетсяТранспортныйНалог() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЕстьТранспортныеСредства() Тогда
		Константы.УплачиваетсяТранспортныйНалог.Установить(Истина);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть;
	
КонецПроцедуры

Функция ОбластьМакетаАктуальныхВидовТС(Макет, Год)
			
	ОбластиМакета = Новый ТаблицаЗначений;
	ОбластиМакета.Колонки.Добавить("ИмяОбласти", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ОбластиМакета.Колонки.Добавить("Год", ОбщегоНазначения.ОписаниеТипаЧисло(4,0,ДопустимыйЗнак.Неотрицательный));
	
	Для каждого Область Из Макет.Области Цикл
		
		Если СтрНайти(Область.Имя, "Область") = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		ГодОбласти = Число(Лев(СтрЗаменить(Область.Имя, "Область", ""), 4));
		Если ГодОбласти > Год Тогда
			Продолжить;
		КонецЕсли;	
				
		ОбластьМакета = ОбластиМакета.Добавить();
		ОбластьМакета.ИмяОбласти = Область.Имя;
		ОбластьМакета.Год = ГодОбласти;
		
	КонецЦикла; 
			
	ОбластиМакета.Сортировать("Год Убыв");
	
	Если ОбластиМакета.Количество() > 0 Тогда
		Возврат Макет.Области.Найти(ОбластиМакета[0].ИмяОбласти);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
КонецФункции	

#КонецОбласти

#КонецЕсли