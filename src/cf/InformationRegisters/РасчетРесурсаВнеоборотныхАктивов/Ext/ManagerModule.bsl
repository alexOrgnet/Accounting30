#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Помещает в набор записей по регистру данные для записи.
//
// Параметры:
//  НаборЗаписей - НаборЗаписей.РасчетРесурсаВнеоборотныхАктивов - заполняемая коллекция
//  Данные       - ТаблицаЗначений - см. НовыйДанныеНабораЗаписей, записываемые данные
//  ПериодЗаписи - Дата - период набора (одинаковый во всех записях набора)
//  Организация  - СправочникСсылка.Организации - организация набора (одинаковая во всех записях набора)
//
Процедура Установить(НаборЗаписей, Данные, ПериодЗаписи, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	НаборЗаписей.Загрузить(Данные);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Организация = Организация;
		Запись.Период      = ПериодЗаписи;
	КонецЦикла;
	
КонецПроцедуры

// Конструктор коллекции, описываюший данные набора записей (ту часть, что может отличаться в разных записях набора)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции
//
Функция НовыйДанныеНабораЗаписей() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов;
	
	ДанныеНабора = Новый ТаблицаЗначений;
	ДанныеНабора.Колонки.Добавить("Объект", МетаданныеРегистра.Измерения.Объект.Тип);
	ДанныеНабора.Колонки.Добавить("Ресурс", МетаданныеРегистра.Ресурсы.Ресурс.Тип);
	
	Возврат ДанныеНабора;
	
КонецФункции

// Заполняет данные набора записей результатом расчета амортизации.
// Используется для алгоритма расчета, совместимого с ПБУ 6.
// Для актуального алгоритма см. АмортизацияАктивов.РассчитатьИтогиРесурса
//
// Параметры:
//  Ресурс            - ТаблицаЗначений - см. НовыйДанныеНабораЗаписей, заполняемая коллекция.
//  РасчетАмортизации - ТаблицаЗначений - см. УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации")
//
Процедура ЗаполнитьРезультатомРасчетаАмортизации(Ресурс, РасчетАмортизации) Экспорт
	
	ЗаписиРесурс = Новый Соответствие;
	
	Для Каждого ЗаписьРасчет Из РасчетАмортизации Цикл
		
		Если ЗаписьРасчет.ОстатокОбъемаПродукции <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗаписьРасчет.КомпонентАмортизации) = Тип("СправочникСсылка.КомпонентыАмортизацииОС")
			И ЗначениеЗаполнено(ЗаписьРасчет.КомпонентАмортизации) Тогда
			Объект = ЗаписьРасчет.КомпонентАмортизации;
		Иначе
			Объект = ЗаписьРасчет.Объект;
		КонецЕсли;
		
		ОстатокРесурса = ЗаписьРасчет.ОстатокОбъемаПродукции - ЗаписьРасчет.ОбъемПродукцииРабот;
		
		ПредыдущаяЗапись = ЗаписиРесурс[Объект];
		
		Если ПредыдущаяЗапись = Неопределено Тогда
			
			ЗаписьРесурс = Ресурс.Добавить();
			ЗаписьРесурс.Объект = Объект;
			ЗаписьРесурс.Ресурс = ОстатокРесурса;
			
			ЗаписиРесурс.Вставить(Объект, ОстатокРесурса);
			
		ИначеЕсли ОстатокРесурса < ПредыдущаяЗапись.Ресурс Тогда
			
			ПредыдущаяЗапись.Ресурс = ОстатокРесурса;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует контейнер для последующего заполнения результатами, сохраняемого для следующего расчета.
//
// Параметры:
//  Контейнер - Структура - заполняемая коллекция
//
Процедура ИнициализироватьКонтейнерИтогов(Контейнер) Экспорт
	
	Контейнер.Вставить("Ресурс", НовыйДанныеНабораЗаписей());
	
КонецПроцедуры

// Помещает в коллекцию движений документа актуализированные значения остатков ресурса.
//
// Параметры:
//  Движения         - КоллекцияДвижений - заполняемая коллекция
//  ТаблицаРеквизиты - ТаблицаЗначений - см. ЗакрытиеМесяца.ПодготовитьПараметрыТаблицаРеквизиты
//  Контейнер        - Структура - предполагается, что инициализирована с помощью ИнициализироватьКонтейнерИтогов
//
Процедура ЗаписатьИтоги(Движения, ТаблицаРеквизиты, Контейнер) Экспорт
	
	Если Не Контейнер.Свойство("Ресурс") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Контейнер.Ресурс,
		ТаблицаРеквизиты,
		Метаданные.РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов.Имя);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик заполнения регистра данными регистра РасчетАмортизации.
// Ранее остаток ресурса определялся исходя из оборота регистра ВыработкаОС с начала времен.
// Это могло быть приемлемым, пока ресурс считался практически неизменным за все время использования актива.
// Но стало неудобным с начала применения ФСБУ 6.
// Поэтому остаток ресурса при начислении амортизации переносится в РасчетРесурсаВнеоборотныхАктивов.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьДаннымиРасчетАмортизации(ПараметрыОбработчика) Экспорт
	
	// За один вызов обрабатываем один документ, исходя из предположения,
	// что в основном это регламентные документы расчета амортизации
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РегламентнаяОперация"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВозвратОСОтАрендатора"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ИзменениеУсловийАренды"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПередачаОСВАренду"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПеремещениеОС"));
	УчетОбособленныхПодразделений.ДобавитьТипДокументаАвизоОСИсходящее(ТипыРегистраторов);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.МоментВремени КАК Курсор,
	|	РасчетАмортизации.Период КАК Период
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетРесурсаВнеоборотныхАктивов КАК РасчетРесурсаВнеоборотныхАктивов
	|		ПО РасчетАмортизации.Регистратор = РасчетРесурсаВнеоборотныхАктивов.Регистратор
	|ГДЕ
	|	РасчетРесурсаВнеоборотныхАктивов.Регистратор ЕСТЬ NULL
	|	И РасчетАмортизации.ОбъемПродукцииРаботДляАмортизации > 0
	|	И ТИПЗНАЧЕНИЯ(РасчетАмортизации.Регистратор) В (&ТипыРегистраторов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетАмортизации.МоментВремени УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		ЗапросРасчетАмортизации = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РасчетАмортизации");
		ЗапросРасчетАмортизации.Оператор.Отбор.Добавить("РасчетАмортизации.МоментВремени < &Курсор");
		ТекстЗапроса = ЗапросРасчетАмортизации.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор",            Курсор);
	Запрос.УстановитьПараметр("ТипыРегистраторов", ТипыРегистраторов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
	
	Регистратор = Выборка.Регистратор;
	Период      = Выборка.Период;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КомпонентыАмортизации.Ссылка, Расчет.Объект) КАК Объект,
	|	Расчет.Организация КАК Организация,
	|	МИНИМУМ(Расчет.ОстатокОбъемаПродукции - Расчет.ОбъемПродукцииРабот) КАК Ресурс,
	|	МАКСИМУМ(Расчет.Объект) КАК ОбъектВладелец
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК Расчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
	|		ПО Расчет.КомпонентАмортизации = КомпонентыАмортизации.Ссылка
	|ГДЕ
	|	Расчет.Активность
	|	И Расчет.Регистратор = &Регистратор
	|	И Расчет.ОстатокОбъемаПродукции > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(КомпонентыАмортизации.Ссылка, Расчет.Объект),
	|	Расчет.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектВладелец,
	|	Объект";
	// См. также ЗаполнитьРезультатомРасчетаАмортизации
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетРесурсаВнеоборотныхАктивов.НаборЗаписей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
	
	НаборЗаписей = РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		// Выполнение обработчика для регламентной операции, выполненной в новой версии, вероятно,
		// приведет к некорректному результату. Поэтому это здесь предотвращаем.
		//
		// Для этого реализуем оптимистическую блокировку:
		// если прочитанные ранее данные оказались изменены и это изменение материально,
		// то такое изменение приведет к появлению записей в наборе.
		//
		// Верно и обратное: выполнение регламентной операции до выполнения обработчика
		// может привести к некорректному результату.
		// Поэтому на время обработки регламентные операции блокируются.
		
		НаборЗаписей.Прочитать();
		Если Не ЗначениеЗаполнено(НаборЗаписей) Тогда
			
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Период      = Период;
				Запись.Регистратор = Регистратор;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщение = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ЗаполнитьДаннымиРасчетАмортизации.
                                    |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов,
			Регистратор,
			Сообщение);
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, требуется ли обработка данных с помощью ЗаполнитьДаннымиРасчетАмортизации.
//
// Параметры:
//  ПроверяемыйОбъект - Структура - см. документацию к БСП раздел "Блокировка необработанных данных в пользовательском интерфейсе"
// 
// Возвращаемое значение:
//  Булево - Ложь, если объект требует обработки.
//
Функция ЗаполненДаннымиРасчетАмортизации(ПроверяемыйОбъект) Экспорт
	
	// Реализуется только в документе (не в форме обработки Закрытие месяца),
	// так как в БСП 3.1.5 блокировка формы обработки фактически не поддерживается - 00-00425479
	
	Если ПроверяемыйОбъект.Метаданные <> Метаданные.Документы.РегламентнаяОперация Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПроверяемыйОбъект.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПроверяемыйОбъект.Отбор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетАмортизации.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.Регистратор = &Ссылка
	|	И РасчетАмортизации.ОбъемПродукцииРаботДляАмортизации > 0";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетРесурсаВнеоборотныхАктивов.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасчетРесурсаВнеоборотныхАктивов КАК РасчетРесурсаВнеоборотныхАктивов
	|ГДЕ
	|	РасчетРесурсаВнеоборотныхАктивов.Регистратор = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
