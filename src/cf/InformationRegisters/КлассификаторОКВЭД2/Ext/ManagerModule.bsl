#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Загружает в фоне актуальный классификатор ОКВЭД2 из сервиса классификаторов
// Параметры см. в комментарии к ДлительныеОперации.ВыполнитьВФоне()
//
Процедура ЗагрузитьДанныеИзСервисаКлассификаторов(Параметры, АдресРезультата) Экспорт
	
	Классификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВСервисеКлассификаторов());
	РезультатЗагрузки = РаботаСКлассификаторами.ОбновитьКлассификаторы(Классификаторы);
	
	Если Не ПустаяСтрока(РезультатЗагрузки.КодОшибки) Тогда
		
		ШаблонСообщения = НСтр("ru = 'При загрузке классификатора ОКВЭД ред. 2 из сервиса классификаторов возникла ошибка:
			|%1'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, РезультатЗагрузки.ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление классификатора ОКВЭД ред. 2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.КлассификаторОКВЭД2, ,
			ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификатор классификатора ОКВЭД2 в сервисе классификаторов
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторВСервисеКлассификаторов() Экспорт
	
	Возврат "OKVED2";
	
КонецФункции

// Возвращает наименование кода ОКВЭД2
//
// Параметры:
//	Код - Строка - Код, наименование которого необходимо получить
//
// Возвращаемое значение:
//   Строка - Наименование, соответствующее коду ОКВЭД2
//
Функция НаименованиеПоКоду(Код) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОКВЭД2.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|ГДЕ
	|	КлассификаторОКВЭД2.Код = &Код");
	
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Наименование;
	
КонецФункции

// Возвращает фиксированное соответствие "код и наименование" классификатора ОКВЭД2.
//
// Возвращаемое значение:
//	Соответствие - Фиксированное соответствие "код и наименование" классификатора ОКВЭД2.
//
Функция ФиксированноеСоответствиеКодНаименование() Экспорт

	Классификатор = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОКВЭД2.Код КАК Код,
	|	КлассификаторОКВЭД2.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Классификатор.Вставить(СокрЛП(Выборка.Код), СокрЛП(Выборка.Наименование));
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Классификатор);

КонецФункции

// Возвращает таблицу классификатора ОКВЭД2.
//
// Параметры:
//	ТолькоДоступныеДляВыбора - Булево - В таблицу будут включены только те строки, которые можно выбрать для вида деятельности организации.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица классификатора ОКВЭД2.
//
Функция ТаблицаКлассификатора(ТолькоДоступныеДляВыбора = Ложь) Экспорт
	
	КлассификаторОКВЭД2 = НовыйТаблицаДляПоискаОКВЭД();
	// Если выбираются только доступные для выбора,
	// то добавлять отдельную колонку "ДоступенДляВыбора" не имеет смысла,
	// т.к. все строки в результате будут доступны для выбора.
	Если НЕ ТолькоДоступныеДляВыбора Тогда
		КлассификаторОКВЭД2.Колонки.Добавить("ДоступенДляВыбора", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОКВЭД2.Код КАК Код,
	|	КлассификаторОКВЭД2.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступенДляВыбора = КодОКВЭД2ДоступенДляВыбора(Выборка.Код);
		Если ТолькоДоступныеДляВыбора
			И Не ДоступенДляВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = КлассификаторОКВЭД2.Добавить();
		НоваяСтрока.Код                 = Выборка.Код;
		НоваяСтрока.Наименование        = Выборка.Наименование;
		НоваяСтрока.ПредставлениеПоиска = Врег(Выборка.Код + " " + Выборка.Наименование);
		Если Не ТолькоДоступныеДляВыбора Тогда
			НоваяСтрока.ДоступенДляВыбора = ДоступенДляВыбора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КлассификаторОКВЭД2;
	
	
КонецФункции

// Возвращает пустую таблицу для поиска в классификаторе ОКВЭД2.
//
Функция НовыйТаблицаДляПоискаОКВЭД() Экспорт
	
	Схема = РегистрыСведений.КлассификаторОКВЭД2.ПолучитьМакет("ОтборОКВЭД");
	
	ТаблицаДляОтбораОКВЭД = Новый ТаблицаЗначений();
	
	Для Каждого Поле Из Схема.НаборыДанных.ОКВЭД.Поля Цикл
		ТаблицаДляОтбораОКВЭД.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
	КонецЦикла;
	
	Возврат ТаблицаДляОтбораОКВЭД;
	
КонецФункции

// Возвращает таблицу ОКВЭД2 с наложенным фильтром по СтрокаПоиска.
// Строка классификатора ОКВЭД включается в результат, если содержит все слова из СтрокаПоиска.
// 
// Параметры:
//  СтрокаПоиска         - Строка - Фильтр для отбора строк классификатора ОКВЭД2.
//  СписокВыбранныхКодов - СписокЗначений - Список, который содержит значения выбранных кодов ОКВЭД.
//  КлассификаторОКВЭД   - ТаблицаЗначений - Таблица классификатора ОКВЭД2. Структуру см. в НовыйТаблицаДляПоискаОКВЭД().
// 
// Возвращаемое значение:
//  Таблица - Таблица классификатора ОКВЭД2 с наложенным отбором по СтрокаПоиска с колонками:
//    - Код          - Строка - Код из классификатора ОКВЭД2
//    - Наименование - Строка - Наименование из классификатора ОКВЭД2
//    - Выбран       - Булево - Истина, если код содержится в СписокВыбранныхКодов.
//
Функция НайтиВКлассификаторе(СтрокаПоиска, СписокВыбранныхКодов, КлассификаторОКВЭД) Экспорт
	
	СхемаКомпоновки = РегистрыСведений.КлассификаторОКВЭД2.ПолучитьМакет("ОтборОКВЭД");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыбранныеОКВЭД", СписокВыбранныхКодов);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Слова = СтрРазделить(ВРег(СтрЗаменить(СтрокаПоиска, """", "")), " ", Ложь);
	Для Каждого Слово ИЗ Слова Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, "ПредставлениеПоиска", СокрЛП(Слово), ВидСравненияКомпоновкиДанных.Содержит);
	КонецЦикла;
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиДляКомпоновкиМакета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборы = Новый Структура("ТаблицаОКВЭД", КлассификаторОКВЭД);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Возвращает таблицу соответствия числового кода (первых 2 цифр - класса) и буквенного кода раздела ОКВЭД2 
//
// Возвращаемое значение:
//   ТаблицаЗначений
//    - Код - Строка - Первые 2 цифры числового кода из классификатора ОКВЭД2 (класс)
//    - Раздел - Строка - Буквенное обозначение раздела, в который входит указанный класс
//
Функция БуквенныеКодыРазделовОКВЭД2() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторОКВЭД2.Раздел КАК Раздел,
	|	ПОДСТРОКА(КлассификаторОКВЭД2.Код, 0, 2) КАК Код
	|ИЗ
	|	РегистрСведений.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует массив кодов ОКВЭД, исходя из возможной иерархии - от исходного к наиболее общему.
//
// Параметры:
//  Код - Строка - код ОКВЭД.
//
// Возвращаемое значение:
//  Массив - Массив - возможные коды ОКВЭД с учетом иерархии, от исходного к общему.
//
// Пример:
//  КодВИерархии("01.11.15") вернет массив ["01.11.15", "01.11.1", "01.11", "01.1", "01"]
//
Функция КодВИерархии(Знач Код) Экспорт
	
	Код = СокрЛП(Код);
	Результат = Новый Массив;
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Код, ".", "")) Тогда 
		Возврат Результат; // Корректный код может содержать только цифры и точки
	КонецЕсли;
	
	ДлинаКода = СтрДлина(Код); 
	Для Позиция = 0 По ДлинаКода Цикл
		
		ЧастьКода = Лев(Код, ДлинаКода - Позиция);
		Если СтрЗаканчиваетсяНа(ЧастьКода, ".") Тогда 
			Продолжить; // На точку код оканчиваться не может
		КонецЕсли;
		
		Результат.Добавить(ЧастьКода);
		Если ДлинаКода - Позиция <= 2 Тогда 
			Прервать; // Кодов из 1 символа не бывает
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ИнтернетПоддержкаПользователей.РаботаСКлассификаторами
// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Общероссийский классификатор видов экономической деятельности (ОКВЭД ред. 2)'");
	Описатель.Идентификатор          = ИдентификаторВСервисеКлассификаторов();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторВСервисеКлассификаторов() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеXML = ПолучитьИзВременногоХранилища(Адрес);
		ДанныеXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML);
		РезультатЧтенияXML = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ДанныеXML);
		
		НаборЗаписей = РегистрыСведений.КлассификаторОКВЭД2.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(РезультатЧтенияXML.Данные);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		Обработан = Истина;
	Исключение
		Обработан = Ложь;
		
		ЗаписьЖурналаРегистрации("ЗагрузкаКлассификатора",
			УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.КлассификаторОКВЭД2,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКлассификаторами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодОКВЭД2ДоступенДляВыбора(Код)
	
	КоличествоЦифрВКоде = СтрДлина(СтрЗаменить(Код, ".", ""));
	Возврат КоличествоЦифрВКоде >= 4;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьКлассификаторПриОбновленииИнформационнойБазы() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Макет = РегистрыСведений.КлассификаторОКВЭД2.ПолучитьМакет("ОКВЭД2");
	РезультатЧтенияXML = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст());
	
	НаборЗаписей = РегистрыСведений.КлассификаторОКВЭД2.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатЧтенияXML.Данные);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура ОбновитьНаименованияОКВЭД2() Экспорт
	
	ТаблицаИзменений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ПолучитьМакет("ОКВЭД2ИзмененияНаименований").ПолучитьТекст()).Данные;
	
	ИзмененныеКоды = ТаблицаИзменений.ВыгрузитьКолонку("Код");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененныеКоды", ИзмененныеКоды);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КодОКВЭД2 КАК КодОКВЭД2,
	|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодОКВЭД2 В(&ИзмененныеКоды)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеОКВЭД2 = СокрЛП(Выборка.НаименованиеОКВЭД2);
		
		СтруктураОтбора = Новый Структура("Код", СокрЛП(Выборка.КодОКВЭД2));
		Изменения = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Изменение Из Изменения Цикл
			Если НаименованиеОКВЭД2 = Изменение.СтароеНаименование Тогда
				НаименованиеОКВЭД2 = Изменение.НовоеНаименование;
			КонецЕсли;
		КонецЦикла;
		
		Если НаименованиеОКВЭД2 <> СокрЛП(Выборка.НаименованиеОКВЭД2) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НаименованиеОКВЭД2 = НаименованиеОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
#КонецЕсли