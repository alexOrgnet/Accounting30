#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Предназначен для хранения данных о начислении налога, передаваемых ФНС в ответ на запросы 6.1-6.4
// протокола обмена ПП АУСН.
//
// Формат v1 описывает передачу переплаты (в коллекции Krsb при пустой AccrualsAndDebts),
// однако xsd-схема не позволяет такой трюк.
// Также формат v1 предполагает передачу данных о пени, а v2 не предполагает такие данные.
// Поэтому данные о пени и переплате, поступившие из ФНС, не сохраняем.
// Типы документов Перечисления.ТипыДокументовАУСН.НалоговыеНачисленияВерсия1 и Перечисления.ТипыДокументовАУСН.ИсторияНалоговыхНачисленийВерсия1
// формата v1 считаются устаревшими. Данные, содержащиеся в этих документах, игнорируются.

#Область ПрограммныйИнтерфейс

// Опеределяет, принадлежит ли документ к типу, требующему обработки.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовАУСН
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоИсточникДанныхИзСервиса(ТипДокумента) Экспорт
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовАУСН.НалоговыеНачисления
		Или ТипДокумента = Перечисления.ТипыДокументовАУСН.ИсторияНалоговыхНачислений;
	
КонецФункции

// Загружает данными ответа о налоговых начислениях, полученными из сервиса АУСН
//
// Параметры:
//  ДанныеРасшифровки - Структура - см. ИнтеграцияАУСН.НовыеПараметрыРасшифровкиДанныхДокумента.
//    Ключ структуры "Ответ" должен содержать данные о налоговых начислениях, к ним относятся документы АУСН с типом
//    GetBalanceAccountResponse, GetTaxChargeHistoryResponse, GetBalanceAccountV2Response
//    или GetTaxChargeHistoryV2Response
//  Документ - ВыборкаИзРезультатаЗапроса - см. РегистрыСведений.ДокументыАУСН.НайтиДокументы
//  Ошибки - ТаблицаЗначений - см. ИнтеграцияАУСН.НовыйОписаниеОшибок
//
Процедура ЗаписатьДанныеИзСервиса(ДанныеРасшифровки, Документ, Ошибки) Экспорт
	
	СодержимоеДанныхСервиса = СодержимоеДанныхСервиса(ДанныеРасшифровки.Ответ);
	
	Если ЗначениеЗаполнено(СодержимоеДанныхСервиса.БлокОшибок) Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ДанныеРасшифровки.Фабрика.ЗаписатьXML(ЗаписьXML, ДанныеРасшифровки.Ответ, "Result"); 
		СодержаниеОшибки = ЗаписьXML.Закрыть();
		ИнтеграцияАУСН.ДобавитьОшибку(Ошибки, СодержаниеОшибки, Документ, Ложь);
		РегистрыСведений.РасчетНалогаАУСН.ЗаписатьОшибку(
			Документ.Организация, НачалоМесяца(Документ.ДатаИзменения), СодержаниеОшибки);
	КонецЕсли;
	
	Организация = Документ.Организация;
	ТипДокумента = Документ.Тип;
	ДатаЗапроса = Документ.ДатаИзменения;
	ИдентификаторБанка = Документ.ИдентификаторБанка;
	
	// Разные версии ответа немного отличаются
	ОписаниеТипаПакета = Новый Структура;
	ОписаниеТипаПакета.Вставить("Имя",                  ИмяПолезныхДанных(СодержимоеДанныхСервиса.БлокОсновныхДанных));
	ОписаниеТипаПакета.Вставить("ИмяНачислений",        "AusnTaxReport");
	ОписаниеТипаПакета.Вставить("РаздельныйУчетНалогов", Ложь);
	ОписаниеТипаПакета.Вставить("СодержитРасчетНалога",  Истина);
	
	ПолныеДанные = Не (ТипДокумента = Перечисления.ТипыДокументовАУСН.НалоговыеНачисления);
	
	Если ОписаниеТипаПакета.Имя = "TaxChargeWithInn" Или ОписаниеТипаПакета.Имя = "AccrualAndDebt" Тогда
		// Устаревшие версии
		ОписаниеТипаПакета.ИмяНачислений = "TaxCharges";
		ОписаниеТипаПакета.РаздельныйУчетНалогов = Истина;
	КонецЕсли;
	
	Если ОписаниеТипаПакета.Имя = "AccrualAndDebt" Тогда
		ОписаниеТипаПакета.СодержитРасчетНалога = Ложь;
	КонецЕсли;

	ДанныеПоПериодам = СгруппироватьПакетНачисленийПоПериодам(
		СодержимоеДанныхСервиса.БлокОсновныхДанных, ОписаниеТипаПакета);
	
	Для Каждого ДанныеПериода Из ДанныеПоПериодам Цикл
		
		// Считаем полные данные приоритетными: если они уже поступили,
		// то предварительные (не полные) перестаем загружать.
		Если Не ПолныеДанные Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗаписьСуществует
			|ИЗ
			|	РегистрСведений.НалоговыеНачисленияАУСН КАК НалоговыеНачисленияАУСН
			|ГДЕ
			|	НалоговыеНачисленияАУСН.Организация = &Организация
			|	И НалоговыеНачисленияАУСН.НалоговыйПериод = &НалоговыйПериод
			|	И НалоговыеНачисленияАУСН.ТипНачисления = &ТипНачисления";
			
			Запрос.УстановитьПараметр("НалоговыйПериод", ДанныеПериода.Ключ);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ТипНачисления", Перечисления.ТипыДокументовАУСН.ИсторияНалоговыхНачислений);

			Если Не Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Записи = СоздатьНаборЗаписей();
		Записи.Отбор.НалоговыйПериод.Установить(ДанныеПериода.Ключ);
		Записи.Отбор.Организация.Установить(Организация);
			
		Для Каждого Начисление Из ДанныеПериода.Значение Цикл
			
			Запись = Записи.Добавить();
			
			Запись.НалоговыйПериод = ДанныеПериода.Ключ;
			Запись.Организация = Организация;
			Запись.ДатаЗапроса = ДатаЗапроса;
			
			Запись.ИдентификаторНачисления = Начисление.TaxChargeId;
			Запись.ТипНачисления = Перечисления.ТипыНалоговыхНачисленийАУСН.ЗначениеПоИдентификатору(Начисление.GroupTypeCode);
			Запись.Начислено = Начисление.Amount;
			
			Если ОписаниеТипаПакета.РаздельныйУчетНалогов Тогда
				
				Если Запись.ТипНачисления = Перечисления.ТипыНалоговыхНачисленийАУСН.КорректировкаНаУменьшение Тогда
					Запись.Начислено = 0;
					Запись.Уменьшено = Начисление.Amount;
				Иначе
					Запись.Оплачено  = Начисление.PassedAmount;
				КонецЕсли;
				
			Иначе
				
				Запись.Оплачено  = Начисление.PaidSum;
				// из описания протокола: "Сумма может быть зачтена без фактической оплаты,
				// а за счет корректировок на уменьшение в этом же периоде"
				Запись.Уменьшено = Начисление.Amount - Начисление.PaidSum - Начисление.BalanceSum;
				
				Запись.ВОбработке = (Начисление.ActionIsBuf = 0);
				
			КонецЕсли;
			
			Запись.СрокОплаты   = Начисление.DueDate;
			Запись.ДатаСоздания = Начисление.CreationDate;
			
			Если ОписаниеТипаПакета.СодержитРасчетНалога Тогда
				
				// Для хранения сериализованного содержимого используется json-представление,
				// а не исходное xml-представление, чтобы избежать проблем с версионированием.
				Запись.РасчетНалога = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ИзвлечьПоляРасчетаНалога(Начисление.Estimation));
				
			КонецЕсли;
			
		КонецЦикла;
		
		НачатьТранзакцию();
		
		Попытка
			
			Записи.Записать(Истина);
			ПриЗаполненииДаннымиДоставленнымиИзСервиса(Записи, ДанныеПериода.Ключ, Организация, ИдентификаторБанка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор коллекции, содержащей краткий расчет налога АУСН
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйРасчетНалога() Экспорт
	
	Расчет = Новый Структура;
	Расчет.Вставить("Период",                   '0001-01-01'); // Month, Year
	Расчет.Вставить("Сумма",                    0);  // TaxAmount (IncomeTaxAmount, IncomeMinusExpenseTaxAmount, MinimumTaxRateAmount)
	Расчет.Вставить("ПредварительныйРасчет",    Ложь); // RsbStatus
	Расчет.Вставить("ОбъектНалогообложения",    Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка()); // EffectiveTaxType
	Расчет.Вставить("СтавкаНалога",             0); // TaxRateIncomeValue, TaxRateIncomeMinusExpenseValue
	Расчет.Вставить("Доходы",                   0); // IncomeTaxBaseAmount
	Расчет.Вставить("Расходы",                  0); // TotalExpense
	
	Возврат Расчет;
	
КонецФункции

// Определяет допустимые значения поля НалоговыйПериод
//
// Параметры:
//  Период - Дата - обозначает налоговый период (месяц)
// 
// Возвращаемое значение:
//  Дата
//
Функция НалоговыйПериод(Период) Экспорт
	Возврат НачалоМесяца(Период);
КонецФункции

// Определяет детальные данные расчета налога.
//
// Параметры:
//  Период - Дата - определяет налоговый период (месяц), за который выполняется расчет
//  Организация - СправочникСсылка.Организации - налогоплательщик
//  ИдентификаторНачисления - ОпределяемыйТип.ИдентификаторНачисленияАУСН - источник детальных данных в информационных системах ФНС
// 
// Возвращаемое значение:
//  Структура - см. НовыйРасчетНалога
//
Функция НайтиДанныеРасчетаНалога(Период, Организация, ИдентификаторНачисления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                  НалоговыйПериод(Период));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ИдентификаторНачисления", ИдентификаторНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.РасчетНалога КАК РасчетНалога
	|ИЗ
	|	РегистрСведений.НалоговыеНачисленияАУСН КАК Начисления
	|ГДЕ
	|	Начисления.НалоговыйПериод = &НалоговыйПериод
	|	И Начисления.ИдентификаторНачисления = &ИдентификаторНачисления
	|	И Начисления.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеРасчетаНалога(Выборка.РасчетНалога);
	
КонецФункции

// Десериализует детальные данные расчета налога
//
// Параметры:
//  СериализованныйРасчетНалога - Строка - json-представление объекта Estimations протокола обмена ПП АУСН версии 1.1.0.
//                                         При этом значения свойств приведены к числам, см. ИзвлечьПоляРасчетаНалога
// 
// Возвращаемое значение:
//  Структура - см. НовыйРасчетНалога
//
Функция ДанныеРасчетаНалога(СериализованныйРасчетНалога) Экспорт
	
	Расчет = НовыйРасчетНалога();
	
	Если ПустаяСтрока(СериализованныйРасчетНалога) Тогда
		Возврат Расчет;
	КонецЕсли;
	
	ДанныеФНС = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(СериализованныйРасчетНалога);
	Если ТипЗнч(ДанныеФНС) <> Тип("Структура") Тогда
		Возврат Расчет;
	КонецЕсли;
	
	Расчет.Сумма                 = ДанныеФНС.TaxAmount;
	Расчет.ПредварительныйРасчет = (ДанныеФНС.RsbStatus > 1);
	Расчет.Доходы                = ДанныеФНС.IncomeTaxBaseAmount;
	Расчет.ОбъектНалогообложения = ОбъектНалогообложенияПоУСН(ДанныеФНС.EffectiveTaxType);
	Если Расчет.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
		Расчет.СтавкаНалога = ДанныеФНС.TaxRateIncomeMinusExpenseValue;
		Расчет.Расходы      = ДанныеФНС.TotalExpense;
	Иначе
		Расчет.СтавкаНалога = ДанныеФНС.TaxRateIncomeValue;
	КонецЕсли;
	
	Возврат Расчет;
	
КонецФункции

#Область ПодключениеПодсистем
// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//  Ограничение - См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СодержимоеДанныхСервиса(ДанныеСервиса)
	
	СодержимоеДанных = НовыйСодержимоеДанныхСервиса();
	
	// Сервис возвращает список объектов в свойстве, имя которого разное для разных вариантов ответа
	СвойстваОтвета = ДанныеСервиса.Свойства();
	Для Каждого Свойство Из СвойстваОтвета Цикл
		Если СтрНайти(Свойство.Имя, "Error") = 0 Тогда
			СодержимоеДанных.БлокОсновныхДанных = ДанныеСервиса[Свойство.Имя];
		Иначе
			СодержимоеДанных.БлокОшибок = ДанныеСервиса[Свойство.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат СодержимоеДанных;
	
КонецФункции

Функция ИмяПолезныхДанных(СодержимоеДанныхСервиса)
	
	Возврат СодержимоеДанныхСервиса.ВладеющееСвойство.Тип.Имя;
	
КонецФункции

Функция НовыйСодержимоеДанныхСервиса()
	
	СодержимоеДанных = Новый Структура;
	СодержимоеДанных.Вставить("БлокОшибок", Неопределено);
	СодержимоеДанных.Вставить("БлокОсновныхДанных", Неопределено);
	
	Возврат СодержимоеДанных;
	
КонецФункции

Функция СгруппироватьПакетНачисленийПоПериодам(ПакетДанных, ОписаниеТипаПакета)
	
	ДанныеПоПериодам = Новый Соответствие;
	
	ЗначенияПолейПоУмолчанию = Неопределено;
	
	Для Каждого ДанныеОрганизации Из ПакетДанных Цикл
		
		Для Каждого Начисление Из ДанныеОрганизации[ОписаниеТипаПакета.ИмяНачислений] Цикл
			
			ЗаполнитьОтсутствующиеПоля(Начисление, ЗначенияПолейПоУмолчанию);
			
			НалоговыйПериод = НалоговыйПериодПротоколаОбмена(Начисление);
			
			ДанныеПериода = ДанныеПоПериодам[НалоговыйПериод];
			Если ДанныеПериода = Неопределено Тогда
				ДанныеПериода = Новый Массив;
				ДанныеПоПериодам.Вставить(НалоговыйПериод, ДанныеПериода);
			КонецЕсли;
			
			ДанныеПериода.Добавить(Начисление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеПоПериодам;
	
КонецФункции

Процедура ЗаполнитьОтсутствующиеПоля(Начисление, ЗначенияПолейПоУмолчанию)
	
	Если ЗначенияПолейПоУмолчанию = Неопределено Тогда
		
		ЗначенияПолейПоУмолчанию = Новый Структура;
		СвойстваXDTO = Начисление.Свойства();
		
		Для Каждого СвойствоXDTO Из СвойстваXDTO Цикл
			Если (СвойствоXDTO.Тип.Имя = "decimal" Или СвойствоXDTO.Тип.Имя = "long" Или СвойствоXDTO.Тип.Имя = "int")
				И СвойствоXDTO.ЗначениеПоУмолчанию = Неопределено Тогда
				ЗначенияПолейПоУмолчанию.Вставить(СвойствоXDTO.Имя, 0);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЗначениеПустогоПоля Из ЗначенияПолейПоУмолчанию Цикл
		
		Если Не ЗначениеЗаполнено(Начисление[ЗначениеПустогоПоля.Ключ]) Тогда
			Начисление[ЗначениеПустогоПоля.Ключ] = ЗначениеПустогоПоля.Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция НалоговыйПериодПротоколаОбмена(Начисление)
	
	Возврат Дата(Начисление.TaxPeriodYear, Начисление.TaxPeriodMonth, 1);
	
КонецФункции

Функция ИзвлечьПоляРасчетаНалога(ОбъектXDTO)
	
	// См. также ДанныеРасчетаНалога
	
	ПоляРасчета = Новый Структура;
	
	ТипПоля = Новый ОписаниеТипов("Число");
	
	Для Каждого ОписаниеСвойства Из ОбъектXDTO.Свойства() Цикл
		Значение = ТипПоля.ПривестиЗначение(ОбъектXDTO[ОписаниеСвойства.Имя]);
		ПоляРасчета.Вставить(ОписаниеСвойства.Имя, Значение);
	КонецЦикла;
	
	Возврат ПоляРасчета;
	
КонецФункции

Функция ОбъектНалогообложенияПоУСН(НомерОбъектаФНС)
	
	Если НомерОбъектаФНС = 2 Тогда
		Возврат Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	Иначе
		Возврат Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	КонецЕсли;
	
КонецФункции

Процедура ПриЗаполненииДаннымиДоставленнымиИзСервиса(Записи, НалоговыйПериод, Организация, ИдентификаторБанка)
	
	ЗаписатьРасчетНалога(Записи);
	ОтразитьНачислениеПоЕдиномуНалоговомуСчету(Записи, НалоговыйПериод, Организация, ИдентификаторБанка);
	
КонецПроцедуры

Процедура ЗаписатьРасчетНалога(Записи)
	
	Для Каждого Запись Из Записи Цикл
		
		ДанныеРасчетаНалога = ДанныеРасчетаНалога(Запись.РасчетНалога);
		РегистрыСведений.РасчетНалогаАУСН.ЗаписатьРасчет(
			ДанныеРасчетаНалога,
			Запись.НалоговыйПериод,
			Запись.Организация,
			Запись.ИдентификаторНачисления,
			Запись.ДатаЗапроса);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьНачислениеПоЕдиномуНалоговомуСчету(Записи, Период, Организация, ИдентификаторБанка)
	
	Если Записи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПодключенияАУСН = РегистрыСведений.СостоянияИнтеграцииАУСН.ДатаПодключения(Организация, ИдентификаторБанка);
	Если ДатаПодключенияАУСН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НачислениеВыполненоДоПодключенияИнтеграции(Записи, ДатаПодключенияАУСН, Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяАУСН(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	НалогАУСН = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.АУСН);
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(Организация, НалогАУСН, Период);
	
	Если ПорядокУплаты <> Неопределено Тогда
		ПериодОплаты = ПорядокУплаты.Срок;
	Иначе
		ПериодОплаты = Период;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Организация, ПериодОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Если Период < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		ЗаписатьОперациюПоЕдиномуНалоговомуСчету(Записи, Период, Организация, НалогАУСН);
	Иначе
		ЗаписатьКорректировкуЕНС(Записи, ПериодОплаты, Организация, НалогАУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОперациюПоЕдиномуНалоговомуСчету(Записи, Период, Организация, НалогАУСН)
	
	Комментарий = НСтр("ru = 'Загружен из сервиса АУСН'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияПоЕдиномуНалоговомуСчету");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Комментарий", Комментарий);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОперацияПоЕдиномуНалоговомуСчету.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
		|ГДЕ
		|	ОперацияПоЕдиномуНалоговомуСчету.Дата = &Период
		|	И ОперацияПоЕдиномуНалоговомуСчету.Организация = &Организация
		|	И ОперацияПоЕдиномуНалоговомуСчету.Комментарий ПОДОБНО &Комментарий
		|	И ОперацияПоЕдиномуНалоговомуСчету.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов)
		|	И НЕ ОперацияПоЕдиномуНалоговомуСчету.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОперацияПоЕНС = Выборка.Ссылка.ПолучитьОбъект();
			
			Пока Выборка.Следующий() Цикл
				ОперацияКУдалению = Выборка.Ссылка.ПолучитьОбъект();
				ОперацияКУдалению.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
		Иначе
			ОперацияПоЕНС = Документы.ОперацияПоЕдиномуНалоговомуСчету.СоздатьДокумент();
			ОперацияПоЕНС.Дата        = Период;
			ОперацияПоЕНС.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
			ОперацияПоЕНС.Организация = Организация;
			ОперацияПоЕНС.Комментарий = Комментарий;
			ОперацияПоЕНС.УстановитьНовыйНомер();
		КонецЕсли;
		
		ОперацияПоЕНС.Налоги.Очистить();
		ОперацияПоЕНС.СуммаДокумента= 0;
	
		Для каждого Запись Из Записи Цикл
			
			Сумма = Запись.Начислено - Запись.Уменьшено;
			
			Если Сумма = 0 Или Запись.ВОбработке Тогда
				Продолжить;
			КонецЕсли;
			
			ОперацияПоЕНС.СуммаДокумента = ОперацияПоЕНС.СуммаДокумента + Сумма;
			
			НоваяСтрока = ОперацияПоЕНС.Налоги.Добавить();
			Документы.ОперацияПоЕдиномуНалоговомуСчету.ЗаполнитьДанныеСтрокиТабличнойЧастиНалогиЗначениямиПоУмолчанию(
				НоваяСтрока, Организация, Период);
			НоваяСтрока.Налог = НалогАУСН;
			Документы.ОперацияПоЕдиномуНалоговомуСчету.ЗаполнитьДанныеНалогаВСтрокеТабличнойЧасти(
				НоваяСтрока, Организация, Период);
			НоваяСтрока.Сумма = Сумма;
			
		КонецЦикла;
		
		Если ОперацияПоЕНС.Налоги.Количество() > 0 Тогда
			ОперацияПоЕНС.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Не ОперацияПоЕНС.ЭтоНовый() Тогда
			ОперацияПоЕНС.ПометкаУдаления = Истина;
			ОперацияПоЕНС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при создании документов ""Операция по единому налоговому счету""'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьКорректировкуЕНС(Записи, Период, Организация, НалогАУСН)
	
	Комментарий = НСтр("ru = 'Загружен из сервиса АУСН'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаЕНС");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Комментарий", Комментарий);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КорректировкаЕНС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаЕНС КАК КорректировкаЕНС
		|ГДЕ
		|	КорректировкаЕНС.Дата = &Период
		|	И КорректировкаЕНС.Организация = &Организация
		|	И КорректировкаЕНС.СозданАвтоматически
		|	И КорректировкаЕНС.Комментарий ПОДОБНО &Комментарий
		|	И КорректировкаЕНС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаЕНС.НачислениеНалогов)
		|	И НЕ КорректировкаЕНС.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КорректировкаЕНС = Выборка.Ссылка.ПолучитьОбъект();
			// Все документы, кроме первого, помечаем на удаление.
			Пока Выборка.Следующий() Цикл
				КорректировкаКУдалению = Выборка.Ссылка.ПолучитьОбъект();
				КорректировкаКУдалению.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
		Иначе
			КорректировкаЕНС = Документы.КорректировкаЕНС.СоздатьДокумент();
			КорректировкаЕНС.Дата = Период;
			КорректировкаЕНС.Организация = Организация;
			КорректировкаЕНС.Комментарий = Комментарий;
			КорректировкаЕНС.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
			КорректировкаЕНС.Налог = НалогАУСН;
			КорректировкаЕНС.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(НалогАУСН, Период);
			КорректировкаЕНС.СозданАвтоматически = Истина;
			КорректировкаЕНС.УстановитьНовыйНомер();
		КонецЕсли;
		
		СуммаДокумента= 0;
		Для каждого Запись Из Записи Цикл
			Сумма = Запись.Начислено - Запись.Уменьшено;
			Если Сумма = 0 Или Запись.ВОбработке Тогда
				Продолжить;
			КонецЕсли;
			СуммаДокумента = СуммаДокумента + Сумма;
		КонецЦикла;
		КорректировкаЕНС.СуммаДокумента = СуммаДокумента;
			
		Если СуммаДокумента > 0 Тогда
			КорректировкаЕНС.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Не КорректировкаЕНС.ЭтоНовый() Тогда
			КорректировкаЕНС.ПометкаУдаления = Истина;
			КорректировкаЕНС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при создании документов ""Корректировка ЕНС""'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция НачислениеВыполненоДоПодключенияИнтеграции(Записи, ДатаПодключенияАУСН, Период)
	
	ДатаСозданияНачисления = Дата(1, 1, 1);
	
	Для Каждого Запись Из Записи Цикл
		ДатаСозданияНачисления = Макс(Запись.ДатаСоздания, ДатаСозданияНачисления);
	КонецЦикла;
	
	Если ДатаСозданияНачисления < НачалоДня(ДатаПодключенияАУСН) Тогда
		
		ШаблонТекстаОшибки = НСтр("ru = 'За %1 получены данные налоговых начислений АУСН, рассчитанные до подключения интеграции с банком.
			|Эти данные не будут отражены в операции по единому налоговому счету.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаОшибки, Формат(Период, "ДФ='MMMM yyyy ""г.""'"));
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
