
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;

	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект, , , ОсновнаяОрганизация);
	
	ОтборыПоОрганизации = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Организация");
	Если ОтборыПоОрганизации.Количество() > 0 И ОтборыПоОрганизации[0].Использование Тогда
		ОтборОрганизация = ОтборыПоОрганизации[0].ПравоеЗначение;
	Иначе	
		ОтборОрганизация = ОсновнаяОрганизация;
	КонецЕсли;
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");

	ЕстьПравоИзмененияЗаявок = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаОткрытиеСчета);
	
	Элементы.Создать.Доступность                      = ЕстьПравоИзмененияЗаявок;
	Элементы.СписокКонтекстноеМенюСоздать.Доступность = ЕстьПравоИзмененияЗаявок;
	Элементы.ОбновитьСостояниеЗаявок.Доступность      = ЕстьПравоИзмененияЗаявок;
	
	УстановитьУсловноеОформление();
		
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленоСостояниеЗаявкиНаОткрытиеСчета" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			ОтборОрганизация = Параметр.Организация;
			ОтборОрганизацияПриИзменении(Неопределено);
			
			Элементы.Список.ТекущаяСтрока = ЗаявкиНаОткрытиеСчетаВызовСервера.КлючЗаписиСостоянияЗаявки(Параметр);
		   
		Иначе
			
			Элементы.Список.Обновить();
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ПриДобавленииСтрокиСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, ОтборОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПриВыбореСтрокиСписка();

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

	Если Элементы.Создать.Доступность И Не Копирование Тогда
		ПриДобавленииСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ПриВыбореСтрокиСписка(); 

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаОткрытиеСчета.Черновик") Тогда
	
		ПредставлениеЗаявки = СтрШаблон(НСтр("ru = 'Заявка %1 от %2'"), 
			ТекущиеДанные.НомерЗаявки,
			Формат(ТекущиеДанные.ДатаЗаявки, "ДЛФ=D"));
	
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ПредставлениеЗаявки);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ПредставлениеЗаявки);
		КонецЕсли; 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередУдалениемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	Иначе
		// Заявка уже была ранее отправлена хотя бы в какой-то банк, ее не даем удалить.
		ТекстСообщения = НСтр("ru = 'Заявка уже отправлена.
									|Удалить ее невозможно.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	УстановитьПометкуУдаления(ТекущиеДанные.ЗаявкаНаОткрытиеСчета, НЕ ТекущиеДанные.ПометкаУдаления);
	
	// Обновляем форму списка.
	Элементы.Список.Обновить();
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Отбираем заявки, которые находятся в состоянии Черновик и для которых не указан конкретный банк получатель,
	// чтобы для них показывать количество банков.
	ЗаявкиЧерновики = Новый Массив;

	Для каждого СтрокаЗаявки Из Строки Цикл
		
		ТекущиеДанные = СтрокаЗаявки.Значение.Данные;
		
		Если ТекущиеДанные.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Черновик
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.Банк) Тогда
			ЗаявкиЧерновики.Добавить(ТекущиеДанные.ЗаявкаНаОткрытиеСчета);
		КонецЕсли;
		
	КонецЦикла; 

	Если НЕ ЗначениеЗаполнено(ЗаявкиЧерновики) Тогда
		// Нет заявок в состоянии Черновик, поэтому больше обновлять нечего.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкиЧерновики", ЗаявкиЧерновики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧБанки.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(*) КАК КоличествоБанков
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ТЧБанки
	|ГДЕ
	|	ТЧБанки.Ссылка В(&ЗаявкиЧерновики)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧБанки.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	БанкиПолучатели = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	БанкиПолучатели.Индексы.Добавить("Ссылка");
	
	Для каждого СтрокаЗаявки Из Строки Цикл
		
		ТекущиеДанные = СтрокаЗаявки.Значение.Данные;
		
		Если ТекущиеДанные.Состояние <> Перечисления.СостоянияЗаявокНаОткрытиеСчета.Черновик Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОЗаявке = БанкиПолучатели.Найти(ТекущиеДанные.ЗаявкаНаОткрытиеСчета, "Ссылка");
		Если СведенияОЗаявке = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если СведенияОЗаявке.КоличествоБанков > 1 Тогда
			СтрокаЗаявки.Значение.Оформление["Банк"].УстановитьЗначениеПараметра("Текст", СтрокаСЧислом(
				Нстр("ru = '; %1 получатель; ; %1 получателя; %1 получателей; %1 получателей'"),
				СведенияОЗаявке.КоличествоБанков,
				ВидЧисловогоЗначения.Количественное,
				"L=ru"));
		КонецЕсли;		
		
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)

	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояниеЗаявок(Команда)
	
	ДлительнаяОперация = ЗапуститьУниверсальныйОбменСБанкамиПоСервису();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСостояниеЗаявокЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриДобавленииСтрокиСписка()
	
	КлючеваяОперация = "СозданиеФормыЗаявкаНаОткрытиеСчета";
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.ФормаОбъекта", ПараметрыСоздания, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ВыбраннаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаОткрытиеСчета.Черновик") Тогда

		КлючеваяОперация = "СозданиеФормыЗаявкаНаОткрытиеСчета";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

		ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ЗаявкаНаОткрытиеСчета));
	Иначе	
		ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.ИнформацияПоЗаявкеНаОткрытиеСчета", Новый Структура("Ключ", ВыбраннаяСтрока));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
		
	// ЦВЕТА СОСТОЯНИЙ
		
	// "Счет открыт" - зеленый
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
		
	СписокСтатусовОдобрено = Новый СписокЗначений;
	СписокСтатусовОдобрено.Добавить(Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовОдобрено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЗаявкиНаОткрытиеСчета.ЦветСостояния(
		Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт));
	
	// "Ошибка" - красный
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьОшибки", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОшибкиОтправкиБРО);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ошибка'"));
		
	// НОВЫЕ СООБЩЕНИЯ
	
	// Выделяем всю строку жирным
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Новое", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Список.Шрифт,,, Истина));
			
КонецПроцедуры

&НаСервере
Функция ЗапуститьУниверсальныйОбменСБанкамиПоСервису()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запуск универсального обмена с банками'");
	
	ИмяПроцедуры = "ЗаявкиНаОткрытиеСчета.ЗапуститьУниверсальныйОбменСБанкамиПоСервисуВФоне";
	
	ПараметрыПроцедуры = Новый Структура;  
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	ПараметрыПроцедуры.Вставить("СервисОбменаСБанками", СервисОбменаСБанками);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеЗаявокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаления(Знач Заявка, Знач ПометкаУдаления)

	Объект = Заявка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.УстановитьПометкуУдаления(ПометкаУдаления);

КонецПроцедуры


#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияЗаявкиНаОткрытиеСчета());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
