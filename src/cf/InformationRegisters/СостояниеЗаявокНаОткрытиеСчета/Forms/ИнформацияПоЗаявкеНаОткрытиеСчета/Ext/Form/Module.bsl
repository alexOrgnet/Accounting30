#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
        МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Требуется прочитать данные из хранилища значения
	ПодробностиРешенияПрочитаны = Ложь;
	
	ДатаЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ЗаявкаНаОткрытиеСчета, "Дата");
	
	КраткоеОписаниеОшибки = НСтр("ru = 'В процессе обмена с сервером возникла неизвестная ошибка'");
	Если ЗначениеЗаполнено(Запись.ОписаниеОшибки) Тогда
		КраткоеОписаниеОшибки = Запись.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ОписаниеОшибкиПодробное) Тогда
		Подстроки = Новый Массив;
		Подстроки.Добавить(КраткоеОписаниеОшибки);
		Подстроки.Добавить(Символы.ПС);
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"), , , , "ОписаниеОшибкиПодробное"));
		Элементы.НадписьОписаниеОшибки.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	Иначе
		Элементы.НадписьОписаниеОшибки.Заголовок = КраткоеОписаниеОшибки;
	КонецЕсли;

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Запись.Новое Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПометитьКакПрочитанное", 1, Истина);	
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Документооборот = ДокументооборотПоТранзакции(Запись.Транзакция);
	Если НЕ ЗначениеЗаполнено(Документооборот) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Заявка не отправлена'"));
		Возврат;
	КонецЕсли;
	
	// В качестве заголовка формы этапов используем представление заявки.
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Наименование", Заголовок);
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуСостоянияДокументооборота(Документооборот, ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = Запись.ОписаниеОшибки
		+ ?(ПустаяСтрока(Запись.ОписаниеОшибкиПодробное), "", Символы.ПС + Запись.ОписаниеОшибкиПодробное);
	
	ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(ОписаниеОшибки, ЭтотОбъект, СтрШаблон(НСтр("ru='Обмен с %1'"), Запись.Банк));

КонецПроцедуры
 
&НаКлиенте
Процедура ФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПрефиксСсылки = "Вложение";

	Если НЕ СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, ПрефиксСсылки) Тогда
		Возврат;
	КонецЕсли;

	ИндексФайлаСтрокой = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(ПрефиксСсылки) + 1);
	ИндексФайла = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИндексФайлаСтрокой);
	Если ТипЗнч(ИндексФайла) <> Тип("Число")
		ИЛИ ИндексФайла < 0
		ИЛИ ИндексФайла > Вложения.Количество() - 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Вложения[ИндексФайла];
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);

	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СервисыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ДиректБанкПомощникПодключения"
		 Или НавигационнаяСсылкаФорматированнойСтроки = "СБППомощникПодключения" Тогда

		РеквизитыСчета = ЗначенияРеквизитовСчета();
		
		Если Не ЗначениеЗаполнено(РеквизитыСчета.Банк) Тогда
			Возврат;
		КонецЕсли;
	
		Если НавигационнаяСсылкаФорматированнойСтроки = "ДиректБанкПомощникПодключения" Тогда
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
				РеквизитыСчета.Организация, РеквизитыСчета.Банк);
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СБППомощникПодключения" Тогда
			Если ЗначениеЗаполнено(НастройкаСБП) Тогда
				ПараметрыФормы = Новый Структура("Ключ", НастройкаСБП);
				ОткрытьФорму("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			Иначе
				НаименованиеНастройки = СтрШаблон(НСтр("ru = 'Настройка СБП в %1 (%2)'"),
					РеквизитыСчета.НаименованиеБанка, РеквизитыСчета.НаименованиеОрганизации);
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Организация",  РеквизитыСчета.Организация);
				ДополнительныеПараметры.Вставить("Наименование", НаименованиеНастройки);
				ДополнительныеПараметры.Вставить("Банк",         РеквизитыСчета.Банк);
				ДополнительныеПараметры.Вставить("БИК",         РеквизитыСчета.БИК);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияСБП", ЭтотОбъект, ДополнительныеПараметры);
				ИнтеграцияСПлатежнымиСистемамиКлиент.ПодключитьИнтеграциюССБП(
					РеквизитыСчета.БИК,
					ОписаниеОповещения,
					ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПодробностиРешенияПрочитаны Тогда
			ПараметрыВыбора = Новый Структура("ПодробностиРешенияАдрес, Действие, Организация", 
						  ПодробностиРешенияАдрес, "ОтправкаУведомлений", Запись.Организация);
			ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.ФормаВыбораРасчетногоСчета", ПараметрыВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Открываем форму заявки на открытие счета - других ссылок в тексте надписи нет

	КлючеваяОперация = "ОткрытиеФормыЗаявкаНаОткрытиеСчета";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.ФормаОбъекта", Новый Структура("Ключ", Запись.ЗаявкаНаОткрытиеСчета));
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БанковскийСчет = БанковскийСчетПоНомеруСчета(Элемент.Заголовок);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", Новый Структура("Ключ", БанковскийСчет));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы   

&НаКлиенте
Процедура СоздатьБанковскиеСчета(Команда)  
	
	Имя = Команда.Имя;
	ТекстИндекса = СтрЗаменить(Имя, "СоздатьБанковскиеСчета", "");   
	Индекс = Число(ТекстИндекса) - 1;
	СоздатьБанковскиеСчетаНаСервере(Индекс); 
	Прочитать();

КонецПроцедуры 

&НаКлиенте
Процедура ОтправитьЗаявкуПовторно(Команда)
	
	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");
	
	// Если транзакция была создана ранее, но не отправлена, то отправляем существующую транзакцию.
	Если ОтправитьТранзакцииПовторно() Тогда
		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
		Закрыть();
		Возврат;
	КонецЕсли;	
	
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(СервисОбменаСБанками);
    Банки = ПараметрыБанка(Запись.ЗаявкаНаОткрытиеСчета, Запись.Банк);     
    ПараметрыОтправки = ЗаявкиНаОткрытиеСчетаКлиент.ПараметрыОтправкиБезПодписания(СервисОбменаСБанками);
	ПараметрыОтправки.ЗаявкаНаОткрытиеСчета = Запись.ЗаявкаНаОткрытиеСчета;
	ПараметрыОтправки.Организация    = Запись.Организация;
	ПараметрыОтправки.Банки          = Банки;
	ПараметрыОтправки.ТипТранзакции  = ТипыТранзакций.Заявка;
		
	// Параметры, которые доступны только в клиентском контексте.
	ПараметрыОтправки.ПараметрыНаКлиенте.ВладелецФормы = ЭтотОбъект;
	ПараметрыОтправки.ПараметрыНаКлиенте.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОтправитьЗавершение", ЭтотОбъект);
	
	ЗаявкиНаОткрытиеСчетаКлиент.ОткрытьФормуОтправки(ПараметрыОтправки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Выполнено = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Выполнено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Выполнено", Ложь);
	КонецЕсли;
	
	Если НЕ Выполнено Тогда
		Возврат;
	КонецЕсли;

	// При успешной отправке оповестим форму списка.
	КлючЗаявки = Новый Структура;
	КлючЗаявки.Вставить("Организация",    Запись.Организация);
	КлючЗаявки.Вставить("ЗаявкаНаОткрытиеСчета", Запись.ЗаявкаНаОткрытиеСчета);
	КлючЗаявки.Вставить("Банк",           Запись.Банк);
	Оповестить("ОбновленоСостояниеЗаявкиНаОткрытиеСчета", КлючЗаявки);
	
	// Запустим автоматическую проверку входящих сообщений от банков.
	ЗаявкиНаОткрытиеСчетаКлиент.ПерезапуститьПроверкуСообщенийОтБанков();
	
	// Сообщим пользователю о том, что успешно отправлена.
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Заявка успешно отправлена.'"));
	Подстроки.Добавить(НСтр("ru = 'Обычно партнеры сервиса рассматривают заявки за один рабочий день.'"));
	Подстроки.Добавить(СтрШаблон(НСтр("ru = 'Просмотр статуса заявки: меню %1'"), ЗаявкиНаОткрытиеСчетаВызовСервера.ПутьВИнтерфейсеКСпискуЗаявок()));
	
	ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
		
	ПоказатьПредупреждение(, ТекстСообщения);
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыБанка(ЗаявкаНаОткрытиеСчета, Банк);     
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаОткрытиеСчетаБанки.Банк КАК Банк,
		|	ЗаявкаНаОткрытиеСчетаБанки.ИдентификаторПродукта КАК ИдентификаторПродукта
		|ИЗ
		|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ЗаявкаНаОткрытиеСчетаБанки
		|ГДЕ
		|	ЗаявкаНаОткрытиеСчетаБанки.Ссылка = &Ссылка
		|	И ЗаявкаНаОткрытиеСчетаБанки.Банк = &Банк";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаОткрытиеСчета);
	Запрос.УстановитьПараметр("Банк", Банк);

	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Банки = РезультатЗапроса.Выгрузить();
	
		
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Банки);
		
КонецФункции

&НаСервереБезКонтекста
Функция ДокументооборотПоТранзакции(Знач Транзакция)

	Если НЕ ЗначениеЗаполнено(Транзакция) Тогда
		Возврат Неопределено;
	КонецЕсли;

	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	Возврат РеквизитыТранзакции.Документооборот;

КонецФункции

&НаСервере
Функция БанковскийСчетПоНомеруСчета(НомерСчета)     
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	ПодробностиРешения = ПодробностиРешения();			
	ИнформацияПоСчетам = ПодробностиРешения.РасчетныеСчета;	    
	
	ОтборПоСчету = Новый Структура("НомерСчета", Строка(НомерСчета));	
	МассивСчетов = ИнформацияПоСчетам.НайтиСтроки(ОтборПоСчету);
	Если МассивСчетов.Количество() > 0 Тогда  
		РасчетныйСчет =  МассивСчетов[0];
		Банк = РаботаСБанкамиБП.НайтиБанк(РасчетныйСчет.БИК,, РасчетныйСчет.КоррСчет);
		БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(Запись.Организация, Банк, Строка(НомерСчета)); 
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодключенияСБП(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВывестиСсылкиПодключенияИУведомлений(ДополнительныеПараметры.БИК, ДополнительныеПараметры.Банк);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создано подключение к СБП'"));
	
КонецПроцедуры

&НаСервере
Функция ЗначенияРеквизитовСчета()
	
	ПодробностиРешения = ПодробностиРешения();
	
	РеквизитыСчета = Новый Структура();
	РеквизитыСчета.Вставить("Организация");
	РеквизитыСчета.Вставить("НаименованиеОрганизации");
	РеквизитыСчета.Вставить("Банк");
	РеквизитыСчета.Вставить("НаименованиеБанка");
	РеквизитыСчета.Вставить("БИК");
	
	Если ТипЗнч(ПодробностиРешения) <> Тип("Структура") Тогда
		Возврат РеквизитыСчета;
	КонецЕсли;
	
	ИнформацияПоСчетам = ПодробностиРешения.РасчетныеСчета;
	
	ОтборПоСчету = Новый Структура("Валюта", "643");
	
	МассивСчетов = ИнформацияПоСчетам.НайтиСтроки(ОтборПоСчету);

	Если МассивСчетов.Количество() > 0 Тогда
		
		РасчетныйСчет =  МассивСчетов[0];
		Банк = РаботаСБанкамиБП.НайтиБанк(РасчетныйСчет.БИК,, РасчетныйСчет.КоррСчет);
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "Наименование");  
		НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование");
		РеквизитыСчета.Организация = Запись.Организация;    
		РеквизитыСчета.НаименованиеОрганизации = НаименованиеОрганизации;  
		РеквизитыСчета.Банк = Банк;    
		РеквизитыСчета.НаименованиеБанка = НаименованиеБанка; 
        РеквизитыСчета.БИК = РасчетныйСчет.БИК;     
		
	КонецЕсли;
	
	Возврат РеквизитыСчета;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Заголовок = СтрШаблон(НСтр("ru = 'Заявка на открытие счета от %1'"), Формат(ДатаЗаявки, "ДЛФ=D"));
	
	ЕстьОшибки = Запись.ЕстьОшибки;
	Элементы.Состояние.ЦветТекста   = ЗаявкиНаОткрытиеСчета.ЦветСостояния(Запись.Состояние);
	Элементы.Состояние.Видимость = Не ЕстьОшибки;	
	Элементы.ГруппаОшибка.Видимость = ЕстьОшибки;
			
	УстановитьТекстНадписьЗаявка();
	
	НастроитьФормуПоСостоянию();
			
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекстНадписьЗаявка()

	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.ЗаявкаНаОткрытиеСчета, 
		"Дата");	
	
	ТекстНадписи = "";
	ПараметрыНадписи = Новый Структура; 
	
	ПараметрыНадписи.Вставить("ДатаЗаявки", Формат(РеквизитыЗаявки.Дата, "ДЛФ=D"));
	
	// Добавляем организацию в описание заявки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Истина;
	КонецЕсли;	
	
	Если Запись.ЕстьОшибки Тогда
		ТекстНадписи = НСтр("ru='При получении <a href = ""ЗаявкаНаОткрытиеСчета"">заявки от [ДатаЗаявки]</a> возникла ошибка.
							|Попробуйте подать заявку повторно через некоторое время'");	
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт Тогда
		СформироватьИнформациюПоОткрытиюСчета(ПараметрыНадписи, РеквизитыЗаявки);
		Возврат;
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отказано Тогда
		ТекстНадписи = НСтр("ru='По <a href = ""ЗаявкаНаОткрытиеСчета"">заявке от [ДатаЗаявки]</a> отказано в открытии счета.'");
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения Тогда
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаОткрытиеСчета"">Заявка от [ДатаЗаявки]</a> доставлена банку и находится на рассмотрении.'");
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено Тогда
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаОткрытиеСчета"">Заявка от [ДатаЗаявки]</a> отправлена, ожидается ответ от банка.'");
	Иначе
		// не отправлена
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаОткрытиеСчета"">Заявка от [ДатаЗаявки]</a> не отправлена.'");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Запись.РегистрационныйНомер) Тогда
		ТекстНадписи = ТекстНадписи + Символы.ПС + НСтр("ru='Номер заявки: [РегистрационныйНомер].'");
		ПараметрыНадписи.Вставить("РегистрационныйНомер", Запись.РегистрационныйНомер);
	КонецЕсли;	

	ТекстНадписи = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписи, ПараметрыНадписи);  
	Элементы.НадписьЗаявка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстНадписи);  
		
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюПоОткрытиюСчета(ПараметрыНадписи, РеквизитыЗаявки)
	
	ПодробностиРешения = ПодробностиРешения();
	
	Если ТипЗнч(ПодробностиРешения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияПоСчетам = ПодробностиРешения.РасчетныеСчета;
	ИнформацияПоКартам = ПодробностиРешения.КорпоративныеКарты;

	Если ИнформацияПоСчетам = Неопределено Или ИнформацияПоСчетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформацияПоСчетам.Количество() = 1 Тогда 
		ТекстРешения = НСтр("ru='открыт счет'");
	Иначе
		ТекстРешения = НСтр("ru='открыты счета'");
	КонецЕсли;
	СтрокаНадписи = НСтр("ru='По <a href = ""ЗаявкаНаОткрытиеСчета"">заявке [РегистрационныйНомер] от [ДатаЗаявки]</a> %1:'");
	ТекстНадписи = СтрШаблон(СтрокаНадписи, ТекстРешения);
						
	Если ЗначениеЗаполнено(Запись.РегистрационныйНомер) Тогда
		ПараметрыНадписи.Вставить("РегистрационныйНомер", Запись.РегистрационныйНомер);
	Иначе
		ПараметрыНадписи.Вставить("РегистрационныйНомер", "");
	КонецЕсли;	
	
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписи, ПараметрыНадписи);  
	Элементы.НадписьЗаявка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстНадписи);  
	
	ВывестиГруппуРешение(ИнформацияПоСчетам, ИнформацияПоКартам);
	
	Элементы.ГруппаДополнительно.Видимость = Истина;
	РублевыйСчет = ИнформацияПоСчетам.Найти("643", "Валюта");
	
	Если ЗначениеЗаполнено(РублевыйСчет) Тогда	
		БИК = РублевыйСчет.БИК;
		Банк =  РаботаСБанкамиБП.НайтиБанк(БИК,, РублевыйСчет.КоррСчет);
		Если Банк <> Неопределено Тогда
			ВывестиСсылкиПодключенияИУведомлений(РублевыйСчет.БИК, Банк);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСсылкиПодключенияИУведомлений(БИК, Банк)
		
	СтруктураУслугБанка = РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.УслугиБанков(Запись.Банк, Запись.ЗаявкаНаОткрытиеСчета);
	
	СоставСтрокиПодсказки = Новый Массив;
	
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		Запись.Организация, Банк);

	ВидимостьГиперссылкиДиректБанк = ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку"
									 Или ВидимостьЭлементовДиректБанк = "ПоказатьБаннер";
	ВидимостьПодсказкиСБП = Ложь;

	Если ВидимостьГиперссылкиДиректБанк И СтруктураУслугБанка.ПредлагатьПодключитьДиректБанк Тогда
		ТекстГиперссылки = НСтр("ru = 'Подключить 1С:ДиректБанк'");
		ПодсказкаНомерСчетаДиректБанк = Новый ФорматированнаяСтрока(
			ТекстГиперссылки, , ЦветаСтиля.ЦветГиперссылки, , "ДиректБанкПомощникПодключения");
		СоставСтрокиПодсказки.Добавить(ПодсказкаНомерСчетаДиректБанк);
	КонецЕсли;
	
	ИнтеграцияДоступна = СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна();
	Если ИнтеграцияДоступна Тогда
		НастройкиИнтеграцииСБП = ИнтеграцияССБПБП.НастройкиИнтеграцииСБП(Запись.Организация, БИК);
		ИнтеграцияДоступна = НастройкиИнтеграцииСБП.ИнтеграцияДоступнаСБПc2b;
	КонецЕсли;
	
	Если ИнтеграцияДоступна Тогда
		НастройкаСБП = НастройкиИнтеграцииСБП.Настройка;
		Если Не ЗначениеЗаполнено(НастройкаСБП) Тогда
			ВидимостьПодсказкиСБП = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если ВидимостьПодсказкиСБП И СтруктураУслугБанка.ПредлагатьПодключитьСБП Тогда
		
		ТекстГиперссылки = НСтр("ru = 'Подключить обмен с СБП'");
		ПодсказкаПодключениеСБП = Новый ФорматированнаяСтрока(
				ТекстГиперссылки, , ЦветаСтиля.ЦветГиперссылки, , "СБППомощникПодключения");
			
		Если ЗначениеЗаполнено(СоставСтрокиПодсказки) Тогда
			СоставСтрокиПодсказки.Добавить(" | ");
		КонецЕсли;
			
		СоставСтрокиПодсказки.Добавить(ПодсказкаПодключениеСБП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставСтрокиПодсказки) Тогда
		СоставСтрокиПодсказки.Добавить(" | ");	
	КонецЕсли;
	
	Если РаботаСПочтовымиСообщениямиВызовСервера.ДоступноПравоДобавленияУчетныхЗаписей() Тогда

		ТекстГиперссылки = НСтр("ru = 'Уведомить контрагентов'");
		ПодсказкаУведомитьКонтрагентов = Новый ФорматированнаяСтрока(
				ТекстГиперссылки, , ЦветаСтиля.ЦветГиперссылки, , "УведомитьКонтрагентов");

		СоставСтрокиПодсказки.Добавить(ПодсказкаУведомитьКонтрагентов);  
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставСтрокиПодсказки) Тогда
		Элементы.НадписьСервисы.Заголовок = Новый ФорматированнаяСтрока(СоставСтрокиПодсказки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиГруппуРешение(ИнформацияПоСчетам, ИнформацияПоКартам)
	
	ТекстНадписи = "";
	Индекс = 1;
	
	Элементы.РешениеБанка.Видимость = Истина;
	ГруппаРешение = Элементы.РешениеБанка;
	Пока ГруппаРешение.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ГруппаРешение.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	ГруппаДействий = Элементы.ГруппаДействий;
	Пока ГруппаДействий.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ГруппаДействий.ПодчиненныеЭлементы[0]);
	КонецЦикла;	
		
	Для Каждого РасчетныйСчет Из ИнформацияПоСчетам Цикл
		
		СчетНеСоздан = Ложь;
		Суффикс = Формат(Индекс, "ЧГ=");   
		Банк = РаботаСБанкамиБП.НайтиБанк(РасчетныйСчет.БИК,, РасчетныйСчет.КоррСчет);
		БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(
						 Запись.Организация, Банк, Строка(РасчетныйСчет.НомерСчета)); 
	
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			НомерСчета = Новый ФорматированнаяСтрока(
			РасчетныйСчет.НомерСчета, , ЦветаСтиля.ЦветГиперссылки, , "НомерСчета");
		Иначе
			НомерСчета = Новый ФорматированнаяСтрока(РасчетныйСчет.НомерСчета);
			СчетНеСоздан = Истина;
		КонецЕсли;
		
		ГруппаДействия = Элементы.Добавить("ГруппаСДействием" + Суффикс, Тип("ГруппаФормы"), ГруппаРешение);
		ГруппаДействия.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДействия.ОтображатьЗаголовок = Ложь;       
		ГруппаДействия.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Валюта = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(РасчетныйСчет.Валюта);
		Если Не ЗначениеЗаполнено(Валюта) Тогда 
			ШаблонВалюта = НСтр("ru='<Код %1>'"); 
			Валюта = СтрШаблон(ШаблонВалюта, РасчетныйСчет.Валюта); 
		КонецЕсли;
		СтрокаСчета = НСтр("ru='номер: %1, валюта: %2'"); 
		
		ТекстНадписиСчет = СтрШаблон(СтрокаСчета, НомерСчета, Валюта);   
		ТекстНадписиСчетРазвернуто = НСтр("ru='Банковский счет'");  
		
		ГруппаРасчетныеСчета = Элементы.Добавить("ГруппаСведение" + Суффикс, Тип("ГруппаФормы"), ГруппаДействия);
		ГруппаРасчетныеСчета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРасчетныеСчета.ОтображатьЗаголовок = Истина;    
		ГруппаРасчетныеСчета.Заголовок = ТекстНадписиСчетРазвернуто;   
		ГруппаРасчетныеСчета.ЗаголовокСвернутогоОтображения = ТекстНадписиСчет;  
		ГруппаРасчетныеСчета.ОтображениеУправления  =  ОтображениеУправленияОбычнойГруппы.Картинка; 
		ГруппаРасчетныеСчета.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		ГруппаРасчетныеСчета.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРасчетныеСчета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		ГруппаРасчетныеСчета.ШрифтЗаголовка = Новый Шрифт(, 10);	     
		ГруппаРасчетныеСчета.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;   
		ГруппаРасчетныеСчета.Ширина = 37;
		ГруппаРасчетныеСчета.Скрыть();    
		
		ЕстьПравоИзмененияБанковскихСчетов = ПравоДоступа("Изменение", Метаданные.Справочники.БанковскиеСчета);
		Если СчетНеСоздан И ЕстьПравоИзмененияБанковскихСчетов Тогда
			ИмяКоманды = "СоздатьБанковскиеСчета" + Суффикс;    
			Команда = Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Команды.Добавить("СоздатьБанковскиеСчета" + Суффикс);    
			КонецЕсли;   
			Команда.Заголовок = "Создать";
			Команда.Действие  = "СоздатьБанковскиеСчета";  	
			КнопкаФормы = Элементы.Добавить("СоздатьСчета" + Суффикс, Тип("КнопкаФормы"), ГруппаДействия);    
			КартинкаПлюс = БиблиотекаКартинок.ЗначокПлюс;
			КнопкаФормы.Картинка = КартинкаПлюс;
			КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
			КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КнопкаФормы.ИмяКоманды = "СоздатьБанковскиеСчета" + Суффикс; 	
		КонецЕсли;
		
		ДобавитьНадписиВКолонки("Номер счета: ",   НомерСчета, ГруппаРасчетныеСчета, "НомерСчета", Суффикс, Истина);  
		ДобавитьНадписиВКолонки("БИК: ", 		   РасчетныйСчет.БИК, ГруппаРасчетныеСчета, "БИК", Суффикс);  
		ДобавитьНадписиВКолонки("Корр. счет: ",    РасчетныйСчет.КоррСчет, ГруппаРасчетныеСчета, "КоррСчет", Суффикс);  
		ДобавитьНадписиВКолонки("Валюта: ", 	   Валюта, ГруппаРасчетныеСчета, "Валюта", Суффикс);  
		ДобавитьНадписиВКолонки("Дата открытия: ", Формат(РасчетныйСчет.ДатаОткрытия, "ДЛФ=D"), ГруппаРасчетныеСчета, 
								"ДатаОткрытия", Суффикс);  
		
		ДобавитьНадписиПоКорпоративнымКартам(ИнформацияПоКартам, РасчетныйСчет, ГруппаРасчетныеСчета, Суффикс);
		ДобавитьНадписиВКолонки("", "", ГруппаРасчетныеСчета, "ПустаяДекорацияГруппыСчетов", Суффикс);  
	
		Индекс = Индекс + 1; 

	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьНадписиВКолонки(НаименованиеЗаголовка, Значение, ГруппаФормы, 
								  ИмяЭлемента, Суффикс, НазначитьДействие = Ложь)  
	
	ГруппаНадписи = Элементы.Добавить("ГруппаНадписи" + ИмяЭлемента + Суффикс, Тип("ГруппаФормы"), ГруппаФормы);
	ГруппаНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНадписи.ОтображатьЗаголовок = Ложь;
	ГруппаНадписи.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ИмяЭлементаЗаголовок      = "Заголовок" + ИмяЭлемента + Суффикс;
	ИмяЭлементаЗначение = "Значение" + ИмяЭлемента + Суффикс;

	ЗаголовокНадписи           = Элементы.Добавить(ИмяЭлементаЗаголовок, Тип("ДекорацияФормы"), ГруппаНадписи);
	ЗаголовокНадписи.Вид       = ВидДекорацииФормы.Надпись;
	ЗаголовокНадписи.Заголовок = НаименованиеЗаголовка;
	ЗаголовокНадписи.Ширина    = 15;
	
	ЗначениеСведений = Элементы.Добавить(ИмяЭлементаЗначение, Тип("ДекорацияФормы"), ГруппаНадписи);
	ЗначениеСведений.Вид = ВидДекорацииФормы.Надпись;
	ЗначениеСведений.Заголовок = Значение;     
	ЗначениеСведений.Ширина    = 20;
	Если НазначитьДействие Тогда	
		ЗначениеСведений.УстановитьДействие("ОбработкаНавигационнойСсылки", 
											"НомерСчетаОбработкаНавигационнойСсылки");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНадписиПоКорпоративнымКартам(ИнформацияПоКартам, РасчетныйСчет, ГруппаРасчетныеСчета, СуффиксРодительскойГруппы)
	
	Индекс = 1;

	Если ИнформацияПоКартам <> Неопределено Тогда

		ОтборПоСчету = Новый Структура("РасчетныйСчет", РасчетныйСчет.НомерСчета);
		МассивКартРасчетногоСчета = ИнформацияПоКартам.НайтиСтроки(ОтборПоСчету);
		
		Если МассивКартРасчетногоСчета.Количество() <> 0 Тогда
			ДобавитьНадписиВКолонки("", "", ГруппаРасчетныеСчета, "ПустаяДекорацияГруппыКарт", СуффиксРодительскойГруппы);  
		КонецЕсли;
		
		Для Каждого КорпоративнаяКарта Из МассивКартРасчетногоСчета Цикл 
			
			Суффикс = СуффиксРодительскойГруппы + Формат(Индекс, "ЧГ=");
			
			МассивФИО = Новый Массив();
			МассивФИО.Добавить(КорпоративнаяКарта.Фамилия);    
			МассивФИО.Добавить(КорпоративнаяКарта.Имя);
            МассивФИО.Добавить(КорпоративнаяКарта.Отчество);

			ВладелецКарты = СтрСоединить(МассивФИО, " ");

			ДобавитьНадписиВКолонки("Корпоративная карта: ", КорпоративнаяКарта.НомерКарты, ГруппаРасчетныеСчета,
									"КорпКарта", Суффикс);  
			ДобавитьНадписиВКолонки("Владелец: ",            ВладелецКарты, ГруппаРасчетныеСчета, "Владелец", Суффикс);  

			Индекс = Индекс + 1; 
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодробностиРешения()
	
	Если ПодробностиРешенияПрочитаны Тогда
		Возврат ПолучитьИзВременногоХранилища(ПодробностиРешенияАдрес);
	КонецЕсли;	
	
	// Прочитаем информацию из ответа банка.
	// Также в случае отказа здесь может храниться причина отказа. 
	// Хранилище значения (Запись.ПодробностиРешения) недоступно в данных формы, поэтому читаем отдельно менеджером записи.
	МенеджерЗаписи = РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
	МенеджерЗаписи.Прочитать();
	ПодробностиРешения = МенеджерЗаписи.ПодробностиРешения.Получить(); 	
	ПодробностиРешенияАдрес = ПоместитьВоВременноеХранилище(ПодробностиРешения, УникальныйИдентификатор);
	ПодробностиРешенияПрочитаны = Истина;
	
	Возврат ПодробностиРешения;
	
КонецФункции

&НаСервере
Процедура ВывестиДополнительныеУсловия()
	
	ГруппаДополнительныеУсловия = Элементы.ДополнительныеУсловия;
	
	// Сначала очистим существующие элементы.
	// В группе ДополнительныеУсловия все элементы созданы программно, поэтому удаление доступно. 
	Пока ГруппаДополнительныеУсловия.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ГруппаДополнительныеУсловия.ПодчиненныеЭлементы[0]);
	КонецЦикла;	
			
	ПодробностиРешения = ПодробностиРешения();
	
	Если ТипЗнч(ПодробностиРешения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	ДополнительныеУсловия = ПодробностиРешения.ДополнительныеСведения;
	Если ДополнительныеУсловия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ДополнительноеУсловие Из ДополнительныеУсловия Цикл
		
		Суффикс = Формат(Индекс, "ЧГ=");
	
		ГруппаДопСвойства = Элементы.Добавить("ГруппаСведение" + Суффикс, Тип("ГруппаФормы"), ГруппаДополнительныеУсловия);
		ГруппаДопСвойства.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДопСвойства.ОтображатьЗаголовок = Ложь;
		ГруппаДопСвойства.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаДопСвойства.Объединенная = Истина;
		
		ИмяЭлементаВидСведений      = "ВидСведения" + Суффикс;
		ИмяЭлементаЗначениеСведений = "ЗначениеСведений" + Суффикс;
		
		ВидСведенийТекст = ДополнительноеУсловие.ВидСведений;
		Если ЗначениеЗаполнено(ВидСведенийТекст) 
			И ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений)
			И СтрНайти(".,:;!?-+/*^~", Прав(ВидСведенийТекст, 1)) = 0  Тогда
			// Если заполнены обе колонки и в конце текста первой колонки не стоит знак препинания, 
			// то добавим двоеточие, чтобы выглядел как стандартный заголовок надписи.
			ВидСведенийТекст = ВидСведенийТекст + ": ";
		ИначеЕсли ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений) Тогда
			ГруппаДопСвойства.ОтображатьЗаголовок = Истина;
			ГруппаДопСвойства.Заголовок = НСтр("ru = 'Комментарий банка'");
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ВидСведенийТекст) И Не ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений)) 
			Или (Не ЗначениеЗаполнено(ВидСведенийТекст) И ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений)) Тогда
			// Указана только одна колонка, выводим строку на всю длину.
			ВидСведений           = Элементы.Добавить(ИмяЭлементаВидСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ВидСведений.Вид       = ВидДекорацииФормы.Надпись;
			Если ЗначениеЗаполнено(ВидСведенийТекст) Тогда
				ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ВидСведенийТекст);
			Иначе
				ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ДополнительноеУсловие.ЗначениеСведений);
			КонецЕсли;

			ВидСведений.АвтоМаксимальнаяШирина   = Ложь;
			ВидСведений.РастягиватьПоГоризонтали = Истина;
			ВидСведений.МаксимальнаяШирина       = 75;
			
		Иначе
			// Выводим обе колонки.
			ВидСведений           = Элементы.Добавить(ИмяЭлементаВидСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ВидСведений.Вид       = ВидДекорацииФормы.Надпись;
			ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ВидСведенийТекст);
			ВидСведений.Ширина    = 16;
			
			ЗначениеСведений  = Элементы.Добавить(ИмяЭлементаЗначениеСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ЗначениеСведений.Вид = ВидДекорацииФормы.Надпись;
			ЗначениеСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ДополнительноеУсловие.ЗначениеСведений);
			ЗначениеСведений.АвтоМаксимальнаяШирина = Ложь;
			ЗначениеСведений.РастягиватьПоГоризонтали = Истина;
			ЗначениеСведений.Ширина = 0;
			ЗначениеСведений.МаксимальнаяШирина = 54;
			
		КонецЕсли;
					
		Индекс = Индекс + 1; 
		
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Процедура ВывестиПрисоединенныеФайлы()

	Вложения.Очистить();
	
	ГиперссылкиВсехФайлов = Новый Массив;
	ГиперссылкаФайла      = Новый Массив;
	
	ПользовательскиеФайлы = 
						РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ПользовательскиеПрисоединенныеФайлы(Запись.Транзакция);

	Если НЕ ЗначениеЗаполнено(ПользовательскиеФайлы) Тогда
		Возврат;
	КонецЕсли;

	ИндексФайла = 0;
	Для каждого ПользовательскийФайл Из ПользовательскиеФайлы Цикл
		ЗаполнитьЗначенияСвойств(Вложения.Добавить(), ПользовательскийФайл);
		
		// Создаем формированную строку с гиперссылкой для текущего файла.
		КартинкаФайла = КартинкаПоРасширениюФайла(ПользовательскийФайл.Расширение);
		НадписьДляФайла = Новый ФорматированнаяСтрока(ПользовательскийФайл.ИсходноеИмяФайла,
													 , , , СтрШаблон("Вложение%1", ИндексФайла));
		
		ГиперссылкаФайла.Очистить();
		
		ГиперссылкаФайла.Добавить(Новый ФорматированнаяСтрока(КартинкаФайла));
		ГиперссылкаФайла.Добавить(Символы.НПП);
		ГиперссылкаФайла.Добавить(НадписьДляФайла);
		
		Если ГиперссылкиВсехФайлов.Количество() > 0 Тогда
			ГиперссылкиВсехФайлов.Добавить(Символы.ПС);
			ГиперссылкиВсехФайлов.Добавить(Символы.ПС);
		КонецЕсли;
		ГиперссылкиВсехФайлов.Добавить(Новый ФорматированнаяСтрока(ГиперссылкаФайла));
		
		ИндексФайла = ИндексФайла + 1;
	КонецЦикла;
	
	Элементы.НадписьПрисоединенныеФайлы.Заголовок = Новый ФорматированнаяСтрока(ГиперссылкиВсехФайлов);

КонецПроцедуры

&НаСервере
Функция КартинкаПоРасширениюФайла(Знач Расширение)

	Расширение = ?(Лев(Расширение, 1) <> ".", ".", "") + НРег(Расширение) + ";";

	Если СтрНайти(".doc;.docx;.rtf;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматWord;
		
	ИначеЕсли СтрНайти(".xls;.xlsx;.xlw;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматExcel;

	ИначеЕсли СтрНайти(".pdf;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматPDF;
	
	ИначеЕсли СтрНайти(".htm;.html;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматHTML;

	ИначеЕсли СтрНайти(".odt;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматOpenOfficeWriter;

	ИначеЕсли СтрНайти(".ods;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматOpenOfficeCalc;

	ИначеЕсли СтрНайти(".txt;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматTXT;

	ИначеЕсли СтрНайти(".mxl;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматMXL;
		
	Иначе
		Возврат БиблиотекаКартинок.ФорматПустой;

	КонецЕсли;

КонецФункции

&НаСервере
Процедура НастроитьФормуПоСостоянию()
	
	ОжидаетРешения 	= (Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения);
	Одобрено 		= (Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт);
	Отказано 		= (Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отказано);
	НеОтправлено 	= (Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.НеОтправлено);
						
	// ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
	// Если заявка получена банком, здесь может быть комментарий банка, а при отказе - причина отказа	
	ВыводитьДополнительныеУсловия = (ОжидаетРешения ИЛИ Одобрено ИЛИ Отказано);   
	
	Элементы.ДополнительныеУсловия.Видимость = ВыводитьДополнительныеУсловия; 
	Если ВыводитьДополнительныеУсловия Тогда
		ВывестиДополнительныеУсловия();
	КонецЕсли;	
	
	Элементы.ГруппаПрисоединенныеФайлы.Видимость = Запись.ЕстьФайлы;
	Если Запись.ЕстьФайлы Тогда
		ВывестиПрисоединенныеФайлы();
	КонецЕсли;
	
	Элементы.ОтправитьПовторно.Видимость = НеОтправлено;
	Элементы.ОтправитьПовторно.КнопкаПоУмолчанию = НеОтправлено;
	Элементы.ОтправитьПовторно.Доступность = Не ТолькоПросмотр;	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПометитьКакПрочитанное()
	ПометитьКакПрочитанноеСервер();
	ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПометитьКакПрочитанноеСервер()
	
	Попытка
	    // Перед записью читаем данные, чтобы гарантировать актуальность значений
		Прочитать();
		Запись.Новое = Ложь;
		Записать();
	Исключение
		// Никак специально не обрабатываем ошибку - только пишем в журнал
		ЗаписьЖурналаРегистрации(
			НСтр("ru='СостояниеЗаявокНаОткрытиеСчета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,,
			СтрШаблон(НСтр("ru='Ошибка пометки сообщения как прочтенное: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьБанковскиеСчетаНаСервере(Индекс)
	
	ПодробностиРешения = ПодробностиРешения();   
	Если ТипЗнч(ПодробностиРешения) <> Тип("Структура")
		Или ПодробностиРешения.РасчетныеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияПоСчетам = ПодробностиРешения.РасчетныеСчета;
    ИнформацияПоКартам = ПодробностиРешения.КорпоративныеКарты;
    СчетКорпоративныхРасчетов = Ложь;
	Счет = ИнформацияПоСчетам[Индекс];
		
	Если ИнформацияПоКартам <> Неопределено Тогда 
		ОтборПоСчету = Новый Структура("РасчетныйСчет", Счет.НомерСчета);  
		МассивКарт = ИнформацияПоКартам.НайтиСтроки(ОтборПоСчету);
		Если МассивКарт.Количество() <> 0 Тогда 
			СчетКорпоративныхРасчетов = Истина;
		КонецЕсли; 
	КонецЕсли;  
	
	БанковскийСчет = РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.НовыйБанковскийСчет(Счет, Запись.Организация);
	Если ЗначениеЗаполнено(БанковскийСчет) И СчетКорпоративныхРасчетов Тогда
		РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.СоздатьКорпоративнуюКарту(МассивКарт, 
														   БанковскийСчет, Запись.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьТранзакцииПовторно()
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(СервисОбменаСБанками);

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", 	Запись.Организация);
	Отбор.Вставить("Банк", 			Запись.Банк);
	Отбор.Вставить("ТипТранзакции", ТипыТранзакций.Заявка);
	Отбор.Вставить("Статус", 		Перечисления.СтатусыТранзакцийОбменаСБанками.Подготовлена);
	
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоПредмету(Запись.ЗаявкаНаОткрытиеСчета, Отбор);

	Если Транзакции.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СостояниеПрогресса = ЗаявкиНаОткрытиеСчета.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "отправка";
	СостояниеПрогресса.КоличествоДействий = Транзакции.Количество() + 1;
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Отправка файлов...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
		
	// Результат отправки будет обработан внутри процедуры отправки транзакций
	// (см. УниверсальныйОбменСБанкамиПереопределяемый.ПриОтправкеТранзакции())  
	УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(СервисОбменаСБанками, Транзакции);
	
	Возврат Истина;
	
КонецФункции
 
#КонецОбласти
