#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - обрабочик события получения сообщения от банка по заявке на открытие счета
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета  - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, к которой относится сообщение от банка
//  РеквизитыТранзакции - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//
Процедура ОбновитьСостояниеЗаявкиПриПолученииСообщения(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции) Экспорт 
	
	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции.Организация, РеквизитыТранзакции.Банк);
	
	Запись.ЕстьОшибки 			= Ложь;
	Запись.Новое 				= Истина;
	Запись.Транзакция 			= РеквизитыТранзакции.Транзакция;	
	
	НовоеСостояние = Запись.Состояние;
	
	Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Сервис);
	
	Если РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.ИзвещениеОПолученииБанкомЗаявки Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Заявка Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Отказ Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отказано;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Одобрено Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Ошибка Тогда
		Запись.ЕстьОшибки = Истина;
	КонецЕсли;	
	
	Запись.Состояние = НовоеСостояние;   	
	ПрочитатьПодробностиОтвета(Запись, РеквизитыТранзакции);
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	Запись.Записать();
	
КонецПроцедуры	

// Процедура - обрабочик события отправки сообщения банку по заявке на открытие счета
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета  - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, к которой относится сообщение банку
//  РеквизитыТранзакции - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//
Процедура ОбновитьСостояниеЗаявкиПриОтправкеСообщения(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции) Экспорт 
	
	// Текущая процедура (событие) будет вызвана в случае успешной отправки сообщения (транзакции) в каждый банк.
	// При первой успешной отправке заявки на открытие счета (т.е. если дошли до этого места) по текущему банку установим статус успешной отправки (Отправлено),
	// а по остальным банкам запишем начальный статус (НеОтправлено) на случай, если далее что-то сломается, и отправка не выполнится.
	// В дальнейшем по мере успешной отправки заявки в остальные банки состояние отправки в эти банки будет актуализироваться - см. ниже. 
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(РеквизитыТранзакции.Сервис);
	
	Если РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Заявка
		И НЕ ЗаявкаОтправлена(ЗаявкаНаОткрытиеСчета) Тогда
		ЗаписатьНачальноеСостояниеОтправки(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции);
		Возврат;
	КонецЕсли;	
	
	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции.Организация, РеквизитыТранзакции.Банк);
	
	Если РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Заявка Тогда
		Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено;
	КонецЕсли;	
	
	Запись.Транзакция = РеквизитыТранзакции.Транзакция;	
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	
	Запись.Записать();
	
КонецПроцедуры	

// Записывает начальное состояние заявки на открытие счета в таблицу состояний,
// если еще не выполнялась ее отправка в банки
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета  - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, по которой нужно записать состояние
//
Процедура УстановитьСостояниеНеотправленнойЗаявки(ЗаявкаНаОткрытиеСчета) Экспорт 
	
	// Если по заявке уже отправлены сообщения в банки, то состояние не меняем 
	Если ЗаявкаОтправлена(ЗаявкаНаОткрытиеСчета) Тогда
		Возврат;
	КонецЕсли;	
	
	СостоянияЗаявок = РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.СоздатьНаборЗаписей();
	СостоянияЗаявок.Отбор.ЗаявкаНаОткрытиеСчета.Установить(ЗаявкаНаОткрытиеСчета);
	СостоянияЗаявок.Прочитать();
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаОткрытиеСчета,
		"Организация, ПометкаУдаления");
	ВыбранныеБанки = Документы.ЗаявкаНаОткрытиеСчета.ВыбранныеБанки(ЗаявкаНаОткрытиеСчета);
	
	Если СостоянияЗаявок.Количество() = 0 Тогда
		Запись = СостоянияЗаявок.Добавить();
	Иначе
		Запись = СостоянияЗаявок[0];
	КонецЕсли;
	Запись.ЗаявкаНаОткрытиеСчета = ЗаявкаНаОткрытиеСчета;
	Запись.Организация = РеквизитыЗаявки.Организация;
	
	Если ВыбранныеБанки.Количество() = 1 Тогда
		Запись.Банк = ЗаявкаНаОткрытиеСчета.Банки[0].Банк;
	КонецЕсли;	
	
	Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Черновик;
			
	Если Запись.ПометкаУдаления <> РеквизитыЗаявки.ПометкаУдаления Тогда
		// Если меняется пометка удаления у заявки, то не меняем ее дату.
		Запись.ПометкаУдаления = РеквизитыЗаявки.ПометкаУдаления;
	Иначе
		// Иначе фиксируем дату изменения и пересчитываем срок актуальности.
		Запись.ДатаИзменения = ТекущаяДатаСеанса();
		УстановитьСрокАктуальностиЗаписи(Запись);
		Запись.ПометкаУдаления = РеквизитыЗаявки.ПометкаУдаления;
	КонецЕсли;

	СостоянияЗаявок.Записать();
	
КонецПроцедуры	

// Находит актуальную запись по заявке на открытие счета и добавляет в нее описание ошибки обмена данными с банком.
// Учитывает в том числе случай, когда заявка находится в состоянии "Черновик", т.е. еще не была отправлена ни в один банк.
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета		 - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, к которой относится ошибка  
//  РеквизитыТранзакции  - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//  ОписаниеОшибки		 - Строка - описание ошибки, возникшей при обмене данными по заявке на открытие счета с банком
//
Процедура ЗаписатьОшибкуПоАктуальномуСостоянию(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции, ОписаниеОшибки) Экспорт 
	
	Банк = РеквизитыТранзакции.Банк;
	
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(РеквизитыТранзакции.Сервис);
	
	Если РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Заявка Тогда
		
		// При начальной отправке заявки (ТипТранзакции = ЗаявкаНаОткрытиеСчета), состояние заявки может быть записано:
		// 	- одной записью без указания конкретного банка (если еще не было ни одной успешной отправки в какой-либо из банков),
		// 	- множеством записей - по 1 на каждый банк из заявки (если уже была хотя бы одна успешная транзакция отправки)
		// Поэтому сначала определим, куда именно (по какому банку) нужно записать ошибку.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗаявокНаОткрытиеСчета.Организация КАК Организация,
		|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета,
		|	СостояниеЗаявокНаОткрытиеСчета.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
		|ГДЕ
		|	СостояниеЗаявокНаОткрытиеСчета.Организация = &Организация
		|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета = &ЗаявкаНаОткрытиеСчета
		|	И СостояниеЗаявокНаОткрытиеСчета.Банк = &Банк
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеЗаявокНаОткрытиеСчета.Организация,
		|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета,
		|	СостояниеЗаявокНаОткрытиеСчета.Банк
		|ИЗ
		|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
		|ГДЕ
		|	СостояниеЗаявокНаОткрытиеСчета.Организация = &Организация
		|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета = &ЗаявкаНаОткрытиеСчета
		|	И СостояниеЗаявокНаОткрытиеСчета.Банк = ЗНАЧЕНИЕ(Справочник.БанкиУниверсальногоОбмена.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Организация", РеквизитыТранзакции.Организация);
		Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета);
		Запрос.УстановитьПараметр("Банк", РеквизитыТранзакции.Банк);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаЗаписей = РезультатЗапроса.Выбрать();
			ВыборкаЗаписей.Следующий(); // в выборке 1 запись
			Банк = ВыборкаЗаписей.Банк;
		КонецЕсли;	
			
	КонецЕсли;	
	
	ЗаписатьОшибку(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции.Организация, Банк, ОписаниеОшибки);
		
КонецПроцедуры

// Находит запись по заявке на открытие счета в конкретный банк и добавляет в нее описание ошибки обмена данными.
// Отличается от ЗаписатьОшибкуПоАктуальномуСостоянию() тем, что ожидает наличие записи состояния заявки по конкретному банку 
// (т.е., заявка уже была ранее отправлена в банки).
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета	 - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, к которой относится сообщение банку 
//  Организация		 - СправочникСсылка.Организации - организация-заявитель по заявке на открытие счета
//  Банк			 - СправочникСсылка.БанкиУниверсальногоОбмена - банк-получатель заявки на открытие счета
//  ОписаниеОшибки	 - Строка - описание ошибки, возникшей при обмене данными по заявке
//
Процедура ЗаписатьОшибку(ЗаявкаНаОткрытиеСчета, Организация, Банк, ОписаниеОшибки) Экспорт 

	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаОткрытиеСчета, Организация, Банк);
			
	Запись.ЕстьОшибки = Истина;
	Запись.ОписаниеОшибки = ОписаниеОшибки;
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	
	Запись.Записать();
	
КонецПроцедуры
 
// Получает массив непрочитанных сообщений от банков по заявкам на открытие текущего пользователя
// со статусом Отказано, Ожидает решения
//
// Возвращаемое значение:
//   - Массив - массив структур, содержащих описание нового состояния заявки на открытие
//   			или пустой массив, если отсутствуют права на просмотр состояний заявок
//
Функция НовыеСообщенияОтБанков(ПовторятьЗапрос) Экспорт  
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета) Тогда
		ПовторятьЗапрос = Ложь;
		Возврат Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеЗаявокНаОткрытиеСчета.Организация КАК Организация,
	|	СостояниеЗаявокНаОткрытиеСчета.Банк КАК Банк,
	|	СостояниеЗаявокНаОткрытиеСчета.Состояние КАК Состояние,
	|	СостояниеЗаявокНаОткрытиеСчета.ЕстьОшибки КАК ЕстьОшибки,
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.Новое
	|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И СостояниеЗаявокНаОткрытиеСчета.Состояние В (
	|   		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.Отказано), 
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И (СостояниеЗаявокНаОткрытиеСчета.Новое
	|		ИЛИ СостояниеЗаявокНаОткрытиеСчета.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.Отправлено),
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения)))";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
		
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	НовыеСостояния = ПакетЗапросов[0].Выгрузить();
	
	// При отстуствии заявок, по которым хотя бы теоретически можно получить ответ от банка,
	// нет смысла постоянно проверять оповещения.
	ПовторятьЗапрос = НЕ ПакетЗапросов[1].Пустой(); 
			
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(НовыеСостояния);

КонецФункции 

// Получает массив непрочитанных сообщений от банков по заявкам на открытие текущего пользователя 
// со статусом Счет открыт
// 
// Возвращаемое значение:
//   - Массив - массив структур, содержащих описание нового состояния заявки на открытие
//   			или пустой массив, если отсутствуют права на просмотр состояний заявок
//
Функция НовыеСообщенияОтБанковОбОткрытии(ПовторятьЗапрос) Экспорт  
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета) Тогда
		ПовторятьЗапрос = Ложь;
		Возврат Новый Массив;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеЗаявокНаОткрытиеСчета.Организация КАК Организация,
	|	СостояниеЗаявокНаОткрытиеСчета.Банк КАК Банк,  
	|	СостояниеЗаявокНаОткрытиеСчета.ПодробностиРешения КАК ПодробностиРешения,
	|	0 КАК КоличествоСчетов
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.Новое
	|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И СостояниеЗаявокНаОткрытиеСчета.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И (СостояниеЗаявокНаОткрытиеСчета.Новое
	|		ИЛИ СостояниеЗаявокНаОткрытиеСчета.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.Отправлено),
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения)))";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	НовыеСообщенияОбОткрытии = ПакетЗапросов[0].Выгрузить();
	
	// При отстуствии заявок, по которым хотя бы теоретически можно получить ответ от банка,
	// нет смысла постоянно проверять оповещения.
	ПовторятьЗапрос = НЕ ПакетЗапросов[1].Пустой();
	
	ТаблицаСчетовДляОповещения = НовыеСообщенияОбОткрытии.Скопировать();   
	ТаблицаСчетовДляОповещения.Очистить(); 
	
	Для Каждого СтрокаСообщения Из НовыеСообщенияОбОткрытии Цикл     
		
		ПодробностиРешения = СтрокаСообщения.ПодробностиРешения.Получить();  
		
		Если ТипЗнч(ПодробностиРешения) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетныеСчета = ПодробностиРешения.РасчетныеСчета;
		
		Для Каждого СтрокаСчетов Из РасчетныеСчета Цикл 
			
			Банк = РаботаСБанкамиБП.НайтиБанк(СтрокаСчетов.БИК,, СтрокаСчетов.КоррСчет);
			БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(
						 СтрокаСообщения.Организация, Банк, Строка(СтрокаСчетов.НомерСчета)); 
														  
																		  
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда     
																			  
				СтрокаСчетовДляОповещения = ТаблицаСчетовДляОповещения.Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаСчетовДляОповещения, СтрокаСообщения);
				СтрокаСчетовДляОповещения.КоличествоСчетов = 1;  

			КонецЕсли;	
			
		КонецЦикла;          
																	  		
	КонецЦикла;   
	
	ТаблицаСчетовДляОповещения.Свернуть("Организация, Банк", "КоличествоСчетов");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСчетовДляОповещения);
		
КонецФункции 

Функция СозданыСчетаПоНовымСообщениямОбОткрытии(МассивСообщений) Экспорт  
	
	СтатусСозданияСчетов = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеЗаявокНаОткрытиеСчета.Организация КАК Организация,
	|	СостояниеЗаявокНаОткрытиеСчета.Банк КАК Банк,
	|	СостояниеЗаявокНаОткрытиеСчета.ПодробностиРешения КАК ПодробностиРешения,
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.Новое
	|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И СостояниеЗаявокНаОткрытиеСчета.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт))";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСообщений = РезультатЗапроса.Выбрать();
			
	Пока ВыборкаСообщений.Следующий() Цикл  
		ПодробностиРешения = ВыборкаСообщений.ПодробностиРешения.Получить();   
		Если ТипЗнч(ПодробностиРешения) <> Тип("Структура") Или
			ПодробностиРешения.РасчетныеСчета.Количество() = 0 Тогда
			Возврат СтатусСозданияСчетов;
		КонецЕсли;
        СтруктураЗаписи = Новый Структура("ЗаявкаНаОткрытиеСчета, Банк, Организация");   
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ВыборкаСообщений); 
		СоздатьБанковскиеСчета(ПодробностиРешения, СтруктураЗаписи, СтатусСозданияСчетов, МассивСообщений);		
	КонецЦикла;
	
	Возврат СтатусСозданияСчетов;
	
КонецФункции 

Функция ПрочитаныНовыеСообщенияОбОткрытии() Экспорт  
	
	СтатусПрочитано = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета,
	|	СостояниеЗаявокНаОткрытиеСчета.Банк КАК Банк,
	|	СостояниеЗаявокНаОткрытиеСчета.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.Новое
	|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета.Ответственный = &Ответственный
	|	И СостояниеЗаявокНаОткрытиеСчета.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт))";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСообщений = РезультатЗапроса.Выбрать();
			
	Пока ВыборкаСообщений.Следующий() Цикл  
		Запись = ЗаписьСостоянияЗаявки(ВыборкаСообщений.ЗаявкаНаОткрытиеСчета, ВыборкаСообщений.Организация, ВыборкаСообщений.Банк);
        Запись.Новое = Ложь;  
		Попытка
			Запись.Записать();   
			СтатусПрочитано = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЗаписьЗаявкиНаОткрытие'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,
				,
				СтрШаблон(НСтр("ru='Ошибка записи состояния: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЦикла;
	
	Возврат СтатусПрочитано;
	
КонецФункции 

Процедура СоздатьБанковскиеСчета(ПодробностиРешения, СтруктураЗаписи, СтатусСозданияСчетов, МассивСообщений)   
	
	СчетКорпоративныхРасчетов = Ложь;
	ИнформацияПоСчетам = ПодробностиРешения.РасчетныеСчета;
    ИнформацияПоКартам = ПодробностиРешения.КорпоративныеКарты; 
	РезультатВыполнения = Истина;

	Для Каждого Счет Из ИнформацияПоСчетам Цикл       
		СчетКорпоративныхРасчетов = Ложь;
		ОтборПоСчету = Новый Структура("РасчетныйСчет", Счет.НомерСчета); 
		Если ИнформацияПоКартам <> Неопределено Тогда
			МассивКарт = ИнформацияПоКартам.НайтиСтроки(ОтборПоСчету);
			Если МассивКарт.Количество() <> 0 Тогда 
				СчетКорпоративныхРасчетов = Истина;
			КонецЕсли;      
		КонецЕсли;
		БанковскийСчет = НовыйБанковскийСчет(Счет, СтруктураЗаписи.Организация, МассивСообщений, СтруктураЗаписи.ЗаявкаНаОткрытиеСчета);
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда 
			Если СчетКорпоративныхРасчетов Тогда
				СоздатьКорпоративнуюКарту(МассивКарт, БанковскийСчет, СтруктураЗаписи.Организация);   
			КонецЕсли;  
		Иначе
			РезультатВыполнения = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Если РезультатВыполнения Тогда   
		
		Запись = ЗаписьСостоянияЗаявки(СтруктураЗаписи.ЗаявкаНаОткрытиеСчета, СтруктураЗаписи.Организация, СтруктураЗаписи.Банк);
        Запись.Новое = Ложь;  
		Попытка
			Запись.Записать();   
			СтатусСозданияСчетов = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЗаписьЗаявкиНаОткрытие'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,
				,
				СтрШаблон(НСтр("ru='Ошибка записи состояния: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры
	
Функция НовыйБанковскийСчет(Счет, Организация, МассивСообщений = Неопределено, Заявка = Неопределено) Экспорт
	
	// Массив сообщений:
	// в случае ошибки записывается строка "Ошибка"
	// в случае успешного создания записывается ссылка на банковский счет
	
	Банк = РаботаСБанкамиБП.НайтиБанк(Счет.БИК,, Счет.КоррСчет);    
	
   	Если ЗначениеЗаполнено(Банк) Тогда
		НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование");  
	Иначе
		ТекстСообщения = НСтр("ru='Счет %1 
							  |не создан по причине: 
							  |БИК %2 не найден. Обновите классификатор банков'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, Счет.НомерСчета, Счет.БИК);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);  
		
		Если МассивСообщений <> Неопределено Тогда   
			МассивСообщений.Добавить("Ошибка");
		КонецЕсли; 
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Валюта = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(Счет.Валюта);

	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТекстСообщения = НСтр("ru='Счет %1 
							  |не создан по причине: 
							  |Валюта с кодом %2 не найдена. Обновите классификатор валют'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, Счет.НомерСчета, Счет.Валюта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
		
		Если МассивСообщений <> Неопределено Тогда    
			МассивСообщений.Добавить("Ошибка");
		КонецЕсли;
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Валютный = (Валюта <>
					   ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеЗаполнения = Новый Структура;
    ДанныеЗаполнения.Вставить("Банк", Банк);
 		
	БанковскийСчетСсылка = Справочники.БанковскиеСчета.ПолучитьЭлемент(
			               Организация, Счет.НомерСчета, Счет.БИК, ДанныеЗаполнения);
	
	БанковскийСчет = БанковскийСчетСсылка.ПолучитьОбъект();
	БанковскийСчет.ВалютаДенежныхСредств = Валюта;
	БанковскийСчет.Валютный = Валютный;
	БанковскийСчет.ДатаОткрытия = Счет.ДатаОткрытия;
		
	Попытка
		БанковскийСчет.Записать(); 
		СтрокаСчета = НСтр("ru='Счет %1
								|%2, %3 
								|создан в справочнике Банковские счета'");
		ТекстСообщения = СтрШаблон(СтрокаСчета, Счет.НомерСчета, Банк, Валюта); 
		
		Если МассивСообщений <> Неопределено Тогда    
			МассивСообщений.Добавить(БанковскийСчет.Ссылка); 
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, БанковскийСчет);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ЗаписьБанковскогоСчетаПоЗаявкеНаОткрытие'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,
			,
			СтрШаблон(НСтр("ru='Ошибка записи банковского счета: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	Возврат БанковскийСчет.Ссылка;
	
КонецФункции

Процедура СоздатьКорпоративнуюКарту(МассивКарт, БанковскийСчет, Организация) Экспорт
	
	СчетКорпоративныхРасчетов = Ложь;
	
	Для Каждого КорпоративнаяКарта Из МассивКарт Цикл 
		
		МассивФИО = Новый Массив();
		МассивФИО.Добавить(КорпоративнаяКарта.Фамилия);    
		МассивФИО.Добавить(КорпоративнаяКарта.Имя);
        МассивФИО.Добавить(КорпоративнаяКарта.Отчество);
     	ФИО = СтрСоединить(МассивФИО, " ");					
		ИНН = КорпоративнаяКарта.ИНН;  
		
    	Если ЗначениеЗаполнено(ИНН) Тогда
			Владелец = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", ИНН); 						
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Владелец) И ЗначениеЗаполнено(ФИО) Тогда
			Владелец = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ФИО", ФИО); 						
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Владелец) Тогда   
			Продолжить;
		КонецЕсли;
		
		ЗаписьКорпоративныеКарты = РегистрыСведений.КорпоративныеКарты.СоздатьМенеджерЗаписи();
		ЗаписьКорпоративныеКарты.БанковскийСчет = БанковскийСчет;
		ЗаписьКорпоративныеКарты.НомерКарты = КорпоративнаяКарта.НомерКарты;
		ЗаписьКорпоративныеКарты.Организация = Организация;    
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			ЗаписьКорпоративныеКарты.ПодотчетноеЛицо = Владелец;
		КонецЕсли;
		
		Попытка
			ЗаписьКорпоративныеКарты.Записать(); 
			СчетКорпоративныхРасчетов = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЗаписьКорпКартыПоЗаявкеНаОткрытие'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,
				,
				СтрШаблон(НСтр("ru='Ошибка записи Корпоративной карты: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЦикла;
	
	Если СчетКорпоративныхРасчетов Тогда    
		
		БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект(); 
		БанковскийСчетОбъект.СчетКорпоративныхРасчетов = СчетКорпоративныхРасчетов;  
				
		Попытка
			БанковскийСчетОбъект.Записать(); 
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЗаписьБанковскогоСчетаПоЗаявкеНаОткрытие'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета,
				,
				СтрШаблон(НСтр("ru='Ошибка записи банковского счета: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки; 
			
		КонецЕсли;  
			
КонецПроцедуры

// Возвращает таблицу со списком пользовательских файлов, присоединенных к транзакции,
// не учитываются технические присоединенные файлы (xml-файлы и файлы подписей и т.п.).
//
// Параметры:
//	Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Транзакция обмена, для которой получаются файлы.
//
// Возвращаемое значение:
//	Неопределено или ТаблицаЗначений - Содержит колонки:
//		* Ссылка - СправочникСсылка.ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы - Ссылка на присоединенный файл.
//		* ИсходноеИмяФайла - Строка - Имя файла с расширением без пути.
//		* Расширение - Строка - Расширение файла.
//
Функция ПользовательскиеПрисоединенныеФайлы(Транзакция) Экспорт

	Если НЕ ЗначениеЗаполнено(Транзакция) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получим все присоединные файлы по всем транзакциям, связанным с текущим документооборотом,
	// т.к. банк может прислывать разные ответов в разные моменты времени.
	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	
	Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	ТипыТранзакцийСервиса = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Сервис);
	
	ВходящиеТипыТранзакций = Новый Массив;
	ВходящиеТипыТранзакций.Добавить(ТипыТранзакцийСервиса.ИзвещениеОПолученииБанкомЗаявки);
	ВходящиеТипыТранзакций.Добавить(ТипыТранзакцийСервиса.Отказ);
	ВходящиеТипыТранзакций.Добавить(ТипыТранзакцийСервиса.Одобрено);
	ВходящиеТипыТранзакций.Добавить(ТипыТранзакцийСервиса.Ошибка);
		
	ТранзакцииДокументооборота = УниверсальныйОбменСБанками.ПолучитьТранзакцииДокументооборота(
		РеквизитыТранзакции.Документооборот, ВходящиеТипыТранзакций);

	ПараметрыРезультата = Новый Структура();
	ПараметрыРезультата.Вставить("Реквизиты", Новый Массив);
	ПараметрыРезультата.Вставить("Данные",    Ложь);
	ПараметрыРезультата.Вставить("Адрес",     Ложь);
	
	ПараметрыРезультата.Реквизиты.Добавить("Ссылка");
	ПараметрыРезультата.Реквизиты.Добавить("ИсходноеИмяФайла");
	ПараметрыРезультата.Реквизиты.Добавить("Расширение");
	
	Отбор = Новый Структура();
	Отбор.Вставить("ТипДокумента", Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ПроизвольныйФайл);

	ПользовательскиеФайлы = УниверсальныйОбменСБанками.ПолучитьВложенияТранзакции(
		ТранзакцииДокументооборота.ВыгрузитьКолонку("Ссылка"), 
		ПараметрыРезультата,
		Отбор);
	
	Возврат ПользовательскиеФайлы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьСостоянияЗаявки

Функция ЗаписьСостоянияЗаявки(ЗаявкаНаОткрытиеСчета, Организация, Банк)
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ЗаявкаНаОткрытиеСчета = ЗаявкаНаОткрытиеСчета;
	Запись.Организация = Организация;
	Запись.Банк = Банк;
	
	Запись.Прочитать();
			
	Если НЕ Запись.Выбран() Тогда
		Запись.ЗаявкаНаОткрытиеСчета = ЗаявкаНаОткрытиеСчета;
		Запись.Организация = Организация;
		Запись.Банк = Банк;
	КонецЕсли;	
	
	Запись.ДатаИзменения = ТекущаяДатаСеанса();
	
	Возврат Запись;
	
КонецФункции	
	
Процедура ЗаписатьНачальноеСостояниеОтправки(ЗаявкаНаОткрытиеСчета, РеквизитыТранзакции)
		
	БанкТекущейТранзакции = РеквизитыТранзакции.Банк;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчетаБанки.Ссылка КАК ЗаявкаНаОткрытиеСчета,
	|	ЗНАЧЕНИЕ(Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета) КАК СервисОбменаСБанками,
	|	ЗаявкаНаОткрытиеСчетаБанки.Ссылка.Организация КАК Организация,
	|	ЗаявкаНаОткрытиеСчетаБанки.Банк КАК Банк,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаОткрытиеСчетаБанки.Банк = &БанкТекущейТранзакции
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.Отправлено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.НеОтправлено)
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ЗаявкаНаОткрытиеСчетаБанки
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчетаБанки.Ссылка = &ЗаявкаНаОткрытиеСчета";
	
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета);
	Запрос.УстановитьПараметр("БанкТекущейТранзакции", БанкТекущейТранзакции);
	
	ВыборкаПоБанкам = Запрос.Выполнить().Выбрать();
	
	СостоянияЗаявок = РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.СоздатьНаборЗаписей();
	СостоянияЗаявок.Отбор.ЗаявкаНаОткрытиеСчета.Установить(ЗаявкаНаОткрытиеСчета);
	
	Пока ВыборкаПоБанкам.Следующий() Цикл
		Запись = СостоянияЗаявок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоБанкам);
		Запись.ДатаИзменения = ТекущаяДатаСеанса();
		УстановитьСрокАктуальностиЗаписи(Запись);
		
		Если Запись.Банк = БанкТекущейТранзакции Тогда
			// Запоминаем ссылку на последнюю транзакцию по заявке в конкретный банк.
			Запись.Транзакция = РеквизитыТранзакции.Транзакция;
		КонецЕсли;
	КонецЦикла;
	
	СостоянияЗаявок.Записать();
	
КонецПроцедуры

Процедура УстановитьСрокАктуальностиЗаписи(Запись)

	Если Запись.ЕстьОшибки Тогда
		// 7 дней с момента возникновения ошибки
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено 
		ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения Тогда	
		// 3 месяца с момента изменения состояния
		Запись.СрокАктуальности = ДобавитьМесяц(Запись.ДатаИзменения, 3);
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт Тогда	
		Запись.СрокАктуальности = ДобавитьМесяц(Запись.ДатаИзменения, 3);
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отказано Тогда
		// 7 дней с момента получения ответа
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Черновик Тогда
		// 7 дней с момента получения ответа
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	КонецЕсли; 	
		
КонецПроцедуры

#КонецОбласти

#Область ПодробностиРешения

Функция ХранилищеФайлаОтвета(РеквизитыТранзакции)

	СписокТиповДокументов = УниверсальныйОбменСБанками.ПолучитьСписокТиповДокументовТранзакции(
		РеквизитыТранзакции.Сервис,
		РеквизитыТранзакции.ТипТранзакции);
		
	Если СписокТиповДокументов.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;	
		
	ТаблицаВложений = УниверсальныйОбменСБанками.ПолучитьВложенияТранзакции(
		РеквизитыТранзакции.Транзакция,
		Новый Структура("Данные", Истина),
		Новый Структура("ТипДокумента", СписокТиповДокументов[0]));
		
	Если ТаблицаВложений.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;	
		
	Возврат ТаблицаВложений[0].Данные; 

КонецФункции

Процедура ПрочитатьПодробностиОтвета(Запись, РеквизитыТранзакции)

	Если НЕ Запись.ЕстьФайлы Тогда
		// Если еще не было никаких присланных файлов от банка, то проверяем в текущем ответе.
		ПользовательскиеФайлы = ПользовательскиеПрисоединенныеФайлы(РеквизитыТранзакции.Транзакция);
		Запись.ЕстьФайлы = ЗначениеЗаполнено(ПользовательскиеФайлы);
	КонецЕсли;

	// Получаем хранилище значения с файлом, соответствующим типу транзакции
	ПодробностиОтветаХранилище = ХранилищеФайлаОтвета(РеквизитыТранзакции);
	
	Если ПодробностиОтветаХранилище = Неопределено Тогда
		Запись.ЕстьОшибки = Истина;
		Запись.ОписаниеОшибки = СтрШаблон(НСтр("ru='В сообщении от %1 отсутствует файл с подробностями.'"), Запись.Банк);
		Возврат;
	КонецЕсли;	
	
	Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Сервис);

	Запись.ЕстьОшибки = (РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Ошибка);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");   
		
	ЕстьДопСведенияВОтветеБанка = Ложь;
	СведенияПоСчетам = Неопределено;
	СведенияКорпКарты = Неопределено;
	
	Попытка
	
		// В хранилище находятся двоичные данные
		ПодробностиОтвета = ПодробностиОтветаХранилище.Получить();
		ПодробностиОтвета.Записать(ИмяФайла);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			ТипУзла = ЧтениеXML.ТипУзла;
			ИмяУзла = ЧтениеXML.Имя;
			

			// ДОКУМЕНТ - непосредственно описание заявки.
			// В атрибутах этого узла содержится информация для идентификации заявки.
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Документ" Тогда
				
				// Номер заявки, присвоенный банком
				РегистрационныйНомер = ЧтениеXML.ПолучитьАтрибут("РегистрационныйНомер");
				Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
					Запись.РегистрационныйНомер = РегистрационныйНомер;
				КонецЕсли;	
			
			// ПРОДУКТ/РасчетныйСчет - основные сведения по заявке на открытие счета.
			// Этот узел содержит сообщения по положительному решению
	
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "РасчетныйСчет" Тогда
				
				Если СведенияПоСчетам = Неопределено Тогда
					СведенияПоСчетам = НоваяТаблицаСведенийПоРасчетнымСчетам();	
				КонецЕсли;
				СловарьАтрибутовРасчетногоСчета = Новый Соответствие;
				
				СловарьАтрибутовРасчетногоСчета.Вставить("ДатаОткрытия", Новый Структура("ВидСведений, Тип", "ДатаОткрытия", "Дата"));
				СловарьАтрибутовРасчетногоСчета.Вставить("БИК", 		 Новый Структура("ВидСведений, Тип", "БИК", 	   "Строка"));
				СловарьАтрибутовРасчетногоСчета.Вставить("КоррСчет",     Новый Структура("ВидСведений, Тип", "КоррСчет",   "Строка"));
				СловарьАтрибутовРасчетногоСчета.Вставить("НомСчет",      Новый Структура("ВидСведений, Тип", "НомерСчета", "Строка"));
				СловарьАтрибутовРасчетногоСчета.Вставить("КодВалюты",	 Новый Структура("ВидСведений, Тип", "Валюта", 	   "Строка"));
				
				СтрокаСведенийПоСчету = СведенияПоСчетам.Добавить();

				Для Каждого ОписаниеАтрибута Из СловарьАтрибутовРасчетногоСчета Цикл
					
					ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут(ОписаниеАтрибута.Ключ);
					Если НЕ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
						Продолжить;
					КонецЕсли;	
					
					ВидСведений = ОписаниеАтрибута.Значение.ВидСведений;
					ТипСтрокой = ОписаниеАтрибута.Значение.Тип;
					
					Если ТипСтрокой = "Дата" Тогда
						ЗначениеСведений = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеАтрибута);
					ИначеЕсли ВидСведений = "Валюта" Тогда
						ЗначениеСведений = ЗначениеАтрибута;
					Иначе
						ЗначениеСведений = XMLЗначение(Тип(ТипСтрокой), ЗначениеАтрибута);
					КонецЕсли;
					
					СтрокаСведенийПоСчету[ВидСведений] = ЗначениеСведений;

				КонецЦикла; 
				
			// ПРОДУКТ/РасчетныйСчет/СведКарт - сведения по корпоративным картам, привязанным к расчетному счету.
			// Этот узел содержит сообщения по положительному решению
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "СведКарт" Тогда
				
				Если СведенияКорпКарты = Неопределено Тогда
					СведенияКорпКарты = НоваяТаблицаСведенийПоКорпоративнымКартам();
				КонецЕсли;
	
				СловарьАтрибутовКорпКарт = Новый Соответствие;
				
				СловарьАтрибутовКорпКарт.Вставить("НомерКарты",   Новый Структура("ВидСведений, Тип", "НомерКарты", "Строка"));
				СловарьАтрибутовКорпКарт.Вставить("ИННВладельца", Новый Структура("ВидСведений, Тип", "ИНН", 		"Строка"));
				СловарьАтрибутовКорпКарт.Вставить("ФамилВл",      Новый Структура("ВидСведений, Тип", "Фамилия",    "Строка"));
				СловарьАтрибутовКорпКарт.Вставить("ИмяВл",	      Новый Структура("ВидСведений, Тип", "Имя",        "Строка"));
				СловарьАтрибутовКорпКарт.Вставить("ОтчВл",	      Новый Структура("ВидСведений, Тип", "Отчество", 	"Строка"));
				
				СтрокаСведенийКорпКарты = СведенияКорпКарты.Добавить();

				Для Каждого ОписаниеАтрибута Из СловарьАтрибутовКорпКарт Цикл
					
					ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут(ОписаниеАтрибута.Ключ);
					Если НЕ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
						Продолжить;
					КонецЕсли;	
					
					ВидСведений = ОписаниеАтрибута.Значение.ВидСведений;
					ТипСтрокой = ОписаниеАтрибута.Значение.Тип;

					ЗначениеСведений = XMLЗначение(Тип(ТипСтрокой), ЗначениеАтрибута);
					СтрокаСведенийКорпКарты[ВидСведений] = ЗначениеСведений;
					
					// СтрокаСведенийПоСчету инициализирована ранее
					СтрокаСведенийКорпКарты.РасчетныйСчет = СтрокаСведенийПоСчету.НомерСчета;
				КонецЦикла; 
				
			// ДОПОЛНИТЕЛЬНЫЕ СВЕДЕНИЯ - Дополнительные сведения по заявке на открытие счета.
			// Особенность этого узла в том, что количество доп сведений может быть любым, поэтому отдельно отслеживается начало узла, список доп сведений и окончание узла.
			// Этот узел может содержать сообщения следующих видов:
			//	- ответ банка о получении заявки
			//	- положительное решение
			//	- отрицательное решение
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "ДопСвед" Тогда
			
				ДополнительныеСведения = НоваяТаблицаДополнительныхСведений();
					
				// В отрицательном решении здесь указана причина отказа.
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Свед" Тогда
				
				// Отдельная запись о дополнительном сведении.
				// Таблица дополнительных сведений инициализирована ранее.
				СтрокаДополнительныхСведений = Неопределено;
				ВидСведений    = ЧтениеXML.ПолучитьАтрибут("ВидСвед");
				СтрокаДополнительныхСведений = ДополнительныеСведения.Добавить();
				СтрокаДополнительныхСведений.ВидСведений      = ВидСведений;
				СтрокаДополнительныхСведений.ЗначениеСведений = ЧтениеXML.ПолучитьАтрибут("Содерж");
		
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Ошибки" Тогда
				
				// Внутри узла может быть описано несколько ошибок.
				Ошибки 		   = Новый Массив;
				ОшибкиПодробно = Новый Массив;

			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Ошибка" Тогда
				
				// Отдельная запись об ошибке - дописываем к предыдущим.
				КодОшибки 				= ЧтениеXML.ПолучитьАтрибут("Код");
				ОписаниеОшибки 			= ЧтениеXML.ПолучитьАтрибут("Сообщение");
				ОписаниеОшибкиПодробное = ЧтениеXML.ПолучитьАтрибут("ПолноеОписание");
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Ошибки.Добавить(ОписаниеОшибки);
				КонецЕсли;
				
				ОшибкаПодробно = Новый Массив;
				Если ЗначениеЗаполнено(КодОшибки) Тогда
					ОшибкаПодробно.Добавить(СтрШаблон(НСтр("ru='ошибка %1:'"), КодОшибки));
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеОшибкиПодробное) Тогда
					ОшибкаПодробно.Добавить(ОписаниеОшибкиПодробное);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОшибкаПодробно) Тогда
					ОшибкиПодробно.Добавить(СтрСоединить(ОшибкаПодробно, " "));
				КонецЕсли;
				
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента И ИмяУзла = "Ошибки" Тогда
				
				// Закончено чтение ошибок - нужно сохранить информацио об ошибках в запись регистра сведений.
				Запись.ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
				Запись.ОписаниеОшибкиПодробное 	= СтрСоединить(ОшибкиПодробно, Символы.ПС);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если СведенияПоСчетам <> Неопределено Или
			
			 ДополнительныеСведения  <> Неопределено Тогда
			 
			// Состав сведений по заявке записываем  в структуру
			// Саму структуру храним в записи регистра сведений в виде ХранилищеЗначения.
			СведенияПоЗаявке = Новый Структура("РасчетныеСчета, КорпоративныеКарты, ДополнительныеСведения");				
			СведенияПоЗаявке.РасчетныеСчета = СведенияПоСчетам;
			СведенияПоЗаявке.КорпоративныеКарты = СведенияКорпКарты;
			СведенияПоЗаявке.ДополнительныеСведения = ДополнительныеСведения;
			Запись.ПодробностиРешения = Новый ХранилищеЗначения(СведенияПоЗаявке);

		КонецЕсли;	
			
		ЧтениеXML.Закрыть();
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкиНаОткрытиеСчета.ПрочитатьПодробностиОтвета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РеквизитыТранзакции.Транзакция,
			ПодробноеПредставлениеОшибки);
	
		Запись.ЕстьОшибки     = Истина;
		Запись.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Запись.ОписаниеОшибкиПодробное = ПодробноеПредставлениеОшибки;
			
	КонецПопытки;
	
	Если РеквизитыТранзакции.ТипТранзакции = ТипыТранзакций.Одобрено Тогда
		// Обязательно должны быть заполнены реквизиты счета
		ИнформацияОбОшибке = НСтр("ru = 'Отсутствует информация о расчетных счетах'");
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Файл ответа не содержит обязательных атрибутов'");

		Если СведенияПоСчетам = Неопределено Или СведенияПоЗаявке.РасчетныеСчета.Количество() = 0 Тогда
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкиНаОткрытиеСчета.ПрочитатьПодробностиОтвета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РеквизитыТранзакции.Транзакция,
			ПодробноеПредставлениеОшибки);
	
			Запись.ЕстьОшибки     = Истина;
			Запись.ОписаниеОшибки = ИнформацияОбОшибке;
			Запись.ОписаниеОшибкиПодробное = ПодробноеПредставлениеОшибки;

		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция НоваяТаблицаСведенийПоКорпоративнымКартам()

	СведенияПоКорпоративнымКартам = Новый ТаблицаЗначений;
	СведенияПоКорпоративнымКартам.Колонки.Добавить("РасчетныйСчет", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СведенияПоКорпоративнымКартам.Колонки.Добавить("НомерКарты",    ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СведенияПоКорпоративнымКартам.Колонки.Добавить("ИНН", 			ОбщегоНазначения.ОписаниеТипаСтрока(12));
	СведенияПоКорпоративнымКартам.Колонки.Добавить("Фамилия", 		ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СведенияПоКорпоративнымКартам.Колонки.Добавить("Имя", 			ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СведенияПоКорпоративнымКартам.Колонки.Добавить("Отчество", 		ОбщегоНазначения.ОписаниеТипаСтрока(0));

	Возврат СведенияПоКорпоративнымКартам;
	
КонецФункции

Функция НоваяТаблицаСведенийПоРасчетнымСчетам()

	СведенияоРасчетнымСчетам = Новый ТаблицаЗначений;
	СведенияоРасчетнымСчетам.Колонки.Добавить("НомерСчета",   ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СведенияоРасчетнымСчетам.Колонки.Добавить("БИК",          ОбщегоНазначения.ОписаниеТипаСтрока(9));
	СведенияоРасчетнымСчетам.Колонки.Добавить("КоррСчет",     ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СведенияоРасчетнымСчетам.Колонки.Добавить("Валюта",       ОбщегоНазначения.ОписаниеТипаСтрока(3));
	СведенияоРасчетнымСчетам.Колонки.Добавить("ДатаОткрытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));

	Возврат СведенияоРасчетнымСчетам;
	
КонецФункции

Функция НоваяТаблицаДополнительныхСведений()

	ДополнительныеСведения = Новый ТаблицаЗначений;
	ДополнительныеСведения.Колонки.Добавить("ВидСведений",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДополнительныеСведения.Колонки.Добавить("ЗначениеСведений", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	Возврат ДополнительныеСведения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_Новый

// Возвращает признак того, была ли заявка отправлена в банки.
//
// Параметры:
//	Заявка - ДокументСсылка.Заявка - Ссылка на заявку.
//
// Возвращаемое значение:
//	Булево - Истина, если заявка отправлена, иначе Ложь.
//
Функция ЗаявкаОтправлена(Заявка) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Заявка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определяем, есть ли по заявке записи о ее отправке в банки.
	// При успешной отправке заявки хотя бы в 1 банк состояние заявки далее отслеживается отдельно по каждому банку, 
	// но при этом ни по какому банку не будет состояния Черновик (см. ОбновитьСостояниеЗаявкиПриОтправкеСообщения()).
	// Поэтому по наличию хотя бы 1 записи о состоянии, отличном от Черновик, можно гарантированно определить, что заявка уже отправлена.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заявка.Банк КАК Банк
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявок
	|		ПО Заявка.Ссылка = СостояниеЗаявок.ЗаявкаНаОткрытиеСчета
	|			И Заявка.Банк = СостояниеЗаявок.Банк
	|ГДЕ
	|	Заявка.Ссылка = &Заявка
	|	И НЕ СостояниеЗаявок.Состояние ЕСТЬ NULL
	|	И СостояниеЗаявок.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаОткрытиеСчета.Черновик)";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции	

Функция УслугиБанков(Банк, ЗаявкаНаОткрытиеСчета) Экспорт       
	
	СтруктураСервисов = Новый Структура("ПредлагатьПодключитьДиректБанк, ПредлагатьПодключитьСБП", Ложь, Ложь); 
		
	ИдентификаторПродукта = ИдентификаторПродукта(ЗаявкаНаОткрытиеСчета, Банк); 
	
	УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета,
		Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.УсловияОбслуживания,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк),
		Истина);
	Если УслугиБанка.Количество() = 0 Тогда
		Возврат СтруктураСервисов;
	КонецЕсли;
	
	УсловияОбслуживанияXDTO = ЗаявкиНаОткрытиеСчета.ОбъектXDTOХарактеристики(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, УслугиБанка[0].Значение);

	ФинансовыйПродуктXDTO = ЗаявкиНаОткрытиеСчета.НайтиФинансовыйПродукт(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета,
		УсловияОбслуживанияXDTO,
		ИдентификаторПродукта,
		ЗаявкаНаОткрытиеСчета.Дата);

	Если ФинансовыйПродуктXDTO <> Неопределено Тогда        
			
		Доступен1СДиректБанк = ФинансовыйПродуктXDTO.Доступен1СДиректБанк = Истина;	 
		ПредлагатьПодключитьСБП = ФинансовыйПродуктXDTO.ПредлагатьПодключитьСБП = Истина;	
		СтруктураСервисов.ПредлагатьПодключитьДиректБанк = Доступен1СДиректБанк;	
		СтруктураСервисов.ПредлагатьПодключитьСБП = ПредлагатьПодключитьСБП;	
		
	КонецЕсли;
	
	Возврат СтруктураСервисов;
	
КонецФункции  

Функция ИдентификаторПродукта(ЗаявкаНаОткрытиеСчета, Банк) Экспорт

	ИдентификаторПродукта = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета); 
	Запрос.УстановитьПараметр("Банк", Банк);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчетаБанки.ИдентификаторПродукта КАК ИдентификаторПродукта
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ЗаявкаНаОткрытиеСчетаБанки
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчетаБанки.Ссылка = &ЗаявкаНаОткрытиеСчета
	|	И ЗаявкаНаОткрытиеСчетаБанки.Банк = &Банк";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.ИдентификаторПродукта;	
	КонецЕсли;
	
	Возврат ИдентификаторПродукта;
	
КонецФункции

#КонецОбласти

#КонецЕсли
