// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Текущие таргеты рекламы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Функция ТекущиеТаргетыРекламы() Экспорт
	
	ТаблицаТаргетыРекламы = Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникРеклама.Код КАК ИдентификаторРекламы,
		|	ЗначенияХарактеристикРекламы.Характеристика КАК ИдентификаторХарактеристики,
		|	ЗначенияХарактеристикРекламы.Значение КАК ЗначениеХарактеристики
		|ИЗ
		|	РегистрСведений.ЗначенияХарактеристикРекламы КАК ЗначенияХарактеристикРекламы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Реклама КАК СправочникРеклама
		|		ПО ЗначенияХарактеристикРекламы.Реклама = СправочникРеклама.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицы = ТаблицаТаргетыРекламы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ТаблицаТаргетыРекламы;
	
КонецФункции

// Создать наборы записей.
// 
// Параметры:
//  ТаблицаЗаписейРегистра - см. НовыйТаблицаТаргетыРекламы
//
Процедура СоздатьОбновитьНаборыЗаписей(ТаблицаЗаписейРегистра) Экспорт
	
	ТаблицаЗаписейРегистра.Сортировать("РекламаСсылка", Новый СравнениеЗначений);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияХарактеристикРекламы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаЗаписейРегистра;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Реклама", "РекламаСсылка");
		Блокировка.Заблокировать();
		
		Реклама = Справочники.Реклама.ПустаяСсылка();
		НаборЗаписей = СоздатьНаборЗаписей();
		
		Для Каждого СтрокаЗаписи Из ТаблицаЗаписейРегистра Цикл
			
			Если СтрокаЗаписи.РекламаСсылка <> Реклама Тогда
				
				Если НаборЗаписей.Количество() Тогда
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЕсли;
				
				Реклама = СтрокаЗаписи.РекламаСсылка;
				НаборЗаписей.Отбор.Реклама.Установить(Реклама);
				
			КонецЕсли;
			
			Характеристика = СтрокаЗаписи.Характеристика;
			Значение = СтрокаЗаписи.Значение;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Реклама = Реклама;
			Запись.Характеристика = Характеристика;
			Запись.Значение = Значение;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияХарактеристикаПрофиля(
			РекламныйСервисСлужебный.ИмяДействияОбновление());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Очистить набор записей по рекламе.
// 
// Параметры:
//  Реклама - СправочникСсылка.Реклама
// 
Процедура ОчиститьНаборЗаписейРекламы(Знач Реклама) Экспорт
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияХарактеристикРекламы");
		ЭлементБлокировки.УстановитьЗначение("Реклама", Реклама);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Реклама.Установить(Реклама);
		НаборЗаписей.Записать();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Удаление набора записей РС ЗначенияХарактеристикиРекламы'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#Область Конструкторы

// Новый таблица записей регистра.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый таблица записей регистра:
// * РекламаСсылка - СправочникСсылка.Реклама
// * ИдентификаторРекламы - ОпределяемыйТип.ИдентификаторРекламы
// * Характеристика - ОпределяемыйТип.ВидХарактеристикиРекламы
// * Значение - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
//
Функция НовыйТаблицаТаргетыРекламы() Экспорт
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("РекламаСсылка", Новый ОписаниеТипов("СправочникСсылка.Реклама"));
	Результат.Колонки.Добавить("ИдентификаторРекламы", Метаданные.ОпределяемыеТипы.ИдентификаторРекламы.Тип);
	Результат.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ВидХарактеристикиРекламы.Тип);
	Результат.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеХарактеристикиРекламы.Тип);
	
	Возврат Результат;
	
КонецФункции

// Новый таблица статусов опций ИТС.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый таблица статусов опций ИТС:
// * ИмяСервиса - Строка
// * ИдентификаторСервиса -Строка
// * ДатаОкончанияОпции - Дата
// * ДатаНачалаОпции - Дата
// * ИмяОпции - Строка
// * ИдентификаторОпции - Строка
//
Функция НовыйТаблицаСтатусовОпцийИТС() Экспорт
	
	Типы = РекламныйСервисСлужебный.Типы();
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ИмяСервиса",           Типы.Строка); //applicationNick
	Результат.Колонки.Добавить("ИдентификаторСервиса", Типы.Строка); //applicationUeid
	Результат.Колонки.Добавить("ДатаОкончанияОпции",   Типы.Дата);   //optionPackageEndDate
	Результат.Колонки.Добавить("ДатаНачалаОпции",      Типы.Дата);   //optionPackageStartDate
	Результат.Колонки.Добавить("ИмяОпции",             Типы.Строка); //optionTypeNickName
	Результат.Колонки.Добавить("ИдентификаторОпции",   Типы.Строка); //optionTypeNickUeid
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
