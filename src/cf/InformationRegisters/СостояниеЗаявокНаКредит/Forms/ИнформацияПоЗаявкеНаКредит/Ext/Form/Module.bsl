#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Подготовим структуру для работы с фоновыми заданиями.
	СведенияОДлительнойОперации = Новый Структура();
	СведенияОДлительнойОперации.Вставить("Имя", "");
	СведенияОДлительнойОперации.Вставить("ДлительнаяОперация");

	Если ТребуетсяАкцепт(Запись, ТекущаяДатаСеанса()) ИЛИ (Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.НеОтправлено) Тогда
		// Запускаем обновление данных из сервиса, чтобы к моменту отправки сообщения (заявка или акцепт) они успели закэшироваться.
		ОбновитьСведенияОСервисе();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
        МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Требуется прочитать данные из хранилища значения
	ПодробностиРешенияПрочитаны = Ложь;
	
	ДатаЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ЗаявкаНаКредит, "Дата");
	
	КраткоеОписаниеОшибки = НСтр("ru = 'В процессе обмена с сервером возникла неизвестная ошибка'");
	Если ЗначениеЗаполнено(Запись.ОписаниеОшибки) Тогда
		КраткоеОписаниеОшибки = Запись.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ОписаниеОшибкиПодробное) Тогда
		Подстроки = Новый Массив;
		Подстроки.Добавить(КраткоеОписаниеОшибки);
		Подстроки.Добавить(Символы.ПС);
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"), , , , "ОписаниеОшибкиПодробное"));
		Элементы.НадписьОписаниеОшибки.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	Иначе
		Элементы.НадписьОписаниеОшибки.Заголовок = КраткоеОписаниеОшибки;
	КонецЕсли;

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Запись.Новое Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПометитьКакПрочитанное", 1, Истина);	
	КонецЕсли;	
		
	// Если запустили обновление данных сервиса, то будем ожидать его завершения.
	Если ТребуетсяАкцепт(Запись, ОбщегоНазначенияКлиент.ДатаСеанса()) 
		ИЛИ Запись.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.НеОтправлено") Тогда

		Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьИнтернетПоддержкуПользователей", 0.5, Истина);
		Иначе
			ОжидатьЗавершениеОбновленияДанныхСервиса();
		КонецЕсли;

	КонецЕсли;	
	
	Элементы.СуммаЗаявки.ОбновитьТекстРедактирования();
	Элементы.СрокЗаявки.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленоСостояниеЗаявкиНаКредит" Тогда 
		
		Если Запись.ЗаявкаНаКредит = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ЗаявкаНаКредит")
			И Запись.Банк = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Банк") Тогда
			Прочитать();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НеПроверятьЗаполнение Тогда
		// Проверка заполнения выполняется только при иницировании действия пользователем.
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Запись.СуммаЗаявки) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сумма'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СуммаЗаявки", , Отказ);

	ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМин) И Запись.СуммаЗаявки < Запись.СуммаМин Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Запрашиваемая сумма (%1 руб.) меньше минимальной одобренной суммы (%2 руб.)'"),
			Формат(Запись.СуммаЗаявки, "ЧДЦ=2"),
			Формат(Запись.СуммаМин, "ЧДЦ=2"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СуммаЗаявки", , Отказ);

	ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМакс) И Запись.СуммаЗаявки > Запись.СуммаМакс Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Запрашиваемая сумма (%1 руб.) больше максимальной одобренной суммы (%2 руб.)'"),
			Формат(Запись.СуммаЗаявки, "ЧДЦ=2"),
			Формат(Запись.СуммаМакс, "ЧДЦ=2"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СуммаЗаявки", , Отказ);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Запись.СрокЗаявки) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Срок'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СрокЗаявки", , Отказ);

	ИначеЕсли ЗначениеЗаполнено(Запись.СрокМин) И Запись.СрокЗаявки < Запись.СрокМин Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Запрашиваемый срок (%1 мес.) меньше минимального одобренного срока (%2 мес.)'"),
			Запись.СрокЗаявки,
			Запись.СрокМин);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СрокЗаявки", , Отказ);

	ИначеЕсли ЗначениеЗаполнено(Запись.СрокМакс) И Запись.СрокЗаявки > Запись.СрокМакс Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Запрашиваемый срок (%1 мес.) больше максимального одобренного срока (%2 мес.)'"),
			Запись.СрокЗаявки,
			Запись.СрокМакс);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Запись.СрокЗаявки", , Отказ);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Документооборот = ДокументооборотПоТранзакции(Запись.Транзакция);
	Если НЕ ЗначениеЗаполнено(Документооборот) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Заявка не отправлена'"));
		Возврат;
	КонецЕсли;
	
	// В качестве заголовка формы этапов используем представление заявки.
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Наименование", Заголовок);
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуСостоянияДокументооборота(Документооборот, ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = Запись.ОписаниеОшибки
		+ ?(ПустаяСтрока(Запись.ОписаниеОшибкиПодробное), "", Символы.ПС + Запись.ОписаниеОшибкиПодробное);
	
	ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(ОписаниеОшибки, ЭтотОбъект, СтрШаблон(НСтр("ru='Обмен с %1'"), Запись.Банк));

КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаявкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Открываем форму заявки на кредит - других ссылок в тексте надписи нет

	КлючеваяОперация = "ОткрытиеФормыЗаявкаНаКредит";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ОткрытьФорму("Документ.ЗаявкаНаКредит.ФормаОбъекта", Новый Структура("Ключ", Запись.ЗаявкаНаКредит));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗаявкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Запись.СуммаЗаявки = Текст;
	
	Если АннуитетныйГрафикПогашения Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьАннуитетныйПлатеж", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокЗаявкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Запись.СрокЗаявки = Текст;
	
	Если АннуитетныйГрафикПогашения Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьАннуитетныйПлатеж", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура НадписьПрисоединенныеФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПрефиксСсылки = "Вложение";

	Если НЕ СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, ПрефиксСсылки) Тогда
		Возврат;
	КонецЕсли;

	ИндексФайлаСтрокой = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(ПрефиксСсылки) + 1);
	ИндексФайла = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИндексФайлаСтрокой);
	Если ТипЗнч(ИндексФайла) <> Тип("Число")
		ИЛИ ИндексФайла < 0
		ИЛИ ИндексФайла > Вложения.Количество() - 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Вложения[ИндексФайла];
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);

	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьАкцепт(Команда)
	
	НеПроверятьЗаполнение = Ложь;
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Запись.СервисОбменаСБанками);
	
	ДокументооборотыПолучателей = Новый Соответствие;
	ДокументооборотыПолучателей.Вставить(Запись.Банк, ДокументооборотПоТранзакции(Запись.Транзакция));
	
	ПараметрыПодписанияИОтправки = ЗаявкиНаКредитКлиент.ПараметрыПодписанияИОтправки(Запись.СервисОбменаСБанками);
	ПараметрыПодписанияИОтправки.ЗаявкаНаКредит       = Запись.ЗаявкаНаКредит;
	ПараметрыПодписанияИОтправки.Организация          = Запись.Организация;
	ПараметрыПодписанияИОтправки.Банки                = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.Банк);
	ПараметрыПодписанияИОтправки.ДокументооборотыПолучателей = ДокументооборотыПолучателей;
	ПараметрыПодписанияИОтправки.ТипТранзакции               = ТипыТранзакций.Акцепт;
	ПараметрыПодписанияИОтправки.ПараметрыОтбораСертификата  = ПараметрыОтбораСертификата(Запись.СервисОбменаСБанками, Запись.Организация);
	
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ВладелецФормы = ЭтотОбъект;
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПодписатьИОтправитьЗавершение", ЭтотОбъект);
	
	ЗаявкиНаКредитКлиент.НачатьПодписаниеИОтправку(ПараметрыПодписанияИОтправки);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявкуПовторно(Команда)
	
	// Если транзакция была создана ранее, но не отправлена, то отправляем существующую транзакцию.
	Если ОтправитьТранзакцииПовторно() Тогда
		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
		Закрыть();
		Возврат;
	КонецЕсли;	
	
	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Запись.СервисОбменаСБанками);
	
	// Если транзакции не существует, то повторяем цикл отправки полностью.
	ПараметрыПодписанияИОтправки = ЗаявкиНаКредитКлиент.ПараметрыПодписанияИОтправки(Запись.СервисОбменаСБанками);
	ПараметрыПодписанияИОтправки.ЗаявкаНаКредит       = Запись.ЗаявкаНаКредит;
	ПараметрыПодписанияИОтправки.Организация          = Запись.Организация;
	ПараметрыПодписанияИОтправки.Банки                = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.Банк);
	ПараметрыПодписанияИОтправки.ТипТранзакции        = ТипыТранзакций.Заявка;
	ПараметрыПодписанияИОтправки.ПараметрыОтбораСертификата = ПараметрыОтбораСертификата(Запись.СервисОбменаСБанками, Запись.Организация);
	
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ВладелецФормы  = ЭтотОбъект;
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПодписатьИОтправитьЗавершение", ЭтотОбъект);
	
	ЗаявкиНаКредитКлиент.НачатьПодписаниеИОтправку(ПараметрыПодписанияИОтправки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовок(СервисОбменаСБанками, Дата, Сумма, Срок)

	Если ЗначениеЗаполнено(Сумма) И ЗначениеЗаполнено(Срок) Тогда
		Результат = СтрШаблон(НСтр("ru = 'Заявка %1 %2 руб. на %3'"),
			СервисОбменаСБанками,
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(Сумма),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСрокаКредита(Срок));
	Иначе
		Результат = СтрШаблон(НСтр("ru = 'Заявка %1 от %2'"), СервисОбменаСБанками, Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Заголовок = СформироватьЗаголовок(Запись.СервисОбменаСБанками, ДатаЗаявки, Запись.СуммаЗаявки, Запись.СрокЗаявки);
	
	АннуитетныйГрафикПогашения = 
		(Запись.СпособРасчетаСуммыПлатежаПоКредиту = Перечисления.СпособыРасчетаСуммыПлатежаПоКредитамЗаймам.ЕжемесячныйАннуитетныйПлатеж);
	
	Элементы.Состояние.ЦветТекста   = ЗаявкиНаКредит.ЦветСостояния(Запись.Состояние);
	Элементы.ГруппаОшибка.Видимость = Запись.ЕстьОшибки;
		
	УстановитьТекстНадписьЗаявка();
	
	НастроитьФормуПоСостоянию();
	
	Если ЗаявкиНаКредит.ЗаявкаОдобрена(Запись.Состояние) И АннуитетныйГрафикПогашения Тогда
		ОбновитьАннуитетныйПлатеж(АннуитетныйПлатеж, Запись.Ставка, Запись.СуммаЗаявки, Запись.СрокЗаявки);
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяАкцепт(Запись, ТекущаяДата)

	// Акцепт возможен только в случае одобрения банком, если срок действия решения банка не истек,
	// и при разборе ответа от банка были корректно распознаны условия банка (определены допустимые сумма и срок)
	Возврат (Запись.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Одобрено") 
				И Запись.СрокАктуальности >= НачалоДня(ТекущаяДата)
				И (Запись.СуммаМин <> 0 ИЛИ Запись.СуммаМакс <> 0)
				И (Запись.СрокМин <> 0 ИЛИ Запись.СрокМакс <> 0));
						
КонецФункции 

&НаСервере
Процедура УстановитьТекстНадписьЗаявка()

	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.ЗаявкаНаКредит, 
		"Дата, Организация, СуммаДокумента, СрокКредита, ОписаниеПредметаЛизинга");
	
	Это1СКредит = Запись.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Это1СЛизинг = Запись.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг;
		
	// При отправке акцепта на заявку по кредиту сумма и срок кредита могли быть изменены.
	Если Это1СКредит И Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен Тогда
		РеквизитыЗаявки.СуммаДокумента = Запись.СуммаЗаявки;
		РеквизитыЗаявки.СрокКредита = Запись.СрокЗаявки;
	КонецЕсли;	
	
	Одобрено = ЗаявкиНаКредит.ЗаявкаОдобрена(Запись.Состояние);
	Отказано = (Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отказано);
	
	ТекстНадписи = "";
	ПараметрыНадписи = Новый Структура; 
	
	Если Запись.ЕстьОшибки Тогда
		ТекстНадписи = НСтр("ru='При получении <a href = ""ЗаявкаНаКредит"">заявки от [ДатаЗаявки][Заемщик]</a> возникла ошибка.
							|Попробуйте подать заявку повторно через некоторое время'");		
	ИначеЕсли Одобрено ИЛИ Отказано Тогда
		Если Это1СЛизинг Тогда
			ТекстНадписи = НСтр("ru='По <a href = ""ЗаявкаНаКредит"">заявке от [ДатаЗаявки][Заемщик]</a> была запрошена сумма <b>[Сумма] руб</b> на срок <b>[Срок] мес</b>
			|для приобретения [ОписаниеПредметаЛизинга].'");
		Иначе
			ТекстНадписи = НСтр("ru='По <a href = ""ЗаявкаНаКредит"">заявке от [ДатаЗаявки][Заемщик]</a> была запрошена сумма <b>[Сумма] руб</b> на срок <b>[Срок] мес</b>.'");
		КонецЕсли;
		ПараметрыНадписи.Вставить("Сумма", РеквизитыЗаявки.СуммаДокумента);
		ПараметрыНадписи.Вставить("Срок", РеквизитыЗаявки.СрокКредита);
		ПараметрыНадписи.Вставить("ОписаниеПредметаЛизинга", РеквизитыЗаявки.ОписаниеПредметаЛизинга);
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения Тогда
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаКредит"">Заявка от [ДатаЗаявки][Заемщик]</a> доставлена получателю и находится на рассмотрении.'");
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отправлено Тогда
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаКредит"">Заявка от [ДатаЗаявки][Заемщик]</a> отправлена, ожидается ответ от получателя.'");
	Иначе
		// не отправлена
		ТекстНадписи = НСтр("ru='<a href = ""ЗаявкаНаКредит"">Заявка от [ДатаЗаявки][Заемщик]</a> не отправлена.'");
	КонецЕсли;	
		
	ПараметрыНадписи.Вставить("ДатаЗаявки", Формат(РеквизитыЗаявки.Дата, "ДЛФ=D"));
	
	// Добавляем организацию в описание заявки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыНадписи.Вставить("Заемщик", СтрШаблон(НСтр("ru=', %1'"), РеквизитыЗаявки.Организация));
	Иначе
		ПараметрыНадписи.Вставить("Заемщик", "");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Запись.РегистрационныйНомер) Тогда
		ТекстНадписи = ТекстНадписи + Символы.ПС + НСтр("ru='Номер заявки: [РегистрационныйНомер].'");
		ПараметрыНадписи.Вставить("РегистрационныйНомер", Запись.РегистрационныйНомер);
	КонецЕсли;	
	
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписи, ПараметрыНадписи);  
	Элементы.НадписьЗаявка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстНадписи);  
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписьРешение()

	Если Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отказано Тогда
		
		ПодробностиРешения = ПодробностиРешения();
		
		Если ПодробностиРешения = Неопределено ИЛИ ПодробностиРешения.Количество() = 0 Тогда
			// Если банк не сообщил подробностей отказа, то выведем общую рекомендацию.
			ЧастиНадписи = Новый Массив;
			ЧастиНадписи.Добавить(НСтр("ru='К сожалению, по Вашей заявке было принято отрицательное решение.'"));
			ЧастиНадписи.Добавить(НСтр("ru='Попробуйте подать заявку повторно через несколько месяцев.'"));

			Элементы.НадписьРешение.Заголовок = СтрСоединить(ЧастиНадписи, Символы.ПС);
		Иначе
			// Выводим целиком текст банка в группе дополнительных условий.
			Элементы.НадписьРешение.Видимость = Ложь;
			Элементы.ДополнительныеУсловия.Заголовок           = НСтр("ru = 'Решение'");
			Элементы.ДополнительныеУсловия.ОтображатьЗаголовок = Истина;
			Элементы.ДополнительныеУсловия.Отображение         = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		КонецЕсли;	
				
		Возврат;
		
	КонецЕсли;	
	
	Это1СКредит = Запись.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Это1СЛизинг = Запись.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг;
	
	ОтветБанкаПоУмолчанию = ОтветБанкаПоУмолчанию();
	
	ПараметрыНадписи = Новый Структура; 
	Если ОтветБанкаПоУмолчанию <> Неопределено И ЗначениеЗаполнено(ОтветБанкаПоУмолчанию.ТекстРешения) Тогда
		// Для банка задан особый текст для отображения решения банка, используем его.
		ТекстНадписи = ОтветБанкаПоУмолчанию.ТекстРешения;
	Иначе
	
		// Установим стандартный текст с описанием решения банка.
		ТекстНадписи = "";
		Если Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Готово Тогда
			
			ТекстНадписи = НСтр("ru='Условия заключения договора подтверждены.'");
			
		ИначеЕсли ЗаявкиНаКредит.ЗаявкаОдобрена(Запись.Состояние) Тогда
			
			Если Это1СЛизинг Тогда
				// В лизинге не используется ставка процентов, но может быть указана сумма аванса и платежа.
				Подстроки = Новый Массив;
				Подстроки.Добавить(НСтр("ru='Заявка предварительно одобрена. Сумма договора лизинга <b>[Сумма] руб</b>. Cрок <b>[Срок] мес</b>.'"));
				Если ЗначениеЗаполнено(Запись.СуммаАванса) ИЛИ ЗначениеЗаполнено(Запись.СуммаПлатежа) Тогда
					Подстроки.Добавить(Символы.ПС);
					Если ЗначениеЗаполнено(Запись.СуммаАванса) Тогда
						Подстроки.Добавить(НСтр("ru='Аванс <b>[СуммаАванса] руб</b>. '"));
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СуммаПлатежа) Тогда
						Подстроки.Добавить(НСтр("ru='Ежемесячный платеж <b>[СуммаПлатежа] руб</b>.'"));
					КонецЕсли;
				КонецЕсли;
				
				ТекстНадписи = СтрСоединить(Подстроки);
			
			Иначе
				ТекстНадписи = НСтр("ru='Заявка предварительно одобрена. Сумма <b>[Сумма] руб</b>. Cрок <b>[Срок] мес</b>. Ставка <b>[Ставка] %</b> годовых.'");
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Подготовим параметры, которые использоваться в тексте решения.
	Если ЗначениеЗаполнено(Запись.СуммаМин)
		И ЗначениеЗаполнено(Запись.СуммаМакс)
		И Запись.СуммаМин = Запись.СуммаМакс Тогда
		ПараметрыНадписи.Вставить("Сумма", Запись.СуммаМакс);
		
	ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМин) И НЕ ЗначениеЗаполнено(Запись.СуммаМакс) Тогда
		ПараметрыНадписи.Вставить("Сумма", СтрШаблон(НСтр("ru='от %1'"), Запись.СуммаМин));

	ИначеЕсли НЕ ЗначениеЗаполнено(Запись.СуммаМин) И ЗначениеЗаполнено(Запись.СуммаМакс) Тогда
		Если Это1СЛизинг Тогда
			// В лизинге указывается одна сумма.
			ПараметрыНадписи.Вставить("Сумма", Запись.СуммаМакс);
		Иначе
			ПараметрыНадписи.Вставить("Сумма", СтрШаблон(НСтр("ru='до %1'"), Запись.СуммаМакс));
		КонецЕсли;
		
	Иначе
		ПараметрыНадписи.Вставить("Сумма", СтрШаблон(НСтр("ru='от %1 до %2'"), Запись.СуммаМин, Запись.СуммаМакс));
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.СрокМин)
		И ЗначениеЗаполнено(Запись.СрокМакс)
		И Запись.СрокМин = Запись.СрокМакс Тогда
	    ПараметрыНадписи.Вставить("Срок", Запись.СрокМакс);
	
	ИначеЕсли ЗначениеЗаполнено(Запись.СрокМин) И НЕ ЗначениеЗаполнено(Запись.СрокМакс) Тогда
        ПараметрыНадписи.Вставить("Срок", СтрШаблон(НСтр("ru='от %1'"), Запись.СрокМин));

	ИначеЕсли НЕ ЗначениеЗаполнено(Запись.СрокМин) И ЗначениеЗаполнено(Запись.СрокМакс) Тогда
		Если Это1СЛизинг Тогда
			// В лизинге указывается один срок.
			ПараметрыНадписи.Вставить("Срок", Запись.СрокМакс);
		Иначе
        	ПараметрыНадписи.Вставить("Срок", СтрШаблон(НСтр("ru='до %1'"), Запись.СрокМакс));
        КонецЕсли;
        
	Иначе
		ПараметрыНадписи.Вставить("Срок", СтрШаблон(НСтр("ru='от %1 до %2'"), Запись.СрокМин, Запись.СрокМакс));			

	КонецЕсли;
	
	ПараметрыНадписи.Вставить("Ставка",       Запись.Ставка);
	ПараметрыНадписи.Вставить("СуммаАванса",  Запись.СуммаАванса);
	ПараметрыНадписи.Вставить("СуммаПлатежа", Запись.СуммаПлатежа);
	
	Если ЗначениеЗаполнено(Запись.СрокДействия) Тогда
		ТекстНадписи = ТекстНадписи + Символы.ПС;
		Если ОтветБанкаПоУмолчанию <> Неопределено И ЗначениеЗаполнено(ОтветБанкаПоУмолчанию.ТекстСрокРешения) Тогда
			ТекстНадписи = ТекстНадписи + ОтветБанкаПоУмолчанию.ТекстСрокРешения;
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru='Решение действительно до [СрокДействия].'");
		КонецЕсли;
		ПараметрыНадписи.Вставить("СрокДействия", Формат(Запись.СрокДействия, "ДЛФ=D"));
	КонецЕсли;	
	
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписи, ПараметрыНадписи);  
	Элементы.НадписьРешение.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстНадписи);  
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписьИнструкции()
	
	Если Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен Тогда
		Элементы.НадписьИнструкции.Заголовок = НСтр("ru='Ожидается информация по оформлению договора.'");
		Возврат;
	КонецЕсли;	
	
	РедактируемыеПараметры = Новый Массив; 	// имена редактируемых параметров в винительном падеже: "уточнить СУММУ кредита"
	
	Если Запись.СуммаМин < Запись.СуммаМакс Тогда
		РедактируемыеПараметры.Добавить(НСтр("ru='сумму'"));
	КонецЕсли;	
	
	Если Запись.СрокМин < Запись.СрокМакс Тогда
		РедактируемыеПараметры.Добавить(НСтр("ru='срок'"));
	КонецЕсли;	
	
	// Если банк не предоставил интервалов для выбора, то надпись фиксированная. 
	Если РедактируемыеПараметры.Количество() = 0 Тогда
		Элементы.НадписьИнструкции.Заголовок = НСтр("ru='Ниже Вы можете подтвердить свою заинтересованность в заключении договора.'");
		Возврат;
	КонецЕсли;	
	
	Элементы.НадписьИнструкции.Заголовок = СтрШаблон(
		НСтр("ru='Ниже Вы можете уточнить %1, чтобы продолжить оформление договора.'"),
		ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(РедактируемыеПараметры));
			
КонецПроцедуры

&НаСервере
Функция ПодробностиРешения()
	
	Если ПодробностиРешенияПрочитаны Тогда
		Возврат ПолучитьИзВременногоХранилища(ПодробностиРешенияАдрес);
	КонецЕсли;	
	
	// Прочитаем подробные условия кредита, полученные в ответе от банка.
	// Также в случае отказа в выдаче кредита здесь может храниться причина отказа. 
	// Хранилище значения (Запись.ПодробностиРешения) недоступно в данных формы, поэтому читаем отдельно менеджером записи.
	МенеджерЗаписи = РегистрыСведений.СостояниеЗаявокНаКредит.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
	МенеджерЗаписи.Прочитать();
	ПодробностиРешения = МенеджерЗаписи.ПодробностиРешения.Получить(); // см. РегистрыСведений.СостояниеЗаявокНаКредит.НоваяТаблицаДополнительныхСведений()
	
	ПодробностиРешенияАдрес = ПоместитьВоВременноеХранилище(ПодробностиРешения, УникальныйИдентификатор);
	ПодробностиРешенияПрочитаны = Истина;
	
	Возврат ПодробностиРешения;
	
КонецФункции

&НаСервере
Процедура ВывестиДополнительныеУсловия()
	
	ГруппаДополнительныеУсловия = Элементы.ДополнительныеУсловия;
	
	// Сначала очистим существующие элементы.
	// В группе ДополнительныеУсловия все элементы созданы программно, поэтому удаление доступно. 
	Пока ГруппаДополнительныеУсловия.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ГруппаДополнительныеУсловия.ПодчиненныеЭлементы[0] );
	КонецЦикла;	
			
	ПодробностиРешения = ПодробностиРешения();
	
	Если ТипЗнч(ПодробностиРешения) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	
	Для каждого ДополнительноеУсловие Из ПодробностиРешения Цикл
		
		Суффикс = Формат(Индекс, "ЧГ=");
	
		ГруппаДопСвойства = Элементы.Добавить("ГруппаСведение"+Суффикс, Тип("ГруппаФормы"), ГруппаДополнительныеУсловия);
		ГруппаДопСвойства.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДопСвойства.ОтображатьЗаголовок = Ложь;
		ГруппаДопСвойства.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаДопСвойства.Объединенная = Истина;
		
		ИмяЭлементаВидСведений      = "ВидСведения" + Суффикс;
		ИмяЭлементаЗначениеСведений = "ЗначениеСведений" + Суффикс;
		
		ВидСведенийТекст = ДополнительноеУсловие.ВидСведений;
		Если ЗначениеЗаполнено(ВидСведенийТекст) 
			И ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений)
			И СтрНайти(".,:;!?-+/*^~", Прав(ВидСведенийТекст, 1)) = 0  Тогда
			// Если заполнены обе колонки и в конце текста первой колонки не стоит знак препинания, 
			// то добавим двоеточие, чтобы выглядел как стандартный заголовок надписи.
			ВидСведенийТекст = ВидСведенийТекст + ": ";
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ВидСведенийТекст) И НЕ ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений)) 
			ИЛИ (НЕ ЗначениеЗаполнено(ВидСведенийТекст) И ЗначениеЗаполнено(ДополнительноеУсловие.ЗначениеСведений))Тогда
			// Указана только одна колонка, выводим строку на всю длину.
			ВидСведений           = Элементы.Добавить(ИмяЭлементаВидСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ВидСведений.Вид       = ВидДекорацииФормы.Надпись;
			Если ЗначениеЗаполнено(ВидСведенийТекст) Тогда
				ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ВидСведенийТекст);
			Иначе
				ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ДополнительноеУсловие.ЗначениеСведений);
			КонецЕсли;

			ВидСведений.АвтоМаксимальнаяШирина   = Ложь;
			ВидСведений.РастягиватьПоГоризонтали = Истина;
			ВидСведений.МаксимальнаяШирина       = 75;
			
		Иначе
			// Выводим обе колонки.
			ВидСведений           = Элементы.Добавить(ИмяЭлементаВидСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ВидСведений.Вид       = ВидДекорацииФормы.Надпись;
			ВидСведений.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ВидСведенийТекст);
			ВидСведений.Ширина    = 16;
			
			ЗначениеСведений                          = Элементы.Добавить(ИмяЭлементаЗначениеСведений, Тип("ДекорацияФормы"), ГруппаДопСвойства);
			ЗначениеСведений.Вид                      = ВидДекорацииФормы.Надпись;
			ЗначениеСведений.Заголовок                = СтроковыеФункции.ФорматированнаяСтрока(ДополнительноеУсловие.ЗначениеСведений);
			ЗначениеСведений.АвтоМаксимальнаяШирина   = Ложь;
			ЗначениеСведений.РастягиватьПоГоризонтали = Истина;
			ЗначениеСведений.Ширина                   = 0;
			ЗначениеСведений.МаксимальнаяШирина       = 54;
			
		КонецЕсли;
					
		Индекс = Индекс + 1; 
		
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Процедура ВывестиПрисоединенныеФайлы()

	Вложения.Очистить();
	
	ГиперссылкиВсехФайлов = Новый Массив;
	ГиперссылкаФайла      = Новый Массив;
	
	ПользовательскиеФайлы = РегистрыСведений.СостояниеЗаявокНаКредит.ПользовательскиеПрисоединенныеФайлы(Запись.Транзакция);

	Если НЕ ЗначениеЗаполнено(ПользовательскиеФайлы) Тогда
		Возврат;
	КонецЕсли;

	ИндексФайла = 0;
	Для каждого ПользовательскийФайл Из ПользовательскиеФайлы Цикл
		ЗаполнитьЗначенияСвойств(Вложения.Добавить(), ПользовательскийФайл);
		
		// Создаем формированную строку с гиперссылкой для текущего файла.
		КартинкаФайла = КартинкаПоРасширениюФайла(ПользовательскийФайл.Расширение);
		НадписьДляФайла = Новый ФорматированнаяСтрока(ПользовательскийФайл.ИсходноеИмяФайла, , , , СтрШаблон("Вложение%1", ИндексФайла));
		
		ГиперссылкаФайла.Очистить();
		
		ГиперссылкаФайла.Добавить(Новый ФорматированнаяСтрока(КартинкаФайла));
		ГиперссылкаФайла.Добавить(Символы.НПП);
		ГиперссылкаФайла.Добавить(НадписьДляФайла);
		
		Если ГиперссылкиВсехФайлов.Количество() > 0 Тогда
			ГиперссылкиВсехФайлов.Добавить(Символы.ПС);
			ГиперссылкиВсехФайлов.Добавить(Символы.ПС);
		КонецЕсли;
		ГиперссылкиВсехФайлов.Добавить(Новый ФорматированнаяСтрока(ГиперссылкаФайла));
		
		ИндексФайла = ИндексФайла + 1;
	КонецЦикла;
	
	Элементы.НадписьПрисоединенныеФайлы.Заголовок = Новый ФорматированнаяСтрока(ГиперссылкиВсехФайлов);

КонецПроцедуры

&НаСервере
Функция КартинкаПоРасширениюФайла(Знач Расширение)

	Расширение = ?(Лев(Расширение, 1) <> ".", ".", "") + НРег(Расширение) + ";";

	Если СтрНайти(".doc;.docx;.rtf;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматWord;
		
	ИначеЕсли СтрНайти(".xls;.xlsx;.xlw;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматExcel;

	ИначеЕсли СтрНайти(".pdf;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматPDF;
	
	ИначеЕсли СтрНайти(".htm;.html;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматHTML;

	ИначеЕсли СтрНайти(".odt;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматOpenOfficeWriter;

	ИначеЕсли СтрНайти(".ods;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматOpenOfficeCalc;

	ИначеЕсли СтрНайти(".txt;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматTXT;

	ИначеЕсли СтрНайти(".mxl;", Расширение) > 0 Тогда
		Возврат БиблиотекаКартинок.ФорматMXL;
		
	Иначе
		Возврат БиблиотекаКартинок.ФорматПустой;

	КонецЕсли;

КонецФункции

&НаСервере
Процедура НастроитьФормуПоСостоянию()
	
	ОжидаетРешения 	= (Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения);
	НеОтправлено 	= (Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.НеОтправлено);
	Одобрено 		= ЗаявкиНаКредит.ЗаявкаОдобрена(Запись.Состояние);
	Отказано 		= (Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отказано);
	ТребуетсяАкцепт = ТребуетсяАкцепт(Запись, ТекущаяДатаСеанса());
	СервисДоступен  = (СведенияОСервисе <> Неопределено
						И НЕ СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки);
						
	Это1СКредит     = Запись.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	
	// ОПИСАНИЕ РЕШЕНИЯ
	
	// В заявках на кредит предусмотрена возможность ответа интервалом, в пределах которого пользователь может уточнить желаемые параметры.
	Элементы.ГруппаУточнениеУсловийЗаявки.Видимость = Это1СКредит;
	Элементы.НадписьРешение.Видимость = Одобрено ИЛИ Отказано;
	
	Если Одобрено ИЛИ Отказано Тогда
		УстановитьТекстНадписьРешение();
	КонецЕсли;	
	
	Элементы.НадписьИнструкции.Видимость = ТребуетсяАкцепт ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен;
	
	Если ТребуетсяАкцепт ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен Тогда
		УстановитьТекстНадписьИнструкции();
	КонецЕсли;	
	
	// ОСНОВНЫЕ УСЛОВИЯ
	Элементы.ОсновныеУсловия.Видимость = Одобрено;
	Элементы.ГруппаПлатеж.Видимость = Одобрено И АннуитетныйГрафикПогашения;
		
	СуммаВИнтервале = (ТребуетсяАкцепт И Запись.СуммаМин <> Запись.СуммаМакс);
	СрокВИнтервале = (ТребуетсяАкцепт И Запись.СрокМин <> Запись.СрокМакс);
	
	Элементы.СуммаЗаявки.ОтображениеПодсказки = ?(СуммаВИнтервале, ОтображениеПодсказки.ОтображатьСправа, ОтображениеПодсказки.Нет);
	Элементы.СуммаЗаявки.Доступность = СуммаВИнтервале;
	
	Элементы.СрокЗаявки.ОтображениеПодсказки = ?(СрокВИнтервале, ОтображениеПодсказки.ОтображатьСправа, ОтображениеПодсказки.Нет);
	Элементы.СрокЗаявки.Доступность = СрокВИнтервале;
	
	ШаблонОписанияИнтервала   = НСтр("ru='%1 - %2 %3 '");
	ШаблонОписанияИнтервалаОт = НСтр("ru='от %1 %2 '");
	ШаблонОписанияИнтервалаДо = НСтр("ru='до %1 %2 '");
	ТекстВалюта = НСтр("ru='руб.'"); // Поддерживаются только кредиты в рублях.
	ТекстМес    = НСтр("ru='мес.'");
	
	Если ТребуетсяАкцепт Тогда
		
		Если ЗначениеЗаполнено(Запись.СуммаМин) И Запись.СуммаЗаявки < Запись.СуммаМин Тогда
			Запись.СуммаЗаявки = Запись.СуммаМин;
		ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМакс) И Запись.СуммаЗаявки > Запись.СуммаМакс Тогда
			Запись.СуммаЗаявки = Запись.СуммаМакс;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Запись.СрокМин) И Запись.СрокЗаявки < Запись.СрокМин Тогда
			Запись.СрокЗаявки = Запись.СрокМин;
		ИначеЕсли ЗначениеЗаполнено(Запись.СрокМакс) И Запись.СрокЗаявки > Запись.СрокМакс Тогда
			Запись.СрокЗаявки = Запись.СрокМакс;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если СуммаВИнтервале Тогда
		
		Если ЗначениеЗаполнено(Запись.СуммаМин) И ЗначениеЗаполнено(Запись.СуммаМакс) Тогда
			Элементы.СуммаЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервала,
				Запись.СуммаМин,
				Запись.СуммаМакс,
				ТекстВалюта);
		ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМин) Тогда
			Элементы.СуммаЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервалаОт,
				Запись.СуммаМин,
				ТекстВалюта);
		ИначеЕсли ЗначениеЗаполнено(Запись.СуммаМакс) Тогда
			Элементы.СуммаЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервалаДо,
				Запись.СуммаМакс,
				ТекстВалюта);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СрокВИнтервале Тогда
		
		Если ЗначениеЗаполнено(Запись.СрокМин) И ЗначениеЗаполнено(Запись.СрокМакс) Тогда
			Элементы.СрокЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервала,
				Запись.СрокМин,
				Запись.СрокМакс,
				ТекстМес);
		ИначеЕсли ЗначениеЗаполнено(Запись.СрокМин) Тогда
			Элементы.СрокЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервалаОт,
				Запись.СрокМин,
				ТекстМес);
		ИначеЕсли ЗначениеЗаполнено(Запись.СрокМакс) Тогда
			Элементы.СрокЗаявки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				ШаблонОписанияИнтервалаДо,
				Запись.СрокМакс,
				ТекстМес);
		КонецЕсли;
		
	КонецЕсли;
	
	// ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
	// Если заявка получена банком, здесь может быть срок рассмотрения, а при отказе в кредите - причина отказа	
	ВыводитьДополнительныеУсловия = (ОжидаетРешения ИЛИ Одобрено ИЛИ Отказано);   
	
	Элементы.ДополнительныеУсловия.Видимость = ВыводитьДополнительныеУсловия; 
	Если ВыводитьДополнительныеУсловия Тогда
		ВывестиДополнительныеУсловия();
	КонецЕсли;	
	
	Элементы.ГруппаПрисоединенныеФайлы.Видимость = Запись.ЕстьФайлы;
	Если Запись.ЕстьФайлы Тогда
		ВывестиПрисоединенныеФайлы();
	КонецЕсли;
	
	// КНОПКИ
	Элементы.СогласиеСУсловиями.Видимость = ТребуетсяАкцепт;
	Элементы.ОтправитьАкцепт.Видимость = ТребуетсяАкцепт;
	Элементы.КартинкаОжиданиеОбновленияДанныхСервиса.Видимость = ТребуетсяАкцепт И Не СервисДоступен;
	Элементы.ОтправитьАкцепт.КнопкаПоУмолчанию = ТребуетсяАкцепт;
	Элементы.ОтправитьАкцепт.Доступность = Не ТолькоПросмотр И СервисДоступен;	
	
	Элементы.ПодписатьИОтправить.Видимость = НеОтправлено;
	Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = НеОтправлено;
	Элементы.ПодписатьИОтправить.Доступность = Не ТолькоПросмотр И СервисДоступен;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьАннуитетныйПлатеж(АннуитетныйПлатеж, Ставка, Сумма, Срок)
	
	Если Срок = 0 ИЛИ Ставка = 0 Тогда
		АннуитетныйПлатеж = 0;
		Возврат;
	КонецЕсли;	
	
	СтавкаВДоляхЗаМесяц = Ставка / 100 / 12;
	АннуитетныйПлатеж = Сумма * СтавкаВДоляхЗаМесяц * Pow((1 + СтавкаВДоляхЗаМесяц), Срок) / (Pow((1 + СтавкаВДоляхЗаМесяц), Срок) - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПометитьКакПрочитанное()
	ПометитьКакПрочитанноеСервер();
	ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПометитьКакПрочитанноеСервер()
	
	Попытка
	    // Перед записью читаем данные, чтобы гарантировать актуальность значений
		Прочитать();
		Запись.Новое = Ложь;
		// Отключаем проверку заполнения при автоматической записи, чтобы не путать пользователя сообщениями, которые он не иницировал.
		НеПроверятьЗаполнение = Истина;
		Записать();
		НеПроверятьЗаполнение = Ложь;
	Исключение
		// Никак специально не обрабатываем ошибку - только пишем в журнал
		ЗаписьЖурналаРегистрации(
			НСтр("ru='СостояниеЗаявокНаКредит'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СостояниеЗаявокНаКредит,
			,
			СтрШаблон(НСтр("ru='Ошибка пометки сообщения как прочтенное: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьАннуитетныйПлатеж() 
	ОбновитьАннуитетныйПлатеж(АннуитетныйПлатеж, Запись.Ставка, Запись.СуммаЗаявки, Запись.СрокЗаявки);	
КонецПроцедуры

&НаСервере
Функция ОтправитьТранзакцииПовторно()

	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Запись.СервисОбменаСБанками);

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", 	Запись.Организация);
	Отбор.Вставить("Банк", 			Запись.Банк);
	Отбор.Вставить("ТипТранзакции", ТипыТранзакций.Заявка);
	Отбор.Вставить("Статус", 		Перечисления.СтатусыТранзакцийОбменаСБанками.Подготовлена);
	
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоПредмету(Запись.ЗаявкаНаКредит, Отбор);

	Если Транзакции.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "отправка";
	СостояниеПрогресса.КоличествоДействий = Транзакции.Количество() + 1;
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Отправка файлов...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
		
	// Результат отправки будет обработан внутри процедуры отправки транзакций
	// (см. УниверсальныйОбменСБанкамиПереопределяемый.ПриОтправкеТранзакции())  
	УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(Запись.СервисОбменаСБанками, Транзакции);
	
	Возврат Истина;
	
КонецФункции
 
&НаКлиенте
Процедура ПодписатьИОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("Выполнено") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;

	ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОтбораСертификата(Знач СервисОбменаСБанками, Знач Организация)
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаСегодня);
	
	ПараметрыОтбора = ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата(СервисОбменаСБанками);
	ПараметрыОтбора.Организация = Организация;
	ПараметрыОтбора.Дата        = ДатаСегодня;
	ПараметрыОтбора.ИНН         = СведенияОбОрганизации.ИНН;
	ПараметрыОтбора.ЮридическоеФизическоеЛицо = СведенияОбОрганизации.ЮридическоеФизическоеЛицо;
	
	// ФИО и СНИЛС руководителя юр.лица или самого ИП.
	Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ФизЛицо = СведенияОбОрганизации.ИндивидуальныйПредприниматель;
	Иначе
		ФизЛицо = СведенияОбОрганизации.Руководитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		СведенияОРуководителе = УчетЗарплаты.ДанныеФизическихЛиц(, ФизЛицо, ДатаСегодня);
		
		ПараметрыОтбора.Фамилия     = СведенияОРуководителе.Фамилия;
		ПараметрыОтбора.Имя         = СведенияОРуководителе.Имя;
		ПараметрыОтбора.Отчество    = СведенияОРуководителе.Отчество;
		ПараметрыОтбора.СНИЛС       = СведенияОРуководителе.СтраховойНомерПФР;
	КонецЕсли;

	// Сформируем представление отбора для показа на форме выбора.
	ПараметрыОтбора.ПредставлениеОтбора = ЗаявкиНаКредитКлиентСервер.ПредставлениеОтбораСертификата(ПараметрыОтбора);

	Возврат ПараметрыОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументооборотПоТранзакции(Знач Транзакция)

	Если НЕ ЗначениеЗаполнено(Транзакция) Тогда
		Возврат Неопределено;
	КонецЕсли;

	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	Возврат РеквизитыТранзакции.Документооборот;

КонецФункции

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура Подключаемый_ПодключитьИнтернетПоддержкуПользователей()  

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеИнтернетПоддержкиЗавершение", ЭтотОбъект);	

	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеИнтернетПоддержкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторно получаем данные о сервисе по кредитам и запускаем обновление данных.
		ОбновитьСведенияОСервисе();
		ОжидатьЗавершениеОбновленияДанныхСервиса();
	Иначе
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявок необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		НастроитьДоступностьЭлементовФормыПослеПодключенияСервиса(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхСервиса

&НаСервере
Процедура ОбновитьСведенияОСервисе()

	Если Параметры.Свойство("СведенияОСервисе") Тогда
		СведенияОСервисе = Параметры.СведенияОСервисе;
	Иначе
		СведенияОСервисе = УниверсальныйОбменСБанками.СведенияОСервисе(Запись.СервисОбменаСБанками);
	КонецЕсли;
	
	ЗаявкиНаКредит.НачатьОбновлениеДанныхСервиса(Запись.СервисОбменаСБанками, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеОбновленияДанныхСервиса() 

	Если СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено Тогда
		// Фоновое задание не запущено.
		НастроитьДоступностьЭлементовФормыПослеПодключенияСервиса(НЕ СведенияОСервисе.ДанныеАктуальны);
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещенияОЗавершении = Новый ОписаниеОповещения("ОбновлениеДанныхСервисаЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперация,
		ОповещенияОЗавершении,
		ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	// Запомним, что текущее фоновое задание завершилось, чтобы можно было переходить к следующим шагам.
	ЕстьОшибки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус", "") = "Ошибка" Тогда
		
		ЕстьОшибки = Истина;
		
		Подстроки = Новый Массив;
		Подстроки.Добавить(НСтр("ru = 'В процессе обновления данных сервиса возникла ошибка.'"));
		Подстроки.Добавить(Символы.ПС);
		Подстроки.Добавить(Результат.КраткоеПредставлениеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(Подстроки));
	КонецЕсли;

	СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено; // сбросим признак выполнения
	
	НастроитьДоступностьЭлементовФормыПослеПодключенияСервиса(ЕстьОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовФормыПослеПодключенияСервиса(ЕстьОшибки)

	Если ТребуетсяАкцепт(Запись, ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		Элементы.ОтправитьАкцепт.Доступность = НЕ ЕстьОшибки И Не ТолькоПросмотр;      
		Элементы.КартинкаОжиданиеОбновленияДанныхСервиса.Видимость = Ложь;
	ИначеЕсли Запись.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.НеОтправлено") Тогда
		Элементы.ПодписатьИОтправить.Доступность = НЕ ЕстьОшибки И Не ТолькоПросмотр;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОтветБанкаПоУмолчанию()

	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Запись.Транзакция);
	ДатаАктуальности = ?(ЗначениеЗаполнено(Запись.ДатаИзменения), Запись.ДатаИзменения, ТекущаяДатаСеанса());
	
	Возврат РегистрыСведений.СостояниеЗаявокНаКредит.ОтветБанкаПоУмолчанию(
				Запись.СервисОбменаСБанками,
				Запись.Банк,
				РеквизитыТранзакции.ТипТранзакции,
				ДатаАктуальности);
	
КонецФункции

#КонецОбласти
