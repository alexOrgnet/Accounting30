#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы с колонками, соответствующими измерениям регистра.
// Используется часто, в том числе при определении статусов задач, поэтому коллекция конструируется без обращения к метаданным.
// При изменении структуры регистра, включая состав типов измерений, следует вносить изменения в эту функцию.
//
Функция КлючиЗадач() Экспорт
	
	ТипыПравил = Новый Массив;
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаРегулярныхПлатежей"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПроверкиКонтролирующимиОрганами"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.Патенты"));
	ТипыПравил.Добавить(Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаФинОтчетности"));
	
	КлючиЗадач = Новый ТаблицаЗначений;
	
	КлючиЗадач.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КлючиЗадач.Колонки.Добавить("Правило",       Новый ОписаниеТипов(ТипыПравил));
	КлючиЗадач.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КлючиЗадач.Колонки.Добавить("РегистрацияВНалоговомОргане",
		Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	КлючиЗадач.Колонки.Добавить("Действие",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера"));
	
	Возврат КлючиЗадач;
	
КонецФункции

Функция КлючиЗадачСтруктурой() Экспорт
	
	КлючиЗадач = КлючиЗадач();
	КлючиЗадач.Добавить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КлючиЗадач[0]);
	
КонецФункции

Функция ТипСтатуса() Экспорт
	Возврат Метаданные.РегистрыСведений.ЗадачиБухгалтера.Ресурсы.Статус.Тип;
КонецФункции

Функция ОбновитьИЗаполнитьЗадачиНачалаРаботы(Знач ОтборОрганизации = Неопределено, СозданаНоваяОрганизация = Ложь) Экспорт
	
	ИзмененыЗаписи = Ложь;
	
	// Ищем новые задачи начала работы
	ЗадачиНачалаРаботы = НовыеЗадачиНачалаРаботы(ОтборОрганизации);
	
	Если ЗадачиНачалаРаботы.Количество() = 0 Тогда
		
		// Завершение неактуальных задач проверки банковских операций АУСН
		Если ВыполнениеЗадачБухгалтера.ЗавершитьПроверкуБанковскихОперацийАУСН() Тогда
			Возврат Истина;
		КонецЕсли;
	
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗадачиНачалаРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	// Создадим новые задачи
	Для Каждого Задача Из ЗадачиНачалаРаботы Цикл
		
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Задача);
		Запись.Записать();
		
		ИзмененыЗаписи = Истина;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Функция ОбновитьИЗаполнитьРегулярныеЗадачи(Знач ОтборОрганизации = Неопределено, Упреждение = 0, Знач Правила = Неопределено, ОбновитьСписокОтчетов = Истина) Экспорт
	
	Организации = МассивОрганизаций(ОтборОрганизации);
	Если Организации.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИзмененыЗаписи = Ложь;
	
	// Заблокируем для обновления
	КоличествоОрганизаций = Организации.Количество();
	Для Номер = 1 По КоличествоОрганизаций Цикл
		
		Индекс = КоличествоОрганизаций - Номер;// Обходим с конца, потому что будем удалять те, что не удалось заблокировать
		Организация = Организации[Индекс];
		
		ПараметрыКонструктора = Новый Массив;
		ПараметрыКонструктора.Добавить(Новый Структура("Организация", Организация));
		КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.АктуальностьСпискаЗадачБухгалтера"), ПараметрыКонструктора);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи); // До окончания вызова сервера
		Исключение
			Организации.Удалить(Индекс);
		КонецПопытки;
		
	КонецЦикла;
	
	// Задачи уже созданы? За какой период?
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(АктуальностьСписка.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаАктуальности
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальностьСпискаЗадачБухгалтера КАК АктуальностьСписка
	|		ПО Организации.Ссылка = АктуальностьСписка.Организация
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";
	
	ТекущаяДата      = НачалоДня(ТекущаяДатаСеанса());
	ДатаАктуализации = ТекущаяДата + Упреждение * 24 * 60 * 60;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// К появлению задач могут приводить какие-то события прошлого.
		
		// Делим это прошлое на две части:
		// - "некогда", "когда-то давно"
		// - "недавно"
		
		// События давнего прошлого могут приводить только к таким задачам,
		// которые еще можно выполнить в срок.
		// Просроченные задачи могут появляться только исходя из недавних событий.
		
		// При первом запуске (для новой организации, в новой версии) 
		// все прошлое считаем давним.
		// Другими словами, _дополняем_ список задач по событиям давнего прошлого.
		
		// При повторных запусках составляем расписание для давнего прошлого
		// на случай, если в периодах за это прошлое изменились данные ИБ,
		// приводящие к тому, что нужно уплачивать какие-то другие налоги 
		// или сдавать какие-то другие отчеты.
		// То есть в этом случае по событиям давнего прошлого мы _обновляем_ список задач.
		// А по недавним событиям - _дополняем_ список задач.
		
		// При обновлении (не дополнении) списка задач, как правило, не потребуется
		// вносить никаких изменений в список - достаточно лишь убедиться,
		// что список правильный.
		// Реже придется что-то поменять, но не все.
		// Поэтому будем записывать только отличия между правильным (рассчитанным в этой процедуре)
		// расписанием и уже имеющимся.
		
		Если ЗначениеЗаполнено(Выборка.ДатаАктуальности) Тогда
			
			// Обновим задачи по давним событиям
			Расписание = РасписаниеПоДавнимСобытиям(
				Выборка.Организация,
				Выборка.ДатаАктуальности, // До ДатаАктуальности
				ТекущаяДата,
				Правила,
				ОбновитьСписокОтчетов);
			ЗаписатьИзменения(
				Выборка.Организация, 
				Расписание,
				ТекущаяДата,
				ИзмененыЗаписи);
				
			// Добавим задачи по недавним событиям
			Расписание = РасписаниеПоНедавнимСобытиям(
				Выборка.Организация,
				Выборка.ДатаАктуальности, // С  ДатаАктуальности
				ДатаАктуализации,         // По ДатаАктуализации
				Правила,
				ОбновитьСписокОтчетов);
			ЗаписатьНовыеЗадачи(
				Выборка.Организация,
				Расписание,
				Выборка.ДатаАктуальности, // Старая ДатаАктуальности
				ДатаАктуализации,         // Новая ДатаАктуальности
				ТекущаяДата,
				ИзмененыЗаписи); 
				
		Иначе
			
			// Добавим задачи по давним событиям
			Расписание = РасписаниеПоДавнимСобытиям(
				Выборка.Организация,
				ДатаАктуализации, // Все считаем давними
				ТекущаяДата,
				Правила,
				ОбновитьСписокОтчетов);
			ЗаписатьНовыеЗадачи(
				Выборка.Организация,
				Расписание,
				Выборка.ДатаАктуальности,
				ДатаАктуализации,
				ТекущаяДата,
				ИзмененыЗаписи);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Процедура ОбновитьИДополнитьРегулярныеЗадачи(Знач Организация, Знач ДатаАктуальности, Знач Правила) Экспорт
	
	// Заблокируем для обновления
	ПараметрыКонструктора = Новый Массив;
	ПараметрыКонструктора.Добавить(Новый Структура("Организация", Организация));
	КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.АктуальностьСпискаЗадачБухгалтера"), ПараметрыКонструктора);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи); // До окончания вызова сервера
	Исключение
		ВызватьИсключение;
	КонецПопытки;
		
	ТекущаяДата      = НачалоДня(ТекущаяДатаСеанса());
	ДатаАктуализации = ТекущаяДата;
	
	// Добавим задачи по недавним событиям
	Расписание = РасписаниеПоНедавнимСобытиям(
		Организация,
		ДатаАктуальности, // С  ДатаАктуальности
		ДатаАктуализации, // По ДатаАктуализации
		Правила,
		Ложь);
	ЗаписатьНовыеЗадачи(
		Организация,
		Расписание,
		ДатаАктуальности, // Старая ДатаАктуальности
		ДатаАктуализации, // Новая ДатаАктуальности
		ТекущаяДата);
	
КонецПроцедуры

Функция ОбновитьИЗаполнитьЗадачиСнятияСУчета(Знач ОтборОрганизации) Экспорт
	
	ИзмененыЗаписи = Ложь;
	
	// Ищем новые задачи начала работы
	ЗадачиНачалаРаботы = НовыеЗадачиСнятияСУчета(ОтборОрганизации);
	
	Если ЗадачиНачалаРаботы.Количество() = 0 Тогда
		
		// Завершение неактуальных задач
		Если ЗавершитьЗадачуУказанияДатыЗакрытияИП() Тогда
			Возврат Истина;
		КонецЕсли;
	
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗадачиНачалаРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	// Создадим новые задачи
	Для Каждого Задача Из ЗадачиНачалаРаботы Цикл
		
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Задача);
		Запись.Записать();
		
		ИзмененыЗаписи = Истина;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Функция БлижайшаяДатаПоявленияЗадач(Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат БлижайшаяДатаПоявленияЗадачОрганизации(Организация);
	КонецЕсли;
	
	// По всем организациям
	Завтра = КонецДня(ТекущаяДатаСеанса()) + 1;
	БлижайшаяДата = Неопределено;
	
	Для Каждого ОднаОрганизация Из МассивОрганизаций(Организация) Цикл
		
		БлижайшаяДатаОрганизации = БлижайшаяДатаПоявленияЗадачОрганизации(ОднаОрганизация, БлижайшаяДата);
		
		Если БлижайшаяДата = Неопределено Тогда
			БлижайшаяДата = БлижайшаяДатаОрганизации;
		ИначеЕсли ТипЗнч(БлижайшаяДатаОрганизации) = Тип("Дата") Тогда
			БлижайшаяДата = Мин(БлижайшаяДата, БлижайшаяДатаОрганизации);
		КонецЕсли;
		
		Если БлижайшаяДата = Завтра Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат БлижайшаяДата;
	
КонецФункции

Функция УстановитьСтатусВыполнено(ИсточникДанныхКлючаЗаписи, Выполнено = Истина) Экспорт
	
	ЗначенияКлюча = КлючиЗадачСтруктурой();
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ИсточникДанныхКлючаЗаписи);
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		// Обработаем задачи, созданные до регистрации действий
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
		МенеджерЗаписи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ВАрхиве = Выполнено;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

// Удаляем непросроченные задачи по заданному правилу
Функция УдалитьЗаписиПоПравилу(Организация, Правило, ТолькоАктуальные = Истина) Экспорт
	
	ИзмененыЗаписи = Ложь;
	
	ЗаписиКУдалению = ПолучитьСписокЗадачПоПравилу(Организация, Правило, ТолькоАктуальные);
	
	Если ЗаписиКУдалению.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		// Установим управляемые блокировки
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Правило", Правило);
		Блокировка.Заблокировать();
		
		Для каждого ЗаписьКУдалению Из ЗаписиКУдалению Цикл
			
			Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьКУдалению);
			Запись.Удалить();
			
			ИзмененыЗаписи = Истина;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

// Определяет порядок платежа по налогу за конкретный период (налоговый, отчетный или иной период платежа).
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организация-налогоплательщик
//  ВидНалога	 - ПеречислениеСсылка.ВидыНалогов - указывает на налог
//  Период		 - Дата - период, к которому относится платеж
//  ПроверятьУсловияТолькоНаГраницахОбзора - Булево - проверять некоторые правила только на границах интервала
// 
// Возвращаемое значение:
//  Структура    - описание события, соответствующего уплате налога за указанный период.
//                 Состав полей соответствует колонкам из НовыйРасписание()
//  Неопределено - нет возможности определить порядок платежа (например, налог не должен уплачиваться)
//
Функция ПорядокУплатыНалогаЗаПериод(Организация, ВидНалога, Период, ПроверятьУсловияТолькоНаГраницахОбзора = Ложь) Экспорт

	Порядок = ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, ВидНалога, Период,
		Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога, ПроверятьУсловияТолькоНаГраницахОбзора);
	
	Если Порядок <> Неопределено Тогда
		
		Если ТипЗнч(Порядок.Уплата) = Тип("ТаблицаЗначений") Тогда // для НДС уплата содержит все платежи
			Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Порядок.Уплата[0]);
		Иначе
			Возврат Порядок.Уплата;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Находит задачу по переданному хешу и возвращает заполненный ключ записи регистра.
// 
// Параметры:
//   ХешЗадачи - Строка - хеш-сумма задачи.
//
// Возвращаемое значение:
//   РегистрСведенийКлючЗаписи.ЗадачиБухгалтера, Неопределено - ключ записи регистра сведений или Неопределено,
//      если не найдена запись по указанной хеш-сумме.
//
Функция КлючЗадачиПоХешу(ХешЗадачи) Экспорт
	
	КлючЗаписи = Неопределено;
	
	Если ПустаяСтрока(ХешЗадачи) Тогда
		Возврат КлючЗаписи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТаблицаКлючиЗадач = КлючиЗадач();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорЗапроса.Источники.Добавить("РегистрСведений.ЗадачиБухгалтера", "ЗадачиБухгалтера");
	
	МассивИменКлючей = Новый Массив; // Используется для формирования структуры из ключей записи
	Для Каждого Колонка Из ТаблицаКлючиЗадач.Колонки Цикл
		ОператорЗапроса.ВыбираемыеПоля.Добавить("ЗадачиБухгалтера." + Колонка.Имя);
		МассивИменКлючей.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ОператорЗапроса.Отбор.Добавить("ЗадачиБухгалтера.ХешЗадачи = &ХешЗадачи");
	Запрос.УстановитьПараметр("ХешЗадачи", ХешЗадачи);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураКлюча = Новый Структура(СтрСоединить(МассивИменКлючей, ","));
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка);
		КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(СтруктураКлюча);
	КонецЕсли;
	
	Возврат КлючЗаписи;
	
КонецФункции

// Возвращает сохраненную хеш-сумму задачи.
//
// Параметры:
//   ЗначенияКлючаЗаписи - Структура - структура с ключами из КлючиЗадач().
//
// Возвращаемое значение:
//   Строка - хеш-сумма задачи.
//
Функция СохраненнаяХешСуммаЗадачи(ЗначенияКлючаЗаписи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлючаЗаписи);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи.ХешЗадачи;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Получает все расписание по уплате налогов и сдаче отчетности по организации за указанный период.
//
// Параметры:
//  ОтборПравил  - Структура - см. Справочник.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения()
//                 Если в качестве начала интервала времени передать пустое значение, то это будет означать, что нужно
//                 учитывать только недавние события, задачи, связанные с которыми еще можно выполнить в срок.
// 
// Возвращаемое значение:
//   Расписание - см. НовыйРасписание() - коллекция с рассчитанным расписанием.
//
Функция РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил) Экспорт
	
	Расписание = НовыйРасписание();
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	Расписание.Колонки.Добавить("ПеренестиСрокНачалаНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ЗаполнитьРасписаниеПоНалогамИСборам(Расписание, ОтборПравил, Ложь);
	
	ПеренестиНаРабочиеДни(Расписание);
	
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");
	Расписание.Колонки.Удалить("ПеренестиСрокНачалаНаРабочийДень");
	
	Расписание.ЗаполнитьЗначения(ОтборПравил.Организация, "Организация");
	
	Если ЗначениеЗаполнено(ОтборПравил.ТекущийПериод) Тогда
		УдалитьПросроченныеЗадачи(Расписание, ОтборПравил.ТекущийПериод);
	КонецЕсли;
	
	Возврат Расписание;
	
КонецФункции

Функция ПериодСобытияПоНалогамИСборам(Периодичность, ДатаПериода) Экспорт
	
	Возврат НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ДатаПериода));
	
КонецФункции

// Возвращает порядок предоставления отчета уплаты налога за период
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - Организация,
//                                             которую нужно установить в качестве параметра
//  ВидНалогаПравила                         - ПеречислениеСсылка.ВидыНалогов,
//                                             Структура:
//                                              * Задача - Строка - отбор по коду задачи
//                                              * Уплата - Строка - отбор по коду задачи
//                                             - Вид налога, для отбора правил
//  Период                                   - Дата - Период за который необходимо вернуть правила
//  Действие                                 - Перечисления.ВидыДействийКалендаряБухгалтера - 
//                                             действие для правила
//  ПроверятьУсловияТолькоНаГраницахОбзора   - Булево - флаг проверки условий на границах
// 
// Возвращаемое значение:
//   Структура:
//      *Отчет       - Структура - см. НовыйРасписание() - порядок предоставления отчетности
//      *Уплата      - Структура - см. НовыйРасписание() - порядок оплаты
//      *Уведомление - Структура - см. НовыйРасписание() - порядок предоставления уведолений
//
Функция ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, ВидНалогаПравила, Период, Действие = Неопределено, ПроверятьУсловияТолькоНаГраницахОбзора = Ложь, Знач Периодичность = Неопределено) Экспорт
	
	// Проверим корректность переданного периода.
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Если Период > КорректныйПериод.КонецКорректногоПериода Тогда
		// На 9 лет вперед (и больше) исполняемые задачи по предоставлению отчетности и уплате налогов не планируются.
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяЗадачи = "";
	ЭтоНДС = Ложь;
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.ПроверятьУсловияТолькоНаГраницахОбзора = ПроверятьУсловияТолькоНаГраницахОбзора;

	Если ТипЗнч(ВидНалогаПравила) = Тип("ПеречислениеСсылка.ВидыНалогов") Тогда
		Если УчетнаяПолитика.ПрименяетсяАУСН(Организация, Период) Тогда
			ИмяЗадачи = ВыполнениеЗадачБухгалтера.ПравилаУплатыАУСН().Задача;
		Иначе
			ИмяЗадачи = РасчетыСБюджетом.ИмяЗадачиБухгалтера(ВидНалогаПравила);
		КонецЕсли;
		// Признак для определения особого порядка уплаты.
		ЭтоНДС = (ВидНалогаПравила = Перечисления.ВидыНалогов.НДС);
		Если ЭтоНДС Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидНалогаПравила) = Тип("Структура") Тогда
		ИмяЗадачи = ВидНалогаПравила.Задача;
		
		ИмяПравилаОтчет  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВидНалогаПравила, "Отчет", "");
		ИмяПравилаУплата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВидНалогаПравила, "Уплата", "");
		
		Если Не ПустаяСтрока(ИмяПравилаОтчет) Тогда
			ОтборПравил.Правила.Добавить(ИмяПравилаОтчет);
		КонецЕсли;
		Если Не ПустаяСтрока(ИмяПравилаУплата) Тогда
			ОтборПравил.Правила.Добавить(ИмяПравилаУплата);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяЗадачи) Тогда
		ОтборПравил.ИмяЗадачи = ИмяЗадачи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Действие) Тогда
		ОтборПравил.Действие = Действие;
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоГода(ДобавитьМесяц(Период, -6)) - 1;
	ОтборПравил.КонецИнтервала  = КонецМесяца(ДобавитьМесяц(Период, 6));
	
	Расписание = НовыйРасписание();
	// Служебная колонка, будет удалена в конце процедуры
	// Если значение ПеренестиНаРабочийДень = 1, то задача переносится на следующий рабочий день
	// Если значение ПеренестиНаРабочийДень = -1, то задача переносится на предыдущий рабочий день
	// Если значение ПеренестиНаРабочийДень = 0, то задача никуда не переносится
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	Расписание.Колонки.Добавить("ПеренестиСрокНачалаНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ОбновитьСписокОтчетов = (Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
	
	ЗаполнитьРасписаниеПоНалогамИСборам(Расписание, ОтборПравил, ОбновитьСписокОтчетов);
	Расписание.Сортировать("ПериодСобытия Убыв, Срок Возр");
	
	Правила = ОбщегоНазначения.ВыгрузитьКолонку(Расписание, "Правило", Истина);
	ДействияПравил = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Правила, "Действие");
	
	ИндексСобытияОтчета         = Неопределено;
	ИндексСобытияУплаты         = Неопределено;
	ИндексСобытияУведомление    = Неопределено;
	// Уплата НДС производится 3-мя платежами, необходимо получить порядок уплаты по каждому.
	ИндексСобытийУплатыНДС = Новый Массив; 
	
	Для Индекс = 0 По Расписание.Количество() - 1 Цикл
		СтрокаРасписания = Расписание[Индекс];
		Если ЗначениеЗаполнено(ДатаНачалаДеятельности) И СтрокаРасписания.Срок < ДатаНачалаДеятельности Тогда
			// Задача попала в выборку, но не относится к организации
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Периодичность) И СтрокаРасписания.Периодичность <> Периодичность Тогда
			// Если задана нужная периодичность, задачи с иной периодичностью не интересуют.
			Продолжить;
		КонецЕсли;
		Если ИсключитьЗадачуИзУплатыНалога(СтрокаРасписания.Правило, ВидНалогаПравила) Тогда
			// В одной задаче 2 подчиненных правила с разным порядком выполнения
			Продолжить;
		КонецЕсли;
		Если СтрокаРасписания.Срок > СтрокаРасписания.ПериодСобытия Тогда
			// Обязанность уплаты наступает после завершения периода.
			// Например, уплата по декларации.
			// Подходит самый поздний закончившийся период.
			Если СтрокаРасписания.ПериодСобытия <= НачалоДня(Период) Тогда
				ДействиеПравила = ДействияПравил[СтрокаРасписания.Правило];
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
					И ИндексСобытияОтчета = Неопределено Тогда
					ИндексСобытияОтчета = Индекс;
				КонецЕсли;
				Если ЭтоНДС Тогда
					Если СтрокаРасписания.ПериодСобытия = НачалоДня(Период) Тогда 
						ИндексСобытийУплатыНДС.Добавить(Индекс);
					КонецЕсли;
				ИначеЕсли ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога 
					И ИндексСобытияУплаты = Неопределено Тогда
					ИндексСобытияУплаты = Индекс;
				КонецЕсли;
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление
					И ИндексСобытияУведомление = Неопределено Тогда
					ИндексСобытияУведомление = Индекс;
				КонецЕсли;
			ИначеЕсли СтрокаРасписания.Периодичность = Перечисления.Периодичность.День Тогда
				ДействиеПравила = ДействияПравил[СтрокаРасписания.Правило];
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
					И ИндексСобытияОтчета = Неопределено Тогда
					ИндексСобытияОтчета = Индекс;
				КонецЕсли;
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога 
					И ИндексСобытияУплаты = Неопределено Тогда
					ИндексСобытияУплаты = Индекс;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Обязанность уплаты наступает до завершения периода.
			// Например, уплата авансового платежа.
			// Нужно найти самое раннее событие в пределах интервала выполнения.
			Если СтрокаРасписания.Срок >= НачалоДня(Период)
				И СтрокаРасписания.НачалоВыполнения <= НачалоДня(Период)
				Или ОбязанностьУплатыНаступаетДоОкончанияПериода(СтрокаРасписания.Срок, Период, СтрокаРасписания.Периодичность) Тогда
				ДействиеПравила = ДействияПравил[СтрокаРасписания.Правило];
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
					ИндексСобытияОтчета = Индекс;
				КонецЕсли;
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
					ИндексСобытияУплаты = Индекс;
				КонецЕсли;
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
					ИндексСобытияУведомление = Индекс;
				КонецЕсли;
			ИначеЕсли СтрокаРасписания.Периодичность = Перечисления.Периодичность.День Тогда
				ДействиеПравила = ДействияПравил[СтрокаРасписания.Правило];
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
					И ИндексСобытияОтчета = Неопределено Тогда
					ИндексСобытияОтчета = Индекс;
				КонецЕсли;
				Если ДействиеПравила = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
					И ИндексСобытияУплаты = Неопределено Тогда
					ИндексСобытияУплаты = Индекс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПеренестиНаРабочиеДни(Расписание);
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");
	Расписание.Колонки.Удалить("ПеренестиСрокНачалаНаРабочийДень");
	
	Порядок = Новый Структура("Отчет, Уплата, Уведомление");
	
	Если ИндексСобытияОтчета <> Неопределено Тогда
		Порядок.Отчет = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Расписание[ИндексСобытияОтчета]);
	КонецЕсли;
	
	Если ЭтоНДС И ИндексСобытийУплатыНДС.Количество() = 3 Тогда // ожидаем получение порядка по всем платежам
		УплатаНДС = Расписание.СкопироватьКолонки();
		Для Каждого ИндексПлатежа ИЗ ИндексСобытийУплатыНДС Цикл
			СтрокаУплытыНДС = УплатаНДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУплытыНДС, Расписание[ИндексПлатежа]);
		КонецЦикла;
		Порядок.Уплата = УплатаНДС;
	ИначеЕсли ИндексСобытияУплаты <> Неопределено Тогда
		Порядок.Уплата = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Расписание[ИндексСобытияУплаты]);
	КонецЕсли;
	
	Если ИндексСобытияУведомление <> Неопределено Тогда
		Порядок.Уведомление = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Расписание[ИндексСобытияУведомление]);
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

Функция ХешЗаписи(Запись, КлючиЗадач) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Для Каждого Колонка Из КлючиЗадач.Колонки Цикл
		ХешированиеДанных.Добавить(XMLСтрока(Запись[Колонка.Имя]));
	КонецЦикла;
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

// Возвращает представление налогового органа для вывода в Списке задач и Календаре отчетности.
//
// Параметры:
//  КодКонтролирующегоОргана - Строка - код ИФНС.
//
Функция ПредставлениеНалоговогоОргана(КодКонтролирующегоОргана) Экспорт
	
	Свойства = Новый Структура("КодКонтролирующегоОргана, ВидКонтролирующегоОргана",
		КодКонтролирующегоОргана, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	ПредставлениеКонтролирующегоОргана =
		РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
	НалоговыйОрган = СтрШаблон(" (%1)", ПредставлениеКонтролирующегоОргана);
	
	Возврат НалоговыйОрган;
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Отправляет по электронной почте уведомления о задачах, срок выполнения которых наступает через 5 дней.
//
Процедура ОтправитьУведомленияПоЭлектроннойПочте() Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не СписокЗадачУведомленияПоЭлектроннойПочте.ОтправлятьУведомления() Тогда
			Возврат;
		КонецЕсли;
		
		Если Не СписокЗадачУведомленияПоЭлектроннойПочте.КорректностьНастройки() Тогда
			Возврат;
		КонецЕсли;
		
		// В режиме сервиса сразу планируется очередное обновление задач бухгалтера
		КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
		
		КоличествоСекундВСутках = 86400;
		КоличествоДней = 5;
		Интервал5Дней = КоличествоДней * КоличествоСекундВСутках;
		
		Период = НачалоДня(ОбщегоНазначенияБП.ТекущаяДатаНаСервере()) + Интервал5Дней;
		
		ВыборкаЗадач = ВыбратьЗадачиПоСрокуВыполнения(Период);
		
		Если ВыборкаЗадач.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Кому = СписокЗадачУведомленияПоЭлектроннойПочте.Получатель();
		
		ШаблонПисьма = ПолучитьМакет("УведомлениеПоЭлектроннойПочте").ПолучитьТекст();
		
		ЗначенияПодстановки = Новый Структура;
		ЗначенияПодстановки.Вставить("Заголовок", УведомленияПоЭлектроннойПочтеЗаголовок());
		ЗначенияПодстановки.Вставить("Подзаголовок", УведомленияПоЭлектроннойПочтеПодзаголовок(Период));
		ЗначенияПодстановки.Вставить("Строки", УведомленияПоЭлектроннойПочтеСтроки(ВыборкаЗадач));
		ЗначенияПодстановки.Вставить("Кнопка", УведомленияПоЭлектроннойПочтеКнопка());
		ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Кому", Кому);
		ПараметрыОтправки.Вставить("Тема", УведомленияПоЭлектроннойПочтеЗаголовок());
		ПараметрыОтправки.Вставить("Тело", ТекстПисьма);
		ПараметрыОтправки.Вставить("ТипТекста", "HTML");
		ПараметрыОтправки.Вставить("ОбрабатыватьТексты", Ложь);
		
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(),
			ПараметрыОтправки);
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Уведомления о задачах по электронной почте'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СоставлениеРасписания

// Рассчитывает расписание задач, связанных с уплатой налогов, сборов, представлению отчетов.
//
// Параметры:
//  Расписание   - см. НовыйРасписание() - коллекция, которая будет дополнена рассчитанным расписанием
//  ОтборПравил  - Структура - см. Справочник.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения()
//                 Если в качестве начала интервала времени передать пустое значение, то это будет означать, что нужно
//                 учитывать только недавние события, задачи, связанные с которыми еще можно выполнить в срок.
//  Правила      - см. Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НовыйТаблицаПравил() - 
//                 правила, которые должна выполнять организация в периоде обзора.
//                 Можно передать Неопределено, тогда правила будут определены в процедуре.
//  ОбновитьСписокОтчетов - Булево - если Истина, то дополнить список избранных отчетов
//
Процедура ЗаполнитьРасписаниеПоНалогамИСборам(Расписание, ОтборПравил, ОбновитьСписокОтчетов = Истина)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит ПравилаУплатыНалоговНаМестах
	Организация = ОтборПравил.Организация;
	
	Правила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НовыйПравилаОрганизации();
	Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ЗаполнитьПравилаОрганизации(
		Правила, ОтборПравил, МенеджерВременныхТаблиц);

	Если Не ЗначениеЗаполнено(Правила) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(Организация);
	ОсобыеСрокиСверкиИмущественныхНалогов = РегистрыСведений.СообщенияСРасчетомИмущественныхНалогов.ОсобыеСрокиСверкиИмущественныхНалогов(Организация);
	
	УчетЗарплаты.СоздатьПравилоВыплатаЗарплатыУплатаНДФЛ(МенеджерВременныхТаблиц, Организация, ОтборПравил); // Отдельное правило для удержанного НДФЛ
	
	// Правила: Правило, ФинансовыйПериод
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.УстановитьПараметр("ОсновнойНалоговыйОрган", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод,
	|	МАКСИМУМ(ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.ПериодДействияПравила, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодДействияПравила,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ МестныеПравила
	|ИЗ
	|	Правила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО Правила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И Правила.ФинансовыйПериод >= ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ФинансовыйПериод,
	|	Правила.Правило,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ПериодДействияПравила,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаУплатыНалоговНаМестах.СрокДней КАК СрокДней,
	|	ПравилаУплатыНалоговНаМестах.СрокМесяцев КАК СрокМесяцев,
	|	ПравилаУплатыНалоговНаМестах.Правило КАК Правило
	|ПОМЕСТИТЬ ПравилаУплатыНДФЛ
	|ИЗ
	|	ПравилоУплатыНДФЛНалоговымАгентом КАК ПравилаУплатыНалоговНаМестах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестныеПравила.ФинансовыйПериод КАК НачалоФинансовогоПериода,
	|	Регламент.Ссылка КАК Ссылка,
	|	Регламент.Владелец КАК Владелец,
	|	ПРЕДСТАВЛЕНИЕ(Регламент.Владелец) КАК ВладелецПредставление,
	|	Регламент.Описание КАК Описание,
	|	Регламент.Действие КАК Действие,
	|	Регламент.ФинансовыйПериод КАК ФинансовыйПериод,
	|	Регламент.Периодичность КАК Периодичность,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.ОграничениеПериода, Регламент.ОграничениеПериода) КАК ОграничениеПериода,
	|	ВЫБОР
	|		КОГДА ПравилаУплатыНДФЛ.СрокМесяцев ЕСТЬ NULL
	|				И ПравилаУплатыНалоговНаМестах.СрокМесяцев ЕСТЬ NULL
	|			ТОГДА Регламент.СрокМесяцев
	|		ИНАЧЕ ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокМесяцев, ПравилаУплатыНДФЛ.СрокМесяцев)
	|	КОНЕЦ КАК СрокМесяцев,
	|	ВЫБОР
	|		КОГДА ПравилаУплатыНДФЛ.СрокДней ЕСТЬ NULL
	|				И ПравилаУплатыНалоговНаМестах.СрокДней ЕСТЬ NULL
	|			ТОГДА Регламент.СрокДней
	|		ИНАЧЕ ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокДней, ПравилаУплатыНДФЛ.СрокДней)
	|	КОНЕЦ КАК СрокДней,
	|	Регламент.ПеренестиНаРабочийДень КАК ПеренестиНаРабочийДень,
	|	Регламент.БазовыйПериод КАК БазовыйПериод,
	|	Регламент.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, ""0000"") КАК КодКонтролирующегоОргана,
	|	Регламент.СчитатьСрокВРабочихДнях КАК СчитатьСрокВРабочихДнях,
	|	Регламент.ИсключатьПериодИзПредставленияЗадачи КАК ИсключатьПериодИзПредставленияЗадачи,
	|	Регламент.Код КАК ИдентификаторПравила,
	|	Регламент.Владелец.Код КАК ИдентификаторЗадачи,
	|	Регламент.НачальныйСрокМесяцев КАК НачальныйСрокМесяцев,
	|	Регламент.НачальныйСрокДней КАК НачальныйСрокДней,
	|	Регламент.ПеренестиСрокНачалаНаРабочийДень КАК ПеренестиСрокНачалаНаРабочийДень,
	|	Регламент.ИсключатьИмяРодительскойЗадачиИзПредставленияЗадачи КАК ИсключатьИмяРодительскойЗадачиИзПредставленияЗадачи,
	|	Регламент.ВыполняетсяЕдинымПомощником КАК ВыполняетсяЕдинымПомощником,
	|	Регламент.ОснованияПродленияСроков.(
	|		ОснованиеПродленияСроковНалоговОтчетов КАК ОснованиеПродленияСроковНалоговОтчетов
	|	) КАК ОснованияПродленияСроков
	|ИЗ
	|	МестныеПравила КАК МестныеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|		ПО МестныеПравила.Правило = Регламент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО МестныеПравила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И МестныеПравила.ПериодДействияПравила = ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|			И МестныеПравила.РегистрацияВНалоговомОргане = ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО МестныеПравила.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНДФЛ КАК ПравилаУплатыНДФЛ
	|		ПО МестныеПравила.Правило = ПравилаУплатыНДФЛ.Правило
	|ГДЕ
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.Включено, ИСТИНА)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// "Релевантным" называется период, к которому относится действие
		// Составим перечень таких периодов
		РелевантныеПериоды = Новый Массив;
		// Для каждого релевантного периода определим дату, когда задачи за этот период появятся в списке
		НачалоВыполнения   = Новый Соответствие;
		
		// Часто задачу требуется выполнять после окончания периода, к которому она относится. 
		// Например: налог за январь платим в феврале.
		// В таких случаях часто базовый и релевантный период совпадают:
		// налог за январь платим по данным января.
		// Это - простые правила.
		// 
		// Кроме них есть и более сложные, когда базовый и релевантный период не совпадают.
		// Сложности, специфика начинаются только тогда, когда речь идет о разного рода 
		// _прогнозах_ и некоторых случаях _авансов_.
		// В большинстве (но не во всех) сложных правилах 
		// срок, отведенный на выполнение задачи, истекает до окончания периода, к которому она относится: 
		// аванс за январь платим в январе.
		
		СобытиеПозжеРелевантногоПериода = СобытиеПозжеРелевантногоПериода(Выборка);
		ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Выборка);
		
		КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.ФинансовыйПериод, Выборка.НачалоФинансовогоПериода);
		
		Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
			
			// Даты начала выполнения будут лежать в интервале:
			НачалоИнтервала = Макс(Выборка.НачалоФинансовогоПериода, ОтборПравил.НачалоИнтервала);
			КонецИнтервала  = Мин(КонецФинансовогоПериода, КонецДня(ОтборПравил.КонецИнтервала));
			
			Если НачалоИнтервала > КонецИнтервала Тогда
				Продолжить;
			КонецЕсли;
			
			РелевантныеПериоды = ЗавершенныеИнтервалы(
				НачалоИнтервала,
				КонецИнтервала,
				Выборка.Периодичность);
			
			Для Каждого НачалоПериода Из РелевантныеПериоды Цикл
				КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.Периодичность, НачалоПериода);
				НачалоВыполнения.Вставить(НачалоПериода, КонецПериода + 1);
			КонецЦикла;
				
		Иначе 
			
			// Базовый и релевантный периоды не совпадают.
			// Базовый период включает в себя один или несколько релевантных.
			Если ПростойБазовыйПериод Тогда
				БазовыйПериод = Выборка.Периодичность;
				ОтставаниеБазовогоПериода = 0;
			Иначе
				БазовыйПериод = Выборка.БазовыйПериод;
				ОтставаниеБазовогоПериода = Выборка.ОтставаниеБазовогоПериода;
			КонецЕсли;
			
			// Базовый период всегда предшествует сроку
			КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
				ОтставаниеБазовогоПериода, 
				БазовыйПериод, 
				Выборка.СрокМесяцев);
			
			// Интервал базовых периодов также не совпадает - опережает соответствующий финансовый период
			ОпережениеРелевантногоПериода = 1 + ОтставаниеБазовогоПериода;
			НачалоИнтервалаБазовыхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
				Выборка.НачалоФинансовогоПериода,
				БазовыйПериод,
				- ОпережениеРелевантногоПериода);
			// Для расчета конца интервала нельзя прибавлять месяцы к дате конца другого периода,
			// так как в разных месяцах разное количество дней.
			// Поэтому конец интервала рассчитываем через начало следующего интервала.
			НачалоСледующегоФинансовогоПериода = КонецФинансовогоПериода + 1;
			НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов = 
				ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
					НачалоСледующегоФинансовогоПериода,
					БазовыйПериод,
					- ОпережениеРелевантногоПериода);
			КонецИнтервалаБазовыхПериодов = НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов - 1;
				
			// Даты окончания базовых периодов будут лежать в интервале:
			НачалоИнтервалаБазовыхПериодов = Макс(НачалоИнтервалаБазовыхПериодов, ОтборПравил.НачалоИнтервала);
			КонецИнтервалаБазовыхПериодов  = Мин(КонецИнтервалаБазовыхПериодов, КонецДня(ОтборПравил.КонецИнтервала));
			
			Если НачалоИнтервалаБазовыхПериодов > КонецИнтервалаБазовыхПериодов Тогда
				Продолжить;
			КонецЕсли;
			
			// Составим перечень базовых периодов, которые завершились внутри интервала
			ЗавершенныеБазовыеПериоды = ЗавершенныеИнтервалы(
				НачалоИнтервалаБазовыхПериодов,
				КонецИнтервалаБазовыхПериодов,
				БазовыйПериод);
				
			ОтношениеБазовогоПериодаИРелевантного = 1;
			Если БазовыйПериод <> Выборка.Периодичность Тогда
				ПроизвольнаяДата = '0001-01-01';
				ДлинаБазовогоПериода     = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПроизвольнаяДата, БазовыйПериод)         - ПроизвольнаяДата;
				ДлинаРелевантногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПроизвольнаяДата, Выборка.Периодичность) - ПроизвольнаяДата;
				Если ДлинаРелевантногоПериода <> 0 Тогда
					ОтношениеБазовогоПериодаИРелевантного = ДлинаБазовогоПериода / ДлинаРелевантногоПериода;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НачалоБазовогоПериода Из ЗавершенныеБазовыеПериоды Цикл
				
				КонецБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(БазовыйПериод, НачалоБазовогоПериода);
				
				// Рассчитаем релевантный период.
				// Этот период всегда позже базового и, как правило (но не всегда), следует непосредственно за ним.
				РелевантныйПериод = КонецБазовогоПериода + 1;
				Если ОтставаниеБазовогоПериода > 0 Тогда
					РелевантныйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
						РелевантныйПериод, 
						БазовыйПериод,
						ОтставаниеБазовогоПериода);
				КонецЕсли;
				
				НачалоДиапазонаРелевантныхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(БазовыйПериод, РелевантныйПериод);
				КонецДиапазонаРелевантныхПериодов  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(БазовыйПериод, РелевантныйПериод);
				
				Если ОтношениеБазовогоПериодаИРелевантного <= 1 Тогда
					
					// Одному базовому периоду соответствует один релевантный
					// Они не совпадают по датам (базовый раньше релевантного - прогноз на февраль по данным января) 
					// и могут не совпадать по длине (прогноз на следующий год по данным 9 месяцев)
					РелевантныеПериоды.Добавить(НачалоДиапазонаРелевантныхПериодов);
					НачалоВыполнения.Вставить(НачалоДиапазонаРелевантныхПериодов, КонецБазовогоПериода + 1);
					
				ИначеЕсли ОтношениеБазовогоПериодаИРелевантного > 1 Тогда
					
					// Базовому периоду соответствует несколько релевантных
					// Например, 
					// - оплата за 1 полугодие по результатам прошлого года
					// - в январе, феврале и марте платим по 1/3 платежа за 4 квартал
					
					ПериодыВнутриБазового = ЗавершенныеИнтервалы(
						НачалоДиапазонаРелевантныхПериодов,
						КонецДиапазонаРелевантныхПериодов,
						Выборка.Периодичность);
						
					Для Каждого НачалоПериода Из ПериодыВнутриБазового Цикл
						РелевантныеПериоды.Добавить(НачалоПериода);
						НачалоВыполнения.Вставить(НачалоПериода, КонецБазовогоПериода + 1);
					КонецЦикла;
					
				КонецЕсли; 
			КонецЦикла;	// По базовым периодам
		КонецЕсли;
		
		// Исключим запрещенные периоды
		Если Не ПустаяСтрока(Выборка.ОграничениеПериода) Тогда
			
			// Ограничение периодов применяется к релевантным периодам, но не к базовым!
			
			Если Выборка.ФинансовыйПериод = Выборка.Периодичность Тогда
				// Особый случай - ограничение задается в номерах периодов в течение года.
				ПериодОграничения = Перечисления.Периодичность.Год;
			Иначе
				ПериодОграничения = Выборка.ФинансовыйПериод;
			КонецЕсли;
				
			ЗапрещенныеПериодыПоФинансовым = Новый Соответствие;
			РазмерМассива = РелевантныеПериоды.Количество();
			Для НомерСКонца = 1 По РазмерМассива Цикл
				Индекс = РазмерМассива - НомерСКонца;
				Период = РелевантныеПериоды[Индекс];
				ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодОграничения, Период);
				ЗапрещенныеПериоды = ЗапрещенныеПериодыПоФинансовым[ФинансовыйПериод];
				Если ЗапрещенныеПериоды = Неопределено Тогда
					КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодОграничения, Период);
					ЗапрещенныеПериоды = ЗапрещенныеИнтервалы(
						ФинансовыйПериод, 
						КонецФинансовогоПериода, 
						Выборка.Периодичность, 
						Выборка.ОграничениеПериода);
					ЗапрещенныеПериодыПоФинансовым.Вставить(ФинансовыйПериод, ЗапрещенныеПериоды);
				КонецЕсли;
				Если ЗапрещенныеПериоды.Найти(Период) <> Неопределено Тогда
					РелевантныеПериоды.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
				
		КонецЕсли;
		
		// Заполним перечень событий
		Для Каждого НачалоПериода Из РелевантныеПериоды Цикл
			
			ПериодСобытия = ПериодСобытияПоНалогамИСборам(Выборка.Периодичность, НачалоПериода);
			
			СтрокаРасписания = Расписание.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРасписания, 
				ОписаниеДействия(Выборка, ПериодСобытия, Организация, ПараметрыПродленияСроков, ОсобыеСрокиСверкиИмущественныхНалогов));
			
			СтрокаРасписания.НачалоВыполнения = НачалоВыполнения[НачалоПериода];
			
		КонецЦикла;
		
	КонецЦикла; // Выборка правил
	
	Если ОбновитьСписокОтчетов Тогда
		РегистрыСведений.ИзбранныеРегламентированныеОтчеты.ДополнитьИзбранныеРегламентированныеОтчеты(Правила, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасписаниеФинОтчетности(Организация, Правила, Расписание, Знач НачалоОбзора, Знач КонецОбзора)
	
	День = 24 * 60 * 60;
	
	Для каждого Правило Из Правила Цикл
		
		НачалоПериодаСдачи = Макс(НачалоОбзора,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Правило.НачалоВыполнения));
		
		КонецПериодаСдачи = ?(ЗначениеЗаполнено(Правило.ОкончаниеВыполнения),
			Мин(КонецОбзора, ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Правило.ОкончаниеВыполнения)),
			КонецОбзора);
		
		Периоды = КалендарьБухгалтера.Периоды(НачалоПериодаСдачи, КонецПериодаСдачи, Правило.Периодичность);
		
		ОписаниеКомплекта = ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности(Правило.Получатель, Правило.ИдентификаторКомплекта);
		Если ОписаниеКомплекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Период Из Периоды Цикл
			ПериодРасписания = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(Период, Правило.Периодичность);
			
			СрокПредставленияМесяцев = ОписаниеКомплекта.СрокПредставленияМесяцев;
			СрокПредставленияДней = ОписаниеКомплекта.СрокПредставленияДней;
			
			ЭтоКонецГода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, Период) = КонецГода(Период);
			Если ЭтоКонецГода И ОписаниеКомплекта.ОсобыйСрокПредставленияЗаГод Тогда
				СрокПредставленияМесяцев = ОписаниеКомплекта.СрокПредставленияЗаГодМесяцев;
				СрокПредставленияДней = ОписаниеКомплекта.СрокПредставленияЗаГодДней;
			КонецЕсли;
			
			Если ОписаниеКомплекта.СрокПредставленияВРабочихДнях Тогда
				СрокСдачи = ДобавитьМесяц(ПериодРасписания, СрокПредставленияМесяцев);
				Если ЗначениеЗаполнено(СрокПредставленияДней) Тогда
					ГрафикРаботы = УчетЗарплаты.ГрафикРаботыОрганизации(Организация);
					НачалоОтсчета = НачалоДня(СрокСдачи) - 1;
					СрокСдачиВРабочихДнях = ГрафикиРаботы.ДатаПоГрафику(ГрафикРаботы, НачалоОтсчета, СрокПредставленияДней, Ложь);
					Если СрокСдачиВРабочихДнях = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СрокСдачи = СрокСдачиВРабочихДнях;
				КонецЕсли;
			Иначе
				СрокСдачи = ДобавитьМесяц(ПериодРасписания, СрокПредставленияМесяцев) + День * СрокПредставленияДней - 1;
			КонецЕсли;
			
			Представление = ПредставлениеПериода(Период,
				ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, Период));
			
			ЗаполнитьЗаписьРасписанияФинОтчетность(Расписание.Добавить(),
				Правило,
				ПериодРасписания,
				Представление,
				СрокСдачи,
				ОписаниеКомплекта.ПереносСрокаПредставления);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасписаниеРегулярныеПлатежи(Организация, Правила, Расписание, Знач НачалоОбзора, Знач КонецОбзора)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Для каждого Правило Из Правила Цикл
		
		Если ЗначениеЗаполнено(НачалоОбзора) Тогда
			НачалоПериодаОбзора = НачалоОбзора;
			КонецПериодаОбзора = Макс(КонецОбзора, Правило.НачалоВыполнения)+1;
		Иначе
			// Событиями, приводящими к появлению напоминаний которые еще можно выполнить в срок, могут являться только события предыдущего и текущего периодов
			// т.к. оценка актуальности срока выполнения считается относительно текущей даты, глубину поиска источников актуальных задач отсчитываем -1 период от текущей даты сеанса
			НачалоПериодаОбзора = Макс(
				Правило.НачалоВыполнения, // период анализа не может быть раньше периода начала выполнения правила
				ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущаяДата, Правило.Периодичность, -1)); 
			КонецПериодаОбзора = КонецОбзора;
		КонецЕсли;
		
		// Первая задача по правилу в дату НачалоВыполнения, основное условие добавления - задача еще может быть выполнена в срок
		// Планируется в составе недавних событий в случае если дата начала выполнения больше текущей даты актуальности, 
		// И в составе давних - если дата начала выполнения меньше даты актуальности но больше текущей даты.
		Если Правило.НачалоВыполнения >= ТекущаяДата 
			И (Правило.НачалоВыполнения >= НачалоПериодаОбзора И Правило.НачалоВыполнения < КонецПериодаОбзора) Тогда
		
			ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(
				Расписание.Добавить(), 
				Правило, 
				ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Правило.НачалоВыполнения));
		
		КонецЕсли; 
		
		// Массив дат начала периодов выполнения правила лежащих в периоде обзора. Соотвественно массив дат начала месяца, квартала или года
		// Для правил дата начала выполнения которых больше даты конца обзора - содержит один элемент - начало периода первого выполнения
		// Для правил, которые уже действуют на дату КонецОбзора будет содержать массив дат за периоды лежащие внутри обозреваемого интервала.
		Периоды = КалендарьБухгалтера.Периоды(НачалоПериодаОбзора, КонецОбзора, Правило.Периодичность);
		
		// Для каждого анализируемого периода рассчитаем срок выполнения правила в нем и проверим
		// - начинается ли в нем какое либо правило (тогда создаем задачу по правилу в этом периоде)
		// - попадает ли срок выполнения задачи по правилу в период обзора (тогда создаем очередную задачу по правилу в следующем периоде)
		Для каждого Период Из Периоды Цикл
			// Срок выполнения задачи по правилу в анализируемом периоде. Всегда лежит внутри периода.
			Срок = Справочники.ПравилаРегулярныхПлатежей.ДатаПлатежаВПериоде(Правило.Правило, Период);
			
			// Добавляем новую задачу по правилу, когда срок очередного выполнения задачи по правилу наступает в обозреваемом интервале. 
			// В этом случае записываем задачу по правилу на следующий, по отношению к анализируемому, период.
			Если Срок >= НачалоПериодаОбзора И Срок < КонецОбзора Тогда
				
				ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(
					Расписание.Добавить(), 
					Правило,
					ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(Период, Правило.Периодичность));
					
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасписаниеУплатыПатентов(Организация, Правила, Расписание)
	
	ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(
		Организация);
	ОснованияПродленияСроков = ПараметрыПродленияСроков.ОснованияПродления;
	
	Для каждого Правило Из Правила Цикл
		
		ЗаписьРасписания = Расписание.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРасписания, Правило);
		
		Если ОснованияПродленияСроков.Найти(
			ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1аАбз4()) <> Неопределено Тогда
			// налог, уплачиваемый в связи с применением патентной системы
			// налогообложения, срок уплаты которого приходится на II квартал 2020 г., -
			// на 4 месяца;
			Срок = ЗаписьРасписания.Срок;
			Если КонецКвартала(Срок) = КонецКвартала(Дата(2020, 6, 30)) Тогда
				
				ЗаписьРасписания.Срок = ДобавитьМесяц(Срок, 4);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(ЗаписьРасписания, Правило, ПериодВыполнения)

	ЗаполнитьЗначенияСвойств(ЗаписьРасписания, Правило);
	
	ЗаписьРасписания.Срок                   = Справочники.ПравилаРегулярныхПлатежей.ДатаПлатежаВПериоде(Правило, ПериодВыполнения);
	ЗаписьРасписания.ПериодСобытия          = ПериодВыполнения;
	ЗаписьРасписания.ПеренестиНаРабочийДень = -1;
	ЗаписьРасписания.Действие               = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж;
	
	ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.АктивныйШаблон, "СуммаДокумента, Контрагент.Наименование");
	ЗаписьРасписания.Наименование = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru ='Оплата [СуммаДокумента] руб [КонтрагентНаименование]'"), 
		ЗначенияЗаполнения);
	
	ЗаписьРасписания.НаименованиеСокращенное = СтрШаблон("%1 - %2",
		Формат(ЗначенияЗаполнения.СуммаДокумента, "ЧДЦ="),
		СокрЛП(ЗначенияЗаполнения.КонтрагентНаименование));
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьРасписанияФинОтчетность(ЗаписьРасписания, Правило, ПериодВыполнения, ПредставлениеПериода, Срок, ПереносСрока)
	
	ЗаполнитьЗначенияСвойств(ЗаписьРасписания, Правило);
	
	ЗаписьРасписания.Срок                   = Срок;
	ЗаписьРасписания.ПериодСобытия          = ПериодВыполнения;
	ЗаписьРасписания.ПеренестиНаРабочийДень = ПереносСрока;
	ЗаписьРасписания.Действие               = Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность;
	
	ЗаписьРасписания.Наименование = СтрШаблон(НСтр("ru = '1С:ФинОтчетность для %1 за %2'"), Правило.Получатель, ПредставлениеПериода);
	ЗаписьРасписания.НаименованиеСокращенное = НСтр("ru = '1С:ФинОтчетность'");
	
КонецПроцедуры

Процедура ПеренестиНаРабочиеДни(Расписание)

	// Перенесем на рабочие дни
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	// Если производственный календарь не заполнен - то ничего не делаем
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат;
	КонецЕсли; 
	
	ВариантыПереноса = Новый Соответствие;
	ВариантыПереноса.Вставить(1,  Ложь);
	ВариантыПереноса.Вставить(-1, Истина);
	
	ВариантыУчетаНерабочихДней = Новый Массив;
	ВариантыУчетаНерабочихДней.Добавить(Истина); // Считать нерабочие дни нерабочими
	ВариантыУчетаНерабочихДней.Добавить(Ложь);
	
	ПараметрыПолученияРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
	ПараметрыПолученияРабочихДат.ВызыватьИсключение = Ложь;
	
	ОтборСтрок = Новый Структура("ПеренестиНаРабочийДень,УчитыватьНерабочиеДни");
	Для Каждого ВариантПереноса Из ВариантыПереноса Цикл
		
		ОтборСтрок.ПеренестиНаРабочийДень = ВариантПереноса.Ключ;
		
		ПараметрыПолученияРабочихДат.ПолучатьПредшествующие = ВариантПереноса.Значение;
		
		Для Каждого ВариантУчетаНерабочихДней Из ВариантыУчетаНерабочихДней Цикл
			
			ОтборСтрок.УчитыватьНерабочиеДни = ВариантУчетаНерабочихДней;
			
			ПараметрыПолученияРабочихДат.УчитыватьНерабочиеПериоды = ВариантУчетаНерабочихДней;
			
			Интервалы = Расписание.НайтиСтроки(ОтборСтрок);
			
			ИсходныеДаты = ОбщегоНазначения.ВыгрузитьКолонку(Интервалы, "Срок", Истина);
			
			ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
				ПроизводственныйКалендарь,
				ИсходныеДаты,
				ПараметрыПолученияРабочихДат);
			
			Для Каждого Интервал Из Интервалы Цикл
				
				ДатаПереноса = ГрафикПереноса[Интервал.Срок];
				Если ЗначениеЗаполнено(ДатаПереноса) Тогда
					Интервал.Срок = ДатаПереноса;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Перенесем так же сроки начала сдачи отчетов
	ОтборСтрок = Новый Структура("ПеренестиСрокНачалаНаРабочийДень");
	Для Каждого ВариантПереноса Из ВариантыПереноса Цикл
		
		ОтборСтрок.ПеренестиСрокНачалаНаРабочийДень = ВариантПереноса.Ключ;
		
		ПараметрыПолученияРабочихДат.ПолучатьПредшествующие = ВариантПереноса.Значение;
		
		ПараметрыПолученияРабочихДат.УчитыватьНерабочиеПериоды = Истина;
		
		Интервалы = Расписание.НайтиСтроки(ОтборСтрок);
		
		ИсходныеДаты = ОбщегоНазначения.ВыгрузитьКолонку(Интервалы, "НачальныйСрок", Истина);
		ПустойНачальныйСрок = ИсходныеДаты.Найти(Дата(1, 1, 1));
		Если ПустойНачальныйСрок <> Неопределено Тогда
			ИсходныеДаты.Удалить(ПустойНачальныйСрок);
		КонецЕсли;
		
		ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
			ПроизводственныйКалендарь,
			ИсходныеДаты,
			ПараметрыПолученияРабочихДат);
		
		Для Каждого Интервал Из Интервалы Цикл
			
			ДатаПереноса = ГрафикПереноса[Интервал.НачальныйСрок];
			Если ЗначениеЗаполнено(ДатаПереноса) Тогда
				Интервал.НачальныйСрок = ДатаПереноса;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПросроченныеЗадачи(Расписание, ТекущаяДата)

	КоличествоСтрок = Расписание.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Индекс            = КоличествоСтрок - НомерСтроки;
		ЭлементРасписания = Расписание[Индекс];
		
		Если ЭлементРасписания.Срок < ТекущаяДата Тогда
			Расписание.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСписокЗадачПоПравилу(Организация, Правило, ТолькоАктуальные)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Правило",     Правило);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.Действие КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило";
	
	
	Если ТолькоАктуальные Тогда
		Запрос.Текст = ТекстЗапроса + " И ЗадачиБухгалтера.Срок >= &ТекущаяДата И НЕ ЗадачиБухгалтера.ВАрхиве";
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Составим набор интервалов, которые завершились в периоде обзора
Функция ЗавершенныеИнтервалы(НачалоРасписания, КонецРасписания, Периодичность)
	
	ЗавершенныеИнтервалы = Новый Массив;
	
	КонецКрайнегоИнтервала = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, КонецРасписания + 1) - 1;
	
	Пока КонецКрайнегоИнтервала >= НачалоРасписания Цикл
		НачалоКрайнегоИнтервала = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, КонецКрайнегоИнтервала);
		ЗавершенныеИнтервалы.Вставить(0, НачалоКрайнегоИнтервала); // Потому что обходим периоды задом наперед
		КонецКрайнегоИнтервала = НачалоКрайнегоИнтервала - 1; // Шаг назад
	КонецЦикла;
	
	Возврат ЗавершенныеИнтервалы;
	
КонецФункции

Функция ЗапрещенныеИнтервалы(НачалоФинансовогоПериода, КонецФинансовогоПериода, Периодичность, Ограничение)
	
	ЗапрещенныеИнтервалы = Новый Массив;
	
	Если ПустаяСтрока(Ограничение) Тогда
		Возврат ЗапрещенныеИнтервалы;
	КонецЕсли;
		
	НомераЗапрещенныхИнтервалов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ограничение);
	
	ВсеИнтервалы = КалендарьБухгалтера.Периоды(НачалоФинансовогоПериода, КонецФинансовогоПериода, Периодичность);
	
	КоличествоИнтервалов = ВсеИнтервалы.Количество();
		
	Для Каждого НомерЗапрещенногоИнтервалаСтрокой Из НомераЗапрещенныхИнтервалов Цикл
		
		Попытка
			НомерЗапрещенногоИнтервала = Число(НомерЗапрещенногоИнтервалаСтрокой);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если НомерЗапрещенногоИнтервала < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерЗапрещенногоИнтервала > КоличествоИнтервалов Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапрещенныеИнтервалы.Добавить(ВсеИнтервалы[НомерЗапрещенногоИнтервала - 1]);
			
	КонецЦикла;
	
	Возврат ЗапрещенныеИнтервалы;
	
КонецФункции

Функция РасписаниеПоДавнимСобытиям(Организация, КонецОбзора, ТекущаяДата, Знач Правила, ОбновитьСписокОтчетов)
	
	НачалоОбзора = '0001-01-01';
	
	Расписание = НовыйРасписание();
	
	// Служебная колонка, будет удалена в конце процедуры
	// Если значение ПеренестиНаРабочийДень = 1, то задача переносится на следующий рабочий день
	// Если значение ПеренестиНаРабочийДень = -1, то задача переносится на предыдущий рабочий день
	// Если значение ПеренестиНаРабочийДень = 0, то задача никуда не переносится
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	Расписание.Колонки.Добавить("ПеренестиСрокНачалаНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоОбзора;
	ОтборПравил.КонецИнтервала  = КонецОбзора;
	ОтборПравил.Правила         = Правила;
	
	ЗаполнитьРасписаниеПоНалогамИСборам(
		Расписание,
		ОтборПравил,
		ОбновитьСписокОтчетов);
	
	СрокиСдачиФинОтчетности = Справочники.ПравилаФинОтчетности.СрокиСдачиПоОрганизацииЗаПериод(
		Организация,
		НачалоОбзора,
		КонецОбзора);
	
	ЗаполнитьРасписаниеФинОтчетности(
		Организация,
		СрокиСдачиФинОтчетности,
		Расписание,
		НачалоОбзора,
		КонецОбзора);
	
	ПравилаРегулярныеПлатежи = Справочники.ПравилаРегулярныхПлатежей.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
	
	ЗаполнитьРасписаниеРегулярныеПлатежи(
		Организация, 
		ПравилаРегулярныеПлатежи, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		
		ПравилаУплатыПатентов = Документы.ОперацияСПатентом.ПравилаУплатыПатентов(
			Организация,
			ТекущаяДата);
		
		ЗаполнитьРасписаниеУплатыПатентов(
			Организация,
			ПравилаУплатыПатентов,
			Расписание);
			
	КонецЕсли;
	
	ПеренестиНаРабочиеДни(Расписание);
	
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");
	Расписание.Колонки.Удалить("ПеренестиСрокНачалаНаРабочийДень");
	
	// Исключим из расписания просроченные задачи - их там будет немного,
	// так устроены функции ПравилаОрганизации() и ЗаполнитьРасписаниеПоНалогамИСборам(), ЗаполнитьРасписаниеРегулярныеПлатежи()
	УдалитьПросроченныеЗадачи(Расписание, ТекущаяДата);
	
	// Скорректируем задачи предыдущих периодов с учетом закрытия организации
	СкорректироватьРасписаниеСУчетомЗакрытияОрганизации(Организация, Расписание, ТекущаяДата);
	
	Расписание.ЗаполнитьЗначения(Организация, "Организация");
	
	Возврат Расписание;
	
КонецФункции

Функция РасписаниеПоНедавнимСобытиям(Организация, НачалоОбзора, КонецОбзора, Знач Правила, ОбновитьСписокОтчетов)
	
	Расписание = НовыйРасписание();
	
	// Служебная колонка, будет удалена в конце процедуры
	// Если значение ПеренестиНаРабочийДень = 1, то задача переносится на следующий рабочий день
	// Если значение ПеренестиНаРабочийДень = -1, то задача переносится на предыдущий рабочий день
	// Если значение ПеренестиНаРабочийДень = 0, то задача никуда не переносится
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	Расписание.Колонки.Добавить("ПеренестиСрокНачалаНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоОбзора;
	ОтборПравил.КонецИнтервала  = КонецОбзора;
	ОтборПравил.Правила         = Правила;
	
	ЗаполнитьРасписаниеПоНалогамИСборам(
		Расписание,
		ОтборПравил,
		ОбновитьСписокОтчетов);
	
	СрокиСдачиФинОтчетности = Справочники.ПравилаФинОтчетности.СрокиСдачиПоОрганизацииЗаПериод(
		Организация,
		НачалоОбзора,
		КонецОбзора);
	
	ЗаполнитьРасписаниеФинОтчетности(
		Организация,
		СрокиСдачиФинОтчетности,
		Расписание,
		НачалоОбзора,
		КонецОбзора);
	
	ПравилаРегулярныеПлатежи = Справочники.ПравилаРегулярныхПлатежей.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
	
	ЗаполнитьРасписаниеРегулярныеПлатежи(
		Организация, 
		ПравилаРегулярныеПлатежи, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
	
	ПеренестиНаРабочиеДни(Расписание);
	
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");
	Расписание.Колонки.Удалить("ПеренестиСрокНачалаНаРабочийДень");

	Расписание.ЗаполнитьЗначения(Организация, "Организация");
		
	Возврат Расписание;
		
КонецФункции

Процедура ЗаписатьНовыеЗадачи(Организация, Расписание, СтараяДатаАктуальности, НоваяДатаАктуальности, ТекущаяДата, ИзмененыЗаписи = Ложь)
	
	Если Расписание.Количество() = 0 И СтараяДатаАктуальности > ТекущаяДата Тогда
		// Не меняем дату актуальности, потому что РасписаниеПоНедавнимСобытиям() работает заведомо быстрее, чем РасписаниеПоДавнимСобытиям().
		// В том случае, если список задач бухгалтера не сочтет данные сильно устаревшими.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заблокируем на время транзакции
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(Расписание);
	
	// Создадим новые задачи
	Для Каждого ЭлементРасписания Из Расписание Цикл
		// Обработаем задачи, созданные до регистрации действий
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЭлементРасписания);
		Запись.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			// Создаем новую запись
			Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Запись, ЭлементРасписания);
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Запишем, что актуализировали список
	Состояние = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.СоздатьМенеджерЗаписи();
	Состояние.Организация      = Организация;
	Состояние.ДатаАктуальности = НоваяДатаАктуальности;
	Состояние.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьИзменения(Организация, Расписание, ТекущаяДата, ИзмененыЗаписи = Ложь)
	
	// Определять изменения - отличия между правильным (только что рассчитанным)
	// расписанием и уже имеющимся - будем запросом (позже, в транзакции).
	// Для передачи порядка строк таблицы в запрос добавляем в таблицу колонку Индекс.
	Расписание.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаРасписания Из Расписание Цикл
		СтрокаРасписания.Индекс = Расписание.Индекс(СтрокаРасписания);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заблокируем на время транзакции
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	НачатьТранзакцию();
		
	Блокировка.Заблокировать();
	
	// Получим перечень отличий
	// Отличиями считаем добавившиеся или удаленные события, а также те, у которых изменился срок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расписание",    Расписание);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата);
	
	// Тк при неналоговых регулярных платежах возможно изменение правила после выполнения по нему платежа, исключаем записи, по которым сделаны платежи, из обработки
	// Это делается для того, чтобы задачи по которым уже сделан платеж не исчезали из списка при изменении условий правила.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расписание.Индекс КАК Индекс,
	|	Расписание.Организация КАК Организация,
	|	Расписание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Расписание.Правило КАК Правило,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.Срок КАК Срок,
	|	Расписание.НачальныйСрок КАК НачальныйСрок,
	|	Расписание.Наименование КАК Наименование,
	|	Расписание.Действие КАК Действие
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Правило,
	|	ПериодСобытия,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Действие КАК Действие
	|ПОМЕСТИТЬ МогутБытьУдалены
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО ЗадачиБухгалтера.Организация = РегулярныеПлатежи.Организация
	|			И ЗадачиБухгалтера.Правило = РегулярныеПлатежи.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = РегулярныеПлатежи.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПроверкиКонтролирующимиОрганами
	|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Перечисление.ЗадачиНачалаРаботы
	|	И (ЗадачиБухгалтера.Срок >= &ТекущаяДата
	|			ИЛИ ЗадачиБухгалтера.ПериодСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|	И РегулярныеПлатежи.ПлатежноеПоручение ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Правило,
	|	ПериодСобытия,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Индекс КАК Индекс
	|ИЗ
	|	Расписание КАК Расписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Расписание.Организация = ЗадачиБухгалтера.Организация
	|			И Расписание.Правило = ЗадачиБухгалтера.Правило
	|			И Расписание.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И Расписание.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И Расписание.Действие = ЗадачиБухгалтера.Действие
	|ГДЕ
	|	ЗадачиБухгалтера.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МогутБытьУдалены.Организация КАК Организация,
	|	МогутБытьУдалены.Правило КАК Правило,
	|	МогутБытьУдалены.ПериодСобытия КАК ПериодСобытия,
	|	МогутБытьУдалены.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	МогутБытьУдалены.Действие КАК Действие
	|ИЗ
	|	МогутБытьУдалены КАК МогутБытьУдалены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расписание КАК Расписание
	|		ПО МогутБытьУдалены.Организация = Расписание.Организация
	|			И МогутБытьУдалены.Правило = Расписание.Правило
	|			И МогутБытьУдалены.ПериодСобытия = Расписание.ПериодСобытия
	|			И МогутБытьУдалены.РегистрацияВНалоговомОргане = Расписание.РегистрацияВНалоговомОргане
	|			И МогутБытьУдалены.Действие = Расписание.Действие
	|ГДЕ
	|	Расписание.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Индекс КАК Индекс,
	|	ЗадачиБухгалтера.Статус КАК Статус
	|ИЗ
	|	Расписание КАК Расписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Расписание.Организация = ЗадачиБухгалтера.Организация
	|			И Расписание.Правило = ЗадачиБухгалтера.Правило
	|			И Расписание.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И Расписание.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И Расписание.Действие = ЗадачиБухгалтера.Действие
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ Расписание.Правило ССЫЛКА Справочник.Патенты
	|	И Расписание.Срок <> ЗадачиБухгалтера.Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Индекс КАК Индекс,
	|	ЗадачиБухгалтера.Статус КАК Статус
	|ИЗ
	|	Расписание КАК Расписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Расписание.Организация = ЗадачиБухгалтера.Организация
	|			И Расписание.Правило = ЗадачиБухгалтера.Правило
	|			И Расписание.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И Расписание.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И Расписание.Действие = ЗадачиБухгалтера.Действие
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И Расписание.Правило ССЫЛКА Справочник.Патенты
	|	И (Расписание.Срок <> ЗадачиБухгалтера.Срок
	|			ИЛИ Расписание.Наименование <> ЗадачиБухгалтера.Наименование)";
	
	Результат = Запрос.ВыполнитьПакет();
	ИндексыНовыхЗаписей = Результат[2].Выбрать();
	ЗаписиКУдалению     = Результат[3].Выбрать();
	ЗаписиИзмененСрок   = Результат[4].Выбрать();
	ЗаписиИзмененПатент = Результат[5].Выбрать();
	
	// Для новых записей необходимо рассчитать статус
	НовыеЗадачи = Расписание.СкопироватьКолонки();
	
	Пока ИндексыНовыхЗаписей.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НовыеЗадачи.Добавить(), Расписание[ИндексыНовыхЗаписей.Индекс]);
	КонецЦикла;
	
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(НовыеЗадачи);
	
	// Создадим новые задачи
	Для Каждого Задача Из НовыеЗадачи Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Задача);
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Удалим задачи, ставшие неактуальными
	Пока ЗаписиКУдалению.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЗаписиКУдалению);
		Запись.Удалить();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Сменим срок
	Пока ЗаписиИзмененСрок.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененСрок.Индекс]);
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			// Обработаем задачи, созданные до регистрации действий
			ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененСрок.Индекс]);
			Запись.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
			Запись.Прочитать();
			ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененСрок.Индекс]);
		КонецЕсли;
		Запись.Срок = Расписание[ЗаписиИзмененСрок.Индекс].Срок;
		Запись.Статус = ЗаписиИзмененСрок.Статус;
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Сменим срок и наименование патента
	Пока ЗаписиИзмененПатент.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененПатент.Индекс]);
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			// Обработаем задачи, созданные до регистрации действий
			ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененПатент.Индекс]);
			Запись.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
			Запись.Прочитать();
			ЗаполнитьЗначенияСвойств(Запись, Расписание[ЗаписиИзмененПатент.Индекс]);
		КонецЕсли;
		Запись.Срок = Расписание[ЗаписиИзмененПатент.Индекс].Срок;
		Запись.Статус = ЗаписиИзмененПатент.Статус;
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Дата актуальности не изменилась
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ОписаниеДействия(Правило, ПериодСобытия, Организация, ПараметрыПереносаСроков, ОсобыеСрокиСверкиИмущественныхНалогов)
	
	ОснованияПродления          = ПараметрыПереносаСроков.ОснованияПродления;
	РаботаетВНерабочиеДни       = ПараметрыПереносаСроков.РаботаетВНерабочиеДни;
	ПеренестиСрокиОтчетовВФонды = ПараметрыПереносаСроков.ПеренестиСрокиОтчетовВФонды;
	ПравилаОтчетовВФонды        = ПараметрыПереносаСроков.ПравилаОтчетовВФонды;
	ПравилаБезПереносаСроков    = ПараметрыПереносаСроков.ПравилаБезПереносаСроков;
	
	День = 24 * 60 * 60;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("Правило",                     Правило.Ссылка);
	ОписаниеДействия.Вставить("Действие",                    Правило.Действие);
	ОписаниеДействия.Вставить("ПериодСобытия",               ПериодСобытия);
	ОписаниеДействия.Вставить("РегистрацияВНалоговомОргане", Правило.РегистрацияВНалоговомОргане);
	
	КонецПериода = Неопределено;
	
	Если ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаЗакрытияИП(Правило.ИдентификаторПравила) Тогда
		ДатаНепериодическойЗадачи = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаЗакрытияОрганизации(Организация);
		Если ЗначениеЗаполнено(ДатаНепериодическойЗадачи) Тогда
			
			Если Правило.ИдентификаторЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДС() Тогда
				// Для НДС особый срок задач - конец отчетного периода, квартал
				КонецПериода = КонецКвартала(ДатаНепериодическойЗадачи);
			ИначеЕсли ЗначениеЗаполнено(Правило.СрокМесяцев) Тогда
				// Для задач, которые выполняются со сроком в месяцах, следующих за месяцем от даты задачи:
				// Напр., 25 число месяца, следующего за месяцем выполнения условия
				// (в правилах указывается СрокМесяцев = 1, СрокДней = 25).
				// Соответственно, отсчет начинаем с последней секунды прошлого месяца
				КонецПериода = НачалоМесяца(ДатаНепериодическойЗадачи) - 1;
			Иначе
				КонецПериода = ДатаНепериодическойЗадачи;
			КонецЕсли;
			ОписаниеДействия.Вставить("ПериодСобытия", КонецГода(ДатаНепериодическойЗадачи));
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецДня(ПериодСобытия);
	КонецЕсли;
	
	// Учтем срок в месяцах.
	Срок = ДобавитьМесяц(КонецПериода, Правило.СрокМесяцев);
	Если Правило.Периодичность <> Перечисления.Периодичность.День Тогда
		Срок = КонецМесяца(Срок);
	КонецЕсли;
	
	Если Правило.СчитатьСрокВРабочихДнях Тогда
		// Попытаемся рассчитать срок в рабочих днях, если заполнен производственный календарь.
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		
		РабочийДень = КалендарьБухгалтера.РабочаяДатаПоКалендарю(ПроизводственныйКалендарь, Срок, Правило.СрокДней);
		Если РабочийДень <> Неопределено Тогда
			Срок = РабочийДень;
		Иначе
			// Возможно производственный календарь не заполнен, тогда рассчитаем срок в календарных днях.
			Срок = Срок + Правило.СрокДней * День;
		КонецЕсли;
	Иначе
		// Срок выполнения задачи считается в календарных днях.
		Срок = Срок + Правило.СрокДней * День;
	КонецЕсли;
	
	ВыборкаОснованияПродленияСроков = Правило.ОснованияПродленияСроков.Выбрать();
	Пока ВыборкаОснованияПродленияСроков.Следующий() Цикл
		Если ОснованияПродления.Найти(ВыборкаОснованияПродленияСроков.ОснованиеПродленияСроковНалоговОтчетов) <> Неопределено Тогда
			СдвинутьСрокВыполнения(Срок, ПериодСобытия, ВыборкаОснованияПродленияСроков.ОснованиеПродленияСроковНалоговОтчетов);
		КонецЕсли;
	КонецЦикла;
	
	СдвинутьМестныеСрокиУСН(Срок, ПериодСобытия, Правило, ПараметрыПереносаСроков);
	СдвинутьМестныеСрокиЕНВД(Срок, ПериодСобытия, Правило, ПараметрыПереносаСроков);
	СдвинутьСрокиСверкиИмущественныхНалогов(Срок, ПериодСобытия, Правило, ОсобыеСрокиСверкиИмущественныхНалогов);
	СдвинутьСрокиУведомлений(Срок, ПериодСобытия, Правило, День);
	
	Если ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаОплатыУставногоКапитала(Правило.ИдентификаторПравила) Тогда
		// регистрируем событие как непериодическое:
		// это нужно для того, чтобы в случае изменения условия выполнения правила
		// не задваивались задачи в списке по разным периодам события.
		ОписаниеДействия.Вставить("ПериодСобытия", '00010101');
		// Срок необходимо переопределить - зависит от точки события.
		ДатаНепериодическойЗадачи = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаРегистрацииОрганизации(Организация);
		Если Не ЗначениеЗаполнено(ДатаНепериодическойЗадачи) Тогда 
			Срок = КонецПериода;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеДействия.Вставить("Срок", Срок);
	ОписаниеДействия.Вставить("ПеренестиНаРабочийДень", Правило.ПеренестиНаРабочийДень);
	
	НачальныйСрок = Дата(1, 1, 1);
	Если ЕстьСрокНачалаВыполненияТребования(Правило) Тогда
		
		НачальныйСрок = ДобавитьМесяц(КонецПериода, Правило.НачальныйСрокМесяцев);
		Если Правило.Периодичность <> Перечисления.Периодичность.День Тогда
			НачальныйСрок = КонецМесяца(НачальныйСрок);
		КонецЕсли;
		
		НачальныйСрок = НачальныйСрок + Правило.НачальныйСрокДней * День;
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("НачальныйСрок", НачальныйСрок);
	ОписаниеДействия.Вставить("ПеренестиСрокНачалаНаРабочийДень", Правило.ПеренестиСрокНачалаНаРабочийДень);
	
	УчитыватьНерабочиеДни = Не РаботаетВНерабочиеДни;
	
	Если Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		УчитыватьНерабочиеДни = Ложь;
		
	ИначеЕсли Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
		ПолныйПутьКПравилу = СтрШаблон("%1.%2", Правило.ИдентификаторЗадачи, Правило.ИдентификаторПравила);
		
		Если ПравилаОтчетовВФонды.Найти(ПолныйПутьКПравилу) <> Неопределено Тогда
			
			УчитыватьНерабочиеДни = ПеренестиСрокиОтчетовВФонды;
			
		ИначеЕсли ПравилаБезПереносаСроков.Найти(ПолныйПутьКПравилу) <> Неопределено
			Или ПравилаБезПереносаСроков.Найти(Правило.ИдентификаторЗадачи) <> Неопределено Тогда
			
			УчитыватьНерабочиеДни = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("УчитыватьНерабочиеДни", УчитыватьНерабочиеДни);
	
	Если Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		ОписаниеДействия.Вставить("Периодичность", Правило.ФинансовыйПериод);
	Иначе
		ОписаниеДействия.Вставить("Периодичность", Правило.Периодичность);
	КонецЕсли;
	
	Если ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаЗакрытияИП(Правило.ИдентификаторПравила) Тогда
		// Для событий с датой закрытия описание генерируется с учетом конечного периода действия организации
		ЗавершающийПериод = КонецГода(Правило.НачалоФинансовогоПериода);
		ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
			ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Год, ЗавершающийПериод),
			ЗавершающийПериод);
	Иначе
		ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
			ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ОписаниеДействия.Периодичность, КонецПериода),
			КонецПериода);
	КонецЕсли;
	ОписаниеДействия.Вставить("ПредставлениеПериода", ПредставлениеПериода);
	
	НалоговыйОрган = "";
	Если ЗначениеЗаполнено(Правило.РегистрацияВНалоговомОргане) Тогда
		НалоговыйОрган = ПредставлениеНалоговогоОргана(Правило.КодКонтролирующегоОргана);
	КонецЕсли;
	
	// Наименование действия состоит из трех частей:
	// названия задачи, описания действия и периода (для местных налогов дополняется налоговым органом).
	
	// Описание действия может отсутствовать.
	// Описание задачи может отсутствовать.
	Если Правило.ИсключатьИмяРодительскойЗадачиИзПредставленияЗадачи Тогда
		ШаблонСобытие = НСтр("ru = '[Описание]'");
		ШаблонТекста  = НСтр("ru = '[Событие]'");
	Иначе
		ШаблонСобытие = НСтр("ru = ', [Описание]'");
		ШаблонТекста  = НСтр("ru = '[Задача][Событие]'");
	КонецЕсли;
	
	// Описание периода может отсутствовать.
	Если Правило.ИсключатьПериодИзПредставленияЗадачи Тогда
		ШаблонТекста = СтрШаблон(НСтр("ru = '%1 [НалоговыйОрган]'"), ШаблонТекста);
	ИначеЕсли ЭтоПравилоЕдиногоПомощника(Правило) Тогда
		ШаблонТекста = СтрШаблон(НСтр("ru = '%1 в [Период]'"), ШаблонТекста);
		ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(Срок), КонецМесяца(Срок));
		ПериодВПредложномПадеже = ПолучитьСклоненияСтроки(ПредставлениеПериода, ,"ПД=Предложный")[0];
		ПредставлениеПериода = ПериодВПредложномПадеже;
	ИначеЕсли ВыполнениеЗадачБухгалтера.ЭтоПравилоТринадцатогоНДФЛ(
		СтрШаблон("%1.%2", Правило.ИдентификаторЗадачи, Правило.ИдентификаторПравила)) Тогда
		ШаблонТекста  = НСтр("ru = '[Задача][Событие] [ПериодГод]'");
	ИначеЕсли ВыполнениеЗадачБухгалтера.ЭтоПравилоНДФЛКонецМесяца(
		СтрШаблон("%1.%2", Правило.ИдентификаторЗадачи, Правило.ИдентификаторПравила)) Тогда
		ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия));
		ПериодВРодительномПадеже = ПолучитьСклоненияСтроки(ПредставлениеПериода, ,"ПД=Родительный")[0];
		ПредставлениеПериода = СтрШаблон(" по %1 %2", День(КонецМесяца(ПериодСобытия)), ПериодВРодительномПадеже);
		ШаблонТекста  = НСтр("ru = '[Задача][Событие][Период]'");
	Иначе
		ШаблонТекста = СтрШаблон(НСтр("ru = '%1 за [Период][НалоговыйОрган]'"), ШаблонТекста);
	КонецЕсли;

	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Задача",         Справочники.ЗадачиБухгалтера.ПредставлениеЗадачи(Правило.Владелец));
	ПараметрыТекста.Вставить("Описание",       Правило.Описание);
	ПараметрыТекста.Вставить("Период",         ПредставлениеПериода);
	ПараметрыТекста.Вставить("ПериодГод",      СтрШаблон("%1 г.", Формат(ПериодСобытия, "ДФ=гггг")));
	ПараметрыТекста.Вставить("НалоговыйОрган", НалоговыйОрган);
	
	Если ПустаяСтрока(ПараметрыТекста.Описание) Тогда
		ПараметрыТекста.Вставить("Событие", "");
	ИначеЕсли ВыполнениеЗадачБухгалтера.ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Правило.Ссылка)
		И УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, ПериодСобытия) Тогда
		// Для упрощенного порядка зачета страховых взносов оплата взносов по единому тарифу и взносов с доходов
		// разделяется на разные задачи по соответствующим срокам уплаты
		Если УчетСтраховыхВзносовИП.ЭтоПравилоУплатыВзносовСДоходов(Правило.Ссылка) Тогда
			ПараметрыТекста.Вставить("Событие", НСтр("ru = ' с доходов'"));
		Иначе
			ПараметрыТекста.Вставить("Событие", НСтр("ru = ' по единому тарифу'"));
		КонецЕсли;
	Иначе
		ПараметрыТекста.Вставить(
			"Событие", 
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСобытие, ПараметрыТекста));
	КонецЕсли;
	
	ОписаниеДействия.Вставить("Наименование",
		СокрЛП(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста)));
	ОписаниеДействия.Вставить("НаименованиеСокращенное", ПараметрыТекста.Задача);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция БлижайшаяДатаПоявленияЗадачОрганизации(Организация, Знач КонецИнтервалаПоиска = '00010101')
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Упреждение  = КалендарьБухгалтера.УпреждениеЗаполненияСписка() * 24 * 60 * 60;
	
	ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ТекущаяДата = ТекущаяДатаСеанса() + Упреждение;
	Иначе
		ТекущаяДата = ДатаАктуальности + 1; // Текущая дата обозначает период, за который еще не созданы задачи
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	ТекущаяДата = Макс(ТекущаяДата, ДатаНачалаДеятельности);
	
	Если Не ЗначениеЗаполнено(КонецИнтервалаПоиска) Тогда
		КонецИнтервалаПоиска = КонецГода(ДобавитьМесяц(ТекущаяДата, 6));
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит ПравилаУплатыНалоговНаМестах
	
	Правила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НовыйПравилаОрганизации();
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = ТекущаяДата;
	ОтборПравил.КонецИнтервала  = КонецИнтервалаПоиска;
	Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ЗаполнитьПравилаОрганизации(
		Правила, ОтборПравил, МенеджерВременныхТаблиц);
		
	Если Не ЗначениеЗаполнено(Правила) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Правила: Правило, ФинансовыйПериод
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.УстановитьПараметр("ОсновнойНалоговыйОрган", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод,
	|	МАКСИМУМ(ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.ПериодДействияПравила, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодДействияПравила,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ МестныеПравила
	|ИЗ
	|	Правила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО Правила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И Правила.ФинансовыйПериод >= ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ФинансовыйПериод,
	|	Правила.Правило,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ПериодДействияПравила,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестныеПравила.ФинансовыйПериод КАК НачалоФинансовогоПериода,
	|	Регламент.Ссылка КАК Ссылка,
	|	Регламент.Владелец КАК Владелец,
	|	ПРЕДСТАВЛЕНИЕ(Регламент.Владелец),
	|	Регламент.Описание КАК Описание,
	|	Регламент.Действие КАК Действие,
	|	Регламент.ФинансовыйПериод КАК ФинансовыйПериод,
	|	Регламент.Периодичность КАК Периодичность,
	|	Регламент.ОграничениеПериода КАК ОграничениеПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокМесяцев, Регламент.СрокМесяцев) КАК СрокМесяцев,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокДней, Регламент.СрокДней) КАК СрокДней,
	|	Регламент.ПеренестиНаРабочийДень КАК ПеренестиНаРабочийДень,
	|	Регламент.БазовыйПериод КАК БазовыйПериод,
	|	Регламент.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	МестныеПравила КАК МестныеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|		ПО МестныеПравила.Правило = Регламент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО МестныеПравила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И МестныеПравила.ПериодДействияПравила = ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|			И МестныеПравила.РегистрацияВНалоговомОргане = ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоФинансовогоПериода,
	|	Регламент.Периодичность.Порядок
	|ИТОГИ
	|	МАКСИМУМ(СрокМесяцев),
	|	МАКСИМУМ(СрокДней)
	|ПО
	|	Ссылка";
	
	ВыборкаПравил  = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДалекоеБудущее = '29990101';
	БлижайшаяДата  = ДалекоеБудущее;
	Пока ВыборкаПравил.Следующий() Цикл
		
		БлижайшаяДатаПравила = БлижайшаяДата;
		
		СобытиеПозжеРелевантногоПериода = СобытиеПозжеРелевантногоПериода(ВыборкаПравил);
		ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(ВыборкаПравил);
		
		Периодичность = ВыборкаПравил.Периодичность;
		Если Не ПростойБазовыйПериод Тогда
			Периодичность = ВыборкаПравил.БазовыйПериод;
		КонецЕсли;
		
		Выборка = ВыборкаПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			// Определим интервал базовых периодов
			
			КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.ФинансовыйПериод, Выборка.НачалоФинансовогоПериода);
			
			Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
				
				НачалоИнтервалаБазовыхПериодов = Выборка.НачалоФинансовогоПериода;
				КонецИнтервалаБазовыхПериодов  = КонецФинансовогоПериода;
				
			Иначе
				
				// Базовый период всегда предшествует сроку
				ОтставаниеБазовогоПериода = Выборка.ОтставаниеБазовогоПериода;
				КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
					ОтставаниеБазовогоПериода, 
					Периодичность, 
					Выборка.СрокМесяцев);
				
				// Интервал базовых периодов опережает соответствующий финансовый период
				ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
				НачалоИнтервалаБазовыхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
					Выборка.НачалоФинансовогоПериода,
					Периодичность,
					- ОпережениеРелевантногоПериода);
				// Для расчета конца интервала нельзя прибавлять месяцы к дате конца другого периода,
				// так как в разных месяцах разное количество дней.
				// Поэтому конец интервала рассчитываем через начало следующего интервала.
				НачалоСледующегоФинансовогоПериода = КонецФинансовогоПериода + 1;
				НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов = 
					ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
						НачалоСледующегоФинансовогоПериода,
						Периодичность,
						- ОпережениеРелевантногоПериода);
				КонецИнтервалаБазовыхПериодов = НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов - 1;

			КонецЕсли;
			
			Если НачалоИнтервалаБазовыхПериодов >= БлижайшаяДата Тогда
				Прервать; // Переходим к следующему правилу - все следующие периоды этого правила заведомо позже
			КонецЕсли;
			
			Если ТекущаяДата > КонецИнтервалаБазовыхПериодов Тогда
				Продолжить; // Переходим к следующему финансовому периоду - по этому периоду задачи уже должны быть созданы
			КонецЕсли;
			
			Если ТекущаяДата <= НачалоИнтервалаБазовыхПериодов Тогда
				
				БлижайшаяДатаПравила = НачалоИнтервалаБазовыхПериодов;
				
			Иначе
				
				// Найдем самый ранний из базовых периодов, за который не созданы задачи
				// ТекущаяДата относится к еще не завершившемуся периоду
				БлижайшийБазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ТекущаяДата);
				
				БазовыеПериоды = КалендарьБухгалтера.Периоды(НачалоИнтервалаБазовыхПериодов, КонецИнтервалаБазовыхПериодов, Периодичность);
				Если БазовыеПериоды.Найти(БлижайшийБазовыйПериод) = Неопределено Тогда
					// В этом финансовом периоде подходящих нет.
					// Переходим к следующему финансовому периоду
					Продолжить; 
				КонецЕсли;
				
				БлижайшаяДатаПравила = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, БлижайшийБазовыйПериод) + 1;
					
				// Пренебрежем тем, что некоторые периоды могут быть ограничены.
					
			КонецЕсли;
			
			Прервать; // Если дошли до сюда, то определили ближайшую дату правила. А следующие периоды по определению позже нее.
			
		КонецЦикла; //Выборка (финансовых периодов)
		
		БлижайшаяДата = Мин(БлижайшаяДата, БлижайшаяДатаПравила);
		
	КонецЦикла; // ВыборкаПравил
	
	Если БлижайшаяДата >= ДалекоеБудущее Тогда
		Возврат Неопределено;
	Иначе
		Возврат БлижайшаяДата - Упреждение;
	КонецЕсли;
	
КонецФункции

Процедура СдвинутьСрокВыполнения(Срок, ПериодСобытия, ОснованиеПереносаСроковОтчетовНалогов)
	
	Если ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1аАбз1() Тогда
		
		// а) продлить организациям и индивидуальным предпринимателям,
		// включенным по состоянию на 1 марта 2020 г. в соответствии
		// с Федеральным законом "О развитии малого и среднего
		// предпринимательства в Российской Федерации" в единый реестр
		// субъектов малого и среднего предпринимательства, установленные
		// законодательством о налогах и сборах сроки уплаты следующих налогов
		// (авансовых платежей):
		
		// налог на прибыль организаций, единый сельскохозяйственный налог,
		// налог, уплачиваемый в связи с применением упрощенной системы
		// налогообложения за 2019 год, - на 6 месяцев;
		
		Если КонецДня(ПериодСобытия) = КонецДня(Дата(2019, 12, 31)) Тогда
			Срок = ДобавитьМесяц(Срок, 6);
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1аАбз2() Тогда
		
		// налог на доходы физических лиц за 2019 год, уплачиваемый
		// индивидуальными предпринимателями в соответствии с пунктом 6
		// статьи 227 Налогового кодекса Российской Федерации (далее - Кодекс), -
		// на 3 месяца;
		
		Если КонецДня(ПериодСобытия) = КонецДня(Дата(2019, 12, 31)) Тогда
			Срок = ДобавитьМесяц(Срок, 3);
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1аАбз3() Тогда
		
		// налоги (за исключением налога на добавленную стоимость, налога на
		// профессиональный доход, налогов, уплачиваемых в качестве налогового
		// агента) и авансовые платежи по налогам за март и I квартал 2020 г. - на 
		// 6 месяцев, за апрель - июнь, за II квартал и первое полугодие 2020 г. -
		// на 4 месяца;
		
		ДатаПервогоКвартала = Дата(2020, 1, 1);
		ДатаВторогоКвартала = Дата(2020, 4, 1);
		
		Если КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаПервогоКвартала) Тогда
			
			Срок = ДобавитьМесяц(Срок, 6);
			
		ИначеЕсли КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаВторогоКвартала) Тогда
			
			Срок = ДобавитьМесяц(Срок, 4);
			
		КонецЕсли;
		
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1аАбз5() Тогда
		
		// в случае если законами субъектов Российской Федерации,
		// нормативными правовыми актами представительных органов
		// муниципальных образований предусмотрена уплата авансовых платежей
		// по транспортному налогу, налогу на имущество организаций и земельному
		// налогу, установить, что указанные авансовые платежи за I квартал 2020 г.
		// подлежат уплате не позднее 30 октября 2020 г., за II квартал 2020 г. -
		// не позднее 30 декабря 2020 г.;
		
		ДатаПервогоКвартала = Дата(2020, 1, 1);
		ДатаВторогоКвартала = Дата(2020, 4, 1);
		
		// Местными правилами срок уплаты может быть продлен. В этом случае Срок уже учитывает местные настройки уплаты.
		// Устанавливаем срок по общему переносу, только если он приходится на более позднюю дату, чем местная настройка.
		Если КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаПервогоКвартала) Тогда
			
			Срок = Макс(Срок, Дата(2020, 10, 30));
			
		ИначеЕсли КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаВторогоКвартала) Тогда
			
			Срок = Макс(Срок, Дата(2020, 12, 30));
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1б() Тогда
		
		// б) продлить организациям и индивидуальным предпринимателям,
		// указанным в подпункте "а" настоящего пункта и относящимся к категории
		// микропредприятий, установленные Кодексом сроки уплаты страховых
		// взносов:
		// исчисленных с выплат и иных вознаграждений в пользу физических
		// лиц за март - май 2020 г., - на 6 месяцев;
		// исчисленных с выплат и иных вознаграждений в пользу физических
		// лиц за июнь - июль 2020 г. - на 4 месяца;
		
		Если ПериодСобытия >= НачалоДня(Дата(2020, 3, 1))
			И ПериодСобытия <= КонецДня(Дата(2020, 5, 31)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 6);
			
		ИначеЕсли ПериодСобытия >= НачалоДня(Дата(2020, 6, 1))
			И ПериодСобытия <= КонецДня(Дата(2020, 7, 31)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 4);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1бИП() Тогда
		
		// а также исчисленных индивидуальным
		// предпринимателем за 2019 год с суммы дохода, превышающей
		// 300000 рублей, - на 4 месяца;
		Если КонецДня(ПериодСобытия) = КонецДня(Дата(2019, 12, 31)) Тогда
			Срок = ДобавитьМесяц(Срок, 4);
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП1в() Тогда
		
		// в) продлить организациям и индивидуальным предпринимателям,
		// указанным в подпункте "а" настоящего пункта и относящимся к категории
		// микропредприятий, установленные Федеральным законом
		// "Об обязательном социальном страховании от несчастных случаев на
		// производстве и профессиональных заболеваний" (далее - Федеральный
		// закон) сроки уплаты страховых взносов на обязательное социальное
		// страхование от несчастных случаев на производстве и профессиональных
		// заболеваний:
		// начисленных с выплат и иных вознаграждений в пользу физических
		// лиц за период март - май 2020 г., - на 6 месяцев;
		// начисленных с выплат и иных вознаграждений в пользу физических
		// лиц за период июнь - июль 2020 г., - на 4 месяца. 
		
		Если ПериодСобытия >= НачалоДня(Дата(2020, 3, 1))
			И ПериодСобытия <= КонецДня(Дата(2020, 5, 31)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 6);
			
		ИначеЕсли ПериодСобытия >= НачалоДня(Дата(2020, 6, 1))
			И ПериодСобытия <= КонецДня(Дата(2020, 7, 31)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 4);
			
		КонецЕсли;
		
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП3Абз1() Тогда
		
		// 3. Продлить:
		// на 3 месяца - установленный Кодексом срок представления
		// налогоплательщиками, налоговыми агентами налоговых деклараций
		// (за исключением налоговых деклараций по налогу на добавленную
		// стоимость), налоговых расчетов о суммах выплаченных иностранным
		// организациям доходов и удержанных налогов, расчетов сумм налога на
		// доходы физических лиц, исчисленных и удержанных налоговыми
		// агентами, расчетов по авансовым платежам, бухгалтерской (финансовой)
		// отчетности, срок подачи которых приходится на март - май 2020 г.;
		
		Если Срок >= НачалоДня(Дата(2020, 3, 1))
			И Срок <= КонецДня(Дата(2020, 5, 31)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 3);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.МерыУстойчивогоРазвитияП3Абз2() Тогда
		
		// до 15 мая 2020 г. - срок представления налоговых деклараций по
		// налогу на добавленную стоимость и расчетов по страховым взносам
		// за I квартал 2020 г
		
		ДатаПервогоКвартала = Дата(2020, 1, 1);
		
		Если КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаПервогоКвартала) Тогда
			
			Срок = Дата(2020, 5, 15);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.Постановление212ПП_П2() Тогда
		
		// Продлить срок уплаты торгового сбора за 1 квартал 2020 г. до 31 декабря 2020 г. (включительно).
		Если КонецДня(ПериодСобытия) = КонецКвартала(Дата(2020, 1, 1)) Тогда
			Срок = КонецДня(Дата(2020, 12, 31));
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.РазъясненияФСС() Тогда
		
		// Срок представления 4-ФСС за 1 квартал 2020г. продлен до 15 мая 2020 г.
		
		ДатаПервогоКвартала = Дата(2020, 1, 1);
		
		Если КонецКвартала(ПериодСобытия) = КонецКвартала(ДатаПервогоКвартала) Тогда
			
			Срок = Дата(2020, 5, 15);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.РазъясненияМинюста() Тогда
		
		// Срок представления отчетности в Минюст за 2019 г. продлен до 1 июня 2020 г.
		
		Если КонецДня(ПериодСобытия) = КонецДня(Дата(2019, 12, 31)) Тогда
			
			Срок = Дата(2020, 6, 1);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.ПостановлениеПравительства470() Тогда
		
		// Срок уплаты ежемесячных авансовых платежей по налогу на прибыль, уплачиваемых до 28 марта 2022 г., продлен до 28 апреля 2022 г.
		
		Если КонецДня(Срок) = КонецДня(Дата(2022, 3, 28)) Тогда
			
			Срок = ДобавитьМесяц(Срок, 1);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.ПостановлениеПравительства512() Тогда
		
		Если КонецДня(ПериодСобытия) = КонецГода(Дата(2021, 1, 1)) Тогда
			// Продлить на 6 месяцев организациям и индивидуальным предпринимателям, осуществляющим отдельные виды экономической деятельности,
			// установленные Налоговым кодексом Российской Федерации сроки уплаты налога,
			// уплачиваемого в связи с применением упрощенной системы налогообложения за 2021 год
			
			// Письмо ФНС России от 31.03.2022 № СД-4-3/3868@:
			// 2. Уплата сумм налогов (авансовых платежей по налогу), указанных в пункте 1 настоящего постановления, 
			// производится равными частями в размере одной шестой подлежащей уплате суммы указанных налогов (авансовых платежей по налогу) ежемесячно, 
			// не позднее последнего числа месяца, начиная с месяца, следующего за месяцем, в котором наступает срок уплаты соответствующих налогов (авансовых платежей по налогу), 
			// продленный на основании пункта 1 настоящего постановления.
			Срок = КонецМесяца(ДобавитьМесяц(Срок, 7));
			
		ИначеЕсли КонецДня(ПериодСобытия) = КонецКвартала(Дата(2022, 1, 1)) Тогда
			// авансового платежа по налогу, уплачиваемому в связи с применением упрощенной системы налогообложения за I квартал 2022 г.
			
			// Письмо ФНС России от 31.03.2022 № СД-4-3/3868@:
			// 2. Уплата сумм налогов (авансовых платежей по налогу), указанных в пункте 1 настоящего постановления, 
			// производится равными частями в размере одной шестой подлежащей уплате суммы указанных налогов (авансовых платежей по налогу) ежемесячно, 
			// не позднее последнего числа месяца, начиная с месяца, следующего за месяцем, в котором наступает срок уплаты соответствующих налогов (авансовых платежей по налогу), 
			// продленный на основании пункта 1 настоящего постановления.
			Срок = КонецМесяца(ДобавитьМесяц(Срок, 7));
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.ПостановлениеПравительства776П1() Тогда
		
		Если ПериодСобытия >= НачалоДня(Дата(2022, 4, 1))
			И ПериодСобытия <= КонецДня(Дата(2022, 6, 30)) Тогда
			// 1. Продлить на 12 месяцев организациям и индивидуальным
			// предпринимателям, осуществляющим отдельные виды экономической
			// деятельности по перечню согласно приложению № 1, установленные
			// Налоговым кодексом Российской Федерации сроки уплаты страховых
			// взносов, исчисленных с выплат и иных вознаграждений в пользу
			// физических лиц за апрель - июнь 2022 г.,
			
			Срок = ДобавитьМесяц(Срок, 12);
			
			// Постановление Правительства №28 от 17.01.2023 вносит изменения в постановление №776:
			// г) дополнить пунктом 2(1) следующего содержания:
			// 2(1). Уплата сумм страховых взносов, сроки уплаты которых продлены в соответствии с пунктами 1 
			// (за исключением сумм страховых взносов, исчисленных индивидуальными предпринимателями за 2021 год с суммы дохода, превышающей 300000 рублей) и 2 настоящего постановления, 
			// осуществляется не позднее 28-го числа месяца, на который перенесен срок их уплаты
			ГодУплаты = Год(Срок);
			МесяцУплаты = Месяц(Срок);
			Срок = Дата(ГодУплаты, МесяцУплаты, 28);
			
		ИначеЕсли КонецДня(ПериодСобытия) = КонецГода(Дата(2021, 1, 1)) 
			И КонецДня(Срок) = КонецДня(Дата(2022, 7, 1)) Тогда
			// а также исчисленных индивидуальными предпринимателями за 2021 год с суммы дохода,
			// превышающей 300000 рублей.
			Срок = ДобавитьМесяц(Срок, 12);
			
		КонецЕсли;
		
	ИначеЕсли ОснованиеПереносаСроковОтчетовНалогов = 
		ОснованияПродленияСроковНалоговОтчетов.ПостановлениеПравительства776П2() Тогда
		
		Если ПериодСобытия >= НачалоДня(Дата(2022, 7, 1))
			И ПериодСобытия <= КонецДня(Дата(2022, 9, 30)) Тогда
			
			// 2. Продлить на 12 месяцев организациям и индивидуальным
			// предпринимателям, осуществляющим отдельные виды экономической
			// деятельности по перечню согласно приложению № 2, установленные
			// Налоговым кодексом Российской Федерации сроки уплаты страховых
			// взносов, исчисленных с выплат и иных вознаграждений в пользу
			// физических лиц за июль - сентябрь 2022 г.
			Срок = ДобавитьМесяц(Срок, 12);
			
			// Постановление Правительства №28 от 17.01.2023 вносит изменения в постановление №776:
			// г) дополнить пунктом 2(1) следующего содержания:
			// 2(1). Уплата сумм страховых взносов, сроки уплаты которых продлены в соответствии с пунктами 1 
			// (за исключением сумм страховых взносов, исчисленных индивидуальными предпринимателями за 2021 год с суммы дохода, превышающей 300000 рублей) и 2 настоящего постановления, 
			// осуществляется не позднее 28-го числа месяца, на который перенесен срок их уплаты
			ГодУплаты = Год(Срок);
			МесяцУплаты = Месяц(Срок);
			Срок = Дата(ГодУплаты, МесяцУплаты, 28);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвинутьМестныеСрокиУСН(Срок, ПериодСобытия, Правило, ПараметрыПереносаСроков)
	
	// По УСН возможно продление сроков уплаты налога и авансов по решению субъектов РФ (см. 102-ФЗ от 01.04.2020).
	Если Правило.ИдентификаторЗадачи <> "УСН" ИЛИ Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Возврат;
	КонецЕсли;	
	
	// Могут быть продлены сроки по задачам, попадающим в указанный в законе интервал.
	ПериодПереносаСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПериодПереносаСроковНалоговОтчетов();
	Если Срок < ПериодПереносаСроков.Начало ИЛИ Срок > ПериодПереносаСроков.Окончание Тогда
		Возврат;
	КонецЕсли;	
		
	Если Правило.ИдентификаторПравила = "2013_УплатаОрганизация" ИЛИ Правило.ИдентификаторПравила = "2013_УплатаПредприниматель" Тогда
		// Регионы могут продлить (но не сократить) срок уплаты налога 
		Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыУСНЗа2019Год); 
	КонецЕсли;
	
	Если Правило.ИдентификаторПравила = "2013_УплатаАвансов" Тогда
		// Регионы могут продлить (но не сократить)срок уплаты авансов 
		Если ПериодСобытия = Дата(Год(ПериодСобытия), 3, 31) Тогда // конец 1 квартала
			Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыУСНЗа1Кв2020);
		ИначеЕсли ПериодСобытия = Дата(Год(ПериодСобытия), 6, 30) Тогда // конец 2 квартала
			Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыУСНЗа2Кв2020);
		ИначеЕсли ПериодСобытия = Дата(Год(ПериодСобытия), 9, 30) Тогда // конец 3 квартала
			Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыУСНЗа3Кв2020);
		КонецЕсли;	
	КонецЕсли;
			
КонецПроцедуры	

Процедура СдвинутьМестныеСрокиЕНВД(Срок, ПериодСобытия, Правило, ПараметрыПереносаСроков)
	
	// По ЕНВД возможно продление сроков уплаты налога по решению субъектов РФ (см. 102-ФЗ от 01.04.2020).
	Если Правило.ИдентификаторЗадачи <> "ЕНВД" ИЛИ Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Возврат;
	КонецЕсли;	
	
	// Могут быть продлены сроки по задачам, попадающим в указанный в законе интервал.
	ПериодПереносаСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПериодПереносаСроковНалоговОтчетов();
	Если Срок < ПериодПереносаСроков.Начало ИЛИ Срок > ПериодПереносаСроков.Окончание Тогда
		Возврат;
	КонецЕсли;	
		
	// Регионы могут продлить (но не сократить)срок уплаты налога 
	Если ПериодСобытия = Дата(Год(ПериодСобытия), 3, 31) Тогда // конец 1 квартала
		Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыЕНВДЗа1Кв2020);
	ИначеЕсли ПериодСобытия = Дата(Год(ПериодСобытия), 6, 30) Тогда // конец 2 квартала
		Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыЕНВДЗа2Кв2020);
	ИначеЕсли ПериодСобытия = Дата(Год(ПериодСобытия), 9, 30) Тогда // конец 3 квартала
		Срок = Макс(Срок, ПараметрыПереносаСроков.ДатаУплатыЕНВДЗа3Кв2020);
	КонецЕсли;	
			
КонецПроцедуры	

Процедура СдвинутьСрокиСверкиИмущественныхНалогов(Срок, ПериодСобытия, Правило, ОсобыеСрокиСверкиИмущественныхНалогов)

	Если Правило.ИдентификаторЗадачи <> ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог()
		 И Правило.ИдентификаторЗадачи <> ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог()
		 И Правило.ИдентификаторЗадачи <> ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество()
		 Или Правило.ИдентификаторПравила <> "СверкаРасчета" Тогда
		Возврат;
	КонецЕсли;	

	Поиск = Новый Структура;
	Поиск.Вставить("Налог", Правило.ИдентификаторЗадачи);
	Поиск.Вставить("ПериодСобытия", ПериодСобытия);
	Поиск.Вставить("КодНалоговогоОргана", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило.РегистрацияВНалоговомОргане, "Код"));
	
	НовыеСроки = ОсобыеСрокиСверкиИмущественныхНалогов.НайтиСтроки(Поиск);
	
	Если НовыеСроки.Количество() > 0 Тогда
		Срок = НовыеСроки[0].Срок;
	КонецЕсли;	
	
КонецПроцедуры 

Функция ЕстьСрокНачалаВыполненияТребования(Правило)
	Возврат Правило.НачальныйСрокМесяцев <> 0 Или Правило.НачальныйСрокДней <> 0;
КонецФункции

Процедура СдвинутьСрокиУведомлений(Срок, ПериодСобытия, Правило, День)
	
	Если Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление
		Или Правило.ИдентификаторЗадачи = "НДФЛ_Агент_Уведомление" Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаОбязательногоПримененияЕНП = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	Если ПериодСобытия > ДатаНачалаОбязательногоПримененияЕНП
		Или Срок > ДатаНачалаОбязательногоПримененияЕНП Тогда
		// Начиная с 2023 года сроки подачи уведомлений фиксированные, и сдвигать их не требуется
		Возврат;
	КонецЕсли;
	
	// Уведомление подается за 5 рабочих дней до даты уплаты
	СдвигСрокаДней = - 5;
	
	// Попытаемся рассчитать срок в рабочих днях, если заполнен производственный календарь.
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	РабочийДень = КалендарьБухгалтера.РабочаяДатаПоКалендарю(ПроизводственныйКалендарь, Срок, СдвигСрокаДней);
	Если РабочийДень <> Неопределено Тогда
		Срок = РабочийДень;
	Иначе
		// Возможно производственный календарь не заполнен, тогда рассчитаем срок в календарных днях.
		Срок = Срок + СдвигСрокаДней * День;
	КонецЕсли;
	
	ДатаНачалаПримененияЕНП = НастройкиУчетаВызовСервера.ДатаНачалаПримененияЕНП();
	Если Срок < ДатаНачалаПримененияЕНП Тогда
		Срок = ДатаНачалаПримененияЕНП;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет входит ли срок уплаты в указанный период.
// Нужна для проверки правил, срок у которых наступает до окончания периода.
//
// Параметры:
//  Срок          - Дата - срок выполнения задачи
//  Период        - Дата - конец проверяемого периода
//  Периодичность - ПеречислениеСсылка.Периодичность - периодичность задачи
// 
// Возвращаемое значение:
//  Булево - Истина если срок находится в заданном периоде
//
Функция ОбязанностьУплатыНаступаетДоОкончанияПериода(Срок, Период, Периодичность)
	КонецПериода = Неопределено;
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		КонецПериода = НачалоДня(КонецГода(Срок));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = НачалоДня(КонецКвартала(Срок));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = НачалоДня(КонецМесяца(Срок));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат Срок <= НачалоДня(Период) И КонецПериода = НачалоДня(Период);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПередачаПараметров

Функция МассивОрганизаций(ОтборОрганизации)
	
	Организации = Новый Массив;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииРазрешенныеПользователю();
	
	Если ТипЗнч(ОтборОрганизации) = Тип("Массив") Тогда
		Для Каждого ТекущаяОрганизация Из ОтборОрганизации Цикл
			Если ДоступныеОрганизации.Найти(ТекущаяОрганизация) <> Неопределено Тогда
				Организации.Добавить(ТекущаяОрганизация);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
			Если ДоступныеОрганизации.Найти(ОтборОрганизации) <> Неопределено Тогда
				Организации.Добавить(ОтборОрганизации);
			КонецЕсли;
		Иначе
			Организации = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДоступныеОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организации;
	
КонецФункции

#КонецОбласти

#Область ЗадачиНачалаРаботы

Функция НовыеЗадачиНачалаРаботы(ОтборОрганизации)
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Правило",       Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Выполнено",     Новый ОписаниеТипов("Булево"));
	
	ЗадачиНовыхОрганизаций = ЗадачиНовыхОрганизаций();
	
	// Добавим в список задачи настройки заполнения форм статистики
	// задачи настройки заполнения форм статистики зависят от настроек конкретной организации
	НастраиваемыеФормыСтатистики = ЗаполнениеФормСтатистикиПереопределяемый.НастраиваемыеФормыСтатистикиПредоставляемыеОрганизацией(ОтборОрганизации);
	
	ЗадачиУплатыНалоговВзносовПрошлыхЛет = ЗадачиОплатыЗадолженностиПоНалогамВзносамИП(ОтборОрганизации);
	
	// Составим список задач
	// Задача ПараметрыУчета в списке должна быть только одна
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗадачиНовыхОрганизаций.Задача КАК Задача,
	|	ЗадачиНовыхОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗадачиНовыхОрганизаций.УникальнаяЗадача КАК УникальнаяЗадача
	|ПОМЕСТИТЬ ЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиНовыхОрганизаций КАК ЗадачиНовыхОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастраиваемыеФормыСтатистики.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.НастройкаЗаполненияФормСтатистики) КАК Задача
	|ПОМЕСТИТЬ НастраиваемыеФормыСтатистики
	|ИЗ
	|	&НастраиваемыеФормыСтатистики КАК НастраиваемыеФормыСтатистики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет.Организация,
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет.Задача КАК Задача,
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет.Наименование КАК Наименование
	|ПОМЕСТИТЬ ЗадачиУплатыНалоговВзносовПрошлыхЛет
	|ИЗ
	|	&ЗадачиУплатыНалоговВзносовПрошлыхЛет КАК ЗадачиУплатыНалоговВзносовПрошлыхЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	&УсловиеПоОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Организация КАК Организация,
	|	ВсеЗадачиНачалаРаботы.Задача КАК Задача,
	|	ПРЕДСТАВЛЕНИЕ(ВсеЗадачиНачалаРаботы.Задача) КАК Наименование
	|ПОМЕСТИТЬ ПотребныеЗадачи
	|ИЗ
	|	ЗадачиНачалаРаботы КАК ВсеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
	|		ПО ВсеЗадачиНачалаРаботы.ОбособленноеПодразделение = Организации.ОбособленноеПодразделение
	|ГДЕ
	|	НЕ ВсеЗадачиНачалаРаботы.УникальнаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	УникальныеЗадачиНачалаРаботы.Задача,
	|	ПРЕДСТАВЛЕНИЕ(УникальныеЗадачиНачалаРаботы.Задача)
	|ИЗ
	|	ЗадачиНачалаРаботы КАК УникальныеЗадачиНачалаРаботы
	|ГДЕ
	|	УникальныеЗадачиНачалаРаботы.УникальнаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастраиваемыеФормыСтатистики.Организация,
	|	НастраиваемыеФормыСтатистики.Задача,
	|	ПРЕДСТАВЛЕНИЕ(НастраиваемыеФормыСтатистики.Задача)
	|ИЗ
	|	НастраиваемыеФормыСтатистики КАК НастраиваемыеФормыСтатистики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет.Организация,
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет.Задача,
	|	ВЫРАЗИТЬ(ЗадачиУплатыНалоговВзносовПрошлыхЛет.Наименование КАК СТРОКА(150))
	|ИЗ
	|	ЗадачиУплатыНалоговВзносовПрошлыхЛет КАК ЗадачиУплатыНалоговВзносовПрошлыхЛет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПотребныеЗадачи.Организация КАК Организация,
	|	ПотребныеЗадачи.Задача КАК Правило,
	|	ПотребныеЗадачи.Наименование КАК Наименование,
	|	ЗначенияУпорядочивания.Порядок КАК Порядок
	|ИЗ
	|	ПотребныеЗадачи КАК ПотребныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК СуществующиеЗадачи
	|		ПО ПотребныеЗадачи.Организация = СуществующиеЗадачи.Организация
	|			И ПотребныеЗадачи.Задача = СуществующиеЗадачи.Правило
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ЗадачиНачалаРаботы КАК ЗначенияУпорядочивания
	|		ПО ПотребныеЗадачи.Задача = ЗначенияУпорядочивания.Ссылка
	|ГДЕ
	|	СуществующиеЗадачи.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Если ТипЗнч(ОтборОрганизации) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "Организации.Ссылка В(&ОтборОрганизации)");
	ИначеЕсли ЗначениеЗаполнено(ОтборОрганизации) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "Организации.Ссылка = &ОтборОрганизации");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "НЕ Организации.ПометкаУдаления");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗадачиНовыхОрганизаций",       ЗадачиНовыхОрганизаций);
	Запрос.УстановитьПараметр("НастраиваемыеФормыСтатистики", НастраиваемыеФормыСтатистики);
	Запрос.УстановитьПараметр("ЗадачиУплатыНалоговВзносовПрошлыхЛет", ЗадачиУплатыНалоговВзносовПрошлыхЛет);
	Запрос.УстановитьПараметр("ОтборОрганизации",             ОтборОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Правило = Перечисления.ЗадачиНачалаРаботы.Подключение1СЭДО Тогда
			
			Если ОбменСКонтрагентами.ОрганизацияПодключена(Выборка.Организация) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗадачиНачалаРаботы.Добавить(), Выборка);
		
	КонецЦикла;
	
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

Функция ЗадачиНовыхОрганизаций()
	
	ЗадачиОрганизаций = Новый ТаблицаЗначений;
	ЗадачиОрганизаций.Колонки.Добавить("Задача",                    Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиОрганизаций.Колонки.Добавить("ОбособленноеПодразделение", Новый ОписаниеТипов("Булево"));
	ЗадачиОрганизаций.Колонки.Добавить("УникальнаяЗадача",          Новый ОписаниеТипов("Булево"));
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		НоваяЗадача = ЗадачиОрганизаций.Добавить();
		НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности;
		НоваяЗадача.ОбособленноеПодразделение = Ложь;
		
		НоваяЗадача = ЗадачиОрганизаций.Добавить();
		НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности;
		НоваяЗадача.ОбособленноеПодразделение = Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		НоваяЗадача = ЗадачиОрганизаций.Добавить();
		НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов;
		НоваяЗадача.ОбособленноеПодразделение = Ложь;
		
		Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
			НоваяЗадача = ЗадачиОрганизаций.Добавить();
			НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.Подключение1СЭДО;
			НоваяЗадача.ОбособленноеПодразделение = Ложь;
		КонецЕсли;
		
		НоваяЗадача = ЗадачиОрганизаций.Добавить();
		НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов;
		НоваяЗадача.ОбособленноеПодразделение = Истина;
	КонецЕсли;
	
	Возврат ЗадачиОрганизаций;
	
КонецФункции

Функция ЗадачиОплатыЗадолженностиПоНалогамВзносамИП(Организации)
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Задача",       Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат ЗадачиНачалаРаботы;
	КонецЕсли;
	
	ШаблонНаименования = НСтр("ru = 'Ввести начальные остатки по налогам и взносам'");
	Для Каждого Организация Из МассивОрганизаций(Организации) Цикл
		
		НоваяЗадача = ЗадачиНачалаРаботы.Добавить();
		НоваяЗадача.Организация = Организация;
		НоваяЗадача.Задача = Перечисления.ЗадачиНачалаРаботы.ОплатитьЗадолженностьПоНалогамВзносам;
		
		НоваяЗадача.Наименование = ШаблонНаименования;
		
	КонецЦикла;
	
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

#КонецОбласти

#Область ЗадачиСнятияСУчета

Функция ЗадачиСнятияСУчетаВНалоговой(Организации)
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Задача",       Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	ШаблонНаименования = НСтр("ru = 'Указать дату закрытия индивидуального предпринимателя'");
	Для Каждого Организация Из МассивОрганизаций(Организации) Цикл
		
		// Задачи прекращения деятельности доступны только для ИП
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗадача = ЗадачиНачалаРаботы.Добавить();
		НоваяЗадача.Организация = Организация;
		НоваяЗадача.Задача = Перечисления.ЗадачиНачалаРаботы.УказатьДатуПрекращенияДеятельности;
		
		НоваяЗадача.Наименование = ШаблонНаименования;
		
	КонецЦикла;
	
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

Функция НовыеЗадачиСнятияСУчета(ОтборОрганизации)
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Правило",      Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ЗадачиНачалаРаботы.Колонки.Добавить("ВАрхиве", Новый ОписаниеТипов("Булево"));
	
	НовыеЗадачи = ЗадачиСнятияСУчетаВНалоговой(ОтборОрганизации);
	
	// Составим список задач
	// Задача ПараметрыУчета в списке должна быть только одна
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗадачиНовыхОрганизаций.Задача КАК Задача,
	|	ЗадачиНовыхОрганизаций.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ЗадачиНовыхОрганизаций.Наименование КАК СТРОКА(150)) КАК Наименование
	|ПОМЕСТИТЬ НовыеЗадачи
	|ИЗ
	|	&НовыеЗадачи КАК ЗадачиНовыхОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НовыеЗадачи.Организация КАК Организация,
	|	НовыеЗадачи.Задача КАК Правило,
	|	НовыеЗадачи.Наименование КАК Наименование,
	|	ЗначенияУпорядочивания.Порядок КАК Порядок
	|ИЗ
	|	НовыеЗадачи КАК НовыеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК СуществующиеЗадачи
	|		ПО НовыеЗадачи.Организация = СуществующиеЗадачи.Организация
	|			И НовыеЗадачи.Задача = СуществующиеЗадачи.Правило
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ЗадачиНачалаРаботы КАК ЗначенияУпорядочивания
	|		ПО НовыеЗадачи.Задача = ЗначенияУпорядочивания.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НовыеЗадачи.Организация = Организации.Ссылка
	|			И (Организации.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
	|		ПО НовыеЗадачи.Организация = УведомлениеОСпецрежимахНалогообложения.Организация
	|			И (УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления)
	|			И (НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияУпорядочивания.Порядок";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НовыеЗадачи", НовыеЗадачи);
	Запрос.УстановитьПараметр("ВидУведомления", Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР26001);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗадачиНачалаРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Наименование = СокрЛП(НоваяСтрока.Наименование);
	КонецЦикла;
	
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

Функция ЗавершитьЗадачуУказанияДатыЗакрытияИП()
	
	Результат = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Действие КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ЗадачиБухгалтера.Организация = Организации.Ссылка
	|			И (Организации.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило");
	
	Запрос.УстановитьПараметр("Правило", Перечисления.ЗадачиНачалаРаботы.УказатьДатуПрекращенияДеятельности);
	
	ЗадачиКЗавершению = Запрос.Выполнить().Выбрать();
	Пока ЗадачиКЗавершению.Следующий() Цикл
		ВыполнениеЗадачБухгалтераВызовСервера.ПеренестиВАрхив(ЗадачиКЗавершению);
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Заполняет статусы для существующих задач.
//
Процедура ЗаполнитьСтатусы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|			ТОГДА ЗадачиБухгалтера.Правило.Действие
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ПустаяСсылка)
	|	КОНЕЦ КАК Действие,
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.ВАрхиве КАК ВАрхиве,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ЗадачиБухгалтера.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера";
	
	ТаблицаЗадачи = Запрос.Выполнить().Выгрузить();
	
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(ТаблицаЗадачи);
	
	Набор = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	
	Набор.Загрузить(ТаблицаЗадачи);
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

// Обработчик обновления отмечает делает часть задач начала работы при обновлении с 2.0
//
Процедура ЗаполнениеЗадачНачалаРаботыПриОбновленииС20() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НевыполненныеЗадачи = Новый Массив;
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		НевыполненныеЗадачи.Добавить(Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности); // Нужно подключиться
	КонецЕсли;
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		НевыполненныеЗадачи.Добавить(Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов);    // Нужно проверить - в 2.0 не было
		НевыполненныеЗадачи.Добавить(Перечисления.ЗадачиНачалаРаботы.Подключение1СЭДО);        // Нужно подключиться
	КонецЕсли;
	Если НевыполненныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачиОрганизаций",   ЗадачиНовыхОрганизаций());
	Запрос.УстановитьПараметр("НевыполненныеЗадачи", НевыполненныеЗадачи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиОрганизаций.Задача КАК Задача,
	|	ЗадачиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗадачиОрганизаций.УникальнаяЗадача КАК УникальнаяЗадача
	|ПОМЕСТИТЬ ВыполненныеЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиОрганизаций КАК ЗадачиОрганизаций
	|ГДЕ
	|	НЕ ЗадачиОрганизаций.Задача В (&НевыполненныеЗадачи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВыполненныеЗадачиНачалаРаботы.Задача КАК Задача
	|ПОМЕСТИТЬ ВыполненныеЗадачиПоОрганизациям
	|ИЗ
	|	ВыполненныеЗадачиНачалаРаботы КАК ВыполненныеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВыполненныеЗадачиНачалаРаботы.ОбособленноеПодразделение = Организации.ОбособленноеПодразделение
	|ГДЕ
	|	НЕ ВыполненныеЗадачиНачалаРаботы.УникальнаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	УникальныеЗадачиНачалаРаботы.Задача
	|ИЗ
	|	ВыполненныеЗадачиНачалаРаботы КАК УникальныеЗадачиНачалаРаботы
	|ГДЕ
	|	УникальныеЗадачиНачалаРаботы.УникальнаяЗадача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполненныеЗадачиПоОрганизациям.Организация,
	|	ВыполненныеЗадачиПоОрганизациям.Задача КАК Правило,
	|	ПРЕДСТАВЛЕНИЕ(ВыполненныеЗадачиПоОрганизациям.Задача) КАК Наименование,
	|	ИСТИНА КАК Выполнено
	|ИЗ
	|	ВыполненныеЗадачиПоОрганизациям КАК ВыполненныеЗадачиПоОрганизациям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК СуществующиеЗадачи
	|		ПО ВыполненныеЗадачиПоОрганизациям.Организация = СуществующиеЗадачи.Организация
	|			И ВыполненныеЗадачиПоОрганизациям.Задача = СуществующиеЗадачи.Правило
	|ГДЕ
	|	СуществующиеЗадачи.Организация ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Сервис 1С-ЭДО в режиме сервиса не работает
Процедура СкрытьЗадачуПодключенияК1СЭДОВРежимеСервиса() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗадачиБухгалтера = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	ЗадачиБухгалтера.Отбор.Правило.Установить(Перечисления.ЗадачиНачалаРаботы.Подключение1СЭДО);
	ЗадачиБухгалтера.Прочитать();
	Если ЗадачиБухгалтера.Количество() > 0 Тогда
		
		Для Каждого Запись Из ЗадачиБухгалтера Цикл
			
			Запись.ВАрхиве = Истина;
			
		КонецЦикла;
		ЗадачиБухгалтера.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления 3.0.63.7.
// Заполняет новый реквизит "ХешЗадачи" в регистре сведений "ЗадачиБухгалтера".
//
Процедура ЗаполнитьХешЗадач() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.ХешЗадачи = &ПустаяСтрока";
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	КлючиЗадач = КлючиЗадач();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ХешЗадачи = ХешЗаписи(Запись, КлючиЗадач);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыОтчетов(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
		ЭлементБлокировки.УстановитьЗначение("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
		Набор.Отбор.Действие.Установить(Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
		Набор.Прочитать();
		
		ТаблицаЗадач = Набор.Выгрузить();
		
		ТаблицаЗаполненныеСтатусы = ТаблицаЗадач.СкопироватьКолонки();
		ТаблицаНезаполненныеСтатусы = ТаблицаЗадач.СкопироватьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Статус) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаЗаполненныеСтатусы.Добавить(), СтрокаТаблицы);
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаНезаполненныеСтатусы.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(ТаблицаНезаполненныеСтатусы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаполненныеСтатусы, ТаблицаНезаполненныеСтатусы);
		Набор.Загрузить(ТаблицаНезаполненныеСтатусы);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Параметры.ОбработкаЗавершена = Ложь;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить обработчик в процедуре ЗадачиБухгалтера.ЗаполнитьСтатусыОтчтеов() по причине:
				|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			РегистрыСведений.ЗадачиБухгалтера,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыОплат(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	СрокНачалаОбработки = ДобавитьМесяц(НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()), -1);
	
	ОбрабатываемыеДействия = Новый Массив;
	ОбрабатываемыеДействия.Добавить(Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
	ОбрабатываемыеДействия.Добавить(Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеДействия", ОбрабатываемыеДействия);
	Запрос.УстановитьПараметр("СрокНачалаОбработки", СрокНачалаОбработки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Действие КАК Действие,
	|	ЗадачиБухгалтера.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Действие В(&ОбрабатываемыеДействия)
	|	И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).ВыполняетсяЕдинымПомощником, ЛОЖЬ)
	|	И ЗадачиБухгалтера.Статус = """"
	|	И ЗадачиБухгалтера.Срок >= &СрокНачалаОбработки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировки.УстановитьЗначение("Правило", Выборка.Правило);
			ЭлементБлокировки.УстановитьЗначение("ПериодСобытия", Выборка.ПериодСобытия);
			ЭлементБлокировки.УстановитьЗначение("РегистрацияВНалоговомОргане", Выборка.РегистрацияВНалоговомОргане);
			ЭлементБлокировки.УстановитьЗначение("Действие", Выборка.Действие);
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Правило.Установить(Выборка.Правило);
			Набор.Отбор.ПериодСобытия.Установить(Выборка.ПериодСобытия);
			Набор.Отбор.РегистрацияВНалоговомОргане.Установить(Выборка.РегистрацияВНалоговомОргане);
			Набор.Отбор.Действие.Установить(Выборка.Действие);
			Набор.Прочитать();
			
			ТаблицаЗадач = Набор.Выгрузить();
			ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(ТаблицаЗадач);
			
			Набор.Загрузить(ТаблицаЗадач);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать задачу ""%1"" в процедуре ЗадачиБухгалтера.ЗаполнитьСтатусыОплат() по причине:
					|%2'"),
					Выборка.Наименование,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				РегистрыСведений.ЗадачиБухгалтера,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Актуализирует значение измерения "Действие" в существующих задачах для правила уплаты НДФЛ - НДФЛ_Агент.2023_НДФЛ_Уплата.
// У данного правила ранее менялся реквизит "Действие", в существующих задачах могло остаться прежнее значение.
//
Процедура АктуализироватьДействиеВСуществующихЗадачахУплатыНДФЛ() Экспорт
	
	ПравилоУплатыНДФЛ = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Агент", "2023_НДФЛ_Уплата");
	Если Не ЗначениеЗаполнено(ПравилоУплатыНДФЛ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить обработчик актуализации вида действия в списке задач для задач уплаты НДФЛ. 
			|Не удалось найти соответствующее правило ""НДФЛ_Агент.2023_НДФЛ_Уплата""'");
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			РегистрыСведений.ЗадачиБухгалтера,, ТекстСообщения);
			
		Возврат;
		
	КонецЕсли;
	
	АктуализироватьДействиеВСуществующихЗадачахПоПравилу(ПравилоУплатыНДФЛ);
	
КонецПроцедуры

#КонецОбласти

Процедура СкорректироватьРасписаниеСУчетомЗакрытияОрганизации(Организация, Расписание, ТекущаяДата)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Организация", Организация);
	ПараметрыВыполнения.Вставить("ДатаНачала", ТекущаяДата);
	ПараметрыВыполнения.Вставить("ДатаОкончания", КонецГода(ТекущаяДата));
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаЗакрытияОрганизации(Организация)) Тогда
		Возврат;
	КонецЕсли;
	
	// При закрытии организации необходимо заплатить налоги и взносы за отчетный период
	// Если есть задачи с предыдущего года, необходимо им скорректировать сроки
	// Если есть задачи текущего периода, то их необходимо удалить, т.к. вместо них будут сгененрированы задачи при закрытии организации
	
	НачалоПериода = НачалоГода(ТекущаяДата);
	КонецПериода = КонецГода(ТекущаяДата);
	ЗадачиКУдалению = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Расписание Цикл
		
		Если ТипЗнч(ТекущаяСтрока.Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
			Продолжить;
		КонецЕсли;
		
		// Необходимо проверить идентификатор правила на "закрывающие" задачи
		СвойстваЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Правило, "Код, Владелец");
		ЭтоЗадачаСнятияСУчета = ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаЗакрытияИП(СвойстваЗадачи.Код);
		
		Если ТекущаяСтрока.ПериодСобытия < НачалоПериода И Не ЭтоЗадачаСнятияСУчета Тогда
			// Корректируем срок задачи предыдущего периода на срок созданной задачи для закрытия организации
			СрокЗадачи = СрокЗакрывающейЗадачиОрганизации(Расписание, ТекущаяСтрока.ПериодСобытия, ТекущаяСтрока.Действие, СвойстваЗадачи.Владелец);
			Если ЗначениеЗаполнено(СрокЗадачи) Тогда
				ТекущаяСтрока.Срок = СрокЗадачи;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.ПериодСобытия < КонецПериода И Не ЭтоЗадачаСнятияСУчета Тогда
			// Убираем задачи текущего периода, напр. задачи авансовых платежей со сроком больше срока задачи при закрытии организации
			ЗадачиКУдалению.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрок = ЗадачиКУдалению.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - НомерСтроки;
		Расписание.Удалить(ЗадачиКУдалению[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

Функция СрокЗакрывающейЗадачиОрганизации(Расписание, ПериодСобытия, Действие, Владелец)
	
	ОтборСнятиеСУчета = Новый Структура("Действие, Периодичность");
	ОтборСнятиеСУчета.Действие = Действие;
	ОтборСнятиеСУчета.Периодичность = Перечисления.Периодичность.Год; // У задач снятия с учета периодичность - год
	
	ТекущиеЗадачи = Расписание.НайтиСтроки(ОтборСнятиеСУчета);
	
	Для Каждого ТекущаяСтрока Из ТекущиеЗадачи Цикл
		
		Если ТекущаяСтрока.ПериодСобытия > ПериодСобытия Тогда
			РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Правило, "Код, Владелец");
			Если РеквизитыПравила.Владелец = Владелец
				И ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаЗакрытияИП(РеквизитыПравила.Код) Тогда
				
				Возврат ТекущаяСтрока.Срок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИсключитьЗадачуИзУплатыНалога(Правило, ВидНалогаПравила)
	
	// Уплата по некоторым видам налога обрабатывается отдельно от группы,
	// если в одной задаче 2 подчиненных правила с разным порядком выполнения
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	ИсключитьЗадачу = Ложь;
	
	Если (ВидНалогаПравила = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ) Тогда
		ЭтоТравматизм = Не (ПолноеИмяПравила = "СтраховыеВзносы.2023_Уплата_Травматизм");
	Иначе
		
		Если (ВидНалогаПравила = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф) Тогда
			ИсключитьЗадачу = (ПолноеИмяПравила = ЗадачиБухгалтераКлиентСервер.ПолноеИмяПравилаСтраховыеВзносыИП_ВНиМ());
		ИначеЕсли ВидНалогаПравила = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
			ПолноеИмяПравилаСДоходов = СтрШаблон("%1.%2",
				ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП(),
				ВыполнениеЗадачБухгалтера.ИдентификаторПравилаСтраховыеВзносыИПСДоходов());
			ИсключитьЗадачу = (ПолноеИмяПравилаСДоходов <> ПолноеИмяПравила);
		КонецЕсли;
		
		ЭтоТравматизм = (ПолноеИмяПравила = "СтраховыеВзносы.2023_Уплата_Травматизм");
		
	КонецЕсли;
	
	Возврат (ЭтоТравматизм Или ИсключитьЗадачу);
	
КонецФункции

Процедура АктуализироватьДействиеВСуществующихЗадачахПоПравилу(Правило)
	
	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	ДействиеПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Действие");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило",         Правило);
	Запрос.УстановитьПараметр("ДействиеПравила", ДействиеПравила);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.Действие <> &ДействиеПравила";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Правило.Установить(Правило);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Действие = ДействиеПравила;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			НаборЗаписей.Очистить();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить обработчик актуализации вида действия в списке задач для правила ""%1"" по причине:
					|%2'"),
					ИдентификаторПравила,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				РегистрыСведений.ЗадачиБухгалтера,, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область УведомленияПоЭлектроннойПочте

Функция УведомленияПоЭлектроннойПочтеЗаголовок()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ЗаголовокПриложения = Константы.ЗаголовокСистемы.Получить();
		Если ПустаяСтрока(ЗаголовокПриложения) Тогда
			ЗаголовокПриложения = Метаданные.КраткаяИнформация;
		КонецЕсли;
	Иначе
		ЗаголовокПриложения = РаботаВМоделиСервиса.ПолучитьИмяПриложения();
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '%1: приближается срок выполнения задач'"), ЗаголовокПриложения);
	
КонецФункции

Функция УведомленияПоЭлектроннойПочтеПодзаголовок(Период)
	
	Возврат СтрШаблон(НСтр("ru = 'Выполните до %1:'"), Формат(Период, СтрШаблон("Л=%1; ДФ='d MMMM'", ОбщегоНазначения.КодОсновногоЯзыка())));
	
КонецФункции

Функция УведомленияПоЭлектроннойПочтеСтроки(ВыборкаЗадач)
	
	ШаблонСтроки = ПолучитьМакет("УведомлениеПоЭлектроннойПочтеСтрока").ПолучитьТекст();
	
	Результат = "";
	
	Пока ВыборкаЗадач.Следующий() Цикл
		Задача = ВыборкаЗадач.Наименование;
		
		МассивОрганизаций = Новый Массив;
		ВыборкаОрганизаций = ВыборкаЗадач.Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			МассивОрганизаций.Добавить(ВыборкаОрганизаций.Организация);
		КонецЦикла;
		Организации = СтрСоединить(МассивОрганизаций, ", ");
		
		ЗначенияПодстановки = Новый Структура;
		ЗначенияПодстановки.Вставить("ЗаголовокСтроки", Задача);
		ЗначенияПодстановки.Вставить("ПодзаголовокСтроки", Организации);
		Результат = Результат + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ЗначенияПодстановки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УведомленияПоЭлектроннойПочтеКнопка()
	
	ШаблонКнопки = ПолучитьМакет("УведомлениеПоЭлектроннойПочтеКнопка").ПолучитьТекст();
	АдресИнформационнойБазы = СписокЗадачУведомленияПоЭлектроннойПочте.АдресИнформационнойБазы();
	
	Если ПустаяСтрока(АдресИнформационнойБазы) Тогда
		Кнопка = "";
	Иначе
		ПутьКСпискуЗадач = ?(ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс(),
			"ОбщаяКоманда.СписокЗадач",
			"Обработка.ПанелиПростойИнтерфейс.Команда.СписокЗадач");
		ЗначенияПодстановки = Новый Структура;
		ЗначенияПодстановки.Вставить("Гиперссылка", СтрШаблон("%1/#e1cib/command/%2", АдресИнформационнойБазы, ПутьКСпискуЗадач));
		Кнопка = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКнопки, ЗначенияПодстановки);
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции

Функция ВыбратьЗадачиПоСрокуВыполнения(Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФинальныеСтатусы", ФинальныеСтатусы());
	Запрос.УстановитьПараметр("ПравилаЕдиногоНалоговогоПлатежа", ВыполнениеЗадачБухгалтера.ПравилаЕдиногоНалоговогоПлатежа());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Срок = &Период
	|	И НЕ ЗадачиБухгалтера.Статус В (&ФинальныеСтатусы)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Правило В (&ПравилаЕдиногоНалоговогоПлатежа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Организация
	|ИТОГИ ПО
	|	Наименование";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ФинальныеСтатусы()
	
	ФинальныеСтатусы = Новый Массив;
	ФинальныеСтатусы.Добавить(НСтр("ru = 'Выполнено'"));
	ФинальныеСтатусы.Добавить(НСтр("ru = 'Сдано'"));
	ФинальныеСтатусы.Добавить(НСтр("ru = 'Отклонено'"));
	ФинальныеСтатусы.Добавить(НСтр("ru = 'Просрочено'"));
	ФинальныеСтатусы.Добавить(НСтр("ru = 'Оплачено'"));
	
	Возврат ФинальныеСтатусы;
	
КонецФункции

#КонецОбласти

Функция ЭтоПравилоЕдиногоПомощника(Правило)
	
	Возврат Правило.Владелец.Код = "ЕдиныйНалоговыйСчет";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйРасписание() Экспорт

	Расписание = Новый ТаблицаЗначений;
	МетаданныеСпискаЗадач = Метаданные.РегистрыСведений.ЗадачиБухгалтера;
	
	Расписание.Колонки.Добавить("Организация",                 МетаданныеСпискаЗадач.Измерения.Организация.Тип);
	Расписание.Колонки.Добавить("РегистрацияВНалоговомОргане", МетаданныеСпискаЗадач.Измерения.РегистрацияВНалоговомОргане.Тип);
	Расписание.Колонки.Добавить("Правило",                     МетаданныеСпискаЗадач.Измерения.Правило.Тип);
	Расписание.Колонки.Добавить("ПериодСобытия",               МетаданныеСпискаЗадач.Измерения.ПериодСобытия.Тип);
	Расписание.Колонки.Добавить("Периодичность",               МетаданныеСпискаЗадач.Реквизиты.Периодичность.Тип);
	Расписание.Колонки.Добавить("Срок",                        МетаданныеСпискаЗадач.Реквизиты.Срок.Тип);
	Расписание.Колонки.Добавить("Наименование",                МетаданныеСпискаЗадач.Реквизиты.Наименование.Тип);
	Расписание.Колонки.Добавить("НаименованиеСокращенное",     МетаданныеСпискаЗадач.Реквизиты.НаименованиеСокращенное.Тип);
	Расписание.Колонки.Добавить("НачалоВыполнения",            МетаданныеСпискаЗадач.Реквизиты.НачалоВыполнения.Тип);
	Расписание.Колонки.Добавить("Действие",                    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера"));
	Расписание.Колонки.Добавить("УчитыватьНерабочиеДни",       Новый ОписаниеТипов("Булево")); // Считать нерабочие дни нерабочими.
	Расписание.Колонки.Добавить("НачальныйСрок",               МетаданныеСпискаЗадач.Реквизиты.НачальныйСрок.Тип);
	
	Возврат Расписание;

КонецФункции

Функция НовыйЗадачаСоСтатусом() Экспорт
	
	ЗадачаСоСтатусом = КлючиЗадачСтруктурой();
	ЗадачаСоСтатусом.Вставить("Статус", "");
	
	Возврат ЗадачаСоСтатусом;
	
КонецФункции

Функция СобытиеПозжеРелевантногоПериода(Выборка)
	
	Если ВыполнениеЗадачБухгалтераПовтИспНаВызов.ЭтоЗадачаЗакрытияИП(Выборка.ИдентификаторПравила) Тогда
		// Для задач закрытия ИП событие наступает раньше релевантного периода:
		// Сдать декларацию и оплатить налог НДФЛ, УСН, НДС после снятия ИП с учета нужно в конкретный срок за текущий год
		Результат = Ложь;
	Иначе
		Результат = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
