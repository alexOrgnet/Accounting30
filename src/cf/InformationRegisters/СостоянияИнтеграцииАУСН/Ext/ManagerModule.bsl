#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Переопределяет ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
// 
// Параметры:
//   Ограничение - Структура
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Записывает состояние подключения к сервису
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Банк - СправочникСсылка.КлассификаторБанков
//   СостояниеИнтеграции - ПеречислениеСсылка.СостоянияИнтеграцииАУСН
//   КодЗаявки - Строка
//   
// Возвращаемое значение:
//   Булево - Истина, если состояние изменено успешно
//
Функция ЗаписатьСостояниеИнтеграции(Организация, Банк, СостояниеИнтеграции, КодЗаявки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Банк)
		Или Не ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
			Возврат Ложь;
	КонецЕсли;
	
	УстановитьСостояниеИнтеграции(Организация, Банк, СостояниеИнтеграции, КодЗаявки);
	
	Возврат Истина;
	
КонецФункции

// Возвращает идентификатор приложения
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ИдентификаторБанка - Строка - идентификатор, присвоенный банку сервисом АУСН
// 
// Возвращаемое значение:
//   Строка, Неопределено - идентификатор приложения
//
Функция ИдентификаторПриложения(Организация, ИдентификаторБанка) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ИдентификаторБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияИнтеграцииАУСН.ИдентификаторПриложения КАК ИдентификаторПриложения
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|ГДЕ
		|	БанкиАУСН.Идентификатор = &Идентификатор
		|	И СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
		|	И СостоянияИнтеграцииАУСН.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторБанка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ИдентификаторПриложения;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанкиАУСН.Банк КАК Банк
			|ИЗ
			|	РегистрСведений.БанкиАУСН КАК БанкиАУСН
			|ГДЕ
			|	БанкиАУСН.Идентификатор = &Идентификатор";
	
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторБанка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			ИнициализироватьНовуюЗапись(МенеджерЗаписи, Организация, Выборка.Банк);
			Возврат МенеджерЗаписи.ИдентификаторПриложения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает состояние интеграции с сервисом
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Банк - СправочникСсылка.КлассификаторБанков
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.СостоянияИнтеграцииАУСН, Неопределено - состояние интеграции
//
Функция СостояниеИнтеграции(Организация, Банк) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияИнтеграцииАУСН.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.Организация = &Организация
		|	И СостоянияИнтеграцииАУСН.Банк = &Банк";
	
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Состояние;
		
	КонецЕсли;
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Банк = Банк;
	ИнициализироватьНовуюЗапись(МенеджерЗаписи, Организация, Банк);
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Состояние;	
	
КонецФункции

// Возвращает дату подключения к сервису АУСН, если подключение отсутствует возвращает Неопределено
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ИдентификаторБанка - Строка - идентификатор, присвоенный банку в сервисе АУСН
// 
// Возвращаемое значение:
//   Дата, Неопределено - дата подключения, если состояние подключения "Подключено".
//                        В других случаях возвращает Неопределено
//
Функция ДатаПодключения(Организация, ИдентификаторБанка) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ИдентификаторБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияИнтеграцииАУСН.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|ГДЕ
		|	БанкиАУСН.Идентификатор = &ИдентификаторБанка
		|	И СостоянияИнтеграцииАУСН.Организация = &Организация
		|	И СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения";
	
	Запрос.УстановитьПараметр("ИдентификаторБанка", ИдентификаторБанка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.ДатаИзменения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает состояния интеграции с сервисом для всех банков
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация
//  ТолькоПодключенные - Булево - если Истина, в соответвие будут включаться только банки, для которых включена интеграция
// 
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - СправочникСсылка.КлассификаторБанков
//     * Значение - ПеречислениеСсылка.СостоянияИнтеграцииАУСН
//
Функция ВсеСостоянияИнтеграции(Организация, ТолькоПодключенные = Ложь) Экспорт
	
	СостоянияИнтеграции = Новый Соответствие();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат СостоянияИнтеграции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТолькоПодключенные", ТолькоПодключенные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияИнтеграцииАУСН.Банк,
	|	СостоянияИнтеграцииАУСН.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
	|ГДЕ
	|	СостоянияИнтеграцииАУСН.Организация = &Организация
	|	И (СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
	|	ИЛИ НЕ &ТолькоПодключенные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияИнтеграцииАУСН.Банк.ПометкаУдаления,
	|	СостоянияИнтеграцииАУСН.Банк";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СостоянияИнтеграции.Вставить(Выборка.Банк, Выборка.Состояние);
	КонецЦикла;
	
	Возврат СостоянияИнтеграции;
	
КонецФункции

// Возвращает признак того, что в базе есть хоть одна организация, подключенная к сервису Автоматизированная УСН
//
// Возвращаемое значение:
//  Булево
//
Функция СервисПодключен() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СостоянияИнтеграцииАУСН.Организация
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак того, что банк переданного счета подключен к сервису.
// Если счет не заполнен, то возвращает признак того, что хоть один счет переданной организации подключен к сервису.
// Если все параметры не заполнены, то возвращает признак того, что в базе есть хотя бы одна организация, подключенная
// к сервису
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета
//
// Возвращаемое значение:
//  Булево - признак наличия подключения
//
Функция БанковскийСчетПодключенКСервису(Организация = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	СервисПодключен = Ложь;
	Если Не ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат СервисПодключен();
	ИначеЕсли ЗначениеЗаполнено(БанковскийСчет) Тогда
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк.Код, Владелец");
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = РеквизитыСчета.Владелец;
		ИначеЕсли Организация <> РеквизитыСчета.Владелец Тогда
			// Переданная организация не соответствует банковскому счету
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
			// Переданный банковский счет не является счетом организации
			Возврат Ложь;
		КонецЕсли;
		БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(РеквизитыСчета.БанкКод);
		СостояниеИнтеграции = СостояниеИнтеграции(Организация, БанкПоКлассификатору);
		Возврат СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Подключено;
	Иначе
		СостоянияИнтеграции = ВсеСостоянияИнтеграции(Организация, Истина);
		СервисПодключен = (СостоянияИнтеграции.Количество() > 0);
	КонецЕсли;
	
	Возврат СервисПодключен;
	
КонецФункции

// Возвращает банк, с которым настроена интеграция.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторБанков
//
Функция БанкИнтеграции(Организация) Экспорт
		
	Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Банк;
	КонецЕсли;
	
	СостоянияИнтеграции = ВсеСостоянияИнтеграции(Организация, Истина);
	
	Для Каждого СостояниеИнтеграции Из СостоянияИнтеграции Цикл
		Банк = СостояниеИнтеграции.Ключ;
		Прервать;
	КонецЦикла;
	
	Возврат Банк;
	
КонецФункции

// Возвращает банки, подключенные к сервису АУСН для заданных организации и идентификатора
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ИдентификаторБанка - Строка
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция Банки(Организация, ИдентификаторБанка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|ГДЕ
		|	БанкиАУСН.Идентификатор = &Идентификатор
		|	И СостоянияИнтеграцииАУСН.Организация = &Организация
		|	И СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторБанка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает список банков, подключенных к сервису АУСН
//
// Параметры:
//  Организация - СправочникСсылка.Организации, Неопределено - если параметр заполнен, то будет
//                выполняться отбор по заданной организации
//
// ВозвращаемоеЗначение:
//  Массив
//
Функция ВсеПодключенныеБанки(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.Состояние = Значение(Перечисление.СостоянияИнтеграцииАУСН.Подключено)";
	Схема = СхемыЗапросов.Создать(ТекстЗапроса);
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		ТаблицаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(Схема, "СостоянияИнтеграцииАУСН");
		ТаблицаЗапроса.Оператор.Отбор.Добавить("Организация = &Организация");
	КонецЕсли;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	Банки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Банки.Добавить(Выборка.Банк);
	КонецЦикла;
	
	Возврат Банки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьНовуюЗапись(МенеджерЗаписи, Организация, Банк)
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Заполнить(Новый Структура("Организация, Банк", Организация, Банк));
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УстановитьСостояниеИнтеграции(Организация, Банк, СостояниеИнтеграции, КодЗаявки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанкиАУСН.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВТ_Идентификатор
		|ИЗ
		|	РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|ГДЕ
		|	БанкиАУСН.Банк = &Банк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанкиАУСН.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|ГДЕ
		|	БанкиАУСН.Идентификатор В
		|			(ВЫБРАТЬ
		|				ВТ_Идентификатор.Идентификатор КАК Идентификатор
		|			ИЗ
		|				ВТ_Идентификатор КАК ВТ_Идентификатор)";
	
	Запрос.УстановитьПараметр("Банк", Банк);
	Идентификатор = Строка(Новый УникальныйИдентификатор());
	ДатаИзменения = ТекущаяДатаСеанса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Организация);
		Набор.Отбор.Банк.Установить(Выборка.Банк);
		Набор.Прочитать();
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
			ДанныеЗаполнения = Новый Структура("Организация, Банк", Организация, Выборка.Банк);
			Набор.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		Запись.Состояние = СостояниеИнтеграции;
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторПриложения) Тогда
			Запись.ИдентификаторПриложения = Идентификатор;
		КонецЕсли;
		Если КодЗаявки <> Неопределено Тогда
			Запись.КодЗаявки = КодЗаявки;
		КонецЕсли;
		Запись.ДатаИзменения = ДатаИзменения;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйСведенияОбОбмене()
	
	Сведения = Новый Структура;
	Сведения.Вставить("ДатаОбмена", Дата(1, 1, 1));
	Сведения.Вставить("ЗагруженоБанковскихДокументов", 0);
	Сведения.Вставить("Ошибки", Новый ТаблицаЗначений);
	Сведения.Вставить("ОшибкиОтправки", Новый ТаблицаЗначений);
	Сведения.Вставить("ЕстьОтклоненныеФНС", Ложь);
	Сведения.Вставить("ЕстьДокументыКПовторномуЧтению", Ложь);
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

// Возвращает сведения о последнем обмене с сервисом АУСН
//
// Параметры:
//  Организация - СправочникСсылка.Организации, Неопределено
//  Банк - СправочникСсылка.КлассификаторБанков, Неопределено
//
// Возвращаемое значение:
// Структура - см. НовыйСведенияОбОбмене
//
Функция СведенияОбОбмене(Организация = Неопределено, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	СхемаЗапроса = Новый СхемаЗапроса;
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияИнтеграцииАУСН.ДатаОбмена КАК ДатаОбмена
		|ПОМЕСТИТЬ ВТ_ДатаУспешногоОбмена
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбмена УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ИСТИНА) КАК ЕстьОтклоненныеФНС,
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанкиАУСН.Идентификатор КАК ИдентификаторБанка
		|ПОМЕСТИТЬ ВТ_ОтклоненныеФНС
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|					ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк.Код
		|				ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк.Код
		|			КОНЕЦ = БанкиАУСН.Банк.Код)
		|ГДЕ
		|	БанковскиеДокументыАУСН.СтатусОбменаАУСН = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменаАУСН.Отклонен)
		|
		|СГРУППИРОВАТЬ ПО
		|	БанковскиеДокументыАУСН.Организация,
		|	БанкиАУСН.Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияИнтеграцииАУСН.ЗагруженоБанковскихДокументов КАК ЗагруженоБанковскихДокументов,
		|	СостоянияИнтеграцииАУСН.ДатаОбмена КАК ДатаОбмена,
		|	СостоянияИнтеграцииАУСН.Организация КАК Организация,
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк,
		|	БанкиАУСН.Идентификатор КАК ИдентификаторБанка,
		|	ЕСТЬNULL(ВТ_ОтклоненныеФНС.ЕстьОтклоненныеФНС, ЛОЖЬ) КАК ЕстьОтклоненныеФНС
		|ПОМЕСТИТЬ ВТ_ДанныеОбмена
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтклоненныеФНС КАК ВТ_ОтклоненныеФНС
		|		ПО СостоянияИнтеграцииАУСН.Организация = ВТ_ОтклоненныеФНС.Организация
		|			И (БанкиАУСН.Идентификатор = ВТ_ОтклоненныеФНС.ИдентификаторБанка)
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.ДатаОбмена В
		|			(ВЫБРАТЬ
		|				ВТ_ДатаУспешногоОбмена.ДатаОбмена КАК ДатаОбмена
		|			ИЗ
		|				ВТ_ДатаУспешногоОбмена КАК ВТ_ДатаУспешногоОбмена)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияИнтеграцииАУСН.Организация КАК Организация,
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк,
		|	СостоянияИнтеграцииАУСН.ИдентификаторБанка КАК ИдентификаторБанка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДокументыАУСН.Идентификатор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьДокументыКПовторномуЧтению,
		|	СостоянияИнтеграцииАУСН.ЗагруженоБанковскихДокументов КАК ЗагруженоБанковскихДокументов,
		|	СостоянияИнтеграцииАУСН.ДатаОбмена КАК ДатаОбмена,
		|	МАКСИМУМ(СостоянияИнтеграцииАУСН.ЕстьОтклоненныеФНС) КАК ЕстьОтклоненныеФНС
		|ИЗ
		|	ВТ_ДанныеОбмена КАК СостоянияИнтеграцииАУСН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|		ПО СостоянияИнтеграцииАУСН.Организация = ДокументыАУСН.Организация
		|			И СостоянияИнтеграцииАУСН.ИдентификаторБанка = ДокументыАУСН.ИдентификаторБанка
		|			И (ДокументыАУСН.ПрочитатьПовторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияИнтеграцииАУСН.Организация,
		|	СостоянияИнтеграцииАУСН.Банк,
		|	СостоянияИнтеграцииАУСН.ИдентификаторБанка,
		|	СостоянияИнтеграцииАУСН.ЗагруженоБанковскихДокументов,
		|	СостоянияИнтеграцииАУСН.ДатаОбмена";
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	УсловияОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Банк) Тогда
		УсловияОтбора.Вставить("Банк", Банк);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияОтбора) Тогда
		ПакетыЗапросов = СхемаЗапроса.ПакетЗапросов;
		Для Каждого ПакетЗапроса Из ПакетыЗапросов Цикл
			Оператор = ПакетЗапроса.Операторы[0];
			Если Оператор.Источники.НайтиПоПсевдониму("СостоянияИнтеграцииАУСН") = Неопределено Тогда
				Если ЗначениеЗаполнено(Организация) Тогда
					Оператор.Отбор.Добавить("БанковскиеДокументыАУСН.Организация = &Организация");
				КонецЕсли;
			Иначе
				Для Каждого Условие Из УсловияОтбора Цикл
					ТекстУсловия = СтрШаблон("СостоянияИнтеграцииАУСН.%1 = &%1", Условие.Ключ);
					Оператор.Отбор.Добавить(ТекстУсловия);
					Запрос.УстановитьПараметр(Условие.Ключ, Условие.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработанныеДанные = Новый ТаблицаЗначений;
	ОбработанныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОбработанныеДанные.Колонки.Добавить("Идентификатор", ОбщегоНазначенияБПКлиентСервер.ОписаниеТипаИдентификатор());
	
	Сведения = НовыйСведенияОбОбмене();
	
	Пока Выборка.Следующий() Цикл
		
		Сведения.ЕстьОтклоненныеФНС = Выборка.ЕстьОтклоненныеФНС;
		
		ПоляПоиска = Новый Структура;
		ПоляПоиска.Вставить("Организация", Выборка.Организация);
		ПоляПоиска.Вставить("Идентификатор", Выборка.ИдентификаторБанка);
		НайденныеДанные = ОбработанныеДанные.НайтиСтроки(ПоляПоиска);
		Если ЗначениеЗаполнено(НайденныеДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		Сведения.ДатаОбмена = Выборка.ДатаОбмена;
		Сведения.ЕстьДокументыКПовторномуЧтению =
			Сведения.ЕстьДокументыКПовторномуЧтению Или Выборка.ЕстьДокументыКПовторномуЧтению;
		Сведения.ЗагруженоБанковскихДокументов = Сведения.ЗагруженоБанковскихДокументов
			+ Выборка.ЗагруженоБанковскихДокументов;
		НаборЗаписей = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Банк.Установить(Выборка.Банк);
		НаборЗаписей.Прочитать();
		Если ЗначениеЗаполнено(НаборЗаписей) Тогда
			Ошибки = НаборЗаписей[0].Ошибки.Получить();
			ОшибкиОтправки = НаборЗаписей[0].ОшибкиОтправки.Получить();
			Если Не ЗначениеЗаполнено(Сведения.Ошибки) И Ошибки <> Неопределено Тогда
				Сведения.Ошибки = Ошибки;
			ИначеЕсли ТипЗнч(Ошибки) = Тип("ТаблицаЗначений") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Ошибки, Сведения.Ошибки);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Сведения.ОшибкиОтправки) И ОшибкиОтправки <> Неопределено Тогда
				Сведения.ОшибкиОтправки = ОшибкиОтправки;
			ИначеЕсли ТипЗнч(ОшибкиОтправки) = Тип("ТаблицаЗначений") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОшибкиОтправки, Сведения.ОшибкиОтправки);
			КонецЕсли;
		КонецЕсли;
		СтрокаОбработанныеДанные = ОбработанныеДанные.Добавить();
		СтрокаОбработанныеДанные.Организация = Выборка.Организация;
		СтрокаОбработанныеДанные.Идентификатор = Выборка.ИдентификаторБанка;
	КонецЦикла;
	
	Возврат Сведения;
	
КонецФункции

Процедура ПодключитьФилиалы() Экспорт
	
	Если Не ИнтеграцияАУСНВызовСервераПовтИсп.СервисПодключен() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияИнтеграцииАУСН.Организация КАК Организация,
		|	БанкиАУСН.Идентификатор КАК ИдентификаторБанка,
		|	МАКСИМУМ(СостоянияИнтеграцииАУСН.ИдентификаторПриложения) КАК ИдентификаторПриложения,
		|	СостоянияИнтеграцииАУСН.ДатаИзменения КАК ДатаИзменения,
		|	БанкиАУСН.Банк КАК Банк,
		|	МАКСИМУМ(СостоянияИнтеграцииАУСН.КодЗаявки) КАК КодЗаявки
		|ПОМЕСТИТЬ ВТ_ПодключенныеБанки
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияИнтеграцииАУСН.Организация,
		|	БанкиАУСН.Идентификатор,
		|	СостоянияИнтеграцииАУСН.ДатаИзменения,
		|	БанкиАУСН.Банк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанкиАУСН.Банк КАК Банк,
		|	МАКСИМУМ(ВТ_ПодключенныеБанки.ИдентификаторПриложения) КАК ИдентификаторПриложения,
		|	МИНИМУМ(ВТ_ПодключенныеБанки.ДатаИзменения) КАК ДатаИзменения,
		|	ВТ_ПодключенныеБанки.Организация КАК Организация,
		|	МАКСИМУМ(ВТ_ПодключенныеБанки.КодЗаявки) КАК КодЗаявки
		|ИЗ
		|	ВТ_ПодключенныеБанки КАК ВТ_ПодключенныеБанки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО ВТ_ПодключенныеБанки.ИдентификаторБанка = БанкиАУСН.Идентификатор
		|ГДЕ
		|	НЕ БанкиАУСН.Банк В
		|				(ВЫБРАТЬ
		|					ВТ_ПодключенныеБанки.Банк КАК Банк
		|				ИЗ
		|					ВТ_ПодключенныеБанки КАК ВТ_ПодключенныеБанки)
		|
		|СГРУППИРОВАТЬ ПО
		|	БанкиАУСН.Банк,
		|	ВТ_ПодключенныеБанки.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СостояниеПодключено = Перечисления.СостоянияИнтеграцииАУСН.Подключено;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Банк.Установить(Выборка.Банк);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Состояние = СостояниеПодключено;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли