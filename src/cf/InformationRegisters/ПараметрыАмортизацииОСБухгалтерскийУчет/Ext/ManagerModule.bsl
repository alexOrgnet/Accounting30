#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет данные регистра на указанную дату.
// В отличие от метода СрезПоследних менеджера регистра, работает с отбором по списку объектов.
//
// Параметры:
//  Период           - Дата, МоментВремени - период, на начало которого выполняется расчет
//  Организация      - СправочникСсылка.Организация
//  ОсновныеСредства - Массив из СправочникСсылка.ОсновныеСредства - отбор, перечень объектов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные регистра.
//     Колонки:
//      * ОсновноеСредство - СправочникСсылка.ОсновныеСредства
//      + все ресурсы регистра
//
Функция АктуальныеСведения(Период, Организация, ОсновныеСредства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           Новый Граница(Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеРегистра.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ДанныеРегистра.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ДанныеРегистра.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ДанныеРегистра.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ДанныеРегистра.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ДанныеРегистра.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ДанныеРегистра.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ДанныеРегистра.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ДанныеРегистра.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновныеСредства)) КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство";
	
	Сведения = Запрос.Выполнить().Выгрузить();
	Сведения.Индексы.Добавить("ОсновноеСредство");
	
	Возврат Сведения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура - обработчик обновления
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьСпособНачисленияАмортизации(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.Период КАК Период,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.Регистратор КАК Регистратор,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.Организация КАК Организация,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|ГДЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ВТ_ПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ВТ_ПараметрыАмортизации.Организация КАК Организация,
	|	ВТ_ПараметрыАмортизации.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_ПараметрыАмортизации КАК ВТ_ПараметрыАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ВТ_ПараметрыАмортизации.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ВТ_ПараметрыАмортизации.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ВТ_ПараметрыАмортизации.Период >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|ГДЕ
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|ИТОГИ ПО
	|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет");
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Регистратор.Организация);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			ВыборкаПоОС = Выборка.Выбрать();
			СоответствиеСпособаНачисленияАмортизации = Новый Соответствие;
			Пока ВыборкаПоОС.Следующий() Цикл
				СоответствиеСпособаНачисленияАмортизации.Вставить(ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
			КонецЦикла;
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(СтрокаНабора.СпособНачисленияАмортизации) Тогда
					// Эту запись обработали ранее.
					Продолжить;
				КонецЕсли;
				СтрокаНабора.СпособНачисленияАмортизации = СоответствиеСпособаНачисленияАмортизации[СтрокаНабора.ОсновноеСредство];
			КонецЦикла;
			
			// Запись обработанного объекта
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
				
			// Если не удалось обработать какую-либо запись, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ПараметрыАмортизацииОСБухгалтерскийУчет.ЗаполнитьСпособНачисленияАмортизации() не удалось обработать запись по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет, ВыборкаПоОС.Регистратор, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли