#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор параметров проверки стоп-факторов по группам контрагентов.
// 
// Возвращаемое значение:
//   Структура - новые параметры проверки стоп-факторов по группам контрагентов:
//     * Организация - СправочникСсылка.Организации - Организация, по которой проверяем,
//     * Банк        - СправочникСсылка.БанкиУниверсальногоОбмена - Организация, для которого проверяем,
//     * ДатаЗаявки  - Дата - дата проверки,
//     * Кэш         - Соответствие - служебный кэш для проверки в других продуктах,
//     * ГруппаКонтрагентов - Строка - идентификатор группы контрагентов из банковского продукта,
//     * КоличествоМесяцевПоГруппеКонтрагентов - Число - количество месяцев проверки, 
//     * МинСреднемесячноеПоГруппеКонтрагентов - Число - минимальное среднемесячное поступление по группе контрагентов,
//     * МинЕжемесячноеПоГруппеКонтрагентов    - Число - минимальное ежемесячное поступление по группе контрагентов.
//
Функция НовыеПараметрыПроверки() Экспорт
	
	ПараметрыПроверкиПоГруппамКонтрагентов = Новый Структура;
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); 
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("Банк", Справочники.БанкиУниверсальногоОбмена.ПустаяСсылка()); 
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("ДатаЗаявки", Дата(1, 1, 1)); 
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("Кэш", Новый Соответствие); 
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("ГруппаКонтрагентов", "");
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("КоличествоМесяцевПоГруппеКонтрагентов", 0);
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("МинСреднемесячноеПоГруппеКонтрагентов", 0);
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("МинЕжемесячноеПоГруппеКонтрагентов", 0);
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("ГруппаПоставщиков", "");
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("КоличествоМесяцевПоГруппеПоставщиков", 0);
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("МинСреднемесячноеПоГруппеПоставщиков", 0);
	ПараметрыПроверкиПоГруппамКонтрагентов.Вставить("МинЕжемесячноеПоГруппеПоставщиков", 0);

	Возврат ПараметрыПроверкиПоГруппамКонтрагентов;

КонецФункции

// Возвращает факт присутствия или отсутствия стоп-фактора по группе контрагентов - покупателей или поставщиков.
// 
// Параметры:
//   ПараметрыПроверки - структура - см. РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.НовыеПараметрыПроверки().   
//   ПоПоставщикам - Булево.
// 
// Возвращаемое значение:
//   Булево - Истина - стоп-фактор присутствует, иначе Ложь.
//
Функция ЕстьСтопФактор(ПараметрыПроверки, ПоПоставщикам = Ложь) Экспорт
	
	Если ПоПоставщикам Тогда 
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверки.ГруппаПоставщиков)
			Или Не (ЗначениеЗаполнено(ПараметрыПроверки.МинСреднемесячноеПоГруппеПоставщиков)
				Или ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеПоставщиков)) Тогда
			Возврат Ложь;
		КонецЕсли; 
	    Группа = СокрЛП(ПараметрыПроверки.ГруппаПоставщиков);

	Иначе
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверки.ГруппаКонтрагентов)
			Или Не (ЗначениеЗаполнено(ПараметрыПроверки.МинСреднемесячноеПоГруппеКонтрагентов)
				Или ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеКонтрагентов)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		Группа = СокрЛП(ПараметрыПроверки.ГруппаКонтрагентов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Банк", ПараметрыПроверки.Банк);
	Запрос.УстановитьПараметр("ГруппаКонтрагентов", Группа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыКонтрагентовЗаявкиВБанки.Банк КАК Банк
	|ИЗ
	|	РегистрСведений.ГруппыКонтрагентовЗаявкиВБанки КАК ГруппыКонтрагентовЗаявкиВБанки
	|ГДЕ
	|	ГруппыКонтрагентовЗаявкиВБанки.ГруппаКонтрагентов = &ГруппаКонтрагентов
	|	И ГруппыКонтрагентовЗаявкиВБанки.Банк = &Банк";
	
	ЕстьУсловиеПоБанку = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьУсловиеПоБанку;
	
КонецФункции

// Возвращает результат проверки стоп-фактора по группе контрагентов - покупателей или поставщиков.
// 
// Параметры:
//   ПараметрыПроверки - структура - см. РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.НовыеПараметрыПроверки().
// 
// Возвращаемое значение:
//   Булево - Истина - стоп-фактор пройден, иначе Ложь.
//
Функция СтопФакторПройден(ПараметрыПроверки, ПоПоставщикам = Ложь) Экспорт

	Кэш = ПараметрыПроверки.Кэш;
	
	Если ПоПоставщикам Тогда     
		
		Если Кэш[ПараметрыПроверки.ГруппаПоставщиков] = Неопределено Тогда
			
			ЗаполнитьКэш(ПараметрыПроверки, Истина);
			
		КонецЕсли;
		
		СреднееСписаниеЗаМесяц = ?(ЗначениеЗаполнено(ПараметрыПроверки.МинСреднемесячноеПоГруппеПоставщиков),
			ПараметрыПроверки.МинСреднемесячноеПоГруппеПоставщиков, 0);
		МинСписаниеЗаМесяц = ?(ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеПоставщиков),
			ПараметрыПроверки.МинЕжемесячноеПоГруппеПоставщиков, 0);
		
		Результат = Кэш[ПараметрыПроверки.ГруппаПоставщиков].СреднееСписаниеЗаМесяц >= СреднееСписаниеЗаМесяц
			И Кэш[ПараметрыПроверки.ГруппаПоставщиков].МинСписаниеЗаМесяц >= МинСписаниеЗаМесяц;
	
	Иначе 
		
		Если Кэш[ПараметрыПроверки.ГруппаКонтрагентов] = Неопределено Тогда
			
			ЗаполнитьКэш(ПараметрыПроверки);
			
		КонецЕсли;
		
		СреднееПоступлениеЗаМесяц = ?(ЗначениеЗаполнено(ПараметрыПроверки.МинСреднемесячноеПоГруппеКонтрагентов),
			ПараметрыПроверки.МинСреднемесячноеПоГруппеКонтрагентов, 0);
		МинПоступлениеЗаМесяц = ?(ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеКонтрагентов),
			ПараметрыПроверки.МинЕжемесячноеПоГруппеКонтрагентов, 0);
		
		Результат = Кэш[ПараметрыПроверки.ГруппаКонтрагентов].СреднееПоступлениеЗаМесяц >= СреднееПоступлениеЗаМесяц
			И Кэш[ПараметрыПроверки.ГруппаКонтрагентов].МинПоступлениеЗаМесяц >= МинПоступлениеЗаМесяц;  
			
	КонецЕсли;   
		
	Возврат Результат;

КонецФункции 

Процедура ЗаписатьГруппыКонтрагентов(СервисХарактеристики, ОбъектXDTOХарактеристики, Банк) Экспорт 
	
	Если ОбъектXDTOХарактеристики = Неопределено 
		ИЛИ ОбъектXDTOХарактеристики.Свойства().Получить("ГруппыКонтрагентов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаИНН Из ОбъектXDTOХарактеристики.ГруппыКонтрагентов Цикл
		ГруппаКонтрагентов = СокрЛП(СтрокаИНН.Идентификатор);
		DataJSON = СтрокаИНН.DATA;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(DataJSON);
		
		Попытка
			Данные = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
				СервисХарактеристики,
				НСтр("ru = 'Чтение группы контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(Данные) <> Тип("Массив") Или Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Банк.Установить(Банк);
		НаборЗаписей.Отбор.ГруппаКонтрагентов.Установить(ГруппаКонтрагентов);
		
		Для Каждого Характеристика Из Данные Цикл
			Если ТипЗнч(Характеристика) <> Тип("Структура")
				Или Не Характеристика.Свойство("ИНН") Или ПустаяСтрока(Характеристика.ИНН) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Банк = Банк;
			ЗаписьНабора.ГруппаКонтрагентов = ГруппаКонтрагентов;
			ЗаписьНабора.ИНН = СокрЛП(Характеристика.ИНН);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
				СервисХарактеристики,
				НСтр("ru = 'Запись группы контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьКонтрагентыИзСтопФактора(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты";
	
	ЕстьКонтрагенты = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьКонтрагенты;
	
КонецФункции

Процедура ЗаполнитьКэш(ПараметрыПроверки, ПоПоставщикам = Ложь) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Банк", ПараметрыПроверки.Банк);   
	Группа = ?(ПоПоставщикам, ПараметрыПроверки.ГруппаПоставщиков, ПараметрыПроверки.ГруппаКонтрагентов);
	НовыйКэшСтопФактор = ?(ПоПоставщикам, НовыйКэшСтопФакторГруппыПоставщиков(), НовыйКэшСтопФакторГруппыКонтрагентов());
	Запрос.УстановитьПараметр("ГруппаКонтрагентов", СокрЛП(Группа));
	
	Кэш = ПараметрыПроверки.Кэш;
	ПараметрыПроверки.Кэш.Вставить(Группа, НовыйКэшСтопФактор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыКонтрагентовЗаявкиВБанки КАК ГруппыКонтрагентовЗаявкиВБанки
	|		ПО Контрагенты.ИНН = ГруппыКонтрагентовЗаявкиВБанки.ИНН
	|ГДЕ
	|	ГруппыКонтрагентовЗаявкиВБанки.Банк = &Банк
	|	И ГруппыКонтрагентовЗаявкиВБанки.ГруппаКонтрагентов = &ГруппаКонтрагентов
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос.Выполнить();
	Если Не ЕстьКонтрагентыИзСтопФактора(Запрос) Тогда
		// В справочнике Контрагенты нет ни одного контрагента из стоп-фактора банка по оборотам группы контрагентов.
		Возврат;
	КонецЕсли;
	
	КоличествоМесяцев = ?(ПоПоставщикам, ПараметрыПроверки.КоличествоМесяцевПоГруппеПоставщиков,
		ПараметрыПроверки.КоличествоМесяцевПоГруппеКонтрагентов);
	
	НачалоПериода = НачалоМесяца(ДобавитьМесяц(ПараметрыПроверки.ДатаЗаявки, -КоличествоМесяцев));
	КонецПериода = КонецМесяца(ДобавитьМесяц(ПараметрыПроверки.ДатаЗаявки, -1));
	
	СубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты; 
	
	СчетБанка = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	СчетаБанка = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетБанка);
		
	СчетаГруппыКонтрагенты = Новый Массив;
    СчетаГруппыКонтрагенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); 

	Если ПоПоставщикам Тогда 
		СчетаГруппыКонтрагенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Иначе   
		СчетаГруппыКонтрагенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);		
	КонецЕсли;
	
	Отбор = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();    
	
	СчетаКонтрагенты = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаГруппыКонтрагенты, Отбор);
	
	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыПроверки.Организация);
	
	Запрос.УстановитьПараметр("Организации",      Организации);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецПериода);
	Запрос.УстановитьПараметр("СчетаБанка",       СчетаБанка);
	Запрос.УстановитьПараметр("Контрагенты",      СубконтоКонтрагенты);
	Запрос.УстановитьПараметр("СчетаКонтрагенты", СчетаКонтрагенты);
	
	Запрос.Текст = ТекстЗапросаПоОборотам(ПоПоставщикам);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда 
		
		Если ПоПоставщикам Тогда   
			
			Если ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеПоставщиков)
				И Выборка.КолПериодов = КоличествоМесяцев Тогда
				ЗаполнитьЗначенияСвойств(Кэш[ПараметрыПроверки.ГруппаПоставщиков], Выборка, "МинСписаниеЗаМесяц");
			КонецЕсли;
			
			Кэш[ПараметрыПроверки.ГруппаПоставщиков].СреднееСписаниеЗаМесяц =
				Окр(Выборка.СписанияСоСчета / КоличествоМесяцев, 0); // в руб.    

		Иначе
			Если ЗначениеЗаполнено(ПараметрыПроверки.МинЕжемесячноеПоГруппеКонтрагентов)
				И Выборка.КолПериодов = КоличествоМесяцев Тогда
				ЗаполнитьЗначенияСвойств(Кэш[ПараметрыПроверки.ГруппаКонтрагентов], Выборка, "МинПоступлениеЗаМесяц");
			КонецЕсли;
			
			Кэш[ПараметрыПроверки.ГруппаКонтрагентов].СреднееПоступлениеЗаМесяц =
				Окр(Выборка.ПоступленияНаСчет / КоличествоМесяцев, 0); // в руб.    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаПоОборотам(ПоПоставщикам)      
	
	Если ПоПоставщикам Тогда    
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК СписанияСоСчета,
			|	ЕСТЬNULL(МИНИМУМ(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК МинСписаниеЗаМесяц,
			|	КОЛИЧЕСТВО(ХозрасчетныйОборотыДтКт.Период) КАК КолПериодов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Месяц,
			|			СчетДт В (&СчетаКонтрагенты),
			|			&Контрагенты, 
			|			СчетКт В (&СчетаБанка),
			|			,
			|			Организация В (&Организации)
			|				И СубконтоДт1 В
			|					(ВЫБРАТЬ
			|						ВТ_Контрагенты.Ссылка
			|					ИЗ
			|						ВТ_Контрагенты)) КАК ХозрасчетныйОборотыДтКт";     
		
	Иначе  
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК ПоступленияНаСчет,
			|	ЕСТЬNULL(МИНИМУМ(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК МинПоступлениеЗаМесяц,
			|	КОЛИЧЕСТВО(ХозрасчетныйОборотыДтКт.Период) КАК КолПериодов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Месяц,
			|			СчетДт В (&СчетаБанка),
			|			,
			|			СчетКт В (&СчетаКонтрагенты),
			|			&Контрагенты,
			|			Организация В (&Организации)
			|				И СубконтоКт1 В
			|					(ВЫБРАТЬ
			|						ВТ_Контрагенты.Ссылка
			|					ИЗ
			|						ВТ_Контрагенты)) КАК ХозрасчетныйОборотыДтКт";  
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НовыйКэшСтопФакторГруппыКонтрагентов()
	
	Кэш = Новый Структура;
	Кэш.Вставить("СреднееПоступлениеЗаМесяц", 0);
	Кэш.Вставить("МинПоступлениеЗаМесяц", 0);
	
	Возврат Кэш;
	
КонецФункции      

Функция НовыйКэшСтопФакторГруппыПоставщиков()
	
	Кэш = Новый Структура;
	Кэш.Вставить("СреднееСписаниеЗаМесяц", 0);
	Кэш.Вставить("МинСписаниеЗаМесяц", 0);
	
	Возврат Кэш;
	
КонецФункции

#КонецОбласти

#КонецЕсли
