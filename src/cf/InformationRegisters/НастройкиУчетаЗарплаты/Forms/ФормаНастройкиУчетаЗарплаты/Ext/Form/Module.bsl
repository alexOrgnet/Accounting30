#Область ПеременныеФормы

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	
	НадписьНачисляетсяРКиСН  = НСтр("ru = 'В организации или ее подразделениях начисляется:'");
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	
	ЭтоЮрЛицо                             = ЭтоЮрЛицо(Запись.Организация);
	ЭтоОбособленноеПодразделение          = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Запись.Организация);
	ГоловнаяОрганизация                   = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Запись.Организация);
	РасчетЗарплатыДляНебольшихОрганизаций = УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций();
	РазмерАвансаВПроцентахПоУмолчанию     = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Запись.Организация);
	ИспользоватьРезервыПоОплатеТруда      = ПолучитьФункциональнуюОпцию("ИспользоватьРезервыПоОплатеТруда");
	
	Элементы.ОбменДанными.Видимость  = НЕ УчетЗарплатыИКадровСредствамиБухгалтерии;
	
	Элементы.РезервыПоОплатеТруда.Видимость      = ЭтоЮрЛицо И ИспользоватьРезервыПоОплатеТруда;
	Элементы.УчетРезервовПоОплатеТруда.Видимость = ЭтоЮрЛицо И ИспользоватьРезервыПоОплатеТруда;
	
	Элементы.ПараметрыРезерваОтпусковПравая.Видимость      = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ПараметрыРезерваОтпусковЛевая.Видимость       = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.РезервОтпусковПродолжительность.Видимость     = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ГруппаНормативРезервОтпуск.Видимость          = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ГруппаПредельнаяСуммаРазмерНУОтпуск.Видимость = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ГруппаНормативРезервПремия.Видимость          = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ГруппаПредельнаяСуммаРазмерНУПремия.Видимость = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.РазмерЕжегоднойПремииПроцент.Видимость        = РасчетЗарплатыДляНебольшихОрганизаций;
	
	НастройкиРасчетаРезервовПериод = Период;
	
	ПрочитатьНастройки();
	
	Если НЕ УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
				
		Элементы.ГруппаНастройка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаНастройка.ТекущаяСтраница    = Элементы.ОбменДанными;
		
		Элементы.ИсторияЗарплата.Видимость        = Ложь;
		
	КонецЕсли;	
		
	Элементы.ГиперссылкаДополнительноТерриториальныеУсловия.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
		ИЛИ БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций();
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "БухучетЗарплатыОрганизацийПериодСтрока", Формат(БухучетЗарплатыОрганизацийПериод, "ДФ='MMMM yyyy'"));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "ТерриториальныеУсловияПФРПериодСтрока", Формат(ТерриториальныеУсловияПФРПериод, "ДФ='MMMM yyyy'"));
	
	НастройкиРасчетаРезервовПериодЧисло = Год(НастройкиРасчетаРезервовПериод);
	
	ЗаполнитьСписокВыбораДатыВступленияВПилотныйПроект(
		Элементы.НастройкиУчетаПособийСоциальногоСтрахованияДатаПередачиФССВыплатыПособий.СписокВыбора);
		
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Функциональные опции, влияющие на список КБК
	ПараметрыЗаписи.Вставить("ИзмененныеОпцииПодсистемы", РасчетыСБюджетом.ИзмененныеОпцииПодсистемыУчетаЗарплатыИКадров());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ТолькоПросмотр Тогда
		Отказ = Ложь;
		ЗаписатьПараметры(Отказ);
		Если Отказ Тогда
			Возврат;
		Иначе
			Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
				ТекущийОбъект.ИспользоватьФорматОбменаЗУП25 = Ложь;		
			Иначе
				ТекущийОбъект.СписаниеДепонированныхСумм = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИзмененныеОпцииПодсистемы = РасчетыСБюджетом.ИзмененныеОпцииПодсистемыУчетаЗарплатыИКадров(ПараметрыЗаписи.ИзмененныеОпцииПодсистемы);
	ЕстьИзменения = Ложь;
	Для каждого ОпцияПодсистемы Из ИзмененныеОпцииПодсистемы Цикл
		Если ОпцияПодсистемы.Значение Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьИзменения Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИспользоватьРезервыПоОплатеТруда
	   И (ФормироватьРезервОтпусков Или ФормироватьРезервОтпусковНУ) Тогда
	    // Очистку регистра ПроверенныеДокументы должны сделать в любом случае. Она продолжится, даже если форма закроется.
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, ПараметрыЗаписи);
		ПроведениеКлиент.НачатьОчисткуРегистраПроверенныхДокументов(ОповещениеОЗавершении, Период, Запись.Организация);
			
	Иначе
		
		ПослеЗаписиЗавершение(Неопределено, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РайонныйКоэффициентПриИзменении(Элемент)
		
	Если РайонныйКоэффициент < 1 Тогда
		РайонныйКоэффициент	= 1;
	ИначеЕсли РайонныйКоэффициент > 3 Тогда
		РайонныйКоэффициент	= 3;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФПриИзменении(Элемент)
		
	Если РайонныйКоэффициентРФ < 1 Тогда
		РайонныйКоэффициентРФ	= 1;
	ИначеЕсли РайонныйКоэффициентРФ > 3 Тогда
		РайонныйКоэффициентРФ	= 3;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКадрыНастройкиОрганизацийПрименятьРайонныйКоэффициентПриИзменении(Элемент)
	
	Если НЕ ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент Тогда
		РайонныйКоэффициент   = 1;
		РайонныйКоэффициентРФ = 1;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСтрокаПриИзменении(Элемент)
	
	РеквизитПериод = Лев(Элемент.Имя, СтрНайти(Элемент.Имя, "Период") + 5);
	ЭтотОбъект[РеквизитПериод + "Строка"]= БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ЭтотОбъект[РеквизитПериод]),
		КонецМесяца(ЭтотОбъект[РеквизитПериод]),
		Истина);
	ПрочитатьНастройки(РеквизитПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РеквизитПериод = Лев(Элемент.Имя, СтрНайти(Элемент.Имя, "Период") + 5);
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода",
		НачалоМесяца(ЭтотОбъект[РеквизитПериод]), КонецМесяца(ЭтотОбъект[РеквизитПериод]));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы[Элемент.Имя], , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыПереключательПриИзменении(Элемент)
	
	ЗарплатаКадрыНастройкиОрганизаций.ВыплачиватьЗарплатуВПоследнийДеньМесяца = Не ВыплатаЗарплатыПереключатель;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыПереключатель1ПриИзменении(Элемент)
	
	ЗарплатаКадрыНастройкиОрганизаций.ВыплачиватьЗарплатуВПоследнийДеньМесяца = Не ВыплатаЗарплатыПереключатель;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаРезервовПериодЧислоПриИзменении(Элемент)
	
	НастройкиРасчетаРезервовПериодЧислоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗарплатаНажатие(Элемент)
	
	ИсторияНажатие("БухучетЗарплатыОрганизаций");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияТерриториальныеУсловияПФРНажатие(Элемент)
	
	ИсторияНажатие("ТерриториальныеУсловияПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРезервыОтпусковНажатие(Элемент)
	
	Если РезервыОтпусковАрхивные Тогда
		ИсторияНажатие("НастройкиРасчетаРезервовОтпусков");
	Иначе
		ИсторияНастройкиРезервовНажатие("Отпуск");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРезервыПремийНажатие(Элемент)
	
	ИсторияНастройкиРезервовНажатие("ГодоваяПремия");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасчетнаяБазаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастройки", АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или ЭтоОбособленноеПодразделение);
	
	Оповещение = Новый ОписаниеОповещения("РасчетнаяБазаЗавершениеРедактирования", ЭтотОбъект);
	ОткрытьФорму("Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Форма.ФормаНастройкаРасчетнойБазы",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДополнительноТерриториальныеУсловияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Вид",                          "Подразделения");
	ПараметрыФормы.Вставить("Организация",                  Организация);
	ПараметрыФормы.Вставить("ПрименятьРайонныйКоэффициент", ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент);
	ПараметрыФормы.Вставить("ПрименятьСевернуюНадбавку",    ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку);
	ПараметрыФормы.Вставить("Период",                       ТерриториальныеУсловияПФРПериод);
	ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервОтпусковПриИзменении(Элемент)
	
	КонтрольПараметровНачисленияРезерваОтпусков();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаРезервовПоОплатеТруда_ОтпускФормироватьРезервНУПриИзменении(Элемент)
	
	КонтрольПараметровНачисленияРезерваОтпусков();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервОтпусковОбменДаннымиПриИзменении(Элемент)
	
	Если НЕ ФормироватьРезервОтпусков Тогда
		ФормироватьРезервОтпусковНУ = Ложь;
	КонецЕсли;
	КонтрольПараметровНачисленияРезерваОтпусков();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервОтпусковОтпусковОбменДаннымиНУПриИзменении(Элемент)
	
	Если ФормироватьРезервОтпусковНУ Тогда
		ФормироватьРезервОтпусков = Истина;
	КонецЕсли;
	КонтрольПараметровНачисленияРезерваОтпусков();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервыПремийПриИзменении(Элемент)
	
	КонтрольПараметровНачисленияРезерваПремий();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаРезервовПоОплатеТруда_ПремияФормироватьРезервНУПриИзменении(Элемент)
	
	КонтрольПараметровНачисленияРезерваПремий();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКадрыНастройкиОрганизацийПрименятьСевернуюНадбавкуПриИзменении(Элемент)
	ЗарплатаКадрыНастройкиОрганизацийПрименятьСевернуюНадбавкуПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетаАвансаПриИзменении(Элемент)
	
	Запись.ИндивидуальныйАванс = ПорядокРасчетаАванса;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Запись.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Запись.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Запись.Аванс = 0;
	КонецЕсли;
	
	УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоказРазмераАванса(Форма);
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма, "Запись.СпособРасчетаАванса", "АвансРазмерГруппа", "АвансРазмерность");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаПособийСоциальногоСтрахованияДатаПередачиФССВыплатыПособийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботыОрганизацииСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияГрафикРаботыЗакрытие = Новый ОписаниеОповещения("ГрафикРаботыЗакрытие", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Ключ,ПростаяНастройка", ГрафикРаботыОрганизации, Истина);
	ОткрытьФорму("Справочник.Календари.Форма.ФормаЭлементаПростая",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещенияГрафикРаботыЗакрытие);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияНастройкиУчетаЗарплаты());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаНалоговИОтчетов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормы, , Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПрямыхВыплатОрганизации(Команда)
	
	УчетПособийСоциальногоСтрахованияКлиент.ОткрытьНастройкиПрямыхВыплатОрганизации(
		Организация,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаРезервовПоОплатеТруда(Команда)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Организация",   Запись.Организация);
	ОткрытьФорму("Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Форма.ФормаСписка",
		Новый Структура("Отбор", ПараметрыОтбора),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"БухучетЗарплатыОрганизацийПериод", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не выбрана организация>'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Форма.Элементы.РайонныйКоэффициент.Доступность   = Форма.ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент;
		Форма.Элементы.РайонныйКоэффициентРФ.Доступность = Форма.ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент;
		
		Если Форма.ЭтоЮрЛицо 
			И Форма.РасчетЗарплатыДляНебольшихОрганизаций Тогда 
			Форма.Элементы.ГруппаРезервыОтпусков.Доступность = НЕ Форма.ЭтоОбособленноеПодразделение;
			Форма.Элементы.ГруппаРезервыПремий.Доступность   = НЕ Форма.ЭтоОбособленноеПодразделение;
			
			Форма.Элементы.РезервОтпусковПродолжительность.Доступность
				= Форма.ФормироватьРезервОтпусков;
			Форма.Элементы.НастройкиРасчетаРезервовОтпусковНормативОтчисленийВРезервОтпусков.Доступность
				= Форма.ФормироватьРезервОтпусков;
			Форма.Элементы.НастройкиРасчетаРезервовОтпусковПредельнаяВеличинаОтчисленийВРезервОтпусков.Доступность
				= Форма.ФормироватьРезервОтпусков;
			Форма.Элементы.ГруппаНормативРезервОтпуск.Доступность
				= Форма.ФормироватьРезервОтпусков;
			Форма.Элементы.НастройкиРасчетаРезервовПоОплатеТруда_ОтпускФормироватьРезервНУ.Доступность
				= Форма.ФормироватьРезервОтпусков;
			Форма.Элементы.ГруппаПредельнаяСуммаРазмерНУОтпуск.Доступность
				= Форма.ФормироватьРезервОтпусков И Форма.НастройкиРасчетаРезервовПоОплатеТруда_Отпуск.ФормироватьРезервНУ;
			Форма.Элементы.РазмерЕжегоднойПремииПроцент.Доступность
				= Форма.ФормироватьРезервыПремий;
			Форма.Элементы.НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремияФормироватьРезервНУ.Доступность
				= Форма.ФормироватьРезервыПремий;
			Форма.Элементы.ГруппаНормативРезервПремия.Доступность
				= Форма.ФормироватьРезервыПремий;
			Форма.Элементы.ГруппаПредельнаяСуммаРазмерНУПремия.Доступность
				= Форма.ФормироватьРезервыПремий И Форма.НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ФормироватьРезервНУ;
				
			Форма.Элементы.ГруппаПредельнаяСуммаРазмерНУОтпуск.Видимость = Форма.ПлательщикНалогаНаПрибыль;
			Форма.Элементы.ГруппаПредельнаяСуммаРазмерНУПремия.Видимость = Форма.ПлательщикНалогаНаПрибыль;
		КонецЕсли;
		Форма.Элементы.РезервОтпусковОтражениеВУчете.Доступность = Форма.ФормироватьРезервОтпусков;
		Форма.Элементы.ГруппаРезервОтпусковАрхивная.Видимость    = Форма.РезервыОтпусковАрхивные;
		Форма.Элементы.ГруппаРезервОтпусковНовая.Видимость       = Не Форма.РезервыОтпусковАрхивные;
		
		Форма.Элементы.СпособРасчетаАванса.Доступность = НЕ Форма.Запись.ИндивидуальныйАванс;
		Форма.Элементы.АвансРазмерГруппа.Доступность   = НЕ Форма.Запись.ИндивидуальныйАванс;
		
		Форма.Элементы.ИспользоватьРасчетПервойПоловиныМесяца.ТолькоПросмотр = Форма.Запись.ИспользоватьРасчетПервойПоловиныМесяца
			И Форма.ИспользоватьРасчетПервойПоловиныМесяца;
			
		Форма.Элементы.ИспользоватьРасчетПервойПоловиныМесяца.Видимость = Форма.НастраиватьРасчетПервойПоловиныМесяца;
		
		Форма.Элементы.ВыплатаЗарплатыДатаВыплатыПодпись.Доступность = Форма.ВыплатаЗарплатыПереключатель = 1;
		
	Иначе
		Форма.Элементы.ПараметрыРезерваОтпусковОбменДанными.Видимость   = Форма.РезервыОтпусковАрхивные;
		Форма.Элементы.ПараметрыРезерваОтпусковОбменДанными.Доступность = Не Форма.ЭтоОбособленноеПодразделение;
		Форма.Элементы.ВыплатаЗарплатыДатаВыплатыПодпись1.Доступность = Форма.ВыплатаЗарплатыПереключатель = 1;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БухучетЗарплатыОрганизацийОтношениеКЕНВД",
		"Видимость",
		Форма.Период < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки(РеквизитПериод = Неопределено)
	
	Организация = Запись.Организация;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Если РеквизитПериод = Неопределено Тогда
			РайонныйКоэффициент        = Организация.РайонныйКоэффициент;
			РайонныйКоэффициентРФ      = Организация.РайонныйКоэффициентРФ;
			ЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности = 
				НЕ Организация.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности;
		КонецЕсли;
		
		Если РеквизитПериод = Неопределено ИЛИ СтрНайти(РеквизитПериод, "БухучетЗарплатыОрганизаций") > 0 Тогда
			Отбор = Новый Структура("Организация", Организация);
			ДатаСреза = ?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период);
			ЗаписиРегистраСрезПоследних = РегистрыСведений.БухучетЗарплатыОрганизаций.СрезПоследних(ДатаСреза, Отбор);
			МенеджерЗаписи = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.Организация = Организация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = Период;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				БухучетЗарплатыОрганизацийПериод = ЭтотОбъект[РеквизитПериод];
			Иначе
				БухучетЗарплатыОрганизацийПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();
			ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "БухучетЗарплатыОрганизаций");
		КонецЕсли;
		
		Если РеквизитПериод = Неопределено ИЛИ СтрНайти(РеквизитПериод, "ТерриториальныеУсловияПФР") > 0 Тогда
			Отбор = Новый Структура("СтруктурнаяЕдиница", Организация);
			ДатаСреза = ?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период);
			ЗаписиРегистраСрезПоследних = РегистрыСведений.ТерриториальныеУсловияПФР.СрезПоследних(ДатаСреза, Отбор);
			МенеджерЗаписи = РегистрыСведений.ТерриториальныеУсловияПФР.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СтруктурнаяЕдиница = Организация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = Период;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				ТерриториальныеУсловияПФРПериод = ЭтотОбъект[РеквизитПериод];
			Иначе
				ТерриториальныеУсловияПФРПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();
			ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ТерриториальныеУсловияПФР");
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиУчетаПособийСоциальногоСтрахования");
		
		ПолучитьГрафикРаботыОрганизации();
		
		ПорядокРасчетаАванса = Запись.ИндивидуальныйАванс;
		УстановитьПоказРазмераАванса(ЭтотОбъект);
		
		ИспользоватьРасчетПервойПоловиныМесяца = УчетЗарплаты.ИспользуетсяРасчетПервойПоловиныМесяца(Организация);
		НастраиватьРасчетПервойПоловиныМесяца = Не УчетЗарплаты.УдерживаетсяНДФЛПоАвансам(Период);
		
	КонецЕсли;
	
	Если РеквизитПериод = Неопределено Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ЗарплатаКадрыНастройкиОрганизаций");
		ВыплатаЗарплатыПереключатель = Не ЗарплатаКадрыНастройкиОрганизаций.ВыплачиватьЗарплатуВПоследнийДеньМесяца;
	КонецЕсли;
	
	ПериодПроверки = Период;
	Если СтрНайти(РеквизитПериод, "НастройкиРасчетаРезервов") > 0 Тогда
		ПериодПроверки = ?(ЗначениеЗаполнено(ЭтотОбъект[РеквизитПериод]), ЭтотОбъект[РеквизитПериод], ПериодПроверки);
	КонецЕсли;
	
	РезервыОтпусковАрхивные = 
		Не УчетЗарплаты.ЕстьНастройкиРезерваОтпусков(ГоловнаяОрганизация, ПериодПроверки)
		И УчетЗарплаты.ЕстьНастройкиРезерваОтпусковАрхивные(ГоловнаяОрганизация, ПериодПроверки)
		И УчетЗарплаты.ВедетсяУчетРезервовОтпусков(ГоловнаяОрганизация, ПериодПроверки);
		
	Если РеквизитПериод = Неопределено ИЛИ СтрНайти(РеквизитПериод, "НастройкиРасчетаРезервов") > 0 Тогда
		
		Если РезервыОтпусковАрхивные Тогда
			Отбор = Новый Структура("Организация", ГоловнаяОрганизация);
			ДатаСреза = ?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период);
			ЗаписиРегистраСрезПоследних = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(ДатаСреза, Отбор);
			МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация = ГоловнаяОрганизация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = НастройкиРасчетаРезервовПериод;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				НастройкиРасчетаРезервовПериод = ЭтотОбъект[РеквизитПериод];
			Иначе
				НастройкиРасчетаРезервовПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();
			ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиРасчетаРезервовОтпусков");
		
			ЭтотОбъект.ФормироватьРезервОтпусков = МенеджерЗаписи.ФормироватьРезервОтпусковБУ
				ИЛИ МенеджерЗаписи.ФормироватьРезервОтпусковНУ;
			
			Если Не УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
				ЭтотОбъект.ФормироватьРезервОтпусковНУ = МенеджерЗаписи.ФормироватьРезервОтпусковНУ;
			КонецЕсли;
		ИначеЕсли УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
				
			НастройкиРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаДляНебольшихОрганизаций.НастройкаРезерваПоВиду(ГоловнаяОрганизация,
				Перечисления.ВидыРезервовПоОплатеТруда.Отпуск,
				?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период));
			ЗаполнитьЗначенияСвойств(НастройкиРасчетаРезервовПоОплатеТруда_Отпуск,
				НастройкиРасчетаРезервовПоОплатеТруда,
				,
				"ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты");
			СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
				НастройкиРасчетаРезервовПоОплатеТруда_Отпуск,
				НастройкиРасчетаРезервовПоОплатеТруда);
			СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
				НастройкиРасчетаРезервовПоОплатеТруда_Отпуск,
				НастройкиРасчетаРезервовПоОплатеТруда);
			НастройкиРасчетаРезервовПоОплатеТруда_Отпуск_Ссылка = НастройкиРасчетаРезервовПоОплатеТруда.Ссылка;
			ЭтотОбъект.ФормироватьРезервОтпусков = ЗначениеЗаполнено(НастройкиРасчетаРезервовПоОплатеТруда.Ссылка);
		КонецЕсли;
		
		Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
			ДатаСреза = ?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период);
			НастройкиРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаДляНебольшихОрганизаций.НастройкаРезерваПоВиду(ГоловнаяОрганизация,
				Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия,
				ДатаСреза);
			ЗаполнитьЗначенияСвойств(НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия,
				НастройкиРасчетаРезервовПоОплатеТруда,
				,
				"ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты");
			СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
				НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия,
				НастройкиРасчетаРезервовПоОплатеТруда);
			СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
				НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия,
				НастройкиРасчетаРезервовПоОплатеТруда);
			НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия_Ссылка = НастройкиРасчетаРезервовПоОплатеТруда.Ссылка;
			ЭтотОбъект.ФормироватьРезервыПремий = ЗначениеЗаполнено(НастройкиРасчетаРезервовПоОплатеТруда.Ссылка);
		КонецЕсли;
		
		Если Не УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
			ПараметрыУчетаРезервовВОрганизации = УчетЗарплаты.ПараметрыУчетаРезервовВОрганизации(ГоловнаяОрганизация,
				?(РеквизитПериод <> Неопределено, ЭтотОбъект[РеквизитПериод], Период));
			ФормироватьРезервыПоОплатеТруда   = ПараметрыУчетаРезервовВОрганизации.ФормироватьРезервБУ;
			ФормироватьРезервыПоОплатеТрудаНУ = ПараметрыУчетаРезервовВОрганизации.ФормироватьРезервНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметры(Отказ)
	
	Если ТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкиПараметровУчета(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Организация = Запись.Организация;
		
		// особенности записи регистра
		// заполнение сведений для подразделений
		// осуществляется каскадно при записи организации
		МенеджерЗаписи = РегистрыСведений.ТерриториальныеУсловияПФР.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период      = ТерриториальныеУсловияПФРПериод;
		МенеджерЗаписи.СтруктурнаяЕдиница = Организация;
		МенеджерЗаписи.Прочитать();
		Если ТребуетсяПерезапись(МенеджерЗаписи, ТерриториальныеУсловияПФР, "ТерриториальныеУсловияПФР") Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТерриториальныеУсловияПФР);
			МенеджерЗаписи.Период      = ТерриториальныеУсловияПФРПериод;
			МенеджерЗаписи.СтруктурнаяЕдиница = Организация;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		Попытка
			Если ОрганизацияОбъект.ПрименятьРайонныйКоэффициент <> ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент
				ИЛИ ОрганизацияОбъект.ПрименятьСевернуюНадбавку <> ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку
				ИЛИ ОрганизацияОбъект.ТерриториальныеУсловияПФР <> ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР 
				ИЛИ ОрганизацияОбъект.РайонныйКоэффициент       <> РайонныйКоэффициент
				ИЛИ ОрганизацияОбъект.РайонныйКоэффициентРФ     <> РайонныйКоэффициентРФ
				ИЛИ ОрганизацияОбъект.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности = ЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности Тогда
				
				ДополнительныеОбработки = Новый Массив;
				
				ОрганизацияОбъект.Заблокировать();
				ОрганизацияОбъект.ТерриториальныеУсловияПФР    = ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР;
				
				Если ОрганизацияОбъект.ПрименятьРайонныйКоэффициент <> ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент Тогда
					Если ОрганизацияОбъект.ПрименятьРайонныйКоэффициент Тогда
						ДополнительныеОбработки.Добавить("УдалитьРК");
					КонецЕсли;
				КонецЕсли;
				ОрганизацияОбъект.ПрименятьРайонныйКоэффициент = ЗарплатаКадрыНастройкиОрганизаций.ПрименятьРайонныйКоэффициент;
				
				Если ОрганизацияОбъект.ПрименятьСевернуюНадбавку <> ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку Тогда
					Если ОрганизацияОбъект.ПрименятьСевернуюНадбавку Тогда
						ДополнительныеОбработки.Добавить("УдалитьСН");
					КонецЕсли;
				КонецЕсли;
				ОрганизацияОбъект.ПрименятьСевернуюНадбавку    = ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку;
				
				ОрганизацияОбъект.РайонныйКоэффициент          = РайонныйКоэффициент;
				ОрганизацияОбъект.РайонныйКоэффициентРФ        = РайонныйКоэффициентРФ;
				ОрганизацияОбъект.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности =
					НЕ ЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности;
				
				ОрганизацияОбъект.Записать();
				
				
				Если ДополнительныеОбработки.Количество() <> 0 Тогда
					ЗарплатаКадрыВызовСервера.ОбработкаДанныхПриЗаписиОрганизации(Организация, ДополнительныеОбработки);
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: '")
				+ ОрганизацияОбъект
				+ Символы.ПС
				+ НСтр("ru='Запись настройки параметров учета зарплаты не выполнена.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		МенеджерЗаписи = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		Если ТребуетсяПерезапись(МенеджерЗаписи, ОтражениеВРегламентированномУчетеНастройкиОрганизаций, "ОтражениеВРегламентированномУчетеНастройкиОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ОтражениеВРегламентированномУчетеНастройкиОрганизаций);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ФормироватьПроводкиВКонцеПериода = Ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период      = БухучетЗарплатыОрганизацийПериод;
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		Если ТребуетсяПерезапись(МенеджерЗаписи, БухучетЗарплатыОрганизаций, "БухучетЗарплатыОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, БухучетЗарплатыОрганизаций);
			МенеджерЗаписи.Период      = БухучетЗарплатыОрганизацийПериод;
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если НЕ ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку Тогда
			// сбросим признак для всех подразделений
			СписокСеверныхТерриторий = Справочники.ТерриториальныеУсловияПФР.СписокТерриторийСОсобымиКлиматическимиУсловиями();
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",              Организация);
			Запрос.УстановитьПараметр("Период",                   ТерриториальныеУсловияПФРПериод);
			Запрос.УстановитьПараметр("СписокСеверныхТерриторий", СписокСеверныхТерриторий);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница
			|ИЗ
			|	РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних(
			|			&Период,
			|			СтруктурнаяЕдиница.Владелец = &Организация
			|				И ТерриториальныеУсловияПФР В (&СписокСеверныхТерриторий)) КАК ТерриториальныеУсловияПФРСрезПоследних";
			
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			ТерриториальныеУсловияПФРПустаяСсылка = Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
			Пока ВыборкаЗапроса.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ТерриториальныеУсловияПФР.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период                    = ТерриториальныеУсловияПФРПериод;
				МенеджерЗаписи.СтруктурнаяЕдиница        = ВыборкаЗапроса.СтруктурнаяЕдиница;
				МенеджерЗаписи.ТерриториальныеУсловияПФР = ТерриториальныеУсловияПФРПустаяСсылка;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		Если ТребуетсяПерезапись(МенеджерЗаписи, НастройкиУчетаПособийСоциальногоСтрахования, "НастройкиУчетаПособийСоциальногоСтрахования") Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиУчетаПособийСоциальногоСтрахования);
			МенеджерЗаписи.ПособияВыплачиваютсяСтрахователем = НЕ ЗначениеЗаполнено(МенеджерЗаписи.ДатаПередачиФССВыплатыПособий);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	Если ТребуетсяПерезапись(МенеджерЗаписи, ЗарплатаКадрыНастройкиОрганизаций, "НастройкиЗарплатаКадры") Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗарплатаКадрыНастройкиОрганизаций);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ИспользоватьРезервыПоОплатеТруда Тогда
		Если НЕ ЭтоОбособленноеПодразделение Тогда
			
			Если РезервыОтпусковАрхивные Тогда
				МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период      = НастройкиРасчетаРезервовПериод;
				МенеджерЗаписи.Организация = ГоловнаяОрганизация;
				МенеджерЗаписи.Прочитать();
				Если ТребуетсяПерезапись(МенеджерЗаписи, НастройкиРасчетаРезервовОтпусков, "НастройкиРасчетаРезервовОтпусков") Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиРасчетаРезервовОтпусков);
					МенеджерЗаписи.Период      = НастройкиРасчетаРезервовПериод;
					МенеджерЗаписи.Организация = ГоловнаяОрганизация;
					
					Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
						МенеджерЗаписи.МетодНачисленияРезерваОтпусков = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод;
						МенеджерЗаписи.ФормироватьРезервОтпусковБУ = ФормироватьРезервОтпусков;
						МенеджерЗаписи.ФормироватьРезервОтпусковНУ = ФормироватьРезервОтпусков
							И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ГоловнаяОрганизация,
								НастройкиРасчетаРезервовПериод);
					Иначе
						МенеджерЗаписи.ФормироватьРезервОтпусковБУ = ФормироватьРезервОтпусков;
						МенеджерЗаписи.ФормироватьРезервОтпусковНУ = ФормироватьРезервОтпусковНУ;
					КонецЕсли;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			Иначе
				НастройкиРасчетаРезервовПоОплатеТруда_Отпуск.ПометкаУдаления = Не ФормироватьРезервОтпусков;
				Если ЗначениеЗаполнено(НастройкиРасчетаРезервовПоОплатеТруда_Отпуск_Ссылка) Тогда
					НастройкиРасчетаРезервовПоОплатеТруда = НастройкиРасчетаРезервовПоОплатеТруда_Отпуск_Ссылка.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_Отпуск,
						,
						"Ссылка, ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты");
					СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
						НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_Отпуск);
					СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
						НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_Отпуск);
					НастройкиРасчетаРезервовПоОплатеТруда.Записать();
				Иначе
					Если ФормироватьРезервОтпусков Тогда
						ЗаписатьНовуюНастройкуРезервНаОплатуТруда("Отпуск");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ПометкаУдаления = Не ФормироватьРезервыПремий;
			Если ЗначениеЗаполнено(НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия_Ссылка) Тогда
				НастройкиРасчетаРезервовПоОплатеТруда = НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия_Ссылка.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия,
						,
						"Ссылка,ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты");
					СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
						НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия);
					СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
						НастройкиРасчетаРезервовПоОплатеТруда,
						НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия);
					НастройкиРасчетаРезервовПоОплатеТруда.Записать();
			Иначе
				Если ФормироватьРезервыПремий Тогда
					ЗаписатьНовуюНастройкуРезервНаОплатуТруда("ГодоваяПремия");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовуюНастройкуРезервНаОплатуТруда(ИмяВидаРезерва)
	
	НастройкиРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаДляНебольшихОрганизаций.СоздатьНастройкуРезерваПоВиду(ГоловнаяОрганизация,
		Перечисления.ВидыРезервовПоОплатеТруда[ИмяВидаРезерва],
		НастройкиРасчетаРезервовПериод);
	ЗаполнитьЗначенияСвойств(НастройкиРасчетаРезервовПоОплатеТруда,
		ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва],
		"ФормироватьРезервНУ, НормативОтчисленийВРезерв, ПредельнаяВеличинаОтчисленийВРезервНУ");
	ВидНачисления = ПланыВидовРасчета.Начисления.ПустаяСсылка();
	РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПроверитьЗаполнитьВидРасчетаРезерва(
		НастройкиРасчетаРезервовПоОплатеТруда,
		ВидНачисления);
	РезервыПоОплатеТрудаДляНебольшихОрганизаций.УстановитьВидыРасчетовРезервовПоОплатеТруда(
		НастройкиРасчетаРезервовПоОплатеТруда,
		ВидНачисления);
	НастройкиРасчетаРезервовПоОплатеТруда.Записать();
	СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
		НастройкиРасчетаРезервовПоОплатеТруда,
		ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва]);
	СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
		НастройкиРасчетаРезервовПоОплатеТруда,
		ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва]);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва],
		НастройкиРасчетаРезервовПоОплатеТруда,
		,
		"ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты");
		
	СкопироватьТабличнуюЧасть("ВидыРасчетовРезерва",
		ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва],
		НастройкиРасчетаРезервовПоОплатеТруда);
	СкопироватьТабличнуюЧасть("ИсключенияИзРасчетнойБазыФондаОплатыТруда",
		ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва],
		НастройкиРасчетаРезервовПоОплатеТруда);
	
	ЭтотОбъект["НастройкиРасчетаРезервовПоОплатеТруда_" + ИмяВидаРезерва + "_Ссылка"] = НастройкиРасчетаРезервовПоОплатеТруда.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьТабличнуюЧасть(ИмяТаблицы, Приемник, Источник)
	
	ТаблицаПриемник = Приемник[ИмяТаблицы];
	ТаблицаИсточник = Источник[ИмяТаблицы];
	ТаблицаПриемник.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПерезапись(НоваяЗапись, ТекущаяЗапись, ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Ресурсы = МетаданныеРегистра.Ресурсы;
	
	Если НЕ МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Если НоваяЗапись.Период <> ТекущаяЗапись.Период Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Ресурс ИЗ Ресурсы Цикл
		
		Если НоваяЗапись[Ресурс.Имя] <> ТекущаяЗапись[Ресурс.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПроверитьНастройкиПараметровУчета(Отказ)
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Если НЕ ЗначениеЗаполнено(БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Способ отражения в учете",,,);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БухучетЗарплатыОрганизацийСпособОтраженияЗарплатыВБухучете",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНажатие(ИмяРегистра)
	
	ПараметрыОтбора = Новый Структура("ГоловнаяОрганизация, Организация, СтруктурнаяЕдиница",
		Организация, Организация, Организация);
	
	РегистрСведенийФорма = ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНастройкиРезервовНажатие(ВидРезерва)
	
	ПараметрыОтбора = Новый Структура("ГоловнаяОрганизация, Организация, СтруктурнаяЕдиница, ВидРезерва",
		Организация, Организация, Организация, ПредопределенноеЗначение("Перечисление.ВидыРезервовПоОплатеТруда." + ВидРезерва));
	
	РегистрСведенийФорма = ОткрытьФорму("Справочник.НастройкиРасчетаРезервовПоОплатеТруда.ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПараметровНачисленияРезерваОтпусков()
	
	Если РезервыОтпусковАрхивные Тогда
		Если НЕ ФормироватьРезервОтпусков Тогда
			НастройкиРасчетаРезервовОтпусков.НормативОтчисленийВРезервОтпусков           = 0;
			НастройкиРасчетаРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков = 0;
			НастройкиРасчетаРезервовОтпусков.ФормироватьРезервОтпусковНУ                 = Ложь;
		КонецЕсли;
		
		НастройкиРасчетаРезервовОтпусков.ФормироватьРезервОтпусковБУ = ФормироватьРезервОтпусков;
		Если НЕ УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
			НастройкиРасчетаРезервовОтпусков.ФормироватьРезервОтпусковНУ = ФормироватьРезервОтпусковНУ;
		Иначе
			НастройкиРасчетаРезервовОтпусков.ФормироватьРезервОтпусковНУ = ФормироватьРезервОтпусков;
		КонецЕсли;
	Иначе
		Если НЕ ФормироватьРезервОтпусков Тогда
			НастройкиРасчетаРезервовПоОплатеТруда_Отпуск.НормативОтчисленийВРезерв             = 0;
			НастройкиРасчетаРезервовПоОплатеТруда_Отпуск.ПредельнаяВеличинаОтчисленийВРезервНУ = 0;
			НастройкиРасчетаРезервовПоОплатеТруда_Отпуск.ФормироватьРезервНУ                   = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПараметровНачисленияРезерваПремий()

	Если НЕ ФормироватьРезервыПремий Тогда
		НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.НормативОтчисленийВРезерв             = 0;
		НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ПредельнаяВеличинаОтчисленийВРезервНУ = 0;
		НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ФормироватьРезервНУ                   = Ложь;
	КонецЕсли;
	
	ОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЮрЛицо(Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоЮрЛицо;
	
КонецФункции

&НаСервере
Процедура ЗарплатаКадрыНастройкиОрганизацийПрименятьСевернуюНадбавкуПриИзмененииНаСервере()
	
	Если НЕ ЗарплатаКадрыНастройкиОрганизаций.ПрименятьСевернуюНадбавку Тогда
		СписокСеверныхТерриторий = Справочники.ТерриториальныеУсловияПФР.СписокТерриторийСОсобымиКлиматическимиУсловиями();
		Если СписокСеверныхТерриторий.НайтиПоЗначению(ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР) <> Неопределено Тогда
			ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР = Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДатыВступленияВПилотныйПроект(СписокВыбора) Экспорт
	
	МассивДат = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.ДатыВступленияВПилотныйПроект();
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Дата('00010101'), НСтр("ru = 'Выполняется страхователем (организацией)'")); 
	Для каждого ОчереднаяДата Из МассивДат Цикл
		ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Передана в ФСС с %1 г.'"),
			Формат(ОчереднаяДата, "ДФ=dd.MM.yyyy"));
		СписокВыбора.Добавить(ОчереднаяДата, ПредставлениеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиРасчетаРезервовПериодЧислоПриИзмененииНаСервере()
	
	Если НастройкиРасчетаРезервовПериодЧисло = 0 Тогда
		НастройкиРасчетаРезервовПериодЧисло = Год(НастройкиРасчетаРезервовПериод);
	Иначе
		НастройкиРасчетаРезервовПериод = Дата(НастройкиРасчетаРезервовПериодЧисло, 1, 1);
	КонецЕсли;
	ПрочитатьНастройки("НастройкиРасчетаРезервовПериод");
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Запись.Организация, НачалоДня(НастройкиРасчетаРезервовПериод));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Запись.Организация, НачалоДня(НастройкиРасчетаРезервовПериод));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		
		ОбновитьИнтерфейс = Ложь;
		
		ОбновитьИнтерфейс();
		#Если ВебКлиент Тогда
		Активизировать();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьГрафикРаботыОрганизации()
	
	ГрафикРаботыОрганизации = УчетЗарплаты.ГрафикРаботыОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(ГрафикРаботыОрганизации) Тогда
		ГрафикРаботыОрганизацииСтрокой = НСтр("ru = '<Не указан>'");
	Иначе
		РеквизитыГрафика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрафикРаботыОрганизации, "Наименование,ПроизводственныйКалендарь");
		НаименованиеГрафика = РеквизитыГрафика.Наименование;
		НаименованиеПроизводственногоКалендаря = НСтр("ru = '<не указан>'");
		Если ЗначениеЗаполнено(РеквизитыГрафика.ПроизводственныйКалендарь) Тогда
			НаименованиеПроизводственногоКалендаря = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыГрафика.ПроизводственныйКалендарь, "Наименование");
		КонецЕсли;
		
		ГрафикРаботыОрганизацииСтрокой = СтрШаблон(НСтр("ru = '%1 (производственный календарь: %2)'"),
			НаименованиеГрафика,
			НаименованиеПроизводственногоКалендаря);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда()
	
	ТаблицаРасчетнаяБазаФондаОплатыТруда = НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Выгрузить();
	АдресНастройки = ПоместитьВоВременноеХранилище(ТаблицаРасчетнаяБазаФондаОплатыТруда, УникальныйИдентификатор);
	Возврат АдресНастройки;
	
КонецФункции

&НаКлиенте
Процедура РасчетнаяБазаЗавершениеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(АдресНастройки)
	
	НастройкиРасчетаРезервовПоОплатеТруда_ГодоваяПремия.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Загрузить(ПолучитьИзВременногоХранилища(АдресНастройки));
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[РеквизитПериод] = РезультатВыбора.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботыЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьГрафикРаботыОрганизации();
	
КонецПроцедуры

#КонецОбласти
