#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем КлючЗаписи;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		Элементы.ГруппаРасходы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств")
		Или Не Перечисления.АлгоритмыПериодаАмортизации.ПоддерживаетсяВыборАлгоритма() Тогда
		Элементы.ГруппаДатаНачалаАмортизации.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.КонтекстныйВызов Тогда
		Элементы.Организация.ТолькоПросмотр      = Истина;
		Элементы.Организация.КнопкаВыбора        = Ложь;
	КонецЕсли;
	
	ЗначенияЗаполнения = Неопределено;
	Параметры.Свойство("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	АктивныйЭлемент = Неопределено;
	Параметры.Свойство("АктивныйЭлемент", АктивныйЭлемент);
	
	Если ТипЗнч(АктивныйЭлемент) = Тип("Строка") Тогда
		Если АктивныйЭлемент = "ВариантБухгалтерскойОтчетности" Тогда
			ТекущийЭлемент = Элементы.ВариантБухгалтерскойОтчетности;
		ИначеЕсли АктивныйЭлемент = "УчетВыпускаПродукцииПоДаннымПродаж" Тогда
			ТекущийЭлемент = Элементы.ЗаписьУчетВыпускаПродукцииПоДаннымПродаж
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНоваяЗапись = Ложь;
	Копирование    = Ложь;
	
	ЭтоФормаЗаписи = Параметры.Свойство("Ключ", КлючЗаписи);
	Если Параметры.Свойство("РежимНастройки") Тогда
		ЭтоФормаЗаписи = Ложь;
	Иначе
		ЭтоФормаЗаписи = Истина;
	КонецЕсли;
	
	Если КлючЗаписи = Неопределено И ЭтоФормаЗаписи Тогда
		ЭтоНоваяЗапись = Истина;
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Копирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоФормаЗаписи
		И НЕ ЭтоНоваяЗапись Тогда
		Организация = КлючЗаписи.Организация;
		ТекущаяДата = КлючЗаписи.Период;
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Организация = Параметры.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЭтоНоваяЗапись И ЗначенияЗаполнения <> Неопределено Тогда
			ЗначенияЗаполнения.Свойство("Организация", Организация);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) И (ЭтоНоваяЗапись ИЛИ НЕ ЭтоФормаЗаписи) Тогда
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		Если  ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Период") Тогда
			ТекущаяДата = ЗначенияЗаполнения.Период;
		КонецЕсли;
			
		Если Копирование Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.Запись, Параметры.ЗначениеКопирования, "Организация, Период");
			Организация = ЭтотОбъект.Запись.Организация;
			ТекущаяДата = ЭтотОбъект.Запись.Период;
		ИначеЕсли ЭтоНоваяЗапись Тогда
			ЭтотОбъект.Запись.Период = ТекущаяДата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	КонецЕсли;
	
	ПравоРедактированияНастроек = 
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыПримененияТребованийЗаконодательства)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитика);
		
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ИспользоватьВозвратнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару");
	
	Если НЕ ЭтоФормаЗаписи Тогда
		
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ЭтоФормаЗаписи Тогда
			УстановитьДоступностьВидимостьНастроек(Ложь);
		Иначе
			ПодготовитьФормуНаСервере(Истина);
		КонецЕсли;
	Иначе
		Если НЕ ЭтоФормаЗаписи Тогда
			Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
				ОрганизацияНедоступна = Истина;
				УстановитьДоступностьВидимостьНастроек(Ложь);
				Возврат;
			Иначе
				ПодготовитьФормуНастройки();
			КонецЕсли;
		КонецЕсли;
		Если Копирование Тогда
			СкопироватьУчетнуюПолитику(Параметры.ЗначениеКопирования);
			ПрочитатьНастройкиНалоговогоУчета();
		ИначеЕсли ЭтоНоваяЗапись Тогда
			ПодготовитьФормуНаСервере(Истина);
			ПрочитатьНастройкиНалоговогоУчета();
		Иначе
			ПрочитатьУчетнуюПолитику();
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Элементы.ГруппаСсылка.Видимость = НЕ ЭтоФормаЗаписи;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтотОбъект,
			"БП.РегистрСведений.УчетнаяПолитика",
			"ФормаЗаписи",
			НСтр("ru='Новости: Учетная политика'"),
			ИдентификаторыСобытийПриОткрытии
		);
		// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаЗаписи И ЭтоНоваяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ВопросСохранитьИзменения("ВопросПередЗакрытиемЗавершение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// После закрытия формы блокировка, установленная методом "ЗаблокироватьДанныеДляИзменения" с указанием
	// уникального идентификатора формы, снимается не сразу, а через некоторое время. В некоторых случаях
	// это может мешать интерактивному удалению записей из формы списка. Поэтому принудительно
	// разблокируем данные, заблокированные этой формой.
	РазблокироватьФормуНаСервере(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтредактированаИстория" Тогда
		Если Параметр.ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
			Если Параметр.ВедущийОбъект = Организация Тогда
				ОбновитьНастройкиНалоговогоУчета();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если НЕ Параметры.КонтекстныйВызов Тогда
			// При записи новой организации необходимо добавить ее в список доступных организаций.
			ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
		ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
		// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СчетаУчета" Тогда
		ПараметрыОткрытия = Новый Структура("АктивныйЭлемент", "ПоказыватьСчетаУчетаВДокументах");
		ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройки", Новый Структура("ПараметрыОткрытия", ПараметрыОткрытия));
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ФункциональностьПрограммы" Тогда
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы",
			Новый Структура("ТекущаяСтраница", "ГруппаУчетПоДоговорам"));
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрименяетсяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", ЭтотОбъект.Запись.Период);
	ПараметрыВыбора.Вставить("КонецПериода",  ЭтотОбъект.Запись.Период);
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодСЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", ТекущаяДата);
	ПараметрыВыбора.Вставить("КонецПериода",  ТекущаяДата);
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДатаИзмененияЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекПриИзменении(Элемент)
	
	ДатаИзмененияНастроекПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(Запись.Период);
	КонецПериода  = КонецМесяца(Запись.Период);
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПрименяетсяС,
		НачалоПериода,
		КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(ТекущаяДата);
	КонецПериода  = КонецМесяца(ТекущаяДата);
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ДатаИзмененияНастроек,
		НачалоПериода,
		КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачалоПериода = ТекущаяДата;
	КонецПериода = ТекущаяДата;
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПрименяетсяС,
		НачалоПериода,
		КонецПериода);
	
	РезультатВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ПериодСЗавершениеВыбора(РезультатВыбора, Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачалоПериода = ТекущаяДата;
	КонецПериода = ТекущаяДата;
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ДатаИзмененияНастроек,
		НачалоПериода,
		КонецПериода);
	
	РезультатВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ДатаИзмененияЗавершениеВыбора(РезультатВыбора, Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЭтоФормаЗаписи Тогда
		Запись.Организация = Организация;
		Модифицированность  = Истина;
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Если Модифицированность Тогда
			ВопросСохранитьИзменения("ВопросПередСменойОрганизации");
		Иначе
			Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
			ПрочитатьНастройкиОрганизации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Незачем очищать
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСПриИзменении(Элемент)
	
	ПрименяетсяСПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиМПЗПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиМПЗ1ПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиТоваровВРозницеПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиТоваровВРознице1ПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьОбесценениеЗапасовПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьРасходыПоЭлементамЗатратПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьРасходыПоСтатьямЗатратПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредствПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервыПоСомнительнымДолгамПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьФСБУ25ДосрочноПриИзменении(Элемент)
	
	ПрименятьДосрочно = ПрименятьФСБУ25Досрочно = 1;
	ЗаписатьПрименениеФСБУ25(ПрименятьДосрочно);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьФСБУ6ДосрочноПриИзменении(Элемент)
	
	ПрименятьДосрочно = ПрименятьФСБУ6Досрочно = 1;
	
	ЗаписатьПрименениеФСБУ6(ПрименятьДосрочно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПериодАмортизацииПриИзменении(Элемент)
	ОтобразитьПериоды();
КонецПроцедуры

&НаКлиенте
Процедура ВариантУчетаОтложенногоНалогаНетПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУчетаОтложенногоНалогаБалансовыйМетодПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУчетаОтложенногоНалогаБалансовыйМетодПостоянныеРазницыПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУчетаОтложенногоНалогаЗатратныйМетодПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантБухгалтерскойОтчетностиПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьАвтоматическийВыпускПродукцииПоДаннымПродажПриИзменении(Элемент)
	
	НастроитьАвтоматическийВыпускПродукцииПоДаннымПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьУчетВыпускаПродукцииПоДаннымПродажРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСтатьюБухРу" Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://buh.ru/articles/documents/128091/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьТаруЗаБалансом2021ПриИзменении(Элемент)
	
	ПрименятьДосрочно = УчитыватьТаруЗаБалансом2021 = 1;
	ЗаписатьУчитыватьТаруЗаБалансом2021(ПрименятьДосрочно);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаЗатратОбработкаНавигационнойСсылки(Элемент, ИмяКоманды, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЧастиИмениКоманды = СтрРазделить(ИмяКоманды, "/");
	ИмяФормыНастроек  = ЧастиИмениКоманды[0];
	Счет     = Неопределено;
	Если ЧастиИмениКоманды.Количество() > 1 Тогда
		Счет = ЧастиИмениКоманды[1];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеНастроек", АдресРедактированиеНастроекУчетаЗатрат);
	ПараметрыФормы.Вставить("Период",                 ДатаИзменения);
	ПараметрыФормы.Вставить("Организация",            Организация);
	ПараметрыФормы.Вставить("Счет",                   Счет);
	
	ОткрытьФорму(
		"Справочник.НастройкиУчетаЗатрат.Форма." + ИмяФормыНастроек,
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ЗавершитьРедактированиеЭлементаНастроек", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеЭлементаНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПрименитьИзменениеНастроекУчетаЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПоКурсуОтгрузкиПриИзменении(Элемент)
	Модифицированность = Истина;
	ОтобразитьПериоды();
	ИзменениеНастройкиПоВалютнымКурсам = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВосстановитьАвтоматическиеНастройкиУчетаЗатрат(Команда)
	
	ВосстановитьАвтоматическиеНастройкиУчетаЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВариантУчетаОтложенногоНалога(Команда)
	Гиперссылка = НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ГиперссылкаОписаниеМетодовУчета();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Гиперссылка);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)

	КонтекстЗаписи = НовыйКонтекстЗаписи();
	КонтекстЗаписи.ДействияПослеЗаписи = Истина;
	ЗаписатьНаКлиенте(КонтекстЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	КонтекстЗаписи = НовыйКонтекстЗаписи();
	КонтекстЗаписи.ДействияПослеЗаписи = Истина;
	КонтекстЗаписи.Закрытие = Истина;
	ЗаписатьНаКлиенте(КонтекстЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	Отбор = Новый Структура("Организация", Организация);
	ОткрытьФорму("РегистрСведений.УчетнаяПолитика.Форма.ФормаСписка", Новый Структура("Отбор", Отбор));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНалоговИОтчетов(Команда)
	
	Если Модифицированность Тогда
		ВопросСохранитьИзменения("ВопросПриПереходеЗавершение");
	Иначе
		ПерейтиВНастройкуНалоговИОтчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура ПечатьПриказ(Команда)
	
	ВыполнитьКомандуПечати("Приказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаБУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПланСчетов(Команда)
	
	ВыполнитьКомандуПечати("ПланСчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПервичныеДокументы(Команда)
	
	ВыполнитьКомандуПечати("ПервичныеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыБУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаНУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыНУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыНУ");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Чтение

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если НЕ ЭтоФормаЗаписи Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Если Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница <> Элементы.ОбщаяСтраницаНастройки Тогда
				УстановитьДоступностьВидимостьНастроек(Истина);
			КонецЕсли;
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор); // Все разблокируем
		Если ПустаяСтрока(РезультатБлокировки) Тогда
			ПодготовитьФормуНастройки();
		КонецЕсли;
		
		ПрочитатьУчетнуюПолитику();
		
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУчетнуюПолитику(ПериодЗначений = Неопределено)
	
	Если ПериодЗначений = Неопределено Тогда
		ПериодЗначений = ТекущаяДата;
	КонецЕсли;
	
	КлючЗаписи     = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ПериодЗначений);
	Если КлючЗаписи = Неопределено Тогда
		РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(Запись, Новый Структура());
		Запись.Период      = НачалоГода(ТекущаяДата);
		Запись.Организация = Организация;
		МенеджерЗаписи = РеквизитФормыВЗначение("Запись");
		МенеджерЗаписи.Записать(Истина);
	Иначе
		МенеджерЗаписи = МенеджерЗаписиПериодическогоРегистра("УчетнаяПолитика", КлючЗаписи);
	КонецЕсли;
	ЭтотОбъект.ЗначениеВРеквизитФормы(МенеджерЗаписи, "Запись");
	
	ЗаполнитьСвязанныеРеквизиты();
	
	ПрочитатьНастройкиНалоговогоУчета();
	
	ПрочитатьНастройкиУчетаЗатрат();
	
КонецПроцедуры

&НаСервере
Функция МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, КлючЗаписи, ИмяИзмерения = "Организация") Экспорт
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ИмяИзмерения] = КлючЗаписи[ИмяИзмерения];
	МенеджерЗаписи.Период        = КлючЗаписи.Период;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи;

КонецФункции

&НаСервере
Процедура СкопироватьУчетнуюПолитику(Отбор)
	
	МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Отбор.Организация;
	МенеджерЗаписи.Период      = Отбор.Период;
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект.Запись, МенеджерЗаписи);
	ПрочитатьНастройкиУчетаЗатрат();
	ЗаполнитьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеРеквизиты()
	
	ДатаИзменения = ?(ЗначениеЗаполнено(Запись.Период), Запись.Период, НачалоГода(ТекущаяДатаСеанса()));
	
	ДатаИзмененияНастроек = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ДатаИзменения),
		КонецМесяца(ДатаИзменения),
		Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиОрганизации()
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиНалоговогоУчета()
	
	НастройкиНалоговогоУчета = НастройкиУчета.УчетнаяПолитикаНалоговыйУчет(Запись.Период, Запись.Организация);
	Если НастройкиНалоговогоУчета = Неопределено Тогда
		ПлательщикНДФЛ                   = Ложь;
		ПрименяетсяУСНДоходыМинусРасходы = Ложь;
		ПлательщикНалогаНаПрибыль        = ЭтоЮрЛицо;
	Иначе
		ПлательщикНДФЛ                   = НастройкиНалоговогоУчета[0].ПлательщикНДФЛ;
		ПрименяетсяУСНДоходыМинусРасходы = НастройкиНалоговогоУчета[0].ПрименяетсяУСНДоходыМинусРасходы;
		ПлательщикНалогаНаПрибыль        = НастройкиНалоговогоУчета[0].ПлательщикНалогаНаПрибыль;
	КонецЕсли;
	
	СинхронизироватьНастройкиНалоговогоУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиУчетаЗатрат()
	
	РедактированиеНастроек = Справочники.НастройкиУчетаЗатрат.РедактированиеЗаписиУчетнойПолитики(
		РеквизитФормыВЗначение("Запись", Тип("РегистрСведенийМенеджерЗаписи.УчетнаяПолитика")),
		Ложь);
	
	Если ЭтоАдресВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат) Тогда
		УдалитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
	КонецЕсли;
	
	АдресРедактированиеНастроекУчетаЗатрат = ПоместитьВоВременноеХранилище(РедактированиеНастроек, УникальныйИдентификатор);
	
	НастроитьОтображениеУчетЗатрат(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиНалоговогоУчета()
	
	ПрочитатьНастройкиНалоговогоУчета();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНастройкиНалоговогоУчета()
	
	Если ПлательщикНДФЛ ИЛИ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если Запись.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ФИФО Тогда
			Запись.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПрименениеФСБУ()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПрименятьФСБУ25Досрочно = 0;
		ПрименятьФСБУ6Досрочно = 0;
		УчитыватьТаруЗаБалансом2021 = 0;
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПервогоПримененияФСБУ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	
	ПрименятьФСБУ6Досрочно = ?(МенеджерЗаписи.Выбран() И МенеджерЗаписи.ПрименятьФСБУ6Досрочно, 1, 0);
	ПрименятьФСБУ25Досрочно = ?(МенеджерЗаписи.Выбран() И МенеджерЗаписи.ПрименятьФСБУ25Досрочно, 1, 0);
	УчитыватьТаруЗаБалансом2021 = ?(МенеджерЗаписи.Выбран() И МенеджерЗаписи.УчитыватьТаруЗаБалансом2021, 1, 0);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВариантРасчетаКорректировокНаУвеличение()
	
	Если Не УчетВзаиморасчетов.ВозможенУчетКорректировокВВалютеПоКурсуНаДатуОтгрузки(ТекущаяДата) Тогда
		Элементы.ГруппаВалютногоУчета.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КорректировкаПоКурсуОтгрузки = 0;
		Возврат;
	КонецЕсли;
	
	КорректировкаВВалютеПоКурсуОтгрузки = УчетВзаиморасчетов.ПрименяетсяРасчетКорректировокВВалютеПоКурсуНаДатуОтгрузки(Организация, ТекущаяДата);

КонецПроцедуры

#КонецОбласти

#Область Запись

&НаКлиенте
Функция НовыйКонтекстЗаписи()
	
	КонтекстЗаписи = Новый Структура;
	КонтекстЗаписи.Вставить("ИмяСобытия",               "");   // откуда вызвана запись
	КонтекстЗаписи.Вставить("ДействияПослеЗаписи",      Ложь); // нужно выполнить ряд стандартных действий после записи
	КонтекстЗаписи.Вставить("ОповеститьСвязанныеФормы", Ложь); // нужно оповестить другие формы настроек
	КонтекстЗаписи.Вставить("Закрытие",                 Ложь); // после записи закрыть
	КонтекстЗаписи.Вставить("Отказ",                    Ложь); // проверка заполнения реквизитов
	
	Возврат КонтекстЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаКлиенте(КонтекстЗаписи)
	
	КонтекстЗаписи.Отказ = Не ПроверитьЗаполнение();
	Если КонтекстЗаписи.Отказ Тогда
		ЗаписатьНаКлиентеЗавершение(Новый Структура("Статус", "Выполнено"), КонтекстЗаписи);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьНаКлиентеЗавершение", ЭтотОбъект, КонтекстЗаписи);
	
	ПроведениеКлиент.НачатьОчисткуРегистраПроверенныхДокументов(ОповещениеОЗавершении, ДатаИзменения, Запись.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиентеЗавершение(Результат, КонтекстЗаписи) Экспорт
	
	Если Результат = Неопределено Тогда
    	Возврат;
  	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не КонтекстЗаписи.Отказ Тогда
		
		ЗаписатьИзменения(КонтекстЗаписи.Закрытие);
		
		Если КонтекстЗаписи.ДействияПослеЗаписи Тогда
			
			ОповеститьПослеЗаписи();
			ПослеЗаписи_НаКлиенте();
			
		КонецЕсли;
		Если КонтекстЗаписи.ОповеститьСвязанныеФормы Тогда
			
			ОповеститьОбИзмененииНастроек();
			
		КонецЕсли;
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	// После успешной или неуспешной записи.
	Если КонтекстЗаписи.ИмяСобытия = "ВопросПриПереходе" Тогда
		
		ПерейтиВНастройкуНалоговИОтчетов();
		
	ИначеЕсли КонтекстЗаписи.ИмяСобытия = "ВопросПередСменойОрганизации" Тогда
		
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
		ПрочитатьНастройкиОрганизации();
		
	КонецЕсли;
	
	Если Не КонтекстЗаписи.Отказ
	   И КонтекстЗаписи.Закрытие
	   И КонтекстЗаписи.ИмяСобытия <> "ИзмененияИзВладельца" Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения(Закрытие = Ложь)
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПериодыИспользованияОтложенногоПроведенияПередЗаписью = ПроведениеСервер.ПериодыИспользованияОтложенногоПроведения(ГоловнаяОрганизация);

	ПередЗаписью_НаСервере();
	
	Если ЭтоФормаЗаписи Тогда
		МенеджерЗаписи = РеквизитФормыВЗначение("Запись");
	Иначе
		Если ДатаИзменения = Запись.Период Тогда
			МенеджерЗаписи = РеквизитФормыВЗначение("Запись");
		Иначе
			МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись,,"Период");
			МенеджерЗаписи.Период = ДатаИзменения;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьНастройкиУчетаЗатрат = Ложь;
	РедактированиеНастроек       = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат) Тогда
		
		РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
		
		Если РедактированиеНастроек.Модифицированность Или ЭтоНоваяЗапись Тогда
			ЗаписатьНастройкиУчетаЗатрат = Истина;
		КонецЕсли;
		
		Если ЗаписатьНастройкиУчетаЗатрат Тогда
			РедактированиеНастроек.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьНастройкиУчетаЗатрат Тогда
		ЗаписываемыеНастройкиУчетаЗатрат = РедактированиеНастроек.Настройки;
	КонецЕсли;
	
	РегистрыСведений.УчетнаяПолитика.Записать(МенеджерЗаписи, ЗаписываемыеНастройкиУчетаЗатрат, ЭтоФормаЗаписи);
	
	Если ИзменениеНастройкиПоВалютнымКурсам Тогда
		Если ДатаИзменения <> НачалоГода(ДатаИзменения) Тогда
			ТекстСообщения = НСтр("ru = 'Настройки по расчету корректировок в сторону увеличения в валюте можно установить только с начала года'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаИзмененияНастроек");
			Возврат;
		КонецЕсли;
		ЗаписатьКорректировкаПоКурсуОтгрузкиНаСервере(КорректировкаВВалютеПоКурсуОтгрузки = 1, ДатаИзменения);
	КонецЕсли;
	
	Модифицированность = Ложь;
	ЭтоНоваяЗапись     = Ложь;
	
	Если РедактированиеНастроек <> Неопределено Тогда
		РедактированиеНастроек.Модифицированность = Ложь;
	КонецЕсли;
	
	ПослеЗаписи_НаСервере(Закрытие);

	РезультатЗаданияПереключенияОтложенногоПроведения = ПроведениеСервер.ПроверитьОтложенноеПроведениеПослеИзмененияНастроек(
		ПериодыИспользованияОтложенногоПроведенияПередЗаписью,
		УникальныйИдентификатор,
		ГоловнаяОрганизация);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписью_НаСервере()
	
	ПараметрыЗаписи = Новый Структура();
	// Определим, нужно ли выводить предупреждение после записи.
	ЕстьДвиженияЗаПериодПоОрганизации = Ложь;
	ПредупредитьОНеобходимостиПерепроведенияДокументов = Модифицированность;
	
	ДатаСохраненияНастроек = ДатаИзменения;
	ДатаСохраненияНастроекОкончаниеДействия = НайтиДатуОкончанияДействия(ДатаСохраненияНастроек, Запись.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписи_НаСервере(Закрытие)
	
	ОбновитьПовторноИспользуемыеЗначения(); // Записи учетной политики могут быть закешированы без использования функциональных опций
	
	Если НЕ Закрытие Тогда
		Если ЭтоФормаЗаписи Тогда
			ПрочитатьУчетнуюПолитику(Запись.Период);
			УправлениеФормой(ЭтотОбъект);
		Иначе
			ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
			ПрочитатьУчетнуюПолитику(ТекущаяДата);
			ПодготовитьФормуНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредупредитьОНеобходимостиПерепроведенияДокументов Тогда
		ДатаНачала    = НачалоДня(ДатаСохраненияНастроек);
		ДатаОкончания = КонецДня(ДатаСохраненияНастроекОкончаниеДействия);
		ЕстьДвиженияЗаПериодПоОрганизации = ЕстьДвиженияЗаПериод(ДатаНачала, ДатаОкончания, Запись.Организация);
	КонецЕсли;
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, Запись.Организация);
	ПараметрыЗаписи.Вставить("РезультатВыполненияЗаданияКалендаряБухгалтера", РезультатВыполнения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДвиженияЗаПериод(Знач ДатаНач, Знач ДатаКон, Знач Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Период >= &ДатаНач
	|	И Хозрасчетный.Период <= &ДатаКон
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Активность";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи_НаКлиенте()
	
	Если ПараметрыЗаписи.Свойство("РезультатВыполненияЗаданияКалендаряБухгалтера") Тогда
		КалендарьБухгалтераКлиент.ОжидатьЗавершениеЗаполненияВФоне(ПараметрыЗаписи.РезультатВыполненияЗаданияКалендаряБухгалтера);
	КонецЕсли;
	
	Если ЕстьДвиженияЗаПериодПоОрганизации Тогда
		ДатаНач = НачалоДня(ДатаСохраненияНастроек);
		ДатаКон = КонецГода(ДатаСохраненияНастроекОкончаниеДействия);
		ТекстПредупреждения = НСтр("ru = 'Изменены параметры учетной политики.
			|Рекомендуется перепровести документы организации ""%1"" за период: %2'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			Запись.Организация,
			ПредставлениеПериода(ДатаНач, ДатаКон, "ФП = Истина"));
		ВыводитсяПредупреждение = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОбработатьПослеЗаписи_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПослеЗаписи_НаКлиенте()

	Активизировать();

	ПроведениеКлиент.ОжидатьПереключенияОтложенногоПроведения(РезультатЗаданияПереключенияОтложенногоПроведения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат) Экспорт
	
	// В данный обработчик мы можем попасть и при выполнении команды "Записать", и при выполнении команды "Записать и закрыть".
	// Необходимо, чтобы обработчик по-разному отрабатывал в этих ситуациях,
	// т.е. нам необходимо понять, нужно ли закрывать форму. 
	// Для этого используется следующий прием:
	// т.к. при выполнении команды "Записать и закрыть" в процедуру ПередЗакрытием мы попадаем раньше, 
	// чем в обработчик оповещения, то мы можем сбрасывать флаг предупреждения в ней, а не в обработчике.
	// А в обработчике по тому, что флаг сброшен, мы понимаем, что отработало ПередЗакрытием и нужно закрыть форму.

	ОбработатьПослеЗаписи_НаКлиенте();
	
	Если НЕ ВыводитсяПредупреждение Тогда
		Закрыть();
	Иначе
		ВыводитсяПредупреждение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДатуОкончанияДействия(Знач ТекПериод, Знач ТекОрганизация)
	
	Возврат НастройкиУчета.НайтиДатуОкончанияДействия(ТекПериод, ТекОрганизация, "УчетнаяПолитика");

КонецФункции

&НаСервере
Процедура ОтменитьИзмененияИстории()
	
	Модифицированность = Ложь;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ПрочитатьУчетнуюПолитику(ТекущаяДата);
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрименениеФСБУ25(ПрименятьДосрочно)
	
	ЗаписатьПрименениеФСБУ25НаСервере(ПрименятьДосрочно);
	ПоказатьОповещениеПользователя(
		НСтр("ru='Изменение'"),
		, 
		НСтр("ru='Применение ФСБУ 25'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрименениеФСБУ25НаСервере(ПрименятьДосрочно)
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПервогоПримененияФСБУ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ПрименятьФСБУ25Досрочно = ПрименятьДосрочно;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрименениеФСБУ6(ПрименятьДосрочно)
	
	ЗаписатьПрименениеФСБУ6НаСервере(ПрименятьДосрочно);
	ПоказатьОповещениеПользователя(
		НСтр("ru='Изменение'"),
		, 
		НСтр("ru='Применение ФСБУ 6'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрименениеФСБУ6НаСервере(ПрименятьДосрочно)
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПервогоПримененияФСБУ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ПрименятьФСБУ6Досрочно = ПрименятьДосрочно;
	МенеджерЗаписи.Записать();
	
	Если Не ПрименятьДосрочно Тогда
		Запись.ПериодАмортизации = Перечисления.АлгоритмыПериодаАмортизации.СМесяцаСледующегоПослеПризнания;
	КонецЕсли;
	
	Элементы.ГруппаВариантыДатаНачалаАмортизации.ТолькоПросмотр = Не ДоступнаНастройкаДатыНачалаАмортизации(
		ДатаОкончанияДействия,
		ПрименятьДосрочно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьУчитыватьТаруЗаБалансом2021(ПрименятьДосрочно)
	
	ЗаписатьУчитыватьТаруЗаБалансом2021НаСервере(ПрименятьДосрочно);
	ПоказатьОповещениеПользователя(
		НСтр("ru='Изменение'"),
		, 
		НСтр("ru='Учет тары за балансом в 2021 году'"));
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаписатьУчитыватьТаруЗаБалансом2021НаСервере(ПрименятьДосрочно)
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПервогоПримененияФСБУ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.УчитыватьТаруЗаБалансом2021 = ПрименятьДосрочно;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатовРаботы

&НаКлиенте
Процедура ВопросСохранитьИзменения(ИмяОповещения)
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередСменойОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
		ПрочитатьНастройкиОрганизации();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		КонтекстЗаписи = НовыйКонтекстЗаписи();
		КонтекстЗаписи.ИмяСобытия = "ВопросПередСменойОрганизации";
		КонтекстЗаписи.ОповеститьСвязанныеФормы = Истина;
		ЗаписатьНаКлиенте(КонтекстЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		КонтекстЗаписи = НовыйКонтекстЗаписи();
		КонтекстЗаписи.ОповеститьСвязанныеФормы = Истина;
		КонтекстЗаписи.Закрытие = Истина;
		ЗаписатьНаКлиенте(КонтекстЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПереходеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ОтменитьИзмененияИстории();
		ПерейтиВНастройкуНалоговИОтчетов();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		КонтекстЗаписи = НовыйКонтекстЗаписи();
		КонтекстЗаписи.ИмяСобытия = "ВопросПриПереходе";
		КонтекстЗаписи.ДействияПослеЗаписи = Истина;
		ЗаписатьНаКлиенте(КонтекстЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияИзВладельца() Экспорт
	
	КонтекстЗаписи = НовыйКонтекстЗаписи();
	КонтекстЗаписи.ИмяСобытия = "ИзмененияИзВладельца";
	КонтекстЗаписи.ОповеститьСвязанныеФормы = Истина;

	// Не требуется выполнять часть действий (как и при закрытии формы), но форма останется открытой.
	КонтекстЗаписи.Закрытие = Истина;
	
	ЗаписатьНаКлиенте(КонтекстЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеЗаписи()
	
	ПараметрыОповещения = Новый Структура("Организация, Период", Запись.Организация, Запись.Период);
	Оповестить("Запись_УчетнаяПолитика", ПараметрыОповещения);
	
	Оповестить("ИзменениеУчетнойПолитики", Запись.Организация);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьДоступностьВидимостьНастроек(ДоступностьВидимость)
	
	Если ОрганизацияНедоступна Тогда
		Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНедоступная;
		Элементы.ГруппаОрганизацияПечать.Доступность              = Ложь;
		Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанель.Видимость                  = Ложь;
		Элементы.ПрименяетсяС.Видимость                           = Ложь;
	Иначе
		
		Если ДоступностьВидимость Тогда
			Если Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница <> Элементы.ОбщаяСтраницаНастройки Тогда
				Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНастройки;
				Элементы.ГруппаОрганизацияПечать.Доступность   = Истина;
			КонецЕсли;
		Иначе
			Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаПустая;
			Элементы.ГруппаОрганизацияПечать.Доступность              = Ложь;
			Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = Ложь;
			Элементы.ГруппаКоманднаяПанель.Видимость                  = Ложь;
			Элементы.ПрименяетсяС.Видимость                           = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаОрганизация.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ЗаполнитьПоУмолчанию = Ложь)
	
	Если НЕ ЭтоФормаЗаписи Тогда
		Элементы.ГруппаОрганизация.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	Иначе
		Если ЗаполнитьПоУмолчанию Тогда
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Период", НачалоГода(ТекущаяДата));
			Если ЗначениеЗаполнено(Организация) Тогда
				ДанныеЗаполнения.Вставить("Организация", Организация);
			КонецЕсли;
			РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
			ПрочитатьНастройкиУчетаЗатрат();
		КонецЕсли;
	КонецЕсли;
	
	ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ОбособленноеПодразделение");
	
	ТолькоПросмотр = (ЗначениеЗаполнено(Запись.Организация) И ОбособленноеПодразделение)
		Или Не ПравоРедактированияНастроек;
	Элементы.ПрименятьФСБУ6Досрочно.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ПрименятьФСБУ25Досрочно.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.УчитыватьТаруЗаБалансом2021.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.КорректировкаПоКурсуОтгрузки.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ЭтоФормаЗаписи Тогда
		Элементы.Организация.ТолькоПросмотр      = ТолькоПросмотр;
		Элементы.ПрименяетсяС.ТолькоПросмотр     = ТолькоПросмотр;
		Элементы.ГруппаЗаписать.Доступность      = Не ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.ГруппаПечать.Доступность = ПравоРедактированияНастроек;
	Элементы.ГруппаПечать1.Доступность = ПравоРедактированияНастроек;
	
	ПрочитатьПрименениеФСБУ();
	
	ПрочитатьВариантРасчетаКорректировокНаУвеличение();
	
	ЗаполнитьРеквизитыФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Запись    = Форма.Запись;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаСпособОценкиМПЗ",
		"Доступность",
		НЕ Форма.ПлательщикНДФЛ И НЕ Форма.ПрименяетсяУСНДоходыМинусРасходы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтчетность",
		"Видимость",
		Форма.ЭтоЮрЛицо);
		
	// Отображение авансов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтражениеАвансовВыданных",
		"Доступность",
		Форма.ВестиУчетПоДоговорам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияОтражатьАвансыКакАктивы",
		"ОтображениеПодсказки",
		?(Форма.ВестиУчетПоДоговорам, ОтображениеПодсказки.Нет, ОтображениеПодсказки.Кнопка));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтражатьВОтдельныхСтроках",
		"ОтображениеПодсказки",
		?(Форма.ВестиУчетПоДоговорам, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПрименяетсяПБУ18",
		"Видимость",
		Форма.ЭтоЮрЛицо И Форма.ПлательщикНалогаНаПрибыль);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ФормироватьРезервыПоСомнительнымДолгам",
		"Видимость",
		Форма.ЭтоЮрЛицо);
		
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = НЕ Форма.ЭтоФормаЗаписи;
	Элементы.ПрименяетсяС.Видимость                           = Форма.ЭтоФормаЗаписи;
	Элементы.ГруппаОрганизацияПечать.Видимость                = НЕ Форма.ЭтоФормаЗаписи;
	
	Элементы.ГруппаКоманднаяПанель.Видимость = Форма.ЭтоФормаЗаписи;
	
	НачалоОбязательногоПримененияФСБУ6 = БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6();
	Если Форма.ДатаИзменения = НачалоОбязательногоПримененияФСБУ6 Тогда
		// На момент обязательного перехода показываем пользователю, что он состоялся
		Элементы.ГруппаПрименениеФСБУ6.Видимость      = Истина;
		Элементы.ГруппаПрименениеФСБУ6.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаПрименениеФСБУ6.Видимость = Форма.ДатаИзменения < НачалоОбязательногоПримененияФСБУ6
			И Форма.ДатаОкончанияДействия > БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6();
	КонецЕсли;
		
	Элементы.ГруппаВариантыДатаНачалаАмортизации.ТолькоПросмотр = Не ДоступнаНастройкаДатыНачалаАмортизации(
			Форма.ДатаОкончанияДействия,
			Форма.ПрименятьФСБУ6Досрочно > 0);
	
	НачалоОбязательногоПримененияФСБУ25 = НачалоОбязательногоПримененияФСБУ25();
	Если Форма.ДатаИзменения = НачалоОбязательногоПримененияФСБУ25 Тогда
		// На момент обязательного перехода показываем пользователю, что он состоялся
		Элементы.ГруппаПрименениеФСБУ25.Видимость      = Истина;
		Элементы.ГруппаПрименениеФСБУ25.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаПрименениеФСБУ25.Видимость = Форма.ДатаИзменения < НачалоОбязательногоПримененияФСБУ25()
			И Форма.ДатаОкончанияДействия > НачалоДосрочногоПримененияФСБУ25();
	КонецЕсли;
	
	
	НачалоОбязательногоПримененияТарыЗаБалансом = НачалоОбязательногоПримененияТарыЗаБалансом();
	Если Форма.ДатаИзменения = НачалоОбязательногоПримененияТарыЗаБалансом Тогда
		// На момент обязательного перехода показываем пользователю, что он состоялся
		Элементы.ГруппаУчитыватьТаруЗаБалансом.Видимость      = Форма.ИспользоватьВозвратнуюТару;
		Элементы.ГруппаУчитыватьТаруЗаБалансом.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаУчитыватьТаруЗаБалансом.Видимость = Форма.ИспользоватьВозвратнуюТару
			И Форма.ДатаИзменения < НачалоОбязательногоПримененияТарыЗаБалансом
			И Форма.ДатаОкончанияДействия > НачалоДосрочногоПримененияТарыЗаБалансом();
	КонецЕсли;
	
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьПериоды;
	Если Форма.Модифицированность И НЕ Форма.ЭтоФормаЗаписи Тогда
		Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьИзменение;
	КонецЕсли;
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.Страница_БухгалтерскаяОтчетность;
	
	НастроитьПодсказкиВариантыУчетаОтложенногоНалога(
		Элементы.ВариантУчетаОтложенногоНалогаБалансовыйМетод.РасширеннаяПодсказка.Заголовок,
		Элементы.ВариантУчетаОтложенногоНалогаБалансовыйМетодПостоянныеРазницы.РасширеннаяПодсказка.Заголовок,
		Элементы.ВариантУчетаОтложенногоНалогаЗатратныйМетод.РасширеннаяПодсказка.Заголовок,
		Запись.Период);
		
	Если (Форма.ТолькоПросмотр Или Форма.Элементы.СтраницыНастроек.ТолькоПросмотр) И ЭтоАдресВременногоХранилища(Форма.АдресРедактированиеНастроекУчетаЗатрат) Тогда
		Редактирование = ПолучитьИзВременногоХранилища(Форма.АдресРедактированиеНастроекУчетаЗатрат);
		Редактирование.ТолькоПросмотр = Истина;
		ПоместитьВоВременноеХранилище(Редактирование, Форма.АдресРедактированиеНастроекУчетаЗатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	ЭтоЮрЛицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	ПрименяетсяС = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ЭтотОбъект.Запись.Период),
		КонецМесяца(ЭтотОбъект.Запись.Период),
		Истина);
	
	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация);
	
	ЗаполнитьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПериоды()
	
	Если ЭтоФормаЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьИзменение;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзменениеНастроекУчетаЗатрат()
	
	НастроитьОтображениеУчетЗатрат(Ложь);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеУчетЗатрат(МенятьОтображение)
	
	РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
	
	СводнаяИнформацияРедактированиеНастроек = Справочники.НастройкиУчетаЗатрат.СводнаяИнформацияРедактированиеНастроек(
		РедактированиеНастроек);
	
	Элементы.ДекорацияПорядокУчетаЗатрат.Заголовок = СводнаяИнформацияРедактированиеНастроек.Описание;
	Элементы.ГруппаЗатраты.ЗаголовокСвернутогоОтображения = ЗаголовокУчетЗатрат(СводнаяИнформацияРедактированиеНастроек);
	
	ГраницаКомпактногоОписания   = 300;
	ГраницаОченьБольшогоОписания = 900;
	ДлинаОписания = СтрДлина(СводнаяИнформацияРедактированиеНастроек.Описание);
	
	СтандартнаяШиринаЭлементовУчетЗатрат = 60;
	УвеличеннаяШиринаЭлементовУчетЗатрат = 120;
	
	Элементы.ДекорацияПорядокУчетаЗатрат.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	Элементы.ДекорацияПорядокУчетаЗатрат.РасширеннаяПодсказка.МаксимальнаяШирина     = СтандартнаяШиринаЭлементовУчетЗатрат;
	
	ШиринаДекорацияПорядокУчетаЗатрат = СтандартнаяШиринаЭлементовУчетЗатрат;
	Если ДлинаОписания > ГраницаКомпактногоОписания Тогда
		ШиринаДекорацияПорядокУчетаЗатрат = УвеличеннаяШиринаЭлементовУчетЗатрат;
	КонецЕсли;
	Элементы.ДекорацияПорядокУчетаЗатрат.АвтоМаксимальнаяШирина = Ложь;
	Элементы.ДекорацияПорядокУчетаЗатрат.МаксимальнаяШирина     = ШиринаДекорацияПорядокУчетаЗатрат;
	
	Если МенятьОтображение Тогда
		Если ДлинаОписания > ГраницаОченьБольшогоОписания Тогда
			Элементы.ГруппаЗатраты.Скрыть();
		Иначе
			Элементы.ГруппаЗатраты.Показать();
		КонецЕсли;
	КонецЕсли;
	
	Если СводнаяИнформацияРедактированиеНастроек.УстановленыВручную Тогда
		Подсказка = НСтр(
		"ru = 'Настройки учета затрат установлены вручную.
        |Вы можете вернуться к настройкам, устанавливаемым автоматически с учетом выбранной функциональности и фактических данных о деятельности предприятия.'");
	Иначе
		Подсказка = НСтр(
		"ru = 'Настройки учета затрат установлены автоматически, с учетом выбранной функциональности и фактических данных о деятельности предприятия.
         |Вы можете изменить эти настройки при необходимости.'");
	КонецЕсли;
	
	Элементы.ДекорацияПорядокУчетаЗатрат.РасширеннаяПодсказка.Заголовок = Подсказка;
	Элементы.ВосстановитьАвтоматическиеНастройкиУчетаЗатрат.Видимость = СводнаяИнформацияРедактированиеНастроек.УстановленыВручную;
	
	ОбновитьНадписьПереходНЗПДоПродукции();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокУчетЗатрат(СводнаяИнформацияРедактированиеНастроек)
	
	Если СводнаяИнформацияРедактированиеНастроек.КоличествоСчетовУчета = 0 Тогда
		Возврат НСтр("ru = 'Учет затрат'");
	ИначеЕсли СводнаяИнформацияРедактированиеНастроек.КоличествоСчетовУчета = 1 Тогда
		Возврат СтрШаблон(НСтр("ru = 'Учет затрат: счет %1'"), СводнаяИнформацияРедактированиеНастроек.СчетаУчета);
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Учет затрат: счета %1'"), СводнаяИнформацияРедактированиеНастроек.СчетаУчета);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПодсказкиВариантыУчетаОтложенногоНалога(ПодсказкаБалансовыйМетод, ПодсказкаПостоянныеРазницы, ПодсказкаЗатратныйМетод, Период)
	
	// Для вариантов балансового метода
	Если НалогНаПрибыльБухгалтерскийУчетКлиентСервер.Приказ236нОбязателен(Период) Тогда
		ОсобенностиПрименения = "";
	Иначе
		
		ОсобенностиПрименения = НСтр("ru = 'Учет ведется в соответствии с изменениями в ПБУ 18, предусмотренными Приказом Минфина от 20.11.2018 №236н.
	                                 |Решение о применении этих изменений до 2020 года подлежит раскрытию в финансовой отчетности организации.'");
	КонецЕсли;
	
	// - Балансовый метод
	ОписаниеМетода = НСтр("ru = 'Простой и надежный способ учета, основанный на Рекомендации БМЦ ""Порядок учета налога на прибыль"".'");
	
	НастроитьПодсказкуВариантУчетаОтложенногоНалога(
		ПодсказкаБалансовыйМетод,
		ОписаниеМетода,
		ОсобенностиПрименения);
		
	// - Балансовый метод с постоянными и временными разницами
	ОписаниеМетода = НСтр("ru = 'Требуется отражать в учете информацию о постоянных и временных разницах в стоимости активов и обязательств.'");
	
	НастроитьПодсказкуВариантУчетаОтложенногоНалога(
		ПодсказкаПостоянныеРазницы,
		ОписаниеМетода,
		ОсобенностиПрименения);
		
	// Затратный метод
	Если НалогНаПрибыльБухгалтерскийУчетКлиентСервер.Приказ236нОбязателен(Период) Тогда
		ОсобенностиПрименения = НСтр("ru = 'Метод не следует использовать, когда результаты его применения будут существенно отличаться от балансового метода.
                                      |Например, в организациях с обособленными подразделениями, прибыль которых облагается по различным ставкам налога.'");
	Иначе
		ОсобенностиПрименения = "";
	КонецЕсли;
	
	ОписаниеМетода = НСтр("ru = 'Требуется детально прослеживать движение постоянных и временных разниц в стоимости активов, обязательств, доходов и расходов.'");
	
	НастроитьПодсказкуВариантУчетаОтложенногоНалога(
		ПодсказкаЗатратныйМетод,
		ОписаниеМетода,
		ОсобенностиПрименения);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПодсказкуВариантУчетаОтложенногоНалога(Подсказка, ОписаниеМетода, ОсобенностиПрименения)
	
	ЭлементыТекста = Новый Массив;
	
	ЭлементыТекста.Добавить(ОписаниеМетода);
	
	Если Не ПустаяСтрока(ОсобенностиПрименения) Тогда
		ЭлементыТекста.Добавить(ОсобенностиПрименения);
	КонецЕсли;
	
	Подробности = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Подробнее'"),
		, // Шрифт по умолчанию
		, // Цвет текста по умолчанию
		, // Цвет фона по умолчанию
		НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ГиперссылкаОписаниеМетодовУчета());
		
	ЭлементыТекста.Добавить(Подробности);
	
	// Разделители строк
	Для Индекс = 0 По ЭлементыТекста.ВГраница() - 1 Цикл
		ЭлементыТекста[Индекс] = ЭлементыТекста[Индекс] + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	Подсказка = Новый ФорматированнаяСтрока(ЭлементыТекста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаНастройкаДатыНачалаАмортизации(ДатаОкончанияДействия, ПрименятьФСБУ6Досрочно)
	
	Если Не Перечисления.АлгоритмыПериодаАмортизации.ПоддерживаетсяВыборАлгоритма() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаОкончанияДействия >= БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДатаОкончанияДействия < БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПрименятьФСБУ6Досрочно;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПрименяетсяСПриИзмененииСервер()
	
	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация);
	ТекущаяДата = Запись.Период;
	
	ОбновитьНастройкиНалоговогоУчета();
	ОбновитьКонтекстНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ДатаИзмененияНастроекПриИзмененииСервер()
	ДатаИзменения = ТекущаяДата;
	ОбновитьНастройкиНалоговогоУчета();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВНастройкуНалоговИОтчетов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормы, , Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;
	ЭтоФормаЗаписи = Форма.ЭтоФормаЗаписи;
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	ПараметрВыбораОтборПоОрганизации = Неопределено;
	
	Если Не ЭтоФормаЗаписи Тогда
		ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ИначеЕсли Не ТолькоПросмотр Тогда
		ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.ОбособленноеПодразделение", Ложь);
	КонецЕсли;
	
	Если ПараметрВыбораОтборПоОрганизации <> Неопределено Тогда
		ПараметрыВыбораОрганизации = Новый Массив();
		ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
		
		Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииНастроек()
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.НалогиОтчеты"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтотОбъект); // На языке регламентированной отчетности
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ДатаИзмененияНастроек = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			РезультатВыбора.НачалоПериода,
			РезультатВыбора.КонецПериода,
			Истина);
		
		Модифицированность = Истина;
		
		ТекущаяДата   = РезультатВыбора.НачалоПериода;
		ДатаИзменения = РезультатВыбора.НачалоПериода;
		
		ОбновитьКонтекстНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтекстНастроек()
	РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
	РедактированиеНастроек.Настройки.Контекст.Период = ДатаИзменения;
	ОбновитьНадписьПереходНЗПДоПродукции();
КонецПроцедуры

&НаКлиенте
Процедура ПериодСЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ПрименяетсяС = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			РезультатВыбора.НачалоПериода,
			РезультатВыбора.КонецПериода,
			Истина);
		
		Модифицированность = Истина;
		
		Запись.Период = РезультатВыбора.НачалоПериода;
		ТекущаяДата = Запись.Период;
		
		ДатаИзменения = Запись.Период;
		
		ОбновитьКонтекстНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМакета)
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Перед печатью данные учетной политики необходимо записать.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ИмяМакета",   ИмяМакета);
	ПараметрыПечати.Вставить("Организация", Запись.Организация);
	ПараметрыПечати.Вставить("Период",      Запись.Период);
	
	Если ИмяМакета = "РегистрыНУ"
		Или ИмяМакета = "РегистрыБУ" 
		Или ИмяМакета = "ПервичныеДокументы"
		Или ИмяМакета = "ПланСчетов" Тогда
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(Запись.Организация);
		Если ИмяМакета = "РегистрыБУ" Тогда
			ТекстЗаголовка = НСтр("ru = 'Регистры БУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
			ТекстЗаголовка = НСтр("ru = 'Регистры НУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
			ТекстЗаголовка = НСтр("ru = 'Формы первичных документов на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
			ТекстЗаголовка = НСтр("ru = 'Рабочий план счетов на %1 по %2'");
		КонецЕсли;
		ПараметрыПечати.Вставить("ЗаголовокФормы", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка,
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация));
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("РегистрСведений.УчетнаяПолитика",
			ИмяМакета, ОбъектыПечати, ЭтотОбъект, ПараметрыПечати);
		
	Иначе
		ОткрытьФорму("РегистрСведений.УчетнаяПолитика.Форма.ФормаПечати", 
			ПараметрыПечати, ЭтотОбъект, ИмяМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	ИзменениеНастройкиПоВалютнымКурсам = Ложь;
	ОтменитьИзмененияИстории();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНастройки()
	
	Модифицированность = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРедактированияНастроек Тогда
		Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
	Иначе
	
		Элементы.СтраницыНастроек.ТолькоПросмотр = Ложь;
		
		// Так как изменяем данные разных записей в одной форме, 
		// то наложим пессимистическую объектную блокировку вручную - 
		// по специальному набору измерений, который никогда не будет записан в регистр.
		
		КлючЗаписи = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ТекущаяДатаСеанса());
		Если КлючЗаписи <> Неопределено Тогда
			
			РезультатБлокировки = "";
			Попытка 
				ЗаблокироватьДанныеДляРедактирования(
					КлючЗаписи,
					, // Данные не хранятся в ИБ
					УникальныйИдентификатор); // На все время жизни формы
			Исключение
				Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
				РезультатБлокировки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьАвтоматическийВыпускПродукцииПоДаннымПродаж()
	
	РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
	
	НастройкиОбновлены = Справочники.НастройкиУчетаЗатрат.ОбновитьРедактированиеЗаписиУчетнойПолитики(
		РедактированиеНастроек,
		РеквизитФормыВЗначение("Запись", Тип("РегистрСведенийМенеджерЗаписи.УчетнаяПолитика")));
	Если НастройкиОбновлены Тогда
		ПоместитьВоВременноеХранилище(РедактированиеНастроек, АдресРедактированиеНастроекУчетаЗатрат);
		ПрименитьИзменениеНастроекУчетаЗатрат();
	Иначе
		ОтобразитьПериоды();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьАвтоматическиеНастройкиУчетаЗатрат()
	
	РедактированиеНастроек = Справочники.НастройкиУчетаЗатрат.РедактированиеЗаписиУчетнойПолитики(
		РеквизитФормыВЗначение("Запись", Тип("РегистрСведенийМенеджерЗаписи.УчетнаяПолитика")),
		Истина);
	
	ПоместитьВоВременноеХранилище(РедактированиеНастроек, АдресРедактированиеНастроекУчетаЗатрат);
	
	ПрименитьИзменениеНастроекУчетаЗатрат();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю().
		// Копируем их в новый массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВСоставеДебиторскойПриИзменении(Элемент)
	ОтобразитьПериоды();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВОтдельныхСтрокахПриИзменении(Элемент)
	ОтобразитьПериоды();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоОбязательногоПримененияФСБУ25()
	
	Возврат '2022-01-01';
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоДосрочногоПримененияФСБУ25()
	
	Возврат '2021-01-01';
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоОбязательногоПримененияТарыЗаБалансом()
	
	Возврат '2022-01-01';
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоДосрочногоПримененияТарыЗаБалансом()
	
	Возврат '2021-01-01';
	
КонецФункции

&НаСервере
Процедура ОбновитьНадписьПереходНЗПДоПродукции()
	
	Если Модифицированность Тогда

		РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроекУчетаЗатрат);
		НадписьФормаУчетнаяПолитика = ПереходНЗПДетализацияПоПродукции.НадписьФормаУчетнаяПолитика(
			РедактированиеНастроек.Настройки,
			ДатаИзменения);
			
		Если ЭтоФормаЗаписи Тогда
			ЗаполнитьЗначенияСвойств(Элементы.НадписьПереходНаДетализациюНЗПДоПродукцииОрганизацияПериод, НадписьФормаУчетнаяПолитика, "Заголовок, Видимость");
			Элементы.ГруппаПрименяетсяС.ЦветФона = ЦветаСтиля.ОценкаРискаНалоговойПроверкиФонЕстьОснованияЦвет;
		Иначе
			ЗаполнитьЗначенияСвойств(Элементы.НадписьПереходНаДетализациюНЗПДоПродукции, НадписьФормаУчетнаяПолитика, "Заголовок, Видимость");
		КонецЕсли;
			
	Иначе
		
		Если ЭтоФормаЗаписи Тогда
			Элементы.НадписьПереходНаДетализациюНЗПДоПродукцииОрганизацияПериод.Видимость = Ложь;
			Элементы.ГруппаПрименяетсяС.ЦветФона = Новый Цвет;
		Иначе
			Элементы.НадписьПереходНаДетализациюНЗПДоПродукции.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьФормуНаСервере(ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(, ИдентификаторФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКорректировкаПоКурсуОтгрузкиНаСервере(РасчитыватьПоКурсуНаДатуОтгрузки, Период)
	ИзменениеНастройкиПоВалютнымКурсам = Ложь;
	МенеджерЗаписи = РегистрыСведений.НастройкиВариантаРасчетаКорректировокВВалюте.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.РассчитыватьКорректировкуНаУвеличениеПоКурсуНаДатуОтгрузки = РасчитыватьПоКурсуНаДатуОтгрузки;
	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаКлиенте
Процедура КорректировкиВВалютеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "Статье" Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://its.1c.ru/db/accnds#content:1710:hdoc");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

