#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает значения регистра по умолчанию
//
// Параметры:
//   Запись           - РегистрСведенийЗапись - запись регистра
//   ДанныеЗаполнения - Структура - где ключ - имя ресурса
//
Процедура УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения) Экспорт
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Период",
		НачалоГода(ТекущаяДатаСеанса()));
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Организация",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	// Розница
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособОценкиТоваровВРознице",
		Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособОтраженияАвансовВыданных",
		Перечисления.СпособОтраженияАвансовВыданных.ДебиторскаяЗадолженность);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВариантБухгалтерскойОтчетности",
		ВариантБухгалтерскойОтчетностиПоУмолчанию());
	
	// При отключенной опции ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств в учетной политике
	// банковские документы не формируют движений - ожидается, что движения по банку и кассе сформируют кассовые документы.
	// При включенной интеграции с банками остатки по банку должны всегда совпадать с выпиской - поэтому опцию нужно включить.
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств",
		ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена());
		
	// Запасы
	Если (УчетнаяПолитика.СистемаНалогообложения(Запись.Организация, Запись.Период) = Перечисления.СистемыНалогообложения.Упрощенная
			И УчетнаяПолитика.ОбъектНалогообложенияУСН(Запись.Организация, Запись.Период) = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
		ИЛИ (НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация) И УчетнаяПолитика.СистемаНалогообложения(Запись.Организация, Запись.Период) = Перечисления.СистемыНалогообложения.Общая) Тогда
		
		НастройкиУчета.УстановитьЗначениеПоУмолчанию(
			Запись,
			ДанныеЗаполнения,
			"СпособОценкиМПЗ",
			Перечисления.СпособыОценки.ФИФО);
		
	Иначе
		НастройкиУчета.УстановитьЗначениеПоУмолчанию(
			Запись,
			ДанныеЗаполнения,
			"СпособОценкиМПЗ",
			Перечисления.СпособыОценки.ПоСредней);
	КонецЕсли;
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВариантУчетаОтложенногоНалога",
		Перечисления.ВариантыУчетаОтложенногоНалога.Нет);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособОтраженияАвансовВыданных",
		Перечисления.СпособОтраженияАвансовВыданных.ДебиторскаяЗадолженность);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ПериодАмортизации",
		Перечисления.АлгоритмыПериодаАмортизации.ЗначениеПоУмолчанию());
		
КонецПроцедуры

// Возвращает сведения о варианте бухгалтерской отчетности
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой необходимо получить данные.
//   Период      - Дата - период, на который необходимо получить данные.
// 
// Возвращаемые значения:
//  Неопределено                                       - когда нет записей в регистре
//  ПеречислениеСсылка.ВариантыБухгалтерскойОтчетности - значение ресурса ВариантБухгалтерскойОтчетности
//
Функция ВариантБухгалтерскойОтчетностиДействующейУчетнойПолитики(Организация, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, ТекущаяДатаСеанса(), Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаСрезПоследних.ВариантБухгалтерскойОтчетности
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВариантБухгалтерскойОтчетности = Выборка.ВариантБухгалтерскойОтчетности;
	Иначе
		ВариантБухгалтерскойОтчетности = Неопределено;
	КонецЕсли;
	
	Возврат ВариантБухгалтерскойОтчетности;
	
КонецФункции

Функция ДоступноВключениеПлановойСебестоимости(Организация, Период) Экспорт
	
	РезультатЗапросаДокументыБезПлановойСебестоимости = РезультатЗапросаДокументыБезПлановойСебестоимости(Организация, Период, Истина);
	
	Возврат РезультатЗапросаДокументыБезПлановойСебестоимости.Пустой();
	
КонецФункции

// Определяет, существуют ли документы Инвентаризация незавершенного производства, не совместимые с новым вариантом
// учета незавершенного производства.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период - Дата
//  Включение - Булево
// 
// Возвращаемое значение:
//  Булево - Истина, если нет документов, препятствующих изменению варианта учета НЗП.
//
Функция ДоступноИзменениеРежимаОценкиНЗП(Организация, Период, Счет, Включение) Экспорт
	
	ДокументыПрепятствующиеИзменению = ДокументыПрепятствующиеИзменениюРежимаАвтоматическойОценкиНЗП(Организация, Период, Счет, Включение, Истина);
	
	Возврат ДокументыПрепятствующиеИзменению.Количество() = 0;
	
КонецФункции

// Процедура формирует список документов, препятствующих включению плановой себестоимости.
// Предназначена для запуска в фоновом режиме.
//
// Параметры:
//  Параметры		 - Структура - см. параметр ПараметрыПроцедуры в ДлительныеОперации.ВыполнитьВФоне()
//  					Обязательно должны быть свойства:
//						- Организация - Организация, по которой выполняется проверка.
//						- Период - период записи учетной политики, для которой выполняется проверка. 
//  АдресХранилища	 - Строка - адрес временного хранилища, в которое должен быть помещен результат работы процедуры. 
//
Процедура СформироватьСписокДокументовПрепятствующихВключениюПлановойСебестоимости(Параметры, АдресХранилища) Экспорт 
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
		
	РезультатЗапросаДокументыБезПлановойСебестоимости = РезультатЗапросаДокументыБезПлановойСебестоимости(
		Параметры.Организация,
		Параметры.Период);
			
	Выборка = РезультатЗапросаДокументыБезПлановойСебестоимости.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок", НСтр("ru = 'Документы выпуска без плановых цен'"));
		
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"Шапка",
			ПараметрыШапки);
		
	КонецЕсли;
			
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

// Процедура формирует список документов, препятствующих изменению режима документов Инвентаризация НЗП.
// Предназначена для запуска в фоновом режиме.
//
// Параметры:
//  Параметры		 - Структура:
//						* Организация - СправочникСсылка.Организации - Организация, по которой выполняется проверка.
//						* Период - Дата - период записи учетной политики, для которой выполняется проверка.
//						* СчетУчета - ПланСчетовСсылка.Хозрасчетный
//						* УказыватьСуммуНезавершенногоПроизводстваВручную - Булево
//  АдресХранилища	 - Строка - адрес временного хранилища, в которое должен быть помещен результат работы процедуры. 
//
Процедура СформироватьСписокДокументовПрепятствующихПереключениюРежимаНЗП(Параметры, АдресХранилища) Экспорт 
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Включение = Параметры.УказыватьСуммуНезавершенногоПроизводстваВручную;
	
	Выборка = ДокументыПрепятствующиеИзменениюРежимаАвтоматическойОценкиНЗП(
		Параметры.Организация,
		Параметры.Период,
		Параметры.СчетУчета,
		Включение);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		СпособОценки = ?(Включение,
			НСтр("ru = 'с указанием сумм незавершенного производства'"),
			НСтр("ru = 'с автоматической оценкой незавершенного производства'"));
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документы %1'"), 
			СпособОценки);
		ПараметрыШапки.Вставить("Заголовок", Заголовок);
		
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"Шапка",
			ПараметрыШапки);
		
	КонецЕсли;
			
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

// Исправляет (устраняет) в наборе записей учетной политики значения свойств, недоступные (запрещенные)
// исходя из настроек функциональности.
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.УчетнаяПолитика
//
Процедура ИсправитьНедоступныеЗначенияСвойств(НаборЗаписей) Экспорт
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		НедоступныеЗначения = НедоступныеЗначенияСвойств(Запись);
		
		Для Каждого ОписаниеРесурса Из НедоступныеЗначения Цикл
			
			// Не используется ЗаполнитьЗначенияСвойств, чтобы предотвратить модификацию фактически неизменного набора
			
			Если Запись[ОписаниеРесурса.Ключ] = ОписаниеРесурса.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Запись[ОписаниеРесурса.Ключ] = ОписаниеРесурса.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет год перехода на ФСБУ 5.
// Предполагается, что организация применяет новый стандарт с даты обязательного применения (за 2021 год)
// или начиная с года, следующего за годом опубликования (за 2020 год).
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  УчитыватьДосрочноеПрименение - учитываются настройки программы, позволяющие предположить, что стандарт применяется досрочно.
//            Имеет смысл учитывать эти настройки, если речь идет о подготовке отчетности, но не о ежемесячных операциях.
// 
// Возвращаемое значение:
//  Дата         - начало года перехода на ФСБУ 5
//  Неопределено - ФСБУ 5 применяется с даты основания организации
//
Функция ГодПервогоПримененияФСБУ5(Знач Организация, УчитыватьДосрочноеПрименение = Истина) Экспорт
	
	ОбязательноеПрименениеФСБУ5 = БухгалтерскийУчетКлиентСервер.ДатаОбязательногоПримененияФСБУ5();
	
	Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	ОбязательныйПериод = БухгалтерскийУчет.БлижайшийОтчетныйПериод(ОбязательноеПрименениеФСБУ5, Организация);
	Если ОбязательныйПериод.Период > ОбязательноеПрименениеФСБУ5 Тогда
		// Вопрос перехода на ФСБУ 5 для организации не актуален
		Возврат Неопределено;
	КонецЕсли;
	
	ДосрочноеПрименение = Ложь;
	Если УчитыватьДосрочноеПрименение Тогда
		// В программе автоматизирован учет обесценения только по ФСБУ 5.
		// При этом, учет обесценения - это единственная настройка, указывающая на применение ФСБУ 5.
		// Если эта автоматизация используется до даты обязательного применения ФСБУ 5,
		// то стандарт применяется досрочно.
		ДосрочноеПрименение = УчетнаяПолитика.ОбесценениеЗапасов(Организация, ОбязательноеПрименениеФСБУ5 - 1);
	КонецЕсли;
	
	Если ДосрочноеПрименение Тогда
		Год = 12; // Месяцев
		Возврат ДобавитьМесяц(ОбязательноеПрименениеФСБУ5, -Год);
	Иначе
		Возврат ОбязательноеПрименениеФСБУ5;
	КонецЕсли;
	
КонецФункции

// Определяет, может ли организация продолжить применять в указанном периоде
// устаревший ПБУ 5 "Учет материально-производственных запасов"
// (или должна перейти на ФСБУ 5 "Запасы")
//
// Параметры:
//  Период      - Дата
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Булево - Истина, если может применять ПБУ 5; Ложь, если обязана применять ФСБУ 5
//
Функция ПрименяетсяПБУ5(Период, Организация) Экспорт
	
	Если Период >= БухгалтерскийУчетКлиентСервер.ДатаОбязательногоПримененияФСБУ5() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГодПервогоПрименения = ГодПервогоПримененияФСБУ5(Организация, Ложь);
	Если ГодПервогоПрименения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Период < ГодПервогоПрименения;
	
КонецФункции

// Копирует запись учетной политики в новый период
//
// Параметры:
//  Источник - РегистрСведенийКлючЗаписи.УчетнаяПолитика - копируемые данные
//             Допускается передавать коллекцию с одноименными свойствами.
//  ПериодКопии - Дата - новый период
//
Процедура СкопироватьЗапись(Источник, ПериодКопии) Экспорт
	
	МенеджерЧтения = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЧтения, Источник);
	МенеджерЧтения.Прочитать();
	
	Если Не МенеджерЧтения.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МенеджерЧтения);
	
	НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат();
	НастройкиУчетаЗатрат.Контекст.Организация = МенеджерЧтения.Организация;
	Справочники.НастройкиУчетаЗатрат.ПрочитатьСсылку(НастройкиУчетаЗатрат, МенеджерЧтения.НастройкиУчетаЗатрат);
	
	МенеджерЗаписи.Период = ПериодКопии;
	Записать(МенеджерЗаписи, НастройкиУчетаЗатрат);
	
КонецПроцедуры

// Записывает все данные учетной политики, включая хранимые в связанных объектах.
//
// Параметры:
//  МенеджерЗаписи       - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - записываемая учетная политика
//  НастройкиУчетаЗатрат - Структура - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат
//                             сохраняемые настройки учета затрат
//                       - Неопределено - настройки не указаны (в частности, не изменялись пользователем)
//  ЭтоФормаЗаписи       - Булево - Истина, если запись выполняется интерактивно из формы записи учетной политики
//
Процедура Записать(МенеджерЗаписи, НастройкиУчетаЗатрат = Неопределено, ЭтоФормаЗаписи = Ложь) Экспорт
	
	// Сейчас пользователь не взаимодействует явно с записями настроек учета затрат.
	// Фактически они выполняют служебную роль контейнера связанных сведений учетной политики:
	// каждой записи учетной политики соответствует отдельная запись справочника.
	// Предполагается, что в будущих версиях настройки могут стать явными.
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.НастройкиУчетаЗатрат) Тогда
		Если МенеджерЗаписи.Выбран() Тогда
			ЗаписьНастройки = МенеджерЗаписи.НастройкиУчетаЗатрат.ПолучитьОбъект();
		ИначеЕсли НастройкиУчетаЗатрат = Неопределено Тогда
			НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат();
			Справочники.НастройкиУчетаЗатрат.ПрочитатьСсылку(НастройкиУчетаЗатрат, МенеджерЗаписи.НастройкиУчетаЗатрат);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписьНастройки = Неопределено Тогда
		
		МенеджерЗаписи.НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.ПолучитьСсылку();
		
		ЗаписьНастройки = Справочники.НастройкиУчетаЗатрат.СоздатьЭлемент();
		ЗаписьНастройки.Заполнить(Неопределено);
		ЗаписьНастройки.УстановитьСсылкуНового(МенеджерЗаписи.НастройкиУчетаЗатрат);
		
	КонецЕсли;
	
	Если НастройкиУчетаЗатрат <> Неопределено Тогда
		ЗаписьНастройки.Заполнить(НастройкиУчетаЗатрат);
	КонецЕсли;
	
	ЗаписьНастройки.УстановитьНаименованиеПоКонтексту(МенеджерЗаписи);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗаписьНастройки.Модифицированность() Тогда
			ЗаписьНастройки.Записать();
		КонецЕсли;
		
		СчетаПереходНЗПДетализацияПоПродукции = Новый Массив;

		Если НастройкиУчетаЗатрат <> Неопределено Тогда
			СчетаПереходНЗПДетализацияПоПродукции =
				ПереходНЗПДетализацияПоПродукции.СчетаПереходНЗПДетализацияПоПродукции(НастройкиУчетаЗатрат);
		КонецЕсли;
			
		НастроитьПланСчетов(МенеджерЗаписи, НастройкиУчетаЗатрат);
		
		Если СчетаПереходНЗПДетализацияПоПродукции.Количество() > 0 Тогда
			ПереходНЗПДетализацияПоПродукции.СформироватьИАктуализироватьДокументыПерехода(
				МенеджерЗаписи.Организация,
				МенеджерЗаписи.Период,
				СчетаПереходНЗПДетализацияПоПродукции);
		КонецЕсли;
		
		МенеджерЗаписи.Записать(Не ЭтоФормаЗаписи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет дату, до которой действует запись учетной политики 
// (другими словами - дату следующей записи, замещающей действующую).
//
// Параметры:
//  Период      - Дата - любая дата, в которую действует запись
//  Организация - СправочникСсылка.Организации - организация, чья учетная политика интересует
// 
// Возвращаемое значение:
//  Дата - период действия; если не ограничен или не определен, то возвращается пустая дата.
//
Функция ПериодДействия(Период, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитика.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация = &Организация
	|	И УчетнаяПолитика.Период > &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяПолитика.Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	Возврат Выборка.Период - 1;
	
КонецФункции

// Устанавливает использование счета 40 при переходе с 1С:Бухгалтерии 7.7
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, данные которой загружены.
//
Процедура УстановитьИспользованиеСчета40(Организация) Экспорт
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ВариантУчета = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость;
	
	Выборка = РегистрыСведений.УчетнаяПолитика.Выбрать(, , Отбор);
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка, "Период, Организация");
		
		Запись.Прочитать();
		
		Настройки = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(Запись.Период, Запись.Организация, Запись.НастройкиУчетаЗатрат);
		Если Настройки.ВариантУчетаСтоимостиВыпуска = ВариантУчета Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ВариантУчетаСтоимостиВыпуска = ВариантУчета;
		
		Справочники.НастройкиУчетаЗатрат.ДобавитьСчетУчета(Настройки, ПланыСчетов.Хозрасчетный.ВыпускПродукции);
		
		Справочники.НастройкиУчетаЗатрат.Исправить(Настройки);
		
		Записать(Запись, Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сведения об алгоритме периода амортизации действующей учетной политики.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой необходимо получить данные.
//   Период      - Дата - период, на который необходимо получить данные.
// 
// Возвращаемые значения:
//  Неопределено                                   - когда нет записей в регистре
//  ПеречислениеСсылка.АлгоритмыПериодаАмортизации - значение ресурса ПериодАмортизации
//
Функция АлгоритмПериодаАмортизацииУчетнойПолитики(Организация, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Период", ?(Период = Неопределено, ТекущаяДатаСеанса(), Период));
	Запрос.Параметры.Вставить("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитика.ПериодАмортизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитика";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодАмортизации;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.Организация.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	| ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ПараметрыПечати.ИмяМакета, ПараметрыПечати);
	Если ПараметрыПечати.ИмяМакета = "ПланСчетов" Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПланСчетов",
			ПараметрыЗаполнения.ЗаголовокШапки,
			ТабличныйДокументПланСчетов(ПараметрыЗаполнения));
	ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыБУ"
		ИЛИ ПараметрыПечати.ИмяМакета = "РегистрыНУ" 
		ИЛИ ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
		
		Если ПараметрыПечати.ИмяМакета = "РегистрыБУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыБУ", "РегистрыБУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыНУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыНУ", "РегистрыНУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"ПервичныеДокументы", "ПервичныеДокументыСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		КонецЕсли;
		КоллекцияПечатныхФорм.Очистить();
		Для каждого СтрокаТаблицы Из ТаблицаФорм Цикл
			НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
			НоваяСтрока.ИмяМакета = СтрокаТаблицы.Идентификатор;
			НоваяСтрока.СинонимМакета = СтрокаТаблицы.Наименование;
			НоваяСтрока.ТабличныйДокумент = СтрокаТаблицы.ТабличныйДокумент;
			НоваяСтрока.Экземпляров = 1;
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПечатнойФормыУчетнойПолитики(ИмяМакета, Запись) Экспорт
	
	ДанныеПечатнойФормы = Новый Структура("Документ,ЗаголовокФормы");
	ДанныеПечатнойФормы.Документ = Новый ТабличныйДокумент;
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись);
	ДанныеПечатнойФормы.ЗаголовокФормы = ПараметрыЗаполнения.ЗаголовокФормы;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если ИмяМакета = "УчетнаяПолитикаБУ" 
		ИЛИ ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ТабличныйДокумент = ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения);
	ИначеЕсли ИмяМакета = "Приказ" Тогда
		ТабличныйДокумент = ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения);
	КонецЕсли;
	
	ДанныеПечатнойФормы.Документ = ФорматированныйДокументИзТабличного(ТабличныйДокумент);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьШапка);
	
	КонтекстУчетнойПолитики = КонтекстУчетнойПолитики(Запись);
	ЗаполнитьРазделыУчетнойПолитики(КонтекстУчетнойПолитики);
	
	ПараметрыСодержания = ПараметрыЗаполненияСодержанияПечатнойФормы(КонтекстУчетнойПолитики);
	ОбластьСодержания   = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыСодержания);
	ДокументСодержания = Новый ТабличныйДокумент;
	ДокументСодержания.Вывести(ОбластьСодержания);
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	
	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, КонтекстУчетнойПолитики);
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(Результат, ТекстЗаголовка1, МакетОформления);
				ВыводитьЗаголовок2 = Истина;
				НомерЗаголовка2    = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(Результат, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(Результат, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетСодержания   = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("Приказ");
	ОбластьСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьСодержания);
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПланСчетов(ПараметрыЗаполнения)

	Результат = ПланыСчетов.Хозрасчетный.ПечатьПланаСчетов(Ложь, ПараметрыЗаполнения);
	
	Возврат Результат;

КонецФункции

Функция ТаблицаФормДокументовИлиРегистров(ИмяМакетаФорм, ИмяМакетаСписка, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ландшафт",      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТабличныйДокумент");
	
	// 1. Перечень всех форм используемых документов или регистров
	
	ПереченьФорм = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакетаСписка);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	ПереченьФорм.Вывести(ОбластьШапка);
	
	ДокументСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	
	КонтекстУчетнойПолитики = КонтекстУчетнойПолитики(Запись);
	ЗаполнитьРазделыУчетнойПолитики(КонтекстУчетнойПолитики);

	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, КонтекстУчетнойПолитики);
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(ПереченьФорм, ТекстЗаголовка1, МакетОформления);
				НомерЗаголовка2 = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(ПереченьФорм, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(ПереченьФорм, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
				Идентификатор = ДокументСодержания.Область(НомерСтроки, 6, НомерСтроки, 6).Текст;
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Наименование  = Текст;
					НоваяСтрока.Идентификатор = Идентификатор;
					НоваяСтрока.Ландшафт      = ДокументСодержания.Область(НомерСтроки, 7, НомерСтроки, 7).Текст = "1";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Шаблоны всех форм используемых документов или регистров, каждый в отдельном табличном документе
	
	МакетФорм = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакетаФорм);
	Для каждого СтрокаТаблицы Из Результат Цикл
	
		ФормаДокументаРегистра = Новый ТабличныйДокумент;
		ОбластьДокументаРегистра = МакетФорм.ПолучитьОбласть(СтрокаТаблицы.Идентификатор);
		ФормаДокументаРегистра.Вывести(ОбластьДокументаРегистра);
		ФормаДокументаРегистра.ОриентацияСтраницы = ?(СтрокаТаблицы.Ландшафт, 
			ОриентацияСтраницы.Ландшафт, 
			ОриентацияСтраницы.Портрет);
		ФормаДокументаРегистра.АвтоМасштаб        = Истина;
		СтрокаТаблицы.ТабличныйДокумент  = ФормаДокументаРегистра;
	
	КонецЦикла;
	
	НоваяСтрока = Результат.Вставить(0);
	НоваяСтрока.Наименование      = ПараметрыЗаполнения.ЗаголовокПеречня;
	НоваяСтрока.Идентификатор     = "ПереченьФорм";
	НоваяСтрока.Ландшафт          = Ложь;
	НоваяСтрока.ТабличныйДокумент = ПереченьФорм;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматированныйДокументИзТабличного(ТабличныйДокумент)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	СимволОтступаКолонок  = " ";
	
	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		СтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, , НомерСтроки);
		
		Параграф = ФорматированныйДокумент.Элементы.Добавить();
		Параграф.ГоризонтальноеПоложение = СтрокаТаблицы.Область(1, 1, 1, 1).ГоризонтальноеПоложение;
		
		// Форматированный документ не предполагает колонки, поэтому развернем колонки одной строки в последовательность строк.
		
		РазмерОтступа = 0;
		Для НомерКолонки = 1 По СтрокаТаблицы.ШиринаТаблицы Цикл
			
			Ячейка = СтрокаТаблицы.Область(1, НомерКолонки, 1, НомерКолонки);
			Если ПустаяСтрока(Ячейка.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			// В форматированном документе разделители строк представлены как элементы типа ПереводСтрокиФорматированногоДокумента.
			// Соответственно, тексты (элементы типа ТекстФорматированногоДокумента) предполагаются однострочными,
			// не содержащими разделители строк.
			// При попытке добавить элемент типа ТекстФорматированногоДокумента с значением, содержащим многострочный текст,
			// фактически будет добавлен набор элементов типа ТекстФорматированногоДокумента и ПереводСтрокиФорматированногоДокумента.
			НачалоЭлементовКолонки = Параграф.Элементы.Количество();
			Параграф.Элементы.Добавить(Ячейка.Текст, Тип("ТекстФорматированногоДокумента"));
			
			// Оформим добавленные элементы
			ОтступКолонки = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(СимволОтступаКолонок, РазмерОтступа);
			РазмерОтступа = РазмерОтступа + 1;
			
			Для ИндексЭлемента = НачалоЭлементовКолонки По Параграф.Элементы.Количество() - 1 Цикл
				Элемент = Параграф.Элементы[ИндексЭлемента];
				Если ТипЗнч(Элемент) <> Тип("ТекстФорматированногоДокумента") Тогда
					Продолжить;
				КонецЕсли;
				Элемент.Текст = ОтступКолонки + Элемент.Текст;
				ЗаполнитьЗначенияСвойств(Элемент, Ячейка, "Шрифт,ЦветТекста,ЦветФона");
			КонецЦикла;
			
		КонецЦикла;
		
		Если Параграф.Элементы.Количество() = 0 Тогда
			Параграф.Элементы.Добавить("", Тип("ПереводСтрокиФорматированногоДокумента"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматированныйДокумент;

КонецФункции

Функция КонтекстУчетнойПолитики(Запись)
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Запись",      Запись);
	Контекст.Вставить("Период",      НачалоМесяца(Запись.Период));
	Контекст.Вставить("Организация", Запись.Организация);
	Контекст.Вставить("Разделы",     Новый Массив); // Из НовыйРазделУчетнойПолитики
	
	Возврат Контекст;
	
КонецФункции

Функция НовыйРазделУчетнойПолитики()
	
	Раздел = Новый Структура;

	// Разделы выделяются для удобства описания.
	// Имена всех условий и параметров должны быть уникальны во всех разделах и всех макетах.
	
	Раздел.Вставить("Условия",   Новый Структура);
	Раздел.Вставить("Параметры", Новый Структура);
	
	Возврат Раздел;
	
КонецФункции

Процедура ЗаполнитьРазделыУчетнойПолитики(КонтекстУчетнойПолитики)
	
	ЗаполнитьРазделВнеоборотныеАктивы(КонтекстУчетнойПолитики);
	
КонецПроцедуры

Процедура ЗаполнитьРазделВнеоборотныеАктивы(Контекст)
	
	Раздел = НовыйРазделУчетнойПолитики();
	Контекст.Разделы.Добавить(Раздел);
	
	// В период с 2021 по 2024 год постепенно менялся порядок учета внеоборотных активов (основных средств и нематериальных активов).
	// До 2020 года применялись ПБУ 6, ПБУ 14, ПБУ 17
	// С 2021 года для основных средств досрочно можно было применять ФСБУ 6 (вместо ПБУ 6).
	//             Одновременно с ФСБУ 6 применяется ФСБУ 26.
	// С 2022 года ФСБУ 6 и ФСБУ 26 применяются обязательно
	// С 2024 года для нематериальных активов применяется ФСБУ 14 (вместо ПБУ 14 и ПБУ 17).
	//             При этом ФСБУ 26 расширен положениями, касающимися нематериальных активов.
	// С учетом такой истории тексты учетной политики в части внеоборотных активов существенно отличались.

	ГодУчетнойПолитики = Год(Контекст.Период);
	
	ВедетсяУчетОсновныхСредств = ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	ВедетсяУчетНМА             = ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА");
	ПрименяетсяПБУ6  = ВедетсяУчетОсновныхСредств И УчетОС.ПрименяетсяПБУ6(Контекст.Период, Контекст.Организация);
	ПрименяетсяПБУ14 = УчетНМА.ПрименяетсяПБУ14(Контекст.Период);
	
	Раздел.Условия.Вставить("ПрименяетсяПБУ6",  ПрименяетсяПБУ6);
	Раздел.Условия.Вставить("ПрименяетсяПБУ14", ВедетсяУчетНМА И ПрименяетсяПБУ14);
	
	ПереходФСБУ6         = Ложь; // = "В периоде учетной политики произошел переход на ФСБУ 6"
	ПереходФСБУ6Досрочно = Ложь;
	ПереходФСБУ14        = Ложь;
	
	Если ПрименяетсяПБУ6 И ПрименяетсяПБУ14 Тогда
		// Текст и заголовок статичные, содержатся в макете
		Возврат;
	КонецЕсли;
	
	// В общем случае, текст для основных средств и внеоборотных активов общий.
	// Но в частном случае может содержать только основные средства или только нематериальные активы.
	КлассыАктивов = Новый Структура;
	КлассыАктивов.Вставить("ОсновныеСредства",     ВедетсяУчетОсновныхСредств);
	КлассыАктивов.Вставить("НематериальныеАктивы", Истина);
	
	Если ПрименяетсяПБУ14 Тогда
		КлассыАктивов.НематериальныеАктивы = Ложь;
		// При включенной функциональности выводится статичный текст из макета
	ИначеЕсли Не ВедетсяУчетНМА Тогда
		КлассыАктивов.НематериальныеАктивы = Ложь;
		Раздел.Условия.Вставить("ПрименяетсяФСБУ14", Истина);
		// Выводится статичный текст про непризнание нематериальных активов.
		// Такой текст нужен из-за особенностей текста стандарта:
		// стандарт не допускает его неприменение, но допускает особый порядок применения - считать затраты расходами сразу.
	Иначе
		ПереходФСБУ14 = (ГодУчетнойПолитики = Год(УчетНМА.НачалоОбязательногоПримененияФСБУ14()));
	КонецЕсли;
	
	Если Не КлассыАктивов.ОсновныеСредства И Не КлассыАктивов.НематериальныеАктивы Тогда
		Возврат;
	КонецЕсли;
	
	Если КлассыАктивов.ОсновныеСредства Тогда
		
		Если ФСБУ6ПрименяетсяДосрочно(Контекст.Организация, Контекст.Период) Тогда
			ПереходФСБУ6         = Не ОтказалсяОтПереходаНаФСБУ6(Контекст.Организация);
			ПереходФСБУ6Досрочно = ПереходФСБУ6;
		ИначеЕсли ГодУчетнойПолитики = Год(БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6()) Тогда
			ПереходФСБУ6         = Не ОтказалсяОтПереходаНаФСБУ6(Контекст.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	// Основной текст учетной политики
	Раздел.Условия.Вставить("ВедетсяУчетВнеоборотныхАктивов", Истина);
	
	// 0. Заголовок, повторяющиеся элементы
	ЭлементыТекста = ТекстыКлассовАктивов(НСтр("ru = 'основных средств'"), НСтр("ru = 'нематериальных активов'"), КлассыАктивов);
	ТекстОбъектов = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ЭлементыТекста); // родительный падеж
	Раздел.Параметры.Вставить("ВнеоборотныхАктивов", ТекстОбъектов);
	Раздел.Параметры.Вставить("ЗаголовокУчетВнеоборотныхАктивов", СтрШаблон(НСтр("ru = 'Учет %1'"), ТекстОбъектов));
	
	ТекстОбъектовСкобки = ТекстОбъектов;
	Если КлассыАктивов.ОсновныеСредства И КлассыАктивов.НематериальныеАктивы Тогда
		ТекстОбъектовСкобки = НСтр("ru = 'основных средств (нематериальных активов)'");
	КонецЕсли;
	Раздел.Параметры.Вставить("ВнеоборотныхАктивовСкобки", ТекстОбъектовСкобки);

	// 1. Несущественные объекты
	Раздел.Параметры.Вставить(
		"ПунктыЛимитСтоимостиВнеоборотныхАктивов",
		ТекстКлассовАктивов(НСтр("ru = 'п. 5 ФСБУ 6'"), НСтр("ru = 'п. 7 ФСБУ 14'"), КлассыАктивов));
		
	Если КлассыАктивов.ОсновныеСредства Тогда
		Раздел.Параметры.Вставить(
			"ЛимитСтоимостиВнеоборотныхАктивовИсключения",
			НСтр("ru = ', за исключением основных средств, относящихся к недвижимому имуществу'"));
	КонецЕсли;
	
	// 2. Группы объектов
	Предложения = Новый Массив;
	Если КлассыАктивов.ОсновныеСредства Тогда
		Предложения.Добавить(НСтр("ru = 'Основные средства классифицируются по группам:'"));
		Предложения.Добавить(ГруппыВнеоборотныхАктивовДляПечати(Перечисления.ГруппыОС));
	КонецЕсли;
	Если КлассыАктивов.НематериальныеАктивы Тогда
		Предложения.Добавить(НСтр("ru = 'Нематериальные активы классифицируются по группам:'"));
		Предложения.Добавить(ГруппыВнеоборотныхАктивовДляПечати(Перечисления.ВидыНематериальныхАктивов));
	КонецЕсли;
	Раздел.Параметры.Вставить("ГруппыВнеоборотныхАктивов", СтрСоединить(Предложения, Символы.ПС));
	
	// 3. Опции, где стандарт предписывает сделать выбор
	Текст = ТекстКлассовАктивов(НСтр("ru = 'подп. а п. 13 ФСБУ 6'"), НСтр("ru = 'подп. а п. 15 ФСБУ 14'"), КлассыАктивов);
	Раздел.Параметры.Вставить("ПунктыОценкаВнеоборотныхАктивов", Текст);
	
	АлгоритмПериодаАмортизации = УчетнаяПолитика.АлгоритмПериодаАмортизации(Контекст.Период, Контекст.Организация);
	Раздел.Условия.Вставить(
		"ЗадерживатьНачислениеАмортизации",
		(АлгоритмПериодаАмортизации = Перечисления.АлгоритмыПериодаАмортизации.СМесяцаСледующегоПослеПризнания));
	
	// 4. Упрощенные способы
	
	Шаблон = НСтр("ru = 'Организация применяет %1.'");
	Предложения = Новый Массив; // содержат причастные обороты, выделенные запятыми с двух сторон
	// - капитальные вложения
	Текст = НСтр("ru = 'подп. а п. 4 и п.13 ФСБУ 26'");
	Если ГодУчетнойПолитики < Год(УчетНМА.НачалоОбязательногоПримененияФСБУ14()) Тогда
		// Текст стандарта еще не содержал подп. а и упрощения в п. 13
		Текст = НСтр("ru = 'п. 4 ФСБУ 26'");
	КонецЕсли;
	Предложения.Добавить(СтрШаблон(
		НСтр("ru = 'упрощенные способы ведения учета капитальных вложений, предусмотренные %1,'"),
		Текст));
	// - основные средства
	Если КлассыАктивов.ОсновныеСредства Тогда
		Предложения.Добавить(НСтр("ru = 'упрощенные способы ведения учета основных средств, предусмотренные п. 3 ФСБУ 6,'"));
	КонецЕсли;
	// - НМА
	Если КлассыАктивов.НематериальныеАктивы Тогда
		Предложения.Добавить(НСтр("ru = 'упрощенные способы ведения учета нематериальных вложений, предусмотренные п. 3 ФСБУ 14,'"));
	КонецЕсли;
	ПодготовитьПунктуациюПричастныхОборотовСписка(Предложения);
	Раздел.Параметры.Вставить(
		"УпрощенныеСпособыУчетаВнеоборотныхАктивов",
		СтрШаблон(Шаблон, ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Предложения)));
	
	// 5. Изменение учетной политики
	Предложения = Новый Массив;
	Если ПереходФСБУ6Досрочно Тогда
		Предложения.Добавить(НСтр("ru = 'ФСБУ 26/2020 ""Капитальные вложения"", ФСБУ 6/2020 ""Основные средства"" применяются с отчетности за 2021 год.'"));
	КонецЕсли;
	Если ПереходФСБУ6 Тогда
		Предложения.Добавить(НСтр("ru = 'Последствия изменений учетной политики в связи с началом применения ФСБУ 6 отражаются в соответствии с п. 49 ФСБУ 6.'"));
	КонецЕсли;
	Если ПереходФСБУ14 Тогда
		Предложения.Добавить(НСтр("ru = 'Последствия изменений учетной политики в связи с началом применения ФСБУ 14 отражаются в соответствии с п. 53 ФСБУ 14 и п. 25.1 ФСБУ 26.'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Предложения) Тогда
		Раздел.Параметры.Вставить("ПереходныеПоложенияВнеоборотныхАктивов", СтрСоединить(Предложения, Символы.ПС));
		Раздел.Условия.Вставить("ПереходныеПоложенияВнеоборотныхАктивов", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПунктуациюПричастныхОборотовСписка(Предложения)
	
	// Причастные обороты, как правило, обособляются запятыми с двух сторон - в том числе,
	// когда они содержатся в однородных членах предложения, соединенных союзом.
	// Например: "кипарисы, окаймляющие верхнюю террасу, и гранатовое дерево".
	// В то же время, не допускается удвоение знаков пунктуации (,, или ,.)
	
	// Поэтому, нужно удалить закрывающие запятые из всех элементов списка, кроме предпоследнего (предшествующего соединительному союзу).
	
	ИндексИсключение = Предложения.ВГраница() - 1;
	Для Индекс = 0 По Предложения.ВГраница() Цикл
		
		Если Индекс = ИндексИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		Предложение = Предложения[Индекс];
		
		Если Не СтрЗаканчиваетсяНа(Предложение, ",") Тогда
			Продолжить;
		КонецЕсли;
		
		Предложения[Индекс] = Лев(Предложение, СтрДлина(Предложение) - 1);
		
	КонецЦикла;
	
КонецПроцедуры


Функция ТекстыКлассовАктивов(ТекстОсновныеСредства, ТекстНематериальныеАктивы, КлассыАктивов)
	
	Тексты = Новый Массив;
	Если КлассыАктивов.ОсновныеСредства Тогда
		Тексты.Добавить(ТекстОсновныеСредства);
	КонецЕсли;
	Если КлассыАктивов.НематериальныеАктивы Тогда
		Тексты.Добавить(ТекстНематериальныеАктивы);
	КонецЕсли;
	Возврат Тексты;
	
КонецФункции

Функция ТекстКлассовАктивов(ТекстОсновныеСредства, ТекстНематериальныеАктивы, КлассыАктивов)
	Возврат СтрСоединить(ТекстыКлассовАктивов(ТекстОсновныеСредства, ТекстНематериальныеАктивы, КлассыАктивов), ", ");
КонецФункции

Функция ПараметрыЗаполненияСодержанияПечатнойФормы(Контекст)

	// Параметры заполнения - это параметры, используемые в макете (в ячейках с видом заполнения Параметры или Шаблон).
	// Они могут быть описаны в разделах (Контекст.Раздел - см. НовыйРазделУчетнойПолитики)
	// или непосредственно в этой процедуре.
	// Описание в разделах позволяет расположить опции и параметры рядом.

	Результат = Новый Структура;
	Для Каждого Раздел Из Контекст.Разделы Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, Раздел.Параметры);
	КонецЦикла;
	
	Запись = Контекст.Запись;
	
	// Налог на прибыль
	Результат.Вставить("СпособОценкиМПЗ", УчетнаяПолитика.СпособОценкиМПЗ(Запись.Организация, Запись.Период));
	
	// ФСБУ 5
	ГодПервогоПримененияФСБУ5 = ГодПервогоПримененияФСБУ5(Запись.Организация);
	Если ГодПервогоПримененияФСБУ5 = Неопределено Тогда
		Результат.Вставить("ГодПервогоПримененияФСБУ5", "");
	Иначе
		Результат.Вставить("ГодПервогоПримененияФСБУ5", Формат(ГодПервогоПримененияФСБУ5, "ДФ=yyyy"));
	КонецЕсли;
	
	НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(Запись.Период, Запись.Организация);
		
	Результат.Вставить("БазаРаспределенияКосвенныхЗатрат", ПредставлениеБазыРаспределенияКосвенныхЗатрат(НастройкиУчетаЗатрат));
	
	Результат.Вставить("МетодНачисленияАмортизацииНУ", 
		УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Запись.Организация, Запись.Период));
	Результат.Вставить("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", 
		УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Запись.Организация, Запись.Период));
		
	// Резервы отпусков
	НастройкиРезервовОтпусков = УчетЗарплаты.НастройкиРезервовОтпусков(Запись.Организация, Запись.Период);
	Результат.Вставить("НормативОтчисленийВРезервОтпусков", 
		НастройкиРезервовОтпусков.НормативОтчисленийВРезервОтпусков);
	Результат.Вставить("ПредельнаяВеличинаОтчисленийВРезервОтпусков", 
		НастройкиРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков);
		
	Возврат Результат;

КонецФункции

Процедура УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Контекст)
	
	// Под "опциями" понимаются булевы условия, указанные в колонках "Условие истина" и "Условие ложь" макетов учетной политики,
	// а также списков документов, регистров (макеты с суффиксом Служебный).
	// В качестве них можно без описания использовать предопределенные имена, соответствующие функциональным опциям конфигурации.
	// Дополнительно к предопределенным, опции могут быть описаны в разделах (Контекст.Раздел - см. НовыйРазделУчетнойПолитики)
	// или непосредственно в этой процедуре.
	// Описание в разделах позволяет расположить опции и параметры рядом.
	// Не описанные опции имеют значение Ложь.
	Для Каждого Раздел Из Контекст.Разделы Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ЗначенияОпций, Раздел.Условия);
	КонецЦикла;
	
	// Опции макета УчетнаяПолитикаБУ для формирования текста учетной политики
	
	Запись = Контекст.Запись;
	
	ВедетсяУчетЗапасов         = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	
	ЗначенияОпций.Вставить("ВедетсяУчетЗапасов",                 ВедетсяУчетЗапасов);
	ЗначенияОпций.Вставить("ОценкаЗапасовСредняя",               Ложь);
	ЗначенияОпций.Вставить("ОценкаЗапасовФИФО",                  Ложь);
	ЗначенияОпций.Вставить("ОценкаПоПродажнойСтоимости",         Ложь);
	ЗначенияОпций.Вставить("ОбесценениеЗапасов",                 Ложь);
	ЗначенияОпций.Вставить("ПрименяетсяФСБУ5",                   Ложь);
	ЗначенияОпций.Вставить("ПрименяетсяПБУ5",                    Ложь);
	ЗначенияОпций.Вставить("ПервоеПрименениеФСБУ5",              Ложь);
	ЗначенияОпций.Вставить("КалькулированиеСебестоимости",       Ложь);
	ЗначенияОпций.Вставить("ВыпускПродукции",                    Ложь);
	ЗначенияОпций.Вставить("НезавершенноеПроизводство",          Ложь);
	ЗначенияОпций.Вставить("ОценкаПродукцииПоПлановойСтоимости", Ложь);
	ЗначенияОпций.Вставить("СтоимостьЗапасовВключаетУправленческиеРасходы", Ложь);
	
	Если ВедетсяУчетЗапасов Тогда
		
		СпособОценки = УчетнаяПолитика.СпособОценкиМПЗ(Запись.Организация, Запись.Период);
		ЗначенияОпций["ОценкаЗапасовФИФО"]    = (СпособОценки = Перечисления.СпособыОценки.ФИФО);
		ЗначенияОпций["ОценкаЗапасовСредняя"] = Не ЗначенияОпций["ОценкаЗапасовФИФО"];
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Запись.Организация, Запись.Период);
		ЗначенияОпций["ОценкаПоПродажнойСтоимости"] =
			(СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
		ЗначенияОпций["ОбесценениеЗапасов"] = УчетнаяПолитика.ОбесценениеЗапасов(Запись.Организация, Запись.Период);
		
		ГодПервогоПримененияФСБУ5 = ГодПервогоПримененияФСБУ5(Запись.Организация);
		ЗначенияОпций["ПервоеПрименениеФСБУ5"] = (ГодПервогоПримененияФСБУ5 = Запись.Период);
		ЗначенияОпций["ПрименяетсяФСБУ5"]      = (ГодПервогоПримененияФСБУ5 = Неопределено Или Запись.Период >= ГодПервогоПримененияФСБУ5);
		ЗначенияОпций["ПрименяетсяПБУ5"]       = Не ЗначенияОпций["ПрименяетсяФСБУ5"];
		
		НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(Запись.Период, Запись.Организация);
		
		КалькулированиеСебестоимости = Ложь;
		Для Каждого ОписаниеНастроекЗакрытияСчета Из НастройкиУчетаЗатрат.Закрытие Цикл
			
			Если ОписаниеНастроекЗакрытияСчета.Значение.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
				Продолжить;
			КонецЕсли;
			
			КалькулированиеСебестоимости = Истина;
			
			Прервать;
			
		КонецЦикла;
		
		Если КалькулированиеСебестоимости Тогда
			
			ЗначенияОпций["КалькулированиеСебестоимости"] = КалькулированиеСебестоимости;
			
			ЗначенияОпций["ВыпускПродукции"] = НастройкиУчетаЗатрат.ВыпускПродукции;
			Для Каждого ОписаниеНастроекЗакрытияСчета Из НастройкиУчетаЗатрат.Закрытие Цикл
				НезавершенноеПроизводство = ОписаниеНастроекЗакрытияСчета.Значение.НезавершенноеПроизводство;
				Если ЗначениеЗаполнено(НезавершенноеПроизводство)
					И НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется Тогда
					ЗначенияОпций["НезавершенноеПроизводство"] = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ВариантУчетаСтоимостиВыпуска = Справочники.НастройкиУчетаЗатрат.ВариантУчетаСтоимостиВыпуска(
				Запись.Период,
				Запись.Организация);
			ЗначенияОпций["ОценкаПродукцииПоПлановойСтоимости"] =
				(ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость);
				
			СчетаОбщехозяйственныеРасходы = УчетЗатрат.СчетаРасходов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы));
			Для Каждого ОписаниеНастроекЗакрытияСчета Из НастройкиУчетаЗатрат.Закрытие Цикл
				
				Если СчетаОбщехозяйственныеРасходы.Найти(ОписаниеНастроекЗакрытияСчета.Ключ) <> Неопределено
					И ОписаниеНастроекЗакрытияСчета.Значение.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
					
					ЗначенияОпций["СтоимостьЗапасовВключаетУправленческиеРасходы"] = Истина;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СпособПогашенияСтоимостиСпецодеждыНУ = УчетнаяПолитика.СпособПогашенияСтоимостиСпецодеждыНУ(
		Запись.Организация, Запись.Период);
	ЗначенияОпций.Вставить("ПогашениеСтоимостиСпецодеждыНУАналогичноБУ",
		СпособПогашенияСтоимостиСпецодеждыНУ = Перечисления.СпособыПогашенияСтоимостиНУ.АналогичноСпособуПринятомуДляБухгалтерскогоУчета);
	
	ПрименяетсяФСБУ25 = УчетнаяПолитика.ПрименяетсяФСБУ25(Запись.Организация, Запись.Период)
		И (ПолучитьФункциональнуюОпцию("ВедетсяУчетПредметовАренды")
		Или ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества"));
	ЗначенияОпций.Вставить("ПрименяетсяФСБУ25", ПрименяетсяФСБУ25);
	
	ЗначенияОпций.Вставить("ПрименяетсяФСБУ27", УчетнаяПолитика.ПрименяетсяФСБУ27(Запись.Период));
	
	// Расчеты по налогу на прибыль.
	ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Запись.Период, Запись.Организация);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Запись.Организация, Запись.Период);
	
	ВедетсяУчетОтложенныхНалоговыхАктивовИОбязательств = ПлательщикНалогаНаПрибыль
		И ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.Нет;
	
	ЗначенияОпций.Вставить("ВедетсяУчетОтложенныхНалоговыхАктивовИОбязательств", ВедетсяУчетОтложенныхНалоговыхАктивовИОбязательств);
	
	ЗначенияОпций.Вставить("ПрименяетсяЗатратныйМетод",
		ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод);
	ЗначенияОпций.Вставить("ПрименяетсяБалансовыйМетод",
		ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод);
	ЗначенияОпций.Вставить("ПрименяетсяБалансовыйМетодСПостояннымиРазницами",
		ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы);
	
КонецПроцедуры

Функция ПредставлениеБазыРаспределенияКосвенныхЗатрат(НастройкиУчетаЗатрат)
	
	БазыРаспределения = Новый ТаблицаЗначений;
	БазыРаспределения.Колонки.Добавить(
		"БазаРаспределения",
		Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	БазыРаспределения.Колонки.Добавить(
		"Порядок",
		Новый ОписаниеТипов("Число"));
	БазыРаспределения.Колонки.Добавить(
		"ПорядокРоли",
		Новый ОписаниеТипов("Число"));
	БазыРаспределения.Индексы.Добавить("БазаРаспределения");
	
	ПорядокРолей = Новый Массив;
	ПорядокРолей.Добавить(Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты);
	ПорядокРолей.Добавить(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости);
	ПорядокРолей.Добавить(Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж);
	
	Для Каждого Счет Из НастройкиУчетаЗатрат.СчетаУчета Цикл
		
		НастройкаЗакрытияСчета = НастройкиУчетаЗатрат.Закрытие[Счет];
		
		ПорядокРоли = ПорядокРолей.Найти(НастройкаЗакрытияСчета.Роль);
		Если ПорядокРоли = Неопределено Тогда
			ПорядокРоли = ПорядокРолей.Количество();
		КонецЕсли;
		
		Для Каждого НастройкаРаспределения Из НастройкаЗакрытияСчета.Распределение Цикл
			
			ОписаниеРаспределения = БазыРаспределения.Найти(НастройкаРаспределения.БазаРаспределения, "БазаРаспределения");
			Если ОписаниеРаспределения <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеРаспределения = БазыРаспределения.Добавить();
			ОписаниеРаспределения.БазаРаспределения = НастройкаРаспределения.БазаРаспределения;
			ОписаниеРаспределения.Порядок     = БазыРаспределения.Индекс(ОписаниеРаспределения);
			ОписаниеРаспределения.ПорядокРоли = ПорядокРоли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	БазыРаспределения.Сортировать("ПорядокРоли, Порядок");
	
	ПредставленияБазРаспределения = Новый Массив;
	Для Каждого ОписаниеРаспределения Из БазыРаспределения Цикл
		ПредставлениеБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеДательныйПадеж(
			ОписаниеРаспределения.БазаРаспределения);
		Если ПустаяСтрока(ПредставлениеБазы) Тогда
			Продолжить;
		КонецЕсли;
		ПредставленияБазРаспределения.Добавить(ПредставлениеБазы);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПредставленияБазРаспределения) Тогда
		ПредставленияБазРаспределения.Добавить(
			Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеДательныйПадеж(
				Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию()));
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставленияБазРаспределения, НСтр("ru = ', '"));
	
КонецФункции

Функция ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций)
	
	СтрокаОпцийИстина = ДокументСодержания.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
	ОпцииИстина       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийИстина);
	СтрокаОпцийЛожь   = ДокументСодержания.Область(НомерСтроки, 5, НомерСтроки, 5).Текст;
	ОпцииЛожь         = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийЛожь);
	
	Для каждого ИмяОпции Из ОпцииИстина Цикл
		ЗначениеОпции = ЗначениеОпции(ИмяОпции, ЗначенияОпций, ПараметрыОпций);
		Если НЕ ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяОпции Из ОпцииЛожь Цикл
		ЗначениеОпции = ЗначениеОпции(ИмяОпции, ЗначенияОпций, ПараметрыОпций);
		Если ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

Функция ЗначениеОпции(ИмяОпции, ЗначенияОпций, ПараметрыОпций)
	
	ЗначениеОпции = ЗначенияОпций[ИмяОпции];
	Если ЗначениеОпции <> Неопределено Тогда
		Возврат ЗначениеОпции;
	КонецЕсли;
	
	Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
		ЗначениеОпции = Ложь;
	Иначе
		ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции, ПараметрыОпций);
	КонецЕсли;
	
	ЗначенияОпций.Вставить(ИмяОпции, ЗначениеОпции);
	Возврат ЗначениеОпции;
	
КонецФункции

Процедура ВывестиЗаголовок1(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьЗаголовок1 = МакетОформления.ПолучитьОбласть("Заголовок1");
	ОбластьЗаголовок1.Параметры.Заголовок1 = Текст;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок1);

КонецПроцедуры

Процедура ВывестиЗаголовок2(ТабличныйДокумент, Текст, НомерЗаголовка, МакетОформления)

	ОбластьЗаголовок2 = МакетОформления.ПолучитьОбласть("Заголовок2");
	ОбластьЗаголовок2.Параметры.Заголовок2 = ?(НомерЗаголовка > 0, Формат(НомерЗаголовка, "ЧГ=") + ". " + Текст, Текст);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок2);

КонецПроцедуры

Процедура ВывестиТекст(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьТекст = МакетОформления.ПолучитьОбласть("Текст");
	ОбластьТекст.Параметры.Текст = Текст;
	ТабличныйДокумент.Вывести(ОбластьТекст);

КонецПроцедуры

Процедура ВывестиРазделитель(ТабличныйДокумент, МакетОформления)

	ОбластьРазделитель = МакетОформления.ПолучитьОбласть("Разделитель");
	ТабличныйДокумент.Вывести(ОбластьРазделитель);

КонецПроцедуры

Функция ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись)
	
	ДатаПриказа = Запись.Период;
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("НомерПриказа",     "___________");
	ПараметрыШапки.Вставить("ДатаПриказа",      Формат(ДатаПриказа, "ДЛФ=D"));
	ПараметрыШапки.Вставить("НомерПриложения",  "");
	ПараметрыШапки.Вставить("ЗаголовокШапки",   НСтр("ru='Печать учетной политики'"));
	ПараметрыШапки.Вставить("ЗаголовокПеречня", НСтр("ru='Перечень форм'"));
	ПараметрыШапки.Вставить("ЗаголовокФормы",   НСтр("ru='Печать учетной политики'"));
	
	Если ИмяМакета = "Приказ" Тогда
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Приказ об учетной политике от %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ПолноеНаименованиеОрганизации",    СведенияОбОрганизации.ПолноеНаименование);
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ДолжностьРуководителяОрганизации", Руководители.РуководительДолжностьПредставление);
		ПараметрыШапки.Вставить("РуководительОрганизации",          Руководители.РуководительПредставление);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаБУ" Тогда
		ПараметрыШапки.НомерПриложения = 1;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по бухгалтерскому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
		ПараметрыШапки.НомерПриложения = 2;
		ПараметрыШапки.ЗаголовокШапки = НСтр("ru='Рабочий план счетов'");
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рабочий план счетов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
		ПараметрыШапки.НомерПриложения  = 3;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Формы первичных документов'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень первичных документов'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Формы первичных документов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыБУ" Тогда
		ПараметрыШапки.НомерПриложения  = 4;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ПараметрыШапки.НомерПриложения = 5;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по налоговому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
		ПараметрыШапки.НомерПриложения  = 6;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры налогового учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров налогового учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	КонецЕсли;
	
	Возврат ПараметрыШапки;
	
КонецФункции

Функция ВариантБухгалтерскойОтчетностиПоУмолчанию()
	
	Результат = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Результат = Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ГруппыВнеоборотныхАктивовДляПечати(ВидыОбъектов)
	
	ЭлементыСписка = Новый Массив;
	
	Для Каждого Группа Из ВидыОбъектов Цикл
		ПредставлениеГруппы = ОбщегоНазначенияБПКлиентСервер.ДекапитализироватьСтроку(Строка(Группа));
		ЭлементыСписка.Добавить(СтрШаблон("- %1", ПредставлениеГруппы));
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыСписка, Символы.ПС);
	
КонецФункции

#КонецОбласти

Процедура Подключаемый_ПередЗаписью(Запись) Экспорт
	
	УстановитьПараметрыРезервовПоСомнительнымДолгам(Запись);
	
КонецПроцедуры

Процедура УстановитьПараметрыРезервовПоСомнительнымДолгам(Запись)
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация) Тогда
		Запись.ФормироватьРезервыПоСомнительнымДолгам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПланСчетов(Запись, НастройкиУчетаЗатрат)
	
	// Проверим, что на плане счетов достаточно аналитики для выбранных настроек учетной политики
	
	ТребованияУчета = ПланыСчетов.Хозрасчетный.НовыйТребованияАналитикиУчета();
	
	ПараметрыУчета = ВключаемыеГлобальныеРазрезыУчета(Запись);
	ОбщегоНазначенияБП.ЗаполнитьТребованияГлобальныеРазрезыУчета(ТребованияУчета, ПараметрыУчета);
	
	Если НастройкиУчетаЗатрат <> Неопределено Тогда
		Справочники.НастройкиУчетаЗатрат.ЗаполнитьТребованияАналитикиУчета(ТребованияУчета, НастройкиУчетаЗатрат);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыСчетов.Хозрасчетный.НастроитьСубконто(ТребованияУчета);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ВключаемыеГлобальныеРазрезыУчета(Запись)
	
	РазрезыУчета = Новый Структура; // См. ОбщегоНазначенияБП.НовыйСлужебныеПараметрыУчета
	
	Если Запись.УчитыватьРасходыПоЭлементамЗатрат Тогда
		РазрезыУчета.Вставить("УчитыватьРасходыПоЭлементамЗатрат");
	КонецЕсли;
	
	Если Запись.УчитыватьРасходыПоСтатьямЗатрат Тогда
		РазрезыУчета.Вставить("УчитыватьРасходыПоСтатьямЗатрат");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РазрезыУчета, Запись);
	
	Возврат РазрезыУчета;
	
КонецФункции

Функция РезультатЗапросаДокументыБезПлановойСебестоимости(Организация, Период, ТолькоПроверка = Ложь)
	
	// Текст ЗапросПоДокументам ниже может быть модифицирован схемой запроса.
	// В частности:
	// - может быть добавлено условие по периоду записей (если существуют более поздние записи учетной политики)
	// - если запрос выполняется для проверки, то
	//	-- выбирается максимум 1 запись
	//	-- удаляются лишние поля
	//	-- отключается упорядочивание
	ЗапросПоДокументам = Новый Запрос;
	
	ЗапросПоДокументам.УстановитьПараметр("Период",      Период);
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	
	ЗапросПоДокументам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииУслуг.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВыпускПродукцииУслуг.Регистратор) КАК Представление,
	|	ВыпускПродукцииУслуг.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|ГДЕ
	|	ВыпускПродукцииУслуг.Период >= &Период
	|	И ВыпускПродукцииУслуг.Организация = &Организация
	|	И НЕ ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|	И ВыпускПродукцииУслуг.ПлановаяСтоимость = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Ссылка";
	
	ТекстОтбораПоДате = "ВыпускПродукцииУслуг.Период";
	
	МодифицироватьЗапросСУчетомПериодовИзмененийУчетнойПолитики(
		ЗапросПоДокументам,
		ТекстОтбораПоДате,
		ТолькоПроверка,
		Организация,
		Период);
		
	Возврат ЗапросПоДокументам.Выполнить();

КонецФункции

Функция ДатаСледующейЗаписиУчетнойПолитики(Организация, Период)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(УчетнаяПолитика.Период) КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Период > &Период
	|	И УчетнаяПолитика.Организация = &Организация";
	
	ВыборкаСледующаяЗапись = Запрос.Выполнить().Выбрать();
	ВыборкаСледующаяЗапись.Следующий();
	Возврат ВыборкаСледующаяЗапись;
	
КонецФункции

Функция ДокументыПрепятствующиеИзменениюРежимаАвтоматическойОценкиНЗП(Организация, Период, Счет, Включение, ТолькоПроверка = Ложь)

	// Текст ЗапросПоДокументам ниже может быть модифицирован схемой запроса.
	// В частности:
	// - может быть добавлено условие по периоду записей (если существуют более поздние записи учетной политики)
	// - если запрос выполняется для проверки, то
	//	-- выбирается максимум 1 запись
	//	-- удаляются лишние поля
	//	-- отключается упорядочивание
	ЗапросПоДокументам = Новый Запрос;
	
	ЗапросПоДокументам.УстановитьПараметр("Период",      Период);
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.УстановитьПараметр("Счет", Счет);
	СпособОценки =
		?(Включение, Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка, Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка);
	ЗапросПоДокументам.УстановитьПараметр("СпособОценки", СпособОценки);
	
	ЗапросПоДокументам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияНЗП.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияНЗП.Ссылка) КАК Представление,
	|	ИнвентаризацияНЗП.Дата КАК Период
	|ИЗ
	|	Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|ГДЕ
	|	ИнвентаризацияНЗП.Дата >= &Период
	|	И ИнвентаризацияНЗП.Организация = &Организация
	|	И ИнвентаризацияНЗП.ВидОперации = &СпособОценки
	|	И ИнвентаризацияНЗП.Проведен
	|	И ИнвентаризацияНЗП.СчетЗатрат = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Ссылка";
	
	ТекстОтбораПоДате = "ИнвентаризацияНЗП.Дата";
	
	МодифицироватьЗапросСУчетомПериодовИзмененийУчетнойПолитики(
		ЗапросПоДокументам,
		ТекстОтбораПоДате,
		ТолькоПроверка,
		Организация,
		Период);
	
	Возврат ЗапросПоДокументам.Выполнить().Выбрать();

КонецФункции

Процедура МодифицироватьЗапросСУчетомПериодовИзмененийУчетнойПолитики(ЗапросПоДокументам, ТекстОтбораПоДате, ТолькоПроверка, Организация, Период)

	УстановитьПривилегированныйРежим(Истина);
	
	// Определим дату следующей записи
	ВыборкаСледующаяЗапись = ДатаСледующейЗаписиУчетнойПолитики(Организация, Период);
	
	Если Не ЗначениеЗаполнено(ВыборкаСледующаяЗапись.Период) И Не ТолькоПроверка Тогда
		// Нет более поздних записей учетной политики по выбранной организации.
		// Модификация текста запроса не требуется.
		Возврат;
	КонецЕсли; 
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросПоДокументам.Текст);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если ЗначениеЗаполнено(ВыборкаСледующаяЗапись.Период) Тогда
		// Ограничим выборку "сверху" датой следующей записи
		ОператорЗапроса.Отбор.Добавить(Новый ВыражениеСхемыЗапроса(ТекстОтбораПоДате + " < &ПериодСледующейЗаписи"));
		ЗапросПоДокументам.УстановитьПараметр("ПериодСледующейЗаписи", ВыборкаСледующаяЗапись.Период);
	КонецЕсли;
	
	Если ТолькоПроверка Тогда
		
		// Оптимизируем запрос
		ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
		
		ОператорЗапроса.ВыбираемыеПоля.Удалить(2);
		ОператорЗапроса.ВыбираемыеПоля.Удалить(1);
		
		СхемаЗапроса.ПакетЗапросов[0].Порядок.Очистить();
		
	КонецЕсли; 
	
	ЗапросПоДокументам.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Определяет значения свойств записи учетной политики, которые недоступны исходя из выбранной функциональности.
//
// Параметры:
//  Запись - РегистрСведенийЗапись.УчетнаяПолитика
// 
// Возвращаемое значение:
//  Структура - значения свойств учетной политики, которые должны быть заменены.
//              Ключ: имя ресурса (реквизита); Значение - допустимое значение (на которое нужно заменить).
//
Функция НедоступныеЗначенияСвойств(Запись)
	
	НедоступныеЗначения = Новый Структура;
	
	Если Не УчетнаяПолитика.ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		НедоступныеЗначения.Вставить("УчитыватьРасходыПоСтатьямЗатрат",   Ложь);
		НедоступныеЗначения.Вставить("УчитыватьРасходыПоЭлементамЗатрат", Ложь);
	КонецЕсли;
	
	Возврат НедоступныеЗначения;
	
КонецФункции

Функция ФСБУ6ПрименяетсяДосрочно(Организация, Период)
	
	ФСБУ6ПрименяетсяДосрочно = Ложь;
	
	Если УчетнаяПолитика.ПрименяетсяФСБУ6(Организация, Период) Тогда
		ГодНачалаДосрочногоПримененияФСБУ6 = Год(БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
		Если Год(УчетнаяПолитика.НачалоПримененияФСБУ6(Организация)) = ГодНачалаДосрочногоПримененияФСБУ6
				И ГодНачалаДосрочногоПримененияФСБУ6 >= Год(Период) Тогда // учетная политика введена раньше начала досрочного применения ФСБУ6
			ФСБУ6ПрименяетсяДосрочно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФСБУ6ПрименяетсяДосрочно;
	
КонецФункции

Функция ОтказалсяОтПереходаНаФСБУ6(Организация)
	
	НачалоПримененияФСБУ6 = УчетнаяПолитика.НачалоПримененияФСБУ6(Организация);
	
	// Проверяем наличие регламентной операции перехода на ФСБУ 6 в декабре года,
	// предшествующего году начала применения ФСБУ 6.
	
	ПериодОперацииПерехода = НачалоГода(НачалоПримененияФСБУ6) - 1;
	НачалоПериода = НачалоМесяца(ПериодОперацииПерехода);
	КонецПериода  = КонецМесяца(ПериодОперацииПерехода);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"  , Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , КонецПериода);
	Запрос.УстановитьПараметр("ВидОперации"  , Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьСчетУчетаЗатратПоУмолчанию() Экспорт
	
	Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	ОсновнойСчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	ПустойСчетУчетаЗатрат   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Для каждого Запись Из Набор Цикл
		
		Если Запись.УдалитьОсновнойСчетУчетаЗатрат = ПустойСчетУчетаЗатрат Тогда
			Запись.УдалитьОсновнойСчетУчетаЗатрат = ОсновнойСчетУчетаЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура ВключитьИспользованиеБалансовогоМетодаУчетаОтложенногоНалога() Экспорт
	
	// По-умолчанию, с даты начала обязательного применения изменений, внесенных в ПБУ Приказом Минфина 236н,
	// применяется балансовый метод, а не затратный.
	// Включаем использование балансового метода только в условном будущем - т.е. только при условии,
	// что никакие периоды с начала обязательного применения не закрыты.
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Выполнение обработчика может приводить к появлению новой записи, поэтому обработка выполняется в главном узле,
		// а ее результаты передаются обменом.
		Возврат;
	КонецЕсли;
	
	ДатаОбязательногоПрименения = НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ДатаНачалаПримененияПриказа236н();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбязательногоПрименения", ДатаОбязательногоПрименения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНаДатуПерехода.Период КАК Период,
	|	УчетнаяПолитикаНаДатуПерехода.Организация КАК Организация
	|ПОМЕСТИТЬ ИспользуетсяЗатратныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаОбязательногоПрименения, ) КАК УчетнаяПолитикаНаДатуПерехода
	|ГДЕ
	|	УчетнаяПолитикаНаДатуПерехода.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаПослеПерехода.Период,
	|	УчетнаяПолитикаПослеПерехода.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаПослеПерехода
	|ГДЕ
	|	УчетнаяПолитикаПослеПерехода.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|	И УчетнаяПолитикаПослеПерехода.Период > &ДатаОбязательногоПрименения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ЕстьРегламентныеОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|	И РегламентнаяОперация.Организация В
	|			(ВЫБРАТЬ
	|				ИспользуетсяЗатратныйМетод.Организация
	|			ИЗ
	|				ИспользуетсяЗатратныйМетод)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.Дата >= &ДатаОбязательногоПрименения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуетсяЗатратныйМетод.Период КАК Период,
	|	ИспользуетсяЗатратныйМетод.Организация КАК Организация
	|ИЗ
	|	ИспользуетсяЗатратныйМетод КАК ИспользуетсяЗатратныйМетод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьРегламентныеОперации КАК ЕстьРегламентныеОперации
	|		ПО ИспользуетсяЗатратныйМетод.Организация = ЕстьРегламентныеОперации.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИспользуетсяЗатратныйМетод.Организация = Организации.Ссылка
	|ГДЕ
	|	ЕстьРегламентныеОперации.Организация ЕСТЬ NULL
	|	И Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Если Выборка.Период < ДатаОбязательногоПрименения Тогда
			// Балансовый метод должен быть включен с даты начала обязательного применения.
			// Записи выбираются с даты обязательного применения.
			// То, что при этом выбрана более ранняя запись, означает, что записи на дату обязательного применения нет.
			// Поэтому скопируем предыдущую запись (такая ровно одна на организацию, так как получена из среза последних).
			НаборЗаписей.Отбор.Период.Установить(ДатаОбязательногоПрименения);
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Период = ДатаОбязательногоПрименения;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы;
		КонецЦикла;
		
		Замещать             = Истина; // Может обновляться существующая запись
		ПередаватьОбменом    = Истина; // Выполнение обработчика может приводить к появлению новых записей
		ВключитьБизнесЛогику = Истина; // Следует выполнить логику, заполняющую значения полей, недоступных с определенного периода
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ПередаватьОбменом, ВключитьБизнесЛогику);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьИспользованиеПлановойСебестоимости() Экспорт
	
	Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Прочитать();
		
	Для каждого Запись Из Набор Цикл
		Запись.УдалитьИспользоватьПлановуюСебестоимость = (Запись.УдалитьВыпускПродукции ИЛИ Запись.УдалитьОказаниеУслуг);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура УстановитьСпособОтраженияАвансовыВыданных() Экспорт
	Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	СпособОтраженияПоУмолчанию = Перечисления.СпособОтраженияАвансовВыданных.ДебиторскаяЗадолженность;
	
	Для каждого Запись Из Набор Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.СпособОтраженияАвансовВыданных) Тогда
			Запись.СпособОтраженияАвансовВыданных = СпособОтраженияПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
КонецПроцедуры

Процедура СоздатьЗаписи2021() Экспорт
	
	// С 2021 года действует ФСБУ 5, который меняет настройки учетной политики.
	// Для определенности добавим отдельную запись - так, чтобы "до ФСБУ 5" и "после ФСБУ 5" было разными записями.
	
	ПериодПерехода = БухгалтерскийУчетКлиентСервер.ДатаОбязательногоПримененияФСБУ5();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодПерехода", ПериодПерехода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.Период КАК Период,
	|	УчетнаяПолитикаСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ПериодПерехода, ) КАК УчетнаяПолитикаСрезПоследних
	|ГДЕ
	|	УчетнаяПолитикаСрезПоследних.Период < &ПериодПерехода";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			СкопироватьЗапись(Выборка, ПериодПерехода);
			
		Исключение
			
			// Обработчик обновления - сервисный.
			// Если он не будет выполнен, то продолжать работу можно.
			
			// Обработка возможных нарушений стандарта разработки
			// в вызываемом коде библиотек
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбработкаОбновления'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УчетнаяПолитика,
				,
				ОписаниеОшибки());
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодАмортизации() Экспорт
	
	Попытка
		
		Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		ЗначениеПоУмолчанию = Перечисления.АлгоритмыПериодаАмортизации.ЗначениеПоУмолчанию();
		
		Для Каждого Запись Из Набор Цикл
			
			Если ЗначениеЗаполнено(Запись.ПериодАмортизации) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.ПериодАмортизации = ЗначениеПоУмолчанию;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
	Исключение
		
		// Обработчик обновления - сервисный.
		// Если он не будет выполнен, то продолжать работу можно.
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбработкаОбновления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.УчетнаяПолитика,
			,
			ОписаниеОшибки());
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ВключитьЗатратныйМетодУчетаОтложенногоНалогаЗакрытыхПериодов() Экспорт
	
	// Обеспечивает переход с БП 2.0 на 3.0 для пользователей редакции ПРОФ.
	// После перехода на 3.0 в случае применения ПБУ 18 учетная политика для всех периодов устанавливается
	// "вести балансовым методом". Правильно - для прошлых периодов оставить применение затратного метода.
	// Иначе Закрытие месяца будет требовать выполнения операции "Расчет отложенного налога по ПБУ 18" для
	// закрытых периодов.
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Выполнение обработчика может приводить к появлению новой записи, поэтому обработка выполняется в главном узле,
		// а ее результаты передаются обменом.
		Возврат;
	КонецЕсли;
	
	НачалоСледующегоГода = НачалоГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоСледующегоГода", НачалоСледующегоГода);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ РасчетОтложенногоНалога
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетОтложенногоНалога)
	|	И РегламентнаяОперация.Дата <= &НачалоСледующегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ОперацииЗакрытияМесяцев
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетОтложенногоНалога)
	|	И РегламентнаяОперация.Дата <= &НачалоСледующегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитика.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО УчетнаяПолитика.Организация = Организации.Ссылка
	|ГДЕ
	|	УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы)
	|	И УчетнаяПолитика.Период <= &НачалоСледующегоГода
	|	И НЕ УчетнаяПолитика.Организация В
	|				(ВЫБРАТЬ
	|					РасчетОтложенногоНалога.Организация
	|				ИЗ
	|					РасчетОтложенногоНалога)
	|	И УчетнаяПолитика.Организация В
	|			(ВЫБРАТЬ
	|				ОперацииЗакрытияМесяцев.Организация
	|			ИЗ
	|				ОперацииЗакрытияМесяцев)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период
	|ИТОГИ ПО
	|	Организация";
	
	Замещать = Истина;
	ПередаватьОбменом = Истина;
	ВключитьБизнесЛогику = Истина;
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			ВыборкаЗапись = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СоздаватьЗаписьНаСледующийГод = Истина;
			УчетнаяПолитикаНаКонецГода = Неопределено;
			
			Пока ВыборкаЗапись.Следующий() Цикл
				
				Если ВыборкаЗапись.Период = НачалоСледующегоГода Тогда
					// Если есть запись учетной политики, созданная на следующий год, то ничего не делаем.
					СоздаватьЗаписьНаСледующийГод = Ложь;
					Прервать;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ВыборкаЗапись.Период);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаЗапись.Организация);
				НаборЗаписей.Прочитать();
				
				Для Каждого Запись Из НаборЗаписей Цикл
					УчетнаяПолитикаНаКонецГода = Запись;
					Запись.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод;
				КонецЦикла;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ПередаватьОбменом, ВключитьБизнесЛогику);
			КонецЦикла;
			
			Если Не СоздаватьЗаписьНаСледующийГод ИЛИ УчетнаяПолитикаНаКонецГода = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			// Создадим учетную политику на следующий год.
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УчетнаяПолитикаНаКонецГода);
			
			НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат();
			НастройкиУчетаЗатрат.Контекст.Организация = УчетнаяПолитикаНаКонецГода.Организация;
			Справочники.НастройкиУчетаЗатрат.ПрочитатьСсылку(НастройкиУчетаЗатрат, УчетнаяПолитикаНаКонецГода.НастройкиУчетаЗатрат);
			
			МенеджерЗаписи.Период = НачалоСледующегоГода;
			МенеджерЗаписи.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы;
			
			Записать(МенеджерЗаписи, НастройкиУчетаЗатрат);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
	
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УчетнаяПолитика,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
