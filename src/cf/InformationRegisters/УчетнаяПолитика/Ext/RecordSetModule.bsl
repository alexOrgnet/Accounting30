#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Справочники.Организации.ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения = Неопределено Или ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Для каждого Запись Из ЭтотОбъект Цикл
			РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(Запись, ?(ДанныеЗаполнения = Неопределено, Новый Структура, ДанныеЗаполнения));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, Замещение)
	
	Для Каждого Строка Из ЭтотОбъект Цикл
			
		Если ЗначениеЗаполнено(Строка.ВариантУчетаОтложенногоНалога) Тогда
			
			// Флаг ПоддержкаПБУ18 следует устанавливать, если используются варианты применения ПБУ 18,
			// требующие вести учет постоянных и временных разниц.
			// В этом поле хранится значение функциональной опции, в состав которой входят поля с суммами разниц,
			// используемые повсеместно в объектах конфигурации.
			// Поскольку поле ПоддержкаПБУ18 служебное и однозначно определяется значением поля ВариантУчетаОтложенногоНалога,
			// то отправитель данных может про него не знать и синхронизацию следует выполнить до проверки на ОбменДанными.Загрузка.
			//
			// Для проверки в коде применения стандарта (в том числе, методами, не требующими учета постоянных и временных разниц),
			// следует использовать БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц()
			
			ВедетсяУчетПостоянныхРазниц = (Строка.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы
				Или Строка.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод);
			
			Если Строка.ПоддержкаПБУ18 <> ВедетсяУчетПостоянныхРазниц Тогда
				Строка.ПоддержкаПБУ18 = ВедетсяУчетПостоянныхРазниц;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.УчетнаяПолитика.ИсправитьНедоступныеЗначенияСвойств(ЭтотОбъект);
	
	НастройкиУчета.ПередЗаписью(ЭтотОбъект, Отказ, Замещение);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчета.ПриЗаписи(ЭтотОбъект, Отказ, Замещение);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
