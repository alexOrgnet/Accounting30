
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"ДатаДокумента, КоличествоПродукции, Организация, ПодразделениеОрганизации,
		|Продукция, Склад, ЦенаПродукции, КлючКалькуляцииРасходов, СчетНаОплатуПокупателю,
		|АдресВременногоХранилища, ЗаполнитьПоСпецификации, ТолькоПросмотр");
	
	Если Не ТолькоПросмотр Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю);
	КонецЕсли;
	
	НастроитьСписокСпецификацийПродукции();
	
	// Если расчет калькуляции уже производился, то в форму приедут комапоненты расхода
	Если ЗаполнитьПоСпецификации Тогда
		Спецификация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "ОсновнаяСпецификацияНоменклатуры");
		ЗаполнитьДанныеКалькуляцииРасходовПоСпецификации(Спецификация);
	Иначе
		ЗаполнитьДанныеКалькуляцииРасходов();
	КонецЕсли;
	
	ЕдиницаКоличествоПродукции = ЕдиницаИзмерения(Продукция);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КоличествоПродукцииПриИзменении(Элемент)
	КоличествоПродукцииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НаценкаПриИзменении(Элемент)
	ЦенаПродукции = РасходыНаЕдиницу * (1 + Наценка / 100);
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПродукцииПриИзменении(Элемент)
	РассчитатьНаценку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПронумероватьТаблицуРасходы(Расходы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	
	ПронумероватьТаблицуРасходы(Расходы);
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	СтрокаРасходов = Элементы.Расходы.ТекущиеДанные;
	
	РасходыНоменклатураПриИзмененииНаСервере(СтрокаРасходов.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	СтрокаРасходов = Элементы.Расходы.ТекущиеДанные;
	
	// Колонка КоличествоНаЕдиницу хранит информацию о количестве ингридиентов на единицу продукции
	// используется для пересчета количества ингридиентов при изменении КоличествоПродукции
	// Если КоличествоПродукции = 0, тогда будем ханить в КоличествоНаЕдиницу = Количество, а не КоличествоНаЕдиницу = 0,
	// для того что бы при изменении КоличествоПродукции, Количество = КоличествоНаЕдиницу * КоличествоПродукции не обнулялось,
	// и пользователю снова не пришлось бы вводить количество.
	Если КоличествоПродукции > 0 Тогда
		СтрокаРасходов.КоличествоНаЕдиницу = СтрокаРасходов.Количество / КоличествоПродукции;
	Иначе
		СтрокаРасходов.КоличествоНаЕдиницу = СтрокаРасходов.Количество;
	КонецЕсли;
	
	РассчитатьСуммуСтрокиРасходы(СтрокаРасходов);
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуСтрокиРасходы(Элементы.Расходы.ТекущиеДанные);
	РассчитатьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ПоместитьВоВременноеХранилищеКалькуляциюРасходов();
	Закрыть("ОК");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Расходы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена.
			|Заполнить по спецификации?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Имя", Команда.Имя);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемРасходовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		Для Каждого Спецификация Из Спецификации Цикл
			Если Спецификация.Представление = Команда.Имя Тогда
				СпецификацияПродукции = Спецификация.Значение;
				ЗаполнитьДанныеКалькуляцииРасходовПоСпецификации(СпецификацияПродукции);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Расходы.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(Команда)
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора(),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ТекстЗаголовка = Новый Массив;
	ТекстЗаголовка.Добавить(КоличествоПродукции);
	Если ЗначениеЗаполнено(ЕдиницаКоличествоПродукции) Тогда
		ТекстЗаголовка.Добавить(ЕдиницаКоличествоПродукции);
	КонецЕсли;
	Заголовк = СтрШаблон(НСтр("ru = 'Расходы всего (%1)'"), СтрСоединить(ТекстЗаголовка, " "));
	Элементы.РасходыНаКоличествоПродукции.Заголовок = Заголовк;
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ПронумероватьТаблицуРасходы(Расходы);
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокСпецификацийПродукции()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Продукция);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка КАК Ссылка,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	|ГДЕ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Владелец = &Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Счетчик = 1;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяКоманды = СтрШаблон(НСтр("ru = 'ЗполнитьПоСпецификации_%1'"), Счетчик);
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаПередатьПоказания = Команды.Добавить(ИмяКоманды);
			КомандаПередатьПоказания.Заголовок = СтрШаблон(НСтр("ru = 'по спецификации ""%1""'"), Выборка.Наименование);
			КомандаПередатьПоказания.Действие = "Заполнить";
			КомандаПередатьПоказания.ИзменяетСохраняемыеДанные = Истина;
			Спецификации.Добавить(Выборка.Ссылка, ИмяКоманды)
		КонецЕсли; 
		
		ЭлементФормы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.Заполнить);
		ЭлементФормы.ИмяКоманды = ИмяКоманды;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоги()
	
	РассчитатьРасходыНаЕдиницуПродукции();
	РассчитатьРасходыНаКоличествоПродукции();
	РассчитатьНаценку();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасходыНаЕдиницуПродукции()
	
	РасходыНаЕдиницу = 0;
	Для Каждого СтрокаРасходы Из Расходы Цикл
		РасходыНаЕдиницу = РасходыНаЕдиницу + СтрокаРасходы.КоличествоНаЕдиницу*СтрокаРасходы.Цена;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоПродукцииПриИзмененииНаСервере()
	
	Для Каждого СтрокаРасходы Из Расходы Цикл
		СтрокаРасходы.Количество = СтрокаРасходы.КоличествоНаЕдиницу*КоличествоПродукции;
		СтрокаРасходы.Сумма      = СтрокаРасходы.Количество*СтрокаРасходы.Цена;
	КонецЦикла;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасходыНаКоличествоПродукции()
	РасходыНаКоличествоПродукции = РасходыНаЕдиницу*КоличествоПродукции;
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаценку()
	Если РасходыНаЕдиницу <> 0 Тогда
		Наценка = (ЦенаПродукции / РасходыНаЕдиницу - 1) * 100;
	Иначе
		Наценка = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтрокиРасходы(СтрокаРасходы)
	СтрокаРасходы.Сумма = СтрокаРасходы.Количество * СтрокаРасходы.Цена;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницаИзмерения(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
КонецФункции

&НаСервере
Процедура РасходыНоменклатураПриИзмененииНаСервере(Идентификатор)
	
	СтрокаРасходы = Расходы.НайтиПоИдентификатору(Идентификатор);
	
	СтрокаРасходы.ЕдиницаИзмерения = ЕдиницаИзмерения(СтрокаРасходы.Номенклатура);
	СтрокаРасходы.Цена             = СебестоимостьНоменклатуры(СтрокаРасходы.Номенклатура);
	СтрокаРасходы.Сумма            = СтрокаРасходы.Количество * СтрокаРасходы.Цена;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(СтрокаРасходы.Номенклатура);
	ЗаполнитьКоличествоНаСкладе(СписокНоменклатуры);
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКалькуляцииРасходов()
	
	КалькуляцияРасходов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого СтрокаКалькуляцияРасходов Из КалькуляцияРасходов Цикл
		СтрокаРасходы = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасходы, СтрокаКалькуляцияРасходов);
		СтрокаРасходы.Количество = СтрокаРасходы.КоличествоНаЕдиницу*КоличествоПродукции;
		СтрокаРасходы.Сумма      = СтрокаРасходы.Количество*СтрокаРасходы.Цена;
	КонецЦикла;
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаРасходы Из Расходы Цикл
		СписокНоменклатуры.Добавить(СтрокаРасходы.Номенклатура);
	КонецЦикла;
	ЗаполнитьКоличествоНаСкладе(СписокНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКалькуляцииРасходовПоСпецификации(Спецификация)
	
	КомпонентыСоставаПродукции = РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю.ПолучитьКомпонентыСоставаПродукции(Спецификация);
	
	Если ЗначениеЗаполнено(КомпонентыСоставаПродукции) Тогда
		Для Каждого СтрокаКомпонентыСостава Из КомпонентыСоставаПродукции Цикл
			ДобавитьСтрокуВРасходы(Расходы, СтрокаКомпонентыСостава, КоличествоПродукции);
		КонецЦикла;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаРасходы Из Расходы Цикл
		СписокНоменклатуры.Добавить(СтрокаРасходы.Номенклатура);
	КонецЦикла;
	ЗаполнитьКоличествоНаСкладе(СписокНоменклатуры);
	
	ПронумероватьТаблицуРасходы(Расходы);
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРасходы(Расходы, СтрокаКомпонентыСостава, КоличествоПродукции)
	
	СтрокаРасходов = Расходы.Добавить();
	СтрокаРасходов.Номенклатура        = СтрокаКомпонентыСостава.Номенклатура;
	СтрокаРасходов.КоличествоНаЕдиницу = СтрокаКомпонентыСостава.Количество;
	СтрокаРасходов.Количество          = СтрокаРасходов.КоличествоНаЕдиницу * КоличествоПродукции;
	СтрокаРасходов.ЕдиницаИзмерения    = СтрокаКомпонентыСостава.Номенклатура.ЕдиницаИзмерения;
	СтрокаРасходов.Цена                = ЗакупочнаяЦена(СтрокаКомпонентыСостава.Номенклатура);
	СтрокаРасходов.Сумма               = СтрокаРасходов.Цена * СтрокаРасходов.Количество;
	
КонецПроцедуры

&НаСервере
Функция ЗакупочнаяЦена(Номенклатура)
	
	ЦенаЗакупки = 0;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                 ДатаДокумента);
	ПараметрыОбъекта.Вставить("Организация",          Организация);
	ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Номенклатура,
		ПараметрыОбъекта,
		Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		ЦенаЗакупки = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	
	Возврат ЦенаЗакупки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоНаСкладе(СписокНоменклатуры)
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	СписокСчетов = СписокСчетов(ВидыСубконто);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОстаткиЦены",    ДатаДокумента);
	Запрос.УстановитьПараметр("СчетаЗапасов",       СписокСчетов);
	Запрос.УстановитьПараметр("ВидыСубконто",       ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Подразделение",      ПодразделениеОрганизации);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОстаткиНаСкладе.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстаткиЦены,
		|			Счет В (&СчетаЗапасов),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И &УсловиеПодразделение
		|				И Субконто1 В (&СписокНоменклатуры)) КАК ОстаткиНаСкладе";
	
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПодразделение", "(Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПодразделение", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Выборка.Номенклатура);
		СтрокиРасходы = Расходы.НайтиСтроки(Отбор);
		Для Каждого СтрокаРасходы Из СтрокиРасходы Цикл
			СтрокаРасходы.Остаток = Выборка.КоличествоОстаток;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокСчетов(Знач СписокСубконто)
	
	Запрос = Новый Запрос;
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.Продажи); // 90
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ГТД);
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации); // МЦ
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию); // 004
	
	Запрос.УстановитьПараметр("СписокСубконто", СписокСубконто);
	Запрос.УстановитьПараметр("Исключения", Исключения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В(&СписокСубконто)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&Исключения)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И ХозрасчетныйВидыСубконто.Ссылка.Количественный
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СебестоимостьНоменклатуры(Продукция)
	
	ЦенаЗакупки = ЗакупочнаяЦена(Продукция);
	
	// Если ЦенаЗакупки = 0, тогда возможны 2 сценария
	// 1 сценарий: Это сырье, и цена закупки не указана. ЦенаЗакупки = 0, по-умолчанию.
	// 2 сценарий: Продукция производится из компонентов, тогда ЦенаЗакупки будет состоять из закупочных цен компонент производства.
	Если ЦенаЗакупки = 0 Тогда
		
		КомпонентыСоставаПродукции = РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю.ПолучитьКомпонентыСоставаПродукции(Продукция);
		
		Для Каждого СтрокаКомпонент Из КомпонентыСоставаПродукции Цикл
			
			ЦенаЗакупкиКомпоненты = ЗакупочнаяЦена(СтрокаКомпонент.Номенклатура);
			ЦенаЗакупки = ЦенаЗакупки + ЦенаЗакупкиКомпоненты * СтрокаКомпонент.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЦенаЗакупки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьТаблицуРасходы(Расходы)
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из Расходы Цикл
		СтрокаТаблицы.НомерСтрокиКалькуляции = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Расходы.Очистить();
		Для Каждого Спецификация Из Спецификации Цикл
			Если Спецификация.Представление = ДополнительныеПараметры.Имя Тогда
				СпецификацияПродукции = Спецификация.Значение;
				ЗаполнитьДанныеКалькуляцииРасходовПоСпецификации(СпецификацияПродукции);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеКалькуляциюРасходов()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Расходы",             Расходы.Выгрузить());
	СтруктураВозврата.Вставить("ЦенаПродукции",       ЦенаПродукции);
	СтруктураВозврата.Вставить("КоличествоПродукции", КоличествоПродукции);
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресВременногоХранилища);
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Расходы, Элементы.Расходы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере()
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(СчетНаОплатуПокупателю, "Расходы");
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		НоваяСтрока = Расходы.Добавить();
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		Если НЕ ЭтоВставкаИзБуфера Тогда
			НоваяСтрока.Цена                = СебестоимостьНоменклатуры(НоваяСтрока.Номенклатура);
			НоваяСтрока.Сумма               = НоваяСтрока.Цена*НоваяСтрока.Количество;
			НоваяСтрока.КоличествоНаЕдиницу = ?(КоличествоПродукции > 0, НоваяСтрока.Количество/КоличествоПродукции, НоваяСтрока.Количество);
			НоваяСтрока.ЕдиницаИзмерения    = ЕдиницаИзмерения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	ПронумероватьТаблицуРасходы(Расходы);
	РассчитатьИтоги();
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	Иначе
		СписокНоменклатуры = Новый Массив;
		Для Каждого СтрокаРасходы Из ТаблицаТоваров Цикл
			СписокНоменклатуры.Добавить(СтрокаРасходы.Номенклатура);
		КонецЦикла;
		ЗаполнитьКоличествоНаСкладе(СписокНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в калькуляции расходов'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",          ДатаДокумента);
	ПараметрыФормы.Вставить("Склад",                 Склад);
	ПараметрыФормы.Вставить("Организация",           Организация);
	ПараметрыФормы.Вставить("Подразделение",         ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",                ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена",              Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",        Истина);
	ПараметрыФормы.Вставить("Заголовок",             ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",            "Расходы");
	ПараметрыФормы.Вставить("Услуги",                Ложь);
	ПараметрыФормы.Вставить("ТипЦен",                ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ПоказыватьЦены",        Истина);
	ПараметрыФормы.Вставить("ПоказыватьОстатки",     Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти
