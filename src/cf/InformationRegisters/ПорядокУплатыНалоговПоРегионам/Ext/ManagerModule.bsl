#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив задач по налогам, для которых порядок уплаты авансов
// настраивается по регионам (см. КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам())
//
// Параметры:
//  Период - Дата - если указана, то будут учтены разные даты перехода на новые настройки,
//					а в ином случае в результат попадут все налоги, порядок которых устанавливается
//                  по регионам (не важно, с какой даты произошел переход)
// 
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.ЗадачиБухгалтера
//
Функция НалогиПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено) Экспорт
	
	Налоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налоги", Налоги);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Ссылка
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Код В(&Налоги)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Определяет, используются ли для налога региональные настройки уплаты. Конкретная дата начала использования региональных 
// настроек определяется в НачалоИспользованияНастроек()
// 
// Параметры:
//  Налог - строка - код задачи в списке задач
// 
// Возвращаемое значение: 
//  Истина - порядок уплаты настраивается в регистре ПорядокУплатыНалоговПоРегионам (дата начала
// применения определяется отдельно),
//  Ложь - порядок уплаты настраивается иначе (обычно в регистре ПорядокУплатыНалоговНаМестах)
//  
Функция ПорядокУплатыУстанавливаетсяПоРегионам(Налог) Экспорт
	
	РегиональныеНалоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам();
	
	Возврат РегиональныеНалоги.Найти(Налог) <> Неопределено;
	
КонецФункции

//  Возвращает дату начала использования новых настроек (форма настроек и/или регистр)
//
// Параметры:
//  Налог - строка - код задачи по налогу в списке задач (например, "ТранспортныйНалог")
// 
// Возвращаемое значение:
//  Дата - дата начала применения новой формы настроек и нового регистра (если применимо)
//
Функция НачалоИспользованияНастроек(Налог) Экспорт 
	
	Если Налог = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		Возврат '20210101';
	ИначеЕсли Налог = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		Возврат '20220101';
	Иначе
		 // Для земельного налога регистр не используется, но используется новая форма настроек
		Возврат '20210101';
	КонецЕсли;		
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено)
	
	Налоги = Новый Массив;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог()) Тогда
		Налоги.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог());
	КонецЕсли;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество()) Тогда
		Налоги.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество());
	КонецЕсли;
	
	Возврат Налоги;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления
	
// Процедура - обработчик обновления. Заполняет текущий регистр данными
// из регистра сведений ПорядокУплатыНалоговНаМестах по транспортному налогу.
//
// Параметры:
//  Параметры - Структура - см. документацию БСП для отложенных обработчиков обновления
//
Процедура ЗаполнитьДаннымиПрежнегоРегистраПоТранспортномуНалогу(Параметры) Экспорт
	
	// Заполним новый регистр на дату начала его использования. Для этого выбираем нужные 
	// данные из прежнего регистра. 
	// Переносим данные одной порцией, т.к. ожидается, что записей получится немного
	// (максимум по 86 на каждую организацию).
	
	Запрос = Новый Запрос;
	КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог();
	Налог = Справочники.ЗадачиБухгалтера.НайтиПоКоду(КодНалога);
	Запрос.УстановитьПараметр("Период", НачалоИспользованияНастроек(КодНалога));
	Запрос.УстановитьПараметр("Налог", Налог);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Организация КАК Организация,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Налог КАК Налог,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	МАКСИМУМ(ПорядокУплатыНалоговНаМестахСрезПоследних.УплачиваютсяАвансы) КАК УплачиваютсяАвансы
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах.СрезПоследних(&Период, Налог = &Налог) КАК ПорядокУплатыНалоговНаМестахСрезПоследних
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона <> """"
	|	И ПорядокУплатыНалоговНаМестахСрезПоследних.УплачиваютсяАвансы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Организация,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Налог,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Нет настроек для переноса
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;					
	КонецЕсли; 
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Налог.Установить(Налог);
	НаборЗаписей.Загрузить(Результат.Выгрузить());
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПоТранспортномуНалогу""
			|не удалось перенести данные из прежнего регистра по причине:
			|%1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = Истина;
		
КонецПроцедуры

Функция ВыполненоНачальноеЗаполнение(Параметры) Экспорт 
	
	// Здесь нет смысла анализировать отдельные записи: 
	// обработчик обновления (см. ЗаполнитьДаннымиПрежнегоРегистра()) 
	// либо выполнится и одним действием заполнит новый регистр настроек (в таком случае данная проверка вообще не вызывается),
	// либо не выполнится, и тогда полностью блокируем работу с новыми настройками (возвращаем Ложь).
	Возврат Ложь;
		
КонецФункции
 
// Процедура - обработчик обновления. Заполняет текущий регистр данными
// из регистра сведений ПорядокУплатыНалоговНаМестах по налогу на имущество.
//
// Параметры:
//  Параметры - Структура - см. документацию БСП для отложенных обработчиков обновления
//
Процедура ЗаполнитьДаннымиПрежнегоРегистраПоНалогуНаИмущество(Параметры) Экспорт
	
	// Заполним новый регистр на дату начала его использования. Для этого выбираем нужные 
	// данные из прежнего регистра. 
	// Переносим данные одной порцией, т.к. ожидается, что записей получится немного
	// (максимум по 86 на каждую организацию).
	
	Запрос = Новый Запрос;
	КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество();
	Налог = Справочники.ЗадачиБухгалтера.НайтиПоКоду(КодНалога);
	Запрос.УстановитьПараметр("Период", НачалоИспользованияНастроек(КодНалога));
	Запрос.УстановитьПараметр("Налог", Налог);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Организация КАК Организация,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Налог КАК Налог,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	МАКСИМУМ(ПорядокУплатыНалоговНаМестахСрезПоследних.УплачиваютсяАвансы) КАК УплачиваютсяАвансы
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах.СрезПоследних(&Период, Налог = &Налог) КАК ПорядокУплатыНалоговНаМестахСрезПоследних
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона <> """"
	|	И ПорядокУплатыНалоговНаМестахСрезПоследних.УплачиваютсяАвансы
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Организация,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.Налог,
	|	ПорядокУплатыНалоговНаМестахСрезПоследних.РегистрацияВНалоговомОргане.КодРегиона";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Нет настроек для переноса
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;					
	КонецЕсли; 
	
	НаборЗаписей = СоздатьНаборЗаписей();

	// В регистре уже могут быть записи по транспортному налогу. Поэтому необходимо установить отбор по налогу,
	// чтобы не стереть существующие записи.
	НаборЗаписей.Отбор.Налог.Установить(Налог);
	НаборЗаписей.Загрузить(Результат.Выгрузить());
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПоНалогуНаИмущество""
			|не удалось перенести данные из прежнего регистра по причине:
			|%1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = Истина;
		
КонецПроцедуры 
 
#КонецОбласти

#КонецЕсли
