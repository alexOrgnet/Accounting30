
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сумму задолженности по реестру выплат самозанятым
//
// Параметры:
//		ДокументОплаты - ДокументСсылка - документ оплаты, например, СписаниеСРасчетногоСчета
//		РеестрВыплатыСамозанятым - ДокументСсылка.ВыплатыСамозанятым - реестр, задолженность по которому нужно получить.
// Возвращаемое значение:
//		Число - Сумма задолженности по реестру
//
Функция СуммаЗадолженностиПоРеестру(ДокументОплаты, РеестрВыплатыСамозанятым) Экспорт
	
	Если Не ЗначениеЗаполнено(РеестрВыплатыСамозанятым) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Первый запросом объединения получаем остатки, в которых может быть уже учтена оплата от СписанияСРасчетногоСчета.
	// Вторым запросом объединения восстанавливаем сумму оплата, чтобы она не учитывалась при расчете задолженности.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
	Запрос.УстановитьПараметр("ВыплатыСамозанятым", РеестрВыплатыСамозанятым);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ЗадолженностьСамозанятых
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(, РеестрВыплатыСамозанятым = &ВыплатыСамозанятым) КАК ЗадолженностьСамозанятыхПоРееструОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРеестру.Сумма
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру КАК ЗадолженностьСамозанятыхПоРеестру
	|ГДЕ
	|	ЗадолженностьСамозанятыхПоРеестру.Активность
	|	И ЗадолженностьСамозанятыхПоРеестру.Регистратор = &ДокументОплаты
	|	И ЗадолженностьСамозанятыхПоРеестру.РеестрВыплатыСамозанятым = &ВыплатыСамозанятым
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗадолженностьСамозанятых.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ЗадолженностьСамозанятых КАК ЗадолженностьСамозанятых";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Выборка.СуммаОстаток;
	Иначе
		СуммаДокумента = 0;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

// Возвращает сумму задолженности по самозанятому в реестре выплат самозанятым
//
// Параметры:
//		ДокументОплаты - ДокументСсылка - документ оплаты, например, СписаниеСРасчетногоСчета
//		РеестрВыплатыСамозанятым - ДокументСсылка.ВыплатыСамозанятым - реестр, в котором была начислена задолженность по самозанятому.
//		Самозанятый - СправочникСсылка.Контрагенты - Самозанятый, по которому следует получить задолженность
//		СчетСамозанятого - СправочникСсылка.БанковскиеСчета - Счет самозанятого
// Возвращаемое значение:
//		Число - Сумма задолженности по реестру
//
Функция СуммаЗадолженностиПоСамозанятому(ДокументОплаты, РеестрВыплатыСамозанятым, Самозанятый, СчетСамозанятого) Экспорт
	
	Если Не ЗначениеЗаполнено(РеестрВыплатыСамозанятым) Или Не ЗначениеЗаполнено(Самозанятый) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
	Запрос.УстановитьПараметр("ВыплатыСамозанятым", РеестрВыплатыСамозанятым);
	Запрос.УстановитьПараметр("Контрагент", Самозанятый);
	Запрос.УстановитьПараметр("СчетКонтрагента", СчетСамозанятого);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ЗадолженностьСамозанятого
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(
	|			,
	|			РеестрВыплатыСамозанятым = &ВыплатыСамозанятым
	|				И Самозанятый = &Контрагент
	|				И СчетСамозанятого = &СчетКонтрагента) КАК ЗадолженностьСамозанятыхПоРееструОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРеестру.Сумма
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру КАК ЗадолженностьСамозанятыхПоРеестру
	|ГДЕ
	|	ЗадолженностьСамозанятыхПоРеестру.Активность
	|	И ЗадолженностьСамозанятыхПоРеестру.РеестрВыплатыСамозанятым = &ВыплатыСамозанятым
	|	И ЗадолженностьСамозанятыхПоРеестру.Самозанятый = &Контрагент
	|	И ЗадолженностьСамозанятыхПоРеестру.СчетСамозанятого = &СчетКонтрагента
	|	И ЗадолженностьСамозанятыхПоРеестру.Регистратор = &ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗадолженностьСамозанятого.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ЗадолженностьСамозанятого КАК ЗадолженностьСамозанятого";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаДокумента = 0;
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура заполняет задолженность по самозанятым в
// регистре накопления "ЗадолженностьСамозанятыхПоРеестру"  
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьЗадолженностьСамозанятыхПоРееструПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРеестру.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ОбработанныеДокументы
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру КАК ЗадолженностьСамозанятыхПоРеестру
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВыплатыСамозанятым.Ссылка КАК Регистратор,
	|	ВыплатыСамозанятым.Дата КАК Период,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.Ссылка КАК РеестрВыплатСамозанятым,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|ГДЕ
	|	НЕ ВыплатыСамозанятым.РучнаяКорректировка
	|	И ВыплатыСамозанятым.Проведен
	|	И НЕ ВыплатыСамозанятым.ПометкаУдаления
	|	И НЕ ВыплатыСамозанятым.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_ОбработанныеДокументы.Регистратор КАК Регистратор
	|				ИЗ
	|					ВТ_ОбработанныеДокументы КАК ВТ_ОбработанныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК Период,
	|	СписаниеСРасчетногоСчета.Организация,
	|	СписаниеСРасчетногоСчета.РеестрВыплатСамозанятым,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	НЕ СписаниеСРасчетногоСчета.РучнаяКорректировка
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И НЕ СписаниеСРасчетногоСчета.ПометкаУдаления
	|	И НЕ СписаниеСРасчетногоСчета.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_ОбработанныеДокументы.Регистратор КАК Регистратор
	|				ИЗ
	|					ВТ_ОбработанныеДокументы КАК ВТ_ОбработанныеДокументы)
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыплатыСамозанятымВыплаты.Контрагент КАК Самозанятый,
	|	ВыплатыСамозанятымВыплаты.БанковскийСчет КАК СчетСамозанятого,
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма,
	|	ВТ_Документы.Организация КАК Организация,
	|	ВТ_Документы.РеестрВыплатСамозанятым КАК РеестрВыплатыСамозанятым,
	|	ВТ_Документы.Регистратор КАК Регистратор,
	|	ВТ_Документы.Период КАК Период,
	|	ВТ_Документы.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	|		ПО ВТ_Документы.РеестрВыплатСамозанятым = ВыплатыСамозанятымВыплаты.Ссылка
	|ИТОГИ ПО
	|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		Набор = РегистрыНакопления.ЗадолженностьСамозанятыхПоРеестру.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Набор.Прочитать();
		
		ВыборкаПоСтрокам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоСтрокам);
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ЗаполнитьЗадолженностьСамозанятыхПоРееструПриОбновлении() не удалось обработать документ по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВыплатыСамозанятым, Выборка.Регистратор, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре ЗаполнитьЗадолженностьСамозанятыхПоРееструПриОбновлении() не удалось обработать документ ""Выплаты Самозанятым"": в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВыплатыСамозанятым,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьЗадолженностьСамозанятыхПоРееструПриОбновлении() обработала очередную порцию документов ""Выплаты Самозанятым"": %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
