#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИБ

Процедура ЗаполнитьДвиженияВозвратыТоваров(Параметры) экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустыеСсылки", 
		ОбщегоНазначенияБП.МассивПустыхЗначенийРеквизита(
			Метаданные.Документы.ВозвратТоваровОтПокупателя.Реквизиты.Сделка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ДокументыДляОбработки
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВозвратыТоваров КАК РегистрВозвратыТоваров
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = РегистрВозвратыТоваров.Регистратор
	|ГДЕ
	|	РегистрВозвратыТоваров.Регистратор ЕСТЬ NULL
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И НЕ ВозвратТоваровОтПокупателя.Сделка В (&ПустыеСсылки)
	|	И ВозвратТоваровОтПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары)
	|	И ВозвратТоваровОтПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары)
	|	И ВозвратТоваровОтПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Организация
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО КорректировкаРеализацииТовары.Ссылка = КорректировкаРеализации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВозвратыТоваров КАК РегистрВозвратыТоваров
	|		ПО КорректировкаРеализацииТовары.Ссылка = РегистрВозвратыТоваров.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО КорректировкаРеализацииТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (КорректировкаРеализации.ИсходныйДокументРеализации = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РегистрВозвратыТоваров.Регистратор ЕСТЬ NULL
	|	И КорректировкаРеализацииТовары.Количество < КорректировкаРеализацииТовары.КоличествоДоИзменения
	|	И КорректировкаРеализации.Проведен
	|	И КорректировкаРеализации.КорректироватьБУиНУ
	|	И СправочникНоменклатура.Услуга = ЛОЖЬ
	|	И ЕСТЬNULL(РеализацияТоваровУслуг.Дата, &ПустаяДата) >= НАЧАЛОПЕРИОДА(КорректировкаРеализации.Дата, ГОД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Организация
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ОтчетОРозничныхПродажахВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ОтчетОРозничныхПродажахВозвраты.Ссылка = ОтчетОРозничныхПродажах.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВозвратыТоваров КАК РегистрВозвратыТоваров
	|		ПО ОтчетОРозничныхПродажахВозвраты.Ссылка = РегистрВозвратыТоваров.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|		ПО ОтчетОРозничныхПродажахВозвраты.ДатаРеализации = ОтчетОРозничныхПродажахТовары.Ссылка.Дата
	|			И ОтчетОРозничныхПродажахВозвраты.Номенклатура = ОтчетОРозничныхПродажахТовары.Номенклатура
	|ГДЕ
	|	РегистрВозвратыТоваров.Регистратор ЕСТЬ NULL
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И НЕ ОтчетОРозничныхПродажахТовары.Номенклатура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Дата,
	|	ОтчетКомиссионераОПродажах.Организация
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.ТоварыВозвращенные КАК ОтчетКомиссионераОПродажахВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ПО ОтчетКомиссионераОПродажахВозвраты.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВозвратыТоваров КАК РегистрВозвратыТоваров
	|		ПО ОтчетКомиссионераОПродажахВозвраты.Ссылка = РегистрВозвратыТоваров.Регистратор
	|ГДЕ
	|	РегистрВозвратыТоваров.Регистратор ЕСТЬ NULL
	|	И ОтчетКомиссионераОПродажах.Проведен
	|	И НЕ ОтчетКомиссионераОПродажахВозвраты.ПоТекущемуДокументу
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТ_ДокументыДляОбработки.Дата КАК Дата,
	|	ВТ_ДокументыДляОбработки.Ссылка КАК Регистратор,
	|	ВТ_ДокументыДляОбработки.Организация КАК Организация
	|ИЗ
	|	ВТ_ДокументыДляОбработки КАК ВТ_ДокументыДляОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДокументыДляОбработки.Дата";

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВозвратыТоваров.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыНакопления.ВозвратыТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
	
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Регистратор);
		
		Отказ = Ложь;
		
		Попытка
			ПараметрыПроведения = МенеджерДокумента.ПодготовитьПараметрыПроведения(Выборка.Регистратор, Отказ);
			
			Если Отказ 
				ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПроведения) Тогда
				
				ТекстСообщения = 
					НСтр("ru = 'В процедуре ВозвратыТоваров.ЗаполнитьДвиженияВозвратыТоваров() не удалось обработать запись по причине:
						|Не удалось получить параметры проведения документа'");
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыНакопления.ВозвратыТоваров, Выборка.Регистратор, ТекстСообщения);
					
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СделкаВШапке = Истина;
			
			ИмяРеквизитаСделка = "Сделка";
			
			ТаблицаРеквизиты = Неопределено;
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ТаблицаСписанныеТовары = ПараметрыПроведения.СписаниеТоваровТаблицаТовары;
				ТаблицаРеквизиты = ПараметрыПроведения.СписаниеТоваровРеквизиты;
				
				СделкаВШапке = истина;
			ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				// Таблица возвращенных товаров
				ТаблицаСписанныеТовары = ПараметрыПроведения.ВозвратТоваровТаблицаТовары;
				ТаблицаРеквизиты = ПараметрыПроведения.РеализацияРеквизиты;
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроведения.СписаниеТоваровРеквизиты) 
					ИЛИ ПараметрыПроведения.СписаниеТоваровРеквизиты[0].ПрошлыйПериод Тогда
					
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
				
				СделкаВШапке = Истина;
				ИмяРеквизитаСделка = "ДокументРеализации";
			ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				// Таблица возвращаемых товаров с указанием партии возврата и себестоимости
				ТаблицаСписанныеТовары = ПараметрыПроведения.ВозвратыТоваровТаблицаТовары;
				ТаблицаРеквизиты = ПараметрыПроведения.ВозвратыТоваровРеквизиты;
				
				СделкаВШапке = ложь;
			ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				// Таблица возвращаемых товаров с указанием партии возврата
				ТаблицаСписанныеТовары = ПараметрыПроведения.ВозвратыТоваровТаблицаТовары;
					
				ТаблицаРеквизиты = ПараметрыПроведения.ВозвратыТоваровРеквизиты;
				
				СделкаВШапке = ложь;
			КонецЕсли; 
		Исключение
			
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		
		Если НЕ ЗначениеЗаполнено(ТаблицаРеквизиты)
			ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСписанныеТовары)Тогда
			
			ТекстСообщения = 
				НСтр("ru = 'В процедуре ВозвратыТоваров.ЗаполнитьДвиженияВозвратыТоваров() не удалось обработать запись по причине:
					|Не удалось получить параметры проведения документа'");
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ВозвратыТоваров, Выборка.Регистратор, ТекстСообщения);
				
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
				
		Реквизиты = ТаблицаРеквизиты[0];
		Для каждого СтрокаПартии Из ТаблицаСписанныеТовары Цикл
			
			Сделка = Неопределено;
			Если СделкаВШапке Тогда
				Сделка = Реквизиты[ИмяРеквизитаСделка];
			Иначе
				Сделка = СтрокаПартии[ИмяРеквизитаСделка];
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				Продолжить;
			КонецЕсли; 
		
			Движение              = НаборЗаписей.Добавить();
			Движение.Регистратор  = Выборка.Регистратор;
			Движение.Период       = СтрокаПартии.Период;
			Движение.Организация  = Реквизиты.Организация;
			Движение.СчетУчета    = СтрокаПартии.СчетУчета;
			Движение.Сделка       = Сделка;
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			Движение.Партия       = СтрокаПартии.Партия;
			
			Если СтрокаПартии.Количество < 0 Тогда
				Движение.Количество   = -СтрокаПартии.Количество;
			Иначе
				Движение.Количество   = СтрокаПартии.Количество;
			КонецЕсли; 
		
		КонецЦикла;
		
		Если НаборЗаписей.Количество() = 0 Тогда
			// Если нет возвращаемого товара - это не должно приводить к зацикливанию обработчика
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Попытка
			// Запись обработанного объекта
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
				
			// Если не удалось обработать какую-либо запись, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ВозвратыТоваров.ЗаполнитьДвиженияВозвратыТоваров() не удалось обработать запись по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ВозвратыТоваров, Выборка.Регистратор, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (ПроблемныхОбъектов + ОбъектовОбработано) = 0;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов > 0  Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ВозвратыТоваров.ЗаполнитьДвиженияВозвратыТоваров()
				|не удалось обработать некоторые документы (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ЦиклыОбмена,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ВозвратыТоваров.ЗаполнитьДвиженияВозвратыТоваров()
					|обработала очередную порцию документов : %1'"), ОбъектовОбработано));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
