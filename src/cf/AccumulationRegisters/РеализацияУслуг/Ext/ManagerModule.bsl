#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Определяет, требовать ли от пользователя заполнять в документах реализации услуг счет расходов.
//
// Параметры:
//  Период - Дата
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяСчетРасходовПоОказаниюУслуг(Период, Организация) Экспорт
	
	Возврат Справочники.НастройкиУчетаЗатрат.ТребуетсяСчетРасходовПоОказаниюУслуг(Период, Организация);
	
КонецФункции

// Заполняет набор записей при проведении документа - общим механизмом формирования движений.
//
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.РеализацияУслуг - заполняемый набор
//  Услуги       - ТаблицаЗначений - данные о выручке; состав колонок см. в теле процедуры
//  Выручка      - ТаблицаЗначений - сводные данные о суммах в валюте; состав колонок см. в теле процедуры
//  Реквизиты    - ТаблицаЗначений - общие для набора значения; состав колонок см. в теле процедуры
//
Процедура ДобавитьДвижения(НаборЗаписей, Услуги, Выручка, Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(Услуги)
	 Или Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Собственно добавление движений - в ДобавитьДвиженияПоВалидированнымДанным()
	// Здесь - только валидация исходных данных
	
	ОписаниеТаблиц = ОбщегоНазначенияБПВызовСервера.НовыйОписаниеТаблицПараметровПроведения();
	
	// Услуги
	Описание = ОбщегоНазначенияБПВызовСервера.ДобавитьОписаниеТаблицыПараметровПроведения(
		ОписаниеТаблиц,
		"Услуги", 
		Услуги);
	Если Выручка <> Неопределено Тогда
		Описание.Колонки.Добавить("ИмяСписка");
		Описание.Колонки.Добавить("НомерСтроки");
	КонецЕсли;
	Описание.Колонки.Добавить("Услуга");
	Описание.Колонки.Добавить("НоменклатурнаяГруппа");
	Описание.Колонки.Добавить("СчетРасходов");
	Описание.Колонки.Добавить("Сумма");
	
	// Выручка
	Описание = ОбщегоНазначенияБПВызовСервера.ДобавитьОписаниеТаблицыПараметровПроведения(
		ОписаниеТаблиц,
		"Выручка", 
		Выручка);
	Описание.Колонки.Добавить("ИмяСписка");
	Описание.Колонки.Добавить("НомерСтроки");
	Описание.Колонки.Добавить("СуммаБУ");
	Описание.Колонки.Добавить("СуммаНДСРуб");
	
	// Реквизиты

	Описание = ОбщегоНазначенияБПВызовСервера.ДобавитьОписаниеТаблицыПараметровПроведения(
		ОписаниеТаблиц,
		"Реквизиты",
		Реквизиты);
	Описание.Колонки.Добавить("Период");        // <Дата> - период движений - дата документа
	Описание.Колонки.Добавить("Организация");   // <СправочникСсылка.Организации>
	Описание.Колонки.Добавить("Подразделение"); // <СправочникСсылка.ПодразделенияОрганизаций> - обособленное подразделение, по которому отражена выручка
	
	ОписаниеТаблиц.Добавить(Описание);
	
	// Компонуем вместе
	Параметры = ОбщегоНазначенияБПВызовСервера.ПодготовитьТаблицыПараметрыПроведения(ОписаниеТаблиц);

	// Собственно формирование движений
	ДобавитьДвиженияПоВалидированнымДанным(
		НаборЗаписей, 
		Параметры.Услуги, 
		Параметры.Выручка, 
		Параметры.Реквизиты[0]);
	
КонецПроцедуры

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: заполняет в регистре измерение Услуга; вызывается в версии, в которой добавлено измерение.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьИзмерениеУслуга(ПараметрыОбработчика) Экспорт
	
	Курсор = Неопределено;
	ПараметрыОбработчика.Свойство("Курсор", Курсор);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РеализацияУслуг.МоментВремени КАК Курсор,
	|	РеализацияУслуг.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И РеализацияУслуг.Регистратор.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияУслуг.МоментВремени УБЫВ";
	
	Если Не ЗначениеЗаполнено(Курсор) Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РеализацияУслуг");
		СхемаЗапроса.Оператор.Отбор.Добавить("РеализацияУслуг.МоментВремени < &Курсор");
		ТекстЗапроса = СхемаЗапроса.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Курсор      = Выборка.Курсор;
		Регистратор = Выборка.Ссылка;
		
		ПараметрыОбработчика.Вставить("Курсор", Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.РеализацияУслуг.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			ЗаполнитьИзмерениеУслугаНабораЗаписей(Регистратор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыНакопления.РеализацияУслуг,
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Отложенный обработчик обновления: заполняет регистр данными документа АктОбОказанииПроизводственныхУслуг;
// вызывается в версии, в которой этот документ стал регистратором по регистру.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьДаннымиДокументаАктОбОказанииПроизводственныхУслуг(ПараметрыОбработчика) Экспорт
	
	ЗаполнитьДаннымиДокумента(ПараметрыОбработчика, Метаданные.Документы.АктОбОказанииПроизводственныхУслуг);
	
КонецПроцедуры

// Отложенный обработчик обновления: заполняет регистр данными документа РеализацияУслугПоПереработке;
// вызывается в версии, в которой этот документ стал регистратором по регистру.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьДаннымиДокументаРеализацияУслугПоПереработке(ПараметрыОбработчика) Экспорт
	
	ЗаполнитьДаннымиДокумента(ПараметрыОбработчика, Метаданные.Документы.РеализацияУслугПоПереработке);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДвиженияПоВалидированнымДанным(НаборЗаписей, Услуги, Выручка, Реквизиты)
	
	// Уточним сумму выручки в соответствии с курсами аванса
	Если Выручка.Количество() > 0 Тогда
		КлючевыеПоля = "ИмяСписка, НомерСтроки";
		Услуги.Индексы.Добавить(КлючевыеПоля);
		Отбор = Новый Структура(КлючевыеПоля);
		Для Каждого СтрокаВыручка Из Выручка Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаВыручка);
			Для Каждого СтрокаУслуги Из Услуги.НайтиСтроки(Отбор) Цикл
				СтрокаУслуги.Сумма = СтрокаВыручка.СуммаБУ - СтрокаВыручка.СуммаНДСРуб;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	// Дополним набор записей
	Для Каждого СтрокаУслуги Из Услуги Цикл
	
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,    "Период, Организация, Подразделение");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаУслуги, "СчетРасходов, Услуга, НоменклатурнаяГруппа, Сумма");
		
	КонецЦикла;
	
	НаборЗаписей.Записывать = Истина;
	
КонецПроцедуры

#Область ОбработчикиОбновления

#Область ЗаполнитьИзмерениеУслуга

Процедура ЗаполнитьИзмерениеУслугаНабораЗаписей(Регистратор)
	
	ИмяПроцедуры = "ЗаполнитьИзмерениеУслугаНабораЗаписей";
	
	Набор = РегистрыНакопления.РеализацияУслуг.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Прочитать();
	
	// Предполагаем, что в наборе одинаковые значения полей Организация, Подразделение и Услуга.
	// Если это предположение не выполняется, то обработку не выполняем.
	ТривиальныеПоляНабора = "Организация, Подразделение, Услуга";
	ЗначенияТривиальныхПолей = Набор.Выгрузить(, ТривиальныеПоляНабора);
	ЗначенияТривиальныхПолей.Свернуть(ТривиальныеПоляНабора);
	Если ЗначенияТривиальныхПолей.Количество() <> 1 Тогда
		ВызватьИсключение
			СтрШаблон(
				НСтр(
					"ru = 'Набор содержит значения полей, которые не могут быть обработаны процедурой %1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ИмяПроцедуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияТривиальныхПолей[0].Услуга) Тогда
		ВызватьИсключение НСтр("ru = 'Измерение Услуга заполнено ранее'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	// Прочитаем данные документа
	ДанныеДетализацииДоУслуг = ДанныеДетализацииДоУслуг(Регистратор);
	Если Не ЗначениеЗаполнено(ДанныеДетализацииДоУслуг) Тогда
		Возврат;
	КонецЕсли;
	
	// Сгруппируем записи, подлежащие детализации, по полям, которые были ключевыми до появления поля Услуга
	
	ПоляКлючаЗаписи = ПоляКлючаЗаписиБезПоляУслуга();
	ПоляКлючаЗаписиСтрокой = СтрСоединить(ПоляКлючаЗаписи, ",");
	
	ГруппыНабора = Новый Соответствие;
	Для Каждого Запись Из Набор Цикл
		
		Ключ = XMLКлючЗаписи(Запись, ПоляКлючаЗаписи);
		Если ДанныеДетализацииДоУслуг.Найти(Ключ, "Ключ") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписиГруппы = ГруппыНабора[Ключ];
		Если ЗаписиГруппы = Неопределено Тогда
			ЗаписиГруппы = Новый Массив;
			ГруппыНабора.Вставить(Ключ, ЗаписиГруппы);
		КонецЕсли;
		
		ЗаписиГруппы.Добавить(Запись);
		
	КонецЦикла;
	
	// Детализируем записи
	ТочностьРаспределения = Метаданные.РегистрыНакопления.РеализацияУслуг.Ресурсы.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	Для Каждого ГруппаДетальныхДанных Из ДанныеДетализацииДоУслуг Цикл
		
		ЗаписиГруппы = ГруппыНабора[ГруппаДетальныхДанных.Ключ];
		Если ЗаписиГруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УжеЕстьУслуги = Ложь;
		СуммаЗаписей = 0;
		Для Каждого Запись Из ЗаписиГруппы Цикл
			СуммаЗаписей = СуммаЗаписей + Запись.Сумма;
			УжеЕстьУслуги = ЗначениеЗаполнено(Запись.Услуга);
			Если УжеЕстьУслуги Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаЗаписей = 0 Или УжеЕстьУслуги Тогда
			Продолжить;
		КонецЕсли;
		
		ДетальныеДанныеГруппы = ГруппаДетальныхДанных.Данные;
		Коэффициенты = ДетальныеДанныеГруппы.ВыгрузитьКолонку("Сумма");
		СуммыУслуг = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СуммаЗаписей,
			Коэффициенты,
			ТочностьРаспределения);
		
		Если СуммыУслуг = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Заменим одни записи на другие
		ЭталоннаяЗаписьГруппы = ЗаписиГруппы[0];
		
		Для Каждого ДанныеУслуги Из ДетальныеДанныеГруппы Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЭталоннаяЗаписьГруппы, "Период, Регистратор");
			ЗаполнитьЗначенияСвойств(Запись, ЭталоннаяЗаписьГруппы, ТривиальныеПоляНабора);
			ЗаполнитьЗначенияСвойств(Запись, ЭталоннаяЗаписьГруппы, ПоляКлючаЗаписиСтрокой);
			Запись.Услуга = ДанныеУслуги.Услуга;
			Запись.Сумма  = СуммыУслуг[ДетальныеДанныеГруппы.Индекс(ДанныеУслуги)];
		КонецЦикла;
		
		Для Каждого Запись Из ЗаписиГруппы Цикл
			Набор.Удалить(Запись);
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

Функция ПоляКлючаЗаписиБезПоляУслуга()
	Возврат СтрРазделить("СчетРасходов,НоменклатурнаяГруппа", ",");
КонецФункции

Функция XMLКлючЗаписи(Запись, ПоляКлюча)
	
	ЗначенияКлюча = Новый Массив;
	
	Для Каждого ИмяПоля Из ПоляКлюча Цикл
		ЗначенияКлюча.Добавить(XMLСтрока(Запись[ИмяПоля]));
	КонецЦикла;
	
	Возврат СтрСоединить(ЗначенияКлюча, "+");
	
КонецФункции

Функция ДанныеДетализацииДоУслуг(Ссылка)
	
	ДанныеДетализации = Новый ТаблицаЗначений;
	ДанныеДетализации.Колонки.Добавить("Ключ",   Новый ОписаниеТипов("Строка"));
	ДанныеДетализации.Колонки.Добавить("Данные", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	Попытка
		ТекстЗапроса = МенеджерДокумента.ТекстЗапросаДанныеДетализацииДоУслуг();
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыНакопления.РеализацияУслуг,
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат ДанныеДетализации;
		
	КонецПопытки;
	
	ПоляКлюча = ПоляКлючаЗаписиБезПоляУслуга();
	
	ШаблонДанныеГруппы = Новый ТаблицаЗначений;
	ШаблонДанныеГруппы.Колонки.Добавить("Услуга", Метаданные.РегистрыНакопления.РеализацияУслуг.Измерения.Услуга.Тип);
	ШаблонДанныеГруппы.Колонки.Добавить("Сумма",  Метаданные.РегистрыНакопления.РеализацияУслуг.Ресурсы.Сумма.Тип);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаСчетРасходов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетРасходов.Следующий() Цикл
		
		ВыборкаНоменклатурнаяГруппа = ВыборкаСчетРасходов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатурнаяГруппа.Следующий() Цикл
			
			КлючГруппы = XMLКлючЗаписи(ВыборкаНоменклатурнаяГруппа, ПоляКлюча);
			ДанныеГруппы = ШаблонДанныеГруппы.СкопироватьКолонки();
			
			Выборка = ВыборкаНоменклатурнаяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЕстьУслуги = Ложь;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДанныеГруппы.Добавить(), Выборка);
				ЕстьУслуги = ЕстьУслуги Или ЗначениеЗаполнено(Выборка.Услуга);
			КонецЦикла;
			
			Если Не ЕстьУслуги Тогда
				Продолжить;
			КонецЕсли;
			
			Группа = ДанныеДетализации.Добавить();
			Группа.Ключ   = КлючГруппы;
			Группа.Данные = ДанныеГруппы;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДетализации;
	
КонецФункции

#КонецОбласти

#Область ЗаполнитьДаннымиДокумента

Процедура ЗаполнитьДаннымиДокумента(ПараметрыОбработчика, Документ)
	
	Курсор = Неопределено;
	ПараметрыОбработчика.Свойство("Курсор", Курсор);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	Регистраторы.МоментВремени КАК Курсор,
	|	Регистраторы.Ссылка КАК Ссылка
	|ИЗ
	|	ДанныеДокумента КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|		ПО Регистраторы.Ссылка = РеализацияУслуг.Регистратор
	|ГДЕ
	|	Регистраторы.Проведен
	|	И РеализацияУслуг.Регистратор ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ";
	
	СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "Регистраторы");
	
	// Установим таблицу для выборки
	Таблица = СхемаЗапроса.Запрос.ДоступныеТаблицы.Найти(Документ.ПолноеИмя());
	ИсточникиДанных = СхемаЗапроса.Оператор.Источники;
	ИндексТаблицы = ИсточникиДанных.Индекс(СхемаЗапроса.Источник);
	ИсточникиДанных.Заменить(ИндексТаблицы, Таблица);
	ПсевдонимТаблицы = СхемаЗапроса.Таблица.Псевдоним; // Для удобства, платформа подменяет псевдоним при замене таблицы
	
	// Установим курсорную выборку
	Если ЗначениеЗаполнено(Курсор) Тогда
		СхемаЗапроса.Оператор.Отбор.Добавить(СтрШаблон("%1.МоментВремени < &Курсор", ПсевдонимТаблицы));
	КонецЕсли;
	
	Запрос = Новый Запрос(СхемаЗапроса.Схема.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("Курсор", Курсор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	ЗапросДвиженийИДанныхДокументов = ЗапросДвиженийИДанныхДокументов(Документ);
	
	Если ЗапросДвиженийИДанныхДокументов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Курсор      = Выборка.Курсор;
		Регистратор = Выборка.Ссылка;
		
		ПараметрыОбработчика.Вставить("Курсор", Курсор);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.РеализацияУслуг.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			ЗаполнитьНаборЗаписейДаннымиДокумента(Регистратор, ЗапросДвиженийИДанныхДокументов);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Документ,
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейДаннымиДокумента(Регистратор, ЗапросДвиженйИДанныхДокумента)
	
	НаборЗаписей = РегистрыНакопления.РеализацияУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Если ЗначениеЗаполнено(НаборЗаписей) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРегистрРеализацияУслуг(НаборЗаписей, Регистратор, ЗапросДвиженйИДанныхДокумента);
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаполнитьРегистрРеализацияУслуг(НаборЗаписей, Регистратор, ЗапросДвиженйИДанныхДокумента)
	
	РеквизитыРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Организация, Дата, ПодразделениеОрганизации, ВалютаДокумента");
	Организация = РеквизитыРегистратора.Организация;
	Дата = РеквизитыРегистратора.Дата;
	
	ТолькоОсобый   = УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Дата);
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ЗапросДвиженйИДанныхДокумента.УстановитьПараметр("Регистратор", Регистратор);
		
	МассивРезультатов = ЗапросДвиженйИДанныхДокумента.ВыполнитьПакет();
	
	РезультатВыручка                       = МассивРезультатов[2];
	РезультатНДС                           = МассивРезультатов[3];
	
	РезультатТабличнаяЧастьСгруппированная = МассивРезультатов[5];
	РезультатТабличнаяЧастьСДаннымиНДС     = МассивРезультатов[6];

	
	Выручка = РезультатВыручка.Выгрузить();
	Выручка.Индексы.Добавить("СчетДоходов, СчетРасходов, НоменклатурнаяГруппа, Номенклатура");
	
	НДС = РезультатНДС.Выгрузить();
	
	ТабличнаяЧастьСгруппированная = РезультатТабличнаяЧастьСгруппированная.Выгрузить();
	ТабличнаяЧастьСгруппированная.Индексы.Добавить("СчетДоходов, НоменклатурнаяГруппа, Номенклатура");
	
	ТабличнаяЧастьСДаннымиНДС = РезультатТабличнаяЧастьСДаннымиНДС.Выгрузить();
	ТабличнаяЧастьСДаннымиНДС.Индексы.Добавить("НоменклатурнаяГруппа, СтавкаНДС");

	// Данные для регистра "РеализацияУслуг" сформируем в таблице значений "Выручка". Для этого в ней нужно заполнить колонку "СчетРасходов"
	// (сейчас там заполнена только колонка "СчетДоходов"), а затем из колонки "Сумма" вычесть сумму НДС.
	ЗаполнитьСчетРасходов(Выручка, ТабличнаяЧастьСгруппированная, ТолькоОсобый);
	
	// Распределим суммы НДС на выручку пропорционально сумме по номенклатурной группе и ставке НДС (потому что в проводках НДС нет номенклатуры), 
	// а затем вычтем их из сумм выручки.
	ЭтоВалютныйДокумент = ВалютаРеглУчета <> РеквизитыРегистратора.ВалютаДокумента;
	УчестьСуммуНДС(Выручка, НДС, ТабличнаяЧастьСДаннымиНДС, ЭтоВалютныйДокумент);

	// Сформируем движения.
	Для Каждого СтрокаВыручка Из Выручка Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаВыручка);
		Запись.Организация   = Организация;
		Запись.Период        = Дата;
		Запись.Подразделение = РеквизитыРегистратора.ПодразделениеОрганизации;
		Запись.Услуга        = СтрокаВыручка.Номенклатура;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСчетРасходов(Выручка, ТабличнаяЧасть, ТолькоОсобый)
	
	// Сначала заполним колонку "СчетДоходов" по данным табличной части документа. При необходимости добавим строки и распределим сумму.
	// Поскольку будем добавлять строки, обход таблицы "Выручка" делаем по индексу, а не путем обхода коллекции.
	
	ИндексВыручка = 0;
	Для ИндексВыручка = 0 По Выручка.Количество() - 1 Цикл
		
		СтрокаВыручка = Выручка[ИндексВыручка];
		
		Отбор = Новый Структура("СчетДоходов, НоменклатурнаяГруппа, Номенклатура");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаВыручка);
		МассивСтрокТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Отбор);
		
		КоличествоОтобранныхСтрок = МассивСтрокТабличнойЧасти.Количество();
		// Если одна строка, то сразу берем данные из нее.
		Если КоличествоОтобранныхСтрок = 1 Тогда
			СтрокаВыручка.СчетРасходов = МассивСтрокТабличнойЧасти[0].СчетРасходов;
		// Если несколько строк, то распределим по сумме.
		ИначеЕсли КоличествоОтобранныхСтрок > 1 Тогда
			
			КоэффициентыСумм = Новый Массив;
			
			Для Каждого СтрокаТЧ Из МассивСтрокТабличнойЧасти Цикл
				КоэффициентыСумм.Добавить(СтрокаТЧ.Сумма);
			КонецЦикла;
			
			РезультатРаспределения =
				ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаВыручка.Сумма, КоэффициентыСумм, 2);
			
			Если РезультатРаспределения <> Неопределено Тогда
				
				// Заполняем строку проводки по первой найденной строке табличной части. Остальные строки будем добавлять.
				СтрокаВыручка.СчетРасходов = МассивСтрокТабличнойЧасти[0].СчетРасходов;
				СтрокаВыручка.Сумма        = РезультатРаспределения[0];
				
				// Если в табличной части несколько строк, соответствующих отбору, то досоздадим нужное количество строк в таблице значений "Выручка".
				// РезультатРаспределения и МассивСтрокТабличнойЧасти - массивы с одинаковым количеством элементов.
				Для ИндексОтбораСтрок = 1 По КоличествоОтобранныхСтрок - 1 Цикл
					
					НоваяСтрока = Выручка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыручка);
					НоваяСтрока.СчетРасходов = МассивСтрокТабличнойЧасти[ИндексОтбораСтрок].СчетРасходов;
					НоваяСтрока.Сумма        = РезультатРаспределения[ИндексОтбораСтрок];
					
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			// Если проводки и табличные части не сопоставились, определим счет расходов по счету доходов.
			Если ТолькоОсобый Или СтрокаВыручка.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД Тогда
				СтрокаВыручка.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
			Иначе 
				СтрокаВыручка.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УчестьСуммуНДС(Выручка, НДС, ТабличнаяЧастьСДаннымиНДС, ЭтоВалютныйДокумент)
	
	// В документах с валютой, отличной от валюты регламентированного учета сумма НДС рассчитывается не по полю "СуммаНДС", 
	// а по полю "Сумма" (см. УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте()).
	Если ЭтоВалютныйДокумент Тогда
		ПолеБазыРаспределенияНДС = "Сумма";
	Иначе
		ПолеБазыРаспределенияНДС = "СуммаНДС";
	КонецЕсли;

	// Для каждой строки, отражающей сумму проводки НДС, ищем строки в документе, содержащих ту же ставку и номенклатурную группу.
	// Распределяем эту сумму на строки документа, а затем результат распределения вычитаем из сумм таблицы "Выручка" по соответствующей аналитике.
	Для Каждого СтрокаНДС Из НДС Цикл
		
		ОтборСтрокТЧ = Новый Структура("НоменклатурнаяГруппа, СтавкаНДС");
		ЗаполнитьЗначенияСвойств(ОтборСтрокТЧ, СтрокаНДС);
		
		МассивСтрокТЧ = ТабличнаяЧастьСДаннымиНДС.НайтиСтроки(ОтборСтрокТЧ);
		
		КоэффициентыРаспределения = Новый Массив;
		
		Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
			КоэффициентыРаспределения.Добавить(СтрокаТЧ[ПолеБазыРаспределенияНДС]);
		КонецЦикла;
		
		РезультатРаспределения =
			ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНДС.Сумма, КоэффициентыРаспределения, 2);
			
		Для ИндексМассиваРаспределения = 0 По РезультатРаспределения.Количество() - 1 Цикл
			// Элементы массива РезультатРаспределения соответствуют элементам МассивСтрокТЧ. Используем для них общий индекс.
			НайденнаяСтрокаТЧ = МассивСтрокТЧ[ИндексМассиваРаспределения];
			
			ОтборСтрокВыручки = Новый Структура("СчетДоходов, СчетРасходов, НоменклатурнаяГруппа, Номенклатура");
			ЗаполнитьЗначенияСвойств(ОтборСтрокВыручки, НайденнаяСтрокаТЧ);
			НайденныеСтрокиВыручки = Выручка.НайтиСтроки(ОтборСтрокВыручки);
			
			// Аналитика таблицы Выручка состоит из "СчетДоходов, СчетРасходов, НоменклатурнаяГруппа, Номенклатура",
			// поэтому массив НайденныеСтрокиВыручки будет состоять не более чем из одного элемента.
			Если НайденныеСтрокиВыручки.Количество() = 1 Тогда
				СуммаНДС = РезультатРаспределения[ИндексМассиваРаспределения];
				НайденныеСтрокиВыручки[0].Сумма = НайденныеСтрокиВыручки[0].Сумма - СуммаНДС;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Функция ЗапросДвиженийИДанныхДокументов(МетаданныеДокумента)
	
	// Таблица ДанныеДокумента в запросе будет заменена на табличную часть "Услуги" соответствующего вида документа.
	// Порядок и количество запросов в пакете имеет значение: далее будет обращение по индексу к результату пакета запросов.
	ИзменяемыйТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетКт КАК Счет,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ СуммыВыручки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт В(&СчетаВыручки)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетДт КАК Счет,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ СуммыНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт В(&СчетаНДСПродажи)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВыручки.Счет КАК СчетДоходов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасходов,
	|	ХозрасчетныйСубконтоНоменклатурнаяГруппа.Значение КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйСубконтоНоменклатура.Значение КАК Номенклатура,
	|	СУММА(СуммыВыручки.Сумма) КАК Сумма
	|ИЗ
	|	СуммыВыручки КАК СуммыВыручки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоНоменклатура
	|		ПО СуммыВыручки.Регистратор = ХозрасчетныйСубконтоНоменклатура.Регистратор
	|			И СуммыВыручки.НомерСтроки = ХозрасчетныйСубконтоНоменклатура.НомерСтроки
	|			И (ХозрасчетныйСубконтоНоменклатура.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконтоНоменклатура.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоНоменклатурнаяГруппа
	|		ПО СуммыВыручки.Регистратор = ХозрасчетныйСубконтоНоменклатурнаяГруппа.Регистратор
	|			И СуммыВыручки.НомерСтроки = ХозрасчетныйСубконтоНоменклатурнаяГруппа.НомерСтроки
	|			И (ХозрасчетныйСубконтоНоменклатурнаяГруппа.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконтоНоменклатурнаяГруппа.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконтоНоменклатура.Значение,
	|	ХозрасчетныйСубконтоНоменклатурнаяГруппа.Значение,
	|	СуммыВыручки.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыНДС.Счет КАК Счет,
	|	ХозрасчетныйСубконтоНоменклатурнаяГруппа.Значение КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйСубконтоСтавкаНДС.Значение КАК СтавкаНДС,
	|	СУММА(СуммыНДС.Сумма) КАК Сумма
	|ИЗ
	|	СуммыНДС КАК СуммыНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоНоменклатурнаяГруппа
	|		ПО СуммыНДС.Регистратор = ХозрасчетныйСубконтоНоменклатурнаяГруппа.Регистратор
	|			И СуммыНДС.НомерСтроки = ХозрасчетныйСубконтоНоменклатурнаяГруппа.НомерСтроки
	|			И (ХозрасчетныйСубконтоНоменклатурнаяГруппа.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконтоНоменклатурнаяГруппа.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоСтавкаНДС
	|		ПО СуммыНДС.Регистратор = ХозрасчетныйСубконтоСтавкаНДС.Регистратор
	|			И СуммыНДС.НомерСтроки = ХозрасчетныйСубконтоСтавкаНДС.НомерСтроки
	|			И (ХозрасчетныйСубконтоСтавкаНДС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконтоСтавкаНДС.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС))
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыНДС.Счет,
	|	ХозрасчетныйСубконтоНоменклатурнаяГруппа.Значение,
	|	ХозрасчетныйСубконтоСтавкаНДС.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.СчетДоходов КАК СчетДоходов,
	|	ДанныеДокумента.СчетРасходов КАК СчетРасходов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеДокумента.Субконто КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеДокумента.Ссылка.СуммаВключаетНДС
	|				ТОГДА ДанныеДокумента.Сумма
	|			ИНАЧЕ ДанныеДокумента.СуммаНДС + ДанныеДокумента.Сумма
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Регистратор
	|	И ДанныеДокумента.СчетДоходов В (&СчетаВыручки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеДокумента.Субконто КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|	ДанныеДокумента.СчетРасходов,
	|	ДанныеДокумента.СчетДоходов,
	|	ДанныеДокумента.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьСгруппированная.СчетДоходов КАК СчетДоходов,
	|	ТабличнаяЧастьСгруппированная.СчетРасходов КАК СчетРасходов,
	|	ТабличнаяЧастьСгруппированная.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТабличнаяЧастьСгруппированная.Номенклатура КАК Номенклатура,
	|	СУММА(ТабличнаяЧастьСгруппированная.Сумма) КАК Сумма
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧастьСгруппированная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧастьСгруппированная.Номенклатура,
	|	ТабличнаяЧастьСгруппированная.СчетРасходов,
	|	ТабличнаяЧастьСгруппированная.СчетДоходов,
	|	ТабличнаяЧастьСгруппированная.НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.СчетДоходов КАК СчетДоходов,
	|	ТабличнаяЧасть.СчетРасходов КАК СчетРасходов,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ТабличнаяЧасть.Сумма КАК Сумма
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть";
	
	СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ИзменяемыйТекстЗапроса, "ДанныеДокумента");

	ИмяТаблицыУслуги = "";
	
	Если МетаданныеДокумента = Метаданные.Документы.АктОбОказанииПроизводственныхУслуг Тогда
		ИмяТаблицыУслуги = "Документ.АктОбОказанииПроизводственныхУслуг.Услуги";
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.РеализацияУслугПоПереработке Тогда
		ИмяТаблицыУслуги = "Документ.РеализацияУслугПоПереработке.Услуги";
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый вид документа для заполнения движений по регистру ""Реализация услуг"": %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, МетаданныеДокумента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТаблицаУслуги   = СхемаЗапроса.Запрос.ДоступныеТаблицы.Найти(ИмяТаблицыУслуги);
	ИсточникиДанных = СхемаЗапроса.Оператор.Источники;
	ИндексТаблицы   = ИсточникиДанных.Индекс(СхемаЗапроса.Источник);
	ИсточникиДанных.Заменить(ИндексТаблицы, ТаблицаУслуги);
	
	Запрос = Новый Запрос(СхемаЗапроса.Схема.ПолучитьТекстЗапроса());

	Запрос.УстановитьПараметр("СчетаВыручки", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	Запрос.УстановитьПараметр("СчетаНДСПродажи", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи_НДС));

	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
