#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: заполняет в регистре реквизит Источник.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьРеквизитИсточник(ПараметрыОбработчика) Экспорт
	
	Курсор = Неопределено;
	ПараметрыОбработчика.Свойство("Курсор", Курсор);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РазметкаАУСН.МоментВремени КАК Курсор,
	|	РазметкаАУСН.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РазметкаАУСН КАК РазметкаАУСН
	|ГДЕ
	|	РазметкаАУСН.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиРазметкиАУСН.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазметкаАУСН.МоментВремени УБЫВ";
	
	Если Не ЗначениеЗаполнено(Курсор) Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		СхемаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РазметкаАУСН");
		СхемаЗапроса.Оператор.Отбор.Добавить("РазметкаАУСН.МоментВремени < &Курсор");
		ТекстЗапроса = СхемаЗапроса.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		Курсор = Выборка.Курсор;
		ПараметрыОбработчика.Вставить("Курсор", Курсор);
		
		Регистратор = Выборка.Ссылка;
		ТипРегистратора = ТипЗнч(Регистратор);
		
		Если ТипРегистратора = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			ВидДокумента = "Документ.ПоступлениеНаРасчетныйСчет";
		ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			ВидДокумента = "Документ.СписаниеСРасчетногоСчета";
		Иначе
			ВидДокумента = Неопределено;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.РазметкаАУСН.НаборЗаписей");
			ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(ВидДокумента);
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Регистратор);
			КонецЕсли;
			
			БлокировкаДанных.Заблокировать();
			
			ЗаполнитьРеквизитИсточникНабораЗаписей(Регистратор);
			
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ЗаполнитьРеквизитИсточникРазметкиАУСНДокумента(Регистратор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать движения документа: %1 по причине:
				|%2'"),
				Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыНакопления.РазметкаАУСН,
				Регистратор,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ИмяПроцедурыОбновления = НСтр("ru = 'РегистрыНакопления.РазметкаАУСН.ЗаполнитьРеквизитИсточник'");
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре %1 не удалось обработать документы:
				|в %2 из %3 возникли ошибки'"),
			ИмяПроцедурыОбновления,
			ПроблемныхОбъектов,
			ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура %1 обработала очередную порцию данных: %2 документов'"),
				ИмяПроцедурыОбновления,
				ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

Процедура ЗаполнитьРеквизитИсточникНабораЗаписей(Регистратор)
	
	Набор = РегистрыНакопления.РазметкаАУСН.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Прочитать();
	
	ЗаписатьНабор = Ложь;
	
	Для Каждого Запись Из Набор Цикл
		
		Если Не ЗначениеЗаполнено(Запись.Источник) Тогда
			Запись.Источник = Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию();
			ЗаписатьНабор = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьНабор Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитИсточникРазметкиАУСНДокумента(Регистратор)

	ОбъектРегистратора = Регистратор.ПолучитьОбъект();
	Если ОбъектРегистратора <> Неопределено
		И Не ЗначениеЗаполнено(ОбъектРегистратора.ИсточникРазметкиАУСН) Тогда
		ОбъектРегистратора.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектРегистратора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли