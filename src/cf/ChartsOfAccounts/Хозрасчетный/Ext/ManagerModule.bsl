#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Описывает простой рабочий план счетов
//
Функция ОсновнойСчет(Назначение) Экспорт
	
	Если Назначение = "Затраты" Тогда
		
		Возврат ОбщехозяйственныеРасходы;
		
	ИначеЕсли Назначение = "ЗатратыНаПроизводство" Тогда
		
		Возврат ОсновноеПроизводство;
		
	ИначеЕсли Назначение = "Запасы" Тогда
		
		Возврат ТоварыНаСкладах;
		
	ИначеЕсли Назначение = "ЗапасыВЦенахПродажи" Тогда
		
		Возврат ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		
	ИначеЕсли Назначение = "ОборудованиеНаСкладе" Тогда
		
		Возврат ПриобретениеКомпонентовОсновныхСредств;
		
	ИначеЕсли Назначение = "ТоварыПринятыеНаКомиссию" Тогда
		
		Возврат ТоварыНаСкладе;
		
	ИначеЕсли Назначение = "ВозвратнаяТараЗаБалансом" Тогда
		
		Возврат ВозвратнаяТараНаСкладе;
		
	ИначеЕсли Назначение = "ВозвратнаяТараУПокупателя" Тогда
		
		Возврат ВозвратнаяТараУПокупателя;
		
	ИначеЕсли Назначение = "ТоварыПриобретенныеДляКомитента" Тогда
		
		Возврат ТМЦпринятыеНаОтветственноеХранение;
		
	ИначеЕсли Назначение = "ЗапасыОтгруженные" Тогда
		
		// См. также СчетОтгруженныхЗапасов()
		Возврат ПокупныеТоварыОтгруженные;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработку" Тогда
		
		Возврат МатериалыПринятыеВПереработку;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработкуВПроизводстве" Тогда
		
		Возврат МатериалыПринятыеВПереработкуВПроизводстве;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Запасы" Тогда
		
		Возврат НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Расходы" Тогда
		
		Возврат НДСпоПриобретеннымУслугам;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОсновныеСредства" Тогда
		
		Возврат НДСприПриобретенииОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОбъектыСтроительства" Тогда
		
		Возврат НДСприСтроительствеОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_НематериальныеАктивы" Тогда
		
		Возврат НДСпоПриобретеннымНематериальнымАктивам;
		
	ИначеЕсли Назначение = "НаличныеДеньги" Тогда
		
		Возврат КассаОрганизации;
		
	ИначеЕсли Назначение = "БезналичныеДеньги" Тогда
		
		Возврат РасчетныеСчета;
		
	ИначеЕсли Назначение = "БезналичныеДеньгиЦифровые" Тогда
		
		Возврат ЦифровойРубль;
		
	ИначеЕсли Назначение = "Депозит" Тогда
		
		Возврат ДепозитныеСчета;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетов" Тогда
		
		Возврат ПрочиеСпециальныеСчета;
		
	ИначеЕсли Назначение = "Инкассация" Тогда
		
		Возврат ПереводыВПути;
		
	ИначеЕсли Назначение = "ПереводыВПути" Тогда
		
		Возврат ПереводыВПути;
		
	ИначеЕсли Назначение = "НаличныеДеньгиВВалюте" Тогда
		
		Возврат КассаОрганизацииВал;
		
	ИначеЕсли Назначение = "БезналичныеДеньгиВВалюте" Тогда
		
		Возврат ВалютныеСчета;
		
	ИначеЕсли Назначение = "ДепозитВВалюте" Тогда
		
		Возврат ДепозитныеСчетаВал;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетовВВалюте" Тогда
		
		Возврат ПрочиеСпециальныеСчетаВал;
		
	ИначеЕсли Назначение = "ИнкассацияВВалюте" Тогда
		
		Возврат ПереводыВПутиВал;
		
	ИначеЕсли Назначение = "ПереводыВПутиВВалюте" Тогда
		
		Возврат ПереводыВПутиВал;
		
	ИначеЕсли Назначение = "РасходыНаПродажу" Тогда
		
		Возврат ИздержкиОбращения;
		
	ИначеЕсли Назначение = "ОбъектыСтроительства" Тогда
		
		Возврат СтроительствоОбъектовОсновныхСредств;
		
	ИначеЕсли Назначение = "ПрочиеДоходы" Тогда
		
		Возврат ПрочиеДоходы;
		
	ИначеЕсли Назначение = "ПрочиеРасходы" Тогда
		
		Возврат ПрочиеРасходы;
		
	ИначеЕсли Назначение = "ОсновныеСредства" Тогда
		
		Возврат ОСвОрганизации;
		
	ИначеЕсли Назначение = "ОсновныеСредстваАмортизация" Тогда
		
		Возврат АмортизацияОС_01;
		
	ИначеЕсли Назначение = "НематериальныеАктивы" Тогда
		
		Возврат НематериальныеАктивыОрганизации;
		
	ИначеЕсли Назначение = "НематериальныеАктивыАмортизация" Тогда
		
		Возврат АмортизацияНематериальныхАктивов;
		
	ИначеЕсли Назначение = "Налоги" Тогда
		
		Возврат ПрочиеНалогиИСборы;
		
	ИначеЕсли Назначение = "Зарплата" Тогда
		
		Возврат РасчетыСПерсоналомПоОплатеТруда;
		
	ИначеЕсли Назначение = "Подотчет" Тогда
		
		Возврат РасчетыСПодотчетнымиЛицами;
		
	ИначеЕсли Назначение = "ПодотчетВВалюте" Тогда
		
		Возврат РасчетыСПодотчетнымиЛицамиВал;
		
	ИначеЕсли Назначение = "УставныйКапитал" Тогда
		
		Возврат УставныйКапитал_ПрочийКапитал;
		
	ИначеЕсли Назначение = "Учредители" Тогда
		
		Возврат РасчетыПоВкладамВУставныйКапитал;
		
	ИначеЕсли Назначение = "ДенежныеДокументы" Тогда
		
		Возврат ДенежныеДокументы;
		
	ИначеЕсли Назначение = "ДенежныеДокументыВВалюте" Тогда
		
		Возврат ДенежныеДокументыВал;
		
	ИначеЕсли Назначение = "КассаПлатежногоАгента" Тогда
		
		Возврат КассаПлатежногоАгента;
		
	Иначе
		
		Возврат ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Формирует представление счета, включающее код и наименование
//
// Параметры:
//  Счет              - ПланСчетовСсылка.Хозрасчетный - счет
//  КодСчета          - Строка - код счета, значение стандартного реквизита Код
//  НаименованиеСчета - Строка - наименование счета, значение стандартного реквизита Наименование
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолноеПредставлениеСчета(Счет, Знач КодСчета = Неопределено, Знач НаименованиеСчета = Неопределено) Экспорт
	
	Если КодСчета = Неопределено Или НаименованиеСчета = Неопределено Тогда
		
		ЭлементыПредставления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
		
		КодСчета          = ЭлементыПредставления.Код;
		НаименованиеСчета = ЭлементыПредставления.Наименование;
		
	КонецЕсли;
	
	ПредставлениеСчета = КраткоеПредставлениеСчета(Счет);
	Если ПустаяСтрока(ПредставлениеСчета) Тогда
		ПредставлениеСчета = НаименованиеСчета;
	КонецЕсли;
		
	Возврат СтрШаблон(НСтр("ru = '%1 ""%2""'"), КодСчета, ПредставлениеСчета);
	
КонецФункции

Функция СчетОтгруженныхЗапасов(СчетЗапасов) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетЗапасов) Тогда
		Возврат ОсновнойСчет("ЗапасыОтгруженные");
	КонецЕсли;
	
	// Правила определения счета отгруженных запасов по основному счету запасов
	СоответствиеСчетов = Новый Соответствие;
	СоответствиеСчетов.Вставить(
		ГотоваяПродукция,             // 43
		ГотоваяПродукцияОтгруженная); // 45.02
	СоответствиеСчетов.Вставить(
		Товары,                       // 41
		ПокупныеТоварыОтгруженные);   // 45.01
	СоответствиеСчетов.Вставить(
		ТоварыНаСкладе,               // 004.01
		ТоварыПереданныеНаКомиссию);  // 004.02
	СоответствиеСчетов.Вставить(
		ВозвратнаяТараНаСкладе,       // 012.01
		ВозвратнаяТараУПокупателя);   // 012.02
		
	// ... для счетов, не перечисленных выше
	Если СчетЗапасов.Забалансовый Тогда
		СчетОтгруженныхЗапасов = СчетЗапасов;
	Иначе
		СчетОтгруженныхЗапасов = ПрочиеТоварыОтгруженные; // 45.03
	КонецЕсли;
	
	// Применение правил
	Для Каждого ЭлементСоответствияСчетов Из СоответствиеСчетов Цикл
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетЗапасов, ЭлементСоответствияСчетов.Ключ) Тогда
			СчетОтгруженныхЗапасов = ЭлементСоответствияСчетов.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СчетОтгруженныхЗапасов;
		
КонецФункции

// Возвращает список счетов, для которых аналитика отличается от общий настроек в параметрах учета.
// Напр., счета 10.03.2, 10.11 - отвязывается от общей настройки "Учет запасов".
//
// Возвращаемое значение:
//     Массив
//
Функция ПолучитьСчетаИсключения() Экспорт
	
	МассивСчетовИсключений = Новый Массив;
	
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТопливоВБаке);                                             // 10.03.2
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);                     // 10.11
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);                                          // 60.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные);                                        // 62.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);  // 76.01
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);            // 76.21
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);                         // 76.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиРуб);               // 62.ОТ.1
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиВал);               // 62.ОТ.2
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиУЕ);                // 62.ОТ.3
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеРуб);                                  // ОТ.01
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеВал);                                  // ОТ.02
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);                                   // ОТ.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями);                         // 76.13
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовИсключений, СчетаРасчетовПоАренде());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовИсключений, СчетаПроцентовПоОбязательствам());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовИсключений)";
	
	МассивСчетовИсключений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ГСМ); // Для группы 10.03 общее субконто - Номенклатура
	
	Возврат МассивСчетовИсключений;
	
КонецФункции

// Определяет перечень аналитики, которая может присутствовать на счете,
// но скрыта от пользователя, до тех пор, пока не предполагает вариативности.
// 
// Возвращаемое значение:
//  Массив - неиспользуемая аналитика. Элементы массива: 
//       * ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - вид субконто на счете
//       * Строка - имя измерения регистра бухгалтерии ("Подразделение")
//
Функция НеиспользуемаяАналитика() Экспорт

	НеиспользуемаяАналитика = Новый Массив;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") Тогда
		НеиспользуемаяАналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		НеиспользуемаяАналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли;
	Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения() Тогда
		НеиспользуемаяАналитика.Добавить("Подразделение");
	КонецЕсли;
	
	Возврат НеиспользуемаяАналитика;
	
КонецФункции

// Возвращает массив или список забалансовых счетов учета с аналитикой по номенклатуре 
// в зависимости от параметра ВыводитьВВидеСписка.
//
// Параметры:
//  ВыводитьВВидеСписка - Булево. Не обязательный параметр. Значение по умолчанию ЛОЖЬ.
//
// Возвращаемое значение:
//  Массив - забалансовые счета с аналитикой по номенклатуре, если параметр ВыводитьВВидеСписка = ЛОЖЬ.
//           Элементы массива:
//             * ПланСчетовСсылка.Хозрасчетный - забалансовый счет с видом субконто "Номенклатура".
//  СписокЗначений - забалансовые счета с аналитикой по номенклатуре, если параметр ВыводитьВВидеСписка = Истина.
//           Элементы списка:
//             * ПланСчетовСсылка.Хозрасчетный - забалансовый счет с видом субконто "Номенклатура".
Функция СчетаЗабалансовогоУчетаЗапасов(Знач ВыводитьВВидеСписка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка.Забалансовый
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках";
	
	Если ВыводитьВВидеСписка Тогда
		
		Список = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Возврат Список;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПростойСписок";
	КомандаПечати.Представление = НСтр("ru = 'Простой список'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СПодробнымиОписаниями";
	КомандаПечати.Представление = НСтр("ru = 'С подробными описаниями'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов (с подробными описаниями)'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

Функция ПечатьПланаСчетов(ВыводитьОписания = Ложь, ПараметрыПриказа = Неопределено) Экспорт
	
	Макет = ПланыСчетов.Хозрасчетный.ПолучитьМакет("Описание");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ПараметрыПриказа <> Неопределено Тогда
		Приказ = Макет.ПолучитьОбласть("Приказ");
		Приказ.Параметры.Заполнить(ПараметрыПриказа);
		ТабДокумент.Вывести(Приказ);
	КонецЕсли;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Если ПараметрыПриказа <> Неопределено Тогда
		Шапка.Параметры.Заполнить(ПараметрыПриказа);
	Иначе
		Шапка.Параметры.ЗаголовокШапки = НСтр("ru='План счетов бухгалтерского учета'");
	КонецЕсли;
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.ФиксацияСверху = ТабДокумент.ВысотаТаблицы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьВалютныйУчет", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПланаСчетов.Ссылка КАК Ссылка,
	|	ТаблицаПланаСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаПланаСчетов.Ссылка.Код КАК Код,
	|	ТаблицаПланаСчетов.Ссылка.Наименование КАК Наименование,
	|	ТаблицаПланаСчетов.Ссылка.Валютный КАК Валютный,
	|	ТаблицаПланаСчетов.Ссылка.Количественный КАК Количественный,
	|	ТаблицаПланаСчетов.Ссылка.Забалансовый КАК Забалансовый,
	|	ТаблицаПланаСчетов.Ссылка.Вид КАК Вид,
	|	ТаблицаПланаСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ТаблицаПланаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (&ИспользоватьВалютныйУчет
	|				ИЛИ НЕ &ИспользоватьВалютныйУчет
	|					И НЕ ТаблицаПланаСчетов.Ссылка.Валютный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланаСчетов.Ссылка.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
			
		ТабДокумент.Вывести(Строка);
		
		Если ВыводитьОписания Тогда
		
			Попытка
				Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
				ТабДокумент.Вывести(Описание);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПростойСписок") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПростойСписок", "План счетов бухгалтерского учета", ПечатьПланаСчетов());                                            
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СПодробнымиОписаниями") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СПодробнымиОписаниями", "План счетов бухгалтерского учета", ПечатьПланаСчетов(Истина));                                            
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Обработка добавления счетов 19.10 и 68.42
//
Процедура ОбработатьДобавлениеСчетовУчетаНДСВТаможенномСоюзе() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "1910";
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();

	Если ПараметрыУчета.ВестиУчетНДСПоСпособам Тогда
		
		СтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
		
		ИзмененыПараметрыСубконто = Ложь;
		ПараметрыУчета.ВестиУчетНДСПоСпособам = Истина;
		Отказ = Ложь;
		
		ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ);
		
	КонецЕсли;
		
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 19.10 ""НДС, уплачиваемый при импорте из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "6842";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 68.42 ""НДС при импорте товаров из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Обработка переименования счета 68.12
//
Процедура ПереименоватьСчетНалогаУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		СчетСсылка = ПланыСчетов.Хозрасчетный.ЕНприУСН;

		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетСсылка,
			"Код, Наименование, ЗапретитьИспользоватьВПроводках, Забалансовый");
			
		Если НЕ РеквизитыСчета.ЗапретитьИспользоватьВПроводках
			И НЕ РеквизитыСчета.Забалансовый
			И РеквизитыСчета.Код = "68.12"
			И СокрЛП(РеквизитыСчета.Наименование) = НСтр("ru = 'Единый налог при применении упрощенной системы налогообложения'") Тогда

			// Счет не модифицировался пользователем
			// Можно менять наименование
			
			СчетОбъект = СчетСсылка.ПолучитьОбъект();
			СчетОбъект.Наименование = НСтр("ru = 'Налог при упрощенной системе налогообложения'");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект, Истина);
		
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить новое наименование
			|для счета 68.12 ""Единый налог при применении упрощенной системы налогообложения"".
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

#Область ДетализацияУчета

#Область НастройкаСубконто

// Возвращает возможные виды учета по субконто.
// "Видами учета" в интерфейсе называются признаки учета субконто, заданные при конфигурировании.
// В этой функции перечислены те из них, что используются в этом модуле (в частности, в текстах запросов).
// Предполагается, что все они - Булевы
//
// Возвращаемое значение:
//  ВидыУчета - Массив
//
Функция ВидыУчетаСубконто() Экспорт
	
	ВидыУчета = Новый Массив;
	
	ВидыУчета.Добавить("Суммовой");
	ВидыУчета.Добавить("Валютный");
	ВидыУчета.Добавить("Количественный");
	
	Возврат ВидыУчета;
	
КонецФункции

// Конструктор коллекции, описывающий требования к настройке плана счетов (составу и свойствам субконто).
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции
//
Функция НовыйТребованияАналитикиУчета() Экспорт
	
	ТрехзначныйЛогическийТип = ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Любой); // - = Ложь; 0 = Неопределено; + = Истина
	
	Требования = Новый ТаблицаЗначений;
	Требования.Колонки.Добавить("Счет",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Требования.Колонки.Добавить("РазрезАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	Требования.Колонки.Добавить("Запрещен",        Новый ОписаниеТипов("Булево"));
	Требования.Колонки.Добавить("УчетОстатков",    ТрехзначныйЛогическийТип);
	Для Каждого ВидУчета Из ВидыУчетаСубконто() Цикл
		Требования.Колонки.Добавить(ВидУчета, ТрехзначныйЛогическийТип);
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

// Приводит настройки субконто на плане счетов в соответствие требованиям учета.
//
// Параметры:
//  ТребованияУчета - см. НовыйТребованияАналитикиУчета()
//  РазрешеноУдаление - Булево -
//      * Ложь, если важно, чтобы в результате настройки не происходило потери данных:
//        будут выполнены только те требования учета, которые не приводят к потере данных,
//        например, добавление субконто или включение учета остатков, валютных сумм и т.д.
//      * Истина, если допускается потеря данных в результате вызова процедуры: будут выполнены все требования учета.
//
Процедура НастроитьСубконто(ТребованияУчета, РазрешеноУдаление = Ложь) Экспорт
	
	ПланДействий = НовыйПланДействийИзмененияСубконто();
	ЗаполнитьПланДействийНастроитьСубконто(ПланДействий, ТребованияУчета, РазрешеноУдаление);
	НастроитьСубконтоПоПлануДействий(ПланДействий);
	
КонецПроцедуры

// Конструктор коллекции, описывающей действия над аналитикой счетов:
// - добавлении и удалении видов субконтов конкретных счетов
// - включении и выключении булевых свойств субконто (признаков учета)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав колонок см. в теле функции
//
Функция НовыйПланДействийИзмененияСубконто() Экспорт
	
	ОписаниеТиповДействие = ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Любой); // -1 удалить; 0 - не менять; 1 - установить
	
	План = Новый ТаблицаЗначений;
	
	// Псевдо-иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов (колонка "Действие"),
	// на втором - действия с признаками учета (колонки с именами признаков учета).
	
	План.Колонки.Добавить("Счет",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	План.Колонки.Добавить("ВидСубконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	План.Колонки.Добавить("Действие", ОписаниеТиповДействие);
	Для Каждого ПризнакУчета Из ПризнакиУчетаСубконто() Цикл
		План.Колонки.Добавить(ПризнакУчета, ОписаниеТиповДействие);
	КонецЦикла;
	
	Возврат План;
	
КонецФункции

// Формирует детальный план действий по настройке субконто в соответствии с переданными требованиями.
// План действий может быть исполнен с помощью НастроитьСубконтоПоПлануДействий.
// Также может использоваться для отображения пользователю перед выполнением необратимых действий.
//
// Параметры:
//  ПланДействий - см. НовыйПланДействийИзмененияСубконто - заполняемая коллекция
//  Требования - см. НовыйТребованияАналитикиУчета
//  РазрешеноУдаление - Булево -
//      * Ложь, если важно, чтобы в результате настройки не происходило потери данных:
//        в план будут включено выполнение только тех требований учета, которые не приводят к потере данных,
//        например, добавление субконто или включение учета остатков, валютных сумм и т.д.
//      * Истина, если допускается потеря данных в результате настройки:
//        в план будут включено выполнение всех требований учета.
//
Процедура ЗаполнитьПланДействийНастроитьСубконто(ПланДействий, Требования, РазрешеноУдаление = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Требования) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", Требования.ВыгрузитьКолонку("Счет"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Порядок КАК Порядок,
	|	Хозрасчетный.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто КАК ВидСубконто,
	|		ТолькоОбороты КАК ТолькоОбороты,
	|		Суммовой КАК Суммовой,
	|		Валютный КАК Валютный,
	|		Количественный КАК Количественный
	|	) КАК ВидыСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&Счета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Счет,
	|	НомерСтроки";
	
	// Сгруппируем требования по счетам, сохранив порядок субконто
	ТребованияПоСчетам = Новый Соответствие;
	Для Каждого Требование Из Требования Цикл
		ТребованияПоСчету = ТребованияПоСчетам[Требование.Счет];
		Если ТребованияПоСчету = Неопределено Тогда
			ТребованияПоСчету = Новый Массив;
			ТребованияПоСчетам.Вставить(Требование.Счет, ТребованияПоСчету);
		КонецЕсли;
		ТребованияПоСчету.Добавить(Требование);
	КонецЦикла;
	
	ВидыУчетаСубконто = ВидыУчетаСубконто(); // Локальный кеш для использования в цикле
	
	// Сравним требования и состав существующих субконто
	ВыборкаСчет = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСчет.Следующий() Цикл
		
		ТребованияПоСчету = ТребованияПоСчетам[ВыборкаСчет.Счет];
		СуществующиеСубконтоСчета = ВыборкаСчет.ВидыСубконто.Выгрузить();
		
		Для Каждого ТребованиеСубконто Из ТребованияПоСчету Цикл
			
			СуществующееСубконто = СуществующиеСубконтоСчета.Найти(ТребованиеСубконто.РазрезАналитики, "ВидСубконто");
			
			Действия = Новый Структура;
			Действия.Вставить("Добавить", Новый Структура);
			Действия.Вставить("Удалить",  Новый Структура);
			
			ЗаполнитьДействияИсправлениеСубконто(Действия, ТребованиеСубконто, СуществующееСубконто, ВидыУчетаСубконто);
			
			Если Не РазрешеноУдаление Тогда
				Действия.Удалить.Очистить();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Действия.Добавить) И Не ЗначениеЗаполнено(Действия.Удалить) Тогда
				Продолжить;
			КонецЕсли;
			
			ШагПланаДействий = ПланДействий.Добавить();
			ШагПланаДействий.Счет     = ВыборкаСчет.Счет;
			ШагПланаДействий.ВидСубконто = ТребованиеСубконто.РазрезАналитики;
			
			ЗаполнитьДействиеПлана(ШагПланаДействий, Действия.Удалить,  -1, ВидыУчетаСубконто);
			ЗаполнитьДействиеПлана(ШагПланаДействий, Действия.Добавить,  1, ВидыУчетаСубконто);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Настраивает виды субконто счетов: выполняет над ними переданные действия.
// Действия выполняются в единой транзакции (при любой неудаче не записывается ничего).
// При неудаче вызывается исключение.
// Результаты записывает в журнал регистрации.
//
// Параметры:
//  ДействияИзмененияСубконто - см. НовыйДействияИзмененияСубконто - затребованные действия
//
Процедура НастроитьСубконтоПоПлануДействий(ДействияИзмененияСубконто) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("ПланСчетов.Хозрасчетный");
	ЭлементБлокировкиДанных.ИсточникДанных = ДействияИзмененияСубконто;
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "Счет");
	
	ДействияИзмененияСубконтоПоСчетам = СгруппироватьПоСчетамДействияИзмененияСубконто(ДействияИзмененияСубконто);
	ПризнакиУчета = ПризнакиУчетаСубконто();
	ПредставленияВидовУчета = ПредставленияВидовУчета();
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Для Каждого ОписаниеДействийПоСчету Из ДействияИзмененияСубконтоПоСчетам Цикл
			
			НастроитьСубконтоСчета(
				ОписаниеДействийПоСчету.Ключ,
				ОписаниеДействийПоСчету.Значение,
				ПризнакиУчета,
				ПредставленияВидовУчета);
			
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		// Вероятно выполнение во вложенной транзакции.
		// Не записываем свойства Метаданные и Данные, так как запись с ними может приводить к обращению к ИБ,
		// запрещенному в неудачной транзакции.
		ЗаписьЖурналаРегистрации(
			ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			, // Метаданные
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ДетализацияЗатрат

Функция ДоступнаНастройкаУчетаЗатратПоПодразделениям() Экспорт
	
	// Возможность настраивать учет затрат по подразделениям есть только в том случае,
	// если отключено ведение учета по подразделениям на плане счетов.
	
	Возврат Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
КонецФункции

// Приводит признак УчетПоПодразделениям на счетах учета затрат в соответствие с переданным параметром.
// Если установить признак на одном из счетов не удалось, то вызывает исключение. 
// При этом отменяет транзакцию, начатую методом НачатьТранзакцию().
// Не следует вызывать из транзакций, которые не могут быть отменены.
//
// Также приводит в соответствие признаку 
//
// Параметры:
//  ВестиУчетЗатратПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьУчетЗатратПоПодразделениям(ВестиУчетЗатратПоПодразделениям, СобытиеЖурналаРегистрации) Экспорт
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаУчетаЗатратПоПодразделениям", ВестиУчетЗатратПоПодразделениям);
	
	Для Каждого Счет Из БухгалтерскийУчетПереопределяемый.СчетаУчетаЗатратПоПодразделениям() Цикл
		
		СчетОбъект = Счет.ПолучитьОбъект();
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетЗатратПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетЗатратПоПодразделениям;
		
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет на каких счетах прямые расходы учитываются с детализацией до продукции.
// Предполагается, что для такого учета используется оборотное субконто без количественного учета.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - счета учета
//
Функция ПрямыеРасходыУчитываютсяПоПродукции() Экспорт
	
	СчетаПрямыхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", СчетаПрямыхРасходов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаПрямыхРасходов)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)";
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
КонецФункции

#КонецОбласти

#Область ВключениеОтключениеУчетаПоПодразделениям

// Настраивает план счетов для учета обособленных подразделений:
//  - устанавливает или снимает учет по подразделениям
//  - добавляет или удаляет субконто РегистрацияВНалоговомОргане
//  - при необходимости включает ВестиУчетЗатратПоПодразделениям
//
// Параметры:
//  НовоеЗначение	 - Булево - Если Истина - включается учет по подразделениям, Ложь - отключается.
//
Процедура НастроитьПланСчетовДляОбособленныхПодразделений(НовоеЗначение) Экспорт
	
	СобытиеЖурналаРегистрации = ФункциональностьПрограммыКлиентСервер.СобытиеЖурналаРегистрации();
	УстановитьУчетПоПодразделениям(НовоеЗначение, СобытиеЖурналаРегистрации);
	УстановитьСубконтоРегистрацияВНалоговомОргане(НовоеЗначение, СобытиеЖурналаРегистрации);
	
	Если НовоеЗначение
		И Не Константы.ВестиУчетЗатратПоПодразделениям.Получить() Тогда
		Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
		ПланыСчетов.Хозрасчетный.УстановитьУчетЗатратПоПодразделениям(НовоеЗначение, СобытиеЖурналаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает/снимает признак УчетПоПодразделениям на счетах бухгалтерского учета в соответствие с переданным параметром.
//
// Параметры:
//  ВестиУчетПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьУчетПоПодразделениям(ВестиУчетПоПодразделениям, СобытиеЖурналаРегистрации)
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаУчетаПоПодразделениям", ВестиУчетПоПодразделениям);
	
	СчетаСРазличиямиПризнакаУчетПоПодразделениям = СчетаСРазличиямиПризнакаУчетПоПодразделениям();
	Для Каждого Счет Из СчетаСРазличиямиПризнакаУчетПоПодразделениям Цикл
		
		СчетОбъект = Счет.ПолучитьОбъект();
			
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
			
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
	// Установка признака УчетПоПодразделениям для пользовательских счетов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НЕ Хозрасчетный.Предопределенный";
	
	ВыборкаПользовательскихСчетов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПользовательскихСчетов.Следующий() Цикл
		
		Если Не НужноИзменитьПризнакУчетаПоПодразделениям(ВыборкаПользовательскихСчетов.Счет, СчетаСРазличиямиПризнакаУчетПоПодразделениям) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект = ВыборкаПользовательскихСчетов.Счет.ПолучитьОбъект();
		
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает/снимает признак УчетПоПодразделениям на счетах бухгалтерского учета в соответствие с переданным параметром.
//
// Параметры:
//  ВестиУчетПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьСубконтоРегистрацияВНалоговомОргане(ВестиУчетПоСубконто, СобытиеЖурналаРегистрации)
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаСубконтоРегистрацияВНалоговомОргане", ВестиУчетПоСубконто);
	ТаблицаСчетов = СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетов Цикл
		
		СчетОбъект = СтрокаТаблицы.Счет.ПолучитьОбъект();
		Если ВестиУчетПоСубконто Тогда
			
			// Если у счета уже есть субконто "РегистрацияВНалоговом органе, то пропускаем его.
			НайденныйСубконто = СчетОбъект.ВидыСубконто.Найти(СтрокаТаблицы.ВидСубконто, "ВидСубконто");
			Если НайденныйСубконто <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСубконто = СчетОбъект.ВидыСубконто.Вставить(СтрокаТаблицы.НомерСубконто - 1);
			ЗаполнитьЗначенияСвойств(СтрокаСубконто, СтрокаТаблицы);
			
		Иначе
			
			// Если субконто не найден или добавлен руками, пропускаем
			НайденныйСубконто = СчетОбъект.ВидыСубконто.Найти(СтрокаТаблицы.ВидСубконто, "ВидСубконто");
			Если НайденныйСубконто = Неопределено ИЛИ Не НайденныйСубконто.Предопределенное Тогда
				Продолжить;
			КонецЕсли;
			СчетОбъект.ВидыСубконто.Удалить(НайденныйСубконто);
			
		КонецЕсли;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - возвращает список счетов, где признак УчетПоПодразделениям в версии ПРОФ отличается от КОРП
// 
// Возвращаемое значение:
//  Массив - массив счетов бухгалтерского учета
//
Функция СчетаСРазличиямиПризнакаУчетПоПодразделениям() Экспорт
	
	Макет = ПолучитьМакет("УчетПоПодразделениям");
	ДанныеСчетов = Макет.Область("ДанныеСчетов");
	
	СписокСчетов = Новый Массив;
	Для Н = ДанныеСчетов.Верх По ДанныеСчетов.Низ Цикл
		
		НомерСтроки = "R" + Формат(Н, "ЧН=0; ЧГ=0");
		УчетПоПодразделениямКОРП = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|УчетПоПодразделениямКОРП").Текст)) = "ДА";
		УчетПоПодразделениямПРОФ = СокрЛП(Врег(Макет.Область(НомерСтроки + "|УчетПоПодразделениямПРОФ").Текст)) = "ДА";
		
		Если УчетПоПодразделениямКОРП И Не УчетПоПодразделениямПРОФ Тогда
			ИмяСчета = СокрЛП(Макет.Область(НомерСтроки + "|ИмяСчета").Текст);
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный[ИмяСчета]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСчетов;
	
КонецФункции

// Функция - возвращает массив счетов для программного заполнения подразделения
// по данным местонахождения ОС
// 
// Возвращаемое значение:
//  Массив - массив счетов бухгалтерского учета
//
Функция СчетаОСДляЗаполненияПодразделенияПоДаннымМестонахождения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|   Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|   ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|   (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
	|           ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств))
	|           ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|   ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|   ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|   И ХозрасчетныйВидыСубконто.Ссылка В
	|           (ВЫБРАТЬ
	|               СчетаУчета.Счет
	|           ИЗ
	|               СчетаУчета)";
	
	СписокСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости); // 45.04
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств); // 010
	
	// Исключим счета учета групповых ОС.
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокСчетов,
		ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС); // 01.11
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокСчетов,
		ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС); // 02.11
	
	Возврат СписокСчетов;
	
КонецФункции

// Функция - возвращает список счетов для установки субконто РегистрацияВНалоговомОргане
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица счетов с настройками субконто
//
Функция СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане() Экспорт
	
	Макет = ПолучитьМакет("УчетПоСубконтоРегистрацияВНалоговомОргане");
	ДанныеСчетов = Макет.Область("ДанныеСчетов");
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("ВидСубконто");
	ТаблицаСчетов.Колонки.Добавить("НомерСубконто");
	ТаблицаСчетов.Колонки.Добавить("Предопределенное");
	ТаблицаСчетов.Колонки.Добавить("ТолькоОбороты");
	ТаблицаСчетов.Колонки.Добавить("Суммовой");
	ТаблицаСчетов.Колонки.Добавить("Валютный");
	ТаблицаСчетов.Колонки.Добавить("Количественный");
	
	Для Н = ДанныеСчетов.Верх По ДанныеСчетов.Низ Цикл
		
		НомерСтроки = "R" + Формат(Н, "ЧН=0; ЧГ=0");
		ИмяСчета = СокрЛП(Макет.Область(НомерСтроки + "|ИмяСчета").Текст);
		
		СтрокаТаблицы = ТаблицаСчетов.Добавить();
		СтрокаТаблицы.Счет             = ПланыСчетов.Хозрасчетный[ИмяСчета];
		СтрокаТаблицы.ВидСубконто      = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"];
		СтрокаТаблицы.НомерСубконто    = Число(Макет.Область(НомерСтроки + "|НомерСубконто").Текст);
		СтрокаТаблицы.Предопределенное = Истина;
		СтрокаТаблицы.ТолькоОбороты    = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|ТолькоОбороты").Текст)) = "ДА";
		СтрокаТаблицы.Суммовой         = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Суммовой").Текст)) = "ДА";
		СтрокаТаблицы.Валютный         = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Валютный").Текст)) = "ДА";
		СтрокаТаблицы.Количественный   = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Количественный").Текст)) = "ДА";
		
	КонецЦикла;
	
	Возврат ТаблицаСчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УчетАренды

// Возвращает массив счетов бухгалтерского учета арендных обязательств.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаАрендныхОбязательств() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);    // 76.07.1
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал); // 76.27.1
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);  // 76.37.1
	Возврат Счета;
	
КонецФункции

// Возвращает массив счетов бухгалтерского учета процентов по аренде.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаПроцентовПоАренде() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоАренде);    // 76.07.5
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеВал); // 76.27.5
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ);  // 76.37.5
	Возврат Счета;
	
КонецФункции

// Возвращает массив счетов бухгалтерского учета процентов по рассрочке.
//
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаПроцентовПоРассрочке() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоРассрочке);    // 76.08
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоРассрочкеВал); // 76.28
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоРассрочкеУЕ);  // 76.38
	
	Возврат Счета;
	
КонецФункции 

// Возвращает массив счетов бухгалтерского учета процентов по обязательствам.
//
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаПроцентовПоОбязательствам() Экспорт
	
	Счета = СчетаПроцентовПоАренде();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Счета, СчетаПроцентовПоРассрочке());
	
	Возврат Счета;
	
КонецФункции 

// Возвращает массив счетов бухгалтерского учета НДС по арендным обязательствам.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаНДСПоАренднымОбязательствам() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);   // 76.07.9
	Счета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамВал); // 76.27.9
	Счета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ); // 76.37.9
	Возврат Счета;
	
КонецФункции

// Возвращает массив счетов учета арендных платежей.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаАрендныхПлатежей() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеПлатежи);    // 76.07.2
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеПлатежиВал); // 76.27.2
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеПлатежиУЕ);  // 76.37.2
	Возврат Счета;
	
КонецФункции

// Возвращает массив счетов-групп учета расчетов по аренде.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаРасчетовПоАренде() Экспорт
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);    // 76.07
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал); // 76.27
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);  // 76.37
	Возврат Счета;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		Параметры.Отбор.Вставить("Валютный", Ложь);
	КонецЕсли;
	
	// При вводе кода счета с цифровой клавиатуры заменяем запятую на точку
	Если ТипЗнч(Параметры.СтрокаПоиска) = Тип("Строка") Тогда
		Параметры.СтрокаПоиска = СтрЗаменить(Параметры.СтрокаПоиска, ",", ".");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// При изменении плана счетов может потребоваться обновление данных в соответствующем регистре бухгалтерии.
// Платформа это делает автоматически вне режима ОбменДанными.Загрузка.
// Поэтому в обработчиках обновления не следует использовать ОбновлениеИнформационнойБазы.ЗаписатьОбъект()
// в режиме с пропуском бизнес-логики - следует использовать программный интерфейс, приведенный ниже.

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - записываемый объект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьОбъект(Объект, РегистрироватьНаУзлахПлановОбмена = Неопределено, ВключитьБизнесЛогику = Ложь) Экспорт
	
	ПропуститьБизнесЛогикуПриЗаписи(Объект);
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, РегистрироватьНаУзлахПлановОбмена, Истина);
	Исключение
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает переданному объекту признак пропуска бизнес-логики в ходе записи объекта.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - записываемый объект.
//
Процедура ПропуститьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	ОбщегоНазначенияБП.ПропуститьБизнесЛогикуПриЗаписи(Объект);
	
КонецПроцедуры

// Определяет, следует ли пропустить выполнение бизнес-логики при записи объекта.
// Пропуск бизнес-логики может потребоваться в ходе загрузки данных
// или обновления данных в ходе обновления версии программы.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - объект для которого
//   проверяется необходимость пропуска бизнес логики при записи.
//
// Возвращаемое значение:
//  Булево - Истина, если бизнес-логику выполнять не следует.
//
Функция ПропущенаБизнесЛогикаПриЗаписи(Знач Объект) Экспорт
	
	Возврат ОбщегоНазначенияБП.ПропущенаБизнесЛогикаПриЗаписи(Объект);
	
КонецФункции

#Область ОбработчикиОбновления

Процедура ОбновитьПараметрыСчета96_09() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие.ПолучитьОбъект();
	СчетОбъект.Родитель = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	
КонецПроцедуры

Процедура ОбработатьДобавлениеСчетовУчетаЛизинг() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендованноеИмущество);             // 01.03
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества); // 02.03
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхСчетов, СчетаРасчетовПоАренде());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхСчетов, СчетаАрендныхОбязательств());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхСчетов, СчетаАрендныхПлатежей());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхСчетов, СчетаПроцентовПоАренде());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхСчетов, СчетаНДСПоАренднымОбязательствам());
	
	МассивСчетовГрупп = СчетаРасчетовПоАренде();

	МассивСчетовССубконто3 = СчетаАрендныхПлатежей();
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		Попытка
			СчетОбъект = Счет.ПолучитьОбъект();
			СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
			
			Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
				СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
			КонецЕсли;
			
			Если МассивСчетовССубконто3.Найти(Счет) <> Неопределено Тогда
			
				Субконто      = СчетОбъект.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
				НетДокументов = (Субконто = Неопределено);
				ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
				Если НетДокументов И ВсегоСубконто < 3 Тогда
					
					НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
					
					НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
					НовыйВид.Суммовой       = Истина;
					НовыйВид.Валютный       = Истина;
					НовыйВид.Количественный = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СчетОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьУдаленныйСчет01_К() Экспорт
	
	УдаленныйСчет = ПланыСчетов.Хозрасчетный.УдалитьКорректировкаСтоимостиАрендованногоИмущества;
	СчетОбъект = УдаленныйСчет.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора по счету
                               |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка, 
			ТекстСообщения);
	КонецПопытки;
	
	НовыйСчет = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", УдаленныйСчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт = &Счет
	|			ИЛИ Хозрасчетный.СчетКт = &Счет)";
	
	Результат = Запрос.Выполнить();
	Рег = РегистрыБухгалтерии.Хозрасчетный;
	
	Проводки = Рег.СоздатьНаборЗаписей();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекДок = ВыборкаДетальныеЗаписи.Регистратор;
		Если ЗначениеЗаполнено(ТекДок) Тогда
	
			Проводки.Отбор.Регистратор.Значение = ТекДок;
			Проводки.Прочитать();
	
			Для Каждого Проводка ИЗ Проводки Цикл
				Если Проводка.СчетДт = УдаленныйСчет Тогда
					Проводка.СчетДт = НовыйСчет;
				КонецЕсли;
				Если Проводка.СчетКт = УдаленныйСчет Тогда
					Проводка.СчетКт = НовыйСчет;
				КонецЕсли;
			КонецЦикла;
	
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Проводки);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось обновить проводки по документу
                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				ТекДок.Метаданные(),
				ТекДок, 
				ТекстСообщения);
		КонецПопытки;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИП() Экспорт
	
	СчетУчетаУдаленный = ПланыСчетов.Хозрасчетный.УдалитьПФР_ОПС_ИП;
	СчетУчетаНовый     = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	СчетОбъектУдаленный = СчетУчетаУдаленный.ПолучитьОбъект();
	СчетОбъектУдаленный.КодБыстрогоВыбора = "";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъектУдаленный);
	
	НомерВидыПлатежейВГосБюджет_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НомерВидыПлатежейВГосБюджет_Новый = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаНовый, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Если НомерВидыПлатежейВГосБюджет_Удаленный = 0 Или НомерВидыПлатежейВГосБюджет_Новый = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерВидыСтраховыхВзносовИП = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП);
	
	Документы.СписаниеСРасчетногоСчета.ЗаменитьСчетПФР_ОПС_ИП();
	Документы.РасходныйКассовыйОрдер.ЗаменитьСчетПФР_ОПС_ИП();
	Документы.ВводНачальныхОстатков.ЗаменитьСчетПФР_ОПС_ИП();
	
	РегистрыНакопления.ПрочиеРасчеты.ЗаменитьСчетПФР_ОПС_ИП();
	РегистрыНакопления.ИППрочиеРасходы.ЗаменитьСчетПФР_ОПС_ИП();
	РегистрыНакопления.РасходыПриУСН.ЗаменитьСчетПФР_ОПС_ИП();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаУдаленный", СчетУчетаУдаленный);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт = &СчетУчетаУдаленный
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт = &СчетУчетаУдаленный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СчетДт = СчетУчетаУдаленный Тогда
				ЗаменитьСчетПФР_ОПС_ИПвПроводке(Запись, "СчетДт", "СубконтоДт");
			КонецЕсли;
			Если Запись.СчетКт = СчетУчетаУдаленный Тогда
				ЗаменитьСчетПФР_ОПС_ИПвПроводке(Запись, "СчетКт", "СубконтоКт");
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИПвДокументе(Объект, ИмяСчетаУчета, ИмяСубконто) Экспорт
	
	НомерВидыПлатежейВГосБюджет_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Объект[ИмяСчетаУчета], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НомерВидыСтраховыхВзносовИП_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Объект[ИмяСчетаУчета], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП);
	
	Если НомерВидыПлатежейВГосБюджет_Удаленный <> 0 Тогда
		ВидПлатежаВГосБюджет = Объект[ИмяСубконто + НомерВидыПлатежейВГосБюджет_Удаленный];
	КонецЕсли;
	
	Если НомерВидыСтраховыхВзносовИП_Удаленный <> 0 Тогда
		
		Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			ВидСтраховогоВзносаИП = Объект[ИмяСубконто + НомерВидыСтраховыхВзносовИП_Удаленный];
			Если ВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
				ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			КонецЕсли;
		КонецЕсли;
		
		Объект[ИмяСубконто + НомерВидыСтраховыхВзносовИП_Удаленный] = Неопределено;
		
	КонецЕсли;
	
	СчетУчетаНовый = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	Объект[ИмяСчетаУчета] = СчетУчетаНовый;
	
	НомерВидыПлатежейВГосБюджет_Новый = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаНовый, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерВидыПлатежейВГосБюджет_Новый <> 0 Тогда
		Объект[ИмяСубконто + НомерВидыПлатежейВГосБюджет_Новый] = ВидПлатежаВГосБюджет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИПвПроводке(Проводка, ИмяСчетаУчета, ИмяСубконто)
	
	КоллекцияСубконто = Проводка[ИмяСубконто];
	
	ВидПлатежаВГосБюджет = КоллекцияСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет];
	
	Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		ВидСтраховогоВзносаИП = КоллекцияСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП];
		Если ВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
			ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
		КонецЕсли;
	КонецЕсли;
	
	Проводка[ИмяСчетаУчета] = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	КоллекцияСубконто.Очистить();
	КоллекцияСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, ВидПлатежаВГосБюджет);
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчета01_К() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетов08_4() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);    // 08.04
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // 08.04.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);            // 08.04.2
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);    // 08.04
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетов08_1() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);               // 08.01
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковСДопРасходами);  // 08.01.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковБезДопРасходов); // 08.01.2
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);               // 08.01
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетовУчетаРасчетовПоОтгрузке() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузке);                       // ОТ
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеРуб);                    // ОТ.01
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеВал);                    // ОТ.02
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);                     // ОТ.03
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузки);    // 62.ОТ
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиРуб); // 62.ОТ.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиВал); // 62.ОТ.2
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузкиУЕ);  // 62.ОТ.3
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузке);                       // ОТ
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВСчетОтгрузки);    // 62.ОТ
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьСчетаОбеспеченияОбязательств() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ИзмененныеСчета = Новый Массив;
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейПолученные); // 008
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученные);          // 008.01
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученныеВал);       // 008.21
	
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейВыданные); // 009
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданные);          // 009.01
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданныеВал);       // 009.21
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейПолученные); // 008
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейВыданные);   // 009
	
	ВестиУчетПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	Для Каждого Счет Из ИзмененныеСчета Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.НастроитьПоКоду();
		
		Если СчетаГруппы.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		
		ЗаписатьОбъект(СчетОбъект);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСубконтоПродукция() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаДляДобавленияСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Количественный
	|	И НЕ Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчета.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ НевозможноДобавитьСубконто
	|ИЗ
	|	СчетаДляДобавленияСубконто КАК СчетаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|		ПО СчетаУчета.Ссылка = ВидыСубконто.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ВидыСубконто.ВидСубконто) = 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаДляДобавленияСубконто.Ссылка КАК СчетУчета
	|ИЗ
	|	СчетаДляДобавленияСубконто КАК СчетаДляДобавленияСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ НевозможноДобавитьСубконто КАК НевозможноДобавитьСубконто
	|		ПО СчетаДляДобавленияСубконто.Ссылка = НевозможноДобавитьСубконто.СчетУчета
	|ГДЕ
	|	НевозможноДобавитьСубконто.СчетУчета ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.СчетУчета.ПолучитьОбъект();
		ОписаниеВидаСубконто = Объект.ВидыСубконто.Добавить();
		ОписаниеВидаСубконто.ВидСубконто   = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
		ОписаниеВидаСубконто.Суммовой      = Истина;
		ОписаниеВидаСубконто.ТолькоОбороты = Истина;
		
		ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетовРасчетовСУчредителями() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыСУчредителями);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВкладамВУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВыплатеДоходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ОбыкновенныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ОбыкновенныеАкции);
	
	Для Каждого Счет Из МассивСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьУчетПоПодразделениямНаСчете44() Экспорт
	
	СписокВсех44Счетов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	
	Попытка
		
		ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
		Если ВестиУчетЗатратПоПодразделениям Тогда
			УстановитьУчетПоПодразделениямПоСчетам(СписокВсех44Счетов);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			, // Метаданные
			, // Ссылка
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТекстСообщения = НСтр("ru = 'Не удалось включить учет по подразделениям на счете 44 ""Расходы на продажу"".
			|Подробная информация об ошибке записана в журнал регистрации.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстСообщения;
			
	КонецПопытки;
	
	// Также вызывается в УстановитьУчетПоПодразделениямПоСчетам()
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетовСлужебныйАвтотранспорт() Экспорт
	
	// Создание счетов происходит в каждом узле, регистрация изменений не выполняется,
	// см. стандарт "Обработчики обновления информационной базы" (пп. 3.2.2)
	
	ИзмененныеСчета = Новый Массив;
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ГСМ);            // 10.03
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Топливо);        // 10.03.1
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТопливоВБаке);   // 10.03.2
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТопливныеКарты); // 76.15
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.ГСМ);                // 10.03
	
	ВестиУчетПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	Для Каждого Счет Из ИзмененныеСчета Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.НастроитьПоКоду();
		
		Если СчетаГруппы.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		ЗаписатьОбъект(СчетОбъект);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетовНДФЛ_ИП() Экспорт
	
	// Создание счетов происходит в каждом узле, регистрация изменений не выполняется,
	// см. стандарт "Обработчики обновления информационной базы" (пп. 3.2.2)
	
	ИзмененныеСчета = Новый Массив;
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя);                          // 68.21
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_ИП);                                      // 68.21.1
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины); // 68.21.2
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Для Каждого Счет Из ИзмененныеСчета Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.НастроитьПоКоду();
		
		Если СчетаГруппы.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		ЗаписатьОбъект(СчетОбъект);
	
	КонецЦикла;
	
КонецПроцедуры

// Отложенный обработчик заполняет суммы НУ в проводках по счету 55.23 у организаций-плательщиков налога на прибыль
//
Процедура ЗаполнитьСуммыНУПоСчетуДепозитныеСчетаВал(Параметры) Экспорт 
	
	Если Не НалоговыйУчет.ТребуетсяНалоговыйУчет() Тогда
		// Нет плательщиков налога на прибыль
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииПлательщики
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НастройкиСистемыНалогообложения.Организация = Организации.Ссылка
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль
	|ПОМЕСТИТЬ НастройкиСистемыНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В
	|			(ВЫБРАТЬ
	|				ОрганизацииПлательщики.Организация
	|			ИЗ
	|				ОрганизацииПлательщики)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Организация КАК Организация,
	|	Хозрасчетный.Период КАК Период,
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ) КАК НачалоМесяца
	|ПОМЕСТИТЬ ВсеРегистраторы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт = &ДепозитныеСчетаВал
	|	И Хозрасчетный.Сумма <> 0
	|	И Хозрасчетный.СуммаНУДт = 0
	|	И Хозрасчетный.Организация В
	|			(ВЫБРАТЬ
	|				ОрганизацииПлательщики.Организация
	|			ИЗ
	|				ОрганизацииПлательщики)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Организация,
	|	Хозрасчетный.Период,
	|	Хозрасчетный.Регистратор,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт = &ДепозитныеСчетаВал
	|	И Хозрасчетный.Сумма <> 0
	|	И Хозрасчетный.СуммаНУКт = 0
	|	И Хозрасчетный.Организация В
	|			(ВЫБРАТЬ
	|				ОрганизацииПлательщики.Организация
	|			ИЗ
	|				ОрганизацииПлательщики)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НачалоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеРегистраторы.НачалоМесяца КАК Период,
	|	ВсеРегистраторы.Организация КАК Организация
	|ПОМЕСТИТЬ МесяцыПроводок
	|ИЗ
	|	ВсеРегистраторы КАК ВсеРегистраторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МесяцыПроводок.Организация КАК Организация,
	|	МесяцыПроводок.Период КАК ПериодПроводок,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиСистемыНалогообложения.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодСистемыНалогообложения
	|ПОМЕСТИТЬ ПериодыСистемыНалогообложения
	|ИЗ
	|	МесяцыПроводок КАК МесяцыПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО МесяцыПроводок.Организация = НастройкиСистемыНалогообложения.Организация
	|			И МесяцыПроводок.Период >= НастройкиСистемыНалогообложения.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыПроводок.Организация,
	|	МесяцыПроводок.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодСистемыНалогообложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСистемыНалогообложения.Организация КАК Организация,
	|	ПериодыСистемыНалогообложения.ПериодПроводок КАК Период,
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль
	|ПОМЕСТИТЬ ПериодыУплатыНалогаНаПрибыль
	|ИЗ
	|	ПериодыСистемыНалогообложения КАК ПериодыСистемыНалогообложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ПериодыСистемыНалогообложения.Организация = НастройкиСистемыНалогообложения.Организация
	|			И ПериодыСистемыНалогообложения.ПериодСистемыНалогообложения = НастройкиСистемыНалогообложения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВсеРегистраторы.Период КАК Период,
	|	ВсеРегистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВсеРегистраторы КАК ВсеРегистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыУплатыНалогаНаПрибыль КАК ПериодыУплатыНалогаНаПрибыль
	|		ПО ВсеРегистраторы.Организация = ПериодыУплатыНалогаНаПрибыль.Организация
	|			И ВсеРегистраторы.НачалоМесяца = ПериодыУплатыНалогаНаПрибыль.Период
	|ГДЕ
	|	ПериодыУплатыНалогаНаПрибыль.ПлательщикНалогаНаПрибыль
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Регистратор УБЫВ";
	Запрос.УстановитьПараметр("ДепозитныеСчетаВал", ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			Блокировка.Заблокировать();
			
			Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			Проводки.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Проводки.Прочитать();
			
			Для каждого Проводка Из Проводки Цикл
				
				Если Проводка.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал
					И Проводка.СуммаНУДт = 0 Тогда
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
				Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал
					И Проводка.СуммаНУКт = 0 Тогда
					Проводка.СуммаНУКт = Проводка.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Проводки);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ПланыСчетов.Хозрасчетный.ЗаполнитьСуммыНУПоСчетуДепозитныеСчетаВал() не удалось обработать набор записей по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыБухгалтерии.Хозрасчетный, 
				Выборка.Регистратор, 
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре ПланыСчетов.Хозрасчетный.ЗаполнитьСуммыНУПоСчетуДепозитныеСчетаВал() не удалось обработать часть наборов записей: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектовОбработано > 0 Тогда
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.РегистрыБухгалтерии.Хозрасчетный, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ПланыСчетов.Хозрасчетный.ЗаполнитьСуммыНУПоСчетуДепозитныеСчетаВал() обработала очередную порцию: %1 наборов записей'"), 
				ОбъектовОбработано));
	КонецЕсли;
			
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакУчетаПоПодразделениямСчета76_16() Экспорт
	
	ВестиУчетПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	СчетОбъект = ПланыСчетов.Хозрасчетный.РасчетыССамозанятыми.ПолучитьОбъект();
	Если СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям Тогда
		// Все установлено правильно, ничего изменять не требуется
		Возврат;
	КонецЕсли;
	
	СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
	ЗаписатьОбъект(СчетОбъект);
	
	СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.ПланыСчетов.Хозрасчетный,
		СчетОбъект.Ссылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На счете %1 изменен признак учета по подразделениям'"),
			СчетОбъект.Код));
	
КонецПроцедуры

Процедура ДобавитьСубконтоВидыНалогов(ПараметрыВыполнения) Экспорт
	
	ВидСубконтоВидыНалогов      = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалогов;
	СчетУчетаПрочиеНалогиИСборы = ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчета",   СчетУчетаПрочиеНалогиИСборы);
	Запрос.УстановитьПараметр("ВидСубконто", ВидСубконтоВидыНалогов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ ВТСчетаУчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСчетаУчета.СчетУчета КАК СчетУчета,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ПроверкаЗаполненностиСубконто3.ВидСубконто КАК Субконто3
	|ИЗ
	|	ВТСчетаУчета КАК ВТСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ВТСчетаУчета.СчетУчета = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконто)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ПроверкаЗаполненностиСубконто3
	|		ПО ВТСчетаУчета.СчетУчета = ПроверкаЗаполненностиСубконто3.Ссылка
	|			И (ПроверкаЗаполненностиСубконто3.НомерСтроки = 3)
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто ЕСТЬ NULL
	|	И ПроверкаЗаполненностиСубконто3.ВидСубконто ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
		ПараметрыВыполнения.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяПроцедуры = "ПланыСчетов.Хозрасчетный.ДобавитьСубконтоВидыНалогов()";

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			СчетУчетаОбъект = Выборка.СчетУчета.ПолучитьОбъект();
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если СчетУчетаОбъект = Неопределено
					Или ЗначениеЗаполнено(СчетУчетаОбъект.ВидыСубконто.НайтиСтроки(Новый Структура("ВидСубконто", ВидСубконтоВидыНалогов))) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			СчетУчетаОбъект.Заблокировать();
			ОписаниеВидаСубконто = СчетУчетаОбъект.ВидыСубконто.Добавить();
			ОписаниеВидаСубконто.ВидСубконто = ВидСубконтоВидыНалогов;
			ОписаниеВидаСубконто.Суммовой = Истина;
			ЗаписатьОбъект(СчетУчетаОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
		    // Если не удалось обработать объект, повторяем попытку снова.		
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В процедуре %1 не удалось добавить субконто ""Виды налогов"" для счета 68.10 по причине:
					|%2'"),
					ИмяПроцедуры,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ПланыСчетов.Хозрасчетный, СчетУчетаПрочиеНалогиИСборы, ТекстСообщения);
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КраткоеПредставлениеСчета(Счет)
	
	Если Счет = ИздержкиОбращения Тогда
		Возврат НСтр("ru = 'Издержки обращения в торговле'");
	ИначеЕсли Счет = КоммерческиеРасходы Тогда
		Возврат НСтр("ru = 'Коммерческие расходы в производстве'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НужноИзменитьПризнакУчетаПоПодразделениям(Счет, СчетаСРазличиямиПризнакаУчетПоПодразделениям)
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Родитель");
	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Предопределенный") Тогда
			Возврат СчетаСРазличиямиПризнакаУчетПоПодразделениям.Найти(Родитель) <> Неопределено;
		Иначе
			Возврат НужноИзменитьПризнакУчетаПоПодразделениям(Родитель, СчетаСРазличиямиПризнакаУчетПоПодразделениям);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации)
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = СтрШаблон(
			ШаблоныСообщений.СообщениеОбОшибкеДетально,
			СчетОбъект.Код,
			ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка,
			ТекстСообщенияОбОшибке);
			
		// Для пользователя выведем краткое сообщение
		ВызватьИсключение СтрШаблон(ШаблоныСообщений.СообщениеОбОшибкеКратко, СчетОбъект.Код);
			
	КонецПопытки;
	
	// Запишем в журнал регистрации подробную информацию об изменениях
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация, 
		Метаданные.ПланыСчетов.Хозрасчетный,
		СчетОбъект.Ссылка, // Данные
		СтрШаблон(ШаблоныСообщений.СообщениеОбУспехе, СчетОбъект.Код),
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

Функция ШаблоныСообщений(Операция, ЗначениеУстанавливаемогоПараметра)
	
	Результат = Новый Структура("СообщениеОбОшибкеКратко, СообщениеОбОшибкеДетально, СообщениеОбУспехе");
	Если ЗначениеУстанавливаемогоПараметра Тогда
		
		Если Операция = "УстановкаСубконтоРегистрацияВНалоговомОргане" Тогда
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при добавлении субконто ""Регистрация в налоговом органе"" на счете %1:
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при добавлении субконто ""Регистрация в налоговом органе"" на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 добавлено субконто ""Регистрация в налоговом органе""'");
			
		Иначе
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при включении учета по подразделениям на счете %1
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при включении учета по подразделениям на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 включен учет по подразделениям'");
		
		КонецЕсли;
		
	Иначе
		
		Если Операция = "УстановкаСубконтоРегистрацияВНалоговомОргане" Тогда
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при удалении субконто ""Регистрация в налоговом органе"" на счете %1:
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при удалении субконто ""Регистрация в налоговом органе"" на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 удалено субконто ""Регистрация в налоговом органе""'");
			
		Иначе
			
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при отключении учета по подразделениям на счете %1
				|Подробности см. в Журнале регистрации.'");
			
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при отключении учета по подразделениям на счете %1:
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 отключен учет по подразделениям'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область НастройкаСубконто

Функция ПризнакиУчетаСубконто()
	
	ПризнакиУчета = Новый Массив;
	
	// Предопределенный признак
	ПризнакиУчета.Добавить("ТолькоОбороты");
	
	// Заданные в метаданных
	Для Каждого ВидУчета Из ВидыУчетаСубконто() Цикл
		ПризнакиУчета.Добавить(ВидУчета);
	КонецЦикла;
	
	Возврат ПризнакиУчета;

КонецФункции

Функция ОбязательнаяПозицияВидаСубконто(Счет, ВидСубконто)
	
	Если Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДействияИсправлениеСубконто(Действия, Требование, СуществующееСубконто, ВидыУчетаСубконто)
	
	Если Требование.Запрещен Тогда
		
		Если СуществующееСубконто <> Неопределено Тогда
			Действия.Удалить.Вставить("Субконто");
		КонецЕсли;
		
	Иначе
		
		Если СуществующееСубконто = Неопределено Тогда
			Действия.Добавить.Вставить("Субконто");
		КонецЕсли;
		
		Если Требование.УчетОстатков > 0
			И (СуществующееСубконто = Неопределено Или СуществующееСубконто.ТолькоОбороты) Тогда
			Действия.Добавить.Вставить("УчетОстатков");
		ИначеЕсли Требование.УчетОстатков < 0
			И (СуществующееСубконто <> Неопределено И Не СуществующееСубконто.ТолькоОбороты) Тогда
			Действия.Удалить.Вставить("УчетОстатков");
		КонецЕсли;
		
		Для Каждого ВидУчета Из ВидыУчетаСубконто Цикл
			
			ТребованиеВидУчета = Требование[ВидУчета];
			
			Если ТребованиеВидУчета > 0
				И (СуществующееСубконто = Неопределено Или Не СуществующееСубконто[ВидУчета]) Тогда
				Действия.Добавить.Вставить(ВидУчета);
			ИначеЕсли ТребованиеВидУчета < 0
				И (СуществующееСубконто <> Неопределено И СуществующееСубконто[ВидУчета]) Тогда
				Действия.Удалить.Вставить(ВидУчета);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДействиеПлана(ДействиеПлана, ИзменяемыеСвойства, Изменение, ВидыУчетаСубконто)
	
	Если ИзменяемыеСвойства.Свойство("Субконто") Тогда
		ДействиеПлана.Действие = Изменение;
		Если Изменение > 0 Тогда
			// По умолчанию считаем субконто оборотными
			ДействиеПлана.ТолькоОбороты = Изменение;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ВидУчета Из ВидыУчетаСубконто Цикл
		
		Если Не ИзменяемыеСвойства.Свойство(ВидУчета) Тогда
			Продолжить;
		КонецЕсли;
		ДействиеПлана[ВидУчета] = Изменение;
		
	КонецЦикла;
	
	Если ИзменяемыеСвойства.Свойство("УчетОстатков") Тогда
		// Логика платформы инвертирована:
		// - для включения учета остатков нужно отключить свойство ТолькоОбороты
		// - отключение свойства ТолькоОбороты не приводит к потере данных
		// - наоборот, включение свойства - приводит.
		ДействиеПлана.ТолькоОбороты = - Изменение;
	КонецЕсли;
	
КонецПроцедуры

Функция СгруппироватьПоСчетамДействияИзмененияСубконто(Знач ДействияИзмененияСубконто)
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет.
	// Выполнять операции над субконто следует в определенном порядке субконто.
	// Поэтому при группировке важно сохранять порядок записей в ДействияИзмененияСубконто
	ДействияИзмененияСубконтоПоСчетам = Новый Соответствие; // Ключ - счет, Значение - массив строк из ДействияИзмененияСубконто
	Для Каждого ОписаниеДействия Из ДействияИзмененияСубконто Цикл
		
		ДействияДляСчета = ДействияИзмененияСубконтоПоСчетам[ОписаниеДействия.Счет];
		
		Если ДействияДляСчета = Неопределено Тогда
			ДействияДляСчета = Новый Массив;
			ДействияИзмененияСубконтоПоСчетам.Вставить(ОписаниеДействия.Счет, ДействияДляСчета);
		КонецЕсли;
		
		ДействияДляСчета.Добавить(ОписаниеДействия);
		
	КонецЦикла;
	
	Возврат ДействияИзмененияСубконтоПоСчетам;
	
КонецФункции

Процедура НастроитьСубконтоСчета(Счет, ДействияДляСчета, ПризнакиУчета, ПредставленияВидовУчета)
	
	Объект = Счет.ПолучитьОбъект();
	
	ПротоколИзменений = Новый Массив;
	
	Для Каждого Действие Из ДействияДляСчета Цикл
		
		// Действие: -1 удалить; 0 - не менять; 1 - установить
		
		// Действия с видом субконто
		Если Действие.Действие > 0 Тогда
			
			// Добавить субконто
			
			ОбязательнаяПозицияСубконто = ОбязательнаяПозицияВидаСубконто(Счет, Действие.ВидСубконто);
			Если ОбязательнаяПозицияСубконто = Неопределено Тогда
				ЗаписьВидСубконто = Объект.ВидыСубконто.Добавить();
			Иначе
				ЗаписьВидСубконто = Объект.ВидыСубконто.Вставить(ОбязательнаяПозицияСубконто);
			КонецЕсли;
				
			ЗаписьВидСубконто.ВидСубконто = Действие.ВидСубконто;
			
			ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ЗаписьВидСубконто.ВидСубконто, Действие.Действие);
			
		Иначе
			
			ЗаписьВидСубконто = Объект.ВидыСубконто.Найти(Действие.ВидСубконто, "ВидСубконто");
			Если ЗаписьВидСубконто = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Действие.Действие < 0 Тогда
			
			ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ЗаписьВидСубконто.ВидСубконто, Действие.Действие);
			
			Объект.ВидыСубконто.Удалить(ЗаписьВидСубконто);
			
			Продолжить;
			
		КонецЕсли;
		
		// Действия с признаками учета
		
		Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
			
			ДействиеСПризнаком = Действие[ПризнакУчета];
			
			Если ДействиеСПризнаком > 0 Тогда
				ЗначениеПризнака = Истина;
			ИначеЕсли ДействиеСПризнаком < 0 Тогда
				ЗначениеПризнака = Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЗаписьВидСубконто[ПризнакУчета] = ЗначениеПризнака Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьВидСубконто[ПризнакУчета] = ЗначениеПризнака;
			
			ДобавитьВПротоколИзменениеПризнакаУчета(
				ПротоколИзменений,
				ЗаписьВидСубконто.ВидСубконто,
				ПризнакУчета,
				ДействиеСПризнаком,
				ПредставленияВидовУчета);
			
		КонецЦикла; // По признакам учета
		
	КонецЦикла; // По ДействияДляСчета
	
	Если Не Объект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	ПротоколИзмененийСтрокой = СтрСоединить(ПротоколИзменений, Символы.ПС);
	
	// Сведения для записи собираем и сериализуем до возможного исключения, связанного с обращением к информационной базе,
	// так как этот код может вызываться в вложенной транзакции
	СведенияДляЗаписиОшибки = Новый Структура;
	СведенияДляЗаписиОшибки.Вставить("Метаданные",    Счет.Метаданные());
	СведенияДляЗаписиОшибки.Вставить("Данные",        XMLСтрока(Счет));
	
	Попытка
		Объект.Записать();
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("КодСчета",                     Объект.Код);
		ПараметрыТекста.Вставить("ПротоколИзменений",            ПротоколИзмененийСтрокой);
		ПараметрыТекста.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		ПараметрыТекста.Вставить("КраткоеПредставлениеОшибки",   КраткоеПредставлениеОшибки(ОписаниеОшибки));
		
		ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
                             |[ПодробноеПредставлениеОшибки]
                             |Ошибка произошла при попытке выполнить следующие изменения:
                             |[ПротоколИзменений]'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			СведенияДляЗаписиОшибки.Метаданные,
			СведенияДляЗаписиОшибки.Данные,
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		// Пользователю выведем краткое сообщение
		ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
                             |[КраткоеПредставлениеОшибки]
                             |Ошибка произошла при попытке выполнить следующие изменения:
                             |[ПротоколИзменений]
                             |Подробности см. в Журнале регистрации.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
	КонецПопытки;
	
	// Запишем в журнал регистрации подробную информацию об изменениях
	ЗаписьЖурналаРегистрации(
		ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
		УровеньЖурналаРегистрации.Информация, 
		Счет.Метаданные(),
		Счет,
		ПротоколИзмененийСтрокой,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);

КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'Добавлено субконто ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'Удалено субконто ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Изменено субконто ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Действие, ПредставленияВидовУчета)
	
	Если Действие = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = 'У субконто ""%1"" %2'"); // У субконто "Товары" отключен учет остатков
	
	Если ПризнакУчета = "ТолькоОбороты" Тогда
		
		// Логика платформы инвертирована - установка флажка приводит к потере данных
		Если Действие > 0 Тогда
			ОписаниеДействия = НСтр("ru = 'отключен учет остатков'");
		Иначе
			ОписаниеДействия = НСтр("ru = 'включен учет остатков'");
		КонецЕсли;
		
	Иначе
		
		ПредставлениеВидаУчета = ПредставленияВидовУчета[ПризнакУчета];
		Если ТипЗнч(ПредставлениеВидаУчета) <> Тип("Строка") Тогда
			ПредставлениеВидаУчета = СтрШаблон("""%1""", ПризнакУчета);
		КонецЕсли;
		
		Если Действие > 0 Тогда
			ШаблонДействия = НСтр("ru = 'установлен вид учета %1'");
		Иначе
			ШаблонДействия = НСтр("ru = 'снят вид учета %1'");
		КонецЕсли;
		
		ОписаниеДействия = СтрШаблон(ШаблонДействия, ПредставлениеВидаУчета);
		
	КонецЕсли;
	
	ПротоколИзменений.Добавить(СтрШаблон(ШаблонТекста, ВидСубконто, ОписаниеДействия));
	
КонецПроцедуры

Функция ПредставленияВидовУчета()
	
	Представления = Новый Соответствие;
	
	МетаданныеПризнаковУчетаСубконто = Метаданные.ПланыСчетов.Хозрасчетный.ПризнакиУчетаСубконто;
	
	Для Каждого ВидУчета Из ВидыУчетаСубконто() Цикл
		Представления.Вставить(ВидУчета, МетаданныеПризнаковУчетаСубконто[ВидУчета].Синоним);
	КонецЦикла;
	
	Возврат Представления;
	
КонецФункции

#КонецОбласти

#Область ПереносСубконтоПодразделенияВИзмерениеНаСчете44

// Процедура используется для вызова из внешней обработки ЗаполнениеИзмеренияПодразделениеНаСчете44, которая выполняет следующие действия:
// - устанавливает учет по подразделениям на счете 44 "Расходы на продажу";
// - осуществляет перенос подразделений из субконто в измерение;
// - удаляет субконто "Подразделения" на счете 44 "Расходы на продажу".
//
// Параметры:
//  СписокВсех44Счетов							 - Массив - все субсчета счета 44
//  УдаляемыеСубконто							 - ТаблицаЗначений - заполняется при наличии на счете 44 субконто с типом СправочникСсылка.ПодразделенияОрганизаций, см. УдаляемыеСубконто()
//  КонвертируемыеОбъектыССубконтоПодразделение	 - Строка - текст запроса из внешней обработки ЗаполнениеИзмеренияПодразделениеНаСчете44
//                                                 Конвертируемые объекты описаны в виде текстов запросов, включающих:
//                                                 - источник - таблицу, использующую прием "счет-три-субконто"
//                                                 - поля со счетом и субконто, подразделение
//                                                 - поля, необходимые для порционной обработки (Ссылка, НомерСтроки).
//
Процедура ПеренестиСубокнтоПодразделенияВИзмерениеНаСчете44(СписокВсех44Счетов, УдаляемыеСубконто, КонвертируемыеОбъектыССубконтоПодразделение) Экспорт
	
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	// Если Не ВестиУчетЗатратПоПодразделениям, а движения с субконто "Подразделения" на 44 счете будут,
	// то тогда в ходе обработки включим ВестиУчетЗатратПоПодразделениям - см. ОбработатьПорциюЗаписейПоРегиструБухгалтерии()
	Если ВестиУчетЗатратПоПодразделениям Тогда
		УстановитьУчетПоПодразделениямПоСчетам(СписокВсех44Счетов, СобытиеЖурналаРегистрацииПоПереносуПодразделенийНаСчете44());
	КонецЕсли;
	
	ОбработатьЗаписиПоРегиструБухгалтерии(
		УдаляемыеСубконто,
		ВестиУчетЗатратПоПодразделениям,
		СписокВсех44Счетов,
		КонвертируемыеОбъектыССубконтоПодразделение);
	
	ОбработатьЗаписиПоОбъектам(УдаляемыеСубконто, КонвертируемыеОбъектыССубконтоПодразделение);
	
	УдалитьСубконтоПодразделения(УдаляемыеСубконто, СобытиеЖурналаРегистрацииПоПереносуПодразделенийНаСчете44());
	
	ДополнитьПроводкиВЗакрытииМесяцаДляИмитацииОборотногоСубконто(УдаляемыеСубконто);
	
КонецПроцедуры

Процедура УстановитьУчетПоПодразделениямПоСчетам(СписокСчетов = Неопределено, СобытиеЖурналаРегистрации = Неопределено)
	
	Если СписокСчетов = Неопределено Тогда
		СписокСчетов = БухгалтерскийУчетПереопределяемый.СчетаУчетаЗатратПоПодразделениям();
	КонецЕсли;
	
	Если СобытиеЖурналаРегистрации = Неопределено Тогда
		СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
	КонецЕсли;

	Для Каждого Счет Из СписокСчетов Цикл
		
		СчетОбъект = Счет.ПолучитьОбъект();
		Если СчетОбъект.УчетПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = Истина;
		ЗаписатьОбъект(СчетОбъект);
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На счете %1 включен учет по подразделениям'"),
				СчетОбъект.Код));
				
	КонецЦикла;
	
	Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Из субконто "Подразделения" данные переносятся в измерение "Подразделение".
Процедура ОбработатьЗаписиПоРегиструБухгалтерии(УдаляемыеСубконто, ВестиУчетЗатратПоПодразделениям, СписокВсех44Счетов, КонвертируемыеОбъектыССубконтоПодразделение)
	
	ОбщиеДанныеВсехОбъектов = Новый Структура;
	ОбщиеДанныеВсехОбъектов.Вставить("СписокВсех44Счетов",              СписокВсех44Счетов);
	ОбщиеДанныеВсехОбъектов.Вставить("УдаляемыеСубконто",               УдаляемыеСубконто);
	ОбщиеДанныеВсехОбъектов.Вставить("СписокСчетов",                    УдаляемыеСубконто.ВыгрузитьКолонку("Счет"));
	ОбщиеДанныеВсехОбъектов.Вставить("ДокументыБезПодразделенияЗатрат", ДокументыБезПодразделенияЗатрат(КонвертируемыеОбъектыССубконтоПодразделение));
	ОбщиеДанныеВсехОбъектов.Вставить("ВестиУчетЗатратПоПодразделениям", ВестиУчетЗатратПоПодразделениям);
	
	Процессор = ОбновлениеИнформационнойБазыПорционное.НовыйПроцессорПорционнойОбработки();
	Процессор.Метод = "ПланыСчетов.Хозрасчетный.ОбработатьПорциюЗаписейПоРегиструБухгалтерии";
	// После записи набора по ряду документов нужно установить ручную корректировку, т.к. по ним некуда переносить подразделение.
	Процессор.МетодПослеЗаписи = "РегистрыБухгалтерии.Хозрасчетный.УстановитьРучнуюКорректировкуДляДокументовБезПодразделенияЗатрат";
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Процессор.ОбщиеДанные, ОбщиеДанныеВсехОбъектов);
	
	Процессор.ОбщиеДанные.Вставить("НаборыСубконто", НовыйНаборыСубконто());
	Для Каждого СторонаСчета Из СтрРазделить("Дт,Кт", ",") Цикл
		НаборСубконто = Процессор.ОбщиеДанные.НаборыСубконто.Добавить();
		НаборСубконто.Идентификатор       = СторонаСчета;
		НаборСубконто.ИмяПоляСчет         = "Счет"         + СторонаСчета; // поле в запросе ниже
		НаборСубконто.ИмяСвойстваСубконто = "Субконто"     + СторонаСчета; // свойство РегистрБухгалтерииЗапись
	КонецЦикла;
	
	Процессор.ПараметрыЗапросов.Вставить("СписокСчетов", Процессор.ОбщиеДанные.СписокСчетов);
	СписокВидовСубконто = УдаляемыеСубконто.ВыгрузитьКолонку("ВидСубконто");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовСубконто);
	Процессор.ПараметрыЗапросов.Вставить("СписокВидовСубконто", СписокВидовСубконто);
	
	Процессор.ТекстОсновногоЗапроса =
	// Модифицируется в ОбновлениеИнформационнойБазыПорционное
	// Имена полей указаны в НаборыСубконто
	"ВЫБРАТЬ
	|	ХозрасчетныйДвижения.МоментВремени КАК Ключ,
	|	ХозрасчетныйДвижения.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвижения.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвижения.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	ХозрасчетныйДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйДвижения.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	ХозрасчетныйДвижения.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйДвижения.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	ХозрасчетныйДвижения.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйДвижения.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвижения.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	ХозрасчетныйДвижения.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвижения.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	ХозрасчетныйДвижения.СубконтоКт2 КАК СубконтоКт2,
	|	ХозрасчетныйДвижения.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	ХозрасчетныйДвижения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Счет В (&СписокСчетов)
	|				И (ВидСубконто1 В (&СписокВидовСубконто)
	|						И Субконто1 <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ИЛИ ВидСубконто2 В (&СписокВидовСубконто)
	|						И Субконто2 <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ИЛИ ВидСубконто3 В (&СписокВидовСубконто)
	|						И Субконто3 <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|			,
	|			) КАК ХозрасчетныйДвижения";

	Пока Не Процессор.ОбработкаЗавершена Цикл
		ОбновлениеИнформационнойБазыПорционное.ОбновитьПорциюЗаписей(Процессор); // См. ОбработатьПорциюЗаписейПоРегиструБухгалтерии
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПорциюЗаписейПоРегиструБухгалтерии(Записи, КонвертируемыеДанные, ОбщиеДанные, КлассОбъектов) Экспорт // Используется в качестве метода порционной обработки
	
	// Если УчетЗатратПоПодразделениям не включен, но проводки с субконто "Подразделения" на счете 44 есть,
	// то включим ВестиУчетЗатратПоПодразделениям
	Если Не ОбщиеДанные.ВестиУчетЗатратПоПодразделениям Тогда
		УстановитьУчетПоПодразделениямПоСчетам(Неопределено, СобытиеЖурналаРегистрацииПоПереносуПодразделенийНаСчете44());
		ОбщиеДанные.ВестиУчетЗатратПоПодразделениям = Истина;
	КонецЕсли;
		
	Пока КонвертируемыеДанные.Следующий() Цикл
		
		Запись = Записи[КонвертируемыеДанные.НомерСтроки - 1];
		
		Для Каждого НаборСубконто Из ОбщиеДанные.НаборыСубконто Цикл
			
			Счет = КонвертируемыеДанные[НаборСубконто.ИмяПоляСчет];
			СтрокаУдаляемыеСубконто = ОбщиеДанные.УдаляемыеСубконто.Найти(Счет, "Счет");
			Если СтрокаУдаляемыеСубконто = Неопределено Тогда
				// Модифицированный счет содержится в другом наборе субконто
				Продолжить;
			КонецЕсли;
			ВидСубконто = СтрокаУдаляемыеСубконто.ВидСубконто;
			ИмяУстанавливаемогоСвойства = НаборСубконто.ИмяСвойстваСубконто; // СубконтоДт, СубконтоКт
			
			ЗначениеПодразделения = Запись[ИмяУстанавливаемогоСвойства][ВидСубконто];
			Если ЗначениеЗаполнено(ЗначениеПодразделения) Тогда
				Запись["Подразделение"+НаборСубконто.Идентификатор] = ЗначениеПодразделения;
				// В версиях платформы до 8.3.14 для измерений Модифицированность() не устанавливается в Истину
				// см. ОбновлениеИнформационнойБазыПорционное.ЗаписатьМодифицированныйОбъект()
				Записи.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Для объектов со структурой "счет и три субконто". Из субконто "Подразделения" данные переносятся в ПодразделениеЗатрат либо просто очищаются, нижеследующие субконто поднимаются "наверх".
Процедура ОбработатьЗаписиПоОбъектам(УдаляемыеСубконто, КонвертируемыеОбъектыССубконтоПодразделение)
	
	ОбщиеДанныеВсехОбъектов = Новый Структура;
	ОбщиеДанныеВсехОбъектов.Вставить("УдаляемыеСубконто", УдаляемыеСубконто);
	ОбщиеДанныеВсехОбъектов.Вставить("СписокСчетов", УдаляемыеСубконто.ВыгрузитьКолонку("Счет"));
	ОбщиеДанныеВсехОбъектов.Вставить("ОписаниеТипаПодразделения", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(КонвертируемыеОбъектыССубконтоПодразделение);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Процессор = ОбновлениеИнформационнойБазыПорционное.НовыйПроцессорПорционнойОбработки();
		Процессор.Метод = "ПланыСчетов.Хозрасчетный.ОбработатьПорциюЗаписейПоОбъектам";
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Процессор.ОбщиеДанные, ОбщиеДанныеВсехОбъектов);
		
		ОбработатьЗаписиПоОбъектамНачатьОбработкуВидаОбъектов(
			Процессор,
			ОписаниеЗапроса);
		
		Пока Не Процессор.ОбработкаЗавершена Цикл
			
			ОбновлениеИнформационнойБазыПорционное.ОбновитьПорциюЗаписей(Процессор);// см. ОбработатьПорциюЗаписейПоОбъектам
			
		КонецЦикла;
		

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗаписиПоОбъектамНачатьОбработкуВидаОбъектов(Процессор, ОписаниеЗапроса)
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	// 1. Получим из текста запроса описание наборов субконто
	
	Процессор.ОбщиеДанные.Вставить("НаборыСубконто", НовыйНаборыСубконто());
	ЗаполнитьНаборыСубконтоИзОператораЗапроса(Процессор.ОбщиеДанные.НаборыСубконто, ОписаниеЗапроса, ОператорЗапроса);
	
	// 2. Дополним текст запроса условиями на СписокСчетов и субконто
	Процессор.ПараметрыЗапросов.Вставить("СписокСчетов", Процессор.ОбщиеДанные.СписокСчетов);
	
	//| ДанныеДокумента.СчетЗатрат В (&СписокСчетов)
	//| ИЛИ ДанныеДокумента.СчетЗатратНУ В (&СписокСчетов)
	ЭлементыУсловия = Новый Массив;// По ИЛИ
	Для Каждого НаборСубконто Из Процессор.ОбщиеДанные.НаборыСубконто Цикл
		ВыражениеПоля = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(ОписаниеЗапроса, ОператорЗапроса, НаборСубконто.ИмяПоляСчет);
		ЭлементыУсловия.Добавить(СтрШаблон("%1 В (&СписокСчетов)", ВыражениеПоля));
	КонецЦикла;
	ОператорЗапроса.Отбор.Добавить(СтрСоединить(ЭлементыУсловия, Символы.ПС + "ИЛИ "));
	
	// 3. Удалим из списка выбираемых полей те, что стали ненужными - поля субконто
	//  - поля содержатся в запросе для описания наборов субконто
	//  - соответствующие реквизиты обрабатываемых объектов будут обновляться
	//  - поэтому, на этапе обработки эти данные удобнее получить из обрабатываемого объекта
	Для Каждого НаборСубконто Из Процессор.ОбщиеДанные.НаборыСубконто Цикл
		Для Каждого ИмяПоля Из НаборСубконто.ИменаПолейСубконто Цикл
			Поле = ОписаниеЗапроса.Колонки.Найти(ИмяПоля);
			ОператорЗапроса.ВыбираемыеПоля.Удалить(ОписаниеЗапроса.Колонки.Индекс(Поле));
		КонецЦикла;
		НаборСубконто.ИменаПолейСубконто.Очистить();
	КонецЦикла;
	
	Процессор.ТекстОсновногоЗапроса = ОписаниеЗапроса.ПолучитьТекстЗапроса();
	// Текст запроса модифицируется в ОбновлениеИнформационнойБазыПорционное
	
КонецПроцедуры

Процедура ОбработатьПорциюЗаписейПоОбъектам(Записи, КонвертируемыеДанные, ОбщиеДанные, КлассОбъектов) Экспорт // Используется в качестве метода порционной обработки
	
	Если КлассОбъектов = "НаборЗаписейНезависимый" Тогда
		
		Для Каждого Запись Из Записи Цикл
			
			ПеренестиСубконтоПодразделение(
				Запись,
				КонвертируемыеДанные,
				ОбщиеДанные.НаборыСубконто,
				ОбщиеДанные.УдаляемыеСубконто,
				ОбщиеДанные.ОписаниеТипаПодразделения,
				КлассОбъектов);
				
		КонецЦикла;
		
	Иначе
		Пока КонвертируемыеДанные.Следующий() Цикл
			
			Запись = Записи[КонвертируемыеДанные.НомерСтроки - 1];
			
			ПеренестиСубконтоПодразделение(
				Запись,
				КонвертируемыеДанные,
				ОбщиеДанные.НаборыСубконто,
				ОбщиеДанные.УдаляемыеСубконто,
				ОбщиеДанные.ОписаниеТипаПодразделения,
				КлассОбъектов);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// В случае оборотного субконто "Подразделения" в регламентой операции "Закрытие счета 44" могут быть проводки с пустым подразделением.
// Из-за переброски значений подразделений из субконто в измерение могут возникнуть остатки на конец каждого месяца.
// Процедура дополняет проводки в регламентой операции "Закрытие счета 44", перебрасывает остатки на конец каждого месяца с заполненным подразделением на пустое подразделение.
Процедура ДополнитьПроводкиВЗакрытииМесяцаДляИмитацииОборотногоСубконто(УдаляемыеСубконто)
	
	СтрокиСОборотнымСубконто = УдаляемыеСубконто.НайтиСтроки(Новый Структура("ТолькоОбороты", Истина));
	Если СтрокиСОборотнымСубконто.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСчетов = Новый Массив;
	Для каждого Строка Из СтрокиСОборотнымСубконто Цикл
		СписокСчетов.Добавить(Строка.Счет);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокДокументов
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчета44)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ХозрасчетныйДвижения.Регистратор) КАК Регистратор,
	|	ХозрасчетныйДвижения.Период КАК Дата,
	|	ХозрасчетныйДвижения.Организация КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Счет В (&СписокСчетов)
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						СписокДокументов.Ссылка КАК Ссылка
	|					ИЗ
	|						СписокДокументов КАК СписокДокументов),
	|			,
	|			) КАК ХозрасчетныйДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвижения.Период,
	|	ХозрасчетныйДвижения.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
		|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Подразделение ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			И ХозрасчетныйОстатки.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3";
		
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ВыборкаДокументов.Дата) + 1);
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
		Запрос.УстановитьПараметр("Организация", ВыборкаДокументов.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
		НаборЗаписей.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Период = ВыборкаДокументов.Дата;
			Запись.Регистратор = ВыборкаДокументов.Регистратор;
			Запись.СчетДт = Выборка.Счет;
			Запись.СчетКт = Выборка.Счет;
			Для НомерСубконто = 1 По 3 Цикл
				ЗначениеСубконто = Выборка["Субконто" + НомерСубконто];
				Если ЗначениеСубконто <> NULL Тогда
					БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, НомерСубконто, ЗначениеСубконто);
					БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, НомерСубконто, ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
			Запись.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Запись.ПодразделениеКт = Выборка.Подразделение;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				Выборка.СуммаНУ, Выборка.СуммаНУ,
				Выборка.СуммаПР, Выборка.СуммаПР,
				Выборка.СуммаВР, Выборка.СуммаВР,
				Запись);
				
		КонецЦикла;
		
		// Требуется ВключитьБизнесЛогику = Истина, т.к. могут возникнуть остатки на начало периода
		// в случае наличия еще одного оборотного субконто на счете 44.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Истина, Истина);
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьСубконтоПодразделения(УдаляемыеСубконто, СобытиеЖурналаРегистрации = Неопределено)
	
	Если СобытиеЖурналаРегистрации = Неопределено Тогда
		СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
	КонецЕсли;

	Для Каждого Строка Из УдаляемыеСубконто Цикл
		
		Счет = Строка.Счет;
		СтрокаСубконто = Счет.ВидыСубконто.Найти(Строка.ВидСубконто);
		
		Если СтрокаСубконто <> Неопределено Тогда
			
			Индекс = Счет.ВидыСубконто.Индекс(СтрокаСубконто);
			
			СчетОбъект = Счет.ПолучитьОбъект();
			СчетОбъект.ВидыСубконто.Удалить(Индекс);
			ЗаписатьОбъект(СчетОбъект);
			
			ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На счете %1 удалено субконто ""Подразделения""'"),
			СчетОбъект.Код));
			
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

Функция УдаляемыеСубконто(СписокВсех44Счетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СписокВсех44Счетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Счет";
	
	Запрос.УстановитьПараметр("СписокВсех44Счетов", СписокВсех44Счетов);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УдаляемыеСубконто = Новый ТаблицаЗначений;
	УдаляемыеСубконто.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	УдаляемыеСубконто.Колонки.Добавить("ВидСубконто",   Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	УдаляемыеСубконто.Колонки.Добавить("НомерСубконто", Новый ОписаниеТипов("Число"));
	УдаляемыеСубконто.Колонки.Добавить("ТолькоОбороты", Новый ОписаниеТипов("Булево"));
	
	Пока ВыборкаСчет.Следующий() Цикл
		Выборка = ВыборкаСчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТипЗначения = Выборка.ТипЗначения;
			Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций"))
				И ТипЗначения.Типы().Количество() = 1 Тогда
				СтрокаУдаляемыеСубконто = УдаляемыеСубконто.Добавить();
				СтрокаУдаляемыеСубконто.Счет          = Выборка.Счет;
				СтрокаУдаляемыеСубконто.ВидСубконто   = Выборка.ВидСубконто;
				СтрокаУдаляемыеСубконто.НомерСубконто = Выборка.НомерСтроки;
				СтрокаУдаляемыеСубконто.ТолькоОбороты = Выборка.ТолькоОбороты;
				// Если будет два субконто с типом Подразделения, то обрабатывать будем только одно из них
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УдаляемыеСубконто.Индексы.Добавить("Счет");
	
	Возврат УдаляемыеСубконто;
	
КонецФункции

// Для наборов полей вида "Счет+Субконто1+Субконто2+Субконто3", где вид субконто не хранится, а вид субконто определяется его порядковым номером на счете.
Процедура ПеренестиСубконтоПодразделение(Запись, КонвертируемыеДанные, НаборыСубконто, УдаляемыеСубконто, ОписаниеТипаПодразделения, КлассОбъектов)
	
	ОдноПодразделениеДляВсехНаборовСубконто = Ложь;
	Если НаборыСубконто.Количество() > 1 Тогда
		МассивПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НаборыСубконто.ВыгрузитьКолонку("ИмяРеквизитаПодразделение"));
		Если МассивПодразделений.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(МассивПодразделений[0]) Тогда
				ОдноПодразделениеДляВсехНаборовСубконто = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПервыйНаборСубконто = Истина;
	Для Каждого ОписаниеНабораСубконто Из НаборыСубконто Цикл
		
		Если КлассОбъектов = "НаборЗаписейНезависимый" Тогда
			Счет = Запись[ОписаниеНабораСубконто.ИмяРеквизитаСчет];
		Иначе
			Счет = КонвертируемыеДанные[ОписаниеНабораСубконто.ИмяПоляСчет];
		КонецЕсли;

		МассивСтрок = УдаляемыеСубконто.НайтиСтроки(Новый Структура("Счет", Счет));
		Если МассивСтрок.Количество() = 0 Тогда
			// Модифицированный счет содержится в другом наборе субконто
			Продолжить;
		КонецЕсли;
		НомерУдаляемогоСубконто = МассивСтрок[0].НомерСубконто;

		ИменаПолей = ОписаниеНабораСубконто.ИменаРеквизитовСубконто;
		
		// Проверка, что субконто "Подразделения" заполнено
		Если ЗначениеЗаполнено(Запись[ИменаПолей[НомерУдаляемогоСубконто]]) Тогда
			Если ЗначениеЗаполнено(ОписаниеНабораСубконто.ИмяРеквизитаПодразделение) Тогда
				ЗначениеПодразделения = Запись[ОписаниеНабораСубконто.ИмяРеквизитаПодразделение];
				// Если подразделение затрат одно для двух наборов субконто (сторона БУ и НУ), его значение заполняем из первого набора субконто.
				// Для справочника ТиповыеОперации ЗначениеПодразделения может иметь тип СправочникСсылка.ПараметрыТиповойОперации,
				// поэтому нужно приведение к типу СправочникСсылка.ПодразделенияОрганизаций
				Если ОдноПодразделениеДляВсехНаборовСубконто И Не ПервыйНаборСубконто Тогда 
					Если Не ЗначениеЗаполнено(ОписаниеТипаПодразделения.ПривестиЗначение(ЗначениеПодразделения)) Тогда
						Запись[ОписаниеНабораСубконто.ИмяРеквизитаПодразделение] = Запись[ИменаПолей[НомерУдаляемогоСубконто]];
					КонецЕсли;
				Иначе
					Запись[ОписаниеНабораСубконто.ИмяРеквизитаПодразделение] = Запись[ИменаПолей[НомерУдаляемогоСубконто]];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		// Очищаем субконто "Подразделение" и поднимаем другие субконто
		// Например, на месте второго будет записано третье субконто
		Запись[ИменаПолей[НомерУдаляемогоСубконто]] = Неопределено;
		Для Сч = НомерУдаляемогоСубконто По 2 Цикл
			Если Запись[ИменаПолей[Сч+1]] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Запись[ИменаПолей[Сч]] = Запись[ИменаПолей[Сч+1]];
			Запись[ИменаПолей[Сч+1]] = Неопределено;
		КонецЦикла;
		
		ПервыйНаборСубконто = Ложь;
	КонецЦикла;

КонецПроцедуры

Функция НовыйНаборыСубконто() Экспорт
	
	НаборыСубконто = Новый ТаблицаЗначений;
	НаборыСубконто.Колонки.Добавить("Идентификатор",             Новый ОписаниеТипов("Строка"));
	НаборыСубконто.Колонки.Добавить("ИмяПоляСчет",               Новый ОписаниеТипов("Строка")); // псевдоним поля Счет из запроса КонвертируемыеОбъектыССубконтоПодразделение(), например СчетБУ
	НаборыСубконто.Колонки.Добавить("ИмяРеквизитаСчет",          Новый ОписаниеТипов("Строка")); // имя поля Счет в выборке, например СчетЗатрат
	НаборыСубконто.Колонки.Добавить("ИмяСвойстваСубконто",       Новый ОписаниеТипов("Строка")); // свойство набора записей регистра бухгалтерии - СубконтоДт, СубконтоКт
	НаборыСубконто.Колонки.Добавить("ИмяРеквизитаПодразделение", Новый ОписаниеТипов("Строка")); // имя поля Подразделение в выборке, например ПодразделениеЗатрат, см соглашение в КонвертируемыеОбъектыССубконтоПодразделение()
	НаборыСубконто.Колонки.Добавить("ИменаРеквизитовСубконто",   Новый ОписаниеТипов("Соответствие")); // ключ - номер субконто, значение - имя поля выборки, например Субконто1, Субконто2, Субконто3
	НаборыСубконто.Колонки.Добавить("ИменаПолейСубконто",        Новый ОписаниеТипов("Массив")); // псевдонимы полей субконто, например СубконтоБУ1, СубконтоБУ2, СубконтоБУ3, см. ОбработатьЗаписиПоОбъектамНачатьОбработкуВидаОбъектов()
	
	Возврат НаборыСубконто;
	
КонецФункции

Процедура ЗаполнитьНаборыСубконтоИзОператораЗапроса(НаборыСубконто, ОписаниеЗапроса, ОператорЗапроса) Экспорт
	
	Для Каждого ОписаниеПоляСчет Из ОписаниеЗапроса.Колонки Цикл
		
		Если Не СтрНачинаетсяС(ОписаниеПоляСчет.Псевдоним, "Счет") Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНабора = НаборыСубконто.Добавить();
		ОписаниеНабора.Идентификатор    = Сред(ОписаниеПоляСчет.Псевдоним, 5);
		ОписаниеНабора.ИмяПоляСчет      = ОписаниеПоляСчет.Псевдоним;
		ОписаниеНабора.ИмяРеквизитаСчет = ИмяРеквизита(ОписаниеЗапроса, ОператорЗапроса, ОписаниеПоляСчет);
		
		КолонкаПодразделение = ОписаниеЗапроса.Колонки.Найти("Подразделение");
		// Поищем ПодразделениеДт, ПодразделениеКт
		Если КолонкаПодразделение = Неопределено Тогда
			КолонкаПодразделение = ОписаниеЗапроса.Колонки.Найти("Подразделение" + ОписаниеНабора.Идентификатор);
		КонецЕсли;
		ОписаниеНабора.ИмяРеквизитаПодразделение =  ИмяРеквизита(ОписаниеЗапроса, ОператорЗапроса, КолонкаПодразделение);
		
		Для НомерСубконто = 1 По 3 Цикл
			
			КолонкаИсточникаСубконто = ОписаниеЗапроса.Колонки.Найти("Субконто" + ОписаниеНабора.Идентификатор + XMLСтрока(НомерСубконто));
			ОписаниеНабора.ИменаПолейСубконто.Добавить(КолонкаИсточникаСубконто.Псевдоним);
			
			ИмяРеквизита = ИмяРеквизита(ОписаниеЗапроса, ОператорЗапроса, КолонкаИсточникаСубконто);
			ОписаниеНабора.ИменаРеквизитовСубконто.Вставить(НомерСубконто, ИмяРеквизита);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяРеквизита(ОписаниеЗапроса, ОператорЗапроса, КолонкаИсточника) 
	
	Если КолонкаИсточника = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяРеквизита = "";
	// Предполагаем, что путь имеет вид ПсевдонимТаблицы.ИмяРеквизита
	ПутьРеквизита = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(
	ОписаниеЗапроса,
	ОператорЗапроса,
	КолонкаИсточника.Псевдоним);
	
	ЭлементыПутиРеквизита = СтрРазделить(ПутьРеквизита, "."); // нужен последний
	Если ЗначениеЗаполнено(ЭлементыПутиРеквизита) Тогда
		ИмяРеквизита = ЭлементыПутиРеквизита[ЭлементыПутиРеквизита.ВГраница()];
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ДокументыБезПодразделенияЗатрат(КонвертируемыеОбъектыССубконтоПодразделение)
	
	// У этих документов следует установить свойство "Ручная корректировка"
	// см. РегистрБухгалтерии.Хозрасчетный.УстановитьРучнуюКорректировкуДляДокументовБезПодразделенияЗатрат()
	ДокументыБезПодразделенияЗатрат = Новый Массив;
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(КонвертируемыеОбъектыССубконтоПодразделение);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		ОсновнаяТаблица = ОписаниеЗапроса.Операторы[0].Источники[0];
		ИмяТаблицы = ОсновнаяТаблица.Источник.ИмяТаблицы;
		
		ЭлементыИмениТаблицы = СтрРазделить(ИмяТаблицы, ".");
		Если ЭлементыИмениТаблицы[0] <> "Документ" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ЭлементыИмениТаблицы[1];
		ЕстьПодразделение = Ложь;
		Для Каждого Колонка Из ОписаниеЗапроса.Колонки Цикл
			Если СтрНачинаетсяС(Колонка.Псевдоним, "Подразделение") Тогда
				ЕстьПодразделение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПодразделение Тогда
			Продолжить;
		КонецЕсли;
		ИмяТипа = СтрШаблон("ДокументСсылка.%1", ИмяДокумента);
		ДокументыБезПодразделенияЗатрат.Добавить(Тип(ИмяТипа));
		
	КонецЦикла;
	
	Возврат ДокументыБезПодразделенияЗатрат;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииПоПереносуПодразделенийНаСчете44()
	
	Возврат НСтр("ru = 'Перенос субконто ""Подразделения"" в измерение на счете 44'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
