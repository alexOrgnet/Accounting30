#Область ОбработчикиСобытий

Функция ПоказателиМонитораРуководителяПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДанныеМонитора();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция ПоказателиМонитораРуководителяДатаОбновленияПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДатыОбновленияМонитора();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция ПоказателиМонитораРуководителяОбновитьЗапустить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	Результат = МониторРуководителя.ЗапуститьОбновлениеМонитораДляВнешнегоПрограммногоИнтерфейса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат = Неопределено Тогда
		// Фоновое задание запущено ранее и все еще выполняется.
		Ответ = Новый HTTPСервисОтвет(202);
	Иначе
		// Фоновое задание запущено.
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция АктуальныеЗадачиПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеНалоговыеСобытияКалендаряБухгалтера();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция АктуальныеЗадачиДатаОбновленияПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДатыАктуальностиНалоговыхСобытийКалендаряБухгалтера();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция АктуальныеЗадачиСтатусУстановить(Запрос)
	
	ПараметрыМетода = Новый Структура("Идентификатор, Выполнено");
	
	ПараметрыИзЗапроса = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку());
	
	ПараметрыМетода.Идентификатор = ПараметрыИзЗапроса.Получить("id");
	ПараметрыМетода.Выполнено = ПараметрыИзЗапроса.Получить("done");
	Для Каждого ПараметрМетода Из ПараметрыМетода Цикл
		Если Не ЗначениеЗаполнено(ПараметрМетода.Значение) Тогда
			Ответ = Новый HTTPСервисОтвет(400, НСтр("ru = 'Переданы некорректные параметры'"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		ВнешнийПрограммныйИнтерфейс.УстановитьСтатусЗадачи(ПараметрыМетода);
		УстановитьПривилегированныйРежим(Ложь);
		
		// Успешно изменили статус задачи.
		Ответ = Новый HTTPСервисОтвет(200);
		
	Исключение
		
		// Не удалось изменить статус задачи.
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось изменить статус задачи %1 по причине:
				|%2'"),
			ПараметрыМетода.Идентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации("ExternalAPI",
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Ответ = Новый HTTPСервисОтвет(400, ТекстОшибки);
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция БанковскиеСчетаПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДанныеБанковскихСчетов();
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция СообщенияРегламентированнойОтчетностиПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отсутствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДанныеСообщенияРегламентированнойОтчетности();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
	
КонецФункции

Функция ПодключенияПриложенийОблакаСоздатьПодключение(Запрос)
	
	ТекстЗапроса = "";
	Попытка
		
		ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		РезультатОбработки = СоздатьПодключениеПриложенияОблака(ТекстЗапроса);
		
		Возврат РезультатОбработки;
		
	Исключение
		
		ЗаписатьИсключениеHTTPСервиса(
			ИнформацияОбОшибке(),
			Метаданные.HTTPСервисы.ExternalAPI.ШаблоныURL.ПодключенияПриложенийОблака.Методы.СоздатьПодключение,
			ТекстЗапроса);
		
		ВызватьИсключение;
	КонецПопытки;
КонецФункции

Функция ПодключенияПриложенийОблакаПроверитьПодключение(Запрос)
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния());
	
КонецФункции

Функция СообщенияОблачныхПриложенийЗапросить(Запрос)
	
	ТекстЗапроса = "";
	Попытка
		
		ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		Возврат ЗапроситьДанныеПриложения(ТекстЗапроса, Запрос.Заголовки);
		
	Исключение
		
		ЗаписатьИсключениеHTTPСервиса(
			ИнформацияОбОшибке(),
			Метаданные.HTTPСервисы.ExternalAPI.ШаблоныURL.ОтчетныеКампанииЗапросы.Методы.Запросить,
			ТекстЗапроса);
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецФункции

Функция СообщенияОблачныхПриложенийПолучить(Запрос)
	
	Попытка
		
		ИдентификаторЗапроса = Запрос.ПараметрыURL["RequestId"];
		Если Не ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
			Возврат Ответ(ЗапросыREST.КодСостоянияПлохойЗапрос(), Ошибка(Нстр("ru = 'Не указан идентификатор запроса'")));
		КонецЕсли;
		
		Возврат ПолучитьДанныеПриложения(ИдентификаторЗапроса, Запрос.Заголовки);
	Исключение
		
		ЗаписатьИсключениеHTTPСервиса(
			ИнформацияОбОшибке(),
			Метаданные.HTTPСервисы.ExternalAPI.ШаблоныURL.ОтчетныеКампанииЗапросы.Методы.Получить);
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецФункции

Функция СообщенияОблачныхПриложенийПодтвердитьПолучение(Запрос)
	
	Попытка
		
		ИдентификаторЗапроса = Запрос.ПараметрыURL["RequestId"];
		Если Не ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
			Возврат Ответ(ЗапросыREST.КодСостоянияНеАутентифицирован(), Ошибка(Нстр("ru = 'Не указан идентификатор запроса'")));
		КонецЕсли;
		
		Возврат ПодтвердитьПолучениеДанныхПриложения(ИдентификаторЗапроса, Запрос.Заголовки);
		
	Исключение
		
		ЗаписатьИсключениеHTTPСервиса(
			ИнформацияОбОшибке(),
			Метаданные.HTTPСервисы.ExternalAPI.ШаблоныURL.ОтчетныеКампанииЗапросы.Методы.ПодтвердитьПолучение);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

Функция ТарифСтраховыхВзносовИППолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДанныеТарифаСтраховыхВзносовИП();
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
КонецФункции

Функция СтавкиУСНПолучить(Запрос)
	
	// Доступ к данным регулируется правом доступа к методу веб-сервиса.
	// Если у пользователя есть право на вызов веб-сервиса, то он получит все данные
	// без учета прав на эти данные.
	// Такая реализация необходима из-за того, что веб-сервис могут вызывать служебные пользователи:
	// для них назначать доступ к данным не получится из-за отстуствия профиля и невозможности настроить РЛС.
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеДанные = ВнешнийПрограммныйИнтерфейс.ПубликуемыеДанныеСтавокУСН();
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ПубликуемыеДанные);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияОблачныхПриложений

Функция СоздатьПодключениеПриложенияОблака(ТекстЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТребуемыеПоля = Новый Массив;
	ТребуемыеПоля.Добавить("Идентификатор");
	
	Запрос = ДанныеЗапроса(ТекстЗапроса, ТребуемыеПоля);
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияПлохойЗапрос(), Ошибка(Запрос));
	КонецЕсли;
	
	СлужебныйПользователь = СообщенияОблачныхПриложений.СлужебныйПользователь();
	Если СлужебныйПользователь = Неопределено Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияВнутренняяОшибкаСервера(), Ошибка(Нстр("ru = 'Cлужебный пользователь не создан'")));
	КонецЕсли;
	
	Приложение = Справочники.ОблачныеПриложения.СсылкаПриложение(Запрос.Идентификатор);
	Если Приложение= Неопределено Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияВнутренняяОшибкаСервера(), Ошибка(Нстр("ru = 'Экземпляр приложения не создан'")));
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	Токен = РегистрыСведений.АутентификацияОблачныхПользователейПриложений.ВыдатьАутентификацию(Приложение, Пользователь);
	
	ДанныеПодключения = НовыйДанныеПодключенияПриложения();
	ЗаполнитьЗначенияСвойств(ДанныеПодключения.СлужебныйПользователь, СлужебныйПользователь);
	ДанныеПодключения.ИдентификаторПриложения = СообщенияОблачныхПриложений.ИдентификаторЭтогоПриложения();
	ДанныеПодключения.Токен = Токен;
	ДанныеПодключения.ДоступныеОрганизации =
		СообщенияОтчетностиОблачныхПриложений.ДоступныеОрганизацииПользователя(Пользователь);
		
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ДанныеПодключения);
	
КонецФункции

Функция ЗапроситьДанныеПриложения(ТекстЗапроса, Заголовки)
	
	// Запрос может поступить двумя способами:
	// 1. Непосредственно от имени самого пользователя сервиса
	// 2. От имени служебного пользователя механизма. В таком случае используется
	// собственная модель прав: запрос содержит сведения, необходимые для
	// идентификации пользователя сервиса, выполнившего запрос.
	ЗапросОтСлужебногоПользователя = СообщенияОблачныхПриложений.ЭтоЗапросОтСлужебногоПользователя();
	Если ЗапросОтСлужебногоПользователя Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТребуемыеПоля = Новый Массив;
	ТребуемыеПоля.Добавить("ТипЗапроса");
	Если Не ЗапросОтСлужебногоПользователя Тогда
		ТребуемыеПоля.Добавить("ИдентификаторПриложения");
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеАутентификацииПользователя(ЗапросОтСлужебногоПользователя, Заголовки);
	Если ТипЗнч(ДанныеАутентификации) = Тип("HTTPСервисОтвет") Тогда
		Возврат ДанныеАутентификации;
	КонецЕсли;
	
	ДанныеЗапроса = ДанныеЗапроса(ТекстЗапроса, ТребуемыеПоля);
	Если ТипЗнч(ДанныеЗапроса) = Тип("Строка") Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияПлохойЗапрос(), ДанныеЗапроса);
	КонецЕсли;
	
	Пользователь = ДанныеАутентификации.Пользователь;
	Приложение = Неопределено;
	Если ЗапросОтСлужебногоПользователя Тогда
		Приложение = ДанныеАутентификации.Приложение;
	Иначе
		Приложение = Справочники.ОблачныеПриложения.Получить(ДанныеЗапроса.ИдентификаторПриложения);
		Если Приложение = Неопределено Тогда
			Возврат Ответ(ЗапросыREST.КодСостоянияПлохойЗапрос(), Ошибка(Нстр("ru = 'Передан неверный идентификатор приложения'")));
		КонецЕсли
	КонецЕсли;
	
	НовыйЗапрос = РегистрыСведений.ЗапросыОблачныхПриложений.Создать(Приложение, Пользователь, ДанныеЗапроса);
		
	Если НовыйЗапрос = Неопределено Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияВнутренняяОшибкаСервера(), Ошибка(Нстр("ru = 'Новый запрос не может быть создан.'")));
	КонецЕсли;
	
	ДанныеОтвета = Новый Структура("Идентификатор", НовыйЗапрос);
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), ДанныеОтвета);
	
КонецФункции

Функция ПолучитьДанныеПриложения(ИдентификаторЗапроса, Заголовки)
	
	// Запрос может поступить двумя способами:
	// 1. Непосредственно от имени самого пользователя сервиса
	// 2. От имени служебного пользователя механизма. В таком случае используется
	// собственная модель прав: запрос содержит сведения, необходимые для
	// идентификации пользователя сервиса, выполнившего запрос.
	ЗапросОтСлужебногоПользователя = СообщенияОблачныхПриложений.ЭтоЗапросОтСлужебногоПользователя();
	Если ЗапросОтСлужебногоПользователя Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеАутентификацииПользователя(ЗапросОтСлужебногоПользователя, Заголовки);
	Если ТипЗнч(ДанныеАутентификации) = Тип("HTTPСервисОтвет") Тогда
		Возврат ДанныеАутентификации;
	КонецЕсли;
	
	Данные = РегистрыСведений.ЗапросыОблачныхПриложений.ПрочитатьОтвет(
		Новый УникальныйИдентификатор(ИдентификаторЗапроса),
		ДанныеАутентификации.Пользователь);
		
	Если Данные = Неопределено Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияНетДанных());
	ИначеЕсли Данные = "" Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияОтсутствуетСодержимое());
	КонецЕсли;
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния(), Данные);
КонецФункции

Функция ПодтвердитьПолучениеДанныхПриложения(ИдентификаторЗапроса, Заголовки)
	
	// Запрос может поступить двумя способами:
	// 1. Непосредственно от имени самого пользователя сервиса
	// 2. От имени служебного пользователя механизма. В таком случае используется
	// собственная модель прав: запрос содержит сведения, необходимые для
	// идентификации пользователя сервиса, выполнившего запрос.
	ЗапросОтСлужебногоПользователя = СообщенияОблачныхПриложений.ЭтоЗапросОтСлужебногоПользователя();
	Если ЗапросОтСлужебногоПользователя Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеАутентификацииПользователя(ЗапросОтСлужебногоПользователя, Заголовки);
	Если ТипЗнч(ДанныеАутентификации) = Тип("HTTPСервисОтвет") Тогда
		Возврат ДанныеАутентификации;
	КонецЕсли;
	
	РегистрыСведений.ЗапросыОблачныхПриложений.ОтметитьПрочитано(
		Новый УникальныйИдентификатор(ИдентификаторЗапроса),
		ДанныеАутентификации.Пользователь);
	
	Возврат Ответ(ЗапросыREST.КодСтандартногоСостояния());
	
КонецФункции

#КонецОбласти

Функция ДанныеАутентификацииПользователя(ЗапросОтСлужебногоПользователя, Заголовки)
	
	Результат = Новый Структура("Приложение, Пользователь");
	
	Если Не ЗапросОтСлужебногоПользователя Тогда
		Результат.Пользователь = Пользователи.ТекущийПользователь();
		Возврат Результат;
	КонецЕсли;
	
	Токен = Заголовки.Получить(СообщенияОблачныхПриложений.ИмяЗаголовкаАутентификации());
	Если Токен = Неопределено Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияНеАутентифицирован(), Ошибка(Нстр("ru = 'Не указан токен аутентификации'")));
	КонецЕсли;
	
	ДанныеАутентификации =
		РегистрыСведений.АутентификацияОблачныхПользователейПриложений.АутентифицированныйПользователь(Токен);
		
	Если ДанныеАутентификации = Неопределено Тогда
		// Переданный токен не идентифицирован.
		Возврат Ответ(ЗапросыREST.КодСостоянияНеАутентифицирован(), Ошибка(Нстр("ru = 'Пользователь не аутентифицирован'")));
	КонецЕсли;
	
	Если Не Пользователи.ВходВПрограммуРазрешен(ДанныеАутентификации.Пользователь) Тогда
		// Пользователь был отключен от приложения.
		Возврат Ответ(ЗапросыREST.КодСостоянияНеАвторизован(), Ошибка(Нстр("ru = 'Пользователь отключен от приложения'")));
	КонецЕсли;
	
	// Дополнительная аутентификация по хешу пароля при обращении через служебного пользователя.
	ХешПароля = Заголовки.Получить(СообщенияОблачныхПриложений.ИмяЗаголовкаХешПароля());
	
	РезультатПроверки = ПроверитьХешПароляПользователя(ДанныеАутентификации.Пользователь, ХешПароля);
	Если ТипЗнч(РезультатПроверки) = Тип("HTTPСервисОтвет") Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеАутентификации);
	Возврат Результат;
	
КонецФункции

Функция ПроверитьХешПароляПользователя(Пользователь, ХешПароля)
	
	Если Не ЗначениеЗаполнено(ХешПароля) Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияНеАутентифицирован(), Ошибка(Нстр("ru = 'Не указан хеш пароля пользователя'")));
	КонецЕсли;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ = Неопределено Или ПользовательИБ.СохраняемоеЗначениеПароля <> ХешПароля Тогда
		Возврат Ответ(ЗапросыREST.КодСостоянияНеАутентифицирован(), Ошибка(Нстр("ru = 'Пользователь не аутентифицирован'")));
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция Ответ(КодОтвета, Данные = "")
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");
	Ответ.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	Ответ.Заголовки["Cache-Control"] = "no-cache";
	
	Ответ.УстановитьТелоИзСтроки(ДанныеJSON(Данные));
	
	Возврат Ответ;
	
КонецФункции

Функция ДанныеJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ");
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция Ошибка(ТекстОшибки)
	
	Возврат Новый Структура("Ошибка", ТекстОшибки);
	
КонецФункции

Функция НовыйДанныеПодключенияПриложения()
	
	ДанныеПодключения = Новый Структура;
	СлужебныйПользователь = Новый Структура("Логин,Пароль", "", "");
	
	ДанныеПодключения.Вставить("ИдентификаторПриложения", "");
	ДанныеПодключения.Вставить("СлужебныйПользователь", СлужебныйПользователь);
	ДанныеПодключения.Вставить("Токен", "");
	ДанныеПодключения.Вставить("ДоступныеОрганизации", Новый Массив);
	
	Возврат ДанныеПодключения;
	
КонецФункции

Функция ДанныеЗапроса(ТекстЗапроса, ТребуемыеПоля = Неопределено, СвойстваТипаДата = Неопределено)
	
	Если ТипЗнч(ТекстЗапроса) <> Тип("Строка") Или Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат Нстр("ru = 'Отсутствует текст запроса'");
	КонецЕсли;
	
	Попытка
		Запрос = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(ТекстЗапроса, СвойстваТипаДата);
	Исключение
		Возврат Нстр("ru = 'Объект JSON описан неверно'");
	КонецПопытки;

	Если ТребуемыеПоля <> Неопределено Тогда
		ОтсутствующиеПоля = "";
		Для Каждого Поле Из ТребуемыеПоля Цикл
			Если Не Запрос.Свойство(Поле) Тогда
				ОтсутствующиеПоля = ?(ЗначениеЗаполнено(ОтсутствующиеПоля),
					СтрШаблон("%1, %2", ОтсутствующиеПоля, Поле),
					Поле);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОтсутствующиеПоля) Тогда
			Возврат СтрШаблон(Нстр("ru = 'Отсутствуют обязательные поля: %1'"), ОтсутствующиеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат "ExternalAPI";
	
КонецФункции

Процедура ЗаписатьИсключениеHTTPСервиса(ИнформацияОбОшибке, Метод, ТекстЗапроса = "")
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		Метод,
		ТекстЗапроса,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

#КонецОбласти