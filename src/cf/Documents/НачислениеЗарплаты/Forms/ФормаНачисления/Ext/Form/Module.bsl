
&НаКлиенте
Перем ТипНачисленияНовойСтроки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Параметры.АдресПараметровВХранилище) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// "Распаковываем" параметры
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(Параметры.АдресПараметровВХранилище);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыРасчета, "Ссылка, ПерваяПоловинаМесяца, Организация, МесяцНачисления, Сотрудник, ФизическоеЛицо, ДатаВыплатыДохода");
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	СписокКадровыхДанных = "ФамилияИО";
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, СписокКадровыхДанных, МесяцНачисления);
	
	ПредставлениеСотрудника = КадровыеДанныеФизЛиц[0].ФамилияИО;
	Заголовок = СтрШаблон(НСтр("ru='Начисления (%1)'"), ПредставлениеСотрудника);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.Подразделение) Тогда
		Подразделение = ПараметрыРасчета.Подразделение;
	Иначе
		ЗначенияПоУмолчанию = Новый Структура("Организация, Подразделение");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию);
		Подразделение = ЗначенияПоУмолчанию.Подразделение;
	КонецЕсли;
	
	УстановитьПараметрыВыбораНачислений();
	
	СоответствиеКодовВычетовКодамДоходов = Новый ФиксированноеСоответствие(УчетНДФЛ.ВычетыКДоходам(Год(МесяцНачисления)));
	
	КодДоходаПоУмолчанию = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	
	УдерживаетсяНДФЛПоАвансам = УчетЗарплаты.УдерживаетсяНДФЛПоАвансам(МесяцНачисления);
	ПереходныйПериод = МесяцНачисления = ДобавитьМесяц(УчетЗарплаты.ДатаНачалаУдержанияНДФЛПоАвансам(), -1);
	
	КатегорииДоходовАУСН.Добавить(Перечисления.КатегорииДоходовНДФЛ.ОплатаТрудаАУСН);
	КатегорииДоходовАУСН.Добавить(Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходыАУСН);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаУвольнения");
	Если КадровыеДанные.Количество()>0 Тогда
		ДатаУвольнения = КадровыеДанные[0].ДатаУвольнения;
		Если ЗначениеЗаполнено(ДатаУвольнения)
			И НачалоМесяца(ДатаУвольнения) = МесяцНачисления Тогда
			ДатаВыплатыДохода = ДатаУвольнения;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьКонтролируемыеНачисления();
	
	ЗаполнитьТаблицуНачислений(ПараметрыРасчета.МассивСтрок);
	ПеренумероватьСтроки(ЭтотОбъект);
	ПолучитьИтоги(ЭтотОбъект);
	
	Элементы.ГруппаКнопокПросмотр.Видимость       = ТолькоПросмотр;
	Элементы.ГруппаКнопокРедактирование.Видимость = НЕ ТолькоПросмотр;
	Если ТолькоПросмотр Тогда
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.ФормаОК.КнопкаПоУмолчанию      = Истина;
	КонецЕсли;
	
	ИспользоватьНачисленияПоДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
	Элементы.НачисленияКонтекстноеМенюДобавить.Видимость       = НЕ ИспользоватьНачисленияПоДоговорам;
	Элементы.НачисленияДобавить.Видимость                      = НЕ ИспользоватьНачисленияПоДоговорам;
	Элементы.НачисленияГруппаДобавить.Видимость                = ИспользоватьНачисленияПоДоговорам;
	Элементы.НачисленияГруппаКонтекстноеМенюДобавить.Видимость = ИспользоватьНачисленияПоДоговорам;
	
	УправлениеФормой();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Отпуск" ИЛИ ИмяСобытия = "Запись_БольничныйЛист" Тогда
		
		ОбновитьЗначениеВСтроке(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ВопросСохранитьИзменения(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДобавитьНачисление(Команда)
	
	ДобавитьСтрокуНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоговорПодряда(Команда)
	
	ТипНачисленияНовойСтроки = "ДоговорРаботыУслуги";
	Элементы.Начисления.ДобавитьСтроку();
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ТекущиеДанные.ТипНачисления = ТипНачисленияНовойСтроки;
	ТекущиеДанные.Начисление = ПредопределенноеЗначение("Документ.ДоговорРаботыУслуги.ПустаяСсылка");
	ТекущиеДанные.ЭтоДГПХ = Истина;
	УстановитьОграничениеТипаНачисления(ТекущиеДанные);
	ТипНачисленияНовойСтроки = Неопределено;
	ТекущийЭлемент = Элементы.Начисления;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеТекущейСтроки = Элементы.Начисления.ТекущиеДанные;
	
	Если НЕ Копирование И НоваяСтрока Тогда
		ДанныеТекущейСтроки = Элементы.Начисления.ТекущиеДанные;
		ДанныеТекущейСтроки.ФизическоеЛицо         = ФизическоеЛицо;
		ДанныеТекущейСтроки.Сотрудник              = Сотрудник;
		ДанныеТекущейСтроки.Подразделение          = Подразделение;
		ДанныеТекущейСтроки.ПланируемаяДатаВыплаты = ДатаВыплатыДохода;
		ДанныеТекущейСтроки.НомерСтроки            = Начисления.Количество();
	КонецЕсли;
	
	УстановитьОграничениеТипаНачисления(ДанныеТекущейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	НачисленияПриОкончанииРедактированияНаСервере();
	ПолучитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ПеренумероватьСтроки(ЭтотОбъект);
	ПолучитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.СуммаВычета = 0;
	
	ОбработатьИзменениеНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НачисленияОтпускныеБольничные"
		ИЛИ Поле.Имя = "НачисленияДругиеНачисления" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДокументОтклонения = Элементы.Начисления.ТекущиеДанные.Ссылка;
		Если ЗначениеЗаполнено(ДокументОтклонения) Тогда
			ПоказатьЗначение(, ДокументОтклонения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	НачислениеПриПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
		ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
		
		УчетНДФЛКлиент.КодДоходаАктивацииСтроки(
			ЭтотОбъект,
			Год(ДанныеСтроки.ПланируемаяДатаВыплаты), 
			"Начисления", 
			"КодДохода", 
			"НачисленияКодВычета");
			
	Иначе
		ОтработаноДней  = 0;
		ОтработаноЧасов = 0;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование ИЛИ ТипНачисленияНовойСтроки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ИспользоватьНачисленияПоДоговорам Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Начисления",  НСтр("ru='Начисление'"));
		СписокВыбора.Добавить("ДоговорРаботыУслуги", НСтр("ru='Договор подряда'"));
		Оповещение = Новый ОписаниеОповещения("ВыбратьТипНачисленияЗавершение", ЭтотОбъект);
		Элементы.Начисления.ТекущийЭлемент = Элементы.НачисленияНачисление;
		ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.Начисления);
	Иначе
		ДобавитьСтрокуНачисления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноДней <> ДанныеСтроки.ОтработаноДней Тогда
			ПересчитатьОкладНаСервере(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноЧасов <> ДанныеСтроки.ОтработаноЧасов Тогда
			ПересчитатьОкладНаСервере(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.ЭтоДругоеНачисление ИЛИ ДанныеСтроки.ЭтоОтклонение Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		ПеренестиИзмененияВОбъектФормыВладельца();
		Закрыть(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда)
	
	Если Модифицированность Тогда
		ВопросСохранитьИзменения(Ложь);
	Иначе
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗапросВыборкаДругихНачисленийТекущегоМесяца(РегистраторДляОтбора = Неопределено)
	
	СписокКатегорий = Новый Массив;
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",              Сотрудник);
	Запрос.УстановитьПараметр("МесяцНачисления",        МесяцНачисления);
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ссылка);
	Запрос.УстановитьПараметр("СписокКатегорий",        СписокКатегорий);
	Запрос.УстановитьПараметр("РегистраторДляОтбора",   РегистраторДляОтбора);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|					И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтпускныеБольничные,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|					И НЕ ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДругиеНачисления,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|				И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0 КАК ЭтоОтклонение,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|				И НЕ ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0 КАК ЭтоДругоеНачисление,
	|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	900 КАК Порядок,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.БольничныйЛист
	|				ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.Отпуск
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Регистратор.ПланируемаяДатаВыплаты
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.ПериодДействия, МЕСЯЦ)
	|	КОНЕЦ КАК ПланируемаяДатаВыплаты,
	|	""Начисление"" КАК ТипНачисления
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
	|	И НачисленияУдержанияПоСотрудникам.Регистратор <> &ИсключаемыйРегистратор
	|	И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|	И &УсловиеРегистраторДляОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	НачисленияУдержанияПоСотрудникам.Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|				И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|				И НЕ ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|				И НЕ ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.БольничныйЛист
	|				ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.Отпуск
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Регистратор.ПланируемаяДатаВыплаты
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.ПериодДействия, МЕСЯЦ)
	|	КОНЕЦ";
	
	Если РегистраторДляОтбора = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРегистраторДляОтбора", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРегистраторДляОтбора", "НачисленияУдержанияПоСотрудникам.Регистратор = &РегистраторДляОтбора");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтролируемыеНачисления()
	
	СтруктураОтбора = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени");
	
	СтруктураОтбора.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	НачисленияОклад = Новый ФиксированныйМассив(ПланыВидовРасчета.Начисления.НачисленияПоОтбору(СтруктураОтбора));
	
	СтруктураОтбора.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент;
	НачисленияРК = Новый ФиксированныйМассив(ПланыВидовРасчета.Начисления.НачисленияПоОтбору(СтруктураОтбора));
	
	СтруктураОтбора.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка;
	НачисленияСН = Новый ФиксированныйМассив(ПланыВидовРасчета.Начисления.НачисленияПоОтбору(СтруктураОтбора));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений(МассивСтрок)
	
	РезультатЗапроса = ЗапросВыборкаДругихНачисленийТекущегоМесяца();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
	
	СдвигПорядка = 1;
	
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		
		Если ТипЗнч(НоваяСтрока.Начисление) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			
			НоваяСтрока.ЭтоРКСН = НачисленияРК.Найти(НоваяСтрока.Начисление) <> Неопределено
				Или НачисленияСН.Найти(НоваяСтрока.Начисление) <> Неопределено;
			
			НоваяСтрока.ТипНачисления = "Начисление";
			
			Если НоваяСтрока.ВычетПримененныйКДоходам Тогда
				ДоступенВычет = Истина;
			КонецЕсли;
		
			КодыДохода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Начисление, "КодДоходаНДФЛ, КатегорияДохода");
			КодДоходаНДФЛ = КодыДохода.КодДоходаНДФЛ;
			
			Если УдерживаетсяНДФЛПоАвансам Или ПереходныйПериод Тогда
				НоваяСтрока.ДоступнаДатаВыплаты = Истина;
				ДоступнаДатаВыплаты = Истина;
			Иначе
				Если КодДоходаНДФЛ <> КодДоходаПоУмолчанию Тогда
					НоваяСтрока.ДоступнаДатаВыплаты = Истина;
					ДоступнаДатаВыплаты = Истина;
				КонецЕсли;
				Если КатегорииДоходовАУСН.НайтиПоЗначению(КодыДохода.КатегорияДохода) <> Неопределено Тогда
					НоваяСтрока.ДоступнаДатаВыплаты = Истина;
					ДоступнаДатаВыплаты = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НоваяСтрока.Начисление = СтрокаМассива.ДокументОснование;
			НоваяСтрока.ЭтоДГПХ = Истина;
			НоваяСтрока.ТипНачисления = "ДоговорРаботыУслуги";
			НоваяСтрока.ДоступнаДатаВыплаты = Истина;
			
			ДоступнаДатаВыплаты = Истина;
			КодДоходаНДФЛ = СтрокаМассива.КодДохода;
			
		КонецЕсли;
		
		НоваяСтрока.КодДохода = КодДоходаНДФЛ;
		
		Если НачисленияОклад.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
			НоваяСтрока.Порядок = 1;
		ИначеЕсли НоваяСтрока.ВходитВБазуРКиСН Тогда
			НоваяСтрока.Порядок = 100 + СдвигПорядка;
		ИначеЕсли НачисленияРК.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
			НоваяСтрока.Порядок = 300;
		ИначеЕсли НачисленияСН.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
			НоваяСтрока.Порядок = 400;
		ИначеЕсли НоваяСтрока.ЭтоДГПХ Тогда
			НоваяСтрока.Порядок = 500 + СдвигПорядка;
		Иначе
			НоваяСтрока.Порядок = 200 + СдвигПорядка;
		КонецЕсли;
		
		СдвигПорядка = СдвигПорядка + 1;
		
	КонецЦикла;
	
	Начисления.Сортировать("Порядок, Подразделение, Начисление");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеВСтроке(Источник)
	
	РезультатЗапроса = ЗапросВыборкаДругихНачисленийТекущегоМесяца(Источник);
	Результат = РезультатЗапроса.Выгрузить();
	
	МассивНайденныхСтрок  = Новый Массив;
	МассивСтрокНачислений = Начисления.НайтиСтроки(Новый Структура("Ссылка", Источник));
	Для Каждого СтрокаМассива Из МассивСтрокНачислений Цикл
		
		МассивДобавляемыхСтрок = Результат.НайтиСтроки(Новый Структура("Ссылка, Начисление", СтрокаМассива.Ссылка, СтрокаМассива.Начисление));
		Если МассивДобавляемыхСтрок.Количество() <> 0 Тогда
			СтрокаМассива.ОтпускныеБольничные = МассивДобавляемыхСтрок[0].ОтпускныеБольничные;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолучитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьИтоги(Форма)
	
	Форма.ИтогоНачислено   = Форма.Начисления.Итог("Результат") + Форма.Начисления.Итог("ОтпускныеБольничные");
	Форма.ИтогоСуммаВычета = Форма.Начисления.Итог("СуммаВычета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Начисления");
	НачисленияГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоДругоеНачисление", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияРезультат");
	НачисленияГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоДругоеНачисление", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияОтпускныеБольничные");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияДругиеНачисления");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоДругоеНачисление", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияКодВычета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияСуммаВычета");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ВычетПримененныйКДоходам", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость",      Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ДоступнаДатаВыплаты", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	Если Не УдерживаетсяНДФЛПоАвансам И Не ПереходныйПериод Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияНачисление");
		Если Не УчетнаяПолитика.ПрименяетсяАУСН(Организация, МесяцНачисления) Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПланируемаяДатаВыплаты");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Начисления.ЭтоРКСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияНачисление");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПодразделение");
	НачисленияГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоДругоеНачисление", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоРКСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияОтработаноДней");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияОтработаноЧасов");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоДГПХ", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.НачисленияГруппаВычет.Видимость = ДоступенВычет;
	Элементы.НачисленияПланируемаяДатаВыплаты.Видимость = ДоступнаДатаВыплаты И Год(МесяцНачисления) > 2016;
	Элементы.ФормаРасчетныйЛисток.Видимость = Не ПерваяПоловинаМесяца;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьСтроки(Форма)
	
	Для Сч = 0 По Форма.Начисления.Количество() - 1 Цикл
		СтрокаТаблицы = Форма.Начисления[Сч];
		СтрокаТаблицы.НомерСтроки = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНачислений = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНачислений.Сотрудник) Тогда
		СтрокаНачислений.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.Сотрудник, "ФизическоеЛицо");
		ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений.ФизическоеЛицо));
		
		Если НЕ ЗначениеЗаполнено(СтрокаНачислений.Подразделение) Тогда
			Если ЗначениеЗаполнено(Подразделение) Тогда
				СтрокаНачислений.Подразделение = Подразделение;
			Иначе
				ЗначенияПоУмолчанию = Новый Структура("Организация, Подразделение");
				ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию);
				СтрокаНачислений.Подразделение = ЗначенияПоУмолчанию.Подразделение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаНачислений.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ОбработатьИзменениеНачислений(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НачислениеПриПриИзмененииНаСервере()
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНачислений = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
		СтрокаНачислений.ВычетПримененныйКДоходам = Ложь;
		СтрокаНачислений.ДоступнаДатаВыплаты      = Ложь;
	Иначе
		
		Если СтрокаНачислений.ЭтоДГПХ Тогда
			
			СтрокаНачислений.ДоступнаДатаВыплаты = Истина;
			КодДоходаНДФЛ = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)[0];
			СтрокаНачислений.КодДохода = КодДоходаНДФЛ;
			Если ЗначениеЗаполнено(СтрокаНачислений.КодДохода) Тогда
				ВычетПримененныйКДоходам = ЭтотОбъект.СоответствиеКодовВычетовКодамДоходов.Получить(СтрокаНачислений.КодДохода) <> Неопределено
			КонецЕсли;
			СтрокаНачислений.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(СтрокаНачислений.КодДохода);
			Если ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
				ОблагаетсяФСС_НС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.Начисление, "ОблагаетсяФСС_НС");
			КонецЕсли;
			СтрокаНачислений.КодДоходаСтраховыеВзносы = УчетСтраховыхВзносов.ВидДоходаДляДоговораНаВыполнениеРабот(ОблагаетсяФСС_НС);
			СтрокаНачислений.СуммаВычета = 0;
			
		Иначе
			
			ДанныеНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаНачислений.Начисление,
													"КодДоходаНДФЛ,КатегорияДохода,КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
													
			КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
			
			Если УдерживаетсяНДФЛПоАвансам Или ПереходныйПериод Тогда
				СтрокаНачислений.ДоступнаДатаВыплаты = Истина;
			Иначе
				Если КодДоходаНДФЛ <> КодДоходаПоУмолчанию Тогда
					СтрокаНачислений.ДоступнаДатаВыплаты = Истина;
				КонецЕсли;
				
				Если КатегорииДоходовАУСН.НайтиПоЗначению(ДанныеНачисления.КатегорияДохода) <> Неопределено Тогда
					СтрокаНачислений.ДоступнаДатаВыплаты = Истина;
				КонецЕсли;
			КонецЕсли;
			
			КатегорияНачисленияИлиНеоплаченногоВремени = ДанныеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
			Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда
				Или КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее
				И ДанныеНачисления.ВходитВБазуРКИСН Тогда
				СтрокаНачислений.ВходитВБазуРКиСН = Истина;
			КонецЕсли;
			
			КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
			Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
				СтрокаНачислений.ВычетПримененныйКДоходам =
					СоответствиеКодовВычетовКодамДоходов.Получить(КодДоходаНДФЛ) <> Неопределено
			КонецЕсли;
			
			Если СтрокаНачислений.ВычетПримененныйКДоходам Тогда
				КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
				Если Не ЗначениеЗаполнено(СтрокаНачислений.КодВычета) Тогда
					СтрокаНачислений.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
				КонецЕсли; 
			Иначе
				СтрокаНачислений.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
				СтрокаНачислений.СуммаВычета = 0;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступнаДатаВыплаты = Начисления.НайтиСтроки(Новый Структура("ДоступнаДатаВыплаты", Истина)).Количество() <> 0;
	ДоступенВычет       = Начисления.НайтиСтроки(Новый Структура("ВычетПримененныйКДоходам", Истина)).Количество() <> 0;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНачислений(ИдентификаторСтроки)
	
	СтрокаНачисления = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
		
		Если СтрокаНачисления.ЭтоДГПХ Тогда
			КодДоходаНДФЛ = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)[0];
		Иначе
			ДанныеНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНачисления.Начисление, "КодДоходаНДФЛ,КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
			КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
		КонецЕсли;
		
		Если СтрокаНачисления.ВычетПримененныйКДоходам Тогда
			КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			Если Не ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
				СтрокаНачисления.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			КонецЕсли; 
		Иначе
			СтрокаНачисления.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаНачисления.КодВычета) И СтрокаНачисления.СуммаВычета = 0 Тогда
			СтрокаНачисления.СуммаВычета = УчетНДФЛ.ВычетКДоходуСотрудника(
				Ссылка,
				Организация,
				МесяцНачисления,
				СтрокаНачисления.Сотрудник,
				КодДоходаНДФЛ,
				СтрокаНачисления.КодВычета,
				СтрокаНачисления.Результат,
				1);
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ СтрокаНачисления.ЭтоДГПХ Тогда
		ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки)
	
	СтрокаИнициаторПересчета = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Документы.НачислениеЗарплаты.ПересчитатьНачисленияСКоэффициентом(СтрокаИнициаторПересчета, Начисления);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОкладНаСервере(ОбновитьЧасы)
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НачисленияОклад.Найти(ДанныеСтроки.Начисление) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеДни  = ДанныеСтроки.ОтработаноДней;
	НовыеЧасы = ДанныеСтроки.ОтработаноЧасов;
	
	ОбновитьРасчет = Ложь;
	
	Если ОбновитьЧасы Тогда
		Если ОтработаноДней <> 0
			И ДанныеСтроки.ОтработаноДней <= ДанныеСтроки.РабочихДней Тогда
			
			ОтработаноДней = ?(ОтработаноДней > ДанныеСтроки.РабочихДней, ДанныеСтроки.РабочихДней, ОтработаноДней);
			
			Если ДанныеСтроки.ОтработаноДней = ДанныеСтроки.РабочихДней Тогда
				ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.РабочихЧасов;
			Иначе
				
				ИзмененоДней = ДанныеСтроки.ОтработаноДней - ОтработаноДней;
				ИзмененоЧасов = Окр(ИзмененоДней * 8 * ДанныеСтроки.ДоляНеполногоРабочегоВремени, 2);
				
				Если ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов > 0 Тогда
					ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов;
				Иначе
					ДанныеСтроки.ОтработаноЧасов = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеСтроки.ОтработаноДней <> 0 И ОтработаноДней <> 0 Тогда
				ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноДней / ОтработаноДней;
			КонецЕсли;
			
			ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
			ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
			НовыеЧасы       = ОтработаноЧасов;
			
			ОбновитьРасчет = Истина;
		КонецЕсли;
	Иначе
		Если ОтработаноЧасов <> 0
			И ДанныеСтроки.ОтработаноЧасов <= ДанныеСтроки.РабочихЧасов Тогда
			
			ОтработаноЧасов = ?(ОтработаноЧасов > ДанныеСтроки.РабочихЧасов, ДанныеСтроки.РабочихЧасов, ОтработаноЧасов);
			
			Если ДанныеСтроки.ОтработаноЧасов <> 0 И ОтработаноЧасов <> 0 Тогда
				ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноЧасов / ОтработаноЧасов;
			КонецЕсли;
			
			ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
			
			ОбновитьРасчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьРасчет Тогда
		ОбработатьИзменениеНачислений(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнениеРеквизитов() Тогда
			ПеренестиИзмененияВОбъектФормыВладельца();
			Если ДополнительныеПараметры.Закрытие Тогда
				Закрыть(Сотрудник);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Если ДополнительныеПараметры.Закрытие Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Закрытие
		И НЕ Результат = КодВозвратаДиалога.Отмена Тогда
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ПроверкаПройдена = Истина;
	ДоговорыПодряда  = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ Начисления Цикл
		ИндексСтроки = Начисления.Индекс(СтрокаТаблицы);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Начисление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",
				"Заполнение",
				"Начисление",
				ИндексСтроки + 1,
				"Начисления");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Начисления", ИндексСтроки+1, "Начисление"));
			ПроверкаПройдена = Ложь;
		Иначе
			Если СтрокаТаблицы.ЭтоДГПХ Тогда
				Если ДоговорыПодряда.Найти(СтрокаТаблицы.Начисление) = Неопределено Тогда
					ДоговорыПодряда.Добавить(СтрокаТаблицы.Начисление);
				Иначе
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",
						"Корректность",
						"Начисление",
						ИндексСтроки + 1,
						"Начисления",
						НСтр("ru='В списке начислений дублируются договоры подряда.'"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Начисления", ИндексСтроки+1, "Начисление"));
					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет()
	
	РасчетныйЛисток = ВладелецФормы.РасчетныйЛистокНаСервере("Начисления", Сотрудник);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Отчет.АнализНачисленийИУдержаний",
		"РасчетныйЛистокПодробнее",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка),
		ЭтотОбъект,
		Новый Структура("ПечатаемыйДокумент", РасчетныйЛисток));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзменения(Закрытие)
	
	ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
	Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Новый Структура("Закрытие", Закрытие));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипНачисленияЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипНачисленияНовойСтроки = ВыбранныйЭлемент.Значение;
	
	Элементы.Начисления.ДобавитьСтроку();
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ВыбранныйЭлемент = "ДоговорРаботыУслуги" Тогда
		ТекущиеДанные.Начисление = ПредопределенноеЗначение("Документ.ДоговорРаботыУслуги.ПустаяСсылка");
		ТекущиеДанные.ЭтоДГПХ = Истина;
		ТекущиеДанные.ТипНачисления = ТипНачисленияНовойСтроки;
		УстановитьОграничениеТипаНачисления(ТекущиеДанные);
		ТипНачисленияНовойСтроки = Неопределено;
	Иначе
		ДобавитьСтрокуНачисления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНачисления()
	
	ТипНачисленияНовойСтроки = "Начисление";
	Элементы.Начисления.ДобавитьСтроку();
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ТекущиеДанные.ТипНачисления = ТипНачисленияНовойСтроки;
	ТекущиеДанные.Начисление = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
	УстановитьОграничениеТипаНачисления(ТекущиеДанные);
	ТипНачисленияНовойСтроки = Неопределено;
	
	ТекущийЭлемент = Элементы.Начисления;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаНачисления(ТекущиеДанные)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипНачисления) Тогда
		ТипНачисления = ТекущиеДанные.ТипНачисления;
	Иначе
		Если ТипЗнч(ТекущиеДанные.Начисление) = Тип("ДокументСсылка.ДоговорРаботыУслуги") Тогда
			ТипНачисления = "ДоговорРаботыУслуги";
		Иначе
			ТипНачисления = "Начисление";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипНачисления = "ДоговорРаботыУслуги" Тогда
		Элементы.НачисленияНачисление.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДоговорРаботыУслуги");
	Иначе
		Элементы.НачисленияНачисление.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНачислений()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ФормаДокументаУстановитьПараметрыВыбораНачислений(
			ЭтотОбъект, Организация, МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры

#Область ПереносВОсновнуюФорму

&НаКлиенте
Процедура ПеренестиИзмененияВОбъектФормыВладельца()
	
	Если Модифицированность Тогда
		Оповестить("ИзмененыРезультатыРачетаНачисления", ПоместитьИзмененныеДанныеВоВременноеХранилище(), ЭтотОбъект);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененныеДанныеВоВременноеХранилище()
	
	ВозвращаемыеСведения = Новый Структура;
	
	ДанныеНачислений = Начисления.Выгрузить();
	УдаляемыеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура("ЭтоОтклонение", Истина));
	Для Каждого УдаляемаяСтрока ИЗ УдаляемыеСтроки Цикл
		ДанныеНачислений.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	ДанныеНачислений.ЗаполнитьЗначения(Сотрудник,      "Сотрудник");
	ДанныеНачислений.ЗаполнитьЗначения(ФизическоеЛицо, "ФизическоеЛицо");
	
	НачисленияПоТрудовымДоговорам = ДанныеНачислений.Скопировать(Новый Структура("ЭтоДГПХ", Ложь));
	
	НачисленияПоДоговорамПодряда = ДанныеНачислений.Скопировать(Новый Структура("ЭтоДГПХ", Истина));
	НачисленияПоДоговорамПодряда.Колонки.Начисление.Имя = ("ДокументОснование");
	
	ВозвращаемыеСведения.Вставить("Начисления",            НачисленияПоТрудовымДоговорам);
	ВозвращаемыеСведения.Вставить("НачисленияПоДоговорам", НачисленияПоДоговорамПодряда);
	ВозвращаемыеСведения.Вставить("ФизическоеЛицо",        ФизическоеЛицо);
	ВозвращаемыеСведения.Вставить("Сотрудник",             Сотрудник);
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемыеСведения, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти
