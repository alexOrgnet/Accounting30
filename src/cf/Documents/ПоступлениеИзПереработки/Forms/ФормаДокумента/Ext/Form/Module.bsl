// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьУсловноеОформление();
	
	// ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	// Конец ГОСИС

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция",               "Продукция");
	СписокТабличныхЧастей.Добавить("Услуги",                  "Услуги");
	СписокТабличныхЧастей.Добавить("ИспользованныеМатериалы", "ИспользованныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвращенныеМатериалы",   "ВозвращенныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара",          "ВозвратнаяТара");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтотОбъект, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтотОбъект, АктивизироватьТабличнуюЧасть);
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Подсистема ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец подсистемы ГОСИС

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ГосИС

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПоступлениеИзПереработки";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
		ПараметрыСозданияСчетаФактуры.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = НомерСчетаФактурыПолученного;
		ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ДатаСчетаФактурыПолученного;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Результат);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
												 
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВариантРасчетаВходящегоНДС",
		?(Объект.СуммаВключаетНДС, Перечисления.ВариантыРасчетаНДС.НДСВСумме, Перечисления.ВариантыРасчетаНДС.НДССверху));
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.Ссылка);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ГосИС

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ПоступлениеИзПереработки", ПараметрыЗаписи, Объект.Ссылка);
	
		// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"	   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеИзПереработки.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыФормы.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"	, АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"  			, Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам"  	, Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("ВсегдаОтображатьСчетаУчета"  	, Истина);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаСчетаФактурыПолученного) Тогда
		ЭтотОбъект.ДатаСчетаФактурыПолученного = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		СчетЗатратПриИзмененииНаСервере();
	КонецЕсли;

	УстановитьВидимостьКолонкиПродукция(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СуммаПлановая, ПлановаяСтоимость,
		|Счет, Спецификация, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПересчитатьСумму(Элемент)

	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПродукцияПрослеживаемыйКомплект" Тогда
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйКомплект Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	УчетАгентскогоНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(ЭтотОбъект,"УчетАгентскогоНДС");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, Всего, СпособУчетаНДС,
		|СтатьяЗатрат, СчетУчетаНДС, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента, 
		|ПрименяютсяСтавки4и2, СпособЗаполненияСтавкиНДС, СтавкаНДС,
		|УчетАгентскогоНДС, ВидАгентскогоДоговора, ПоставщикРезидентТаможенногоСоюза");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.УчетАгентскогоНДС                 = УчетАгентскогоНДС;
	ДанныеОбъекта.ВидАгентскогоДоговора             = Ложь;
	ДанныеОбъекта.ПоставщикРезидентТаможенногоСоюза = Ложь;
	ДанныеОбъекта.ПрименяютсяСтавки4и2              = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.СпособЗаполненияСтавкиНДС         = СпособЗаполненияСтавкиНДС;
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиентБП.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьЦену(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "Услуги", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "Услуги");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыИспользованныеМатериалы

&НаКлиенте
Процедура ИспользованныеМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Элемент.ТекущиеДанные, Ложь);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчета, СтатьяЗатрат, СпособУчетаНДС, ОтражениеВУСН,
		|СтранаПроисхождения, ПрослеживаемыйТовар, РНПТ, ИдентификаторСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИспользованныеМатериалыРНПТ" Тогда
		ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ИспользованныеМатериалы", ПараметрыФормыПодбора);
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ИспользованныеМатериалыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.ИспользованныеМатериалы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ИспользованныеМатериалы.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные, Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвращенныеМатериалы

&НаКлиенте
Процедура ВозвращенныеМатериалыПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УстановитьОтметкуНезаполненногоСклад(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СчетУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если ТекущиеДанные.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПродукция(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Продукция"),
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Услуги"),
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнойТары(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвратнаяТара"),
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборИспользованныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ИспользованныеМатериалы"),
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвращенныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвращенныеМатериалы"),
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыПоСпецификации(Команда)

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		ДополнительныеПараметры = Новый Структура("ТабЧасть", "ИспользованныеМатериалы");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ИспользованныеМатериалы");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыПоСпецификации(Команда)

	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		ДополнительныеПараметры = Новый Структура("ТабЧасть", "ВозвращенныеМатериалы");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ВозвращенныеМатериалы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИспользованныеМатериалы
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("ИспользованныеМатериалыПроинициализировано") Тогда
			Форма.УстановитьУсловноеОформлениеИспользованныеМатериалы();
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПродукция 
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("ПродукцияПроинициализировано") Тогда
			Форма.УстановитьУсловноеОформлениеПродукция();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// СчетУчетаРасчетовПоТаре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИспользованныеМатериалы() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ИспользованныеМатериалыПроинициализировано", Истина);
	
	// ИспользованныеМатериалыСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИспользованныеМатериалыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользованныеМатериалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользованныеМатериалы.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ИспользованныеМатериалыРНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИспользованныеМатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользованныеМатериалы.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользованныеМатериалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИспользованныеМатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользованныеМатериалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИспользованныеМатериалыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры


&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
			
		УчетАгентскогоНДС 		= РеквизитыДоговора.УчетАгентскогоНДС;
		ПрименяютсяСтавки4и2 	= РеквизитыДоговора.НДСПоСтавкам4и2;
		РасчетыВУЕ 				= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ТребуетсяСчетФактура 	= НЕ УчетАгентскогоНДС;
	
	Иначе

		УчетАгентскогоНДС 		= Ложь;
		ПрименяютсяСтавки4и2 	= Ложь;
		РасчетыВУЕ 				= Ложь;
		ТребуетсяСчетФактура 	= НЕ ВестиУчетПоДоговорам;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);

	ЕстьВозвратнаяТара = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И Объект.ВозвратнаяТара.Количество() > 0;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
	ЗаполнитьСпискиВыбораОтражениеВУСН();
	
	УправлениеФормой(ЭтотОбъект);

	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	НастроитьФормуПоУчетнойПолитике();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоУчетнойПолитике()
	
	ОграничитьВыборСчетамиПрямыхРасходов();
	УстановитьВидимостьКолонкиПродукция(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборСчетамиПрямыхРасходов()

	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат, Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	УпрощенныйУчетНДС				 = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДС					 = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19		 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация,	Объект.Дата);
	УчитыватьТаруЗаБалансом          = УчетнаяПолитика.УчитыватьТаруЗаБалансом(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры	 = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	СпособЗаполненияСтавкиНДС        = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);
	ВедетсяУчетПрослеживаемыхТоваров  = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	Элементы.ГруппаПрослеживаемость.Видимость = ВедетсяУчетПрослеживаемыхТоваров;

	УчетПроизводства.НастроитьВидимостьЭлементовПлановойСебестоимости(
		Элементы.ПродукцияИспользоватьПлановуюСебестоимость,
		Объект.Дата,
		Объект.Организация);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ПодразделениеЗатрат.Доступность      = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	Элементы.СчетУчетаРасчетовПоТаре.Видимость = НЕ Форма.УчитыватьТаруЗаБалансом;

	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Ложь,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораОтражениеВУСН(ПерезаполнитьНедоступныеЗначения = Ложь)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяОсобыйНалоговыйРежим = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата)
		Или УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	
	ДоступныеОтражения = Перечисления.ОтражениеВУСН.СписокВыбора(ПрименяетсяОсобыйНалоговыйРежим, Истина);
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("Услуги");
	ИменаТабличныхЧастей.Добавить("ИспользованныеМатериалы");
	ИменаТабличныхЧастей.Добавить("ВозвращенныеМатериалы");
	
	Для Каждого ИмяТаблицы Из ИменаТабличныхЧастей Цикл
		НастраиваемыйЭлемент = Элементы[ИмяТаблицы + "ОтражениеВУСН"];
		СписокВыбора = НастраиваемыйЭлемент.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ЭлементОтражения Из ДоступныеОтражения Цикл
			СписокВыбора.Добавить(ЭлементОтражения.Значение, ЭлементОтражения.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Если ПерезаполнитьНедоступныеЗначения Тогда
		
		Для Каждого ИмяТаблицы Из ИменаТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
				Если ДоступныеОтражения.НайтиПоЗначению(СтрокаТаблицы.ОтражениевУСН) = Неопределено Тогда
					СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// Структура параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	// Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если НЕ РаздельныйУчетНДСНаСчете19
		ИЛИ ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;

		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения = Объект.ВалютаДокумента;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;

		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключенВСтоимость	   = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;	
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ТипПолучаемыхЦен = Объект.ТипЦен;

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
	Строка,
	ТаблицаЦенНоменклатуры,
	ВалютаПередИзменением,
	СтруктураКурса,
	ПерезаполнитьЦены,
	ПересчитатьЦены,
	ПересчитатьНДС,
	ЕстьНДС,
	ЗначениеПустогоКоличества,
	Знач ЦенаВключаетНДС)

	КурсВалютыДокумента 	 = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КурсВзаиморасчетов);
	КратностьВалютыДокумента = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КратностьВзаиморасчетов);
	
	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			КурсВалютыДокумента, НайденнаяСтрока.Кратность, КратностьВалютыДокумента);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс, 
				КурсВалютыДокумента, СтруктураКурса.Кратность, КратностьВалютыДокумента);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
		
	КонецЕсли;
		
	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(Объект.Услуги, Объект.Дата, ТекущаяДатаДокумента);
	ЗаполнитьСпискиВыбораОтражениеВУСН(Истина);
	УправлениеФормой(ЭтотОбъект);
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.ИспользованныеМатериалы, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Продукция, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);

	НастроитьФормуПоУчетнойПолитике();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	
	Объект.НДСВключенВСтоимость = Не ПлательщикНДС;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ЗаполнитьСпискиВыбораОтражениеВУСН(Истина);
	
	УправлениеФормой(ЭтотОбъект);

	НастроитьФормуПоУчетнойПолитике();
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Продукция" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИспользованныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвращенныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
		ТребуетсяСчетФактура = Истина;
		УстановитьСчетаУчетаРасчетовСпособЗачетаАвансов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры 

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ЭтотОбъект.СпособЗаполненияСтавкиНДС =
		РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(Объект.ДоговорКонтрагента);
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения        = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		
	УчетАгентскогоНДС       = ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2    = ДоговорУказан И РеквизитыДоговора.НДСПоСтавкам4и2;
	РасчетыВУЕ              = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	ПересчитатьСуммы = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	ЕстьСтрокиВТабличныхЧастях = (Объект.Услуги.Количество() + Объект.ВозвратнаяТара.Количество()) > 0;
	
	Если ЕстьСтрокиВТабличныхЧастях И (ПересчитатьСуммы ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьСуммы, ПересчитатьНДС);
	КонецЕсли;
	
	УстановитьСчетаУчетаРасчетовСпособЗачетаАвансов();

	ТребуетсяСчетФактура = НЕ УчетАгентскогоНДС И ДоговорУказан;

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьСчетаУчетаРасчетовСпособЗачетаАвансов()
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Объект.ЗачетАвансов.Очистить();
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
											СведенияОНоменклатуре.СтатьяЗатрат,
											ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	СтрокаТабличнойЧасти.СпособУчетаНДС = СведенияОНоменклатуре.СпособУчетаНДС;
	
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
	Иначе
		СтрокаТабличнойЧасти.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ИспользованныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвращенныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Услуги.Итог("Всего");
	
	УстановитьОтметкуНезаполненногоСклад(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоСклад(Форма)
	
	Объект = Форма.Объект;
	
	// Материальные ценности могут быть указаны также в табличной части ИспользованныеМатериалы. Обычно
	// на счетах учета, указанных в этой табличной части, нет субконто Склады, поэтому в проверке на форме
	// эту табличную часть игнорируем. Если все-таки это субконто используется, проверка сработает
	// в обработке проверки заполнения модуля объекта.
	НужноУказыватьСклад = Объект.ВозвратнаяТара.Количество() > 0 Или Объект.Продукция.Количество() > 0
		Или Объект.ВозвращенныеМатериалы.Количество() > 0;
	
	Форма.Элементы.Склад.ОтметкаНезаполненного = НужноУказыватьСклад И Не ЗначениеЗаполнено(Объект.Склад);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета, НДСВключенВСтоимость",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета,
		Объект.НДСВключенВСтоимость);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонки Всего табличной части Услуги
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;

	// Заполнение колонки Всего табличной части ВозвратнаяТара
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ИспользованныеМатериалы Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Строка, Ложь);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокПодборов(ИмяТаблицы)

	// Список возможных подборов - в Обработка.ПодборНоменклатуры.Форма.Форма.УстановитьТекущийСписок(Форма)
	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru = 'По справочнику'"));

	Возврат СписокПодборов;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	Если ИмяТаблицы = "Услуги" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор услуг в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	ИначеЕсли ИмяТаблицы = "Продукция" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор продукции в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Продукция'");
	ИначеЕсли ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор возвращенных материалов в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Возвращенные материалы'");
	ИначеЕсли ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор использованных материалов в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Использованные материалы'");
	Иначе
		ЗаголовокПодбора     = "";
		ПредставлениеТаблицы = "";
	КонецЕсли;

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора,
		Объект.Ссылка,
		ПредставлениеТаблицы);
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",         ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", ПолучитьСписокПодборов(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",     ИмяТаблицы);
	Если ИмяТаблицы <> "Услуги" Тогда // В списке Услуги может быть и продукция и услуги
		ПараметрыФормы.Вставить("Услуги", Ложь);
	КонецЕсли;

	Если ИмяТаблицы = "Услуги" ИЛИ ИмяТаблицы = "ВозвратнаяТара" Тогда
		
		ПараметрыФормы.Вставить("ЕстьЦена", Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ПараметрыФормы.Вставить("ТипЦен",         Объект.ТипЦен);
			ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
		Иначе
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
			Если ИмяТаблицы = "ВозвратнаяТара" Тогда
				ПараметрыФормы.Вставить("СуммаВключаетНДС", Истина);
			Иначе
				ПараметрыФормы.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			КонецЕсли;
			ПараметрыФормы.Вставить("Реализация"				, Истина);
		
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы.Вставить("ЕстьЦена", Ложь);
		
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;	
	
	КоличествоДобавленныхСтрок = 0;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента,
		|СпособЗаполненияСтавкиНДС, УчетАгентскогоНДС, ВидАгентскогоДоговора, ПоставщикРезидентТаможенногоСоюза");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УчетАгентскогоНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(
		ЭтотОбъект,"УчетАгентскогоНДС");
	
	ДанныеОбъекта.УчетАгентскогоНДС                 = УчетАгентскогоНДС;
	ДанныеОбъекта.ВидАгентскогоДоговора             = Ложь;
	ДанныеОбъекта.ПоставщикРезидентТаможенногоСоюза = Ложь;
	ДанныеОбъекта.СпособЗаполненияСтавкиНДС         = ЭтотОбъект.СпособЗаполненияСтавкиНДС;
	
	Если ИмяТаблицы = "Продукция" Тогда
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
		ДанныеОбъекта.СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		
		Услуги = (ИмяТаблицы = "Услуги");
		
		// Пропускаем строки с неправильным типом номенклатуры
		Если ЭтоВставкаИзБуфера 
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга <> Услуги Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		// Оставляем уже заполненные счета
		Если (ИмяТаблицы = "Продукция" И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет))
			ИЛИ (ИмяТаблицы = "Услуги" И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС))
			ИЛИ (ИмяТаблицы = "ИспользованныеМатериалы" И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета)) 
			ИЛИ ИмяТаблицы = "ВозвратнаяТара" ИЛИ ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
			
			Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, 
				СтрокаТабличнойЧасти, 
				ИмяТаблицы, 
				СведенияОНоменклатуре);
				
		КонецЕсли;	
				
		
		Если ИмяТаблицы = "Продукция" Тогда
			
			СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			
		ИначеЕсли ИмяТаблицы = "Услуги" Тогда
			
			СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
			СтрокаТабличнойЧасти.Цена			= СтрокаТовара.Цена;
			СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		ИначеЕсли ИмяТаблицы = "ИспользованныеМатериалы" Тогда
			
			СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
				СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
				СтрокаТабличнойЧасти.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
			КонецЕсли;
			
		ИначеЕсли ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
			
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
		ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
			
			СтрокаТабличнойЧасти.Цена	= СтрокаТовара.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетов.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);
	
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

// Возвращаемое значение:
// Таблица значений - список материалов, имеющихся у переработчика
&НаСервереБезКонтекста
Функция ОстаткиМатериаловУПереработчика(Организация, Контрагент, Ссылка, Дата, ВедетсяУчетПрослеживаемыхТоваров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата", Новый Граница(
			Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Новый Граница(Дата, ВидГраницы.Исключая));
	КонецЕсли;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СтатьяЗатратПоУмолчанию", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	Запрос.УстановитьПараметр("ВедетсяУчетПрослеживаемыхТоваров", ВедетсяУчетПрослеживаемыхТоваров);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаМатериалыПереданныеВПереработку
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаМатериалыПереданныеВПереработку.Счет
	|				ИЗ
	|					СчетаМатериалыПереданныеВПереработку),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Счет КАК СчетУчета,
	|	ДанныеРегистра.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Номенклатура.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			ТОГДА &СтатьяЗатратПоУмолчанию
	|		ИНАЧЕ ДанныеРегистра.Номенклатура.СтатьяЗатрат
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН,
	|	ДанныеРегистра.Количество КАК Количество,
	|	ДанныеРегистра.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ДанныеРегистра.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА &ВедетсяУчетПрослеживаемыхТоваров
	|			ТОГДА ДанныеРегистра.Номенклатура.ПрослеживаемыйТовар
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрослеживаемыйТовар
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	ТаблицаМатериалы = Запрос.Выполнить().Выгрузить();
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалы, "Номенклатура", Истина);
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Дата);
		Для Каждого Строка Из ТаблицаМатериалы Цикл
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[Строка.Номенклатура];
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				Строка.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаМатериалы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере()

	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент,
		Объект.Ссылка, Объект.Дата, Ложь);
	
	Объект.ВозвращенныеМатериалы.Загрузить(ОстаткиМатериалов);
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере()
	
	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент,
		Объект.Ссылка, Объект.Дата, ВедетсяУчетПрослеживаемыхТоваров);
	
	Объект.ИспользованныеМатериалы.Загрузить(ОстаткиМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоСпецификацииНаСервере(ДополнительныеПараметры.ТабЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ИмяТабличнойЧасти)

	Объект[ИмяТабличнойЧасти].Очистить();
	
	ВедетсяУчетЗатратПоПродукции =
		Справочники.НастройкиУчетаЗатрат.ВедетсяУчетЗатратПоПродукции(Объект.Дата, Объект.СчетЗатрат, Объект.Организация);
		
	Документы.ПоступлениеИзПереработки.ЗаполнитьМатериалыПоПродукции(
		Объект[ИмяТабличнойЧасти],
		Объект.Продукция.Выгрузить(),
		ВедетсяУчетЗатратПоПродукции,
		?(ИмяТабличнойЧасти = "ИспользованныеМатериалы", ВедетсяУчетПрослеживаемыхТоваров, Ложь));
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти);
	
	Если ВедетсяУчетПрослеживаемыхТоваров И ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ИспользованныеМатериалы.Выгрузить(), "Номенклатура", Истина);
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Объект.Дата);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ИспользованныеМатериалы Цикл
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтотОбъект);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура СчетЗатратПриИзмененииНаСервере()

	// Заполним основную номенклатурную группу
	Если БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		Объект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонкиПродукция(Форма)
	
	ОбъектФормы = Форма.Объект;
	ЭлементыФормы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(ОбъектФормы.СчетЗатрат) Или Не ЗначениеЗаполнено(ОбъектФормы.Организация) Тогда
		
		ЭлементыФормы.ИспользованныеМатериалыПродукция.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	УчетПоПродукции = ВедетсяУчетЗатратПоПродукции(
		ОбъектФормы.Организация,
		ОбъектФормы.СчетЗатрат,
		ОбъектФормы.Дата);
	
	ЭлементыФормы.ИспользованныеМатериалыПродукция.Видимость = УчетПоПродукции;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВедетсяУчетЗатратПоПродукции(Организация, СчетЗатрат, Дата)

	УчетПоПродукции = Справочники.НастройкиУчетаЗатрат.ВедетсяУчетЗатратПоПродукции(
		Дата, СчетЗатрат, Организация);
		
	Возврат УчетПоПродукции;
		
КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
		
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	
	Если ИмяТекущейСтраницы = "ГруппаПродукция" Тогда
		ИмяТаблицы = "Продукция";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		ИмяТаблицы = "Услуги";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаИспользованныеМатериалы" Тогда
		ИмяТаблицы = "ИспользованныеМатериалы";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Продукция" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("СуммаПлановая");
		СписокСвойств.Добавить("ПлановаяСтоимость");
		СписокСвойств.Добавить("Спецификация");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("Счет");
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("СпособУчетаНДС");
		СписокСвойств.Добавить("СтатьяЗатрат");
		СписокСвойств.Добавить("ОтражениеВУСН");
				
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			СписокСвойств.Добавить("СчетУчетаНДС");
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("СтатьяЗатрат");
		СписокСвойств.Добавить("ОтражениеВУСН");
		СписокСвойств.Добавить("СпособУчетаНДС");
		СписокСвойств.Добавить("Продукция");
				
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("СчетУчета");
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ПродукцияВставитьСтроки.Доступность				= Доступность;
	Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					= Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность 	= Доступность;
	Элементы.ИспользованныеМатериалыВставитьСтроки.Доступность	= Доступность;
	Элементы.ИспользованныеМатериалыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти, Ложь);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.ИспользованныеМатериалы.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0], Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

#Область БЭД

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформлениеПродукция() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ПродукцияПроинициализировано", Истина);
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродукцияПрослеживаемыйКомплект");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти