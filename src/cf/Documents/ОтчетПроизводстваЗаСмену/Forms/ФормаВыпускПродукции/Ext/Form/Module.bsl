
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, Неопределено);

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Включим калькуляционные счета, разрешенные использовать в проводках
	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат, Объект.Организация, Объект.Дата);
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьСчетовУчета();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ОтчетПроизводстваЗаСмену",
		"ФормаДокумента",
		НСтр("ru='Новости: Выпуск продукции (Отчет производства)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетПроизводстваЗаСмену";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Не ЗначениеЗаполнено(Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить()) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьСписокМатериаловТаблицыПродукция();
	
	ОтчетПроизводстваЗаСменуФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка выполняется только в интерактивном режиме
	Если ПлательщикНДФЛ И Объект.Материалы.Количество() = 0 Тогда
		
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Список", , , , "Материалы", );
		
		// Проверяем заполнение ТЧ Материалы только, если выпускается продукция не из давальческого сырья
		Для Каждого СтрокаПродукции Из Объект.Продукция Цикл
			
			Если ЗначениеЗаполнено(СтрокаПродукции.Счет)
				И СтрокаПродукции.Счет <> ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Материалы", "Объект", Отказ);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеЗатрат) Тогда
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПродукцияМатериалы" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяСтрока = Элементы.Продукция.ТекущиеДанные;
		ОткрытьСписокМатериалов(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Если Поле.Имя = "ПродукцияПрослеживаемыйКомплект" Тогда
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйКомплект Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеПродукции = Элементы.Продукция.ТекущиеДанные;
		ТекущиеДанныеПродукции.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Спецификация, Счет, НоменклатурнаяГруппа, ПрослеживаемыйКомплект");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ВедетсяУчетПрослеживаемыхТоваров, ИспользоватьПлановуюСебестоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	ДанныеОбъекта.ИспользоватьПлановуюСебестоимость = ИспользоватьПлановуюСебестоимость;
	
	ПараметрыЗаполненияСчетовУчета = ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Продукция.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ЗаполнитьМатериалыДляПродукцииНаСервере(ТекущиеДанные.КлючСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);
	
	Если ТекущиеДанные.РучнаяКорректировкаМатериалов Тогда
		ТекстВопроса = НСтр("ru = 'Список материалов продукции был изменен.
			|Перезаполнить с учетом норм спецификации?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КлючСтроки", ТекущиеДанные.КлючСтроки);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ЗаполнитьМатериалыДляПродукцииНаСервере(ТекущиеДанные.КлючСтроки, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьМатериалыДляПродукцииНаСервере(ТекущиеДанные.КлючСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество <> 0 Тогда
		ТекущиеДанные.ПлановаяСтоимость = ТекущиеДанные.СуммаПлановая / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ЗаполнитьНоменклатурнуюГруппуМатериалов(ТекущиеДанные.КлючСтроки, ТекущиеДанные.НоменклатурнаяГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПродукция Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Продукция.НайтиПоИдентификатору(СтрокаПродукция);
		УдалитьСвязанныеМатериалы(ТекДанные.КлючСтроки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработкаПодбораПродукция(Команда)
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора(),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Продукция.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВВЕТИС(Команда)
	
	СобытияФормВЕТИСБПКлиент.ОткрытьФормуДокументаПроизводственнойОперацииВЕТИС(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("ПродукцияСчет");
	
	ЭлементыСчетов.Добавить("СчетЗатрат");
	ЭлементыСчетов.Добавить("ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ЗаполнитьМатериалыДляПродукцииНаСервере(ДополнительныеПараметры.КлючСтроки, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	УстановитьУсловноеОформлениеПродукция();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// Склад
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Склад");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСклад", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ОтчетПроизводстваЗаСменуФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ЗаполнитьСписокМатериаловТаблицыПродукция();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ТекущаяДатаДокумента                    = Объект.Дата;
	ВалютаРегламентированногоУчета          = Константы.ВалютаРегламентированногоУчета.Получить();
	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПоказыватьСебестоимость = (УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) <>
		Перечисления.СпособыОценки.ПоСредней);
	
	ИспользоватьПлановуюСебестоимость = Справочники.НастройкиУчетаЗатрат.ПлановаяСебестоимость(
		Объект.Дата,
		Объект.Организация);
		
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПрослеживаемыхТоваров  = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	
	УчетПроизводства.НастроитьВидимостьЭлементовПлановойСебестоимости(
		Элементы.ПродукцияИспользоватьПлановуюСебестоимость,
		Объект.Дата,
		Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Материалы, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Продукция, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	
	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ПричиныИзменения = Новый Массив();
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
	
	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Склад, ПодразделениеОрганизации", Объект));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ОтчетПроизводстваЗаСмену,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Продукция",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент          = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Спецификация         = СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СведенияОНоменклатуре.НоменклатурнаяГруппа;
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли;
	СтрокаТабличнойЧасти.ПлановаяСтоимость=
		?(ДанныеОбъекта.ИспользоватьПлановуюСебестоимость, СведенияОНоменклатуре.ПлановаяСтоимость, 0);
	
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыДляПродукцииНаСервере(КлючСтроки, Знач ДанныеОбъекта)
	
	УдалитьСвязанныеМатериалы(КлючСтроки);
	
	ОтборПродукции = Новый Структура();
	ОтборПродукции.Вставить("КлючСтроки", КлючСтроки);
	СтрокаПродукции = Объект.Продукция.НайтиСтроки(ОтборПродукции);
	СписокМатериаловПоСпецификации = СписокМатериаловПоСпецификацииПродукции(Объект.Продукция.Выгрузить(СтрокаПродукции));
	
	Если ЗначениеЗаполнено(СписокМатериаловПоСпецификации) Тогда
		
		СтрокиМатериалы = Новый Массив();
		
		Для Каждого СтрокаМатериаловПоСпецификации Из СписокМатериаловПоСпецификации Цикл
			СтрокаМатериалов = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериалов, СтрокаМатериаловПоСпецификации);
			СтрокаМатериалов.КлючСтроки = КлючСтроки;
			СтрокиМатериалы.Добавить(СтрокаМатериалов);
		КонецЦикла;
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиМатериалы, "Материалы", ДанныеОбъекта, Документы.ОтчетПроизводстваЗаСмену);
		
	КонецЕсли;
	
	СтрокаПродукции[0].СписокМатериалов             = СписокМатериаловПродукции(КлючСтроки, СоответствиеМатериалы());
	СтрокаПродукции[0].РучнаяКорректировкаМатериалов = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатурнуюГруппуМатериалов(КлючСтроки, НоменклатурнаяГруппа)
	
	ОтборМатерилов = Новый Структура();
	ОтборМатерилов.Вставить("КлючСтроки", КлючСтроки);
	СтрокиМатерилов = Объект.Материалы.НайтиСтроки(ОтборМатерилов);
	
	Для Каждого СтрокаМатериалов Из СтрокиМатерилов Цикл
		СтрокаМатериалов.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокМатериалов(ВыбраннаяСтрока)
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилищеМатериалы(ВыбраннаяСтрока.КлючСтроки);
	
	ПараметрыЗакрытияФормы = Новый Структура;
	ПараметрыЗакрытияФормы.Вставить("ВыбраннаяСтрока",          ВыбраннаяСтрока);
	ПараметрыЗакрытияФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресВременногоХранилища",         АдресВременногоХранилища);
	ПараметрыОткрытияФормы.Вставить("Организация",                      Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("Склад",                            Объект.Склад);
	ПараметрыОткрытияФормы.Вставить("Дата",                             Объект.Дата);
	ПараметрыОткрытияФормы.Вставить("СчетЗатрат",                       Объект.СчетЗатрат);
	ПараметрыОткрытияФормы.Вставить("ВедетсяУчетПрослеживаемыхТоваров", ВедетсяУчетПрослеживаемыхТоваров);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСписокМатериалов",
		ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	ОткрытьФорму("Документ.ОтчетПроизводстваЗаСмену.Форма.ФормаВыпускПродукцииСписокМатериалов", ПараметрыОткрытияФормы, , , , ,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеМатериалы(КлючСтроки);
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	ТаблицаМатериалы = Объект.Материалы.Выгрузить(Отбор);
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	ТаблицаПродукция = Объект.Продукция.Выгрузить(Отбор);
		
	ТаблицаСведенияПрослеживаемости = Новый ТаблицаЗначений();
	ТаблицаСведенияПрослеживаемости.Колонки.Добавить("ИдентификаторСтроки");
	ТаблицаСведенияПрослеживаемости.Колонки.Добавить("РНПТ");
	ТаблицаСведенияПрослеживаемости.Колонки.Добавить("Количество");
	ТаблицаСведенияПрослеживаемости.Колонки.Добавить("КоличествоПрослеживаемости");

	Для Каждого Строка Из ТаблицаМатериалы Цикл
		СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
		Для Каждого СтрокаРНПТ Из СтрокиСРНПТ Цикл
			НоваяСтрока = ТаблицаСведенияПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРНПТ);
		КонецЦикла;
	КонецЦикла;
		
	ВыпускПродукции = Новый Структура;
	ВыпускПродукции.Вставить("Продукция",                     ТаблицаПродукция[0].Номенклатура);
	ВыпускПродукции.Вставить("КоличествоПродукции",           ТаблицаПродукция[0].Количество);
	ВыпускПродукции.Вставить("СпецификацияПродукции",         ТаблицаПродукция[0].Спецификация);
	ВыпускПродукции.Вставить("НоменклатурнаяГруппаПродукции", ТаблицаПродукция[0].НоменклатурнаяГруппа);
	
	ВыпускПродукции.Вставить("ТаблицаМатериалы", ТаблицаМатериалы);
	ВыпускПродукции.Вставить("ТаблицаСведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат ПоместитьВоВременноеХранилище(ВыпускПродукции, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокМатериалов(РезультатЗакрытия, ПараметрыЗакрытияФормы) Экспорт
	
	ВыбраннаяСтрока = ПараметрыЗакрытияФормы.ВыбраннаяСтрока;
	
	Если РезультатЗакрытия = "ОК" Тогда
		
		КлючСтроки = ВыбраннаяСтрока.КлючСтроки;
		УдалитьСвязанныеМатериалы(КлючСтроки);
		
		АдресВременногоХранилища = ПараметрыЗакрытияФормы.АдресВременногоХранилища;
		ЗаполнитьСписокМатериаловНаСервере(ВыбраннаяСтрока.КлючСтроки, АдресВременногоХранилища);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СоответствиеМатериалы = СоответствиеМатериалы();
	
	ВыбраннаяСтрока.СписокМатериалов = СписокМатериаловПродукции(ВыбраннаяСтрока.КлючСтроки, СоответствиеМатериалы);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокМатериаловНаСервере(КлючСтроки, АдресВременногоХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ОтборПродукции = Новый Структура();
	ОтборПродукции.Вставить("КлючСтроки", КлючСтроки);
	СтрокаПродукции = Объект.Продукция.НайтиСтроки(ОтборПродукции);
	СтрокаПродукции[0].РучнаяКорректировкаМатериалов = СтруктураВозврата.РучнаяКорректировкаМатериалов;
	
	Для Каждого СтрокаТаблицаМатериалы Из СтруктураВозврата.Материалы Цикл
		Строка = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицаМатериалы);
		Строка.КлючСтроки           = КлючСтроки;
		Строка.НоменклатурнаяГруппа = СтрокаПродукции[0].НоменклатурнаяГруппа;
	КонецЦикла;
	
	Для Каждого СтрокаСведений Из СтруктураВозврата.СведенияПрослеживаемости Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура УдалитьСвязанныеМатериалы(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиНаУдаление = Объект.Материалы.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиНаУдаление Цикл
		Объект.Материалы.Удалить(Строка);
		СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
		Для каждого Строка Из СтрокиСРНПТ Цикл
			Объект.СведенияПрослеживаемости.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМатериаловТаблицыПродукция()
	
	Для Каждого СтрокаПродукция Из Объект.Продукция Цикл
		СтрокаПродукция.СписокМатериалов = СписокМатериаловПродукции(СтрокаПродукция.КлючСтроки, СоответствиеМатериалы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокМатериаловПродукции(КлючСтроки, СоответствиеМатериалы);
	
	ОтборМатериалов = Новый Структура();
	ОтборМатериалов.Вставить("КлючСтроки", КлючСтроки);
	НайденныеСтрокиМатериалов = Объект.Материалы.НайтиСтроки(ОтборМатериалов);
	
	Если НайденныеСтрокиМатериалов.Количество() = 0 Тогда
		Возврат Строка("<...>");
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	Для Каждого СтрокаМатериалов Из НайденныеСтрокиМатериалов Цикл
		НаименованиеМатериалов = СоответствиеМатериалы[СтрокаМатериалов.Номенклатура];
		МассивПодстрок.Добавить(НаименованиеМатериалов);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивПодстрок, ", ");
	
КонецФункции

&НаСервере
Функция СоответствиеМатериалы()
	
	ТаблицаМатериалов = Объект.Материалы.Выгрузить(,"Номенклатура");
	ТаблицаМатериалов.Свернуть("Номенклатура");
	СоответствиеМатериалы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаМатериалов.ВыгрузитьКолонку("Номенклатура"), "Наименование");
	
	Возврат СоответствиеМатериалы;
	
КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект.Продукция,
		Элементы.Продукция.ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере()
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, "Продукция");
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Продукция" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("КоличествоМест");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("ПлановаяСтоимость");
		СписокСвойств.Добавить("СуммаПлановая");
		СписокСвойств.Добавить("Спецификация");
		СписокСвойств.Добавить("НоменклатурнаяГруппа");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			СписокСвойств.Добавить("Счет");
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ПродукцияВставитьСтроки.Доступность                = Доступность;
	Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформлениеПродукция()
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродукцияПрослеживаемыйКомплект");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Функция СписокМатериаловПоСпецификацииПродукции(Продукция)
	
	ПустойСписок = Новый Массив();
	СписокМатериаловПоСпецификации = Объект.Материалы.Выгрузить(ПустойСписок);
	
	ВедетсяУчетЗатратПоПродукции =
		Справочники.НастройкиУчетаЗатрат.ВедетсяУчетЗатратПоПродукции(Объект.Дата, Объект.СчетЗатрат, Объект.Организация);
		
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьМатериалыПоПродукцииУслугам(
		СписокМатериаловПоСпецификации,
		Продукция,
		Неопределено,
		ВедетсяУчетЗатратПоПродукции,
		ВедетсяУчетПрослеживаемыхТоваров,
		Объект.Дата);
	
	Возврат СписокМатериаловПоСпецификации;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	
	ПредставлениеТаблицы = НСтр("ru = 'Продукция'");
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Ложь);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора,
		Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ДатаРасчетов",          ДатаРасчетов);
	ПараметрыФормы.Вставить("Склад",                 Объект.Склад);
	ПараметрыФормы.Вставить("Организация",           Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",         Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",                ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена",              Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",        Истина);
	ПараметрыФормы.Вставить("Заголовок",             ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",            "Продукция");
	ПараметрыФормы.Вставить("Услуги",                Ложь);
	ПараметрыФормы.Вставить("ТипЦен",                ТипЦенПлановойСебестоимостиНоменклатуры);
	ПараметрыФормы.Вставить("ПоказыватьЦены",        ЗначениеЗаполнено(ТипЦенПлановойСебестоимостиНоменклатуры));
	ПараметрыФормы.Вставить("ПоказыватьОстатки",     Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаПродукции = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
		СоответствиеМатериалы = СоответствиеМатериалы();
		
	Иначе
		ТаблицаПродукции = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПродукции, "Номенклатура", Истина),
		ДанныеОбъекта);
	
	ЕстьКлючСтроки = ТаблицаПродукции.Колонки.Найти("КлючСтроки") <> Неопределено;
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаПродукции.Номенклатура);
		
		Услуги = Ложь;
		
		// Пропускаем строки с неправильным типом номенклатуры
		Если ЭтоВставкаИзБуфера 
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга <> Услуги Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПродукции, СписокСвойств);
		
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СведенияОНоменклатуре.НоменклатурнаяГруппа;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			СтрокаТабличнойЧасти.Спецификация = СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
		КонецЕсли;
		
		Если ИспользоватьПлановуюСебестоимость И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПлановаяСтоимость) Тогда
			СтрокаТабличнойЧасти.ПлановаяСтоимость = СведенияОНоменклатуре.ПлановаяСтоимость;
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
		
		// Оставляем уже заполненный счет и субконто
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			
			ДанныеСтрокиТаблицы = Новый Структура(
			"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
			|ПлановаяСтоимость, СуммаПлановая,
			|Спецификация, Счет, НоменклатурнаяГруппа");
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
			ПараметрыЗаполненияСчетовУчета = ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
				"Продукция.Номенклатура",
				Неопределено,
				СтрокаТабличнойЧасти,
				ДанныеОбъекта,
				ДанныеСтрокиТаблицы);
			
			ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ОтчетПроизводстваЗаСмену,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				ДанныеОбъекта,
				"Продукция",
				СтрокаТабличнойЧасти);
				
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КлючСтроки = Новый УникальныйИдентификатор;
		
		Если ЭтоВставкаИзБуфера И ВыбранноеЗначение.ИсточникИДокументОдногоВида
			И ЕстьКлючСтроки
			И ЗначениеЗаполнено(СтрокаПродукции.КлючСтроки) Тогда
			ОтборМатериалы = Новый Структура();
			ОтборМатериалы.Вставить("КлючСтроки", СтрокаПродукции.КлючСтроки);
			СтрокиМатериалы = Объект.Материалы.НайтиСтроки(ОтборМатериалы);
			Для Каждого СтрокаМатериалы Из СтрокиМатериалы Цикл
				НоваяСтрокаМатериалов = Объект.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалов, СтрокаМатериалы);
				НоваяСтрокаМатериалов.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
			КонецЦикла;
			
			СтрокаТабличнойЧасти.СписокМатериалов = СписокМатериаловПродукции(СтрокаТабличнойЧасти.КлючСтроки, СоответствиеМатериалы);
			
		Иначе
			ЗаполнитьМатериалыДляПродукцииНаСервере(СтрокаТабличнойЧасти.КлючСтроки, ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
