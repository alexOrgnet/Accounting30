#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресВременногоХранилища         = Параметры.АдресВременногоХранилища;
	Организация                      = Параметры.Организация;
	Склад                            = Параметры.Склад;
	Дата                             = Параметры.Дата;
	СчетЗатрат                       = Параметры.СчетЗатрат;
	ВедетсяУчетПрослеживаемыхТоваров = Параметры.ВедетсяУчетПрослеживаемыхТоваров;
	УстановитьВидимостьСчетовУчета();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	ПроверяемыеРеквизиты.Добавить("Материалы.Счет");
	
	Документ = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
	Документ.Материалы.Загрузить(Материалы.Выгрузить());
	ЗаполнитьЗначенияСвойств(Документ, ЭтотОбъект);
	Сообщение = "";
	СчетаУчетаВДокументах.ПроверитьЗаполнение(Документ, Отказ, ПроверяемыеРеквизиты, , Сообщение);
	
	Для Каждого СтрокаМатериалы Из Материалы Цикл
		
		ИндексСтроки = Материалы.Индекс(СтрокаМатериалы);
		
		// Номенклатура должна быть указана
		Если НЕ ЗначениеЗаполнено(СтрокаМатериалы.Номенклатура) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Материалы[%1].Номенклатура",
				Нстр("ru='Не указана номенклатура'"),
				"",
				ИндексСтроки);
			
		КонецЕсли;
		
		// Количество должно быть указано
		Если НЕ ЗначениеЗаполнено(СтрокаМатериалы.Количество) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Материалы[%1].Количество",
				Нстр("ru='Не указано количество'"),
				"",
				ИндексСтроки);
			
		КонецЕсли;
		
		// СпособУчетаНДС должн быть указан
		Если НЕ ЗначениеЗаполнено(СтрокаМатериалы.СпособУчетаНДС) 
			 И УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Материалы[%1].СпособУчетаНДС",
				Нстр("ru='Не указан способ учета НДС'"),
				"",
				ИндексСтроки);
			
		КонецЕсли;
			
		// Для прослеживаемых товаров должна быть заполнена Страна происхождения
		Если Не ЗначениеЗаполнено(СтрокаМатериалы.СтранаПроисхождения) И СтрокаМатериалы.ПрослеживаемыйТовар Тогда
			  	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Материалы[%1].СтранаПроисхождения",
				Нстр("ru='Не указана страна происхождения'"),
				"",
				ИндексСтроки);
		КонецЕсли;

		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	КонецЕсли;
	
	РучнаяКорректировкаМатериалов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМатериалы(Команда)
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора(),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Материалы.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ПронумероватьСтрокиТаблицыМатериалы();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьПриКомандеОК(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилищеМатериалы();
	
	РезультатЗакрытия = "ОК";
	
	ЭтаФорма.Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "МатериалыРНПТ" Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление     = Ложь;
			ПараметрыФормыПодбора.ЭтоВыпускПродукции = Истина;
			ПараметрыФормыПодбора.АдресХранилищаСведенияВыпускаПродукции = ПоместитьРНПТВХранилище(
			ТекущиеДанные.ИдентификаторСтроки, ЭтотОбъект.УникальныйИдентификатор);;
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Материалы", ПараметрыФормыПодбора);
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "МатериалыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	
	ПронумероватьСтрокиТаблицыМатериалы();
	
	РучнаяКорректировкаМатериалов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Счет, КоличествоМест,
		|ЕдиницаИзмерения, Коэффициент, Количество,
		|ОтражениеВУСН, СпособУчетаНДС,
		|ДокументОприходования, Себестоимость,
		|СтатьяЗатрат, СтранаПроисхождения, ПрослеживаемыйТовар");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ПараметрыЗаполненияСчетовУчета = ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Материалы.Номенклатура",
		Неопределено,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = "";
		ТекущиеДанные.РНПТ                = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМатериалы Из ВыделенныеСтроки Цикл
		ТекДанные = Материалы.НайтиПоИдентификатору(СтрокаМатериалы);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтранаПроисхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ПрослеживаемыйТовар Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ТекущиеДанные.РНПТ = ЗаполнитьПредставлениеРНПТ(ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	НастройкиУсловногоОформления = Новый Структура;
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	Элементы.МатериалыСпособУчетаНДС.Видимость       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	Элементы.МатериалыОтражениеВУСН.Видимость        = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	Элементы.МатериалыПрослеживаемость.Видимость     = ВедетсяУчетПрослеживаемыхТоваров;
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("МатериалыПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеМатериалы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// МатериалыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСебестоимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтандартныйТекстНеЗаполнено(УсловноеОформление, ИмяПоля, Путь)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяПоля);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, Путь, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",      СтандартныйТекстНеЗаполнено());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеМатериалы() Экспорт
	
	// МатериалыДокументОприходования
	УстановитьСтандартныйТекстНеЗаполнено(
		УсловноеОформление,
		"МатериалыДокументОприходования",
		"Материалы.ДокументОприходования");
		
	// МатериалыСебестоимость
	УстановитьСтандартныйТекстНеЗаполнено(
		УсловноеОформление,
		"МатериалыСебестоимость",
		"Материалы.Себестоимость");
	
	// МатериалыСебестоимость
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСебестоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// МатериалыСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// МатериалыРНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьТаблицыМатериаловИПродукции();
	
	ПронумероватьСтрокиТаблицыМатериалы();
	
	УстановитьВидимостьЭлементовФормы();
	
	ОтчетПроизводстваЗаСменуФормы.ЗаполнитьСписокВыбораМатериалыОтражениеВУСН(ЭтотОбъект);
	
	Заголовок = СтрШаблон(НСтр("ru = 'Материалы: %1'"), Продукция);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	Для Каждого Строка Из Материалы Цикл
		Строка.РНПТ = ЗаполнитьПредставлениеРНПТ(Строка.ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПоказыватьСебестоимость = (УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <>
		Перечисления.СпособыОценки.ПоСредней);
	
	ПлательщикНДФЛ          = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	Элементы.Материалы.АвтоОтметкаНезаполненного = ПлательщикНДФЛ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент          = СведенияОНоменклатуре.Коэффициент;
	
	СтрокаТабличнойЧасти.СтатьяЗатрат         = ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
		СведенияОНоменклатуре.СтатьяЗатрат, ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	СтрокаТабличнойЧасти.СпособУчетаНДС       = СведенияОНоменклатуре.СпособУчетаНДС;
	СтрокаТабличнойЧасти.ОтражениеВУСН        = Перечисления.ОтражениеВУСН.Принимаются;
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ОтчетПроизводстваЗаСмену,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Материалы",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Материалы, 
		Элементы.Материалы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере()
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Документы.ОтчетПроизводстваЗаСмену.ПустаяСсылка(), "Материалы");
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("ОтражениеВУСН");
	СписокСвойств.Добавить("ДокументОприходования");
	СписокСвойств.Добавить("Себестоимость");
	СписокСвойств.Добавить("СтатьяЗатрат");
	СписокСвойств.Добавить("СпособУчетаНДС");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		СписокСвойств.Добавить("Счет");
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.МатериалыВставитьСтроки.Доступность                = Доступность;
	Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере()
	
	Материалы.Очистить();
	
	ТаблицаМатериалы = Материалы.Выгрузить();
	ТаблицаПродукция = Новый ТаблицаЗначений();
	ТаблицаПродукция.Колонки.Добавить("НомерСтроки",           Новый ОписаниеТипов("Число"));
	ТаблицаПродукция.Колонки.Добавить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПродукция.Колонки.Добавить("Спецификация",          Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	ТаблицаПродукция.Колонки.Добавить("Количество",            Новый ОписаниеТипов("Число"));
	
	Строка = ТаблицаПродукция.Добавить();
	Строка.НомерСтроки  = 1;
	Строка.Номенклатура = Продукция;
	Строка.Количество   = КоличествоПродукции;
	Строка.Спецификация = СпецификацияПродукции;
	СведенияПрослеживаемости.Очистить();
	
	ВедетсяУчетЗатратПоПродукции =
		Справочники.НастройкиУчетаЗатрат.ВедетсяУчетЗатратПоПродукции(Дата, СчетЗатрат, Организация);
			
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьМатериалыПоПродукцииУслугам(
		ТаблицаМатериалы,
		ТаблицаПродукция,
		Неопределено,
		ВедетсяУчетЗатратПоПродукции,
		ВедетсяУчетПрослеживаемыхТоваров,
		Дата);
	
	Материалы.Загрузить(ТаблицаМатериалы);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	Для Каждого СтрокаМатериалы Из Материалы Цикл
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаМатериалы.Номенклатура, ДанныеОбъекта, Ложь, Ложь);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Счет, КоличествоМест,
		|ЕдиницаИзмерения, Коэффициент, Количество,
		|ОтражениеВУСН, СпособУчетаНДС,
		|ДокументОприходования, Себестоимость,
		|СтатьяЗатрат");
		
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаМатериалы);
		
		ПараметрыЗаполненияСчетовУчета = ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Материалы.Номенклатура",
		Неопределено,
		СтрокаМатериалы,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
		
		ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ОтчетПроизводстваЗаСмену,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		ДанныеОбъекта,
		"Материалы",
		СтрокаМатериалы);
		
		ЗаполнитьЗначенияСвойств(СтрокаМатериалы, ЗаполненныеСчетаУчета);
		
	КонецЦикла;
	
	ПронумероватьСтрокиТаблицыМатериалы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтандартныйТекстНеЗаполнено()
	
	Возврат НСтр("ru = '<Авто>'");
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Материалы'");
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ДатаРасчетов",          ДатаРасчетов);
	ПараметрыФормы.Вставить("Склад",                 Склад);
	ПараметрыФормы.Вставить("Организация",           Организация);
	ПараметрыФормы.Вставить("Подразделение",         ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",                ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена",              Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",        Истина);
	ПараметрыФормы.Вставить("Заголовок",             ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",            "Материалы");
	ПараметрыФормы.Вставить("Услуги",                Ложь);
	ПараметрыФормы.Вставить("ТипЦен",                ТипЦенПлановойСебестоимостиНоменклатуры);
	ПараметрыФормы.Вставить("ПоказыватьЦены",        ЗначениеЗаполнено(ТипЦенПлановойСебестоимостиНоменклатуры));
	ПараметрыФормы.Вставить("ПоказыватьОстатки",     Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств  = ВыбранноеЗначение.СписокСвойств;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина),
		ДанныеОбъекта, Ложь, Ложь);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		
		ЭтоУслуги = Ложь;
		
		// Пропускаем строки с неправильным типом номенклатуры
		Если ЭтоВставкаИзБуфера 
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга <> ЭтоУслуги Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтражениеВУСН) Тогда
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС	= СведенияОНоменклатуре.СпособУчетаНДС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = СведенияОНоменклатуре.СтатьяЗатрат;
		КонецЕсли;
		
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
			СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		
		// Оставляем уже заполненный счет и субконто
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			
			ДанныеСтрокиТаблицы = Новый Структура(
				"Номенклатура, Счет, КоличествоМест,
				|ЕдиницаИзмерения, Коэффициент, Количество,
				|ОтражениеВУСН, СпособУчетаНДС,
				|ДокументОприходования, Себестоимость,
				|СтатьяЗатрат");
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
			ПараметрыЗаполненияСчетовУчета = ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
				"Материалы.Номенклатура",
				Неопределено,
				СтрокаТабличнойЧасти,
				ДанныеОбъекта,
				ДанныеСтрокиТаблицы);
			
			ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ОтчетПроизводстваЗаСмену,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				ДанныеОбъекта,
				"Материалы",
				СтрокаТабличнойЧасти);
				
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыМатериаловИПродукции();
	
	ВыпускПродукции = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если ВыпускПродукции <> Неопределено Тогда
		Материалы.Загрузить(ВыпускПродукции.ТаблицаМатериалы);
		СведенияПрослеживаемости.Загрузить(ВыпускПродукции.ТаблицаСведенияПрослеживаемости);
			
		Продукция                     = ВыпускПродукции.Продукция;
		КоличествоПродукции           = ВыпускПродукции.КоличествоПродукции;
		СпецификацияПродукции         = ВыпускПродукции.СпецификацияПродукции;
		НоменклатурнаяГруппаПродукции = ВыпускПродукции.НоменклатурнаяГруппаПродукции;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеМатериалы()
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("Материалы", Материалы.Выгрузить());
	СтруктураВозврата.Вставить("РучнаяКорректировкаМатериалов", РучнаяКорректировкаМатериалов);
	СтруктураВозврата.Вставить("СведенияПрослеживаемости", СведенияПрослеживаемости.Выгрузить());
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресВременногоХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ПронумероватьСтрокиТаблицыМатериалы()
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаМатериалы Из Материалы Цикл
		СтрокаМатериалы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("МатериалыСчет");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИмяТаблицы)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		СтрокаТабличнойЧасти.РНПТ = ЗаполнитьПредставлениеРНПТ(СтрокаТабличнойЧасти.ИдентификаторСтроки);

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	СтрокиСРНПТ = СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
		СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
	КонецЦикла;
		
	ПодобранныеРНПТ = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыРНПТВХранилище);
	Для Каждого НовыйРНПТ Из ПодобранныеРНПТ Цикл
		НоваяСтрока = СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйРНПТ);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		СтрокиМатериалы = Материалы.НайтиСтроки(СтруктураОтбора);
		Если СтрокиМатериалы.Количество() > 0 Тогда
			СтрокиМатериалы[0].РНПТ = ЗаполнитьПредставлениеРНПТ(СтрокиМатериалы[0].ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПредставлениеРНПТ(ИдентификаторСтроки)
	
	РНПТ = "";
	СтрокиСРНПТ =СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	КоличествоРНПТ = СтрокиСРНПТ.Количество();
	Если КоличествоРНПТ = 0 Тогда
		РНПТ = "";
	ИначеЕсли КоличествоРНПТ = 1 Тогда
		РНПТ = СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ));
	Иначе
		РНПТ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и еще %2'"),
		СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ)),
		КоличествоРНПТ-1);
	КонецЕсли;
	
	Возврат РНПТ;
	
КонецФункции

&НаСервере
Функция ПоместитьРНПТВХранилище(ИдентификаторСтроки, ИдентификаторФормы)
	
	СтрокиСРНПТ = СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	ТаблицаРНПТ = СведенияПрослеживаемости.Выгрузить(СтрокиСРНПТ);
	
	АдресТаблицыРНПТВХранилище = ПоместитьВоВременноеХранилище(ТаблицаРНПТ, ИдентификаторФормы);
	
	Возврат АдресТаблицыРНПТВХранилище;
	
КонецФункции
#КонецОбласти