#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.РасчетыАрендаЛизинг.Количество() = 0 Тогда
		Объект.РасчетыАрендаЛизинг.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект.РасчетыАрендаЛизинг[0], ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
		ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПроцентыПоОбязательствамФормыКлиент.ОбработкаВыбора(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	// Вместо реквизитов формы проверяется заполнение строки табличной части РасчетыАрендаЛизинг
	НепроверяемыеРеквизиты.Добавить("Контрагент");
	НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	НепроверяемыеРеквизиты.Добавить("СпособОценкиАрендыБУ");
	НепроверяемыеРеквизиты.Добавить("СтавкаДисконтирования");
	НепроверяемыеРеквизиты.Добавить("СчетУчетаРасчетов");
	НепроверяемыеРеквизиты.Добавить("СчетУчетаНДС");
	НепроверяемыеРеквизиты.Добавить("СчетУчетаПроцентов");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(
		Объект.Дата, ТекущаяДатаДокумента);
	
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиАрендыБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоДоговорЛизингаПриИзменении(Элемент)
	
	Лизинг = ЭтоДоговорЛизинга = 1;
	ЭтоДоговорЛизингаПриИзмененииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КтоВедетНалоговыйУчетИмуществаПриИзменении(Элемент)
	
	НалоговыйУчетИмуществаВедетЛизингополучатель = КтоВедетНалоговыйУчетИмущества = 1;
	ЭтоДоговорЛизингаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьГрафикПроцентныхРасходовНажатие(Элемент, СтандартнаяОбработка)
	
	Перем ПараметрыФормы;
	
	ПроцентыПоОбязательствамФормыКлиент.ПолучитьПараметрыФормыГрафикПроцентныхРасходов(
		ЭтотОбъект, ПараметрыФормы);
	ПроцентыПоОбязательствамФормыКлиент.НадписьГрафикПроцентныхРасходовНажатие(
		ЭтотОбъект, СтандартнаяОбработка, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменениеСтрокиОС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ИзменениеСтрокиОС(Истина, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменениеСтрокиОС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)
	
	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					ТолькоПросмотр);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)
	
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", 
		Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	Если Объект.РасчетыАрендаЛизинг.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект.РасчетыАрендаЛизинг[0]);
		ПолучитьРеквизитыДоговора();
		ЭтоДоговорЛизинга = ?(Лизинг, 1, 0);
		КтоВедетНалоговыйУчетИмущества = ?(НалоговыйУчетИмуществаВедетЛизингополучатель, 1, 0);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	ЕстьДисконтирование = УчетнаяПолитика.ПоддерживаетсяДисконтированиеОбязательств();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Дата.ТолькоПросмотр = Объект.ОтражатьВБухгалтерскомУчете
		И Объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам
		И ЗначениеЗаполнено(Форма.ДатаВводаОстатков);
	Элементы.ФормаОткрытьФормуНастройкиРежима.Видимость = Не Форма.ОткрытиеИзОбработкиВводаНачальныхОстатков;
	
	ДатаДоговора = ?(ЗначениеЗаполнено(Форма.ДатаДоговораКонтрагента), Форма.ДатаДоговораКонтрагента, Объект.Дата);
	Элементы.КтоВедетНалоговыйУчетИмущества.Видимость = Форма.Лизинг 
		И Не БухгалтерскийУчетКлиентСервер.УчетИмуществаВедетЛизингодатель(ДатаДоговора);
	
	Элементы.ОССуммаАрендныхПлатежей.Заголовок = ?(Форма.РасчетыВВалюте Или Форма.РасчетыВУЕ,
		СтрШаблон(НСтр("ru='Остаток платежей, %1'"), Строка(Форма.ВалютаВзаиморасчетов)),
		НСтр("ru='Остаток платежей'"));
	
	Элементы.ГруппаОценкаАрендыБУ.Видимость = Форма.ЕстьДисконтирование;
	
	ПроцентыПоОбязательствамФормыКлиентСервер.УправлениеФормойВводОстатков(Форма);
	
	ПроцентыПоОбязательствамФормыКлиентСервер.СформироватьНадписьГрафикПроцентныхРасходов(Форма, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата = ДатаВводаОстатков;
	КонецЕсли;
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруТабличнойЧастиОС()
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СтруктураТабличнойЧастиОС = Новый Структура(
		"АмортизацияДо2002НУ, 
		|АмортизацияДо2009,
		|ВыработкаКоличествоБУ,
		|ГрафикАмортизацииБУ,
		|ДатаПоследнейМодернизацииРегл,
		|ДатаПринятияКУчетуРегл,
		|ДатаПриобретенияУСН,
		|ИнвентарныйНомерРегл,
		|КоэффициентАмортизацииБУ,
		|КоэффициентАмортизацииНУ,
		|КоэффициентУскоренияБУ,
		|МетодНачисленияАмортизацииНУ,
		|МОЛРегл,
		|НазваниеДокументаМодернизацииРегл,
		|НазваниеДокументаПринятияКУчетуРегл,
		|НакопленнаяАмортизацияБУ,
		|НакопленнаяАмортизацияНУ,
		|НакопленнаяАмортизацияПР,
		|НачислятьАмортизациюБУ,
		|НачислятьАмортизациюНУ,
		|НомерДокументаМодернизацииРегл,
		|НомерДокументаПринятияКУчетуРегл,
		|ОбъемПродукцииРаботБУ,
		|ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОсновноеСредство,
		|ПараметрВыработкиБУ,
		|ПервоначальнаяСтоимостьБУ,
		|ПервоначальнаяСтоимостьНУ,
		|ПервоначальнаяСтоимостьУСН,
		|Обесценение,
		|ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|ПорядокПогашенияСтоимостиБУ,
		|РеквизитыДокументаОплаты,
		|СостояниеМодернизацииРегл,
		|СостояниеПринятияКУчетуРегл,
		|СпециальныйКоэффициентНУ,
		|СпособНачисленияАмортизацииБУ,
		|СпособОтраженияРасходовПоАмортизации,
		|СпособПоступленияРегл,
		|СрокИспользованияДляВычисленияАмортизацииБУ,
		|СрокПолезногоИспользованияБУ,
		|СрокПолезногоИспользованияНУ,
		|СрокПолезногоИспользованияУСН,
		|СтоимостьДляВычисленияАмортизацииБУ,
		|СтоимостьДляВычисленияАмортизацииПР,
		|СтоимостьДо2002НУ,
		|СуммаНачисленнойАмортизацииУСН,
		|СуммаПоследнейМодернизацииБУ,
		|СуммаПоследнейМодернизацииНУ,
		|СчетАмортизацииБУ,
		|СчетУчетаБУ,
		|ТекущаяСтоимостьБУ,
		|ТекущаяСтоимостьНУ,
		|ТекущаяСтоимостьПР,
		|ФактическийСрокИспользованияДо2009,
		|Контрагент,
		|ДоговорКонтрагента,
		|СпособОтраженияРасходовПоАренднымПлатежам,
		|КорректировкаСтоимостиНУ,
		|Арендатор,
		|ДатаПередачиВАренду,
		|СобытиеПередачиВАренду,
		|НазваниеДокументаПередачиВАренду,
		|НомерДокументаПередачиВАренду,
		|ПрослеживаемыйТовар,
		|СуммаАрендныхПлатежей,
		|СуммаНДСАрендныхПлатежей,
		|Ключ");
	
	ЗаполнитьЗначенияСвойств(СтруктураТабличнойЧастиОС, СтрокаТаблицы);
	
	Возврат СтруктураТабличнойЧастиОС;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеСтрокиОС(ЭтоНовый = Ложь, Копирование = Ложь)
	
	ДанныеЗаполнения = ?(Не ЭтоНовый Или Копирование, 
		ПолучитьСтруктуруТабличнойЧастиОС(), 
		Новый Структура);
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	Если Копирование 
		Или ТекущиеДанные = Неопределено И Не ЭтоНовый Тогда
		ДанныеЗаполнения.Ключ = "";
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Дата", Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	ДанныеЗаполнения.Вставить("ВедетсяУчетПрослеживаемыхТоваров", Ложь);
	СпособПоступленияРегл = ?(ЭтоДоговорЛизинга, 
		ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга"),
		ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруАренды"));
	ДанныеЗаполнения.Вставить("СпособПоступленияРегл", СпособПоступленияРегл);
	ДанныеЗаполнения.Вставить("Контрагент", Контрагент);
	ДанныеЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
		ДанныеЗаполнения.Вставить("ВалютаАрендныхПлатежей", ВалютаВзаиморасчетов);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("НалоговыйУчетИмуществаВедетЛизингополучатель", НалоговыйУчетИмуществаВедетЛизингополучатель);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоНовый", ЭтоНовый);
	СтруктураПараметров.Вставить("Копирование", Копирование);
	СтруктураПараметров.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("ЭтоАрендаЛизинг", Истина);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыРедактированияЗавершение", 
		ЭтотОбъект, 
		СтруктураПараметров);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаРедактированияСтрокиОС", 
		СтруктураПараметров, 
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		ОповещениеФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыРедактированияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоНовый Тогда
		СтрокаТаблицы = Объект.ОС.Добавить();
	Иначе
		СтрокаТаблицы = Объект.ОС.НайтиПоИдентификатору(Элементы.ОС.ТекущаяСтрока);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатЗакрытия);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете 
			И Объект.ОтражатьВНалоговомУчете 
			И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата = РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Объект.Организация, 
		БухгалтерскийУчетПереопределяемый.ПолучитьМассивВидовДоговоров(Истина));
	
	ДоговорКонтрагентаОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ПараметрыСтарогоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
	
	ПолучитьРеквизитыДоговора();
	
	УстановитьКурсКратность();
	
	ПараметрыНовогоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
	ЗаполнитьРассчитатьСуммы(ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	
	Если РасчетыВУЕ Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ;
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ;
		СчетУчетаПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ;
	ИначеЕсли ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал;
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамВал;
		СчетУчетаПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеВал;
	Иначе
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.АрендныеОбязательства;
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам;
		СчетУчетаПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАренде;
	КонецЕсли;
	
	Для каждого СтрокаОС Из Объект.ОС Цикл
		
		СтрокаОС.Контрагент = Контрагент;
		СтрокаОС.ДоговорКонтрагента = ДоговорКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыКурсаВалюты(Форма)
	
	ПараметрыКурса = Новый Структура("Валюта,Курс,Кратность");
	
	ПараметрыКурса.Валюта = Форма.ВалютаВзаиморасчетов;
	ПараметрыКурса.Курс = ?(Форма.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета, 
		1, Форма.КурсВзаиморасчетов);
	ПараметрыКурса.Кратность = ?(Форма.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета, 
		1, Форма.КратностьВзаиморасчетов);
	
	Возврат ПараметрыКурса;
	
КонецФункции

&НаСервере
Процедура ПолучитьРеквизитыДоговора()
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах,Дата");
		РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ДатаДоговораКонтрагента = РеквизитыДоговора.Дата;
	Иначе
		РасчетыВУЕ = Ложь;
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ДатаДоговораКонтрагента = Дата(1,1,1);
	КонецЕсли;
	РасчетыВВалюте = ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И Не РасчетыВУЕ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсКратность()
	
	Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
		КурсВзаиморасчетов = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПараметрыСтарогоКурса, ПараметрыНовогоКурса)
	
	Для каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	КонецЦикла;
	
	ПроцентыПоОбязательствамФормы.ЗаполнитьРассчитатьСуммыВводОстатков(
		ЭтотОбъект, ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	
	ПроцентыПоОбязательствамФормыКлиентСервер.СформироватьНадписьГрафикПроцентныхРасходов(
		ЭтотОбъект, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ПараметрыТекущегоКурса, ПараметрыНовогоКурса)
	
	СтрокаТаблицы.СуммаАрендныхПлатежей = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТаблицы.СуммаАрендныхПлатежей, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
	СтрокаТаблицы.СуммаНДСАрендныхПлатежей = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТаблицы.СуммаНДСАрендныхПлатежей, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
КонецПроцедуры

&НаСервере
Процедура ЭтоДоговорЛизингаПриИзмененииНаСервере()
	
	СпособПоступленияРегл = ?(Лизинг, 
		Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга, 
		Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды);
	
	Для каждого СтрокаОС Из Объект.ОС Цикл
		
		СтрокаОС.СпособПоступленияРегл = СпособПоступленияРегл;
		Если Не (Лизинг И НалоговыйУчетИмуществаВедетЛизингополучатель) Тогда
			СтрокаОС.ПервоначальнаяСтоимостьНУ = 0;
			СтрокаОС.ТекущаяСтоимостьНУ = 0;
			СтрокаОС.ТекущаяСтоимостьПР = 0;
			СтрокаОС.НакопленнаяАмортизацияНУ = 0;
			СтрокаОС.НакопленнаяАмортизацияПР = 0;
			СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// СчетУчетаНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РасчетыВВалюте", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ПроцентыПоОбязательствамФормы.УстановитьУсловноеОформлениеВводОстатков(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

