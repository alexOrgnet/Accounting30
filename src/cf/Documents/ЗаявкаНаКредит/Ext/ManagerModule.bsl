#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Процедура заполняет рассчитываемые реквизиты переданного документа заявки.
//
// Параметры:
//	Объект - ДокументОбъект, ДанныеФормыКоллекция - Документ заявки.
//
Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт

	// По умолчанию считаем, что оформляется заявка 1С:Кредит.
	Если НЕ ЗначениеЗаполнено(Объект.СервисОбменаСБанками) Тогда
		Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	КонецЕсли;

	// Список банков и предоставляемой им отчетности для каждой заявки может быть свой.
	Объект.Банки.Очистить();
	Объект.Отчетность.Очистить();
	Объект.ПолучателиОтчетности.Очистить();
	Объект.Учредители.Очистить();
	
	Объект.ТребуетсяОбновлениеОтчетности                   = Истина;
	Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Ложь;

	// Сбрасываем все флажки, связанные с учредителями.
	Объект.ТребуютсяДанныеУчредителей = Ложь;
	Объект.СоставУчредителей          = Неопределено;
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса()); // Заявку заполняем всегда по состоянию "на сегодня".
	
	Объект.ПериодРегистрации = ПериодРегистрацииПоУмолчанию();

КонецПроцедуры

// Проверяет корректность и полноту заполнения полей заявки.
// Если указано имя страницы, то проверяются только поля, расположенные на указанной странице.
//
// Параметры:
//	ОбъектИлиФорма - ДокументОбъект, ФормаКлиентскогоПриложения - Документ заявки или его форма.
//	ИмяСтраницы - Строка - Имя страницы заявки для проверки. Может принимать одно из значений:
//		"" (пустая строка) - весь документ целиком;
//		"Начало" - первая страница с выбором организации;
//		"Банки" - страница с выбором банков;
//		"Отчетность" - страница отчетности;
//		"ЗаемщикИП" - страница реквизитов заемщика ИП;
//		"ЗаемщикЮЛ" - страница реквизитов заемщика юридического лица.
//
// Возвращаемое значение:
//	Булево - Истина, если поля заполнены корректно, иначе Ложь.
//
Функция ПроверитьЗаполнение(ОбъектИлиФорма, ИмяСтраницы = "") Экспорт

	Отказ = Ложь;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект               = ОбъектИлиФорма.Объект;
		РеквизитыОрганизации = ОбъектИлиФорма.Организация;
	Иначе
		Объект               = ОбъектИлиФорма;
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
			"Ссылка, ЮридическоеФизическоеЛицо, ИндивидуальныйПредприниматель,
			|ДатаРегистрации, ОГРН, ИНН,
			|КодОКОПФ, НаименованиеОКОПФ,
			|КодОКВЭД2, НаименованиеОКВЭД2,
			|НаименованиеСокращенное, НаименованиеПолное");
	КонецЕсли;

	// Организация
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Организация", , Отказ);
			
			// Остальные поля не проверяем, пока не заполнят организацию.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхРуководителяЮЛ(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеБанки(ОбъектИлиФорма, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеОтчетность(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеУчредители(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДополнительныеПоказатели(ОбъектИлиФорма, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДополнительныеФайлы(ОбъектИлиФорма, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДанныхЛизинга(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	Возврат НЕ Отказ;

КонецФункции

// Возвращает структуру с подробной информацией из заявки для выгрузки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//
// Возвращаемое значение:
//	Структура - содержит ключи:
//		* ДанныеЗаявки - Структура - Поля из документа Заявка на кредит.
//		* ДанныеЗаемщика - Структура - см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* ДанныеИП - Структура - см. УчетЗарплаты.ДанныеФизическихЛиц()
//		* ДанныеРуководителя - Структура - см. УчетЗарплаты.ДанныеФизическихЛиц()
//
Функция СведенияОЗаявке(ЗаявкаНаКредит) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("ДанныеЗаявки",       Новый Структура());
	Результат.Вставить("ДанныеЗаемщика",     Новый Структура());
	Результат.Вставить("ДанныеИП",           Новый Структура());
	Результат.Вставить("ДанныеРуководителя", Новый Структура());
	Результат.Вставить("Учредители",         ЗаявкиНаКредит.НовыеДанныеУчредителей());

	// Заявка
	ДанныеЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаКредит,
		"Ссылка, СервисОбменаСБанками, Дата, Организация, СуммаДокумента, СрокКредита, ЦельКредита,
		|ТипПредметаЛизинга, СуммаАванса, ОписаниеПредметаЛизинга, ОписаниеПоставщика,
		|ПериодРегистрации, ТребуютсяДанныеУчредителей, СоставУчредителей,
		|КонтактноеЛицо, ДолжностьКонтактногоЛица, ТелефонКонтактногоЛица, АдресЭПКонтактногоЛица");
	ПоказателиДеятельности = УниверсальныйОбменСБанкамиФормы.ПоказателиДеятельности(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата);
	ДанныеЗаявки.Вставить("ДатаФактическогоНачалаВеденияБизнеса",    ПоказателиДеятельности.ДатаФактическогоНачалаВеденияБизнеса);
	ДанныеЗаявки.Вставить("СреднемесячноеПоступлениеНаСчет",         ПоказателиДеятельности.СреднемесячноеПоступлениеНаСчет);
	ДанныеЗаявки.Вставить("МинимальноеЕжемесячноеПоступлениеНаСчет", ПоказателиДеятельности.МинимальноеЕжемесячноеПоступлениеНаСчет);
	ДанныеЗаявки.Вставить("ДатаНачалаУчетаВПрограмме",               ПоказателиДеятельности.ДатаНачалаУчетаВПрограмме);
	Результат.ДанныеЗаявки = ДанныеЗаявки;
	
	ДополнитьПредставленияДанныхКонтактногоЛицаДляВыгрузки(ДанныеЗаявки);
	
	// Специфические поля для лизинга добавляем всегда, чтобы состав структуры был полным,
	// но заполнены они будут только в случае заявок на лизинг.
	ДанныеЗаявки.Вставить("ТипПредметаЛизингаНаименование", "");
	Если ДанныеЗаявки.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
		// Наименование типа предмета лизинга
		ТипыПредметовЛизинга = ЗаявкиНаКредит.ТипыПредметовЛизинга(Истина);
		НайденныйЭлемент = ТипыПредметовЛизинга.НайтиПоЗначению(ДанныеЗаявки.ТипПредметаЛизинга);
		Если НайденныйЭлемент <> Неопределено Тогда
			ДанныеЗаявки.ТипПредметаЛизингаНаименование = НайденныйЭлемент.Представление;
		КонецЕсли;
	КонецЕсли;
	
	// Заемщик
	Результат.ДанныеЗаемщика = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата);
	ДанныеЗаемщика = Результат.ДанныеЗаемщика;
	
	// Идентификатор заемщика для образования имени файлов.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ИдентификаторЗаемщика = СокрЛП(ДанныеЗаемщика.ИНН);
	Иначе
		ИдентификаторЗаемщика = СокрЛП(ДанныеЗаемщика.ИНН) + СокрЛП(ДанныеЗаемщика.КПП);
	КонецЕсли;
	ДанныеЗаемщика.Вставить("ИдентификаторЗаемщика", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИдентификаторЗаемщика));
	
	// Дополнительные реквизиты заемщика, которые используются для заявки.
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаявки.Организация, 
		"КодОКВЭД2, НаименованиеОКВЭД2,
		|КодОКОПФ, НаименованиеОКОПФ,
		|ИностраннаяОрганизация");
	ДанныеЗаемщика.Вставить("КодОКВЭД2",          РеквизитыОрганизации.КодОКВЭД2);
	ДанныеЗаемщика.Вставить("НаименованиеОКВЭД2", РеквизитыОрганизации.НаименованиеОКВЭД2);
	ДанныеЗаемщика.Вставить("КодОКОПФ",           РеквизитыОрганизации.КодОКОПФ);
	ДанныеЗаемщика.Вставить("НаименованиеОКОПФ",  РеквизитыОрганизации.НаименованиеОКОПФ);
	ДанныеЗаемщика.Вставить("Нерезидент",         РеквизитыОрганизации.ИностраннаяОрганизация);
	
	// Город (населенный пункт) из адреса организации.
	ДанныеЗаемщика.Вставить("Город",
		УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес));

	// Полное наименование организации до реорганизации - только для юр.лица.
	ДанныеЗаемщика.Вставить("ПолноеНаименованиеДоРеорганизации",      "");
	ДанныеЗаемщика.Вставить("СокращенноеНаименованиеДоРеорганизации", "");
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ДанныеЗаявки.Организация);
		Запрос.УстановитьПараметр("Дата",        ДанныеЗаявки.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ОрганизацииИсторияНаименований.Период КАК Период,
		|	ОрганизацииИсторияНаименований.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ОрганизацииИсторияНаименований.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Организации.ИсторияНаименований КАК ОрганизацииИсторияНаименований
		|ГДЕ
		|	ОрганизацииИсторияНаименований.Ссылка = &Организация
		|	И ОрганизацииИсторияНаименований.Период <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";

		ИсторияНаименований = Запрос.Выполнить().Выгрузить();
		Если ИсторияНаименований.Количество() = 2 Тогда
			ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации      = ИсторияНаименований[1].НаименованиеПолное;
			ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации = ИсторияНаименований[1].НаименованиеСокращенное;
		КонецЕсли;
		
	КонецЕсли;

	// Дополнительные сведения об индивидуальном предпринимателе.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ЗначениеЗаполнено(ДанныеЗаемщика.ИндивидуальныйПредприниматель) Тогда
		
		ДанныеФизЛица = ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ДанныеЗаемщика.ИндивидуальныйПредприниматель);
		ДанныеФизЛица.ИНН = ДанныеЗаемщика.ИНН; // ИНН физ.лица должен совпадать с ИНН ИП
		Результат.ДанныеИП = ДанныеФизЛица;
		
	КонецЕсли;

	// Дополнительные сведения о руководителе.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И ЗначениеЗаполнено(ДанныеЗаемщика.Руководитель) Тогда

		ДанныеФизЛица = ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ДанныеЗаемщика.Руководитель);
		Результат.ДанныеРуководителя = ДанныеФизЛица;
		
		ВидыКонтактнойИнформации = Новый Соответствие;
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,  "АдресПоПропискеФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,            "EMailФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,   "ТелефонРабочийФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "ТелефонМобильныйФизическиеЛица");
		
		ДобавитьКонтактнуюИнформацияФизЛица(ДанныеФизЛица, ДанныеЗаемщика.Руководитель, ВидыКонтактнойИнформации, ДанныеЗаявки.Дата);
		
	ИначеЕсли ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ЗначениеЗаполнено(ДанныеЗаемщика.ИндивидуальныйПредприниматель) Тогда
		
		ДанныеФизЛица = ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ДанныеЗаемщика.ИндивидуальныйПредприниматель);
		Результат.ДанныеРуководителя = ДанныеФизЛица;
		
		ВидыКонтактнойИнформации = Новый Соответствие;
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "ТелефонМобильныйФизическиеЛица");
		
		ДобавитьКонтактнуюИнформацияФизЛица(ДанныеФизЛица, ДанныеЗаемщика.ИндивидуальныйПредприниматель, ВидыКонтактнойИнформации, ДанныеЗаявки.Дата);
			
	КонецЕсли;
	
	// Учредители юридического лица.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И ДанныеЗаявки.ТребуютсяДанныеУчредителей Тогда
	    Результат.Учредители = ДанныеУчредителей(ЗаявкаНаКредит);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает структуру с заполненными полями для формирования текста согласия.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит, Структура - заполненная заявка или уже готовое описание из СведенияОЗаявке().
//
// Возвращаемое значение:
//	Структура - см. ЗаявкиНаКредит.ПараметрыСогласия().
// 
Функция ПараметрыСогласия(ЗаявкаНаКредит) Экспорт

	СведенияОЗаявке = ?(ТипЗнч(ЗаявкаНаКредит) = Тип("ДокументСсылка.ЗаявкаНаКредит"), СведенияОЗаявке(ЗаявкаНаКредит), ЗаявкаНаКредит);
	
	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	ДанныеРуководителя = СведенияОЗаявке.ДанныеРуководителя;
	ДанныеИП           = СведенияОЗаявке.ДанныеИП;
	ЭтоЮрЛицо          = ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;

	Результат = ЗаявкиНаКредит.ПараметрыСогласия(ЭтоЮрЛицо);
	
	// Заполняем поля
	Результат.СервисОбменаСБанками = ДанныеЗаявки.СервисОбменаСБанками;
	Результат.Организация          = ДанныеЗаявки.Организация;
	Результат.ДатаСогласия         = ДанныеЗаявки.Дата;
	Результат.ЭтоЮридическоеЛицо   = ЭтоЮрЛицо;
	
	// Общие поля согласия.
	Результат.ИНН              = ДанныеЗаемщика.ИНН;
	Результат.ЮридическийАдрес = ДанныеЗаемщика.ЮридическийАдрес;
	Результат.Город            = ДанныеЗаемщика.Город;
	
	Если ЭтоЮрЛицо Тогда
		// Заемщик - юр.лицо.
		Результат.ПолноеНаименование      = ДанныеЗаемщика.ПолноеНаименование;
		Результат.СокращенноеНаименование = ДанныеЗаемщика.СокращенноеНаименование;
		Результат.ПолноеНаименованиеДоРеорганизации      = ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации;
		Результат.СокращенноеНаименованиеДоРеорганизации = ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации;
		Результат.ОГРН                                   = ДанныеЗаемщика.ОГРН;
		
		// Данные руководителя.
		Результат.ПредставлениеФЛ                 = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество, Ложь);
		Результат.ПредставлениеФЛРодительныйПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(
			Результат.ПредставлениеФЛ,
			2, // Родительный падеж
			ДанныеЗаемщика.Руководитель,
			?(ДанныеРуководителя.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
		Результат.ДолжностьРуководителяПредставление = ДанныеЗаемщика.ДолжностьРуководителяПредставление;
		
		Результат.ПолФЛ                    = ДанныеРуководителя.Пол;
		Результат.МестоРожденияФЛ          = ДанныеРуководителя.МестоРождения;
		Результат.ДатаРожденияФЛ           = ДанныеРуководителя.ДатаРождения;
		Результат.СтраховойНомерПФРФЛ      = ДанныеРуководителя.СтраховойНомерПФР;
		Результат.ПредставлениеДокументаФЛ = ДанныеРуководителя.ПредставлениеДокумента;
		Результат.ИННФЛ                    = ДанныеРуководителя.ИНН;
		Результат.СемейноеПоложениеФЛ      = ДанныеРуководителя.СостояниеВБракеПредставление;
		
		// Адреса руководителя как физического лица.
		Результат.АдресПоПропискеФизическиеЛицаФЛ  = ДанныеРуководителя.АдресПоПропискеФизическиеЛица;
		Результат.EMailФизическиеЛицаФЛ            = ДанныеРуководителя.EMailФизическиеЛица;
		Результат.ТелефонРабочийФизическиеЛицаФЛ   = ДанныеРуководителя.ТелефонРабочийФизическиеЛица;
		Результат.ТелефонМобильныйФизическиеЛицаФЛ = ДанныеРуководителя.ТелефонМобильныйФизическиеЛица;
		
	Иначе
	
		// Данные индивидуального предпринимателя.
	
		Результат.ПредставлениеФЛ     = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеИП.Фамилия, ДанныеИП.Имя, ДанныеИП.Отчество, Ложь);
		Результат.ПолФЛ                    = ДанныеИП.Пол;
		Результат.ДатаРожденияФЛ           = ДанныеИП.ДатаРождения;
		Результат.СтраховойНомерПФРФЛ      = ДанныеИП.СтраховойНомерПФР;
		Результат.ПредставлениеДокументаФЛ = ДанныеИП.ПредставлениеДокумента;
		Результат.МестоРожденияФЛ          = ДанныеИП.МестоРождения;
		Результат.СтранаФЛ                 = ДанныеИП.СтранаПредставление;
		Результат.СемейноеПоложениеФЛ      = ДанныеИП.СостояниеВБракеПредставление;
	
		// Контактная информация заемщика из справочника Организации.
		Результат.Email                            = ДанныеЗаемщика.Email;
		Результат.Телефоны                         = ДанныеЗаемщика.Телефоны;
		Результат.ТелефонМобильныйФизическиеЛицаФЛ = ДанныеРуководителя.ТелефонМобильныйФизическиеЛица;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает период регистрации по умолчанию.
//
// Возвращаемое значение:
//	Дата - первое число месяца.
//
Функция ПериодРегистрацииПоУмолчанию() Экспорт
	
	Возврат НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1);
	
КонецФункции

// Возвращает структуру с заполненными полями для формирования текста согласия.
//
// Параметры:
//	СведенияОЗаявке - Структура - результат функции СведенияОЗаявке()
//  Учредитель   - СправочникСсылка.ФизическиеЛица - кто дает согласие
//  Банки        - Массив из СправочникСсылка.БанкиУниверсальногоОбмена - кому будут передавать сведения
//
// Возвращаемое значение:
//   Структура    - см. ЗаявкиНаКредит.ПараметрыСогласияУчредителей()
// 
Функция ПараметрыСогласияУчредителя(СведенияОЗаявке, Учредитель, Банки) Экспорт

	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	
	Результат = ЗаявкиНаКредит.ПараметрыСогласияУчредителей();
	
	Результат.СервисОбменаСБанками = ДанныеЗаявки.СервисОбменаСБанками;
	Результат.Организация          = ДанныеЗаявки.Организация;
	Результат.ДатаСогласия         = ДанныеЗаявки.Дата;
	Результат.Город                = ДанныеЗаемщика.Город;
	
	Результат.ПолноеНаименование = ДанныеЗаемщика.ПолноеНаименование;
	Результат.ОГРН               = ДанныеЗаемщика.ОГРН;
	Результат.ЮридическийАдрес   = ДанныеЗаемщика.ЮридическийАдрес;
	
	ИнформацияОБанках = УниверсальныйОбменСБанкамиФормы.ПодготовитьИнформациюОБанкахДляСогласий(Банки);
	Результат.БолееОдногоБанка = (ИнформацияОБанках.Количество() > 1);
	Результат.БанкиРеквизиты = УниверсальныйОбменСБанкамиФормы.ПредставлениеСпискаБанков(ИнформацияОБанках);
	Если Результат.БолееОдногоБанка Тогда
		Результат.БанкиРеквизиты = "<ul>" + Результат.БанкиРеквизиты + "</ul>";
	КонецЕсли;

	Для Каждого ИнформацияОбУчредителе Из СведенияОЗаявке.Учредители Цикл
		
		Если ИнформацияОбУчредителе.Учредитель <> Учредитель Тогда
			Продолжить;
		КонецЕсли;

		Результат.Учредитель             = ИнформацияОбУчредителе.Учредитель;
		Результат.ПредставлениеФЛ = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ИнформацияОбУчредителе.Фамилия, ИнформацияОбУчредителе.Имя, ИнформацияОбУчредителе.Отчество, Ложь);
		Результат.Страна                 = ИнформацияОбУчредителе.Страна;
		Результат.ДатаРожденияФЛ         = Формат(ИнформацияОбУчредителе.ДатаРождения, "ДЛФ=DD");
		Результат.МестоРождения          = ИнформацияОбУчредителе.МестоРождения;
		Результат.АдресПоПрописке        = ИнформацияОбУчредителе.Адрес;
		Результат.ПредставлениеДокумента = ИнформацияОбУчредителе.ПредставлениеДокумента;
		Результат.ИНН                    = ИнформацияОбУчредителе.ИНН;
		Результат.ТелефонРабочий         = ИнформацияОбУчредителе.ТелефонРабочий;
		Результат.ТелефонМобильный       = ИнформацияОбУчредителе.ТелефонМобильный;
		Результат.EMail                  = ИнформацияОбУчредителе.EMail;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбращениеКСервису

// Выполняет обновление закэшированных данных о банках и их кредитных предложениях из веб-сервиса.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис обмена.
//
// Возвращаемое значение:
//	Структура - результат обновления данных сервиса. см. УниверсальныйОбменСБанкамиКлиентСервер.РезультатОбновленияДанныхСервиса()
//
Функция ОбновитьДанныеСервиса(СервисОбменаСБанками) Экспорт

	РезультатОбновленияДанных = УниверсальныйОбменСБанками.АктуализироватьДанныеСервиса(СервисОбменаСБанками);
		
	Если РезультатОбновленияДанных.ИмяСобытия <> "ДанныеАктуальны" Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкаНаКредит.ОбновитьДанныеСервиса'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатОбновленияДанных.ОписаниеСобытия);
		
	КонецЕсли;
	
	Возврат РезультатОбновленияДанных;

КонецФункции

// Выполняет подписание и отправку пакета заявок в несколько банков на сервере.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис обмена.
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит, 
//							ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаЛизинг.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - сертификат, используемый для подписания файлов.
//		* КредитныеПродукты - ТаблицаЗначений - Таблица кредитных продуктов, по которым нужно отправить заявку. Колонки таблицы:
//				* Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//				* ИдентификаторКредитногоПродукта - Строка - Идентификатор кредитного продукта.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//		* ДокументооборотыПолучателей - Соответствие - Ключ - ссылка на банк получатель, Значение - ссылка на документооборот.
//				Если для получателя нет соответствия, то будет создан новый документооборот.
//		* ПараметрыОтбораСертификата - Структура - см. ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата()
//		* МаркерыБезопасности - Соответствие - см. УниверсальныйОбменСБанками.МаркерыБезопасностиСервисаКриптографии().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодписатьИОтправитьЭлектроннаяПодписьВМоделиСервиса(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаСообщений");
	Результат.Вставить("Транзакции");

	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Параметры.СервисОбменаСБанками);

	// Установим для работы криптосервиса в фоновом задании параметры, полученные из клиентского сеанса.
	УниверсальныйОбменСБанками.УстановитьМаркерыБезопасностиСервисаКриптографии(Параметры.МаркерыБезопасности);

	Если Параметры.ТипТранзакции = ТипыТранзакций.Заявка Тогда

		РезультатОперации = ПодготовитьЗаявкуДляОтправки(
			Параметры.ПредметОбмена, Параметры.КредитныеПродукты, Параметры.ПредставленияДополнительныхФайлов, Истина);
		Результат.ТаблицаСообщений = РезультатОперации.ТаблицаСообщений;

	ИначеЕсли Параметры.ТипТранзакции = ТипыТранзакций.Акцепт Тогда
		
		РезультатОперации = РегистрыСведений.СостояниеЗаявокНаКредит.ПодготовитьАкцептДляОтправки(
			Параметры.ПредметОбмена, Параметры.КредитныеПродукты[0].Банк, Истина);
		
	КонецЕсли;
	ИдентификаторВременногоХранилищаТранзакций = РезультатОперации.ИдентификаторВременногоХранилищаТранзакций;
	Если Не РезультатОперации.Выполнено Тогда
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
		СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
		СостояниеПрогресса.КоличествоДействий = 2 + 2 * Параметры.КредитныеПродукты.Количество(); // заявка + кредитные продукты: заявка, согласие
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.КоличествоДействий;
		ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			НСтр("ru = 'Подготовлены файлы'"),
			СостояниеПрогресса.ДополнительныеПараметры);

		// Подписание и шифрование файлов на сервере.
		СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подписание";
		РезультатОперации = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
			ИдентификаторВременногоХранилищаТранзакций,
			Параметры.ОтпечатокСертификата,
			СостояниеПрогресса.ДополнительныеПараметры,
			Параметры.ПараметрыОтбораСертификата);
			
		Если Не РезультатОперации.Выполнено Тогда
				
			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Результат.Выполнено Тогда
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ИдентификаторВременногоХранилищаТранзакций", ИдентификаторВременногоХранилищаТранзакций);
		ПараметрыПроцедуры.Вставить("СервисОбменаСБанками", Параметры.СервисОбменаСБанками);
		ПараметрыПроцедуры.Вставить("ПредметОбмена",        Параметры.ПредметОбмена);
		ПараметрыПроцедуры.Вставить("ТипТранзакции",        Параметры.ТипТранзакции);
		ПараметрыПроцедуры.Вставить("ОтпечатокСертификата", Параметры.ОтпечатокСертификата);
		ПараметрыПроцедуры.Вставить("Банки",                ОбщегоНазначения.ВыгрузитьКолонку(Параметры.КредитныеПродукты, "Банк", Истина));
		ПараметрыПроцедуры.Вставить("ДокументооборотыПолучателей", Параметры.ДокументооборотыПолучателей);
		
		РезультатОперации = ОтправитьФайлы(ПараметрыПроцедуры);
		Результат.Транзакции = РезультатОперации.Транзакции;
		Если Не РезультатОперации.Выполнено Тогда

			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет формирование пакета заявок в несколько банков на сервере для дальнейшего подписания на клиенте.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* СервисОбменаСБанками - ПеречислениеСсылка.СервисОбменаСБанками - Сервис обмена.
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит, 
//							ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаЛизинг.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - (не используется) сертификат, используемый для подписания.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодготовитьФайлыДляОтправки(Параметры, АдресХранилища) Экспорт

	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Параметры.СервисОбменаСБанками);

	Если Параметры.ТипТранзакции = ТипыТранзакций.Заявка Тогда

		Результат = ПодготовитьЗаявкуДляОтправки(
			Параметры.ПредметОбмена, Параметры.КредитныеПродукты, Параметры.ПредставленияДополнительныхФайлов, Ложь);

	ИначеЕсли Параметры.ТипТранзакции = ТипыТранзакций.Акцепт Тогда
		
		Результат = РегистрыСведений.СостояниеЗаявокНаКредит.ПодготовитьАкцептДляОтправки(
			Параметры.ПредметОбмена, Параметры.КредитныеПродукты[0].Банк, Ложь);
		
	Иначе
		
		Результат = Новый Структура("Выполнено, ОписаниеОшибки, ТаблицаСообщений", Ложь, "");
		
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет формирование архива с файлами заявки на кредит на сервере для дальнейшего сохранения на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//	АдресАрхива - Строка - Адрес дополнительного хранилища, куда поместить данные zip-архива.
//
Процедура ПодготовитьФайлыДляСохранения(Параметры, АдресХранилища, АдресАрхива) Экспорт

	КредитныеПродукты = ВыбранныеКредитныеПродукты(Параметры.ПредметОбмена);

	УстановитьПривилегированныйРежим(Истина);
	Результат = ПодготовитьЗаявкуДляОтправки(Параметры.ПредметОбмена, КредитныеПродукты, Параметры.ПредставленияДополнительныхФайлов, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	Если Не Результат.Выполнено Тогда
		
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиФормы.СоздатьАрхивПоДаннымТранзакций(
		Результат.ИдентификаторВременногоХранилищаТранзакций, АдресАрхива, Строка(Параметры.ПредметОбмена));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет отправку в несколько банков пакета заявок, ранее подписанных на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками.
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит,
//							ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаЛизинг.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - сертификат, используемый для подписания файлов.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//		* ИдентификаторВременногоХранилищаТранзакций - Строка - местонахождение подписанных файлов.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ОтправитьПодписанныеФайлы(Параметры, АдресХранилища) Экспорт
	
	Результат = ОтправитьФайлы(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборБанков

// Возвращает структуру для параметра СведенияОЗаемщике функции СведенияОБанках().
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция НовыеСведенияОЗаемщике() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("СервисОбменаСБанками",      Перечисления.СервисыОбменаСБанками.ПустаяСсылка());
	Результат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Результат.Вставить("СоставУчредителей",         Перечисления.СоставУчредителейЮридическогоЛица.ПустаяСсылка());
	Результат.Вставить("Нерезидент",                Ложь);
	Результат.Вставить("ДатаРождения",              '0001-01-01');
	Результат.Вставить("ДатаРегистрации",           '0001-01-01');
	Результат.Вставить("КодОКВЭД2",                 "");
	Результат.Вставить("КодОКОПФ",                  "");
	Результат.Вставить("ЮрАдресОрганизации",        ""); //  Значения полей в формате XML/JSON подсистемы КонтактнаяИнформация БСП.
	Результат.Вставить("ДатаФактическогоНачалаВеденияБизнеса", '0001-01-01');
	Результат.Вставить("СреднемесячноеПоступлениеНаСчет", 0);  // в рублях
	Результат.Вставить("МинимальноеЕжемесячноеПоступлениеНаСчет", 0);  // в рублях
	Результат.Вставить("ДатаНачалаУчетаВПрограмме", '0001-01-01');
	Результат.Вставить("ПодключенДокументооборотСКонтролирующимОрганом", Ложь); // Заполняется только если требуется не фактически отправленные отчеты, а обобщенное их описание.
	Результат.Вставить("СуммаВыручки", 0);  // в рублях
	
	// Параметры, которые не требуется заполнять, они будут рассчитаны автоматически.
	Результат.Вставить("ВозрастИП",                      0); // полных лет
	Результат.Вставить("СрокОтДатыРегистрации",          0); // в месяцах
	Результат.Вставить("СрокФактическогоВеденияБизнеса", 0); // в месяцах
	Результат.Вставить("СрокВеденияУчетаВПрограмме",     0); // в месяцах
	Результат.Вставить("КодРегиона",                     "");
	
	// Вспомогательная структура для кэширования временных данных при обработке разных банков.
	Результат.Вставить("ДополнительныеСвойства",         Новый Структура());
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу с данными о банках, которые требуются для подбора подходящих кредитных предложений.
//
// Параметры:
//	СведенияОЗаемщике - Структура - см. НовыеСведенияОЗаемщике(), структура модифицируется в процессе работы процедуры.
//	ДатаЗаявки - Дата - Дата, по состоянию на которую возвращаются данные.
//  ВозвращатьНеактивные - Булево - Если Истина, то возвращаются все банки, которые когда-либо были зарегистрированы в сервисе,
//									вне зависимости от текущей активности.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. переменную Результат.
//
Функция СведенияОБанках(СведенияОЗаемщике, ДатаЗаявки, ВозвращатьНеактивные) Экспорт

	МетаданныеЗаявки = Метаданные.Документы.ЗаявкаНаКредит;

	ТипЦелое     = ОбщегоНазначения.ОписаниеТипаЧисло(4);
	ТипСумма     = МетаданныеЗаявки.Реквизиты.СуммаДокумента.Тип;
	ТипПроцент   = Метаданные.РегистрыСведений.СостояниеЗаявокНаКредит.Ресурсы.Ставка.Тип;
	ТипСтрока    = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево    = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Банк",         МетаданныеЗаявки.ТабличныеЧасти.Банки.Реквизиты.Банк.Тип);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	Результат.Колонки.Добавить("АдресЛоготипа",ТипСтрока); // Адрес хранилища с картинкой, загружаем ее не сразу, а по требованию, чтобы не занимать лишнюю память.
	Результат.Колонки.Добавить("СтопФакторыПройдены",        ТипБулево); // Истина, если заемщик удовлетворяет первичным стоп-факторам банка.
	Результат.Колонки.Добавить("ПорядокСортировки",          ТипЦелое);  // Порядок сортировки продукта в общем списке.
	Результат.Колонки.Добавить("ПорядокСортировкиБанка",     ТипЦелое);  // Порядок сортировки банка в общем списке.
	Результат.Колонки.Добавить("ТребуютсяДанныеУчредителей", ТипБулево); // Признак необходимости данных об учредителях юр.лица.
	
	// Кредитный продукт
	Результат.Колонки.Добавить("НаименованиеКредитногоПродукта", ТипСтрока);
	Результат.Колонки.Добавить("ИдентификаторКредитногоПродукта", ТипСтрока);
	Результат.Колонки.Добавить("ПодробноеОписание", ТипСтрока);
	
	Результат.Колонки.Добавить("ФорматИменованияФайлов", ТипСтрока);
	Результат.Колонки.Добавить("ПрефиксФайла", ТипСтрока);
	Результат.Колонки.Добавить("ДобавитьМеткуДоверенногоВремени", ТипБулево);
	
	// Срок кредита в месяцах.
	Результат.Колонки.Добавить("МинСрокКредита",  ТипЦелое);
	Результат.Колонки.Добавить("МаксСрокКредита", ТипЦелое);

	// Сумма кредита в рублях.
	Результат.Колонки.Добавить("МинСуммаКредита",  ТипСумма);
	Результат.Колонки.Добавить("МаксСуммаКредита", ТипСумма);

	// Ставки (% годовых).
	Результат.Колонки.Добавить("МинСтавка",  ТипПроцент);
	Результат.Колонки.Добавить("МаксСтавка", ТипПроцент);
	
	// Размер авансового платежа для лизинга (% от стоимости)
	Результат.Колонки.Добавить("МинПроцентАванса",     ТипПроцент);
	Результат.Колонки.Добавить("МаксПроцентАванса",    ТипПроцент);
	
	// Идентификаторы допустимых предметов лизинга для банка.
	Результат.Колонки.Добавить("БелыйСписокТиповПредметовЛизинга", ТипБулево);
	Результат.Колонки.Добавить("ТипыПредметовЛизинга", Новый ОписаниеТипов("Массив"));

	// Отчетность заемщика.
	Результат.Колонки.Добавить("ОтчетностьЗаемщика", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Максимальный коэффициент для суммы заявки в зависимости от годовой выручки
	Результат.Колонки.Добавить("МаксСуммаЗаявкиСУчетомВыручки", ТипСумма);
	
	ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаемщике, ДатаЗаявки);
	
	// Получим условия банков-партнеров сервиса.
	УсловияКредитования = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СведенияОЗаемщике.СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.УсловияКредитовЗаймов,
		,
		ВозвращатьНеактивные);

	ПорядокСортировкиБанков = Новый Соответствие;
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	Для Каждого СтрокаТаблицы Из УсловияКредитования Цикл
	    ПрочитатьУсловияКредитованияБанка(
	    	СведенияОЗаемщике,
	    	НачалоДня(ДатаЗаявки),
	    	СтрокаТаблицы.Банк,
	    	СтрокаТаблицы.Значение,
	    	Результат, 
			ПорядокСортировкиБанков,
			ГСЧ);
	КонецЦикла;
	
	// Индексируем таблицу после заполнения для быстрого поиска банков и кредитных продуктов.
	Результат.Индексы.Добавить("Банк, ИдентификаторКредитногоПродукта");
	
	// Получим список отчетности заемщика для банков-партнеров сервиса
	ОтчетностьЗаемщика = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СведенияОЗаемщике.СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ОтчетностьЗаемщика,
		,
		ВозвращатьНеактивные);
	
	Для Каждого СтрокаТаблицы Из ОтчетностьЗаемщика Цикл
		ПрочитатьОтчетностьЗаемщика(
			СведенияОЗаемщике,
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			СтрокаТаблицы.Значение,
			Результат);
	КонецЦикла;
	
	ЗаполнитьНаименованияБанков(Результат);
	
	Возврат Результат;

КонецФункции

// Возвращает массив банков, в которые необходимо отправить заявку.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//
// Возвращаемое значение:
//	Массив - Содержит ссылки на справочник БанкиУниверсальногоОбмена.
//
Функция ВыбранныеБанки(ЗаявкаНаКредит) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаКредитБанки.Банк
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Банки КАК ЗаявкаНаКредитБанки
	|ГДЕ
	|	ЗаявкаНаКредитБанки.Ссылка = &ЗаявкаНаКредит";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Банк");

КонецФункции

Функция ВыбранныеКредитныеПродукты(ЗаявкаНаКредит) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаКредитБанки.Банк КАК Банк,
	|	ЗаявкаНаКредитБанки.ИдентификаторКредитногоПродукта КАК ИдентификаторКредитногоПродукта
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Банки КАК ЗаявкаНаКредитБанки
	|ГДЕ
	|	ЗаявкаНаКредитБанки.Ссылка = &ЗаявкаНаКредит";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Заполняем наименование банков в переданной таблице сведений о банках.
//
// Параметры:
//	СведенияОБанках - ТаблицаЗначений - см. СведенияОБанках().
//
Процедура ЗаполнитьНаименованияБанков(СведенияОБанках) Экспорт

	// Получим названия банков.
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		СведенияОБанках.ВыгрузитьКолонку("Банк"),
		"Наименование");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанков = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", СтрокаТаблицы.Банк));
		Если ДанныеБанков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ДанныеБанка Из ДанныеБанков Цикл
			ДанныеБанка.Наименование = СтрокаТаблицы.Наименование;
		КонецЦикла;
	КонецЦикла;

	// Упорядочиваем согласно порядку сортировки.
	СведенияОБанках.Сортировать("ПорядокСортировкиБанка, ПорядокСортировки");

КонецПроцедуры

// Загружает двоичные данные логотипов банков из базы и заполняет их адреса временных хранилищ.
//
// Параметры:
//	Банки - Массив - Массив ссылок банков, для которых загрузить логотипы.
//	СведенияОБанках - ТаблицаЗначений - см. результат функции СведенияОБанках().
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, во временное хранилище которой будет помещены данные логотипа.
//
Процедура ЗагрузитьЛоготипыБанков(Банки, СведенияОБанках, ИдентификаторФормы) Экспорт

	Если Банки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		Банки, "Логотип");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанков = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", СтрокаТаблицы.Банк));
		Если ДанныеБанков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		АдресЛоготипа = ПоместитьВоВременноеХранилище(СтрокаТаблицы.Логотип, ИдентификаторФормы);
		Для каждого ДанныеБанка Из ДанныеБанков Цикл
			ДанныеБанка.АдресЛоготипа = АдресЛоготипа;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтчетностьЗаемщика

// Возвращает пустую структуру с ключами, которая передается в качестве параметра в функцию ТребуемаяОтчетностьЗаемщика().
//
// Возвращаемое значение:
//	Структура
//
Функция НовыеСведенияОЗаемщикеДляОтчетности() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("СервисОбменаСБанками",      Перечисления.СервисыОбменаСБанками.ПустаяСсылка());
	Результат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Результат.Вставить("ДатаРегистрации",           '0001-01-01');
	Результат.Вставить("ПериодРегистрации",         '0001-01-01');
	Результат.Вставить("ДатаНачалаУчетаВПрограмме", '0001-01-01');
	
	Возврат Результат;

КонецФункции

// Возвращает пустую структуру с ключами, которая передается в качестве параметра в функцию ТребуемаяОтчетностьЗаемщика().
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//	Организация - СправочникСсылка.Организации - Организация-заемщик.
//	ПериодРегистрации - Дата - Первое число последнего закрытого месяца.
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция ПодготовитьСведенияОЗаемщикеДляОтчетности(СервисОбменаСБанками, Организация, ПериодРегистрации) Экспорт
	
	Результат = НовыеСведенияОЗаемщикеДляОтчетности();
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ДатаРегистрации");

	Результат.СервисОбменаСБанками      = СервисОбменаСБанками;
	Результат.Организация               = Организация;
	Результат.ЮридическоеФизическоеЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо;
	Результат.ДатаРегистрации           = РеквизитыОрганизации.ДатаРегистрации;
	Результат.ПериодРегистрации         = ПериодРегистрации;
	Результат.ДатаНачалаУчетаВПрограмме = УниверсальныйОбменСБанкамиФормы.ДатаНачалаУчетаВПрограмме(Организация);

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений с описанием отчетности заемщика, которую требуются подготовить для указанных банков.
//
// Параметры:
//	СведенияОЗаемщике - Структура - см. НовыеСведенияОЗаемщикеДляОтчетности().
//	ДатаЗаявки - Дата - Дата подачи заявки.
//	КредитныеПродукты - ТаблицаЗначений - Выгрузка из ТЧ Банки документа ЗаявкаНаКредит.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Содержит колонки:
//		* ВидОтчета - Строка - Имя отчета, как оно определено в пакете XDTO ЗаявкиНаКредит.
//		* ИсточникОтчета - Строка - Имя регламентированного отчета БРО (вида "РегламентированныйОтчетБухОтчетность")
//		* НаименованиеОтчета - Строка - Пользовательское представление отчета, включает название и период.
//		* НомерГруппыОтчета - Число - Номер группы отчета для сортировки в зависимости от вида отчета.
//		* ПорядокСортировкиПоМесяцам - Число - Порядок отчета в списке в зависимости от количества месяцев в периоде.
//		* ДатаНачала - Дата - Дата начала периода, за который требуется отчет.
//		* ДатаОкончания - Дата - Дата начала периода, за который требуется отчет.
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет, по которому строится отчет (для карточки и анализа счетов).
//		* Банки - Массив - Содержит ссылки на справочник БанкиУниверсальногоОбмена, для которых требуется отчет.
//		* ИдентификаторыКредитныхПродуктов - Массив - Содержит строковые идентификаторы кредитных продуктов,
//			для которых требуется отчет. Т.к. теоретически возможно что для разных кредитных продуктов потребуются 
//			разные префиксы и/или форматы имен файлов
//
//	Один и тот же вид отчет (по одному и тому же счету) может встречаться в таблице несколько раз за разные периоды.
//
Функция ТребуемаяОтчетностьЗаемщика(СведенияОЗаемщике, ДатаЗаявки, КредитныеПродукты) Экспорт

	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата); // В документе РегламентированныйОтчет даты без времени.

	СоставОтчетности = Новый ТаблицаЗначений;
	СоставОтчетности.Колонки.Добавить("ВидОтчета",     ТипСтрока);
	СоставОтчетности.Колонки.Добавить("ДатаНачала",    ТипДата);
	СоставОтчетности.Колонки.Добавить("ДатаОкончания", ТипДата);
	СоставОтчетности.Колонки.Добавить("КодСчета",      ТипСтрока);
	СоставОтчетности.Колонки.Добавить("Банк",          Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	СоставОтчетности.Колонки.Добавить("ИдентификаторыКредитныхПродуктов", Новый ОписаниеТипов("Массив"));
	СоставОтчетности.Колонки.Добавить("ФорматСохранения", ТипСтрока);
    СоставОтчетности.Колонки.Добавить("ВидВыгрузкиРеглОтчета", ТипСтрока);

	// При открытии ранее отправленной заявки необходимо отображать сведения об отчетности для банка как они были на момент сохранения.
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СведенияОЗаемщике.СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ОтчетностьЗаемщика,
		ОбщегоНазначения.ВыгрузитьКолонку(КредитныеПродукты, "Банк", Истина),
		Истина); 
		
	Для Каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
		
		ИдентификаторыКредитныхПродуктов = Новый Массив;
		Для каждого КредитныйПродукт Из КредитныеПродукты Цикл
			Если КредитныйПродукт.Банк = СтрокаТаблицы.Банк Тогда
				ИдентификаторыКредитныхПродуктов.Добавить(КредитныйПродукт.ИдентификаторКредитногоПродукта);
			КонецЕсли;
		КонецЦикла;
		
		ПрочитатьТребованияБанкаКОтчетностиЗаемщика(
			СведенияОЗаемщике,
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			ИдентификаторыКредитныхПродуктов,
			СтрокаТаблицы.Значение,
			СоставОтчетности);
	
	КонецЦикла;

	// Оставим уникальные комбинации настроек отчетов.
	ИменаКлючевыхКолонок = "ВидОтчета, КодСчета, ДатаНачала, ДатаОкончания";
	СоставОтчетности.Индексы.Добавить(ИменаКлючевыхКолонок);
	Отбор = Новый Структура(ИменаКлючевыхКолонок);
	
	УникальныеОтчеты = СоставОтчетности.Скопировать(, ИменаКлючевыхКолонок);
	УникальныеОтчеты.Свернуть(ИменаКлючевыхКолонок);
	
	// Укажем для каждого отчета список банков, которым требуется такой отчет.
	УникальныеОтчеты.Колонки.Добавить("НаименованиеОтчета",         ТипСтрока);
	УникальныеОтчеты.Колонки.Добавить("ИсточникОтчета",             ТипСтрока);
	УникальныеОтчеты.Колонки.Добавить("НомерГруппыОтчета",          ОбщегоНазначения.ОписаниеТипаЧисло(3));
	УникальныеОтчеты.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	УникальныеОтчеты.Колонки.Добавить("Банки",                      Новый ОписаниеТипов("Массив"));     
	УникальныеОтчеты.Колонки.Добавить("ВариантыВыгрузкиРеглОтчета", Новый ОписаниеТипов("Массив"));
	УникальныеОтчеты.Колонки.Добавить("Счет",                       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	УникальныеОтчеты.Колонки.Добавить("ИдентификаторыКредитныхПродуктов", Новый ОписаниеТипов("Массив"));

	КэшСчетов = Новый Соответствие;
	
	Для Каждого СтрокаОтчета Из УникальныеОтчеты Цикл

		СтрокаОтчета.НаименованиеОтчета = ПредставлениеОтчета(
			СтрокаОтчета.ВидОтчета, СтрокаОтчета.КодСчета, СтрокаОтчета.ДатаНачала, СтрокаОтчета.ДатаОкончания);
	
		СтрокаОтчета.ИсточникОтчета = ИсточникОтчета(СтрокаОтчета.ВидОтчета);
			
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаОтчета);
		НайденныеСтроки = СоставОтчетности.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			// Включаем банк в список, если его еще нет.
			Если СтрокаОтчета.Банки.Найти(НайденнаяСтрока.Банк) = Неопределено Тогда
				СтрокаОтчета.Банки.Добавить(НайденнаяСтрока.Банк);
				Для каждого ИдентификаторКредитногоПродукта Из НайденнаяСтрока.ИдентификаторыКредитныхПродуктов Цикл
					СтрокаОтчета.ИдентификаторыКредитныхПродуктов.Добавить(ИдентификаторКредитногоПродукта);
				КонецЦикла; 
				СтруктураВариантаВыгрузки = Новый Структура("Банк, ФорматСохранения, ВидВыгрузкиРеглОтчета"); 
				ЗаполнитьЗначенияСвойств(СтруктураВариантаВыгрузки, НайденнаяСтрока);
				СтрокаОтчета.ВариантыВыгрузкиРеглОтчета.Добавить(СтруктураВариантаВыгрузки);
			КонецЕсли;
		КонецЦикла;
		
		// Сортируем таким образом, чтобы сначала была бух.отчетность,
		// далее все налоговые декларации, и только в самом конце - дополнительные отчеты.
		Если СтрокаОтчета.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
			СтрокаОтчета.НомерГруппыОтчета = 1;
		ИначеЕсли СтрокаОтчета.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			СтрокаОтчета.НомерГруппыОтчета = 100;
		Иначе
			СтрокаОтчета.НомерГруппыОтчета = 2;
		КонецЕсли;
		
		// Вычислим количество месяцев в периоде отчета,
		// чтобы при сортировке показывать сначала отчеты с меньшим периодом, потом - с большим.
		КоличествоМесяцев  = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
			СтрокаОтчета.ДатаНачала, КонецДня(СтрокаОтчета.ДатаОкончания) + 1); // Увеличиваем на 1 секунду, чтобы месяц считался закончившимся.
			
		Если КоличествоМесяцев > 1 И СтрокаОтчета.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Если период составляет более 1 месяца, то определяем порядок сортировки строки таким образом, 
			// чтобы сначала шли периоды с датами, не кратными кварталу, полугодию, году, а потом уже кратные.
			Если СтрокаОтчета.ДатаНачала = НачалоКвартала(СтрокаОтчета.ДатаОкончания) Тогда
				// Квартал
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 3;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 6 Тогда
				// Полугодие
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 6;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 9 Тогда
				// 9 месяцев
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 9;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 12 Тогда
				// Год
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 12;
			КонецЕсли;
		КонецЕсли;

		// Определим по строковому коду счета ссылку из плана счетов.
		Если ЗначениеЗаполнено(СтрокаОтчета.КодСчета) Тогда
			// Сначала ищем в кэше, если там еще нет, то ищем в плане счетов.
			Счет = КэшСчетов[СтрокаОтчета.КодСчета];
			Если Счет = Неопределено Тогда
				Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаОтчета.КодСчета);
				КэшСчетов.Вставить(СтрокаОтчета.КодСчета, Счет);
			КонецЕсли;
			
			СтрокаОтчета.Счет = Счет;
		КонецЕсли;
		
	КонецЦикла;
	
	УникальныеОтчеты.Сортировать("НомерГруппыОтчета, ВидОтчета, КодСчета, ПорядокСортировкиПоМесяцам, ДатаНачала, ДатаОкончания");
	
	Возврат УникальныеОтчеты;

КонецФункции
  
// Обновляет состав строк в табличной части Отчетность по новым данным заявки на кредит.
// При этом сохраняются данные в тех строках отчетов, которые были включены в табличную часть ранее,
// если они по-прежнему актуальны.
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаКредит, ДанныеФормыКоллекция - Заявка, состав отчетности в которой требуется обновить.
//
Процедура ОбновитьОтчетность(Объект) Экспорт

	СведенияОЗаемщике = ПодготовитьСведенияОЗаемщикеДляОтчетности(
		Объект.СервисОбменаСБанками,
		Объект.Организация,
		Объект.ПериодРегистрации);

	ТребуемаяОтчетностьЗаемщика = ТребуемаяОтчетностьЗаемщика(СведенияОЗаемщике, Объект.Дата, Объект.Банки.Выгрузить());
	
	// Сохраняем уже имеющиеся отчеты.
	ПодготовленнаяОтчетность = Объект.Отчетность.Выгрузить();
	// Добавим признак того, что отчет был включен ранее.
	// Если он не потребуется снова, то удалим его в конце процедуры.
	ПодготовленнаяОтчетность.Колонки.Добавить("ОтчетТребуется",             Новый ОписаниеТипов("Булево"));
	ПодготовленнаяОтчетность.Колонки.Добавить("НомерГруппыОтчета",          ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ПодготовленнаяОтчетность.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ПодготовленнаяОтчетность.Индексы.Добавить("ИсточникОтчета, ДатаНачала, ДатаОкончания");

	// Определяем очередной ключ строки для новых отчетов.
	ТекущийКлючСтроки = 0;
	Для Каждого ПодготовленныйОтчет Из ПодготовленнаяОтчетность Цикл
		ТекущийКлючСтроки = Макс(ТекущийКлючСтроки, ПодготовленныйОтчет.КлючСтроки);
	КонецЦикла;

	// Налоговые декларации необходимо предоставлять в отметкой ФНС,
	// поэтому для них требуется подобрать сданные отчеты по данным базы.
	// Для этого накапливаем их в отдельной таблице.
	НовыеОтчеты = ПодготовленнаяОтчетность.СкопироватьКолонки();
	НовыеОтчеты.Колонки.Добавить("Банки", Новый ОписаниеТипов("Массив")); // Банки получатели отчета.

	ОтборИсточникПериод = Новый Структура("ИсточникОтчета, ДатаНачала, ДатаОкончания");
	ОтборИсточник = Новый Структура("ИсточникОтчета");
	ОтборКлючБанк = Новый Структура("КлючСтроки, Банк");
	
	Для Каждого ТребуемыйОтчет Из ТребуемаяОтчетностьЗаемщика Цикл
	
		Если ТребуемыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Расшифровка бух.отчетности всегда в единственном экземпляре,
			// разные периоды отчетов она самостоятельно учитывает внутри себя.
			ПараметрыОтбора = ОтборИсточник;
		Иначе
			// Все остальные отчеты ищем с учетом периода.
			ПараметрыОтбора = ОтборИсточникПериод;
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТребуемыйОтчет);
		НайденныеСтрокиОтчетности = ПодготовленнаяОтчетность.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтрокиОтчетности.Количество() > 0 Тогда
			// Отметим для всех найденных отчетов, что они являются востребованными
			// и добавим в список получателей отчета новые банки.
			Для Каждого НайденнаяСтрокаОтчетности Из НайденныеСтрокиОтчетности Цикл
				НайденнаяСтрокаОтчетности.ОтчетТребуется             = Истина;
				НайденнаяСтрокаОтчетности.НомерГруппыОтчета          = ТребуемыйОтчет.НомерГруппыОтчета;
				НайденнаяСтрокаОтчетности.ПорядокСортировкиПоМесяцам = ТребуемыйОтчет.ПорядокСортировкиПоМесяцам;
				
				Для Каждого Банк Из ТребуемыйОтчет.Банки Цикл
					ОтборКлючБанк.КлючСтроки = НайденнаяСтрокаОтчетности.КлючСтроки;
					ОтборКлючБанк.Банк       = Банк;
					
					НайденныеПолучателиОтчета = Объект.ПолучателиОтчетности.НайтиСтроки(ОтборКлючБанк);
					Если НайденныеПолучателиОтчета.Количество() = 0 Тогда
						// Добавляем банк в список получателей.
						ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
						ПолучательОтчета.Банк       = Банк;
						ПолучательОтчета.КлючСтроки = НайденнаяСтрокаОтчетности.КлючСтроки;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;

		ИначеЕсли ТребуемыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Расшифровку бухотчетности добавляем только один раз.
			ТекущийКлючСтроки = ТекущийКлючСтроки + 1;
			
			НовыйОтчет = ПодготовленнаяОтчетность.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ТребуемыйОтчет);
			НовыйОтчет.НаименованиеОтчета = НСтр("ru = 'Дополнительные отчеты'");
			НовыйОтчет.КлючСтроки         = ТекущийКлючСтроки;
			НовыйОтчет.ОтчетТребуется     = Истина;
			
			// Добавляем получателей отчета.
			Для Каждого Банк Из ТребуемыйОтчет.Банки Цикл
				ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
				ПолучательОтчета.Банк       = Банк;
				ПолучательОтчета.КлючСтроки = ТекущийКлючСтроки;
			КонецЦикла;

		Иначе
			// Все прочие отчеты добавляем в таблицу новых для последующего подбора регламентированных отчетов.
			НовыйОтчет = НовыеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ТребуемыйОтчет);
			
		КонецЕсли;
	
	КонецЦикла;

	// Подберем ссылки на сданные ранее рег.отчеты.
	ПодобратьБухОтчетность(СведенияОЗаемщике, НовыеОтчеты);
	ПодобратьНалоговыеДекларации(СведенияОЗаемщике, НовыеОтчеты);

	// Добавляем новые отчеты в состав отчетности для заявки.
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл

		// Если не нашли в базе отправленные через 1С-Отчетность налоговые декларации, 
		// то не включаем их в состав заявки.
		// Бухгалтерскую отчетность включаем в любом случае.
		// Расшифровка бухгалтерской отчетности для каждой заявки самостоятельная.
		Если ЗначениеЗаполнено(НовыйОтчет.РегламентированныйОтчет)
			ИЛИ НовыйОтчет.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда

			ТекущийКлючСтроки = ТекущийКлючСтроки + 1;

			ПодготовленныйОтчет = ПодготовленнаяОтчетность.Добавить();
			ЗаполнитьЗначенияСвойств(ПодготовленныйОтчет, НовыйОтчет);
			ПодготовленныйОтчет.ОтчетТребуется = Истина;
			ПодготовленныйОтчет.КлючСтроки     = ТекущийКлючСтроки;
		
			// Добавляем получателей нового отчетов.
			Для Каждого Банк Из НовыйОтчет.Банки Цикл
				ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
				ПолучательОтчета.КлючСтроки = ТекущийКлючСтроки;
				ПолучательОтчета.Банк       = Банк;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Удалим строки отчетов, которые стали не нужны. Удаляем с конца к началу.
	Индекс = ПодготовленнаяОтчетность.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрокаОтчета = ПодготовленнаяОтчетность[Индекс];
		Если НЕ СтрокаОтчета.ОтчетТребуется Тогда
			ПодготовленнаяОтчетность.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ПодготовленнаяОтчетность.Сортировать("НомерГруппыОтчета, ИсточникОтчета, ПорядокСортировкиПоМесяцам, ДатаНачала, ДатаОкончания");
	
	Объект.Отчетность.Загрузить(ПодготовленнаяОтчетность);

	// Скорректируем таблицу получателей отчетов.
	ОбновитьПолучателейОтчетности(Объект);
	
	УстановитьПризнакПерезаполненияРасшифровкиБухОтчетности(Объект);

КонецПроцедуры

// Обновляет информацию о получателях отчетности по заявке. 
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаКредит, ДанныеФормыКоллекция - Заявка на кредит
//
Процедура ОбновитьПолучателейОтчетности(Объект) Экспорт

	// Удалим получателей отчетности, которых нет среди банков для отправки заявки.
	БанкиПолучателиОтчетности = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ПолучателиОтчетности, "Банк", Истина);
	БанкиПолучателиЗаявки     = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	БанкиПолучателиКУдалению  = ОбщегоНазначенияКлиентСервер.РазностьМассивов(БанкиПолучателиОтчетности, БанкиПолучателиЗаявки);
	
	Отбор = Новый Структура("Банк");
	
	Для Каждого БанкКУдалению Из БанкиПолучателиКУдалению Цикл
		Отбор.Банк = БанкКУдалению;
		НайденныеСтроки = Объект.ПолучателиОтчетности.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.ПолучателиОтчетности.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	// Удалим получателей удаленных отчетов.
	Индекс = Объект.ПолучателиОтчетности.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Получатель = Объект.ПолучателиОтчетности[Индекс];
		Если Объект.Отчетность.НайтиСтроки(Новый Структура("КлючСтроки", Получатель.КлючСтроки)).Количество() = 0 Тогда
			Объект.ПолучателиОтчетности.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Пересчитаем количество банков-получателей отчетов и удалим отчеты, для которых не осталось получателей.
	СводПоПолучателям = Объект.ПолучателиОтчетности.Выгрузить(, "КлючСтроки");
	СводПоПолучателям.Колонки.Добавить("КоличествоБанков", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	СводПоПолучателям.ЗаполнитьЗначения(1, "КоличествоБанков");
	СводПоПолучателям.Свернуть("КлючСтроки", "КоличествоБанков");
	СводПоПолучателям.Индексы.Добавить("КлючСтроки");
	
	Индекс = Объект.Отчетность.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
	    СтрокаОтчета = Объект.Отчетность[Индекс];
	    
	    СтрокаПолучателей = СводПоПолучателям.Найти(СтрокаОтчета.КлючСтроки, "КлючСтроки");
	    Если СтрокаПолучателей <> Неопределено Тогда
	    	СтрокаОтчета.КоличествоБанков = СтрокаПолучателей.КоличествоБанков;
	    Иначе
	    	Объект.Отчетность.Удалить(Индекс);
	    КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает строки наименования и состояния отчета в том виде,
// как они записываются в табличную часть Отчетность.
//
// Параметры:
//	СведенияОбОтчете - Структура, СтрокаТаблицыЗначений, ВыборкаИзРезультатаЗапроса - Коллекция, содержащая 
//    следующую информацию об отчете:
//		* ИсточникОтчета - Строка - Имя отчета;
//		* ДатаНачала - Дата - Начало периода отчета;
//		* ДатаОкончания - Дата - Конец периода отчета;
//		* НаименованиеОтчета - Строка - Представление отчета в БРО;
//		* Статус - Строка - Описание статуса отчета;
//		* ВариантОтчета - Строка - Представление варианта отчета;
//		* ФинансовыйПериод - Строка - Представление периода отчета;
//		* ПредставлениеКонтролирующегоОргана - Строка - Наименование органа-получателя отчетности.
//
// Возвращаемое значение:
//	Структура - Содержит ключ:
//		* НаименованиеОтчета - Строка - Наименование отчета для сохранения в строка табличной части Отчетность;
//		* СостояниеОтчета - Строка - Статус отчета для сохранения в строка табличной части Отчетность;
//
Функция ОписаниеОтчета(СведенияОбОтчете) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("НаименованиеОтчета", "");
	Результат.Вставить("СостояниеОтчета",    "");

	Если СведенияОбОтчете.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
		Результат.НаименованиеОтчета = НСтр("ru = 'Дополнительные отчеты'");

	ИначеЕсли СтрНачинаетсяС(СведенияОбОтчете.ИсточникОтчета, "РегламентированныйОтчетБухОтчетность")
		ИЛИ СведенияОбОтчете.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
	
		Результат.НаименованиеОтчета = СтрШаблон(НСтр("ru = 'Бухгалтерская отчетность за %1'"),
			СведенияОбОтчете.ФинансовыйПериод);

	Иначе
		// Все остальное считаем налоговой отчетность.

		Результат.НаименованиеОтчета = СтрШаблон(НСтр("ru = '%1 за %2'"),
			СведенияОбОтчете.НаименованиеОтчета, СведенияОбОтчете.ФинансовыйПериод);
	
	КонецЕсли;
	
	Результат.СостояниеОтчета = СтрШаблон(НСтр("ru = 'Готово (%1)'"),
		СведенияОбОтчете.ВариантОтчета);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Учредители

// Заполняет табличную часть Учредители по остаткам счета "Уставной капитал" на дату подачи заявки.
// На текущий момент поддерживается обработка только учредителей-физлиц, учредителию-юридические лица не учитываются.
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаКредит, ДанныеФормыСтруктура - Объект с табличной частью Учредители.
//	Руководитель - СправочникСсылка.ФизическиеЛица - Физическое лицо - руководитель.
//		Если не указан, то будет определен по данных ответственных лиц.
//
Процедура ЗаполнитьУчредителей(Объект, Знач Руководитель = Неопределено) Экспорт

	// Сбрасываем все флажки, связанные с учредителями.
	Объект.СоставУчредителей = Неопределено;
	
	ЕстьУчредителиФизическиеЛица  = Ложь;
	ЕстьУчредителиЮридическиеЛица = Ложь;
	
	ДанныеУчредителей = УчредителиПоДаннымИБ(Объект.Организация, Объект.Дата);
	
	Объект.Учредители.Очистить();
	Для каждого ЭлементВыборки Из ДанныеУчредителей Цикл
		
		Если ЭлементВыборки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			НоваяСтрока = Объект.Учредители.Добавить();
			НоваяСтрока.Учредитель = ЭлементВыборки.Учредитель;
			НоваяСтрока.ДоляУК = ЭлементВыборки.ДоляУК;
			
			ЕстьУчредителиФизическиеЛица = Истина;
			
		ИначеЕсли ЭлементВыборки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// На текущий момент данные об учредителях - юридических лицах не выгружаем в составе заявки на кредит.
			ЕстьУчредителиЮридическиеЛица = Истина;
			
		КонецЕсли;

	КонецЦикла;
	
	Если ЕстьУчредителиФизическиеЛица И ЕстьУчредителиЮридическиеЛица Тогда
		Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица;

	ИначеЕсли ЕстьУчредителиЮридическиеЛица Тогда
		Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеЛица;
		
	ИначеЕсли ЕстьУчредителиФизическиеЛица Тогда

		// Проверим, является ли руководитель единственным учредителем.
		Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
			ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
			Руководитель      = ОтветственныеЛица.Руководитель;
		КонецЕсли;
	
		Если Объект.Учредители.Количество() = 1 
			И Объект.Учредители[0].Учредитель = Руководитель Тогда
			
			Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель;
			// В такой ситуации не будем ссылку на руководителя записывать в табличную часть совсем,
			// чтобы не возникало неоднозначности, где его редактировать.
			Объект.Учредители.Очистить();

		Иначе
			Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ФизическиеЛица;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выбирает информацию об учредителях и записывает ее в строки таблицы
// для последующего отображения на форме или использования при формировании xml-файла.
//
// Параметры:
//	ДатаЗаявки - Дата - Дата заявки на кредит.
//	СтрокиКЗаполнению - Коллекция - содержит строки с полями как в таблице см. ЗаявкиНаКредит.НовыеДанныеУчредителей().
//
Процедура ПодготовитьДанныеУчредителей(ДатаЗаявки, СтрокиКЗаполнению) Экспорт

	Если СтрокиКЗаполнению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивФизЛиц = Новый Массив;
	Для каждого СтрокаКЗаполнению Из СтрокиКЗаполнению Цикл
		МассивФизЛиц.Добавить(СтрокаКЗаполнению.Учредитель);
	КонецЦикла;
	
	// На форме заявки не требуются создавать все колонки, которые необходимы для выгрузки в xml.
	// Поэтому чтобы при подготовке данных не возникало проблем с отсутствующими колонками,
	// заполняем сначала во временной таблице со всеми колонками, а потом переносим в коллекцию СтрокиКЗаполнению.
	НовыеДанныеУчредителей = ЗаявкиНаКредит.НовыеДанныеУчредителей();
	
	ПустыеДанные     = НовыеДанныеУчредителей.Добавить(); // Строка с пустыми значениями колонок, используемая для очистки старых значений.
	ДанныеУчредителя = НовыеДанныеУчредителей.Добавить(); // Строка, в которой заполняются временные данные.
	
	ДанныеФизЛиц = УчетЗарплаты.ДанныеФизическихЛиц(
		, МассивФизЛиц, ДатаЗаявки, Ложь, Истина);

	ВидыКонтактнойИнформации = Новый Соответствие;
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,  "Адрес");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,            "EMail");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,   "ТелефонРабочий");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "ТелефонМобильный");
	
	ВидыКИ = Новый Массив;
	Для Каждого КлючИЗначение Из ВидыКонтактнойИнформации Цикл
		ВидыКИ.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	КонтактнаяИнформацияФизЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивФизЛиц, , ВидыКИ, ДатаЗаявки);
	ОтборКонтактнойИнформации = Новый Структура("Объект");
		
	КэшКодовВидовДокументов = Новый Соответствие;
		
	Для каждого СтрокаКЗаполнению Из СтрокиКЗаполнению Цикл

		// Очистим старые данные в колонках.
		ЗаполнитьЗначенияСвойств(ДанныеУчредителя, ПустыеДанные);
		ДанныеУчредителя.Учредитель  = СтрокаКЗаполнению.Учредитель;
		ДанныеУчредителя.ДоляУК = СтрокаКЗаполнению.ДоляУК;
		
		ДанныеФизЛица = ДанныеФизЛиц.Найти(ДанныеУчредителя.Учредитель, "ФизическоеЛицо");
		Если ДанныеФизЛица <> Неопределено Тогда

			ЗаполнитьЗначенияСвойств(ДанныеУчредителя, ДанныеФизЛица);
			
			// Подставим код вида документа.
			КодВидаДокумента = КэшКодовВидовДокументов[ДанныеФизЛица.ВидДокумента];
			Если КодВидаДокумента = Неопределено И ЗначениеЗаполнено(ДанныеФизЛица.ВидДокумента) Тогда
				КодВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.ВидДокумента, "КодМВД");
				КэшКодовВидовДокументов.Вставить(ДанныеФизЛица.ВидДокумента, КодВидаДокумента);
			КонецЕсли;
			ДанныеУчредителя.КодВидаДокумента = КодВидаДокумента;
			
			// Представление места рождения для вывода
			ДанныеУчредителя.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеУчредителя.МестоРождения);
			
			ДанныеУчредителя.ПаспортУчредителя = СтрокаКЗаполнению.ПаспортУчредителя;
			
		КонецЕсли;
		
		ОтборКонтактнойИнформации.Объект = ДанныеУчредителя.Учредитель;
		СтрокиКИ = КонтактнаяИнформацияФизЛиц.НайтиСтроки(ОтборКонтактнойИнформации);
		Для каждого СтрокаКИ Из СтрокиКИ Цикл
		
			ВидКонтактнойИнформации = ВидыКонтактнойИнформации[СтрокаКИ.Вид];
			ДанныеУчредителя[ВидКонтактнойИнформации] = СтрокаКИ.Представление;
			Если ВидКонтактнойИнформации = "Адрес" Тогда
				ДанныеУчредителя.ЗначениеJSONАдрес = СтрокаКИ.Значение;
			КонецЕсли;
		
		КонецЦикла;
		
		Телефоны = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеУчредителя.ТелефонРабочий) Тогда
			Телефоны.Добавить(ДанныеУчредителя.ТелефонРабочий);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеУчредителя.ТелефонМобильный) Тогда
			Телефоны.Добавить(ДанныеУчредителя.ТелефонМобильный);
		КонецЕсли;
		
		ДанныеУчредителя.ПредставлениеЛичныхДанных = ЗаявкиНаКредитКлиентСервер.ПредставлениеЛичныхДанных(
			ДанныеУчредителя.ИНН,
			ДанныеУчредителя.ДатаРождения,
			ДанныеУчредителя.МестоРождения,
			ДанныеУчредителя.Адрес,
			СтрСоединить(Телефоны, ", "),
			ДанныеУчредителя.ПредставлениеДокумента
		);
		
		// Переносим в итоговую коллекцию.
		ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению, ДанныеУчредителя, , "НомерСтроки, Учредитель");
		
	КонецЦикла

КонецПроцедуры

// Возвращает таблицу с полными данными об учредителях, которая может использоваться для проверки заполнения
// и для выгрузки в xml-файл.
// 
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Ссылка на заявку.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ЗаявкиНаКредит.НовыеДанныеУчредителей().
//
Функция ДанныеУчредителей(ЗаявкаНаКредит) Экспорт

	Результат = ЗаявкиНаКредит.НовыеДанныеУчредителей();

	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаКредит, "Дата");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧУчредители.НомерСтроки КАК НомерСтроки,
	|	ТЧУчредители.Учредитель КАК Учредитель,
	|	ТЧУчредители.ДоляУК КАК ДоляУК
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Учредители КАК ТЧУчредители
	|ГДЕ
	|	ТЧУчредители.Ссылка = &ЗаявкаНаКредит
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧУчредители.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПодготовитьДанныеУчредителей(РеквизитыЗаявки.Дата, Результат);

	Возврат Результат;

КонецФункции

// Возвращает таблицу учередителей и их долей в уставном капитале по остаткам счета "Уставной капитал".
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация, по которой получаются данные.
//	Период - Дата - Дата, на которую получаются данные.
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками:
//		Учредитель - СправочникСсылка.Контрагенты или СправочникСсылка.ФизическиеЛица - Учредитель организации.
//		Наименование - Строка - ФИО учредителя - физического лица
//		Сумма - Число - Номинальная стоимость доли учредителя в уставном капитале организации.
//		ДоляУК - Число - Доля учредителя в уставном капитале организации (в процентах).
//
Функция УчредителиПоДаннымИБ(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецДня(Период) + 1);
	Запрос.УстановитьПараметр("Субсчета80", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УставныйКапитал));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстатки.Субконто1 КАК Учредитель,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица).Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто1) = ТИП(Справочник.ФизическиеЛица)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто1) = ТИП(Справочник.Контрагенты)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЮридическоеФизическоеЛицо,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&Субсчета80), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители), Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ДанныеУчредителей = Запрос.Выполнить().Выгрузить();
	
	ДанныеУчредителей.Колонки.Добавить("ДоляУК", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	ДолиУК = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, ДанныеУчредителей.ВыгрузитьКолонку("Сумма"));
	Если ДолиУК <> Неопределено Тогда
		ДанныеУчредителей.ЗагрузитьКолонку(ДолиУК, "ДоляУК");
	КонецЕсли;
	
	Возврат ДанныеУчредителей;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		// Открываем существующую заявку сразу в стандартной форме.
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	// По умолчанию считаем, что интересует 1С:Кредит.
	СервисОбменаСБанками = Неопределено;
	Если Параметры.Свойство("СервисОбменаСБанками") Тогда
		СервисОбменаСБанками = Параметры.СервисОбменаСБанками;
	
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("СервисОбменаСБанками") Тогда
		СервисОбменаСБанками = Параметры.ЗначенияЗаполнения.СервисОбменаСБанками;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СервисОбменаСБанками) Тогда
		СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	КонецЕсли;
	
	СведенияОСервисе = ЗаявкиНаКредитВызовСервера.СведенияОСервисе(СервисОбменаСБанками);
	
	// Если требуется подключение к интернет-поддержке, то для новой заявки
	// не открываем форму, пока не подключится.
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ВыбраннаяФорма = "ПодключениеИПП";
	Иначе
		// Чтобы второй раз не делать проверку доступности сервиса, передадим в параметре.
		Параметры.Вставить("СведенияОСервисе", СведенияОСервисе);
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Записывает данные о гражданстве физлица, указанные в менеджере записи регистра.
//
// Параметры:
//	МенеджерЗаписи - РегистрСведенийМенеджерЗаписи.ГражданствоФизическихЛиц - Менеджер записи регистра. 
//
Процедура ЗаписатьГражданствоФизЛица(МенеджерЗаписи) Экспорт

	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	// Записываем через набор записей, чтобы обойти дату запрета изменений.
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(МенеджерЗаписи.ФизическоеЛицо);
	НаборЗаписей.Отбор.Период.Установить(МенеджерЗаписи.Период);

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, МенеджерЗаписи);

	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

КонецПроцедуры

#Область ДополнительныеФайлы

// Если ссылка на доп.файл будет в табличной части Учредители, а не ДополнительныеФайлы, то используется особый ключ строки.
//
// Возвращаемое значение:
//   Число       - максимально возможный КлючСтрокиПоказателя.
//
Функция КлючСтрокиДопФайлаПаспортУчредителей() Экспорт
	
	Возврат 99999;
	
КонецФункции

Функция ИдентификаторПаспортУчредителя() Экспорт
	
	Возврат "ПаспортУчредителя";
	
КонецФункции

Функция ИдентификаторПаспортРуководителя() Экспорт
	
	Возврат "ПаспортРуководителя";
	
КонецФункции

Функция ИдентификаторКоммерческоеПредложение() Экспорт
	
	Возврат "КоммерческоеПредложение";
	
КонецФункции

Функция ПорядокВыводаФайлов() Экспорт
	
	ПорядокФайлов = Новый Массив;
	ПорядокФайлов.Добавить("СогласиеНаОбработкуДанных");
	ПорядокФайлов.Добавить("БухгалтерскаяОтчетность");
	ПорядокФайлов.Добавить("Декларация");
	ПорядокФайлов.Добавить("ОборотноСальдоваяВедомость");
	ПорядокФайлов.Добавить("АнализСчета");
	ПорядокФайлов.Добавить("КарточкаСчета");
	ПорядокФайлов.Добавить("Отчетность");
	ПорядокФайлов.Добавить("ВнешниеФайлы");
	ПорядокФайлов.Добавить("ПланСчетов");
	ПорядокФайлов.Добавить("АнкетаЗаемщика");
	
	Возврат ПорядокФайлов;
	
КонецФункции

Функция ГруппаФайловПоПризнаку(ПризнакГруппы = Неопределено) Экспорт
	
	ГруппаФайлов = "ВнешниеФайлы";
	Если ТипЗнч(ПризнакГруппы) = Тип("ПеречислениеСсылка.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит") Тогда
		
		Если ПризнакГруппы = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика Тогда
			ГруппаФайлов = "АнкетаЗаемщика";
		ИначеЕсли ПризнакГруппы = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.СогласиеНаОбработкуДанных Тогда
			ГруппаФайлов = "СогласиеНаОбработкуДанных";
		ИначеЕсли ПризнакГруппы = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ПланСчетов Тогда
			ГруппаФайлов = "ПланСчетов";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПризнакГруппы) = Тип("Строка") Тогда
		
		Если СтрНачинаетсяС(ПризнакГруппы, "Декларация") Тогда
			ГруппаФайлов = "Декларация";
		ИначеЕсли ПризнакГруппы = "БухгалтерскаяОтчетность"
		 Или ПризнакГруппы = "ОборотноСальдоваяВедомость"
		 Или ПризнакГруппы = "АнализСчета"
		 Или ПризнакГруппы = "КарточкаСчета" Тогда
			ГруппаФайлов = ПризнакГруппы;
		Иначе
			ГруппаФайлов = "Отчетность";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГруппаФайлов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьНовыеДанныеПриДобавленииСервиса1СЛизинг() Экспорт

	// Для всех ранее существующих заявок устанавливаем сервиса обмена данными 1С:Кредит.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаКредит.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаКредит КАК ЗаявкаНаКредит
	|ГДЕ
	|	ЗаявкаНаКредит.СервисОбменаСБанками = ЗНАЧЕНИЕ(Перечисление.СервисыОбменаСБанками.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
			
			// Запись обработанного объекта.
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ЗаявкаНаКредит, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

#Область УсловияКредитования

Процедура ПрочитатьУсловияКредитованияБанка(СведенияОЗаемщике, ДатаЗаявки, Банк, ХранилищеXML, СведенияОБанках, ПорядокСортировкиБанков, ГСЧ)

	УсловияКредитования = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СведенияОЗаемщике.СервисОбменаСБанками, ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсияСервиса = УниверсальныйОбменСБанками.ВерсияСервиса(СведенияОЗаемщике.СервисОбменаСБанками);

	Организация = СведенияОЗаемщике.Организация;
	
	ПараметрыПроверкиПоГруппамКонтрагентов = РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.НовыеПараметрыПроверки();
	ПараметрыПроверкиПоГруппамКонтрагентов.Организация = Организация; 
	ПараметрыПроверкиПоГруппамКонтрагентов.Банк        = Банк; 
	ПараметрыПроверкиПоГруппамКонтрагентов.ДатаЗаявки  = ДатаЗаявки; 

	// Найдем актуальные предложения банка.
	Отказ = Истина;
	ПерваяСтрокаТекущегоБанка = -1;
	Для Каждого КредитныйПродукт Из УсловияКредитования.КредитныйПродукт Цикл
		Если КредитныйПродукт.ДатаНачала > ДатаЗаявки
			ИЛИ КредитныйПродукт.ДатаОкончания < ДатаЗаявки Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(КредитныйПродукт.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КредитныйПродукт.МинВерсияСервиса) < 0 Тогда
			// Кредитный продукт может быть корректно отображен только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КредитныйПродукт.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КредитныйПродукт.МаксВерсияСервиса) > 0 Тогда
			// Кредитный продукт предназначен для отображения на предыдущих версиях программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;

		СтрокаТаблицы = СведенияОБанках.Добавить();
		Если ПерваяСтрокаТекущегоБанка < 0 Тогда
			ПерваяСтрокаТекущегоБанка = СведенияОБанках.Индекс(СтрокаТаблицы);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КредитныйПродукт);
		СтрокаТаблицы.Банк = Банк;
		ИдентификаторБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Идентификатор");
		
		ПорядокСортировкиБанка = ПорядокСортировкиБанков[Банк];
		
		Если ПорядокСортировкиБанка = Неопределено Тогда
			Если ЗначениеЗаполнено(КредитныйПродукт.СлучайныйПорядокСортировкиОт)
				И ЗначениеЗаполнено(КредитныйПродукт.СлучайныйПорядокСортировкиДо) Тогда
				
				ПорядокСортировкиБанка = ГСЧ.СлучайноеЧисло(КредитныйПродукт.СлучайныйПорядокСортировкиОт, КредитныйПродукт.СлучайныйПорядокСортировкиДо);
				ПорядокСортировкиБанков.Вставить(Банк, ПорядокСортировкиБанка);
				
			Иначе
				ПорядокСортировкиБанка = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.ПорядокСортировкиБанка = ПорядокСортировкиБанка;
		
		СтрокаТаблицы.ИдентификаторКредитногоПродукта = КредитныйПродукт.Идентификатор;
		СтрокаТаблицы.НаименованиеКредитногоПродукта = КредитныйПродукт.Наименование;
		
		СтрокаТаблицы.ФорматИменованияФайлов = КредитныйПродукт.ФорматИменованияФайлов;
		СтрокаТаблицы.ПрефиксФайла = КредитныйПродукт.ПрефиксФайла;

		СтрокаТаблицы.ДобавитьМеткуДоверенногоВремени = КредитныйПродукт.ДобавитьМеткуДоверенногоВремени;
		
		Если СведенияОЗаемщике.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
			// Специфические условия для лизинга.
			ЗаполнитьТипыПредметовЛизингаБанка(СтрокаТаблицы, ДатаЗаявки, КредитныйПродукт.Идентификатор, УсловияКредитования);
		КонецЕсли;
		
		// Проверяем первичные стоп-факторы.
		СтрокаТаблицы.СтопФакторыПройдены = Истина; // Первоначально считаем, что заемщик удовлетворяет стоп-факторам банка.

		Если НЕ ПроверитьСоставУчредителейЗаемщикаЮрЛица(СведенияОЗаемщике, КредитныйПродукт) Тогда
			// При не прохождении хотя бы одного из стоп-факторов, дальнейшую проверку не выполняем.
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СоставУчредителейЮЛ");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьЮрФизЛицоЗаемщика(СведенияОЗаемщике, КредитныйПродукт) Тогда
			// При не прохождении хотя бы одного из стоп-факторов, дальнейшую проверку не выполняем.
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ЮрФизЛицоЗаемщика");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьВозрастЗаемщика(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ВозрастИП");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьСрокОтДатыРегистрации(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокОтДатыРег");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьСрокФактическогоВеденияБизнеса(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокФактВеденияБизнеса");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьДатуНачалаВеденияУчетаВПрограмме(СведенияОЗаемщике, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинДатаНачалаВеденияУчетаВПрограмме");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьСрокВеденияУчетаВПрограмме(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокУчетаВПрограмме");
			Продолжить;
		КонецЕсли;

		Если НЕ ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрМесПоступНаСчет");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьМинимальноеЕжемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинЕжемесПоступНаСчет");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьМинСуммаВыручки(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинСуммаВыручки");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КредитныйПродукт.МаксКоэфСуммыЗаявкиОтВыручки) Тогда
			ОкруглениеРазрядовМаксСуммыОтВыручки = 4; // Округлим максимальную сумму заявки до десятков тысяч рублей.
			СтрокаТаблицы.МаксСуммаЗаявкиСУчетомВыручки = Окр(СведенияОЗаемщике.СуммаВыручки * КредитныйПродукт.МаксКоэфСуммыЗаявкиОтВыручки, 
				-ОкруглениеРазрядовМаксСуммыОтВыручки);
		КонецЕсли;
		
		Если НЕ ПроверитьРезидентство(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Нерезидент");
			Продолжить;
		КонецЕсли;

		// Некредитуемые регионы.
		Если НайтиКодВСписке(СведенияОЗаемщике.КодРегиона, ДатаЗаявки, КредитныйПродукт.Идентификатор,
				УсловияКредитования.НекредитуемыеРегионы, "КодРегиона", Ложь) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Регион");
			Продолжить;
		КонецЕсли;

		// Некредитуемые организационно-правовые формы.
		Если НайтиКодВСписке(СведенияОЗаемщике.КодОКОПФ, ДатаЗаявки, КредитныйПродукт.Идентификатор,
				УсловияКредитования.НекредитуемыеОрганизационноПравовыеФормы, "КодОКОПФ", Истина) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ОКОПФ");
			Продолжить;
		КонецЕсли;
		
		// Некредитуемые виды деятельности - этот список потенциально самый большой, его проверяем в последнюю очередь.
		Если НайтиКодВСписке(СведенияОЗаемщике.КодОКВЭД2, ДатаЗаявки, КредитныйПродукт.Идентификатор,
				УсловияКредитования.НекредитуемыеВидыДеятельности, "КодОКВЭД2", Истина) Тогда
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ОКВЭД");
			Продолжить;
		КонецЕсли;

		// Кредит выдается только если есть обороты с определенными группами контрагентов.
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиПоГруппамКонтрагентов, КредитныйПродукт, 
			"ГруппаКонтрагентов,
			|КоличествоМесяцевПоГруппеКонтрагентов,
			|МинСреднемесячноеПоГруппеКонтрагентов,
			|МинЕжемесячноеПоГруппеКонтрагентов");
		
		Если РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.ЕстьСтопФактор(ПараметрыПроверкиПоГруппамКонтрагентов)
			И Не РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.СтопФакторПройден(ПараметрыПроверкиПоГруппамКонтрагентов) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(
				ИдентификаторБанка, "СтопФактор.ГруппыКонтрагентов" + "." + КредитныйПродукт.ГруппаКонтрагентов);
			Продолжить;
			
		КонецЕсли;
		
		Отказ = Ложь;
		
		ЗаявкиНаКредит.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Нет");
		
	КонецЦикла;
	
	Если ПерваяСтрокаТекущегоБанка < 0 Тогда // по данному банку сведения не добавлялись
		Возврат;
	КонецЕсли;
		
	КоличествоСтрок = СведенияОБанках.Количество();
	Если Отказ Тогда
		// Ни одного кредитного продукта без стоп-факторов. Оставляем только первую строку.
		Для инд = ПерваяСтрокаТекущегоБанка + 1 По КоличествоСтрок - 1 Цикл
			СведенияОБанках.Удалить(ПерваяСтрокаТекущегоБанка + 1); // удаляем на одном и том же месте до конца
		КонецЦикла;
		
	Иначе
		// Были кредитные продукты без стоп-факторов. Оставляем только их.
		инд = ПерваяСтрокаТекущегоБанка;
		Пока инд < КоличествоСтрок Цикл
			
			СтрокаТаблицы = СведенияОБанках[инд];
			Если СтрокаТаблицы.СтопФакторыПройдены Тогда
				инд = инд + 1;
			Иначе
				СведенияОБанках.Удалить(СтрокаТаблицы);
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает по данным о заемщике показатели для проверки стоп-факторов.
//
Процедура ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаемщике, ДатаЗаявки)

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		СведенияОЗаемщике.ВозрастИП = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхЛет(СведенияОЗаемщике.ДатаРождения, ДатаЗаявки);
	КонецЕсли;

	СведенияОЗаемщике.СрокОтДатыРегистрации = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаемщике.ДатаРегистрации, ДатаЗаявки);

	СведенияОЗаемщике.СрокФактическогоВеденияБизнеса = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаемщике.ДатаФактическогоНачалаВеденияБизнеса, ДатаЗаявки);

	СведенияОЗаемщике.СрокВеденияУчетаВПрограмме = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме, ДатаЗаявки);

	КодРегиона = "";
	Если ЗначениеЗаполнено(СведенияОЗаемщике.ЮрАдресОрганизации) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОЗаемщике.ЮрАдресОрганизации);
		КодРегиона = СведенияОбАдресе.КодРегиона;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		// Если из адреса определить код региона не получилось, то ищем через регистрацию в налоговом органе.
		ОсновнаяРегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(
			СведенияОЗаемщике.Организация, ДатаЗаявки);
		Если ЗначениеЗаполнено(ОсновнаяРегистрацияВНалоговомОргане) Тогда
			РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнаяРегистрацияВНалоговомОргане, "КодРегиона");
			Если ЗначениеЗаполнено(РеквизитыРегистрации.КодРегиона) Тогда
				// В настройках сервиса код региона задан в виде строки с лидирующем нулем.
				КодРегиона = Формат(РеквизитыРегистрации.КодРегиона, "ЧЦ=2;ЧВН=");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОЗаемщике.КодРегиона = СокрЛП(КодРегиона);
	
	// Исключим лишние пробелы из кодов.
	СведенияОЗаемщике.КодОКВЭД2 = СокрЛП(СведенияОЗаемщике.КодОКВЭД2);
	СведенияОЗаемщике.КодОКОПФ  = СокрЛП(СведенияОЗаемщике.КодОКОПФ);

КонецПроцедуры

Функция ПроверитьЮрФизЛицоЗаемщика(СведенияОЗаемщике, ДействующийКредитныйПродукт) 

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ВозможноКредитование = ДействующийКредитныйПродукт.ВозможноКредитованиеИП;
	Иначе
		ВозможноКредитование = ДействующийКредитныйПродукт.ВозможноКредитованиеЮЛ;
	КонецЕсли;
	
	// Может быть Неопределено, если условия кредитования были получены в версии, когда такого стоп-фактора еще не было.
	Возврат ВозможноКредитование <> Ложь;

КонецФункции

Функция ПроверитьВозрастЗаемщика(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Не является физлицом, не проверяем условие по возрасту совсем.
		Возврат Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(КредитныйПродукт.МинВозрастИП) Тогда
		Если СведенияОЗаемщике.ВозрастИП < КредитныйПродукт.МинВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КредитныйПродукт.МаксВозрастИП) Тогда
		Если СведенияОЗаемщике.ВозрастИП > КредитныйПродукт.МаксВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокОтДатыРегистрации(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокОтДатыРегистрации) Тогда
		Если СведенияОЗаемщике.СрокОтДатыРегистрации < КредитныйПродукт.МинСрокОтДатыРегистрации Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокФактическогоВеденияБизнеса(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокФактическойДеятельности) Тогда
		Если СведенияОЗаемщике.СрокФактическогоВеденияБизнеса < КредитныйПродукт.МинСрокФактическойДеятельности Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокВеденияУчетаВПрограмме(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокВеденияУчетаВПрограмме) Тогда
		Если СведенияОЗаемщике.СрокВеденияУчетаВПрограмме < КредитныйПродукт.МинСрокВеденияУчетаВПрограмме Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСреднемесячноеПоступлениеНаСчет) Тогда
		Если СведенияОЗаемщике.СреднемесячноеПоступлениеНаСчет < КредитныйПродукт.МинСреднемесячноеПоступлениеНаСчет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьМинимальноеЕжемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинЕжемесячноеПоступлениеНаСчет) Тогда
		Если СведенияОЗаемщике.МинимальноеЕжемесячноеПоступлениеНаСчет < КредитныйПродукт.МинЕжемесячноеПоступлениеНаСчет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьРезидентство(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если КредитныйПродукт.ВозможноКредитованиеНерезидентов <> Истина Тогда
		Если СведенияОЗаемщике.Нерезидент Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция НайтиКодВСписке(ИскомыйКод, ДатаЗаявки, ИдентификаторКредитногоПродукта, СпискиНекредитуемыхКодов, ИмяПоля, ПоискПоПервымСимволам)

	ДействующийСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторКредитногоПродукта, СпискиНекредитуемыхКодов);
	
	Если ДействующийСписок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим код.
	НекредитуемыеКоды = ДействующийСписок[ИмяПоля];
	Для Каждого ТекущийКод Из НекредитуемыеКоды Цикл
		Если ПоискПоПервымСимволам И СтрНачинаетсяС(ИскомыйКод, СокрЛП(ТекущийКод)) Тогда
			Возврат Истина;
		ИначеЕсли СокрЛП(ТекущийКод) = ИскомыйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

Функция ПроверитьСоставУчредителейЗаемщикаЮрЛица(СведенияОЗаемщике, ДействующийКредитныйПродукт)

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// Заемщик не является юрлицом, не проверяем условие совсем.
		Возврат Истина;
	КонецЕсли;
	
	ЕстьУчредителиФизЛица = (СведенияОЗаемщике.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ФизическиеЛица
		ИЛИ СведенияОЗаемщике.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица);
		
	ЕстьУчредителиЮрЛица = (СведенияОЗаемщике.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеЛица
		ИЛИ СведенияОЗаемщике.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица);
		
	// Стоп-фактор по составу учредителей в базах с ранними версиями конфигурации может отсутствовать (будет Неопределено),
	// поэтому проверяем явно на значение Ложь.
	ВозможноКредитованиеУчредителиФизЛица = ДействующийКредитныйПродукт.ВозможноКредитованиеЮЛсУчредителямиФизЛицами <> Ложь;

	ВозможноКредитованиеУчредителиЮрЛица  = ДействующийКредитныйПродукт.ВозможноКредитованиеЮЛсУчредителямиЮрЛицами <> Ложь;

	ВозможноКредитованиеРуководительЕдинственныйУчредитель = 
		ДействующийКредитныйПродукт.ВозможноКредитованиеЮЛсРуководителемЕдинственнымУчредителем <> Ложь;
	
	// Сравниваем состав учредителей заемщика с тем, который готов рассматривать банк.
	Если СведенияОЗаемщике.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель Тогда
		Возврат ВозможноКредитованиеРуководительЕдинственныйУчредитель;
	
	ИначеЕсли ЕстьУчредителиФизЛица И ЕстьУчредителиЮрЛица Тогда
		// Проверяем доступность одновременно для двух видов учредителей.
		Возврат ВозможноКредитованиеУчредителиФизЛица И ВозможноКредитованиеУчредителиЮрЛица;
		
	ИначеЕсли ЕстьУчредителиФизЛица Тогда
		Возврат ВозможноКредитованиеУчредителиФизЛица;
		
	ИначеЕсли ЕстьУчредителиЮрЛица Тогда
		Возврат ВозможноКредитованиеУчредителиЮрЛица;
	
	КонецЕсли;
		
	// Ничего не подходит, считаем, что банк не готов рассматривать заявку от такого юр.лица.
	Возврат Ложь;

КонецФункции

Функция ПроверитьДатуНачалаВеденияУчетаВПрограмме(СведенияОЗаемщике, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинДатаНачалаВеденияУчетаВПрограмме) Тогда
		Если НачалоДня(СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме) > НачалоДня(КредитныйПродукт.МинДатаНачалаВеденияУчетаВПрограмме) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ЗаполнитьТипыПредметовЛизингаБанка(СведенияОБанке, ДатаЗаявки, ИдентификаторКредитногоПродукта, УсловияКредитования)
	
	Если УсловияКредитования.ТипыПредметовЛизингаБанка = Неопределено Тогда
		// Банк не задал явных ограничений по типам предметов лизинга, считаем, что готов рассматривать любые.
		Возврат;
	КонецЕсли;
	
	// Найдем подходящий список для конкретного текущего продукта.
	ДействующийСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторКредитногоПродукта, УсловияКредитования.ТипыПредметовЛизингаБанка);
	Если ДействующийСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СведенияОБанке.БелыйСписокТиповПредметовЛизинга = ДействующийСписок.БелыйСписок;

	Для каждого СтрокаТипаПредмета Из ДействующийСписок.Строка Цикл
		СведенияОБанке.ТипыПредметовЛизинга.Добавить(СтрокаТипаПредмета.Идентификатор);
	КонецЦикла;

КонецПроцедуры

Функция НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторКредитногоПродукта, СписокXDTO)

	Если СписокXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем актуальный список для указанного кредитного продукта.
	Результат = Неопределено;
	Для Каждого ТекущиеДанные Из СписокXDTO Цикл
		Если ТекущиеДанные.Свойства().Получить("ИдентификаторКредитногоПродукта") <> Неопределено
			И ТекущиеДанные.ИдентификаторКредитногоПродукта = ИдентификаторКредитногоПродукта
			И ТекущиеДанные.ДатаНачала <= ДатаЗаявки
			И ТекущиеДанные.ДатаОкончания >= ДатаЗаявки Тогда
			Результат = ТекущиеДанные;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если список для указанного кредитного продукта не найден,
	// найдем актуальный список, общий для всех кредитных продуктов.
	Если Результат = Неопределено Тогда
		Для Каждого ТекущиеДанные Из СписокXDTO Цикл
			Если (ТекущиеДанные.Свойства().Получить("ИдентификаторКредитногоПродукта") = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКредитногоПродукта))
				И ТекущиеДанные.ДатаНачала <= ДатаЗаявки
				И ТекущиеДанные.ДатаОкончания >= ДатаЗаявки Тогда
				Результат = ТекущиеДанные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПроверитьМинСуммаВыручки(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСуммаВыручки) Тогда
		Если СведенияОЗаемщике.СуммаВыручки < КредитныйПродукт.МинСуммаВыручки Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитов

Процедура ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ = Ложь)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект       = ОбъектИлиФорма.Объект;
		КлючДанных   = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		НачалоПутиКДанным = "Организация.";
		
		// Контактную информацию берем из реквизитов формы.
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект       = ОбъектИлиФорма;
		КлючДанных   = РеквизитыОрганизации.Ссылка;
		НачалоПутиКДанным = "";

		ПроверкаИзФормы   = Ложь;
		
		ПроверяемыеВидыКонтактнойИнформации = Новый Массив;
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыОрганизации.Ссылка),
			,
			ПроверяемыеВидыКонтактнойИнформации,
			Объект.Дата);
		
	КонецЕсли;

	ЭтоЮрЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	// Состав учредителей юридического лица
	Если ЭтоЮрЛицо И (ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы)) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СоставУчредителей) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Состав учредителей'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.СоставУчредителей", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Дата регистрации
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата регистрации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРегистрации", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.КодОКОПФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеОКОПФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.КодОКВЭД2) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеОКВЭД2) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// ЮрАдресОрганизации - не даем его изменять непосредственно в форме заявки,
	// т.к. от него зависят регистрации в налоговой, ПРФ, ФСС и др. органах.
	// Смены юр.адреса поддерживается в карточке организации, отправляем пользователя туда.
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
	
		Если ПроверкаИзФормы Тогда
			Адрес = ОбъектИлиФорма.КонтактнаяИнформацияПолеЮрАдресОрганизации;
		Иначе
			Адрес = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Адрес = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Адрес)
			ИЛИ Адрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
			ИЛИ Адрес = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки() Тогда

			Если ЭтоЮрЛицо Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Юридический адрес'"));
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес места жительства'"));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// НаименованиеСокращенное
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеСокращенное) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сокращенное наименование'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеСокращенное", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// НаименованиеПолное
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеПолное) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Полное наименование'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеПолное", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// ИНН
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
				РеквизитыОрганизации.ИНН, ЭтоЮрЛицо);

			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					РезультатПроверки.ОписаниеОшибки,
					КлючДанных,
					НачалоПутиКДанным + "ИНН",
					,
					Отказ);
			КонецЕсли;
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ИНН'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ИНН", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// ОГРН
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОГРН) Тогда
			ТекстСообщения = "";
			Успешно = РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(
				РеквизитыОрганизации.ОГРН, ЭтоЮрЛицо, ТекстСообщения);

			Если НЕ Успешно Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ОГРН", , Отказ);
			КонецЕсли;
		Иначе
			Если НЕ ЭтоЮрЛицо Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОГРНИП'"));
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОГРН'"));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ОГРН", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Система налогообложения
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ УчетнаяПолитика.Существует(РеквизитыОрганизации.Ссылка, Объект.Дата) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Система налогообложения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СистемаНалогообложенияПредставление", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Последний закрытый месяц
	Если ИмяСтраницы = "Отчетность" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Месяц, по который включительно выверены данные учета'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ПериодРегистрации", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	// Контактный телефон для заемщика ИП
	Если НЕ ЭтоЮрЛицо
		И (ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы)) Тогда
	
		Если ПроверкаИзФормы Тогда
			Телефон = ОбъектИлиФорма.КонтактнаяИнформацияПолеТелефонОрганизации;
		Иначе
			Телефон = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Телефон = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Телефон) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
		КонецЕсли;
	
	КонецЕсли;

	// Электронная почта для заемщика ИП
	Если НЕ ЭтоЮрЛицо
		И (ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы)) Тогда
	
		Если ПроверкаИзФормы Тогда
			АдресЭП = ОбъектИлиФорма.КонтактнаяИнформацияПолеEmailОрганизации;
		Иначе
			АдресЭП = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				АдресЭП = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(АдресЭП) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'E-mail'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ = Ложь)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		РеквизитыФизЛица = ОбъектИлиФорма.ФизическоеЛицо;
	Иначе
		Объект           = ОбъектИлиФорма;
		РеквизитыФизЛица = РеквизитыФизическогоЛица(РеквизитыОрганизации.ИндивидуальныйПредприниматель, Объект.Дата);
	КонецЕсли;

	// ИндивидуальныйПредприниматель
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИндивидуальныйПредприниматель) Тогда
			Подстроки = Новый Массив;
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Индивидуальный предприниматель'"));
			Подстроки.Добавить(ТекстСообщения);
			Подстроки.Добавить(НСтр("ru = 'Нарушена связь между данными справочников ""Организации"" и ""Физические лица"".'"));
			Подстроки.Добавить(НСтр("ru = 'Для исправления откройте форму организации и перезапишите ее.'"));
			Подстроки.Добавить(НСтр("ru = 'После чего повторите создание заявки на кредит еще раз.'"));
			
			ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				РеквизитыОрганизации.Ссылка,
				"Объект.ИндивидуальныйПредприниматель",
				,
				Отказ);
			
			// Остальные поля не проверяем, пока не заполнят индивидуального предпринимателя в организации.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхРуководителяЮЛ(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ = Ложь)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Заемщик - ИП сам является руководителем, поэтому повторно его проверять не требуется.
		Возврат;
	КонецЕсли;

	РеквизитыРуководителя = Новый Структура();
	РеквизитыРуководителя.Вставить("Руководитель");
	РеквизитыРуководителя.Вставить("РуководительДолжность");
	РеквизитыРуководителя.Вставить("РеквизитыФизЛица");

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект                                      = ОбъектИлиФорма.Объект;
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных                                  = Неопределено;
		РеквизитыРуководителя.Руководитель          = ОбъектИлиФорма.Руководитель;
		РеквизитыРуководителя.РуководительДолжность = ОбъектИлиФорма.РуководительДолжность;
		РеквизитыРуководителя.РеквизитыФизЛица      = ОбъектИлиФорма.ФизическоеЛицо;
		
	Иначе
		Объект                 = ОбъектИлиФорма;
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных                                   = РеквизитыОрганизации.Ссылка;
		ДанныеОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
		РеквизитыРуководителя.Руководитель           = ДанныеОтветственныхЛиц.Руководитель;
		РеквизитыРуководителя.РуководительДолжность  = ДанныеОтветственныхЛиц.РуководительДолжность;
		РеквизитыРуководителя.РеквизитыФизЛица       = РеквизитыФизическогоЛица(
			ДанныеОтветственныхЛиц.Руководитель, Объект.Дата);
	КонецЕсли;

	// Руководитель
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыРуководителя.Руководитель) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Руководитель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "Руководитель", ,	Отказ);
			// Остальные поля не проверяем, пока не заполнят руководителя.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхФизЛица(
		ОбъектИлиФорма,
		РеквизитыОрганизации,
		РеквизитыРуководителя.РеквизитыФизЛица,
		ИмяСтраницы,
		Отказ);
	
	// Должность руководитель
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыРуководителя.РуководительДолжность) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "РуководительДолжность", , Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция РеквизитыФизическогоЛица(ФизЛицо, Дата)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = УчетЗарплаты.ДанныеФизическихЛиц(, ФизЛицо, Дата, Ложь, Ложь);
	
	// Для совместимости с типом СправочникОбъект.ФизическиеЛица добавим ключ Ссылка.
	Результат.Вставить("Ссылка", ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных        = Неопределено;
		НачалоПутиКДанным = "ФизическоеЛицо.";
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект            = ОбъектИлиФорма;
		КлючДанных        = РеквизитыФизЛица.Ссылка;
		НачалоПутиКДанным = "";
		ПроверкаИзФормы   = Ложь;
		
	КонецЕсли;

	ЭтоСамИП = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И РеквизитыОрганизации.ИндивидуальныйПредприниматель = РеквизитыФизЛица.Ссылка;
		
	ТребуетсяПроверка = НЕ ЗначениеЗаполнено(ИмяСтраницы)
		ИЛИ (ЭтоСамИП И ИмяСтраницы = "ЗаемщикИП")
		ИЛИ (НЕ ЭтоСамИП И ИмяСтраницы = "ЗаемщикЮЛ");
		
	// Личные данные из справочника ФизическиеЛица.
		
	// Фамилия
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Фамилия", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Имя
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Имя) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Имя", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	// Дата рождения - для самого ИП располагается на самой первой странице,
	// для руководителя юр.лица - вместе со всеми другими данными руководителя.
	Если НЕ ЗначениеЗаполнено(ИмяСтраницы)
		ИЛИ (ЭтоСамИП И ИмяСтраницы = "Начало")
		ИЛИ (НЕ ЭтоСамИП И ИмяСтраницы = "ЗаемщикЮЛ") Тогда

		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.ДатаРождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРождения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Пол
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Пол) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Пол", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Место рождения
	Если ТребуетсяПроверка Тогда
		СтруктураМестоРождения = ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(РеквизитыФизЛица.МестоРождения);
		ЕстьДанные = Ложь;
		Для Каждого КлючИЗначение Из СтруктураМестоРождения Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьДанные Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
			Если ПроверкаИзФормы Тогда
				// Поле на форме документа заявка на кредит.
				Если ЭтоСамИП Тогда
					ПолеФормы = "МестоРожденияИП";
				Иначе
					ПолеФормы = "МестоРожденияРуководителя";
				КонецЕсли;
			Иначе
				// Поле на форме элемента справочника Физические лица.
				ПолеФормы = "ФизическоеЛицоМестоРождения";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, ПолеФормы, , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Семейное положение
	ПроверитьЗаполнениеСостоянияВБракеФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);

	// ИНН - проверяем только для руководителя, для самого ИП проверили ранее по данным справочника Организации.
	// При этом проверяем, если ИНН заполнен, т.к. у физлица может не быть ИНН.
	Если ТребуетсяПроверка И НЕ ЭтоСамИП Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.ИНН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ИНН'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ИНН", , Отказ);
		Иначе
			РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
				РеквизитыФизЛица.ИНН, Ложь);
			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					РезультатПроверки.ОписаниеОшибки,
					КлючДанных,
					НачалоПутиКДанным + "ИНН",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СНИЛС
	СНИЛС = СокрЛП(СтрЗаменить(РеквизитыФизЛица.СтраховойНомерПФР, "-", "")); // Может быть пустая маска ввода.
	Если ТребуетсяПроверка Тогда
		ТекстСообщения = "";
		Успешно = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СНИЛС, ТекстСообщения);

		Если НЕ Успешно Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				НачалоПутиКДанным + "СтраховойНомерПФР",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Паспортные данные.
	ПроверитьЗаполнениеПаспортныхДанных(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);
	
	// Проверка заполненности контактной информации для руководителя.
	// Для самого ИП используем контактную информацию из справочника Организации, а не физлица.
	Если ТребуетсяПроверка И НЕ ЭтоСамИП Тогда
	
		// Прочитаем из базы контактную информацию при необходимости.
		Если НЕ ПроверкаИзФормы Тогда
			ПроверяемыеВидыКонтактнойИнформации = Новый Массив;
			ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
			ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
			
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыФизЛица.Ссылка),
				,
				ПроверяемыеВидыКонтактнойИнформации,
				Объект.Дата);
		КонецЕсли;
	
		// Адрес по прописке - для руководителя. Для ИП он проверен еще на первой странице заявки.
		Если ПроверкаИзФормы Тогда
			Адрес = ОбъектИлиФорма.КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица;
		Иначе
			Адрес = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Адрес = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Адрес)
			ИЛИ Адрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Адрес по прописке'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
		КонецЕсли;


		// Телефон руководителя
		Если ПроверкаИзФормы Тогда
			Телефон = ОбъектИлиФорма.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
		Иначе
			Телефон = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Телефон = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Телефон) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
		КонецЕсли;

		// Электронная почта руководителя
		Если ПроверкаИзФормы Тогда
			АдресЭП = ОбъектИлиФорма.КонтактнаяИнформацияПолеEMailФизическиеЛица;
		Иначе
			АдресЭП = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				АдресЭП = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресЭП) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'E-mail'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеСостоянияВБракеФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		СостояниеВБраке = ОбъектИлиФорма.СостояниеВБракеФизическихЛиц.СостояниеВБраке;
		КлючДанных   = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		ПолеФормы    = "СостояниеВБракеФизическихЛиц.СостояниеВБраке";
	Иначе
		Объект       = ОбъектИлиФорма;
		КлючДанных   = РеквизитыФизЛица.Ссылка;
		ПолеФормы    = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", РеквизитыФизЛица.Ссылка);
		Запрос.УстановитьПараметр("Дата",    Объект.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияВБракеФизическихЛиц.СостояниеВБраке КАК СостояниеВБраке
		|ИЗ
		|	РегистрСведений.СостоянияВБракеФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК СостоянияВБракеФизическихЛиц";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СостояниеВБраке = Выборка.СостояниеВБраке;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеВБраке) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Семейное положение'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, ПолеФормы, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПаспортныхДанных(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		ПаспортныеДанные  = ОбъектИлиФорма.ПаспортныеДанные;
		КлючДанных        = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		НачалоПутиКДанным = "ПаспортныеДанные.";
		ПроверкаИзФормы   = Истина;
		СтранаГражданства = ОбъектИлиФорма.ГражданствоФизическихЛиц.Страна;
	Иначе
		ПаспортныеДанные  = РеквизитыФизЛица;
		КлючДанных        = РеквизитыФизЛица.Ссылка;
		НачалоПутиКДанным = "ДокументыФизическихЛиц.";
		ПроверкаИзФормы   = Ложь;
		Гражданство = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(ОбъектИлиФорма.Дата, Новый Структура("ФизическоеЛицо", РеквизитыФизЛица.Ссылка));
		СтранаГражданства = ?(Гражданство.Количество() > 0, Гражданство[0].Страна, Справочники.СтраныМира.ПустаяСсылка());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.ВидДокумента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Вид документа, удостоверяющего личность'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ВидДокумента", , Отказ);
	Иначе
		ЭтоДокументРФ = ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ
			ИЛИ ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ
			ИЛИ ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт
			ИЛИ Врег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПаспортныеДанные.ВидДокумента, "КодПФР")) = "ВРЕМ УДОСТ";
			
		Если ЭтоДокументРФ И СтранаГражданства <> Справочники.СтраныМира.Россия Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "КОРРЕКТНОСТЬ",
				НСтр("ru = 'Вид документа, удостоверяющего личность'"),,,
				НСтр("ru = 'Указанный вид документа допустим только для граждан РФ.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ВидДокумента", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Серия
	ТекстСообщения = "";
	Успешно = ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(
		ПаспортныеДанные.ВидДокумента, ПаспортныеДанные.Серия, ТекстСообщения);
	Если НЕ Успешно Тогда
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СерияНомерПаспорта", , Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Серия", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Номер
	Если ЗначениеЗаполнено(ПаспортныеДанные.Номер) Тогда
		ТекстСообщения = "";
		Успешно = ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(
			ПаспортныеДанные.ВидДокумента, ПаспортныеДанные.Номер, ТекстСообщения);
	Иначе
		Успешно = Ложь;
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Серия и номер'"));
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Номер'"));
		КонецЕсли;
	КонецЕсли;
	Если НЕ Успешно Тогда
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СерияНомерПаспорта", , Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Номер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата выдачи
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаВыдачи", , Отказ);
	КонецЕсли;

	// Кем выдан
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КемВыдан", , Отказ);
	КонецЕсли;

	// Для российского паспорта обязательно заполнение кода подразделения
	Если ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ
		И НЕ ЗначениеЗаполнено(ПаспортныеДанные.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодПодразделения", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Объект     = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
	Иначе
		Объект     = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		// Отдельное контактное лицо по заявке не назначено.
		// Считаем, что сам ИП или руководитель ЮЛ будет контактировать.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДолжностьКонтактногоЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Должность контактного лица'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ДолжностьКонтактногоЛица", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТелефонКонтактногоЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон контактного лица'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ТелефонКонтактногоЛица", , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеБанки(ОбъектИлиФорма, ИмяСтраницы = "", Отказ = Ложь)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "Банки" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		Банки  = Объект.Банки;
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		Банки  = ВыбранныеБанки(Объект.Ссылка);
	КонецЕсли;

	Это1СКредит = (Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	Это1СЛизинг = (Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг);

	// Сумма
	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) Тогда
		СинонимПоля = ?(Это1СЛизинг, НСтр("ru = 'Стоимость с НДС'"), НСтр("ru = 'Сумма'"));
	
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , СинонимПоля);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.СуммаДокумента", , Отказ);
	КонецЕсли;

	// Срок
	Если НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Срок'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.СрокКредита", , Отказ);
	КонецЕсли;

	Если Это1СКредит Тогда
		// Цель - доступна только для заявок на кредит.
		Если НЕ ЗначениеЗаполнено(Объект.ЦельКредита) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Цель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.ЦельКредита", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Это1СЛизинг Тогда
		// Тип предмета лизинга
		Если НЕ ЗначениеЗаполнено(Объект.ТипПредметаЛизинга) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Предмет'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.ТипПредметаЛизинга", , Отказ);
		КонецЕсли;
		
		// Сумма аванса
		Если Объект.СуммаАванса > Объект.СуммаДокумента Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				, "Корректность", НСтр("ru = 'Аванс'"), , , НСтр("ru = 'Аванс не может превышать стоимость предмета лизинга'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.СуммаАванса", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Банки
	Если НЕ ЗначениеЗаполнено(Банки) Тогда
		Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") И ИмяСтраницы = "Банки" Тогда
			// Если проверяется только одна страница Банки в форме,
			// то сама форма может сообщить более точную причину,
			// поэтому в этом случае не выводим здесь сообщение пользователю, чтобы не дублировать.
			Отказ = Истина;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбраны партнеры для отправки заявки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОтчетность(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "Отчетность" Тогда
		// Проверка отчетность сейчас не требуется.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		НачалоПутиКДанным = "Объект.";
		Отчетность = Объект.Отчетность;
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		НачалоПутиКДанным = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаНаКредит", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОтчетность.НомерСтроки,
		|	ТЧОтчетность.РегламентированныйОтчет,
		|	ТЧОтчетность.ИсточникОтчета,
		|	ТЧОтчетность.НаименованиеОтчета,
		|	ТЧОтчетность.ДатаНачала,
		|	ТЧОтчетность.ДатаОкончания,
		|	ТЧОтчетность.СостояниеОтчета
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Отчетность КАК ТЧОтчетность
		|ГДЕ
		|	ТЧОтчетность.Ссылка = &ЗаявкаНаКредит
		|УПОРЯДОЧИТЬ ПО
		|	ТЧОтчетность.НомерСтроки";
		
		Отчетность = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого ОтчетЗаемщика Из Отчетность Цикл
	
		Если НЕ ЗначениеЗаполнено(ОтчетЗаемщика.РегламентированныйОтчет) Тогда
			ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Отчетность", ОтчетЗаемщика.НомерСтроки, "СостояниеОтчета");

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен отчет ""%1"" в строке %2'"),
				ОтчетЗаемщика.НаименованиеОтчета, Формат(ОтчетЗаемщика.НомерСтроки, "ЧГ="));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
			Продолжить;
		КонецЕсли;
		
		Если ОтчетЗаемщика.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности"
			И Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности Тогда
			// Расшифровки бухотчетности могут требовать перезаполнения.
			ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Отчетность", ОтчетЗаемщика.НомерСтроки, "СостояниеОтчета");

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Откройте и перезаполните ""%1"" в строке %2'"),
				ОтчетЗаемщика.НаименованиеОтчета, Формат(ОтчетЗаемщика.НомерСтроки, "ЧГ="));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеУчредители(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Проверка учредителей сейчас не требуется.
		Возврат;
	КонецЕсли;
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// Учредители могут быть только для юридического лица.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		НачалоПутиКДанным = "Объект.";
		
		// Берем ссылки учредителей из таблицы на форме, т.к. заявка может быть еще не записана.
		Учредители = ЗаявкиНаКредит.НовыеДанныеУчредителей();
		Для каждого СтрокаТаблицы Из Объект.Учредители Цикл
			НоваяСтрока = Учредители.Добавить();
			НоваяСтрока.НомерСтроки = СтрокаТаблицы.НомерСтроки;
			НоваяСтрока.Учредитель  = СтрокаТаблицы.Учредитель;
			НоваяСтрока.ДоляУК = СтрокаТаблицы.ДоляУК;
		КонецЦикла;
		ПодготовитьДанныеУчредителей(Объект.Дата, Учредители);
		
		Руководитель = ОбъектИлиФорма.Руководитель;
	Иначе
		// Получаем данные об учредителях из данных базы.
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		НачалоПутиКДанным = "";
		Учредители = ДанныеУчредителей(Объект.Ссылка);
		
		ДанныеОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
		Руководитель = ДанныеОтветственныхЛиц.Руководитель;
	КонецЕсли;
	
	Если НЕ Объект.ТребуютсяДанныеУчредителей
		ИЛИ Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель Тогда
		// Выбранным банкам не требуются данные об учредителях, 
		// либо руководитель является единственным учредителем, его данные проверяются отдельно,
		// поэтому для собственно учредителей не проверяем заполнение.
		Возврат;
	КонецЕсли;
	
	// Если указано, что есть учредители-физлица и руководитель не является единственным учредителем,
	// то необходимо, чтобы был заполнен список учредителей.
	Если (Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ФизическиеЛица
			ИЛИ Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица)
		И Учредители.Количество() = 0 Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список",,,, НСтр("ru = 'Учредители-физические лица'"));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Учредители", , Отказ);
	КонецЕсли;
	
	// Проверка, что сумма долей учредителей - физических лиц составляет 100%
	Если Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ФизическиеЛица
		И Учредители.Итог("ДоляУК") <> 100 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "КОРРЕКТНОСТЬ",,, НСтр("ru = 'Учредители-физические лица'"),
			НСтр("ru = 'Сумма долей учредителей - физических лиц должна составлять 100%.'"));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Учредители", , Отказ);
	КонецЕсли;
	
	// Проверка, что сумма долей учредителей - юридических и физических лиц не превышает 100%
	Если Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица
		И Учредители.Итог("ДоляУК") > 100 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "КОРРЕКТНОСТЬ",,, НСтр("ru = 'Учредители-физические лица'"),
			НСтр("ru = 'Сумма долей учредителей не должна превышать 100%.'"));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Учредители", , Отказ);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Учредители Цикл
		
		// Учредитель
		ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Учредители", СтрокаТаблицы.НомерСтроки, "Учредитель");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Учредитель) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Учредитель'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
			Продолжить;
		КонецЕсли;
		
		// Доля
		ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Учредители", СтрокаТаблицы.НомерСтроки, "ДоляУК");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоляУК) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Доля'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
			Продолжить;
		КонецЕсли;
		
		// Данные учредителя, который одновременно является руководителем организации,
		// проверяются при проверке данных руководителя. Повторно проверять их не нужно.
		Если СтрокаТаблицы.Учредитель = Руководитель Тогда
			Продолжить;
		КонецЕсли;
		
		// Фамилия
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Учредитель'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнена фамилия учредителя'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;

		// Имя
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Учредитель'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнено имя учредителя'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Учредители", СтрокаТаблицы.НомерСтроки, "ПредставлениеЛичныхДанных");
		
		// ИНН
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИНН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'ИНН'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Дата рождения
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаРождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Дата рождения'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Место рождения
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.МестоРождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Место рождения'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Адрес
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Адрес'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Телефон
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТелефонМобильный) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТелефонРабочий) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				НСтр("ru = 'Телефон (мобильный или рабочий)'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Паспортные данные
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидДокумента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнен вид документа'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Серия
		ТекстСообщения = "";
		Успешно = ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(
			СтрокаТаблицы.ВидДокумента, СтрокаТаблицы.Серия, ТекстСообщения);
		Если НЕ Успешно Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), ТекстСообщения);
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Номер
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номер) Тогда
			ТекстСообщения = "";

			Успешно = ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(
				СтрокаТаблицы.ВидДокумента, СтрокаТаблицы.Номер, ТекстСообщения);

			Если НЕ Успешно Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
					НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), ТекстСообщения);
			КонецЕсли;
		Иначе
			Успешно = Ложь;
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнен номер документа'"));
		КонецЕсли;
		Если НЕ Успешно Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
		
		// Дата выдачи
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыдачи) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнена дата выдачи'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;

		// Кем выдан
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КемВыдан) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнено кем выдан документ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;

		// Для российского паспорта обязательно заполнение кода подразделения
		Если СтрокаТаблицы.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодПодразделения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
				НСтр("ru = 'Документ'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Учредители'"), НСтр("ru = 'Не заполнен код подразделения, выдавшего документ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДополнительныеПоказатели(ОбъектИлиФорма, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	ЭтоФорма = ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения");
	
	Если ЭтоФорма Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		ДополнительныеПоказатели = Объект.ДополнительныеПоказатели;
		РеквизитыФормы = ОбъектИлиФорма.ПолучитьРеквизиты();
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаКредитДополнительныеПоказатели.Идентификатор КАК Идентификатор,
		|	ЗаявкаНаКредитДополнительныеПоказатели.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
		|	ЗаявкаНаКредитДополнительныеПоказатели.Значение КАК Значение
		|ИЗ
		|	Документ.ЗаявкаНаКредит.ДополнительныеПоказатели КАК ЗаявкаНаКредитДополнительныеПоказатели
		|ГДЕ
		|	ЗаявкаНаКредитДополнительныеПоказатели.Ссылка = &Ссылка";
		
		ДополнительныеПоказатели = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для каждого Показатель Из ДополнительныеПоказатели Цикл
		
		Если НЕ Показатель.ДанныеОтсутствуют И НЕ ЗначениеЗаполнено(Показатель.Значение) Тогда
			ИмяРеквизитаЗначения = СтрШаблон("ДополнительныйПоказатель_%1", Показатель.Идентификатор);
			ИмяРеквизитаПредставления = СтрШаблон("ДополнительныйПоказатель_%1_Представление", Показатель.Идентификатор);
			
			ИмяРеквизита = ИмяРеквизитаЗначения;
			ТекстСообщения = СтрШаблон(НСтр("ru='Не заполнен дополнительный показатель ""%1""'"), Показатель.Идентификатор);
			
			Если ЭтоФорма Тогда
				ТекстСообщения = НСтр("ru='Не заполнен дополнительный показатель'");
				Для каждого Реквизит Из РеквизитыФормы Цикл
					Если Реквизит.Имя = ИмяРеквизитаПредставления Тогда
						ИмяРеквизита = ИмяРеквизитаПредставления;
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Реквизит.Заголовок);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для каждого Реквизит Из РеквизитыФормы Цикл
					Если Реквизит.Имя = ИмяРеквизитаЗначения Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Реквизит.Заголовок);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				ИмяРеквизита,,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхЛизинга(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ = Ложь)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Объект     = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
	Иначе
		Объект     = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
	КонецЕсли;
	
	Если Объект.СервисОбменаСБанками <> Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
		// Не является заявкой на лизинг.
		Возврат;
	КонецЕсли;

	// Описание предмета лизинга
	Если НЕ ЗначениеЗаполнено(Объект.ОписаниеПредметаЛизинга) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Описание предмета лизинга'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ОписаниеПредметаЛизинга", , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДополнительныеФайлы(ОбъектИлиФорма, ИмяСтраницы, Отказ)
	
	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый контекст вызова проверки доп.файлов'");
	КонецЕсли;
	
	ОписаниеДополнительныхФайлов = ОбъектИлиФорма.ОписаниеДополнительныхФайлов;
	ДополнительныеФайлы = ОбъектИлиФорма.Объект.ДополнительныеФайлы;
	
	// Предопределенные доп.файлы имеют заранее заданное место на форме. Сообщения о незаполненности должны выводить в последовательности,
	// соответствующей последовательности групп на форме. Поэтому запоминаем отдельные тексты сообщений и выводим в нужном порядке:
	// 0) коммерческое предложение (если есть); 1-(n-1) произвольные доп.файлы; n) паспорт руководителя.
	ТекстыСообщений = Новый СписокЗначений;
	ТекстыСообщений.Добавить("", НСтр("ru = 'Коммерческое предложение'"));
	ТекстыСообщений.Добавить("", НСтр("ru = 'Паспорт руководителя'"));
	
	ИмяЭлемента = ?(ОбъектИлиФорма.Элементы.СтраницаЗаемщикИП.Видимость, "ГруппаДополнительныеФайлыИП", "ГруппаДополнительныеФайлыЮЛ");
	НазваниеГруппыДопФайлов = ОбъектИлиФорма.Элементы[ИмяЭлемента].Заголовок;
	ШаблонСообщения = НСтр("ru = 'В группе ""%1"" приложите файл ""%2"".'");
	
	ИдентификаторПаспортУчредителя = ИдентификаторПаспортУчредителя();
	ПредыдущийИдентификатор = "";
  	Для Каждого ДопФайл Из ДополнительныеФайлы Цикл
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			// Если по идентификатору можно приложить группу из нескольких файлов, то достаточно, чтобы был приложен хотя бы первый.
			// Тогда наличие других файлов в этой группе проверять уже не требуется.
			Продолжить;
		КонецЕсли;
		ПредыдущийИдентификатор = ДопФайл.Идентификатор;
		
		Если ДопФайл.ДанныеОтсутствуют
		 Или ЗначениеЗаполнено(ДопФайл.Значение)
		 Или ПредыдущийИдентификатор = ИдентификаторПаспортУчредителя Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Истина;
		ОписанияДопФайла = ОписаниеДополнительныхФайлов.НайтиСтроки(Новый Структура("Идентификатор", ДопФайл.Идентификатор));
		Если ОписанияДопФайла.Количество() > 0 Тогда
			
			КраткоеПредставление = ОписанияДопФайла[0].КраткоеПредставление;
			Предопределенный = ОписанияДопФайла[0].Предопределенный;
			
		Иначе
			
			КраткоеПредставление = ДопФайл.Идентификатор;
			Предопределенный = Ложь;
			
		КонецЕсли;
		
		ИмяРеквизитаФормы = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор));
			
		Если Предопределенный Тогда
			
			Если ПредыдущийИдентификатор = Документы.ЗаявкаНаКредит.ИдентификаторПаспортРуководителя() Тогда
				
				СообщениеОНезаполненности = ТекстыСообщений[ТекстыСообщений.Количество() - 1];
				СообщениеОНезаполненности.Значение = ИмяРеквизитаФормы;
				СообщениеОНезаполненности.Представление = СтрШаблон(ШаблонСообщения,
					ОбъектИлиФорма.Элементы.ПаспортныеДанныеРуководителя.Заголовок, КраткоеПредставление);
				Продолжить;
				
			ИначеЕсли ПредыдущийИдентификатор = Документы.ЗаявкаНаКредит.ИдентификаторКоммерческоеПредложение() Тогда
				
				ИмяЭлемента = ?(ОбъектИлиФорма.Элементы.СтраницаЗаемщикИП.Видимость, "ГруппаПредметЛизингаИП", "ГруппаПредметЛизингаЮЛ");
				СообщениеОНезаполненности = ТекстыСообщений[0];
				СообщениеОНезаполненности.Значение = ИмяРеквизитаФормы;
				СообщениеОНезаполненности.Представление = СтрШаблон(ШаблонСообщения,
					ОбъектИлиФорма.Элементы[ИмяЭлемента].Заголовок, КраткоеПредставление);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстыСообщений.Вставить(ТекстыСообщений.Количество() - 1,
			ИмяРеквизитаФормы, СтрШаблон(ШаблонСообщения, НазваниеГруппыДопФайлов, КраткоеПредставление));
		
	КонецЦикла;
	
	Для инд = 0 По ТекстыСообщений.Количество() - 2 Цикл
		
		СообщениеОНезаполненности = ТекстыСообщений[инд];
		Если Не ПустаяСтрока(СообщениеОНезаполненности.Значение) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОНезаполненности.Представление, , СообщениеОНезаполненности.Значение, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
	// Проверка заполнения файлов, хранящихся в табличной части.
	ОписаниеПаспортаУчредителя = ОписаниеДополнительныхФайлов.НайтиСтроки(
		Новый Структура("Идентификатор", ИдентификаторПаспортУчредителя));
	Если ОписаниеПаспортаУчредителя.Количество() <> 0 И ОписаниеПаспортаУчредителя[0].Обязательный Тогда
		
		ДополнительныеФайлы = ОбъектИлиФорма.Объект.Учредители;
		Для Каждого ДопФайл Из ДополнительныеФайлы Цикл
			
			Если ЗначениеЗаполнено(ДопФайл.ПаспортУчредителя) Тогда
				Продолжить;
			КонецЕсли;
			
			КраткоеПредставление = ОписаниеПаспортаУчредителя[0].КраткоеПредставление;
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
				КраткоеПредставление, ДопФайл.НомерСтроки, ОбъектИлиФорма.Элементы.ГруппаУчредители.Заголовок);
			
			ИмяРеквизита = СтрШаблон("Учредители[%1].ДополнительныйФайл_ПаспортУчредителя_Действие", ДополнительныеФайлы.Индекс(ДопФайл));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита, "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполненность паспорта руководителя.
	СообщениеОНезаполненности = ТекстыСообщений[ТекстыСообщений.Количество() - 1];
	Если Не ПустаяСтрока(СообщениеОНезаполненности.Значение) Тогда
		ОбщегоНазначения.СообщитьПользователю(СообщениеОНезаполненности.Представление, , СообщениеОНезаполненности.Значение, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьПредставленияДанныхКонтактногоЛицаДляВыгрузки(ДанныеЗаявки)

	ДанныеЗаявки.Вставить("КонтактноеЛицоФамилия",                 "");
	ДанныеЗаявки.Вставить("КонтактноеЛицоИмя",                     "");
	ДанныеЗаявки.Вставить("КонтактноеЛицоОтчество",                "");
	ДанныеЗаявки.Вставить("ДолжностьКонтактногоЛицаПредставление", "");
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаявки.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО контактного лица.
	ПредставлениеФизЛица = УчетЗарплаты.ПредставлениеФизическогоЛица(ДанныеЗаявки.КонтактноеЛицо, ДанныеЗаявки.Дата);
	ДанныеЗаявки.КонтактноеЛицоФамилия = ПредставлениеФизЛица.Фамилия;
	ДанныеЗаявки.КонтактноеЛицоИмя     = ПредставлениеФизЛица.Имя;
	ДанныеЗаявки.КонтактноеЛицоОтчество= ПредставлениеФизЛица.Отчество;
	
	// Должность контактного лица.
	Если ЗначениеЗаполнено(ДанныеЗаявки.ДолжностьКонтактногоЛица) Тогда
		ДанныеЗаявки.ДолжностьКонтактногоЛицаПредставление = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаявки.ДолжностьКонтактногоЛица, "Наименование");
	КонецЕсли;

КонецПроцедуры

Функция ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ФизЛицо)

	ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(ДанныеЗаявки.Организация,
		ФизЛицо, ДанныеЗаявки.Дата);
	
	ДанныеФизЛица.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеФизЛица.МестоРождения);

	// Представление страны гражданства.
	ДанныеФизЛица.Вставить("СтранаПредставление", "");
	ДанныеФизЛица.Вставить("СтранаКод",           "");
	Если ЗначениеЗаполнено(ДанныеФизлица.Страна) Тогда
		РеквизитыСтраны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФизлица.Страна, "Код, Наименование");
		ДанныеФизЛица.СтранаКод           = РеквизитыСтраны.Код;
		ДанныеФизЛица.СтранаПредставление = РеквизитыСтраны.Наименование;
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("Нерезидент", ЗначениеЗаполнено(ДанныеФизЛица.Страна) И ДанныеФизЛица.Страна <> Справочники.СтраныМира.Россия);
	
	// Код вида документа, удостоверяющего личность.
	ДанныеФизЛица.Вставить("ВидДокументаКод", "");
	Если ЗначениеЗаполнено(ДанныеФизЛица.ВидДокумента) Тогда
		ДанныеФизЛица.ВидДокументаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.ВидДокумента, "КодМВД");
	КонецЕсли;
	
	// Семейное положение.
	ДанныеФизЛица.Вставить("СостояниеВБракеПредставление", "");
	ДанныеФизЛица.Вставить("СостояниеВБракеКод",           "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата",    ДанныеЗаявки.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияВБракеФизическихЛиц.СостояниеВБраке.Наименование КАК Наименование,
	|	СостоянияВБракеФизическихЛиц.СостояниеВБраке.Код КАК Код
	|ИЗ
	|	РегистрСведений.СостоянияВБракеФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК СостоянияВБракеФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеФизЛица.СостояниеВБракеПредставление = Выборка.Наименование;
		ДанныеФизЛица.СостояниеВБракеКод           = Выборка.Код;
	КонецЕсли;
	
	Возврат ДанныеФизЛица;

КонецФункции

Процедура ДобавитьКонтактнуюИнформацияФизЛица(ДанныеФизЛица, ФизЛицоОтЗаемщика, ВидыКонтактнойИнформации, ДатаЗаявки)

	ВидыКИ = Новый Массив;
	Для Каждого КлючИЗначение Из ВидыКонтактнойИнформации Цикл
		ВидыКИ.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизЛицоОтЗаемщика),
		,
		ВидыКИ,
		ДатаЗаявки);

	Для Каждого КлючИЗначение Из ВидыКонтактнойИнформации Цикл
		
		ВидКонтактнойИнформации     = КлючИЗначение.Ключ;
		ИмяВидаКонтактнойИнформации = КлючИЗначение.Значение;
	
		Представление = "";
		ЗначениеJSON  = "";
		
		СтрокаКонтактнойИнформации = КонтактнаяИнформация.Найти(ВидКонтактнойИнформации, "Вид");
		Если СтрокаКонтактнойИнформации <> Неопределено Тогда
			Представление = СтрокаКонтактнойИнформации.Представление;
			ЗначениеJSON  = СтрокаКонтактнойИнформации.Значение;
		КонецЕсли;
		ДанныеФизЛица.Вставить(ИмяВидаКонтактнойИнформации,                  Представление);
		ДанныеФизЛица.Вставить("ЗначениеJSON" + ИмяВидаКонтактнойИнформации, ЗначениеJSON);
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбращениеКСервису

Функция СистемыНалогообложенияXML(СведенияОЗаявке)

	ДанныеЗаявки   = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика = СведенияОЗаявке.ДанныеЗаемщика;

	Результат = Новый Массив;
	
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если УчетнаяПолитика.ПлательщикНДФЛ(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
			// Индивидуальный предприниматель на общей системе налогообложения.
			Результат.Добавить("ОСНО");
		КонецЕсли;
	Иначе
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
			// Юридическое лицо на общей системе налогообложения.
			Результат.Добавить("ОСНО");
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("УСНД");
	КонецЕсли;

	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("УСНДМР");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("ПСНО");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("ЕНВД");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("НПД");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(ПараметрФизЛицо, ДанныеФизЛица)

	ПараметрФизЛицо.ФИО.Фамилия = ДанныеФизЛица.Фамилия;
	ПараметрФизЛицо.ФИО.Имя     = ДанныеФизЛица.Имя;
	ПараметрФизЛицо.ФИО.Отчество= ДанныеФизЛица.Отчество;
	ПараметрФизЛицо.ДатаРождения= ДанныеФизЛица.ДатаРождения;
	ПараметрФизЛицо.Пол         = ?(ДанныеФизЛица.Пол = Перечисления.ПолФизическогоЛица.Женский, "2", "1");
	ПараметрФизЛицо.МестоРождения = ДанныеФизЛица.МестоРождения;
	ПараметрФизЛицо.СемейноеПоложение = СостояниеВБракеXML(ДанныеФизЛица.СостояниеВБракеКод);

	ПараметрФизЛицо.Гражданство = ДанныеФизЛица.СтранаКод;
	ПараметрФизЛицо.ИНН         = ДанныеФизЛица.ИНН;
	ПараметрФизЛицо.СНИЛС       = ДанныеФизЛица.СтраховойНомерПФР;

	УдостоверениеЛичности = ПараметрФизЛицо.УдостоверениеЛичности;
	УдостоверениеЛичности.КодВидаДокумента = ДанныеФизЛица.ВидДокументаКод;
	УдостоверениеЛичности.СерияДокумента   = ДанныеФизЛица.Серия;
	УдостоверениеЛичности.НомерДокумента   = ДанныеФизЛица.Номер;
	УдостоверениеЛичности.КемВыдан         = ДанныеФизЛица.КемВыдан;
	УдостоверениеЛичности.ДатаВыдачи       = ДанныеФизЛица.ДатаВыдачи;
	УдостоверениеЛичности.КодПодразделения = ДанныеФизЛица.КодПодразделения;

КонецПроцедуры

// Возвращает значение для выгрузки в XML по коду справочника "Состояние в браке".
//
// Параметры:
//	СостояниеВБракеКод - Строка - Код справочника "Состояние в браке"
//
// Возвращаемое значение:
//	Строка - значение для выгрузки в XML-файл заявки.
//
Функция СостояниеВБракеXML(Знач СостояниеВБракеКод)

	СостояниеВБракеКод = СокрЛП(СостояниеВБракеКод);

	Если СостояниеВБракеКод      = "1" Тогда // Никогда не состоял (не состояла в браке)
		Возврат "1"; // Холост/Не замужем
	
	ИначеЕсли СостояниеВБракеКод = "2" Тогда // Состоит в зарегистрированном браке
		Возврат "3"; // Женат/Замужем

	ИначеЕсли СостояниеВБракеКод = "3" Тогда // Состоит в незарегистрированном браке
		Возврат "5"; // Гражданский брак

	ИначеЕсли СостояниеВБракеКод = "4" Тогда // Вдовец (вдова)
		Возврат "4"; // Вдовец/Вдова

	ИначеЕсли СостояниеВБракеКод = "5" Тогда // Разведен (разведена)
		Возврат "2"; // В разводе

	ИначеЕсли СостояниеВБракеКод = "6" Тогда // Разошелся (разошлась)
		Возврат "2"; // В разводе
	
	КонецЕсли;
	
	Возврат ""; // Не заполнено.

КонецФункции

Функция ЦельКредитаXML(ЦельКредита)

	Если ЦельКредита = Перечисления.ЦельКредитования.ПополнениеОборотныхСредств Тогда
		Возврат "1";
	ИначеЕсли ЦельКредита = Перечисления.ЦельКредитования.ИнвестицииВОсновныеСредства Тогда
		Возврат "2";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ВыгрузитьСогласие(СведенияОЗаявке, ТекстHTML)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура());
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".pdf");
	
	ФорматированныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаФорматированногоДокумента.PDF);
	
	// Получаем файл PDF как двоичные данные и удаляем сам временный файл.
	Результат = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		// Запишем в журнал регистрации, но не будет прерывать выполнение.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении временного файла %1: %2'"),
			ИмяВременногоФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкаНаКредит.ВыгрузитьСогласие'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЗаявкаНаКредит,
			СведенияОЗаявке.ДанныеЗаявки.Ссылка,
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьОписаниеОшибки(ОписаниеОшибок, ОписаниеНовойОшибки)

	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
	КонецЕсли;
	ОписаниеОшибок = ОписаниеОшибок + "* " + ОписаниеНовойОшибки;

КонецПроцедуры

// Помещает в регистр для подписания особый вид отчетов, который отправляется только как приложение к заявке на кредит.
//
// Параметры:
//  РезультатВыгрузкиОтчета - см. ЗаполнениеФинОтчетностиВБанки.ВыгрузитьРегламентированныйОтчет() 
//  КешРасшифровокВПользовательскомФормате - Структура - пути, где лежат ранее сохраненные файлы.
//  ПараметрыПомещения - Структура - см. ЗаполнениеФинОтчетностиВБанки.ПараметрыПомещенияДляПодписания()
//	ДополнительныеПараметры - Структура - дополнительные параметры:	
//		- ТребуемыйОтчетЗаемщика - СтрокаТаблицыЗначений - описание требуемого отчета.
//		- СведенияОЗаявке - Структура - см. СведенияОЗаявке()
//		- ВыгружатьXML - Булево - требуется выгружать XML
//		- ФорматИменованияФайлов - Строка - предопределенное значение формата именования файлов -
//        см. СокращенныйПериодБезУИД(), СтандартФНС().
//		- Префикс - Строка - префикс файла.
//		- УникальныеИменаФайловВПакете - Соответствие - ключи - имена файлов в текущем пакете, 
//        значения - количество файлов с таким именем в пакете.
//
// Возвращаемое значение:
//   Структура   - см. ЗаполнениеФинОтчетностиВБанки.РезультатПодготовкиКПодписанию()
//
Функция ПодготовитьРасшифровкуБухгалтерскойОтчетности(РезультатВыгрузкиОтчета, ПараметрыПомещения,
			КешРасшифровокВПользовательскомФормате, ДополнительныеПараметры)
			
	ТребуемыйОтчетЗаемщика			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ТребуемыйОтчетЗаемщика");
	СведенияОЗаявке 				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "СведенияОЗаявке");
	ВыгружатьXML 					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ВыгружатьXML", Ложь);
	ПрефиксФайла					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ПрефиксФайла", "");
	ФорматИменованияФайлов 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ФорматИменованияФайлов", "");
	УникальныеИменаФайловВПакете	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "УникальныеИменаФайловВПакете", Новый Соответствие);
	
	РезультатПодготовки = ЗаполнениеФинОтчетностиВБанки.РезультатПодготовкиКПодписанию();
	РезультатПодготовки.Выгружен = КешРасшифровокВПользовательскомФормате.Количество() > 0;
	Если Не РезультатПодготовки.Выгружен Тогда
		
		ПредставлениеОтчета = ПредставлениеОтчета(
			ТребуемыйОтчетЗаемщика.ВидОтчета,
			ТребуемыйОтчетЗаемщика.КодСчета,
			ТребуемыйОтчетЗаемщика.ДатаНачала,
			ТребуемыйОтчетЗаемщика.ДатаОкончания);
		РезультатПодготовки.Ошибки.Добавить(
			СтрШаблон(НСтр("ru = 'Отсутствуют файлы в пользовательском формате для ""%1""'"), ПредставлениеОтчета));
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	ОтборФайла = Новый Структура;
	ОтборФайла.Вставить("ВидОтчета",     ТребуемыйОтчетЗаемщика.ВидОтчета);
	ОтборФайла.Вставить("ДатаНачала",    ТребуемыйОтчетЗаемщика.ДатаНачала);
	ОтборФайла.Вставить("ДатаОкончания", ТребуемыйОтчетЗаемщика.ДатаОкончания);
	ОтборФайла.Вставить("Счет",          Строка(ТребуемыйОтчетЗаемщика.Счет));
	
	ФайлыВКеше = КешРасшифровокВПользовательскомФормате.НайтиСтроки(ОтборФайла);
	Если ФайлыВКеше.Количество() = 0 И Не ПустаяСтрока(ОтборФайла.Счет) Тогда // возможно в настройках ошибочно задан отбор по счету
		ОтборФайла.Счет = "";
		ФайлыВКеше = КешРасшифровокВПользовательскомФормате.НайтиСтроки(ОтборФайла);
	КонецЕсли;
	Если ФайлыВКеше.Количество() = 0 Тогда
		
		ПредставлениеОтчета = ПредставлениеОтчета(
			ТребуемыйОтчетЗаемщика.ВидОтчета,
			ТребуемыйОтчетЗаемщика.КодСчета,
			ТребуемыйОтчетЗаемщика.ДатаНачала,
			ТребуемыйОтчетЗаемщика.ДатаОкончания);
		РезультатПодготовки.Ошибки.Добавить(
			СтрШаблон(НСтр("ru = 'Среди подготовленных файлов отсутствует файл в пользовательском формате для отчета ""%1""'"), ПредставлениеОтчета));
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	РезультатПодготовки.Выгружен = Истина;
	
	Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	Вложение.Сервис          = ПараметрыПомещения.Сервис;
	Вложение.Организация     = ПараметрыПомещения.Организация;
	Вложение.Предмет         = ПараметрыПомещения.Предмет;
	Вложение.ТипДокумента    = ПараметрыПомещения.ТипДокумента;
	Вложение.Идентификатор   = ПараметрыПомещения.Идентификатор;
	Вложение.БанкиПолучатели = ПараметрыПомещения.Банки;
	Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ПараметрыПомещения.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	Вложение.Зашифровать     = ПараметрыПомещения.Зашифровать;
	Вложение.Подписать       = Истина;
	
	Вложение.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(
		РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки);
		
	// Файл в машиночитаемом представлении (xml) будет лежать вне архива.
	
	СоставнойКлючУникальности = Новый Массив;
	СоставнойКлючУникальности.Добавить(ТребуемыйОтчетЗаемщика.ВидОтчета);
	Если ЗначениеЗаполнено(ТребуемыйОтчетЗаемщика.Счет) Тогда
		СоставнойКлючУникальности.Добавить(СтрЗаменить(СокрЛП(ТребуемыйОтчетЗаемщика.Счет), ".", ""));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТребуемыйОтчетЗаемщика.ДатаНачала) Тогда
		СоставнойКлючУникальности.Добавить(Формат(ТребуемыйОтчетЗаемщика.ДатаНачала, "ДФ=ггггММдд"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТребуемыйОтчетЗаемщика.ДатаОкончания) Тогда
		СоставнойКлючУникальности.Добавить(Формат(ТребуемыйОтчетЗаемщика.ДатаОкончания, "ДФ=ггггММдд"));
	КонецЕсли;

	
	ПараметрыФайлаЗаявки = ЗаявкиНаКредит.НовыеПараметрыИмениФайлаЗаявки();
	ПараметрыФайлаЗаявки.ТипДокумента              = Вложение.ТипДокумента;
	ПараметрыФайлаЗаявки.ТипСодержимого            = Вложение.ТипСодержимого;
	ПараметрыФайлаЗаявки.СведенияОЗаявке           = СведенияОЗаявке;
	ПараметрыФайлаЗаявки.ДатаНачала                = ТребуемыйОтчетЗаемщика.ДатаНачала;
	ПараметрыФайлаЗаявки.ДатаОкончания             = ТребуемыйОтчетЗаемщика.ДатаОкончания;
	ПараметрыФайлаЗаявки.ВидОтчета                 = ТребуемыйОтчетЗаемщика.ВидОтчета;
	ПараметрыФайлаЗаявки.УточнениеНаименования     = СтрЗаменить(СокрЛП(ТребуемыйОтчетЗаемщика.Счет), ".", "");
	ПараметрыФайлаЗаявки.СоставнойКлючУникальности = СоставнойКлючУникальности;
	ПараметрыФайлаЗаявки.ПрефиксФайла              = ПрефиксФайла;
	ПараметрыФайлаЗаявки.ФорматИменованияФайлов    = ФорматИменованияФайлов;
	ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = УникальныеИменаФайловВПакете;
		
	Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки);

	Если ВыгружатьXML Тогда
		Вложение.ИсходныеДанные = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
		Вложение.Сжать          = Вложение.ТипСодержимого <> Перечисления.ТипыСодержимогоФайловОбменаСБанками.zip;
		РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если Не РезультатОперации.Выполнено Тогда
			
			Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатПодготовки.Ошибки, РезультатОперации.Ошибки);
			КонецЕсли;
			Возврат РезультатПодготовки;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлыВКеше.Количество() = 0 Тогда
		
		РезультатПодготовки.Подготовлен = Истина;
		Возврат РезультатПодготовки;
		
	ИначеЕсли ФайлыВКеше.Количество() = 1 Тогда
		
		СоздаемАрхив = Ложь;
		
	Иначе
		
		СоздаемАрхив = Истина;
		
	КонецЕсли;
	
	// Файлы в пользовательском представлении будут лежать в отдельном архиве.
	Если СоздаемАрхив Тогда
		// Имя архива как имя xml-файла. Внутри архива разные имена пользовательских файлов.
		Вложение.ИдентификаторАрхива = ПараметрыПомещения.ИдентификаторАрхива;
		Вложение.ИмяФайлаАрхива = ЗаполнениеФинОтчетностиВБанки.ИмяФайлаПоТипуФайла(Вложение.ИсходноеИмяФайла, "zip");

	Иначе
		// Имя пользовательского файла как имя xml-файла.
		Вложение.ИсходноеИмяФайла = ЗаполнениеФинОтчетностиВБанки.ИмяФайлаПоТипуФайла(
			Вложение.ИсходноеИмяФайла,
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлыВКеше[0].ИмяФайла));
		
	КонецЕсли;
	Для Каждого ФайлОтчета Из ФайлыВКеше Цикл
		
		Если СоздаемАрхив Тогда
			Вложение.ИсходноеИмяФайла = ФайлОтчета.ИмяФайла;
		КонецЕсли;
		Вложение.ИсходныеДанные   = ФайлОтчета.СодержимоеФайла;
		Вложение.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(Вложение.ИсходноеИмяФайла);
		Вложение.Сжать            = Не СоздаемАрхив И Вложение.ТипСодержимого <> Перечисления.ТипыСодержимогоФайловОбменаСБанками.zip;
		РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если Не РезультатОперации.Выполнено Тогда
			
			Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатПодготовки.Ошибки, РезультатОперации.Ошибки);
			КонецЕсли;
			Возврат РезультатПодготовки;
			
		КонецЕсли;
		
	КонецЦикла;
		
	РезультатПодготовки.Подготовлен = Истина;
	Возврат РезультатПодготовки;
	
КонецФункции

Функция ЗапомнитьОтчетыВПользовательскомФормате(РезультатВыгрузкиОтчета)
	
	КешРасшифровокВПользовательскомФормате = Новый ТаблицаЗначений;
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("ВидОтчета",       ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("Счет",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("ДатаНачала",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("ДатаОкончания",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("ИмяФайла",        ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КешРасшифровокВПользовательскомФормате.Колонки.Добавить("СодержимоеФайла", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	СоответствиеВидовИКодов = СоответствиеВидовИКодовОтчетов();
	ОбработкаУспешноЗавершена = Истина;

	Для Каждого ФайлОтчета Из РезультатВыгрузкиОтчета.ФайлыВПользовательскомФормате	Цикл
		
		// ВидФайла имеет формат
		//  "БланкОтчета" + "." + [КодОтчета] + {"_" + [Счет]} + "." + [ДатаНачала] + "_" + [ДатаОкончания] + {"_" + [ПорядоковыйНомер]}
		// Например  "БланкОтчета.TRN_51.20200201_20200229_2" или "БланкОтчета.OSV.20200101_20201231"
		
		ИдентификаторыВида = СтрРазделить(ФайлОтчета.ВидФайла, ".", Ложь);
		Если ИдентификаторыВида.Количество() < 2
		 Или ИдентификаторыВида[0] <> "БланкОтчета" Тогда
		 
			РезультатВыгрузкиОтчета.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось обрабработать отчет вида ""%1""'"), ФайлОтчета.ВидФайла);
			ОбработкаУспешноЗавершена = Ложь;
			Прервать;
		 
		КонецЕсли;
		
		// Определяем вид отчета и отбор по счету.
		Счет = "";
		КодОтчета = ИдентификаторыВида[1];
		ПозицияПодчеркивания = СтрНайти(КодОтчета, "_");
		Если ПозицияПодчеркивания <> 0 Тогда
			
			Счет = Сред(КодОтчета, ПозицияПодчеркивания + 1);
			КодОтчета = Лев(КодОтчета, ПозицияПодчеркивания - 1);
			ПозицияПодчеркивания = СтрНайти(Счет, "_");
			Если ПозицияПодчеркивания <> 0 Тогда
				Счет = Лев(Счет, ПозицияПодчеркивания - 1);
			КонецЕсли;
			
		КонецЕсли;
		ВидыОтчета = СоответствиеВидовИКодов[КодОтчета];
		Если Не ЗначениеЗаполнено(ВидыОтчета) Тогда
			
			РезультатВыгрузкиОтчета.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Отчет с кодом %1 не поддерживается (%2)'"), КодОтчета, ФайлОтчета.ВидФайла);
			ОбработкаУспешноЗавершена = Ложь;
			Прервать;
			
		КонецЕсли;
		
		// Опеределяем период отчета.
		ИдентификаторыВида = СтрРазделить(ИдентификаторыВида[2], "_", Ложь);
		Если ИдентификаторыВида.Количество() < 2 Тогда
			
			РезультатВыгрузкиОтчета.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось определить период отчета вида ""%1""'"), ФайлОтчета.ВидФайла);
			ОбработкаУспешноЗавершена = Ложь;
			Прервать;
			
		КонецЕсли;
		ДатаОкончания = Дата(ИдентификаторыВида[1]);
		ДатаНачала    = Дата(ИдентификаторыВида[0]);
		
		// Удаляем точки из имени файла.
		ИмяФайла = Сред(ФайлОтчета.ИмяФайла, 13); // пропускаем "БланкОтчета."
		ИмяФайлаМассив = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если ИмяФайлаМассив.Количество() > 2 Тогда
			
			РасширениеФайла = ИмяФайлаМассив[ИмяФайлаМассив.ВГраница()];
			ИмяФайлаМассив.Удалить(ИмяФайлаМассив.ВГраница());
			ИмяФайла = СтрСоединить(ИмяФайлаМассив, "_") + "." + РасширениеФайла;
			
		КонецЕсли;

		Для Каждого ВидОтчета Из ВидыОтчета Цикл
			
			ФайлВКеше = КешРасшифровокВПользовательскомФормате.Добавить();
			ФайлВКеше.ИмяФайла        = ИмяФайла;
			ФайлВКеше.СодержимоеФайла = ФайлОтчета.СодержимоеФайла;
			ФайлВКеше.ДатаОкончания   = ДатаОкончания;
			ФайлВКеше.ДатаНачала      = ДатаНачала;
			ФайлВКеше.Счет            = Счет;
			ФайлВКеше.ВидОтчета       = ВидОтчета;
			
		КонецЦикла;

	КонецЦикла;
	
	Если ОбработкаУспешноЗавершена Тогда
		КешРасшифровокВПользовательскомФормате.Индексы.Добавить("ДатаНачала, ДатаОкончания, ВидОтчета, Счет");
	Иначе
		КешРасшифровокВПользовательскомФормате.Очистить();
	КонецЕсли;
	
	Возврат КешРасшифровокВПользовательскомФормате;
	
КонецФункции

// Отправляет подписанные файлы.
//
Функция ОтправитьФайлы(Параметры)

	КлючеваяОперация = "";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда
		КлючеваяОперация = "ОтправкаЗаявкаНаКредит";
	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаЛизинг.ЗаявкаНаЛизинг Тогда
		КлючеваяОперация = "ОтправкаЗаявкаНаЛизинг";
	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		КлючеваяОперация = "ОтправкаАкцептаЗаявкаНаКредит";
	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаЛизинг.АкцептКлиента Тогда
		КлючеваяОперация = "ОтправкаАкцептаЗаявкаНаЛизинг";
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Транзакции");
	Результат.Вставить("НеОтправленныеТранзакции");
	
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "транзакции";
	СостояниеПрогресса.КоличествоДействий = ?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество() + 1, 33);
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Формирование транзакций отправки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);

	// Создание транзакций обмена с банками.
	ПараметрыТранзакций = УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();
	ПараметрыТранзакций.ИдентификаторВоВременномХранилище = Параметры.ИдентификаторВременногоХранилищаТранзакций;
	ПараметрыТранзакций.Сервис              = Параметры.СервисОбменаСБанками;
	Если Параметры.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит Тогда
		ПараметрыТранзакций.ТипДокументооборота = Перечисления.ДокументооборотыОбменаСБанками.ЗаявкаНаКредит;
	Иначе
		ПараметрыТранзакций.ТипДокументооборота = Перечисления.ДокументооборотыОбменаСБанками.ЗаявкаНаЛизинг;
	КонецЕсли;
	ПараметрыТранзакций.ПараметрыПрогрессаВыполнения = СостояниеПрогресса.ДополнительныеПараметры;
	
	ПараметрыТранзакций.Предмет                     = Параметры.ПредметОбмена; // предмет обмена с банками
	ПараметрыТранзакций.ДокументооборотыПолучателей = Параметры.ДокументооборотыПолучателей;
	ПараметрыТранзакций.ТипТранзакции               = Параметры.ТипТранзакции;
	ПараметрыТранзакций.ОтпечатокСертификатаПодписи = Параметры.ОтпечатокСертификата;
	ПараметрыТранзакций.Организация =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПредметОбмена, "Организация"); // организация-абонент

	РезультатОперации = УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(ПараметрыТранзакций);
	Если Не РезультатОперации.Выполнено Тогда
			
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
		
	// Отправка подготовленных транзакций.
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "отправка";
	СостояниеПрогресса.КоличествоДействий = РезультатОперации.Транзакции.Количество() + 1;
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Отправка файлов...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	Результат.Транзакции = РезультатОперации.Транзакции;

	РезультатОперации = УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(
		Параметры.СервисОбменаСБанками,
		РезультатОперации.Транзакции,
		СостояниеПрогресса.ДополнительныеПараметры);
	Результат.НеОтправленныеТранзакции = РезультатОперации.НеОтправленныеТранзакции;
	Если Не РезультатОперации.Выполнено Тогда
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;

	Результат.Выполнено = Истина;
	
	Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			КлючеваяОперация,
			ВремяНачала,
			?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество(), 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные с XML-текстом заявки на кредит.
//
Функция ВыгрузитьЗаявкуНаКредитXML(ИмяФайлаЗаявки, СведенияОЗаявке, КредитныйПродукт, СведенияОБанке,
									ДополнительныеПоказатели, ДополнительныеФайлы)

	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	ДанныеИП           = СведенияОЗаявке.ДанныеИП;
	ДанныеРуководителя = СведенияОЗаявке.ДанныеРуководителя;
	
	ПараметрыВыгрузки = ЗаявкиНаКредит.НовыеСведенияЗаявкиНаКредит();
	ПараметрыВыгрузки.ИдентификаторФайла = ИмяФайлаЗаявки;
	
	// Общие реквизиты заявки.
	ПараметрыВыгрузки.СервисОбменаСБанками            = ДанныеЗаявки.СервисОбменаСБанками;
	ПараметрыВыгрузки.ИдентификаторЗаявки             = XMLСтрока(ДанныеЗаявки.Ссылка);
	ПараметрыВыгрузки.ДатаЗаявки                      = ДанныеЗаявки.Дата;
	ПараметрыВыгрузки.СуммаКредита                    = ДанныеЗаявки.СуммаДокумента;
	ПараметрыВыгрузки.СрокКредита                     = ДанныеЗаявки.СрокКредита;
	ПараметрыВыгрузки.ЦельКредита                     = ЦельКредитаXML(ДанныеЗаявки.ЦельКредита);
	ПараметрыВыгрузки.ИдентификаторКредитногоПродукта = КредитныйПродукт.ИдентификаторКредитногоПродукта;
	
	// Условия для лизинга.
	ПараметрыВыгрузки.ТипПредметаЛизинга              = ДанныеЗаявки.ТипПредметаЛизинга;
	ПараметрыВыгрузки.ОписаниеПредметаЛизинга         = ДанныеЗаявки.ОписаниеПредметаЛизинга;
	ПараметрыВыгрузки.ОписаниеПоставщика              = ДанныеЗаявки.ОписаниеПоставщика;
	ПараметрыВыгрузки.СуммаАванса                     = ДанныеЗаявки.СуммаАванса;
	
	// Реквизиты банка-получателя.
	Банк = ПараметрыВыгрузки.Банк;
	Банк.ИНН = СведенияОБанке.ИННБанка;
	Банк.Наименование = СведенияОБанке.Наименование;
	
	// Общие реквизиты заемщика.
	ПараметрыВыгрузки.ЮридическоеФизическоеЛицо = ДанныеЗаемщика.ЮридическоеФизическоеЛицо;
	ПараметрыВыгрузки.ОКВЭД                     = ДанныеЗаемщика.КодОКВЭД2;
	ПараметрыВыгрузки.ОКОПФ                     = ДанныеЗаемщика.КодОКОПФ;
	ПараметрыВыгрузки.ДатаРегистрации 	        = ДанныеЗаемщика.ДатаРегистрации;
	ПараметрыВыгрузки.ДатаФактНачалаДеят        = ДанныеЗаявки.ДатаФактическогоНачалаВеденияБизнеса;
	ПараметрыВыгрузки.ДатаНачалаУчета 	        = ДанныеЗаявки.ДатаНачалаУчетаВПрограмме;
	ПараметрыВыгрузки.ДатаОтчетности 	        = КонецМесяца(ДанныеЗаявки.ПериодРегистрации);
	ПараметрыВыгрузки.СистемыНО                 = СистемыНалогообложенияXML(СведенияОЗаявке);
	ПараметрыВыгрузки.ДополнительныеПоказатели  = ДополнительныеПоказатели;
	ПараметрыВыгрузки.ДополнительныеФайлы       = ДополнительныеФайлы;
	
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Данные об индивидуальном предпринимателе.
		ОтправительИП                 = ПараметрыВыгрузки.ОтправительИП;
		ОтправительИП.ОГРН            = ДанныеЗаемщика.ОГРН;
		
		// Личные данные предпринимателя.
		Руководитель = ПараметрыВыгрузки.Руководитель;
		ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(Руководитель, ДанныеИП);

		// Контактная информация предпринимателя из справочника Организации.
		Руководитель.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		Руководитель.Телефон     = ДанныеЗаемщика.Телефоны;
		Руководитель.ДопТелефон  = ДанныеРуководителя.ТелефонМобильныйФизическиеЛица;
		Руководитель.ЭлПочта     = ДанныеЗаемщика.Email;
		
	Иначе
		// Данные о юридическом лице.
		ОтправительЮЛ                 = ПараметрыВыгрузки.ОтправительЮЛ;
		ОтправительЮЛ.Наименование    = ДанныеЗаемщика.ПолноеНаименование;
		ОтправительЮЛ.СокрНаименование = ДанныеЗаемщика.СокращенноеНаименование;
		ОтправительЮЛ.ИНН             = ДанныеЗаемщика.ИНН;
		ОтправительЮЛ.КПП             = ДанныеЗаемщика.КПП;
		ОтправительЮЛ.Нерезидент      = Число(ДанныеЗаемщика.Нерезидент);
		ОтправительЮЛ.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		ОтправительЮЛ.ОГРН            = ДанныеЗаемщика.ОГРН;
		
		ОтправительЮЛ.ПолноеНаименованиеДоРеорганизации = ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации;
		ОтправительЮЛ.СокращенноеНаименованиеДоРеорганизации = ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации;
		
		// Личные данные руководителя юридического лица.
		Руководитель = ПараметрыВыгрузки.Руководитель;
		ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(Руководитель, ДанныеРуководителя);

		// Контактная информация предпринимателя из справочника ФизическиеЛица.
		Руководитель.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеРуководителя.ЗначениеJSONАдресПоПропискеФизическиеЛица);
		Руководитель.Телефон     = ДанныеРуководителя.ТелефонРабочийФизическиеЛица;
		Руководитель.ДопТелефон  = ДанныеРуководителя.ТелефонМобильныйФизическиеЛица;
		Руководитель.ЭлПочта     = ДанныеРуководителя.EMailФизическиеЛица;
		
		// Данные об учредителях юридического лица.
		ОтправительЮЛ.СоставУчредителей = ДанныеЗаявки.СоставУчредителей;
		// Если банку не требуются данные об учредителях, то не передаем их в процедуры выгрузки.
		ОтправительЮЛ.Учредители = ?(КредитныйПродукт.ТребуютсяДанныеУчредителей,
			СведенияОЗаявке.Учредители, СведенияОЗаявке.Учредители.СкопироватьКолонки());
		
	КонецЕсли;
	
	// Контактное лицо по заявке.
	Если ЗначениеЗаполнено(ДанныеЗаявки.КонтактноеЛицо) Тогда
		КонтактноеЛицо = ПараметрыВыгрузки.КонтактноеЛицо;
		КонтактноеЛицо.ФИО.Фамилия = ДанныеЗаявки.КонтактноеЛицоФамилия;
		КонтактноеЛицо.ФИО.Имя     = ДанныеЗаявки.КонтактноеЛицоИмя;
		КонтактноеЛицо.ФИО.Отчество= ДанныеЗаявки.КонтактноеЛицоОтчество;
		КонтактноеЛицо.Должность   = ДанныеЗаявки.ДолжностьКонтактногоЛицаПредставление;
		КонтактноеЛицо.Телефон     = ДанныеЗаявки.ТелефонКонтактногоЛица;
		КонтактноеЛицо.ЭлПочта     = ДанныеЗаявки.АдресЭПКонтактногоЛица;
	КонецЕсли;
	
	Возврат ЗаявкиНаКредит.ЭлектронноеПредставлениеСообщения("Заявка", ПараметрыВыгрузки);

КонецФункции

// Возвращает двоичные данные заявки на кредит в формате MS Excel.
//
Функция ВыгрузитьЗаявкуНаКредитExcel(СведенияОЗаявке, КредитныйПродукт, СведенияОБанке,
										ДополнительныеПоказатели, ДополнительныеФайлы)

	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	ДанныеИП           = СведенияОЗаявке.ДанныеИП;
	ДанныеРуководителя = СведенияОЗаявке.ДанныеРуководителя;
	
	Это1СКредит        = ДанныеЗаявки.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Это1СЛизинг        = ДанныеЗаявки.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг;
	
	Макет = ПолучитьМакет("Анкета");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	//////////////////////////////
	// Шапка
	Область = Макет.ПолучитьОбласть("Шапка");
	Если СведенияОБанке.Логотип.Размер() > 0 Тогда
		Область.Рисунки.Логотип.Картинка = Новый Картинка(СведенияОБанке.Логотип);;
	КонецЕсли;
	
	// Реквизиты банка
	ОписаниеБанка = Новый Массив;
	ОписаниеБанка.Добавить(СведенияОБанке.ПолноеНаименованиеБанка);

	КодыБанка = Новый Массив;
	Если ЗначениеЗаполнено(СведенияОБанке.ИННБанка) И ЗначениеЗаполнено(СведенияОБанке.КППБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ИНН / КПП %1 / %2'"), СведенияОБанке.ИННБанка, СведенияОБанке.КППБанка));
	ИначеЕсли ЗначениеЗаполнено(СведенияОБанке.ИННБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ИНН %1'"), СведенияОБанке.ИННБанка));
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОБанке.ОГРНБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ОГРН %1'"), СведенияОБанке.ОГРНБанка));
	КонецЕсли;

	Если КодыБанка.Количество() > 0 Тогда
		ОписаниеБанка.Добавить(СтрСоединить(КодыБанка, " "));
	КонецЕсли;
	ОписаниеБанка.Добавить(СведенияОБанке.ЮридическийАдресБанка);
	
	Область.Параметры.Банк = СтрСоединить(ОписаниеБанка, Символы.ПС);
	
	// Сервис
	Область.Параметры.СервисОбменаСБанками = ДанныеЗаявки.СервисОбменаСБанками;
	// Дата заявки
	Область.Параметры.ДатаЗаявки = Формат(ДанныеЗаявки.Дата, "ДФ=дд.ММ.гггг");
	
	ТабличныйДокумент.Вывести(Область);
	
	//////////////////////////////
	// Кредитный продукт
	Область = Макет.ПолучитьОбласть("ПродуктШапка");
	ТабличныйДокумент.Вывести(Область);
		
	Если ЗначениеЗаполнено(КредитныйПродукт.Наименование) Тогда
		Область = Макет.ПолучитьОбласть("ПродуктНаименование");
		Область.Параметры.КредитныйПродукт = КредитныйПродукт.Наименование;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Цель для заявок на кредит
	Если Это1СКредит Тогда
		Область = Макет.ПолучитьОбласть("ПродуктЦель");
		Область.Параметры.ЦельКредита = ДанныеЗаявки.ЦельКредита;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Предмет лизинга
	Если Это1СЛизинг Тогда
		Область = Макет.ПолучитьОбласть("ПродуктПредметЛизинга");
		Область.Параметры.ТипПредметаЛизинга      = ДанныеЗаявки.ТипПредметаЛизингаНаименование;
		Область.Параметры.ОписаниеПредметаЛизинга = ДанныеЗаявки.ОписаниеПредметаЛизинга;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;

	// Сумма и срок
	Область = Макет.ПолучитьОбласть("ПродуктСуммаСрок");
	Если Это1СЛизинг Тогда
		Область.Параметры.СинонимСуммыДокумента = НСтр("ru = 'Стоимость с НДС'");
	Иначе
		Область.Параметры.СинонимСуммыДокумента = НСтр("ru = 'Сумма'");
	КонецЕсли;
	Область.Параметры.СуммаДокумента = ДанныеЗаявки.СуммаДокумента;
	Область.Параметры.СрокКредита    = ДанныеЗаявки.СрокКредита;
	ТабличныйДокумент.Вывести(Область);
	
	// Желаемые параметры договора для лизинга
	Если Это1СЛизинг Тогда
		Область = Макет.ПолучитьОбласть("ПродуктПрочееЛизинг");
		Область.Параметры.СуммаАванса        = ДанныеЗаявки.СуммаАванса;
		Область.Параметры.ОписаниеПоставщика = ДанныеЗаявки.ОписаниеПоставщика;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Отбивка
	Область = Макет.ПолучитьОбласть("ПродуктОтступ");
	ТабличныйДокумент.Вывести(Область);
	
	// Общие показатели деятельности для юридических лиц и ИП
	ОбластьПоказатели = Макет.ПолучитьОбласть("ПоказателиДеятельности");
	ОбластьПоказатели.Параметры.СистемаНалогообложения = 
		ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(ДанныеЗаявки.Организация);
	ОбластьПоказатели.Параметры.ДатаФактическогоНачалаВеденияБизнеса = ДанныеЗаявки.ДатаФактическогоНачалаВеденияБизнеса;
	ОбластьПоказатели.Параметры.НазваниеПрограммы                    = РегламентированнаяОтчетность.НазваниеПрограммы();
	ОбластьПоказатели.Параметры.ДатаНачалаУчетаВПрограмме            = ДанныеЗаявки.ДатаНачалаУчетаВПрограмме;
	ОбластьПоказатели.Параметры.ДатаОтчетности                       = КонецМесяца(ДанныеЗаявки.ПериодРегистрации);
	
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
	    // Индивидуальный предприниматель
		Область = Макет.ПолучитьОбласть("РеквизитыИП");
		ЗаполнитьОбщиеПараметрыОбластиФизЛица(Область, ДанныеИП);
		
		// Регистрационные данные
		Область.Параметры.ДатаРегистрации       = ДанныеЗаемщика.ДатаРегистрации;
		Область.Параметры.ОГРН                  = ДанныеЗаемщика.ОГРН;
		Область.Параметры.КодПоОКВЭД            = ДанныеЗаемщика.КодОКВЭД2;
		Область.Параметры.НаименованиеОКВЭД     = ДанныеЗаемщика.НаименованиеОКВЭД2;
		Область.Параметры.КодПоОКОПФ            = ДанныеЗаемщика.КодОКОПФ;
		Область.Параметры.НаименованиеОКОПФ     = ДанныеЗаемщика.НаименованиеОКОПФ;
		
		// Контактные данные
		СведенияОбАдресе                        = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		Область.Параметры.Адрес                 = СведенияОбАдресе.Представление;
		Область.Параметры.Телефон               = СоединитьСтроки(ДанныеЗаемщика.Телефоны, ДанныеРуководителя.ТелефонМобильныйФизическиеЛица);
		Область.Параметры.ЭлектроннаяПочта      = ДанныеЗаемщика.Email;
		
	    ТабличныйДокумент.Вывести(Область);
	    ТабличныйДокумент.Вывести(ОбластьПоказатели);
	Иначе
		// Юридическое лицо
		Область = Макет.ПолучитьОбласть("РеквизитыЮЛ");
		Область.Параметры.ПолноеНаименование      = ДанныеЗаемщика.ПолноеНаименование;
		Область.Параметры.СокращенноеНаименование = ДанныеЗаемщика.СокращенноеНаименование;
	
		Если ЗначениеЗаполнено(ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации)
			ИЛИ ЗначениеЗаполнено(ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации) Тогда
			Область.Параметры.ПолноеНаименованиеДоРеорганизации      = ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации;
			Область.Параметры.СокращенноеНаименованиеДоРеорганизации = ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации;
		Иначе
			Область.Параметры.ПолноеНаименованиеДоРеорганизации      = "-";
			Область.Параметры.СокращенноеНаименованиеДоРеорганизации = "-";
		КонецЕсли;
		
		Область.Параметры.ИНН                   = ДанныеЗаемщика.ИНН;
		Область.Параметры.КПП                   = ДанныеЗаемщика.КПП;
		Область.Параметры.ДатаРегистрации       = ДанныеЗаемщика.ДатаРегистрации;
		Область.Параметры.ОГРН                  = ДанныеЗаемщика.ОГРН;
		Область.Параметры.КодПоОКВЭД            = ДанныеЗаемщика.КодОКВЭД2;
		Область.Параметры.НаименованиеОКВЭД     = ДанныеЗаемщика.НаименованиеОКВЭД2;
		Область.Параметры.КодПоОКОПФ            = ДанныеЗаемщика.КодОКОПФ;
		Область.Параметры.НаименованиеОКОПФ     = ДанныеЗаемщика.НаименованиеОКОПФ;
		Область.Параметры.Нерезидент            = ДанныеЗаемщика.Нерезидент;
		
		// Контактная информация
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		Область.Параметры.Адрес                 = СведенияОбАдресе.Представление;
		Область.Параметры.Телефон               = СоединитьСтроки(ДанныеЗаемщика.Телефоны, ДанныеРуководителя.ТелефонМобильныйФизическиеЛица);
		Область.Параметры.ЭлектроннаяПочта      = ДанныеЗаемщика.Email;

	    ТабличныйДокумент.Вывести(Область);
	    ТабличныйДокумент.Вывести(ОбластьПоказатели);
		
	    // Руководитель юридического лица
	    Область = Макет.ПолучитьОбласть("Руководитель");
	    ЗаполнитьОбщиеПараметрыОбластиФизЛица(Область, ДанныеРуководителя);

		// Контактные данные руководителя
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеРуководителя.ЗначениеJSONАдресПоПропискеФизическиеЛица);
		Область.Параметры.Адрес                 = СведенияОбАдресе.Представление;
		Область.Параметры.Телефон               = СоединитьСтроки(
			ДанныеРуководителя.ТелефонРабочийФизическиеЛица, ДанныеРуководителя.ТелефонМобильныйФизическиеЛица);
		Область.Параметры.ЭлектроннаяПочта      = ДанныеРуководителя.EMailФизическиеЛица;
	    
	    ТабличныйДокумент.Вывести(Область);
	    
	    // Учредители-физичекие лица.
		Если КредитныйПродукт.ТребуютсяДанныеУчредителей
		   И (СведенияОЗаявке.Учредители.Количество() > 0
			Или ДанныеЗаявки.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель) Тогда
			
	    	Область = Макет.ПолучитьОбласть("УчредителиШапка");
	    	ТабличныйДокумент.Вывести(Область);
	    	
	    	Если ДанныеЗаявки.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель Тогда
	    		Область = Макет.ПолучитьОбласть("РуководительЕдинственныйУчредитель");
	    		ТабличныйДокумент.Вывести(Область);
	    	Иначе
	    		НомерПоПорядку = 0;
	    		
	    		Область = Макет.ПолучитьОбласть("Учредитель");
	    		Для каждого СтрокаУчредителя Из СведенияОЗаявке.Учредители Цикл
	    			НомерПоПорядку                   = НомерПоПорядку + 1;
	    			Область.Параметры.НомерПоПорядку = НомерПоПорядку;
	    			
	    			ЗаполнитьОбщиеПараметрыОбластиФизЛица(Область, СтрокаУчредителя);
					Область.Параметры.Телефон = СоединитьСтроки(СтрокаУчредителя.ТелефонРабочий, СтрокаУчредителя.ТелефонМобильный);
	    			
	    			ТабличныйДокумент.Вывести(Область);
	    		КонецЦикла;
	    	КонецЕсли;
	    	
	    КонецЕсли;
	    
	КонецЕсли;
	
	// Дополнительные показатели, если они есть в заявке.
	Если ДополнительныеПоказатели.Количество() > 0 Тогда
	
		// Прочитаем настройки для банка про дополнительные показатели для кредитного продукта из заявки.
		ДополнительныеПоказателиXDTO = НайтиДополнительныеПоказателиXDTOКредитногоПродукта(
			ДанныеЗаявки.СервисОбменаСБанками,
			СведенияОБанке.Банк,
			КредитныйПродукт.ИдентификаторКредитногоПродукта,
			ДанныеЗаявки.Дата);

		Если ДополнительныеПоказателиXDTO <> Неопределено Тогда
		
			Область = Макет.ПолучитьОбласть("ДопПоказателиШапка");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("ДопПоказателиСтрока");
			
			// Выводим дополнительные показатели в том порядке, как они заданы в настройках для банка в сервисе.
			Для каждого ДополнительныйПоказательXDTO  Из ДополнительныеПоказателиXDTO.Показатель Цикл
				
				// Найдем фактическое значение показателя, указанное в заявке.
				ДополнительныйПоказатель = Неопределено;
				Для каждого ТекущийДополнительныйПоказатель Из ДополнительныеПоказатели Цикл
					Если ТекущийДополнительныйПоказатель.Идентификатор = ДополнительныйПоказательXDTO.Идентификатор Тогда
						ДополнительныйПоказатель = ТекущийДополнительныйПоказатель;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДополнительныйПоказатель = Неопределено Тогда
					// По какой-то причине дополнительный показатель из настроек банка не включен в текущую заявку, ничего не выводим.
					Продолжить;
				КонецЕсли;

				// Обнулим старые параметры области макета.
				Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
					Область.Параметры.Установить(Индекс, Неопределено);
				КонецЦикла;
			
				// Выводим представление для показателя и его значения в настройках банка.
				Область.Параметры.Показатель = ДополнительныйПоказательXDTO.КраткоеПредставление;

				Если ДополнительныйПоказатель.ДанныеОтсутствуют Тогда
					Область.Параметры.Значение = НСтр("ru = 'Данные отсутствуют'");
				Иначе
					Если ДополнительныйПоказательXDTO.ТипПоказателя = "Перечисление" Тогда
						// Найдем представление для выбранного значения перечисления.
						ВыбранноеЗначение = ВРег(ДополнительныйПоказатель.Значение);
						ВыбраннноеЗначениеПеречисленияXDTO = Неопределено;
						Для каждого ЗначениеПеречисленияXDTO Из ДополнительныйПоказательXDTO.ЗначенияПеречисления Цикл
							Если ВыбранноеЗначение = ВРег(ЗначениеПеречисленияXDTO.Идентификатор) Тогда
								ВыбраннноеЗначениеПеречисленияXDTO = ЗначениеПеречисленияXDTO;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ВыбраннноеЗначениеПеречисленияXDTO <> Неопределено Тогда
							Область.Параметры.Значение = ВыбраннноеЗначениеПеречисленияXDTO.КраткоеПредставление;
						Иначе
							// В списке значений перечисления не нашли подходящего, выводим просто его идентификатор.
							Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
						КонецЕсли;

					ИначеЕсли ДополнительныйПоказательXDTO.ТипПоказателя = "Булево" Тогда
						// Булево  может сохраняться в виде числа или строк, при выводе в файл показываем его все равно как булево.
						ФорматнаяСтрока = "БЛ='Нет'; БИ='Да'";
						Если ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Число") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение <> 0, ФорматнаяСтрока);
						ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Строка") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение <> "0", ФорматнаяСтрока);
						ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Булево") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение, ФорматнаяСтрока);
						Иначе
							// Выводим "как есть".
							Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
						КонецЕсли;

					ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Дата") Тогда
						Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение, "ДФ=дд.ММ.гггг");
						
					Иначе
						// Строки и числа выводим "как есть".
						Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Область);
			
			КонецЦикла;
			
			// Отбивка
			Область = Макет.ПолучитьОбласть("ДопПоказателиПодвал");
			ТабличныйДокумент.Вывести(Область);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Файлы, которые прикладываются к заявке.
	Область = Макет.ПолучитьОбласть("ДопФайлыШапка");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ДопФайлыСтрока");
	
	ГруппаАнкета = Документы.ЗаявкаНаКредит.ГруппаФайловПоПризнаку(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика);
	ГруппаПоУмолчанию = Документы.ЗаявкаНаКредит.ГруппаФайловПоПризнаку();
	ПорядокВывода = Документы.ЗаявкаНаКредит.ПорядокВыводаФайлов();
	Для Каждого Идентификатор Из ПорядокВывода Цикл
		
		Если Идентификатор = ГруппаАнкета Тогда
			Продолжить;
		ИначеЕсли Идентификатор = ГруппаПоУмолчанию Тогда
			ЭтоВнешниеФайлы = Истина;
		Иначе
			ЭтоВнешниеФайлы = Ложь;
		КонецЕсли;
		ГруппаФайлов = ДополнительныеФайлы[Идентификатор];
		
		ПредыдущееКраткоеПредставление = "";
		Если ЭтоВнешниеФайлы Тогда
		
			ПредыдущийИдентификатор = "";
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				КраткоеПредставление = СтрШаблон(НСтр("ru = '%1:'"), ДопФайл.КраткоеПредставление);
				Если ПредыдущийИдентификатор <> ДопФайл.Идентификатор Тогда
					
					Область.Параметры.КраткоеПредставление = КраткоеПредставление;
					ПредыдущийИдентификатор = ДопФайл.Идентификатор;
					
				Иначе
					
					Область.Параметры.КраткоеПредставление = "";
					
				КонецЕсли;
				ПредыдущееКраткоеПредставление = КраткоеПредставление;
				
				Область.Параметры.ИмяФайла = ?(ДопФайл.ДанныеОтсутствуют, НСтр("ru = 'Данные отсутствуют'"), ДопФайл.ИмяФайла);
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
		Иначе
			
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				КраткоеПредставление = СтрШаблон(НСтр("ru = '%1:'"), ДопФайл.КраткоеПредставление);
				Область.Параметры.КраткоеПредставление = ?(ПредыдущееКраткоеПредставление <> КраткоеПредставление, КраткоеПредставление, "");
				ПредыдущееКраткоеПредставление = КраткоеПредставление;
				
				Область.Параметры.ИмяФайла = ДопФайл.ИмяФайла;
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отбивка
	Область = Макет.ПолучитьОбласть("ДопПоказателиПодвал");
	ТабличныйДокумент.Вывести(Область);
	
	// Контактное лицо
	Если ЗначениеЗаполнено(ДанныеЗаявки.КонтактноеЛицо) Тогда
	
		Область = Макет.ПолучитьОбласть("КонтактноеЛицо");
		Область.Параметры.ФИО = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеЗаявки.КонтактноеЛицоФамилия,
			ДанныеЗаявки.КонтактноеЛицоИмя,
			ДанныеЗаявки.КонтактноеЛицоОтчество,
			Ложь);
		Область.Параметры.Должность        = ДанныеЗаявки.ДолжностьКонтактногоЛицаПредставление;
		Область.Параметры.Телефон          = ДанныеЗаявки.ТелефонКонтактногоЛица;
		Область.Параметры.ЭлектроннаяПочта = ДанныеЗаявки.АдресЭПКонтактногоЛица;

		ТабличныйДокумент.Вывести(Область);
	
	КонецЕсли;
	
	// Сохраняем в Excel и передаем двоичные данные.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанные;

КонецФункции

Процедура ЗаполнитьОбщиеПараметрыОбластиФизЛица(Область, ДанныеФизЛица)

	ЗаполнитьЗначенияСвойств(Область.Параметры, ДанныеФизЛица);

	Область.Параметры.ФИО = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
		ДанныеФизЛица.Фамилия, ДанныеФизЛица.Имя, ДанныеФизЛица.Отчество, Ложь);

КонецПроцедуры

Функция СоединитьСтроки(Строка1, Строка2)

	Результат = Новый Массив;
	Если ЗначениеЗаполнено(Строка1) Тогда
		Результат.Добавить(Строка1);
	КонецЕсли;

	Если ЗначениеЗаполнено(Строка2) Тогда
		Результат.Добавить(Строка2);
	КонецЕсли;

	Возврат СтрСоединить(Результат, ", ");

КонецФункции

// Помещает во временное хранилище транзакций обмена с банками файлы заявки и возвращает их идентификатор отправки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//	КредитныеПродукты - ТаблицаЗначений - Кредитные продукты, по которым отправляется заявка. Колонки таблицы:
//		* Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк-получатель
//		* ИдентификаторКредитногоПродукта - Строка - Идентификатор кредитного продукта
//  ПредставленияДополнительныхФайлов - СписокЗначений - краткие представления дополнительных файлов к заявке.
//	ЭтоЭлектроннаяПодписьВМоделиСервиса - Булево - Истина, если используется облачный сертификат.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//      * Выполнено - Булево - признак успешного выполнения шага.
//		* ИдентификаторВременногоХранилищаТранзакций - Строка - Уникальный идентификатор, под которым во временном
//                                                              хранилище транзакций обмена помещены данные.
//		* ОписаниеОшибки - Строка - Текст ошибки, если были ошибки в процессе обмена.
//		* ТаблицаСообщений - Массив структур - содержит список ошибок в отчетности, прикрепляемой к заявке.
// 
Функция ПодготовитьЗаявкуДляОтправки(ЗаявкаНаКредит, КредитныеПродукты, ПредставленияДополнительныхФайлов, ЭтоЭлектроннаяПодписьВМоделиСервиса)

	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаСообщений", Новый Массив); // Для передачи на клиент требуется преобразование таблицы значений БРО в массив структур.
	Результат.Вставить("ИдентификаторВременногоХранилищаТранзакций", Строка(Новый УникальныйИдентификатор()));
	
	СведенияОЗаявке = СведенияОЗаявке(ЗаявкаНаКредит);
	
	СведенияОЗаемщике = НовыеСведенияОЗаемщикеДляОтчетности();
	СведенияОЗаемщике.СервисОбменаСБанками      = СведенияОЗаявке.ДанныеЗаявки.СервисОбменаСБанками;
	СведенияОЗаемщике.Организация               = СведенияОЗаявке.ДанныеЗаявки.Организация;
	СведенияОЗаемщике.ЮридическоеФизическоеЛицо = СведенияОЗаявке.ДанныеЗаемщика.ЮридическоеФизическоеЛицо;
	СведенияОЗаемщике.ДатаРегистрации           = СведенияОЗаявке.ДанныеЗаемщика.ДатаРегистрации;
	СведенияОЗаемщике.ПериодРегистрации         = СведенияОЗаявке.ДанныеЗаявки.ПериодРегистрации;
	СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме = СведенияОЗаявке.ДанныеЗаявки.ДатаНачалаУчетаВПрограмме;
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(КредитныеПродукты, "Банк", Истина);
	
	ТребуемаяОтчетностьЗаемщика = ТребуемаяОтчетностьЗаемщика(
		СведенияОЗаемщике, СведенияОЗаявке.ДанныеЗаявки.Дата, КредитныеПродукты);
		
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
	// Заявка в каждый банк (xml и Excel) + Согласие в каждый банк + Каждый отчет.
	СостояниеПрогресса.КоличествоДействий = 3 * Банки.Количество() + ТребуемаяОтчетностьЗаемщика.Количество();
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(
		СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Подготовка информации заявки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
		
	ОписаниеСохраняемыхДанных = Новый Структура;
	ОписаниеСохраняемыхДанных.Вставить("СведенияОЗаявке",             СведенияОЗаявке);
	ОписаниеСохраняемыхДанных.Вставить("ТребуемаяОтчетностьЗаемщика", ТребуемаяОтчетностьЗаемщика);
	ОписаниеСохраняемыхДанных.Вставить("ДополнительныеФайлы",         ДополнительныеФайлыПоВидам());
	ОписаниеСохраняемыхДанных.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", ЭтоЭлектроннаяПодписьВМоделиСервиса);
	// Будет дополнена колонками при вызове ОписаниеФорматовФайловЗаявки().
	ОписаниеСохраняемыхДанных.Вставить("КредитныеПродукты",           КредитныеПродукты);
	
	// Информация для присвоения имен файлам, входящим в пакет заявки.
	// В ДополнительныеФайлы будут добавлены файлы анкеты и согласий на передачу персональных данных.
	ОписаниеФорматов = ОписаниеФорматовФайловЗаявки(ОписаниеСохраняемыхДанных, Результат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В ДополнительныеФайлы будут добавлены имена (но пока не данные) внешних файлов (загруженных с диска
	// или присоединенных к другим объектом базы).
	ДобавитьОписанияДополнительныхФайлов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, ПредставленияДополнительныхФайлов);
	
	// Заявка в каждый банк (xml и Excel) + Согласие в каждый банк + Каждый отчет + Каждый внешний файл.
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	СостояниеПрогресса.КоличествоДействий = 3 * Банки.Количество() + ТребуемаяОтчетностьЗаемщика.Количество()
		+ ДополнительныеФайлы.Количество();
	
	// Список счетов из плана счетов общий для всех банков, но может быть несколько префиксов и/или форматов именования.
	// В ДополнительныеФайлы будут добавлены имена файлов с планом счетов.
	ПодготовитьФайлыДляОтправки_СписокСчетов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Отчетность заемщика.
	// В ДополнительныеФайлы будут добавлены имена файлов отчетности.
	ПодготовитьФайлыДляОтправки_ОтчетностьЗаемщика(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дополнительные файлы.
	// Только сейчас извлекаются данные внешних файлов и помещаются в регистр сведений для отправки.
	ПодготовитьФайлыДляОтправки_ДополнительныеФайлы(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	
	// Тексты заявки и согласия.
	// Имена всех подготовленных файлов попадут в Excel и xml в порядке, задаваемом функцией ПорядокВыводаФайлов().
	ПодготовитьФайлыДляОтправки_АнкетаИСогласие(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	
	// Если не зафиксировано ошибок, то считаем, что все прошло успешно.
	Результат.Выполнено = НЕ ЗначениеЗаполнено(Результат.ОписаниеОшибки)
		И НЕ ЗначениеЗаполнено(Результат.ТаблицаСообщений);
	
	Если Не Результат.Выполнено И ЗначениеЗаполнено(Результат.ИдентификаторВременногоХранилищаТранзакций) Тогда
		УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Результат.ИдентификаторВременногоХранилищаТранзакций);
	КонецЕсли;
	
	Если СведенияОЗаемщике.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
		КлючеваяОперация = "ПодготовкаФайловДляОтправкиЗаявкаНаЛизинг";
	Иначе
		КлючеваяОперация = "ПодготовкаФайловДляОтправкиЗаявкаНаКредит";
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, Банки.Количество());
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеФорматовФайловЗаявки(ОписаниеСохраняемыхДанных, Результат)
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ТаблицаВыгружаемыхФорматов = Новый ТаблицаЗначений;
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ПрефиксФайла",           ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ФорматИменованияФайлов", ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("Банки",                  Новый ОписаниеТипов("Массив"));
	
	УникальныеИменаФайловВПакете = Новый Соответствие;
	
	ОписаниеФорматов = Новый Структура;
	ОписаниеФорматов.Вставить("ТаблицаВыгружаемыхФорматов",   ТаблицаВыгружаемыхФорматов);
	ОписаниеФорматов.Вставить("УникальныеИменаФайловВПакете", УникальныеИменаФайловВПакете);
	
	СведенияОЗаявке      = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	ЗаявкаНаКредит       = СведенияОЗаявке.ДанныеЗаявки.Ссылка;
	ЭтоЭлектроннаяПодписьВМоделиСервиса = ОписаниеСохраняемыхДанных.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	// Дополняем существующую таблицу колонками с информацией в разрезе кредитных продуктов.
	КредитныеПродукты = ОписаниеСохраняемыхДанных.КредитныеПродукты;
	КредитныеПродукты.Колонки.Добавить("Наименование",               ТипСтрока);
	КредитныеПродукты.Колонки.Добавить("ФорматИменФайловПродукта",   Новый ОписаниеТипов("Структура"));
	КредитныеПродукты.Колонки.Добавить("ТребуютсяДанныеУчредителей", Новый ОписаниеТипов("Булево"));
	КредитныеПродукты.Индексы.Добавить("ИдентификаторКредитногоПродукта");
	
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(КредитныеПродукты.ВыгрузитьКолонку("Банк"), "ИНН");
	
	// Для каждого банка подготавливаем информацию по его кредитному продукту.
	Для каждого КредитныйПродукт Из КредитныеПродукты Цикл
		
		УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
			СведенияОЗаявке.ДанныеЗаявки.СервисОбменаСБанками,
			Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.УсловияКредитовЗаймов,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КредитныйПродукт.Банк),
			Истина);
		Если УслугиБанка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УсловияКредитованияXDTO = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(
			СведенияОЗаявке.ДанныеЗаявки.СервисОбменаСБанками, УслугиБанка[0].Значение);

		КредитныйПродуктXDTO = ЗаявкиНаКредит.НайтиКредитныйПродукт(
			СведенияОЗаявке.ДанныеЗаявки.СервисОбменаСБанками,
			УсловияКредитованияXDTO,
			КредитныйПродукт.ИдентификаторКредитногоПродукта,
			СведенияОЗаявке.ДанныеЗаявки.Дата);
		Если КредитныйПродуктXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		КредитныйПродукт.Наименование = КредитныйПродуктXDTO.Наименование;
		// В объекте XDTO может быть Неопределено, поэтому явно сравниваем с Истина.
		КредитныйПродукт.ТребуютсяДанныеУчредителей = (КредитныйПродуктXDTO.ТребуютсяДанныеУчредителей = Истина);
		
		ФорматИменФайловПродукта = КредитныйПродукт.ФорматИменФайловПродукта;
		ФорматИменФайловПродукта.Вставить("ФорматИменованияФайлов",
			?(ЗначениеЗаполнено(КредитныйПродуктXDTO.ФорматИменованияФайлов), КредитныйПродуктXDTO.ФорматИменованияФайлов, ""));
		ФорматИменФайловПродукта.Вставить("ПрефиксФайла",
			?(ЗначениеЗаполнено(КредитныйПродуктXDTO.ПрефиксФайла), КредитныйПродуктXDTO.ПрефиксФайла, ""));
		
		НайденныеСтрокиФорматов = ТаблицаВыгружаемыхФорматов.НайтиСтроки(ФорматИменФайловПродукта);
		Если НайденныеСтрокиФорматов.Количество() = 0 Тогда
			
			СтрокаВыгружаемыхФорматов = ТаблицаВыгружаемыхФорматов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВыгружаемыхФорматов, ФорматИменФайловПродукта); 
			СтрокаВыгружаемыхФорматов.Банки = Новый Массив;
			
		Иначе
			
			СтрокаВыгружаемыхФорматов = НайденныеСтрокиФорматов[0];
			
		КонецЕсли;
		СтрокаВыгружаемыхФорматов.Банки.Добавить(КредитныйПродукт.Банк);
		
		// Запоминаем имена будущих файлов.
		// Анкета заемщика.
		
		ПараметрыФайлаЗаявки = ЗаявкиНаКредит.НовыеПараметрыИмениФайлаЗаявки();
		ПараметрыФайлаЗаявки.ТипДокумента           = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика;
		ПараметрыФайлаЗаявки.ТипСодержимого         = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
		ПараметрыФайлаЗаявки.СведенияОЗаявке        = СведенияОЗаявке;
		ПараметрыФайлаЗаявки.ПрефиксФайла           = ФорматИменФайловПродукта.ПрефиксФайла;
		ПараметрыФайлаЗаявки.ФорматИменованияФайлов = ФорматИменФайловПродукта.ФорматИменованияФайлов;
		ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = УникальныеИменаФайловВПакете;
		ИмяФайлаЗаявки = ЗаявкиНаКредит.ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки);
		
		ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку(ПараметрыФайлаЗаявки.ТипДокумента)];
		ОписаниеФайла = ДополнительныеФайлы.Добавить();
		ОписаниеФайла.Банк                 = КредитныйПродукт.Банк;
		ОписаниеФайла.КраткоеПредставление = Строка(ПараметрыФайлаЗаявки.ТипДокумента);
		ОписаниеФайла.Наименование         = СтрЗаменить(ИмяФайлаЗаявки, ".xml", "");
		ОписаниеФайла.Расширение           = "xlsx";
		ОписаниеФайла.ИмяФайла             = СтрЗаменить(ИмяФайлаЗаявки, ".xml", ".xlsx"); // Excel-файл самой заявки
		ОписаниеФайла.ИмяФайлаXML          = ИмяФайлаЗаявки;                               // xml-файл самой заявки
		
		// Согласие на передачу персональных данных.
		
		СведенияОБанке = РеквизитыБанков.Найти(КредитныйПродукт.Банк, "Банк");
		
		ПараметрыФайлаЗаявки = ЗаявкиНаКредит.НовыеПараметрыИмениФайлаЗаявки();
		ПараметрыФайлаЗаявки.ТипДокумента           = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.СогласиеНаОбработкуДанных;
		ПараметрыФайлаЗаявки.ТипСодержимого         = Перечисления.ТипыСодержимогоФайловОбменаСБанками.pdf;
		ПараметрыФайлаЗаявки.СведенияОЗаявке        = СведенияОЗаявке;
		ПараметрыФайлаЗаявки.УточнениеНаименования  = ?(СведенияОБанке = Неопределено, "", СведенияОБанке.ИНН);
		ПараметрыФайлаЗаявки.ПрефиксФайла           = ФорматИменФайловПродукта.ПрефиксФайла;
		ПараметрыФайлаЗаявки.ФорматИменованияФайлов = ФорматИменФайловПродукта.ФорматИменованияФайлов;
		ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = УникальныеИменаФайловВПакете;
		ИмяФайлаЗаявки = ЗаявкиНаКредит.ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки);
		
		ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку(ПараметрыФайлаЗаявки.ТипДокумента)];
		ОписаниеФайла = ДополнительныеФайлы.Добавить();
		ОписаниеФайла.Банк                 = КредитныйПродукт.Банк;
		ОписаниеФайла.КраткоеПредставление = Строка(ПараметрыФайлаЗаявки.ТипДокумента);
		ОписаниеФайла.Наименование         = СтрЗаменить(ИмяФайлаЗаявки, ".pdf", "");
		ОписаниеФайла.Расширение           = "pdf";
		ОписаниеФайла.ИмяФайла             = ИмяФайлаЗаявки; // pdf-файл согласия на обработку данных
		
	КонецЦикла;
		
	Возврат ОписаниеФорматов;
	
КонецФункции

// Список дополнительных файлов в разбивке по банкам.
//
// Параметры:
//  ОписаниеСохраняемыхДанных - Структура - содержит ключи СведенияОЗаявке и ДополнительныеФайлы.
//  ОписаниеФорматов - Структура - см. ОписаниеФорматовФайловЗаявки()
//  ПредставленияДополнительныхФайлов - СписокЗначений - как доп.файлы названы в интерфейсе формы.
//
Процедура ДобавитьОписанияДополнительныхФайлов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, ПредставленияДополнительныхФайлов)
	
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	
	КлючСтрокиДопФайлаПаспортУчредителей = КлючСтрокиДопФайлаПаспортУчредителей();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ОписаниеСохраняемыхДанных.СведенияОЗаявке.ДанныеЗаявки.Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторПаспортУчредителя", ИдентификаторПаспортУчредителя());
	Запрос.УстановитьПараметр("КлючСтрокиФайлаДляТабличнойЧасти", КлючСтрокиДопФайлаПаспортУчредителей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаКредитДополнительныеФайлы.Идентификатор КАК Идентификатор,
	|	ЗаявкаНаКредитДополнительныеФайлы.КлючСтрокиФайла КАК КлючСтрокиФайла,
	|	ЗаявкаНаКредитДополнительныеФайлы.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ЗаявкаНаКредитДополнительныеФайлы.Значение КАК ДопФайл,
	|	ЛОЖЬ КАК ХранитсяВТабличнойЧасти,
	|	ЗаявкаНаКредитПолучателиДополнительнойИнформации.Банк КАК Банк,
	|	"""" КАК ПредставлениеУчредителя
	|ИЗ
	|	Документ.ЗаявкаНаКредит.ДополнительныеФайлы КАК ЗаявкаНаКредитДополнительныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаКредит.ПолучателиДополнительнойИнформации КАК ЗаявкаНаКредитПолучателиДополнительнойИнформации
	|		ПО ЗаявкаНаКредитДополнительныеФайлы.Ссылка = ЗаявкаНаКредитПолучателиДополнительнойИнформации.Ссылка
	|			И ЗаявкаНаКредитДополнительныеФайлы.КлючСтрокиФайла = ЗаявкаНаКредитПолучателиДополнительнойИнформации.КлючСтрокиДопИнформации
	|			И (НЕ ЗаявкаНаКредитДополнительныеФайлы.ДанныеОтсутствуют)
	|			И (ЗаявкаНаКредитПолучателиДополнительнойИнформации.ЭтоФайл)
	|ГДЕ
	|	ЗаявкаНаКредитДополнительныеФайлы.Ссылка = &ЗаявкаНаКредит
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ИдентификаторПаспортУчредителя,
	|	ЗаявкаНаКредитУчредители.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаКредитУчредители.ПаспортУчредителя = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаявкаНаКредитУчредители.ПаспортУчредителя,
	|	ИСТИНА,
	|	ЗаявкаНаКредитПолучателиДополнительнойИнформации.Банк,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаявкаНаКредитУчредители.Учредитель)
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Учредители КАК ЗаявкаНаКредитУчредители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаКредит.ПолучателиДополнительнойИнформации КАК ЗаявкаНаКредитПолучателиДополнительнойИнформации
	|		ПО ЗаявкаНаКредитУчредители.Ссылка = ЗаявкаНаКредитПолучателиДополнительнойИнформации.Ссылка
	|			И (ЗаявкаНаКредитУчредители.ПаспортУчредителя <> НЕОПРЕДЕЛЕНО)
	|			И (ЗаявкаНаКредитПолучателиДополнительнойИнформации.КлючСтрокиДопИнформации = &КлючСтрокиФайлаДляТабличнойЧасти)
	|			И (ЗаявкаНаКредитПолучателиДополнительнойИнформации.ЭтоФайл)
	|ГДЕ
	|	ЗаявкаНаКредитУчредители.Ссылка = &ЗаявкаНаКредит
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	КлючСтрокиФайла";

	// Добавим колонки на время заполнения таблицы.
	ДополнительныеФайлы.Колонки.Добавить("ПредставлениеУчредителя", Новый ОписаниеТипов("Строка"));
	ДополнительныеФайлы.Колонки.Добавить("ХранитсяВТабличнойЧасти", Новый ОписаниеТипов("Булево"));
	
	ПредыдущийИдентификатор = "";
	ДопФайлы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ДанныеОтсутствуют Тогда
		
			Если ПредыдущийИдентификатор <> Выборка.Идентификатор Тогда // только первые из группы
				
				СохраненныйФайл = ДополнительныеФайлы.Добавить();
				ЗаполнитьЗначенияСвойств(СохраненныйФайл, Выборка);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ДопФайл) Тогда
				
				СохраненныйФайл = ДополнительныеФайлы.Добавить();
				ЗаполнитьЗначенияСвойств(СохраненныйФайл, Выборка);
				
				ДопФайлы.Добавить(Выборка.ДопФайл);
				
			ИначеЕсли ПредыдущийИдентификатор <> Выборка.Идентификатор Тогда
				// Хотя бы первый файл в группе должен быть заполнен. Появление незаполненных должно быть исключено на этапе проверки заполнения.
				ВызватьИсключение НСтр("ru = 'Файл требуется, но не приложен'");
				
			КонецЕсли;
			
		КонецЕсли;
		ПредыдущийИдентификатор = СохраненныйФайл.Идентификатор;
		
	КонецЦикла;
	ДопФайлы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДопФайлы, "Наименование,Расширение", Истина);
	
	// Дополняем таблицу, заполняя колонки и копируя список банков из первого файла группы в последующие файлы.
	ДлинаНаименования = ДополнительныеФайлы.Колонки.ИмяФайла.ТипЗначения.КвалификаторыСтроки.Длина;
	БанкиДляИдентификатора = Новый Соответствие;
	ИндексСтроки = 0;
	КоличествоСтрок = ДополнительныеФайлы.Количество();
	Пока ИндексСтроки < КоличествоСтрок Цикл
		
		СохраненныйФайл = ДополнительныеФайлы[ИндексСтроки];
		Если СохраненныйФайл.ДанныеОтсутствуют Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		ДопФайлИнформация = ДопФайлы[СохраненныйФайл.ДопФайл];
		Если ДопФайлИнформация <> Неопределено Тогда
			
			СохраненныйФайл.Наименование = ДопФайлИнформация.Наименование;
			СохраненныйФайл.Расширение = ДопФайлИнформация.Расширение;
			
		КонецЕсли;
		
		Если ИндексСтроки > 0 Тогда
			
			ПредыдущийФайл = ДополнительныеФайлы[ИндексСтроки - 1];
			ЭтоПрежнийДопФайл = ИндексСтроки > 0
				И ПредыдущийФайл.КлючСтрокиФайла = СохраненныйФайл.КлючСтрокиФайла
				И ПредыдущийФайл.Идентификатор = СохраненныйФайл.Идентификатор;
				
		Иначе
			
			ПредыдущийФайл = СохраненныйФайл;
			ЭтоПрежнийДопФайл = Ложь;
			
		КонецЕсли;
				
		Если ЭтоПрежнийДопФайл Тогда
			
			СохраненныйФайл.ИмяФайла = ПредыдущийФайл.ИмяФайла;
			
		Иначе
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СохраненныйФайл.Наименование);
			// Гарантируем, что имя файла будет всегда не длинее заранее определенного количества символов.
			Если ПустаяСтрока(СохраненныйФайл.Расширение) Тогда
				ИмяФайла = Лев(ИмяФайла, ДлинаНаименования);
			Иначе
				ИмяФайла = Лев(ИмяФайла, ДлинаНаименования - 4) + "." + СохраненныйФайл.Расширение;
			КонецЕсли;
			
			// Гарантируем, что имя файла будет всегда уникальным.
			// Даже если в конце будет добавлен номер для уникальности, то длина имени файла позволит его записать в любой ОС.
			СохраненныйФайл.ИмяФайла = УниверсальныйОбменСБанкамиОбщегоНазначения.УнифицироватьИмяФайлаКВыгрузке(
				ИмяФайла, УниверсальныйОбменСБанкамиОбщегоНазначения.СокращенныйПериодБезУИД(), "", ОписаниеФорматов.УникальныеИменаФайловВПакете);
			
			Если СохраненныйФайл.ХранитсяВТабличнойЧасти Тогда
				// К одной строке может быть приложен только один файл, но строк может быть много.
				ДопФайлОписание = ПредставленияДополнительныхФайлов.НайтиПоЗначению(КлючСтрокиДопФайлаПаспортУчредителей);
				ДопФайлПредставление = СтрШаблон(НСтр("ru = '%1 – учредитель %2'"), ДопФайлОписание.Представление, СохраненныйФайл.ПредставлениеУчредителя);
				
			Иначе
				// Может быть несколько файлов в группе.
				ДопФайлОписание = ПредставленияДополнительныхФайлов.НайтиПоЗначению(СохраненныйФайл.КлючСтрокиФайла);
				Если ДопФайлОписание = Неопределено Тогда
					ДопФайлПредставление = Неопределено;
				Иначе
					ДопФайлПредставление = ДопФайлОписание.Представление;
					Если СохраненныйФайл.Идентификатор = ИдентификаторПаспортРуководителя() Тогда
						
						ДанныеЗаемщика = ОписаниеСохраняемыхДанных.СведенияОЗаявке.ДанныеЗаемщика;
						Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
							ДопФайлПредставление = СтрШаблон(НСтр("ru = '%1 – ИП %2'"), ДопФайлПредставление, ДанныеЗаемщика.ИндивидуальныйПредприниматель);
						Иначе
							ДопФайлПредставление = СтрШаблон(НСтр("ru = '%1 – руководитель %2'"), ДопФайлПредставление, ДанныеЗаемщика.Руководитель);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		Если ДопФайлПредставление = Неопределено Тогда
			// Текущий доп.файл не первый в группе. Размножим его по количеству банков из первого файла.
			КраткоеПредставление = ?(ИндексСтроки > 0, ПредыдущийФайл.КраткоеПредставление, "");
			Для Каждого Банк Из БанкиДляИдентификатора Цикл
				
				ДопФайл = ДополнительныеФайлы.Вставить(ИндексСтроки);
				ЗаполнитьЗначенияСвойств(ДопФайл, СохраненныйФайл, , "Банк,КраткоеПредставление");
				ДопФайл.Банк                 = Банк.Ключ;
				ДопФайл.КраткоеПредставление = КраткоеПредставление;
				
				ИндексСтроки = ИндексСтроки + 1;
				КоличествоСтрок = КоличествоСтрок + 1;
				
			КонецЦикла;
			
			ДополнительныеФайлы.Удалить(ИндексСтроки);
			КоличествоСтрок = КоличествоСтрок - 1;
			
		Иначе // первые (или единственные) файлы из группы
			
			СохраненныйФайл.КраткоеПредставление = ДопФайлПредставление;
			
			Если Не ЭтоПрежнийДопФайл Тогда
				БанкиДляИдентификатора = Новый Соответствие;
			КонецЕсли;
			БанкиДляИдентификатора.Вставить(СохраненныйФайл.Банк);
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим временные колонки.
	ДополнительныеФайлы.Колонки.Удалить("ПредставлениеУчредителя");
	ДополнительныеФайлы.Колонки.Удалить("ХранитсяВТабличнойЧасти");
	
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_СписокСчетов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	
	ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ПланСчетов;
	
	СведенияОЗаявке     = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	
	Для каждого ВыгружаемыйФормат Из ОписаниеФорматов.ТаблицаВыгружаемыхФорматов Цикл
		
		Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
		Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
		Вложение.Предмет          = СведенияОЗаявке.ДанныеЗаявки.Ссылка;
		Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
		Вложение.ТипДокумента     = ТипДокумента;
		
		ПараметрыФайлаЗаявки = ЗаявкиНаКредит.НовыеПараметрыИмениФайлаЗаявки();
		ПараметрыФайлаЗаявки.ТипДокумента           = ТипДокумента;
		ПараметрыФайлаЗаявки.ТипСодержимого         = Вложение.ТипСодержимого;
		ПараметрыФайлаЗаявки.СведенияОЗаявке        = СведенияОЗаявке;
		ПараметрыФайлаЗаявки.ПрефиксФайла           = ВыгружаемыйФормат.ПрефиксФайла;
		ПараметрыФайлаЗаявки.ФорматИменованияФайлов = ВыгружаемыйФормат.ФорматИменованияФайлов;
		ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = ОписаниеФорматов.УникальныеИменаФайловВПакете;
		
		Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки);
		
		Вложение.ИсходныеДанные   = ЗаполнениеРасшифровокБухОтчетности.ВыгрузитьПланСчетов(СведенияОЗаявке.ДанныеЗаявки.Организация);
		Вложение.БанкиПолучатели  = ВыгружаемыйФормат.Банки;
		Вложение.Зашифровать      = Истина;
		Вложение.Подписать        = Истина;
		Вложение.Сжать            = Истина;
		Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса  = ОписаниеСохраняемыхДанных.ЭтоЭлектроннаяПодписьВМоделиСервиса;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			Строка(ТипДокумента),
			СостояниеПрогресса.ДополнительныеПараметры);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку(ПараметрыФайлаЗаявки.ТипДокумента)];
		Для Каждого Банк Из ВыгружаемыйФормат.Банки Цикл
			
			ОписаниеФайла = ДополнительныеФайлы.Добавить();
			ОписаниеФайла.Банк                 = Банк;
			ОписаниеФайла.КраткоеПредставление = Строка(ТипДокумента);
			ОписаниеФайла.Наименование         = СтрЗаменить(Вложение.ИсходноеИмяФайла, ".xml", "");
			ОписаниеФайла.Расширение           = "xml";
			ОписаниеФайла.ИмяФайла             = Вложение.ИсходноеИмяФайла;
			ОписаниеФайла.ИмяФайлаXML          = Вложение.ИсходноеИмяФайла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_ОтчетностьЗаемщика(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	
	СведенияОЗаявке     = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	ЗаявкаНаКредит      = СведенияОЗаявке.ДанныеЗаявки.Ссылка;
	
	ТаблицаВыгружаемыхФорматов = Новый ТаблицаЗначений;
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ПрефиксФайла", ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ФорматИменованияФайлов", ТипСтрока);  
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ФорматСохранения", ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ВидВыгрузкиРеглОтчета", ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("Банки", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОтчетность.НомерСтроки,
		|	ТЧОтчетность.КлючСтроки,
		|	ТЧОтчетность.ИсточникОтчета,
		|	ТЧОтчетность.РегламентированныйОтчет,
		|	ТЧОтчетность.НаименованиеОтчета,
		|	ТЧОтчетность.ДатаНачала,
		|	ТЧОтчетность.ДатаОкончания
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Отчетность КАК ТЧОтчетность
		|ГДЕ
		|	ТЧОтчетность.Ссылка = &ЗаявкаНаКредит";
	
	ТаблицаОтчетности = Запрос.Выполнить().Выгрузить();
	ТаблицаОтчетности.Индексы.Добавить("ИсточникОтчета");
	
	ПользовательскийФорматДляВыгрузки = ТипФайлаТабличногоДокумента.XLSX;
	КешРасшифровокВПользовательскомФормате = Неопределено;
	
	ПараметрыОтчетаЗаемщика = ЗаявкиНаКредитКлиентСервер.ПараметрыОтчетаЗаемщика();
	ДополнительныеПараметрыВыгрузкиРасшифровки = Новый Структура("Отбор", ПараметрыОтчетаЗаемщика);
	
	// В ФНС за такие периоды отчеты не сдаются, и штатная проверка их не пропускает при выгрузке. Чтобы отключить эту
	// проверку, передадим специальный флаг для выгрузки. При этом в xml-файле будут использованы особые значения для
	// тега периода, которые отсутствуют в формате ФНС.
	ДополнительныеПараметрыВыгрузкиБухОтчетности = Новый Структура;
	ДополнительныеПараметрыВыгрузкиБухОтчетности.Вставить("РеглОтчетВыгружаетсяВБанк", Истина);
	ДополнительныеПараметрыВыгрузкиБухОтчетности.Вставить("КешСхемВыгрузки", Новый Структура);
	ДополнительныеПараметрыВыгрузкиБухОтчетности.Вставить("ВидВыгрузки");
	
	ПараметрыПомещения = ЗаполнениеФинОтчетностиВБанки.ПараметрыПомещенияДляПодписания();
	ПараметрыПомещения.Сервис        = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	ПараметрыПомещения.Организация   = СведенияОЗаявке.ДанныеЗаявки.Организация;
	ПараметрыПомещения.Предмет       = ЗаявкаНаКредит;
	ПараметрыПомещения.ТипДокумента  = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ОтчетЗаемщика;
	ПараметрыПомещения.Идентификатор = Результат.ИдентификаторВременногоХранилищаТранзакций;
	ПараметрыПомещения.ЭтоЭлектроннаяПодписьВМоделиСервиса = ОписаниеСохраняемыхДанных.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	ПараметрыПомещения.ПользовательскийФорматДляВыгрузки   = ПользовательскийФорматДляВыгрузки;
	
	СчетаДляКоторыхПредусмотренФорматВыгрузки = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	ШаблоныИменФайловПоИсточникуОтчета = ШаблоныИменФайловПоИсточникуОтчета();
	
	ОписаниеВыгружаемогоОтчета = Новый Структура(
		"ТребуемыйОтчетЗаемщика, НайденныйОтчет, ИсточникОтчета, ПредставлениеОтчета, ЭтоРасшифровкиБухОтчетности");
	
	ОтборПоИсточникуОтчета = Новый Структура("ИсточникОтчета");
	
	Для Каждого ТребуемыйОтчетЗаемщика Из ОписаниеСохраняемыхДанных.ТребуемаяОтчетностьЗаемщика Цикл
		
		ЗаполнитьТаблицуВыгружаемыхФорматов(ТаблицаВыгружаемыхФорматов,
			ОписаниеСохраняемыхДанных.КредитныеПродукты,
			ТребуемыйОтчетЗаемщика.ИдентификаторыКредитныхПродуктов,
			ТребуемыйОтчетЗаемщика.ВариантыВыгрузкиРеглОтчета);
			
		ОтборПоИсточникуОтчета.ИсточникОтчета = ИсточникОтчета(ТребуемыйОтчетЗаемщика.ВидОтчета);
		ЭтоРасшифровкиБухОтчетности = (ОтборПоИсточникуОтчета.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности");

		ОписаниеВыгружаемогоОтчета.ТребуемыйОтчетЗаемщика      = ТребуемыйОтчетЗаемщика;
		ОписаниеВыгружаемогоОтчета.ИсточникОтчета              = ОтборПоИсточникуОтчета.ИсточникОтчета;
		ОписаниеВыгружаемогоОтчета.ЭтоРасшифровкиБухОтчетности = ЭтоРасшифровкиБухОтчетности;
		ОписаниеВыгружаемогоОтчета.ПредставлениеОтчета         = ПредставлениеОтчета(ТребуемыйОтчетЗаемщика.ВидОтчета,
			ТребуемыйОтчетЗаемщика.КодСчета, ТребуемыйОтчетЗаемщика.ДатаНачала, ТребуемыйОтчетЗаемщика.ДатаОкончания);
		
		// Ищем регламентированный отчет в составе заявки.
		НайденныеОтчеты = ТаблицаОтчетности.НайтиСтроки(ОтборПоИсточникуОтчета);
		ОтчетНайден     = Ложь;
		
		Для Каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			
			Если Не ЭтоРасшифровкиБухОтчетности
			   И НачалоДня(ТребуемыйОтчетЗаемщика.ДатаОкончания) <> НачалоДня(НайденныйОтчет.ДатаОкончания) Тогда
				// Найден отчет за другой период, его сейчас выгружать не требуется, пропускаем.
				// При этом расшифровки бухотчетности может быть за разные периоды,
				// но физически содержатся в одном рег.отчете, поэтому их не ограничиваем.
				Продолжить;
			КонецЕсли;
			
			ОписаниеВыгружаемогоОтчета.НайденныйОтчет = НайденныйОтчет;
			ОтчетНайден = Истина;
			
			Если Не ЗначениеЗаполнено(НайденныйОтчет.РегламентированныйОтчет) Тогда
				ОбработатьОшибкуВыгрузкиОтчетности("РегламентированныйОтчет", ОписаниеВыгружаемогоОтчета, Результат);
				Продолжить;
			КонецЕсли;
			
			ВыгружатьXML = Истина;
			ПараметрыПомещения.ПользовательскийФорматДляВыгрузки = ПользовательскийФорматДляВыгрузки;
			ОтчетСданВНалоговую = Ложь;
			Если ЭтоРасшифровкиБухОтчетности Тогда
				// Отчеты в пользовательском формате выгружаются за один раз для всех расшифровочных отчетов.
				Если КешРасшифровокВПользовательскомФормате <> Неопределено Тогда
					// К настоящему моменту отчеты уже были выгружены.
					ПараметрыПомещения.ПользовательскийФорматДляВыгрузки = Неопределено;
				КонецЕсли;
				ПараметрыОтчетаЗаемщика.ВидОтчета     = ТребуемыйОтчетЗаемщика.ВидОтчета;
				ПараметрыОтчетаЗаемщика.ДатаНачала    = ТребуемыйОтчетЗаемщика.ДатаНачала;
				ПараметрыОтчетаЗаемщика.ДатаОкончания = ТребуемыйОтчетЗаемщика.ДатаОкончания;
				ПараметрыОтчетаЗаемщика.Счет          = ТребуемыйОтчетЗаемщика.Счет;
				ПараметрыОтчетаЗаемщика.Банки         = ТребуемыйОтчетЗаемщика.Банки;
				
				РезультатВыгрузкиОтчета = ЗаполнениеФинОтчетностиВБанки.ВыгрузитьРегламентированныйОтчет(
					НайденныйОтчет.РегламентированныйОтчет,
					ПараметрыПомещения.ПользовательскийФорматДляВыгрузки,
					ДополнительныеПараметрыВыгрузкиРасшифровки);
				
				ВыгружатьXML = ТребуемыйОтчетЗаемщика.ВидОтчета <> "КарточкаСчета"
					Или СчетаДляКоторыхПредусмотренФорматВыгрузки.Найти(ТребуемыйОтчетЗаемщика.Счет) <> Неопределено;
				
			Иначе
				// Отчеты в машиночитаемом формате.
				РезультатВыгрузкиОтчета = ЗаполнениеФинОтчетностиВБанки.ВыгрузитьРегламентированныйОтчет(
					НайденныйОтчет.РегламентированныйОтчет,
					ПараметрыПомещения.ПользовательскийФорматДляВыгрузки,
					ДополнительныеПараметрыВыгрузкиБухОтчетности);
				ОтчетСданВНалоговую	= РезультатВыгрузкиОтчета.СостояниеДокумента.Сдано 
					И РезультатВыгрузкиОтчета.СостояниеДокумента.Отправлено;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(РезультатВыгрузкиОтчета.ОписаниеОшибки) Тогда
				ОбработатьОшибкуВыгрузкиОтчетности("ОписаниеОшибки", ОписаниеВыгружаемогоОтчета, Результат, РезультатВыгрузкиОтчета);
				Продолжить;
			КонецЕсли;
			
			ПредварительноеИмяВыгрузки = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
			ИсточникРегламентированныйОтчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныйОтчет.РегламентированныйОтчет, "ИсточникОтчета");
			
			Для каждого ВыгружаемыйФормат Из ТаблицаВыгружаемыхФорматов Цикл
				
				ПараметрыПомещения.Банки = ВыгружаемыйФормат.Банки;
				
				ИмяФайлаВыгрузкиПоШаблону = "";
				Если ЭтоРасшифровкиБухОтчетности Тогда
					
					Если КешРасшифровокВПользовательскомФормате = Неопределено Тогда
						// Запоминаем отчеты в пользовательском формате.
						КешРасшифровокВПользовательскомФормате = ЗапомнитьОтчетыВПользовательскомФормате(РезультатВыгрузкиОтчета);
							
						Если Не ПустаяСтрока(РезультатВыгрузкиОтчета.ОписаниеОшибки) Тогда
							ОбработатьОшибкуВыгрузкиОтчетности("РасшифровкиБухОтчетности", ОписаниеВыгружаемогоОтчета, Результат, РезультатВыгрузкиОтчета);
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Каждый отчет из расшифровки бухгалтерской отчетности выгружаем в отдельные файлы по счету и периоду.
					ПараметрыПомещения.ИдентификаторАрхива = Строка(Новый УникальныйИдентификатор);
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ТребуемыйОтчетЗаемщика",			ТребуемыйОтчетЗаемщика);
					ДополнительныеПараметры.Вставить("СведенияОЗаявке",					СведенияОЗаявке);
					ДополнительныеПараметры.Вставить("ВыгружатьXML",					ВыгружатьXML);
					ДополнительныеПараметры.Вставить("ПрефиксФайла",					ВыгружаемыйФормат.ПрефиксФайла);
					ДополнительныеПараметры.Вставить("ФорматИменованияФайлов",			ВыгружаемыйФормат.ФорматИменованияФайлов);
					ДополнительныеПараметры.Вставить("УникальныеИменаФайловВПакете",	ОписаниеФорматов.УникальныеИменаФайловВПакете);

					РезультатПодготовки = ПодготовитьРасшифровкуБухгалтерскойОтчетности(
						РезультатВыгрузкиОтчета, 
						ПараметрыПомещения,
						КешРасшифровокВПользовательскомФормате, 
						ДополнительныеПараметры);
					
				Иначе
					
					// Если для банков есть форматы выгрузки, отличные от значения по умолчанию,
					// то сформируем в выбранных форматах 
					Если ЗначениеЗаполнено(ВыгружаемыйФормат.ФорматСохранения) Или ЗначениеЗаполнено(ВыгружаемыйФормат.ВидВыгрузкиРеглОтчета) Тогда
						
						ДополнительныеПараметрыВыгрузкиБухОтчетности.ВидВыгрузки = ВыгружаемыйФормат.ВидВыгрузкиРеглОтчета;
						ФорматСохранения = ?(ЗначениеЗаполнено(ВыгружаемыйФормат.ФорматСохранения),
							ЗаполнениеФинОтчетностиВБанки.ФорматыСохраненияРеглОтчетности(ВыгружаемыйФормат.ФорматСохранения),
							ПараметрыПомещения.ПользовательскийФорматДляВыгрузки);
						РезультатВыгрузкиОтчета = ЗаполнениеФинОтчетностиВБанки.ВыгрузитьРегламентированныйОтчет(
							НайденныйОтчет.РегламентированныйОтчет,
							ФорматСохранения,
							ДополнительныеПараметрыВыгрузкиБухОтчетности);
						ОтчетСданВНалоговую	= РезультатВыгрузкиОтчета.СостояниеДокумента.Сдано 
											  И РезультатВыгрузкиОтчета.СостояниеДокумента.Отправлено;

						ПредварительноеИмяВыгрузки = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;  
						
					КонецЕсли;
					
					Если ВыгружаемыйФормат.ФорматИменованияФайлов = УниверсальныйОбменСБанкамиОбщегоНазначения.СокращенныйПериодБезУИД() Тогда
						
						ПараметрыФайлаОтчета = УниверсальныйОбменСБанкамиОбщегоНазначения.НовыеПараметрыИмениФайлаОтчета();
						ПараметрыФайлаОтчета.ИНН 					= СведенияОЗаявке.ДанныеЗаемщика.ИНН;
						ПараметрыФайлаОтчета.КПП					= СведенияОЗаявке.ДанныеЗаемщика.КПП;
						ПараметрыФайлаОтчета.УточнениеНаименования	= "";
						ПараметрыФайлаОтчета.ДатаНачала				= ТребуемыйОтчетЗаемщика.ДатаНачала;
						ПараметрыФайлаОтчета.ДатаОкончания			= ТребуемыйОтчетЗаемщика.ДатаОкончания;
						ПараметрыФайлаОтчета.ПрефиксФайла			= ВыгружаемыйФормат.ПрефиксФайла;
						ПараметрыФайлаОтчета.ФорматИменованияФайлов	= ВыгружаемыйФормат.ФорматИменованияФайлов;
						ПараметрыФайлаОтчета.ШаблонИмениФайла		= ШаблоныИменФайловПоИсточникуОтчета[ИсточникРегламентированныйОтчет];
						ПараметрыФайлаОтчета.СданВНалоговую			= ОтчетСданВНалоговую;
						
						РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
							ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
							РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки).Расширение);
							
						ИмяФайлаБазРасширения = УниверсальныйОбменСБанкамиОбщегоНазначения.ПолучитьИмяФайлаОтчета(ПараметрыФайлаОтчета);
						ИмяФайлаВыгрузки = ИмяФайлаБазРасширения + "." + РасширениеФайла;
						
					Иначе
						
						ИмяФайлаВыгрузки = ПредварительноеИмяВыгрузки;
						
					КонецЕсли;
					
					РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки = УниверсальныйОбменСБанкамиОбщегоНазначения.УнифицироватьИмяФайлаКВыгрузке(
						ИмяФайлаВыгрузки,
						ВыгружаемыйФормат.ФорматИменованияФайлов,
						ВыгружаемыйФормат.ПрефиксФайла,
						ОписаниеФорматов.УникальныеИменаФайловВПакете);
					
					ПараметрыПомещения.ИдентификаторАрхива = Строка(Новый УникальныйИдентификатор);
					РезультатПодготовки = ЗаполнениеФинОтчетностиВБанки.ПоместитьВЖурналОперацийСФайламиДанныеРеглОтчета(
						РезультатВыгрузкиОтчета, ПараметрыПомещения);
					
				КонецЕсли;
				Если Не РезультатПодготовки.Подготовлен Тогда
					ОбработатьОшибкуВыгрузкиОтчетности("Подготовка", ОписаниеВыгружаемогоОтчета, Результат, РезультатПодготовки);
					Продолжить;
				КонецЕсли;
				
				ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку(ТребуемыйОтчетЗаемщика.ВидОтчета)];
				Если ПустаяСтрока(РезультатПодготовки.ИмяФайлаАрхива) Тогда
					
					ДобавитьДополнительныеФайлыОтчетности(
						ОписаниеВыгружаемогоОтчета, РезультатПодготовки.ПодготовленныеФайлы, ПараметрыПомещения.Банки, ДополнительныеФайлы);
					
				Иначе
					// "ПодготовленныеФайлы" будут пересылаться в виде архива, поэтому и в списке должен быть архив.
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатПодготовки.ИмяФайлаАрхива);
					Для Каждого Банк Из ПараметрыПомещения.Банки Цикл
						
						ОписаниеФайла = ДополнительныеФайлы.Добавить();
						ОписаниеФайла.Банк                 = Банк;
						ОписаниеФайла.КраткоеПредставление = ОписаниеВыгружаемогоОтчета.ПредставлениеОтчета;
						ОписаниеФайла.ИмяФайла             = СтруктураИмениФайла.Имя;
						ОписаниеФайла.Расширение           = СтруктураИмениФайла.Расширение;
						ОписаниеФайла.Наименование         = СтруктураИмениФайла.ИмяБезРасширения;
						Если СтруктураИмениФайла.Расширение = "xml" Тогда
							ОписаниеФайла.ИмяФайлаXML = СтруктураИмениФайла.Имя;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				// Дополнительно избыточно выгружаем xml и кладем рядом с архивом для совместимости.
				// В список файлов в анкете его не пишем.
				Если ЭтоРасшифровкиБухОтчетности
				 Или ЗаполнениеФинОтчетностиВБанки.ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				ПользовательскийФорматПредыдущий = ПараметрыПомещения.ПользовательскийФорматДляВыгрузки;
				ПараметрыПомещения.ПользовательскийФорматДляВыгрузки = Неопределено; // отключаем помещение пользовательских файлов
				
				РезультатПодготовки = ЗаполнениеФинОтчетностиВБанки.ПоместитьВЖурналОперацийСФайламиДанныеРеглОтчета(
					РезультатВыгрузкиОтчета, ПараметрыПомещения);
				
				ПараметрыПомещения.ПользовательскийФорматДляВыгрузки = ПользовательскийФорматПредыдущий;
				
			КонецЦикла;
			// Очищаем временное хранилище.
			Если РезультатВыгрузкиОтчета.Свойство("АдресФайлаВыгрузки")
			   И ЭтоАдресВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки) Тогда
				УдалитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
				РезультатВыгрузкиОтчета.АдресФайлаВыгрузки = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОтчетНайден Тогда
			ОбработатьОшибкуВыгрузкиОтчетности("Поиск", ОписаниеВыгружаемогоОтчета, Результат);
		КонецЕсли;
			
		// Отмечаем прогресс подготовки файлов.
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			ТребуемыйОтчетЗаемщика.НаименованиеОтчета,
			СостояниеПрогресса.ДополнительныеПараметры);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВыгружаемыхФорматов(ТаблицаВыгружаемыхФорматов, КредитныеПродукты, ИдентификаторыКредитныхПродуктов, ВариантыВыгрузкиРеглОтчета)
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ПрефиксФайла");
	СтруктураОтбора.Вставить("ФорматИменованияФайлов");
	СтруктураОтбора.Вставить("ФорматСохранения");
	СтруктураОтбора.Вставить("ВидВыгрузкиРеглОтчета");

	ТаблицаВыгружаемыхФорматов.Очистить();
	Для Каждого ИдентификаторКредитногоПродукта Из ИдентификаторыКредитныхПродуктов Цикл  
		
		КредитныйПродукт = КредитныеПродукты.Найти(ИдентификаторКредитногоПродукта, "ИдентификаторКредитногоПродукта");
		Если КредитныйПродукт = Неопределено Тогда
			// Ошибка алгоритма: использование идентификатора кредитного продукта при отсутствии самого кредитного продукта.
			Продолжить;
		КонецЕсли;      

		Для Каждого Вариант Из ВариантыВыгрузкиРеглОтчета Цикл   
			
			Если КредитныйПродукт.Банк <> Вариант.Банк Тогда 
				Продолжить;
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Вариант);
			
		КонецЦикла;  
		
		ФорматИменФайловПродукта = КредитныйПродукт.ФорматИменФайловПродукта;
		СтруктураОтбора.ПрефиксФайла = ФорматИменФайловПродукта.ПрефиксФайла; 
		СтруктураОтбора.ФорматИменованияФайлов = ФорматИменФайловПродукта.ФорматИменованияФайлов; 

		НайденныеСтрокиФорматов = ТаблицаВыгружаемыхФорматов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиФорматов.Количество() = 0 Тогда
			
			СтрокаВыгружаемыхФорматов = ТаблицаВыгружаемыхФорматов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВыгружаемыхФорматов, СтруктураОтбора); 
			СтрокаВыгружаемыхФорматов.Банки = Новый Массив;
			
		Иначе
			
			СтрокаВыгружаемыхФорматов = НайденныеСтрокиФорматов[0];
			
		КонецЕсли;
		
		Если СтрокаВыгружаемыхФорматов.Банки.Найти(КредитныйПродукт.Банк) = Неопределено Тогда
			СтрокаВыгружаемыхФорматов.Банки.Добавить(КредитныйПродукт.Банк);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительныеФайлыОтчетности(ОписаниеВыгружаемогоОтчета, ПодготовленныеФайлы, Банки, ДополнительныеФайлы)
	
	Для Каждого Банк Из Банки Цикл
		
		Для Каждого ИмяФайла Из ПодготовленныеФайлы Цикл
			
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
			Наименование = Лев(ИмяФайла, СтрДлина(ИмяФайла) - СтрДлина(Расширение) - 1);
			
			КоличествоФайлов = ДополнительныеФайлы.Количество();
			ОписаниеФайла = ?(КоличествоФайлов > 0, ДополнительныеФайлы[КоличествоФайлов - 1], Неопределено);
			
			Если ОписаниеФайла = Неопределено
			 Или Расширение = "xml" Или ОписаниеФайла.Расширение <> "xml"
			 Или Наименование <> ОписаниеФайла.Наименование
			 Или Банк <> ОписаниеФайла.Банк Тогда
				// Добавляем новую строку, если это другой отчет. Иначе используем предыдущую.
				ОписаниеФайла = ДополнительныеФайлы.Добавить();
				ОписаниеФайла.Банк                 = Банк;
				ОписаниеФайла.КраткоеПредставление = ОписаниеВыгружаемогоОтчета.ПредставлениеОтчета;
				
			КонецЕсли;
			
			ОписаниеФайла.ИмяФайла     = ИмяФайла;
			ОписаниеФайла.Расширение   = Расширение;
			ОписаниеФайла.Наименование = Наименование;
			Если Расширение = "xml" Тогда
				ОписаниеФайла.ИмяФайлаXML = ИмяФайла;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Описывает ошибку на основании контекста, в котором она возникла. Факт возникновения ошибки уже был зафиксирован. Сейчас только описание.
//
//  Параметры:
//   ИмяПроверки - Строка - варианты мест алгоритма, в которых может возникнуть ошибка:
//                  * Поиск - не найден отчет, который требует банк;
//                  * РегламентированныйОтчет - не создан регламентированный отчет, который требуется приложить;
//                  * РасшифровкиБухОтчетности - не удалось выгрузить расшифровку отчетности;
//                  * ОписаниеОшибки - отчет заполнен методически некорректно;
//                  * Подготовка - отчет не удалось добавить в список выгружаемых файлов.
//   ОписаниеВыгружаемогоОтчета - Структура - см. инициализацию переменной в ПодготовитьФайлыДляОтправки_ОтчетностьЗаемщика()
//   РезультатПроверок - Структура - см. инициализацию переменной Результат в ПодготовитьЗаявкуДляОтправки()
//   РезультатДействия - Структура - описание действия, приведшего к ошибке.
//                                   См. ЗаполнениеФинОтчетностиВБанки.ВыгрузитьРегламентированныйОтчет()
//
Процедура ОбработатьОшибкуВыгрузкиОтчетности(ИмяПроверки, ОписаниеВыгружаемогоОтчета, РезультатПроверок, РезультатДействия = Неопределено)
	
	Если ИмяПроверки = "Поиск" Тогда
		// Бух.отчетность и расшифровки к ней необходимо прикладывать к заявке на кредит обязательно.
		// Налоговую отчетность прикладываем только, если ее сдавали через 1С-Отчетность и можно получить отметку ФНС о приеме,
		// поэтому налоговая отчетность может отсутствовать.
		ТекстСообщения = "";
		Если ОписаниеВыгружаемогоОтчета.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В составе заявки требуется предоставить ""%1""'"),
				ОписаниеВыгружаемогоОтчета.ТребуемыйОтчетЗаемщика.НаименованиеОтчета);
		
		ИначеЕсли ОписаниеВыгружаемогоОтчета.ЭтоРасшифровкиБухОтчетности Тогда
				
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В составе дополнительных отчетов для заявки требуется предоставить ""%1""'"),
				ОписаниеВыгружаемогоОтчета.ТребуемыйОтчетЗаемщика.НаименованиеОтчета);
		
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ДобавитьОписаниеОшибки(РезультатПроверок.ОписаниеОшибки, ТекстСообщения);
		КонецЕсли;
			
	ИначеЕсли ИмяПроверки = "РегламентированныйОтчет" Тогда
		// Отчет заполнен методически некорректно.
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Отчет'"), ОписаниеВыгружаемогоОтчета.НайденныйОтчет.НомерСтроки, НСтр("ru = 'Отчетность'"));
		ДобавитьОписаниеОшибки(РезультатПроверок.ОписаниеОшибки, ТекстСообщения);
		
	ИначеЕсли ИмяПроверки = "Подготовка" Тогда
		// Отчет заполнен технически некорректно.	
		ТекстСообщения = СтрСоединить(РезультатДействия.Ошибки, Символы.ПС);
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен отчет ""%1""'"), ОписаниеВыгружаемогоОтчета.ПредставлениеОтчета);
		КонецЕсли;
		ДобавитьОписаниеОшибки(РезультатПроверок.ОписаниеОшибки, ТекстСообщения);
		
		Если ЗначениеЗаполнено(РезультатДействия.ТаблицаСообщений) Тогда
			// Дополняем описание ранее найденных ошибок в других отчетах.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				РезультатПроверок.ТаблицаСообщений,
				ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатДействия.ТаблицаСообщений));
			
		КонецЕсли;
		
	ИначеЕсли ИмяПроверки = "РасшифровкиБухОтчетности" Тогда
		
		ДобавитьОписаниеОшибки(РезультатПроверок.ОписаниеОшибки, РезультатДействия.ОписаниеОшибки);
			
	ИначеЕсли ИмяПроверки = "ОписаниеОшибки" Тогда
		// Не удалось выгрузить файлы на основе регламентированного отчета.
		Если ОписаниеВыгружаемогоОтчета.ЭтоРасшифровкиБухОтчетности Тогда
			
			РезультатДействия.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не заполнен отчет ""%1"".
							|%2'"),
				ОписаниеВыгружаемогоОтчета.ПредставлениеОтчета, РезультатДействия.ОписаниеОшибки);
				
		КонецЕсли;
		ДобавитьОписаниеОшибки(РезультатПроверок.ОписаниеОшибки, РезультатДействия.ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(РезультатДействия.ТаблицаСообщений) Тогда
			
			ПредставлениеФайлаВыгрузки = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(
				ОписаниеВыгружаемогоОтчета.НайденныйОтчет.РегламентированныйОтчет);
			Для Каждого Ошибка Из РезультатДействия.ТаблицаСообщений Цикл
				Если Не ЗначениеЗаполнено(Ошибка.ОтчетДок) Тогда
					Ошибка.ОтчетДок = ОписаниеВыгружаемогоОтчета.НайденныйОтчет.РегламентированныйОтчет;
					Ошибка.Отчет = ПредставлениеФайлаВыгрузки;
				КонецЕсли;
			КонецЦикла;
			
			// Дополняем описание ранее найденных ошибок в других отчетах.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				РезультатПроверок.ТаблицаСообщений,
				ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатДействия.ТаблицаСообщений));
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_ДополнительныеФайлы(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	Перем Вложение;
	
	ДанныеЗаявки = ОписаниеСохраняемыхДанных.СведенияОЗаявке.ДанныеЗаявки;
	
	ОтборВнешнихФайлов = Новый Структура("ДанныеОтсутствуют", Ложь);
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	ДополнительныеФайлы = ДополнительныеФайлы.НайтиСтроки(ОтборВнешнихФайлов);
	
	ПредыдущийДопФайл = Неопределено;
	Для каждого ДопФайл Из ДополнительныеФайлы Цикл
		
		Если ПредыдущийДопФайл = Неопределено
		 Или ПредыдущийДопФайл.Идентификатор <> ДопФайл.Идентификатор
		 Или ПредыдущийДопФайл.КлючСтрокиФайла <> ДопФайл.КлючСтрокиФайла Тогда
			
		    // Помещаем предыдущий.
			Если Вложение <> Неопределено Тогда
				РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
				Если НЕ РезультатОперации.Выполнено Тогда
					Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Начинаем добавлять банки по новому.
			Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
			Вложение.Сервис           = ДанныеЗаявки.СервисОбменаСБанками;
			Вложение.Организация      = ДанныеЗаявки.Организация;
			Вложение.Предмет          = ДанныеЗаявки.Ссылка;
			Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
			Вложение.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ДопФайл.ИмяФайла);
			Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ПроизвольныйФайл;
			Вложение.ИсходноеИмяФайла = ДопФайл.ИмяФайла;
			Вложение.ИсходныеДанные   = РаботаСФайлами.ДвоичныеДанныеФайла(ДопФайл.ДопФайл);
			Вложение.Зашифровать      = Истина;
			Вложение.Подписать        = Истина;
			Вложение.Сжать            = Истина;
			Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ОписаниеСохраняемыхДанных.ЭтоЭлектроннаяПодписьВМоделиСервиса;
			
			ПредыдущийДопФайл = ДопФайл;
			
		КонецЕсли;
		
	 	Вложение.БанкиПолучатели.Добавить(ДопФайл.Банк);
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			НСтр("ru = 'Дополнительный файл'"),
			СостояниеПрогресса.ДополнительныеПараметры);
		
	КонецЦикла;
	Если Вложение <> Неопределено Тогда
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_АнкетаИСогласие(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	
	СведенияОЗаявке        = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	ЗаявкаНаКредит         = СведенияОЗаявке.ДанныеЗаявки.Ссылка;
	КредитныеПродукты      = ОписаниеСохраняемыхДанных.КредитныеПродукты;
	ЭтоЭлектроннаяПодписьВМоделиСервиса = ОписаниеСохраняемыхДанных.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	Банки = КредитныеПродукты.ВыгрузитьКолонку("Банк");
	ДополнительныеПоказатели = ДополнительныеПоказателиБанков(ЗаявкаНаКредит, Банки);
	ДополнительныеПоказатели.Индексы.Добавить("Банк");
	
	ПараметрыСогласия = ПараметрыСогласия(СведенияОЗаявке);
	ИнформацияОБанках = ЗаявкиНаКредит.ПодготовитьИнформациюОБанкахДляСогласийПоКредитнымПродуктам(КредитныеПродукты, ПараметрыСогласия);
	ПараметрыФорматирования = УниверсальныйОбменСБанкамиФормы.ПараметрыФорматированияСогласия();
	ПараметрыФорматирования.ОбъединитьТексты = Ложь;
	ПараметрыФорматирования.ИмяРеквизитаПредставленияБанка = "ПолноеНаименованиеБанка";
	ТекстыСогласий    = УниверсальныйОбменСБанкамиФормы.ТекстСогласия(ПараметрыСогласия, ИнформацияОБанках, ПараметрыФорматирования);
	Если ТекстыСогласий.Количество() <> КредитныеПродукты.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Не для всех партнеров, принимающих заявки, удалось подобрать тексты согласий на обработку данных.
			|Обратитесь в службу технической поддержки фирмы 1С.'");
	КонецЕсли;
	
	ОтборСогласий = Новый Структура;
	ОтборСогласий.Вставить("ИдентификаторПродукта", "");
	ОтборСогласий.Вставить("Банк", Справочники.БанкиУниверсальногоОбмена.ПустаяСсылка());
	
	// Для каждого банка вкладываем в пакет заявки:
	Для каждого КредитныйПродукт Из КредитныеПродукты Цикл
		
		СведенияОБанке = ИнформацияОБанках.Найти(КредитныйПродукт.Банк, "Банк");
		Если СведенияОБанке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПоказателиБанка = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Банк", КредитныйПродукт.Банк));
		ДополнительныеФайлы = ДополнительныеФайлыДляБанка(ОписаниеСохраняемыхДанных.ДополнительныеФайлы, КредитныйПродукт.Банк);
		
		Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		Вложение.Сервис           = СведенияОЗаявке.ДанныеЗаявки.СервисОбменаСБанками;
		Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
		Вложение.Предмет          = ЗаявкаНаКредит;
		Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
		Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика;
		Вложение.БанкиПолучатели.Добавить(КредитныйПродукт.Банк);
		Вложение.Зашифровать      = Истина;
		Вложение.Подписать        = Истина;
		Вложение.Сжать            = Истина;
		Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭтоЭлектроннаяПодписьВМоделиСервиса;
		
		// 1. XML-файл самой заявки.
		ГруппаФайлов = ГруппаФайловПоПризнаку(Вложение.ТипДокумента);
		Если ДополнительныеФайлы[ГруппаФайлов].Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Среди прикладываемых файлов отсутствует анкета заемщика'");
		КонецЕсли;
		ОписаниеФайла = ДополнительныеФайлы[ГруппаФайлов][0];
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
		Вложение.ИсходноеИмяФайла = ОписаниеФайла.ИмяФайлаXML;
		Вложение.ИсходныеДанные   = ВыгрузитьЗаявкуНаКредитXML(ОписаниеФайла.ИмяФайлаXML,
			СведенияОЗаявке, КредитныйПродукт, СведенияОБанке, ДополнительныеПоказателиБанка, ДополнительныеФайлы);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если Не РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			СтрШаблон(НСтр("ru = 'Заявка в %1'"), КредитныйПродукт.Банк),
			СостояниеПрогресса.ДополнительныеПараметры);

		// 2. Excel-файл самой заявки.
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_spreadsheet;
		Вложение.ИсходноеИмяФайла = ОписаниеФайла.ИмяФайла;
		Вложение.ИсходныеДанные   = ВыгрузитьЗаявкуНаКредитExcel(
			СведенияОЗаявке, КредитныйПродукт, СведенияОБанке, ДополнительныеПоказателиБанка, ДополнительныеФайлы);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			СтрШаблон(НСтр("ru = 'Заявка в %1'"), КредитныйПродукт.Банк),
			СостояниеПрогресса.ДополнительныеПараметры);
			
		// 3. pdf-файл согласия на обработку данных.
		ОтборСогласий.ИдентификаторПродукта = КредитныйПродукт.ИдентификаторКредитногоПродукта;
		ОтборСогласий.Банк = КредитныйПродукт.Банк;
		НайденныеСтроки = ТекстыСогласий.НайтиСтроки(ОтборСогласий);
		ТекстСогласия = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Текст, "");
		
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.pdf;
		Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.СогласиеНаОбработкуДанных;
		
		ГруппаФайлов = ГруппаФайловПоПризнаку(Вложение.ТипДокумента);
		Если ДополнительныеФайлы[ГруппаФайлов].Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Среди прикладываемых файлов отсутствует согласие на обработку данных'");
		КонецЕсли;
		ОписаниеФайла = ДополнительныеФайлы[ГруппаФайлов][0];
		Вложение.ИсходноеИмяФайла = ОписаниеФайла.ИмяФайла;
		Вложение.ИсходныеДанные   = ВыгрузитьСогласие(СведенияОЗаявке, ТекстСогласия);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			СтрШаблон(НСтр("ru = 'Согласие в %1'"), СведенияОБанке.Наименование),
			СостояниеПрогресса.ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетностьЗаемщика
// Возвращает полное пользовательское представление отчета по его параметрам.
//
Функция ПредставлениеОтчета(ВидОтчетаБРО, КодСчета = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено)
	
	// Определим пользовательское имя отчета.
	Если ВидОтчетаБРО = "БухгалтерскаяОтчетность" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Бухгалтерская отчетность'");
		
	ИначеЕсли ВидОтчетаБРО = "АнализСчета" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Анализ счета'");
		
	ИначеЕсли ВидОтчетаБРО = "КарточкаСчета" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Карточка счета'");
		
	ИначеЕсли ВидОтчетаБРО = "ОборотноСальдоваяВедомость" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Оборотно-сальдовая ведомость'");
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияПрибыль" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по налогу на прибыль'");
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияНДС" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по НДС'");
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияУСН" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по УСН'");
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияЕНВД" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по ЕНВД'");
		
	ИначеЕсли ВидОтчетаБРО = "Декларация3НДФЛ" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация 3-НДФЛ'");
		
	Иначе
		НаименованиеОтчета = ВидОтчетаБРО;
		
	КонецЕсли;
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(НаименованиеОтчета);
	
	Если ЗначениеЗаполнено(КодСчета) Тогда
		Подстроки.Добавить(КодСчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПериодПредставление = ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), НСтр("ru = 'ФП=Истина'"));
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'за %1'"), ПериодПредставление));
	КонецЕсли;
	
	Возврат СтрСоединить(Подстроки, " ");
	
КонецФункции

Функция ИсточникОтчета(ВидОтчетаБРО) Экспорт
	
	Если ВидОтчетаБРО = "БухгалтерскаяОтчетность" Тогда
		// Бухгалтерская отчетность может быть либо общая ("РегламентированныйОтчетБухОтчетность")
		// либо малых предприятий ("РегламентированныйОтчетБухОтчетностьМП").
		// В заявке сохраняем в ИсточникОтчета строку с обобщенным наименованием, 
		// подбор отчетов нужно выполнять среди обоих видов.
		Возврат "БухгалтерскаяОтчетность";
		
	ИначеЕсли ВидОтчетаБРО = "АнализСчета" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";
		
	ИначеЕсли ВидОтчетаБРО = "КарточкаСчета" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";
		
	ИначеЕсли ВидОтчетаБРО = "ОборотноСальдоваяВедомость" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияПрибыль" Тогда
		Возврат "РегламентированныйОтчетПрибыль";
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияНДС" Тогда
		Возврат "РегламентированныйОтчетНДС";
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияУСН" Тогда
		Возврат "РегламентированныйОтчетУСН";
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияЕНВД" Тогда
		Возврат "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход";
		
	ИначеЕсли ВидОтчетаБРО = "Декларация3НДФЛ" Тогда
		Возврат "РегламентированныйОтчет3НДФЛ";
		
	Иначе
		// Оставляем имя отчета без изменения.
		Возврат ВидОтчетаБРО;
		
	КонецЕсли;
	
КонецФункции

Функция ШаблоныИменФайловПоИсточникуОтчета()
	ШаблоныИменФайловПоИсточникуОтчета = Новый Соответствие;
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетБухОтчетность",				 	"BANK_BUHOTCH_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетБухОтчетностьМП",			 	"BANK_BOUPR_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетПрибыль", 						"BANK_PRIB_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетНДС",							"BANK_NDS_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетУСН", 							"BANK_USN_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчет3НДФЛ", 						"BANK_NDFL3_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход",	"BANK_ENVD_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетИмущество", 					"BANK_IMUD_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетЕСХН",							"BANK_ESHN_%2_%3");
	ШаблоныИменФайловПоИсточникуОтчета.Вставить("РегламентированныйОтчетРасчетПоСтраховымВзносам", 		"BANK_RASCHSV_%2_%3");
	
	Возврат ШаблоныИменФайловПоИсточникуОтчета;
КонецФункции

// Сопоставляет символьному коду виды отчетов, которые под ним отправляются.
//
// Возвращаемое значение:
//   Структура - соответствие один-ко-многим:
//             * ключ - Строка - код отчета;
//             * значение - Массив из Строк - виды отчетов.
//
Функция СоответствиеВидовИКодовОтчетов() Экспорт
	
	СоответствиеВидовИКодов = Новый Структура;
	
	СоответствиеВидовИКодов.Вставить("ANS", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("АнализСчета"));
	
	ИмеющеесяСоответствие = Новый Массив;
	ИмеющеесяСоответствие.Добавить("ОборотноСальдоваяВедомость");
	ИмеющеесяСоответствие.Добавить("ОборотноСальдоваяВедомостьПоСчету");
	СоответствиеВидовИКодов.Вставить("OSV", ИмеющеесяСоответствие);
	
	ИмеющеесяСоответствие = Новый Массив;
	ИмеющеесяСоответствие.Добавить("КарточкаСчета");
	ИмеющеесяСоответствие.Добавить("ОперацииПоБанковскимСчетам");
	СоответствиеВидовИКодов.Вставить("TRN", ИмеющеесяСоответствие);
	
	ИмеющеесяСоответствие = Новый Массив;
	ИмеющеесяСоответствие.Добавить("КарточкаСчетаБланк");
	СоответствиеВидовИКодов.Вставить("StTRN", ИмеющеесяСоответствие);
	
	Возврат СоответствиеВидовИКодов;
	
КонецФункции

Процедура ПрочитатьОтчетностьЗаемщика(СведенияОЗаемщике, ДатаЗаявки, Банк, ХранилищеXML, СведенияОБанках)
	
	УсловияКредитования = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СведенияОЗаемщике.СервисОбменаСБанками, ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшСчетов = Неопределено;  // Инициализируется при первом обращении.
	СведенияОЗаемщике.ДополнительныеСвойства.Свойство("КэшСчетов", КэшСчетов);
	
	ОтчетностьПоКредитнымПродуктам = Новый Соответствие;
	
	// Найдем актуальный список отчетности, который требуется банку.
	Для каждого ТребованияБанка Из УсловияКредитования.ОтчетностьЗаемщика Цикл
		Если ТребованияБанка.ДатаНачала > ДатаЗаявки
			ИЛИ ТребованияБанка.ДатаОкончания < ДатаЗаявки Тогда
			Продолжить;
		КонецЕсли;
		
		ОтчетностьЗаемщика = Новый ТаблицаЗначений;
		ОтчетностьЗаемщика.Колонки.Добавить("ВидОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтчетностьЗаемщика.Колонки.Добавить("ПериодОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтчетностьЗаемщика.Колонки.Добавить("ДатаНачалаПериода", Новый ОписаниеТипов("Дата"));
		ОтчетностьЗаемщика.Колонки.Добавить("КоличествоПериодов", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ОтчетностьЗаемщика.Колонки.Добавить("Счета", Новый ОписаниеТипов("СписокЗначений"));
		ОтчетностьЗаемщика.Колонки.Добавить("КодСчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтчетностьЗаемщика.Колонки.Добавить("ПорядокСчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтчетностьЗаемщика.Колонки.Добавить("ПредставлениеОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтчетностьЗаемщика.Колонки.Добавить("НомерГруппыОтчета", ОбщегоНазначения.ОписаниеТипаЧисло(3));
		ОтчетностьЗаемщика.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
		
		ЭтоЮрЛицо = СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Для Каждого ОтчетЗаемщика Из ТребованияБанка.ОтчетЗаемщика Цикл
			
			ОтчетПрименимКЗаемщику     = Ложь;
			ПериодОтчета               = ОтчетЗаемщика.ПериодОтчета;
			ДатаНачалаПериода          = ОтчетЗаемщика.ДатаНачалаПериода;
			КодСчета                   = "";
			НомерГруппыОтчета          = 2;
			ПорядокСортировкиПоМесяцам = 0;
			
			// Количество периодов, за который необходимо предоставлять отчет.
			Если ЗначениеЗаполнено(ОтчетЗаемщика.КоличествоПериодов) Тогда
				КоличествоПериодов = ОтчетЗаемщика.КоличествоПериодов;
			Иначе
				КоличествоПериодов = 1;
			КонецЕсли;
			
			Если ОтчетЗаемщика.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
				// Бух.отчетность только для юр.лиц, ИП бух.учет вести не обязаны.
				ОтчетПрименимКЗаемщику = ЭтоЮрЛицо;
				НомерГруппыОтчета = 1;
				
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
				// ОСВ возможно формировать для любого заемщика.
				ОтчетПрименимКЗаемщику = Истина;
				НомерГруппыОтчета = 90;
				
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "КарточкаСчета"
				ИЛИ ОтчетЗаемщика.ВидОтчета = "АнализСчета" Тогда
				// Стандартные бухгалтерские отчеты возможно формировать для любого заемщика.
				ОтчетПрименимКЗаемщику = Истина;
				НомерГруппыОтчета = 100;
				КодСчета = СокрЛП(ОтчетЗаемщика.Счет);
				
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияПрибыль" Тогда
				ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
					И (УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки)
					ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки - 1));
					
				Если ОтчетПрименимКЗаемщику И ПериодОтчета = "ПредыдущийМесяц" Тогда
					// Месячные отчеты могут быть только в том случае, если налогоплательщик уплачивает авансы по налогу на прибыль ежемесячно.
					ПорядокУплатыАвансов   = УчетнаяПолитика.ПорядокУплатыАвансов(СведенияОЗаемщике.Организация, ДатаЗаявки);
					ОтчетПрименимКЗаемщику = ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно
						ИЛИ ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
				КонецЕсли;
				
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияНДС" Тогда
				// Всегда за предыдущий квартал.
				ПериодОтчета = "ПредыдущийКвартал";
				ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
					И (УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки)
					ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
				
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияУСН" Тогда
				// Всегда за предыдущий год.
				ПериодОтчета           = "ПредыдущийГод";
				ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
					И (УчетнаяПолитика.ПрименяетсяУСН(СведенияОЗаемщике.Организация, ДатаЗаявки)
					ИЛИ УчетнаяПолитика.ПрименяетсяУСН(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
			
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияЕНВД" Тогда
				// Всегда за предыдущий квартал.
				ПериодОтчета = "ПредыдущийКвартал";
				
				ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
					И (УчетнаяПолитика.ПлательщикЕНВД(СведенияОЗаемщике.Организация, ДатаЗаявки)
					ИЛИ УчетнаяПолитика.ПлательщикЕНВД(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
			
			ИначеЕсли ОтчетЗаемщика.ВидОтчета = "Декларация3НДФЛ" Тогда
				// Всегда за предыдущий год.
				ПериодОтчета = "ПредыдущийГод";
				
				ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
					И (УчетнаяПолитика.ПлательщикНДФЛ(СведенияОЗаемщике.Организация, ДатаЗаявки)
					ИЛИ УчетнаяПолитика.ПлательщикНДФЛ(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
				
			КонецЕсли;
			
			Если НЕ ОтчетПрименимКЗаемщику Тогда
				Продолжить;
			КонецЕсли;
			
			// Подбираем вариант сортировки по месяцам в зависимости от периода отчета
			ВариантыСортировкиПоМесяцам = Новый Структура;
			ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийГод", 12);
			ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийКвартал", 3);
			ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийМесяц", 1);
			ВариантыСортировкиПоМесяцам.Свойство(ПериодОтчета, ПорядокСортировкиПоМесяцам);
			
			СворачиватьВОднуСтроку = ОтчетЗаемщика.ВидОтчета = "АнализСчета"
				ИЛИ ОтчетЗаемщика.ВидОтчета = "КарточкаСчета"
				ИЛИ ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость";
			
			// Отчеты одного вида за одинаковое количество периодов сворачиваем в одну строку.
			// Анализ счета и карточка счета всегда сворачивается до одной строки, независимо
			// от количества периодов.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ВидОтчета", ОтчетЗаемщика.ВидОтчета);
			Если НЕ СворачиватьВОднуСтроку Тогда
				ПараметрыОтбора.Вставить("ПериодОтчета", ПериодОтчета);
				ПараметрыОтбора.Вставить("КоличествоПериодов", КоличествоПериодов);
			КонецЕсли;
			СуществующиеСтроки = ОтчетностьЗаемщика.НайтиСтроки(ПараметрыОтбора);
			
			Если СуществующиеСтроки.Количество() > 0 Тогда
				СуществующаяСтрока = СуществующиеСтроки[0];
				Если НЕ ПустаяСтрока(КодСчета) И СуществующаяСтрока.Счета.НайтиПоЗначению(КодСчета) = Неопределено Тогда
					СуществующаяСтрока.Счета.Добавить(КодСчета, ПорядокСчета(КодСчета, КэшСчетов));
					СуществующаяСтрока.Счета.СортироватьПоПредставлению();
					СуществующаяСтрока.КодСчета     = СуществующаяСтрока.Счета[0].Значение;
					СуществующаяСтрока.ПорядокСчета = СуществующаяСтрока.Счета[0].Представление;
				КонецЕсли;
				
				ПериодыОтчетовРазличаются = ПериодОтчета <> СуществующаяСтрока.ПериодОтчета
					ИЛИ КоличествоПериодов <> СуществующаяСтрока.КоличествоПериодов;
					
				Если СворачиватьВОднуСтроку И ПериодыОтчетовРазличаются Тогда
					СуществующаяСтрока.ПериодОтчета = "НесколькоПериодов";
					СуществующаяСтрока.КоличествоПериодов = 0;
				КонецЕсли;
			Иначе
				СписокСчетов = Новый СписокЗначений;
				Если НЕ ПустаяСтрока(КодСчета) Тогда
					ПорядокСчета = ПорядокСчета(КодСчета, КэшСчетов);
					СписокСчетов.Добавить(КодСчета, ПорядокСчета);
				КонецЕсли;
				
				НоваяСтрока = ОтчетностьЗаемщика.Добавить();
				НоваяСтрока.ВидОтчета = ОтчетЗаемщика.ВидОтчета;
				НоваяСтрока.ПериодОтчета = ПериодОтчета;
				НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
				НоваяСтрока.КоличествоПериодов = КоличествоПериодов;
				НоваяСтрока.Счета = СписокСчетов;
				НоваяСтрока.КодСчета = КодСчета;
				НоваяСтрока.ПорядокСчета = ПорядокСчета;
				НоваяСтрока.НомерГруппыОтчета = НомерГруппыОтчета;
				НоваяСтрока.ПорядокСортировкиПоМесяцам = ПорядокСортировкиПоМесяцам;
			КонецЕсли;
			
		КонецЦикла;
		
		ОтчетностьЗаемщика.Сортировать("НомерГруппыОтчета, ВидОтчета, ПорядокСчета, ПорядокСортировкиПоМесяцам");
		
		// Сформируем представление отчета для пользователя.
		Для Каждого СтрокаТаблицы Из ОтчетностьЗаемщика Цикл
			
			Если СтрокаТаблицы.ВидОтчета = "АнализСчета" Тогда
				Если СтрокаТаблицы.Счета.Количество() > 1 Тогда
					ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Анализ счетов %1'"),
						СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
				Иначе
					ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Анализ счета %1'"),
						СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
				КонецЕсли
			ИначеЕсли СтрокаТаблицы.ВидОтчета = "КарточкаСчета" Тогда
				Если СтрокаТаблицы.Счета.Количество() > 1 Тогда
					ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Карточки счетов %1'"),
						СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
				Иначе
					ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Карточка счета %1'"),
						СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
				КонецЕсли;
			Иначе
				ВидОтчетаБРО  = СтрокаТаблицы.ВидОтчета;
				ПредставлениеОтчета = ПредставлениеОтчета(ВидОтчетаБРО);
			КонецЕсли;
			
			ПредставлениеПериода = "";
			Если СтрокаТаблицы.ПериодОтчета = "НесколькоПериодов" Тогда
				ПредставлениеПериода = НСтр("ru = 'за несколько периодов'");
			ИначеЕсли СтрокаТаблицы.ПериодОтчета = "СНачалаТекущегоГода" Тогда
				ПредставлениеПериода = НСтр("ru = 'с начала текущего года'");
			ИначеЕсли СтрокаТаблицы.ПериодОтчета = "СУказаннойДаты" Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'с %1'"), Формат(СтрокаТаблицы.ДатаНачалаПериода, "ДЛФ=DD"));
			Иначе
				Если СтрокаТаблицы.ПериодОтчета = "ПредыдущийГод" Тогда
					ПредставлениеПериода = СтрокаСЧислом(НСтр("ru = '; предыдущий год;; предыдущих года; предыдущих лет; предыдущих года'"),
						СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
				ИначеЕсли СтрокаТаблицы.ПериодОтчета = "ПредыдущийКвартал" Тогда
					ПредставлениеПериода = СтрокаСЧислом(НСтр("ru = '; предыдущий квартал;; предыдущих квартала; предыдущих кварталов; предыдущих квартала'"),
						СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
				ИначеЕсли СтрокаТаблицы.ПериодОтчета = "ПредыдущийМесяц" Тогда
					ПредставлениеПериода = СтрокаСЧислом(НСтр("ru = '; предыдущий месяц;; предыдущих месяца; предыдущих месяцев; предыдущих месяца'"),
						СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
				КонецЕсли;
				ПредставлениеПериода = НСтр("ru = 'за '")
					+ ?(СтрокаТаблицы.КоличествоПериодов > 1,
						СтрШаблон(НСтр("ru = '%1 '"), СтрокаТаблицы.КоличествоПериодов),
						"")
					+ ПредставлениеПериода;
			КонецЕсли;
			
			СтрокаТаблицы.ПредставлениеОтчета = СтрШаблон(НСтр("ru = '%1 %2'"),
				ПредставлениеОтчета,
				ПредставлениеПериода);
		КонецЦикла;
		
		Если ТребованияБанка.Свойства().Получить("ИдентификаторКредитногоПродукта") <> Неопределено 
			И ЗначениеЗаполнено(ТребованияБанка.ИдентификаторКредитногоПродукта) Тогда
			ОтчетностьПоКредитнымПродуктам.Вставить(ТребованияБанка.ИдентификаторКредитногоПродукта, ОтчетностьЗаемщика);
		Иначе // Это общий набор отчетности для всех продуктов банка.
			СтрокиТаблицы = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", Банк));
			Если СтрокиТаблицы.Количество() > 0 Тогда
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					СтрокаТаблицы.ОтчетностьЗаемщика = ОтчетностьЗаемщика;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из ОтчетностьПоКредитнымПродуктам Цикл
		СтрокаТаблицы = СведенияОБанках.Найти(Элемент.Ключ, "ИдентификаторКредитногоПродукта");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.ОтчетностьЗаемщика = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Сохраним кэш, чтобы использовать при последующих вызовах для других банков.
	СведенияОЗаемщике.ДополнительныеСвойства.Вставить("КэшСчетов", КэшСчетов);
	
КонецПроцедуры

Процедура ПрочитатьТребованияБанкаКОтчетностиЗаемщика(СведенияОЗаемщике, ДатаЗаявки, Банк, ИдентификаторыКредитныхПродуктов, ХранилищеXML, СоставОтчетности)
	
	УсловияКредитования = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СведенияОЗаемщике.СервисОбменаСБанками, ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем актуальный список отчетности, который требуется банку.
	ДействующиеТребования = ДействующиеТребованияНаДату(УсловияКредитования.ОтчетностьЗаемщика, ДатаЗаявки, ИдентификаторыКредитныхПродуктов);
	Если ДействующиеТребования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПервогоМесяцаРаботы = НачалоМесяца(Макс(СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме, СведенияОЗаемщике.ДатаРегистрации));
	КонецПоследнегоЗакрытогоМесяца    = КонецМесяца(СведенияОЗаемщике.ПериодРегистрации);
	КонецПоследнегоКалендарногоМесяца = НачалоМесяца(ДатаЗаявки) - 1;
	
	ЭтоЮрЛицо = СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	// В списке требований банка присутствуют максимально возможный перечень отчетов.
	// В зависимости от вида организации (юридическое лицо или ИП), а также системы налогообложения,
	// определим из списка банка те отчеты, которые применимы к организации из заявки на кредит.
	Для Каждого ОтчетЗаемщика Из ДействующиеТребования.ОтчетЗаемщика Цикл
		
		ОтчетПрименимКЗаемщику  = Ложь;
		ДатаНачала              = '0001-01-01';
		ДатаОкончания           = '0001-01-01';
		ПериодОтчета            = ОтчетЗаемщика.ПериодОтчета;
		ДатаНачалаПериода       = ОтчетЗаемщика.ДатаНачалаПериода;
		НакопительноСНачалаГода = Ложь; // Признак того, что отчет всегда формируется накопительно с начала года.
		КоличествоМесяцевВПериоде = 0;
		
		// По умолчанию считаем, что отсчитываем периоды до последнего закрытого месяца (включительно), 
		// но банк может заказать до последнего полного календарного месяца перед датой заявки (тоже включительно).
		Если ОтчетЗаемщика.ПраваяГраницаПериода = "КалендарныйМесяцДоДатыЗаявки" Тогда
			КонецМесяцаОтчета = КонецПоследнегоКалендарногоМесяца;
		Иначе
			КонецМесяцаОтчета = КонецПоследнегоЗакрытогоМесяца;
		КонецЕсли;
		
		// Количество периодов, за который необходимо предоставлять отчет.
		Если ЗначениеЗаполнено(ОтчетЗаемщика.КоличествоПериодов) Тогда
			КоличествоПериодов = ОтчетЗаемщика.КоличествоПериодов;
		Иначе
			КоличествоПериодов = 1;
		КонецЕсли;
		
		Если ОтчетЗаемщика.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
			// Бух.отчетность только для юр.лиц, ИП бух.учет вести не обязаны.
			ОтчетПрименимКЗаемщику = ЭтоЮрЛицо;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов, ДатаНачалаПериода);
			НакопительноСНачалаГода=Истина;
			
			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ПериодОтчета = "ПредыдущийМесяц" ИЛИ ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" ИЛИ ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			Иначе
				// Бух.отчетность всегда за период не более, чем за год.
				КоличествоМесяцевВПериоде = 12;
			КонецЕсли;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "КарточкаСчета"
			  ИЛИ ОтчетЗаемщика.ВидОтчета = "АнализСчета"
			  ИЛИ ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
			// Стандартные бухгалтерские отчеты возможно формировать для любого заемщика.
			ОтчетПрименимКЗаемщику = Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов, ДатаНачалаПериода);
			
			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			ИначеЕсли ОтчетЗаемщика.Периодичность = "Год" Тогда
				КоличествоМесяцевВПериоде = 12;
			КонецЕсли;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияПрибыль" Тогда
			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ПериодОтчета = "ПредыдущийМесяц" ИЛИ ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" ИЛИ ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			Иначе
				// Декларация по прибыли всегда за период не более, чем за год.
				КоличествоМесяцевВПериоде = 12;
			КонецЕсли;
			
			НакопительноСНачалаГода= Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов, ДатаНачалаПериода);
			
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаНачала)
				ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаОкончания);
				
			Если ОтчетПрименимКЗаемщику И КоличествоМесяцевВПериоде = 1 Тогда
				// Месячные отчеты могут быть только в том случае, если налогоплательщик уплачивает авансы по налогу на прибыль ежемесячно.
				ПорядокУплатыАвансов   = УчетнаяПолитика.ПорядокУплатыАвансов(СведенияОЗаемщике.Организация, ДатаОкончания);
				ОтчетПрименимКЗаемщику = ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно
					ИЛИ ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
			КонецЕсли;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияНДС" Тогда
			// Всегда за предыдущий квартал.
			КоличествоМесяцевВПериоде = 3;
			ПериодОтчета       = "ПредыдущийКвартал";
			ДатаОкончания      = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала         = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета , КоличествоПериодов, ДатаНачалаПериода);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНДС(СведенияОЗаемщике.Организация, ДатаНачала)
				ИЛИ УчетнаяПолитика.ПлательщикНДС(СведенияОЗаемщике.Организация, ДатаОкончания);
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияУСН" Тогда
			// Всегда за предыдущий год.
			КоличествоМесяцевВПериоде = 12;
			ПериодОтчета           = "ПредыдущийГод";
			НакопительноСНачалаГода= Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов, ДатаНачалаПериода);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияЕНВД" Тогда
			// Всегда за предыдущий квартал.
			КоличествоМесяцевВПериоде = 3;
			ПериодОтчета       = "ПредыдущийКвартал";
			ДатаОкончания      = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала         = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета , КоличествоПериодов, ДатаНачалаПериода);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "Декларация3НДФЛ" Тогда
			// Всегда за предыдущий год.
			КоличествоМесяцевВПериоде = 12;
			ПериодОтчета           = "ПредыдущийГод";
			НакопительноСНачалаГода= Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов, ДатаНачалаПериода);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
		Если НЕ ОтчетПрименимКЗаемщику Тогда
			Продолжить;
		КонецЕсли;
		
		КодСчета      = СокрЛП(ОтчетЗаемщика.Счет);
		ВидОтчетаБРО  = ОтчетЗаемщика.ВидОтчета;
		
		// В зависимости от указанной банком периодичности формируем несколько строк отчетов.
		// Периоды определяем, последовательно отступая назад в прошлое.
		ДатаНачала = Макс(ДатаНачала, НачалоПервогоМесяцаРаботы);
		ТекущаяДатаОкончания = ДатаОкончания;
		Пока ТекущаяДатаОкончания >= ДатаНачала Цикл
			
			// Определяем начало текущего периода.
			Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) Тогда
				ТекущаяДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаОкончания), - (КоличествоМесяцевВПериоде - 1));
				ТекущаяДатаНачала = Макс(ТекущаяДатаНачала, ДатаНачала);
			Иначе
				ТекущаяДатаНачала = ДатаНачала;
			КонецЕсли;
			Если НакопительноСНачалаГода Тогда
				ТекущаяДатаНачала = НачалоГода(ТекущаяДатаНачала);
			КонецЕсли;
			
			НоваяСтрока = СоставОтчетности.Добавить();
			НоваяСтрока.ВидОтчета     = ВидОтчетаБРО;
			НоваяСтрока.ДатаНачала    = ТекущаяДатаНачала;
			НоваяСтрока.ДатаОкончания = ТекущаяДатаОкончания;
			НоваяСтрока.КодСчета      = КодСчета;
			НоваяСтрока.Банк          = Банк;
			НоваяСтрока.ИдентификаторыКредитныхПродуктов = ИдентификаторыКредитныхПродуктов;  
			
			// Формирование регл. отчетности всегда происходит в формате XLSX.
			// Если в настройках банка указали этот формат как дополнительный, 
			// то его не добавляем 
			Если ОтчетЗаемщика.ФорматСохранения <> "XLSX" Тогда
				НоваяСтрока.ФорматСохранения = ОтчетЗаемщика.ФорматСохранения;     
			КонецЕсли;
            НоваяСтрока.ВидВыгрузкиРеглОтчета = ОтчетЗаемщика.ВидВыгрузкиРеглОтчета;

			// Переходим к предыдущему периоду.
			Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) Тогда
				ТекущаяДатаОкончания = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ТекущаяДатаОкончания), - КоличествоМесяцевВПериоде));
			Иначе
				// Требуется только один период.
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДействующиеТребованияНаДату(ОтчетностьЗаемщика, Период, ИдентификаторыКредитныхПродуктов)
	
	ДействующиеТребования = Неопределено;
	Для Каждого ТребованияБанка Из ОтчетностьЗаемщика Цикл
		Если ТребованияБанка.ДатаНачала <= Период
			И ТребованияБанка.ДатаОкончания >= Период Тогда
			
			Если ТребованияБанка.Свойства().Получить("ИдентификаторКредитногоПродукта") <> Неопределено
				И ЗначениеЗаполнено(ТребованияБанка.ИдентификаторКредитногоПродукта)
				И ИдентификаторыКредитныхПродуктов.Найти(ТребованияБанка.ИдентификаторКредитногоПродукта) = Неопределено Тогда
				Продолжить; // Этот список отчетов относится к другому кредитному продукту банка.
			КонецЕсли;
			
			ДействующиеТребования = ТребованияБанка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеТребования;
	
КонецФункции

Функция ПорядокСчета(КодСчета, КэшСчетов)

	Если КэшСчетов = Неопределено Тогда
		КэшСчетов = Новый Соответствие; // Ключ - Код счета, Значение - Порядок счетов.
	КонецЕсли;
	
	Результат = КэшСчетов[КодСчета];
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчета);
	Если ЗначениеЗаполнено(Счет) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Результат = СвойстваСчета.Порядок;
	Иначе
		Результат = "";
	КонецЕсли;
	
	// Запомним в кэше для следующего раза.
	КэшСчетов.Вставить(КодСчета, Результат);
	
	Возврат Результат;

КонецФункции

// Возвращает дату начала периода отчета, исходя из указанного периода в XML файле. 
// 
Функция НачалоПериодаОтчета(КонецПериода, ПериодОтчетаXDTO, КоличествоПериодов, ДатаНачалаПериода)
	
	Если ПериодОтчетаXDTO = "СУказаннойДаты" Тогда
		Возврат ДатаНачалаПериода;
	КонецЕсли;
	
	Результат = '0001-01-01';
	КоличествоМесяцевВПериоде = 0;

	Если ПериодОтчетаXDTO = "ПредыдущийГод" Тогда
		КоличествоМесяцевВПериоде = 12;
		Если КонецПериода = КонецГода(КонецПериода) Тогда
			Результат = НачалоГода(КонецПериода);
	    Иначе
	    	Результат = НачалоГода(НачалоГода(КонецПериода) - 1);
	    КонецЕсли;
		
	ИначеЕсли ПериодОтчетаXDTO = "СНачалаТекущегоГода" Тогда
		КоличествоМесяцевВПериоде = Месяц(КонецПериода);
	    Результат = НачалоГода(КонецПериода);

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийКвартал" Тогда
		КоличествоМесяцевВПериоде = 3;
	    Результат = НачалоКвартала(КонецПериода);

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийМесяц" Тогда
		КоличествоМесяцевВПериоде = 1;
		Результат = НачалоМесяца(КонецПериода);

	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Документ.ЗаявкаНаКредит.НачалоПериодаОтчета(): Не поддерживаемый вид периода ""%1""'"), ПериодОтчетаXDTO);
	    
	КонецЕсли;

	Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) И ЗначениеЗаполнено(КоличествоПериодов) Тогда
		Результат = ДобавитьМесяц(Результат, - (КоличествоПериодов - 1) * КоличествоМесяцевВПериоде);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает дату окончания периода отчета, исходя из указанного периода в XML файле 
// 
Функция КонецПериодаОтчета(КонецПоследнегоЗакрытогоМесяца, ПериодОтчетаXDTO)

	Результат = '0001-01-01';

	Если ПериодОтчетаXDTO = "ПредыдущийГод" Тогда
		Если КонецПоследнегоЗакрытогоМесяца = КонецГода(КонецПоследнегоЗакрытогоМесяца) Тогда
			Результат = КонецПоследнегоЗакрытогоМесяца;
	    Иначе
	    	Результат = НачалоГода(КонецПоследнегоЗакрытогоМесяца) - 1;
	    КонецЕсли;
		
	ИначеЕсли ПериодОтчетаXDTO = "СНачалаТекущегоГода" Тогда
	    Результат = КонецПоследнегоЗакрытогоМесяца;

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийКвартал" Тогда
		Если КонецПоследнегоЗакрытогоМесяца = КонецКвартала(КонецПоследнегоЗакрытогоМесяца) Тогда
			Результат = КонецПоследнегоЗакрытогоМесяца;
		Иначе
			Результат = НачалоКвартала(КонецПоследнегоЗакрытогоМесяца) - 1;
		КонецЕсли;

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийМесяц" Тогда
		Результат = КонецПоследнегоЗакрытогоМесяца;

	ИначеЕсли ПериодОтчетаXDTO = "СУказаннойДаты" Тогда
		Результат = КонецПоследнегоЗакрытогоМесяца;

	Иначе

		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Документ.ЗаявкаНаКредит.КонецПериодаОтчета(): Не поддерживаемый вид периода ""%1""'"), ПериодОтчетаXDTO);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПодобратьБухОтчетность(СведенияОЗаемщике, НовыеОтчеты)

	ИскомыеОтчеты = ЗаполнениеФинОтчетностиВБанки.НовыеПараметрыПоискаРеглОтчетов();
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		// Отбираем из все искомых отчетов только те, для которых требуется бухгалтерская отчетность.
		// Т.к. бухгалтерская отчетность может быть либо обычная либо упрощенная,
		// то в требованиях банка задается не конкретное имя рег.отчета, а обобщенное.
		Если НовыйОтчет.ИсточникОтчета <> "БухгалтерскаяОтчетность" Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ИскомыеОтчеты.Добавить(), НовыйОтчет);
	КонецЦикла;

	Если ИскомыеОтчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Заполняем прочие колонки, необходимые для поиска.
	ИскомыеОтчеты.ЗаполнитьЗначения(СведенияОЗаемщике.Организация, "Организация");

	// Ищем отчеты вне зависимости от статус сдачи, так как:
	//	- за промежуточные периоды бухотчетность не сдается в ФНС;
	//	- даже если годовая бух.отчетность сдана не через 1С-Отчетность, ее нужно включить в состав заявки.
	БухОтчетность = ЗаполнениеФинОтчетностиВБанки.ПодобратьБухОтчетность(ИскомыеОтчеты);
		
	Если НЕ ЗначениеЗаполнено(БухОтчетность) Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("ИсточникОтчета, ДатаОкончания");
		
	ИсточникиБухОтчетности = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ИсточникиБухгалтерскойОтчетности();
	
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		
		Если НовыйОтчет.ИсточникОтчета <> "БухгалтерскаяОтчетность" Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
		
			Отбор.ИсточникОтчета = ИсточникБухОтчетности;
			Отбор.ДатаОкончания  = НовыйОтчет.ДатаОкончания;
			
			НайденныеСтроки = БухОтчетность.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
			
				НайденнаяСтрока = НайденныеСтроки[0];

				// Запоминаем ссылку и представление найденного рег.отчета.
				НовыйОтчет.РегламентированныйОтчет = НайденнаяСтрока.Ссылка;
				
				ОписаниеОтчета                = ОписаниеОтчета(НайденнаяСтрока);
				НовыйОтчет.НаименованиеОтчета = ОписаниеОтчета.НаименованиеОтчета;
				НовыйОтчет.СостояниеОтчета    = ОписаниеОтчета.СостояниеОтчета;
				
				// Нашли сохраненную бух.отчетность за период, останавливаем на этом поиск.
				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПодобратьНалоговыеДекларации(СведенияОЗаемщике, НовыеОтчеты)

	ИскомыеОтчеты = ЗаполнениеФинОтчетностиВБанки.НовыеПараметрыПоискаРеглОтчетов();
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		// Выбираем отчеты, которые являются декларациями.
		Если НовыйОтчет.ИсточникОтчета = "БухгалтерскаяОтчетность"
			ИЛИ НовыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			Продолжить;
		КонецЕсли;
		
		ИскомыйОтчет = ИскомыеОтчеты.Добавить();
		ЗаполнитьЗначенияСвойств(ИскомыйОтчет, НовыйОтчет);
		
	КонецЦикла;

	Если ИскомыеОтчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Заполняем прочие колонки, необходимые для поиска.
	ИскомыеОтчеты.ЗаполнитьЗначения(СведенияОЗаемщике.Организация, "Организация");

	// Ищем только те отчеты, которые были сданы через 1С-Отчетность,
	// отправленные по другим каналам не учитываем.
	ИскомыеОтчеты.ЗаполнитьЗначения(Истина, "ТребуетсяОтметкаОПриемеОтчетности");

	НалоговыеДекларации = ЗаполнениеФинОтчетностиВБанки.ПодобратьРегламентированныеОтчеты(
		ИскомыеОтчеты);
		
	Если НЕ ЗначениеЗаполнено(НалоговыеДекларации) Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("ИсточникОтчета, ДатаОкончания");
		
	Для Каждого ИскомыйОтчет Из ИскомыеОтчеты Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ИскомыйОтчет);
		
		ЗапрошенныеОтчеты    = НовыеОтчеты.НайтиСтроки(Отбор);
		Если ЗапрошенныеОтчеты.Количество() = 0 Тогда
			// В обычной ситуации не должны сюда попасть, что-то пошло не так.
			Продолжить;
		КонецЕсли;
		
		НайденныеДекларации  = НалоговыеДекларации.НайтиСтроки(Отбор);
		
		// За один и тот же период некоторые декларации могут предоставляться в разные налоговые органы по месту регистрации,
		// например, декларация ЕНВД.
		// Поэтому количество строк в таблице НалоговыеДекларации может быть больше, 
		// чем в исходной таблице ИскомыеОтчеты.
		// Добавляем в исходную таблицу НовыеОтчеты все такие найденные декларации.
		ЗапрошенныйОтчет = ЗапрошенныеОтчеты[0];
		ПерваяЗапись     = Истина;
		
		Для Каждого НайденнаяСтрока Из НайденныеДекларации Цикл
		
			Если ПерваяЗапись Тогда
				// Меняем свойства в строка самого отчета.
				НовыйОтчет = ЗапрошенныйОтчет;
			Иначе
				// Включаем в состав отчетности дополнительную строку.
				НовыйОтчет = НовыеОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйОтчет, ЗапрошенныйОтчет);
			КонецЕсли;
		
			// Запоминаем ссылку и представление найденного рег.отчета.
			НовыйОтчет.РегламентированныйОтчет = НайденнаяСтрока.Ссылка;

			ОписаниеОтчета                = ОписаниеОтчета(НайденнаяСтрока);
			НовыйОтчет.НаименованиеОтчета = ОписаниеОтчета.НаименованиеОтчета;
			НовыйОтчет.СостояниеОтчета    = ОписаниеОтчета.СостояниеОтчета;

			ПерваяЗапись = Ложь;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

// При изменении состав отчетов ранее заполненную расшифровку бух.отчетности, скорее всего, потребуется перезаполнить.
//
Процедура УстановитьПризнакПерезаполненияРасшифровкиБухОтчетности(Объект)

	Отбор = Новый Структура();
	Отбор.Вставить("ИсточникОтчета", "РасшифровкиБухгалтерскойОтчетности");

	НайденныеСтроки = Объект.Отчетность.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Расшифровки бухотчетности не требуются.
		Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Ложь;
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	Если ЗначениеЗаполнено(НайденнаяСтрока.РегламентированныйОтчет) Тогда
		НайденнаяСтрока.СостояниеОтчета = НСтр("ru = 'Требуется перезаполнить'");
	 	Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Истина;
	Иначе
		НайденнаяСтрока.СостояниеОтчета = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоказатели

Функция ТребуемыеДополнительныеПоказатели(СервисОбменаСБанками, ДатаЗаявки, Банки, ИдентификаторыКредитныхПродуктов) Экспорт
	
	ДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
	ДополнительныеПоказатели.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	ДополнительныеПоказатели.Колонки.Добавить("ИдентификаторКредитногоПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ДополнительныеПоказатели,
		Банки,
		Истина); // При открытии ранее отправленной заявки необходимо отображать дополнительные показатели как они были на момент сохранения.
	
	Для каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
		ПрочитатьДополнительныеПоказатели(
			СервисОбменаСБанками,
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			СтрокаТаблицы.Значение,
			ДополнительныеПоказатели);
	КонецЦикла;
	
	// Оставим уникальные дополнительные показатели.
	УникальныеДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
	Для каждого ДополнительныйПоказатель Из ДополнительныеПоказатели Цикл
		// Пропускаем дополнительные показатели, если они относятся к кредитному продукту, не выбранному пользователем.
		Если ЗначениеЗаполнено(ДополнительныйПоказатель.ИдентификаторКредитногоПродукта)
			И ИдентификаторыКредитныхПродуктов.Найти(ДополнительныйПоказатель.ИдентификаторКредитногоПродукта) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = УникальныеДополнительныеПоказатели.Найти(ДополнительныйПоказатель.Идентификатор, "Идентификатор");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = УникальныеДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныйПоказатель);
			НоваяСтрока.Банки.Добавить(ДополнительныйПоказатель.Банк);
			НоваяСтрока.КоличествоБанков = 1;
		Иначе // Показатель с таким идентификтатором уже добавлен.
			Если НайденнаяСтрока.Банки.Найти(ДополнительныйПоказатель.Банк) = Неопределено Тогда
				НайденнаяСтрока.Банки.Добавить(ДополнительныйПоказатель.Банк);
				НайденнаяСтрока.КоличествоБанков = НайденнаяСтрока.КоличествоБанков + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УникальныеДополнительныеПоказатели;
	
КонецФункции

Процедура ПрочитатьДополнительныеПоказатели(СервисОбменаСБанками, ДатаЗаявки, Банк, ХранилищеXML, ДополнительныеПоказатели)

	УсловияКредитования = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СервисОбменаСБанками, ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого НаборДополнительныхПоказателей Из УсловияКредитования.ДополнительныеПоказатели Цикл
		Если НаборДополнительныхПоказателей.ДатаНачала > ДатаЗаявки
			ИЛИ НаборДополнительныхПоказателей.ДатаОкончания < ДатаЗаявки Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ДополнительныйПоказатель Из НаборДополнительныхПоказателей.Показатель Цикл
			СтрокаТаблицы = ДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДополнительныйПоказатель);
			
			СтрокаТаблицы.ЗначенияПеречисления = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаЗначенияПеречисления();
			Для каждого Значение Из ДополнительныйПоказатель.ЗначенияПеречисления Цикл
				ЗначениеПеречисления = СтрокаТаблицы.ЗначенияПеречисления.Добавить();
				ЗаполнитьЗначенияСвойств(ЗначениеПеречисления, Значение);
			КонецЦикла;
			
			СтрокаТаблицы.Банк = Банк;
			
			Если НаборДополнительныхПоказателей.Свойства().Получить("ИдентификаторКредитногоПродукта") <> Неопределено Тогда
				СтрокаТаблицы.ИдентификаторКредитногоПродукта = НаборДополнительныхПоказателей.ИдентификаторКредитногоПродукта;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеПоказателиБанков(ЗаявкаНаКредит, Банки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Банки", Банки);
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаКредит);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаКредитПолучателиДополнительныхПоказателей.Банк КАК Банк,
	|	ЗаявкаНаКредитДополнительныеПоказатели.Идентификатор КАК Идентификатор,
	|	ЗаявкаНаКредитДополнительныеПоказатели.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ЗаявкаНаКредитДополнительныеПоказатели.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаявкаНаКредит.ПолучателиДополнительнойИнформации КАК ЗаявкаНаКредитПолучателиДополнительныхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаКредит.ДополнительныеПоказатели КАК ЗаявкаНаКредитДополнительныеПоказатели
	|		ПО ЗаявкаНаКредитПолучателиДополнительныхПоказателей.Ссылка = ЗаявкаНаКредитДополнительныеПоказатели.Ссылка
	|			И ЗаявкаНаКредитПолучателиДополнительныхПоказателей.КлючСтрокиДопИнформации = ЗаявкаНаКредитДополнительныеПоказатели.КлючСтрокиПоказателя
	|ГДЕ
	|	ЗаявкаНаКредитПолучателиДополнительныхПоказателей.Банк В(&Банки)
	|	И ЗаявкаНаКредитПолучателиДополнительныхПоказателей.Ссылка = &Ссылка
	|	И НЕ ЗаявкаНаКредитПолучателиДополнительныхПоказателей.ЭтоФайл
	|
	|УПОРЯДОЧИТЬ ПО
	|	Банк,
	|	Идентификатор";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиДополнительныеПоказателиXDTOКредитногоПродукта(СервисОбменаСБанками, Банк, Знач ИдентификаторКредитногоПродукта, Знач Дата)

	УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ДополнительныеПоказатели,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк),
		Истина);
	Если УслугиБанка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УсловияКредитованияXDTO = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СервисОбменаСБанками, УслугиБанка[0].Значение);	
	Если УсловияКредитованияXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИдентификаторКредитногоПродукта = ВРег(ИдентификаторКредитногоПродукта);
	Дата                            = НачалоДня(Дата);
	
	ДополнительныеПоказателиXDTOПоУмолчанию = Неопределено;
	
	Для каждого ДополнительныеПоказателиXDTO Из УсловияКредитованияXDTO.ДополнительныеПоказатели Цикл
		// Проверяем период действий
		Если ДополнительныеПоказателиXDTO.ДатаНачала > Дата
			ИЛИ ДополнительныеПоказателиXDTO.ДатаОкончания < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем принадлежность кредитному продукту
		Если НЕ ЗначениеЗаполнено(ДополнительныеПоказателиXDTO.ИдентификаторКредитногоПродукта) Тогда
			// У дополнительных показателей не задан конкретный кредитный продукт, т.е. они действует для всех кредитных продуктов,
			// для которых нет собственных (явно назначенных дополнительных показателей).
			// Запомним ссылку на такие дополнительные показатели, если для кредитного продукта не найдем персональный, то вернем этот.
			ДополнительныеПоказателиXDTOПоУмолчанию = ДополнительныеПоказателиXDTO;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторКредитногоПродукта)
			И ВРег(ДополнительныеПоказателиXDTO.ИдентификаторКредитногоПродукта) = ИдентификаторКредитногоПродукта Тогда
			Возврат ДополнительныеПоказателиXDTO;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ДополнительныеПоказателиXDTOПоУмолчанию;

КонецФункции

#КонецОбласти

#Область ДополнительныеФайлы

Функция ДополнительныеФайлыПоВидам()
	
	ДлинаНаименования = 150;
	
	ДополнительныеФайлы = Новый ТаблицаЗначений;
	КолонкиДопФайлов = ДополнительныеФайлы.Колонки;
	КолонкиДопФайлов.Добавить("ДопФайл",                 Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	КолонкиДопФайлов.Добавить("Банк",                    Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	КолонкиДопФайлов.Добавить("КраткоеПредставление",    ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("Наименование",            ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("Расширение",              ОбщегоНазначения.ОписаниеТипаСтрока(10));
	КолонкиДопФайлов.Добавить("ИмяФайла",                ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("ИмяФайлаXML",             ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	
	ДопФайлыВнешние = ДополнительныеФайлы.СкопироватьКолонки();
	КолонкиДопФайловВнешних = ДопФайлыВнешние.Колонки;
	КолонкиДопФайловВнешних.Добавить("Идентификатор",           ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КолонкиДопФайловВнешних.Добавить("КлючСтрокиФайла",         ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиДопФайловВнешних.Добавить("ДанныеОтсутствуют",       Новый ОписаниеТипов("Булево"));
	
	// Для удобства использования в алгоритмах храним в структуре, а не в списке с фиксированным порядком.
	// Но в анкету будут выводиться в заранее заданном порядке.
	ВидыДополнительныхФайлов = Новый Структура;
	ПорядокФайлов = ПорядокВыводаФайлов();
	Для Каждого ГруппаФайлов Из ПорядокФайлов Цикл
		
		КолонкиГруппыФайлов = ?(ГруппаФайлов = "ВнешниеФайлы", ДопФайлыВнешние, ДополнительныеФайлы.СкопироватьКолонки());
		ВидыДополнительныхФайлов.Вставить(ГруппаФайлов, КолонкиГруппыФайлов);
			
	КонецЦикла;
	
	Возврат ВидыДополнительныхФайлов;
	
КонецФункции

Функция ДополнительныеФайлыДляБанка(ДополнительныеФайлы, Банк)
	
	ОтборПоБанку = Новый Структура("Банк", Банк);
	
	ВидыДополнительныхФайлов = Новый Структура;
	Для Каждого ГруппаФайлов Из ДополнительныеФайлы Цикл
		ВидыДополнительныхФайлов.Вставить(ГруппаФайлов.Ключ, ГруппаФайлов.Значение.НайтиСтроки(ОтборПоБанку));
	КонецЦикла;
	
	Возврат ВидыДополнительныхФайлов;
	
КонецФункции

// Заполняет таблицу формы из характеристик сервиса для банков.
//
// Параметры:
//  СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - тип сервиса обмена с банками.
//  ДатаЗаявки   - Дата - на какую дату получить характеристику.
//  Банки        - Массив из СправочникСсылка.БанкиУниверсальногоОбмена - для каких банков получить характеристики.
//  ИдентификаторыКредитныхПродуктов - Массив из Строка - продукты, для которых получаем характеристики.
//  ТребуемыеФайлы - ТаблицаЗначений - информация в формате, который будет использован на форме.
//
Процедура ТребуемыеДополнительныеФайлы(СервисОбменаСБанками, ДатаЗаявки, Банки, ИдентификаторыКредитныхПродуктов, ТребуемыеФайлы) Экспорт
	
	// Дополняем колонками, необходимыми на момент выбора из альтернативных продуктов.
	ТребуемыеФайлы.Колонки.Добавить("ИдентификаторКредитногоПродукта", Новый ОписаниеТипов("Строка"));
	
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ДополнительныеФайлы,
		Банки,
		Истина); // При открытии ранее отправленной заявки необходимо отображать дополнительные файлы, как они были на момент сохранения.
		
	ИдентификаторыПредопределенныхДопФайлов = Новый Массив;
	ИдентификаторыПредопределенныхДопФайлов.Добавить(ИдентификаторПаспортУчредителя());
	ИдентификаторыПредопределенныхДопФайлов.Добавить(ИдентификаторПаспортРуководителя());
	ИдентификаторыПредопределенныхДопФайлов.Добавить(ИдентификаторКоммерческоеПредложение());
		
	ДатаЗаявкиНачалоДня = НачалоДня(ДатаЗаявки);
	Для каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
		
		УсловияКредитования = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(СервисОбменаСБанками, СтрокаТаблицы.Значение);
		Если УсловияКредитования = Неопределено Тогда // не заданы условия
			Продолжить;
		КонецЕсли;
		
		Для каждого НаборДополнительныхФайлов Из УсловияКредитования.ДополнительныеФайлы Цикл
			
			Если НаборДополнительныхФайлов.ДатаНачала > ДатаЗаявкиНачалоДня
			 Или НаборДополнительныхФайлов.ДатаОкончания < ДатаЗаявкиНачалоДня Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваНабора = НаборДополнительныхФайлов.Свойства();
			ИдентификаторКредитногоПродукта = ?(СвойстваНабора.Получить("ИдентификаторКредитногоПродукта") = Неопределено,
												"", НаборДополнительныхФайлов.ИдентификаторКредитногоПродукта);
			
			// Сохраняем предопределенные доп.файлы, если они заданы. Они имеют заранее известное место в интерфейсе.
			Для Каждого ИмяДопФайла Из ИдентификаторыПредопределенныхДопФайлов Цикл
				
				ДополнительныйФайл = НаборДополнительныхФайлов.Получить(ИмяДопФайла);
				Если ДополнительныйФайл = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТребуемыйФайл = ТребуемыеФайлы.Добавить();
				ЗаполнитьОписаниеДополнительногоФайла(ТребуемыйФайл, ДополнительныйФайл, СтрокаТаблицы.Банк, ИдентификаторКредитногоПродукта);
				ТребуемыйФайл.Идентификатор = ИмяДопФайла;
				ТребуемыйФайл.Предопределенный = Истина;
				
			КонецЦикла;
			
			Для каждого ДополнительныйФайл Из НаборДополнительныхФайлов.Файл Цикл
				
				ТребуемыйФайл = ТребуемыеФайлы.Добавить();
				ЗаполнитьОписаниеДополнительногоФайла(ТребуемыйФайл, ДополнительныйФайл, СтрокаТаблицы.Банк, ИдентификаторКредитногоПродукта);
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(ТребуемыйФайл.Идентификатор, 1)) Тогда
					// Последним символом идентификатора не должна быть цифра.
					ТребуемыйФайл.Идентификатор = ТребуемыйФайл.Идентификатор + "__";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;
	
	// Сортируем, чтобы оставить только одно описание для каждого идентификатора.
	// В первую очередь обязательные. Во вторую очередь, чем больше Приоритет, тем важнее его использование.
	// В третью очередь, с одинаковым приоритетом чем больше количество, тем важнее.
	ТребуемыеФайлы.Сортировать("Идентификатор Возр, Предопределенный Убыв, Обязательный Убыв, Приоритет Убыв, Количество Убыв");	
	
	// Оставим уникальные дополнительные показатели.
	СтрокаОписанияДопФайла = Неопределено;
	ТекущийИндекс = 0;
	КоличествоФайлов = ТребуемыеФайлы.Количество();
	Пока ТекущийИндекс < КоличествоФайлов Цикл
		
		ДополнительныйФайл = ТребуемыеФайлы[ТекущийИндекс];
		
		// Пропускаем дополнительные файлы, если они относятся к кредитному продукту, невыбранному пользователем.
		Если ЗначениеЗаполнено(ДополнительныйФайл.ИдентификаторКредитногоПродукта)
		   И ИдентификаторыКредитныхПродуктов.Найти(ДополнительныйФайл.ИдентификаторКредитногоПродукта) = Неопределено Тогда
		   
			ТребуемыеФайлы.Удалить(ДополнительныйФайл);
			КоличествоФайлов = КоличествоФайлов - 1;
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаОписанияДопФайла = Неопределено
		 Или СтрокаОписанияДопФайла.Идентификатор <> ДополнительныйФайл.Идентификатор Тогда // описание нового доп.файла
		 
			СтрокаОписанияДопФайла = ДополнительныйФайл;
			ТекущийИндекс = ТекущийИндекс + 1;
			
		Иначе // продолжение описания доп.файла (другой банк с меньшим приоритетом)
			
			Если СтрокаОписанияДопФайла.Банки.НайтиПоЗначению(ДополнительныйФайл.Банки[0].Значение) = Неопределено Тогда
				СтрокаОписанияДопФайла.Банки.Добавить(ДополнительныйФайл.Банки[0].Значение);
			КонецЕсли;
			ТребуемыеФайлы.Удалить(ДополнительныйФайл);
			КоличествоФайлов = КоличествоФайлов - 1;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Сортируем для вывода в документ.
	// Сначала выводятся обязательные, затем необязательные. Внутри этих классов сортировка по наименованию.
	ТребуемыеФайлы.Сортировать("Предопределенный Убыв, Обязательный Убыв, КраткоеПредставление Возр, Идентификатор Возр");
	
	ТребуемыеФайлы.Колонки.Удалить("ИдентификаторКредитногоПродукта");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеДополнительногоФайла(ОписаниеФайла, ДополнительныйФайл, Банк, ИдентификаторКредитногоПродукта = "")
	
	ЗаполнитьЗначенияСвойств(ОписаниеФайла, ДополнительныйФайл, , "ПараметрыВыбораФайла");
	
	СвойстваВыборФайла = ДополнительныйФайл.ПараметрыВыбораФайла.Свойства();
	ПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	Для Каждого ПараметрВыбора Из СвойстваВыборФайла Цикл
		
		ИмяПараметра = ?(ПараметрВыбора.Имя = "МаксРазмер", "МаксимальныйРазмер", ПараметрВыбора.Имя);
		ПараметрыВыбораФайла.Вставить(ИмяПараметра, ДополнительныйФайл.ПараметрыВыбораФайла[ПараметрВыбора.Имя]);
		
	КонецЦикла;
	ОписаниеФайла.ПараметрыВыбораФайла = ПараметрыВыбораФайла;
	
	ОписаниеФайла.Банки.Добавить(Банк);
	
	Если Не ПустаяСтрока(ИдентификаторКредитногоПродукта) Тогда
		ОписаниеФайла.ИдентификаторКредитногоПродукта = ИдентификаторКредитногоПродукта;
	КонецЕсли;
	
	Если ОписаниеФайла.Количество = 0 Тогда
		ОписаниеФайла.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
