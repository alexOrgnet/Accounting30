
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрыватьФормуБезусловно;

&НаКлиенте
Перем ИсточникОбработкиОповещенияЗаписьФизическогоЛица;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Если заявка уже отправлена, то открываем ее только на просмотр.
	Если РегистрыСведений.СостояниеЗаявокНаКредит.ЗаявкаОтправлена(Объект.Ссылка) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Сразу запускаем обновление данных из сервиса, чтобы к моменту перехода к шагу с банками,
	// они успели закэшироваться.
	СведенияОДлительнойОперации = Новый Структура();
	СведенияОДлительнойОперации.Вставить("Имя", "");
	СведенияОДлительнойОперации.Вставить("ДлительнаяОперация");
	
	ОбновитьСведенияОСервисе();
	
	ИнициализироватьФорму();
	
	ПрочитатьОсновныеДанныеОрганизации(Ложь);
	
	УстановитьТекущийШагПомощника();
	
	УстановитьСвойстваСертификата(ЭтотОбъект);
	
	УстановитьСписокВыбораПериодаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если сервис сейчас не доступен, то сообщим пользователю.
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьИнтернетПоддержкуПользователей", 0.5, Истина);
	Иначе
		ОжидатьЗавершениеОбновленияДанныхСервиса();
	КонецЕсли;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаБанки
		И Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаНачало
		И НЕ ПроверитьВыбранныеБанки() Тогда
		ПоказатьПредупреждениеОбИзмененииУсловийБанков();
	КонецЕсли;
	
	ТекущаяСтраницаРеквизитыЗаемщика = Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаЗаемщикИП
		ИЛИ Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаЗаемщикЮЛ;
	
	Если ТекущаяСтраницаРеквизитыЗаемщика
		И НЕ ЗначениеЗаполнено(СертификатАбонента) Тогда
		// Запустим поиск сертификата электронной подписи для выбранной организации.
		НачатьПоискСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрыватьФормуБезусловно Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СохранитьЗаявку",      Ложь);
	ДополнительныеПараметры.Вставить("СохранитьОрганизацию", Ложь);
	ДополнительныеПараметры.Вставить("СохранитьФизЛицо",     Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.СуммаДокумента)
		И ЗначениеЗаполнено(Объект.СрокКредита)
		И НЕ Модифицированность Тогда
		// Если создали новый документ и в нем все сразу заполнилось из базы так, 
		// что не потребовалось ничего изменять, то форма останется немодифицированной.
		// В этом случае все равно спросим, хотят ли сохранить заявку.
		ТекстВопроса = НСтр("ru = 'Сохранить заявку?'");
		ДополнительныеПараметры.СохранитьЗаявку = Истина;
	КонецЕсли;
	
	// Если меняли только реквизиты организации, а до указания суммы/срока и выбора банков не дошли,
	// то спрашиваем про сохранение только организации (физлица), заявку не сохраняем, чтобы не записывать нулевую.
	Если НЕ ЗначениеЗаполнено(ТекстВопроса)
		И НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Организация)
		И (НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) И НЕ ЗначениеЗаполнено(Объект.СрокКредита))
		И Модифицированность Тогда
		
		Если ИзменениеДанныхОрганизации.ОрганизацияМодифицированность И ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность Тогда
			Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
				// Организация и физлицо описывают одно и то же лицо - заемщика ИП, спросим про него один раз.
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Сохранить изменение реквизитов %1?'"), Организация.Наименование);
			Иначе
				// Организация и физлицо описывают разных лиц - юр.лицо и его руководителя, спросим про них отдельно.
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Сохранить изменение реквизитов %1 и %2?'"), Организация.Наименование, ФизическоеЛицо.Наименование);
			КонецЕсли;
			ДополнительныеПараметры.СохранитьОрганизацию = Истина;
			ДополнительныеПараметры.СохранитьФизЛицо     = Истина;
		
		ИначеЕсли ИзменениеДанныхОрганизации.ОрганизацияМодифицированность Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Сохранить изменение реквизитов %1?'"), Организация.Наименование);
			ДополнительныеПараметры.СохранитьОрганизацию = Истина;

		ИначеЕсли ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Сохранить изменение реквизитов %1?'"), ФизическоеЛицо.Наименование);
			ДополнительныеПараметры.СохранитьФизЛицо     = Истина;

		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ЗакрыватьФормуБезусловно = Ложь;

		Если ДополнительныеПараметры.СохранитьЗаявку Тогда
			// При записи заявки сохраняются и изменения в организации и физлице.
			Если ПроверитьИЗаписать() Тогда
				ЗакрыватьФормуБезусловно = Истина;
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.СохранитьОрганизацию Тогда
			// При записи организации сохраняются и изменения связанного физлица, если они были.
			ЗаписатьИзмененияДанныхОрганизации();
			ЗакрыватьФормуБезусловно = Истина;
		ИначеЕсли ДополнительныеПараметры.СохранитьФизЛицо Тогда
			ЗаписатьИзмененияДанныхФизЛица();
			ЗакрыватьФормуБезусловно = Истина;
		КонецЕсли;
		
		Если ЗакрыватьФормуБезусловно Тогда
			Закрыть();
		КонецЕсли;

	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗакрыватьФормуБезусловно = Истина;
		Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// При закрытии формы явно снимаем все блокировки на реквизиты формы, которые могли быть установлены.
	РазблокироватьДанныеДляРедактированияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Организации.Форма.РедактированиеИсторииНаименований") Тогда
		
		Если ВыбранноеЗначение.Свойство("Наименование") Тогда
			Объект.Наименование = ВыбранноеЗначение.Наименование;
		КонецЕсли;
		УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_Организации"
		И Источник = Объект.Организация Тогда
		
		// Обновим данные организации на форме.
		// Вызываем не сразу, а через обработчик ожидания, чтобы не тормозить запись самой организации.
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьДанныеОрганизации", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики"
		И Параметр = Объект.Организация Тогда

		// Обновим данные о системе налогообложения организации.
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьСистемуНалогообложения", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда
		
		// Обновим данные физического лица на форме.
		ИсточникОбработкиОповещенияЗаписьФизическогоЛица = Источник;
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьДанныеФизЛица", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ГражданствоФизЛица"	
		И Источник = ФизическоеЛицо.Ссылка Тогда
		
		// Обновим гражданство физического лица на форме.
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьГражданствоФизЛица", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_РасшифровкиБухгалтерскойОтчетности" Тогда
		
		// Установим ссылку на связанный рег.отчет, если она еще не заполнена.
		ОбработкаОповещенияОЗаписиРасшифровкиБухгалтерскойОтчетности(Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
         МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
         МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Если заявка меняется, то считаем, что ее отправляем "сегодня".
	ТекущийОбъект.Дата = ТекущаяДатаСеанса();
	
	// Если в качестве контактного лица указан руководитель,
	// то очистим ссылку на другого сотрудника, чтобы не использовалась.
	
	Если КонтактноеЛицоПоЗаявке = "Руководитель" Тогда
		ТекущийОбъект.КонтактноеЛицо = Неопределено;
	КонецЕсли;

	ЗаписатьБанки(ТекущийОбъект);
	
	ЗаписатьИзмененияДанныхОрганизации();
	
	ЗаписатьИзмененияДанныхФизЛица();
	
	ЗаписатьДополнительныеПоказатели(ТекущийОбъект);
	
	Если ПараметрыЗаписи.Свойство("СинхронизироватьПрисоединенныеФайлы") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьПрисоединенныеФайлы", ПараметрыЗаписи.СинхронизироватьПрисоединенныеФайлы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДобавленныеКолонкиОтчетности(Истина);
	
	ЗаполнитьДобавленныеКолонкиУчредители();
	
	СохранитьТекущийШагПомощника();
	
	// После записи может измениться дата, поэтому обновим заголовок.
	УправлениеФормой();	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновленоСостояниеЗаявкиНаКредит");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьИзменениеШага(НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Навигация

&НаКлиенте
Процедура Шаг1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг1");

КонецПроцедуры

&НаКлиенте
Процедура Шаг2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг2");

КонецПроцедуры

&НаКлиенте
Процедура Шаг3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг3");

КонецПроцедуры

&НаКлиенте
Процедура Шаг4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг4");

КонецПроцедуры

#КонецОбласти

#Область СтраницаНачало

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	
	// Если организация меняется на первом шаге, снимаем флаг модифицированности,
	// чтобы не спрашивать пользователя о сохранении измененных данных, если он
	// закроет форму.
	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)
		И НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ОднаОрганизацияНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура СоставУчредителейПриИзменении(Элемент)
	
	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПредставлениеИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель) Тогда
		ОткрытьФормуГражданстваФизЛица();
	ИначеЕсли ЗначениеЗаполнено(Организация.Ссылка) Тогда
		// Организация-ИП есть, а физлица-ИП нет.
		// Выведем сообщение про нарушение связи между справочниками Организация и ФизическиеЛица.
		ПроверитьЗаполнениеСтраницы("Начало");
	Иначе
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект.Организация");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияИППриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФизическогоЛица();

	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;

	Организация.НаименованиеОКОПФ = НаименованиеОКОПФ(Организация.КодОКОПФ);
	
	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("КодОКОПФНачалоВыбораЗавершение", ЭтотОбъект);

	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКОПФ",
		"КодОКОПФ",
		"НаименованиеОКОПФ",
		ЭтотОбъект,
		Организация,
		СтандартнаяОбработка,
		ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОКОПФПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииФормыДляОтчетностиКлиентСервер.ИзменениеКодаОКВЭД2(ЭтотОбъект, Организация);

	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОКВЭД2ПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработчикВыбора = Новый ОписаниеОповещения("КодОКВЭД2НачалоВыбораЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКВЭД2",
		"КодОКВЭД2",
		"НаименованиеОКВЭД2",
		ЭтотОбъект,
		Организация,
		СтандартнаяОбработка,
		ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОрганизацииФормыДляОтчетностиКлиентСервер.УстановитьВидимостьПодсказкиОКВЭД2(ЭтотОбъект);

	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах заемщика необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

#КонецОбласти

#Область Банки

&НаКлиенте
Процедура ТипПредметаЛизингаПриИзменении(Элемент)
	
	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПриИзмененииСуммыДокумента(ЭтотОбъект);

	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СрокКредитаПриИзменении(Элемент)
	
	Заголовок = СформироватьЗаголовок(Объект);

	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СрокКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Заполним наиболее распространенные сроки на выбор.
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(6,   НСтр("ru = '  6 мес'"));
	ДанныеВыбора.Добавить(12,  НСтр("ru = ' 12 мес (1 год)'"));
	ДанныеВыбора.Добавить(18,  НСтр("ru = ' 18 мес (1,5 года)'"));
	ДанныеВыбора.Добавить(24,  НСтр("ru = ' 24 мес (2 года)'"));
	ДанныеВыбора.Добавить(36,  НСтр("ru = ' 36 мес (3 года)'"));
	ДанныеВыбора.Добавить(48,  НСтр("ru = ' 48 мес (4 года)'"));
	ДанныеВыбора.Добавить(60,  НСтр("ru = ' 60 мес (5 лет)'"));
	ДанныеВыбора.Добавить(72,  НСтр("ru = ' 72 мес (6 лет)'"));
	ДанныеВыбора.Добавить(84,  НСтр("ru = ' 84 мес (7 лет)'"));
	ДанныеВыбора.Добавить(96,  НСтр("ru = ' 96 мес (8 лет)'"));
	ДанныеВыбора.Добавить(108, НСтр("ru = '108 мес (9 лет)'"));
	ДанныеВыбора.Добавить(120, НСтр("ru = '120 мес (10 лет)'"));
	ДанныеВыбора.Добавить(0,  НСтр("ru = 'Другой'"));

КонецПроцедуры

&НаКлиенте
Процедура СуммаАвансаПриИзменении(Элемент)

	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СуммаАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Заполним наиболее распространенные размеры авансового платежа по лизингу.
	// 50% и больше не предлагаем, т.к. в этом случае договор лизинга может быть переквалифицирован
	// в договор купли-продажи и такие варианты стараются не использовать.
	ДанныеВыбора = Новый СписокЗначений;
	ПроцентАванса = 5;
	Пока ПроцентАванса < 50 Цикл
		РазмерАванса = Окр(Объект.СуммаДокумента * ПроцентАванса / 100, 0);
		ДанныеВыбора.Добавить(РазмерАванса,  СтрШаблон(НСтр("ru = '%1 (%2%%)'"), РазмерАванса, ПроцентАванса));
		ПроцентАванса = ПроцентАванса + 5;
	КонецЦикла;
	
	ДанныеВыбора.Добавить(0, НСтр("ru = 'Другой'"));

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеБанки(Команда)

	ИзменитьОтметкиБанков(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуУВсехБанков(Команда)

	ИзменитьОтметкиБанков(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДоступныйБанкОтметкаПриИзменении(Элемент)
	
	// Запомним, если пользователь снял отметку с банка, чтобы в следующий раз не предлагать.
	НомерГруппы = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(Элемент.Имя));
	НоваяОтметкаБанка = ЭтотОбъект[Элемент.Имя];
	ЗапомнитьЧтоПользовательИзменилОтметкуБанка(НомерГруппы, НоваяОтметкаБанка);
	
КонецПроцедуры

#КонецОбласти

#Область Отчетность

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)

	НачатьЗамерВремениПодборОтчетности();

	ПриИзмененииПериода();

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	// Запретим очищать период.
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область РеквизитыЗаемщика

#Область Общие

&НаКлиенте
Процедура СистемаНалогообложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗаблокироватьОрганизацию() Тогда
		Возврат;
	КонецЕсли;

	ОрганизацииФормыДляОтчетностиКлиент.НачатьИзменениеСистемыНалогообложения(
		Объект.Организация,
		ЭтотОбъект,
		"СистемаНалогообложенияПредставление",
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ ПроверитьИЗаписать() Тогда
		Возврат;
	КонецЕсли;

	ОбъектыСогласия = Новый Массив;
	Для каждого Банк Из Объект.Банки Цикл
		ОбъектСогласия = Новый Структура;
		ОбъектСогласия.Вставить("Банк", Банк.Банк);
		ОбъектСогласия.Вставить("ИдентификаторПродукта", Банк.ИдентификаторКредитногоПродукта);
		ОбъектыСогласия.Добавить(ОбъектСогласия);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сервис",            Объект.СервисОбменаСБанками);
	ПараметрыФормы.Вставить("ПараметрыСогласия", ПараметрыСогласия(Объект.Ссылка));
	ПараметрыФормы.Вставить("ОбъектыСогласия",   ОбъектыСогласия);
	
	ОткрытьФорму("ОбщаяФорма.СогласиеНаОбработкуДанныхСервисыОбменаСБанками", ПараметрыФормы, ЭтотОбъект, ОбъектыСогласия[0]);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыНаДиск(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ЗаявкаГотоваКСохранению = ПроверитьИЗаписать();
	Иначе
		ЗаявкаГотоваКСохранению = ПроверитьЗаполнениеСтраницы("");
	КонецЕсли;
	
	Если НЕ ЗаявкаГотоваКСохранению Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьАрхивДляСохранения();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаемщикИП

#Область ЛичныеДанныеИП

&НаКлиенте
Процедура ФамилияИППриИзменении(Элемент)
	
	// При изменении фамилии предпринимателя требуется синхронное изменение наименования в справочнике Организации,
	// поэтому взводим признак изменения и у организации.
	Если НЕ ПриИзмененииРеквизитаФизическогоЛица()
		ИЛИ НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ФИОИППриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ИмяИППриИзменении(Элемент)

	// При изменении имени предпринимателя требуется синхронное изменение наименования в справочнике Организации,
	// поэтому взводим признак изменения и у организации.
	Если НЕ ПриИзмененииРеквизитаФизическогоЛица()
		ИЛИ НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ФИОИППриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИППриИзменении(Элемент)

	// При изменении отчества предпринимателя требуется синхронное изменение наименования в справочнике Организации,
	// поэтому взводим признак изменения и у организации.
	Если НЕ ПриИзмененииРеквизитаФизическогоЛица()
		ИЛИ НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ФИОИППриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПолИППриИзменении(Элемент)
	ПриИзмененииРеквизитаФизическогоЛица();
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияИПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СемейноеПоложениеИППриИзменении(Элемент)
	СемейноеПоложениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИННИППриИзменении(Элемент)

	// При изменении ИНН предпринимателя требуется синхронное изменение в справочнике ФизическиеЛица и Организации,
	// поэтому взводим признак изменения и у организации.
	Если НЕ ПриИзмененииРеквизитаФизическогоЛица()
		ИЛИ НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо.ИНН = Организация.ИНН;

	ПроверитьИНН(ЭтотОбъект);
	
	НачатьПоискСертификата();

КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРИППриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;

	НачатьПоискСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНИППриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

#КонецОбласти

#Область ПаспортныеДанныеИП

&НаКлиенте
Процедура ПаспортныеДанныеВидДокументаИППриИзменении(Элемент)
	
	ПриИзмененииПаспортныхДанных();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНомерПаспортаПриИзменении(Элемент)

	ПриИзмененииСерииНомераПаспорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеСерияИППриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеНомерИППриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеКемВыданИППриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеДатаВыдачиИППриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеКодПодразделенияИППриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияИП

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииПриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛицаИППриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛицаИПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииПриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаемщикЮЛ

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Организация.НаименованиеПолное)
		Или ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеСоответствуетСокращенномуНаименованию(
				НаименованиеСокращенноеДоИзменения, Организация.НаименованиеПолное) Тогда

		Организация.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(
			Организация.НаименованиеСокращенное);
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.Наименование) 
		ИЛИ ОбщегоНазначенияБПКлиентСервер.НаименованиеСоответствуетСокращенномуНаименованию(
				НаименованиеСокращенноеДоИзменения, Организация.Наименование) Тогда

		Организация.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(
			Организация.НаименованиеСокращенное);
	КонецЕсли;

	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованийНажатие(Элемент)
	
	ОткрытьТолькоПросмотр = ТолькоПросмотр;
	Если Не ПриИзмененииРеквизитаОрганизации() Тогда
		ОткрытьТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущееНаименованиеСокращенное", Организация.НаименованиеСокращенное);
	ПараметрыФормы.Вставить("ТекущееНаименованиеПолное",      Организация.НаименованиеПолное);
	ПараметрыФормы.Вставить("ТекущаяФамилияИП",               Организация.ФамилияИП);
	ПараметрыФормы.Вставить("ТекущееИмяИП",                   Организация.ИмяИП);
	ПараметрыФормы.Вставить("ТекущееОтчествоИП",              Организация.ОтчествоИП);
	ПараметрыФормы.Вставить("ИсторияНаименований",            Организация.ИсторияНаименований);
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ОткрытьТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",                   Организация.Наименование);
	ПараметрыФормы.Вставить("ЮридическоеФизическоеЛицо",      Организация.ЮридическоеФизическоеЛицо);
	
	ОткрытьФорму("Справочник.Организации.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИННЮЛПриИзменении(Элемент)
	
	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
		
	ПроверитьИНН(ЭтотОбъект);
	
	НачатьПоискСертификата();

КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьПриИзменении(Элемент)
	
	ИзменениеДанныхОрганизации.РуководительМодифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область Учредители

&НаКлиенте
Процедура УчредителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.УчредителиУчредитель
	 Или Поле = Элементы.УчредителиДоляУК Тогда
		// Выбор из справочника и ввод доли осуществляются стандартно.
		Возврат;
		
	КонецЕсли;
		
	ТекущиеДанные = Объект.Учредители.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Учредитель) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ДополнительныйФайл_ПаспортУчредителя_Действие Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПаспортУчредителя) Тогда
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.ПаспортУчредителя, УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
			
		Иначе
			
			ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Поле.Имя);
			
			ВывестиВариантыВыбораФайла(ИнформацияОДопФайле, Поле);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ДополнительныйФайл_ПаспортУчредителя_Очистка Тогда
		
		ТекущиеДанные.ПаспортУчредителя = Неопределено;
		
		ТекущиеДанные.ДополнительныйФайл_ПаспортУчредителя_Действие = НСтр("ru = 'Выбрать'");
		ТекущиеДанные.ДополнительныйФайл_ПаспортУчредителя_Очистка = Новый Картинка;
		
	ИначеЕсли Поле = Элементы.ДополнительныйФайл_ПаспортУчредителя_Описание Тогда
		
		ИнформацияОДопФайле = ИнформацияОДополнительномФайле("ДополнительныйФайл_ПаспортУчредителя_Описание");
		ОткрытьОписаниеПрисоединенногоФайла(ИнформацияОДопФайле.Описание);
		
	Иначе
	
		// Редактирование данных учредителя выполняем в стандартной форме элемента справочника.
 		Если ТекущиеДанные.Учредитель = Руководитель Тогда
			// Если выбран учредитель, которые одновременно является руководителем юридического лица,
			// то сначала запишем изменения данных руководителя в текущей форме заявки,
			// чтобы не было возникало блокировок объекта из разных форм.
			ЗаписатьИзмененияДанныхФизЛица();
		КонецЕсли;
		
		ПоказатьЗначение(, ТекущиеДанные.Учредитель);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СогласиеНаОбработкуПерсДанныхУчредителя(Команда)

	Отказ = Ложь;
	Если Объект.Учредители.Количество() = 0 Тогда

		Отказ = Истина;

	ИначеЕсли Объект.Учредители.Количество() = 1 Тогда // берем значение единственного учредителя
		
		Учредитель = Объект.Учредители[0].Учредитель;
		
	Иначе // берем только выделенные строки
		
		Если Элементы.Учредители.ТекущиеДанные = Неопределено Тогда
		 	Отказ = Истина;
		Иначе
			Учредитель = Элементы.Учредители.ТекущиеДанные.Учредитель;
		КонецЕсли;
		
	КонецЕсли;
	Если Отказ Или Не ЗначениеЗаполнено(Учредитель) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для вывода согласия'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ПроверитьИЗаписать() Тогда
		Возврат;
	КонецЕсли;
	
	Банки = Новый Массив;
	Для каждого СтрокаБанка Из Объект.Банки Цикл
		Банки.Добавить(СтрокаБанка.Банк);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сервис",            Объект.СервисОбменаСБанками);
	ПараметрыФормы.Вставить("ПараметрыСогласия", ПараметрыСогласияУчредителя(Объект.Ссылка, Учредитель, Банки));
	ПараметрыФормы.Вставить("ОбъектыСогласия",   ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Учредитель));
	
	ОткрытьФорму("ОбщаяФорма.СогласиеНаОбработкуДанныхСервисыОбменаСБанками", ПараметрыФормы, ЭтотОбъект, Учредитель);

КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительПриИзменении(Элемент)

	ЗаполнитьДобавленныеКолонкиУчредители(Элементы.Учредители.ТекущаяСтрока);
	ЗаполнитьДолюУчредителя(Элементы.Учредители.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Элементы.ГруппаПаспортУчредителя.Видимость Тогда
		
		Учредитель = Элемент.ТекущиеДанные;
		Учредитель.ПаспортУчредителя = Неопределено;
		
		ИнформацияОДопФайле = ИнформацияОДополнительномФайле("ДополнительныйФайл_ПаспортУчредителя_Представление");
		
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Представление    = ИнформацияОДопФайле.Описание.КраткоеПредставление;
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Действие         = НСтр("ru = 'Выбрать'");
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Очистка          = Новый Картинка;
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Описание         = НСтр("ru = '?'");
		Элементы.ДополнительныйФайл_ПаспортУчредителя_Описание.Подсказка = ИнформацияОДопФайле.Описание.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РуководительЮЛ

#Область ЛичныеДанныеРуководителя

&НаКлиенте
Процедура ФамилияРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПоискСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПоискСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;

	НачатьПоискСертификата();

КонецПроцедуры

&НаКлиенте
Процедура ПолРуководителяПриИзменении(Элемент)
	ПриИзмененииРеквизитаФизическогоЛица();
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеРуководителяКакУчредителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;

	ПроверитьИНН(ЭтотОбъект);
	
	ОбновитьДанныеРуководителяКакУчредителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРРуководителяПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
		Возврат;
	КонецЕсли;

	НачатьПоискСертификата();

КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Руководитель) Тогда
		ОткрытьФормуГражданстваФизЛица();

	ИначеЕсли ЗначениеЗаполнено(ФизическоеЛицо.Фамилия) И ЗначениеЗаполнено(ФизическоеЛицо.Имя) Тогда
		// Запишем данные о руководителе, после чего откроем сведения о гражданстве.
		ЗаписатьРуководителя();
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ОткрытьФормуГражданстваФизЛица();
		КонецЕсли;

	Иначе
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Фамилия");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ФизическоеЛицо.Фамилия");
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Имя");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ФизическоеЛицо.Имя");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПаспортныеДанныеРуководителя

&НаКлиенте
Процедура ПаспортныеДанныеВидДокументаРуководителяПриИзменении(Элемент)
	
	ПриИзмененииПаспортныхДанных();
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура СерияНомерПаспортаРуководителяПриИзменении(Элемент)
	ПриИзмененииСерииНомераПаспорта();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеСерияРуководителяПриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеНомерРуководителяПриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеКемВыданРуководителяПриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеДатаВыдачиРуководителяПриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеКодПодразделенияРуководителяПриИзменении(Элемент)
	ПриИзмененииПаспортныхДанных();
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияРуководителя

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаПриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛицаПриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEMailФизическиеЛицаПриИзменении(Элемент)
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КонтактноеЛицо

&НаКлиенте
Процедура КонтактноеЛицоПоЗаявкеПриИзменении(Элемент)

	КонтактноеЛицоПоЗаявкеПриИзмененииНаСервере();	

КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		ЗаполнитьДанныеКонтактногоЛица();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтраницаОтчетность

&НаКлиенте
Процедура ОтчетностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаОтчета = Объект.Отчетность.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле.Имя = "ОтчетностьСостояниеОтчета" Тогда
		Если ТолькоПросмотр И ЗначениеЗаполнено(СтрокаОтчета.РегламентированныйОтчет) Тогда
			// Заявка уже отправлена ранее и теперь ее можно только смотреть,
			// поэтому открываем сразу форму рег.отчета.
			ПоказатьЗначение(, СтрокаОтчета.РегламентированныйОтчет);
		КонецЕсли;

	ИначеЕсли Поле.Имя = "ОтчетностьНесколькоБанков" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПолучателиОтчета(СтрокаОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Отчетность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для расшифровок бух.отчетности кнопка выбора не требуется,
	// т.к. регл.отчет с расшифровками создается в единственном экземпляре для заявки.
	Элементы.ОтчетностьСостояниеОтчета.КнопкаВыбора = (ТекущиеДанные.ИсточникОтчета <> "РасшифровкиБухгалтерскойОтчетности");

КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Запретим добавлять строки.
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Банки = ПолучателиОтчета(ТекущиеДанные);
	
	Если ТекущиеДанные.КоличествоБанков = СтатистикаПоБанкам().КоличествоОтмеченных Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Этот отчет требуют все выбранные партнеры сервиса.
		|Его удаление приведет к невозможности отправить заявку.'"));
		
	Иначе
		
		Если ТекущиеДанные.КоличествоБанков = 1 Тогда
			ОписаниеБанков = СтрШаблон(НСтр("ru = '%1, требующий этот отчет, будет исключен из заявки.'"),
				ТекущиеДанные.ПредставлениеБанков);
			
		Иначе
			СписокБанков = Новый Массив;
			Для каждого Банк Из Банки Цикл
				СписокБанков.Добавить(СтрШаблон("• %1", Банк));
			КонецЦикла;
			
			ОписаниеБанков = СтрШаблон(НСтр("ru = '%1, требующих этот отчет, будут исключены из заявки:
			|%2'"), ТекущиеДанные.ПредставлениеБанков, СтрСоединить(СписокБанков, Символы.ПС));
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Банки", Банки);
		Если ТекущиеДанные.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности"
		   И ЗначениеЗаполнено(ТекущиеДанные.РегламентированныйОтчет) Тогда
			// Этот отчет предназначен для работы с ним только из заявки на кредит. Поэтому и пометка на удаление
			// должна происходить через интерфейс заявки.
			ДополнительныеПараметры.Вставить("РасшифровкаБухгалтерскойОтчетности", ТекущиеДанные.РегламентированныйОтчет);
		КонецЕсли;
		
		ОповещениеОбОтвете = Новый ОписаниеОповещения("ОбработкаУдаленияОтчета", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОбОтвете, СтрШаблон(НСтр("ru = 'Исключить из заявки отчет ""%1""?
		|
		|%2'"), ТекущиеДанные.НаименованиеОтчета, ОписаниеБанков),
			РежимДиалогаВопрос.ОКОтмена,,, НСтр("ru = 'Исключение отчета из заявки'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьСостояниеОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Отчетность.ТекущиеДанные;
	
	Если ТекущиеДанные.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
		// Расшифровка бух.отчетности в единственном экземпляре для каждой заявки,
		// поэтому открываем сразу форму самого отчета, а не выбор из списка.
		ОткрытьФормуРасшифровкиБухгалтерскойОтчетности(ТекущиеДанные);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ПараметрыФормыВыбораРегламентированногоОтчета();
	ПараметрыФормы.Организация     = Объект.Организация;
	ПараметрыФормы.ИсточникОтчета  = ТекущиеДанные.ИсточникОтчета;
	ПараметрыФормы.ДатаНачала      = ТекущиеДанные.ДатаНачала;
	ПараметрыФормы.ДатаОкончания   = ТекущиеДанные.ДатаОкончания;
	ПараметрыФормы.Заголовок       = ТекущиеДанные.НаименованиеОтчета;
	ПараметрыФормы.ВыделенныйОтчет = ТекущиеДанные.РегламентированныйОтчет;
	// Налоговые декларации передаем только, если они имеют отметку ФНС о приеме при передаче через 1С-Отчетность.
	// Бухгалтерскую отчетность позволяем выбирать любую.
	ПараметрыФормы.ТребуетсяОтметкаОПриемеОтчетности = ТекущиеДанные.ИсточникОтчета <> "БухгалтерскаяОтчетность";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтчетностьСостояниеОтчетаНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаполнениеФинОтчетностиВБанкиКлиент.ОткрытьФормуВыбораРегламентированногоОтчета(
		ПараметрыФормы,
		ЭтотОбъект,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьСостояниеОтчетаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		// Пользователь ничего не выбрал.
		Возврат;
	КонецЕсли;

	ОписаниеОтчета = ОписаниеОтчета(РезультатЗакрытия);
	
	// Запомним ссылку на выбранный отчет и его реквизиты.
	ТекущиеДанные = Объект.Отчетность.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ТекущиеДанные.РегламентированныйОтчет = РезультатЗакрытия.РегламентированныйОтчет;
	ТекущиеДанные.НаименованиеОтчета      = ОписаниеОтчета.НаименованиеОтчета;
	ТекущиеДанные.СостояниеОтчета         = ОписаниеОтчета.СостояниеОтчета;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьСостояниеОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	// При очистке поля "Состояние отчета" очищаем и ссылку на регл.отчет.
	ТекущиеДанные = Элементы.Отчетность.ТекущиеДанные;
	Если ТекущиеДанные.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности"
	   И ЗначениеЗаполнено(ТекущиеДанные.РегламентированныйОтчет) Тогда
		// Этот отчет предназначен для работы с ним только из заявки на кредит. Поэтому и пометка на удаление
		// должна происходить через интерфейс заявки.
		УстановитьПометкуУдаленияРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
	КонецЕсли;
	ТекущиеДанные.РегламентированныйОтчет = Неопределено;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаленияРегОтчета(РасшифровкаБухгалтерскойОтчетности)
	
	Попытка
	
		РасшифровкаБухгалтерскойОтчетности.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось установить пометку удаления для отчета, исключаемого из заявки.'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.РегламентированныйОтчет,
			РасшифровкаБухгалтерскойОтчетности,
			ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьСостояниеОтчетаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Отчетность.ТекущиеДанные;

	Если ТекущиеДанные.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
		// Создаем новый отчет или открываем существующий, т.к. он может быть только в единственном экземпляре к заявке.
		ОткрытьФормуРасшифровкиБухгалтерскойОтчетности(ТекущиеДанные);

	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.РегламентированныйОтчет) Тогда
		ПоказатьЗначение(, ТекущиеДанные.РегламентированныйОтчет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТребуетсяЭлектроннаяПодпись

&НаКлиенте
Процедура ТребуетсяЭлектроннаяПодписьРаздел3Часть2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(УниверсальныйОбменСБанкамиФормыКлиентСервер.СсылкаНаИнструкциюПоУстановкеЭлектроннойПодписи());
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЭлектроннаяПодписьРаздел3Часть3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(УниверсальныйОбменСБанкамиФормыКлиентСервер.СсылкаНаИнструкцииПоРаботеСПрограммамиЭлектроннойПодписи());
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЭлектроннаяПодписьРаздел4Часть2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(УниверсальныйОбменСБанкамиФормыКлиентСервер.СсылкаОписание1СПодпись());
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЭлектроннаяПодписьРаздел4Часть3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Записываем изменения данных в базу, чтобы можно было использовать их значения в форме заявления на выпуск сертификата.
	Если Модифицированность Тогда
		Если НЕ ПроверитьИЗаписать(Истина) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаЛизинг") Тогда
		КлючеваяОперация = "ОткрытиеЗаявленияНаСертификатЗаявкаНаЛизинг";
	Иначе
		КлючеваяОперация = "ОткрытиеЗаявленияНаСертификатЗаявкаНаКредит";
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ОповещениеОДобавлении = Новый ОписаниеОповещения("ДобавитьСертификатЗавершение", ЭтотОбъект);
	
	ПараметрыДобавления = ЭлектроннаяПодписьКлиент.ПараметрыДобавленияСертификата();
	ПараметрыДобавления.Организация = Организация.Ссылка;
	ПараметрыДобавления.ИзЛичногоХранилища = Ложь;
	
	ЭлектроннаяПодписьКлиент.ДобавитьСертификат(ОповещениеОДобавлении, ПараметрыДобавления);
	
КонецПроцедуры

// Используется как обработчик оповещения в ЭлектроннаяПодписьКлиент.ДобавитьСертификат() .
//
// Параметры:
//  ДобавленныйСертификат - результат добавления сертификата:
//                         * Неопределено - при проверке или добавлении сертификата произошла ошибка.
//                         * Структура - информация о сертификате. См. комментарий к ЭлектроннаяПодписьКлиент.ДобавитьСертификат()
//  ДополнительныеПараметры - Неопределено - доп.параметры.
//
&НаКлиенте
Процедура ДобавитьСертификатЗавершение(ДобавленныйСертификат, ДополнительныеПараметры) Экспорт

	Если ДобавленныйСертификат = Неопределено Тогда // ошибка добавления
		Возврат;
	КонецЕсли;
	
	Если Не ДобавленныйСертификат.Добавлен
	 Или Не ЗначениеЗаполнено(ДобавленныйСертификат.Ссылка) Тогда
		// Подано заявление, но самого сертификата пока нет.
		Возврат;
	КонецЕсли;
	
	ДобавленныйСертификат.Вставить("Выполнено", Истина);
	ДобавленныйСертификат.Вставить("ОтпечатокСертификата", ОтпечатокПоСертификату(ДобавленныйСертификат.Ссылка));
	НайтиСертификатЗавершение(ДобавленныйСертификат, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДалееВыборБанков(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)
		И НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		Модифицированность = Истина;
	КонецЕсли;

	НачатьЗамерВремениПодборБанков();

	ДалееВыборБанковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееОтчетность(Команда)

	Если НЕ ПроверитьЗаполнениеСтраницы("Банки") Тогда

		Если ЗначениеЗаполнено(Объект.СуммаДокумента) И ЗначениеЗаполнено(Объект.СрокКредита) Тогда
			// Если сумма и срок указаны, а банки не заполнены, то уточним причину.
			СтатистикаПоБанкам = СтатистикаПоБанкам();
			
			Если СтатистикаПоБанкам.КоличествоДоступных = 0 Тогда
				ПоказатьПредупреждение(, Элементы.НадписьПредложенияБанковНеНайдены.Заголовок);
				Возврат;
			КонецЕсли;
			
			Если СтатистикаПоБанкам.КоличествоОтмеченных = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Выберите партнеров сервиса, которым хотите отправить заявку'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	НачатьЗамерВремениПодборОтчетности();
	
	ДалееОтчетностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееРеквизитыЗаемщика(Команда)
	
	Если НЕ ПроверитьЗаполнениеСтраницы("Отчетность") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьСтраницыРеквизитыЗаемщика();
	
	Если НЕ ТолькоПросмотр И НЕ ЗначениеЗаполнено(СертификатАбонента) Тогда
		// Запустим поиск сертификата электронной подписи для выбранной организации.
		НачатьПоискСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадНачало(Команда)

	НазадНачалоНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НазадВыборБанков(Команда)

	УстановитьВидимостьСтраницыБанки();	

КонецПроцедуры

&НаКлиенте
Процедура НазадОтчетность(Команда)
	
	УстановитьВидимостьСтраницыОтчетность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	Если НЕ ПроверитьИЗаписать() Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СертификатАбонента) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Электронная подпись'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"СертификатАбонентаПредставление");
		Возврат;
	КонецЕсли;

	СведенияОСервисе = ЗаявкиНаКредитВызовСервера.СведенияОСервисе(Объект.СервисОбменаСБанками);
	
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьИОтправить_ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);	
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	Иначе
		ПроверитьЗавершениеДлительнойОперацииПередПодписаниемИОтправкой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить_ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявок необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПроверитьЗавершениеДлительнойОперацииПередПодписаниемИОтправкой();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперацииПередПодписаниемИОтправкой() Экспорт
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено Тогда
		Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаЗаемщикИП
			И Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаЗаемщикЮЛ Тогда
			УстановитьВидимостьСтраницыРеквизитыЗаемщика();
		КонецЕсли;
		НачатьПодписаниеИОтправку();
	Иначе
		УстановитьВидимостьСтраницыОжидания(НСтр("ru = 'Проверка информации'"));
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеДлительнойОперацииПередПодписаниемИОтправкой", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодписаниеИОтправку()

	Если ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		// Если в обновление данных сервиса завершилось неуспешно, то отправлять заявку не нужно.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВыбранныеБанки() Тогда
		ПоказатьПредупреждениеОбИзмененииУсловийБанков();
		Возврат;
	КонецЕсли;

	Банки = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.Банки Цикл
		ОписаниеБанка = Новый Структура;
		ОписаниеБанка.Вставить("Банк", СтрокаТаблицы.Банк);
		ОписаниеБанка.Вставить("ИдентификаторКредитногоПродукта", СтрокаТаблицы.ИдентификаторКредитногоПродукта);
		Банки.Добавить(ОписаниеБанка);
	КонецЦикла;
	
	ТипыТранзакций = ЗаявкиНаКредитКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Объект.СервисОбменаСБанками);
	
	ПараметрыПодписанияИОтправки = ЗаявкиНаКредитКлиент.ПараметрыПодписанияИОтправки(Объект.СервисОбменаСБанками);
	ПараметрыПодписанияИОтправки.ЗаявкаНаКредит = Объект.Ссылка;
	ПараметрыПодписанияИОтправки.Организация    = Объект.Организация;
	ПараметрыПодписанияИОтправки.Банки          = Банки;
	ПараметрыПодписанияИОтправки.ТипТранзакции  = ТипыТранзакций.Заявка;
	ПараметрыПодписанияИОтправки.ПараметрыОтбораСертификата = ПараметрыОтбораСертификата();
	ПараметрыПодписанияИОтправки.ДобавитьМеткуДоверенногоВремени = ДобавитьМеткуДоверенногоВремени;
	ПараметрыПодписанияИОтправки.ПредставленияДополнительныхФайлов = ПредставленияДополнительныхФайлов();
	
	// Параметры, которые доступны только в клиентском контексте.
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ВладелецФормы = ЭтотОбъект;
	ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПодписатьИОтправитьЗавершение", ЭтотОбъект);

	УниверсальныйОбменСБанкамиВызовСервера.СохранитьСертификатОрганизации(
		УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(Объект.СервисОбменаСБанками, Объект.Организация),
		СертификатАбонента);
	ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиКлиент.ЭтоОблачныйСертификатПользователя(СертификатАбонента);

	РезультатВыбораСертификата = ЗаявкиНаКредитКлиент.НовыеПараметрыВыбранногоСертификата();
	РезультатВыбораСертификата.Выполнено = Истина;
	РезультатВыбораСертификата.ОтпечатокСертификата = СертификатАбонента;
	РезультатВыбораСертификата.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭтоОблачныйСертификат;
	
	ЗаявкиНаКредитКлиент.ПослеВыбораСертификатаДляПодписи(РезультатВыбораСертификата, ПараметрыПодписанияИОтправки);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Выполнено = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Выполнено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Выполнено", Ложь);
	КонецЕсли;
	
	Если НЕ Выполнено Тогда
		Возврат;
	КонецЕсли;

	// При успешной отправке оповестим форму списка.
	КлючЗаявки = Новый Структура;
	КлючЗаявки.Вставить("Организация",    Объект.Организация);
	КлючЗаявки.Вставить("ЗаявкаНаКредит", Объект.Ссылка);
	КлючЗаявки.Вставить("Банк",           Объект.Банки[0].Банк);
	Оповестить("ОбновленоСостояниеЗаявкиНаКредит", КлючЗаявки);
	
	// Запустим автоматическую проверку входящих сообщений от банков.
	ЗаявкиНаКредитКлиент.ПерезапуститьПроверкуСообщенийОтБанков();

	// Сообщим пользователю о том, что успешно отправлена.
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Заявка успешно отправлена.'"));
	Подстроки.Добавить(НСтр("ru = 'Обычно партнеры сервиса рассматривают заявки за один рабочий день.'"));
	Подстроки.Добавить(СтрШаблон(НСтр("ru = 'Просмотр статуса заявки: меню %1'"), ПутьВИнтерфейсеКСпискуЗаявок(Объект.СервисОбменаСБанками)));
	
	ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокЗаявокПослеУспешнойОтправки", ЭтотОбъект, КлючЗаявки);
	
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаявокПослеУспешнойОтправки(КлючЗаявки) Экспорт

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СервисОбменаСБанками", Объект.СервисОбменаСБанками);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ЗаявкиНаКредитВызовСервера.КлючЗаписиСостоянияЗаявки(КлючЗаявки));

	ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаКредит.Форма.СостояниеЗаявокНаКредит", ПараметрыОткрытия);
	Закрыть();

КонецПроцедуры

&НаСервере
Функция ПроверитьВыбранныеБанки()
	
	Если Объект.Банки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	СведенияОБанках = СведенияОБанках();
	
	Для каждого ВыбранныйБанк Из Объект.Банки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Банк", ВыбранныйБанк.Банк);
		Отбор.Вставить("ИдентификаторКредитногоПродукта", ВыбранныйБанк.ИдентификаторКредитногоПродукта);
		
		НайденныеКредитныеПродукты = СведенияОБанках.НайтиСтроки(Отбор);
		
		Если НайденныеКредитныеПродукты.Количество() = 0 Тогда
			// Выбранный банк не найден среди банков в сервисе.
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого КредитныйПродукт Из НайденныеКредитныеПродукты Цикл
			Если НЕ БанкДоступен(КредитныйПродукт) Тогда
				// Условия банка изменились и не соответствуют заявке.
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзмененииУсловийБанков()
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		// Если возника ошибка обновления данных сервиса, то не показываем сообщения про изменение условий банков,
		// т.к. и те условия, которые сейчас загружены в базу могут быть неактуальны, 
		// когда соединение с сервером восстановится, тогда проверим условия еще раз.
		Возврат;
	КонецЕсли;

	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Условия изменились.'"));
	Подстроки.Добавить(НСтр("ru = 'Перед отправкой необходимо проверить список выбранных партнеров сервиса.'"));
	ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиНаСтраницуБанки", ЭтотОбъект);
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуБанки(ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьСтраницыБанки();
	
КонецПроцедуры

// Сохраняет в архив и передает на клиент файлы, прикладываемые к заявке.
//
&НаКлиенте
Процедура ПодготовитьАрхивДляСохранения()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПодготовкуАрхиваДляСохранения(Объект.Ссылка, ПредставленияДополнительныхФайлов(), УникальныйИдентификатор);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовитьАрхивДляСохраненияЗавершение", ЭтотОбъект);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьАрхивДляСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда // остается только закрыть форму
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Выполнено") // прямой вызов обработчика
	 Или Не Результат.Свойство("Статус") Тогда // это не результат вызова фонового задания из БСП
		Возврат;
	КонецЕсли;
	   
	Если Результат.Статус <> "Выполнено"
	 Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		Если Результат.Статус <> "Ошибка" Или ПустаяСтрока(Результат.ПодробноеПредставлениеОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(Результат.ПодробноеПредставлениеОшибки, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	АдресАрхива = Результат.АдресДополнительногоРезультата;
	
	// Передаем результат подписания и отправки из фонового задания.
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Или Не Результат.Свойство("Выполнено") Тогда
		Возврат;
	КонецЕсли;

	Если Не Результат.Выполнено Тогда
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			// отмена создания архива
		ИначеЕсли Результат.Свойство("ТаблицаСообщений") И ЗначениеЗаполнено(Результат.ТаблицаСообщений) Тогда
			// В отчетности, которая прикрепляется к заявке, содержатся ошибки. Открываем форму для просмотра ошибок.
			РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(Результат.ТаблицаСообщений);
		Иначе
			ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(Результат.ОписаниеОшибки, ЭтотОбъект);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЧастиИмениФайла = Новый Массив;
	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит") Тогда
		ЧастиИмениФайла.Добавить("LOANAPP_");
	Иначе
		ЧастиИмениФайла.Добавить("LEASAPP_");
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(Формат(Объект.Дата, "ДФ=ггММдд"));
	ЧастиИмениФайла.Добавить(".zip");
	
	ПолучитьФайл(АдресАрхива, СтрСоединить(ЧастиИмениФайла), Истина);	
	
КонецПроцедуры

// Запускает фоновое задание, которое сохраняет в архив для передачи на клиент файлы, прикладываемые к заявке.
//
// Параметры:
//  ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - заявка, по которой формируются файлы.
//  ПредставленияДополнительныхФайлов - СписокЗначений - как названы на форме дополнительные файлы.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - форма, откуда вызвано фоновое задание.
//
// Возвращаемое значение:
//   ДлительнаяОперация - Структура - см. ДлительныеОперации.ВыполнитьВФоне() . 
//
&НаСервереБезКонтекста
Функция НачатьПодготовкуАрхиваДляСохранения(ЗаявкаНаКредит, ПредставленияДополнительныхФайлов, УникальныйИдентификаторФормы)
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка файлов заявки'");
	ИмяПроцедурыФоновогоЗадания = "Документы.ЗаявкаНаКредит.ПодготовитьФайлыДляСохранения";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПредметОбмена", ЗаявкаНаКредит);
	ПараметрыПроцедуры.Вставить("ПредставленияДополнительныхФайлов", ПредставленияДополнительныхФайлов);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		ИмяПроцедурыФоновогоЗадания,
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)

	Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;

	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)

	Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;

    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию(Результат)

	// Перед вызовом стандартных процедур БСП проверим необходимость блокировки владельца-контактной информации.
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ИмяРеквизита")  Тогда
		
		Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Результат.ИмяРеквизита) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Подключаемый_ОбновитьКонтактнуюИнформациюНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформациюНаСервере(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ДанныеОрганизации

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Документы.ЗаявкаНаКредит.ЗаполнитьПоУмолчанию(Объект);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Объект.Организация, Объект.Дата);
	
	ПрочитатьОсновныеДанныеОрганизации();

	УстановитьСвойстваРеквизитовНачало();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновныеДанныеОрганизации(ОчищатьЗакэшированныеДанные = Истина)
	// Синхронизируем реквизит формы для единственной организации в базе с данными объекта.
	ОднаОрганизация = Объект.Организация;

	// Запомним организацию, по которой считали данные.
	ОрганизацияДоИзменения = Объект.Организация;

	// Очистим все закэшированные данные по организации.
	Если ОчищатьЗакэшированныеДанные Тогда
		ОчиститьЗакэшированныеДанные();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
	    Возврат;
	КонецЕсли;
	
	// Загружаем информацию по организации из базы.
	ЗначениеВРеквизитФормы(Объект.Организация.ПолучитьОбъект(), "Организация");
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПрочитатьОсновныеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель);
	Иначе
		// Для юридического лица определяем состав учредителей, что можно было по нему рассчитывать стоп-факторы. 
		ЗаполнитьУчредителей();
	КонецЕсли;
	
	ПроверитьИНН(ЭтотОбъект);
	
	// Юридический адрес организации / адрес места жительства ИП.
	ДанныеЮрАдресаОрганизации = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Объект.Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Объект.Дата);
	
	Если ЗначениеЗаполнено(ДанныеЮрАдресаОрганизации.Представление) Тогда
		КонтактнаяИнформацияПолеЮрАдресОрганизации = ДанныеЮрАдресаОрганизации.Представление;
	Иначе
		// Редактирование юр.адреса организации в заявке не поддерживаем,
		// т.к. при его изменении может потребоваться перерегистрация в гос.органах.
		// Это обслуживает форме самого справочника Организации.
		// В заявке просто показываем факт незаполненного адреса.
		КонтактнаяИнформацияПолеЮрАдресОрганизации = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыРуководителя()

	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		// В заявке на кредит указывается данные самого руководителя (не уполномоченного лица).
		ОтветственныеЛица     = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
		Руководитель          = ОтветственныеЛица.Руководитель;
		РуководительДолжность = ОтветственныеЛица.РуководительДолжность;
	КонецЕсли;
	РуководительОтсутствует = Не ЗначениеЗаполнено(Руководитель);

	ПрочитатьОсновныеДанныеФизЛица(Руководитель);

	ПрочитатьГражданствоФизЛица(Руководитель);

	ПрочитатьПаспортныеДанныеФизЛица(Руководитель);
	
	ПрочитатьСостояниеВБракеФизЛица(Руководитель);
	
	ПрочитатьКонтактнуюИнформациюРуководителя();

	Если НЕ ЗначениеЗаполнено(КонтактноеЛицоПоЗаявке) Тогда
		// Покажем выбранное контактное лицо.
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И Объект.КонтактноеЛицо <> Руководитель Тогда
			КонтактноеЛицоПоЗаявке = "ДругойСотрудник";
		Иначе
			КонтактноеЛицоПоЗаявке = "Руководитель";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьСистемуНалогообложения()

	Если ЗначениеЗаполнено(СистемаНалогообложенияПредставление) Тогда
		// Настройки уже были прочитаны ранее из базы и с тех пор организация не изменялась,
		// заново читать данные не требуется.
		Возврат;
	КонецЕсли;

	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
	   И Организация.ОбособленноеПодразделение 
	   И ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда // обособленное подразделение
		ИсточникУчетнойПолитики = ОрганизацииФормыВызовСервера.ПараметрыСистемыНалогообложенияПоОрганизации(Организация.ГоловнаяОрганизация);
	Иначе
		ИсточникУчетнойПолитики = Объект.Организация;
	КонецЕсли;
	СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(ИсточникУчетнойПолитики);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьСистемуНалогообложения()

	СистемаНалогообложенияПредставление = "";
	ПрочитатьСистемуНалогообложения();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонтактнуюИнформациюОрганизации()

	Если НЕ ЗначениеЗаполнено(Организация.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Если КонтактнаяИнформацияОрганизацииПрочитана
	 И КонтактнаяИнформацияФизЛицаПрочитана Тогда
		Возврат;
	КонецЕсли;
	
	// Контактная информация из справочника Организации отображается на странице заемщика-ИП,
	// ее инициализация требуется только в случае, если показывается эта страница.
	Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаЗаемщикИП Тогда
		Возврат;
	КонецЕсли;

	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, Организация, "КонтактнаяИнформацияИП");
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицо, "КонтактнаяИнформацияФЛИП");
    
	ОписанияРеквизитовМобильныйНомер = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
		Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛица"));
		
	Если ОписанияРеквизитовМобильныйНомер.Количество() > 0 Тогда
		ОписанияРеквизитовМобильныйНомер[0].ИмяРеквизита = "КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛицаИП";
	КонецЕсли;
			
	КонтактнаяИнформацияОрганизацииПрочитана = Истина;
	КонтактнаяИнформацияФизЛицаПрочитана = Истина;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонтактнуюИнформациюРуководителя()

	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Если КонтактнаяИнформацияРуководителяПрочитана Тогда
		Возврат;
	КонецЕсли;

	// Контактная информация из справочника ФизическиеЛица отображается на странице заемщика-ЮЛ для руководителя ЮЛ,
	// ее инициализация требуется только в случае, если показывается эта страница.
	Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаЗаемщикЮЛ Тогда
		Возврат;
	КонецЕсли;

    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицо, "КонтактнаяИнформацияРуководителя");
    
	// Адрес места жительства показываем в виде гиперссылки.
	ПредставлениеАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ФизическоеЛицо.Ссылка,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
		Объект.Дата);
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
		КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = ПредставлениеАдреса;
	Иначе
		КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	КонецЕсли;
    
    КонтактнаяИнформацияРуководителяПрочитана = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗакэшированныеДанные()

	РазблокироватьОрганизацию();

	// Заполняем поля пустыми значениями.
	Если Не Организация.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗначениеВРеквизитФормы(Справочники.Организации.СоздатьЭлемент(), "Организация");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	НаименованиеСокращенноеДоИзменения          = "";
	Руководитель                                = Неопределено;
	РуководительДолжность                       = Неопределено;
	РуководительОтсутствует                     = Истина;
	КонтактнаяИнформацияПолеЮрАдресОрганизации  = "";
	СистемаНалогообложенияПредставление         = "";
	КонтактнаяИнформацияОрганизацииПрочитана    = Ложь;
	СертификатАбонента                          = Неопределено;
	СертификатАбонентаПредставление             = "";
	БанкиИнициализированы                       = Ложь;
	
	// Также очистим кэши для физлица (ИП или руководителя)
	ОчиститьЗакэшированныеДанныеФизЛица();

	// Инициализируем служебные реквизиты организации.
	НастроитьСлужебныеРеквизитыОрганизации();

КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеОрганизации()

	// Перечитаем данные организации из Объект.Организация заново.
	ОчиститьЗакэшированныеДанные();
	
	ПрочитатьОсновныеДанныеОрганизации();
	
	ПрочитатьРеквизитыРуководителя();
	
	ПрочитатьСистемуНалогообложения();
	
	УстановитьСвойстваРеквизитовНачало();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьДанныеОрганизации()
	ПеречитатьДанныеОрганизации();
КонецПроцедуры

&НаСервере
Процедура НастроитьСлужебныеРеквизитыОрганизации()

	// Содержит признаки изменения данных, относящихся к организации.
	ИзменениеДанныхОрганизации = Новый Структура();
	ИзменениеДанныхОрганизации.Вставить("ОрганизацияЗаблокирована",     Ложь); // Признак блокировки ссылки организации.
	ИзменениеДанныхОрганизации.Вставить("ОрганизацияМодифицированность",Ложь); // Признак изменении в реквизите Организация.
	ИзменениеДанныхОрганизации.Вставить("РуководительМодифицированность",Ложь); // Признак изменении данных о должности руководителе.

КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииРеквизитаОрганизации()

	Если ЗаблокироватьОрганизацию() Тогда
		ИзменениеДанныхОрганизации.ОрганизацияМодифицированность = Истина;
	КонецЕсли;
	
	Возврат ИзменениеДанныхОрганизации.ОрганизацияМодифицированность;

КонецФункции

&НаКлиенте
Функция ЗаблокироватьОрганизацию()
	
	Если НЕ ТребуетсяБлокировкаОрганизации(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаблокироватьОрганизациюНаСервере() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Сообщим, что не получилось заблокировать.
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Организация ""%1"" уже заблокирована. Возможно, уже открыта форма с реквизитами организации или ее реквизиты редактируются другим пользователем.'"),
		Организация.Наименование);

	ПоказатьПредупреждение(, ТекстСообщения);
	
	// Перечитаем данные организации заново.
	ПеречитатьДанныеОрганизации();
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяБлокировкаОрганизации(Форма)

	Если Форма.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована Тогда
		// Ранее уже было вызвана блокировка.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация.Ссылка) Тогда
		// Пустую организацию не блокируем.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаблокироватьОрганизациюНаСервере()

	Если НЕ ТребуетсяБлокировкаОрганизации(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;

	Успешно = Истина;

	Попытка
		ЗаблокироватьДанныеДляРедактирования(Организация.Ссылка, Организация.ВерсияДанных, УникальныйИдентификатор);
		ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована = Истина;
	Исключение
		// Запись в журнал регистрации не требуется.
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

&НаСервере
Процедура РазблокироватьОрганизацию()

	Если ЗначениеЗаполнено(Организация.Ссылка) И ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована Тогда
		// Снимем блокировку с ранее выбранной организации.
		РазблокироватьДанныеДляРедактирования(Организация.Ссылка, УникальныйИдентификатор);
		ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияДанныхОрганизации()

	ЗаписатьОрганизацию();

	// Реквизиты руководителя.
	ЗаписатьРуководителя();

	// Снимаем блокировку после записи всех данных по организации.
	РазблокироватьОрганизацию();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОрганизацию()

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ИзменениеДанныхОрганизации.ОрганизацияМодифицированность Тогда
		Возврат;
	КонецЕсли;

	// Изменены данные самой организации.
	ОрганизацияОбъект = РеквизитФормыВЗначение("Организация");
	
	Если КонтактнаяИнформацияОрганизацииПрочитана Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ОрганизацияОбъект);
	КонецЕсли;
	
	ОрганизацияОбъект.Записать();
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");

	// Снимаем признак изменения.
	ИзменениеДанныхОрганизации.ОрганизацияМодифицированность = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеОКОПФ(Знач КодОКОПФ)

	Возврат РегистрыСведений.КлассификаторОКОПФ.НаименованиеПоКоду(КодОКОПФ);

КонецФункции

&НаКлиенте
Процедура УстановитьНаименованиеПослеРедактированияИстории(НаборЗаписей)

	ОрганизацииФормыКлиентСервер.УстановитьНаименованиеПослеРедактированияИстории(ЭтотОбъект, Организация, НаборЗаписей);
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;

КонецПроцедуры

&НаКлиенте
Процедура ФИОИППриИзменении()
	
	// Копируем из реквизитов физлица в реквизиты организации.
	Организация.ФамилияИП = ФизическоеЛицо.Фамилия;
	Организация.ИмяИП     = ФизическоеЛицо.Имя;
	Организация.ОтчествоИП= ФизическоеЛицо.Отчество;

	Если ОрганизацииФормыКлиент.ФИОПриИзменении(Организация) Тогда
		НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	КонецЕсли;
	
	НачатьПоискСертификата();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода()
	
	Объект.ТребуетсяОбновлениеОтчетности = Истина;
	
	ОбновитьОтчетность();

	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваРеквизитовНачало()
	
	// Юридический адрес или адрес места жительства ИП
	АдресПустой = (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресОрганизации)
		ИЛИ КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
		ИЛИ КонтактнаяИнформацияПолеЮрАдресОрганизации = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки());
	
	ЭтоФизЛицо = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И АдресПустой;
		
	Если ЭтоФизЛицо Тогда
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок = НСтр("ru = 'Адрес места жительства'");
	Иначе
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок = НСтр("ru = 'Юридический адрес'");
	КонецЕсли;
	
	ОрганизацииФормыКлиентСервер.НастроитьСвойстваЭлементаДатаРегистрации(
		Элементы.ДатаРегистрации, ЭтоФизЛицо);
	
	Если НЕ АдресПустой Тогда
		ЮридическийАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Объект.Дата);
	КонецЕсли;	
	
	// Сведения о гражданстве физлица-ИП в регистре могут быть не заполнены.
	// В этом случае по общему правилу БЗК считается, что физлицо-гражданин РФ.
	// Но, возможно, что для физлица-ИП пользователи просто не заполнили фактические сведения о гражданстве.
	// Чтобы передавать банкам достоверную информацию, покажем пользователю
	// подставленное по умолчанию значение (страна Россия), чтобы он подтвердил, что это правильно,
	// и при записи заявки явно запишем строку в регистр, чтобы в следующий раз не спрашивать пользователя.
	Элементы.ГражданствоПредставлениеИП.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И ЭтоФизЛицо
		И НЕ ГражданствоФизЛицаЗаполнено;
	
	Элементы.ДатаРожденияИП.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И ЭтоФизЛицо
		И НЕ ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения);
	
	Элементы.ДатаРегистрации.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И НЕ ЗначениеЗаполнено(Организация.ДатаРегистрации);
	
	Элементы.ГруппаОКОПФ.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И (НЕ ЗначениеЗаполнено(Организация.КодОКОПФ)
			ИЛИ НЕ ЗначениеЗаполнено(Организация.НаименованиеОКОПФ));
	
	Элементы.ГруппаОКВЭД2.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И (НЕ ЗначениеЗаполнено(Организация.КодОКВЭД2)
			ИЛИ НЕ ЗначениеЗаполнено(Организация.НаименованиеОКВЭД2));
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = Элементы.ГражданствоПредставлениеИП.Видимость
		ИЛИ Элементы.ДатаРожденияИП.Видимость
		ИЛИ Элементы.ДатаРегистрации.Видимость
		ИЛИ Элементы.ГруппаОКОПФ.Видимость
		ИЛИ Элементы.ГруппаОКВЭД2.Видимость
		ИЛИ Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость;
	
	Если Элементы.ГражданствоПредставлениеИП.Видимость Тогда
		ТекущийЭлемент = Элементы.ГражданствоПредставлениеИП;
	ИначеЕсли Элементы.ДатаРожденияИП.Видимость Тогда
		ТекущийЭлемент = Элементы.ДатаРожденияИП;
	ИначеЕсли Элементы.ДатаРегистрации.Видимость Тогда
		ТекущийЭлемент = Элементы.ДатаРегистрации;
	ИначеЕсли Элементы.ГруппаОКОПФ.Видимость Тогда
		ТекущийЭлемент = Элементы.ГруппаОКОПФ;
	ИначеЕсли Элементы.ГруппаОКВЭД2.Видимость Тогда
		ТекущийЭлемент = Элементы.ГруппаОКВЭД2;
	ИначеЕсли Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость Тогда
		ТекущийЭлемент = Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСертификата(Форма)
	
	Элементы = Форма.Элементы;
	
	ВыборСертификатаДоступен = ПоляДляВыбораСертификатаЗаполнены(Форма);
	
	Элементы.СертификатАбонентаПредставлениеИП.Видимость = НЕ Форма.ТолькоПросмотр 
		И НЕ Элементы.ГруппаНеНайденыСертификатыИП.Видимость;

	Элементы.СертификатАбонентаПредставлениеИП.Доступность = ВыборСертификатаДоступен;
	Элементы.СертификатАбонентаПредставлениеИП.АвтоОтметкаНезаполненного = ВыборСертификатаДоступен;


	Элементы.СертификатАбонентаПредставлениеЮЛ.Видимость = НЕ Форма.ТолькоПросмотр
				И НЕ Элементы.ГруппаНеНайденыСертификатыЮЛ.Видимость;

	Элементы.СертификатАбонентаПредставлениеЮЛ.Доступность = ВыборСертификатаДоступен;
	Элементы.СертификатАбонентаПредставлениеЮЛ.АвтоОтметкаНезаполненного = ВыборСертификатаДоступен;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОрганизации()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;

	// Сначала запишем организацию, если пользователь ее правил, и снимем с нее блокировку,
	// а потом откроем стандартную форму элемента, чтобы можно было редактировать в ней.
	ЗаписатьИзмененияДанныхОрганизации();
	
	Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		// Т.к. при изменении организации-ИП может быть изменено и связанное физлицо,
		// то запишем физлицо-ИП тоже.
		ЗаписатьИзмененияДанныхФизЛица();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Объект.Организация);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область ДанныеФизЛица

&НаСервере
Процедура ПрочитатьРеквизитыИП()

	ПрочитатьОсновныеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель);
	
	ПрочитатьСостояниеВБракеФизЛица(Организация.ИндивидуальныйПредприниматель);
	
	ПрочитатьПаспортныеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель);

	Если НЕ ЗначениеЗаполнено(КонтактноеЛицоПоЗаявке) Тогда
		// Покажем выбранное контактное лицо.
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И Объект.КонтактноеЛицо <> Организация.ИндивидуальныйПредприниматель Тогда
			КонтактноеЛицоПоЗаявке = "ДругойСотрудник";
		Иначе
			КонтактноеЛицоПоЗаявке = "Руководитель";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновныеДанныеФизЛица(ФизЛицо)

	Если ФизическоеЛицо.Ссылка = ФизЛицо Тогда
		// Данные объекта уже загружены ранее, ничего делать не требуется.
		Возврат;
	КонецЕсли;

	ОчиститьЗакэшированныеДанныеФизЛица();

	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ФизЛицо.ПолучитьОбъект(), "ФизическоеЛицо");
	
	Если Организация.ИндивидуальныйПредприниматель = ФизЛицо Тогда
		// Считаем сразу данные о гражданстве предпринимателя, чтобы показать их на первой странице.
		ПрочитатьГражданствоФизЛица(ФизЛицо);

		МестоРожденияИП = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения);
	Иначе
		МестоРожденияРуководителя = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения);
	КонецЕсли;
	
	ПроверитьИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГражданствоФизЛица(ФизЛицо)

	Если ГражданствоФизическихЛиц.ФизическоеЛицо = ФизЛицо Тогда
		// Данные уже прочитаны ранее, повторно не требуется.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата",    Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГражданствоФизическихЛиц.Период,
	|	ГражданствоФизическихЛиц.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ГражданствоФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ГражданствоФизическихЛиц");
		ГражданствоФизЛицаЗаполнено = Истина;
	Иначе	
		// Заполним по умолчанию страну Россию и установим признак, что фактически гражданство не заполнено,
		// чтобы по нему запомнить, что это новая запись и ее надо будет записать в базу,
		// чтобы в следующий раз не требовать у пользователя подтверждения сведений о гражданстве.
		ГражданствоФизическихЛиц.ФизическоеЛицо = ФизЛицо;
		ГражданствоФизическихЛиц.Страна         = Справочники.СтраныМира.Россия;
		ГражданствоФизЛицаЗаполнено             = Ложь;
	КонецЕсли;

	СформироватьПредставлениеГражданстваФизЛица(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеГражданстваФизЛица(Форма)

	Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
		Форма.ГражданствоПредставление = Форма.ГражданствоФизическихЛиц.Страна;
	Иначе
		Форма.ГражданствоПредставление = НСтр("ru = 'Лицо без гражданства'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПаспортныеДанныеФизЛица(ФизЛицо)

	Если ПаспортныеДанные.Физлицо = ФизЛицо Тогда
		// Данные уже прочитаны ранее, повторно не требуется.
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата",    Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛиц.Период КАК Период,
	|	ДокументыФизическихЛиц.Физлицо КАК Физлицо,
	|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, Физлицо = &ФизЛицо) КАК ДокументыФизическихЛиц
	|ГДЕ
	|	(ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|			ИЛИ ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ПаспортныеДанные");
		Если МенеджерЗаписи.Выбран() Тогда
			СерияНомерПаспорта = МенеджерЗаписи.Серия + " " + МенеджерЗаписи.Номер;
		КонецЕсли;
	Иначе
		// Очистим поля и заполним по умолчанию.
		ЗначениеВРеквизитФормы(РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи(), "ПаспортныеДанные");
		ПаспортныеДанные.Физлицо = ФизЛицо;
		Если ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Россия Тогда
			ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
			ПаспортныеДанные.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостояниеВБракеФизЛица(ФизЛицо)

	Если СостояниеВБракеФизическихЛиц.ФизическоеЛицо = ФизЛицо Тогда
		// Данные уже прочитаны ранее, повторно не требуется.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата",    Объект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияВБракеФизическихЛиц.Период,
	|	СостоянияВБракеФизическихЛиц.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СостоянияВБракеФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК СостоянияВБракеФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.СостоянияВБракеФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "СостояниеВБракеФизическихЛиц");
	Иначе
		// Заполним по умолчанию, чтобы в следующий раз не считывать из базы еще раз.
		СостояниеВБракеФизическихЛиц.ФизическоеЛицо = ФизЛицо;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗакэшированныеДанныеФизЛица()

	РазблокироватьФизическоеЛицо();
	
	// Заполняем поля пустыми значениями.
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(),                           "ФизическоеЛицо");
	ЗначениеВРеквизитФормы(РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи(),       "ПаспортныеДанные");
	ЗначениеВРеквизитФормы(РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи(),     "ГражданствоФизическихЛиц");
	ЗначениеВРеквизитФормы(РегистрыСведений.СостоянияВБракеФизическихЛиц.СоздатьМенеджерЗаписи(), "СостояниеВБракеФизическихЛиц");
	УстановитьПривилегированныйРежим(Ложь);

	ГражданствоПредставление      = Справочники.СтраныМира.Россия;
	ГражданствоФизЛицаЗаполнено   = Ложь;
	СерияНомерПаспорта       = "";
	КонтактнаяИнформацияРуководителяПрочитана = Ложь;
	КонтактнаяИнформацияФизЛицаПрочитана = Ложь;
	КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	
	// Для совместимости с БЗК требуется, чтобы имена реквизитов формы совпадали с именами элементов формы,
	// поэтому используем два разных реквизита для ИП и руководителя ЮЛ.
	МестоРожденияИП           = ""; 
	МестоРожденияРуководителя = "";

	// Инициализируем служебные реквизиты физлица.
	НастроитьСлужебныеРеквизитыФизЛица();

КонецПроцедуры

&НаСервере
Процедура ПеречитатьГражданствоФизЛица()

	ФизЛицоСсылка = ФизическоеЛицо.Ссылка;
	
	ПрочитатьГражданствоФизЛица(ФизЛицоСсылка);

	УстановитьСвойстваРеквизитовНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьГражданствоФизЛица()

	ПеречитатьГражданствоФизЛица();

КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеФизЛица()

	// Перечитаем данные физлица заново.
	ФизЛицоСсылка = ФизическоеЛицо.Ссылка;
	
	ОчиститьЗакэшированныеДанныеФизЛица();
	
	ПрочитатьОсновныеДанныеФизЛица(ФизЛицоСсылка);
	
	ПрочитатьПаспортныеДанныеФизЛица(ФизЛицоСсылка);
	
	ПрочитатьГражданствоФизЛица(ФизЛицоСсылка);
	
	ПрочитатьСостояниеВБракеФизЛица(ФизЛицоСсылка);
	
	ПрочитатьКонтактнуюИнформациюРуководителя();

	УстановитьСвойстваРеквизитовНачало();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьДанныеФизЛица()

	Если ИсточникОбработкиОповещенияЗаписьФизическогоЛица = ФизическоеЛицо.Ссылка Тогда
		// Изменены данные ИП или руководителя юридического лица, перечитаем их.
		ПеречитатьДанныеФизЛица();
	КонецЕсли;
		
	// Проверим также, возможно, были изменения в данных учредителей или руководитель одновременно является одним из учредителей.
	Отбор = Новый Структура("Учредитель", ИсточникОбработкиОповещенияЗаписьФизическогоЛица);
	
	НайденныеСтроки = Объект.Учредители.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДобавленныеКолонкиУчредители(НайденныеСтроки[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСлужебныеРеквизитыФизЛица()

	// Содержит признаки изменения данных, относящихся к физлицу.
	ИзменениеДанныхФизЛица = Новый Структура();
	ИзменениеДанныхФизЛица.Вставить("ФизическоеЛицоЗаблокировано",  Ложь); // Признак блокировки ссылки физического лица.
	ИзменениеДанныхФизЛица.Вставить("ФизическоеЛицоМодифицированность",               Ложь); // Признак изменении в реквизите ФизическоеЛицо.
	ИзменениеДанныхФизЛица.Вставить("ПаспортныеДанныеМодифицированность",             Ложь); // Признак изменении в реквизите ПаспортныеДанные.
	ИзменениеДанныхФизЛица.Вставить("СостояниеВБракеФизическихЛицМодифицированность", Ложь); // Признак изменении в реквизите СостояниеВБракеФизическихЛиц.

КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииРеквизитаФизическогоЛица()

	Если ЗаблокироватьФизическоеЛицо() Тогда
		ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность = Истина;
	КонецЕсли;
	
	Возврат ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСерииНомераПаспорта()

	ПриИзмененииПаспортныхДанных();
	
	МассивПодстрок = СтрРазделить(СерияНомерПаспорта, " ", Истина);
	
	Если МассивПодстрок.Количество() = 3 Тогда
		ПаспортныеДанные.Номер = МассивПодстрок[2];
		МассивПодстрок.Удалить(2);
	Иначе
		ПаспортныеДанные.Номер = "";
	КонецЕсли;
	
	ПаспортныеДанные.Серия = СтрСоединить(МассивПодстрок, " ");
	
	ПаспортРФ = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	Если ПаспортныеДанные.ВидДокумента <> ПаспортРФ Тогда
		ПаспортныеДанные.ВидДокумента = ПаспортРФ;
		ПаспортныеДанные.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииПаспортныхДанных()

	Если ЗаблокироватьФизическоеЛицо() Тогда
		ИзменениеДанныхФизЛица.ПаспортныеДанныеМодифицированность = Истина;
	КонецЕсли;
	
	ОбновитьДанныеРуководителяКакУчредителя();
	
	Возврат ИзменениеДанныхФизЛица.ПаспортныеДанныеМодифицированность;

КонецФункции

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицо()
	
	Если НЕ ТребуетсяБлокировкаФизическогоЛица(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаблокироватьФизическоеЛицоНаСервере() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Сообщим, что не получилось заблокировать.
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Физическое лицо ""%1"" уже заблокировано. Возможно, уже открыта форма с личными данными или личные данные редактируются другим пользователем.'"),
		ФизическоеЛицо.Наименование);

	ПоказатьПредупреждение(, ТекстСообщения);
	
	// Перечитаем данные физлица заново.
	ПеречитатьДанныеФизЛица();
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяБлокировкаФизическогоЛица(Форма)

	Если Форма.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано Тогда
		// Ранее уже было вызвана блокировка.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ФизическоеЛицо.Ссылка) Тогда
		// Пустое физлицо не блокируем.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаблокироватьФизическоеЛицоНаСервере()

	Если НЕ ТребуетсяБлокировкаФизическогоЛица(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;

	Успешно = Истина;

	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, ФизическоеЛицо.ВерсияДанных, УникальныйИдентификатор);
		ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано = Истина;
	Исключение
		// Запись в журнал регистрации не требуется.
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

&НаСервере
Процедура РазблокироватьФизическоеЛицо()

	Если ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) И ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано Тогда
		// Снимем блокировку с ранее выбранного физического лица.
		РазблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, УникальныйИдентификатор);
		ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияДанныхФизЛица()

	ЗаписатьФизическоеЛицо();
	
	ЗаписатьПаспортныеДанныеФизЛица();

	ЗаписатьСостояниеВБракеФизЛица();

	ЗаписатьГражданствоФизЛица();

	// Снимаем блокировку после записи всех данных по физлицу.
	РазблокироватьФизическоеЛицо();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизическоеЛицо()

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность Тогда
		Возврат;
	КонецЕсли;

	// Изменены данные самого физлица.
	ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	ЭтоНовый = ФизЛицоОбъект.ЭтоНовый();
	
	ФизЛицоОбъект.Наименование = СокрЛП(ФизЛицоОбъект.Фамилия) + " " + СокрЛП(ФизЛицоОбъект.Имя)
		+ ?(ЗначениеЗаполнено(ФизЛицоОбъект.Отчество), " " + СокрЛП(ФизЛицоОбъект.Отчество), "");
	ФизЛицоОбъект.ФИО = ФизЛицоОбъект.Наименование;

	Если КонтактнаяИнформацияРуководителяПрочитана
	 ИЛИ КонтактнаяИнформацияФизЛицаПрочитана Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);
	КонецЕсли;
	
	ФизЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	ФизЛицоОбъект.Записать();

	// Освободим объект, т.к. при записи ФИО может он может быть изменен.
	РазблокироватьФизическоеЛицо();
	
	// Снимаем признак изменения.
	ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность = Ложь;
		
	// Обновляем ФИО в регистре.
	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
	
	Если НЕ ЭтоНовый Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоОбъект.Ссылка);
		Запрос.УстановитьПараметр("Дата",    Объект.Дата);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФИОФизическихЛиц.Период
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизическихЛиц";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Период = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
		МенеджерЗаписи.Период         = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	// Записываем только, если фактически что-то было изменено.
	УстановитьЗначение(МенеджерЗаписи, "Фамилия",  ФизЛицоОбъект.Фамилия);
	УстановитьЗначение(МенеджерЗаписи, "Имя",      ФизЛицоОбъект.Имя);
	УстановитьЗначение(МенеджерЗаписи, "Отчество", ФизЛицоОбъект.Отчество);
	
	Если МенеджерЗаписи.Модифицированность() Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// Обновляем реквизит формы.
	ФизЛицоОбъект.Прочитать();
	ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицо");

КонецПроцедуры

&НаСервере
Процедура ЗаписатьПаспортныеДанныеФизЛица()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИзменениеДанныхФизЛица.ПаспортныеДанныеМодифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		// Физлицо не записано, поэтому нет ссылки для записи регистра.
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РеквизитФормыВЗначение("ПаспортныеДанные");
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ВидДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(МенеджерЗаписи.Номер)
		ИЛИ НЕ ЗначениеЗаполнено(МенеджерЗаписи.ДатаВыдачи) Тогда
		// Основные реквизиты не заполнены, записывать нечего.
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Физлицо = ФизическоеЛицо.Ссылка;

	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = МенеджерЗаписи.ДатаВыдачи;
		// Это новая запись регистра, которой раньше еще не было.
		// Сразу установим для нее признак того, что она описывает документ, удостоверяющий личность.
		МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "ПаспортныеДанные");
	
	ИзменениеДанныхФизЛица.ПаспортныеДанныеМодифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеВБракеФизЛица()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИзменениеДанныхФизЛица.СостояниеВБракеФизическихЛицМодифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		// Физлицо не записано, поэтому нет ссылки для записи регистра.
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РеквизитФормыВЗначение("СостояниеВБракеФизическихЛиц");
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.СостояниеВБраке) Тогда
		// Основные реквизиты не заполнены, записывать нечего.
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо.Ссылка;

	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "СостояниеВБракеФизическихЛиц");
	
	ИзменениеДанныхФизЛица.СостояниеВБракеФизическихЛицМодифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьГражданствоФизЛица()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ГражданствоФизЛицаЗаполнено Тогда
		// Гражданство уже было заполнено на момент открытия заявки,
		// оно редактируется в отдельной форме, здесь ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		// Физлицо не записано, поэтому нет ссылки для записи регистра.
		Возврат;
	КонецЕсли;
	
	// Гражданство на момент открытия заявки не было заполнено в регистре,
	// по умолчанию была подставлена Россия и пользователь против этого не возражал (не менял), 
	// запишем ее явно в регистр, чтобы в следующий раз не спрашивать.
	
	МенеджерЗаписи = РеквизитФормыВЗначение("ГражданствоФизическихЛиц");
	
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо.Ссылка;

	Документы.ЗаявкаНаКредит.ЗаписатьГражданствоФизЛица(МенеджерЗаписи);
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "ГражданствоФизическихЛиц");
	
	ГражданствоФизЛицаЗаполнено = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГражданстваФизЛица()

	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	ПараметрыФормы.Вставить("Дата",           Объект.Дата);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуГражданстваФизЛицаЗавершение", ЭтотОбъект);

	// Используем упрощенную форму для редактирования гражданства,
	// т.к. стандартная форма БЗК ориентирована на работу в связке с формой элемента справочников Сотрудники или ФизЛица.
	ОткрытьФорму("Документ.ЗаявкаНаКредит.Форма.ГражданствоФизЛица",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГражданстваФизЛицаЗавершение(ВыбраннаяСтрана, ДополнительныеПараметры) Экспорт

	Если ВыбраннаяСтрана = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГражданствоФизЛицаЗаполнено = Истина;
	
	ГражданствоФизическихЛиц.Страна = ВыбраннаяСтрана;

	СформироватьПредставлениеГражданстваФизЛица(ЭтотОбъект);

	ОбновитьОтображениеДанных();
	
	УправлениеФормой();
	
	Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
		И ФизическоеЛицо.Ссылка = Организация.ИндивидуальныйПредприниматель Тогда
		// При изменении в гражданстве заемщика ИП необходимо обновить список подходящих банков.
		БанкиИнициализированы = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("МестоРожденияНачалоВыбораЗавершение", ЭтотОбъект);

	СотрудникиКлиент.ФизическиеЛицаМестоРожденияНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		ФизическоеЛицо.МестоРождения,
		ОповещениеЗавершения);

КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Если место рождения изменено, то отметим необходимость записи физлица.
	ПриИзмененииРеквизитаФизическогоЛица();
	
	ОбновитьДанныеРуководителяКакУчредителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СемейноеПоложениеПриИзменении(Элемент)
	
	Если ЗаблокироватьФизическоеЛицо() Тогда
		ИзменениеДанныхФизЛица.СостояниеВБракеФизическихЛицМодифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Учредители

&НаСервере
Процедура ЗаполнитьУчредителей()

	// Заполнение выполняем только в случае юридического лица.
	Если Организация.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр 
		И Объект.Учредители.Количество() = 0
		И НЕ ЗначениеЗаполнено(Объект.СоставУчредителей) Тогда
		// Пытаемся заполнить по умолчанию, если еще ни разу не заполняли.
		Документы.ЗаявкаНаКредит.ЗаполнитьУчредителей(Объект, Руководитель);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	// Заполним вспомогательные колонки, которые сохраняются в документе, а только показываются на форме.
	ЗаполнитьДобавленныеКолонкиУчредители();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолюУчредителя(ИдентификаторСтроки)
	
	ДанныеУчредителей = Документы.ЗаявкаНаКредит.УчредителиПоДаннымИБ(Объект.Организация, Объект.Дата);
	
	СтрокаУчредителя = Объект.Учредители.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДанныеУчредителя = ДанныеУчредителей.Найти(СтрокаУчредителя.Учредитель, "Учредитель");
	Если ДанныеУчредителя <> Неопределено Тогда
		СтрокаУчредителя.ДоляУК = ДанныеУчредителя.ДоляУК;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиУчредители(ИдентификаторСтроки = Неопределено)

	Если Объект.Учредители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель Тогда
		// Если руководитель единственный учредитель, то список учредителей не показывается
		// и заполнять дополнительные колонки не требуется.
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтрокаУчредителя = Объект.Учредители.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокиКЗаполнению = Новый Массив;
		СтрокиКЗаполнению.Добавить(СтрокаУчредителя);
	Иначе
		// Заполнение всех строк в таблице.
		СтрокиКЗаполнению = Объект.Учредители;
	КонецЕсли;
	
	// Очистим старые данные в полях, чтобы они не оставлись.
	Документы.ЗаявкаНаКредит.ПодготовитьДанныеУчредителей(Объект.Дата, СтрокиКЗаполнению);
	
	// Заполним представление полей для доп.файлов.
	ОтборПоИдентификатору = Новый Структура("Идентификатор", ИдентификаторПаспортУчредителя());
	ОписаниеПаспортаУчредителя = ОписаниеДополнительныхФайлов.НайтиСтроки(ОтборПоИдентификатору);
	Если ОписаниеПаспортаУчредителя.Количество() > 0 Тогда
		
		ОписаниеПаспортаУчредителя = ОписаниеПаспортаУчредителя[0];
		Для Каждого СтрокаКЗаполнению Из СтрокиКЗаполнению Цикл
			ЗаполнитьПоляДопФайлаПаспортУчредителя(СтрокаКЗаполнению, ОписаниеПаспортаУчредителя);
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРуководителяКакУчредителя()

	// Если руководитель юридического лица является одновременно его учредителем,
	// то при изменении его персональных данных в отдельных полях на форме
	// необходимо также обновить их представление в строке в списке учредителей.
	
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Учредитель", Руководитель);
	
	НайденныеСтроки = Объект.Учредители.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчредителя = НайденныеСтроки[0];
	
	// Собираем представление паспорта из данных формы, аналогично тому как формируется представление 
	// в ПередЗаписью() набора записей регистра сведений ДокументыФизическихЛиц.
	Подстроки = Новый Массив;

	// Если поле с видом документа не отображается на форме, то по умолчанию считается гражданином РФ.
	ЭтоПаспортРФ = (ПаспортныеДанные.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ"))
		ИЛИ (НЕ Элементы.ПаспортныеДанныеВидДокументаРуководителя.Видимость И НЕ ЗначениеЗаполнено(ПаспортныеДанные.ВидДокумента));
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.ВидДокумента) Тогда
		Подстроки.Добавить(Строка(ПаспортныеДанные.ВидДокумента));
	ИначеЕсли ЭтоПаспортРФ Тогда
		Подстроки.Добавить(НСтр("ru = 'Паспорт гражданина РФ'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.Серия) Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'серия: %1'"), ПаспортныеДанные.Серия));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.Номер) Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПаспортныеДанные.Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'выдан: %1 года'"), Формат(ПаспортныеДанные.ДатаВыдачи,"Л=ru_RU; ДФ='дд ММММ гггг'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.СрокДействия) Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'действует до: %1 года'"), Формат(ПаспортныеДанные.СрокДействия,"Л=ru_RU; ДФ='дд ММММ гггг'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		Подстроки.Добавить(ПаспортныеДанные.КемВыдан);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПаспортныеДанные.КодПодразделения) И ЭтоПаспортРФ Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'код подр. %1'"), ПаспортныеДанные.КодПодразделения));
	КонецЕсли;
	
	ПредставлениеДокумента = СтрСоединить(Подстроки, ", ");
	
	Телефоны = Новый Массив;
	Если ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		Телефоны.Добавить(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛица) Тогда
		Телефоны.Добавить(КонтактнаяИнформацияПолеТелефонМобильныйФизическиеЛица);
	КонецЕсли;
	
	// Формирование представления личных данных
	СтрокаУчредителя.ПредставлениеЛичныхДанных = ЗаявкиНаКредитКлиентСервер.ПредставлениеЛичныхДанных(
		ФизическоеЛицо.ИНН,
		ФизическоеЛицо.ДатаРождения,
		ФизическоеЛицо.МестоРождения,
		КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица,
		СтрСоединить(Телефоны, ", "),
		ПредставлениеДокумента
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСогласияУчредителя(Знач ЗаявкаНаКредит, Учредитель, Банки)

	СведенияОЗаявке = Документы.ЗаявкаНаКредит.СведенияОЗаявке(ЗаявкаНаКредит);
	Возврат Документы.ЗаявкаНаКредит.ПараметрыСогласияУчредителя(СведенияОЗаявке, Учредитель, Банки);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоляДопФайлаПаспортУчредителя(СтрокаКЗаполнению, ОписаниеПаспортаУчредителя)
	
	СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Представление = ОписаниеПаспортаУчредителя.КраткоеПредставление;
	Если ТолькоПросмотр Тогда
		
		СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Действие =
			?(ЗначениеЗаполнено(СтрокаКЗаполнению.ПаспортУчредителя), НСтр("ru = 'Открыть'"), "");
		СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Очистка = Новый Картинка;
		
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаКЗаполнению.ПаспортУчредителя) Тогда
			
			СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Действие = НСтр("ru = 'Открыть'");
			СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Очистка = БиблиотекаКартинок.ПолеВводаОчистить;
			
		Иначе
			
			СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Действие = НСтр("ru = 'Выбрать'");
			СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Очистка = Новый Картинка;
			
		КонецЕсли;
		
	КонецЕсли;
	СтрокаКЗаполнению.ДополнительныйФайл_ПаспортУчредителя_Описание = НСтр("ru = '?'");
	Элементы.ДополнительныйФайл_ПаспортУчредителя_Описание.Подсказка = ОписаниеПаспортаУчредителя.ПодробноеПредставление;
	
КонецПроцедуры

#КонецОбласти

#Область Руководитель

&НаСервере
Процедура ЗаписатьРуководителя()

	ЗаписатьФизическоеЛицо();
	
	Руководитель = ФизическоеЛицо.Ссылка;
	
	Если НЕ ИзменениеДанныхОрганизации.РуководительМодифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Руководитель) ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;

	// Записываем ответственное лицо.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата",        Объект.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|		&Дата,
	|		СтруктурнаяЕдиница = &Организация
	|			И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Период = Выборка.Период;
	Иначе
		Период = Организация.ДатаРегистрации;
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ОтветственноеЛицо",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	СтруктураРеквизитов.Вставить("ФизическоеЛицо",	    Руководитель);
	СтруктураРеквизитов.Вставить("Должность",           РуководительДолжность);
	СтруктураРеквизитов.Вставить("Период",	            Период);

	РегистрыСведений.ОтветственныеЛицаОрганизаций.ЗаписатьНаборЗаписейИсторииОтветственныеЛицаОрганизаций(
		Объект.Организация, СтруктураРеквизитов);
	
	ИзменениеДанныхОрганизации.РуководительМодифицированность = Ложь;

КонецПроцедуры

#КонецОбласти

#Область КонтактноеЛицо

&НаСервере
Процедура КонтактноеЛицоПоЗаявкеПриИзмененииНаСервере()

	Если КонтактноеЛицоПоЗаявке = "ДругойСотрудник" Тогда
		// Подставим по умолчанию данные текущего пользователя.
		ТекущийПользователь = Пользователи.ТекущийПользователь();

		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
			Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
				Объект.КонтактноеЛицо = ФизЛицоПользователя;
				ЗаполнитьДанныеКонтактногоЛица();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.КонтактноеЛицо = Неопределено;		
	КонецЕсли;
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтактногоЛица()

	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;

	Объект.ДолжностьКонтактногоЛица = УчетЗарплаты.ДолжностьФизическогоЛица(
		Объект.КонтактноеЛицо, Объект.Организация, Объект.Дата);

	// Проверим контакты из справочника физических лиц.
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.КонтактноеЛицо), , ВидыКИ);
	
	ТелефонМобильныйКонтактногоЛица = Неопределено;	
	ТелефонРабочийКонтактногоЛица = Неопределено;	

	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица Тогда
			ТелефонРабочийКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
		ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица Тогда
			ТелефонМобильныйКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
		ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица Тогда
			Объект.АдресЭПКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТелефонМобильныйКонтактногоЛица) Тогда
		Объект.ТелефонКонтактногоЛица = ТелефонМобильныйКонтактногоЛица;
	ИначеЕсли ЗначениеЗаполнено(ТелефонРабочийКонтактногоЛица) Тогда
		Объект.ТелефонКонтактногоЛица = ТелефонРабочийКонтактногоЛица;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполнения

&НаСервере
Функция ПроверитьЗаполнениеСтраницы(ИмяСтраницы)

	Если ТолькоПросмотр Тогда
		// Заполнение недоступной для заполнения заявки проверять не нужно.
		Возврат Истина;
	КонецЕсли;

	Если ИмяСтраницы = "Банки" Тогда
		ЗаписатьБанки(Объект);
	КонецЕсли;

	Если ПустаяСтрока(ИмяСтраницы) ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ ИмяСтраницы = "ЗаемщикЮЛ" Тогда
		ЗаписатьДополнительныеПоказатели(Объект);
	КонецЕсли;
	
	Возврат Документы.ЗаявкаНаКредит.ПроверитьЗаполнение(ЭтотОбъект, ИмяСтраницы);

КонецФункции

#КонецОбласти

#Область НавигацияПоСтраницам

&НаСервере
Процедура УстановитьВидимостьСтраницы(ОтображаемаяСтраница)

	// Чтобы не отрастали лишние скролл-бары по высоте из-за разного числа элементов
	// на разных страницах, оставляем видимость только у одной - отображаемой страницы.
	
	Для каждого СтраницаЗаявки Из Элементы.СтраницыПомощника.ПодчиненныеЭлементы Цикл
		СтраницаЗаявки.Видимость = (СтраницаЗаявки = ОтображаемаяСтраница);
	КонецЦикла;

	Элементы.СтраницыПомощника.ТекущаяСтраница  = ОтображаемаяСтраница;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийШагПомощника()
	
	НачатьСПервойСтраницы = ТолькоПросмотр ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
		И НЕ ЗначениеЗаполнено(Объект.СоставУчредителей) Тогда  
		// Поле сведений об учредителях юр.лица отсутствовало в прошлых версиях заявки, 
		// сейчас оно является обязательным для заполнения, но автоматически
		// однозначно определить его не может, т.к. остатки по 80 счету могут свести сводно.
		// Поэтому потребуем его заполнить на первой странице.
		НачатьСПервойСтраницы = Истина;
	КонецЕсли;

	Если НачатьСПервойСтраницы Тогда
		
		УстановитьВидимостьСтраницыНачало();
		
	Иначе
		
		ТекущийШагПомощника = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ДокументЗаявкаНаКредитТекущийШагПомощника"),
			Объект.Ссылка.УникальныйИдентификатор(),
			"");
		
		Если ТекущийШагПомощника = "Банки" Тогда
			
			УстановитьВидимостьСтраницыБанки();
			
		ИначеЕсли ТекущийШагПомощника = "Отчетность" Тогда
			
			ОбновитьДоступныеБанки(Ложь);
			УстановитьВидимостьСтраницыОтчетность();
			
		ИначеЕсли ТекущийШагПомощника = "РеквизитыЗаемщика" Тогда

			ОбновитьДоступныеБанки(Ложь);
			УстановитьВидимостьСтраницыРеквизитыЗаемщика();
			
		Иначе
			
			УстановитьВидимостьСтраницыНачало();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущийШагПомощника()
	
	Если ТолькоПросмотр ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ДокументЗаявкаНаКредитТекущийШагПомощника"),
		Объект.Ссылка.УникальныйИдентификатор(), НавигацияПараметрФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыНачало()

	УстановитьВидимостьСтраницы(Элементы.СтраницаНачало);
	
	// Назначить кнопку Далее кнопкой по умолчанию.
	Элементы.ДалееВыборБанков.КнопкаПоУмолчанию = Истина;
	// Активируем первый элемент на странице, чтобы из-за прокрутки не оказался за экраном.
	Если ИспользоватьНесколькоОрганизаций Тогда
		ТекущийЭлемент = Элементы.Организация;
	Иначе
		ТекущийЭлемент = Элементы.ДалееВыборБанков;
	КонецЕсли;
	
	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	УстановитьСвойстваРеквизитовНачало();
	
	РазместитьНавигацию("Начало");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыБанки()

	УстановитьВидимостьСтраницы(Элементы.СтраницаБанки);
	// Включить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ;
	// Назначить кнопку Далее кнопкой по умолчанию.
	Элементы.ДалееОтчетность.КнопкаПоУмолчанию = Истина;

	// Активируем первый элемент на странице, чтобы из-за прокрутки не оказался за экраном.
	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит") Тогда
		ТекущийЭлемент = Элементы.СуммаКредита;
	Иначе
		ТекущийЭлемент = Элементы.ТипПредметаЛизинга; 
	КонецЕсли;
	
	ЗаполнитьСписокТиповПредметовЛизинга();
	
	ОтметитьВсеДоступныеБанки = (Объект.Банки.Количество() = 0);
	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)
		И НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		// Это первый переход на страницу банков, подберем сразу подходящие условия.
		ПредложитьУсловияСделки();
	КонецЕсли;
	
	ОбновитьДоступныеБанки(ОтметитьВсеДоступныеБанки);
	
	РазместитьНавигацию("Банки");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыОтчетность()

	УстановитьВидимостьСтраницы(Элементы.СтраницаОтчетность);
	Элементы.ДалееРеквизитыЗаемщика.КнопкаПоУмолчанию = Истина;

	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	ОбновитьОтчетность();

	РазместитьНавигацию("Отчетность");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыРеквизитыЗаемщика()

	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда	
		
		НастроитьЭлементыКонтактнойИнформацииИП();
		
		УстановитьВидимостьСтраницы(Элементы.СтраницаЗаемщикИП);
		Элементы.ПодписатьИОтправитьИП.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ФамилияИП;
		
		ПрочитатьРеквизитыИП();
		
		ПрочитатьКонтактнуюИнформациюОрганизации();

	Иначе
		
		НастроитьЭлементыКонтактнойИнформацииЮЛ();
		
		УстановитьВидимостьСтраницы(Элементы.СтраницаЗаемщикЮЛ);
		Элементы.ПодписатьИОтправитьЮЛ.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.НаименованиеСокращенное;
		
		ПрочитатьРеквизитыРуководителя();
		
		ЗаполнитьУчредителей();
		
	КонецЕсли;
	РуководительОтсутствует = Не ЗначениеЗаполнено(Руководитель) И Не ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель);
	
	НастроитьДополнительныеПоказатели();
	НастроитьДополнительныеФайлы();
	
	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	РазместитьНавигацию("РеквизитыЗаемщика");
	
	СохранитьТекущийШагПомощника();
	
	ПрочитатьСистемуНалогообложения();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыОжидания(ТекстПояснения)

	УстановитьВидимостьСтраницы(Элементы.СтраницаОжидание);
	Элементы.НадписьОжиданиеПояснение.Заголовок = ТекстПояснения;

	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
КонецПроцедуры

&НаСервере
Процедура НазадНачалоНаСервере()
	
	ЗаписатьБанки(Объект); // сохраним отметки банков
	
	УстановитьВидимостьСтраницыНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗамерВремениПодборБанков()

	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		// Сведения о банках еще не обновлены, необходимо сначала дождаться завершения фонового задания.
		Возврат;
	КонецЕсли;

	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаЛизинг") Тогда
		КлючеваяОперация = "ПодборБанковЗаявкаНаЛизинг";
	Иначе
		КлючеваяОперация = "ПодборБанковЗаявкаНаКредит";
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаСервере
Процедура ДалееВыборБанковНаСервере()

	Если НЕ ПроверитьЗаполнениеСтраницы("Начало") Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		// В настоящее время еще выполняется фоновое задание по обновлению данных из сервиса,
		// дождемся его завершения и потом только перейдем к шагу выбора банков.
		УстановитьВидимостьСтраницыОжидания(НСтр("ru = 'Поиск кредитных предложений'"));
		ПерейтиКСтраницеБанковПослеОбновления = Истина;
	Иначе
		УстановитьВидимостьСтраницыБанки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗамерВремениПодборОтчетности()

	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаЛизинг") Тогда
		КлючеваяОперация = "ПодборОтчетностиЗаявкаНаЛизинг";
	Иначе
		КлючеваяОперация = "ПодборОтчетностиЗаявкаНаКредит";
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаСервере
Процедура ДалееОтчетностьНаСервере()

	ЗаписатьБанки(Объект);

	УстановитьВидимостьСтраницыОтчетность();

КонецПроцедуры

&НаСервере
Функция ИмяПомощника()

	Возврат "ЗаявкаНаКредит";

КонецФункции

&НаСервере
Функция НавигацияПомощника()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаНачало(1));
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаБанки(2));
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаОтчетность(3));
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(4), СтруктураШагаРеквизитыЗаемщика(4));
	
	Возврат СтруктураНавигации;
	
КонецФункции

&НаСервере
Функция СтруктураШагаНачало(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Начало'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Начало";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Функция СтруктураШагаБанки(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Партнеры сервиса'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Банки";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Функция СтруктураШагаРеквизитыЗаемщика(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Реквизиты'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "РеквизитыЗаемщика";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Функция СтруктураШагаОтчетность(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Отчетность'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Отчетность";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Процедура РазместитьНавигацию(ИмяТекущейСтраницы)

	НавигацияПараметрФормы = ИмяТекущейСтраницы;

	СтруктураНавигацииПомощника = НавигацияПомощника();
	НавигацияПомощников.РазместитьНавигацию(ЭтотОбъект, СтруктураНавигацииПомощника, Параметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеШага(ИмяШага)
	
	Если ИмяШага = "Шаг1" Тогда
		УстановитьВидимостьСтраницыНачало();
	ИначеЕсли ИмяШага = "Шаг2" Тогда
		УстановитьВидимостьСтраницыБанки();
	ИначеЕсли ИмяШага = "Шаг3" Тогда
		УстановитьВидимостьСтраницыОтчетность();
	ИначеЕсли ИмяШага = "Шаг4" Тогда
		УстановитьВидимостьСтраницыРеквизитыЗаемщика();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийВид

&НаСервере
Процедура ИнициализироватьФорму()

	УстановитьФункциональныеОпцииФормы();

	// Настроим элементы на форме в зависимости от вида сервиса.
	Это1СКредит = (Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	Это1СЛизинг = (Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг);
	
	// Начальная страница
	Элементы.ДекорацияЗаголовок.Заголовок = СтрШаблон(Элементы.ДекорацияЗаголовок.Заголовок, Объект.СервисОбменаСБанками);

	Элементы.ОписаниеСервисаКредитТекст1.Видимость = Это1СКредит;
	Элементы.ОписаниеСервисаЛизингТекст1.Видимость = Это1СЛизинг;
	
	Элементы.УсловияСервисаКредитТекст.Видимость = Это1СКредит;
	Элементы.УсловияСервисаЛизингТекст.Видимость = Это1СЛизинг;

	Если Это1СКредит Тогда
		Элементы.ОписаниеСервисаИллюстрация1.Картинка = БиблиотекаКартинок.ЗаявкаНаКредит;
		Элементы.ОписаниеСервисаИллюстрация2.Картинка = БиблиотекаКартинок.КредитноеРешение;
	Иначе
		Элементы.ОписаниеСервисаИллюстрация1.Картинка = БиблиотекаКартинок.ЗаявкаНаЛизингАвтомобили;
		Элементы.ОписаниеСервисаИллюстрация2.Картинка = БиблиотекаКартинок.ЗаявкаНаЛизингОборудование;
	КонецЕсли;

	// Страница банки
	Элементы.ГруппаКредитСуммаСрок.Видимость = Это1СКредит;
	Элементы.ГруппаЛизингСуммаСрок.Видимость = Это1СЛизинг;

	Если Это1СЛизинг Тогда
		// Для лизинга исключим упоминание про расчетный счет.
		Элементы.НадписьБанкиПояснение.Заголовок = 
			НСтр("ru = 'Заявку можно отправить сразу нескольким партнерам. Отметьте, кому вы хотите отправить заявку:'");
	КонецЕсли;

	// Страница реквизиты ИП
	Элементы.ГруппаПредметЛизингаИП.Видимость = Это1СЛизинг;
	
	// Страница реквизиты ЮЛ
	Элементы.ГруппаПредметЛизингаЮЛ.Видимость = Это1СЛизинг;
	

	// Первоначально на форме 10 предопределенных ячеек для отображения доступных/недоступных банков.
	// В дальнейшем их число будет программно увеличено, если банков для отображения окажется больше.
	ДоступныйБанкМаксКоличество  = 10;
	ДругойБанкМаксКоличество  = 10;
	
	// Покажем организацию в виде гиперссылки на форме,
	// поле ввода Организация будет скрыто автоматически по ФО.
	Элементы.ОднаОрганизация.Видимость = НЕ ИспользоватьНесколькоОрганизаций;
		
	ГражданствоПредставление = Справочники.СтраныМира.Россия; // Значение по умолчанию для незаполненного гражданства.
	
	// Подписание и отправка доступны только для заявки, которую еще не отправляли, и у пользователя есть права на это.
	Элементы.ПодписатьИОтправитьИП.Доступность = НЕ ТолькоПросмотр; 
	Элементы.ПодписатьИОтправитьЮЛ.Доступность = НЕ ТолькоПросмотр;
	
	// Выгрузка заявки доступна только при наличии прав на изменение.
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаКредит);
	Элементы.СохранитьФайлыНаДискЮЛ.Доступность = ЕстьПравоИзменения;
	Элементы.СохранитьФайлыНаДискИП.Доступность = ЕстьПравоИзменения;
	
	НастроитьСлужебныеРеквизитыОрганизации();
	НастроитьСлужебныеРеквизитыФизЛица();
	
	// Запоминаем значения реквизитов до изменения их интерактивно пользователем.
	СуммаДокументаДоИзменения = Объект.СуммаДокумента;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыКонтактнойИнформацииЮЛ()
	
	ИмяЭлементаДляРазмещения = "КонтактнаяИнформацияРуководителя";
	
	Если Не ЗначениеЗаполнено(ПараметрыКонтактнойИнформации)
	 Или Не ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
		
		// Инициализируем только адрес эл.почты и телефоны, представленные на форме реквизитами, созданными для них.
		// Остальные поля контактной информации не отображаются на форме.
		// Это обеспечивается последним параметром (ОтложеннаяИнициализация) за счет того,
		// что для них никогда не вызывается фактическая инициализация.
		
		ОбъектДляРазмещения = ФизическоеЛицо;
		
		РазмещеныНаФорме = Новый Соответствие;
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, Истина);
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Истина);
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, Истина);
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, Истина);
		
		ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
		ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
		ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме         = РазмещеныНаФорме;
		ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация  = Истина;
		
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ОбъектДляРазмещения, ПараметрыРазмещенияКонтактнойИнформации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыКонтактнойИнформацииИП()
	
	ИмяЭлементаДляРазмещения = "КонтактнаяИнформацияИП";
	
	Если Не ЗначениеЗаполнено(ПараметрыКонтактнойИнформации)
	 Или Не ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда

		// Инициализируем только адрес эл.почты и телефоны, представленные на форме реквизитами, созданными для них.
		// Остальные поля контактной информации не отображаются на форме.
		// Это обеспечивается последним параметром (ОтложеннаяИнициализация) за счет того,
		// что для них никогда не вызывается фактическая инициализация.
		
		ОбъектДляРазмещения = Организация;
		
		РазмещеныНаФорме = Новый Соответствие;
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Истина);
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Истина);
		
		ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
		ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
		ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме         = РазмещеныНаФорме;
		ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация  = Истина;
		
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ОбъектДляРазмещения, ПараметрыРазмещенияКонтактнойИнформации);
		
	КонецЕсли;
	
	ИмяЭлементаДляРазмещения = "КонтактнаяИнформацияФЛИП";
	
	Если Не ЗначениеЗаполнено(ПараметрыКонтактнойИнформации)
	 Или Не ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
	 
	 	ОбъектДляРазмещения = ФизическоеЛицо;

		РазмещеныНаФорме = Новый Соответствие;
		РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, Истина);
		
		ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
		ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
		ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме         = РазмещеныНаФорме;
		ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация  = Истина;
		
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ОбъектДляРазмещения, ПараметрыРазмещенияКонтактнойИнформации);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовок(Объект)

	Если ЗначениеЗаполнено(Объект.СуммаДокумента) И ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		Результат = СтрШаблон(НСтр("ru = 'Заявка %1 %2 на %3 от %4'"),
			Объект.СервисОбменаСБанками,
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(Объект.СуммаДокумента),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСрокаКредита(Объект.СрокКредита),
			Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		Результат = СтрШаблон(НСтр("ru = 'Заявка %1 от %2'"),
			Объект.СервисОбменаСБанками,
			Формат(Объект.Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УправлениеФормой()

	Заголовок = СформироватьЗаголовок(Объект);

	ЭтоФизЛицо = (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаНачало Тогда
		// Состав учредителей для юр.лица показываем всегда, чтобы пользователь 
		// мог проверить и подтвердить правильность их определения, т.к. от них зависят стоп-факторы некоторых банков.
		Элементы.СоставУчредителей.Видимость = НЕ ЭтоФизЛицо;
	
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаемщикИП Тогда
		// Подробная информация о заемщике ИП.
		
		// Вид документа и раздельный ввод серии и номера паспорта ИП показываем только в том случае,
		// если страна гражданства не Россия или вид документа не паспорт РФ.
		Элементы.ПаспортныеДанныеВидДокументаИП.Видимость = 
			НЕ (ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Россия)
				ИЛИ НЕ (ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ)
				ИЛИ РуководительОтсутствует;

		Элементы.СерияНомерПаспортаИП.Видимость                = НЕ Элементы.ПаспортныеДанныеВидДокументаИП.Видимость;
		Элементы.ГруппаСерияНомерПаспортаРаздельноИП.Видимость = Элементы.ПаспортныеДанныеВидДокументаИП.Видимость;
		
		// Контактное лицо отображаем, если оно отличается от самого ИП.
		Элементы.ГруппаДругоеКонтактноеЛицоИП.Видимость = (КонтактноеЛицоПоЗаявке = "ДругойСотрудник");
		
		// Выбирать сертификат имеет смысл, если все поля, используемые при отборе заполнены.
		УстановитьСвойстваСертификата(ЭтотОбъект);

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаемщикЮЛ Тогда
		// Подробная информация о заемщике ЮЛ.

		// Информацию об учредителях показываем, если банкам требуется информация о них,
		// и сам руководитель не является единственным учредителем.
		// На текущий момент поддерживается передача информации об учредителях-физических лицах.
		Элементы.Учредители.Видимость = Объект.ТребуютсяДанныеУчредителей
			И (Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ФизическиеЛица
				ИЛИ Объект.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.ЮридическиеИФизическиеЛица);
		
		// Вид документа и раздельный ввод серии и номера паспорта руководителя показываем только в том случае,
		// если страна гражданства не Россия или вид документа не паспорт РФ.
		Элементы.ПаспортныеДанныеВидДокументаРуководителя.Видимость = 
			НЕ (ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Россия)
				ИЛИ НЕ (ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ)
				ИЛИ РуководительОтсутствует;

		Элементы.СерияНомерПаспортаРуководителя.Видимость                = НЕ Элементы.ПаспортныеДанныеВидДокументаРуководителя.Видимость;
		Элементы.ГруппаСерияНомерПаспортаРаздельноРуководителя.Видимость = Элементы.ПаспортныеДанныеВидДокументаРуководителя.Видимость;
		
		// Контактное лицо отображаем, если оно отличается от самого руководителя.
		Элементы.ГруппаДругоеКонтактноеЛицоЮЛ.Видимость = (КонтактноеЛицоПоЗаявке = "ДругойСотрудник");
		
		// Выбирать сертификат имеет смысл, если все поля, используемые при отборе заполнены.
		УстановитьСвойстваСертификата(ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИНН(Форма)

	Объект         = Форма.Объект;
	Организация    = Форма.Организация;
	ФизическоеЛицо = Форма.ФизическоеЛицо;

	Форма.ПояснениеНекорректногоИНН = Новый ФорматированнаяСтрока(ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьИНН(
		Организация.ИНН,
		,
		Организация.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")));

	Форма.ПояснениеНекорректногоИННРуководителя = Новый ФорматированнаяСтрока(
		ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьИНН(ФизическоеЛицо.ИНН, , Ложь));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутьВИнтерфейсеКСпискуЗаявок(Знач СервисОбменаСБанками)

	Это1СКредит = (СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);

	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Если Это1СКредит Тогда
			Возврат НСтр("ru = '""Деньги - 1С:Кредит""'");
		Иначе
			Возврат НСтр("ru = '""Деньги - 1С:Лизинг""'");
		КонецЕсли;
	Иначе	
		Если Это1СКредит Тогда
			Возврат НСтр("ru = '""Банк и касса - Финансы - 1С:Кредит""'");
		Иначе
			Возврат НСтр("ru = '""Банк и касса - Финансы - 1С:Лизинг""'");
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Табличное поле Отчетность.
	// Если банк один, то выводим сразу его название.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОтчетностьОдинБанк");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Отчетность.КоличествоБанков", ВидСравненияКомпоновкиДанных.Больше, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Если банков несколько, то показываем гиперссылку для открытия окна
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОтчетностьНесколькоБанков");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Отчетность.КоличествоБанков", ВидСравненияКомпоновкиДанных.Меньше, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// Если банков несколько, то показываем гиперссылку для открытия окна
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДополнительныйФайл_ПаспортУчредителя_Действие");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Учредители.ПаспортУчредителя", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПредметовЛизинга()

	// Заполнение списка имеет смысл только для заявки на лизинг.
	Если Объект.СервисОбменаСБанками <> Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ТипПредметаЛизинга.СписокВыбора;
	
	Если СписокВыбора.Количество() > 0 Тогда
		// Список уже заполнен.
		Возврат;
	КонецЕсли;
	
	// Если открыта ранее отправленная заявка, то получаем для нее все типы предметов лизинга, включая архивные,
	// т.к. на момент отправки они могли быть актуальны.
	ТипыПредметовЛизинга = ЗаявкиНаКредит.ТипыПредметовЛизинга(ТолькоПросмотр);
	Для каждого ЭлементСписка Из ТипыПредметовЛизинга Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если НЕ ТолькоПросмотр И СписокВыбора.НайтиПоЗначению(Объект.ТипПредметаЛизинга) = Неопределено Тогда
		// Сбросим указанный в заявке тип предмета, если он более недоступен для выбора.
		Объект.ТипПредметаЛизинга = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Пересчеты

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСуммыДокумента(Форма)

	Объект = Форма.Объект;

	Форма.Заголовок = СформироватьЗаголовок(Объект);
	
	Если Объект.СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаЛизинг") Тогда
		// Рассчитаем новую сумму аванса, сохранив предыдущий процент аванса.
		ДоляАванса = ?(Форма.СуммаДокументаДоИзменения <> 0, Объект.СуммаАванса / Форма.СуммаДокументаДоИзменения, 0);
		Объект.СуммаАванса = Объект.СуммаДокумента * ДоляАванса;
	КонецЕсли;
	
	Форма.СуммаДокументаДоИзменения = Объект.СуммаДокумента;
	
КонецПроцедуры

#КонецОбласти

#Область Банки

&НаСервере
Функция СведенияОЗаемщике()

	// Заполним сведения о заемщике для подбора банков по текущим условиям.
	Результат = Документы.ЗаявкаНаКредит.НовыеСведенияОЗаемщике();
	Результат.СервисОбменаСБанками      = Объект.СервисОбменаСБанками;
	Результат.Организация               = Организация.Ссылка;
	Результат.ЮридическоеФизическоеЛицо = Организация.ЮридическоеФизическоеЛицо;

	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Результат.Нерезидент = ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна)
			И ГражданствоФизическихЛиц.Страна <> Справочники.СтраныМира.Россия;

		Результат.ДатаРождения = ФизическоеЛицо.ДатаРождения;
	Иначе
		Результат.Нерезидент  = Организация.ИностраннаяОрганизация;
	КонецЕсли;

	Результат.СоставУчредителей = Объект.СоставУчредителей;
	Результат.ДатаРегистрации   = Организация.ДатаРегистрации;
	Результат.КодОКВЭД2         = Организация.КодОКВЭД2;
	Результат.КодОКОПФ          = Организация.КодОКОПФ;
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Организация.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Объект.Дата);
	Если ЗначениеЗаполнено(КонтактнаяИнформацияОбъекта) Тогда
		Результат.ЮрАдресОрганизации = КонтактнаяИнформацияОбъекта.Значение;
	КонецЕсли;
	
	ПоказателиДеятельности = УниверсальныйОбменСБанкамиФормы.ПоказателиДеятельности(Организация.Ссылка, Объект.Дата);
	Результат.ДатаФактическогоНачалаВеденияБизнеса    = ПоказателиДеятельности.ДатаФактическогоНачалаВеденияБизнеса;
	Результат.СреднемесячноеПоступлениеНаСчет         = ПоказателиДеятельности.СреднемесячноеПоступлениеНаСчет;
	Результат.МинимальноеЕжемесячноеПоступлениеНаСчет = ПоказателиДеятельности.МинимальноеЕжемесячноеПоступлениеНаСчет;
	Результат.ДатаНачалаУчетаВПрограмме               = ПоказателиДеятельности.ДатаНачалаУчетаВПрограмме;
	Результат.СуммаВыручки                            = ПоказателиДеятельности.СуммаВыручки;
	
	Результат.ПодключенДокументооборотСКонтролирующимОрганом =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация.Ссылка, Перечисления.ТипыКонтролирующихОрганов.ФНС);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ИнициализироватьБанки()

	Если БанкиИнициализированы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(БанкиАдресХранилища) Тогда
		// Удалим предыдущую информацию о банках, если она есть.
		УдалитьИзВременногоХранилища(БанкиАдресХранилища);
		БанкиАдресХранилища = "";
	КонецЕсли;
	
	// Получаем банки-партнеры сервиса.
	// Если заявка уже была отправлена ранее и теперь доступна только на просмотр,
	// то выбираем информацию о всех банках вне зависимости от их активности,
	// т.к. ранее они могли быть активны в момент создания заявки.
	// Для еще не отправленной заявки показываем только активные банки.
	СведенияОБанках = Документы.ЗаявкаНаКредит.СведенияОБанках(СведенияОЗаемщике(), Объект.Дата, ТолькоПросмотр);
	
	Если ТолькоПросмотр Тогда

		// Если открыта форма ранее отправленной заявки, которая теперь доступна только для чтения,
		// то может быть, что в момент ее отправки какие-то банки были доступны, а сейчас уже нет,
		// либо их условия кредитования поменялись.
		// Поэтому добавляем банки из табличной части документа, чтобы на форме их все равно показать.
		
		Если СведенияОБанках.Количество() > 0 Тогда
			МаксПорядокСортировкиБанка = СведенияОБанках[СведенияОБанках.Количество() - 1].ПорядокСортировкиБанка;
		Иначе
			МаксПорядокСортировкиБанка = 0;
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Объект.Банки Цикл

			СведенияОБанке = СведенияОБанках.Найти(СтрокаТЧ.Банк, "Банк");
			Если СведенияОБанке = Неопределено Тогда
				СведенияОБанке      = СведенияОБанках.Добавить();
				СведенияОБанке.Банк = СтрокаТЧ.Банк;

				// Добавляем в конец общего списка.
				МаксПорядокСортировкиБанка = МаксПорядокСортировкиБанка + 1;
				
				СведенияОБанке.ПорядокСортировки = 1;
				СведенияОБанке.МаксПорядокСортировкиБанка = МаксПорядокСортировкиБанка;
				
				СведенияОБанке.СтопФакторыПройдены = Истина;

				// Суммы и сроки подставляем те, которые указаны в самой заявке, т.к. точные сейчас уже неизвестны,
				// а ранее заявка проходила по условиям банка.				
				СведенияОБанке.МинСуммаКредита     = Объект.СуммаДокумента;
				СведенияОБанке.МаксСуммаКредита    = Объект.СуммаДокумента;
				
				СведенияОБанке.МинСрокКредита      = Объект.СрокКредита;
				СведенияОБанке.МаксСрокКредита     = Объект.СрокКредита;
				
				СведенияОБанке.ИдентификаторКредитногоПродукта = СтрокаТЧ.ИдентификаторКредитногоПродукта;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем наименование банков.
		Документы.ЗаявкаНаКредит.ЗаполнитьНаименованияБанков(СведенияОБанках);
		
	КонецЕсли;
	
	// Добавим дополнительную колонку для связи с элементами формы.
	// Номер группы в области доступных банков, в которой выводится логотип текущего банка.
	СведенияОБанках.Колонки.Добавить("НомерГруппы",  ОбщегоНазначения.ОписаниеТипаЧисло(4));
	
	// Признак того, что пользователь явно снял отметку у банка, чтобы не предлагать при изменениях условий.
	СведенияОБанках.Колонки.Добавить("ОтметкаСнятаПользователем", Новый ОписаниеТипов("Булево")); 
	
	// Запоминаем изменения в таблице сведений о банках.
	ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках);

	БанкиИнициализированы    = Истина;

КонецПроцедуры

&НаСервере
Функция СведенияОБанках()

	ИнициализироватьБанки();
	
	Возврат ПолучитьИзВременногоХранилища(БанкиАдресХранилища);

КонецФункции

&НаСервере
Процедура ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках)

	Документы.ЗаявкаНаКредит.ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках, УникальныйИдентификатор);
	
	// Поместим обновленную таблицу со сведениями о банках обратно во временное хранилище.
	ПоместитьВоВременноеХранилище(СведенияОБанках, БанкиАдресХранилища);

КонецПроцедуры

&НаСервере
Процедура ПредложитьУсловияСделки()

	СведенияОБанках = СведенияОБанках();

	Это1СЛизинг = (Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг);

	// Отбираем условия так, чтобы можно было отправить заявку в наибольшее количество банков.
	ОченьБольшоеЧисло = 999999999999;
	
	ОптимальнаяМаксСумма         = ОченьБольшоеЧисло;
	ОптимальныйМаксСрок          = ОченьБольшоеЧисло;
	ОптимальныйМаксПроцентАванса = ОченьБольшоеЧисло;
	
	ОптимальнаяМинСумма         = 0;
	ОптимальныйМинСрок          = 0;
	ОптимальныйМинПроцентАванса = 0;
	
	ЕстьДоступныеПредложения  = Ложь;
	
	// Находим максимум из минимумов и минимум из максимумов
	Для каждого СтрокаБанка Из СведенияОБанках Цикл

		Если НЕ СтрокаБанка.СтопФакторыПройдены Тогда
			// Не учитываем банк, если заемщик не удовлетворяет его стоп-факторам.
			Продолжить;
		КонецЕсли;
		
		// Сумма
		Если ЗначениеЗаполнено(СтрокаБанка.МинСуммаКредита) Тогда
			ОптимальнаяМинСумма = Макс(ОптимальнаяМинСумма, СтрокаБанка.МинСуммаКредита);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаБанка.МаксСуммаКредита) Тогда
			ОптимальнаяМаксСумма = Мин(ОптимальнаяМаксСумма, СтрокаБанка.МаксСуммаКредита);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаБанка.МаксСуммаЗаявкиСУчетомВыручки) Тогда
			ОптимальнаяМаксСумма = Мин(ОптимальнаяМаксСумма, СтрокаБанка.МаксСуммаЗаявкиСУчетомВыручки);
		КонецЕсли;
		
		// Срок
		Если ЗначениеЗаполнено(СтрокаБанка.МинСрокКредита) Тогда
			ОптимальныйМинСрок = Макс(ОптимальныйМинСрок, СтрокаБанка.МинСрокКредита);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаБанка.МаксСрокКредита) Тогда
			ОптимальныйМаксСрок = Мин(ОптимальныйМаксСрок, СтрокаБанка.МаксСрокКредита);
		КонецЕсли;
		
		// Специфические поля для лизинга.
		Если Это1СЛизинг Тогда
			// Аванс
			Если ЗначениеЗаполнено(СтрокаБанка.МинПроцентАванса) Тогда
				ОптимальныйМинПроцентАванса = Макс(ОптимальныйМинПроцентАванса, СтрокаБанка.МинПроцентАванса);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаБанка.МаксПроцентАванса) Тогда
				ОптимальныйМаксПроцентАванса = Мин(ОптимальныйМаксПроцентАванса, СтрокаБанка.МаксПроцентАванса);
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьДоступныеПредложения = Истина;
		
	КонецЦикла;
	
	Если НЕ ЕстьДоступныеПредложения Тогда
		Возврат;
	КонецЕсли;

	Если ОптимальнаяМаксСумма <> ОченьБольшоеЧисло Тогда
		Объект.СуммаДокумента = ОптимальнаяМаксСумма;
	ИначеЕсли ОптимальнаяМинСумма <> 0 Тогда
		Объект.СуммаДокумента = ОптимальнаяМинСумма;
	КонецЕсли;
	
	Если ОптимальныйМаксСрок <> ОченьБольшоеЧисло Тогда
		Объект.СрокКредита = ОптимальныйМаксСрок;
	ИначеЕсли ОптимальныйМинСрок <> 0 Тогда
		Объект.СрокКредита = ОптимальныйМинСрок;
	КонецЕсли;
	
	// Специфические поля для лизинга.
	Если Это1СЛизинг Тогда

		ПредложитьТипПредметаЛизинга(СведенияОБанках);

		// По умолчанию предлагаем минимально допустимый размер аванса из предложений всех банков.
		ПроцентАванса = 0;

		Если ОптимальныйМинПроцентАванса <> 0 Тогда
			ПроцентАванса = ОптимальныйМинПроцентАванса;
		ИначеЕсли ОптимальныйМаксПроцентАванса <> ОченьБольшоеЧисло Тогда
			ПроцентАванса = ОптимальныйМаксПроцентАванса;
		КонецЕсли;
		
		Объект.СуммаАванса = Объект.СуммаДокумента * ПроцентАванса / 100;
		
	КонецЕсли;
	
	// Запоминаем сумму до изменения, чтобы использовать ее при последующих пересчетах.
	СуммаДокументаДоИзменения = Объект.СуммаДокумента;

КонецПроцедуры

&НаСервере
Процедура ПредложитьТипПредметаЛизинга(СведенияОБанках)

	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(5);

	СтатистикаПоТипамПредметовЛизинга = Новый ТаблицаЗначений();
	СтатистикаПоТипамПредметовЛизинга.Колонки.Добавить("ТипПредметаЛизинга", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СтатистикаПоТипамПредметовЛизинга.Колонки.Добавить("ИсходныйПорядокСортировки",  ТипЧисло);
	СтатистикаПоТипамПредметовЛизинга.Колонки.Добавить("Количество",         ТипЧисло);

	СписокВыбора = Элементы.ТипПредметаЛизинга.СписокВыбора;
	
	Для Счетчик = 0 По СписокВыбора.Количество() - 1 Цикл
		ЭлементСписка = СписокВыбора[Счетчик];
		СтрокаСтатистики = СтатистикаПоТипамПредметовЛизинга.Добавить();
		СтрокаСтатистики.ТипПредметаЛизинга = ЭлементСписка.Значение;
		СтрокаСтатистики.ИсходныйПорядокСортировки = Счетчик;
	КонецЦикла;
	
	СтатистикаПоТипамПредметовЛизинга.Индексы.Добавить("ТипПредметаЛизинга");

	Для каждого СтрокаБанка Из СведенияОБанках Цикл

		// В зависимости от того, в какой список (белый или черный) входит тип предмета лизинга, увеличиваем или уменьшаем его популярность.
		Если СтрокаБанка.ТипыПредметовЛизинга.Количество() > 0 Тогда
			Для каждого ТекущийТипПредметаЛизинга Из СтрокаБанка.ТипыПредметовЛизинга Цикл

				Если ТекущийТипПредметаЛизинга = "Прочее" Тогда
					// Не учитываем тип "Прочее".
					Продолжить;
				КонецЕсли;
			
				СтрокаСтатистики = СтатистикаПоТипамПредметовЛизинга.Найти(ТекущийТипПредметаЛизинга, "ТипПредметаЛизинга");
				Если СтрокаСтатистики = Неопределено Тогда
					СтрокаСтатистики = СтатистикаПоТипамПредметовЛизинга.Добавить();
					СтрокаСтатистики.ТипПредметаЛизинга = ТекущийТипПредметаЛизинга;
				КонецЕсли;
				
				Если СтрокаБанка.БелыйСписокТиповПредметовЛизинга Тогда
					СтрокаСтатистики.Количество = СтрокаСтатистики.Количество + 1;
				Иначе
					СтрокаСтатистики.Количество = СтрокаСтатистики.Количество - 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// У банка нет ограничений по типа, добавляем 1 ко всем строкам.
			Для каждого СтрокаСтатистики Из СтатистикаПоТипамПредметовЛизинга Цикл
				СтрокаСтатистики.Количество = СтрокаСтатистики.Количество + 1;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	// Выделяем наиболее частотный тип предмета лизинга, если его нет, то первый в списке.
	ВыделенныйТипПредметаЛизинга = ?(СписокВыбора.Количество() > 0 , СписокВыбора[0].Значение, "");
	Если СтатистикаПоТипамПредметовЛизинга.Количество() > 0 Тогда
		СтатистикаПоТипамПредметовЛизинга.Сортировать("Количество УБЫВ, ИсходныйПорядокСортировки", Новый СравнениеЗначений);
		ПерваяСтрока = СтатистикаПоТипамПредметовЛизинга[0];
		Если ПерваяСтрока.Количество <> 0 Тогда
			Если СписокВыбора.НайтиПоЗначению(ПерваяСтрока.ТипПредметаЛизинга) <> Неопределено Тогда
				ВыделенныйТипПредметаЛизинга = ПерваяСтрока.ТипПредметаЛизинга;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Объект.ТипПредметаЛизинга = ВыделенныйТипПредметаЛизинга;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеБанкиНаКлиенте()

	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
		// Пока не заполнены сумма и срок кредита, не перестраиваем список доступных банков.
		Возврат;
	КонецЕсли;

	НачатьЗамерВремениПодборБанков();

	ОбновитьДоступныеБанки(Истина);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеБанки(ОтметитьДоступныеБанки)
	
	СведенияОБанках = СведенияОБанках();
	
	КоличествоБанков = 0;
	КоличествоДругихБанков = 0;
	
	БанкиДляЗагрузкиЛоготипов = Новый Массив;
	
	ОбработанныеБанки = Новый Массив;
	
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		// Подсчитаем количество доступных и других банков.
		Если БанкДоступен(СтрокаТаблицы) Тогда
			Если ОбработанныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
				ОбработанныеБанки.Добавить(СтрокаТаблицы.Банк);
			Иначе
				Продолжить; // Если банк был уже посчитан, больше не считаем его.
			КонецЕсли;
			
			КоличествоБанков = КоличествоБанков + 1;
		Иначе
			Если ОбработанныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоДругихБанков = КоличествоДругихБанков + 1;
		КонецЕсли;
		
		// Догрузим недостающие логотипы.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АдресЛоготипа) Тогда
			БанкиДляЗагрузкиЛоготипов.Добавить(СтрокаТаблицы.Банк);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьНедостающиеГруппыБанков("ДоступныйБанк", КоличествоБанков);
	ДобавитьНедостающиеГруппыБанков("ДругойБанк", КоличествоДругихБанков);
	
	Если БанкиДляЗагрузкиЛоготипов.Количество() > 0 Тогда
		ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках);
	КонецЕсли;
	
	ОтобразитьДоступныеБанки(СведенияОБанках, ОтметитьДоступныеБанки);
	ОтобразитьДругиеБанки(СведенияОБанках);
	
	// Отобразим сообщение, что ни один банк не найден, если доступных банков нет.
	Элементы.ГруппаБанкиПредложенияНеНайдены.Видимость = КоличествоБанков = 0
		ИЛИ ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса);

	Если СведенияОБанках.Количество() = 0 ИЛИ ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса)  Тогда
		// Если вообще не найден ни один банк, вероятно, проблема с доступностью сервиса.  
		Если ОшибкаАвторизацииПоЛогину Тогда
				
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при авторизации по логину ИТС: %1
                                            |Проверьте правильность указания пользователя и пароля.'"); 
			ТекстПредупреждения = СтрШаблон(ШаблонСообщенияОбОшибке, ОписаниеОшибкиОбновленияДанныхСервиса);
			Элементы.НадписьПредложенияБанковНеНайдены.Заголовок = ТекстПредупреждения;     
			
		Иначе

			Элементы.НадписьПредложенияБанковНеНайдены.Заголовок = 
				УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(ОписаниеОшибкиОбновленияДанныхСервиса);   
				
		КонецЕсли;
	Иначе
		Элементы.НадписьПредложенияБанковНеНайдены.Заголовок = 
			НСтр("ru = 'Подходящие предложения не найдены. Попробуйте изменить сумму и/или срок заявки.'");
	КонецЕсли;
	
	Элементы.ДалееРеквизитыЗаемщика.Доступность = КоличествоБанков > 0;
	
	УникальныеБанки = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОБанках, "Банк", Истина);
	
	Элементы.КоличествоБанков.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Всего партнеров сервиса: '"),
		Новый ФорматированнаяСтрока(Строка(УникальныеБанки.Количество()), Новый Шрифт(,, Истина)),
		НСтр("ru = ', из них готовы рассмотреть заявку: '"),
		Новый ФорматированнаяСтрока(Строка(КоличествоБанков), Новый Шрифт(,, Истина)),
		"."
	);
	
	// Запоминаем изменения в таблице сведений о банках.
	ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДоступныеБанки(СведенияОБанках, ОтметитьДоступныеБанки)
	
	НомерГруппы = 0;
	ОтборБанк   = Новый Структура("Банк, ИдентификаторКредитногоПродукта");
	
	ВыведенныеБанки = Новый Массив;
	
	ОтображатьДоступныеБанки = Ложь;
	ЖирныйШрифт = Новый Шрифт(, , Истина);
	Подстроки   = Новый Массив;
	
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		Если НЕ БанкДоступен(СтрокаТаблицы) Тогда
			СтрокаТаблицы.НомерГруппы = 0;
			Продолжить;
		КонецЕсли;
		
		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		Иначе
			СтрокаТаблицы.НомерГруппы = 0;
			Продолжить; // Один кредитный продукт данного банка уже был выведен.
		КонецЕсли;
		
		ОтображатьДоступныеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		СтрокаТаблицы.НомерГруппы = НомерГруппы; // Запоминаем номер группы, в которой выведен банк.
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ОтметкаБанка = Ложь;
		Если ОтметитьДоступныеБанки Тогда
			// Сразу отмечаем все доступные банки, кроме тех, которые были явно отклонены пользователем.
			ОтметкаБанка = НЕ СтрокаТаблицы.ОтметкаСнятаПользователем; 
		Иначе
			// Восстанавливаем состояние флажка по ранее сохраненному значению из табличной части.
			ОтборБанк.Банк  = СтрокаТаблицы.Банк;
			ОтборБанк.ИдентификаторКредитногоПродукта  = СтрокаТаблицы.ИдентификаторКредитногоПродукта;
			НайденныеСтроки = Объект.Банки.НайтиСтроки(ОтборБанк);
			ОтметкаБанка    = НайденныеСтроки.Количество() > 0;
			// Если банк не был выбран в заявке ранее, скорее всего, его явно снял пользователь.
			СтрокаТаблицы.ОтметкаСнятаПользователем = НЕ ОтметкаБанка;
		КонецЕсли;
		
		ГруппаБанка = Элементы["ГруппаДоступныйБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДоступныйБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДоступныйБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Флажок
		ЭтотОбъект["ДоступныйБанкОтметка" + СуффиксГруппы] = ОтметкаБанка;
		
		// Наименование кредитного продукта
		НаименованиеКредитногоПродукта = Элементы["НаименованиеКредитногоПродуктаДоступныйБанк" + СуффиксГруппы];
		НаименованиеКредитногоПродукта.Заголовок = СтрокаТаблицы.НаименованиеКредитногоПродукта;
		НаименованиеКредитногоПродукта.Видимость = ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеКредитногоПродукта);
		
		// Основные условия
		ОсновныеУсловия = Элементы["ОсновныеУсловияДоступныйБанк" + СуффиксГруппы];
		ОсновныеУсловия.Заголовок = ОписаниеОсновныхУсловийБанка(
			СтрокаТаблицы.МинСуммаКредита,
			СтрокаТаблицы.МаксСуммаКредита,
			СтрокаТаблицы.МинСрокКредита,
			СтрокаТаблицы.МаксСрокКредита,
			СтрокаТаблицы.МинСтавка,
			СтрокаТаблицы.МаксСтавка
		);

		// Подробное описание
		ПодробноеОписание = Элементы["ПодробноеОписаниеДоступныйБанк" + СуффиксГруппы];
		ПодробноеОписание.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрокаТаблицы.ПодробноеОписание);
		ПодробноеОписание.Видимость = ЗначениеЗаполнено(СтрокаТаблицы.ПодробноеОписание);
		
		// Дополнительные условия
		ДополнительныеУсловия = Элементы["ДополнительныеУсловияДоступныйБанк" + СуффиксГруппы];
		СписокОтчетов = Новый Массив;
		Для каждого Отчет Из СтрокаТаблицы.ОтчетностьЗаемщика Цикл
			СписокОтчетов.Добавить(СтрШаблон(НСтр("ru = '• %1'"), Отчет.ПредставлениеОтчета));
		КонецЦикла;
		
		ТребуетсяОтчетность = СписокОтчетов.Количество() > 0;
		Если ТребуетсяОтчетность Тогда
			
			ТекстЗаголовка = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'Отчетность для %1'"), СтрокаТаблицы.Наименование), ЖирныйШрифт);

			Подстроки.Очистить();
			Подстроки.Добавить(ТекстЗаголовка);
			Подстроки.Добавить(Символы.ПС);
			Подстроки.Добавить(Символы.ПС);
			Подстроки.Добавить(СтрСоединить(СписокОтчетов, Символы.ПС));

			ДополнительныеУсловия.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
		КонецЕсли;
		Элементы["ГруппаДополнительныеУсловияДоступныйБанк" + СуффиксГруппы].Видимость = ТребуетсяОтчетность;
		
	КонецЦикла;
	
	// Все невостребованные группы банков скроем.
	Пока НомерГруппы < ДоступныйБанкМаксКоличество Цикл
		НомерГруппы   = НомерГруппы + 1;
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		ГруппаБанка   = Элементы["ГруппаДоступныйБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Ложь;
	КонецЦикла;
	
	Элементы.ГруппаДоступныеБанки.Видимость = ОтображатьДоступныеБанки;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДругиеБанки(СведенияОБанках)
	
	НомерГруппы = 0;
	
	// Построим список банков, по которым доступны кредитные продукты.
	ДоступныеБанки = Новый Массив;
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		Если БанкДоступен(СтрокаТаблицы)
			И ДоступныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ДоступныеБанки.Добавить(СтрокаТаблицы.Банк);
		КонецЕсли;
	КонецЦикла;
	
	ВыведенныеБанки = Новый Массив;
	
	ОтображатьДругиеБанки = Ложь;
	
	ПричиныНедоступности = Новый Массив;
	
	// Сначала отображаем банки, которые прошли по стоп-факторам.
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		// Если доступен другой кредитный продукт банка, не выводим банк в списке недоступных.
		Если ДоступныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если БанкДоступен(СтрокаТаблицы, ПричиныНедоступности) Тогда
			ДоступныеБанки.Добавить(СтрокаТаблицы.Банк);
			Продолжить;
		КонецЕсли;

		СтопФакторыПройдены = СтрокаТаблицы.СтопФакторыПройдены;

		Если Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
			Если ПричиныНедоступности.Найти("ТипПредметаЛизинга") <> Неопределено
			 	ИЛИ ПричиныНедоступности.Найти("ПроцентАванса") <> Неопределено Тогда
				// В заголовке предложения все доступные типы предметов лизинга или проценты аванса не выводятся,
				// поэтому если банк недоступен из-за выбора неподходящего типа предмета лизинга или аванса,
				// то не выводим для него сумму и срок, а просто пишем, что "Пока не принимает заявки".
				// Рассматриваем эту ситуацию как временный стоп-фактор.
				СтопФакторыПройдены = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПричиныНедоступности.Найти("СуммаСУчетомВыручки") <> Неопределено Тогда
			СтопФакторыПройдены = Ложь;
		КонецЕсли;
		
		Если НЕ СтопФакторыПройдены Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		Иначе
			Продолжить; // Один кредитный продукт данного банка уже был выведен.
		КонецЕсли;
		
		ОтображатьДругиеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		СтрокаТаблицы.НомерГруппы = 0;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ГруппаБанка = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДругойБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДругойБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Наименование кредитного продукта отображается если стоп-факторы пройдены.
		НаименованиеКредитногоПродукта = Элементы["НаименованиеКредитногоПродуктаДругойБанк" + СуффиксГруппы];
		НаименованиеКредитногоПродукта.Заголовок = СтрокаТаблицы.НаименованиеКредитногоПродукта;
		НаименованиеКредитногоПродукта.Видимость = ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеКредитногоПродукта);
		
		// Основные условия отображаются если стоп-факторы банка пройдены.
		ОсновныеУсловия = Элементы["ОсновныеУсловияДругойБанк" + СуффиксГруппы];
		ОсновныеУсловия.Видимость = Истина;
		ОсновныеУсловия.Заголовок = ОписаниеОсновныхУсловийБанка(
			СтрокаТаблицы.МинСуммаКредита,
			СтрокаТаблицы.МаксСуммаКредита,
			СтрокаТаблицы.МинСрокКредита,
			СтрокаТаблицы.МаксСрокКредита,
			СтрокаТаблицы.МинСтавка,
			СтрокаТаблицы.МаксСтавка
		);
		
		// Дополнительные условия отображаются если стоп-факторы банка не пройдены.
		ДополнительныеУсловия = Элементы["ДополнительныеУсловияДругойБанк" + СуффиксГруппы];
		ДополнительныеУсловия.Видимость = Ложь;
		
		// Подробное описание не отображается.
		ПодробноеОписание = Элементы["ПодробноеОписаниеДругойБанк" + СуффиксГруппы];
		ПодробноеОписание.Видимость = Ложь;
		
	КонецЦикла;
	
	// Потом отображаем банки, которые не прошли по стоп-факторам.
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		// Если доступен другой кредитный продукт банка, не выводим банк в списке недоступных.
		Если ДоступныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если БанкДоступен(СтрокаТаблицы, ПричиныНедоступности) Тогда
			Продолжить;
		КонецЕсли;

		СтопФакторыПройдены = СтрокаТаблицы.СтопФакторыПройдены;

		Если Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
			Если ПричиныНедоступности.Найти("ТипПредметаЛизинга") <> Неопределено
			 	ИЛИ ПричиныНедоступности.Найти("ПроцентАванса") <> Неопределено Тогда
				// В заголовке предложения все доступные типы предметов лизинга или проценты аванса не выводятся,
				// поэтому если банк недоступен из-за выбора неподходящего типа предмета лизинга или аванса,
				// то не выводим для него сумму и срок, а просто пишем, что "Пока не принимает заявки".
				// Рассматриваем эту ситуацию как временный стоп-фактор.
				СтопФакторыПройдены = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПричиныНедоступности.Найти("СуммаСУчетомВыручки") <> Неопределено Тогда
			СтопФакторыПройдены = Ложь;
		КонецЕсли;
		
		Если СтопФакторыПройдены Тогда
			Продолжить;
		КонецЕсли;

		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить; // Банк был выведен в этом списке ранее.
		КонецЕсли;
		
		ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		
		ОтображатьДругиеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		СтрокаТаблицы.НомерГруппы = 0;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ГруппаБанка = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДругойБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДругойБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Наименование кредитного продукта отображается если стоп-факторы банка пройдены.
		НаименованиеКредитногоПродукта = Элементы["НаименованиеКредитногоПродуктаДругойБанк" + СуффиксГруппы];
		НаименованиеКредитногоПродукта.Видимость = Ложь;
		
		// Основные условия отображаются если стоп-факторы банка пройдены.
		ОсновныеУсловия = Элементы["ОсновныеУсловияДругойБанк" + СуффиксГруппы];
		ОсновныеУсловия.Видимость = Ложь;
		
		// Дополнительные условия отображаются если стоп-факторы банка не пройдены.
		ДополнительныеУсловия = Элементы["ДополнительныеУсловияДругойБанк" + СуффиксГруппы];
		ДополнительныеУсловия.Видимость = Истина;
		ДополнительныеУсловия.Заголовок = НСтр("ru = 'Пока не принимает заявки.'");
		
		// Подробное описание не отображается.
		ПодробноеОписание = Элементы["ПодробноеОписаниеДругойБанк" + СуффиксГруппы];
		ПодробноеОписание.Видимость = Ложь;
		
	КонецЦикла;
	
	// Все невостребованные группы банков скроем.
	Пока НомерГруппы < ДругойБанкМаксКоличество Цикл
		НомерГруппы   = НомерГруппы + 1;
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		ГруппаБанка   = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Ложь;
	КонецЦикла;
	
	Элементы.ГруппаДругиеБанки.Видимость = ОтображатьДругиеБанки;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеОсновныхУсловийБанка(МинСуммаКредита, МаксСуммаКредита, МинСрокКредита, МаксСрокКредита, МинСтавка, МаксСтавка)
	
	Если МинСуммаКредита = МаксСуммаКредита Тогда
		ПредставлениеСуммы = ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(МинСуммаКредита);
	ИначеЕсли МаксСуммаКредита = 0 И МинСуммаКредита > 0 Тогда
		ПредставлениеСуммы = СтрШаблон(НСтр("ru = 'От %1'"),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(МинСуммаКредита));
	ИначеЕсли МинСуммаКредита = 0 И МаксСуммаКредита > 0 Тогда
		ПредставлениеСуммы = СтрШаблон(НСтр("ru = 'До %1'"),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(МаксСуммаКредита));
	Иначе
		ПредставлениеСуммы = СтрШаблон(НСтр("ru = 'От %1 до %2'"),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(МинСуммаКредита),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(МаксСуммаКредита));
	КонецЕсли;
	
	Если МинСрокКредита = МаксСрокКредита Тогда
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'на %1 мес.'"), МинСрокКредита);
	ИначеЕсли МаксСрокКредита = 0 И МинСрокКредита > 0 Тогда
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'на срок от %1 мес.'"), МинСрокКредита);
	ИначеЕсли МинСрокКредита = 0 И МаксСрокКредита > 0 Тогда
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'на срок до %1 мес.'"), МаксСрокКредита);
	Иначе
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'на срок от %1 до %2 мес.'"), МинСрокКредита, МаксСрокКредита);
	КонецЕсли;
	
	Если МинСтавка = 0 И МаксСтавка = 0 Тогда
		ПредставлениеСтавки = "";
	ИначеЕсли МинСтавка = МаксСтавка Тогда
		ПредставлениеСтавки = СтрШаблон(НСтр("ru = 'по ставке %1%% годовых'"), МинСтавка);
	ИначеЕсли МаксСтавка = 0 И МинСтавка > 0 Тогда
		ПредставлениеСтавки = СтрШаблон(НСтр("ru = 'по ставке от %1%% годовых'"), МинСтавка);
	ИначеЕсли МинСтавка = 0 И МаксСтавка > 0 Тогда
		ПредставлениеСтавки = СтрШаблон(НСтр("ru = 'по ставке до %1%% годовых'"), МаксСтавка);
	Иначе
		ПредставлениеСтавки = СтрШаблон(НСтр("ru = 'по ставке от %1%% до %2%% годовых'"), МинСтавка, МаксСтавка);
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2 %3'"), ПредставлениеСуммы, ПредставлениеСрока, ПредставлениеСтавки);
	
КонецФункции

&НаСервере
Функция БанкДоступен(СведенияОБанке, ПричиныНедоступности = Неопределено)

	// Если интересуют причины недоступности, то выполняем все проверки и записываем их результат в переданный массив.
	// Если причины не интересны, то выходим сразу, как найдем первую причину.
	Если ТипЗнч(ПричиныНедоступности) = Тип("Массив") Тогда
		ПричиныНедоступности.Очистить();
		ДетализироватьПоПричинам = Истина;
	Иначе
		ДетализироватьПоПричинам = Ложь;
	КонецЕсли;

	Если НЕ СведенияОБанке.СтопФакторыПройдены Тогда
		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("СтопФакторы");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СведенияОБанке.МинСрокКредита) И СведенияОБанке.МинСрокКредита > Объект.СрокКредита)
		ИЛИ (ЗначениеЗаполнено(СведенияОБанке.МаксСрокКредита) И СведенияОБанке.МаксСрокКредита < Объект.СрокКредита) Тогда

		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("Срок");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СведенияОБанке.МинСуммаКредита) И СведенияОБанке.МинСуммаКредита > Объект.СуммаДокумента)
		ИЛИ (ЗначениеЗаполнено(СведенияОБанке.МаксСуммаКредита) И СведенияОБанке.МаксСуммаКредита < Объект.СуммаДокумента) Тогда
		
		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("Сумма");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СведенияОБанке.МаксСуммаЗаявкиСУчетомВыручки) 
		И СведенияОБанке.МаксСуммаЗаявкиСУчетомВыручки < Объект.СуммаДокумента Тогда
		
		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("СуммаСУчетомВыручки");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим специфические условия для лизинга.
	Если Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда

		// Размер авансового платежа.
		ПроцентАванса = ?(Объект.СуммаДокумента <> 0, Окр(Объект.СуммаАванса / Объект.СуммаДокумента * 100, 2), 0);

		Если (ЗначениеЗаполнено(СведенияОБанке.МинПроцентАванса) И СведенияОБанке.МинПроцентАванса > ПроцентАванса)
			ИЛИ (ЗначениеЗаполнено(СведенияОБанке.МаксПроцентАванса) И СведенияОБанке.МаксПроцентАванса < ПроцентАванса) Тогда

			Если ДетализироватьПоПричинам Тогда
				ПричиныНедоступности.Добавить("ПроцентАванса");
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Список рассматриваемых банков типов предметов лизинга.
		Если СведенияОБанке.ТипыПредметовЛизинга.Количество() > 0 Тогда
			ЕстьВСписке = СведенияОБанке.ТипыПредметовЛизинга.Найти(Объект.ТипПредметаЛизинга) <> Неопределено;
			Если СведенияОБанке.БелыйСписокТиповПредметовЛизинга И НЕ ЕстьВСписке Тогда
				// Выбранный тип предмета лизинга должен быть в "белом" списке банка.
				Если ДетализироватьПоПричинам Тогда
					ПричиныНедоступности.Добавить("ТипПредметаЛизинга");
				Иначе
					Возврат Ложь;
				КонецЕсли;

			ИначеЕсли НЕ СведенияОБанке.БелыйСписокТиповПредметовЛизинга И ЕстьВСписке Тогда
				// Выбранный тип предмета лизинга не должен быть в "черном" списке банка.
				Если ДетализироватьПоПричинам Тогда
					ПричиныНедоступности.Добавить("ТипПредметаЛизинга");
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДетализироватьПоПричинам И ПричиныНедоступности.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ДобавитьНедостающиеГруппыБанков(ПрефиксГруппы, Количество)
	
	МаксКоличествоБанков = ЭтотОбъект[ПрефиксГруппы + "МаксКоличество"];
	
	// Сначала определим количество недостающих ячеек для вывода всех банков.
	ДобавляемыеРеквизиты = Новый Массив;
	НомерГруппы = 0;
	НомерПервойДобавленнойГруппы = 0;
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Для Счетчик = 1 По Количество Цикл
		
		НомерГруппы = НомерГруппы + 1;
		Если НомерГруппы <= МаксКоличествоБанков Тогда
			// Размещаем банк в существующей группе.
			Продолжить;
		КонецЕсли;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		Если НомерПервойДобавленнойГруппы = 0 Тогда
			// Запоминаем, начиная с какой группы добавляем новые реквизиты.
			НомерПервойДобавленнойГруппы = НомерГруппы;
		КонецЕсли;
		
		// Отметка добавляется только для доступных банков.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			НовыйРеквизит = Новый РеквизитФормы(ПрефиксГруппы + "Отметка" + СуффиксГруппы, ТипБулево, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(ПрефиксГруппы + "АдресЛоготипа" + СуффиксГруппы, ТипСтрока, , , Ложь); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
		// Увеличиваем макс. количество групп доступных банков.
		МаксКоличествоБанков = МаксКоличествоБанков + 1;
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() = 0 Тогда
		// Все банки можно разместить в существующих группах, новые добавлять не требуется.
		Возврат;
	КонецЕсли;
	
	// Сохраняем максимальное количество банков.
	ЭтотОбъект[ПрефиксГруппы + "МаксКоличество"] = МаксКоличествоБанков;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем элементы на форму.
	Для НомерГруппы = НомерПервойДобавленнойГруппы По МаксКоличествоБанков Цикл
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		// Группа для объединения описания банка с разделителем.
		ГруппаСтрока = Элементы.Добавить("Группа" + ПрефиксГруппы + "Строка" + СуффиксГруппы, Тип("ГруппаФормы"),
			Элементы["Группа" + ПрефиксГруппы + "Строки"]);
		ГруппаСтрока.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрока.ОтображатьЗаголовок              = Ложь;
		ГруппаСтрока.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтрока.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// Объемлющая группа для единообразного выравнивания.
		ОсновнаяГруппаБанка = Элементы.Добавить("ГруппаОсновная" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаСтрока);
		ОсновнаяГруппаБанка.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ОсновнаяГруппаБанка.ОтображатьЗаголовок              = Ложь;
		ОсновнаяГруппаБанка.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ОсновнаяГруппаБанка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		ОсновнаяГруппаБанка.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ОсновнаяГруппаБанка.Ширина                           = 87;
		
		// Разделитель - линия.
		Разделитель = Элементы.Добавить("ДекорацияРазделитель" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаСтрока);
		Разделитель.Вид                      = ВидДекорацииФормы.Картинка;
		Разделитель.Картинка                 = БиблиотекаКартинок.ГоризонтальныйРазделитель;
		Разделитель.РазмерКартинки           = РазмерКартинки.Черепица;
		Разделитель.Ширина                   = 87;
		
		// Флажок с отметкой выводится только для доступного банка.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			ПолеФлажка = Элементы.Добавить(ПрефиксГруппы + "Отметка" + СуффиксГруппы, Тип("ПолеФормы"), ОсновнаяГруппаБанка);
			ПолеФлажка.Вид                            = ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.ПоложениеЗаголовка             = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФлажка.ПутьКДанным                    = ПрефиксГруппы + "Отметка" + СуффиксГруппы;
			ПолеФлажка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "ДоступныйБанкОтметкаПриИзменении");
		КонецЕсли;
		
		// Группа для описания банка.
		ГруппаОписаниеБанка = Элементы.Добавить("ГруппаОписание" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ОсновнаяГруппаБанка);
		ГруппаОписаниеБанка.Вид                            = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОписаниеБанка.Группировка                    = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаОписаниеБанка.ОтображатьЗаголовок            = Ложь;
		ГруппаОписаниеБанка.Отображение                    = ОтображениеОбычнойГруппы.Нет;
		ГруппаОписаниеБанка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаОписаниеБанка.Группировка                    = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОписаниеБанка.Ширина                         = 83;
		
		// Поле картинки с логотипом банка.
		ПолеЛоготипа = Элементы.Добавить(ПрефиксГруппы + СуффиксГруппы, Тип("ПолеФормы"), ГруппаОписаниеБанка);
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЛоготипа.ПутьКДанным              = ПрефиксГруппы + "АдресЛоготипа" + СуффиксГруппы;
		ПолеЛоготипа.РазмерКартинки           = РазмерКартинки.Растянуть;
		ПолеЛоготипа.Ширина                   = 14;
		ПолеЛоготипа.Высота                   = 4;
		ПолеЛоготипа.РастягиватьПоВертикали   = Ложь;
		ПолеЛоготипа.РастягиватьПоГоризонтали = Ложь;
		ПолеЛоготипа.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		// Группа для условий банка.
		ГруппаБанка = Элементы.Добавить("Группа" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаОписаниеБанка);
		ГруппаБанка.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБанка.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаБанка.ОтображатьЗаголовок              = Ложь;
		ГруппаБанка.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ГруппаБанка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаБанка.ГоризонтальноеПоложениеВГруппе   = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаБанка.Ширина                           = 65;
		ГруппаБанка.РастягиватьПоГоризонтали         = Ложь;
		
		// Декорация для наименования кредитного продукта.
		НаименованиеКредитногоПродукта = Элементы.Добавить(
			"НаименованиеКредитногоПродукта" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
		НаименованиеКредитногоПродукта.Вид        = ВидДекорацииФормы.Надпись;
		НаименованиеКредитногоПродукта.ЦветТекста = ЦветаСтиля.ЦветАкцента;
		
		// Декорация для основных условий банка.
		ОсновныеУсловия = Элементы.Добавить("ОсновныеУсловия" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
		ОсновныеУсловия.Вид   = ВидДекорацииФормы.Надпись;
		ОсновныеУсловия.Шрифт = ШрифтыСтиля.ШрифтТекстаБаннера;
		ОсновныеУсловия.АвтоМаксимальнаяШирина = Ложь;

		// Декорация для подробного описания.
		ПодробноеОписание = Элементы.Добавить("ПодробноеОписание" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
		ПодробноеОписание.Вид = ВидДекорацииФормы.Надпись;
		ПодробноеОписание.АвтоМаксимальнаяШирина = Ложь;
		
		// Всплывающая группа для дополнительных условий банка с отчетностью для доступных банков.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			ГруппаДополнительныеУсловия = Элементы.Добавить(
				"ГруппаДополнительныеУсловия" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаБанка);
			ГруппаДополнительныеУсловия.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДополнительныеУсловия.Заголовок   = НСтр("ru = 'Отчетность'");
			ГруппаДополнительныеУсловия.Поведение   = ПоведениеОбычнойГруппы.Всплывающая;
			ГруппаДополнительныеУсловия.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
			ГруппаДополнительныеУсловия.Отображение           = ОтображениеОбычнойГруппы.Нет;
			ГруппаДополнительныеУсловия.ЦветТекстаЗаголовка   = ЦветаСтиля.ГиперссылкаЦвет;
			
			РодительскийЭлемент = ГруппаДополнительныеУсловия;
		Иначе
			// Для недоступных банков показываем текст о том, что банк пока не принимает заявки в основной группе банка.
			РодительскийЭлемент = ГруппаБанка;
		КонецЕсли;
		
		// Для доступных банков декорация для дополнительных условий с отчетностью,
		// для недоступных банков - декорация с надписью о том, что банк пока не принимает заявки.
		
		ДополнительныеУсловия = Элементы.Добавить(
			"ДополнительныеУсловия" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), РодительскийЭлемент);
		ДополнительныеУсловия.Вид = ВидДекорацииФормы.Надпись;
		ДополнительныеУсловия.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметкиБанков(НоваяОтметка)
	
	СведенияОБанках = СведенияОБанках();
	
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГруппы) Тогда
			// Этот банк не был выведен среди доступных, его пропускаем.
			Продолжить;
		КонецЕсли;
		
		СуффиксГруппы = Формат(СтрокаТаблицы.НомерГруппы, "ЧГ=");
		
		ЭтотОбъект["ДоступныйБанкОтметка" + СуффиксГруппы] = НоваяОтметка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБанки(ОбъектЗаявки)

	Если ТолькоПросмотр
		ИЛИ НЕ БанкиИнициализированы Тогда
		// Недоступно изменение или банки не считывались за время работы с формой,
		// записывать нечего.
		Возврат;
	КонецЕсли;

	// Переносим данные из реквизитов формы в документ.
	СведенияОБанках = СведенияОБанках();

	УдаленныеКредитныеПродукты   = ОбъектЗаявки.Банки.Выгрузить();
	ЕстьНовые = Ложь;
	
	// Для нового списка банков определим необходимость данных об учредителях.
	Объект.ТребуютсяДанныеУчредителей = Ложь;

	ОбъектЗаявки.Банки.Очистить();
	
	ДобавитьМеткуДоверенногоВремени = Ложь;

	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГруппы) Тогда
			// Банк не доступен для выбора.
			Продолжить;
		КонецЕсли;
		
		ОтметкаБанка = ЭтотОбъект["ДоступныйБанкОтметка" + Формат(СтрокаТаблицы.НомерГруппы, "ЧГ=")];
		Если НЕ ОтметкаБанка Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем строку.
		НоваяСтрока                                 = ОбъектЗаявки.Банки.Добавить();
		НоваяСтрока.Банк                            = СтрокаТаблицы.Банк;
		НоваяСтрока.ИдентификаторКредитногоПродукта = СтрокаТаблицы.ИдентификаторКредитногоПродукта;
		
		ДобавитьМеткуДоверенногоВремени	= ДобавитьМеткуДоверенногоВремени ИЛИ СтрокаТаблицы.ДобавитьМеткуДоверенногоВремени;
		
		// Проверяем, был ли кредитный продукт выбран ранее.
		Отбор = Новый Структура;
		Отбор.Вставить("Банк", СтрокаТаблицы.Банк);
		Отбор.Вставить("ИдентификаторКредитногоПродукта", СтрокаТаблицы.ИдентификаторКредитногоПродукта);
		НайденныеКредитныеПродукты = УдаленныеКредитныеПродукты.НайтиСтроки(Отбор);
		Если НайденныеКредитныеПродукты.Количество() = 0 Тогда
			ЕстьНовые = Истина;
		Иначе
			Для каждого КредитныйПродукт Из НайденныеКредитныеПродукты Цикл
				УдаленныеКредитныеПродукты.Удалить(УдаленныеКредитныеПродукты.Индекс(КредитныйПродукт));
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТребуютсяДанныеУчредителей Тогда
			// Если данные об учредителях требуются хотя бы одному из банков, то взводим признак в документе.
			Объект.ТребуютсяДанныеУчредителей = Истина; 
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьИзменения = ЕстьНовые ИЛИ УдаленныеКредитныеПродукты.Количество() <> 0;
	
	Если НЕ ЕстьИзменения Тогда
		// Список банков не изменился по сравнению с тем, который был перед записью.
		Возврат;
	КонецЕсли;

	// Отмечаем, что необходимо перестроить отчетность при изменении списка банков.
	ОбъектЗаявки.ТребуетсяОбновлениеОтчетности = Истина;
	
	// Сбрасываем признак актуальности дополнительных показателей, если состав выбранных банков изменился.
	ДополнительныеПоказателиАктуальны = Ложь;
	ДополнительныеФайлыАктуальны = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СтатистикаПоБанкам()

	Результат = Новый Структура();
	Результат.Вставить("КоличествоОтмеченных", 0);
	Результат.Вставить("КоличествоДоступных",  0);

	// Переносим данные из реквизитов формы в документ.
	СведенияОБанках = СведенияОБанках();

	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГруппы) Тогда
			// Банк не доступен для выбора.
			Продолжить;
		КонецЕсли;
		
		Результат.КоличествоДоступных = Результат.КоличествоДоступных + 1;
		
		ОтметкаБанка = ЭтотОбъект["ДоступныйБанкОтметка" + Формат(СтрокаТаблицы.НомерГруппы, "ЧГ=")];
		Если ОтметкаБанка Тогда
			Результат.КоличествоОтмеченных = Результат.КоличествоОтмеченных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗапомнитьЧтоПользовательИзменилОтметкуБанка(НомерГруппы, НоваяОтметкаБанка)

	СведенияОБанках = СведенияОБанках();
	
	СведенияОБанке = СведенияОБанках.Найти(НомерГруппы, "НомерГруппы");
	Если СведенияОБанке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОБанке.ОтметкаСнятаПользователем = НЕ НоваяОтметкаБанка;
	
	ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках);

КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках)

	Если ЭтоАдресВременногоХранилища(БанкиАдресХранилища) Тогда
		// Размещаем по ранее полученному адресу.
		БанкиАдресХранилища = ПоместитьВоВременноеХранилище(СведенияОБанках, БанкиАдресХранилища);
	Иначе
		// Первая инициализация адреса хранилища.
		БанкиАдресХранилища = ПоместитьВоВременноеХранилище(СведенияОБанках, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоказатели

&НаСервере
Процедура ЗаписатьДополнительныеПоказатели(ОбъектЗаявки)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЗаявки.ДополнительныеПоказатели.Очистить();
	ОтборПоПризнаку = Новый Структура("ЭтоФайл", Ложь);
	Получатели = ОбъектЗаявки.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоПризнаку);
	Для Каждого Получатель Из Получатели Цикл
		ОбъектЗаявки.ПолучателиДополнительнойИнформации.Удалить(Получатель);
	КонецЦикла;
	
	ДополнительныеПоказатели = ПолучитьДополнительныеПоказатели();
	
	Если ДополнительныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючСтроки = 0;
	Для каждого Показатель Из ДополнительныеПоказатели Цикл

		КлючСтроки = КлючСтроки + 1;
		ИмяРеквизитаПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
		ЗначениеПоказателя = ЭтотОбъект[ИмяРеквизитаПоказателя];
		
		НоваяСтрокаПоказатель = ОбъектЗаявки.ДополнительныеПоказатели.Добавить();
		НоваяСтрокаПоказатель.КлючСтрокиПоказателя = КлючСтроки;
		НоваяСтрокаПоказатель.Идентификатор = Показатель.Идентификатор;
		
		Если Показатель.Обязательный Тогда
			НоваяСтрокаПоказатель.Значение = ЗначениеПоказателя;
			НоваяСтрокаПоказатель.ДанныеОтсутствуют = Ложь;
		Иначе
			ИмяПереключателяПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаПоказателя);
			ПоказательУказан = ЭтотОбъект[ИмяПереключателяПоказателя];
			НоваяСтрокаПоказатель.ДанныеОтсутствуют = НЕ ПоказательУказан;
			Если ПоказательУказан Тогда
				НоваяСтрокаПоказатель.Значение = ЗначениеПоказателя;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Банк Из Показатель.Банки Цикл
			НоваяСтрокаПолучатель = ОбъектЗаявки.ПолучателиДополнительнойИнформации.Добавить();
			НоваяСтрокаПолучатель.КлючСтрокиДопИнформации = КлючСтроки;
			НоваяСтрокаПолучатель.Банк = Банк;
			НоваяСтрокаПолучатель.ЭтоФайл = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительныеПоказатели()
	
	Если ЭтоАдресВременногоХранилища(ДополнительныеПоказателиАдресХранилища) Тогда
		ДополнительныеПоказатели = ПолучитьИзВременногоХранилища(ДополнительныеПоказателиАдресХранилища);
	Иначе
		ДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
		ДополнительныеПоказателиАдресХранилища = ПоместитьВоВременноеХранилище(ДополнительныеПоказатели, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ДополнительныеПоказатели;
	
КонецФункции

&НаСервере
Процедура НастроитьДополнительныеПоказатели()
	
	Если ДополнительныеПоказателиАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	ИдентификаторыКредитныхПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "ИдентификаторКредитногоПродукта", Истина);
	
	ДополнительныеПоказатели = ПолучитьДополнительныеПоказатели();
	
	ТребуемыеПоказатели = Документы.ЗаявкаНаКредит.ТребуемыеДополнительныеПоказатели(
		Объект.СервисОбменаСБанками, Объект.Дата, Банки, ИдентификаторыКредитныхПродуктов);
	
	// Изменение состава показателей и реквизитов формы.
	ДобавляемыеПоказатели = Новый Массив;
	ДобавляемыеРеквизитыФормы = Новый Массив;
	Для каждого ТребуемыйПоказатель Из ТребуемыеПоказатели Цикл
		СуществующийПоказатель = ДополнительныеПоказатели.Найти(ТребуемыйПоказатель.Идентификатор, "Идентификатор");
		Если СуществующийПоказатель = Неопределено Тогда
			ДобавляемыеПоказатели.Добавить(ТребуемыйПоказатель);
			
			НовыйПоказатель = ДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПоказатель, ТребуемыйПоказатель);
			
			НовыеРеквизиты = УниверсальныйОбменСБанкамиФормы.ПолучитьДобавляемыеРеквизитыФормы(НовыйПоказатель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавляемыеРеквизитыФормы, НовыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеПоказатели = Новый Массив;
	УдаляемыеРеквизитыФормы = Новый Массив;
	Для каждого Показатель Из ДополнительныеПоказатели Цикл
		Если ТребуемыеПоказатели.Найти(Показатель.Идентификатор, "Идентификатор") = Неопределено Тогда
			УдаляемыеПоказатели.Добавить(Показатель);
			
			УдяляемыеРеквизиты = УниверсальныйОбменСБанкамиФормы.ПолучитьУдаляемыеРеквизитыФормы(Показатель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеРеквизитыФормы, УдяляемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Показатель Из УдаляемыеПоказатели Цикл
		ДополнительныеПоказатели.Удалить(ДополнительныеПоказатели.Индекс(Показатель));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы, УдаляемыеРеквизитыФормы);
	
	УниверсальныйОбменСБанкамиФормы.ИнициализироватьДобавляемыеРеквизитыФормы(ЭтотОбъект, ДобавляемыеПоказатели);
	
	// Отрисовка элементов формы.
	ДополнительныеПоказатели.Сортировать("Обязательный Убыв, КраткоеПредставление");
	
	УниверсальныйОбменСБанкамиФормы.УдалитьПодчиненныеЭлементы(ЭтотОбъект, Элементы.ГруппаДополнительныеПоказателиЮЛ.ПодчиненныеЭлементы);
	УниверсальныйОбменСБанкамиФормы.УдалитьПодчиненныеЭлементы(ЭтотОбъект, Элементы.ГруппаДополнительныеПоказателиИП.ПодчиненныеЭлементы);
	
	ГруппаЭлементов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		Элементы.ГруппаДополнительныеПоказателиИП,
		Элементы.ГруппаДополнительныеПоказателиЮЛ);
	
	КоличествоРазличныхБанков = УниверсальныйОбменСБанкамиФормы.КоличествоРазличныхБанковТребующихПоказатели(ДополнительныеПоказатели);
	ГруппаЭлементов.Заголовок = ?(КоличествоРазличныхБанков = 1,
		СтрШаблон(НСтр("ru='Дополнительная информация для %1'"), ДополнительныеПоказатели[0].Банки[0]),
		НСтр("ru='Дополнительная информация для отдельных получателей заявки'"));
	
	ОбязательныеПоказатели = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Обязательный", Истина));
	НеобязательныеПоказатели = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Обязательный", Ложь));
	
	Для каждого Показатель Из ОбязательныеПоказатели Цикл	
		
		УниверсальныйОбменСБанкамиФормы.ДобавитьПоле(ЭтотОбъект, ГруппаЭлементов, Показатель,
			?(КоличествоРазличныхБанков > 1, ПредставлениеБанковДополнительногоПоказателя(Показатель.Банки), Неопределено));
				
	КонецЦикла;
			
	Если НеобязательныеПоказатели.Количество() > 0 Тогда
		ГруппаПоказателей = УниверсальныйОбменСБанкамиФормы.ДобавитьГруппуНеобязательныхДополнительныхПоказателей(ЭтотОбъект, ГруппаЭлементов);
		
		Для каждого Показатель Из НеобязательныеПоказатели Цикл
			УниверсальныйОбменСБанкамиФормы.ДобавитьПоле(ЭтотОбъект, ГруппаПоказателей, Показатель,
				?(КоличествоРазличныхБанков > 1, ПредставлениеБанковДополнительногоПоказателя(Показатель.Банки), Неопределено));
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значений показателей из сохраненных данных.
	// Производится только один раз в сеансе работы с формой.
	Если НЕ ДополнительныеПоказателиПрочитаны Тогда
		Для каждого Показатель Из ДополнительныеПоказатели Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Показатель.Идентификатор);
			НайденныеСтроки = Объект.ДополнительныеПоказатели.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ИмяРеквизитаПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
				НайденныйПоказатель = НайденныеСтроки[0];
				ЗначениеПоказателя = НайденныеСтроки[0].Значение;
				
				ЭтотОбъект[ИмяРеквизитаПоказателя] = ЗначениеПоказателя;
				
				Если УниверсальныйОбменСБанкамиФормы.ИспользоватьФормуВыбораПеречисления(Показатель) Тогда
					ИмяПредставленияПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизитаПоказателя);
					НайденноеЗначение = Показатель.ЗначенияПеречисления.Найти(ЗначениеПоказателя, "Идентификатор");
					Если НайденноеЗначение <> Неопределено Тогда
						ЭтотОбъект[ИмяПредставленияПоказателя] = НайденноеЗначение.КраткоеПредставление;
					Иначе
						ЭтотОбъект[ИмяПредставленияПоказателя] = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Показатель.Обязательный Тогда
					ИмяПереключателяПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаПоказателя);
					ЭтотОбъект[ИмяПереключателяПоказателя] = НЕ НайденныйПоказатель.ДанныеОтсутствуют;
					Элементы[ИмяРеквизитаПоказателя].Видимость = ЭтотОбъект[ИмяПереключателяПоказателя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДополнительныеПоказателиПрочитаны = Истина;
	КонецЕсли;
	
	ДополнительныеПоказателиАдресХранилища = ПоместитьВоВременноеХранилище(ДополнительныеПоказатели, УникальныйИдентификатор);
	
	ДополнительныеПоказателиАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеБанковДополнительногоПоказателя(Банки)
	
	Возврат ?(Банки.Количество() > 1,
		Новый ФорматированнаяСтрока(
			НСтр("ru='Показатель'"),
			" ",
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru=';требует;;требуют;требуют;требуют'"),
				Банки.Количество()
			),
			" ",
			Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru=';%1 партнер сервиса;;%1 партнера сервиса;%1 партнеров сервиса;%1 партнеров сервиса'"),
					Банки.Количество()
				),,,,
				СтрШаблон("ПолучателиОтчета:%1", СтрСоединить(Банки, УниверсальныйОбменСБанкамиФормыКлиентСервер.РазделительЭлементовСтроки()))
			)
		),
		Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Показатель требует %1'"), Банки[0]))
	);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПеречисления(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.НачалоВыбораПеречисления(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПеречисления(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ВыборПеречисления(ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПеречисления(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.АвтоПодборПеречисления(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаПеречисления(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОкончаниеВводаТекстаПеречисления(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПеречисления(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбработкаВыбораПеречисления(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаПеречисления(Элемент, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОчисткаПеречисления(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПереключателяДополнительногоПоказателя(Элемент) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ПриИзмененииПереключателяДополнительногоПоказателя(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоПоказателя(Элемент) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбновитьПереключательДополнительногоПоказателя(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиДополнительногоПоказателя(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеФайлы

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСНомеромВГруппе(Идентификатор, НомерВГруппе)
	
	Если Не ЗначениеЗаполнено(НомерВГруппе) Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Возврат Идентификатор + Формат(НомерВГруппе, "ЧГ=0");
	
КонецФункции

&НаСервере
Процедура НастроитьДополнительныеФайлы()
	
	Если ДополнительныеФайлыАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	ИдентификаторыКредитныхПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "ИдентификаторКредитногоПродукта", Истина);
	
	ТребуемыеФайлы = ОписаниеДополнительныхФайлов.Выгрузить().СкопироватьКолонки();
	Документы.ЗаявкаНаКредит.ТребуемыеДополнительныеФайлы(
		Объект.СервисОбменаСБанками, Объект.Дата, Банки, ИдентификаторыКредитныхПродуктов, ТребуемыеФайлы);
		
	ОбновитьОписаниеДополнительныхФайлов(ТребуемыеФайлы);
	
	ОбновитьСписокРеквизитовФормыПоОписаниямФайлов();
	
	ДобавитьЭлементыФормыПоОписаниямФайлов();
	
	ДополнительныеФайлыАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеДополнительныхФайлов(ТребуемыеФайлы)
	
	// На основании списка описаний файлов, полученного из настроек (характеристики банков из сервиса), мы должны подготовить таблицы:
	// * ОписаниеДополнительныхФайлов - реквизит формы, хранящий сведения для построения элементов формы, связанных с дополнительными файлами.
	// * Объект.ДополнительныеФайлы - хранит ссылки на присоединенные файлы.
	// * Объект.ПолучателиДополнительнойИнформации - хранит список банков-получателей для каждого файла.
	//
	// Может быть две ситуации:
	// 1) первоначальное заполнение при открытии формы;
	// 2) обновление настроек после изменения списка получателей.
	
	ТребуемыеФайлы.Индексы.Добавить("Идентификатор");
	
	ВосстановитьОписания = Ложь;
	Если Объект.ДополнительныеФайлы.Количество() > 0
	   И ОписаниеДополнительныхФайлов.Количество() = 0 Тогда
	   
		ВосстановитьОписания = Истина;
		
		ИдентификаторыПредопределенных = Новый Массив;
		ИдентификаторыПредопределенных.Добавить(ИдентификаторПаспортУчредителя());
		ИдентификаторыПредопределенных.Добавить(Документы.ЗаявкаНаКредит.ИдентификаторПаспортРуководителя());
		ИдентификаторыПредопределенных.Добавить(Документы.ЗаявкаНаКредит.ИдентификаторКоммерческоеПредложение());
		
	КонецЕсли;
	
	ДопФайл = Неопределено;
	МаксимальныйКлюч = 0;
	ОтборПоИдентификатору = Новый Структура("Идентификатор", "");
	Для Каждого СохраненныйДопФайл Из Объект.ДополнительныеФайлы Цикл
		
		МаксимальныйКлюч = Макс(МаксимальныйКлюч, СохраненныйДопФайл.КлючСтрокиФайла);
		
		Если ОтборПоИдентификатору.Идентификатор = СохраненныйДопФайл.Идентификатор Тогда
			// Нужны только первые из ключей в группе файлов по одному идентификатору.
			Если ВосстановитьОписания Тогда
				ДопФайл.Количество = ДопФайл.Количество + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Переносим ключи строк из сохраненных значений.
		ОтборПоИдентификатору.Идентификатор = СохраненныйДопФайл.Идентификатор;
		ОписаниеДопФайла = ТребуемыеФайлы.НайтиСтроки(ОтборПоИдентификатору);
		Если ОписаниеДопФайла.Количество() <> 0 Тогда
			ОписаниеДопФайла[0].КлючСтрокиФайла = СохраненныйДопФайл.КлючСтрокиФайла;
		КонецЕсли;
		
		Если Не ВосстановитьОписания Тогда
			Продолжить;
		КонецЕсли;
		
		// Восстанавливаем ранее существовавшие описания.
		ДопФайл = ОписаниеДополнительныхФайлов.Добавить();
		ДопФайл.КлючСтрокиФайла      = СохраненныйДопФайл.КлючСтрокиФайла;
		ДопФайл.Идентификатор        = СохраненныйДопФайл.Идентификатор;
		ДопФайл.Обязательный         = Не СохраненныйДопФайл.ДанныеОтсутствуют; // по-умолчанию
		ДопФайл.Предопределенный     = (ИдентификаторыПредопределенных.Найти(СохраненныйДопФайл.Идентификатор) <> Неопределено);
		ДопФайл.Количество           = 1;
		
	КонецЦикла;
	
	// Обрабатываем добавляемые или удаляемые описания файлов.
	МаксимальныйКлюч = МаксимальныйКлюч + 1;
	Для Каждого ДопФайл Из ТребуемыеФайлы Цикл
		
		Если ДопФайл.Идентификатор = ИдентификаторПаспортУчредителя() Тогда
			// Инициализируем ОписаниеДополнительныхФайлов, чтобы для описания файлов, прикрепляемых в табличной части,
			// список ПолучателиДополнительнойИнформации заполнился также как и для обычных доп.файлов.
			СохраненныйДопФайл = ОписаниеДополнительныхФайлов.Добавить();
			СохраненныйДопФайл.КлючСтрокиФайла      = Документы.ЗаявкаНаКредит.КлючСтрокиДопФайлаПаспортУчредителей();
			СохраненныйДопФайл.Идентификатор        = ДопФайл.Идентификатор;
			СохраненныйДопФайл.Обязательный         = ДопФайл.Обязательный;
			СохраненныйДопФайл.Предопределенный     = Истина;
			СохраненныйДопФайл.КраткоеПредставление = ДопФайл.КраткоеПредставление;
			ДопФайл.Количество = 1; // к одной строке таб.части только один файл или архив
			СохраненныйДопФайл.Количество           = ДопФайл.Количество;
			
		КонецЕсли;
		
		ОтборПоИдентификатору.Идентификатор = ДопФайл.Идентификатор;
		ИсточникиКлючей = ОписаниеДополнительныхФайлов.НайтиСтроки(ОтборПоИдентификатору);
		Если ИсточникиКлючей.Количество() = 0 Тогда // присваиваем новый ключ строки
			
			ДопФайл.КлючСтрокиФайла = МаксимальныйКлюч; // первый из диапазона, определяемого от Количество
			
			Для инд = 1 По ДопФайл.Количество Цикл
				
				НовСтр = Объект.ДополнительныеФайлы.Добавить();
				НовСтр.ДанныеОтсутствуют    = Ложь;
				НовСтр.КлючСтрокиФайла      = МаксимальныйКлюч;
				НовСтр.Идентификатор        = ДопФайл.Идентификатор;
				
				МаксимальныйКлюч = МаксимальныйКлюч + 1;
				
			КонецЦикла;
			
		ИначеЕсли ИсточникиКлючей[0].Количество < ДопФайл.Количество Тогда
			// Диапазон ключей для этого доп.файла нужно расширить. Делаем это, перенося в конец таблицы, где они хранятся.
			
			ДопФайл.КлючСтрокиФайла = МаксимальныйКлюч; // первый из диапазона, определяемого от Количество
			
			СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
			СохранитьРанееВведенные = (ВосстановитьОписания Или ДопФайл.Приоритет <= ИсточникиКлючей[0].Приоритет);
			КоличествоСохраненных = СохраненныеДопФайлы.Количество();
			ПризнакДанныеОтсутствуют = СохранитьРанееВведенные И КоличествоСохраненных > 0
									И Не ДопФайл.Обязательный И СохраненныеДопФайлы[0].ДанныеОтсутствуют;
			
			Для инд = 1 По ДопФайл.Количество Цикл
				
				НовСтр = Объект.ДополнительныеФайлы.Добавить();
				НовСтр.ДанныеОтсутствуют    = ПризнакДанныеОтсутствуют;
				НовСтр.КлючСтрокиФайла      = МаксимальныйКлюч;
				НовСтр.Идентификатор        = ДопФайл.Идентификатор;
				Если инд <= КоличествоСохраненных Тогда
					
					Если СохранитьРанееВведенные Тогда
						СохраненныйДопФайл = СохраненныеДопФайлы[инд - 1];
						НовСтр.ДанныеОтсутствуют = Не ДопФайл.Обязательный И СохраненныйДопФайл.ДанныеОтсутствуют;
						НовСтр.Значение = СохраненныйДопФайл.Значение;
					КонецЕсли;
					
					Объект.ДополнительныеФайлы.Удалить(СохраненныйДопФайл);
					
				КонецЕсли;
				
				МаксимальныйКлюч = МаксимальныйКлюч + 1;
				
			КонецЦикла;
			
		Иначе // нужно лишь скопировать КлючСтрокиПоказателя из имеющихся в ТребуемыеФайлы
			
			// Мы это уже сделали в самом начале процедуры, перенеся из "Объект.ДополнительныеФайлы". Если при отладке здесь ключи разные,
			// то произошла коллизия между ДополнительныеФайлы и ОписаниеДополнительныхФайлов. Однако исключение ради этого вызывать не будем.
			ДопФайл.КлючСтрокиФайла = ИсточникиКлючей[0].КлючСтрокиФайла;
			
			// Возможно более приоритетная настройка содержит более строгие требования. Предложим пользователю перезаполнить.
			ОчиститьЗначения = (Не ВосстановитьОписания И ДопФайл.Приоритет > ИсточникиКлючей[0].Приоритет);
			
			СохраненныеДопФайлы = Неопределено;
			Если ДопФайл.Обязательный И Не ИсточникиКлючей[0].Обязательный // файл стал обязательным
			 Или ОчиститьЗначения Тогда // все значения будут очищены

				СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
				Для Каждого СохраненныйДопФайл Из СохраненныеДопФайлы Цикл
					
					СохраненныйДопФайл.ДанныеОтсутствуют = Ложь;
					Если ОчиститьЗначения Тогда
						СохраненныйДопФайл.Значение = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИсточникиКлючей[0].Количество > ДопФайл.Количество Тогда
				// Удалим лишние.
				Если СохраненныеДопФайлы = Неопределено Тогда
					СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
				КонецЕсли;
				Если СохраненныеДопФайлы.Количество() > 0 Тогда
					Для инд = ДопФайл.Количество По ИсточникиКлючей[0].Количество - 1 Цикл
						Объект.ДополнительныеФайлы.Удалить(СохраненныеДопФайлы[инд]);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Обновляем список банков-получателей.
		Если ИсточникиКлючей.Количество() = 0 Тогда
			
			Для Каждого БанкПолучатель Из ДопФайл.Банки Цикл
				
				НовСтр = Объект.ПолучателиДополнительнойИнформации.Добавить();
				НовСтр.ЭтоФайл = Истина;
				НовСтр.КлючСтрокиДопИнформации = ДопФайл.КлючСтрокиФайла;
				НовСтр.Банк = БанкПолучатель.Значение;
				
			КонецЦикла;
			
		Иначе
			
			ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ИсточникиКлючей[0].КлючСтрокиФайла, Истина);
			СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
			
			// Удаляем те, которые теперь отсутствуют.
			инд = СохраненныеПолучатели.Количество();
			Пока Инд > 0 Цикл
				
				инд = инд - 1;
				БанкПолучатель = СохраненныеПолучатели[инд];
				Если ДопФайл.Банки.НайтиПоЗначению(БанкПолучатель.Банк) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Объект.ПолучателиДополнительнойИнформации.Удалить(БанкПолучатель);
				СохраненныеПолучатели.Удалить(инд);
				
			КонецЦикла;
			
			// Добавляем те, которые появились.
			Для Каждого БанкДопФайла Из ДопФайл.Банки Цикл
					
				БанкПолучательУжеЕсть = Ложь;
				Для Каждого БанкПолучатель Из СохраненныеПолучатели Цикл
					Если БанкПолучатель.Банк = БанкДопФайла.Значение Тогда
						БанкПолучательУжеЕсть = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если БанкПолучательУжеЕсть Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтр = Объект.ПолучателиДополнительнойИнформации.Добавить();
				НовСтр.ЭтоФайл = Истина;
				НовСтр.КлючСтрокиДопИнформации = ДопФайл.КлючСтрокиФайла;
				НовСтр.Банк = БанкДопФайла.Значение;
				
			КонецЦикла;
			
			// Удаляем из исходной таблицы строки, которые уже обработаны. Целевой таблицей сейчас является ТребуемыеФайлы.
			// Затем ИсточникиКлючей будет полностью перезаполнена из ТребуемыеФайлы.
			Для Каждого СохраненныйДопФайл Из ИсточникиКлючей Цикл
				ОписаниеДополнительныхФайлов.Удалить(СохраненныйДопФайл);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем ключи строк, которые уже не будут использоваться.
	ОтборПоКлючуИПризнаку = Новый Структура("ЭтоФайл, КлючСтрокиДопИнформации", Истина);
	КоличествоДопФайлов = ОписаниеДополнительныхФайлов.Количество();
	Для инд = 1 По КоличествоДопФайлов Цикл
		
		ДопФайл = ОписаниеДополнительныхФайлов[0];
		ОтборПоИдентификатору.Идентификатор = ДопФайл.Идентификатор;
		
		СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
		Для Каждого СохраненныйДопФайл Из СохраненныеДопФайлы Цикл
			
			Объект.ДополнительныеФайлы.Удалить(СохраненныйДопФайл);
			
			ОтборПоКлючуИПризнаку.КлючСтрокиДопИнформации = СохраненныйДопФайл.КлючСтрокиФайла;
			СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючуИПризнаку);
			Для Каждого БанкПолучатель Из СохраненныеПолучатели Цикл
				Объект.ПолучателиДополнительнойИнформации.Удалить(БанкПолучатель);
			КонецЦикла;
			
		КонецЦикла; 
		
		ОписаниеДополнительныхФайлов.Удалить(0);
		
	КонецЦикла;
	
	ОписаниеДополнительныхФайлов.Загрузить(ТребуемыеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРеквизитовФормыПоОписаниямФайлов()
	
	// Получим список реквизитов формы-флажков для необязательных файлов.
	КодСтрокиФайловВТабличнойЧасти = Документы.ЗаявкаНаКредит.КлючСтрокиДопФайлаПаспортУчредителей();
	ПроверенныеФлаги = Новый Структура;
	ПроверенныеЭлементы = Новый Структура;
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		
		Если ДопФайл.КлючСтрокиФайла = КодСтрокиФайловВТабличнойЧасти Тогда
			// Ввод происходит в строках табличной части Учредители.
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		// Хранить название действия.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
		ПроверенныеЭлементы.Вставить(ИмяЭлемента);
		Для НомерВГруппе = 1 По ДопФайл.Количество - 1 Цикл
			
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ПроверенныеЭлементы.Вставить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизитаСНомером));
			
		КонецЦикла;
		
		// Хранить значение флага.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
		// Создаем реквизиты даже для флагов обязательных файлов, чтобы было к чему привязать невидимые элементы-флаги.
		ПроверенныеФлаги.Вставить(ИмяЭлемента);
		ПроверенныеЭлементы.Вставить(ИмяЭлемента);
		Для НомерВГруппе = 2 По ДопФайл.Количество - 1 Цикл
			
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ПроверенныеЭлементы.Вставить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаСНомером));
			
		КонецЦикла;
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ПроверенныеФлаги, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПроверенныеЭлементы, ЭтотОбъект);
	
	СуффиксПереключателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя("");
	СуффиксДействия = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия("");
	
	ДобавляемыеИдентификаторы = Новый Массив;
	Для Каждого ИмяЭлемента Из ПроверенныеЭлементы Цикл
		Если ИмяЭлемента.Значение = Неопределено
		   И СтрЗаканчиваетсяНа(ИмяЭлемента.Ключ, СуффиксДействия) Тогда
			ДобавляемыеИдентификаторы.Добавить(
				Новый РеквизитФормы(
					ИмяЭлемента.Ключ, Новый ОписаниеТипов("Строка"), ,, Истина));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИмяЭлемента Из ПроверенныеФлаги Цикл
		Если ИмяЭлемента.Значение = Неопределено Тогда
			ДобавляемыеИдентификаторы.Добавить(
				Новый РеквизитФормы(
					ИмяЭлемента.Ключ, Новый ОписаниеТипов("Булево"), ,, Истина));
		КонецЕсли;
	КонецЦикла;		
	
	УдаляемыеИдентификаторы = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	ПрефиксЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла("");
	РеквизитДляТабличнойЧасти = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИдентификаторПаспортУчредителя());
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		ИмяЭлемента = ЭлементФормы.Имя;
		Если Не СтрНачинаетсяС(ИмяЭлемента, ПрефиксЭлемента)
		 Или СтрНачинаетсяС(ИмяЭлемента, РеквизитДляТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЗаканчиваетсяНа(ИмяЭлемента, СуффиксДействия) Тогда
			// Реквизит для действия есть всегда, когда нужен файл. Именно по его отсутствию добавляем элементы в группу удаляемых.
			Если ПроверенныеЭлементы.Свойство(ИмяЭлемента) Тогда
				Продолжить;
			КонецЕсли;
			
			УдаляемыеИдентификаторы.Добавить(ИмяЭлемента);
			
			УдаляемаяГруппа = ЭлементФормы.Родитель;
			Для Каждого ЭлементГруппы Из УдаляемаяГруппа.ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементГруппы);
			КонецЦикла;
			УдаляемыеЭлементы.Добавить(УдаляемаяГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого ЭлементГруппы Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(ЭлементГруппы);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеИдентификаторы, УдаляемыеИдентификаторы);
	
	// Проставляем ранее сохраненные значения.
	Для Каждого ДобавленныйРеквизит Из ДобавляемыеИдентификаторы Цикл
		
		Если СтрЗаканчиваетсяНа(ДобавленныйРеквизит.Имя, СуффиксДействия) Тогда
			ЭтотОбъект[ДобавленныйРеквизит.Имя] = НСтр("ru = 'Выбрать'");
		ИначеЕсли СтрЗаканчиваетсяНа(ДобавленныйРеквизит.Имя, СуффиксПереключателя) Тогда
			ЭтотОбъект[ДобавленныйРеквизит.Имя] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	ПредыдущийИдентификатор = "";
	Для Каждого ДопФайл Из Объект.ДополнительныеФайлы Цикл
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			
			НомерВГруппе = НомерВГруппе + 1;
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизитаСНомером);
			
		Иначе
			
			НомерВГруппе = 0;
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
			
		КонецЕсли;
		Если ПроверенныеЭлементы.Свойство(ИмяЭлемента) Тогда
			ЭтотОбъект[ИмяЭлемента] = ?(ДопФайл.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайл.Значение), НСтр("ru = 'Выбрать'"), НСтр("ru = 'Открыть'"));
		КонецЕсли;
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			// Нужны только первые из ключей в группе файлов по одному идентификатору.
			Продолжить;
		КонецЕсли;
		ПредыдущийИдентификатор = ДопФайл.Идентификатор;
		
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
		
		Если ПроверенныеФлаги.Свойство(ИмяЭлемента) Тогда
			ЭтотОбъект[ИмяЭлемента] = Не ДопФайл.ДанныеОтсутствуют;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыПоОписаниямФайлов()
	
	// Ранее были удалены лишние реквизиты и элементы, а также добавлены новые реквизиты для флажков необязательных файлов.
	// Остается только добавить элементы формы для доп.файлов.
	
	ГруппаДляПрочихДопФайлов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		Элементы.ГруппаДополнительныеФайлыИП, Элементы.ГруппаДополнительныеФайлыЮЛ);
		
	БанкиПолучатели = Объект.ПолучателиДополнительнойИнформации.Выгрузить(Новый Структура("ЭтоФайл", Истина), "Банк");
	БанкиПолучатели.Свернуть("Банк");
	ГруппаДляПрочихДопФайлов.Заголовок = ?(БанкиПолучатели.Количество() = 1,
		СтрШаблон(НСтр("ru='Дополнительные файлы для %1'"), БанкиПолучатели[0].Банк),
		НСтр("ru='Дополнительные файлы для отдельных получателей заявки'"));
		
	// Анализируем, есть ли необязательные файлы среди выводящихся в списке.
	ДелатьОтступыПередОписанием = Ложь;
	Если Не ТолькоПросмотр Тогда
		Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
			
			Если ДопФайл.Обязательный Тогда // обязательный файл не требует отступа
				Продолжить;
			КонецЕсли;
			
			ДелатьОтступыПередОписанием = Не ДопФайл.Предопределенный;
			Если ДелатьОтступыПередОписанием Тогда // нашли файл, для которого нужен флаг или отступ
				Прервать;
			КонецЕсли;
			
			// Предопределенный идентификатор, для которого в коде не задано определенное место.
			ДелатьОтступыПередОписанием = ДопФайл.Идентификатор <> ИдентификаторПаспортУчредителя()
				И ДопФайл.Идентификатор <> Документы.ЗаявкаНаКредит.ИдентификаторПаспортРуководителя()
				И (ДопФайл.Идентификатор <> Документы.ЗаявкаНаКредит.ИдентификаторКоммерческоеПредложение()
				   Или Объект.СервисОбменаСБанками <> Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг);
			Если ДелатьОтступыПередОписанием Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Создаем группы и наполняем их элементами.
	Элементы.ГруппаПаспортУчредителя.Видимость = Ложь;
	
	ОтборПоКлючуСтроки = Новый Структура("КлючСтрокиФайла");
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		
		ГруппаРодительДопФайлов = ГруппаДляПрочихДопФайлов;
		Если ДопФайл.Предопределенный Тогда
			
			Если ДопФайл.Идентификатор = ИдентификаторПаспортУчредителя() Тогда
				
				Элементы.ГруппаПаспортУчредителя.Видимость = Истина;
				
				// Заполняем описания ранее приложенных сканов.
				Для Каждого Учредитель Из Объект.Учредители Цикл
					ЗаполнитьПоляДопФайлаПаспортУчредителя(Учредитель, ДопФайл);
				КонецЦикла;
				Продолжить;
				
			ИначеЕсли ДопФайл.Идентификатор = Документы.ЗаявкаНаКредит.ИдентификаторПаспортРуководителя() Тогда
				
				ГруппаРодительДопФайлов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
					Элементы.ПаспортныеДанныеИП, Элементы.ПаспортныеДанныеРуководителя)
				
			ИначеЕсли ДопФайл.Идентификатор = Документы.ЗаявкаНаКредит.ИдентификаторКоммерческоеПредложение() Тогда
				
				Если Объект.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаЛизинг Тогда
					
					ГруппаРодительДопФайлов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
						Элементы.ГруппаПредметЛизингаИП, Элементы.ГруппаПредметЛизингаЮЛ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборПоКлючуСтроки.КлючСтрокиФайла = ДопФайл.КлючСтрокиФайла;
		ДопФайлЗначения = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоКлючуСтроки);
		ДопФайлЗначение = ?(ДопФайлЗначения.Количество() = 0,
			Новый Структура("ДанныеОтсутствуют,Значение", Истина, Неопределено), ДопФайлЗначения[0]);
		Если ТолькоПросмотр
		   И (ДопФайлЗначение.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Группа для строки элементов.
		ИмяЭлемента = "Группа" + ДопФайл.Идентификатор;
		ГруппаЭлементов = Элементы.Найти(ИмяЭлемента);
		Если ГруппаЭлементов = Неопределено Тогда
			ГруппаЭлементов = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаРодительДопФайлов);
		КонецЕсли;
		ГруппаЭлементов.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Отображение          = ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементов.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ГруппаЭлементов.Видимость = Истина;
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяРеквизита, ДопФайл, ДопФайлЗначение, Истина, ДелатьОтступыПередОписанием);
		
		Если ДопФайл.Количество < 2 Или ДопФайлЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ДопФайлЗначение);
		Для НомерВГруппе = 1 По ДопФайл.Количество - 1 Цикл
			
			ДопФайлЗначение = Объект.ДополнительныеФайлы[ИндексЗначения + НомерВГруппе];
			Если ТолькоПросмотр
			   И (ДопФайлЗначение.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
				Продолжить;
			КонецЕсли;
			
			// Группа для строки элементов.
			ИмяЭлемента = ИдентификаторСНомеромВГруппе("Группа" + ДопФайл.Идентификатор, НомерВГруппе);
			ГруппаЭлементов = Элементы.Найти(ИмяЭлемента);
			Если ГруппаЭлементов = Неопределено Тогда
				ГруппаЭлементов = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаРодительДопФайлов);
			КонецЕсли;
			ГруппаЭлементов.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементов.Отображение          = ОтображениеОбычнойГруппы.Нет;
			ГруппаЭлементов.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементов.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			
			ГруппаЭлементов.Видимость = (ДопФайл.Обязательный Или Не ДопФайлЗначение.ДанныеОтсутствуют);			
			ИмяЭлемента = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяЭлемента, ДопФайл, ДопФайлЗначение, Ложь, ДелатьОтступыПередОписанием);
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяРеквизита, ДопФайл, ДопФайлЗначение, ПервыйВГруппе, ДелатьОтступыПередОписанием)
	
	ШиринаПредставления = 17;
	ШиринаПереключателя = 2;
	ШиринаОписания      = 7;
	ШиринаДействия      = 6;
	ШиринаЗаглушки      = 1;
	ШиринаШаблона       = ?(ПервыйВГруппе, 11, 5);

	// Краткое представление доп.файла.
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
	НужныйЭлемент.Ширина    = ШиринаПредставления;
	НужныйЭлемент.Заголовок = ?(ПервыйВГруппе, ДопФайл.КраткоеПредставление, "");
	
	Если Не ТолькоПросмотр Тогда
		// Переключатель или пустота. Создаем оба элемента, но видим будет только один.
		Если ПервыйВГруппе Тогда
			
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
			НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
			Если НужныйЭлемент = Неопределено Тогда
				НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
				НужныйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				НужныйЭлемент.ПутьКДанным = ИмяЭлемента;
			КонецЕсли;
			НужныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НужныйЭлемент.УстановитьДействие("ПриИзменении", "ДополнительныйФайл_ПереключательПриИзменении");
			НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			НужныйЭлемент.Видимость = Не ДопФайл.Обязательный И (ДелатьОтступыПередОписанием Или ДопФайл.Предопределенный);
			Если НужныйЭлемент.Видимость Тогда
				ЭтотОбъект[ИмяЭлемента] = Не ДопФайлЗначение.ДанныеОтсутствуют;
			КонецЕсли;	
			
		КонецЕсли;
		
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита + "Отбивка");
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
			НужныйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		КонецЕсли;
		НужныйЭлемент.Ширина = ШиринаПереключателя;
		Если ПервыйВГруппе Тогда
			НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		НужныйЭлемент.Видимость = ДелатьОтступыПередОписанием И (Не ПервыйВГруппе Или ДопФайл.Обязательный);
			
	КонецЕсли;
	
	// Описание
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОписания(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид         = ВидДекорацииФормы.Надпись;
	НужныйЭлемент.Ширина      = ШиринаОписания;
	НужныйЭлемент.Заголовок   = ?(ПервыйВГруппе, "Описание", "");
	НужныйЭлемент.ГоризонтальноеПоложение = ?(ТолькоПросмотр Или ДопФайл.Обязательный Или Не ПервыйВГруппе,
		ГоризонтальноеПоложениеЭлемента.Лево, ГоризонтальноеПоложениеЭлемента.Центр);
	Если ПервыйВГруппе Тогда
		
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ОписаниеНажатие");
	
	КонецЕсли;
	
	ВидимостьЭлементов = ПервыйВГруппе И (ДопФайл.Обязательный Или Не ДопФайлЗначение.ДанныеОтсутствуют);
	
	// Действие
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
		НужныйЭлемент.Вид         = ВидПоляФормы.ПолеНадписи;
		НужныйЭлемент.ПутьКДанным = ИмяЭлемента;
	КонецЕсли;
	НужныйЭлемент.АвтоМаксимальнаяШирина       = Ложь;
	НужныйЭлемент.МаксимальнаяШирина           = ШиринаДействия;
	НужныйЭлемент.Ширина                       = ШиринаДействия;
	НужныйЭлемент.Гиперссылка                  = Истина;
	НужныйЭлемент.ПоложениеЗаголовка           = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НужныйЭлемент.ГоризонтальноеПоложение = ?(ТолькоПросмотр Или ДопФайл.Обязательный Или Не ПервыйВГруппе,
		ГоризонтальноеПоложениеЭлемента.Лево, ГоризонтальноеПоложениеЭлемента.Центр);
	НужныйЭлемент.ЦветТекста              = ?(ЗначениеЗаполнено(ДопФайлЗначение.Значение), Новый Цвет, ЦветаСтиля.НезаполненныйРеквизит);
	Если ПервыйВГруппе Тогда
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ДействиеНажатие");
	НужныйЭлемент.Видимость = ВидимостьЭлементов Или Не ПервыйВГруппе;

	// Очистка
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
	НужныйЭлемент.Ширина      = ШиринаПереключателя;
	НужныйЭлемент.Высота      = ШиринаЗаглушки;
	Если Не ТолькоПросмотр
	   И (Не ПервыйВГруппе Или ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.Картинка = БиблиотекаКартинок.ПолеВводаОчистить;
	Иначе	
		НужныйЭлемент.Гиперссылка = Ложь;
		НужныйЭлемент.Картинка = Новый Картинка;
	КонецЕсли;
	Если ПервыйВГруппе Тогда
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ОчисткаНажатие");
	НужныйЭлемент.Видимость = ВидимостьЭлементов
		Или Не ПервыйВГруппе И ЗначениеЗаполнено(ДопФайлЗначение.Значение);
		
	Если Не ПервыйВГруппе Тогда
		Возврат;
	КонецЕсли;
		
	// Шаблон.
	Если ЗначениеЗаполнено(ДопФайл.ИмяФайлаШаблона) Тогда
		
		// Пустота.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
		КонецЕсли;
		НужныйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
		НужныйЭлемент.Ширина    = ШиринаПереключателя;
		НужныйЭлемент.Видимость = ВидимостьЭлементов;
		
		// Ссылка на шаблон.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
		КонецЕсли;
		НужныйЭлемент.Вид         = ВидДекорацииФормы.Надпись;
		НужныйЭлемент.Ширина      = ШиринаШаблона;
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НужныйЭлемент.Заголовок   = "Скачать шаблон";
		НужныйЭлемент.Подсказка   = ДопФайл.ИмяФайлаШаблона;
		НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ШаблонНажатие");
		НужныйЭлемент.Видимость = ВидимостьЭлементов;
		
	Иначе
		// Может быть две ситуации:
		// * В подавляющем большинстве случаев элементы формы для шаблона не создавались и не должны быть созданы.
		// * Редкая ситуация, когда на форме для этого идентификатора уже были созданы элементы для шаблона, но изменился набор банков,
		//   и согласно новым настройкам шаблон уже не нужен. Тогда мы просто скрываем элементы.
		
		// Ссылка на шаблон.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент <> Неопределено Тогда
			НужныйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		// Пустота.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент <> Неопределено Тогда
			НужныйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для указанного элемента формы возращает информацию о дополнительном файле, связанном с ним.
//
// Параметры:
//  ИмяЭлемента  - элемент, связанный с доп.файлом.
//  ПолучитьЗначение - получить не только описание, но и строку таблицы, хранящей значение файла.
//
// Возвращаемое значение:
//   Структура   - описание дополнительного файла:
//                * Идентификатор - Строка - идентификатор описания файла.
//                * НомерВГруппе - Число - если по одному описанию можно ввести несколько файлов.
//                * Описание - ДанныеФормыЭлементКоллекции - строка из реквизита формы ОписаниеДополнительныхФайлов.
//                * Значение - ДанныеФормыЭлементКоллекции - строка из табличной части ДополнительныеФайлы.
//
&НаКлиенте
Функция ИнформацияОДополнительномФайле(ИмяЭлемента, ПолучитьЗначение = Ложь)
	
	ИнформацияОДопФайле = Новый Структура;
	ИнформацияОДопФайле.Вставить("Идентификатор", "");
	ИнформацияОДопФайле.Вставить("НомерВГруппе", "");
	ИнформацияОДопФайле.Вставить("Описание");
	ИнформацияОДопФайле.Вставить("Значение");
	
	// Имена элементов формы, связанных с дополнительными файлами, состоят из трех частей, разделенных "_".
	// <ПризнакФункциональности>_<ИдентификаторФайла>_<ТипЭлемента> , где:
	//  <ПризнакФункциональности> = см. УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла()
	//  <ИдентификаторФайла> = "Идентификатор" с таблице ОписаниеДополнительныхФайлов
	//  <ТипЭлемента> = см. в модуле УниверсальныйОбменСБанкамиФормыКлиентСервер функции вида "Имя..."
	
	ПозицияДоИдентификатора = СтрНайти(ИмяЭлемента, "_");
	ПозицияПослеИдентификатора = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца);
	Если ПозицияПослеИдентификатора = 0 Или ПозицияДоИдентификатора = ПозицияПослеИдентификатора Тогда
		ПозицияПослеИдентификатора = СтрДлина(ИмяЭлемента) + 1;
	КонецЕсли;

	НомерВГруппеСимволы = Новый Массив;
	Для Сдвиг = 1 По ПозицияПослеИдентификатора - ПозицияДоИдентификатора Цикл
		
		АнализируемыйСимвол = Сред(ИмяЭлемента, ПозицияПослеИдентификатора - Сдвиг, 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АнализируемыйСимвол) Тогда
			НомерВГруппеСимволы.Вставить(0, АнализируемыйСимвол);
		Иначе
			ИнформацияОДопФайле.Идентификатор = Сред(ИмяЭлемента,
											ПозицияДоИдентификатора + 1,
											ПозицияПослеИдентификатора - Сдвиг - ПозицияДоИдентификатора);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	НомерВГруппеСтрокой = СтрСоединить(НомерВГруппеСимволы);
	
	ИнформацияОДопФайле.НомерВГруппе = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерВГруппеСтрокой);
	Если ИнформацияОДопФайле.НомерВГруппе = Неопределено Тогда
		ИнформацияОДопФайле.НомерВГруппе = 0;
	КонецЕсли;
					
	Если ПустаяСтрока(ИнформацияОДопФайле.Идентификатор) Тогда
		Возврат ИнформацияОДопФайле;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура("Идентификатор", ИнформацияОДопФайле.Идентификатор);
	ОписаниеФайла = ОписаниеДополнительныхФайлов.НайтиСтроки(ОтборПоиска);
	Если ОписаниеФайла.Количество() > 0 Тогда
		ИнформацияОДопФайле.Описание = ОписаниеФайла[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Отсутствует описание вводимого файла'");
	КонецЕсли;
	
	Если Не ПолучитьЗначение Тогда
		Возврат ИнформацияОДопФайле;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура("КлючСтрокиФайла",
		ИнформацияОДопФайле.Описание.КлючСтрокиФайла + ИнформацияОДопФайле.НомерВГруппе);
	ОписаниеФайла = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоиска);
	Если ОписаниеФайла.Количество() > 0 Тогда
		ИнформацияОДопФайле.Значение = ОписаниеФайла[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Ввод значения доп.файла не предусмотрен'");
	КонецЕсли;
	
	Возврат ИнформацияОДопФайле;
	
КонецФункции

&НаКлиенте
Процедура ДополнительныйФайл_ПереключательПриИзменении(Элемент)
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	Если ИнформацияОДопФайле.Описание.Обязательный Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя изменять доступность ввода данных для обязательного файла'");
	КонецЕсли;
	
	ДоступенВводФайла = ИнформацияОДопФайле.Значение.ДанныеОтсутствуют; // флаг на форме уже инвертирован
	
	НомерВГруппе = -1;
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение);
	Для инд = ИндексЗначения По ИндексЗначения + ИнформацияОДопФайле.Описание.Количество - 1 Цикл
		
		НомерВГруппе = НомерВГруппе + 1;
		
		ДопФайл = Объект.ДополнительныеФайлы[инд];
		ДопФайл.ДанныеОтсутствуют = Не ДоступенВводФайла;
		
		Если ДоступенВводФайла Тогда // дать возможность ввести доп.файлы по данному идентификатору
			
			Если НомерВГруппе > 0 Тогда
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе("Группа" + ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				Элементы[ИмяСНомером].Видимость = ДоступенВводФайла;
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла;
				
			Иначе // первая строка по данному файлу
				
				ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИнформацияОДопФайле.Идентификатор);
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла;
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла; // пустая картинка, но элемент занимает свое место
				
				Если ЗначениеЗаполнено(ИнформацияОДопФайле.Описание.ИмяФайлаШаблона) Тогда
					
					НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита)];
					НужныйЭлемент.Видимость = ДоступенВводФайла;
					
					НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита)];
					НужныйЭлемент.Видимость = ДоступенВводФайла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // скрыть ввод доп.файла и нижележащих строк
			
			ДопФайл.Значение = Неопределено;
			Модифицированность = Истина;
			
			ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
			ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
			НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
			ДополнительныйФайл_ОчисткаНажатие(НужныйЭлемент);
			
			Если НомерВГруппе > 0 Тогда
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе("Группа" + ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				Элементы[ИмяСНомером].Видимость = Ложь;
				
			Иначе // оставляем представление и описание
				
				Если ЗначениеЗаполнено(ИнформацияОДопФайле.Описание.ИмяФайлаШаблона) Тогда
					
					ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
					НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
					Если НужныйЭлемент <> Неопределено Тогда
						НужныйЭлемент.Видимость = ДоступенВводФайла;
					КонецЕсли;
					
					ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
					НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
					Если НужныйЭлемент <> Неопределено Тогда
						НужныйЭлемент.Видимость = ДоступенВводФайла;
					КонецЕсли;
					
				КонецЕсли;
				
				НужныйЭлемент.Видимость = Ложь; // очистка
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ОписаниеНажатие(Элемент)
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя);
	ОткрытьОписаниеПрисоединенногоФайла(ИнформацияОДопФайле.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОписаниеПрисоединенногоФайла(ОписаниеДопФайла)
	
	ПараметрыФормы = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыФормы.Сервис = Объект.СервисОбменаСБанками;
	ПараметрыФормы.Характеристика = ПредопределенноеЗначение("Перечисление.ХарактеристикиСервисаЗаявкиНаКредит.ШаблоныФайлов");
	
	ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ОписаниеДопФайла.КлючСтрокиФайла, Истина);
	СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
	Для Каждого ПолучательДопФайла Из СохраненныеПолучатели Цикл
		ПараметрыФормы.Банки.Добавить(ПолучательДопФайла.Банк);
	КонецЦикла;

	ПараметрыФормы.Заголовок         = ОписаниеДопФайла.КраткоеПредставление;
	ПараметрыФормы.ПодробноеОписание = ?(ПустаяСтрока(ОписаниеДопФайла.ПодробноеПредставление),
		ОписаниеДопФайла.КраткоеПредставление, ОписаниеДопФайла.ПодробноеПредставление);
	Если Не ПустаяСтрока(ОписаниеДопФайла.ИмяФайлаШаблона) Тогда
		ПараметрыФормы.ИмяФайлаШаблона = ОписаниеДопФайла.ИмяФайлаШаблона;
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОткрытьОписаниеПрисоединенногоФайла(ЭтотОбъект, ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПаспортУчредителя()
	
	Возврат Документы.ЗаявкаНаКредит.ИдентификаторПаспортУчредителя();
	
КонецФункции

&НаКлиенте
Процедура ДополнительныйФайл_ДействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	Если ЗначениеЗаполнено(ИнформацияОДопФайле.Значение.Значение) Тогда // открыть ранее введенный файл
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ИнформацияОДопФайле.Значение.Значение, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		Возврат;
		
	КонецЕсли;
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Если среди предыдущих в группе есть незаполненные, то заполняем именно их.
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение);
	ИндексПредыдущегоЗначения = ИндексЗначения - ИнформацияОДопФайле.НомерВГруппе;
	Пока ИндексПредыдущегоЗначения < ИндексЗначения Цикл
		
		Если Не ЗначениеЗаполнено(Объект.ДополнительныеФайлы[ИндексПредыдущегоЗначения].Значение) Тогда
			
			НомерВГруппе = ИндексПредыдущегоЗначения - ИндексЗначения + ИнформацияОДопФайле.НомерВГруппе;
			ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером));
			ИнформацияОДопФайле = ИнформацияОДополнительномФайле(ИмяЭлемента, Истина);
			Прервать;
			
		КонецЕсли;
		
		ИндексПредыдущегоЗначения = ИндексПредыдущегоЗначения + 1;
		
	КонецЦикла;
	
	ВывестиВариантыВыбораФайла(ИнформацияОДопФайле, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВариантыВыбораФайла(ИнформацияОДопФайле, Элемент)
	
	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФайлСДиска",         НСтр("ru = 'Файл с диска...'"));
	СписокВариантов.Добавить("ПрисоединенныйФайл", НСтр("ru = 'Присоединенный файл...'"));
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВывестиВариантыВыбораФайлаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);
	ПоказатьВыборИзМеню(ОповещениеОВыборе, СписокВариантов, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВариантыВыбораФайлаЗавершение(ВыбранныйВариант, ИнформацияОДопФайле) Экспорт
	
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;                                                                                                                  
	КонецЕсли;
	
	// Запишем документ, чтобы к нему можно было прикреплять файлы.
	Если Не ПроверитьИЗаписать(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокДиалога = ИнформацияОДопФайле.Описание.КраткоеПредставление;
	ПараметрыВыбораФайла = ИнформацияОДопФайле.Описание.ПараметрыВыбораФайла;
	Если Не ЗначениеЗаполнено(ПараметрыВыбораФайла) Тогда
		ПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	КонецЕсли;
	
	Если ВыбранныйВариант.Значение = "ПрисоединенныйФайл" Тогда
		
		ПараметрыДиалогаВыбора = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
		ПараметрыДиалогаВыбора.Заголовок           = ЗаголовокДиалога;
		ПараметрыДиалогаВыбора.МаксимальныйРазмер  = ПараметрыВыбораФайла.МаксимальныйРазмер;
		ПараметрыДиалогаВыбора.ФильтрДиалогаВыбора = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;
		
		ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборПрисоединенногоФайлаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);
		ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенногоФайла", ПараметрыДиалогаВыбора, ЭтотОбъект, ,,, ОповещениеОВыборе);
		
	ИначеЕсли ВыбранныйВариант.Значение = "ФайлСДиска" Тогда
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок  = ЗаголовокДиалога;
		ДиалогВыбора.Фильтр     = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;
		ДиалогВыбора.Расширение = ПараметрыВыбораФайла.Расширение;

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСДискаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);

		ПараметрыДобавления = Новый Структура;
		// Максимальный размер в настройках банка хранится в Кб, в БСП требуется передавать в Мб.
		ПараметрыДобавления.Вставить("МаксимальныйРазмер",  ПараметрыВыбораФайла.МаксимальныйРазмер / 1024);
		ПараметрыДобавления.Вставить("ФильтрДиалогаВыбора", ПараметрыВыбораФайла.ФильтрДиалогаВыбора);
		ПараметрыДобавления.Вставить("НеОткрыватьКарточку", Истина);

		РаботаСФайламиКлиент.ДобавитьФайл(ОписаниеОповещения,
			Объект.Ссылка,
			ЭтотОбъект,
			2, // Режим создания - с диска (из файловой системы клиента)
			ПараметрыДобавления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПрисоединенногоФайлаЗавершение(Результат, ИнформацияОДопФайле) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;
	
	ЗапомнитьВыбранныйФайл(Результат, ИнформацияОДопФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСДискаЗавершение(Результат, ИнформацияОДопФайле) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Результат.ФайлСсылка) Тогда
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗапомнитьВыбранныйФайл(Результат.ФайлСсылка, ИнформацияОДопФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьВыбранныйФайл(ФайлСсылка, ИнформацияОДопФайле)
	
	Если ИнформацияОДопФайле.Идентификатор = ИдентификаторПаспортУчредителя() Тогда
		
		Учредитель = Элементы.Учредители.ТекущиеДанные;
		Учредитель.ПаспортУчредителя = ФайлСсылка;
		Модифицированность = Истина;
		
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Действие = НСтр("ru = 'Открыть'");
		Учредитель.ДополнительныйФайл_ПаспортУчредителя_Очистка = БиблиотекаКартинок.ПолеВводаОчистить;
		
	Иначе
		
		ИнформацияОДопФайле.Значение.Значение = ФайлСсылка;
		Модифицированность = Истина;
		
		ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, ИнформацияОДопФайле.НомерВГруппе);
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
		ЭтотОбъект[ИмяЭлемента] = НСтр("ru = 'Открыть'");
		Элементы[ИмяЭлемента].ЦветТекста = Новый Цвет;
		
		НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
		Если ИнформацияОДопФайле.НомерВГруппе = 0 Тогда
			НужныйЭлемент.Гиперссылка = Истина;
			НужныйЭлемент.Картинка    = БиблиотекаКартинок.ПолеВводаОчистить;
		Иначе
			НужныйЭлемент.Видимость   = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ОчисткаНажатие(Элемент)
	
	// Заполненные файлы должны быть расположены подряд.
	// Например, имеем по одному идентификатору четыре строки с прикрепленными файлами: "Альфа", "Бета", "Гамма" и <пусто>.
	// Пользователь удаляет "Бета". Остаются строки: "Альфа", "Гамма", <пусто> и <пусто>.
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	// Если следующий в группе заполнен, то очищаем именно его.
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение) + 1;
	ПоследнийВГруппе = ИндексЗначения + ИнформацияОДопФайле.Описание.Количество - ИнформацияОДопФайле.НомерВГруппе - 2;
	Пока ИндексЗначения <= ПоследнийВГруппе Цикл
		
		Если ЗначениеЗаполнено(Объект.ДополнительныеФайлы[ИндексЗначения].Значение) Тогда
			
			Объект.ДополнительныеФайлы[ИндексЗначения - 1].Значение = Объект.ДополнительныеФайлы[ИндексЗначения].Значение;
			Объект.ДополнительныеФайлы[ИндексЗначения].Значение = Неопределено;
			
			ИнформацияОДопФайле.Значение = Объект.ДополнительныеФайлы[ИндексЗначения];
			ИнформацияОДопФайле.НомерВГруппе = ИнформацияОДопФайле.НомерВГруппе + 1;
			
		Иначе
			// Текущее значение в ИнформацияОДопФайле.Значение - это то, которое нужно очистить.
			Прервать;
			
		КонецЕсли;
		
		ИндексЗначения = ИндексЗначения + 1;
		
	КонецЦикла;
	
	ИнформацияОДопФайле.Значение.Значение = Неопределено;
	Модифицированность = Истина;
	
	ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, ИнформацияОДопФайле.НомерВГруппе);
	ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
	ЭтотОбъект[ИмяЭлемента] = "Выбрать";
	Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("НезаполненныйРеквизит");
	
	НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
	Если ИнформацияОДопФайле.НомерВГруппе = 0 Тогда
		НужныйЭлемент.Гиперссылка = Ложь;
		НужныйЭлемент.Картинка = Новый Картинка;
	Иначе
		НужныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ШаблонНажатие(Элемент)

	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя);
	
	ПараметрыШаблона = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыШаблона.Сервис = Объект.СервисОбменаСБанками;
	ПараметрыШаблона.Характеристика = ПредопределенноеЗначение("Перечисление.ХарактеристикиСервисаЗаявкиНаКредит.ШаблоныФайлов");
	ПараметрыШаблона.ИмяФайлаШаблона = ИнформацияОДопФайле.Описание.ИмяФайлаШаблона;
	
	ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ИнформацияОДопФайле.Описание.КлючСтрокиФайла, Истина);
	СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
	Для Каждого ПолучательДопФайла Из СохраненныеПолучатели Цикл
		ПараметрыШаблона.Банки.Добавить(ПолучательДопФайла.Банк);
	КонецЦикла;

	УниверсальныйОбменСБанкамиФормыКлиент.СохранитьФайлШаблона(ПараметрыШаблона);
	
КонецПроцедуры

// Названия файлов, как они названы в интерфейсе.
//
&НаКлиенте
Функция ПредставленияДополнительныхФайлов()

	ПредставленияФайлов = Новый СписокЗначений;
	
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		ПредставленияФайлов.Добавить(ДопФайл.КлючСтрокиФайла, ДопФайл.КраткоеПредставление, ДопФайл.Обязательный);
	КонецЦикла;
	
	Возврат ПредставленияФайлов;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура Подключаемый_ПодключитьИнтернетПоддержкуПользователей()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);	

	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторно получаем данные о сервисе по кредитам и запускаем обновление данных.
		ОбновитьСведенияОСервисе();
		ОжидатьЗавершениеОбновленияДанныхСервиса();
	Иначе
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявки необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);

		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// Закрываем текущую заявку, если она новая, т.к. работать с сервисом по кредитам нельзя.
			ЗакрыватьФормуБезусловно = Истина;
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОСервисе()

	Если Параметры.Свойство("СведенияОСервисе") Тогда
		СведенияОСервисе = Параметры.СведенияОСервисе;
	Иначе
		СведенияОСервисе = УниверсальныйОбменСБанками.СведенияОСервисе(Объект.СервисОбменаСБанками);
	КонецЕсли;
	
	ЗаявкиНаКредит.НачатьОбновлениеДанныхСервиса(Объект.СервисОбменаСБанками, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхСервиса

&НаКлиенте
Процедура ОжидатьЗавершениеОбновленияДанныхСервиса()

	Если СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено Тогда
		// Фоновое задание не запущено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещенияОЗавершении = Новый ОписаниеОповещения("ОбновлениеДанныхСервисаЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперация,
		ОповещенияОЗавершении,
		ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;	
	КонецЕсли;

	СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено; // Сбросим признак выполнения.
	
	ЕстьОшибки = Ложь;
	// Запомним, что текущее фоновое задание завершилось, чтобы можно было переходить к следующим шагам.
	ОписаниеОшибкиОбновленияДанныхСервиса = "";
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус", "") = "Ошибка" Тогда
		// Ошибка работы фонового задания.
		ЕстьОшибки = Истина;
		ОписаниеОшибкиОбновленияДанныхСервиса = Результат.КраткоеПредставлениеОшибки;   
		Если ОшибкаАвторизацииПоЛогину Тогда
				
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при авторизации по логину ИТС: %1
                                            |Проверьте правильность указания пользователя и пароля.'"); 
			ТекстПредупреждения = СтрШаблон(ШаблонСообщенияОбОшибке, ОписаниеОшибкиОбновленияДанныхСервиса); 
		Иначе
			
			ТекстПредупреждения = УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(
			ОписаниеОшибкиОбновленияДанныхСервиса);

		КонецЕсли;
		
	Иначе
		
		РезультатОбновленияДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОбновленияДанных.ИмяСобытия <> "ДанныеАктуальны" Тогда
			// Ошибка результата фонового задания. Сохраним и отобразим ее описание ошибки.
			ЕстьОшибки = Истина;
			
			ОписаниеОшибкиОбновленияДанныхСервиса = РезультатОбновленияДанных.ОписаниеСобытия;
			Если РезультатОбновленияДанных.ИмяСобытия = "ОшибкаАвторизацииПоЛогину" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при авторизации по логину ИТС: %1
                                                |Проверьте правильность указания пользователя и пароля.'"); 
				ОшибкаАвторизацииПоЛогину = Истина;
				
			ИначеЕсли РезультатОбновленияДанных.ИмяСобытия = "ОшибкаПриПолученииТикета" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка прав доступа к ресурсу (тикета): %1
                                                |Обратитесь к админинстраторам ресурса.'");
				
			ИначеЕсли РезультатОбновленияДанных.ИмяСобытия = "ОшибкаПриПолученииДанных" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при получении данных: %1
                                                |Попробуйте повторно запустить обновление данных сервиса.'");
				                              
			КонецЕсли;
			Если РезультатОбновленияДанных.ИмяСобытия = "Ошибка" Тогда
				ТекстПредупреждения = УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(
					ОписаниеОшибкиОбновленияДанныхСервиса);
			Иначе
				ТекстПредупреждения = СтрШаблон(ШаблонСообщенияОбОшибке, ОписаниеОшибкиОбновленияДанныхСервиса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// В случае ошибки доступа к сервису для новой заявки остаемся на первой странице.
			УстановитьВидимостьСтраницыНачало();
		
			// Выводим предупреждение возле кнопки Далее.
			Элементы.ГруппаСообщениеОбОшибкеНачало.Видимость  = Истина;
			Элементы.НадписьСообщениеОбОшибкеНачало.Заголовок = ТекстПредупреждения;
			
		Иначе
			Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаБанки Тогда
				// Обновим страницу банков, чтобы на ней отобразилось предупреждение.
				УстановитьВидимостьСтраницыБанки();
			КонецЕсли;
		КонецЕсли;
			
		// Выводим предупреждения возле кнопок отправки на последней странице.
		Элементы.ГруппаСообщениеОбОшибкеИП.Видимость  = Истина;
		Элементы.НадписьСообщениеОбОшибкеИП.Заголовок = ТекстПредупреждения;

		Элементы.ГруппаСообщениеОбОшибкеЮЛ.Видимость  = Истина;
		Элементы.НадписьСообщениеОбОшибкеЮЛ.Заголовок = ТекстПредупреждения;
		
		// Заблокируем возможность отправки.
		Элементы.ПодписатьИОтправитьИП.Доступность = Ложь;
		Элементы.ПодписатьИОтправитьЮЛ.Доступность = Ложь;
		
	ИначеЕсли ПерейтиКСтраницеБанковПослеОбновления Тогда

		// Переходим к странице банков.
		ПерейтиКСтраницеБанковПослеОбновления = Ложь;
		НачатьЗамерВремениПодборБанков();
		УстановитьВидимостьСтраницыБанки();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегламентированныеОтчетность

&НаСервере
Процедура УстановитьСписокВыбораПериодаРегистрации()
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	
	ОсобыеМесяцы = Новый Массив;
	ОсобыеМесяцы.Добавить(1);  // Начало года
	ОсобыеМесяцы.Добавить(2);  // Начало года
	ОсобыеМесяцы.Добавить(3);  // Начало года
	ОсобыеМесяцы.Добавить(4);  // Начало 2 квартала
	ОсобыеМесяцы.Добавить(7);  // Начало 3 квартала
	ОсобыеМесяцы.Добавить(10); // Начало 4 квартала
	ЭтоНачалоКварталаИлиГода = ОсобыеМесяцы.Найти(Месяц(Период)) <> Неопределено;
	
	СписокВыбора = Элементы.ПериодРегистрации.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	// Можно выбрать текущий или один из прошлых месяцев,
	// но не ранее последнего месяца предыдущего квартала.
	КонецПредыдущегоКвартала = НачалоМесяца(НачалоКвартала(Период) - 1);
	Пока Период >= КонецПредыдущегоКвартала Цикл
		СписокВыбора.Добавить(Период, Формат(Период, "ДФ='ММММ гггг'"));
		Период = ДобавитьМесяц(Период, -1);
	КонецЦикла;
	
	// В первом квартале и в первый месяц каждого из последующих трех кварталов
	// можно выбирать месяцы вплоть до последнего месяца квартала, предшествующего
	// предыдущему - в эти месяцы предыдущий квартал может быть еще не закрыт.
	Если ЭтоНачалоКварталаИлиГода Тогда 
		КонецПредшествующегоПредыдущемуКвартала = НачалоМесяца(НачалоКвартала(Период) - 1);
		Пока Период >= КонецПредшествующегоПредыдущемуКвартала Цикл
			СписокВыбора.Добавить(Период, Формат(Период, "ДФ='ММММ гггг'"));
			Период = ДобавитьМесяц(Период, -1);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетность()

	Если НЕ ТолькоПросмотр И Объект.ТребуетсяОбновлениеОтчетности Тогда
		// Перестраиваем таблицу требуемых отчетов полностью.
		Документы.ЗаявкаНаКредит.ОбновитьОтчетность(Объект);

		// Могло поменяться количество банков, требующих отчет,
		// поэтому переформируем колонку с представлением банков заново.
		ЗаполнитьДобавленныеКолонкиОтчетности(Истина);
		
		Модифицированность                   = Истина;
		Объект.ТребуетсяОбновлениеОтчетности = Ложь;
	Иначе
		// Заполним вспомогательные колонки, если их еще не заполняли
		ЗаполнитьДобавленныеКолонкиОтчетности(Ложь);
	КонецЕсли;
	
	ТребуетсяОтчетность = Объект.Отчетность.Количество() > 0;
	Элементы.ГруппаОтчетностьНеТребуется.Видимость = НЕ ТребуетсяОтчетность;
	Элементы.ГруппаОтчетность.Видимость = ТребуетсяОтчетность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиОтчетности(ПерезаполнитьВсе)

	// В табличной части Отчетность отобразим либо название банка, которому требуется отчет,
	// либо общее количество банков, если один и тот же отчет затребовали сразу несколько банков.
	
	Если НЕ ПерезаполнитьВсе Тогда
	
		ЕстьПустыеСтроки = Ложь;
		Для каждого СтрокаТаблицы Из Объект.Отчетность Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеБанков) Тогда
				ЕстьПустыеСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПустыеСтроки Тогда
			// Представление во всех строках заполнено ранее, перезаполнять не требуется.
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Отбор = Новый Структура("КлючСтроки");

	ОтчетыДляОдногоБанка = Новый Соответствие; // Ключ - идентификатор строки, Значение - банк.
	Банки = Новый Массив;

	Для каждого СтрокаТаблицы Из Объект.Отчетность Цикл

		Если СтрокаТаблицы.КоличествоБанков > 1 Тогда
			СтрокаТаблицы.ПредставлениеБанков = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru=';%1 получатель;;%1 получателя;%1 получателей;%1 получателей'"), СтрокаТаблицы.КоличествоБанков);
		Иначе
			// Находим банк, который запросил отчет.
			Отбор.КлючСтроки = СтрокаТаблицы.КлючСтроки;
			ПолучателиОтчетности = Объект.ПолучателиОтчетности.НайтиСтроки(Отбор);
			Если ПолучателиОтчетности.Количество() > 0 Тогда
				ПолучательОтчетности = ПолучателиОтчетности[0];

				ОтчетыДляОдногоБанка.Вставить(СтрокаТаблицы.ПолучитьИдентификатор(), ПолучательОтчетности.Банк);
				Если Банки.Найти(ПолучательОтчетности.Банк) = Неопределено Тогда
					Банки.Добавить(ПолучательОтчетности.Банк);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Если Банки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(Банки, "Наименование");
	Для каждого КлючИЗначение Из ОтчетыДляОдногоБанка Цикл
		РеквизитыБанка = РеквизитыБанков.Найти(КлючИЗначение.Значение, "Банк");
		Если РеквизитыБанка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтчета = Объект.Отчетность.НайтиПоИдентификатору(КлючИЗначение.Ключ);
		Если СтрокаОтчета <> Неопределено Тогда
			СтрокаОтчета.ПредставлениеБанков = РеквизитыБанка.Наименование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиБухгалтерскойОтчетности(СтрокаОтчета)

	Если ТолькоПросмотр И НЕ ЗначениеЗаполнено(СтрокаОтчета.РегламентированныйОтчет) Тогда
		// Могли каким-то образом очистить ссылку на рег.отчет,
		// но т.к. сейчас у пользователя нет доступа для редактирования данных заявки,
		// то не разрешаем ему и создавать рег.отчет.
		ПоказатьПредупреждение(, НСтр("ru = 'Данные заявки запрещено редактировать'"));
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаОтчета.РегламентированныйОтчет) Тогда
		// Открываем ранее записанный отчет.
		
		ПараметрыОткрытияФормы = ПараметрыОткрытияФормыРасшифровкиБухгалтерскойОтчетности(
			СтрокаОтчета.РегламентированныйОтчет);

		ОткрытьФорму(ПараметрыОткрытияФормы.ИмяФормы, ПараметрыОткрытияФормы.ПараметрыФормы, ЭтотОбъект);
	
	Иначе
		// Создаем новый отчет.
		КонецОтчетногоПериода = КонецМесяца(Объект.ПериодРегистрации);

		ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности";

		ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			ИсточникОтчета,  КонецОтчетногоПериода);
			
		ПолноеИмяФормы = СтрШаблон("Отчет.%1.Форма.%2", ИсточникОтчета, ВыбраннаяФорма);
		
		ПараметрыФормы = Новый Структура;
		// Строим расшифровки по бухгалтерским счетам по всем обособленным подразделениями.
		ПараметрыФормы.Вставить("Организация",                          Объект.Организация);
		ПараметрыФормы.Вставить("СписокОрганизаций",                    ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Объект.Организация));
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета",             НачалоГода(Объект.ПериодРегистрации));
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",              КонецОтчетногоПериода);
		ПараметрыФормы.Вставить("мСохраненныйДок",                      Неопределено);
		ПараметрыФормы.Вставить("мСкопированаФорма",                    Ложь);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",                      "ФормаОтчета2019Кв1");
		ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
		
		ПараметрыФормы.Вставить("Банк",                                 Неопределено);
		ПараметрыФормы.Вставить("СписокОтчетов",                        СписокОтчетовЗаемщика());
		
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СписокОтчетовЗаемщика()

	СведенияОЗаемщике = Документы.ЗаявкаНаКредит.ПодготовитьСведенияОЗаемщикеДляОтчетности(
		Объект.СервисОбменаСБанками,
		Объект.Организация,
		Объект.ПериодРегистрации);

	ТребуемаяОтчетностьЗаемщика = Документы.ЗаявкаНаКредит.ТребуемаяОтчетностьЗаемщика(
		СведенияОЗаемщике, Объект.Дата, Объект.Банки.Выгрузить());
		
	Результат = Новый Массив;
	Для каждого ТребуемыйОтчетЗаемщика Из ТребуемаяОтчетностьЗаемщика Цикл
	
		ПараметрыОтчетаЗаемщика = ЗаявкиНаКредитКлиентСервер.ПараметрыОтчетаЗаемщика();
		ЗаполнитьЗначенияСвойств(ПараметрыОтчетаЗаемщика, ТребуемыйОтчетЗаемщика);

		Результат.Добавить(ПараметрыОтчетаЗаемщика);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПараметрыОткрытияФормыРасшифровкиБухгалтерскойОтчетности(РегламентированныйОтчет)

	Результат = Новый Структура();
	Результат.Вставить("ИмяФормы");
	Результат.Вставить("ПараметрыФормы");

	Результат.ПараметрыФормы = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(
		РегламентированныйОтчет, "");
		
	// Строим расшифровки по бухгалтерским счетам по всем обособленным подразделениями.
	Результат.ПараметрыФормы.Вставить("СписокОрганизаций", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Объект.Организация));

	Если НЕ ТолькоПросмотр И Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности Тогда
		Результат.ПараметрыФормы.Вставить("СписокОтчетов", СписокОтчетовЗаемщика());
		Результат.ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	КонецЕсли;

	ИсточникОтчета     = РегламентированнаяОтчетностьВызовСервера.ИсточникРегламентированногоОтчета(РегламентированныйОтчет);
	Результат.ИмяФормы = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
		ИсточникОтчета, Результат.ПараметрыФормы.мВыбраннаяФорма);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПолучателиОтчета(СтрокаОтчета)

	Если СтрокаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Банки = ПолучателиОтчета(СтрокаОтчета);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПолучателиОтчета", Банки);
	
	ОткрытьФорму("Документ.ЗаявкаНаКредит.Форма.ПолучателиОтчета", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Функция ПолучателиОтчета(СтрокаОтчета)
	
	Отбор = Новый Структура("КлючСтроки");
	Отбор.КлючСтроки = СтрокаОтчета.КлючСтроки;
	
	Банки = Новый Массив;
	НайденныеСтроки  = Объект.ПолучателиОтчетности.НайтиСтроки(Отбор);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Банки.Добавить(НайденнаяСтрока.Банк);
	КонецЦикла;
	
	Возврат Банки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияОЗаписиРасшифровкиБухгалтерскойОтчетности(Параметр, Источник)

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	// Найдем в таблице Отчетности строку с расшифровкой бухгалтерской отчетности
	// (она может быть только одна) и заполним в ней ссылку на созданный рег.отчет.
	Если ТипЗнч(Источник) <> Тип("ФормаКлиентскогоПриложения")
		ИЛИ Источник.ВладелецФормы <> ЭтотОбъект Тогда
		// Это оповещение из отчета, которые открывали не из текущей заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) <> Тип("ДокументСсылка.РегламентированныйОтчет")
		ИЛИ НЕ ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИсточникОтчета");
	Отбор.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности";
	
	НайденныеСтроки = Объект.Отчетность.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = НайденныеСтроки[0];

	Если НайденнаяСтрока.РегламентированныйОтчет <> Параметр
		ИЛИ Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности Тогда
		НайденнаяСтрока.РегламентированныйОтчет = Параметр;
		// Устанавливаем состояние "Готово", если заполнена ссылка на рег.отчет.
		НайденнаяСтрока.СостояниеОтчета                        = НСтр("ru = 'Готово (П)'");
		Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Ложь;
		Модифицированность                                     = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУдаленияОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаУдаленияОтчетаНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаУдаленияОтчетаНаСервере(ОчищаемыеАналитики)
	Перем РасшифровкаБухгалтерскойОтчетности;
	
	Если ОчищаемыеАналитики.Свойство("РасшифровкаБухгалтерскойОтчетности", РасшифровкаБухгалтерскойОтчетности) Тогда
		УстановитьПометкуУдаленияРегОтчета(РасшифровкаБухгалтерскойОтчетности);
	КонецЕсли;

	СведенияОБанках = СведенияОБанках();
	Для каждого Банк Из ОчищаемыеАналитики.Банки Цикл
		СтрокаТаблицы = СведенияОБанках.Найти(Банк, "Банк");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.НомерГруппы = 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьБанки(Объект);
	
	ОбновитьОтчетность();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеОтчета(Знач СведенияОбОтчете)

	Возврат Документы.ЗаявкаНаКредит.ОписаниеОтчета(СведенияОбОтчете);

КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ПараметрыСогласия(Знач ЗаявкаНаКредит)

	СведенияОЗаявке = Документы.ЗаявкаНаКредит.СведенияОЗаявке(ЗаявкаНаКредит);
	Возврат Документы.ЗаявкаНаКредит.ПараметрыСогласия(СведенияОЗаявке);

КонецФункции

#Область Криптография

&НаКлиенте
Процедура НачатьПоискСертификата()

	Если ТолькоПросмотр Тогда
		// Текущий пользователь не может редактировать и отправлять заявку,
		// проверка возможности работы с криптографией не требуется.
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПоляДляВыбораСертификатаЗаполнены(ЭтотОбъект) Тогда
		// Заполнены не все необходимые реквизиты для поиска.
		УстановитьСвойстваСертификата(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	// Выполняем поиск не сразу, а через обработчик ожидания,
	// чтобы завершились текущие интерфейсные действия.
	ПодключитьОбработчикОжидания("Подключаемый_НайтиСертификат", 0.5, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляДляВыбораСертификатаЗаполнены(Форма)

	СНИЛС = СокрЛП(СтрЗаменить(Форма.ФизическоеЛицо.СтраховойНомерПФР, "-", "")); // Может быть пустая маска ввода

	Если НЕ ЗначениеЗаполнено(Форма.Организация.ИНН)
		ИЛИ НЕ ЗначениеЗаполнено(Форма.ФизическоеЛицо.Фамилия)
		ИЛИ НЕ ЗначениеЗаполнено(Форма.ФизическоеЛицо.Имя)
		ИЛИ НЕ ЗначениеЗаполнено(СНИЛС) Тогда 
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПараметрыОтбораСертификата()
	
	ПараметрыОтбора = ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата(Объект.СервисОбменаСБанками);
	ПараметрыОтбора.Организация = Объект.Организация;
	ПараметрыОтбора.Дата        = ТекущаяДата();
	ПараметрыОтбора.ИНН         = Организация.ИНН;
	ПараметрыОтбора.ЮридическоеФизическоеЛицо = Организация.ЮридическоеФизическоеЛицо;
	
	// ФИО и СНИЛС руководителя юр.лица или самого ИП.
	ПараметрыОтбора.Фамилия     = ФизическоеЛицо.Фамилия;
	ПараметрыОтбора.Имя         = ФизическоеЛицо.Имя;
	ПараметрыОтбора.Отчество    = ФизическоеЛицо.Отчество;
	ПараметрыОтбора.СНИЛС       = ФизическоеЛицо.СтраховойНомерПФР;

	// Сформируем представление отбора для показа на форме выбора.
	ПараметрыОтбора.ПредставлениеОтбора = ЗаявкиНаКредитКлиентСервер.ПредставлениеОтбораСертификата(ПараметрыОтбора);

	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НайтиСертификат()

	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиСертификатЗавершение", ЭтотОбъект);

	ПараметрыОтбора = ПараметрыОтбораСертификата();
	УниверсальныйОбменСБанкамиКлиент.ПодобратьСертификатОрганизации(ПараметрыОтбора, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатЗавершение(Результат, ДополнительныеПараметры) Экспорт

	СертификатНайден = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Выполнено")
			И Результат.Выполнено
			И Результат.Свойство("ОтпечатокСертификата")
			И ЗначениеЗаполнено(Результат.ОтпечатокСертификата) Тогда
			СертификатНайден = Истина;
			СертификатАбонента = Результат.ОтпечатокСертификата;
		КонецЕсли;
	КонецЕсли;
	
	ОтправкаДоступна = НЕ ТолькоПросмотр 
		И НЕ ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса)
		И СертификатНайден;
	
	Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Элементы.ГруппаНеНайденыСертификатыИП.Видимость        = НЕ СертификатНайден;
		Элементы.ПодписатьИОтправитьИП.Доступность             = ОтправкаДоступна;
		УстановитьСвойстваСертификата(ЭтотОбъект);
		ОтобразитьПредставлениеСертификата(Элементы.СертификатАбонентаПредставлениеИП, Результат.ОтпечатокСертификата);
	Иначе
		Элементы.ГруппаНеНайденыСертификатыЮЛ.Видимость        = НЕ СертификатНайден;
		Элементы.ПодписатьИОтправитьЮЛ.Доступность             = ОтправкаДоступна;
		УстановитьСвойстваСертификата(ЭтотОбъект);
		ОтобразитьПредставлениеСертификата(Элементы.СертификатАбонентаПредставлениеЮЛ, Результат.ОтпечатокСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатАбонентаПредставлениеЗавершениеВыбора", ЭтотОбъект, Новый Структура("Элемент", Элемент));

	ПараметрыОтбора = ПараметрыОтбораСертификата();
	УниверсальныйОбменСБанкамиКлиент.ВыбратьСертификат(
		Оповещение, СертификатАбонента, ПараметрыОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		СертификатАбонента = Результат.ВыбранноеЗначение.Отпечаток;
		ОтобразитьПредставлениеСертификата(ДополнительныеПараметры.Элемент, СертификатАбонента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СертификатАбонента = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СертификатАбонента) Тогда
		Возврат;
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьСертификат(Новый Структура("Отпечаток", СертификатАбонента));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредставлениеСертификата(Элемент, СертификатАбонента)
	
	ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиКлиент.ЭтоОблачныйСертификатПользователя(СертификатАбонента);
	
	ПараметрыОтображения = УниверсальныйОбменСБанкамиКлиент.ПараметрыОтобразитьПредставленияСертификатов();
	
	ПараметрыОтображения.ПолеВвода                            = Элемент;
	ПараметрыОтображения.Сертификат                           = СертификатАбонента;
	ПараметрыОтображения.ИмяРеквизитаПредставлениеСертификата = "СертификатАбонентаПредставление";
	ПараметрыОтображения.Форма                                = ЭтотОбъект;
	ПараметрыОтображения.ЭтоОблачныйСертификат                = ЭтоОблачныйСертификат;
	
	УниверсальныйОбменСБанкамиКлиент.ОтобразитьПредставлениеСертификата(, ПараметрыОтображения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтпечатокПоСертификату(Знач Сертификат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Отпечаток", Истина);
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьИЗаписать(ЗаписыватьТолькоНовый = Ложь)

	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗаписыватьТолькоНовый Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Не ПроверитьЗаполнениеСтраницы("") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не Модифицированность Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗаписи.Вставить("СинхронизироватьПрисоединенныеФайлы", Ложь);
		
		Если Не ЗаписыватьТолькоНовый И Не ПроверитьЗаполнениеСтраницы("") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ПометкаУдаления = Ложь;
	
	Возврат Записать(ПараметрыЗаписи);

КонецФункции

&НаКлиенте
Функция ЗаблокироватьВладельцаКонтактнойИнформации(ИмяЭлемента)

	// Заблокируем физлицо или организацию, есть сейчас меняется их контактная информация.
	Если СтрНайти(ИмяЭлемента, "ФизическиеЛица") > 0 Тогда
		Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(ИмяЭлемента, "Организации") > 0 Тогда
		Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура РазблокироватьДанныеДляРедактированияНаСервере()

	РазблокироватьФизическоеЛицо();
	
	РазблокироватьОрганизацию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначение(Коллекция, ИмяПоля, НовоеЗначение)

	Если Коллекция[ИмяПоля] <> НовоеЗначение Тогда
		Коллекция[ИмяПоля] = НовоеЗначение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ЗакрыватьФормуБезусловно = Ложь;

#КонецОбласти
