#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	ЗабалансовыеСчета          = ПланыСчетов.Хозрасчетный.СчетаЗабалансовогоУчетаЗапасов();
	ПлательщикНДС              = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ВедетсяПростойУчетЕНП      = УчетНДСПереопределяемый.ВедетсяПростойУчетЕНП(Дата);
	
	ЕстьЗабалансовыеСчета = Ложь;
	ДатаДекларирования    = '00010101'; // для проверки того, что товары в документе ввезены в одном месяце
	Для Каждого Строка Из Товары Цикл
		
		Префикс = "Объект.Товары[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		СчетУчетаЗабалансовый = ЗабалансовыеСчета.Найти(Строка.СчетУчета) <> Неопределено;
		
		Если СчетУчетаЗабалансовый
			И НЕ ЕстьЗабалансовыеСчета Тогда
			
			ЕстьЗабалансовыеСчета = Истина;
			
		КонецЕсли;
		
		Если СчетУчетаЗабалансовый
			И Строка.СуммаНДС <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Заполнение",
					НСтр("ru='Комитент'"),
					Строка.НомерСтроки,
					НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "Контрагент", , Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				НСтр("ru='Договор комитента'"),
				Строка.НомерСтроки,
				НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"));
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "ДоговорКонтрагента", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Строка.Контрагент)
			ИЛИ ЗначениеЗаполнено(Строка.ДоговорКонтрагента))
			И НЕ СчетУчетаЗабалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Корректность",
				НСтр("ru='Счет учета'"),
				Строка.НомерСтроки,
				НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"),
				НСтр("ru='Следует указать забалансовый счет.'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "СчетУчета", , Отказ);
				
		КонецЕсли;
		
		Если Строка.СуммаНДС <> 0
			И НЕ ЗначениеЗаполнено(Строка.СчетУчетаНДС)
			И (ПлательщикНДС
				ИЛИ СчетУчетаЗабалансовый) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				НСтр("ru='Счет учета НДС'"),
				Строка.НомерСтроки,
				НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "СчетУчетаНДС", , Отказ);
			
		КонецЕсли;
		
		Если РаздельныйУчетНДСНаСчете19
			И НЕ ЗначениеЗаполнено(Строка.СпособУчетаНДС)
			И Строка.СуммаНДС <> 0
			И НЕ СчетУчетаЗабалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				НСтр("ru='Способ учета НДС'"),
				Строка.НомерСтроки,
				НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "СпособУчетаНДС", , Отказ);
			
		КонецЕсли;
		
		Если ВедетсяПростойУчетЕНП Тогда
			ПервыйДеньМесяцаПринятияНаУчет = НачалоМесяца(Строка.ДатаПринятияНаУчет);
			Если Не ЗначениеЗаполнено(ДатаДекларирования) Тогда
				ДатаДекларирования = ПервыйДеньМесяцаПринятияНаУчет;
				Продолжить;
			КонецЕсли;
			
			Если ПервыйДеньМесяцаПринятияНаУчет <> ДатаДекларирования Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Корректность",
					НСтр("ru='Документ партии'"),
					Строка.НомерСтроки,
					НСтр("ru='Товары, ввозимые из стран Таможенного Союза'"),
					НСтр("ru='В документ следует включать партии товаров, принятые на учет в одном месяце.'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Префикс + "ДокументПартии", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ЗаявлениеОВвозеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Начисление НДС
	УчетНДС.СформироватьДвиженияВвозТоваровИзТаможенногоСоюза(
		ПараметрыПроведения.ТаблицаНачисленияНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияВвозТоваровИзТаможенногоСоюза(
		ПараметрыПроведения.ТаблицаНачисленияНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Включение НДС в стоимость
	УчетТоваров.СформироватьДвиженияИзменениеСебестоимостиОстатковТоваров(
		ПараметрыПроведения.ТаблицаНДСВСтоимости,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// УСН
	УчетУСН.ПоступлениеРасходовУСН(
		ПараметрыПроведения.ТаблицаПоступлениеРасходовУСН,
		ПараметрыПроведения.ТаблицаРеквизитыУСН, 0, Движения, Отказ);

	Если НЕ Отказ И Движения.РасходыПриУСН.Количество()>0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли;

	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ПараметрыПроведения.ТаблицаПрочиеРасчетыУСН);
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	СуммаДокумента = Окр(Товары.Итог("СуммаНДС"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			И НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			И НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		
		ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ДанныеОбъекта.Вставить("ВалютаДолларыСША", Справочники.Валюты.НайтиПоКоду("840"));
		
		ТоварыПоДаннымПоступления = Документы.ЗаявлениеОВвозеТоваров.ТоварыПоДаннымПоступления(ДанныеОбъекта, Основание);
		
		Если ТоварыПоДаннымПоступления.Количество() > 0 Тогда
			Товары.Загрузить(ТоварыПоДаннымПоступления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли



