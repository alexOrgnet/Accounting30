
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, Неопределено);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Материалы",				"Материалы");
	СписокТабличныхЧастей.Добавить("МатериалыЗаказчика",	"МатериалыЗаказчика");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтотОбъект, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтотОбъект, АктивизироватьТабличнуюЧасть);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ТребованиеНакладная",
		"ФормаДокумента",
		НСтр("ru='Новости: Требование-накладная'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	УстановитьВидимостьКнопкиВЕТИСНаСервере(Объект.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УстановитьПараметрыВыбораВидаОперации();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТребованиеНакладная.Форма.ФормаКомиссия" Тогда
		ОбработкаВыбораКомиссия(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбораПоОстаткам" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборКодаОперацииПрослеживаемости" Тогда
		ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// Обновление ЗаполнитьСубконтоТабличнойЧасти
	Документы.ТребованиеНакладная.ЗаполнитьСубконтоЕслиОбъектНеОбработан(Объект);
	// Конец Обновление
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеТребованиеНакладная";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами	
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	УстановитьПараметрыВыбораВидаОперации();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидаОперации();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ЗаполнитьЗависимыеСчета("ПодразделениеОрганизации");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьЗависимыеСчета("Склад");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)

	Если Объект.НДСвСтоимостиТоваров <> ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость") Тогда
		Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 1;
	ИначеЕсли Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0 Тогда
		ЗаполнитьЗависимыеСчетаНаКлиенте("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	ПрименитьНДСВСтоимостиТоваров(ЭтотОбъект);
	
	Если Элементы.АналитикаЗатратНДС.Видимость Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)

	Если Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0 Тогда
		ЗаполнитьЗависимыеСчетаНаКлиенте("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
	КонецЕсли;
	
	ПрименитьНДСВСтоимостиТоваров(ЭтотОбъект);
	
	Если Элементы.АналитикаЗатратНДС.Видимость Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)

	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ПередачаСотруднику") Тогда
		Объект.Сотрудник = Неопределено;
		Объект.СпособУчетаМатериаловПоСотруднику = ПредопределенноеЗначение("Перечисление.СпособыУчетаМатериаловПоСотрудникам.Расход");
	КонецЕсли;
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов") Тогда
		Объект.МатериалыЗаказчика.Очистить();
		Объект.Контрагент = Неопределено;
		Объект.ТоварыПередаютсяВСоставеРабот = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	НастроитьВидимостьКолонокПоПрослеживаемости();
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаУчетаЗатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияСчетовЗатрат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКодОперацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура(
		"КодОперацииПрослеживаемости, ТоварыПередаютсяВСоставеРабот,ЭтоТребованиеНакладная,
		|ОтражатьВыборОтраженияВПрослеживаемости, ТекущийДокумент",
		Объект.КодОперацииПрослеживаемости, Объект.ТоварыПередаютсяВСоставеРабот, Истина,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов"),
		Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ВыборКодаОперацииПрослеживаемости", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаМатериаловПоСотрудникуПриИзменении(Элемент)
	НастроитьВидимостьКолонокПоПрослеживаемости();
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
КонецПроцедуры

&НаКлиенте
Процедура КомиссияНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",		ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента", 		Объект.Дата);
	АдресХранилищаСоставКомиссии = ПоместитьСоставКомиссииВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаСоставКомиссии", АдресХранилищаСоставКомиссии); 
	
	ОткрытьФорму("Документ.ТребованиеНакладная.Форма.ФормаКомиссия", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущаяСтрока;
	МатериалСчетИзменениеНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыАналитикаЗатратПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияСчетовЗатрат(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	КонтейнерОбъект = Новый Структура;
	
	КонтейнерСтрока = Новый Структура("Номенклатура, ОтражениеВУСН");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КонтейнерСтрока, НовыйДанныеАналитики());
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Материалы.Номенклатура",
		Объект,
		ТекущиеДанные,
		КонтейнерОбъект,
		КонтейнерСтрока);
		
	КонтейнерОбъект.Вставить("ВедетсяУчетПрослеживаемыхТоваров", ВедетсяУчетПрослеживаемыхТоваров);

	// Заполним
	Изменения = МатериалПриИзмененииНаСервере(КонтейнерСтрока, КонтейнерОбъект, ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		РаздельныйУчетНДСНаСчете19, Объект.СчетаУчетаЗатратВТаблице);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);
	ТекущиеДанные.ПрослеживаемыйТовар = ТекущиеДанные.ПрослеживаемыйТовар Или ТекущиеДанные.ПрослеживаемыйКомплект;
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент	= 1;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;
	
	ТекущиеДанные	= Элементы.Материалы.ТекущиеДанные;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",	Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",	Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",	ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",		ТекущиеДанные.Счет);
	ПараметрыОбъекта.Вставить("Склад",			Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов",	"Метаданные.Документы.ТребованиеНакладная.ТабличныеЧасти.Материалы.Реквизиты.ДокументОприходования.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость	= 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
	ПараметрыФормыПодбора.ПрослеживаемыйКомплект = Элементы.Материалы.ТекущиеДанные.ПрослеживаемыйКомплект;
	
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "Материалы", ПараметрыФормыПодбора);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРНПТОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(
				Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеТекущейСтроки = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ДанныеТекущейСтроки.Себестоимость = 0;
		ДанныеТекущейСтроки.ДокументОприходования = Неопределено;
		ДанныеТекущейСтроки.ИдентификаторСтроки = "";
		
	ИначеЕсли НоваяСтрока Тогда
		
		РеквизитыДляПереносаИзШапки = Новый Массив;
		РеквизитыДляПереносаИзШапки.Добавить("СчетЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("ПодразделениеЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("СпособУчетаНДС");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто1");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто2");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто3");
		
		Изменения = Новый Массив;
		
		Для Каждого ИмяРеквизита Из РеквизитыДляПереносаИзШапки Цикл
		
			Если ДанныеТекущейСтроки.Свойство(ИмяРеквизита) 
				И Не ЗначениеЗаполнено(ДанныеТекущейСтроки[ИмяРеквизита]) 
				И Объект.Свойство(ИмяРеквизита) 
				И ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
				
				ДанныеТекущейСтроки[ИмяРеквизита] = Объект[ИмяРеквизита];
				Изменения.Добавить("Материалы." + ИмяРеквизита);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Изменения.Количество() > 0 Тогда
			КонтейнерОбъект = Новый Структура;
	
			КонтейнерСтрока = Новый Структура;
			КонтейнерСтрока.Вставить("Номенклатура");
			КонтейнерСтрока.Вставить("ОтражениеВУСН");
			КонтейнерСтрока.Вставить("Счет");
			КонтейнерСтрока.Вставить("СчетУчетаЗабалансовый");
			КонтейнерСтрока.Вставить("СчетУчетаПартионный");
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КонтейнерСтрока, НовыйДанныеАналитики(), Ложь);
			ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ДанныеТекущейСтроки);
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(Изменения, Объект, ДанныеТекущейСтроки, КонтейнерОбъект, КонтейнерСтрока);
			ЗаполнитьНовуюСтрокуПоУмолчанию(ПараметрыЗаполненияСчетовУчета.КЗаполнению, КонтейнерОбъект, КонтейнерСтрока);
			ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, КонтейнерСтрока);
			
		КонецЕсли;
	КонецЕсли;
	Если Копирование Или НоваяСтрока Тогда
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, ДанныеТекущейСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "МатериалыАналитикаЗатратПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияСчетовЗатрат(Ложь);
	КонецЕсли;
	
	Если Поле.Имя = "МатериалыРНПТ" Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар 
			И Не Объект.СпособУчетаМатериаловПоСотруднику
			= ПредопределенноеЗначение("Перечисление.СпособыУчетаМатериаловПоСотрудникам.РасходИОстатки") Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
			
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "Материалы", ПараметрыФормыПодбора);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "МатериалыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Материалы.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	ДанныеОбъекта = Новый Структура;
	
	ДанныеСтроки = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"МатериалыЗаказчика.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтроки);
		
	Изменения = МатериалЗаказчикаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработкаПодбораМатериалы(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМатериалыЗаказчика(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("МатериалыЗаказчика");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВВетис(Команда)
	
	СобытияФормВЕТИСБПКлиент.ОткрытьФормуДокументаПроизводственнойОперацииВЕТИС(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедрыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеДокументаДляПредставленияАналитики()

	ДанныеДокумента = Новый Массив;
	ДанныеДокумента.Добавить("СчетаУчетаЗатратВТаблице");
	ДанныеДокумента.Добавить("Организация");
	ДанныеДокумента.Добавить("Дата");
	
	Возврат СтрСоединить(ДанныеДокумента, ",");
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораВидаОперации()
	
	НовыйПараметр = Новый ПараметрВыбора("Организация", Объект.Организация);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Дата", Объект.Дата);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Реквизиты отображаются, если установлен флаг "Счета учета затрат в таблице".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыАналитикаЗатратПредставление");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СчетаУчетаЗатратВТаблице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыАналитикаЗатратПредставление");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.СчетЗатрат", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

	// Контрагент
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтмечатьПустогоКонтрагента", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// МатериалыДокументОприходования, МатериалыСебестоимость
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыСебестоимость
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Материалы.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Материалы.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// МатериалыСебестоимость
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.Себестоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));

	// МатериалыДокументОприходования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// СчетЗатрат
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АналитикаУчетаЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаУчетаЗатратВТаблице", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетЗатрат", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособУчетаМатериаловПоСотруднику", ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.СпособыУчетаМатериаловПоСотрудникам.РасходИОстатки"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	// РНПТ по комплектам
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособУчетаМатериаловПоСотруднику", ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.СпособыУчетаМатериаловПоСотрудникам.РасходИОстатки"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
			
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособУчетаМатериаловПоСотруднику", ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.СпособыУчетаМатериаловПоСотрудникам.РасходИОстатки"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеВидимостью();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	УстановитьВидимостьСчетовУчета();

	Если Элементы.АналитикаУчетаЗатрат.Видимость Тогда	
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
	КонецЕсли;
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
	ЗаполнитьСписокВыбораМатериалыОтражениеВУСН();
	
	УправлениеФормой(ЭтотОбъект);

	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособУчетаМатериаловПоСотруднику) Тогда
		Объект.СпособУчетаМатериаловПоСотруднику = Перечисления.СпособыУчетаМатериаловПоСотрудникам.Расход;
	КонецЕсли;
	
	НастроитьВидимостьКолонокПоПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Форма.ОтмечатьПустогоКонтрагента = Объект.МатериалыЗаказчика.Количество() > 0;
	
	ПрименитьНДСВСтоимостиТоваров(Форма);
	
	// Может оказаться так, что отображается только одна страница. 
	// В таком случае убираем отображение страниц
	Если НужноУбратьЗакладкиСтраниц(Объект) Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.МатериалыГруппаРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	
	Элементы.ГруппаУчетПоСотруднику.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ПередачаСотруднику");
	
	Элементы.СтраницаМатериалыЗаказчика.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов");

КонецПроцедуры

&НаСервереБезКонтекста
Функция НужноУбратьЗакладкиСтраниц(Объект)

	Возврат НЕ (ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("ВедетсяПроизводственнаяДеятельность", Объект)
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов"))
		И НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("РаздельныйУчетНДСДо2014Года", Объект);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНДСВСтоимостиТоваров(Форма)
	
	НДСВключитьВСтоимость = (Форма.Объект.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость"));
	
	Форма.Элементы.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат.Видимость = НДСВключитьВСтоимость;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Форма.Элементы.АналитикаЗатратНДС.Видимость = НДСВключитьВСтоимость И (Форма.Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	ПрименитьНДСВСтоимостиТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) =
		Перечисления.СпособыОценки.ПоСредней);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТабЧасти Из Объект.Материалы Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти);
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабЧасти);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабЧасти);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти)
	
	// СчетУчета
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета()
		И ЗначениеЗаполнено(СтрокаТабЧасти.Счет) Тогда
		СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабЧасти.Счет);
		СтрокаТабЧасти.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		СтрокаТабЧасти.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			Или СвойстваСчета.ВидСубконто2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			Или СвойстваСчета.ВидСубконто3 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Материалы, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);

	Для каждого Строка Из Объект.Материалы Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, Строка);
	КонецЦикла;
	
	НастроитьВидимостьКолонокПоПрослеживаемости();
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
	ЗаполнитьЗависимыеСчета("Дата");
	
	ЗаполнитьСписокВыбораМатериалыОтражениеВУСН(Истина);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗависимыеСчета("Организация");
	
	// Счета могли поменяться на значения по умолчанию.
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	Объект.СоставКомиссии.Очистить();
	Документы.ТребованиеНакладная.ЗаполнитьСоставКомиссии(Объект.СоставКомиссии, Объект.Организация);
	
	ЗаполнитьСписокВыбораМатериалыОтражениеВУСН(Истина);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитикуУчетаЗатратВТаблице(ВыбранноеЗначение, РежимЗаполненияАналитикиИзменен)
	
	УправлениеВидимостью();
	
	УправлениеФормой(ЭтотОбъект);

	// Дозаполним табличную часть
	Если Не Объект.СчетаУчетаЗатратВТаблице
			Или Объект.Материалы.Количество() = 0
			Или Не ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСубконтоСтрокой = Неопределено;
	Если ВыбранноеЗначение.СтатьиЗатратВТаблицеПоУмолчанию Тогда
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетЗатрат);
		НомерСубконтоСтрокой = СвойстваСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];
		
		Если НомерСубконтоСтрокой <> Неопределено Тогда
			СписокНоменклатуры = Объект.Материалы.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"); 
			СтатьиЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокНоменклатуры, "СтатьяЗатрат");
		КонецЕсли;

	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		Если РежимЗаполненияАналитикиИзменен Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Объект, "СчетЗатрат, ПодразделениеЗатрат, СпособУчетаНДС, Субконто1, Субконто2, Субконто3");
		КонецЕсли;
		Если НомерСубконтоСтрокой <> Неопределено И ВыбранноеЗначение.СтатьиЗатратВТаблицеПоУмолчанию
				И ЗначениеЗаполнено(СтатьиЗатрат[СтрокаТабличнойЧасти.Номенклатура]) Тогда
			СтрокаТабличнойЧасти["Субконто" + НомерСубконтоСтрокой] = СтатьиЗатрат[СтрокаТабличнойЧасти.Номенклатура];
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаголовокПодбора(Ссылка, ПредставлениеТаблицы)
    
    Если Ссылка.Пустая() Тогда
    
    	ПредставлениеДокумента = Ссылка.Метаданные().Представление();
    
    Иначе
    
    	ПредставлениеДокумента = Строка(Ссылка);
    
    КонецЕсли; 

    Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подбор номенклатуры в %1 (%2)'"),
		ПредставлениеДокумента, ПредставлениеТаблицы);

КонецФункции 
 
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), Неопределено, Объект.Дата);
	
	ПараметрыФормы.Вставить("ВидПодбора", "");
	
	Если ИмяТаблицы = "Материалы" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Материалы'");
		ПараметрыФормы.Вставить("ПоказыватьЗабалансовыеОстатки", Ложь);
	ИначеЕсли ИмяТаблицы = "МатериалыЗаказчика" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Материалы заказчика'");
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыФормы.Вставить("ВидПодбора", "МатериалыЗаказчика");
	КонецЕсли;
	
	ЗаголовокПодбора = ПолучитьЗаголовокПодбора(Объект.Ссылка, ПредставлениеТаблицы);
    
	ПараметрыФормы.Вставить("ЕстьЦена",            Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",      Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",        ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта",              ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",       Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад",               Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",           ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",          ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",              Ложь);
	ПараметрыФормы.Вставить("ПоказыватьОстатки",   Истина);
	ПараметрыФормы.Вставить("ПоказыватьОтрицательныеОстатки",   Ложь);
	Параметрыформы.Вставить("ПоказыватьЦены",      Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если ЭтоВставкаИзБуфера
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
			СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент), 
			СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
	
		Если ИмяТаблицы = "Материалы" Тогда
			
			СтрокаТабличнойЧасти.ОтражениеВУСН			= Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.НомерГТД				= 
				?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) И Не СтрокаТовара.ПрослеживаемыйТовар,
				СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
			СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
				СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
				
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
				Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ТребованиеНакладная);
	
	Если ИмяТаблицы = "Материалы" Тогда
		Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетов Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти);
			ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабличнойЧасти);
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;	
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКомиссия(ВыбранноеЗначение)
	
	Если ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
		ПолучитьСоставКомиссииИзВременногоХранилищаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСоставКомиссииИзВременногоХранилищаНаСервере(АдресХранилищаСоставКомиссии)
	
	Объект.СоставКомиссии.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилищаСоставКомиссии));
	УдалитьИзВременногоХранилища(АдресХранилищаСоставКомиссии);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСоставКомиссииВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.СоставКомиссии.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция МатериалПриИзмененииНаСервере(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению, Знач РаздельныйУчетНДСНаСчете19, Знач СчетаУчетаЗатратВТаблице)
	
	Результат = Новый Структура; // Может быть переопределена ниже, при вызове ЗначенияРеквизитовОбъекта
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Результат.Вставить("ЕдиницаИзмерения");
		Результат.Вставить("НомерГТД");
		Результат.Вставить("СтранаПроисхождения");
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Номенклатура, Результат);
		
		Если ДанныеОбъекта.Свойство("ВедетсяУчетПрослеживаемыхТоваров") И ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
			РеквизитыПрослеживаемости = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДату(ДанныеСтроки.Номенклатура, Объект.Дата);
			Результат.Вставить("ПрослеживаемыйТовар",    РеквизитыПрослеживаемости.ПрослеживаемыйТовар);
			Результат.Вставить("ПрослеживаемыйКомплект", РеквизитыПрослеживаемости.ПрослеживаемыйКомплект);
		КонецЕсли;
		
		Результат.Вставить("Коэффициент", 1);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
		Результат.Вставить("ОтражениеВУСН", Перечисления.ОтражениеВУСН.Принимаются);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ТребованиеНакладная,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Материалы",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Если Результат.Свойство("СчетЗатрат") Тогда
		Результат.Вставить("ПодразделениеЗатратДоступность");
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(Результат);
	КонецЕсли;
	
	ДанныеАналитики = НовыйДанныеАналитики();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеАналитики, ДанныеСтроки, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеАналитики, Результат, Истина);
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ДанныеАналитики);
	
	Возврат ДанныеАналитики;

КонецФункции

&НаСервереБезКонтекста
Функция МатериалЗаказчикаПриИзмененииНаСервере(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Результат.Вставить("ЕдиницаИзмерения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "ЕдиницаИзмерения"));
		Результат.Вставить("Коэффициент",      1);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ТребованиеНакладная,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"МатериалыЗаказчика",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораМатериалыОтражениеВУСН(ПерезаполнитьНедоступныеЗначения = Ложь)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяОсобыйНалоговыйРежим = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата)
		Или УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	
	ДоступныеОтражения = Перечисления.ОтражениеВУСН.СписокВыбора(ПрименяетсяОсобыйНалоговыйРежим, Истина);
	
	СписокВыбора = Элементы.МатериалыОтражениеВУСН.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементОтражения Из ДоступныеОтражения Цикл
		СписокВыбора.Добавить(ЭлементОтражения.Значение, ЭлементОтражения.Представление);
	КонецЦикла;
	
	Если ПерезаполнитьНедоступныеЗначения Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
			Если ДоступныеОтражения.НайтиПоЗначению(СтрокаТаблицы.ОтражениевУСН) = Неопределено Тогда
				СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("МатериалыСчет");

	ЭлементыСчетов.Добавить("МатериалыЗаказчикаСчет");
	ЭлементыСчетов.Добавить("МатериалыЗаказчикаСчетПередачи");
	
	ЭлементыСчетов.Добавить("АналитикаЗатратНДС");       // Содержит настройки, связанные со счетами
	
	ЭлементыСчетов.Добавить("АналитикаУчетаЗатрат");
	ЭлементыСчетов.Добавить("МатериалыАналитикаЗатратПредставление");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ТребованиеНакладная",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// СчетаУчетаЗатратВТаблице
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетаУчетаЗатратВТаблице") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СпособУчетаНДС");
	КонецЕсли;

	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// НДСвСтоимостиТоваров
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// СчетСписанияНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// Материалы.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто3");
	КонецЕсли;

	// Материалы.СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Субконто3");
	КонецЕсли;

	// МатериалыЗаказчика.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// МатериалыЗаказчика.Счет
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Счет") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// СчетаУчетаЗатратВТаблице
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетаУчетаЗатратВТаблице") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// НДСвСтоимостиТоваров
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// СчетСписанияНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// Материалы.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
		КонецЕсли;

		// Материалы.СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
		КонецЕсли;

		// МатериалыЗаказчика.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// МатериалыЗаказчика.Счет
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Счет") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗависимыеСчета(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	Изменения.Вставить("Материалы");// Точно не знаем, что изменился этот список, но раз уж на сервере, то заполним
	НастроитьСубконто(Изменения);
	
	Если ИмяРеквизита = "Дата" Или ИмяРеквизита = "Организация" И Не Объект.СчетаУчетаЗатратВТаблице Тогда
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗависимыеСчетаНаКлиенте(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСубконто(Изменения)

	Если Изменения.Свойство("Материалы") Тогда
		Для Каждого СтрокаТабЧасти Из Объект.Материалы Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти);
			ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабЧасти);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "СтраницаМатериалы" Тогда
		ИмяТаблицы = "Материалы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаМатериалыЗаказчика" Тогда	
		ИмяТаблицы = "МатериалыЗаказчика";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	// Общие свойства для разных табличных частей
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	
	Если ПараметрыВставки.ИмяТаблицы = "Материалы" Тогда
		
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("Счет");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетЗатрат");
				СписокСвойств.Добавить("Субконто1");
				СписокСвойств.Добавить("Субконто2");
				СписокСвойств.Добавить("Субконто3");
				СписокСвойств.Добавить("ПодразделениеЗатрат");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("ДокументОприходования");
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "МатериалыЗаказчика" Тогда
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			СписокСвойств.Добавить("Счет");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетПередачи");
			КонецЕсли;
		КонецЕсли;	
			
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	
	Элементы.МатериалыВставитьСтроки.Доступность				= Доступность;
	Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность	= Доступность;
	
	Элементы.МатериалыЗаказчикаВставитьСтроки.Доступность				 = Доступность;
	Элементы.МатериалыЗаказчикаКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область БЭД

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"Субконто", "ПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
		
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконтоНДС(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНДС(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "", "СубконтоСписанияНДС", "", "СчетСписанияНДС");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

#Область СчетаУчетаЗатрат

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетовЗатрат(ФормаОткрытаИзШапки = Ложь)
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = НовыйПараметрыФормыРедактированияСчетаЗатрат();
	
	ПараметрыФормы.ТолькоПросмотр              = ТолькоПросмотр;
	ПараметрыФормы.ДатаДокумента               = Объект.Дата;
	ПараметрыФормы.КлючНазначенияИспользования = "РасходМатериалов";
	ПараметрыФормы.ИспользоватьНастройкиУчетнойПолитики = Истина;
	ПараметрыФормы.ФормаОткрытаИзШапки = ФормаОткрытаИзШапки;
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	Если Не ФормаОткрытаИзШапки Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПараметрыФормыРедактированияСчетаЗатрат()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр");
	ПараметрыФормы.Вставить("ДатаДокумента");
	ПараметрыФормы.Вставить("ИспользоватьНастройкиУчетнойПолитики");
	ПараметрыФормы.Вставить("Организация");
	ПараметрыФормы.Вставить("Номенклатура");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ВозвращаемыеПараметрыРедактированияСчетаЗатрат());
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ВозвращаемыеПараметрыРедактированияСчетаЗатрат()

	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("СчетЗатрат");
	ВозвращаемыеПараметры.Вставить("ПодразделениеЗатрат");
	ВозвращаемыеПараметры.Вставить("Субконто1");
	ВозвращаемыеПараметры.Вставить("Субконто2");
	ВозвращаемыеПараметры.Вставить("Субконто3");
	ВозвращаемыеПараметры.Вставить("СпособУчетаНДС");
	ВозвращаемыеПараметры.Вставить("СтатьиЗатратВТаблицеПоУмолчанию");
	ВозвращаемыеПараметры.Вставить("СчетаУчетаЗатратВТаблице");
	ВозвращаемыеПараметры.Вставить("ФормаОткрытаИзШапки");
	
	Возврат ВозвращаемыеПараметры;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораАналитикиУчетаСервер(ВыбранноеЗначение, ТекущаяСтрока)
	
	ТребуетсяИзменениеСчетовВТаблице = Объект.СчетаУчетаЗатратВТаблице <> ВыбранноеЗначение.СчетаУчетаЗатратВТаблице; 
	Объект.СчетаУчетаЗатратВТаблице = ВыбранноеЗначение.СчетаУчетаЗатратВТаблице;
	ЗаполнитьАналитикуУчетаЗатратВТаблице(ВыбранноеЗначение, ТребуетсяИзменениеСчетовВТаблице);
	
	Если Не ВыбранноеЗначение.ФормаОткрытаИзШапки И Объект.СчетаУчетаЗатратВТаблице И ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Объект.Материалы.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаТаблицы <> Неопределено Тогда
			ОбработатьВыборАналитикиСтрокиТаблицы(ВыбранноеЗначение, СтрокаТаблицы);
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
		
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущаяСтрока;
	// Выбранное значение может содержать значения реквизитов, которые не менялись на форме.
	// Например, "Отражение в УСН". Поэтому ограничим список реквизитов, заполняемых в строке.
	ДанныеСтроки = ВозвращаемыеПараметрыРедактированияСчетаЗатрат();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	
	ОбработкаВыбораАналитикиУчетаСервер(ДанныеСтроки, ТекущаяСтрока);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборАналитикиСтрокиТаблицы(ВыбранноеЗначение, ТекущиеДанные)
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.СчетаУчетаЗатратВТаблице Тогда
		Форма.АналитикаУчетаЗатрат = НСтр("ru = 'В списке'");
	Иначе
		
		ДанныеАналитики = НовыйДанныеАналитики();
		ЗаполнитьЗначенияСвойств(ДанныеАналитики, Объект);
		ДанныеАналитики.РаздельныйУчетНДСНаСчете19 = Форма.РаздельныйУчетНДСНаСчете19;
		
		Форма.АналитикаУчетаЗатрат = БухгалтерскийУчет.ПредставлениеАналитикиУчетаЗатрат(ДанныеАналитики);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ДанныеСтроки)
	
	Если Не Объект.СчетаУчетаЗатратВТаблице Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = НовыйДанныеАналитики();
	ЗаполнитьЗначенияСвойств(Данные, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(Данные, Объект, ДанныеДокументаДляПредставленияАналитики());
	Данные.РаздельныйУчетНДСНаСчете19 = РаздельныйУчетНДСНаСчете19;
	
	ДанныеСтроки.АналитикаЗатратПредставление = БухгалтерскийУчет.ПредставлениеАналитикиУчетаЗатрат(Данные);
	
КонецПроцедуры

// Конструктор свойств, необходимых для настройки отображения аналитики.
// 
// Возвращаемое значение:
//  Структура - См. тело функции
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеАналитики()
	
	ДанныеАналитик = Новый Структура;
	
	ДанныеАналитик.Вставить("СчетЗатрат");
	ДанныеАналитик.Вставить("ПодразделениеЗатрат");
	ДанныеАналитик.Вставить("Субконто1");
	ДанныеАналитик.Вставить("Субконто2");
	ДанныеАналитик.Вставить("Субконто3");
	ДанныеАналитик.Вставить("АналитикаЗатратПредставление");
	ДанныеАналитик.Вставить("СпособУчетаНДС");
	ДанныеАналитик.Вставить("РаздельныйУчетНДСНаСчете19");
	ДанныеАналитик.Вставить("СчетаУчетаЗатратВТаблице");
	ДанныеАналитик.Вставить("Организация");
	ДанныеАналитик.Вставить("Дата");
	
	Возврат ДанныеАналитик;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура НастроитьВидимостьНадписиКодаОперацииПрослеживаемости()
	
	ПрослеживаемыйТоварВТЧ = Объект.Материалы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	
	Если ПрослеживаемыйТоварВТЧ.Количество() > 0 И ВедетсяУчетПрослеживаемыхТоваров
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов Или 
		(Объект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ПередачаСотруднику
		И Объект.СпособУчетаМатериаловПоСотруднику = Перечисления.СпособыУчетаМатериаловПоСотрудникам.Расход))
		И (Не Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств")
		Или Объект.СчетаУчетаЗатратВТаблице = Истина) Тогда
		ЕстьПрослеживаемыйТовар = Истина;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	Иначе
		Объект.КодОперацииПрослеживаемости =
		ПредопределенноеЗначение("Справочник.КодыОперацийПрослеживаемости.ПустаяСсылка");
		ЕстьПрослеживаемыйТовар = Ложь;
		Объект.ТоварыПередаютсяВСоставеРабот = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКодОперации.Видимость = ЕстьПрослеживаемыйТовар;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКодаОперацииПрослеживаемости()
	
	Если ЗначениеЗаполнено(Объект.КодОперацииПрослеживаемости) Тогда
		НадписьКодОперации = СтрШаблон("Причина списания в прослеживаемости: %1 - %2",
		Объект.КодОперацииПрослеживаемости, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОперацииПрослеживаемости, "Наименование"));
		
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	ИначеЕсли Объект.ТоварыПередаютсяВСоставеРабот Тогда
		НадписьКодОперации = НСтр("ru='Материалы будут переданы в составе работ'");
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		НадписьКодОперации = НСтр("ru='<Выбрать порядок отражения в прослеживаемости>'");
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ВажноеСобытие;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение)
	Если ВыбранноеЗначение.ТоварыПередаютсяВСоставеРабот И Не Объект.ТоварыПередаютсяВСоставеРабот Тогда
		Объект.ТоварыПередаютсяВСоставеРабот = Истина;
		Объект.КодОперацииПрослеживаемости = ПредопределенноеЗначение("Справочник.КодыОперацийПрослеживаемости.ПустаяСсылка");
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
		Модифицированность = Истина;
	ИначеЕсли Объект.КодОперацииПрослеживаемости <> ВыбранноеЗначение.КодОперацииПрослеживаемости Тогда
		Модифицированность = Истина;
		Объект.ТоварыПередаютсяВСоставеРабот = Ложь;
		Объект.КодОперацииПрослеживаемости = ВыбранноеЗначение.КодОперацииПрослеживаемости;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Материалы.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТовара);
		КонецЦикла;
	КонецЦикла;
		
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКолонокПоПрослеживаемости()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов
		Или (Объект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ПередачаСотруднику
		И Объект.СпособУчетаМатериаловПоСотруднику = Перечисления.СпособыУчетаМатериаловПоСотрудникам.Расход) Тогда
		ОтображатьКолонкиПрослеживаемости = Истина;
	Иначе
		ОтображатьКолонкиПрослеживаемости = Ложь;
	КонецЕсли;
	
	Элементы.МатериалыРНПТ.Видимость                = ОтображатьКолонкиПрослеживаемости;
	Элементы.МатериалыСтранаПроисхождения.Видимость = ОтображатьКолонкиПрослеживаемости;
	Элементы.МатериалыПодсказкаРНПТ.Видимость       = ВедетсяУчетПрослеживаемыхТоваров И ОтображатьКолонкиПрослеживаемости;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиВЕТИСНаСервере(ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов Тогда
		Если ИнтеграцияВЕТИСБПВызовСервера.ИспользоватьРаздельноеСписаниеМатериаловИВыпускПродукцииВЕТИС() Тогда
			Элементы.ФормаВыгрузитьВВетис.Видимость = Истина;
		Иначе
			Элементы.ФормаВыгрузитьВВетис.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ФормаВыгрузитьВВетис.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовуюСтрокуПоУмолчанию(КЗаполнению, ДанныеОбъекта, ДанныеСтроки)
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ТребованиеНакладная,
		КЗаполнению,
		ДанныеОбъекта,
		"Материалы",
		ДанныеСтроки);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСтроки, ЗаполненныеСчетаУчета, Истина);
	ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(ДанныеСтроки);
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ДанныеСтроки);

КонецПроцедуры

&НаСервере
Процедура МатериалСчетИзменениеНаСервере(ТекущаяСтрока)
	СтрокаТабличнойЧасти = Объект.Материалы.НайтиПоИдентификатору(ТекущаяСтрока);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти);
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
