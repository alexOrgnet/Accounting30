#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит существующую сверку расчета по ключевым полям.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - налог, по которому нужно сверить расчет 
//  Период - Дата - любая дата в налоговом периоде, за который нужно сверить расчет
//  КодОтправителя - Строка - код налоговой инспекции, с которой выполняется сверка
//  ТекущийДокумент - ДокументСсылка.СверкаСФНСПоИмущественнымНалогам - указывается, если нужно найти дублирующую сверку
//  СообщениеФНС - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов - указывается,
//                 если выполняется поиск сверки, заполненной по указанному сообщению
//  ИмяФайла - Строка - указывается, если выполняется поиск сверки, заполненной по указанному файлу
// 
// Возвращаемое значение:
//  Неопределено - если сверка не найдена, ДокументСсылка.СверкаСФНСПоИмущественнымНалогам - существующая сверка
//
Функция НайтиСуществующий(Организация, Налог, Период, КодОтправителя, ТекущийДокумент = Неопределено, СообщениеФНС = Неопределено, ИмяФайла = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СверкаСФНСПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаСФНСПоИмущественнымНалогам КАК СверкаСФНСПоИмущественнымНалогам
	|ГДЕ
	|	СверкаСФНСПоИмущественнымНалогам.Организация = &Организация
	|	И СверкаСФНСПоИмущественнымНалогам.Налог = &Налог
	|	И СверкаСФНСПоИмущественнымНалогам.НалоговыйПериод = &НалоговыйПериод
	|	И СверкаСФНСПоИмущественнымНалогам.КодОтправителя = &КодОтправителя
	|	И НЕ СверкаСФНСПоИмущественнымНалогам.ПометкаУдаления";

	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Налог",           Налог);
	Запрос.УстановитьПараметр("НалоговыйПериод", НачалоГода(Период));
	Запрос.УстановитьПараметр("КодОтправителя",  КодОтправителя);

	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			Новый ВыражениеСхемыЗапроса("СверкаСФНСПоИмущественнымНалогам.Ссылка <> &ТекущийДокумент"));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	КонецЕсли;

	Если ЗначениеЗаполнено(СообщениеФНС) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			Новый ВыражениеСхемыЗапроса("СверкаСФНСПоИмущественнымНалогам.СообщениеФНС = &СообщениеФНС"));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("СообщениеФНС", СообщениеФНС);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			Новый ВыражениеСхемыЗапроса("СверкаСФНСПоИмущественнымНалогам.ИмяФайла = &ИмяФайла"));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Выборка.Следующий();

	Возврат Выборка.Ссылка;

КонецФункции

// Находит существующую сверку расчета, в которой есть объекты, учтенные в указанном налоговом органе.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - налог, по которому нужно сверить расчет 
//  Период - Дата - любая дата в налоговом периоде, за который нужно сверить расчет
//  КодНалоговогоОргана - Строка - код налоговой инспекции, в которой учтены объекты налогообложения
// 
// Возвращаемое значение:
//  Неопределено - если сверка не найдена, ДокументСсылка.СверкаСФНСПоИмущественнымНалогам - существующая сверка
//
Функция НайтиСуществующийПоКодуНалоговогоОргана(Организация, Налог, Период, КодНалоговогоОргана) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СверкаСФНСПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаСФНСПоИмущественнымНалогам КАК СверкаСФНСПоИмущественнымНалогам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СверкаСФНСПоИмущественнымНалогам.Сверка КАК ТаблицаСверки
	|		ПО СверкаСФНСПоИмущественнымНалогам.Ссылка = ТаблицаСверки.Ссылка
	|ГДЕ
	|	СверкаСФНСПоИмущественнымНалогам.Организация = &Организация
	|	И СверкаСФНСПоИмущественнымНалогам.Налог = &Налог
	|	И СверкаСФНСПоИмущественнымНалогам.НалоговыйПериод = &НалоговыйПериод
	|	И ТаблицаСверки.КодНалоговогоОргана = &КодНалоговогоОргана
	|	И НЕ СверкаСФНСПоИмущественнымНалогам.ПометкаУдаления";

	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Налог",           Налог);
	Запрос.УстановитьПараметр("НалоговыйПериод", НачалоГода(Период));
	Запрос.УстановитьПараметр("КодНалоговогоОргана", КодНалоговогоОргана);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Выборка.Следующий();

	Возврат Выборка.Ссылка;

КонецФункции

// Находит правило уплаты, примененное для конкретного налога за определенный год.
//
// Параметры:
//  Организация - СправочникСсылка.Организации 
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов
//  ПериодСобытия - Дата - период события в задачах бухгалтера
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога или пустая ссылка,
//  если оплата не требуется
//
Функция ПравилоУплатыЗаПериодСверки(Организация, Налог, ПериодСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодНалога",     Перечисления.ВидыИмущественныхНалогов.КодНалогаВЗадачахБухгалтера(Налог));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Правило КАК Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК
	|			ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &КодНалога
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Правило;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСверки";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
 
 Ограничение.Текст =
 "РазрешитьЧтениеИзменение
 |ГДЕ
 | ЗначениеРазрешено(Организация)";

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

// Процедура заполняет добавленные реквизиты в документах.
// Обрабатываем все документы одной порцией, так как документов ожидается совсем немного.
//
Процедура ЗаполнитьДобавленныеРеквизиты() Экспорт

	ВыборкаДокументов = Документы.СверкаСФНСПоИмущественнымНалогам.Выбрать();
	КодыНО = Новый Соответствие; // Ключ - регистрация в НО, значение - код
	Налоги = Новый Соответствие; // Ключ - задача бухгалтера, значение - налог (перечисление)

	Пока ВыборкаДокументов.Следующий() Цикл

		СверкаОбъект = ВыборкаДокументов.ПолучитьОбъект();

		Если СверкаОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СверкаОбъект.КодОтправителя) Тогда
			КодОтправителя = КодыНО[СверкаОбъект.РегистрацияВНалоговомОргане];
			Если КодОтправителя <> Неопределено Тогда
				СверкаОбъект.КодОтправителя = КодОтправителя;
			Иначе
				КодОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СверкаОбъект.РегистрацияВНалоговомОргане, "Код");
				СверкаОбъект.КодОтправителя = КодОтправителя;
				КодыНО.Вставить(СверкаОбъект.РегистрацияВНалоговомОргане, КодОтправителя);
			КонецЕсли;	
		КонецЕсли;	

		Если Не ЗначениеЗаполнено(СверкаОбъект.Налог) Тогда
			Налог = Налоги[СверкаОбъект.УдалитьНалог];
			Если Налог <> Неопределено Тогда
				СверкаОбъект.Налог = Налог;
			Иначе
				Налог = Перечисления.ВидыИмущественныхНалогов.ПустаяСсылка();
				КодНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СверкаОбъект.УдалитьНалог, "Код");
				Если КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
					Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог;
				ИначеЕсли КодНалога = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
					Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог;
				КонецЕсли;
				СверкаОбъект.Налог = Налог;
				Налоги.Вставить(СверкаОбъект.УдалитьНалог, Налог);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СверкаОбъект.Налог) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедуре Документы.СверкаСФНСПоИмущественнымНалогам.ЗаполнитьДобавленныеРеквизиты() не удалось обработать документ %1 по причине:
						|%2'"),
						СверкаОбъект.Ссылка,
						СтрШаблон(Нстр("ru='Не найден налог по задаче ""%1""'"), СверкаОбъект.УдалитьНалог));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.СверкаСФНСПоИмущественнымНалогам, ВыборкаДокументов.Ссылка, ТекстСообщения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Для Каждого СтрокаСверки Из СверкаОбъект.Сверка Цикл

			Если Не ЗначениеЗаполнено(СтрокаСверки.КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = КодыНО[СтрокаСверки.УдалитьИФНС];
				Если КодНалоговогоОргана <> Неопределено Тогда
					СтрокаСверки.КодНалоговогоОргана = КодНалоговогоОргана;
				Иначе
					КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСверки.УдалитьИФНС, "Код");
					СтрокаСверки.КодНалоговогоОргана = КодНалоговогоОргана;
					КодыНО.Вставить(СтрокаСверки.УдалитьИФНС, КодНалоговогоОргана);  
				КонецЕсли;
			КонецЕсли;

			Если Не СтрокаСверки.ДобавленоВручную Тогда
				СтрокаСверки.ОбъектЕстьВРасчете = Истина;
			КонецЕсли;

		КонецЦикла;

		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СверкаОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Документы.СверкаСФНСПоИмущественнымНалогам.ЗаполнитьДобавленныеРеквизиты() не удалось обработать документ %1 по причине:
					|%2'"),
					СверкаОбъект.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СверкаСФНСПоИмущественнымНалогам, ВыборкаДокументов.Ссылка, ТекстСообщения);
		КонецПопытки; 

	КонецЦикла;

КонецПроцедуры

// Процедура заполняет добавленные реквизиты в документах.
// Обрабатываем все документы одной порцией, так как документов ожидается совсем немного.
//
Процедура ЗаполнитьДобавленныеРеквизитыДляФорматаСообщенияФНС503(Параметры) Экспорт

	// Под новый формат сообщения ФНС об исчисленных суммах имущественных налогов
	// добавлена, в числе прочего, ТЧ Расчет: по каждому объекту, который есть в расчете программы,
	// должна быть как минимум одна запись в этой ТЧ. Поэтому наличие записей в ней - это надежный признак, 
	// что документ уже обработан. Выбираем еще не обработанные сверки (на случай, если на первом заходе возникнут ошибки):
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СверкаСФНСПоИмущественнымНалогам.Ссылка КАК Ссылка,
	|	СверкаСФНСПоИмущественнымНалогам.Дата КАК Дата,
	|	СверкаСФНСПоИмущественнымНалогам.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.СверкаСФНСПоИмущественнымНалогам КАК СверкаСФНСПоИмущественнымНалогам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаСФНСПоИмущественнымНалогам.Расчет КАК СверкаСФНСПоИмущественнымНалогамРасчет
	|		ПО СверкаСФНСПоИмущественнымНалогам.Ссылка = СверкаСФНСПоИмущественнымНалогамРасчет.Ссылка
	|ГДЕ
	|	СверкаСФНСПоИмущественнымНалогамРасчет.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод УБЫВ,
	|	Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока ВыборкаДокументов.Следующий() Цикл

		ОбъектовОбработано = ОбъектовОбработано + 1;
		НачатьТранзакцию();

		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СверкаСФНСПоИмущественнымНалогам");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументов.Ссылка);
		Блокировка.Заблокировать();
		
		СверкаОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Если СверкаОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;

		// Сверки за периоды до 2022 года считаем уже выполненными
		СверкаОбъект.СравнениеЗавершено = (СверкаОбъект.НалоговыйПериод < '20220101');

		Для Каждого СтрокаСверки Из СверкаОбъект.Сверка Цикл

			// Если суммы сходятся, то для простоты считаем, что расчеты полностью сходятся.
			// В этом случае теперь ставим признак ПравильныйРасчет = 1.
			// Если было установлено, что правильный расчет в программе (ранее ПравильныйРасчет = 0),
			// то теперь это ПравильныйРасчет = 2.
			// Если было установлено, что правильный расчет в ФНС (ранее ПравильныйРасчет = 1),
			// то теперь это ПравильныйРасчет = 3.
			// Если не было установлено, какой расчет верный (ранее ПравильныйРасчет = 2),
			// то теперь это ПравильныйРасчет = 0.
			Если СтрокаСверки.ОбъектЕстьВРасчете И СтрокаСверки.ОбъектЕстьВРасчетеФНС
				 И СтрокаСверки.СуммаЛьгот = СтрокаСверки.СуммаЛьготФНС
				 И СтрокаСверки.СуммаНалога = СтрокаСверки.СуммаНалогаФНС Тогда
				СтрокаСверки.ПравильныйРасчет = 1;
			ИначеЕсли СтрокаСверки.ПравильныйРасчет = 0 Тогда
				СтрокаСверки.ПравильныйРасчет = 2;
			ИначеЕсли СтрокаСверки.ПравильныйРасчет = 1 Тогда
				СтрокаСверки.ПравильныйРасчет = 3;
			Иначе
				СтрокаСверки.ПравильныйРасчет = 0;
			КонецЕсли;

			// Ранее расчет по каждому объекту был простой, т.е. состоял из одной строки показателей -
			// все они хранились непосредственно в строке сверки.
			// Поэтому для перевода в новый формат по каждой строке сверки создаем одну строку в ТЧ Расчет
			// и/или одну строку в ТЧ РасчетФНС.
			СтрокаСверки.ИдентификаторСтроки = Новый УникальныйИдентификатор;

			Если СтрокаСверки.ОбъектЕстьВРасчете Тогда
				СтрокаРасчета = СверкаОбъект.Расчет.Добавить();
				СтрокаРасчета.ИдентификаторСтроки = СтрокаСверки.ИдентификаторСтроки;
				СтрокаРасчета.НалоговаяБаза = СтрокаСверки.УдалитьНалоговаяБаза;
				СтрокаРасчета.ДоляВПравеЧислитель = СтрокаСверки.УдалитьДоляВПравеЧислитель;
				СтрокаРасчета.ДоляВПравеЗнаменатель = СтрокаСверки.УдалитьДоляВПравеЗнаменатель;
				СтрокаРасчета.НалоговыйВычет = СтрокаСверки.УдалитьНалоговыйВычет;
				СтрокаРасчета.НалоговаяСтавка = СтрокаСверки.УдалитьНалоговаяСтавка;
				СтрокаРасчета.КоличествоМесяцевВладения = СтрокаСверки.УдалитьКоличествоМесяцевВладения;
				СтрокаРасчета.ПовышающийКоэффициент = СтрокаСверки.УдалитьПовышающийКоэффициент;
			КонецЕсли;

			Если СтрокаСверки.ОбъектЕстьВРасчетеФНС И СтрокаСверки.ПравильныйРасчет <> 1 Тогда
				СтрокаРасчетаФНС = СверкаОбъект.РасчетФНС.Добавить();
				СтрокаРасчетаФНС.ИдентификаторСтроки = СтрокаСверки.ИдентификаторСтроки;
				СтрокаРасчетаФНС.НалоговаяБаза = СтрокаСверки.УдалитьНалоговаяБазаФНС;
				СтрокаРасчетаФНС.ДоляВПравеЧислитель = СтрокаСверки.УдалитьДоляВПравеЧислительФНС;
				СтрокаРасчетаФНС.ДоляВПравеЗнаменатель = СтрокаСверки.УдалитьДоляВПравеЗнаменательФНС;
				СтрокаРасчетаФНС.НалоговыйВычет = СтрокаСверки.УдалитьНалоговыйВычетФНС;
				СтрокаРасчетаФНС.НалоговаяСтавка = СтрокаСверки.УдалитьНалоговаяСтавкаФНС;
				СтрокаРасчетаФНС.КоличествоМесяцевВладения = СтрокаСверки.УдалитьКоличествоМесяцевВладенияФНС;
				СтрокаРасчетаФНС.ПовышающийКоэффициент = СтрокаСверки.УдалитьПовышающийКоэффициентФНС;
			КонецЕсли;

			// Заполним ПоляРасхождений - это перечисление (строкой через запятую) полей расчета, которые разошлись.
			// Расхождения заполняют как в строке сверки в целом по объекту, так и в каждой отдельной строке расчета
			// (в этом случае указаны расхождения с соответствующей строкой другого расчета).
			// Имеет смысл, только если объект есть в обоих расчетах, но они не совпадают.
			Если СтрокаСверки.ОбъектЕстьВРасчете 
				 И СтрокаСверки.ОбъектЕстьВРасчетеФНС
				 И СтрокаСверки.ПравильныйРасчет <> 1 Тогда

				ОтборСтрок = Новый Структура("ИдентификаторСтроки", СтрокаСверки.ИдентификаторСтроки);
				Расчет = СверкаОбъект.Расчет.Выгрузить(ОтборСтрок);
				РасчетФНС = СверкаОбъект.Расчет.Выгрузить(ОтборСтрок);
				СтрокаСверки.ПоляРасхождений = СверкаСФНСПоИмущественнымНалогамФормы.СравнитьРасчетыПоОбъекту(
					Расчет,
					РасчетФНС,
					СтрокаСверки.СуммаЛьгот,
					СтрокаСверки.СуммаЛьготФНС,
					СтрокаСверки.СуммаНалога,
					СтрокаСверки.СуммаНалогаФНС,
					СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета(СверкаОбъект.Налог, СверкаОбъект.НалоговыйПериод));

				СтрокаРасчета.ПоляРасхождений = Расчет[0].ПоляРасхождений;
				СтрокаРасчетаФНС.ПоляРасхождений = РасчетФНС[0].ПоляРасхождений;

			КонецЕсли;

		КонецЦикла;

		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СверкаОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Документы.СверкаСФНСПоИмущественнымНалогам.ЗаполнитьДобавленныеРеквизитыДляФорматаСообщенияФНС503() не удалось обработать документ %1 по причине:
					|%2'"),
					СверкаОбъект.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СверкаСФНСПоИмущественнымНалогам, ВыборкаДокументов.Ссылка, ТекстСообщения);
		КонецПопытки;

	КонецЦикла;

	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.СверкаСФНСПоИмущественнымНалогам.ЗаполнитьДобавленныеРеквизитыДляФорматаСообщенияФНС503() не удалось обработать сверки: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		Параметры.ОбработкаЗавершена = Истина;
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СверкаСФНСПоИмущественнымНалогам,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.СверкаСФНСПоИмущественнымНалогам.ЗаполнитьДобавленныеРеквизитыДляФорматаСообщенияФНС503() успешно завершена: обработано %1 документов'"),
				ОбъектовОбработано));
	КонецЕсли;

КонецПроцедуры

// Функция проверяет, обработана ли сверка процедурой обновления (см. ЗаполнитьДобавленныеРеквизитыДляФорматаСообщенияФНС503()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция ЗаполненыДобавленныеРеквизитыДляФорматаСообщенияФНС503(Параметры) Экспорт

	Документ = Неопределено;

	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка.СверкаСФНСПоИмущественнымНалогам") Тогда
		Документ = Параметры.Данные;
	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("ДокументОбъект.СверкаСФНСПоИмущественнымНалогам")
		 Или ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
		Документ = Параметры.Данные.Ссылка;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СверкаСФНСПоИмущественнымНалогам.Ссылка КАК Ссылка,
	|	СверкаСФНСПоИмущественнымНалогам.Дата КАК Дата,
	|	СверкаСФНСПоИмущественнымНалогам.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.СверкаСФНСПоИмущественнымНалогам КАК СверкаСФНСПоИмущественнымНалогам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаСФНСПоИмущественнымНалогам.Расчет КАК СверкаСФНСПоИмущественнымНалогамРасчет
	|		ПО СверкаСФНСПоИмущественнымНалогам.Ссылка = СверкаСФНСПоИмущественнымНалогамРасчет.Ссылка
	|ГДЕ
	|	СверкаСФНСПоИмущественнымНалогамРасчет.Ссылка ЕСТЬ NULL
	|	И СверкаСФНСПоИмущественнымНалогам.Ссылка = &Документ";

	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли