#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает табличный документ с реестром выплаты самозанятым для дальнейшей выгрузки в Excel
//
// Параметры:
//  Ссылка - Документы.ВыплатыСамозанятым - Ссылка на документ, для которого следует подготовить реестр
//
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с реестром.
//
Функция РеестрДляВыгрузкиВExcel(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыплатыСамозанятым.Дата КАК Дата,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.УслугаВТаблице КАК УслугаВТаблице,
	|	ВыплатыСамозанятым.Номенклатура КАК Номенклатура,
	|	ВыплатыСамозанятым.Выплаты.(
	|		Контрагент КАК Контрагент,
	|		БанковскийСчет КАК БанковскийСчет,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Выплаты
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|ГДЕ
	|	ВыплатыСамозанятым.Ссылка = &Ссылка";
		
	ВыборкаДокумент = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаДокумент.Следующий() Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.КлючПараметровПечати = "Документ.ВыплатыСамозанятым.РеестрВыплатСамозанятымДляВыгрузкиВExcel";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыплатыСамозанятым.РеестрВыплатСамозанятымДляВыгрузкиВExcel");
	
	ОбластиМакета = Новый Структура("ШапкаТаблицы, Строка");
	Для Каждого ОписаниеОбласти Из ОбластиМакета Цикл
		ОбластиМакета[ОписаниеОбласти.Ключ] = Макет.ПолучитьОбласть(ОписаниеОбласти.Ключ);
	КонецЦикла;
	
	// Шапка таблицы
	Результат.Вывести(ОбластиМакета.ШапкаТаблицы);
	
	// Строки таблицы
	ИнформацияОСодержании = Новый Структура;
	УслугаВТаблице = ВыборкаДокумент.УслугаВТаблице;
	Если Не УслугаВТаблице Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Дата", ВыборкаДокумент.Дата);
		ПараметрыОбъекта.Вставить("Организация", ВыборкаДокумент.Организация);
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			ВыборкаДокумент.Номенклатура, ПараметрыОбъекта, Ложь, Ложь);
		ИнформацияОСодержании.Вставить("Содержание", Лев(СведенияОНоменклатуре.НаименованиеПолное, 100));
	КонецЕсли;
	ВыборкаСтрок = ВыборкаДокумент.Выплаты.Выбрать();
	Пока ВыборкаСтрок.Следующий() Цикл
		ОбластиМакета.Строка.Параметры.Заполнить(ВыборкаСтрок);
		Если Не УслугаВТаблице Тогда
			ОбластиМакета.Строка.Параметры.Заполнить(ИнформацияОСодержании);
		КонецЕсли;
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			ВыборкаСтрок.Контрагент,
			ВыборкаДокумент.Дата,
			ВыборкаСтрок.БанковскийСчет);
		ОбластиМакета.Строка.Параметры.Заполнить(СведенияОКонтрагенте);
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОКонтрагенте.ПолноеНаименование);
		ФИОКонтрагента = Новый Структура;
		ФИОКонтрагента.Вставить("Фамилия",  ЧастиИмени.Фамилия);
		ФИОКонтрагента.Вставить("Имя",      ЧастиИмени.Имя);
		ФИОКонтрагента.Вставить("Отчество", ЧастиИмени.Отчество);
		ОбластиМакета.Строка.Параметры.Заполнить(ФИОКонтрагента);
		Результат.Вывести(ОбластиМакета.Строка);
	КонецЦикла;
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие("ВыплатыСамозанятым.ВыгрузкаРеестра.Excel");
	
	Возврат Результат;
	
КонецФункции 

// Сохраняет файл с реестром в формате CSV
//
// Параметры:
//  ИмяФайла - Строка - Имя временного файла
//  Ссылка - Документы.ВыплатыСамозанятым - Ссылка на документ, для которого следует подготовить реестр
//
Процедура СохранитьРеестрДляВыгрузкиВCSV(ИмяФайла, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыплатыСамозанятым.Дата КАК Дата,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.СчетОрганизации КАК СчетОрганизации,
	|	ВыплатыСамозанятым.УслугаВТаблице КАК УслугаВТаблице,
	|	ВыплатыСамозанятым.Номенклатура КАК Номенклатура,
	|	ВыплатыСамозанятым.Выплаты.(
	|		Контрагент КАК Контрагент,
	|		БанковскийСчет КАК БанковскийСчет,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		Сумма КАК Сумма
	|	) КАК Выплаты
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|ГДЕ
	|	ВыплатыСамозанятым.Ссылка = &Ссылка";
		
	ВыборкаДокумент = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаДокумент.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	УслугаВТаблице = ВыборкаДокумент.УслугаВТаблице;
	Если Не УслугаВТаблице Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Дата", ВыборкаДокумент.Дата);
		ПараметрыОбъекта.Вставить("Организация", ВыборкаДокумент.Организация);
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			ВыборкаДокумент.Номенклатура, ПараметрыОбъекта, Ложь, Ложь);
		Содержание = Лев(СведенияОНоменклатуре.НаименованиеПолное, 100);
	КонецЕсли;
	
	// Строки таблицы
	ВыборкаСтрок = ВыборкаДокумент.Выплаты.Выбрать();
	Пока ВыборкаСтрок.Следующий() Цикл
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			ВыборкаСтрок.Контрагент,
			ВыборкаДокумент.Дата,
			ВыборкаСтрок.БанковскийСчет);
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОКонтрагенте.ПолноеНаименование);
		Если УслугаВТаблице Тогда
			Содержание = ВыборкаСтрок.Содержание;
		КонецЕсли;
		
		// В выгрузке должна быть строка вида - "Счет (20 знаков);Фамилия;Имя;Отчество;Сумма (разделитель - точка);
		// Сумма произведенных удержаний (разделитель - точка);Наименование товаров и услуг в чеке (СМЗ)
		МассивПодСтрок = Новый Массив;
		МассивПодСтрок.Добавить(СведенияОКонтрагенте.НомерСчета);
		МассивПодСтрок.Добавить(ЧастиИмени.Фамилия);
		МассивПодСтрок.Добавить(ЧастиИмени.Имя);
		МассивПодСтрок.Добавить(ЧастиИмени.Отчество);
		МассивПодСтрок.Добавить(Формат(ВыборкаСтрок.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
		МассивПодСтрок.Добавить(Формат(0, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")); // Сумма удержаний для СМЗ всегда 0
		МассивПодСтрок.Добавить(Содержание);
		
		ЗаписьТекста.ЗаписатьСтроку(СтрСоединить(МассивПодСтрок, ";"));
		
	КонецЦикла;
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие("ВыплатыСамозанятым.ВыгрузкаРеестра.CSV");
	
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры 

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ВыплатыСамозанятым";
	Набор.Идентификатор = Новый УникальныйИдентификатор("8c406acb-0821-4319-8aa7-11e7185778e8");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым");
	
КонецПроцедуры

// Возвращает реестр выплат самозанятым по сумме для подбора в банковские документы
//
// Параметры:
//  Сумма - Число - Сумма, на которую нужно найти реестр выплат самозанятым
//  Организация - Справочники.Организации - Организация, по которой следует найти реестр выплат самозанятым
//  ДатаДокумента - Дата - Дата документа оплаты
//  МассивРанееВыбранныхРеестров - Массив, Неопределено - Массив ранее выбранных реестров
//
// Возвращаемое значение:
//  Документы.ВыплатыСамозанятым - Ссылка на документ, который найден по сумме.
//
Функция РеестрВыплатСамозанятымПоСумме(Сумма, Организация, ДатаДокумента, МассивРанееВыбранныхРеестров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	Если МассивРанееВыбранныхРеестров = Неопределено Тогда
		МассивРанееВыбранныхРеестров = Новый Массив;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивРанееВыбранныхРеестров", МассивРанееВыбранныхРеестров);
	Если НачалоДня(ДатаДокумента) = ДатаДокумента Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(ДатаДокумента));
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(ДатаДокумента, ВидГраницы.Исключая));
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.РеестрВыплатыСамозанятым КАК РеестрВыплатыСамозанятым
	|ПОМЕСТИТЬ ВТ_РеестрыКОплате
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(&Период, Организация = &Организация) КАК ЗадолженностьСамозанятыхПоРееструОстатки
	|ГДЕ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток = &Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_РеестрыКОплате.РеестрВыплатыСамозанятым КАК РеестрВыплатыСамозанятым
	|ИЗ
	|	ВТ_РеестрыКОплате КАК ВТ_РеестрыКОплате
	|ГДЕ
	|	ВТ_РеестрыКОплате.РеестрВыплатыСамозанятым Не В(&МассивРанееВыбранныхРеестров)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ВыплатыСамозанятым.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.РеестрВыплатыСамозанятым;
	
КонецФункции

// Возвращает ссылку на документ оплаты реестра выплаты самозанятым.
//
// Параметры:
//  Ссылка - ДокументСсылка.ВыплатыСамозанятым - Реестр выплат самозанятым, для которого следует определить документ оплаты
//
// Возвращаемое значение:
//  Документы.СписаниеСРасчетногоСчета, Неопределено - Ссылка на документ, которым была произведена оплата
//
Функция ДокументОплаты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыплатыСамозанятым", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.РеестрВыплатСамозанятым = &ВыплатыСамозанятым
	|	И НЕ СписаниеСРасчетногоСчета.ПометкаУдаления
	|	И СписаниеСРасчетногоСчета.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает статус загрузки чеков для отображения в документах оплаты.
//
// Параметры:
//  Ссылка - ДокументСсылка.ВыплатыСамозанятым - Реестр выплат самозанятым, для которого следует определить документ оплаты
//
// Возвращаемое значение:
//  Строка - Статус загрузки чеков, варианты ответа "", СтатусНеВсеЧекиЗагружены() или СтатусЧекиЗагружены() 
//
Функция СтатусЗагрузкиЧеков(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
		
	// Если у документа был статус "Чеки загружены", то пользователь мог вручную очистить данные по чекам,
	//  поэтому нужно заново проверить загрузку чеков
	// Если же у документа еще не было статуса, то тем более нужно проверить загрузку чеков
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВыплатыСамозанятымВыплаты.ЧекСамозанятого <> ЗНАЧЕНИЕ(Справочник.ВыплатыСамозанятымПрисоединенныеФайлы.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗагруженныеЧеки,
	|	СУММА(ВЫБОР
	|			КОГДА ВыплатыСамозанятымВыплаты.ЧекСамозанятого = ЗНАЧЕНИЕ(Справочник.ВыплатыСамозанятымПрисоединенныеФайлы.ПустаяСсылка)
	|					И ВыплатыСамозанятымВыплаты.НомерЧека <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НеПрикрепленныеЧеки,
	|	СУММА(1) КАК ВсегоСтрок
	|ИЗ
	|	Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	|ГДЕ
	|	ВыплатыСамозанятымВыплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если (Выборка.ЗагруженныеЧеки <> NULL) И (Выборка.ВсегоСтрок <> NULL) Тогда
		Если Выборка.ЗагруженныеЧеки > 0 И Выборка.ЗагруженныеЧеки = Выборка.ВсегоСтрок Тогда
			Возврат СтатусЧекиЗагружены();		
		ИначеЕсли Выборка.ЗагруженныеЧеки > 0 Тогда
			// Есть загруженные чеки, но загружены не все
			Возврат СтатусНеВсеЧекиЗагружены();
		ИначеЕсли Выборка.НеПрикрепленныеЧеки = Выборка.ВсегоСтрок Тогда
			Возврат СтатусЧекиНеПрикреплены();
		Иначе
			// Чеки не загружены совсем или документ в статусе Отменен
			СтруктураСтатусаДокумента = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Неопределено);
			Если СтруктураСтатусаДокумента.Статус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Отклонено Тогда
				Возврат СтатусРеестрВыплатОтменен();
			Иначе
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Чеки не загружены совсем
		Возврат "";
	КонецЕсли;
		
КонецФункции 

// Устанавливает состояние документа в зависимости от данных в документе или переданного СостояниеДокумента
//
// Параметры:
//  Документ  - ДокументСсылка.ВыплатыСамозанятым - ссылка на документ, в котором нужно установить состояние
//
Процедура УстановитьСостояниеДокумента(Документ) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ, 
		"Организация, Проведен");
	ДокументПроведен = РеквизитыДокумента.Проведен;
	
	// Для получения статуса документа нельзя использовать процедуру
	// РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(...)
	// т.к. для нового документа, она вернет нам статус "Подготовлено", хотя по факту такой статус еще не установлен
	// Поэтому используем запрос
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияБанковскихДокументов.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СостоянияБанковскихДокументов
	|ГДЕ
	|	СостоянияБанковскихДокументов.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийСтатус = Неопределено;
	ТекущийСтатус = ?(Выборка.Следующий(), Выборка.Статус, ТекущийСтатус);
	
	// Если документ в статусе Отклонен, то другие статусы уже присваивать нельзя.
	Если (ТекущийСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Отклонено) Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусЗагрузкиЧеков = СтатусЗагрузкиЧеков(Документ);
	Если (ТекущийСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены) И (СтатусЗагрузкиЧеков = "ЧекиЗагружены") Тогда
		Возврат;
	КонецЕсли;
	Если (ТекущийСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены) И (СтатусЗагрузкиЧеков = "НеВсеЧекиЗагружены") Тогда
		Возврат;
	КонецЕсли;
	Если (СтатусЗагрузкиЧеков = "ЧекиЗагружены") 
		И (ТекущийСтатус <> Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены) Тогда
		НовыеСтатусыДокумента.Статус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены;
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Документ, НовыеСтатусыДокумента);
	ИначеЕсли (СтатусЗагрузкиЧеков = "НеВсеЧекиЗагружены") 
		И (ТекущийСтатус <> Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены) Тогда
		НовыеСтатусыДокумента.Статус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены;
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Документ, НовыеСтатусыДокумента);
	ИначеЕсли ТекущийСтатус = Неопределено Тогда
		// Сохраним статус самостоятельно, т.к. процедура
		// РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(...)
		// не может устанавить для документа статус по умолчанию = "Подготовлено"
		ЗаписатьСостояние(Документ, РеквизитыДокумента.Организация, Перечисления.СтатусыДокументовВыплатыСамозанятым.Подготовлено);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак, что есть неоплаченные реестры самозанятых.
//
// Параметры:
//  Организация - Справочники.Организации - Организация, по которой следует определить реестр выплат самозанятым
//
// Возвращаемое значение:
//  Булево - Признак, что есть неоплаченные реестры самозанятых 
//
Функция ЕстьНеоплаченныеРеестрыСамозанятых(Организация) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.РеестрВыплатыСамозанятым КАК РеестрВыплатыСамозанятым
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(, Организация = &Организация) КАК ЗадолженностьСамозанятыхПоРееструОстатки
	|ГДЕ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток > 0";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Возвращает время документа по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Часы, Минуты
Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 9, 0);
	
КонецФункции

// Возвращает реестры выплат самозанятым по самозанятому для подбора в банковские документы
//
// Параметры:
//  Самозанятый - Справочники.Контрагенты - Самозанятый, по которой следует найти реестр выплат самозанятым
//  Сумма - Число - Сумма, на которую нужно найти реестр выплат самозанятым
//  Организация - Справочники.Организации - Организация, по которой следует найти реестр выплат самозанятым
//  ДатаДокумента - Дата - Дата документа оплаты
//
// Возвращаемое значение:
//  ТаблицаЗначений -таблица с реестрами, которые найдены по самозанятому.
//
Функция РеестрыВыплатПоСамозанятому(Самозанятый, Сумма, Организация, ДатаДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Самозанятый", Самозанятый);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	Если НачалоДня(ДатаДокумента) = ДатаДокумента Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(ДатаДокумента));
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(ДатаДокумента, ВидГраницы.Исключая));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.РеестрВыплатыСамозанятым КАК РеестрВыплат,
	|	ЗадолженностьСамозанятыхПоРееструОстатки.РеестрВыплатыСамозанятым.Номер КАК Номер,
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СчетСамозанятого КАК БанковскийСчет,
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Самозанятый = &Самозанятый) КАК ЗадолженностьСамозанятыхПоРееструОстатки
	|ГДЕ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток >= &Сумма
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадолженностьСамозанятыхПоРееструОстатки.РеестрВыплатыСамозанятым";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает банковский счет самозанятого из документа
//
// Параметры:
//  Документ    - Документы.ВыплатыСамозанятым - Ссылка на документ, из которого следует получить счет самозанятого
//  Самозанятый - Справочники.Контрагенты - самозанятый, чей банковский счет нужно вернуть
//
// Возвращаемое значение:
//  Справочники.БанковскиеСчета - банковский счет самозанятого
//
Функция БанковскийСчетСамозанятого(Документ, Самозанятый) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",     Документ);
	Запрос.УстановитьПараметр("Контрагент", Самозанятый);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыплатыСамозанятымВыплаты.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	|ГДЕ
	|	ВыплатыСамозанятымВыплаты.Ссылка = &Ссылка
	|	И ВыплатыСамозанятымВыплаты.Контрагент = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.БанковскийСчет;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьСостояние(СсылкаНаОбъект, Организация, СостояниеДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьРегистра = РегистрыСведений.СтатусыДокументов.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Документ		= СсылкаНаОбъект;
	ЗаписьРегистра.Организация	= Организация;
	ЗаписьРегистра.Статус		= СостояниеДокумента;
	ЗаписьРегистра.Записать();
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Функция СтатусРеестрВыплатОтменен() Экспорт
	
	Возврат "РеестрВыплатОтменен";
	
КонецФункции

Функция СтатусНеВсеЧекиЗагружены() Экспорт
	
	Возврат "НеВсеЧекиЗагружены";
	
КонецФункции

Функция СтатусЧекиНеПрикреплены() Экспорт
	
	Возврат "ЧекиНеПрикреплены";
	
КонецФункции 

Функция СтатусЧекиЗагружены() Экспорт
	
	Возврат "ЧекиЗагружены";
	
КонецФункции

Функция СтатусЗагрузкиЧековПриведенный(СтатусЗагрузкиЧеков) Экспорт
	
	Если СтатусЗагрузкиЧеков = "ЧекиЗагружены" Тогда
		Возврат Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены;
	ИначеЕсли СтатусЗагрузкиЧеков = "НеВсеЧекиЗагружены" ИЛИ СтатусЗагрузкиЧеков = "ЧекиНеПрикреплены" Тогда
		Возврат Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены;
	Иначе
		Возврат Перечисления.СтатусыДокументовВыплатыСамозанятым.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", 
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период));
		
	Реквизиты.Вставить("ПлательщикНДФЛ", 
		УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПлательщикНДФЛ", Реквизиты.ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("СинонимУслуги", НСтр("ru = 'Услуги'"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц)
		+ ТекстЗапросаВыплаты(НомераТаблиц)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеУслугИП(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Процедура СформироватьДвиженияНачислениеЗадолженностиСамозанятым(ТаблицаВыплаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыНачислениеЗадолженностиСамозанятым(ТаблицаВыплаты, ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Параметры.Реквизиты[0]);
	ИнформацияОСодержании = Новый Структура;
	УслугаВТаблице = Реквизиты.УслугаВТаблице;
	Если Не УслугаВТаблице Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Дата", Реквизиты.Период);
		ПараметрыОбъекта.Вставить("Организация", Реквизиты.Организация);
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			Реквизиты.Номенклатура, ПараметрыОбъекта, Ложь, Ложь);
		ИнформацияОСодержании.Вставить("Содержание", СведенияОНоменклатуре.НаименованиеПолное);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаВыплаты Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = ?(УслугаВТаблице, СтрокаТаблицы.Содержание, ИнформацияОСодержании.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		Для Ном = 1 По 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				Ном, СтрокаТаблицы["Субконто" + Ном]);
		КонецЦикла;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыССамозанятыми;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Самозанятый);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			СтрокаТаблицы.Сумма,
			СтрокаТаблицы.Сумма,
			,
			,
			,
			,
			Проводка);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхВТабличнуюЧасть

// Позволяет досопоставить вручную колонки загружаемого файла и колонки табличной части, если они не были сопоставлены автоматически.
// Используется при пакетной загрузке данных.
//
// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений - Загружаемые данные из файла.
//  СоответствиеКолонок - Соответствие - Новое соответствие колонок загружаемого файла и колонок табличной части.
//
Процедура СопоставитьКолонкиДанныхИзФайла(ЗагружаемыеДанные, СоответствиеКолонок) Экспорт
	
	// Ключевой колонкой, позволяющей загружать данные, является колонка "Ссылка на чек".
	// Если она не была явно указана в загружаемом файле, пробуем сопоставить её по содержимому загружаемых данных.
	
	Если ЗагружаемыеДанные.Колонки.Найти("СсылкаНаЧек") <> Неопределено Тогда
		// Колонка "СсылкаНаЧек" уже есть в загружаемых данных. Сопоставление не требуется.
		Возврат;
	КонецЕсли;
	
	ЧислоСтрок = ?(ЗагружаемыеДанные.Количество() > 5, 5, ЗагружаемыеДанные.Количество()); // первых 5-ти строк будет достаточно для анализа
	
	Для НомерСтроки = 0 По ЧислоСтрок - 1 Цикл
		
		СтрокаДанных = ЗагружаемыеДанные[НомерСтроки];
		
		Для Каждого Колонка Из ЗагружаемыеДанные.Колонки Цикл
			
			Если Не СодержитСсылкуНаЧек(СтрокаДанных[Колонка.Имя]) Тогда
				Продолжить;
			КонецЕсли;
			
			СоответствиеКолонок.Вставить(Колонка.Имя, "СсылкаНаЧек");
			Возврат;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сопоставляет построчно содержимое загружаемого файла и содержимое табличной части, в которую происходит загрузка.
// Пакетная загрузка данных с построчным сопоставлением.
//
// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений - Загружаемые данные из файла.
//  Параметры - Структура - Параметры прикладной загрузки (см. ЗагрузкаДанныхИзВнешнихФайловКлиент.НовыйПараметрыПрикладнойЗагрузки()).
//  ТекстОшибки - Строка - Текст ошибки пользователю в случае, когда невозможно выполнить сопоставление данных.
//
Процедура СопоставитьЗагружаемыеДанныеПострочно(ЗагружаемыеДанные, Параметры, ТекстОшибки) Экспорт
	
	Если ЗагружаемыеДанные.Колонки.Найти("СсылкаНаЧек") = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось найти колонку со ссылкой на чек. Данные не могут быть загружены.'");
		Возврат;
	КонецЕсли;
	
	Документ = Параметры.ОбъектДляЗагрузки;
	
	ДанныеИзФайла = ЗагружаемыеДанные.Скопировать();
	// Дополним колонки для сбора данных
	ДанныеИзФайла.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ДанныеИзФайла.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеИзФайла.Колонки.Добавить("ПолноеНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеИзФайла.Колонки.Добавить("СтрокаОбработана", Новый ОписаниеТипов("Булево"));
	
	// Сумма может быть не загружена, но в дальнейшем мы можем по ней искать строку.
	СуммаЗагружена = ДанныеИзФайла.Колонки.Найти("Сумма") <> Неопределено;
	
	ЕстьКолонкаИмя = ДанныеИзФайла.Колонки.Найти("Имя") <> Неопределено;
	ЕстьКолонкаФамилия = ДанныеИзФайла.Колонки.Найти("Фамилия") <> Неопределено;
	ЕстьКолонкаОтчество = ДанныеИзФайла.Колонки.Найти("Отчество") <> Неопределено;
	ЕстьКолонкаФИО = ДанныеИзФайла.Колонки.Найти("ФИО") <> Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеИзФайла Цикл
		
		// ИНН
		ЧастьСсылкиНаЧек = СтрЗаменить(СтрокаДанных.СсылкаНаЧек, ВыплатыСамозанятымВызовСервераПовтИсп.АдресСервисаФНС(), "");
		МассивЧастейСсылки = СтрРазделить(ЧастьСсылкиНаЧек, "/");
		СтрокаДанных.ИНН = ВыплатыСамозанятым.ИННИзСсылкиНаЧек(МассивЧастейСсылки);
		
		// Полное наименование контрагента
		Если ЕстьКолонкаФИО Тогда
			СтрокаДанных.ПолноеНаименование = СокрЛП(СтрокаДанных.ФИО);
		Иначе
			МассивЧастейНаименования = Новый Массив;
			Если ЕстьКолонкаФамилия Тогда
				МассивЧастейНаименования.Добавить(СтрокаДанных.Фамилия);
			КонецЕсли;
			Если ЕстьКолонкаИмя Тогда
				МассивЧастейНаименования.Добавить(СтрокаДанных.Имя);
			КонецЕсли;
			Если ЕстьКолонкаОтчество Тогда
				МассивЧастейНаименования.Добавить(СтрокаДанных.Отчество);
			КонецЕсли;
			СтрокаДанных.ПолноеНаименование = СтрСоединить(МассивЧастейНаименования, " ");
		КонецЕсли;

		// Сумма платежа
		Если СуммаЗагружена И СтрокаДанных.Сумма = 0 Тогда
			СуммаЗагружена = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Ограничим выбор только теми, что есть в исходном документе
	ИсходныйМассивКонтрагентов = Документ.Выплаты.ВыгрузитьКолонку("Контрагент");
	ВыплатыСамозанятым.ОпределитьКонтрагентовПоДаннымФайла(ДанныеИзФайла, ИсходныйМассивКонтрагентов);
	
	Для Каждого СтрокаВыплаты Из Документ.Выплаты Цикл
		Отбор = Новый Структура;
		
		Отбор.Вставить("СтрокаОбработана", Ложь);
		Отбор.Вставить("Контрагент", СтрокаВыплаты.Контрагент);
		Если СуммаЗагружена Тогда
			Отбор.Вставить("Сумма", СтрокаВыплаты.Сумма);
		КонецЕсли;
		СтрокиДанных = ДанныеИзФайла.НайтиСтроки(Отбор);
		Если СтрокиДанных.Количество() = 0 Тогда
			// Нет данных по этой строке
			Продолжить;
		КонецЕсли;
		СтрокаДанных = СтрокиДанных[0];
		СтрокаДанных.СтрокаОбработана = Истина;
		Если Не ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			// Контрагент не найден
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанные[СтрокаДанных.НомерСтроки].НомерСтрокиТабличнойЧасти = СтрокаВыплаты.НомерСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СодержитСсылкуНаЧек(Строка)
	
	АдресСервиса = ВыплатыСамозанятымВызовСервераПовтИсп.АдресСервисаФНС();
	
	Если СтрНайти(НРег(Строка), АдресСервиса) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаПараметровПроведения

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыплатыСамозанятым.Ссылка КАК Регистратор,
	|	ВыплатыСамозанятым.Дата КАК Период,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.СчетаУчетаЗатратВТаблице КАК СчетаУчетаЗатратВТаблице,
	|	ВыплатыСамозанятым.СчетЗатрат КАК СчетЗатрат,
	|	ВыплатыСамозанятым.СуммаДокумента КАК СуммаДокумента,
	|	ВыплатыСамозанятым.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ВыплатыСамозанятым.Субконто1 КАК Субконто1,
	|	ВыплатыСамозанятым.Субконто2 КАК Субконто2,
	|	ВыплатыСамозанятым.Субконто3 КАК Субконто3,
	|	ВыплатыСамозанятым.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВыплатыСамозанятым.УслугаВТаблице КАК УслугаВТаблице,
	|	ВыплатыСамозанятым.Номенклатура КАК Номенклатура,
	|	ВыплатыСамозанятым.ПодразделениеОрганизации КАК Подразделение
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|ГДЕ
	|	ВыплатыСамозанятым.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетаУчетаЗатратВТаблице КАК СчетаУчетаЗатратВТаблице,
	|	Реквизиты.СчетЗатрат КАК СчетЗатрат,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	Реквизиты.Субконто1 КАК Субконто1,
	|	Реквизиты.Субконто2 КАК Субконто2,
	|	Реквизиты.Субконто3 КАК Субконто3,
	|	Реквизиты.ОтражениеВУСН КАК ОтражениеВУСН,
	|	Реквизиты.УслугаВТаблице КАК УслугаВТаблице,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	Реквизиты.Подразделение КАК Подразделение 
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаВыплаты", НомераТаблиц.Количество());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыплатыСамозанятымВыплаты.Ссылка КАК Ссылка,
	|	ВыплатыСамозанятымВыплаты.НомерСтроки КАК НомерСтроки,
	|	ВыплатыСамозанятымВыплаты.Контрагент КАК Контрагент,
	|	ВыплатыСамозанятымВыплаты.БанковскийСчет КАК БанковскийСчет,
	|	ВыплатыСамозанятымВыплаты.Количество КАК Количество,
	|	ВыплатыСамозанятымВыплаты.Цена КАК Цена,
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма,
	|	ВыплатыСамозанятымВыплаты.Номенклатура КАК Номенклатура,
	|	ВыплатыСамозанятымВыплаты.Содержание КАК Содержание,
	|	ВыплатыСамозанятымВыплаты.СчетЗатрат КАК СчетЗатрат,
	|	ВыплатыСамозанятымВыплаты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ВыплатыСамозанятымВыплаты.Субконто1 КАК Субконто1,
	|	ВыплатыСамозанятымВыплаты.Субконто2 КАК Субконто2,
	|	ВыплатыСамозанятымВыплаты.Субконто3 КАК Субконто3,
	|	ВыплатыСамозанятымВыплаты.ОтражениеВУСН КАК ОтражениеВУСН
	|ПОМЕСТИТЬ ВременнаяТаблицаВыплаты
	|ИЗ
	|	Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	|ГДЕ
	|	ВыплатыСамозанятымВыплаты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыплаты(НомераТаблиц)
	
	НомераТаблиц.Вставить("Выплаты", НомераТаблиц.Количество());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыплатыСамозанятымВыплаты.Ссылка КАК РеестрВыплатыСамозанятым,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВыплатыСамозанятымВыплаты.Контрагент КАК Самозанятый,
	|	ВыплатыСамозанятымВыплаты.БанковскийСчет КАК СчетСамозанятого,
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма,
	|	ВыплатыСамозанятымВыплаты.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.СчетЗатрат
	|		ИНАЧЕ Реквизиты.СчетЗатрат
	|	КОНЕЦ КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.ПодразделениеЗатрат
	|		ИНАЧЕ Реквизиты.ПодразделениеЗатрат
	|	КОНЕЦ КАК ПодразделениеЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто1
	|		ИНАЧЕ Реквизиты.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто2
	|		ИНАЧЕ Реквизиты.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто3
	|		ИНАЧЕ Реквизиты.Субконто3
	|	КОНЕЦ КАК Субконто3
	|ИЗ
	|	ВременнаяТаблицаВыплаты КАК ВыплатыСамозанятымВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не Реквизиты.ПрименяетсяУСНДоходыМинусРасходы Тогда
		ПараметрыПроведения.Вставить("УСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("УСНРеквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасходыПредпринимателя
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("УСНТаблицаРасходов", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.УслугаВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.Номенклатура
	|		ИНАЧЕ Реквизиты.Номенклатура
	|	КОНЕЦ КАК ЭлементРасхода,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоМатериал,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.СчетЗатрат
	|		ИНАЧЕ Реквизиты.СчетЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	ВыплатыСамозанятымВыплаты.Количество КАК Количество,
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма,
	|	0 КАК НДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.ОтражениеВУСН
	|		ИНАЧЕ Реквизиты.ОтражениеВУСН
	|	КОНЕЦ КАК ОтражениеВУСН
	|ИЗ
	|	ВременнаяТаблицаВыплаты КАК ВыплатыСамозанятымВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеУслугИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ИПРеквизиты",            Неопределено);
		ПараметрыПроведения.Вставить("ИПТаблицаУслуг",         Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаВзаиморасчетыИП", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ИПРеквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВыплатыСамозанятым"" КАК ТипПоступления,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация,
	|	Неопределено КАК ТипСклада,
	|	Ложь КАК НДСВключенВСтоимость,
	|	Ложь КАК УчетАгентскогоНДС,
	|	Неопределено КАК ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ИПТаблицаУслуг", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	ВыплатыСамозанятымВыплаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Реквизиты.УслугаВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.Номенклатура
	|		ИНАЧЕ Реквизиты.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма,
	|	0 КАК НДС,
	|	ВыплатыСамозанятымВыплаты.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ВыплатыСамозанятымВыплаты.СчетЗатрат
	|		ИНАЧЕ Реквизиты.СчетЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто1
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто1
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто2
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто3
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.Субконто1
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.Субконто1
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.Субконто2
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто1
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто2
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА ВыплатыСамозанятымВыплаты.Субконто3
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (Реквизиты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ Реквизиты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ Реквизиты.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.Субконто1
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (Реквизиты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ Реквизиты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ Реквизиты.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.Субконто2
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И (Реквизиты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ Реквизиты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ИЛИ Реквизиты.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|				И ВыплатыСамозанятымВыплаты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ВыплатыСамозанятымВыплаты.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	ВременнаяТаблицаВыплаты КАК ВыплатыСамозанятымВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ТаблицаВзаиморасчетыИП", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК ДокументРасчетов,
	|	Реквизиты.СуммаДокумента КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьПараметрыНачислениеЗадолженностиСамозанятым(ТаблицаВыплаты, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа.
	СписокОбязательныхКолонок = ""
	+ "Период,"                          // <Дата> - дата докумета, записывающего движения
	+ "Регистратор,"                     // <Регистратор> - документ, записывающий движения в регистры
	+ "Организация,"                     // <СправочникСсылка.Организации> - организация документа
	+ "Подразделение,"                   // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение организация документа
	+ "УслугаВТаблице,"                  // <Булево> - признак того, что услуга указывается в списке
	+ "Номенклатура"                     // <СправочникСсылка.Номенклатура> - Услуга, которую мы получаем
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы задолженности, которая будет начислена контрагентам.
	СписокОбязательныхКолонок = ""
	+ "Самозанятый,"         // <СправочникСсылка.Контрагенты> - самозанятой, задолженность которому начисляется
	+ "Содержание,"          // <Строка> - содержание операции
	+ "СчетЗатрат,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат
	+ "ПодразделениеЗатрат," // <СправочникСсылка.ПодразделенияОрганизаций> - Подразделение затрат
	+ "Субконто1,"           // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"           // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"           // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Сумма"                // <Число(15,2)> - сумма задолженности
	;
	Параметры.Вставить("ТаблицаВыплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплаты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
 
 Ограничение.Текст =
 "РазрешитьЧтениеИзменение
 |ГДЕ
 | ЗначениеРазрешено(Организация)";
 
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатрат", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СчетаУчетаЗатратВШапке");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",            "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",            "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",            "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	
	// Табличная часть Выплаты
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Выплаты", "СчетЗатрат", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",        "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",        "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",        "СубконтоЗатрат3");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Выплаты");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетаУчетаЗатратВТаблице"); // Для одноименного условия
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"СчетаУчетаЗатратВШапке", // Для одноименного условия
		"СчетаУчетаЗатратВТаблице");

КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("СчетаУчетаЗатратВШапке") Тогда
		ДанныеЗаполнения.СчетаУчетаЗатратВШапке = (ДанныеЗаполнения.СчетаУчетаЗатратВТаблице = Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Реестр выплат самозанятым
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрВыплатСамозанятым";
	КомандаПечати.Представление = НСтр("ru = 'Реестр выплат самозанятым'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр),
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект,
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрВыплатСамозанятым") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РеестрВыплатСамозанятым",
			НСтр("ru = 'Реестр выплат самозанятым'"),
			ПечатьРеестрВыплатСамозанятым(МассивОбъектов, ОбъектыПечати),
			, // пиктограмма печатной формы отсутствует
			"Документ.ВыплатыСамозанятым.ПФ_MXL_РеестрВыплатСамозанятым");
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьРеестрВыплатСамозанятым(Ссылки, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	ВыплатыСамозанятым.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо,
	|	ВыплатыСамозанятым.Номер КАК Номер,
	|	ВыплатыСамозанятым.Дата КАК Дата,
	|	ВыплатыСамозанятым.Ссылка КАК Ссылка,
	|	ВыплатыСамозанятым.Номенклатура КАК Номенклатура,
	|	ВыплатыСамозанятым.УслугаВТаблице КАК УслугаВТаблице,
	|	ВыплатыСамозанятым.СуммаДокумента КАК Всего,
	|	ВыплатыСамозанятым.Выплаты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Контрагент КАК Контрагент,
	|		БанковскийСчет КАК БанковскийСчет,
	|		Сумма КАК Сумма,
	|		Содержание КАК Содержание,
	|		НомерЧека КАК НомерЧека,
	|		ПричинаОтказа КАК ПричинаОтказа,
	|		РасшифровкаРезультата КАК РасшифровкаРезультата
	|	) КАК Выплаты
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|ГДЕ
	|	ВыплатыСамозанятым.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыплатыСамозанятым.Ссылка,
	|	ВыплатыСамозанятым.Дата,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.КлючПараметровПечати = "Документ.ВыплатыСамозанятым.ПФ_MXL_РеестрВыплатСамозанятым";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыплатыСамозанятым.ПФ_MXL_РеестрВыплатСамозанятым");
	
	ОбластиМакета = Новый Структура("Шапка, ШапкаТаблицы, Строка, КонецТаблицы, Подпись");
	Для Каждого ОписаниеОбласти Из ОбластиМакета Цикл
		ОбластиМакета[ОписаниеОбласти.Ключ] = Макет.ПолучитьОбласть(ОписаниеОбласти.Ключ);
	КонецЦикла;
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НачалоОбластиПечати = Результат.ВысотаТаблицы + 1;
		
		// Начало документа
		ОбластиМакета.Шапка.Параметры.Заполнить(ВыборкаДокумент);
		ФорматированныеПараметры = Новый Структура;
		ФорматированныеПараметры.Вставить("ДатаДокумента", НРег(Формат(ВыборкаДокумент.Дата, "ДЛФ=D")));
		ФорматированныеПараметры.Вставить("НомерДокумента", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокумент.Номер, Истина, Истина));
		ОбластиМакета.Шапка.Параметры.Заполнить(ФорматированныеПараметры);
		Результат.Вывести(ОбластиМакета.Шапка);
		
		// Шапка таблицы
		Результат.Вывести(ОбластиМакета.ШапкаТаблицы);
		
		ИнформацияОСодержании = Новый Структура;
		УслугаВТаблице = ВыборкаДокумент.УслугаВТаблице;
		Если Не УслугаВТаблице Тогда
			ПараметрыОбъекта = Новый Структура;
			ПараметрыОбъекта.Вставить("Дата", ВыборкаДокумент.Дата);
			ПараметрыОбъекта.Вставить("Организация", ВыборкаДокумент.Организация);
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
				ВыборкаДокумент.Номенклатура, ПараметрыОбъекта, Ложь, Ложь);
			ИнформацияОСодержании.Вставить("Содержание", СведенияОНоменклатуре.НаименованиеПолное);
		КонецЕсли;
		
		// Строки таблицы
		ВыборкаСтрок = ВыборкаДокумент.Выплаты.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			
			// В основном сценарии предполагаем, что чеки для самозанятых успешно созданы и заполняем макет из запроса напрямую
			ОбластиМакета.Строка.Параметры.Заполнить(ВыборкаСтрок);
			// В тех случаях, когда банк вернет ошибку по чекам самозанятых, нужно в печатную форму вписать ошибку,
			// возвращенную банком. Т.к. чек не будет сформирован.
			ИнформацияОЧеке = Новый Структура("НомерЧека");
			Если ЗначениеЗаполнено(ВыборкаСтрок.ПричинаОтказа) Тогда
				ИнформацияОЧеке.НомерЧека = ВыборкаСтрок.РасшифровкаРезультата;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаСтрок.НомерЧека) Тогда
				ИнформацияОЧеке.НомерЧека = СтрШаблон("№ %1", ВыборкаСтрок.НомерЧека);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИнформацияОЧеке.НомерЧека) Тогда
				ОбластиМакета.Строка.Параметры.Заполнить(ИнформацияОЧеке);
			КонецЕсли;
			
			Если Не УслугаВТаблице Тогда
				ОбластиМакета.Строка.Параметры.Заполнить(ИнформацияОСодержании);
			КонецЕсли;
			СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				ВыборкаСтрок.Контрагент,
				ВыборкаДокумент.Дата,
				ВыборкаСтрок.БанковскийСчет);
			ОбластиМакета.Строка.Параметры.Заполнить(СведенияОКонтрагенте);
			Результат.Вывести(ОбластиМакета.Строка);
		КонецЦикла;
		
		// Конец таблицы
		ОбластиМакета.КонецТаблицы.Параметры.Заполнить(ВыборкаДокумент);
		Результат.Вывести(ОбластиМакета.КонецТаблицы);
		
		// Подписи
		Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(
			ВыборкаДокумент.ОтветственныйФизическоеЛицо,
			ВыборкаДокумент.Организация,
			ВыборкаДокумент.Дата);
		СведенияПодписи = Новый Структура;
		СведенияПодписи.Вставить("ДолжностьПодписавшегоЛица", Полномочия.ДолжностьПредставление);
		СведенияПодписи.Вставить("ДокументПодписал",          Полномочия.ФИО.Представление);
		ОбластиМакета.Подпись.Параметры.Заполнить(СведенияПодписи);
		
		Результат.Вывести(ОбластиМакета.Подпись);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоОбластиПечати,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура - ЗаполнитьСтатусыДокументов - обработчик обновления, 
//  заполняет статусы для документов ВыплатыСамозанятым
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьСтатусыДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВыплатыСамозанятым.Дата КАК Дата,
	|	ВыплатыСамозанятым.Ссылка КАК Ссылка,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	СтатусыДокументов.Статус КАК Статус
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ВыплатыСамозанятым.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	СтатусыДокументов.Статус ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыплатыСамозанятым.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Ссылка);
			
			НазначаемыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Подготовлено;
			СтатусЗагрузкиЧеков = СтатусЗагрузкиЧеков(Выборка.Ссылка);
			Если СтатусЗагрузкиЧеков = "ЧекиЗагружены" Тогда
				НазначаемыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены;
			ИначеЕсли СтатусЗагрузкиЧеков = "НеВсеЧекиЗагружены" Тогда
				НазначаемыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены;
			Иначе
				Если ДокументОплаты(Выборка.Ссылка) <> Неопределено Тогда
					НазначаемыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Оплачено;
				КонецЕсли;
			КонецЕсли;
			
			Блокировка.Заблокировать();
		
			ЗаписьРегистра = РегистрыСведений.СтатусыДокументов.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Документ		= Выборка.Ссылка;
			ЗаписьРегистра.Организация	= Выборка.Организация;
			ЗаписьРегистра.Статус		= НазначаемыйСтатус;
			ЗаписьРегистра.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре Документы.ВыплатыСамозанятым.ЗаполнитьСтатусыДокументов() не удалось обработать документ ""Выплаты Самозанятым"" по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВыплатыСамозанятым, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре Документы.Выплаты Самозанятым.ЗаполнитьСтатусыДокументов() не удалось обработать документ ""Выплаты Самозанятым"": в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВыплатыСамозанятым, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.Выплаты Самозанятым.ЗаполнитьСтатусыДокументов() обработала очередную порцию документов ""Выплаты Самозанятым"": %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - ЗаполнитьРасчетныеСчета - обработчик обновления, 
//  заполняет незаполненные расчетные счета в документах ВыплатыСамозанятым
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьРасчетныеСчета(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВыплатыСамозанятым.Дата КАК Дата,
	|	ВыплатыСамозанятым.Ссылка КАК Ссылка,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ВыплатыСамозанятым.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ВыплатыСамозанятым.Организация = БанковскиеСчета.Владелец
	|ГДЕ
	|	ВыплатыСамозанятым.СчетОрганизации = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	И ВыплатыСамозанятым.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НЕ БанковскиеСчета.Ссылка ЕСТЬ NULL
	|	И &ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыплатыСамозанятым.Дата УБЫВ,
	|	ВыплатыСамозанятым.Ссылка УБЫВ"; 
	
	ПоследняяДатаДокумента = Неопределено;
	ПоследняяСсылкаДокумента = Неопределено;
	Если Параметры.Свойство("ПоследняяДатаДокумента", ПоследняяДатаДокумента) И Параметры.Свойство("ПоследняяСсылкаДокумента", ПоследняяСсылкаДокумента) Тогда
		Если ПоследняяДатаДокумента <> Неопределено И ПоследняяСсылкаДокумента <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "(ВыплатыСамозанятым.Дата < &ПоследняяДатаДокумента ИЛИ (ВыплатыСамозанятым.Дата = &ПоследняяДатаДокумента И ВыплатыСамозанятым.Ссылка < &ПоследняяСсылкаДокумента))");
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "ИСТИНА");
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПоследняяДатаДокумента", ПоследняяДатаДокумента);
	Запрос.УстановитьПараметр("ПоследняяСсылкаДокумента", ПоследняяСсылкаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВыплатыСамозанятым");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация,
				ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			Параметры.Вставить("ПоследняяДатаДокумента", Выборка.Дата);
			Параметры.Вставить("ПоследняяСсылкаДокумента", Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре Документы.ВыплатыСамозанятым.ЗаполнитьРасчетныеСчета() не удалось обработать документ ""Выплаты Самозанятым"" по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВыплатыСамозанятым, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре Документы.ВыплатыСамозанятым.ЗаполнитьРасчетныеСчета() не удалось обработать документ ""Выплаты Самозанятым"": в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВыплатыСамозанятым, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.ВыплатыСамозанятым.ЗаполнитьРасчетныеСчета() обработала очередную порцию документов ""Выплаты Самозанятым"": %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли