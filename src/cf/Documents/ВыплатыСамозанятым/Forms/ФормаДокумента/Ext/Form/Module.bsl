#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ВыплатыСамозанятым);
	Элементы.ФормаВыгрузитьРеестр.Видимость = МожноРедактировать;
	
	КоманднаяПанельПодменюДиректБанк = ЭтотОбъект.ПодчиненныеЭлементы.ГруппаКоманднаяПанель.ПодчиненныеЭлементы.Найти("ПодменюДиректБанк");
	Если КоманднаяПанельПодменюДиректБанк <> Неопределено Тогда
		КоманднаяПанельПодменюДиректБанкОбычное = КоманднаяПанельПодменюДиректБанк.ПодчиненныеЭлементы.Найти("ПодменюДиректБанкОбычное");
		Если КоманднаяПанельПодменюДиректБанкОбычное <> Неопределено Тогда
			Для Каждого КнопкаФормыДБ Из КоманднаяПанельПодменюДиректБанкОбычное.ПодчиненныеЭлементы Цикл
				КнопкаФормыДБ.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
			КонецЦикла;
		КонецЕсли;		
		Элементы.Переместить(КоманднаяПанельПодменюДиректБанк, Элементы.ГруппаКоманднаяПанель);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораСчетаОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
		ЭтотОбъект,
		Объект.Ссылка,
		ИмяСобытия,
		Параметр,
		Источник);
	Если (ИмяСобытия = "ЗагрузкаЧековСамозанятых" И Источник = Объект.Ссылка)
			ИЛИ (ИмяСобытия = "ОбновитьСостояниеВыплатыСамозанятым")
			ИЛИ (ИмяСобытия = "ОбновитьСостояниеОбменСБанками") Тогда
				ПрочитатьДокументИОбновитьСостояние();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		Если Параметр.Владелец = Объект.Организация Тогда
			СчетОрганизацииПриИзмененииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			ОрганизацияПриИзмененииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	СтатусЗагрузкиЧеков = Документы.ВыплатыСамозанятым.СтатусЗагрузкиЧеков(Объект.Ссылка);
	// Приведенное состояние учитывает ручное изменение состояния документа и статуса загрузки чеков
	ПриведенноеСостояние = Документы.ВыплатыСамозанятым.СтатусЗагрузкиЧековПриведенный(СтатусЗагрузкиЧеков);
	Если Не ПриведенноеСостояние.Пустая() Тогда
		Состояние = ПриведенноеСостояние;
	КонецЕсли;
	УстановитьСтатусДокумента(Состояние);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	Состояние = СостояниеДокумента(Объект.Ссылка);
	
	ЗаполнитьФлагОплачено();
	
	ПараметрыЗаписи.Вставить("СостояниеВыплатыСамозанятымПосле", Состояние);
	СостояниеИзмененоВручную = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ВыплатыСамозанятым", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.СостояниеВыплатыСамозанятымДо <> ПараметрыЗаписи.СостояниеВыплатыСамозанятымПосле Тогда
		Оповестить("ИзменилосьСостояниеДокументаВыплатыСамозанятым", Неопределено, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СостояниеИзмененоВручную Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	КонецЕсли;
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийОбъект.Ссылка));	
	ТекущееСостояние = ?(КоллекцияСтатусов[ТекущийОбъект.Ссылка] <> Неопределено, 
		КоллекцияСтатусов[ТекущийОбъект.Ссылка].Статус, 
		Неопределено);
	ПараметрыЗаписи.Вставить("СостояниеВыплатыСамозанятымДо", ТекущееСостояние);
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	Отбор = Новый Структура;
	Отбор.Вставить("ЮридическоеФизическоеЛицо",
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	Отбор.Вставить("Самозанятый", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,
		Элементы.Выплаты, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Модифицированность Тогда
		// Запишем изменения документа
		Записать();
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект);
	ВыплатыСамозанятымКлиент.ЗагрузитьЧеки(ОписаниеОповещения, УникальныйИдентификатор, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеестр(Команда)
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для выгрузки реестра в файл данные будут записаны. Продолжить?'");
		КнопкиОтвета = Новый СписокЗначений;
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать и продолжить'"));
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиОтвета);
	Иначе
		ВыгрузитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказаниеУслугиПриИзменении(Элемент)
	
	ПредыдущееЗначение = Объект.УслугаВТаблице;
	Объект.УслугаВТаблице = (УказаниеУслуги = "ВСписке");
	
	УправлениеФормой(ЭтотОбъект);
	
	Если ПредыдущееЗначение = Объект.УслугаВТаблице Или Объект.Выплаты.Количество() = 0 Тогда
		// Ничего делать не нужно
		Возврат;
	КонецЕсли;
		
	Если Объект.УслугаВТаблице Тогда
		// Заполним услугу в таблице
		Данные = ДанныеНоменклатуры(ЭтотОбъект);
		Данные.Номенклатура = Объект.Номенклатура;
		НоменклатураПриИзмененииНаСервере(Данные);
		Для Каждого СтрокаТаблицы Из Объект.Выплаты Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Данные, , "Цена");
		КонецЦикла;
		Объект.Номенклатура = Неопределено;
	Иначе
		// Установим первую номенклатуру в качестве основной
		Объект.Номенклатура = Объект.Выплаты[0].Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Данные = ДанныеНоменклатуры(ЭтотОбъект);
	Данные.Номенклатура = Объект.Номенклатура;
	
	УслугаПриИзмененииНаСервере(Данные);
	ЦенаНоменклатуры = Данные.Цена;
	
	Если ЦенаНоменклатуры = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Выплаты.Итог("Сумма") <> 0  Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеЦеныНоменклатурыЗавершение", ЭтотОбъект, Новый Структура);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Нет'"));
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Заполнить цену услуги в строках?'"),
			Кнопки);
	ИначеЕсли Объект.Выплаты.Количество() <> 0 Тогда
		ЗаполнитьЦенуНоменклатурыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаУчетаЗатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияСчетовЗатрат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокЧековПриИзменении(Элемент)
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПредупрежденияСчетОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.ОткрытьСписокСчетовОрганизации(Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Подготовлено"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Выгружено"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧастичноОплачено"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Оплачено"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Отклонено"));
	ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	СостояниеИзмененоВручную = Истина;
	ПриИзмененииСостоянияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не ОплатаВсегоРеестра Тогда
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура("РеестрВыплатСамозанятым", Объект.Ссылка);
		ОткрытьФорму(
			"Документ.СписаниеСРасчетногоСчета.ФормаСписка", 
			Новый Структура("Отбор", Отбор),
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплаты

&НаКлиенте
Процедура ВыплатыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	ДанныеСтроки.Вставить("БанковскийСчет");
	
	ВыплатыКонтрагентПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	ЗначенияЗаполнения.Вставить("Самозанятый", Истина);
	ЗначенияЗаполнения.Вставить("Наименование", ВыбранноеЗначение);
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НоваяСтрока = Объект.Выплаты.Добавить();
		НоваяСтрока.Контрагент = ВыбранноеЗначение;
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Контрагент", НоваяСтрока.Контрагент);
		ДанныеСтроки.Вставить("БанковскийСчет");
		
		ВыплатыКонтрагентПриИзмененииНаСервере(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		Если Не Объект.УслугаВТаблице И ЦенаНоменклатуры <> 0 Тогда
			НоваяСтрока.Цена = ЦенаНоменклатуры;
			НоваяСтрока.Сумма = ЦенаНоменклатуры;
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		ОбновитьИтоги(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыплатыАналитикаУчета" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияСчетовЗатрат();
	ИначеЕсли Поле.Имя = "ВыплатыЧекСамозанятого" Или Поле.Имя = "ВыплатыЗагрузитьЧекСамозанятого" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытиеФормыЧекаСамозанятогоЗавершение", 
			ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СсылкаНаЧек", ТекущиеДанные.СсылкаНаЧек);
		ПараметрыФормы.Вставить("НомерЧека", ТекущиеДанные.НомерЧека);
		ПараметрыФормы.Вставить("ЧекСамозанятого", ТекущиеДанные.ЧекСамозанятого);
		ПараметрыФормы.Вставить("РеестрВыплатСамозанятым", Объект.Ссылка);
		ОткрытьФорму("Документ.ВыплатыСамозанятым.Форма.ФормаЧекаСамозанятого", 
			ПараметрыФормы,
			,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Поле.Имя = "ВыплатыРасшифровкаРезультата" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Самозанятый", ТекущиеДанные.Контрагент);
		ПараметрыФормы.Вставить("ПричинаОтказа", ТекущиеДанные.ПричинаОтказа);
		ПараметрыФормы.Вставить("ОшибкаБанка", Строка(ТекущиеДанные.РасшифровкаРезультата));
		ОткрытьФорму("Документ.ВыплатыСамозанятым.Форма.ФормаОшибкиЧекаСамозанятого", 
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Выплаты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		Возврат;
		
	ИначеЕсли НоваяСтрока Тогда
		
		ДанныеТекущейСтроки = Элементы.Выплаты.ТекущиеДанные;
		
		Если Не Объект.УслугаВТаблице И ЦенаНоменклатуры <> 0 Тогда
			ДанныеТекущейСтроки.Цена = ЦенаНоменклатуры;
			ДанныеТекущейСтроки.Сумма = ЦенаНоменклатуры;
			ДанныеТекущейСтроки.Количество = 1;
			ОбновитьИтоги(ЭтотОбъект);
		КонецЕсли;
		
		РеквизитыДляПереносаИзШапки = Новый Массив;
		РеквизитыДляПереносаИзШапки.Добавить("СчетЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("ПодразделениеЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто1");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто2");
		РеквизитыДляПереносаИзШапки.Добавить("Субконто3");
		РеквизитыДляПереносаИзШапки.Добавить("ОтражениеВУСН");
		
		Изменения = Новый Массив;
		
		Для Каждого ИмяРеквизита Из РеквизитыДляПереносаИзШапки Цикл
		
			Если ДанныеТекущейСтроки.Свойство(ИмяРеквизита) 
				И Не ЗначениеЗаполнено(ДанныеТекущейСтроки[ИмяРеквизита]) 
				И Объект.Свойство(ИмяРеквизита) 
				И ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
				
				ДанныеТекущейСтроки[ИмяРеквизита] = Объект[ИмяРеквизита];
				Изменения.Добавить("Выплаты." + ИмяРеквизита);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Изменения.Количество() > 0 Тогда
			
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(Изменения, Объект, ДанныеТекущейСтроки);
			СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
			ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ДанныеТекущейСтроки, Объект.СчетаУчетаЗатратВТаблице);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
	Данные = ДанныеНоменклатуры(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(Данные, ТекущиеДанные);
	НоменклатураПриИзмененииНаСервере(Данные);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Данные);
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Выплаты", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
	РаботаСНоменклатуройКлиентБП.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Выплаты", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Выплаты", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Выплаты", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыКонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	ЗначенияЗаполнения.Вставить("Самозанятый", Истина);
	ЗначенияЗаполнения.Вставить("Наименование", Элемент.ТекстРедактирования);

	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЗначенияЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверитьЗаполнениеПередОтправкой()
	
	Отказ = Ложь;
	//Проверим у всех ли самозанятых заполнен ИНН (проверка на пустой ИНН или длину не равную 12 знакам)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыплатыСамозанятымВыплаты.НомерСтроки КАК НомерСтроки,
	               |	ВыплатыСамозанятымВыплаты.Контрагент.ИНН КАК ИНН
	               |ИЗ
	               |	Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	               |ГДЕ
	               |	ВыплатыСамозанятымВыплаты.Ссылка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрДлина(Выборка.ИНН) <> 12
			ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИНН) Тогда				
				Префикс = "Выплаты[%1].";
				Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Префикс, 
					Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ="));
				Поле = Префикс + "Контрагент";
				ИмяСписка = НСтр("ru = 'Выплаты'");
				ТекстСообщенияРасшифровка = НСтр("ru = 'У самозанятого не указан ИНН. Заполните ИНН в карточке самозанятого.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Корректность", 
					НСтр("ru = 'Самозанятый'"),
					Выборка.НомерСтроки, 
					ИмяСписка, 
					ТекстСообщенияРасшифровка);				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект.Ссылка, 
					Поле, 
					"Объект", 
					Отказ);				
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Состояние = СостояниеДокумента(Объект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УказаниеУслуги = ?(Объект.УслугаВТаблице, "ВСписке", "Единая");
	Если Не Объект.УслугаВТаблице И ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ДанныеНоменклатуры = ДанныеНоменклатуры(ЭтотОбъект);
		ДанныеНоменклатуры.Номенклатура = Объект.Номенклатура;
		УслугаПриИзмененииНаСервере(ДанныеНоменклатуры);
		ЦенаНоменклатуры = ДанныеНоменклатуры.Цена;
	КонецЕсли;
	
	ДокументОплаты = Документы.ВыплатыСамозанятым.ДокументОплаты(Объект.Ссылка);
	Если ЗначениеЗаполнено(ДокументОплаты) Тогда
		ОплатаВсегоРеестра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "ВидОперации")
			= Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым;
		Если Не ОплатаВсегоРеестра Тогда
			ДокументОплаты = СтрШаблон(НСтр("ru='%1 и другие'"), ДокументОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ОтборСтрокЧеков = "Все";
	Если Параметры.Свойство("ОткрытПоСсылкеЧеков") И Параметры.ОткрытПоСсылкеЧеков 
		И Документы.ВыплатыСамозанятым.СтатусЗагрузкиЧеков(Параметры.Ключ) 
			<> Документы.ВыплатыСамозанятым.СтатусЧекиЗагружены() Тогда
		ОтборСтрокЧеков = "БезЧеков";
	КонецЕсли;
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьФлагОплачено();
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;

	ЦветОшибкиБанковскогоСчета = ЦветаСтиля.ЦветОшибкиБанковскогоСчета;
	ЦветОтсутствияОшибок = ЦветаСтиля.ЦветФонаФормы;
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(
		Объект.Организация);

	ЗаполнитьОшибкуСчетаОрганизации();
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ПодключенаИнтеграцияСБанком = ЕстьНастройкаИнтеграцииСБанком();
	Иначе 
		ПодключенаИнтеграцияСБанком = Ложь;
	КонецЕсли;
	
	Элементы.ФормаВыгрузитьРеестр.Заголовок = ?(ПодключенаИнтеграцияСБанком, НСтр("ru='Отправить реестр'"), НСтр("ru='Выгрузить реестр'"));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастройкаИнтеграцииСБанком()
	
	ЕстьНастройкаИнтеграции = Ложь;
	Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "Банк");
	ПараметрыОбмена = ОбменСБанками.ПараметрыОбмена(Объект.Организация, Банк);
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат ЕстьНастройкаИнтеграции;
	КонецЕсли;
	ЕстьНастройкаИнтеграции = ?(
		ПараметрыОбмена.ПринимаемыеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.РеестрВыплатСамозанятым) <> Неопределено, 
		Истина, 
		ЕстьНастройкаИнтеграции);
	Возврат ЕстьНастройкаИнтеграции;
 
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ВыплатыАналитикаУчета.Видимость = Объект.СчетаУчетаЗатратВТаблице;
	Элементы.Номенклатура.Доступность = Не Объект.УслугаВТаблице;
	Элементы.Номенклатура.АвтоОтметкаНезаполненного = Не Объект.УслугаВТаблице;
	Элементы.ВыплатыГруппаНоменклатура.Видимость = Объект.УслугаВТаблице; 
	
	ПоказатьЧеки = (Форма.Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Оплачено")
		Или Форма.Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧастичноОплачено")
		Или Форма.Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены")
		Или Форма.Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены")
		Или Форма.Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Отклонено"));
	
	Элементы.ДокументОплаты.Видимость = ЗначениеЗаполнено(Форма.ДокументОплаты);
	Элементы.ГруппаКомандыЧекиСамозанятых.Видимость = ЗначениеЗаполнено(Форма.ДокументОплаты) Или ПоказатьЧеки;
	Элементы.ВыплатыГруппаЧекСамозанятого.Видимость = ЗначениеЗаполнено(Форма.ДокументОплаты) Или ПоказатьЧеки;
	Элементы.ГруппаОтборЧеков.Видимость = ЗначениеЗаполнено(Форма.ДокументОплаты) Или ПоказатьЧеки;
	Элементы.ВыплатыОплачено.Видимость = ЗначениеЗаполнено(Форма.ДокументОплаты);
	
	Элементы.ФормаВыгрузитьРеестр.Заголовок = ?(
		Форма.ПодключенаИнтеграцияСБанком, 
		НСтр("ru='Отправить реестр'"), 
		НСтр("ru='Выгрузить реестр'"));
	
	УстановитьСвойстваПоляСостояние(Форма);
	
	ОбновитьИтоги(Форма);
	
	ОтобразитьПредупрежденияОбОшибкахСчетаОрганизации(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляСостояние(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.ТолькоПросмотр
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Состояние.ТолькоПросмотр = Истина;
			Элементы.Состояние.КнопкаОткрытия = Ложь;
			Элементы.Состояние.КнопкаВыпадающегоСписка = Ложь;
	Иначе
		Если Форма.ПодключенаИнтеграцияСБанком Тогда
			Элементы.Состояние.ТолькоПросмотр = Истина;
			Элементы.Состояние.КнопкаОткрытия = Истина;
			Элементы.Состояние.КнопкаВыпадающегоСписка = Ложь;
		Иначе
			Элементы.Состояние.ТолькоПросмотр = Ложь;
			Элементы.Состояние.КнопкаОткрытия = Ложь;
			Элементы.Состояние.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	Форма.Всего = Объект.Выплаты.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСостоянияНаСервере()
	
	ЗаполнитьФлагОплачено();
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ВыплатыКонтрагентПриИзмененииНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеСтроки.Контрагент, "ОсновнойБанковскийСчет");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт
	
	Для Каждого СтрокаТабЧасти Из Объект.Выплаты Цикл
		Если ЗначениеЗаполнено(СтрокаТабЧасти.ЧекСамозанятого) И ЗначениеЗаполнено(СтрокаТабЧасти.НомерЧека) Тогда
			СтрокаТабЧасти.ЧекЗагружен = Истина;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабЧасти.НомерЧека) И Не ЗначениеЗаполнено(СтрокаТабЧасти.ЧекСамозанятого) Тогда
			СтрокаТабЧасти.ЧекЗагружен = Ложь; // Чек не прикреплен к документу
			СтрокаТабЧасти.ЗагрузитьЧекСамозанятого = НСтр("ru='Чек не прикреплен'");
		Иначе
			СтрокаТабЧасти.ЧекЗагружен = Ложь; // Чек не загружен
			СтрокаТабЧасти.ЗагрузитьЧекСамозанятого = "Загрузить";
		КонецЕсли;
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабЧасти, Объект.СчетаУчетаЗатратВТаблице);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// ВыплатыЗагрузитьЧекСамозанятого
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатыЗагрузитьЧекСамозанятого");
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементУО.Отбор.Элементы, "ОтборВыплатыЗагрузитьЧекСамозанятого",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Выплаты.ЧекСамозанятого", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Выплаты.РасшифровкаРезультата", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ВыплатыЧекСамозанятого
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатыЧекСамозанятого");
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементУО.Отбор.Элементы, "ОтборВыплатыЧекСамозанятого",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Выплаты.ЧекСамозанятого", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Выплаты.РасшифровкаРезультата", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ВыплатыРасшифровкаРезультата - если есть ошибка спрячем поле
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатыРасшифровкаРезультата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.Выплаты.РасшифровкаРезультата",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ВыплатыАналитикаУчета
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатыАналитикаУчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Выплаты.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НоменклатураПриИзмененииНаСервере(Данные)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Данные.Номенклатура, Данные.ПараметрыОбъекта, Ложь, Истина);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, СведенияОНоменклатуре);
	Данные.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеНоменклатуры(Форма)
	
	Объект = Форма.Объект;
	
	Данные = Новый Структура;
	Данные.Вставить("Номенклатура");
	Данные.Вставить("Содержание");
	Данные.Вставить("Цена");
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата", Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация", Объект.Организация);
	ПараметрыОбъекта.Вставить("ЗаполнятьЦеныПродажаИПокупка", Истина);
	Данные.Вставить("ПараметрыОбъекта", ПараметрыОбъекта);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура УслугаПриИзмененииНаСервере(Данные)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Данные.Номенклатура, Данные.ПараметрыОбъекта, Ложь, Истина);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЦеныНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЦенуНоменклатурыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуНоменклатурыНаКлиенте()
	
	Для Каждого СтрокаВыплаты Из Объект.Выплаты Цикл
		СтрокаВыплаты.Цена = ЦенаНоменклатуры;
		СтрокаВыплаты.Сумма = ЦенаНоменклатуры * ?(СтрокаВыплаты.Количество = 0, 1, СтрокаВыплаты.Количество);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(Объект.Выплаты, Объект.Дата, ТекущаяДатаДокумента);
	СчетОрганизацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыЧекаСамозанятогоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Отбор = Новый Структура;
	Если Форма.ОтборСтрокЧеков = "БезЧеков" Тогда
		Отбор.Вставить("ЧекЗагружен", Ложь);
	ИначеЕсли Форма.ОтборСтрокЧеков = "СЧеками" Тогда
		Отбор.Вставить("ЧекЗагружен", Истина);
	КонецЕсли;
	Форма.Элементы.Выплаты.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Объект.Организация);
	Если Объект.СчетаУчетаЗатратВТаблице Тогда
		Для Каждого СтрокаВыплаты Из Объект.Выплаты Цикл
			СтрокаВыплаты.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
			ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(
				СтрокаВыплаты, 
				Объект.СчетаУчетаЗатратВТаблице);
		КонецЦикла;
	Иначе
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
	КонецЕсли;
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Организация", Объект));
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации,
		Объект.Организация,
		, Ложь, Ложь);
	ЗаполнитьОшибкуСчетаОрганизации();
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(
		Объект.Организация);
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ПодключенаИнтеграцияСБанком = ЕстьНастройкаИнтеграцииСБанком();
	Иначе
		ПодключенаИнтеграцияСБанком = Ложь;
	КонецЕсли;
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ВыгрузкаВExcel

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	ВыгрузитьПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПродолжение()
	
	Если ПодключенаИнтеграцияСБанком Тогда
		Если ПроверитьЗаполнениеПередОтправкой() Тогда
			ИмяНужнойКоманды = "ПодменюДиректБанкОбычное__ДиректБанкОтправка";
			НужнаяКоманда = ЭтаФорма.Команды.Найти(ИмяНужнойКоманды);
			Подключаемый_ВыполнитьКоманду(НужнаяКоманда); 
		КонецЕсли;
	Иначе
		ОписаниеФайла = ПоместитьФайлВоВременноеХранилищеНаСервере();
		ТекстСообщения = НСтр("ru = 'Для сохранения файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьВФайлЗавершение", ЭтотОбъект, ОписаниеФайла);
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьФайл(ИмяПапки, ИмяФайла, ЭтоВыгрузкаВCSV)
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяПапки) + ИмяФайла;
	
	Если ЭтоВыгрузкаВCSV Тогда
		Документы.ВыплатыСамозанятым.СохранитьРеестрДляВыгрузкиВCSV(ПолноеИмяФайла, Объект.Ссылка);
	Иначе
		// записываем документ во временную папку
		ТабличныйДокумент = Документы.ВыплатыСамозанятым.РеестрДляВыгрузкиВExcel(Объект.Ссылка);
		ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

&НаСервере
Функция ПоместитьФайлВоВременноеХранилищеНаСервере()
	
	Папка = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(Папка);
	
	ЭтоВыгрузкаВCSV = ИнтеграцияСБанкамиПовтИсп.ЭтоСчетСбербанка(Объект.СчетОрганизации);
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Реестр выплат самозанятым № %1 от %2.%3'"), 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина), 
		Формат(Объект.Дата, "ДФ='d MMMM'"),
		?(ЭтоВыгрузкаВCSV, "csv", "xls"));
	
	ПолноеИмяФайла = ПодготовитьФайл(Папка, ИмяФайла, ЭтоВыгрузкаВCSV);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	ОписаниеФайла.Вставить("ЭтоВыгрузкаВCSV", ЭтоВыгрузкаВCSV);

	УдалитьВременныйФайлНаСервер(Папка);
	
	Возврат ОписаниеФайла;
	
КонецФункции

&НаСервере
Процедура УдалитьВременныйФайлНаСервер(ИмяФайла)
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим временный файл.
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		СведенияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось удалить временный файл по причине: %1'"),
			ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выплаты самозанятым. Выгрузка реестра в Excel.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлЗавершение(Подключено, ОписаниеФайла) Экспорт
	
	Если Не Подключено Тогда
		ПолучитьФайл(ОписаниеФайла.АдресВоВременномХранилище, ОписаниеФайла.Представление, Истина);
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = ОписаниеФайла.Представление;
	Если ОписаниеФайла.ЭтоВыгрузкаВCSV Тогда
		Фильтр = НСтр("ru = 'CSV (разделитель - точки с запятой)|*.csv'");
	Иначе
		Фильтр = НСтр("ru = 'Лист Excel|*.xls'");
	КонецЕсли;
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите путь сохранения реестра'");
	
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайла", ЭтотОбъект, ОписаниеФайла);
	ДиалогСохраненияФайла.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайла(ВыбранныеФайлы, ОписаниеФайла) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ОписаниеФайла.АдресВоВременномХранилище));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайлаЗавершение", ЭтотОбъект, ОписаниеФайла);
		
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайлаЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При сохранении возникла ошибка'"));
	Иначе
		УстановитьСтатусДокумента(ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Выгружено"));			
		Состояние = ПредопределенноеЗначение("Перечисление.СтатусыДокументовВыплатыСамозанятым.Выгружено");
		Оповестить("Запись_ВыплатыСамозанятым", , Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусДокумента(Состояние)
	
	НовыеСтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	НовыеСтатусыДокумента.Статус = Состояние;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Объект.Ссылка, НовыеСтатусыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, НеиспользуемыйПараметр) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьТабличнуюЧастьВФоне(АдресЗагруженныхДанных);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТабличнуюЧастьВФоне(АдресЗагруженныхДанных)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЗагруженныеДанные", ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных));
	ПараметрыОбработки.Вставить("РеестрВыплат", Объект.Ссылка);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ВыплатыСамозанятым.ЗаполнитьТабличнуюЧасть",
		ПараметрыОбработки,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	Иначе
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область СчетаУчетаЗатрат

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетовЗатрат(ФормаОткрытаИзШапки = Ложь)
	
	СвойстваСтруктуры = Новый Массив;
	СвойстваСтруктуры.Добавить("ТолькоПросмотр");
	СвойстваСтруктуры.Добавить("ДатаДокумента");
	СвойстваСтруктуры.Добавить("Организация");
	СвойстваСтруктуры.Добавить("СчетаУчетаЗатратВТаблице");
	СвойстваСтруктуры.Добавить("Номенклатура");
	СвойстваСтруктуры.Добавить("КлючНазначенияИспользования");
	СвойстваСтруктуры.Добавить("СчетЗатрат");
	СвойстваСтруктуры.Добавить("ПодразделениеЗатрат");
	СвойстваСтруктуры.Добавить("Субконто1");
	СвойстваСтруктуры.Добавить("Субконто2");
	СвойстваСтруктуры.Добавить("Субконто3");
	СвойстваСтруктуры.Добавить("ОтражениеВУСН");
	СвойстваСтруктуры.Добавить("ФормаОткрытаИзШапки");
	ПараметрыФормы = Новый Структура(СтрСоединить(СвойстваСтруктуры, ","));
	
	ПараметрыФормы.ТолькоПросмотр              = ТолькоПросмотр;
	ПараметрыФормы.ДатаДокумента               = Объект.Дата;
	ПараметрыФормы.КлючНазначенияИспользования = "ВыплатыСамозанятым";
	ПараметрыФормы.Организация                 = Объект.Организация;
	ПараметрыФормы.СчетаУчетаЗатратВТаблице    = Объект.СчетаУчетаЗатратВТаблице;
	ПараметрыФормы.ФормаОткрытаИзШапки         = ФормаОткрытаИзШапки;
	
	РеквизитыДляЗаполнения = Новый Массив;
	РеквизитыДляЗаполнения.Добавить("СчетЗатрат");
	РеквизитыДляЗаполнения.Добавить("ПодразделениеЗатрат");
	РеквизитыДляЗаполнения.Добавить("Субконто1");
	РеквизитыДляЗаполнения.Добавить("Субконто2");
	РеквизитыДляЗаполнения.Добавить("Субконто3");
	РеквизитыДляЗаполнения.Добавить("ОтражениеВУСН");
	
	Если ФормаОткрытаИзШапки Тогда
		Источник = Объект;
	Иначе
		ДанныеСтроки = Новый Структура("СчетЗатрат, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3, ОтражениеВУСН, Номенклатура");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элементы.Выплаты.ТекущиеДанные);
		Источник = АналитикаСчетаЗатратСтрокиТаблицы(ДанныеСтроки);
		РеквизитыДляЗаполнения.Добавить("Номенклатура");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Источник, СтрСоединить(РеквизитыДляЗаполнения, ","));
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)
	
	ПредыдущееЗначение = Объект.СчетаУчетаЗатратВТаблице;
	Объект.СчетаУчетаЗатратВТаблице = ВыбранноеЗначение.СчетаУчетаЗатратВТаблице;
	
	Если ПредыдущееЗначение <> ВыбранноеЗначение.СчетаУчетаЗатратВТаблице Тогда
		ЗаполнитьСубконтоЗначениямиПоУмолчанию = Объект.СчетаУчетаЗатратВТаблице И Объект.Выплаты.Количество() > 0;
		СчетаУчетаЗатратВТаблицеПриИзмененииНаСервере(ЗаполнитьСубконтоЗначениямиПоУмолчанию);
	КонецЕсли;
	
	Если Не ВыбранноеЗначение.ФормаОткрытаИзШапки И Объект.СчетаУчетаЗатратВТаблице Тогда
		ОбработатьВыборАналитикиСтрокиТаблицы(ВыбранноеЗначение);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СчетаУчетаЗатратВТаблицеПриИзмененииНаСервере(ЗаполнитьСубконтоЗначениямиПоУмолчанию)
	
	УправлениеФормой(ЭтотОбъект);
	
	// Дозаполним табличную часть
	Если Не Объект.СчетаУчетаЗатратВТаблице Или Объект.Выплаты.Количество() = 0 Или Не ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;
	ИсключаемыеСвойства = Новый Массив;
	Если Не ЗаполнитьСубконтоЗначениямиПоУмолчанию Тогда
		Для Индекс = 1 По 3 Цикл
			ИсключаемыеСвойства.Добавить("Субконто" + Индекс);
		КонецЦикла;
	КонецЕсли;
	ИсключаемыеСвойства.Добавить("Номенклатура");
	
	Если ЗаполнитьСубконтоЗначениямиПоУмолчанию Тогда
		ЗаполнитьСубконтоЗначениямиПоУмолчанию();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Выплаты Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Объект, , СтрСоединить(ИсключаемыеСвойства, ","));
		ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(СтрокаТабличнойЧасти, Объект.СчетаУчетаЗатратВТаблице);
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконтоЗначениямиПоУмолчанию()
	
	// Воспользуемся той же логикой, что заполняет статьи при заполнении счетов учета
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("Выплаты.СчетЗатрат", Объект);
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Очистить();
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Вставить("Выплаты.Субконто1", Истина);
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Вставить("Выплаты.Субконто2", Истина);
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Вставить("Выплаты.Субконто3", Истина);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
		
	ЭлементыСчетов.Добавить("АналитикаУчетаЗатрат");
	ЭлементыСчетов.Добавить("ВыплатыАналитикаУчетаЗатрат");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВыплатыСамозанятым",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
	КонецЕсли;

	// Выплаты.СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Выплаты.СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Выплаты.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Выплаты.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Выплаты.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Выплаты.Субконто3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
		КонецЕсли;

		// Выплаты.СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Выплаты.СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборАналитикиСтрокиТаблицы(ВыбранноеЗначение)
	
	Если Элементы.Выплаты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элементы.Выплаты.ТекущиеДанные,
		ДанныеВыбораАналитикиСтрокиТаблицыНаСервере(ВыбранноеЗначение, Объект.СчетаУчетаЗатратВТаблице));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораАналитикиСтрокиТаблицыНаСервере(Знач ВыбранноеЗначение, Знач СчетаУчетаЗатратВТаблице)
	
	Результат = Новый Структура("СчетЗатрат, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3, ОтражениеВУСН, АналитикаУчета, АналитикаУчетаЗаполнена");
	ЗаполнитьЗначенияСвойств(Результат, ВыбранноеЗначение);
	
	ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(Результат, СчетаУчетаЗатратВТаблице); 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАналитикиУчетаЗатратВШапке(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.СчетаУчетаЗатратВТаблице Тогда
		Форма.АналитикаУчетаЗатрат = НСтр("ru = 'В списке'");
	Иначе
		ДанныеАналитики = Новый Структура("СчетЗатрат, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3, ОтражениеВУСН");
		ЗаполнитьЗначенияСвойств(ДанныеАналитики, Объект);
		Форма.АналитикаУчетаЗатрат = ПредставлениеАналитикиУчетаЗатрат(ДанныеАналитики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАналитикиУчетаЗатратВСтрокеТаблицы(ДанныеСтроки, СчетаУчетаЗатратВТаблице)
	
	Если Не СчетаУчетаЗатратВТаблице Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСтруктуры = Новый Массив;
	СвойстваСтруктуры.Добавить("СчетЗатрат");
	СвойстваСтруктуры.Добавить("ПодразделениеЗатрат");
	СвойстваСтруктуры.Добавить("Субконто1");
	СвойстваСтруктуры.Добавить("Субконто2");
	СвойстваСтруктуры.Добавить("Субконто3");
	СвойстваСтруктуры.Добавить("ОтражениеВУСН");
	Данные = Новый Структура(СтрСоединить(СвойстваСтруктуры, ","));
	ЗаполнитьЗначенияСвойств(Данные, ДанныеСтроки);
	ДанныеСтроки.АналитикаУчета = ПредставлениеАналитикиУчетаЗатратВСтрокеТаблицыНаСервере(Данные);
	ДанныеСтроки.АналитикаУчетаЗаполнена = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеАналитикиУчетаЗатратВСтрокеТаблицыНаСервере(Знач Данные)
	
	ДанныеАналитики = АналитикаСчетаЗатратСтрокиТаблицы(Данные);
	
	Возврат ПредставлениеАналитикиУчетаЗатрат(ДанныеАналитики);
	
КонецФункции

&НаСервереБезКонтекста
Функция АналитикаСчетаЗатратСтрокиТаблицы(Знач Данные)
	
	СвойстваСтруктуры = Новый Массив;
	СвойстваСтруктуры.Добавить("СчетЗатрат");
	СвойстваСтруктуры.Добавить("ПодразделениеЗатрат");
	СвойстваСтруктуры.Добавить("Субконто1");
	СвойстваСтруктуры.Добавить("Субконто2");
	СвойстваСтруктуры.Добавить("Субконто3");
	СвойстваСтруктуры.Добавить("ОтражениеВУСН");
	СвойстваСтруктуры.Добавить("Номенклатура");
	ДанныеАналитики = Новый Структура(СтрСоединить(СвойстваСтруктуры, ","));
	ЗаполнитьЗначенияСвойств(ДанныеАналитики, Данные);
	
	Возврат ДанныеАналитики;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеАналитикиУчетаЗатрат(Знач ДанныеАналитики)
	
	АналитикаУчетаМассив = Новый Массив;
	ПустоеЗначение = "<...>";
	УчетПоПодразделениям = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеАналитики.СчетЗатрат) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеАналитики.СчетЗатрат);
		УчетПоПодразделениям = СвойстваСчета.УчетПоПодразделениям;
		АналитикаУчетаМассив.Добавить(СвойстваСчета.Код);
		
		ЗаполнитьПредставлениеСубконтоСчета(ДанныеАналитики, СвойстваСчета, АналитикаУчетаМассив);
		
		Если УчетПоПодразделениям Тогда
			АналитикаУчетаМассив.Добавить(
				?(ЗначениеЗаполнено(ДанныеАналитики.ПодразделениеЗатрат), ДанныеАналитики.ПодразделениеЗатрат, ПустоеЗначение));
		КонецЕсли;
	Иначе
		АналитикаУчетаМассив.Добавить(ПустоеЗначение);
	КонецЕсли;
	
	Возврат СтрСоединить(АналитикаУчетаМассив, ", ");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСубконтоСчета(Знач ДанныеАналитики, Знач СвойстваСчета, АналитикаУчетаМассив)
	
	НеиспользуемаяАналитика = ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика();
	
	ПустоеЗначение = "<...>";
	
	Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл	
		ЗначениеСубконто = ДанныеАналитики["Субконто" + Индекс];
		ВидСубконто = ТипЗнч(ЗначениеСубконто);
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			ПредставлениеСубконто = "";
			Если НеиспользуемаяАналитика.Найти(ВидСубконто) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Справочники.ТипВсеСсылки().СодержитТип(ВидСубконто)
					Или Документы.ТипВсеСсылки().СодержитТип(ВидСубконто) Тогда
				ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
			Иначе
				ПредставлениеСубконто = Строка(ЗначениеСубконто);
			КонецЕсли;
			АналитикаУчетаМассив.Добавить(ПредставлениеСубконто);
		Иначе
			АналитикаУчетаМассив.Добавить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОшибкуСчетаОрганизации()
	
	РезультатПроверкиСчета = БанковскиеСчетаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.СчетОрганизации, Объект.Дата);
	Если РезультатПроверкиСчета.ЕстьОшибки Тогда
		ПризнакСчета = БанковскиеСчетаСервер.НовыйПризнакСчета();
		ПризнакСчета.СчетОрганизации = Истина;
		ОшибкаСчетаОрганизации = БанковскиеСчетаСервер.ТекстОшибкиБанковскогоСчета(РезультатПроверкиСчета, ПризнакСчета);
	Иначе
		ОшибкаСчетаОрганизации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьПредупрежденияОбОшибкахСчетаОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Форма.ОшибкаСчетаОрганизации) Тогда
		Элементы.ГруппаСчетОрганизацииПроверка.ЦветФона = Форма.ЦветОшибкиБанковскогоСчета;
		Если Не Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			#Если Сервер Тогда
			Форма.ТекстПредупрежденияСчетОрганизации = СтроковыеФункции.ФорматированнаяСтрока(
				ТекстПредупрежденияСчетОрганизации(),
				Форма.ОшибкаСчетаОрганизации);
			#Иначе
			Форма.ТекстПредупрежденияСчетОрганизации = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				ТекстПредупрежденияСчетОрганизации(),
				Форма.ОшибкаСчетаОрганизации);
			#КонецЕсли
		Иначе
			Форма.ТекстПредупрежденияСчетОрганизации = "";
		КонецЕсли;
		Элементы.СчетОрганизации.РасширеннаяПодсказка.Заголовок = Форма.ОшибкаСчетаОрганизации;
		Элементы.СчетОрганизации.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ГруппаСчетОрганизацииПроверка.ЦветФона = Форма.ЦветОтсутствияОшибок;
		Форма.ТекстПредупрежденияСчетОрганизации = "";
		Элементы.СчетОрганизации.РасширеннаяПодсказка.Заголовок = "";
		Элементы.СчетОрганизации.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Элементы.ГруппаПредупреждениеОНекорректномРасчетномСчете.Видимость =
		ЗначениеЗаполнено(Форма.ТекстПредупрежденияСчетОрганизации);
	Если Элементы.ГруппаПредупреждениеОНекорректномРасчетномСчете.Видимость Тогда
		Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Ложь;
	Иначе
		Форма.Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
			ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Форма.Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияСчетОрганизации()
	
	Возврат НСтр("ru = '%1. Добавьте новый <a href=''СписокСчетовСсылка''>банковский счет</a>'");
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПрочитатьДокументИОбновитьСостояние()
	
	Прочитать();
	Состояние = СостояниеДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлагОплачено()
	
	Если Состояние = Перечисления.СтатусыДокументовВыплатыСамозанятым.Оплачено 
		Или Состояние = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены Тогда
		// Все оплачено или чеки загружены, то значит все оплачено.
		// Ничего проверять не будем.
		ТаблицаВыплаты = Объект.Выплаты.Выгрузить();
		ТаблицаВыплаты.ЗаполнитьЗначения(Истина, "Оплачено");
		Объект.Выплаты.Загрузить(ТаблицаВыплаты);
		Возврат;
	КонецЕсли;
	
	Если Не (Состояние = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧастичноОплачено 
		Или Состояние = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены) Тогда
		// Если еще не было оплаты или загрузки чеков, то значит ничего не оплачено
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.Самозанятый КАК Контрагент,
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СчетСамозанятого КАК БанковскийСчет,
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(
	|			,
	|			Организация = &Организация
	|				И РеестрВыплатыСамозанятым = &Ссылка) КАК ЗадолженностьСамозанятыхПоРееструОстатки";
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыплаты = Объект.Выплаты.Выгрузить();
	ТаблицаВыплаты.ЗаполнитьЗначения(Истина, "Оплачено");
	Для Каждого Строка Из ТаблицаОстатков Цикл
		// Найдем только задолженность и снимем флаг Оплачено
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура("Контрагент, БанковскийСчет, Сумма");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
		
		СтрокаТаблицы = ТаблицаВыплаты.Найти(ОтборСтрок);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Оплачено = Ложь;
			Строка.Сумма = 0;
		Иначе
			// Сумма не совпадает. В этом случае может быть несколько вариантов:
			// 1. Несколько строк с одним контрагентом и счетом
			// 2. Оплата была на другую сумму, чем задолженность
		
			ОтборСтрок.Удалить("Сумма");
			СтрокиТаблицы = ТаблицаВыплаты.НайтиСтроки(ОтборСтрок);
			
			Если СтрокиТаблицы = Неопределено Тогда
				// Этого самозанятого нет в документе. Ситуация маловероятная, никак ее не обрабатываем.
				Продолжить;
			ИначеЕсли СтрокиТаблицы.Количество() = 1 Тогда
				// Самозанятый только один, но задолженность полностью не погашена
				СтрокиТаблицы[0].Оплачено = Ложь;
			Иначе
				// Несколько строк с одним и тем же самозанятым
				ЗадолженностьСамозанятого = 0;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					ЗадолженностьСамозанятого = ЗадолженностьСамозанятого + СтрокаТаблицы.Сумма;
					СтрокаТаблицы.Оплачено = Ложь;
				КонецЦикла;
				// Рассчитаем, сколько уже оплатили самозанятому и погасим подходящие строки
				СуммаОплаты = ЗадолженностьСамозанятого - Строка.Сумма;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Если СуммаОплаты = 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаТаблицы.Сумма <= СуммаОплаты Тогда
						СтрокаТаблицы.Оплачено = Истина;
						СуммаОплаты = СуммаОплаты - СтрокаТаблицы.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Выплаты.Загрузить(ТаблицаВыплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеДокумента(Ссылка)
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(МассивДокументов);
	Возврат ?(КоллекцияСтатусов[Ссылка] <> Неопределено, КоллекцияСтатусов[Ссылка].Статус, Неопределено);
	
КонецФункции

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере()
	
	ЗаполнитьОшибкуСчетаОрганизации();
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ПодключенаИнтеграцияСБанком = ЕстьНастройкаИнтеграцииСБанком();
	Иначе
		ПодключенаИнтеграцияСБанком = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыВыбораСчетаОрганизации()
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦифровойСчет", Ложь));
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

#КонецОбласти