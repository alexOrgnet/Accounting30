#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный     = Пользователи.ТекущийПользователь();
	Уведомление       = Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка();
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Организация, Дата) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация %1 не является плательщиком единого налогового платежа'"),
			Организация);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			,
			"Организация",
			"Объект",
			Отказ);
		
	КонецЕсли;
		
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	ГлубинаОсмотра = НачалоГода(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1));
	ДальностьОсмотра = КонецГода(ДобавитьМесяц(Дата, 12));
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если ЗначениеЗаполнено(СтрокаДокумента.СрокУплаты) Тогда
			
			Поле = Префикс + "СрокУплаты";
			
			Если СтрокаДокумента.СрокУплаты < НачалоДня(Дата) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"": указанное значение меньше даты заявления'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
			КонецЕсли;
			Если СтрокаДокумента.СрокУплаты < ГлубинаОсмотра Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"": указанно значение до перехода на ЕНС'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
			КонецЕсли;
			Если СтрокаДокумента.СрокУплаты > ДальностьОсмотра Тогда
				Поле = Префикс + "СрокУплаты";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректно указан срок уплаты в строке %1 списка ""Налоги"": уведомления по данному сроку уплаты не сдаются'"),
					СтрокаДокумента.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка уникальности записей в документе
	ПроверитьУникальностьДанныхВДокументе(Отказ);

	Если Не Отказ Тогда
		// Проверка реквизитов на правильность заполнения
		ПроверитьКорректностьЗаполненияРеквизитов();
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	ПростойУчетЕНС = Дата >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если ПростойУчетЕНС Тогда
		НепроверяемыеРеквизиты.Добавить("Налоги.СчетУчета");
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Налоги.Итог("Сумма");
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьУведомлениеОСпецрежимахНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Налоги.Количество() <> 0 Тогда
		ВыполнениеЗадачБухгалтера.ПриЗаписиУведомления(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЭтотОбъект.Проведен Тогда
		РегистрыСведений.ЗадачиБухгалтераУведомления.УдалитьЗапись(Организация, Ссылка);
	КонецЕсли;
	
	ЕдиныйНалоговыйСчет.СинхронизироватьСостояниеУведомлений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если Дата >= НачалоПростогоУчета Тогда
		Возврат; // Документ не формирует движений
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ПодготовитьПараметрыПроведения(
		Ссылка,
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Погашение налога
	ЕдиныйНалоговыйСчет.ЗачетАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениюОЗачете(
		ПараметрыПроведения,
		ПараметрыПроведения.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности,
		Движения,
		Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбязательныеПоля(Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация.'"), ЭтотОбъект, "Организация", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДокумента(Отказ, НеблокирующиеПроверки = Истина) Экспорт
	
	ДополнительныеСвойства.Вставить("НеблокирующиеПроверки", НеблокирующиеПроверки);
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Ошибки = Неопределено;
	ДополнительныеСвойства.Свойство("Ошибки", Ошибки);
	
КонецПроцедуры

Функция ТребуетсяАктуализация(ТекущийОбъект)
	
	ТребуетсяАктуализация = Ложь;
	Если Ссылка.Пустая() Или ТекущийОбъект.ДополнительныеСвойства.Свойство("Актуализировать") Тогда
		ТребуетсяАктуализация = Истина;
	Иначе
		ОбъектДоИзменения    = Ссылка.ПолучитьОбъект();
		ОбъектПослеИзменения = ТекущийОбъект;
		Если ОбъектДоИзменения.Дата <> ОбъектПослеИзменения.Дата
			Или ОбъектДоИзменения.Комментарий <> ОбъектПослеИзменения.Комментарий
			Или ОбъектДоИзменения.СуммаДокумента <> ОбъектПослеИзменения.СуммаДокумента
			Или ОбъектДоИзменения.Налоги.Количество() <> ОбъектПослеИзменения.Налоги.Количество() Тогда
			ТребуетсяАктуализация = Истина;
		Иначе
			СписокКолонок = ТекущийОбъект.Метаданные().ТабличныеЧасти.Налоги.Реквизиты;
			Для ИндексСтроки = 0 По ОбъектДоИзменения.Налоги.Количество() - 1 Цикл
				СтрокаДоИзменения    = ОбъектДоИзменения.Налоги[ИндексСтроки];
				СтрокаПослеИзменения = ОбъектПослеИзменения.Налоги[ИндексСтроки];
				Для Каждого Колонка Из СписокКолонок Цикл
					Если СтрокаДоИзменения[Колонка.Имя] <> СтрокаПослеИзменения[Колонка.Имя] Тогда
						ТребуетсяАктуализация = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяАктуализация;
	
КонецФункции

Процедура АктуализироватьУведомлениеОСпецрежимахНалогообложения(ТекущийОбъект)
	
	Если Не ТребуетсяАктуализация(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация         = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ТекущийОбъект.Организация);
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "РегистрацияВНалоговомОргане");
	ЭтоЮЛ                       = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ГоловнаяОрганизация);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		СсылкаОбъекта = Документы.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
	Иначе
		СсылкаОбъекта = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	// Титульный
	ДанныеУведомленияТитульный = Новый Структура;
	ДанныеУведомленияТитульный.Вставить("ПрЗачет", "2");
	
	Если ЭтоЮЛ Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации,ФамилияРук,ИмяРук,ОтчествоРук";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("КПП",     СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ФИО,ИННФЛ,ТелСлуж,ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелСлуж);
		ДанныеУведомленияТитульный.Вставить("КПП",     "");
	КонецЕсли;
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ",     ТекущийОбъект.Дата);
	ДанныеУведомленияТитульный.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(РегистрацияВНалоговомОргане);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП",   Реквизиты.КПП);
	
	ПодписантФамилия  = "";
	ПодписантИмя      = "";
	ПодписантОтчество = "";
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			ТекущийОбъект.Организация,
			ДанныеУведомленияТитульный["КодНО"], 
			ДанныеУведомленияТитульный["КПП"]);
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПодписантСтр);
			ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			ПодписантИмя = СокрЛП(ФИО.Имя);
			ПодписантОтчество = СокрЛП(ФИО.Отчество);
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(
				Реквизиты.Представитель,
				,
				ТекущийОбъект.Дата);
			ПодписантФамилия  = СокрЛП(ДанныеПредставителя.Фамилия);
			ПодписантИмя      = СокрЛП(ДанныеПредставителя.Имя);
			ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		КонецЕсли;
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("НаимОргПред",                    СведенияОПредставителе.НаименованиеОрганизацииПредставителя);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "2");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        Реквизиты.ДокументПредставителя);
	Иначе
		Если ЭтоЮЛ Тогда
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияРук;
			ПодписантИмя      = СведенияОбОрганизации.ИмяРук;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоРук;
		Иначе
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияИП;
			ПодписантИмя      = СведенияОбОрганизации.ИмяИП;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоИП;
		КонецЕсли;
		ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "1");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        "");
	КонецЕсли;
	
	МассивРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.Налоги, "РегистрацияВНалоговомОргане", Истина);
	РеквизитыРегистраций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивРегистраций, "КПП");
	
	ВидыНалоговНаИмущество = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНаИмущество();
	
	// МнгСтр2
	ДанныеУведомленияРезультат = Новый Массив;
	Для Каждого ТекущаяСтрока Из ТекущийОбъект.Налоги Цикл
		
		Если ВидыНалоговНаИмущество.Найти(ТекущаяСтрока.Налог) <> Неопределено Тогда
			КППДекл = Реквизиты.КПП;
		Иначе
			КППДекл = РеквизитыРегистраций[ТекущаяСтрока.РегистрацияВНалоговомОргане];
		КонецЕсли;
		
		СтруктураДанныхНалог = Новый Структура;
		СтруктураДанныхНалог.Вставить("КПП",        КППДекл);
		СтруктураДанныхНалог.Вставить("ОКТМО",      СокрЛП(ТекущаяСтрока.КодПоОКТМО));
		СтруктураДанныхНалог.Вставить("КБК",        ТекущаяСтрока.КодБК);
		СтруктураДанныхНалог.Вставить("СумЗачет2",  ТекущаяСтрока.Сумма);
		СтруктураДанныхНалог.Вставить("СрокУпл",    ТекущаяСтрока.СрокУплаты);
		СтруктураДанныхНалог.Вставить("ПрНалАгент", ?(ТекущаяСтрока.НалоговыйАгент, "1", "2"));
		
		ДанныеУведомленияРезультат.Добавить(СтруктураДанныхНалог);
		
	КонецЦикла;
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация",          ГоловнаяОрганизация);
	ПараметрыЗаявления.Вставить("РегистрацияВИФНС",     РегистрацияВНалоговомОргане);
	ПараметрыЗаявления.Вставить("Титульная",            ДанныеУведомленияТитульный);
	ПараметрыЗаявления.Вставить("ЗачетСумЕНС",          Новый Структура("МнгСтр2", ДанныеУведомленияРезультат));
	ПараметрыЗаявления.Вставить("ПодписантФамилия",     ПодписантФамилия);
	ПараметрыЗаявления.Вставить("ПодписантИмя",         ПодписантИмя);
	ПараметрыЗаявления.Вставить("ПодписантОтчество",    ПодписантОтчество);
	ПараметрыЗаявления.Вставить("ДокументОснование",    СсылкаОбъекта);
	ПараметрыЗаявления.Вставить("ДатаОснования",        Дата);
	ПараметрыЗаявления.Вставить("КомментарийОснования", Комментарий);
	Если ЗначениеЗаполнено(ТекущийОбъект.Уведомление) И ОбщегоНазначения.СсылкаСуществует(ТекущийОбъект.Уведомление) Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", ТекущийОбъект.Уведомление);
	КонецЕсли;
	
	ТекущийОбъект.Уведомление = Отчеты.РегламентированноеУведомлениеЗачетНалога.СформироватьНовоеУведомление(
			Отчеты.РегламентированноеУведомлениеЗачетНалога.ДействующаяРедакцияФормы(ТекущийОбъект.Дата),
			ПараметрыЗаявления);
	
КонецПроцедуры

Процедура ПроверитьУникальностьДанныхВДокументе(Отказ)
	
	ТаблицаНалоги = Налоги.Выгрузить();
	КолонкиСверки = "Налог, КодБК, СчетУчета, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты";
	ТаблицаНалоги.Свернуть(КолонкиСверки);
	Если ТаблицаНалоги.Количество() <> Налоги.Количество() Тогда
		ОтборСтрок = Новый Структура(КолонкиСверки);
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
			МассивСтрок = Налоги.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомераСтрок = "";
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок <> "", ", ", "") + СтрокаМассива.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Дублируются ключевые значения в строках %1 списка ""Налоги""'"),
				НомераСтрок);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				,
				"Налоги",
				"Объект",
				Отказ);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияРеквизитов()
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НеблокирующиеПроверки", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если Не ПустаяСтрока(СтрокаДокумента.КодБК) Тогда
			
			РезультатПроверки = ПлатежиВБюджетКлиентСервер.УведомлениеПроверитьКБК(СтрокаДокумента.КодБК, Дата);
			Если Не ПустаяСтрока(РезультатПроверки) Тогда
				Поле = Префикс + "КодБК";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Вероятно, некорректно заполнен КБК в строке %1 списка ""Налоги"": %2'"),
					СтрокаДокумента.НомерСтроки,
					РезультатПроверки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаДокумента.КодПоОКТМО) Тогда
			
			РезультатПроверки = ПлатежиВБюджетКлиентСервер.УведомлениеПроверитьКодТерритории(СтрокаДокумента.КодПоОКТМО, Дата);
			Если Не ПустаяСтрока(РезультатПроверки) Тогда
				Поле = Префикс + "КодПоОКТМО";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Вероятно, некорректно заполнен код по ОКТМО в строке %1 списка ""Налоги"": %2'"),
					СтрокаДокумента.НомерСтроки,
					РезультатПроверки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект");
			КонецЕсли;
			
			РезультатПроверки = АдресныйКлассификатор.СведенияПоОКМТО(СтрокаДокумента.КодПоОКТМО);
			Если Не ЗначениеЗаполнено(РезультатПроверки)
				Или Не ЗначениеЗаполнено(РезультатПроверки.ОКТМО) Тогда
				Поле = Префикс + "КодПоОКТМО";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Вероятно, некорректно заполнен код по ОКТМО в строке %1 списка ""Налоги"": ОКТМО не найден в адресном классификаторе'"),
					СтрокаДокумента.НомерСтроки,
					РезультатПроверки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли