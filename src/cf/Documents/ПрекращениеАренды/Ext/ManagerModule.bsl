#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 13, 0);
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Реквизиты.ВалютаДокумента =ВалютаРеглУчета Тогда
		КурсКратность = Новый Структура("Курс,Кратность", 1, 1);
	Иначе
		КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("Курс", КурсКратность.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсКратность.Кратность);
	Запрос.УстановитьПараметр("МоментСписания", Новый МоментВремени(Реквизиты.Период, ДокументСсылка));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТекстПрекращениеАренды", 
		НСтр("ru='Прекращение аренды'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст =
		ТекстЗапросаТаблицаОС(НомераТаблиц)
		+ ТекстЗапросаВыбытиеОС(НомераТаблиц)
		+ ТекстЗапросаПрекращениеАренды(НомераТаблиц)
		+ ТекстЗапросаСостоянияОС(НомераТаблиц)
		+ ТекстЗапросаСписаниеОстаточнойСтоимости(НомераТаблиц)
		+ ТекстЗапросаПроверкиПоОС(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ПрекращениеАренды";
	Набор.Идентификатор = Новый УникальныйИдентификатор("37661c79-4536-47d3-9d03-e8643cd3cb83");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ВедетсяУчетПредметовАренды")
		Или ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества");
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка-расчет "Начисление процентных расходов"
	УчетПроцентовПоОбязательствам.ДобавитьКомандуПечатиНачислениеПроцентныхРасходов(КомандыПечати);
	
	// Акт о списании ОС по произвольной форме
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОСписанииОС";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании основных средств'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	// Акт о списании ОС (ОС-4)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОС4";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании ОС (ОС-4)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
	// Акт о списании автотранспортных средств (ОС-4а)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОС4а";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании автотранспортных средств (ОС-4а)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 30;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Прекращение аренды (лизинга)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС4") Тогда

		ИмяМакета = "ОС4";
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОС4", НСтр("ru = 'ОС-4 (Акт о списании ОС)'"), 
			ПечатьОС4(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИмяМакета),, ИмяМакета);
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС4а") Тогда
		
		ИмяМакета = "ОС4а";
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОС4а",
			НСтр("ru = 'ОС-4а (Акт о списании автотранспортных средств)'"), 
			ПечатьОС4(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИмяМакета),, ИмяМакета);
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОСписанииОС") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОСписанииОС", 
			НСтр("ru = 'Акт о списании ОС'"),
			ПечатьАктОСписанииОС(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_АктОСписанииОС");
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ)
		Или Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		Или Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Параметры.Вставить("ЗначенияЗаполнения", Новый Структура);
	КонецЕсли;
	
	ЕстьСвойствоВидОперации = Параметры.ЗначенияЗаполнения.Свойство("ВидОперации");
	Если ЕстьСвойствоВидОперации Тогда
		Возврат;
	КонецЕсли;

	ЕстьЛизинг = ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества");
	ЕстьАренда = ПолучитьФункциональнуюОпцию("ВедетсяУчетПредметовАренды");
	Если ЕстьЛизинг И ЕстьАренда Тогда // Просим пользователя выбрать вид операции
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ВыборОперации";
	Иначе
		ВидОперации = ?(ЕстьЛизинг, 
			Перечисления.ВидыОперацийПрекращениеАренды.ПрекращениеЛизинга,
			Перечисления.ВидыОперацийПрекращениеАренды.ПрекращениеАренды);
		Параметры.ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗаполненияПоДоговору(Договор) Экспорт
	
	Данные = Новый Структура("ВалютаДокумента,СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Договор, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах");
	Иначе
		РеквизитыДоговора = Новый Структура("ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах", 
			ВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;
	
	Данные.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		Данные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательства;
		Данные.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
		Данные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ;
		Данные.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;
	Иначе
		Данные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал;
		Данные.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаТаблицаОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредметыАренды.Ссылка КАК Регистратор,
	|	ПредметыАренды.НомерСтроки КАК НомерСтроки,
	|	ПредметыАренды.ПредметАренды КАК ОсновноеСредство,
	|	ПредметыАренды.ПредметАренды.ЕдиницаУчета КАК ЕдиницаУчета,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаРуб,
	|	0 КАК СуммаБУ,
	|	0 КАК СуммаВалБУ,
	|	0 КАК СуммаНУ,
	|	0 КАК СуммаБезНДСРуб,
	|	0 КАК СуммаНДСРуб
	|ИЗ
	|	Документ.ПрекращениеАренды.ПредметыАренды КАК ПредметыАренды
	|ГДЕ
	|	ПредметыАренды.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыбытиеОС(НомераТаблиц)

	НомераТаблиц.Вставить("ВыбытиеОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	""ПредметыАренды"" КАК ИмяСписка,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.Субконто КАК Субконто,
	|	Реквизиты.СчетСписания КАК СчетСписания,
	|	ИСТИНА КАК СписыватьТолькоЛинейныйНУ,
	|	""Прекращение аренды"" КАК Содержание
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрекращениеАренды(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаПрекращениеАренды", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПрекращениеАренды", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРеглУчета) КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРеглУчета) <> &ВалютаРеглУчета КАК РасчетыВВалюте,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетСписания КАК СчетСписания,
	|	Реквизиты.Субконто КАК Субконто
	|ПОМЕСТИТЬ ВТ_ПрекращениеАренды
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	&Курс КАК Курс,
	|	&Кратность КАК Кратность,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетСписания КАК СчетСписания,
	|	Реквизиты.Субконто КАК Субконто,
	|	ВЫБОР
	|		КОГДА Реквизиты.РасчетыВУсловныхЕдиницах
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ)
	|		КОГДА Реквизиты.РасчетыВВалюте
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАренднымОбязательствамВал)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАренднымОбязательствам)
	|	КОНЕЦ КАК СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.РасчетыВУсловныхЕдиницах
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ)
	|		КОГДА Реквизиты.РасчетыВВалюте
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеВал)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАренде)
	|	КОНЕЦ КАК СчетУчетаПроцентов,
	|	ВЫБОР
	|		КОГДА Реквизиты.РасчетыВУсловныхЕдиницах
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеПлатежиУЕ)
	|		КОГДА Реквизиты.РасчетыВВалюте
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеПлатежиВал)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеПлатежи)
	|	КОНЕЦ КАК СчетПлатежей,
	|	""ПредметыАренды"" КАК ИмяСписка,
	|	ИСТИНА КАК ИзменениеУсловий,
	|	ЛОЖЬ КАК ПереходНаФСБУ25,
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПрекращениеАренды.ПрекращениеЛизинга) КАК Лизинг,
	|	ЛОЖЬ КАК НалоговыйУчетИмуществаВедетЛизингополучатель,
	|	0 КАК СтавкаДисконтирования,
	|	&ТекстПрекращениеАренды КАК Содержание
	|ИЗ
	|	ВТ_ПрекращениеАренды КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСостоянияОС(НомераТаблиц)

	НомераТаблиц.Вставить("СостоянияОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК СостояниеОС,
	|	""ПредметыАренды"" КАК ИмяСписка
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеОстаточнойСтоимости(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеОстаточнойСтоимости", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеОстаточнойСтоимостиТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	""ПредметыАренды"" КАК ИмяСписка,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	""Прекращение аренды"" КАК Содержание,
	|	ИСТИНА КАК СписыватьТолькоЛинейныйНУ
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ПредметАренды КАК ОсновноеСредство,
	|	ИСТИНА КАК Арендованное,
	|	ТаблицаОС.Ссылка.Субконто КАК Субконто,
	|	ТаблицаОС.Ссылка.СчетСписания КАК СчетСписания,
	|	ТаблицаОС.Ссылка.Субконто КАК СубконтоНУ,
	|	ТаблицаОС.Ссылка.СчетСписания КАК СчетСписанияНУ
	|ИЗ
	|	Документ.ПрекращениеАренды.ПредметыАренды КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПроверкиПоОС(НомераТаблиц)

	НомераТаблиц.Вставить("ПроверкиПоОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	""ПредметыАренды"" КАК ИмяСписка,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК МОЛ
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТаблицыПроцентовПоАренде(ТаблицаПредметыАренды, ТаблицаРеквизиты) Экспорт
	
	Результат = Новый Структура;
	УчетПроцентовПоОбязательствам.ЗаполнитьТаблицыПроцентовПрекращениеАренды(
		Результат, ТаблицаПредметыАренды, ТаблицаРеквизиты);
	
	ТаблицыПроцентов = Новый Структура;
	ТаблицыПроцентов.Вставить("График", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "График"));
	ТаблицыПроцентов.Вставить("Проценты", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Проценты"));
	ТаблицыПроцентов.Вставить("РеквизитыГрафика", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "РеквизитыГрафика"));
	ТаблицыПроцентов.Вставить("СтоимостьОбязательства", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "СтоимостьОбязательства"));
	Возврат ТаблицыПроцентов;
	
КонецФункции

Функция ДанныеСписанияРасчетов(ТаблицаПредметыАренды, ТаблицаНачисленныеПроценты, ТаблицаРеквизиты) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ОсновныеСредства = ТаблицаПредметыАренды.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиБУ.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ОстаткиБУ.Счет.Валютный
	|			ТОГДА ОстаткиБУ.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстаткиБУ.СуммаОстаток
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ ДанныеБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В (&СчетаАренды),
	|			&КонтрагентыДоговоры,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента) КАК ОстаткиБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетОбязательства
	|				ТОГДА -ДанныеБУ.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбязательствоВал,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетНДС
	|				ТОГДА ДанныеБУ.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВал,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетПроцентов
	|				ТОГДА ДанныеБУ.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПроцентыВал
	|ИЗ
	|	ДанныеБУ КАК ДанныеБУ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ДанныеБУ.Счет = &СчетОбязательства
	|					ТОГДА -ДанныеБУ.Остаток
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ДанныеБУ.Счет = &СчетНДС
	|					ТОГДА ДанныеБУ.Остаток
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ДанныеБУ.Счет = &СчетПроцентов
	|					ТОГДА ДанныеБУ.Остаток
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПредметовАренды.ПредметАренды КАК ОсновноеСредство,
	|	ДанныеПредметовАренды.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДанныеПредметовАренды";
	
	Запрос.УстановитьПараметр("КонецПериода",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	
	СчетаАренды = Новый Массив;
	
	Запрос.УстановитьПараметр("СчетОбязательства", Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	СчетаАренды.Добавить(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	
	Запрос.УстановитьПараметр("СчетНДС", Реквизиты.СчетУчетаНДС);
	Если ЗначениеЗаполнено(Реквизиты.СчетУчетаНДС) Тогда
		СчетаАренды.Добавить(Реквизиты.СчетУчетаНДС);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетПроцентов", Реквизиты.СчетУчетаПроцентов);
	СчетаАренды.Добавить(Реквизиты.СчетУчетаПроцентов);
	
	Запрос.УстановитьПараметр("СчетаАренды", СчетаАренды);
	
	КонтрагентыДоговоры = Новый Массив;
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("КонтрагентыДоговоры", КонтрагентыДоговоры);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиРасчетов = Результаты[1].Выгрузить();
	СуммыОС = Результаты[2].Выгрузить();
	
	СуммаОСПоДоговору = СуммыОС.Итог("СуммаВзаиморасчетов");
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаОС Из СуммыОС Цикл
		Если ОсновныеСредства.Найти(СтрокаОС.ОсновноеСредство) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаОС);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
		СуммыОС.Удалить(СтрокаКУдалению);
	КонецЦикла;
	СуммаВыбытияОС = СуммыОС.Итог("СуммаВзаиморасчетов");
	КоэффициентВыбытияОС = ?(СуммаОСПоДоговору = 0, 0, СуммаВыбытияОС / СуммаОСПоДоговору);
	
	Для каждого СтрокаОстатка Из ОстаткиРасчетов Цикл
		СтрокаОстатка.ОбязательствоВал = Окр(СтрокаОстатка.ОбязательствоВал * КоэффициентВыбытияОС, 2);
		СтрокаОстатка.НДСВал = Окр(СтрокаОстатка.НДСВал * КоэффициентВыбытияОС, 2);
		СтрокаОстатка.ПроцентыВал = Окр(СтрокаОстатка.ПроцентыВал * КоэффициентВыбытияОС, 2);
	КонецЦикла;
	Если ТаблицаНачисленныеПроценты <> Неопределено
		И ТаблицаНачисленныеПроценты.Итог("СуммаПроцентовВал") <> 0 Тогда
		ПроцентыКСписаниюВал = ОстаткиРасчетов.Итог("ПроцентыВал") - ТаблицаНачисленныеПроценты.Итог("СуммаПроцентовВал");
		Если ПроцентыКСписаниюВал = 0 Тогда
			ОстаткиРасчетов.ЗаполнитьЗначения(0, "ПроцентыВал");
		Иначе
			МассивПроцентыКСписаниюВал = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				ПроцентыКСписаниюВал, ОстаткиРасчетов.ВыгрузитьКолонку("ПроцентыВал"));
			Если ЗначениеЗаполнено(МассивПроцентыКСписаниюВал) Тогда
				ОстаткиРасчетов.ЗагрузитьКолонку(МассивПроцентыКСписаниюВал, "ПроцентыВал");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СуммыОС.Колонки.Добавить("ИзменениеСтоимостиВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	СуммыОС.Колонки.Добавить("ИзменениеСтоимости", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	ОбщийРезультат = ОстаткиРасчетов.Итог("ОбязательствоВал") 
		- ОстаткиРасчетов.Итог("НДСВал") 
		- ОстаткиРасчетов.Итог("ПроцентыВал");
	
	Курс = ?(Реквизиты.Курс = 0, 1, Реквизиты.Курс);
	Кратность = ?(Реквизиты.Кратность = 0, 1, Реквизиты.Кратность);
	
	МассивРезультатыПоОС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
		ОбщийРезультат, СуммыОС.ВыгрузитьКолонку("СуммаВзаиморасчетов"));
	Если ЗначениеЗаполнено(МассивРезультатыПоОС) Тогда
		СуммыОС.ЗагрузитьКолонку(МассивРезультатыПоОС, "ИзменениеСтоимостиВал");
	КонецЕсли;
	Для каждого СтрокаОС Из СуммыОС Цикл
		СтрокаОС.ИзменениеСтоимости = Окр(СтрокаОС.ИзменениеСтоимостиВал * Курс / Кратность, 2);
	КонецЦикла;
	
	ОстаткиРасчетов.Колонки.Добавить("Обязательство", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ОстаткиРасчетов.Колонки.Добавить("НДС", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ОстаткиРасчетов.Колонки.Добавить("Проценты", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Для каждого СтрокаРасчетов Из ОстаткиРасчетов Цикл
		СтрокаРасчетов.Обязательство = Окр(СтрокаРасчетов.ОбязательствоВал * Курс / Кратность, 2);
		СтрокаРасчетов.НДС = Окр(СтрокаРасчетов.НДСВал * Курс / Кратность, 2);
		СтрокаРасчетов.Проценты = Окр(СтрокаРасчетов.ПроцентыВал * Курс / Кратность, 2);
	КонецЦикла;
	
	Данные = Новый Структура("Расчеты,ИзменениеСтоимостиОС", ОстаткиРасчетов, СуммыОС);
	Возврат Данные;
	
КонецФункции

Процедура СформироватьДвиженияСписаниеОбязательств(ДанныеРасчетов, ТаблицаРеквизиты, Движения) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ТаблицаРасчеты = ДанныеРасчетов.Расчеты;
	ТаблицаИзменениеСтоимостиОС = ДанныеРасчетов.ИзменениеСтоимостиОС;
	
	// Проводка по списанию НДС
	
	НДСВал = ТаблицаРасчеты.Итог("НДСВал");
	НДС = ТаблицаРасчеты.Итог("НДС");
	Если НДСВал > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = НДСВал;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = НДСВал;
		КонецЕсли;
		
		Проводка.Сумма = НДС;
		
	КонецЕсли;
	
	// Проводка по списанию или доначислению процентов
	
	ПроцентыВал = ТаблицаРасчеты.Итог("ПроцентыВал");
	Проценты = ТаблицаРасчеты.Итог("Проценты");
	Если Проценты > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = ПроцентыВал;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетУчетаПроцентов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = ПроцентыВал;
		КонецЕсли;
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = Проценты;
		
	ИначеЕсли Проценты < 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетДт = Реквизиты.СчетУчетаПроцентов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = - ПроцентыВал;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = - ПроцентыВал;
		КонецЕсли;
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = - Проценты;
		
	КонецЕсли;
	
	// Проводки по списанию остатка обязательства
	
	Для каждого СтрокаОС Из ТаблицаИзменениеСтоимостиОС Цикл
		
		// Проводка по уменьшению стоимости ОС в пределах остаточной стоимости
		Если СтрокаОС.ИзменениеСтоимостиВал > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаОС.ИзменениеСтоимостиВал;
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаОС.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаОС.ИзменениеСтоимости;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СтрокаОС.ИзменениеСтоимости;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводка по отражению дохода от списания обязательства на сумму более остаточной стоимости ОС
		Если СтрокаОС.ДоходОтСписанияВал > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаОС.ДоходОтСписанияВал;
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы; // 91.01
			СтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ИзменениеСтоимостиПредметовАренды");
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтатьяДоходов);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаОС.ДоходОтСписания;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СтрокаОС.ДоходОтСписания;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ИзменитьПараметрыСписанияОС(ТаблицаПараметрыСписания, ТаблицаИзменениеСтоимостиОС, ТаблицаРеквизиты) Экспорт
	
	ТаблицаИзменениеСтоимостиОС.Колонки.Добавить("КорректировкаСтоимостиНУ", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаИзменениеСтоимостиОС.Колонки.Добавить("ДоходОтСписанияВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаИзменениеСтоимостиОС.Колонки.Добавить("ДоходОтСписания", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаИзменениеСтоимостиОС.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаИзменениеСтоимостиОС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Если Не ЗначениеЗаполнено(ТаблицаПараметрыСписания)
		Или Не ЗначениеЗаполнено(ТаблицаИзменениеСтоимостиОС) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Курс = ?(Реквизиты.Курс = 0, 1, Реквизиты.Курс);
	Кратность = ?(Реквизиты.Кратность = 0, 1, Реквизиты.Кратность);
	
	Для каждого СтрокаИзменение Из ТаблицаИзменениеСтоимостиОС Цикл
		
		СтрокаСписания = ТаблицаПараметрыСписания.Найти(СтрокаИзменение.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаСписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОстаточнаяСтоимостьОС = СтрокаСписания.СтоимостьОС - СтрокаСписания.АмортизацияОС;
		// Стоимость в валюте определяем, оставляя только 2 знака после запятой
		ОстаточнаяСтоимостьОСВал = Окр(ОстаточнаяСтоимостьОС / Курс * Кратность * 100, 0) / 100;
		// Стоимость в рублях могла измениться из-за округления стоимости в валюте
		ОстаточнаяСтоимостьОС = Окр(ОстаточнаяСтоимостьОСВал * Курс / Кратность, 2);
		
		УменьшениеСтоимостиОСВал = Мин(СтрокаИзменение.ИзменениеСтоимостиВал, ОстаточнаяСтоимостьОСВал);
		УменьшениеСтоимостиОС = Окр(УменьшениеСтоимостиОСВал * Курс / Кратность, 2);
		
		СтрокаСписания.СтоимостьОС = СтрокаСписания.СтоимостьОС - УменьшениеСтоимостиОС;
		СтрокаСписания.СтоимостьОСВР = СтрокаСписания.СтоимостьОСВР - УменьшениеСтоимостиОС;
		
		СтрокаИзменение.ДоходОтСписанияВал = СтрокаИзменение.ИзменениеСтоимостиВал - УменьшениеСтоимостиОСВал;
		СтрокаИзменение.ДоходОтСписания = Окр(СтрокаИзменение.ДоходОтСписанияВал * Курс / Кратность, 2);
		СтрокаИзменение.ИзменениеСтоимостиВал = УменьшениеСтоимостиОСВал;
		СтрокаИзменение.ИзменениеСтоимости = УменьшениеСтоимостиОС;
		
		ЗаполнитьЗначенияСвойств(СтрокаИзменение, СтрокаСписания, 
			"КорректировкаСтоимостиНУ,СчетУчета,Подразделение");
		СтрокаСписания.КорректировкаСтоимостиНУ = 0;
		СтрокаСписания.КорректировкаСтоимостиВР = 0;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияСписаниеКорректировкиСтоимостиНУ(ТаблицаИзменениеСтоимостиОС, ТаблицаРеквизиты, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаИзменениеСтоимостиОС) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для каждого СтрокаОС Из ТаблицаИзменениеСтоимостиОС Цикл
		
		Если СтрокаОС.КорректировкаСтоимостиНУ > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом; // 76.х7.1
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества; // 01.К
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.СуммаНУКт = СтрокаОС.КорректировкаСтоимостиНУ;
			Проводка.СуммаВРКт = - СтрокаОС.КорректировкаСтоимостиНУ;
			
		ИначеЕсли СтрокаОС.КорректировкаСтоимостиНУ < 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества; // 01.К
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.СуммаНУДт = - СтрокаОС.КорректировкаСтоимостиНУ;
			Проводка.СуммаВРДт = СтрокаОС.КорректировкаСтоимостиНУ;
			
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом; // 76.х7.1
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияВыбытиеОС(ТаблицаПараметрыСписания, ТаблицаРеквизиты, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПараметрыСписания) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для каждого СтрокаОС Из ТаблицаПараметрыСписания Цикл
		
		СуммаБУ = СтрокаОС.СтоимостьОС - СтрокаОС.АмортизацияОС;
		СуммаНУ = СтрокаОС.СтоимостьОСНУ - СтрокаОС.АмортизацияОСНУ;
		
		// Списываем остаток БУ - Дт 91.02 Кт 01.09
		Если СуммаБУ > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = Реквизиты.СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.Субконто);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СуммаБУ;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = СуммаБУ;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СуммаБУ;
			КонецЕсли;
			
		ИначеЕсли СуммаБУ < 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.Субконто);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = - СуммаБУ;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = - СуммаБУ;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = - СуммаБУ;
			КонецЕсли;
			
		КонецЕсли;
		
		// Списываем остаток НУ - Дт 76.х7.1 Кт 01.09
		Если СуммаНУ <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаОС.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = 0;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммаНУ;
				Проводка.СуммаВРКт = - СуммаНУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСтоимостьОбязательстваПоАренде(ТаблицаСтоимостьОбязательства, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСтоимостьОбязательства) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСтоимостьОбязательства = ТаблицаСтоимостьОбязательства[0];
	Движение = Движения.СтоимостьОбязательстваПоАренде.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, СтрокаСтоимостьОбязательства);
	
	Движения.СтоимостьОбязательстваПоАренде.Записывать = Истина;
	
КонецПроцедуры

Функция ПечатьОС4(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИмяМакета)

	Перем ПодразделениеОтветственныхЛиц;

	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Автотранспорт = ИмяМакета = "ОС4а";
	
	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";

	КоличествоОС4 = 0;
	КоличествоОС4а = 0;
	КоличествоОС4б = 0;
	МакетОС4  = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ОС4");
	МакетОС4а = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ОС4а");
	МакетОС4б = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ОС4б");

	// Области макетов
	ОбластьЗаголовок = МакетОС4.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок4а = МакетОС4а.ПолучитьОбласть("Заголовок");

	Шапка0 = МакетОС4б.ПолучитьОбласть("Шапка0");
	Шапка1 = МакетОС4б.ПолучитьОбласть("Шапка1");
	Шапка2 = МакетОС4б.ПолучитьОбласть("Шапка2");
	Строка1 = МакетОС4б.ПолучитьОбласть("Строка1");

	// Дополняет регистры сведений колонками ДатаНачала и ДатаОкончания
	//  для более удобного объединения в общем запросе
	МВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВременныеТаблицыРегистров(МВТ, МассивОбъектов);

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МВТ;

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.Ссылка.Номер КАК Номер,
	|	ТаблицаОС.Ссылка.Дата КАК Дата,
	|	ТаблицаОС.Ссылка.СобытиеОС КАК Состояние,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныСписанияОС.ПустаяСсылка) КАК ПричинаСписания,
	|	ТаблицаОС.Ссылка.Организация КАК Организация,
	|	ТаблицаОС.Ссылка.Организация.КодПоОКПО КАК КодОКПО,
	|	ТаблицаОС.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТаблицаОС.Ссылка.МоментВремени КАК МоментВремени,
	|	ТаблицаОС.НомерСтроки КАК Нп,
	|	1 КАК Количество,
	|	ТаблицаОС.ПредметАренды КАК ОС,
	|	ТаблицаОС.ПредметАренды.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ТаблицаОС.ПредметАренды.ДатаВыпуска КАК ГодВыпуска,
	|	ТаблицаОС.ПредметАренды.НаименованиеПолное КАК НаимОС,
	|	ТаблицаОС.ПредметАренды.ГруппаОС КАК Группа,
	|	ТаблицаОС.ПредметАренды.ЕдиницаУчета КАК ЕдиницаУчета,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость КАК НачСтоимость,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвНомер,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ВТ_МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Подразделение,
	|	ВТ_МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
	|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаОборот, 0) КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|				ИЛИ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|			ТОГДА ЕСТЬNULL(ВТ_ИзносОС.СуммаОборот, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_АмортизацияОС.СуммаОборот, 0)
	|	КОНЕЦ КАК НачАмортизация
	|ИЗ
	|	Документ.ПрекращениеАренды.ПредметыАренды КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет КАК ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО (ТаблицаОС.Ссылка.Дата МЕЖДУ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ДатаНачала И ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ДатаОкончания)
	|			И ТаблицаОС.ПредметАренды = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ТаблицаОС.Ссылка.Организация = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаБухгалтерскогоУчетаОС КАК ВТ_СчетаБухгалтерскогоУчетаОС
	|		ПО (ТаблицаОС.Ссылка.Дата МЕЖДУ ВТ_СчетаБухгалтерскогоУчетаОС.ДатаНачала И ВТ_СчетаБухгалтерскогоУчетаОС.ДатаОкончания)
	|			И ТаблицаОС.Ссылка.Организация = ВТ_СчетаБухгалтерскогоУчетаОС.Организация
	|			И ТаблицаОС.ПредметАренды = ВТ_СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестонахождениеОСБухгалтерскийУчет КАК ВТ_МестонахождениеОСБухгалтерскийУчет
	|		ПО (ТаблицаОС.Ссылка.Дата МЕЖДУ ВТ_МестонахождениеОСБухгалтерскийУчет.ДатаНачала И ВТ_МестонахождениеОСБухгалтерскийУчет.ДатаОкончания)
	|			И ТаблицаОС.Ссылка.Организация = ВТ_МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ТаблицаОС.ПредметАренды = ВТ_МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьОС КАК ВТ_СтоимостьОС
	|		ПО ТаблицаОС.Ссылка = ВТ_СтоимостьОС.Регистратор
	|			И (ВТ_СчетаБухгалтерскогоУчетаОС.СчетУчета = ВТ_СтоимостьОС.СчетКт)
	|			И ТаблицаОС.ПредметАренды = ВТ_СтоимостьОС.СубконтоКт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияОС КАК ВТ_АмортизацияОС
	|		ПО ТаблицаОС.Ссылка = ВТ_АмортизацияОС.Регистратор
	|			И (ВТ_СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации = ВТ_АмортизацияОС.СчетДт)
	|			И ТаблицаОС.ПредметАренды = ВТ_АмортизацияОС.СубконтоДт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзносОС КАК ВТ_ИзносОС
	|		ПО ТаблицаОС.Ссылка = ВТ_ИзносОС.Регистратор
	|			И (ВТ_СчетаБухгалтерскогоУчетаОС.СчетНачисленияИзносаАмортизации = ВТ_ИзносОС.СчетКт)
	|			И ТаблицаОС.ПредметАренды = ВТ_ИзносОС.СубконтоКт1
	|ГДЕ
	|	ТаблицаОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.Ссылка.Дата,
	|	ТаблицаОС.Ссылка,
	|	Нп
	|ИТОГИ ПО
	|	Ссылка";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Возврат ТабличныйДокумент;

	КонецЕсли;

	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПервыйДокумент = Истина;

	// Цикл по документам
	Пока ВыборкаДокументов.Следующий() Цикл

		// Выборка по табличной части
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.Прямой);

		ТекстСообщения = "";
		Если ВыборкаСтрок.Количество() = 0 Тогда
			ТекстШаблона = НСтр("ru = 'Нет инвентарных объектов основных средств для формирования печатной формы № ОС-4.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, Строка(ВыборкаДокументов.Ссылка));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаДокументов.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаДокументов.Организация, ВыборкаДокументов.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");

		ПодразделениеОтветственныхЛиц = ВыборкаДокументов.ПодразделениеОрганизации;

		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаДокументов.Организация, ВыборкаДокументов.Дата, ПодразделениеОтветственныхЛиц);

		Если ВыборкаСтрок.Количество() = 1 Тогда

			ВыборкаСтрок.Следующий();
			
			Если Не ЗначениеЗаполнено(ВыборкаСтрок.ОС) Тогда
				ТабличныйДокумент.Вывести(ОбластьЗаголовок);
				Продолжить;
			КонецЕсли;

			Если Автотранспорт Тогда
				КоличествоОС4а = КоличествоОС4 + 1;
				Область = ОбластьЗаголовок4а;
			Иначе
				КоличествоОС4 = КоличествоОС4 + 1;
				Область = ОбластьЗаголовок;
			КонецЕсли;

			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаДокументов.Организация, ВыборкаСтрок.МОЛ, ВыборкаДокументов.Дата, Истина);

			Область.Параметры.Заполнить(ВыборкаСтрок);
			Область.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСтрок.Номер, Истина, Ложь);
			Область.Параметры.Организация = ПредставлениеОрганизации;
			Область.Параметры.ТабНомерМОЛ = ДанныеФизЛица.ТабельныйНомер;

			НаименованиеОС = ?(ПустаяСтрока(ВыборкаСтрок.НаимОС),
				СокрЛП(ВыборкаСтрок.ОС), ВыборкаСтрок.НаимОС);
				
			Область.Параметры.НаимОС = НаименованиеОС;

			Если ВыборкаСтрок.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
				Область.Параметры.НаимОС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, %2 шт.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					НаименованиеОС,
					ВыборкаСтрок.Количество);
			КонецЕсли;

			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";

			УчетОС.ПолучитьДокументБухСостоянияОС(
				ВыборкаСтрок.ОС,
				ВыборкаСтрок.Организация,
				Перечисления.СостоянияОС.ПринятоКУчету,
				ДокументВводаВЭксплуатацию,
				ВведеноВЭксплуатацию);
			УчетОС.ПолучитьДокументБухСостоянияОС(
				ВыборкаСтрок.ОС,
				ВыборкаСтрок.Организация,
				Перечисления.СостоянияОС.ПринятоКУчету,
				ДокументПринятияКУчету,
				ПринятоКУчету);

			Если Автотранспорт Тогда
				Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
				Если ДокументВводаВЭксплуатацию = Неопределено Тогда
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаСтрок.ОС, ВыборкаСтрок.Дата, ВыборкаСтрок.Дата, ВыборкаСтрок.Организация);
				Иначе
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаСтрок.ОС, ДокументВводаВЭксплуатацию.Дата, ВыборкаСтрок.Дата, ВыборкаСтрок.Организация);
				КонецЕсли;
			ИначеЕсли ВыборкаСтрок.ЕдиницаУчета <> Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
				
				СрокЭкспл = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, ВыборкаСтрок.Дата);
				Область.Параметры.СрокЭкспл = ?(НЕ ЗначениеЗаполнено(СрокЭкспл), "-",
					УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокЭкспл));
					
			КонецЕсли;

			СтоимостьОС = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				ВыборкаСтрок.НачСтоимость,
				ВыборкаСтрок.Стоимость);

			АмортизацияОС = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				0,
				ВыборкаСтрок.НачАмортизация);

			Область.Параметры.ГодВыпуска     = ?(ЗначениеЗаполнено(ВыборкаСтрок.ГодВыпуска), Год(ВыборкаСтрок.ГодВыпуска), 0);
			Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
			Область.Параметры.НачСтоимость   = СтоимостьОС;
			Область.Параметры.НачАмортизация = АмортизацияОС;

			Область.Параметры.ОстСтоимость = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				0,
				СтоимостьОС - АмортизацияОС);

			Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
			Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжностьПредставление;

			ТабличныйДокумент.Вывести(Область);

		Иначе // Табличная часть состоит их нескольких строк

			ПерваяИтерация = Истина;
			Пока ВыборкаСтрок.Следующий() Цикл
				
				Если ПерваяИтерация Тогда 
					
					ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаДокументов.Организация, ВыборкаСтрок.МОЛ, ВыборкаДокументов.Дата, Истина);
					
					Шапка0.Параметры.Заполнить(ВыборкаСтрок);
					Шапка0.Параметры.Номер                 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСтрок.Номер, Истина, Ложь);
					Шапка0.Параметры.Организация           = ПредставлениеОрганизации;
					Шапка0.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
					Шапка0.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжностьПредставление;
					Шапка0.Параметры.ТабНомерМОЛ           = ДанныеФизЛица.ТабельныйНомер;

					ТабличныйДокумент.Вывести(Шапка0);

					Шапка1.Параметры.Заполнить(ВыборкаСтрок);
					ТабличныйДокумент.Вывести(Шапка1);
					ПерваяИтерация = Ложь;
					
				КонецЕсли;

				Строка1.Параметры.Заполнить(ВыборкаСтрок);
					
				НаименованиеОС = ?(ПустаяСтрока(ВыборкаСтрок.НаимОС),
				СокрЛП(ВыборкаСтрок.ОС), ВыборкаСтрок.НаимОС);
				
				Строка1.Параметры.НаимОС = НаименованиеОС;

				Если ВыборкаСтрок.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
					Строка1.Параметры.НаимОС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1, %2 шт.'", ОбщегоНазначения.КодОсновногоЯзыка()),
						НаименованиеОС,
						ВыборкаСтрок.Количество);
				КонецЕсли;

				СтоимостьОС = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
					ВыборкаСтрок.НачСтоимость,
					ВыборкаСтрок.Стоимость);

				АмортизацияОС = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
					0,
					ВыборкаСтрок.НачАмортизация);

				Строка1.Параметры.НачСтоимость = СтоимостьОС;
				Строка1.Параметры.НачАмортизация = АмортизацияОС;
				Строка1.Параметры.ОстСтоимость = ?(ВыборкаСтрок.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
					0,
					СтоимостьОС - АмортизацияОС);

				Строка1.Параметры.Причина = ВыборкаСтрок.ПричинаСписания;

				ДокументПринятияКУчету     = "";
				ДокументВводаВЭксплуатацию = "";
				ПринятоКУчету              = "";
				ВведеноВЭксплуатацию       = "";

				УчетОС.ПолучитьДокументБухСостоянияОС(
					ВыборкаСтрок.ОС,
					ВыборкаСтрок.Организация,
					Перечисления.СостоянияОС.ПринятоКУчету,
					ДокументВводаВЭксплуатацию,
					ВведеноВЭксплуатацию);

				Если ВыборкаСтрок.ЕдиницаУчета <> Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
					СрокЭкспл = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, ВыборкаСтрок.Дата);
					Строка1.Параметры.СрокЭкспл = ?(НЕ ЗначениеЗаполнено(СрокЭкспл), "-",
						УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокЭкспл));
				КонецЕсли;
					
				ТабличныйДокумент.Вывести(Строка1);

			КонецЦикла;

			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Шапка2.Параметры.Заполнить(ВыборкаСтрок);
			Шапка2.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			ТабличныйДокумент.Вывести(Шапка2);
			
			Если Не ПерваяИтерация Тогда 
				КоличествоОС4б = КоличествоОС4б + 1;
			КонецЕсли;

		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументов.Ссылка);

	КонецЦикла;
	
	Если КоличествоОС4 = 0 И КоличествоОС4а = 0 Тогда 
		ИмяМакета = "ОбщийМакет.ПФ_MXL_ОС4б";
	ИначеЕсли КоличествоОС4 = 0 И КоличествоОС4б = 0 Тогда 
		ИмяМакета = "ОбщийМакет.ПФ_MXL_ОС4а";
	ИначеЕсли КоличествоОС4а = 0 И КоличествоОС4б = 0 Тогда 
		ИмяМакета = "ОбщийМакет.ПФ_MXL_ОС4";
	КонецЕсли;

	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие("СписаниеОС.Печать.ОС4");
	
	Возврат ТабличныйДокумент;

КонецФункции

// Процедура создает временные "виртуальные" таблицы регистров сведений для дальнейшей работы с ними
//
// Параметры:
//  МВТ            - МенеджерВременныхТаблиц, где будут храниться временные таблицы
//  МассивОбъектов - Массив документов
//
Процедура СоздатьВременныеТаблицыРегистров(МВТ, МассивОбъектов)

	// 1. Определим "границы" регистров сведений - список организаций, ОС, период, ...
	//    чтобы ограничить выборку из регистров сведений
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|// 1. Период дат
	|ВЫБРАТЬ
	|	МИНИМУМ(Док.Дата)  КАК ДатаОТ,
	|	МАКСИМУМ(Док.Дата) КАК ДатаДО
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|;
	|
	|// 2. Список организаций
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Организация КАК Организация
	|ИЗ
	|	Документ.ПрекращениеАренды КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|;
	|
	|// 3. Список ОС
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.ПредметАренды КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПрекращениеАренды.ПредметыАренды КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|
	|";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результат = Запрос.ВыполнитьПакет();
	// 1.1. Интервал дат
	Выборка = Результат[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
	Выборка.Следующий();
	ДатаОТ = Выборка.ДатаОТ;
	ДатаДО = Выборка.ДатаДО;

	// 1.2. Список организаций
	МассивОрганизаций = Результат[1].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Организация");

	// 1.3. Список ОС
	МассивОС = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ОсновноеСредство");

	// 2. Создание временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ДатаОТ",            ДатаОТ);
	Запрос.УстановитьПараметр("ДатаДО",            ДатаДО);
	Запрос.УстановитьПараметр("МассивОбъектов",    МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивОС",          МассивОС);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаОС.Ссылка КАК Ссылка,
	               |	ТаблицаОС.ПредметАренды КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ВсеОС
	               |ИЗ
	               |	Документ.ПрекращениеАренды.ПредметыАренды КАК ТаблицаОС
	               |ГДЕ
	               |	ТаблицаОС.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Рег1.Период КАК Период,
	               |	Рег1.Организация КАК Организация,
	               |	МИНИМУМ(Рег2.Период) КАК ПервыйПериод,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет_Рег2
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Период < Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |	И Рег2.Период <= &ДатаДО
	               |	И Рег2.ОсновноеСредство В(&МассивОС)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Рег2.ПервыйПериод ЕСТЬ NULL
	               |			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(Рег2.ПервыйПериод, СЕКУНДА, -1)
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	Рег1.Период КАК ДатаНачала,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	               |	Рег1.Организация КАК Организация,
	               |	Рег1.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	Рег1.СпособПоступления КАК СпособПоступления,
	               |	Рег1.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	Рег1.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	               |	Рег1.ПараметрВыработки КАК ПараметрВыработки,
	               |	Рег1.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости
	               |ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет_Рег2 КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Период = Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаНачала,
	               |	ДатаОкончания,
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Рег1.Период КАК Период,
	               |	МИНИМУМ(Рег2.Период) КАК ПервыйПериод,
	               |	Рег1.Организация КАК Организация,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_СчетаБухгалтерскогоУчетаОС_Рег2
	               |ИЗ
	               |	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Организация = Рег2.Организация
	               |			И Рег1.Период < Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.Организация В(&МассивОрганизаций)
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |	И Рег2.Период <= &ДатаДО
	               |	И Рег2.Организация В(&МассивОрганизаций)
	               |	И Рег2.ОсновноеСредство В(&МассивОС)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Рег2.ПервыйПериод ЕСТЬ NULL
	               |			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(Рег2.ПервыйПериод, СЕКУНДА, -1)
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	Рег1.Период КАК ДатаНачала,
	               |	Рег1.Организация КАК Организация,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	               |	Рег1.СчетУчета КАК СчетУчета,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетНачисленияИзноса,
	               |	Рег1.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	               |	Рег1.СчетНачисленияАмортизации КАК СчетНачисленияИзносаАмортизации
	               |ПОМЕСТИТЬ ВТ_СчетаБухгалтерскогоУчетаОС
	               |ИЗ
	               |	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаБухгалтерскогоУчетаОС_Рег2 КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Организация = Рег2.Организация
	               |			И Рег1.Период = Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.Организация В(&МассивОрганизаций)
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаНачала,
	               |	ДатаОкончания,
	               |	Организация,
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Рег1.Период КАК Период,
	               |	МИНИМУМ(Рег2.Период) КАК ПервыйПериод,
	               |	Рег1.Организация КАК Организация,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_МестонахождениеОСБухгалтерскийУчет_Рег2
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Организация = Рег2.Организация
	               |			И Рег1.Период < Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.Организация В(&МассивОрганизаций)
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |	И Рег2.Период <= &ДатаДО
	               |	И Рег2.Организация В(&МассивОрганизаций)
	               |	И Рег2.ОсновноеСредство В(&МассивОС)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Рег1.Период,
	               |	Рег1.Организация,
	               |	Рег1.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Рег2.ПервыйПериод ЕСТЬ NULL
	               |			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(Рег2.ПервыйПериод, СЕКУНДА, -1)
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	Рег1.Период КАК ДатаНачала,
	               |	Рег1.Организация КАК Организация,
	               |	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	               |	Рег1.МОЛ КАК МОЛ,
	               |	Рег1.Местонахождение КАК Местонахождение
	               |ПОМЕСТИТЬ ВТ_МестонахождениеОСБухгалтерскийУчет
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестонахождениеОСБухгалтерскийУчет_Рег2 КАК Рег2
	               |		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	               |			И Рег1.Организация = Рег2.Организация
	               |			И Рег1.Период = Рег2.Период
	               |ГДЕ
	               |	Рег1.Период <= &ДатаДО
	               |	И Рег1.Организация В(&МассивОрганизаций)
	               |	И Рег1.ОсновноеСредство В(&МассивОС)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаНачала,
	               |	ДатаОкончания,
	               |	Организация,
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	               |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_СтоимостьОС
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(ДОБАВИТЬКДАТЕ(&ДатаОТ, СЕКУНДА, -1), ДОБАВИТЬКДАТЕ(&ДатаДО, СЕКУНДА, 1), Регистратор, , , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация В (&МассивОрганизаций)) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	(ХозрасчетныйОборотыДтКт.Регистратор В (&МассивОбъектов)
	               |				И ХозрасчетныйОборотыДтКт.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СчетДт = ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ПрекращениеАренды).СчетУчетаРасчетовСКонтрагентом)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОборотыДтКт.Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор,
	               |	СчетКт,
	               |	СубконтоКт1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	               |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_АмортизацияОС
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(ДОБАВИТЬКДАТЕ(&ДатаОТ, СЕКУНДА, -1), ДОБАВИТЬКДАТЕ(&ДатаДО, СЕКУНДА, 1), Регистратор, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), , Организация В (&МассивОрганизаций)) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОборотыДтКт.Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор,
	               |	СчетДт,
	               |	СубконтоДт1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	               |	СУММА(ХозрасчетныйОборотыДтКт.Сумма) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_ИзносОС
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	               |			ДОБАВИТЬКДАТЕ(&ДатаОТ, СЕКУНДА, -1),
	               |			ДОБАВИТЬКДАТЕ(&ДатаДО, СЕКУНДА, 1),
	               |			Организация В (&МассивОрганизаций)
	               |				И СубконтоКт1 В (&МассивОС)
	               |				И СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаБухгалтерскогоУчетаОС.СчетНачисленияИзносаАмортизации
	               |					ИЗ
	               |						ВТ_СчетаБухгалтерскогоУчетаОС),
	               |			,
	               |			) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОборотыДтКт.Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор,
	               |	СчетКт,
	               |	СубконтоКт1";
	Запрос.Выполнить();

КонецПроцедуры

// Функция возвращает параметры ОС
//
Функция ПолучитьПробегАвто(ОбъектОС, НачДата, КонДата, Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВыработкаОС.КоличествоОборот КАК Пробег
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&КонДата,
		|		ОсновноеСредство = &ОС
		|			И Организация = &Организация
		|	) КАК РегСведенияОС
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|
		|	РегистрНакопления.ВыработкаОС.Обороты(
		|		&НачГраница,
		|		&КонГраница,
		|		,
		|		ОсновноеСредство = &ОС
		|	) КАК ВыработкаОС
		|
		|	ПО
		|		РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
		|		И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
		|";

	Запрос.УстановитьПараметр("ОС", ОбъектОС);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Пробег;

КонецФункции

Функция ТекстЗапросаАктОСписанииОС()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредметыАренды.ПредметАренды КАК ОсновноеСредство,
	|	ПредметыАренды.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ
	|	Документ.ПрекращениеАренды.ПредметыАренды КАК ПредметыАренды
	|ГДЕ
	|	ПредметыАренды.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрекращениеАренды.Номер КАК НомерДокумента,
	|	ПрекращениеАренды.Дата КАК ДатаДокумента,
	|	ПрекращениеАренды.Организация КАК Организация,
	|	ПрекращениеАренды.Ссылка КАК Ссылка,
	|	ПрекращениеАренды.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПрекращениеАренды.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПрекращениеАренды.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ПрекращениеАренды.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныСписанияОС.ПустаяСсылка) КАК ПричинаСписания,
	|	ПрекращениеАренды.ПредметыАренды.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ПредметАренды КАК ОсновноеСредство,
	|		ВЫБОР
	|			КОГДА ПрекращениеАренды.ПредметыАренды.ПредметАренды.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ПрекращениеАренды.ПредметыАренды.ПредметАренды.Наименование
	|			ИНАЧЕ ПрекращениеАренды.ПредметыАренды.ПредметАренды.НаименованиеПолное
	|		КОНЕЦ КАК ОсновноеСредствоНаименование,
	|		&ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		1 КАК Количество
	|	) КАК ОсновныеСредства
	|ИЗ
	|	Документ.ПрекращениеАренды КАК ПрекращениеАренды
	|ГДЕ
	|	ПрекращениеАренды.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки01.Регистратор КАК Регистратор,
	|	Проводки01.НомерСтроки КАК НомерСтроки,
	|	Проводки01.Сумма КАК Сумма,
	|	Проводки01.КоличествоКт КАК Количество
	|ПОМЕСТИТЬ Проводки01
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки01
	|ГДЕ
	|	Проводки01.Регистратор В(&МассивОбъектов)
	|	И (Проводки01.СчетДт = &Счет0109
	|			ИЛИ Проводки01.СчетДт = ВЫРАЗИТЬ(Проводки01.Регистратор КАК Документ.ПрекращениеАренды).СчетУчетаРасчетовСКонтрагентом)
	|	И Проводки01.СчетКт В(&Счета01)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки02.Регистратор КАК Регистратор,
	|	Проводки02.НомерСтроки КАК НомерСтроки,
	|	Проводки02.Сумма КАК Сумма
	|ПОМЕСТИТЬ Проводки02
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки02
	|ГДЕ
	|	Проводки02.Регистратор В(&МассивОбъектов)
	|	И Проводки02.СчетКт = &Счет0109
	|	И Проводки02.СчетДт В(&Счета02)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки01.Регистратор КАК Регистратор,
	|	Субконто01.Значение КАК ОсновноеСредство,
	|	Проводки01.Сумма КАК Сумма01,
	|	0 КАК Сумма02,
	|	Проводки01.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеПоОС
	|ИЗ
	|	Проводки01 КАК Проводки01
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто01
	|		ПО Проводки01.Регистратор = Субконто01.Регистратор
	|			И Проводки01.НомерСтроки = Субконто01.НомерСтроки
	|			И (Субконто01.Вид = &ВидСубконтоОС)
	|			И (Субконто01.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки02.Регистратор,
	|	Субконто02.Значение,
	|	0,
	|	Проводки02.Сумма,
	|	0
	|ИЗ
	|	Проводки02 КАК Проводки02
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто02
	|		ПО Проводки02.Регистратор = Субконто02.Регистратор
	|			И Проводки02.НомерСтроки = Субконто02.НомерСтроки
	|			И (Субконто02.Вид = &ВидСубконтоОС)
	|			И (Субконто02.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоОС.Регистратор КАК Ссылка,
	|	ДанныеПоОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(ДанныеПоОС.Сумма01) КАК ПервоначальнаяСтоимость,
	|	СУММА(ДанныеПоОС.Сумма01) - СУММА(ДанныеПоОС.Сумма02) КАК ОстаточнаяСтоимость,
	|	СУММА(ДанныеПоОС.Количество) КАК Количество
	|ИЗ
	|	ДанныеПоОС КАК ДанныеПоОС
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоОС.Регистратор,
	|	ДанныеПоОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			(ОсновноеСредство, Организация) В
	|				(ВЫБРАТЬ
	|					ОсновныеСредства.ОсновноеСредство,
	|					ОсновныеСредства.Организация
	|				ИЗ
	|					ОсновныеСредства)) КАК ПервоначальныеСведенияОС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьАктОСписанииОС(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОСписанииОС";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_АктОСписанииОС");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаАктОСписанииОС();
	ОсновнаяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	Запрос.УстановитьПараметр("ОсновнаяЕдиницаИзмерения", ОсновнаяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Счет0109", ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	Счета01 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("Счета01", Счета01);
	Счета02 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("Счета02", Счета02);
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаСумм = РезультатыЗапроса[5].Выгрузить();
	ТаблицаСумм.Индексы.Добавить("Ссылка,ОсновноеСредство");
	
	ИнвентарныеНомера = РезультатыЗапроса[6].Выгрузить();
	ИнвентарныеНомера.Индексы.Добавить("ОсновноеСредство");
	
	ПервыйДокумент = Истина;
	ВыборкаДокумент = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ОсновныеСредства = ВыборкаДокумент.ОсновныеСредства.Выгрузить();
		ОсновныеСредства.Сортировать("НомерСтроки");
		
		Если ОсновныеСредства.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокумент);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаДокумент.Организация, ВыборкаДокумент.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокумент.НомерДокумента, Истина, Ложь);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокумент.ДатаДокумента, "ДФ='dd.MM.yyyy ""г.""'");
		
		ПодразделениеОтветственныхЛиц = ВыборкаДокумент.ПодразделениеОрганизации;
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаДокумент.Организация, ВыборкаДокумент.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.РуководительПредставление;
		
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И СведенияОбОрганизации.ИндивидуальныйПредприниматель = Руководители.Руководитель Тогда
			ЭтоИндивидуальныйПредприниматель = Истина;
			ОбластьМакета.Параметры.ДолжностьРуководителя = НСтр("ru = 'Индивидуальный предприниматель'");
		Иначе
			ЭтоИндивидуальныйПредприниматель = Ложь;
			ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ИтогоПервоначальнаяСтоимость = 0;
		ИтогоОстаточнаяСтоимость = 0;
		
		Для каждого СтрокаОС Из ОсновныеСредства Цикл
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("НомерСтроки", СтрокаОС.НомерСтроки);
			ПараметрыЗаполнения.Вставить("ОсновноеСредствоНаименование", СтрокаОС.ОсновноеСредствоНаименование);
			ПараметрыЗаполнения.Вставить("ЕдиницаИзмерения", СтрокаОС.ЕдиницаИзмерения);
			ПараметрыЗаполнения.Вставить("Количество", СтрокаОС.Количество);
			
			СтрокаСведений = ИнвентарныеНомера.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
			Если СтрокаСведений = Неопределено Тогда
				ПараметрыЗаполнения.Вставить("ИнвНомер", "-");
			Иначе
				ПараметрыЗаполнения.Вставить("ИнвНомер", СтрокаСведений.ИнвентарныйНомер);
			КонецЕсли;
			
			ОтборСтрок = Новый Структура("Ссылка,ОсновноеСредство", СтрокаОС.Ссылка, СтрокаОС.ОсновноеСредство);
			СтрокиСумм = ТаблицаСумм.НайтиСтроки(ОтборСтрок);
			Если СтрокиСумм.Количество() = 0 Тогда
				Стоимость = 0;
				ОстаточнаяСтоимость = 0;
			Иначе
				Коэффициент = СтрокаОС.Количество / ?(СтрокиСумм[0].Количество = 0, 1, СтрокиСумм[0].Количество);
				ПервоначальнаяСтоимость = Окр(СтрокиСумм[0].ПервоначальнаяСтоимость * Коэффициент, 2);
				ОстаточнаяСтоимость = Окр(СтрокиСумм[0].ОстаточнаяСтоимость * Коэффициент, 2);
			КонецЕсли;
			ПараметрыЗаполнения.Вставить("ПервоначальнаяСтоимость", ПервоначальнаяСтоимость);
			ПараметрыЗаполнения.Вставить("ОстаточнаяСтоимость", ОстаточнаяСтоимость);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ИтогоПервоначальнаяСтоимость = ИтогоПервоначальнаяСтоимость + ПервоначальнаяСтоимость;
			ИтогоОстаточнаяСтоимость = ИтогоОстаточнаяСтоимость + ОстаточнаяСтоимость;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		ОбластьМакета.Параметры.ИтогоПервоначальнаяСтоимость = Формат(ИтогоПервоначальнаяСтоимость, "ЧДЦ=2");
		ОбластьМакета.Параметры.ИтогоОстаточнаяСтоимость = Формат(ИтогоОстаточнаяСтоимость, "ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СоставКомиссии = Новый ТаблицаЗначений;
		ФиоФизЛиц = Неопределено;
		
		// Для предпринимателя, которому комиссия не нужна, выводим специальный подвал документа
		Если ЭтоИндивидуальныйПредприниматель И СоставКомиссии.Количество() = 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Предприниматель");
			ОбластьМакета.Параметры.ФИОПредпринимателя = СведенияОбОрганизации.ФамилияИнициалыФизлица;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		Иначе
			ВывестиКомиссию(ТабличныйДокумент, Макет, СоставКомиссии, ФиоФизЛиц);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокумент.Ссылка);
	КонецЦикла;
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие("СписаниеОС.Печать.АктОСписанииОС");
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура ВывестиКомиссию(ТабличныйДокумент, Макет, СоставКомиссии, ФиоФизЛиц)

	//комиссия не заполнена: вариант по умолчанию (4 члена комиссии)
	Если СоставКомиссии.Количество() = 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПредседательКомиссии");
		ОбластьМакета.Параметры.ПредседательКомиссии = НСтр("ru = 'Председатель комиссии:'");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакета.Параметры.ЧленыКомиссии = НСтр("ru = 'Члены комиссии:'");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.ЧленыКомиссии = "";
		Для Сч = 2 По 3 Цикл
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	//Комиссия заполнена
	ОбластьМакета = Макет.ПолучитьОбласть("ПредседательКомиссии");
	Если СоставКомиссии.Количество() <> 1 Тогда
		ОбластьМакета.Параметры.ПредседательКомиссии = НСтр("ru = 'Председатель комиссии:'");
	КонецЕсли;
	ОбластьМакета.Параметры.ДолжностьПредседателя = СоставКомиссии[0].ДолжностьНаименование;
	ОбластьМакета.Параметры.ФИОПредседателя = ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, СоставКомиссии[0].ФизЛицо);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЧленКомиссии");
	Если СоставКомиссии.Количество() <> 1 Тогда
		ОбластьМакета.Параметры.ЧленыКомиссии = НСтр("ru = 'Члены комиссии:'");
	КонецЕсли;
			
	Для ИндексСтроки = 1 По СоставКомиссии.Количество() - 1 Цикл
		Строка = СоставКомиссии[ИндексСтроки];
		Если ИндексСтроки > 1 Тогда
			ОбластьМакета.Параметры.ЧленыКомиссии = ""; 
		КонецЕсли;
		ОбластьМакета.Параметры.ДолжностьЧленКомиссии = Строка.ДолжностьНаименование;
		ОбластьМакета.Параметры.ФИОЧленКомиссии = ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, Строка.ФизЛицо);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, ФизЛицо)
	
	ФИОФизЛица = ФИОФизЛиц.Найти(ФизЛицо, "ФизическоеЛицо");
	Если ФИОФизЛица = Неопределено Тогда
		Представление = "";
	Иначе
		Представление = ФИОФизЛица.ФамилияИО;
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетСписания", "РасходыОтСписанияОС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто", "СубконтоЗатрат1");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	
	Возврат Правила;
	
КонецФункции

Функция РеквизитыЗаСсылками() Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Прячутся за "Счета учета"
	РеквизитыЗаСсылками.Вставить("СчетУчетаРасчетовСКонтрагентом", "ОписаниеСчетовУчета");
	РеквизитыЗаСсылками.Вставить("СчетУчетаРасчетовПоАвансам", "ОписаниеСчетовУчета");
	РеквизитыЗаСсылками.Вставить("СчетСписания", "ОписаниеСчетовУчета");
	РеквизитыЗаСсылками.Вставить("Субконто", "ОписаниеСчетовУчета");
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

#КонецОбласти

#КонецЕсли

