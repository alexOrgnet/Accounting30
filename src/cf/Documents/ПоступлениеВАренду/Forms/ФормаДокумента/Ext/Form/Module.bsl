
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "Запись_ДоговорыКонтрагентов"
		И ЗначениеЗаполнено(Источник) И Объект.ДоговорКонтрагента = Источник Тогда
		
		ДатаДоговораКонтрагента = ДатаДоговораКонтрагента(Источник);
		
		ПереходНаФСБУ25ОбработатьИзменение();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента(); 
	
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВариантРасчетаВходящегоНДС",
		?(Объект.СуммаВключаетНДС, Перечисления.ВариантыРасчетаНДС.НДСВСумме, Перечисления.ВариантыРасчетаНДС.НДССверху));
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ПоступлениеВАренду", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПроцентыПоОбязательствамФормыКлиент.ОбработкаВыбора(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И Не Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятиеКУчетуПриИзменении(Элемент)
	
	Объект.ПринятьКУчету = ПринятиеКУчету = 1;
	ПринятиеКУчетуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияАрендыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияАренды) Тогда
		ПроверитьДатуОкончанияАренды();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиАрендыБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КтоВедетНалоговыйУчетИмуществаПриИзменении(Элемент)
	
	Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = НалоговыйУчетИмуществаВедетЛизингополучатель = 1;
	
	ПереходНаФСБУ25ОбработатьИзменение();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаФСБУ25ПриИзменении(Элемент)
	
	ПереходНаФСБУ25ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьГрафикПлатежейНажатие(Элемент, СтандартнаяОбработка)
	Перем ПараметрыФормы;
	
	ПроцентыПоОбязательствамФормыКлиент.ПолучитьПараметрыФормыГрафикПлатежейДляАренды(ЭтотОбъект, ПараметрыФормы);
	ПроцентыПоОбязательствамФормыКлиент.НадписьГрафикПлатежейНажатие(ЭтотОбъект, СтандартнаяОбработка, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметыАренды

&НаКлиенте
Процедура ПредметыАрендыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПредметыАренды.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("ПринятьКУчету", Объект.ПринятьКУчету);
	ДанныеОбъекта.Вставить("РасчетыВУЕ", РасчетыВУЕ);
	ДанныеОбъекта.Вставить("ПереходНаФСБУ25", Объект.ПереходНаФСБУ25);
	ДанныеОбъекта.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	СчетаУчета = СчетаУчетаПредметаАренды(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СчетаУчета);
	
	ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПользователя(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыАрендыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	ПроцентыПоОбязательствамФормыКлиентСервер.СформироватьНадписьГрафикПлатежей(ЭтотОбъект, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыАрендыСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ПредметыАренды");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыАрендыСуммаПереходНаФСБУ25ПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ПредметыАренды");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыАрендыСтавкаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "ПредметыАренды");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыАрендыСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "ПредметыАренды");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ЕстьДисконтирование = УчетнаяПолитика.ПоддерживаетсяДисконтированиеОбязательств();
	ЕстьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПолучитьРеквизитыДоговора();
	
	ЭтоДатаПереходаНаФСБУ25 = КонецДня(Объект.Дата) + 1 = НачалоПримененияФСБУ25;
	ПринятиеКУчету = ?(Объект.ПринятьКУчету, 1, 0);
	Лизинг = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВАренду.ПоступлениеВЛизинг;
	НалоговыйУчетИмуществаВедетЛизингополучатель = ?(Объект.НалоговыйУчетИмуществаВедетЛизингополучатель, 1, 0);
	
	ПроцентыПоОбязательствамФормыКлиентСервер.ЗаполнитьСписокВыбораСпособОценкиАрендыБУПоступление(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьЗаголовокФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НаименованиеДокумента = ?(Форма.Лизинг,
		НСтр("ru = 'Поступление в лизинг'"),
		НСтр("ru = 'Поступление в аренду'"));
	
	ТекстЗаголовка = ?(ЗначениеЗаполнено(Объект.Ссылка),
		СтрШаблон(НСтр("ru='%1 %2 от %3'"), НаименованиеДокумента, Объект.Номер, Объект.Дата),
		СтрШаблон(НСтр("ru='%1 (создание)'"), НаименованиеДокумента));
	
	Форма.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименяетсяФСБУ25 = УчетнаяПолитика.ПрименяетсяФСБУ25(Объект.Организация, Объект.Дата);
	НачалоПримененияФСБУ25 = УчетнаяПолитика.НачалоПримененияФСБУ25(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	Для каждого СтрокаТаблицы Из Объект.ПредметыАренды Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаДоговораКонтрагента(ДоговорКонтрагента)
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Возврат ДоговорКонтрагента.Дата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ПереходНаФСБУ25.Видимость = Форма.ЭтоДатаПереходаНаФСБУ25 Или Объект.ПереходНаФСБУ25;
	Элементы.ПринятиеКУчету.Видимость = Не Объект.ПереходНаФСБУ25;
	
	Элементы.КтоВедетНалоговыйУчетИмущества.Видимость = Форма.Лизинг
		И (Форма.ПлательщикНалогаНаПрибыль Или Объект.ПереходНаФСБУ25);
	
	ДатаДоговора = ?(ЗначениеЗаполнено(Форма.ДатаДоговораКонтрагента), Форма.ДатаДоговораКонтрагента, Объект.Дата);
	Элементы.КтоВедетНалоговыйУчетИмущества.Доступность = (Форма.ПрименяетсяФСБУ25 Или Объект.ПереходНаФСБУ25)
		И НЕ БухгалтерскийУчетКлиентСервер.УчетИмуществаВедетЛизингодатель(ДатаДоговора);
	
	Элементы.МОЛ.Видимость = Объект.ПринятьКУчету;
	Элементы.СпособОтраженияРасходовПоАмортизации.Видимость = Объект.ПринятьКУчету;
	Элементы.СпособОтраженияРасходовПоАренднымПлатежам.Видимость = Объект.ПринятьКУчету;
	
	Элементы.ГруппаОценкаАрендыБУ.Видимость = Форма.ЕстьДисконтирование;
	
	Элементы.ПредметыАрендыСумма.Видимость = Не Объект.ПереходНаФСБУ25;
	Элементы.ПредметыАрендыСуммаПереходНаФСБУ25.Видимость = Объект.ПереходНаФСБУ25;
	Элементы.ПредметыАрендыСчетНачисленияАмортизации.Видимость = Объект.ПринятьКУчету;
	Элементы.ПредметыАрендыСрокПолезногоИспользования.Видимость = Форма.Лизинг И Объект.ПринятьКУчету;
	Элементы.ПредметыАрендыРасходыЛизингодателя.Видимость = Форма.Лизинг
		И Форма.ПлательщикНалогаНаПрибыль И Объект.НалоговыйУчетИмуществаВедетЛизингополучатель
		И Не Объект.ПереходНаФСБУ25;
	Элементы.ПредметыАрендыОценкаБУПереходНаФСБУ25.Видимость = Форма.Лизинг И Объект.ПереходНаФСБУ25;
	Элементы.ПредметыАрендыСрокПолезногоИспользования.Видимость = Форма.Лизинг И Объект.ПринятьКУчету;
	
	ПроцентыПоОбязательствамФормыКлиентСервер.УправлениеФормойПоступление(Форма);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	ПроцентыПоОбязательствамФормыКлиентСервер.СформироватьНадписьГрафикПлатежей(Форма, "СпособОценкиАрендыБУ");
	
	Элементы.ГруппаМежотчетныйПериод.Видимость = Объект.ПереходНаФСБУ25;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	Форма.Всего = Объект.ПредметыАренды.Итог("Всего");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// ПредметыАрендыСчетУчетаНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредметыАрендыСчетУчетаНДС");
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.ПредметыАренды.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ПроцентыПоОбязательствамФормы.УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(
		Объект.Дата, ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсКратность();
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	УстановитьПризнакПереходНаФСБУ25();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
		"ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(
		ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	УстановитьПризнакПереходНаФСБУ25();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		БухгалтерскийУчетПереопределяемый.ПолучитьМассивВидовДоговоров(Истина));
	
	ДоговорКонтрагентаОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ПараметрыСтарогоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
	
	ПолучитьРеквизитыДоговора();
	
	Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
	УстановитьКурсКратность();
	
	ПараметрыНовогоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
	ЗаполнитьРассчитатьСуммы(ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	
	Если РасчетыВУЕ Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ;
	ИначеЕсли ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.АрендныеОбязательства;
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаПредметовАренды(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаФСБУ25ПриИзмененииНаСервере()
	
	ПереходНаФСБУ25ОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереходНаФСБУ25ОбработатьИзменение()
	
	Если Объект.ПереходНаФСБУ25 Тогда
		Объект.ПринятьКУчету = Не (Лизинг И Объект.НалоговыйУчетИмуществаВедетЛизингополучатель);
		ПринятиеКУчету = ?(Объект.ПринятьКУчету, 1, 0);
		ПринятиеКУчетуОбработатьИзменение();
	КонецЕсли;
	
	ДатаДоговора = ?(ЗначениеЗаполнено(ДатаДоговораКонтрагента), ДатаДоговораКонтрагента, Объект.Дата);
	
	Если БухгалтерскийУчетКлиентСервер.УчетИмуществаВедетЛизингодатель(ДатаДоговора) Тогда
		Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = Ложь;
		НалоговыйУчетИмуществаВедетЛизингополучатель = 0;
	ИначеЕсли Не ПрименяетсяФСБУ25 И Не Объект.ПереходНаФСБУ25 Тогда
		Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = Истина;
		НалоговыйУчетИмуществаВедетЛизингополучатель = 1;
	КонецЕсли;
	
	ПроцентыПоОбязательствамФормыКлиентСервер.ЗаполнитьСписокВыбораСпособОценкиАрендыБУПоступление(ЭтотОбъект);
	ПроцентыПоОбязательствамФормыКлиентСервер.УстановитьСпособОценкиАрендыБУПоступление(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПараметрыСтарогоКурса, ПараметрыНовогоКурса)
	
	Для каждого СтрокаТаблицы Из Объект.ПредметыАренды Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	КонецЦикла;
	
	ПроцентыПоОбязательствамФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект, ПараметрыСтарогоКурса, ПараметрыНовогоКурса, "ПредметыАренды");
	
	ОбновитьИтоги(ЭтотОбъект);
	ПроцентыПоОбязательствамФормыКлиентСервер.СформироватьНадписьГрафикПлатежей(ЭтотОбъект, "СпособОценкиАрендыБУ");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ПараметрыТекущегоКурса, ПараметрыНовогоКурса)
	
	СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТаблицы.Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
	СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, СтавкаНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	СтрокаТаблицы.РасходыЛизингодателя = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТаблицы.РасходыЛизингодателя, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакПереходНаФСБУ25()
	
	ЭтоДатаПереходаНаФСБУ25 = КонецДня(Объект.Дата) + 1 = НачалоПримененияФСБУ25;
	Объект.ПереходНаФСБУ25 = ЭтоДатаПереходаНаФСБУ25;
	
	ПереходНаФСБУ25ОбработатьИзменение();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность", Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		СтруктураЦеныИВалюта.СуммаВключаетНДС = 
			РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме");
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", 
			СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		
	Иначе
		
		СтруктураЦеныИВалюта = РезультатЗакрытия;
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ПараметрыТекущегоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
		
		ПараметрыНовогоКурса = ПараметрыКурсаВалюты(ЭтотОбъект);
		
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключенВСтоимость = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Модифицированность = Истина;
		
		ЗаполнитьРассчитатьСуммы(ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыКурсаВалюты(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыКурса = Новый Структура("Валюта,Курс,Кратность");
	
	ПараметрыКурса.Валюта = Объект.ВалютаДокумента;
	ПараметрыКурса.Курс = ?(Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета, 
		1, Объект.КурсВзаиморасчетов);
	ПараметрыКурса.Кратность = ?(Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета, 
		1, Объект.КратностьВзаиморасчетов);
	
	Возврат ПараметрыКурса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураНадписи.Вставить("Кратность", Объект.КратностьВзаиморасчетов);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	СтруктураНадписи.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры 

&НаСервере
Процедура ПринятиеКУчетуПриИзмененииНаСервере()
	
	ПринятиеКУчетуОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПринятиеКУчетуОбработатьИзменение()
	
	ЗаполнитьСчетаУчетаПредметовАренды(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСчетаУчетаПредметовАренды(Форма)
	
	Объект = Форма.Объект;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("РасчетыВУЕ", Форма.РасчетыВУЕ);
	ДанныеОбъекта.Вставить("ПринятьКУчету", Объект.ПринятьКУчету);
	ДанныеОбъекта.Вставить("ПереходНаФСБУ25", Объект.ПереходНаФСБУ25);
	ДанныеОбъекта.Вставить("ВалютаВзаиморасчетов", Форма.ВалютаВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	
	СчетаУчета = СчетаУчетаПредметаАренды(ДанныеОбъекта);
	
	Для каждого СтрокаТаблицы Из Объект.ПредметыАренды Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СчетаУчета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаПредметаАренды(ДанныеОбъекта)
	
	СчетаУчета = Документы.ПоступлениеВАренду.СчетаУчетаПредметаАренды(ДанныеОбъекта);
	Возврат СчетаУчета;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДатуОкончанияАренды() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияАренды) Тогда
		ТекстСообщения = НСтр("ru='Не заполнена дата окончания аренды.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли НачалоМесяца(Объект.ДатаОкончанияАренды) <= НачалоМесяца(Объект.Дата) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Дата окончания аренды должна быть не ранее %1.'"),
			Формат(КонецМесяца(Объект.Дата) + 1, "ДЛФ=D"));
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПолучитьРеквизитыДоговора()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах,Дата");
		РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ДатаДоговораКонтрагента = РеквизитыДоговора.Дата;
	Иначе
		РасчетыВУЕ = Ложь;
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ДатаДоговораКонтрагента = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсКратность()
	
	Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		Объект.КурсВзаиморасчетов = 1;
		Объект.КратностьВзаиморасчетов = 1;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
		Объект.КурсВзаиморасчетов = СтруктураКурса.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
