#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// НАЧИСЛЕНИЕ НАЛОГОВ НА ЕНС

Процедура НачислениеНалоговНаЕНС(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеНалоговНаЕНС(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЕдиныйНалоговыйСчет.НачислитьНалогиНаЕНС(ПараметрыПроведения.ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

Функция ВыполнитьОперацию(БлокировкаУстановленаНеявно = Ложь) Экспорт

	// Отметка времени - начало выполнения регламентной операции.
	// СтандартныеПодсистемы.ОценкаПроизводительности
	НачалоВыполнения = ОценкаПроизводительности.НачатьЗамерВремени();
	НачалоВыполненияДляЖурналаРегистрации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(Строка(ВидОперации));// нет возможности привести к языку конфигурации
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Документы.РегламентнаяОперация,
							 Ссылка,
							 НСтр("ru = 'Начало операции'"),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ЭтотОбъект,
		Отказ,
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	Если Отказ ИЛИ НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = НСтр("ru = 'выполнить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НайтиДубли() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый() ИЛИ Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Если выполнение операции вызвано из ВыполнитьРегламентнуюОперацию() модуля менеджера обработки ЗакрытиеМесяца(),
	// то ПропуститьПроверкуСтатусаПредыдущих может быть Истина уже в момент входа в процедуру ВыполнитьОперацию(). Это
	// будет означать, что необходимые проверки уже проведены перед вызовом из обработки.
	// При успешном выполнении операции в СформироватьДвиженияИлиСообщенияОбОшибках() данное свойство также устанавливается Истина.
	ПропуститьПроверкуСтатусаПредыдущих = Ложь;
	Если Не ДополнительныеСвойства.Свойство("ПропуститьПроверкуСтатусаПредыдущих", ПропуститьПроверкуСтатусаПредыдущих) Тогда
		ПропуститьПроверкуСтатусаПредыдущих = Ложь;
	КонецЕсли;
	
	Если РучнаяКорректировка Тогда
		
		ОбщегоНазначенияБПВызовСервера.ИзменитьАктивностьПоРегистратору(ЭтотОбъект, Отказ, Истина);
		
		Если ПропуститьПроверкуСтатусаПредыдущих Тогда
			// Безусловно сделать актуальной текущую.
			ВариантОбновленияГраницыАктуальности = "ОбновитьБезПроверки";
		Иначе
			// Проверить предыдущие операции и при возможности сделать актуальной текущую.
			ВариантОбновленияГраницыАктуальности = "Обновить";
		КонецЕсли;
		ИзменитьСостояниеОперации(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено, ВариантОбновленияГраницыАктуальности);
		
		Возврат Истина;
	КонецЕсли;
	
	// Собственно выполнение операции
	Отказ = Ложь;
	Попытка
		СформироватьДвиженияИлиСообщенияОбОшибках(Отказ); // Добавит в ДополнительныеСвойства свойство Ошибки
	Исключение
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			|Подробная информация об ошибке записана в журнал регистрации.'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(ДополнительныеСвойства.Ошибки, ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.РегламентнаяОперация,
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если НЕ Отказ Тогда
		
		НовоеСостояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		
	Иначе
		
		// Некоторые сообщения об ошибках переданы через сообщения пользователю
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		ЗакрытиеМесяцаСообщенияОбОшибках.ДополнитьИнформациюОбОшибкахСообщениямиПользователю(
			ДополнительныеСвойства.Ошибки,
			СообщенияПользователю);
			
		ПропуститьПроверкуСтатусаПредыдущих = Ложь;
		Если ВыводСообщенийОбОшибках.ЕстьОшибки(ДополнительныеСвойства.Ошибки) Тогда
			НовоеСостояние  = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками;
		Иначе
			НовоеСостояние  = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
		
		// Некоторые операции могли успеть записать какие-то движения.
		// Такие движения не имеют смысла - удалим их.
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Истина, РучнаяКорректировка);
		
	КонецЕсли;
	
	// Подготовим описание ошибок для пользователя и сохраним его в документ
	Если ВыводСообщенийОбОшибках.ЕстьОшибки(ДополнительныеСвойства.Ошибки) ИЛИ ОписаниеОшибок.Получить() <> Неопределено Тогда
		ОписаниеОшибок = ЗакрытиеМесяцаСообщенияОбОшибках.ОписаниеОшибок(
			ДополнительныеСвойства.Ошибки,
			Дата,
			Организация,
			ВидОперации);
	КонецЕсли;
	
	Если ПропуститьПроверкуСтатусаПредыдущих Тогда
		// Безусловно сделать актуальной текущую.
		ВариантОбновленияГраницыАктуальности = "ОбновитьБезПроверки";
	Иначе
		// Проверить предыдущие операции и при возможности сделать актуальной текущую.
		ВариантОбновленияГраницыАктуальности = "Обновить";
	КонецЕсли;
	ИзменитьСостояниеОперации(НовоеСостояние, ВариантОбновленияГраницыАктуальности);
	
	// Из-за выполнении рег.операции перенесем момент нарушения последовательности на начало следующего месяца.
	Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда

		// Сначала проверим: может быть флаг уже явно передан через ДополнительныеСвойства.
		СброситьСостояниеСледующих = Неопределено;
		ДополнительныеСвойства.Свойство("СброситьСостояниеСледующих", СброситьСостояниеСледующих);
		// Если явного указания не было, то определим косвенно: не контролировали предыдущие, то и не влияем на следующие.
		Если СброситьСостояниеСледующих = Неопределено
		   И ДополнительныеСвойства.Свойство("ПропуститьПроверкуПоследовательности", СброситьСостояниеСледующих) Тогда
			СброситьСостояниеСледующих = Не СброситьСостояниеСледующих;
		КонецЕсли;
		// Если ни явно, ни косвенно значение флага не задано, то используем значение по-умолчанию.
		Если СброситьСостояниеСледующих = Неопределено Тогда
			СброситьСостояниеСледующих = Истина;
		КонецЕсли;
		
		Если СброситьСостояниеСледующих
		   И РаботаСПоследовательностями.МоментНарушенияПоследовательности(Организация, КонецМесяца(Дата)) = Неопределено Тогда

			МоментПервогоДокументаСледующегоМесяца = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
				Организация, КонецМесяца(Дата) + 1);
			Если МоментПервогоДокументаСледующегоМесяца <> Неопределено Тогда
				РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
					МоментПервогоДокументаСледующегоМесяца.Ссылка, МоментПервогоДокументаСледующегоМесяца.Дата, Организация);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Отметка времени - завершение выполнения регламентной операции.
	ИмяКлючевойОперации = "ЗакрытиеМесяца" + ОбщегоНазначения.ИмяЗначенияПеречисления(ВидОперации);
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени(ИмяКлючевойОперации, НачалоВыполнения);
	
	ДлительностьВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполненияДляЖурналаРегистрации;
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Документы.РегламентнаяОперация,
							 Ссылка,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), ДлительностьВыполнения),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
							 
	Возврат Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	
КонецФункции // ВыполнитьОперацию

// Выполняет отмену регламентной операции.
//
// Параметры:
//	БлокировкаУстановленаНеявно - Булево - Истина, если блокировка на документ уже установлена.
//	Отказ - Булево - Признак отказа от отмены операции.
//	ПараметрыОтмены - Структура - См. НовыеПараметрыОтменыОперации() в модуле менеджера.
//
Процедура ОтменитьОперацию(БлокировкаУстановленаНеявно = Ложь, Отказ = Ложь, Знач ПараметрыОтмены = Неопределено) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Определим параметры выполнения операции.
	Если ТипЗнч(ПараметрыОтмены) <> Тип("Структура") Тогда
		ПараметрыОтмены = Документы.РегламентнаяОперация.НовыеПараметрыОтменыОперации();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Действие = НСтр("ru = 'отменить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Из-за изменения рег.операции перенесем момент нарушения последовательности на начало следующего месяца.
	// При массовой отмене регламентных операций сдвиг последовательности следует выполнять один раз.
	Если ПараметрыОтмены.СдвигатьМоментНарушенияПоследовательности Тогда
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
			МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(Организация, КонецМесяца(Дата));
			Если МоментНарушения = Неопределено Тогда
				НачалоСледующегоМесяца = КонецМесяца(Дата) + 1;
				МоментПервогоДокументаСледующегоМесяца = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
					Организация, НачалоСледующегоМесяца);
				Если МоментПервогоДокументаСледующегоМесяца <> Неопределено Тогда
					РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
						МоментПервогоДокументаСледующегоМесяца.Ссылка, МоментПервогоДокументаСледующегоМесяца.Дата, Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтмены.УдалитьДвижения Тогда // удаляем движения до перезаписи документа
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	КонецЕсли;
	
	Если ПараметрыОтмены.СброситьСостояниеОперации Тогда
		НовоеСостояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	ИначеЕсли Не ПараметрыОтмены.УдалитьДвижения Тогда
		НовоеСостояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется;
	Иначе
		НовоеСостояние = Состояние;
	КонецЕсли;
	Если ПараметрыОтмены.ОбновитьГраницуАктуальности Тогда
		// Проверить предыдущие операции и при возможности сделать актуальной текущую.
		ВариантОбновленияГраницыАктуальности = "Обновить";
	Иначе
		// Не изменять актуальность.
		ВариантОбновленияГраницыАктуальности = "НеИспользуется";
	КонецЕсли;
	ИзменитьСостояниеОперации(НовоеСостояние, ВариантОбновленияГраницыАктуальности);
	
	Если Не ПараметрыОтмены.УдалитьДвижения Тогда // отключаем активность после установки нового состояния
		ОбщегоНазначенияБПВызовСервера.ИзменитьАктивностьПоРегистратору(ЭтотОбъект, Отказ, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОтменитьОперацию()

Процедура ПропуститьОперацию(БлокировкаУстановленаНеявно = Ложь, Отказ = Ложь) Экспорт

	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действие = НСтр("ru = 'пропустить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	Если НайтиДубли() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ОперацияБылаВыполнена = (Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено
							Или Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Если ОперацияБылаВыполнена Тогда
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	КонецЕсли;
	
	ОписаниеОшибок = Неопределено;
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
	Записать();
	
	Если ОперацияБылаВыполнена Тогда
		РегистрыСведений.НеактуальныеРегламентныеОперации.ОбновитьГраницуАктуальности(Организация, Дата, ВидОперации);  
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПропуститьОперацию()

Функция ВосстановитьОперацию(НовоеСостояние, БлокировкаУстановленаНеявно = Ложь) Экспорт

	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	Действие = НСтр("ru = 'восстановить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если Не УдалосьУстановитьБлокировку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПравильноЗаполнено = ПроверитьЗаполнение();
	Если Не ПравильноЗаполнено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ОбщегоНазначенияБПВызовСервера.ИзменитьАктивностьПоРегистратору(ЭтотОбъект, Ложь, Истина);

	ИзменитьСостояниеОперации(НовоеСостояние);

	Возврат Истина;

КонецФункции

// Устанавливает регламентной операции новое состояние и изменяет её актуальность для закрытия месяца.
//
// Параметры:
//  НовоеСостояние - ПеречислениеСсылка.ВидыСостоянийРегламентныхОпераций - состояние проводок операции.
//  ВариантОбновленияГраницыАктуальности - Строка - изменения состояния:
//											* Обновить - проверить предыдущие операции и при возможности сделать актуальной текущую;
//											* ОбновитьБезПроверки - сделать актуальной текущую;
//											* НеИспользуется - не изменять актуальность.
//
Процедура ИзменитьСостояниеОперации(НовоеСостояние, ВариантОбновленияГраницыАктуальности = "Обновить")
	
	Если Состояние <> НовоеСостояние Тогда
		Состояние = НовоеСостояние;
	КонецЕсли;

	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	Если ВариантОбновленияГраницыАктуальности = "Обновить" Тогда // актуальна, если актуальны предыдущие
		
		РегистрыСведений.НеактуальныеРегламентныеОперации.ОбновитьГраницуАктуальности(Организация, Дата, ВидОперации);
		
	ИначеЕсли ВариантОбновленияГраницыАктуальности = "ОбновитьБезПроверки" Тогда // актуальна
		
		РегистрыСведений.НеактуальныеРегламентныеОперации.ОбновитьГраницуАктуальности(Организация, Дата, ВидОперации, Истина);
		
	КонецЕсли;

	ОтразитьИзменениеРегламентныхОперацийДляПереходаНаУСН();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блокировки

Функция УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, ТипВыполнения) Экспорт
	
	УдалосьУстановитьБлокировку = Ложь;
	
	// Заблокируем выполняемый документ,
	// чтобы никто параллельно не мог завладеть им в данном периоде,
	// по данной Организации/Виду операции.
	// Также учтем Группы операций
	// и филиальные структуры организаций
	
	ШаблонСообщения = НСтр("ru = 'Операцию ""[ВидОперации]"" сейчас [Действие] нельзя. Повторите попытку позже.'");
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ВидОперации", ВидОперации);
	ПараметрыСообщения.Вставить("Действие",    ТипВыполнения);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
	
	Если РольДоступна("АдминистраторСистемы") Тогда
		ШаблонСообщения = НСтр("ru = 'Операцию можно будет [Действие], когда завершатся фоновые задания, выполняющие регламентные операции.
		|Детальная информация о фоновых заданиях доступна по команде ""[Команда]"" раздела интерфейса ""[РазделИнтерфейса]"".'");
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Действие",         ТипВыполнения);
		ПараметрыСообщения.Вставить("Команда",          Метаданные.Обработки.РегламентныеИФоновыеЗадания.Команды.РегламентныеИФоновыеЗадания.Синоним);
		ПараметрыСообщения.Вставить("РазделИнтерфейса", Метаданные.Подсистемы.Администрирование.Синоним);
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
	КонецЕсли;
	
	// при выполнении из формы документа, он сам себя заблокирует (неявно),
	// а новые (не записанные) объекты, заблокировать объектной блокировкой нельзя
	Если НЕ Заблокирован() И НЕ БлокировкаУстановленаНеявно И НЕ ЭтоНовый() Тогда
		// аналогичный документ, в данный момент не используется
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат УдалосьУстановитьБлокировку;
		КонецПопытки;
	КонецЕсли;
	
	Группа = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации);
	
	// аналогичная операция, в данный момент не используется,
	// в т.ч. не должно быть пересечения выполнения между головным и обособленным подразделением группы организаций
	
	Параметры           = Новый Массив(1);
	СвойстваОрганизации = БухгалтерскийУчетПереопределяемый.СтруктураОрганизации(Организация);
	СтруктураБлокировкиПоОрганизациям = Новый Структура(
		"Организация, ПериодРегистрации, РегламентнаяОперация",
		Организация,
		КонецМесяца(Дата),
		ВидОперации);
	
	Если СвойстваОрганизации.Тип <> "Простая" и СвойстваОрганизации.ГоловнаяОрганизация.Количество() > 0 Тогда
		Если СвойстваОрганизации.Тип = "ОП" Тогда
			СтруктураБлокировкиПоОрганизациям.Вставить("Организация", СвойстваОрганизации.ГоловнаяОрганизация[0].Значение);
			
			Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
			КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
			Попытка
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат УдалосьУстановитьБлокировку;
			КонецПопытки;
			
			РазблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
		КонецЕсли;
		
		Если СвойстваОрганизации.Тип = "ГО" Тогда
			Для каждого ОрганизацияОП Из СвойстваОрганизации.Организация Цикл
				Если ОрганизацияОП.Значение = Организация Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураБлокировкиПоОрганизациям.Вставить("Организация", ОрганизацияОП.Значение);
				
				Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
				КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
				Попытка
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат УдалосьУстановитьБлокировку;
				КонецПопытки;
				
				РазблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураБлокировкиПоОрганизациям.Вставить("Организация", Организация);
	Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
	КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат УдалосьУстановитьБлокировку;
	КонецПопытки;
	
	// если это выполнение, то операции из любой другой Группы в данный момент не используются
	// если это отмена или пропуск, то операции выше данной группы в данный момент не используются
	
	СтруктураБлокировки = Новый Структура("Организация, Группа, Дата, ВидОперации");
	СтруктураБлокировки.Вставить("Организация", Организация);
	СтруктураБлокировки.Вставить("Дата",        НачалоМесяца(Дата));
	
	ЭтоВыполнение   = (ТипВыполнения = НСтр("ru = 'выполнить'"));
	НачальнаяГруппа = ?(ЭтоВыполнение, 1, Группа + 1);
	Если НачальнаяГруппа < 5 Тогда
		Для Каждого ЗначениеПеречисленияМет Из Метаданные.Перечисления.ВидыРегламентныхОпераций.ЗначенияПеречисления Цикл
			ЗначениеПеречисления = Перечисления.ВидыРегламентныхОпераций[ЗначениеПеречисленияМет.Имя];
			Для сч = НачальнаяГруппа По 4 Цикл
				ГруппаОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(ЗначениеПеречисления);
				Если Группа = ГруппаОперации Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураБлокировки.Вставить("ВидОперации", ЗначениеПеречисления);
				СтруктураБлокировки.Вставить("Группа",      ГруппаОперации);
				КлючЗаписиГруппа = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьКлючЗаписи(СтруктураБлокировки);
				Попытка
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат УдалосьУстановитьБлокировку;
				КонецПопытки;
				
				РазблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураБлокировки.Вставить("ВидОперации", ВидОперации);
	СтруктураБлокировки.Вставить("Группа",      Группа);
	КлючЗаписиГруппа = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьКлючЗаписи(СтруктураБлокировки);
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
		УдалосьУстановитьБлокировку = Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка);
		Возврат УдалосьУстановитьБлокировку;
	КонецПопытки;
	
	Возврат УдалосьУстановитьБлокировку;
	
КонецФункции // УстановитьОбъектныеБлокировки()

Функция УстановитьТранзакционнуюБлокировку() Экспорт
	
	// Объектная блокировка не работает для незаписанных объектов,
	// поэтому будем всегда ставить и транзакционную блокировку
	// при конкурентном доступе пересекающихся записанных объектов,
	// они будут отваливаться сразу от объектной, в ином случае, от транзакционной
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // УстановитьТранзакционнуюБлокировку()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Дата = КонецМесяца(Дата); // при обмене могут создать документ с неверной датой
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Недоступные = Перечисления.ВидыРегламентныхОпераций.НедоступныеРегламентныеОперации();
	Если Не ПометкаУдаления И Недоступные.Найти(ВидОперации) <> Неопределено Тогда
		// Документов с таким видом операции быть не должно
		Отказ = Истина;
	КонецЕсли;
	
	УдалосьУстановитьБлокировку = УстановитьТранзакционнуюБлокировку();
	
	Если НЕ УдалосьУстановитьБлокировку Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления
		И Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
		ОтменитьОперацию();
	КонецЕсли;
	
	Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		РегистрыСведений.НеАктуальныеРегламентныеОперации.УдалитьЗапись(
			Организация,
			Дата,
			ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Дата = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата          = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	Состояние     = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск ошибок в данных

// Перед выполнением регламентных операций выполняется поиск ошибок в данных,
// препятствующих выполнению.
// В отдельных случаях ошибки ищутся в ходе выполнения операций, а не перед ним.
// Информация о найденных ошибках сохраняется в документе.

Процедура ПроверитьИсходныеДанныеИНастройки(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		                       
		КонтрольЗатрат.ВыявитьУчетныеОшибкиРасчетСебестоимости(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		КонтрольЗатрат.ВыявитьУчетныеОшибкиРасходыНаПродажу(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		УчетДоходовРасходов.ВыявитьОшибкиПриЗакрытииМесяца(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		НалоговыйУчетОбособленныхПодразделений.ПроверитьНастроеныПолучателиДеклараций(
			Ошибки,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация);
			
		НалоговыйУчетОбособленныхПодразделений.ПроверитьСнятыСУчетаОтветственныеПодразделения(
			Ошибки,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация);
			
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда
			
		УчетСтраховыхВзносовИП.ВыявитьУчетныеОшибкиУплатыСтраховыхВзносов(
			Ошибки,
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Организация);
			
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		Иначе
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", КонецМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтавкиНалогаНаИмуществоСрезПоследних.Период КАК Период
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Дата, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних";
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				// Нет ставок налога на имущество
				
				ШаблонСообщения = НСтр("ru = 'Не указаны настройки налога на имущество.
					|Добавьте запись в регистр сведений ""Налог на имущество"" на %1%2.'");
				
				СсылкаДляПерехода = "e1cib/list/РегистрСведений.СтавкиНалогаНаИмущество";
				ТекстОрганизация = "";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
					ТекстОрганизация = СтрШаблон(НСтр("ru = ' по организации %1'"), СтруктураШапкиДокумента.Организация);
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг"),
					ТекстОрганизация);
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
		Если РегистрыСведений.СтавкиТранспортногоНалога.СтавкиНеЗаполнены() Тогда
			
			СсылкаДляПерехода = "e1cib/list/РегистрСведений.СтавкиТранспортногоНалога";
			ТекстСообщения = НСтр("ru = 'Не заполнены ставки налога'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги Тогда
	
		УчетРасходовУменьшающихОтдельныеНалоги.ВыявитьУчетныеОшибкиРасходовУменьшающихНалоги(
			Ошибки,
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Организация);
	
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД Тогда
		
		ДатаНачалаПоддержкиЕНВД = УчетЕНВД.ДатаНачалаПоддержкиЕНВД();
		
		Если СтруктураШапкиДокумента.КонДата < ДатаНачалаПоддержкиЕНВД Тогда
			
			ШаблонСообщения = НСтр("ru = 'Эта операция поддерживается с %1 года'");
			
			СсылкаДляПерехода = "";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Формат(Год(ДатаНачалаПоддержкиЕНВД), "ЧГ=0"));
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПростоеОписаниеОшибки(Описание, Ссылка, Отказ)
	
	Отказ = Истина;
	
	Если ДополнительныеСвойства.Свойство("Ошибки") Тогда
		ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
			ДополнительныеСвойства.Ошибки, 
			Описание, 
			Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяПолитикаСуществует(ОрганизацияДляУчетнойПолитики)
	
	Существует = УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка);
	Отказ      = Не Существует;
	
	Если Не Существует Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 на %2 не заполнена учетная политика.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
		
		ДобавитьПростоеОписаниеОшибки(
			ТекстСообщения, 
			БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитику(),
			Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПроверитьПоследовательностьДокументов(СписокОрганизаций, Ошибки, Отказ)
	
	ШаблонТекстаПоследовательность = НСтр("ru = 'Нарушена последовательность проведения документов.
		|Возможно изменение результатов проведения документов за %1 по организации %2.
		|Выполните повторно перепроведение документов, начиная с %3
		|(раздел ""Операции"" - ""Закрытие месяца"").'");

	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		
		ТекущаяОрганизация = ЭлементСписка.Значение;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение")
			И ЗакрытиеМесяца.ОперацияТребуетВыполнениеПослеАктуализацииРасчетовСКонтрагентами(
				ВидОперации,
				КонецМесяца(Дата),
				ТекущаяОрганизация) Тогда
			МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(
				ТекущаяОрганизация, КонецМесяца(Дата));
		Иначе
			МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
				ТекущаяОрганизация, КонецМесяца(Дата));
		КонецЕсли;
		
		Если МоментНарушения <> Неопределено
			И МоментНарушения.Дата <= КонецМесяца(Дата) Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаПоследовательность,
				Формат(МоментНарушения.Дата, "ДФ='MMММ yyyy ""г.""'"),
				ТекущаяОрганизация,
				Формат(МоментНарушения.Дата, "ДЛФ=Д"));
			
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки,
				ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Актуализация списка регламентных операций

Функция НайтиДубли() Экспорт
	
	Дубли = Документы.РегламентнаяОперация.НайтиДубли(Дата, Организация, ВидОперации, Ссылка);
	
	Если Дубли.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Выборка = Дубли.Выбрать();
	Выборка.Следующий();
	
	ШаблонСообщения = НСтр("ru = 'Регламентная операция ""%1"" создана ранее.
		|Используйте документ %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, 
		Строка(ВидОперации), 
		Строка(Выборка.Ссылка));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		
	Возврат Истина;
	
КонецФункции	

Процедура ОтразитьИзменениеРегламентныхОперацийДляПереходаНаУСН()

	Если ЭтоПодготовкаКПереходуНаУСН() Тогда
		ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(Организация, ДобавитьМесяц(Дата, 1));
		Если ЗначениеЗаполнено(ДатаПереходаНаУСН) Тогда
			
			ПараметрыПереходаНаУСН = Новый Структура;
			ПараметрыПереходаНаУСН.Вставить("Организация",  Организация);
			ПараметрыПереходаНаУСН.Вставить("ДатаПерехода", ДатаПереходаНаУСН);
			ПараметрыПереходаНаУСН.Вставить("ВидОперации",  Перечисления.ВидыОперацийПереходаНаУСН.ВычетНДСПоАвансамПокупателей);
			ПараметрыПереходаНаУСН.Вставить("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
			
			УчетУСН.ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(ПараметрыПереходаНаУСН);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЭтоПодготовкаКПереходуНаУСН()

	ЭтоОперацияПереходаНаУСН = Ложь;
	
	Если КонецМесяца(Дата) = КонецГода(Дата) Тогда
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) = 1 Тогда
			Если УчетнаяПолитика.ПереходНаУСН(Организация, ДобавитьМесяц(Дата, 1)) Тогда
				ЭтоОперацияПереходаНаУСН = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоОперацияПереходаНаУСН;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Отказ               = УчетнаяПолитикаСуществует(ГоловнаяОрганизация);
	СтруктураШапки      = Новый Структура();
	
	Если Отказ Тогда
		Возврат СтруктураШапки;
	КонецЕсли;
	
	СтруктураШапки.Вставить("НачДата",                 НачалоМесяца(Дата));
	СтруктураШапки.Вставить("КонДата",                 КонецМесяца(Дата));
	СтруктураШапки.Вставить("НачГраница",              Новый Граница(СтруктураШапки.НачДата, ВидГраницы.Исключая));
	СтруктураШапки.Вставить("КонГраница",              Новый Граница(СтруктураШапки.КонДата, ВидГраницы.Включая));
	СтруктураШапки.Вставить("НачГода",                 НачалоГода(Дата));
	СтруктураШапки.Вставить("Организация",             Организация);
	СтруктураШапки.Вставить("Ссылка",                  Ссылка);
	СтруктураШапки.Вставить("Дата",                    Дата);
	СтруктураШапки.Вставить("Номер",                   Номер);
	СтруктураШапки.Вставить("ВидОперации",             ВидОперации);
	СтруктураШапки.Вставить("Заголовок",               Заголовок);
	СтруктураШапки.Вставить("ГоловноеПодразделение",   ГоловнаяОрганизация);
	СтруктураШапки.Вставить("Предприниматель",         УчетнаяПолитика.ПлательщикНДФЛ(Организация, СтруктураШапки.КонДата));
	
	ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	СписокОП = Новый СписокЗначений;
	Для Каждого ОбособленноеПодразделение Из ВсяОрганизация Цикл
		СписокОП.Добавить(ОбособленноеПодразделение);
	КонецЦикла;
	СтруктураШапки.Вставить("СписокОрганизаций", СписокОП);
	
	ЕстьОбособленныеПодразделения = СписокОП.Количество() > 1;
	СтруктураШапки.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	Возврат СтруктураШапки;
	
КонецФункции // ЗаполнитьСтруктуруШапкиДокумента()

Процедура СформироватьДвиженияИлиСообщенияОбОшибках(Отказ)
	
	ДополнительныеСвойства.Вставить("Ошибки", ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках());
	Ошибки = ДополнительныеСвойства.Ошибки;
	
	// Сообщения об ошибках могут быть помещены в коллекцию Ошибки явно,
	// или помещены в сообщения пользователю.
	// В последнем случае они будут записаны в коллекцию Ошибки позже.
	
	Заголовок   = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// При последовательном проведении регламентных операций проверку последовательности
	// имеет смысл выполнить один раз в самом начале, для остальных регламетных операций 
	// установить признак ПропуститьПроверкуПоследовательности.
	НадоПроверятьПоследовательность = Истина;
	Если ДополнительныеСвойства.Свойство("ПропуститьПроверкуПоследовательности")
	   И ДополнительныеСвойства.ПропуститьПроверкуПоследовательности = Истина Тогда
		НадоПроверятьПоследовательность = Ложь;
	КонецЕсли;
	
	Если НадоПроверятьПоследовательность Тогда

		НомерГруппыВидаОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(СтруктураШапкиДокумента.ВидОперации);

		Если ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппыВидаОперации) Тогда
			СписокОрганизаций = СтруктураШапкиДокумента.СписокОрганизаций;
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.Добавить(Организация);
		КонецЕсли;
	
		ПроверитьПоследовательностьДокументов(СписокОрганизаций, Ошибки, Отказ);
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("ПропуститьПроверкуСтатусаПредыдущих")
	   И Не ЗакрытиеМесяца.ПредыдущиеОперацииВыполнены(Дата, Организация, ВидОперации, Ошибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",                    ЭтоНовый());
	ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь); // Записанные движения регистратора будут принудительно очищены
	
	// Проверяем после очистки движений,
	// чтобы движения регламентной операции не повлияли на результат проверки
	ПроверитьИсходныеДанныеИНастройки(СтруктураШапкиДокумента, Отказ, Ошибки);
	Если ВыводСообщенийОбОшибках.ЕстьОшибки(Ошибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвижения(СтруктураШапкиДокумента, Отказ, Ошибки);
	
	Если Не Отказ Тогда
		Движения.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура СформироватьДвижения(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// Как правило, алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета.
	// Есть исключения для отдельных регл. операций. Они описаны ниже.
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		// АМОРТИЗАЦИЯ
		НачислениеАмортизацииИИзносаОС(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей Тогда
		ПризнаниеВНУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеПроцентныхРасходов Тогда
		НачислениеПроцентныхРасходов(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		// Начисление амортизации НМА и списание расходов по НИОКР
		НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации Тогда
		// СПЕЦОДЕЖДА И СПЕЦОСНАСТКА
		ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасходМатериаловДляВыпускаПродукции Тогда
		// ВЫПУСК ПРОДУКЦИИ ПО ДАННЫМ ПРОДАЖ
		РасходМатериаловДляВыпускаПродукции(
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка,
			Отказ,
			Ошибки);
			
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеВзносовОтНесчастыхСлучаев Тогда
		// НАЧИСЛЕНИЕ ФЗНОСОВ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ ПРИ АУСН
		НачислениеВзносовОтНесчастыхСлучаев(СтруктураШапкиДокумента, Отказ);			
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда
		// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
		КорректировкаСтоимостиНоменклатуры(
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда
		// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
		ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ, Ошибки);
		
		// ТОРГОВЫЙ СБОР
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговогоСбора Тогда
		ВыполнитьРасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
		
	// ИМУЩЕСТВЕННЫЕ НАЛОГИ
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		// Расчет долей списания косвенных расходов налогового учета, транспортных расходов и распределения 
		// расходов по видам деятельности
		РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		Документы.РегламентнаяОперация.ЗакрытиеСчетов20_23_25_26(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка,
			Отказ,
			Ошибки);
	
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		// ТОРГОВЛЯ
		РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		// ЗАКРЫТИЕ СЧЕТА 44
		ЗакрытиеСчета44(
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда
		// РАСЧЕТ РЕЗЕРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ
		РасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ОбесценениеЗапасов Тогда
		
		УчетОбесцененияАктивов.СформироватьДвиженияРегламентнойОперации(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка);
			
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		// ЗАКРЫТИЕ СЧЕТОВ БУ
		ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
		//Округление сумм НДС до полных рублей № 248-ФЗ от 23.07.2013
		ОкруглениеСуммНДС(СтруктураШапкиДокумента);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереносУбытковПоНалогуНаПрибыль Тогда
		// УБЫТКИ ПО НУ
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ);
		НалогНаПрибыльУбыткиПрошлыхЛет.ПереносУбыткаНаБудущее(
			Движения.Хозрасчетный, 
			СтруктураШапкиДокумента.Дата, 
			СтруктураШапкиДокумента.Организация);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		// НАЛОГ НА ПРИБЫЛЬ
		
		РассчитатьНалогНаПрибыль(
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетОтложенногоНалога Тогда
		// ОТЛОЖЕННЫЙ НАЛОГ НА ПРИБЫЛЬ
		
		// Инициализация
		
		// Основной алгоритм расчета опирается на оценку отложенных налогов на начало периода,
		// выполненную предыдущими регламентными операциями и записанную в служебные регистры.
		// Если в служебных регистрах такая информация отсутствует, то требуется ее записать - инициализировать расчет.
		// Такое может быть при первом выполнении после изменения учетной политики, а также, если по каким-то причинам
		// регламентные операции за отдельные месяцы были пропущены.
		//
		// После инициализации выполняется оценка на отчетную дату (конец периода) в общем порядке,
		// обращающаяся к только что записанным данным.
		//
		// Алгоритм инициализации отличается от общего алгоритма (на отчетную дату) следующими моментами:
		// - ставка налога может определяться исходя из соотношения фактически отраженных сумм на счетах 09 и 77
		//   и временных разниц;
		// - при инициализации не формируются проводки, поэтому погрешности округления нивелируются так,
		//   чтобы общая сумма по виду отложенных активов или обязательств точно соответствовала суммам на счетах;
		// - записи о временных разницах и суммах отложенного налога, которые заведомо не соответствуют друг-другу игнорируются.
		
		НалогНаПрибыльБухгалтерскийУчет.ИнициализироватьРасчетОтложенногоНалога(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация);
			
		ИменаРегистровИнициализации = Новый Массив;
		ИменаРегистровИнициализации.Добавить("РасчетОтложенногоНалога");
		ИменаРегистровИнициализации.Добавить("ПримененныеСтавкиОтложенногоНалога");
		
		ИнициализированыеРегистры = Новый Массив;
		
		Для Каждого ИмяРегистра Из ИменаРегистровИнициализации Цикл
			
			НаборЗаписей = Движения[ИмяРегистра];
			Если Не НаборЗаписей.Модифицированность() Тогда
				Продолжить;
			КонецЕсли;
			
			ИнициализированыеРегистры.Добавить(НаборЗаписей);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
		
		// Основные действия
		НалогНаПрибыльБухгалтерскийУчет.ОтразитьПоследствияНачисленияНалога(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОперации,
			СтруктураШапкиДокумента.Ссылка);
			
		Для Каждого НаборЗаписей Из ИнициализированыеРегистры Цикл
			
			// Не выполняем стандартную запись, так как она выполняется в режиме вытеснения и приведет к потере записей инициализации.
			НаборЗаписей.Записывать = Ложь;
			
			Если Не НаборЗаписей.Модифицированность() Тогда
				Продолжить;
			КонецЕсли;
			
			// Запишем принудительно в режиме дополнения.
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда
		// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА
		
		РасчетНалогаНаПрибыль.ПересчитатьОтложенныйНалогПоСтавкеСледующегоНалоговогоПериода(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.Ссылка);
			
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли;
		
		ОпределениеФинансовогоРезультата.ЗакрытьСчетаНаКонецГода(
			Движения.Хозрасчетный,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация);
			
		НалоговыйУчет.ЗакрытьСчетДоходыРасходыНеУчитываемые(
			Движения.Хозрасчетный,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация);
			
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25 Тогда
		// ПЕРЕХОД НА ФСБУ 25 БУХГАЛТЕРСКИЙ УЧЕТ АРЕНДЫ
		
		УчетОС.ВыполнитьРегламентнуюОперациюПереходНаФСБУ25(
			Движения,
			СтруктураШапкиДокумента.Организация, 
			СтруктураШапкиДокумента.Дата, 
			Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6 Тогда
		
		// ПЕРЕХОД НА ФСБУ 6 ОСНОВНЫЕ СРЕДСТВА
		ПереходНаФСБУ6(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ14 Тогда
		
		// ПЕРЕХОД НА ФСБУ 14 НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
		УчетНМА.ПереходНаФСБУ14(СтруктураШапкиДокумента, Отказ, Движения);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога Тогда
		// КОРРЕКТИРОВКА ОТЛОЖЕННОГО НАЛОГА С УЧЕТОМ ОПЕРАЦИЙ МЕЖОТЧЕТНОГО ПЕРИОДА
		
		НалогНаПрибыльБухгалтерскийУчет.ОтразитьПоследствияНачисленияНалога(
			Движения,
			СтруктураШапкиДокумента.Дата,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОперации,
			СтруктураШапкиДокумента.Ссылка);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование Тогда
		
		ПереводОСВМалоценноеОборудование(СтруктураШапкиДокумента, Отказ);
		
		// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН и ЕНВД
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН Тогда 
		
		УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН Тогда
		СписаниеТаможенныхПлатежейУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда
		РаспределениеРасходовУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги Тогда
		РассчитатьРасходыУменьшающиеОтдельныеНалоги(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда
		РассчитатьНалогУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаАУСН Тогда
		НачислитьНалогАУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД Тогда
		РассчитатьЕНВД(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП Тогда
		РассчитатьНДФЛ(СтруктураШапкиДокумента);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету Тогда 
		ЗачетАвансаПоЕдиномуНалоговомуСчету(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаНаПрофессиональныйДоход Тогда
		НачислениеНалогаНаПрофессиональныйДоход(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНалоговНаЕНС Тогда 
		НачислениеНалоговНаЕНС(СтруктураШапкиДокумента, Отказ);
		
		// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО ИП
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда 
		НачислитьСтраховыеВзносыИП(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда 
		ВключениеАвансовВПрочиеДоходыИП(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда 
		РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Эта операция в данный момент не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.Хозрасчетный.Записывать = Ложь;
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные расчеты

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации и износа основных средств
//
Процедура НачислениеАмортизацииИИзносаОС(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ОТМЕНА ОПЕРАЦИИ "ПЕРЕВОД ОС В МАЛОЦЕННОЕ ОБОРУДОВАНИЕ"
	
	Документы.РегламентнаяОперация.ОтменитьОперациюПереводОСВМалоценноеОборудование(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Начисление амортизации ОС
	ПараметрыНачисленияАмортизации = УчетОС.ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(Неопределено,
		ПараметрыПроведения.НачислениеАмортизацииОС, Отказ, Истина);
		
	ЭтоМесяцНачисленияИзноса = Месяц(СтруктураШапкиДокумента.Дата) = 12;
	Если ЭтоМесяцНачисленияИзноса Тогда
		// Начисление износа ОС по ЕНАОФ
		ПараметрыНачисленияИзноса = УчетОС.ПодготовитьТаблицуИзносаБухРегл(Неопределено,
			ПараметрыПроведения.НачислениеИзносаОС, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	УчетОС.СформироватьДвиженияНачислениеАмортизацииИАмортизационнойПремии(
		ПараметрыНачисленияАмортизации,
		Движения, Отказ);
	
	РезультатыРасчета = УчетГрупповыхОС.РассчитатьАмортизацию(
		ПараметрыПроведения.НачислениеАмортизацииОС, 
		Неопределено, Отказ, Ошибки);
	УчетГрупповыхОС.ОтразитьАмортизациюВУчете(
		РезультатыРасчета, 
		ПараметрыПроведения.НачислениеАмортизацииОС, 
		Движения, Отказ);
	
	РезультатыРасчета = Неопределено;
	УчетРемонтовОС.РассчитатьАмортизацию(
		РезультатыРасчета,
		ПараметрыПроведения.НачислениеАмортизацииОС, 
		Неопределено, Отказ, Ошибки);
	УчетРемонтовОС.ОтразитьАмортизациюВУчете(
		РезультатыРасчета, 
		ПараметрыПроведения.НачислениеАмортизацииОС, 
		Движения, Отказ);
	
	Если ЭтоМесяцНачисленияИзноса Тогда
		// Начисление износа ОС по ЕНАОФ
		УчетОС.СформироватьДвиженияНачислениеИзноса(
			ПараметрыНачисленияИзноса,
			ПараметрыПроведения.НачислениеИзносаОС,
			Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры // НачислениеАмортизацииОС()

// Выполняет начисление амортизации НМА и списание расходов по НИОКР
//
Процедура НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Начисление амортизации ОС
	ПараметрыНачисленияАмортизации = УчетНМА.ПодготовитьТаблицыАмортизацииНМА(Неопределено,
		ПараметрыПроведения.НачислениеАмортизацииНМА, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат,
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыНачисленияАмортизации.Амортизация.СправкаРасчет,
		ПараметрыНачисленияАмортизации.Амортизация.ТаблицаРеквизиты,
		"РасчетАмортизации");
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПРИЗНАНИЯ РАСХОДОВ ПО АРЕНДЕ

// Выполняет признание в НУ расходов по арендным платежам
//
Процедура ПризнаниеВНУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПризнаниеВНУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ПараметрыНачисленияАмортизации = УчетОС.ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(Неопределено,
		ПараметрыПроведения.АрендныеПлатежи, Отказ);
	
	ПараметрыРасходыПоАреднымПлатежамНУ = УчетОС.ПодготовитьТаблицыРасходовПоАренднымПлатежамНУ(Неопределено,
		ПараметрыПроведения.АрендныеПлатежи, ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	УчетОС.СформироватьДвиженияРасходыПоАренднымПлатежамНУиКорректировкиАмортизации(
		ПараметрыРасходыПоАреднымПлатежамНУ,
		Движения, Отказ);
		
	УчетОС.СформироватьДвиженияРасчетРасходовПоАренде(
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ, 
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты,
		Движения, Отказ);
	
КонецПроцедуры

// Выполняет начисление в БУ процентных расходов по договорам аренды и рассрочке оплаты поступления
//
Процедура НачислениеПроцентныхРасходов(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеПроцентныхРасходов(
		СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизиты = ПараметрыПроведения.НачислениеПроцентныхРасходов;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицыНачислениеПроцентныхРасходов = Новый Структура;
	УчетПроцентовПоОбязательствам.ЗаполнитьТаблицыНачислениеПроцентныхРасходов(
		ТаблицыНачислениеПроцентныхРасходов, ТаблицаРеквизиты, Отказ, Ошибки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроценты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ТаблицыНачислениеПроцентныхРасходов, "ТаблицаПроценты");
	ТаблицаРасчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ТаблицыНачислениеПроцентныхРасходов, "ТаблицаРасчет");
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетПроцентовПоОбязательствам.СформироватьДвиженияНачислениеПроцентныхРасходов(
		Движения, ТаблицаПроценты, ТаблицаРеквизиты);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения, ТаблицаРасчет, ТаблицаРеквизиты, "РасчетНачисленияПроцентныхРасходов");
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПОГАШЕНИЮ СТОИМОСТИ СПЕЦОДЕЖДЫ И СПЕЦОСНАСТКИ

// Выполняет погашение стоимости спецодежды и спецоснастки
//
Процедура ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСпецодеждаИСпецоснастка(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетМатериаловВЭксплуатации.СформироватьДвиженияПогашениеСтоимостиСпецодеждыСпецоснасткиРеглОперация(
		ПараметрыПроведения.РеквизитыСпецодеждаИСпецоснастка, Движения, Отказ);    
	
КонецПроцедуры // ПогашениеСтоимостиСпецодеждыИСпецоснастки()


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
//Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПроведенияВалюнаяПереоценка(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Реализация отложенных курсовых разниц
	РеализацияОтложенныхРазниц = УчетДоходовРасходов.ПодготовитьТаблицуРеализацияОтложенныхКурсовыхРазниц(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков);
	
	// Переоценка валютных остатков
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ, Ошибки);
	
	// Корректировка в конце 2022 года разниц по непогашенным на 31.12.2022 требованиям и обязательствам
	// в соответствии с Письмом Минфина от 22.12.2022 № 03-03-10/126074 и Законом от 22.12.2022 № 532-ФЗ
	ТаблицаКорректировка2022 = УчетДоходовРасходов.ПодготовитьТаблицуКорректировкаКурсовыхРазниц2022(
		ТаблицаПереоценка, РеализацияОтложенныхРазниц, ПараметрыПроведения.ПереоценкаВалютныхОстатков);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовРасходов.СформироватьДвиженияРеализацияОтложенныхКурсовыхРазниц(РеализацияОтложенныхРазниц,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРасчетРеализацииОтложенныхКурсовыхРазниц(РеализацияОтложенныхРазниц,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияКорректировкаКурсовыхРазниц2022(ТаблицаКорректировка2022,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаКорректировка2022,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
КонецПроцедуры // ПереоценкаВалютныхСредств()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ВЫПУСКУ И РАСХОДУ МАТЕРИАЛОВ ПО ДАННЫМ ПРОДАЖ  

Процедура РасходМатериаловДляВыпускаПродукции(Период, Организация, Ссылка, Отказ, Ошибки)
	
	ПараметрыСписания = РасходМатериаловПоДаннымПродаж.РассчитатьРасходМатериаловДляВыпускаПродукции(
		Период, Организация, Ссылка);
	
	Если Не ЗначениеЗаполнено(ПараметрыСписания.РасчетМатериаловДляСписания) Тогда
		Возврат;
	КонецЕсли;
	
	// Транзакцию используем для того, чтобы при списании материалов ИП устанавливалась блокировка.
	// При списании материалов ИП в регламентной операции используются типовые процедуры, такие же как в документах списания материлов.
	// Эти процедуры требуют транзакцию для блокировок, поэтому откроем транзакцию.
	// Для целостности данных эта транзакция не нужна - механизм формирования регламентных операций подчищает движения в случае ошибки.
	НачатьТранзакцию();
	Попытка
		
		Материалы = РасходМатериаловПоДаннымПродаж.ПодготовитьТаблицыСписанияМатериалов(
			ПараметрыСписания.РасчетМатериаловДляСписания, ПараметрыСписания.ТаблицаРеквизитов);
		
		КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков();
		Если КонтролироватьОстаток И ЗначениеЗаполнено(Материалы.НедостаточноМатериалов) Тогда
			Отказ = Истина;
			РасходМатериаловПоДаннымПродаж.ОписатьОшибкиВыявленныеПриСписанииМатериалов(
				Ошибки, ПараметрыСписания.РасчетМатериаловДляСписания, Материалы);
			// Зафиксируем транзакцию, чтобы она не оставалась открытой.
			// Транзакция здесь нужна для того, чтобы можно было при формировании остатков по регистрам накладывать блокировки.
			// Фиксация транзакции в этом месте не запишет данные, т.к. это только подготовка данных - реальная запись наборов будет позже.
			// Кроме этого, механика регламентной операции в случае отказа дополнительно очищает все наборы.
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ТаблицыМатериаловИП = РасходМатериаловПоДаннымПродаж.ПодготовитьТаблицыСписанияМатериаловИП(
			Материалы.СписаноМатериалов, ПараметрыСписания.РасчетМатериаловДляВыпуска,
			ПараметрыСписания.ТаблицаРеквизитов);
		
		Если КонтролироватьОстаток И ЗначениеЗаполнено(ТаблицыМатериаловИП.ОшибкиСписанияМПЗ) Тогда
			Отказ = Истина;
			РасходМатериаловПоДаннымПродаж.ОписатьОшибкиВыявленныеПриСписанииМатериаловИП(
				Ошибки, ТаблицыМатериаловИП);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ТаблицыДвиженийМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыДвиженийМПЗПоВыпущеннойПродукции(
			ПараметрыСписания.ВыпущеннаяПродукцияДляУчетаЗатратИППоДаннымПродаж, ПараметрыСписания.ТаблицаРеквизитов);
		
		// Списание материалов на расходы производства
		УчетТоваров.СформироватьДвиженияСписаниеТоваров(Материалы.СписаноМатериалов,
			ПараметрыСписания.ТаблицаРеквизитов, Движения, Отказ);
		
		// Учет НДС
		// Списание материалов на расходы
		УчетНДСБП.СформироватьДвиженияСписаниеТоваровНаРасходы(
			ПараметрыСписания.МатериалыДляСписанияНДС, Материалы.СписаноМатериалов,
			ПараметрыСписания.ТаблицаРеквизитов, Движения, Отказ);
		
		// УСН
		// Структура таблиц для отражения в налоговом учете УСН
		СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ", Материалы.СписаноМатериалов);
		НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
		
		// Учет доходов и расходов ИП
		
		УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
			ТаблицыМатериаловИП,
			ПараметрыСписания.ТаблицаРеквизитов, Движения, Отказ);
		
		УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоСебестомостиПродукции(
			ТаблицыДвиженийМПЗ,
			ТаблицыМатериаловИП.СтоимостьПродукции,
			ПараметрыСписания.ТаблицаРеквизитов, Движения, Отказ);
			
			
		РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			ПараметрыСписания.РасходМатериаловДляСправкиРасчета,
			РеквизитыЗаписи,
			"РасчетРасходаМатериаловПоДаннымПродаж");
		
		// Т.к. корректировка стоимости номенклатуры зависит от этой операции, то нужно сделать ее неактуальной.
		РаботаСПоследовательностями.ЗарегистрироватьУстареваниеОперации(ЭтотОбъект,
			Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(Строка(ВидОперации)),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.РегламентнаяОперация,
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАСЧЕТУ ФЗНОСОВ ОТ НЕСЧАСТНЫХ СЛУЧАЕ

Процедура НачислениеВзносовОтНесчастыхСлучаев(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеВзносовОтНесчастыхСлучаев(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	УчетЗарплаты.СформироватьДвиженияНачислениеВзносовОтНесчастныхСлучаев(
		ПараметрыПроведения,
		Движения);
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(Период, Организация, Ссылка)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ДанныеНаборовЗаписей = РасчетСебестоимости.РассчитатьСебестоимость(
		Период,
		Организация,
		Ссылка,
		Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	
	Если ДанныеНаборовЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		Движения,
		ДанныеНаборовЗаписей.Хозрасчетный,
		Период,
		Организация);
		
	ЭлементыЗатрат.СформироватьДвиженияСтруктураСтоимостиЗапасов(
		ДанныеНаборовЗаписей,
		Движения,
		Период,
		Организация);
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Процедура ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	ПрименяетсяУСНДоходыРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетСписанияРБП(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитыРБП[0];
	
	// Расчет списания РБП
	РасчетСписанияРБП = РасходыБудущихПериодов.РаспределитьЧастьРасходовЗаМесяц(Реквизиты.Период, Реквизиты.Организация, Отказ, Ошибки);
	
	// Учет доходов и расходов ИП
	ТаблицыСписанияРБПИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияРБП(
		РасчетСписанияРБП, ПараметрыПроведения.ТаблицаРеквизитыРБП, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасходыБудущихПериодов.СформироватьДвиженияРасчетСписанияРБП(РасчетСписанияРБП, ПараметрыПроведения.ТаблицаРеквизитыРБП, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетСписанияРБП,
		ПараметрыПроведения.ТаблицаРеквизитыРБП,
		"РасчетСписанияРБП",
		Истина,
		"Организация, Статья, СчетУчета, СчетСписания, СпособПризнанияРасходов, ДатаНачала, ДатаОкончания, КоличествоМесяцевДнейТекущегоПериода, КоличествоМесяцевДней, СуммаДоговора, ПодразделениеОрганизации",
		"Сумма, НачОстаток, КонОстаток, НачОстатокНУ, КонОстатокНУ, СуммаНУ, НачОстатокПР, КонОстатокПР, СуммаПР, НачОстатокВР, КонОстатокВР, СуммаВР");
		
		
	Если ПрименяетсяУСНДоходыРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеРБП", Параметры, 0);
		
	КонецЕсли;
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписанияРБП(
		ТаблицыСписанияРБПИП.РБП, ТаблицыСписанияРБПИП.ПрочиеРасходы, ПараметрыПроведения.ТаблицаРеквизитыРБП, Движения, Отказ);
	
КонецПроцедуры // ЗакрытиеСчета97()

// РАСЧЕТ ДОЛЕЙ СПИСАНИЯ КОСВЕННЫХ РАСХОДОВ

Процедура РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетДолей(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	Параметры   = ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей[0];
	Период      = Параметры.Период;
	Организация = Параметры.Организация;
	
	ДолиСписанияКосвенныхРасходов = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	РасчетНормированияРасходов    = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	РасчетБазы                    = Движения.РасчетБазыНормированияПоДоговорамСтрахования.ВыгрузитьКолонки();
	
	ПротоколНормируемыеРасходы = Новый Структура();
	ПротоколНормируемыеРасходы.Вставить("ДолиСписанияКосвенныхРасходов", ДолиСписанияКосвенныхРасходов);
	ПротоколНормируемыеРасходы.Вставить("РасчетНормированияРасходов", РасчетНормированияРасходов);
	ПротоколНормируемыеРасходы.Вставить("РасчетБазыНормированияПоДоговорамСтрахования", РасчетБазы);
	
	ЗаполнитьЗначенияСвойств(
		ПротоколНормируемыеРасходы.ДолиСписанияКосвенныхРасходов.Добавить(),
		НалоговыйУчет.ДолиСписанияРасходов(Период, Организация, ПротоколНормируемыеРасходы));
		
	ПротоколНормируемыеРасходы.РасчетБазыНормированияПоДоговорамСтрахования.ЗаполнитьЗначения(Истина, "Активность");
	ПротоколНормируемыеРасходы.РасчетБазыНормированияПоДоговорамСтрахования.Колонки.Удалить("Период");
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ПротоколНормируемыеРасходы.РасчетНормированияРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей,
		"РасчетНормированияРасходов",
		Истина,
		"Организация, ВидОперации, ВидРегОперации, СуммаБазы, ПредельныйРазмер",
		"РасходыМесяц, РазницыМесяц, ЗатратыГод, РасходыГод, РазницыГод");
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ПротоколНормируемыеРасходы.ДолиСписанияКосвенныхРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей, 
		"ДолиСписанияКосвенныхРасходов",
		Истина,
		"Организация",
		"ДоляРасходовНаРекламу, ДоляРасходовНаДобровольноеСтрахованиеЖизни, ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
		|ДоляПредставительскихРасходов, ДоляЕНВД, ДоляТранспортныхРасходов, ДоляРасходовНаВозмещениеПроцентовРаботникам,
		|ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев, ДоляРезервовПоСомнительнымДолгамНУ");
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ПротоколНормируемыеРасходы.РасчетБазыНормированияПоДоговорамСтрахования,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей, 
		"РасчетБазыНормированияПоДоговорамСтрахования");
		
КонецПроцедуры

// ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетТорговойНаценки(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаПроводокРасчетНаценки = ЗакрытиеМесяца.ПодготовитьТаблицуРасчетТорговойНаценки(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНаценки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияРасчетТорговойНаценки(ТаблицаПроводокРасчетНаценки,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНаценки, Движения, Отказ);
	
КонецПроцедуры // РасчетТорговойНаценкиПоПроданнымТоварам()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Процедура ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91[0];
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ПроводкиЗакрытиеСчета90 = ЗакрытиеМесяца.ПроводкиЗакрытиеСчета90(Реквизиты.Период, Реквизиты.Организация);
	
	ПроводкиЗакрытиеСчета91 = ЗакрытиеМесяца.ПодготовитьТаблицыЗакрытиеСчета91(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета90,
		Реквизиты.Период,
		Реквизиты.Организация);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета91,
		Реквизиты.Период,
		Реквизиты.Организация);
	
КонецПроцедуры

Процедура ОкруглениеСуммНДС(СтруктураШапкиДокумента)
	
	Если УчетНДС.ПолучитьПорядокОкругленияНДС(СтруктураШапкиДокумента.Дата) <> 2 
		ИЛИ Месяц(СтруктураШапкиДокумента.Дата) <> Месяц(КонецКвартала(СтруктураШапкиДокумента.Дата)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыОкругленияНДС(СтруктураШапкиДокумента);
		
	ЗакрытиеМесяца.СформироватьДвиженияПоОкруглениюНДС(
		ПараметрыПроведения.ТаблицаРеквизитыОкруглениеНДС,
		СтруктураШапкиДокумента.СписокОрганизаций, Движения);
	
КонецПроцедуры	
	
Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСписаниеУбытков(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаУбытков = ЗакрытиеМесяца.ПодготовитьТаблицуУбытков(ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков,
		ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Движения, Отказ);
	
КонецПроцедуры // СписаниеУбытковПрошлыхЛет()

Процедура ЗакрытиеСчета44(Период, Организация, Ссылка)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ДанныеНаборовЗаписей = РасчетСебестоимости.РассчитатьСебестоимость(
		Период,
		Организация,
		Ссылка,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44);
	
	Если ДанныеНаборовЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		Движения,
		ДанныеНаборовЗаписей.Хозрасчетный,
		Период,
		Организация);
		
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		Период,
		Организация);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДанныеНаборовЗаписей.РасчетСписанияКосвенныхРасходов,
		РеквизитыЗаписи,
		"РасчетСписанияКосвенныхРасходов",
		Истина);
		
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАСЧЕТУ РЕЗЕРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ

Процедура РасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента, Отказ)
	
	// Начисление резерва
	НачислениеРезерва = РезервыПоСомнительнымДолгам.НачислитьРезерв(
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
	
	Если Не ЗначениеЗаполнено(НачислениеРезерва) Тогда
		Возврат;
	КонецЕсли;
	
	// Запись движений
	
	РезервыПоСомнительнымДолгам.СформироватьПроводки(
		Движения.Хозрасчетный,
		НачислениеРезерва,
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
	
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
		
	// В протокол включаем только записи, по которым начислялся резерв
	ПротоколНачисленияРезерва = НачислениеРезерва.СкопироватьКолонки();
	Для Каждого Запись Из НачислениеРезерва Цикл
		
		Если Запись.НачисленоРанееБУ = 0 И Запись.НачисленоРанееНУ = 0
			И Запись.НачисленоБУ = 0 И Запись.НачисленоНУ = 0 И Запись.ВстречнаяЗадолженность = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПротоколНачисленияРезерва.Добавить(), Запись);
		
	КонецЦикла;
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ПротоколНачисленияРезерва,
		РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений,
		"РасчетРезервовПоСомнительнымДолгам",
		Истина,
		"Организация,Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом,ДатаВозникновенияЗадолженности,СуммаЗадолженности,СрокЗадолженности,ВстречнаяЗадолженность",
		"НачисленоРанееБУ,НачисленоРанееНУ,НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ");
		
КонецПроцедуры

// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН

Процедура УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ)
	
	УменьшатьРасходыНаОстатокНЗП = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата)
		И УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата) =
			Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;
	
	Если Не УменьшатьРасходыНаОстатокНЗП Тогда
		Возврат;
	КонецЕсли;
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачПрошлогоПериода", ДобавитьМесяц(СтруктураШапкиДокумента.НачДата, -1));
	Запрос.УстановитьПараметр("КонПрошлогоПериода", ДобавитьМесяц(СтруктураШапкиДокумента.КонДата, -1));
	Запрос.УстановитьПараметр("НачТекПериода",      СтруктураШапкиДокумента.НачДата);
	Запрос.УстановитьПараметр("КонТекПериода",      СтруктураШапкиДокумента.КонДата);
	Запрос.УстановитьПараметр("ВидОперацииСуммоваяОценка", Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	ВложенныйЗапрос.ОтражениеВУСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|			КОГДА ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|				ТОГДА -ИнвентаризацияНЗПСостав.СуммаНУ
	|			ИНАЧЕ ИнвентаризацияНЗПСостав.СуммаНУ
	|		КОНЕЦ) КАК СуммаНУ,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН КАК ОтражениеВУСН
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|	ГДЕ
	|		ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|		И ИнвентаризацияНЗПСостав.Ссылка.Проведен
	|		И ИнвентаризацияНЗПСостав.Ссылка.ВидОперации = &ВидОперацииСуммоваяОценка
	|	СГРУППИРОВАТЬ ПО
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		СУММА(ВЫБОР
	|			КОГДА ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|				ТОГДА -ВводНачальныхОстатковБухСправка.Сумма
	|			ИНАЧЕ ВводНачальныхОстатковБухСправка.Сумма
	|		КОНЕЦ),
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.БухСправка КАК ВводНачальныхОстатковБухСправка
	|	ГДЕ
	|		ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ВводНачальныхОстатковБухСправка.Ссылка.Организация = &Организация
	|		И
	|			ВводНачальныхОстатковБухСправка.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
	|	СГРУППИРОВАТЬ ПО
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ОтражениеВУСН";
	
	ТаблицаНЗП = Запрос.Выполнить().Выгрузить();
	Для Каждого НЗП Из ТаблицаНЗП Цикл
		
		Если НЗП.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание =
					"Признаны материальные расходы, ранее отраженные в составе незавершенного производства по номенклатурной группе """
					+ НЗП.НоменклатурнаяГруппа + """.";
			Иначе
				Содержание =
					"Сумма материальных расходов уменьшена на остаток незавершенного производства по номенклатурной группе """
					+ НЗП.НоменклатурнаяГруппа + """.";
			КонецЕсли;
			
			СтрокаКниги = КУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.ТабличнаяЧасть  = "";
			СтрокаКниги.Содержание      = Содержание;
			СтрокаКниги.Графа7          = НЗП.СуммаНУ;
			СтрокаКниги.НДС             = 0;
			СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
				СтруктураШапкиДокумента.Дата,
				СтруктураШапкиДокумента.Номер,
				СтруктураШапкиДокумента.Дата);
			
		ИначеЕсли НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Списаны остатки НЗП";
			Иначе
				Содержание = "Расходы отражены как НЗП";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КУДиР.Записать(Ложь);
	
КонецПроцедуры

Процедура ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаОплаты, ДатаВводаВэксплуатацию, Параметры = Неопределено)
	
	КУДиР     = Движения.КнигаУчетаДоходовИРасходов;
	КУДиР_ОС  = Движения.КнигаУчетаДоходовИРасходовОС;
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0,
		ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = КУДиР_ОС.Добавить();
	СтрокаКниги.ОсновноеСредство = ОС;
	СтрокаКниги.Период = СтруктураШапкиДокумента.КонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаВводаВЭксплуатацию = ДатаВводаВэксплуатацию;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
		СтрокаКниги.ДокументМодернизации = Строка.ДокументМодернизации
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования   = Цел(Строка.СрокПолезногоИспользования/12)
				+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12)
			+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = КУДиР.Добавить();
		Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
			СтрокаСодержания = "Признание расходов: основное средство """
				+ Строка(ОС) + """, " + Строка.ДокументМодернизации.СобытиеОС
				+ " от " + Формат(Строка.ДокументМодернизации.Дата, "ДФ=дд.ММ.гггг")
				+ " (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		Иначе
			СтрокаСодержания = "Признание расходов на приобретение основного средства """
				+ Строка(ОС) + """ (дата оплаты: "
				+ Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		КонецЕсли;
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  = СтрокаСодержания;
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Номер,
			СтруктураШапкиДокумента.КонДата);
		
	КонецЕсли;
	
	КУДиР.Записывать    = Истина;
	КУДиР_ОС.Записывать = Истина;
	
КонецПроцедуры

Процедура ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаОплаты, ДатаПринятияКУчету, Параметры = Неопределено)
	
	КУДиР		= Движения.КнигаУчетаДоходовИРасходов;
	КУДиР_НМА	= Движения.КнигаУчетаДоходовИРасходовНМА;
	
	ОбщПервоначальнаяСтоимостьУСН	= Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации	= Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН	= Строка.СуммаОплатыОборот;
	
	СуммаНачисленнойАмортизации	= ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0,
		ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
		
	ОстаточнаяСтоимость			= Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги	= КУДиР_НМА.Добавить();
	
	СтрокаКниги.НематериальныйАктив	= НМА;
	СтрокаКниги.Период				= СтруктураШапкиДокумента.КонДата;
	СтрокаКниги.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты			= Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаПринятияКУчету		= ДатаПринятияКУчету;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость	= Строка.СуммаОплатыОборот;
	
	ОстатокРасходов	= ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты		= СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов	= 0;
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость			= ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования	= Цел(Строка.СрокПолезногоИспользования/12)
															+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде	= Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов		= Строка.СуммаРасходовВсего - Строка.СуммаРасходовЗаГод;
			СтрокаКниги.Графа15_ОстатокРасходов				= ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде	= Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод	= Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал	= Параметры.ПроцентПринятияРасходовОтч;
		
	Иначе
		
		СтрокаКниги.Графа7_СрокПолезногоИспользования	= Цел(Строка.СрокПолезногоИспользования/12)
														+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов		= Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод	= Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал		= Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов				= ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Признание расходов на приобретение нематериального актива ""%1"" (дата оплаты: %2).'"),
			Строка(НМА), Формат(Строка.ДатаОплаты, "ДЛФ=D"));
		
		СтрокаКниги	= КУДиР.Добавить();
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  = Содержание;
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Номер,
			СтруктураШапкиДокумента.КонДата);
		
	КонецЕсли;
	
	КУДиР.Записывать     = Истина;
	КУДиР_НМА.Записывать = Истина;
	
КонецПроцедуры

Процедура ВключитьВРасходыПрочее(СтруктураШапкиДокумента, Объект, Строка, СуммаОплаты, Параметры = Неопределено)
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = КУДиР.Добавить();
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  =
			"Признание расходов на """ + Строка(Объект) + """ (дата оплаты: "
			+ Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг") + ").";
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Номер,
			СтруктураШапкиДокумента.КонДата);
		
	КонецЕсли;
	
	КУДиР.Записывать = Истина;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.КонДата,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		,
		ДатаРегистрации);
	
	Если СтруктураШапкиДокумента.КонДата < НалоговыйПериод.Начало
		ИЛИ УчетУСН.НалоговыйПериодПропущен(СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.КонДата,
			ДатаРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКварталаОперации = НачалоКвартала(СтруктураШапкиДокумента.КонДата);
	Если НомерКвартала(СтруктураШапкиДокумента.КонДата) = 1 Тогда
		НачалоКварталаОперации = Мин(НалоговыйПериод.Начало, НачалоКварталаОперации);
	КонецЕсли;
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", ДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачалоПериода",     НалоговыйПериод.Начало);
	Запрос.УстановитьПараметр("НачалоКвартала",    НачалоКварталаОперации);
	Запрос.УстановитьПараметр("КонецПериода",      СтруктураШапкиДокумента.КонДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство КАК ОсновноеСредство,
	|	ИСТИНА КАК ЭтоГрупповойОбъект,
	|	СУММА(ПервоначальныеСведенияОСНалоговыйУчетУСН.ПервоначальнаяСтоимостьУСН) КАК ПервоначальнаяСтоимостьУСН,
	|	СУММА(ПервоначальныеСведенияОСНалоговыйУчетУСН.СуммаНачисленнойАмортизации) КАК СуммаНачисленнойАмортизации,
	|	СУММА(ПервоначальныеСведенияОСНалоговыйУчетУСН.СрокПолезногоИспользования) КАК СрокПолезногоИспользования,
	|	МАКСИМУМ(ПервоначальныеСведенияОСНалоговыйУчетУСН.ДатаПриобретения) КАК ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН КАК ПервоначальныеСведенияОСНалоговыйУчетУСН
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПервоначальныеСведенияОСНалоговыйУчетУСН.Организация = &Организация
	|	И ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство.ЕдиницаУчета = ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство,
	|	ЛОЖЬ,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)) КАК ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ЭтоГрупповойОбъект КАК ЭтоГрупповойОбъект,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации КАК ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПервоначальнаяСтоимостьУСН КАК ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.СуммаНачисленнойАмортизации КАК СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ДатаПриобретения КАК ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыОСДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыОСДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыОСДляУСН.Обороты(&ДатаПереходаНаУСН, &КонецПериода, , Организация = &Организация) КАК ОплатыОСДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОСНалоговыйУчетУСН
	|		ПО ОплатыОСДляУСНОбороты.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&ДатаПереходаНаУСН, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОбороты
	|		ПО (КнигаУчетаДоходовИРасходовОСОбороты.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство)
	|			И (КнигаУчетаДоходовИРасходовОСОбороты.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты)
	|			И (КнигаУчетаДоходовИРасходовОСОбороты.ДокументМодернизации = ОплатыОСДляУСНОбороты.ДокументМодернизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыГод
	|		ПО (КнигаУчетаДоходовИРасходовОСОборотыГод.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство)
	|			И (КнигаУчетаДоходовИРасходовОСОборотыГод.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты)
	|			И (КнигаУчетаДоходовИРасходовОСОборотыГод.ДокументМодернизации = ОплатыОСДляУСНОбороты.ДокументМодернизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачалоКвартала, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыКв
	|		ПО (КнигаУчетаДоходовИРасходовОСОборотыКв.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство)
	|			И (КнигаУчетаДоходовИРасходовОСОборотыКв.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты)
	|			И (КнигаУчетаДоходовИРасходовОСОборотыКв.ДокументМодернизации = ОплатыОСДляУСНОбороты.ДокументМодернизации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ЭтоГрупповойОбъект,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекОС = "";
	ТекМодернизацияОС = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если (СтрокаРезультата.ОсновноеСредство = ТекОС) И (СтрокаРезультата.ДокументМодернизации = ТекМодернизацияОС) Тогда
			//
		Иначе
			ТекОС = СтрокаРезультата.ОсновноеСредство;
			ТекМодернизацияОС = СтрокаРезультата.ДокументМодернизации;
			Если ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда //Модернизация
				
				ПервоначальнаяСтоимостьУСН  = 0;
				СуммаНачисленнойАмортизации = 0;
				СрокПолезногоИспользования  = 12;
				ДатаПриобретения = СтрокаРезультата.ДокументМодернизации.Дата;
				ДатаВвода = ДатаПриобретения;
				
				СтрокаРезультата.ПервоначальнаяСтоимостьУСН  = ПервоначальнаяСтоимостьУСН;
				СтрокаРезультата.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
				СтрокаРезультата.СрокПолезногоИспользования  = СрокПолезногоИспользования;
				СтрокаРезультата.ДатаПриобретения = ДатаПриобретения;
				
				Если (СтрокаРезультата.ДатаОплаты < Дата("20070101")) ИЛИ (ДатаВвода < Дата("20070101")) Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если Макс(СтрокаРезультата.ДатаОплаты, ДатаВвода) < Дата("20080101") Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если ДатаПриобретения < ДатаПереходаНаУСН Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Ссылка",      СтрокаРезультата.ДокументМодернизации);
				Запрос.УстановитьПараметр("ОС",          СтрокаРезультата.ОсновноеСредство);
				Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратБУ) КАК СуммаЗатратБУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратНУ) КАК СуммаЗатратНУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратУСН) КАК СуммаЗатратУСН,
				|	СобытияОСОрганизаций.Событие
				|ИЗ
				|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
				|ГДЕ
				|	СобытияОСОрганизаций.Регистратор = &Ссылка
				|	И СобытияОСОрганизаций.ОсновноеСредство = &ОС
				|	И СобытияОСОрганизаций.Организация = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	СобытияОСОрганизаций.Событие";
				
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПервоначальнаяСтоимостьУСН = Результат.СуммаЗатратУСН;
				КонецЕсли;
				
			Иначе //ОС
				
				ПервоначальнаяСтоимостьУСН  = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
				СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
				СрокПолезногоИспользования  = СтрокаРезультата.СрокПолезногоИспользования;
				ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
				
				Если СтрокаРезультата.ЭтоГрупповойОбъект Тогда
					// Для Группового ОС "СостояниеОС" не хранится, т.к. оно описывается количественной характеристикой.
					// Групповое ОС может быть сразу в нескольких МестонахожденияхОС, иметь несколько документов поступления и выбытия.
					ДатаВвода = СтрокаРезультата.ДатаПриобретения;
				Иначе
					ДокРегистратор   = Неопределено;
					ДатаВвода        = Неопределено;
					УчетОС.ПолучитьДокументБухСостоянияОС(ТекОС,
						СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокРегистратор, ДатаВвода);
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия           = Неопределено;
			УчетОС.ПолучитьДокументБухСостоянияОС(ТекОС,
				СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.СнятоСУчета,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаВыбытия) И ДатаВыбытия <= СтруктураШапкиДокумента.КонДата Тогда
				//Основное средство выбыло
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН =
				Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКварталаОперации Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
							|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
						
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
						
					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКварталаОперации Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
							|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
						
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
						
					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= ДатаПереходаНаУСН Тогда
			
			НачДатаОплат = НалоговыйПериод.Начало;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
					
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
					
				КонецЕсли;
				
				Параметры = Неопределено;
				
				СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, СтруктураШапкиДокумента.КонДата, Параметры);
				Параметры.Вставить("ПереходныйПериод", Ложь);
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
					
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);

				КонецЕсли;
				
				Параметры = Неопределено;
				
				СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, СтруктураШапкиДокумента.КонДата, Параметры);
				Параметры.Вставить("ПереходныйПериод", Ложь);
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость *(ОплаченнаяСтоимость / ПервоначальнаяСтоимостьУСН)
									 - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости = ЧастьОстаточнойСтоимости - Превышение;
				ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
					|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
				
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);

			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходов(СтруктураШапкиДокумента, ТекОС, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.КонДата,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		,
		ДатаРегистрации);
	
	Если СтруктураШапкиДокумента.КонДата < НалоговыйПериод.Начало
		ИЛИ УчетУСН.НалоговыйПериодПропущен(СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.КонДата,
			ДатаРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКварталаОперации = НачалоКвартала(СтруктураШапкиДокумента.КонДата);
	
	Если НомерКвартала(СтруктураШапкиДокумента.КонДата) = 1 Тогда
		НачалоКварталаОперации = Мин(НалоговыйПериод.Начало, НачалоКварталаОперации);
	КонецЕсли;
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", ДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачалоПериода",     НалоговыйПериод.Начало);
	Запрос.УстановитьПараметр("НачалоКвартала",    НачалоКварталаОперации);
	Запрос.УстановитьПараметр("КонецПериода",      СтруктураШапкиДокумента.КонДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыНМАДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыНМАДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыНМАДляУСН.Обороты(&ДатаПереходаНаУСН, &КонецПериода, , Организация = &Организация) КАК ОплатыНМАДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(&КонецПериода, ) КАК ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыНМАДляУСНОбороты.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&ДатаПереходаНаУСН, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОбороты
	|		ПО (КнигаУчетаДоходовИРасходовНМАОбороты.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОбороты.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыГод
	|		ПО (КнигаУчетаДоходовИРасходовНМАОборотыГод.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОборотыГод.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачалоКвартала, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыКв
	|		ПО (КнигаУчетаДоходовИРасходовНМАОборотыКв.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОборотыКв.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныйАктив,
	|	ДатаОплаты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПревышениеОплаты	= НСтр("ru = 'Сумма зарегистрированных оплат НМА ""%1"" превышает его первоначальную стоимость.
		|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".'");
	
	ТекНМА	= Неопределено;
	
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.НематериальныйАктив = ТекНМА Тогда
			
			ТекНМА	= Выборка.НематериальныйАктив;
			
			ПервоначальнаяСтоимостьУСН	= Выборка.ПервоначальнаяСтоимостьУСН;
			СуммаНачисленнойАмортизации	= Выборка.СуммаНачисленнойАмортизации;
			СрокПолезногоИспользования	= Выборка.СрокПолезногоИспользования;
			ДатаПриобретения			= Выборка.ДатаПриобретения;
			
			ДокРегистратор	= Неопределено;
			ДатаВвода		= Неопределено;
			
			УчетНМА.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,
				Перечисления.ВидыСостоянийНМА.ПринятКУчету, ДокРегистратор, ДатаВвода);
			
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекНМА	= Неопределено;
				Продолжить;
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ	= Неопределено;
			ДатаВыбытия				= Неопределено;
			
			УчетНМА.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,
				Перечисления.ВидыСостоянийНМА.Списан, ДокументСнятоСУчетаБУ, ДатаВыбытия);
			
			ДатаВыбытия	= ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			
			Если ЗначениеЗаполнено(ДатаВыбытия) И ДатаВыбытия <= СтруктураШапкиДокумента.КонДата Тогда
				//НМА выбыло
				ТекНМА = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекНМА	= Неопределено;
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость				= Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость				= 0;
			ОплаченнаяОстаточнаяСтоимость	= 0;
			
		КонецЕсли;
		
		Если Выборка.ПорядокВключенияСтоимостиВСоставРасходовУСН =
			Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
			
			Если ДатаВвода >= НачалоКварталаОперации Тогда
				
				СуммаОплаты	= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);

				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты);
				КонецЕсли;
				
			Иначе
				
				СуммаОплаты			= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если Выборка.ДатаОплаты < НачалоКварталаОперации Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты);
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		ИначеЕсли Выборка.ПорядокВключенияСтоимостиВСоставРасходовУСН =
			Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДатаПриобретения >= ДатаПереходаНаУСН Тогда
			
			НачДатаОплат = НалоговыйПериод.Начало;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				
				СуммаОплаты			= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
				КонецЕсли;
				
				Параметры = Неопределено;
				
				СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, Выборка.ДатаОплаты, ДатаВвода, СтруктураШапкиДокумента.КонДата, Параметры);
				Параметры.Вставить("ПереходныйПериод", Ложь);
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
				
			Иначе
				СуммаОплаты	= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если Выборка.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
				КонецЕсли;
				
				Параметры = Неопределено;
				
				СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, Выборка.ДатаОплаты, ДатаВвода, СтруктураШапкиДокумента.КонДата, Параметры);
				Параметры.Вставить("ПереходныйПериод", Ложь);
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, Выборка.НематериальныйАктив, Выборка, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость				= ОплаченнаяСтоимость + Выборка.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости		= ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость	= ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				
				Превышение	= ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость	= ОплаченнаяОстаточнаяСтоимость - Превышение;
				ЧастьОстаточнойСтоимости		= ЧастьОстаточнойСтоимости - Превышение;
				
				ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходовНМА(СтруктураШапкиДокумента, Выборка.НематериальныйАктив, ЧастьОстаточнойСтоимости, Выборка, ДатаВвода);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде,
												КоличествоКварталовВНалоговомПериоде,
												ДатаВключенияСтоимостиВРасходы,
												Период);
	
	НомерКвартала = НомерКвартала(Период);
	
	Если Год(ДатаВключенияСтоимостиВРасходы) < Год(Период) Тогда
		
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала;
		КоличествоКварталовВНалоговомПериоде = 4;
		
	ИначеЕсли ДатаВключенияСтоимостиВРасходы <= Период Тогда
		
		НомерКварталаНачалаРасчета = НомерКвартала(ДатаВключенияСтоимостиВРасходы);
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала - НомерКварталаНачалаРасчета + 1;
		КоличествоКварталовВНалоговомПериоде = 5 - НомерКварталаНачалаРасчета;
		
	КонецЕсли;
	
КонецФункции

Функция РаспределитьОплатуПоКварталам(СуммаОплаты, ДатаОплаты, ДатаВводаВэксплуатацию, Период, Параметры)
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде,
		КоличествоКварталовВНалоговомПериоде,
		Макс(ДатаОплаты, ДатаВводаВэксплуатацию),
		Период);
	СуммаРасходов = 0;
	
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = СуммаОплаты/КоличествоКварталовВНалоговомПериоде;
	КонецЕсли;
	
	ПроцентПринятияРасходовОтч = ?(КоличествоКварталовВНалоговомПериоде = 0, 0, Окр(100/КоличествоКварталовВНалоговомПериоде, 2));
	Параметры = Новый Структура(
		"КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		0, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, 100);
	
	Возврат СуммаРасходов;
	
КонецФункции

Процедура ФормированиеРасходов(СтруктураШапкиДокумента, ОС, ОстаточнаяСтоимость, Строка, ДатаВводаВэксплуатацию)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(СтруктураШапкиДокумента, Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		Макс(Строка.ДатаОплаты, ДатаВводаВэксплуатацию), СтруктураШапкиДокумента.КонДата);
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость * КоличествоКварталовВОтчетномПериоде
						*(ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде) / 100;
	КонецЕсли;
	
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);
	КонецЕсли;
	
	Параметры = Новый Структура(
		"КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаРасходов, ДатаВводаВэксплуатацию, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Процедура ФормированиеРасходовНМА(СтруктураШапкиДокумента, НМА, ОстаточнаяСтоимость, Строка, ДатаПринятияКУчету)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде		= 0;
	КоличествоКварталовВНалоговомПериоде	= 0;
	
	ПроцентПринятияРасходов	= ПроцентПринятыхРасходов(СтруктураШапкиДокумента, Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		Макс(Строка.ДатаОплаты, ДатаПринятияКУчету), СтруктураШапкиДокумента.КонДата);
		
	СуммаРасходов	= 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов	= ОстаточнаяСтоимость * КоличествоКварталовВОтчетномПериоде
						* (ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде) / 100;
	КонецЕсли;
	
	ОтнесеноНаРасходы	= 0;
	ОтнесеноНаРасходы	= Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов	= Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч	= 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч	= ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде;
	КонецЕсли;
	
	Параметры	= Новый Структура("
		|КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		|ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
		
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаРасходов, ДатаПринятияКУчету, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроцентПринятыхРасходов(СтруктураШапкиДокумента, СрокПолезногоИспользования)
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	ПроцентСписания = 0;
	
	Если СрокПолезногоИспользования <= 3*12 Тогда
		
		Если Год(Дата) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 100;
		КонецЕсли;
		
	ИначеЕсли СрокПолезногоИспользования <= 15*12 Тогда
		Если Год(Дата) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 50;
			
		ИначеЕсли (Год(Дата) - 1) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 30;
			
		ИначеЕсли (Год(Дата) - 2) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 20;
		КонецЕсли;
		
	Иначе
		ПроцентСписания = 10;
	КонецЕсли;
	
	Возврат ПроцентСписания;
	
КонецФункции

Процедура СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ)
	
	КонтекстОперации = УчетУСН.НовыйКонтекстРегламентнойОперации(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Ссылка);
	Параметры.Вставить("Объект", ЭтотОбъект);
	Параметры.Вставить("Организация", КонтекстОперации.Организация);
	Параметры.Вставить("Дата", КонтекстОперации.Период);
	Параметры.Вставить("НачалоПериода", КонтекстОперации.НачалоПериода);
	Параметры.Вставить("КонецПериода", КонтекстОперации.КонецПериода);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	Параметры.Вставить("ПроверкаПримененияУСНВыполнена", Истина);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТЗР", Параметры, 1);
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ В УСН

Процедура РаспределениеРасходовУСН(СтруктураШапкиДокумента, Отказ)
	
	Перем ДатаИзменения;
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ПериодичностьОперации = ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапкиДокумента.ВидОперации);
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, ДатаИзменения);
	
	Если Не ПрименяетсяУСНДоходыМинусРасходы
		И ДатаИзменения > ОбщегоНазначенияБПКлиентСервер.НачалоПериода(СтруктураШапкиДокумента.Дата, ПериодичностьОперации) Тогда
		ПрименяетсяУСНДоходыМинусРасходы =
			УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		Параметры.Вставить("ПроверкаПримененияУСНВыполнена", Истина);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "РаспределениеРасходов", Параметры, 2);
	
	КонецЕсли;
	
КонецПроцедуры

// ВКЛЮЧЕНИЕ АВАНСОВ В ПРОЧИЕ ДОХОДЫ

Процедура ВключениеАвансовВПрочиеДоходыИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыВключениеАвансовВПрочиеДоходыИП(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВключенияАвансовВПрочиеДоходы	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуВключенияАвансовВПрочиеДоходы(
		ПараметрыПроведения.ТаблицаРеквизитов, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВключениеАвансовВПрочиеДоходы(
		ТаблицаВключенияАвансовВПрочиеДоходы,
		ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ ИП

Процедура РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРаспределениеРасходовЕНВДИП(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРаспределениеРасходовЕНВД(
		ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// НАЧИСЛЕНИЕ СТРАХОВЫХ ВЗНОСОВ ИП ЗА СЕБЯ

Процедура НачислитьСтраховыеВзносыИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияСтраховыхВзносовИП(
		СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала признаем расходы в КУДИР, затем рассчитываем окончательную сумму налога
	
	ТаблицаРасходовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		ПараметрыПроведения.ТаблицаРеквизитов);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(
		ТаблицаРасходовИП, ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО УСН
	
	ТаблицаРасходовУСН = УчетУСН.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		ПараметрыПроведения.ТаблицаРеквизитов);
	
	// Включение страховых взносов в расходы 
	УчетУСН.СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(
		ТаблицаРасходовУСН, ПараметрыПроведения.ТаблицаРеквизитов, ЭтотОбъект, Отказ);
	
	// Отражение движений по БУ
	
	ТаблицаНачисленияСтраховыхВзносов = УчетСтраховыхВзносовИП.ПодготовитьТаблицуНачисленияСтраховыхВзносов(
		ПараметрыПроведения.ТаблицаРеквизитов);
	
	УчетСтраховыхВзносовИП.СформироватьДвиженияНачислениеСтраховыхВзносов(
		ТаблицаНачисленияСтраховыхВзносов, ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// ПБУ 18

Процедура РассчитатьНалогНаПрибыль(Период, Организация, Регистратор)
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(Организация, Период);
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// РАСЧЕТ НАЛОГА В СООТВЕТСТВИИ С НАЛОГОВЫМ КОДЕКСОМ
	
	// Рассчитаем базу налога на прибыль за отчетный (налоговый) период
	НалоговаяБаза  = РасчетНалогаНаПрибыль.НалоговаяБаза(
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
		
	// Менеджер временных таблиц передается между разными частями алгоритма.	
	// В КОРП временная таблица СоответствиеПрежнихИТекущихНалоговыхОрганов, созданная при расчете распределения налога 
	// (см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы()),
	// используются и при начислении сумм налога (см. РасчетНалогаНаПрибыль.НачислениеНалогаНаПрибыль()).
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РасчетРаспределенияНалоговойБазы = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы(
		РасчетРаспределенияНалоговойБазы,
		КонтекстРасчета,
		НалоговаяБаза,
		МенеджерВременныхТаблиц);
	
	// Проводки по начислению налога на прибыль
	СуммыНалога = РасчетНалогаНаПрибыль.НачислитьНалогНаПрибыль(
		Движения,
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазы,
		НалоговаяБаза,
		МенеджерВременныхТаблиц);
		
	Если РасчетРаспределенияНалоговойБазы <> Неопределено Тогда
		
		РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
	
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			РасчетРаспределенияНалоговойБазы,
			РеквизитыЗаписи,
			"РасчетДолейБазыНалогаНаПрибыль");
			
	КонецЕсли;
	
	// РАСЧЕТ НАЛОГА В СООТВЕТСТВИИ С ПБУ 18
	
	// При балансовом методе расчет выполняется в ходе отдельной регламентной операции - РасчетОтложенногоНалога
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
			
		РасчетнаяСтавкаНалогаЗаМесяц = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(Период, Организация);
		РасчетСреднейСтавки = Неопределено;
		НалоговыйУчетОбособленныхПодразделений.РассчитатьСреднююСтавкуНалога(
			РасчетнаяСтавкаНалогаЗаМесяц,
			РасчетСреднейСтавки,
			СуммыНалога.Проводки,
			РасчетРаспределенияНалоговойБазы,
			Организация,
			Период);
		
		// Проводки по расчету отложенного налога (ПБУ 18)
		СуммаПересчетаУбытков = 0;
	
		РезультатРасчетаОтложенногоНалога = РасчетНалогаНаПрибыль.РассчитатьОтложенныйНалог(КонтекстРасчета, РасчетнаяСтавкаНалогаЗаМесяц);
		СуммаПересчетаУбытков = РезультатРасчетаОтложенногоНалога.СуммаПересчетаУбытков;
		
		// Запись движений
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(Движения, РезультатРасчетаОтложенногоНалога.Проводки, Период, Организация);
		
		РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
		
		Для Каждого ДанныеРегистра Из РезультатРасчетаОтложенногоНалога.ВспомогательныеРегистры Цикл
			
			ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
				Движения,
				ДанныеРегистра.Значение,
				РеквизитыЗаписи,
				ДанныеРегистра.Ключ,
				Истина);
					
		КонецЦикла;
		
		РасчетНалогаНаПрибыль.ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(
			Движения,
			КонтекстРасчета.КонецПериода,
			КонтекстРасчета.Организация);
			
		НалоговыйУчетОбособленныхПодразделений.ПересчитатьОтложенныйНалогПоСреднейСтавкеТекущегоМесяца(
			Движения,
			СуммаПересчетаУбытков,
			РасчетнаяСтавкаНалогаЗаМесяц * 100,
			Период,
			Организация);
			
		Если РасчетСреднейСтавки <> Неопределено Тогда
			
			ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
				Движения,
				РасчетСреднейСтавки,
				РеквизитыЗаписи,
				"РасчетСтавкиНалогаНаПрибыльЗаМесяц");
				
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН (ФОРМИРОВАНИЕ 4 РАЗДЕЛА КУДИР)

Процедура РассчитатьРасходыУменьшающиеОтдельныеНалоги(СтруктураШапкиДокумента, Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетаРасходовУменьшающихНалоги(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасходовУменьшающихНалог = УчетРасходовУменьшающихОтдельныеНалоги.РасчетРасходовУменьшающихОтдельныеНалоги(ПараметрыПроведения.ТаблицаРеквизиты);
	
	УчетРасходовУменьшающихОтдельныеНалоги.СформироватьДвиженияРасходыУменьшающиеОтдельныеНалоги(
		ТаблицаРасходовУменьшающихНалог,
		ПараметрыПроведения.ТаблицаРеквизиты,
		Движения,
		Отказ);

	ТаблицаДвиженийПоРазделу4КУДиР = УчетУСН.ПодготовитьТаблицуДвиженийПоРазделу4КУДиР(ТаблицаРасходовУменьшающихНалог,
		ПараметрыПроведения.ТаблицаРеквизиты);
		
	УчетУСН.СформироватьДвиженияКУДиРРаздел4(ТаблицаДвиженийПоРазделу4КУДиР,
		ПараметрыПроведения.ТаблицаРеквизиты,
		Движения,
		Отказ);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Процедура ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ТаблицыНачислениеНалога = РасчетИмущественныхНалогов.ПодготовитьТаблицыРасчетНалога(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов, Отказ);
		
	Если ТаблицыНачислениеНалога.Свойство("Ошибки") Тогда  
		
		Отказ = Истина;
		
		Если НЕ ДополнительныеСвойства.Свойство("Ошибки") Тогда
			Возврат
		КонецЕсли;	
		
		ДетализацияОшибки = Новый Массив;
		ДетализацияОшибки.Добавить("Локализация");
		ДетализацияОшибки.Добавить("Рекомендация");
		ДетализацияОшибки.Добавить("ЛокализацияДетально");
					
		Для Каждого Ошибка Из ТаблицыНачислениеНалога.Ошибки Цикл
			
			ПростоеОписаниеОшибки = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				ДополнительныеСвойства.Ошибки, 
				Ошибка.ТекстСообщения, 
				Ошибка.СсылкаДляПерехода);
						
			Для Каждого ПолеДетализации Из ДетализацияОшибки Цикл
				Если Ошибка.Свойство(ПолеДетализации) Тогда
					ПростоеОписаниеОшибки[ПолеДетализации] = Ошибка[ПолеДетализации];
				КонецЕсли;	
			КонецЦикла;	
								
		КонецЦикла;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеНалогаВУСН = УчетУСН.ПодготовитьТаблицуРасходовПоИмущественномуНалогу(
		ТаблицыНачислениеНалога.ТаблицаПроводок, ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетИмущественныхНалогов.СформироватьДвиженияРасчетНалога(
		ТаблицыНачислениеНалога,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		Движения,
		Отказ);
		
	УчетУСН.СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
		ТаблицаОтражениеНалогаВУСН,
		ТаблицыНачислениеНалога.ТаблицаДвиженийПлатон,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		ЭтотОбъект,
		Отказ);
		
КонецПроцедуры

Процедура СписаниеТаможенныхПлатежейУСН(СтруктураШапкиДокумента, Отказ)
	
	КонтекстОперации = УчетУСН.НовыйКонтекстРегламентнойОперации(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Ссылка);
	Параметры.Вставить("Объект", ЭтотОбъект);
	Параметры.Вставить("Организация", КонтекстОперации.Организация);
	Параметры.Вставить("Дата", КонтекстОперации.Период);
	Параметры.Вставить("НачалоПериода", КонтекстОперации.НачалоПериода);
	Параметры.Вставить("КонецПериода", КонтекстОперации.КонецПериода);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	Параметры.Вставить("ПроверкаПримененияУСНВыполнена", Истина);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТаможенныхПлатежей", Параметры);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ ТОРГОВОГО СБОРА

Процедура ВыполнитьРасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ГоловноеПодразделение <> СтруктураШапкиДокумента.Организация Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицыНачислениеСбора = ТорговыйСбор.ПодготовитьТаблицыРасчета(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора, Отказ);
		
	Если ТаблицыНачислениеСбора.Свойство("Ошибки") Тогда
		Для Каждого Ошибка Из ТаблицыНачислениеСбора.Ошибки Цикл
			ДобавитьПростоеОписаниеОшибки(Ошибка.ТекстСообщения, Ошибка.СсылкаДляПерехода, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеВУСН = УчетУСН.ПодготовитьТаблицуРасходовПоТорговомуСбору(
		ТаблицыНачислениеСбора.ТаблицаПроводок, ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ТорговыйСбор.СформироватьДвиженияРасчета(
		ТаблицыНачислениеСбора.ТаблицаПроводок,
		ТаблицыНачислениеСбора.ТаблицаСправкиРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора,
		Движения,
		Отказ);
		
	
	УчетУСН.СформироватьДвиженияОтражениеРасходовПоТорговомуСбору(
		ТаблицаОтражениеВУСН,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора,
		ЭтотОбъект,
		Отказ);
		
КонецПроцедуры

Функция НомерКвартала(Период)
	
	Возврат ОбщегоНазначенияБПКлиентСервер.НомерКвартала(Период);
	
КонецФункции

// НАЧИСЛЕНИЕ НАЛОГА УСН

Процедура РассчитатьНалогУСН(СтруктураШапкиДокумента, Отказ)
	
	КонтекстРасчета = УчетУСН.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасчета = УчетУСН.ПодготовитьРасчетНалога(КонтекстРасчета);
	
	Если ДанныеРасчета.Свойство("Ошибки") Тогда
		Для Каждого Ошибка Из ДанныеРасчета.Ошибки Цикл
			ДобавитьПростоеОписаниеОшибки(Ошибка.ТекстСообщения, Ошибка.СсылкаДляПерехода, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаУСН(СтруктураШапкиДокумента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетУСН.СформироватьДвиженияНачислениеНалогаУСН(
		ДанныеРасчета.ТаблицаПроводок,
		ДанныеРасчета.ТаблицаСправкиРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыНалогУСН,
		Движения,
		Отказ);
		
КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГА АУСН

Процедура НачислитьНалогАУСН(СтруктураШапкиДокумента, Отказ)
	
	КонтекстРасчета = УчетАУСН.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасчета = УчетАУСН.ПодготовитьРасчетНалога(КонтекстРасчета);
	
	Если ДанныеРасчета.Свойство("Ошибки") Тогда
		Для Каждого Ошибка Из ДанныеРасчета.Ошибки Цикл
			ДобавитьПростоеОписаниеОшибки(Ошибка.ТекстСообщения, Ошибка.СсылкаДляПерехода, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаАУСН(СтруктураШапкиДокумента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетАУСН.СформироватьДвиженияНачислениеНалогаАУСН(
		ДанныеРасчета.ТаблицаПроводок,
		ПараметрыПроведения.ТаблицаРеквизитыНалогАУСН,
		Движения,
		Отказ);
		
КонецПроцедуры

// НАЧИСЛЕНИЕ ЕНВД

Процедура РассчитатьЕНВД(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	КонтекстРасчета = УчетЕНВД.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыРасчетаНалога = УчетЕНВД.ПодготовитьТаблицыРасчетаЕНВД(КонтекстРасчета, Отказ, Ошибки);
	
	ТаблицаКорректировкиНалога = УчетЕНВД.ПодготовитьПроводкиКорректировкиЕНВДПослеОтмены(КонтекстРасчета, Отказ, Ошибки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияЕНВД(СтруктураШапкиДокумента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетЕНВД.СформироватьДвиженияНачислениеЕНВД(
		ТаблицыРасчетаНалога.Проводки,
		ТаблицыРасчетаНалога.РасходыНаОнлайнКассы,
		ПараметрыПроведения.ТаблицаРеквизиты,
		Движения,
		Отказ);
	
	УчетЕНВД.СформироватьДвиженияКорректировкаЕНВД(
		ТаблицаКорректировкиНалога,
		ПараметрыПроведения.ТаблицаРеквизиты,
		Движения,
		Отказ);
	
КонецПроцедуры

// НАЧИСЛЕНИЕ НДФЛ

Процедура РассчитатьНДФЛ(СтруктураШапкиДокумента)
	
	КонтекстРасчета = УчетНДФЛПредпринимателя.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыРасчетаНалога = УчетНДФЛПредпринимателя.ПодготовитьТаблицыРасчетаНДФЛ(КонтекстРасчета);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНДФЛ(СтруктураШапкиДокумента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетНДФЛПредпринимателя.СформироватьДвиженияНачислениеНДФЛ(
		ТаблицыРасчетаНалога.ТаблицаПроводок,
		ТаблицыРасчетаНалога.ТаблицаСправкиРасчета,
		ПараметрыПроведения.ТаблицаРеквизиты,
		Движения);
	
КонецПроцедуры

// ПЕРЕХОД НА ФСБУ 6

Процедура ПереходНаФСБУ6(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПереходНаФСБУ6(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	УчетОС.ПодготовитьРасчетАмортизацииОСПоФСБУ6(ПараметрыПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетОС.СформироватьДвиженияПереходНаФСБУ6(ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры

// ПЕРЕВОД ОС В МАЛОЦЕННОЕ ОБОРУДОВАНИЕ

Процедура ПереводОСВМалоценноеОборудование(СтруктураШапкиДокумента, Отказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПереводОСВМалоценноеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПереводОСВМалоценноеОборудование КАК ПереводОСВМалоценноеОборудование
		|ГДЕ
		|	ПереводОСВМалоценноеОборудование.Организация = &Организация
		|	И ПереводОСВМалоценноеОборудование.Проведен
		|	И НЕ ПереводОСВМалоценноеОборудование.РучнаяКорректировка
		|	И ПереводОСВМалоценноеОборудование.Дата МЕЖДУ &НачалоПериода И &КонецПериода");
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(КонецГода(СтруктураШапкиДокумента.Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(СтруктураШапкиДокумента.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПроведения = Документы.ПереводОСВМалоценноеОборудование.ПодготовитьПараметрыПроведения(Выборка.Ссылка, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		// Корректировка периода проведения
		Для каждого Элемент Из ПараметрыПроведения Цикл
			
			Если ТипЗнч(Элемент.Значение) <> Тип("ТаблицаЗначений") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Значение.Колонки.Найти("Период") <> Неопределено Тогда
				Элемент.Значение.ЗаполнитьЗначения(Дата, "Период");
			КонецЕсли;
			
		КонецЦикла;
		
		// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		СообщенияОбОшибках = Новый Массив;
		
		УчетОС.ПроверитьСоответствиеОСОрганизации(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ПроверкиПоОС, Отказ, СообщенияОбОшибках);

		УчетОС.ПроверитьСоответствиеМестонахожденияОС(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ПроверкиПоОС, Отказ, СообщенияОбОшибках);

		УчетОС.ПроверитьЗаполнениеСчетаУчетаОС(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ПроверкиПоОС, Отказ, СообщенияОбОшибках);

		УчетОС.ПроверитьВозможностьИзмененияСостоянияОС(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.СостоянияОС, Отказ, СообщенияОбОшибках);

		УчетДоходовИРасходовПредпринимателя.ПроверитьВозможностьПереводаВМалоценноеОборудование(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ВыбытиеОС, Отказ, СообщенияОбОшибках);

		УчетУСН.ПроверитьВозможностьПереводаВМалоценноеОборудование(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ВыбытиеОС, Отказ, СообщенияОбОшибках);
		
		ТаблицаАмортизации = Новый ТаблицаЗначений;
		ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТаблицаАмортизации.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		УчетОС.ПроверитьВозможностьПереводаВМалоценноеОборудование(ПараметрыПроведения.ОсновныеСредства,
			ТаблицаАмортизации, ПараметрыПроведения.ВыбытиеОС, Отказ, СообщенияОбОшибках);
		
		Если Отказ Тогда
			Для каждого Ошибка Из СообщенияОбОшибках Цикл
				ДобавитьПростоеОписаниеОшибки(Ошибка, Выборка.Ссылка, Отказ);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбытия = УчетОС.ПодготовитьТаблицыСведенийПоВыбытиюОС(ПараметрыПроведения.ОсновныеСредства,
			ПараметрыПроведения.ВыбытиеОС, Отказ);
		
		ТаблицаСтоимости = УчетОС.ПодготовитьТаблицуОстаточнойСтоимости(
			ПараметрыПроведения.СписаниеОстаточнойСтоимостиТаблица,
			ПараметрыПроведения.СписаниеОстаточнойСтоимости, ПараметрыВыбытия, Отказ);
		
		ТаблицыПереводВМалоценноеОборудование = УчетОС.ПодготовитьТаблицыПереводВМалоценноеОборудование(
			ПараметрыПроведения.ТаблицаМалоценноеОборудование,
			ПараметрыПроведения.РеквизитыМалоценноеОборудование, Отказ);
			
		ТаблицаОСДляСостоянияОС = УчетОС.ПодготовитьТаблицуОСДляСнятияСУчетаПриСписании(ПараметрыПроведения.ВыбытиеОС,
			ПараметрыВыбытия, Отказ);
		
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
		// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
		
		// Проводки отражаются в межотчетном периоде
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("УстанавливаемоеУточнениеПериода",
			БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода());
		
		УчетОС.СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОСДляСостоянияОС,
			ПараметрыПроведения.СостоянияОС, Движения, Отказ);
		
		УчетОС.СформироватьДвиженияРегистровВыбытиеОС(ПараметрыПроведения.ВыбытиеОС, ПараметрыВыбытия, Движения, Отказ);
		
		УчетОС.СформироватьПроводкиВыбытиеОС(ПараметрыПроведения.ВыбытиеОС, ПараметрыВыбытия, Движения, Отказ);
		
		УчетОС.СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости,
			ПараметрыПроведения.СписаниеОстаточнойСтоимости, Движения, Отказ);
		
		УчетМатериаловВЭксплуатации.СформироватьДвиженияПередачаМатериаловСотруднику(
			ТаблицыПереводВМалоценноеОборудование.ТаблицаМатериалы,
			ТаблицыПереводВМалоценноеОборудование.ТаблицаОценкаМатериалов,
			ПараметрыПроведения.РеквизитыМалоценноеОборудование,
			Движения, Отказ);
			
		// Учет в прослеживаемости
		ПрослеживаемостьБП.СформироватьДвиженияСписанияОС(
			ПараметрыПроведения.ПрослеживаемыеОС,
			Неопределено,
			ПараметрыПроведения.РеквизитыМалоценноеОборудование,
			Движения);
			
		ПрослеживаемостьБП.СформироватьДвиженияПоступлениеТоваров(
			ПараметрыПроведения.ПрослеживаемыеТовары,
			Неопределено,
			Неопределено,
			ПараметрыПроведения.РеквизитыМалоценноеОборудование,
			Движения);
		
	КонецЦикла;
	
КонецПроцедуры


// ЗАЧЕТ АВАНСА ПО ЕДИНОМУ НАЛОГОВОМУ СЧЕТУ

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчету(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗачетАвансаПоЕдиномуНалоговомуСчету(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЕдиныйНалоговыйСчет.ПовторноВыполнитьПереходНаЕНСРежимИнтеграцииСБанком(
		ПараметрыПроведения, Движения, Отказ);
	
	ЕдиныйНалоговыйСчет.ЗачетАвансаПоЕдиномуНалоговомуСчету(
		ПараметрыПроведения, Движения, Отказ);
	
	ЕдиныйНалоговыйСчет.СписатьОстаткиПоРегистрамЕНС(
		ПараметрыПроведения.ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура НачислениеНалогаНаПрофессиональныйДоход(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	Периодичность = ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапкиДокумента.ВидОперации);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Период", СтруктураШапкиДокумента.Дата);
	Реквизиты.Вставить("Регистратор", СтруктураШапкиДокумента.Ссылка);
	Реквизиты.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	Реквизиты.Вставить("НачалоПериода",
		ОбщегоНазначенияБПКлиентСервер.НачалоПериода(СтруктураШапкиДокумента.Дата, Периодичность));
	Реквизиты.Вставить("КонецПериода",
		ОбщегоНазначенияБПКлиентСервер.КонецПериода(СтруктураШапкиДокумента.Дата, Периодичность));
		
	ТаблицаПроводок = НалогНаПрофессиональныйДоход.ПодготовитьТаблицуПроводокНачисленияНалога(Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	НалогНаПрофессиональныйДоход.СформироватьДвиженияНачисленияНалога(ТаблицаПроводок, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
