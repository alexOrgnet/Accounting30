#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: создает пропущенные регламентные операции с тем,
// чтобы ранее закрытые периоды продолжали считаться закрытыми.
// Это нужно для решения следующей проблемы:
// 1. Раньше настройки учетной политики об использовании счета 20 для учета затрат на оказание услуг
//    не обязательно приводили к обязательности регламентной операции - контролировались еще и фактические обороты по счетам.
// 2. При обновлении на версию 3.0.111 настройки учетной политики были сконвертированы: в учетной политике отражается полный перечень закрываемых счетов.
//    При этом фактические обороты не учитывались.
// 3. В результате после обновления на версию 3.0.111 месяцы, которые ранее считались закрытыми, теперь стали не закрытыми,
//    так как Закрытие месяца теперь требует выполнить регламентную операцию "Закрытие счетов 20, 23, 25 и 26".
//
// Выполнение обработчика обеспечивает комфорт пользователя, другими словами, невыполнение обработчика не препятствует работе.
// Поэтому ответственное чтение не выполняем, а исключения при невыполнении общего кода не считаем существенной проблемой.
//
// Поскольку фактически модифицируется заведомо небольшое количество записей, обработчик выполняется в одну порцию.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//
Процедура ПропуститьЗакрытиеСчетов20_23_25_26(ПараметрыОбработчика) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// Выполняется только в главном узле, так как создает новые ссылочные объекты
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Соединение с Организации позволяет исключить из обработки записи с битыми ссылками
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитика.Организация КАК Организация,
	|	МИНИМУМ(УчетнаяПолитика.Период) КАК МинимальныйПериод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО УчетнаяПолитика.Организация = Организации.Ссылка
	|ГДЕ
	|	УчетнаяПолитика.УдалитьОказаниеУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетнаяПолитика.Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РегламентнаяОперация,
			Выборка.Организация,
			НСтр("ru = 'Начало анализа по организации'"));
		
		ПериодыПропускаОпераций = ПериодыПропускаЗакрытиеСчетов20_23_25_26(Выборка.МинимальныйПериод, Выборка.Организация);
		СоздатьПропущенныеЗакрытиеСчетов20_23_25_26(ПериодыПропускаОпераций, Выборка.Организация);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПереходС2БП

// При переходе с 2БП на 3БП добавляет обработчики обновления, дополняющие закрытые месяцы пропущенными регламентными операциями, если эти
// регламентные операции не существовали в 2БП, но должны выполняться в 3БП.
//
// Параметры:
//  Обработчики  - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления()
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ДействияПослеПерехода = ДействияПослеПереходаС2БП();
	
	Для Каждого РеглОперация Из Перечисления.ВидыРегламентныхОпераций Цикл
		
		ОписаниеДействия = ДействияПослеПерехода.Найти(РеглОперация, "ВидОперации");
		Если ОписаниеДействия = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Вид операции ""%1"" не описан в ДействияПослеПереходаС2БП()'"), РеглОперация);
		КонецЕсли;
	
		Если ОписаниеДействия.СоздатьПропущенные Тогда
			
			Обработчик = Обработчики.Добавить();
			Обработчик.Версия = ОписаниеДействия.ВерсияКонфигурации;
			Обработчик.Процедура = "Документы.РегламентнаяОперация." + ОписаниеДействия.ИмяОбработчика;
			Обработчик.НачальноеЗаполнение = Истина; // надо выполнять при обновлении с 2БП на 3БП
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_ВключениеАвансовВПрочиеДоходыДляИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ НастройкиСистемыНалогообложения.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаВключениеАвансовВПрочиеДоходыДляИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаВключениеАвансовВПрочиеДоходыДляИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Включение авансов в прочие доходы для ИП""
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_НачислениеСтраховыхВзносовИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаНачислениеСтраховыхВзносовИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаНачислениеСтраховыхВзносовИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Дата(2014, 1, 1));
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) И Месяц(Выборка.Дата) <> 12 Тогда
			Продолжить;
		ИначеЕсли (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяОперация);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Начисление страховых взносов ИП""
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетНалогаУСН() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН
		Возврат;
	КонецЕсли;
	
	ВидОперацииРасчетНалогаУСН	= Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
	ГруппаРасчетНалогаУСН		= ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперацииРасчетНалогаУСН);
	
	// При УСН доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН КАК ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаУСН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И (РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			НоваяОперация.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет налога УСН""
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюНачислениеНалогаАУСН() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяАУСН";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на АУСН
		Возврат;
	КонецЕсли;
	
	// При АУСН доступны и выполняется только 1 операция 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДата(), 12)));
	Запрос.УстановитьПараметр("ДатаНачалаПримененияЕНС", НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяАУСН КАК ПрименяетсяАУСН
	|ПОМЕСТИТЬ ВТ_РегистрУчетаПериодов
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеПериоды.Организация КАК Организация,
	|	ТекущиеПериоды.Период КАК ПериодТекущий,
	|	МИНИМУМ(СледующиеПериоды.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегистрУчетаПериодов КАК ТекущиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрУчетаПериодов КАК СледующиеПериоды
	|		ПО ТекущиеПериоды.Организация = СледующиеПериоды.Организация
	|			И ТекущиеПериоды.Период < СледующиеПериоды.Период
	|ГДЕ
	|	ТекущиеПериоды.ПрименяетсяАУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеПериоды.Период,
	|	ТекущиеПериоды.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияАУСН
	|ИЗ
	|	ВТ_РегистрУчетаПериодов КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяАУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегистрУчетаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеНалогаАУСН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыАУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияАУСН КАК ВТ_ПериодыПримененияАУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияАУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияАУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияАУСН.ПериодКон
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И (РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата >= &ДатаНачалаПримененияЕНС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыАУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыАУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыАУСН КАК ВТ_ЗакрытыеПериодыАУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыАУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыАУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаАУСН;
			НоваяОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Начисление налога АУСН""
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,
				,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихНалогУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется, созданные рег. операции во всех узлах должны иметь одинаковые ссылки
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|			ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН с объектом "доходы"
		Возврат;
	КонецЕсли;
	
	// При УСН-доходы доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|		ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУменьшаемыйНалог
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУменьшаемыйНалог
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Организация,
	|	РегУПО1.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУменьшаемыйНалог
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И (РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет расходов, уменьшающих налог УСН""
                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено
//
Процедура ДобавитьРегламентнуюОперациюРасчетЕНВД() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
	
	ОперацииГруппы = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) >= НомерГруппы Тогда
			ОперацииГруппы.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы",      ОперацииГруппы);
	Запрос.УстановитьПараметр("ДатаНачала",          УчетЕНВД.ДатаНачалаПоддержкиЕНВД());
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПлательщикЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияЕНВД
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетЕНВД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериоды
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияЕНВД КАК ВТ_ПериодыПримененияЕНВД
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияЕНВД.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияЕНВД.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияЕНВД.ПериодКон
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И (РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериоды.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериоды.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериоды КАК ВТ_ЗакрытыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериоды.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериоды.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
		НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_РасчетНДФЛДляИП() Экспорт
	
	ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НастройкиСистемыНалогообложения.ПлательщикНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРегламентныхОпераций.Ссылка КАК Ссылка
	|ИЗ
	|	Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|ГДЕ
	|	ВидыРегламентныхОпераций.Ссылка <> &ВидОперации");
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВышестоящиеОперации = Новый Массив;
	НомерГруппыРегламентнойОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации);
	ВыборкаОперации = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаОперации.Следующий() Цикл
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВыборкаОперации.Ссылка) >= НомерГруппыРегламентнойОперации Тогда
			ВышестоящиеОперации.Добавить(ВыборкаОперации.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата");
	
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("ВидОперации",         ВидОперации);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = ВидОперации;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет НДФЛ для ИП""
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперацию_РасчетНалогаНаИмущество() Экспорт
	
	ДобавитьРегламентнуюОперацию_РасчетИмущественногоНалога(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество);
	
КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперацию_РасчетТранспортногоНалога() Экспорт
	
	ДобавитьРегламентнуюОперацию_РасчетИмущественногоНалога(Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога);

КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперацию_РасчетЗемельногоНалога() Экспорт
	
	ДобавитьРегламентнуюОперацию_РасчетИмущественногоНалога(Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога);

КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперацию_ПереходНаФСБУ6() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6() - 1);
	Запрос.УстановитьПараметр("НачалоОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6() - 1);
	
	// Кварталы, которые закрывались и по которым нет операций расчета налога.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &НачалоДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &НачалоОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаРеглОперации
	|ПОМЕСТИТЬ ДатыПервогоПримененияПоОрганизациям
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО Организации.Ссылка = НастройкиПервогоПримененияФСБУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыПервогоПримененияПоОрганизациям.ДатаРеглОперации КАК Дата,
	|	ДатыПервогоПримененияПоОрганизациям.Ссылка КАК Организация
	|ИЗ
	|	ДатыПервогоПримененияПоОрганизациям КАК ДатыПервогоПримененияПоОрганизациям
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация_ЗакрытыеМесяцы
	|		ПО ДатыПервогоПримененияПоОрганизациям.ГоловнаяОрганизация = РегламентнаяОперация_ЗакрытыеМесяцы.Организация
	|			И ДатыПервогоПримененияПоОрганизациям.ДатаРеглОперации = РегламентнаяОперация_ЗакрытыеМесяцы.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация_Существуют
	|		ПО РегламентнаяОперация_ЗакрытыеМесяцы.Дата = РегламентнаяОперация_Существуют.Дата
	|			И (ДатыПервогоПримененияПоОрганизациям.Ссылка = РегламентнаяОперация_Существуют.Организация)
	|			И (РегламентнаяОперация_Существуют.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереходНаФСБУ6))
	|ГДЕ
	|	РегламентнаяОперация_ЗакрытыеМесяцы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91)
	|	И (РегламентнаяОперация_ЗакрытыеМесяцы.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация_ЗакрытыеМесяцы.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация_ЗакрытыеМесяцы.ПометкаУдаления
	|	И РегламентнаяОперация_Существуют.Дата ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		НоваяОперация.Дата        = Выборка.Дата;
		НоваяОперация.Организация = Выборка.Организация;
		НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперациюНачислениеНалогаНаПрофессиональныйДоход() Экспорт
	
	ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаНаПрофессиональныйДоход;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРегламентныхОпераций.Ссылка КАК Ссылка
	|ИЗ
	|	Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|ГДЕ
	|	ВидыРегламентныхОпераций.Ссылка <> &ВидОперации");
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВышестоящиеОперации = Новый Массив;
	НомерГруппыРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.НомерГруппы(ВидОперации);
	ВыборкаОперации = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаОперации.Следующий() Цикл
		Если Перечисления.ВидыРегламентныхОпераций.НомерГруппы(ВыборкаОперации.Ссылка) >= НомерГруппыРегламентнойОперации Тогда
			ВышестоящиеОперации.Добавить(ВыборкаОперации.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата");
	
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("ВидОперации",         ВидОперации);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПрименяетсяНалогНаПрофессиональныйДоход = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоходЗаПериод(
			Выборка.Организация, НачалоМесяца(Выборка.Дата), КонецМесяца(Выборка.Дата));
		
		Если Не ПрименяетсяНалогНаПрофессиональныйДоход Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НоваяОперация = СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = ВидОперации;
			НоваяОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
			
		Исключение
			
			ШаблонСообщения =
				НСтр("ru = 'Не создана регламентная операция ""Начисление Налога на профессиональный доход""
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация, ,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперациюПереносУбытковПоНалогуНаПрибыль() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ОбособленноеПодразделение";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В закрытом периоде рег. операция РасчетНалогаНаПрибыль может быть либо выполнена, либо пропущена.
	СостоянияОперацийРасчетНалога = Новый Массив;
	СостоянияОперацийРасчетНалога.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	СостоянияОперацийРасчетНалога.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НалогНаПрибыльУбыткиПрошлыхЛет.ДатаПереходаНаОтдельныйСчетУчетаУбытков());
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("Состояния", СостоянияОперацийРасчетНалога);
	
	// Регламентная операция "ПереносУбытковПоНалогуНаПрибыль" может быть выполнена только в декабре, начиная с 2021 г.
	// Наличие регламентной операции "РасчетНалогаНаПрибыль" указывает на то, что организация является плательщиком налога
	// на прибыль. Дополнительно проверки УчетнаяПолитика.ПлательщикНалогаНаПрибыль() не требуется.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата > &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереносУбытковПоНалогуНаПрибыль)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата > &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|	И РегламентнаяОперация.Состояние В(&Состояния)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция уже создана.
			Продолжить;
		КонецЕсли;
		
		Попытка;
			
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереносУбытковПоНалогуНаПрибыль;
			НоваяОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяОперация, Истина, Истина);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана пропущенная операция ""Перенос убытков по налогу на прибыль""
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено.
//
Процедура ДобавитьРегламентнуюОперациюЗачетАвансаПоЕдиномуНалоговомуСчету() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ГруппаПоВидуОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету);
	
	ПоследующиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаПоВидуОперации Тогда
			ПоследующиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	// В закрытом периоде рег. операция ЗачетАвансаПоЕдиномуНалоговомуСчету может быть либо выполнена, либо пропущена.
	СостоянияОпераций = Новый Массив;
	СостоянияОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	СостоянияОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",          НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	Запрос.УстановитьПараметр("Состояния",           СостоянияОпераций);
	Запрос.УстановитьПараметр("ПоследующиеОперации", ПоследующиеОперации);
	
	// Регламентная операция "ЗачетАвансаПоЕдиномуНалоговомуСчету" может быть выполнена только с 01.01.2023 г.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата > &ДатаНачала
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата > &ДатаНачала
	|	И РегламентнаяОперация.ВидОперации В (&ПоследующиеОперации)
	|	И РегламентнаяОперация.Состояние В(&Состояния)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция уже создана.
			Продолжить;
		КонецЕсли;
		
		Попытка;
			
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету;
			НоваяОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяОперация);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана пропущенная операция ""Зачет аванса по единому налоговому счету""
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

#Область ПропуститьЗакрытиеСчетов20_23_25_26

Функция ПериодыПропускаЗакрытиеСчетов20_23_25_26(Знач МинимальныйПериод, Организация)
	
	Периоды = Новый Массив;
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	ЛимитОбработки = 48; // месяцев, максимальная практически применимая глубина архивных данных
	МинимальныйПериод = НачалоГода(Макс(МинимальныйПериод, ДобавитьМесяц(Период, - ЛимитОбработки)));
	
	Пока Период >= МинимальныйПериод Цикл
		
		Если ЕдинственнаяНевыполненнаяЗакрытиеСчетов20_23_25_26(Период, Организация) Тогда
			Периоды.Добавить(Период);
		КонецЕсли;
		
		Период = ДобавитьМесяц(Период, -1);
		
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

Функция ЕдинственнаяНевыполненнаяЗакрытиеСчетов20_23_25_26(Период, Организация)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ЗаписьЖурналаРегистрацииПропускЗакрытиеСчетов20_23_25_26(
			УровеньЖурналаРегистрации.Предупреждение, // потенциальная проблема, не фатальная ошибка
			НСтр("ru = 'Не удалось определить, нужно ли пропустить регламентную операцию.'"),
			Неопределено,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Статус.ВидОперации КАК ВидОперации
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется
	|	И Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка.Следующий();
	Если Выборка.ВидОперации <> Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Цель обработчика - исключить появление регламентной операции в закрытых периодах.
	// Поэтому, проверим, что нет других обстоятельств, которые указывают на то, что пользователь не закрыл месяц.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется
	|	И (Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	|			ИЛИ Статус.Устарела)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СоздатьПропущенныеЗакрытиеСчетов20_23_25_26(Периоды, Организация)
	
	Для Каждого Период Из Периоды Цикл
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			СоздаваемыйОбъект = Документы.РегламентнаяОперация.СоздатьДокумент();
			СоздаваемыйОбъект.Дата        = Период;
			СоздаваемыйОбъект.Организация = Организация;
			СоздаваемыйОбъект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
			СоздаваемыйОбъект.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			СоздаваемыйОбъект.Комментарий = НСтр("ru = 'Создан автоматически при обновлении на версию 3.0.113.6 - см. Журнал регистрации'");
			СоздаваемыйОбъект.УстановитьНовыйНомер();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоздаваемыйОбъект);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗаписьЖурналаРегистрацииПропускЗакрытиеСчетов20_23_25_26(
				УровеньЖурналаРегистрации.Примечание, // поясняет информацию о создании операции
				НСтр("ru = 'Создана пропущенная регламентная операция.'"),
				СоздаваемыйОбъект.Ссылка);
			
			ОбщегоНазначенияБП.ЗаписатьОперациюБизнесСтатистики("СоздатьПропущенныеЗакрытиеСчетов20_23_25_26.Успешно");
		
		Исключение
			
			ЗаписьЖурналаРегистрацииПропускЗакрытиеСчетов20_23_25_26(
				УровеньЖурналаРегистрации.Предупреждение, // потенциальная проблема, не фатальная ошибка
				НСтр("ru = 'Не удалось создать регламентную операцию.'"),
				Неопределено,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбщегоНазначенияБП.ЗаписатьОперациюБизнесСтатистики("СоздатьПропущенныеЗакрытиеСчетов20_23_25_26.Ошибка");
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииПропускЗакрытиеСчетов20_23_25_26(УровеньСообщения, ЗаголовокСообщения, Знач Ссылка = Неопределено, ТекстОшибки = "")
	
	ТекстыСообщения = Новый Массив;
	ТекстыСообщения.Добавить(ЗаголовокСообщения);
	ТекстыСообщения.Добавить(ТекстПоясненияПропускЗакрытиеСчетов20_23_25_26());
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстыСообщения.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Ссылка = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньСообщения,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		СтрСоединить(ТекстыСообщения, Символы.ПС));

КонецПроцедуры

Функция ТекстПоясненияПропускЗакрытиеСчетов20_23_25_26()
	
	Возврат НСтр("ru = 'Операция создается в связи с тем, что в актуальных версиях программы перечень потребных регламентных операций определяется настройками учетной политики.
              |Если ранее период мог быть закрыт без выполнения регламентной операции, а теперь нет, то создается пропущенная регламентная операция.
              |При необходимости ее можно выполнить.'");
	
КонецФункции

#КонецОбласти

#Область ПереходС2БП

// Для каждой регламентной операции закрытия месяца назначает действие, которое нужно выполнить, чтобы начать использовать ее
// при закрытии месяца в 3БП после перехода из 2БП.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описания действий по операциям:
//                 * ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций - операция, для которой определяем действие.
//                 * СоздатьПропущенные - Булево - проверить, требовалось ли выполнение операции в закрытых периодах
//                                                 и дополнить их пропущенными.
//                 * ИмяОбработчика - Строка - имя процедуры-обработчика обновления.
//                 * ВерсияКонфигурации - Строка - номер релиза, к которому относится действие.
//
Функция ДействияПослеПереходаС2БП()
	
	ОписанияДействий = Новый ТаблицаЗначений;
	ОписанияДействий.Колонки.Добавить("ВидОперации",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	ОписанияДействий.Колонки.Добавить("СоздатьПропущенные", Новый ОписаниеТипов("Булево"));
	ОписанияДействий.Колонки.Добавить("ИмяОбработчика",     Новый ОписаниеТипов("Строка"));
	ОписанияДействий.Колонки.Добавить("ВерсияКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	// Регламентные операции, которые ранее существовали в 2БП. По ним не требуется никаких действий после перехода на 3БП.
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты); // начисление зарплаты работникам
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеНДС); // формирование книги покупок и продаж
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97); // списание расходов будущих периодов
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеНалоговНаЕНС);
	
	// Регламентные операции, которые нужно создать как пропущенные, чтобы месяцы, закрытые в 2БП, оставались закрытыми и в 3БП.
	// ОписаниеДействия - имя процедуры-обработчика обновления, вызываемой из модуля менеджера документа РегламентнаяОперация.
	// ВерсияКонфигурации - релиз, в котором использован обработчик обновления.
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП,
		Истина, "ДобавитьРегламентнуюОперацию_ВключениеАвансовВПрочиеДоходыДляИП", "3.0.21.1");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП,
		Истина, "ДобавитьРегламентнуюОперацию_НачислениеСтраховыхВзносовИП", "3.0.29.1");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН,
		Истина, "ДобавитьРегламентнуюОперациюРасчетНалогаУСН", "3.0.31.4");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги,
		Истина, "ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихНалогУСН", "3.0.38.36");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД,
		Истина, "ДобавитьРегламентнуюОперациюРасчетЕНВД", "3.0.43.160");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП,
		Истина, "ДобавитьРегламентнуюОперацию_РасчетНДФЛДляИП", "3.0.75.39");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество,
		Истина, "ДобавитьРегламентнуюОперацию_РасчетНалогаНаИмущество", "3.0.121.2");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога,
		Истина, "ДобавитьРегламентнуюОперацию_РасчетТранспортногоНалога", "3.0.121.2");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога,
		Истина, "ДобавитьРегламентнуюОперацию_РасчетЗемельногоНалога", "3.0.121.2");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6,
		Истина, "ДобавитьРегламентнуюОперацию_ПереходНаФСБУ6", "3.0.121.2");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаАУСН,
		Истина, "ДобавитьРегламентнуюОперациюНачислениеНалогаАУСН", "3.0.131.6");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереносУбытковПоНалогуНаПрибыль,
		Истина, "ДобавитьРегламентнуюОперациюПереносУбытковПоНалогуНаПрибыль", "3.0.144.33");
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету,
		Истина, "ДобавитьРегламентнуюОперациюЗачетАвансаПоЕдиномуНалоговомуСчету", "3.0.145.9");
	
	// Регламентные операции, которые по-умолчанию не включены в 3БП.
	// В комментарии имя функциональной опции, которую нужно включить в 3БП, чтобы выполнять эти регламентные операции.
	// ВерсияКонфигурации - релиз, в котором появилась функциональная опция.
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеВзносовОтНесчастыхСлучаев); // ПрименяетсяАУСН с 3.0.114.2
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей); // ВедетсяУчетЛизинговогоИмущества,ВедетсяУчетПредметовАренды с 3.0.93
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасходМатериаловДляВыпускаПродукции); // УчетВыпускаПродукцииПоДаннымПродаж с 3.0.96
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеПроцентныхРасходов); // ВедетсяУчетЛизинговогоИмущества,ВедетсяУчетПредметовАренды с 3.0.93
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету); // ПлательщикЕНП с 3.0.115.4
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ОбесценениеЗапасов); // ОбесценениеЗапасов с 3.0.88
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетОтложенногоНалога); // ВариантУчетаОтложенногоНалога с 3.0.59
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25); // ВедетсяУчетЛизинговогоИмущества,ВедетсяУчетПредметовАренды с 3.0.53
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога); // ВариантУчетаОтложенногоНалога с 3.0.59
	// ПрименяетсяНалогНаПрофессиональныйДоход с 3.0.131
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеНалогаНаПрофессиональныйДоход);
	// ВедетсяУчетНМА с 3.0.35
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ14);
		
	// Регламентные операции, которые требуют ввода данных для использования.
	// В комментарии имя объекта, заполнение которого требуется.
	// ВерсияКонфигурации - релиз, в котором появился объект метаданных.
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.НачислениеРезервовПоОплатеТруда); // РегистрСведений.НастройкиРасчетаРезервовОтпусков с 3.0.3.8
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.РасчетТорговогоСбора); // Справочник.ТорговыеТочки с 3.0.41.59
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН); // Перечисление.ВидыРасходовУСН.ТаможенныеПлатежи с 3.0.35
	ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий,
		Перечисления.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование); // Документ.ПереводОСВМалоценноеОборудование с 3.0.91
		
	ОписанияДействий.Индексы.Добавить("ВидОперации");
		
	Возврат ОписанияДействий;
	
КонецФункции

Процедура ДобавитьОписаниеДействияДляРегламентнойОперации(ОписанияДействий, ВидОперации,
			СоздатьПропущенные = Ложь, ИмяОбработчика = "", ВерсияКонфигурации = "")
	
	ОписаниеДействия = ОписанияДействий.Добавить();
	ОписаниеДействия.ВидОперации        = ВидОперации;
	ОписаниеДействия.СоздатьПропущенные = СоздатьПропущенные;
	ОписаниеДействия.ИмяОбработчика     = ИмяОбработчика;
	ОписаниеДействия.ВерсияКонфигурации = ВерсияКонфигурации;
	
КонецПроцедуры

Процедура ДобавитьРегламентнуюОперацию_РасчетИмущественногоНалога(ВидОперации)
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") Тогда
		// Налог на имущество рассчитывать не нужно.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	
	// Кварталы, которые закрывались и по которым нет операций расчета налога.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация_ЗакрытыеМесяцы.Дата КАК Дата,
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация_ЗакрытыеМесяцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РегламентнаяОперация_ЗакрытыеМесяцы.Организация = Организации.ГоловнаяОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация_Существуют
	|		ПО РегламентнаяОперация_ЗакрытыеМесяцы.Дата = РегламентнаяОперация_Существуют.Дата
	|			И (Организации.Ссылка = РегламентнаяОперация_Существуют.Организация)
	|			И (РегламентнаяОперация_Существуют.ВидОперации = &ВидОперации)
	|ГДЕ
	|	РегламентнаяОперация_ЗакрытыеМесяцы.Дата >= ДАТАВРЕМЯ(2014, 1, 1)
	|	И МЕСЯЦ(РегламентнаяОперация_ЗакрытыеМесяцы.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация_ЗакрытыеМесяцы.Организация.ЮридическоеФизическоеЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И РегламентнаяОперация_ЗакрытыеМесяцы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91)
	|	И (РегламентнаяОперация_ЗакрытыеМесяцы.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ИЛИ РегламентнаяОперация_ЗакрытыеМесяцы.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено))
	|	И НЕ РегламентнаяОперация_ЗакрытыеМесяцы.ПометкаУдаления
	|	И РегламентнаяОперация_Существуют.Дата ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КешУсловийОпераций = Новый Структура("ВедетсяУчетОсновныхСредств", Истина);
		
		Запрос.УстановитьПараметр("НачалоКалендарногоГода", НачалоГода(Выборка.Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Выборка.Дата));
		Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Организация));
		
		Условие = ЗакрытиеМесяца.УсловиеВыполненияРегламентнойОперации(
			ВидОперации, Выборка.Организация, НачалоМесяца(Выборка.Дата), Истина, КешУсловийОпераций);
		
		Если Условие = Ложь Тогда // в этом квартале расчет налога не нужен
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Условие.ТекстЗапроса;
			
		// Необходимо предварительно установить параметры запроса, определяющего нужна ли операция в данном месяце.
		РазвернутьСчета = Ложь;
		Для Каждого ПараметрЗапроса Из Условие.ПараметрыЗапросов Цикл
			Если СтрНачинаетсяС(ПараметрЗапроса.Ключ, "Счета") Тогда
				Если Не Запрос.Параметры.Свойство(ПараметрЗапроса.Ключ) Тогда
					РазвернутьСчета = Истина;
					Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
				КонецЕсли;
			Иначе
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЕсли;
		КонецЦикла;
		Если РазвернутьСчета Тогда
			БухгалтерскийУчет.РазвернутьПараметрыДоСубсчетов(Запрос);
		КонецЕсли;
		
		Если Запрос.Выполнить().Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		НоваяОперация.Дата        = КонецМесяца(Выборка.Дата);
		НоваяОперация.Организация = Выборка.Организация;
		НоваяОперация.ВидОперации = ВидОперации;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьОперациюЗачетАвансаПоЕдиномуНалоговомуСчету() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЕстьОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В
	|			(ВЫБРАТЬ
	|				ВТ_ГоловныеОрганизации.Ссылка
	|			ИЗ
	|				ВТ_ГоловныеОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	ВТ_Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТ_ОперацииОрганизаций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	|		ПО РегламентнаяОперация.Организация = ВТ_Организации.Ссылка
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету)
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОперацииОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ОперацииОрганизаций КАК ВТ_ОперацииОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету)
	|	И РегламентнаяОперация.Организация В
	|			(ВЫБРАТЬ
	|				ВТ_ОперацииОрганизаций.ГоловнаяОрганизация
	|			ИЗ
	|				ВТ_ОперацииОрганизаций)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РучнаяКорректировка = Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать регламентную операцию ""Зачет аванса по единому налоговому счету""
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ВЫПОЛНЕНИЯ ОПЕРАЦИЙ ДОКУМЕНТА

Функция ТекстЗапросаРеквизиты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	&Периодичность КАК Периодичность
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаРеквизиты()

// АМОРТИЗАЦИЯ И ИЗНОС ОС

Функция ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Начисление амортизации";
	СодержаниеИзнос       = "Начисление износа";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	Запрос.УстановитьПараметр("СодержаниеИзнос",       СодержаниеИзнос);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
				 + ТекстЗапросаРеквизитыИзносОС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыНачислениеАмортизацииИзносаОС() 

Функция ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияОС()

Функция ТекстЗапросаРеквизитыИзносОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеИзносаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеИзнос КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыИзносОС()

// АМОРТИЗАЦИЯ НМА И НИОКР

Функция ПодготовитьПараметрыНачислениеАмортизацииНМА_НИОКР(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Амортизация НМА";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияНМА()

// ПОГАШЕНИЕ СТОИМОСТИ СПЕЦОДЕЖДЫ И СПЕЦОСНАСТКИ

Функция ПодготовитьПараметрыСпецодеждаИСпецоснастка(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос     = Новый Запрос;
	Содержание = "Погашение стоимости спецодежды (спецоснастки)";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСпецодеждаИСпецоснастка()

Функция ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("РеквизитыСпецодеждаИСпецоснастка", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка()

// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ПодготовитьПараметрыПроведенияВалюнаяПереоценка(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Переоценка валютных остатков";
	Запрос.УстановитьПараметр("Ссылка",                  СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("ВалютаДокументаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Содержание",              Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВалюнаяПереоценка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроведенияВалюнаяПереоценка() 

Функция ТекстЗапросаВалюнаяПереоценка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВалютаДокументаРегУчета КАК ВалютаДокумента,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаВалюнаяПереоценка()


// РАСЧЕТ СПИСАНИЯ РБП

Функция ПодготовитьПараметрыРасчетСписанияРБП(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	
	СодержаниеШаблон = "Списание РБП за %1";
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СодержаниеШаблон, ПредставлениеПериода(СтруктураШапки.НачДата, СтруктураШапки.КонДата));
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетСписанияРБП(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ТекстЗапросаРасчетСписанияРБП(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРБП",      НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетСписанияРБП()

// РАСЧЕТ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Если СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		НачалоПериода = НачалоГода(СтруктураШапки.НачДата);
	Иначе
		НачалоПериода = ?(КонецГода(СтруктураШапки.КонДата) = КонецКвартала(СтруктураШапки.КонДата),
						НачалоГода(СтруктураШапки.НачДата),
						НачалоКвартала(СтруктураШапки.НачДата));
	КонецЕсли;
	
	Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начислен %1 за %2'"),
		Строка(СтруктураШапки.ВидНалога),
		ПредставлениеПериода(НачалоПериода, СтруктураШапки.КонДата, "ФП = Истина"));
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	Запрос.УстановитьПараметр("ВидНалога", СтруктураШапки.ВидНалога);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетИмущественныхНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВидНалога КАК ВидНалога,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ ТОРГОВОГО СБОРА

Функция ПодготовитьПараметрыРасчетТорговогоСбора(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НачалоПериода = НачалоКвартала(СтруктураШапки.НачДата);
	КонецПериода  = КонецКвартала(СтруктураШапки.КонДата);
	
	Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начислен торговый сбор за %1'"),
		ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП = Истина"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетТорговогСбора(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетТорговогСбора(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетТорговогоСбора", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ ТОРГОВОЙ НАЦЕНКИ ПО ПРОДАННЫМ ТОВАРАМ

Функция ПодготовитьПараметрыРасчетТорговойНаценки(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СпособОценкиТоваровВРознице =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапки.Организация, СтруктураШапки.КонДата);
	
	Содержание = "Торговая наценка";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетТорговойНаценки()

Функция ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетНаценки", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетТорговойНаценки()

// СПИСАНИЕ УБЫТКОВ ПРОШЛЫХ ЛЕТ

Функция ПодготовитьПараметрыСписаниеУбытков(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Уменьшение налоговой базы на сумму убытка прошлых лет";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСписаниеУбытковПрошлыхЛет() 

Функция ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаРеквизитыСписаниеУбытков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаСписаниеУбытковПрошлыхЛет()

// НАЧИСЛЕНИЕ ВЗНОСОВ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ

Функция ПодготовитьПараметрыНачислениеВзносовОтНесчастыхСлучаев(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаВзносыОтНесчастныхСлучаев();
	Результат    = Запрос.Выполнить();
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаВзносыОтНесчастныхСлучаев", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыНачислениеВзносовОтНесчастыхСлучаев()

Функция ТекстЗапросаВзносыОтНесчастныхСлучаев()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// РАСЧЕТ ДОЛЕЙ СПИСАНИЯ КОСВЕННЫХ РАСХОДОВ

Функция ПодготовитьПараметрыРасчетДолей(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаРеквизитыРасчетДолей();
	Результат    = Запрос.Выполнить();
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетДолей", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетДолей()

Функция ТекстЗапросаРеквизитыРасчетДолей()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Закрытие счетов 20, 23, 25, 26, 28 и 29

Процедура ЗакрытиеСчетов20_23_25_26(Движения, Период, Организация, Ссылка, Отказ, Ошибки) Экспорт
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	РезультатРасчета = РасчетСебестоимости.РассчитатьСебестоимость(
		Период,
		Организация,
		Ссылка,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26);
	
	Если РезультатРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатРасчета.Свойство("Ошибки") Тогда
		
		Отказ = Истина;
		
		КонтрольЗатрат.ОписатьОшибкиВыявленныеПриРасчетеСебестоимости(
			Ошибки,
			РезультатРасчета.Ошибки,
			РезультатРасчета.Протокол,
			Период,
			Организация);
		
		Возврат;
		
	КонецЕсли;
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		Движения,
		РезультатРасчета.Хозрасчетный,
		Период,
		Организация);
		
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		Период,
		Организация);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетПорядкаПеределов,
		РеквизитыЗаписи,
		"РасчетПорядкаПеределов");
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетСебестоимостиПродукции,
		РеквизитыЗаписи,
		"РасчетСебестоимостиПродукции");
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетКалькуляцииСебестоимости,
		РеквизитыЗаписи,
		"РасчетКалькуляцииСебестоимости",
		Истина);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетРаспределенияКосвенныхРасходов,
		РеквизитыЗаписи,
		"РасчетРаспределенияКосвенныхРасходов",
		Истина);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетСписанияКосвенныхРасходов,
		РеквизитыЗаписи,
		"РасчетСписанияКосвенныхРасходов",
		Истина);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетБазыРаспределенияЗатратЭквивалентныеЕдиницы,
		РеквизитыЗаписи,
		"РасчетБазыРаспределенияЗатратЭквивалентныеЕдиницы",
		Истина);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетНачальногоСальдоПрямыхЗатрат,
		РеквизитыЗаписи,
		"РасчетНачальногоСальдоПрямыхЗатрат",
		Истина);
		
	ЭлементыЗатрат.СформироватьДвиженияСтруктураСтоимостиЗапасов(
		РезультатРасчета,
		Движения,
		Период,
		Организация);
		
КонецПроцедуры

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Определение финансовых результатов";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентЕНВД", НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

Функция ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыЗакрытие90_91", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&КоэффициентЕНВД КАК КоэффициентЕНВД,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаЗакрытиеСчетов90_91()

Функция ТекстЗапросаОкруглениеНДС(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыОкруглениеНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаОкруглениеНДС()

Функция ПодготовитьПараметрыОкругленияНДС(СтруктураШапки) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Отклонение при округлении до рублей";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаОкруглениеНДС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыОкругленияНДС()

// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН

Функция ПодготовитьПараметрыРасчетаРасходовУменьшающихНалоги(СтруктураШапки, Отказ) Экспорт
	
	Перем ДатаИзменения;
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	ПериодичностьОперации = ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации);
	НачалоПериодаОперации = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(СтруктураШапки.КонДата, ПериодичностьОперации);
	КонецПериодаОперации = ОбщегоНазначенияБПКлиентСервер.КонецПериода(СтруктураШапки.КонДата, ПериодичностьОперации);
	
	ПрименяетсяУСНДоходы =
		УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходы И ДатаИзменения > НачалоПериодаОперации Тогда
		ПрименяетсяУСНДоходыВПрошлом = УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыВПрошлом = ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы =
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения > НачалоПериодаОперации Тогда
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом =
			УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = ПрименяетсяУСНДоходыМинусРасходы;
	КонецЕсли;
	
	УменьшениеЕНВДПослеОтмены = УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(СтруктураШапки.Организация, КонецПериодаОперации);
	
	// После отмены ЕНВД может уменьшаться на расходы, относящиеся к последнему кварталу применения ЕНВД.
	// Поэтому проверять применение ЕНВД после отмены нужно за последний квартал действия налогового режима.
	
	ДатаПроверкиЕНВД = ?(УменьшениеЕНВДПослеОтмены, УчетЕНВДКлиентСервер.ПоследнийДеньДействияЕНВД(), КонецПериодаОперации);
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапки.Организация, ДатаПроверкиЕНВД, ДатаИзменения);
	Если Не ПлательщикЕНВД И ДатаИзменения > НачалоПериодаОперации Тогда
		ПлательщикЕНВДвПрошлом = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПлательщикЕНВДвПрошлом = ПлательщикЕНВД;
	КонецЕсли;
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(СтруктураШапки.Организация, КонецПериодаОперации);
	
	Если НачалоПериодаОперации >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы() Тогда
		ПрименяетсяПСН = УчетнаяПолитика.ПрименяетсяУСНПатент(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
		Если Не ПрименяетсяПСН И ДатаИзменения > НачалоПериодаОперации Тогда
			ПрименяетсяПСНВПрошлом =
				УчетнаяПолитика.ПрименяетсяУСНПатент(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
		Иначе
			ПрименяетсяПСНВПрошлом = ПрименяетсяПСН;
		КонецЕсли;
	Иначе
		ПрименяетсяПСН = Ложь;
		ПрименяетсяПСНВПрошлом = Ложь;
	КонецЕсли;
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапки.Организация, СтруктураШапки.КонДата);
	НачалоПериодаПроверки = ?(ПрименяетсяУСНДоходы, СтруктураШапки.НачГода, НачалоКвартала(СтруктураШапки.НачДата));
	
	// Для ИП передаем пустую дату, поскольку ИП на ОСНО признают расходы кассовым методом.
	// Для ЕНВД передаем пустую дату, поскольку дату перехода смотрим по дате учетной политики.
	// Для УСН без совмещения с ЕНВД передаем дату перехода на УСН - для исключения платежей по расходам, начисленным и учтенным в НУ ОСНО по методу начисления.
	Если ПрименяетсяУСНДоходы И Не ПлательщикЕНВД  Тогда
		Запрос.УстановитьПараметр("ДатаНачалаАнализаПериодаНачислений", ДатаПереходаНаУСН);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаАнализаПериодаНачислений", '00010101');
	КонецЕсли;
	
	// Если в течение периода, за который выполняется регламентная операция, изменился режим налогообложения,
	// то нужно ограничить период, за который будут определяться понесенные расходы.
	НачалоПериодаАнализаРасходов = НачалоПериодаОперации;
	КонецПериодаАнализаРасходов = КонецПериодаОперации;
	Если Не (ПрименяетсяУСНДоходыВПрошлом Или ПлательщикЕНВДвПрошлом Или ПрименяетсяПСНВПрошлом)
		И Не УменьшениеЕНВДПослеОтмены Тогда
		// До даты перехода не применялся УСН или ЕНВД или ПСН.
		// Учитываем только те расходы, которые возникли после перехода на УСН или ЕНВД или ПСН.
		НачалоПериодаАнализаРасходов = НачалоДня(ДатаИзменения);
	КонецЕсли;
	Если Не (ПрименяетсяУСНДоходы Или ПлательщикЕНВД Или ПрименяетсяПСН) И Не УменьшениеЕНВДПослеОтмены Тогда
		// После даты перехода не применяется УСН или ЕНВД или ПСН.
		// Учитываем только расходы, понесенные до даты перехода на УСН или ЕНВД или ПСН.
		КонецПериодаАнализаРасходов = НачалоДня(ДатаИзменения) - 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериодаАнализаРасходов", НачалоПериодаАнализаРасходов);
	Запрос.УстановитьПараметр("КонецПериодаАнализаРасходов", КонецПериодаАнализаРасходов);
	
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы", ПрименяетсяУСНДоходы Или ПрименяетсяУСНДоходыВПрошлом);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы",
		(ПрименяетсяУСНДоходыМинусРасходы Или ПрименяетсяУСНДоходыМинусРасходыВПрошлом) И Не ПрименяетсяУСНДоходы);
	Запрос.УстановитьПараметр("ПлательщикЕНП", ПлательщикЕНП);
	Запрос.УстановитьПараметр("ПлательщикЕНВД", ПлательщикЕНВД Или ПлательщикЕНВДвПрошлом);
	Запрос.УстановитьПараметр("УменьшениеЕНВДПослеОтмены", УменьшениеЕНВДПослеОтмены);
	Запрос.УстановитьПараметр("ПрименяетсяПСН", ПрименяетсяПСН Или ПрименяетсяПСНВПрошлом);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", ДатаПереходаНаУСН);
	
	Запрос.УстановитьПараметр("УчетПоПодразделениям", БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям());
	
	Запрос.УстановитьПараметр("ИПИспользуетТрудНаемныхРаботников",
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(СтруктураШапки.Организация, НачалоПериодаПроверки, СтруктураШапки.КонДата));
		
	Запрос.УстановитьПараметр("РегистрацияОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапки.Организация, "РегистрацияВНалоговомОргане"));
	
	Если ПлательщикЕНВД Тогда
		ВсеРегистрации = Справочники.ВидыДеятельностиЕНВД.СписокВыбораНалоговыхИнспекций(СтруктураШапки.Организация, ДатаПроверкиЕНВД);
		РегистрацияЕНВДОрганизации = ?(ВсеРегистрации.Количество()>0, ВсеРегистрации[0].Значение, Неопределено);
		Запрос.УстановитьПараметр("РегистрацияЕНВДОрганизации", РегистрацияЕНВДОрганизации);
	Иначе
		Запрос.УстановитьПараметр("РегистрацияЕНВДОрганизации", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	КонецЕсли;
		
	// Настройки учета зарплаты
	ВедетсяУчетБольничных = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		И ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
		
	Запрос.УстановитьПараметр("ВедетсяУчетБольничных", ВедетсяУчетБольничных);
	Запрос.УстановитьПараметр("ВедетсяУчетПоРаботникам",
		ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасходыУменьшающиеОтдельныеНалоги(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРасходыУменьшающиеОтдельныеНалоги(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИндивидуальныйПредприниматель,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы,
	|	&ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	&ПлательщикЕНП КАК ПлательщикЕНП,
	|	&УменьшениеЕНВДПослеОтмены КАК УменьшениеЕНВДПослеОтмены,
	|	&ПрименяетсяПСН КАК ПрименяетсяПСН,
	|	&ИПИспользуетТрудНаемныхРаботников КАК ИПИспользуетТрудНаемныхРаботников,
	|	&ВедетсяУчетБольничных КАК ВедетсяУчетБольничных,
	|	&ВедетсяУчетПоРаботникам КАК ВедетсяУчетПоРаботникам,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачалоГода,
	|	&ДатаНачалаАнализаПериодаНачислений,
	|	&ДатаПереходаНаУСН,
	|	&УчетПоПодразделениям,
	|	&РегистрацияОрганизации,
	|	&РегистрацияЕНВДОрганизации,
	|	&НачалоПериодаАнализаРасходов,
	|	&КонецПериодаАнализаРасходов
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено
//
Процедура ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихЕНВД() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПоддержкиЕНВД", УчетЕНВД.ДатаНачалаПоддержкиЕНВД());
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПлательщикЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияЕНВД
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериоды
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияЕНВД КАК ВТ_ПериодыПримененияЕНВД
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияЕНВД.Организация
	|			И (РегламентнаяОперация.Дата МЕЖДУ ВТ_ПериодыПримененияЕНВД.ПериодНач И ВТ_ПериодыПримененияЕНВД.ПериодКон)
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачалаПоддержкиЕНВД
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериоды.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериоды.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериоды КАК ВТ_ЗакрытыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериоды.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериоды.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
		НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГА АУСН

Функция ПодготовитьПараметрыНачисленияНалогаАУСН(СтруктураШапки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНалогаАУСН(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПроведения = Новый Структура;
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНалогаАУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыНалогАУСН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// НАЧИСЛЕНИЕ НАЛОГА УСН

Функция ПодготовитьПараметрыНачисленияНалогаУСН(СтруктураШапки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПроведения = Новый Структура;
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыНалогУСН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// НАЧИСЛЕНИЕ ЕНВД

Функция ПодготовитьПараметрыНачисленияЕНВД(СтруктураШапки) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеЕНВД(НомераТаблиц);
	Результат = Запрос.Выполнить();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеЕНВД(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ВКЛЮЧЕНИЕ АВАНСОВ В ПРОЧИЕ ДОХОДЫ ИП

Функция ПодготовитьПараметрыВключениеАвансовВПрочиеДоходыИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ ИП

Функция ПодготовитьПараметрыРаспределениеРасходовЕНВДИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// НАЧИСЛЕНИЕ СТРАХОВЫХ ВЗНОСОВ ИП ЗА СЕБЯ

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносовИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст = ТекстЗапросаРеквизиты();
	Результат = Запрос.Выполнить();
	
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОНОВОГО ВЫПОЛНЕНИЯ

// Находит регламентную операцию по виду операции.
// Возвращает ссылку на регламентную операцию.
Функция НайтиДокумент(Период, Организация, ВидОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РегламентнаяОперация.Ссылка,
	|	РегламентнаяОперация.Состояние";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.РегламентнаяОперация.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// Находит "активные" регламентные операции, которые совпадают по составу ключевых реквизитов с переданной.
// Возвращает результат запроса, содержащий ссылки на "дубли".
Функция НайтиДубли(Период, Организация, ВидОперации, Ссылка) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		// Списание доп. расходов в учете УСН допустимо проводить не более одного раза за квартал
		НачалоПериода 	= НачалоКвартала(Период);
		КонецПериода	= КонецКвартала(Период);
	Иначе
		НачалоПериода 	= НачалоМесяца(Период);
		КонецПериода	= КонецМесяца(Период);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Ссылка <> &Ссылка
	|	И РегламентнаяОперация.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Упорядочивает перечень регламентных операций в соотвествии с логикой обработки "Закрытие месяца".
//
// Параметры:
//  Операции - Массив - список документов ДокументСсылка.РегламентнаяОперация
//
// Возвращаемое значение:
//  Массив - упорядоченный список документов ДокументСсылка.РегламентнаяОперация
//
Функция УпорядочитьСписокРегОпераций(Операции)
	
	ОперацииУпорядоченный = Новый Массив;
	
	Если ТипЗнч(Операции) <> Тип("Массив") Тогда
		Возврат ОперацииУпорядоченный;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Месяц,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	РегламентнаяОперация.ВидОперации.Порядок КАК ПорядокВидаОперации,
	|	РегламентнаяОперация.Ссылка.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка В(&Операции)";
	
	Сортировщик = Новый ТаблицаЗначений;
	Сортировщик.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.РегламентнаяОперация"));
	Сортировщик.Колонки.Добавить("Месяц",               Новый ОписаниеТипов("Дата"));
	Сортировщик.Колонки.Добавить("Группа",              Новый ОписаниеТипов("Число"));
	Сортировщик.Колонки.Добавить("ПорядокВидаОперации", Новый ОписаниеТипов("Число"));
	Сортировщик.Колонки.Добавить("МоментВремени",       Новый ОписаниеТипов("МоментВремени"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Сортировщик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Группа = ЗакрытиеМесяца.ГруппаПоВидуОперации(Выборка.ВидОперации);
	КонецЦикла;
	
	Сортировщик.Сортировать("Месяц, Группа, ПорядокВидаОперации, МоментВремени", Новый СравнениеЗначений);
	
	Возврат Сортировщик.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает структуру с параметров для процедуры ОтменитьОперацию().
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* УдалитьДвижения - Булево - Истина, если старые движения операции требуется удалить.
//		* СдвигатьМоментНарушенияПоследовательности - Булево - Истина, 
//			если необходимо сдвигать момент нарушения последовательности из-за изменения регламентной операции.
//		* ОбновитьГраницуАктуальности - Булево - Истина, если необходимо сдвигать границу актуальности закрытия месяца.
//		* СброситьСостояниеОперации - Булево - Истина, если необходимо изменить состояние операции на НеВыполнено.
//
Функция НовыеПараметрыОтменыОперации() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("УдалитьДвижения",                           Истина);
	Результат.Вставить("СдвигатьМоментНарушенияПоследовательности", Истина);
	Результат.Вставить("ОбновитьГраницуАктуальности",               Истина);
	Результат.Вставить("СброситьСостояниеОперации",                 Истина);
	
	Возврат Результат;

КонецФункции

Процедура ЗапуститьВыполнениеИзФормы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ВыполнениеБезКонтроля = Ложь;
	РасширенныйФункционал.РазрешитьВыполнениеОперацийБезКонтроляПредыдущих(ВыполнениеБезКонтроля);
	
	ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно, РегламентнаяОперация", Истина, СтруктураПараметров.РегламентнаяОперация);
	
	РегламентнаяОперацияОбъект = СтруктураПараметров.РегламентнаяОперация.ПолучитьОбъект();
	Если ВыполнениеБезКонтроля Тогда
		РегламентнаяОперацияОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуПоследовательности", Истина);
		РегламентнаяОперацияОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуСтатусаПредыдущих", Истина);
	КонецЕсли;
	ДанныеДляЗаполнения.ВыполненоУспешно = РегламентнаяОперацияОбъект.ВыполнитьОперацию(Истина);
	ДанныеДляЗаполнения.Вставить("Состояние", РегламентнаяОперацияОбъект.Состояние);
	ДанныеДляЗаполнения.Вставить("ВидОперации", РегламентнаяОперацияОбъект.ВидОперации);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьУпорядоченныйСписокРегОпераций(СтруктураПараметров, АдресХранилища, МассивРегОпераций = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("МассивРегОпераций") Тогда
		МассивРегОпераций = СтруктураПараметров.МассивРегОпераций;
	КонецЕсли;
	
	Если МассивРегОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщений            = Новый Массив();
	МассивОшибочныхРегОпераций = Новый Массив();
	ДанныеДляЗаполнения        = Новый Структура();
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	Если КоличествоРегОпераций = 0 Тогда
		Возврат;
	Иначе
		// Если рег.операций больше одной, то упорядочим их для правильного выполнению
		Если КоличествоРегОпераций > 1 Тогда
			МассивРегОпераций = УпорядочитьСписокРегОпераций(МассивРегОпераций);
		КонецЕсли;
		
		УспешноВыполнена = ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("МассивРегОпераций",          МассивРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивОшибочныхРегОпераций", МассивОшибочныхРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивСообщений",            МассивСообщений);
	ДанныеДляЗаполнения.Вставить("УспешноВыполнена",           УспешноВыполнена);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,         АдресХранилища);

КонецПроцедуры

Функция ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций)
	
	ВыполнениеБезКонтроля = Ложь;
	РасширенныйФункционал.РазрешитьВыполнениеОперацийБезКонтроляПредыдущих(ВыполнениеБезКонтроля);
	
	ВыполненныеПроверки = Обработки.ЗакрытиеМесяца.ПроверкиВозможностиВыполненияОперации();
	Если ВыполнениеБезКонтроля Тогда
		ВыполненныеПроверки.Последовательность = Истина;
		ВыполненныеПроверки.СтатусПредыдущих = Истина;
	КонецЕсли;
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	УспешноВыполненСписокОпераций = Истина;
	Для инд = 0 По КоличествоРегОпераций - 1 Цикл
		РегОперация    = МассивРегОпераций[инд];
		ДокументОбъект = РегОперация.ПолучитьОбъект();
		ВидРегОперации = ДокументОбъект.ВидОперации;
		ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		
		Если ВыполненныеПроверки.Последовательность Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуПоследовательности", Истина);
		КонецЕсли;
		Если ВыполненныеПроверки.СтатусПредыдущих Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуСтатусаПредыдущих", Истина);
		КонецЕсли;
		Если Не ВыполненныеПроверки.СтатусСледующих Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("СброситьСостояниеСледующих", Истина);
		КонецЕсли;
		
		УспешноВыполнена = ДокументОбъект.ВыполнитьОперацию();
		Если УспешноВыполнена Тогда
			ВыполненныеПроверки.СтатусСледующих = Истина;
		КонецЕсли;
		
		Если ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			МассивОшибочныхРегОпераций.Добавить();
			МассивОшибочныхРегОпераций[МассивОшибочныхРегОпераций.Количество() - 1] = 
				Новый Структура("Организация, Дата, РегламентнаяОперация, ВидОперации",
				ДокументОбъект.Организация, ДокументОбъект.Дата, РегОперация, ВидРегОперации);
		КонецЕсли;
		
		УспешноВыполненСписокОпераций = УспешноВыполненСписокОпераций И УспешноВыполнена;
	КонецЦикла;
	
	Возврат УспешноВыполненСписокОпераций;
	
Конецфункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖЕБНЫМИ СООБЩЕНИЯМИ

Процедура ЗаполнитьОписаниеОшибок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.НомерСтроки КАК НомерСтроки,
	|	Ошибки.Описание,
	|	Ошибки.СсылкаНаОшибочныйОбъект
	|ИЗ
	|	Документ.РегламентнаяОперация.УдалитьОшибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Объект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Ошибки = ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках();
		
		Выборка = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки,
				Выборка.Описание, 
				Выборка.СсылкаНаОшибочныйОбъект);
			
		КонецЦикла;
		
		Объект.ОписаниеОшибок = ЗакрытиеМесяцаСообщенияОбОшибках.ОписаниеОшибок(
			Ошибки,
			Объект.Дата,
			Объект.Организация,
			Объект.ВидОперации);
			
		Объект.УдалитьОшибки.Очистить();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// ПРИЗНАНИЕ В НУ РАСХОДОВ ПО АРЕНДНЫМ ПЛАТЕЖАМ

Функция ПодготовитьПараметрыПризнаниеВНУАрендныхПлатежей(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Содержание = НСтр("ru='Арендные платежи'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАрендныеПлатежи(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыАрендныеПлатежи(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("АрендныеПлатежи", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАрендныеПлатежи()

// НАЧИСЛЕНИЕ В БУ ПРОЦЕНТНЫХ РАСХОДОВ ПО АРЕНДЕ

Функция ПодготовитьПараметрыНачислениеПроцентныхРасходов(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Содержание = НСтр("ru='Начислены процентные расходы'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеПроцентныхРасходов(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаНачислениеПроцентныхРасходов(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеПроцентныхРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Регламентная операция'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции // ИмяСобытияЖурналаРегистрации()

// НАЧИСЛЕНИЕ НДФЛ

Функция ПодготовитьПараметрыНачисленияНДФЛ(СтруктураШапки) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНДФЛ(НомераТаблиц);
	Результат = Запрос.Выполнить();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНДФЛ(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ПЕРЕХОД НА ФСБУ 6

Функция ПодготовитьПараметрыПереходНаФСБУ6(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаПереходНаФСБУ6(НомераТаблиц);
	Результат = Запрос.Выполнить();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаПереходНаФСБУ6(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	ИСТИНА КАК ВыдаватьСообщения
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ПЕРЕВОД ОС В МАЛОЦЕННОЕ ОБОРУДОВАНИЕ

Процедура ОтменитьОперациюПереводОСВМалоценноеОборудование(Организация, Период) Экспорт
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Дата = &Период
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияОбъект.ОтменитьОперацию();
		ОперацияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// ЗАЧЕТ АВАНСА ПО ЕДИНОМУ НАЛОГОВОМУ СЧЕТУ

Функция ПодготовитьПараметрыЗачетАвансаПоЕдиномуНалоговомуСчету(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗачетАвансаПоЕдиномуНалоговомуСчету(НомераТаблиц);
	Результат = Запрос.Выполнить();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаЗачетАвансаПоЕдиномуНалоговомуСчету(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Период,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПереместитьОперацииГруппы5ВМежотчетныйПериод(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25);
	ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6);
	ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО РегламентнаяОперация.Ссылка = Хозрасчетный.Регистратор
	|			И (Хозрасчетный.НомерСтроки = 1)
	|			И (Хозрасчетный.УточнениеПериода = 0)
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации В(&ВидыОпераций)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборХозрасчетный.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборХозрасчетный.Прочитать();
		
		Для каждого СтрокаНабора Из НаборХозрасчетный Цикл
			СтрокаНабора.Период = КонецДня(СтрокаНабора.Период);
			СтрокаНабора.УточнениеПериода = БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода();
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборХозрасчетный);
	КонецЦикла;
	
КонецПроцедуры

// КОРРЕКТИРОВКА ОТЛОЖЕННОГО НАЛОГА

// Процедура обновления ИБ
//
Процедура ПеренестиКорректировкуОтложенногоНалога(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОперацииПереход
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = &Переход
	|	И РегламентнаяОперация.Состояние = &Выполнено
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОперацииПереход.Ссылка КАК Ссылка,
	|	ПримененныеСтавки.Регистратор ЕСТЬ НЕ NULL  КАК ЕстьДвиженияПБУ18
	|ПОМЕСТИТЬ ПереносДвижений
	|ИЗ
	|	ОперацииПереход КАК ОперацииПереход
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененныеСтавкиОтложенногоНалога КАК ПримененныеСтавки
	|		ПО ОперацииПереход.Ссылка = ПримененныеСтавки.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииОП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Дата
	|ПОМЕСТИТЬ КорректировкиНалога
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = &Корректировка
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	ОрганизацииОП.Организация ЕСТЬ НЕ NULL  КАК ОрганизацияОП,
	|	РегламентнаяОперация.Дата КАК Дата,
	|	ПереносДвижений.ЕстьДвиженияПБУ18 КАК ЕстьДвиженияПБУ18
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПереносДвижений КАК ПереносДвижений
	|		ПО РегламентнаяОперация.Ссылка = ПереносДвижений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкиНалога КАК КорректировкиНалога
	|		ПО РегламентнаяОперация.Организация = КорректировкиНалога.Организация
	|			И РегламентнаяОперация.Дата = КорректировкиНалога.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОрганизацииОП КАК ОрганизацииОП
	|		ПО РегламентнаяОперация.Организация = ОрганизацииОП.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеактуальныеРегламентныеОперации КАК НеактуальныеОперации
	|		ПО РегламентнаяОперация.Организация = НеактуальныеОперации.Организация
	|			И (НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) = НеактуальныеОперации.Дата)
	|			И (НеактуальныеОперации.ВидОперации = &Переход)
	|ГДЕ
	|	НЕ РегламентнаяОперация.РучнаяКорректировка
	|	И НеактуальныеОперации.Организация ЕСТЬ NULL
	|	И КорректировкиНалога.Организация ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Переход", Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25);
	Запрос.УстановитьПараметр("Корректировка", Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога);
	Запрос.УстановитьПараметр("Выполнено", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	СчетаПБУ18 = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаПБУ18, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы)); // 09
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаПБУ18, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства)); // 77
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаПБУ18, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки)); // 99
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(
			Выборка.Дата, Выборка.Организация);
		Если Не Перечисления.ВариантыУчетаОтложенногоНалога.ЭтоБалансовыйМетод(ВариантУчетаОтложенногоНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		ОперацияПереход = Выборка.Ссылка;
		
		Попытка
			
			Если Выборка.ОрганизацияОП Тогда
				
				// У организации с обособленными подразделениями (и у головной организации, и у ОП)
				// делаем операции перехода на ФСБУ 25 неактуальными.
				
				Набор = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьНаборЗаписей();
				
				Набор.Отбор.Организация.Установить(Выборка.Организация);
				Набор.Отбор.Дата.Установить(НачалоМесяца(Выборка.Дата));
				Набор.Отбор.ВидОперации.Установить(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25);
				
				Запись = Набор.Добавить();
				Запись.Организация = Выборка.Организация;
				Запись.Дата = НачалоМесяца(Выборка.Дата);
				Запись.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				
			Иначе
				
				// У организации без ОП переносим проводки и движения регистров по ПБУ 18 
				// из операции перехода на ФСБУ 25 в операцию корректировки отложенного налога.
			
				ДобавитьБлокировкуОперации(ОперацияПереход);
				
				ОперацияКорректировкаНалога = СоздатьКорректировкуОтложенногоНалога(Выборка.Организация, Выборка.Дата);
				
				Если Выборка.ЕстьДвиженияПБУ18 Тогда
					
					ПеренестиПроводкиПоСчетам(СчетаПБУ18, ОперацияПереход, ОперацияКорректировкаНалога);
					ПеренестиЗаписиРегистраСведений("РасчетОтложенногоНалога", ОперацияПереход, ОперацияКорректировкаНалога);
					ПеренестиЗаписиРегистраСведений("РасчетПоказателейОтложенногоНалога", ОперацияПереход, ОперацияКорректировкаНалога);
					ПеренестиЗаписиРегистраСведений("ПримененныеСтавкиОтложенногоНалога", ОперацияПереход, ОперацияКорректировкаНалога);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре Документы.РегламентнаяОперация.ПеренестиКоректировкуОтложенногоНалога() не удалось обработать документ по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РегламентнаяОперация, 
				ОперацияПереход, 
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре Документы.РегламентнаяОперация.ПеренестиКоректировкуОтложенногоНалога() не удалось обработать часть документов: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектовОбработано > 0 Тогда
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РегламентнаяОперация,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.РегламентнаяОперация.ПеренестиКоректировкуОтложенногоНалога() обработала очередную порцию: %1 документов'"), 
				ОбъектовОбработано));
	КонецЕсли;
			
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьКорректировкуОтложенногоНалога(Организация, Дата)
	
	ОперацияОбъект = Документы.РегламентнаяОперация.СоздатьДокумент();
	ОперацияОбъект.Организация = Организация;
	ОперацияОбъект.Дата = Дата;
	ОперацияОбъект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога;
	ОперацияОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	ОперацияОбъект.УстановитьНовыйНомер();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОперацияОбъект);
	
	Возврат ОперацияОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьБлокировкуОперации(ОперацияСсылка)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияСсылка);
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ОперацияСсылка);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетОтложенногоНалога.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ОперацияСсылка);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетПоказателейОтложенногоНалога.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ОперацияСсылка);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПримененныеСтавкиОтложенногоНалога.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ОперацияСсылка);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПеренестиПроводкиПоСчетам(СчетаДляПереноса, СтарыйРегистратор, НовыйРегистратор)
	
	СтарыеПроводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	СтарыеПроводки.Отбор.Регистратор.Установить(СтарыйРегистратор);
	СтарыеПроводки.Прочитать();
	
	ОставшиесяПроводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ОставшиесяПроводки.Отбор.Регистратор.Установить(СтарыйРегистратор);
	
	ПеренесенныеПроводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПеренесенныеПроводки.Отбор.Регистратор.Установить(НовыйРегистратор);
	ПеренесенныеПроводки.Прочитать();
	
	Для каждого СтараяПроводка Из СтарыеПроводки Цикл
		Если СчетаДляПереноса.Найти(СтараяПроводка.СчетДт) = Неопределено
			И СчетаДляПереноса.Найти(СтараяПроводка.СчетКт) = Неопределено Тогда
			НоваяПроводка = ОставшиесяПроводки.Добавить();
		Иначе
			НоваяПроводка = ПеренесенныеПроводки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяПроводка, СтараяПроводка);
		Для каждого СтароеСубконтоДт Из СтараяПроводка.СубконтоДт Цикл
			НоваяПроводка.СубконтоДт.Вставить(СтароеСубконтоДт.Ключ, СтароеСубконтоДт.Значение);
		КонецЦикла;
		Для каждого СтароеСубконтоКт Из СтараяПроводка.СубконтоКт Цикл
			НоваяПроводка.СубконтоКт.Вставить(СтароеСубконтоКт.Ключ, СтароеСубконтоКт.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Если ПеренесенныеПроводки.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ПеренесенныеПроводки);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ОставшиесяПроводки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиЗаписиРегистраСведений(ИмяРегистра, СтарыйРегистратор, НовыйРегистратор)
	
	СтарыйНабор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	СтарыйНабор.Отбор.Регистратор.Установить(СтарыйРегистратор);
	СтарыйНабор.Прочитать();
	
	Если СтарыйНабор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйНабор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НовыйНабор.Отбор.Регистратор.Установить(НовыйРегистратор);
	Для каждого СтараяЗапись Из СтарыйНабор Цикл
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
	КонецЦикла;
	
	СтарыйНабор.Очистить();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(СтарыйНабор);
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйНабор);
	
КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГОВ НА ЕНС

Функция ПодготовитьПараметрыНачислениеНалоговНаЕНС(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНалоговНаЕНС(НомераТаблиц);
	Результат = Запрос.Выполнить();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНалоговНаЕНС(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Период,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ПЕРЕХОД НА ФСБУ 14

Функция ПодготовитьПараметрыПереходНаФСБУ14(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	СтоимостьОпределяетсяПоДаннымУчета = РегистрыСведений.СпособПереходаНаФСБУ14.СтоимостьОпределяетсяПоДаннымУчета(СтруктураШапки.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СтоимостьОпределяетсяПоДаннымУчета", СтоимостьОпределяетсяПоДаннымУчета);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаПереходНаФСБУ14(НомераТаблиц);
	Результат = Запрос.Выполнить();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаПереходНаФСБУ14(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&СтоимостьОпределяетсяПоДаннымУчета КАК СтоимостьОпределяетсяПоДаннымУчета,
	|	ИСТИНА КАК ВыдаватьСообщения
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецЕсли
