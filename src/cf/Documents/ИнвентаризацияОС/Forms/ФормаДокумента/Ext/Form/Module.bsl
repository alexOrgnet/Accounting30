
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ВедетсяУчетГрупповыхОС = ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС");
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ИнвентаризацияОС",
		"ФормаДокумента",
		НСтр("ru='Новости: Инвентаризация ОС'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьВидимостьГруппыКнопокТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			ЧастьКодаОС = Сред(ТекущийКод, 7, ПолучитьДлинуКодаСправочникаОС()-3);
			ДобавитьПоКодуОСНаСервере(ЧастьКодаОС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборСервер(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ВедетсяУчетГрупповыхОС = ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС");
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеИнвентаризацияОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПодразделениеМОЛ_ПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОрганизацияПодразделениеМОЛ_ПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МОЛПриИзменении(Элемент)
	
	ОрганизацияПодразделениеМОЛ_ПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование = Истина Тогда
		СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;

	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		ДополнительныеПоля = ПолучитьДополнительныеПоляОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДополнительныеПоля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеФактическоеПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеФактическое Тогда
		ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьФактическая = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ, ВедетсяУчетГрупповыхОС);

КонецПроцедуры

&НаКлиенте
Процедура ОСКоличествоФактическоеПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	Если ЭтоИнвентарноеОС(ТекущаяСтрокаТЧ.ОсновноеСредство) Тогда
		Если ТекущаяСтрокаТЧ.КоличествоФактическое > 1 Тогда
			ТекущаяСтрокаТЧ.КоличествоФактическое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоИнвентарноеОС(ТекущаяСтрокаТЧ.ОсновноеСредство) Тогда
		ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации = ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета * ТекущаяСтрокаТЧ.КоличествоФактическое;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации = ТекущаяСтрокаТЧ.СтоимостьПоУчетуЗаЕдиницу * ТекущаяСтрокаТЧ.КоличествоФактическое;
	КонецЕсли;
	ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации;
	
	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ, ВедетсяУчетГрупповыхОС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеПоДаннымУчетаПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета Тогда
			ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ, ВедетсяУчетГрупповыхОС);

КонецПроцедуры

&НаКлиенте
Процедура ОСПолеСтоимостьПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета = Истина Тогда
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации;
	КонецЕсли;
	
	Если ТекущаяСтрокаТЧ.НаличиеФактическое = Истина Тогда
		ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоРезультатамИнвентаризации;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	Если Элементы.ОС.ТекущиеДанные <> Неопределено Тогда
		РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные, ВедетсяУчетГрупповыхОС);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.ИнвентаризационнаяКомиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.ИнвентаризационнаяКомиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже подобрано!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
		ПоказатьПредупреждение( , ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.ИнвентаризационнаяКомиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже включено в состав комиссии!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение( , ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДанныеУчетаИФактические(Команда)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	Если Объект.ОС.Количество() >0 Тогда  
		ТекстВопроса = НСтр("ru = 'При заполнении существующие данные будут пересчитаны!
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеУчетаИФактическиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДанныеУчетаИФактическиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,ВыборГруппИЭлементов,РежимВыбора", Ложь, ИспользованиеГруппИЭлементов.Элементы,Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьСостояниеДокумента();
	УстановитьВидимостьКолонок();
	ЗаполнитьРеквизитыТЧ();

	Для каждого Строка Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка, ВедетсяУчетГрупповыхОС);
		ПроверитьЗаполнениеСтоимостиПоРезультатамИнвентаризации(Строка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыТЧ()
    
	ТаблицаОС = Объект.ОС.Выгрузить();
	Если ВедетсяУчетГрупповыхОС Тогда 
		ТаблицаКодовОС = УчетГрупповыхОС.ПолучитьТаблицуКодовОС(ТаблицаОС);
		ТаблицаОС.ЗагрузитьКолонку(ТаблицаКодовОС.ВыгрузитьКолонку("ИнвентарныйНомер"),"ИнвентарныйНомер");
	Иначе
		ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС, Объект.Организация, Объект.Дата);
		ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	КонецЕсли;
	Объект.ОС.Загрузить(ТаблицаОС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеПоляОС(Знач ОсновноеСредство, Знач Организация, Знач Дата)
	
	Если ЭтоИнвентарноеОС(ОсновноеСредство) Тогда
		СведенияОбИнвентарномНомереОС = УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);
	Иначе
		СведенияОбИнвентарномНомереОС = Новый Структура("ИнвентарныйНомер", ОсновноеСредство.Код);	
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИнвентарныйНомер", 	СведенияОбИнвентарномНомереОС.ИнвентарныйНомер);

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка, УчетГрупповыхОС)
	
	Если УчетГрупповыхОС Тогда
		РазницаПоНаличию = Строка.КоличествоФактическое - Строка.КоличествоПоДаннымУчета;
	Иначе
		РазницаПоНаличию = Число(Строка.НаличиеФактическое) - Число(Строка.НаличиеПоДаннымУчета);
	КонецЕсли;
	РазницаПоСтоимости = Строка.СтоимостьФактическая - Строка.СтоимостьПоДаннымУчета;

	Строка.ИзлишекКоличество = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
	Строка.НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
	Строка.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	Строка.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнениеСтоимостиПоРезультатамИнвентаризации(Строка)
	
	Если Строка.СтоимостьПоРезультатамИнвентаризации = 0 Тогда
		Если Строка.СтоимостьПоДаннымУчета <> 0 Тогда
			Строка.СтоимостьПоРезультатамИнвентаризации = Строка.СтоимостьПоДаннымУчета;
		ИначеЕсли Строка.СтоимостьФактическая <> 0 Тогда
			Строка.СтоимостьПоРезультатамИнвентаризации = Строка.СтоимостьФактическая;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоИнвентарноеОС(Строка.ОсновноеСредство) Тогда
		Если Строка.НаличиеПоДаннымУчета = Ложь И Строка.НаличиеФактическое = Ложь Тогда
			Строка.СтоимостьФактическая = 0;
			Строка.СтоимостьПоДаннымУчета = 0;
			Строка.СтоимостьПоРезультатамИнвентаризации = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчетаИФактическиеСервер(МассивОС = Неопределено)
	
	Заполнение = Ложь;
	
	Если Не ЗначениеЗаполнено(МассивОС) Или МассивОС.Количество() = 0 Тогда
		Объект.ОС.Очистить();
	Иначе
		Заполнение = Истина;
	КонецЕсли;
	
	ТаблицаОС = Документы.ИнвентаризацияОС.ОстаткиОС(Объект, МассивОС);
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		Если Заполнение Тогда
			ПараметрыОтбора = Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
			НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() >0 Тогда
				НоваяСтрока = НайденныеСтроки[0];
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			НоваяСтрока 						= Объект.ОС.Добавить();
			НоваяСтрока.ОсновноеСредство        = СтрокаОС.ОсновноеСредство;
		КонецЕсли;
		НоваяСтрока.СтоимостьПоДаннымУчета  = СтрокаОС.ВосстановительнаяСтоимость;
		Если НоваяСтрока.СтоимостьПоДаннымУчета <> Неопределено Тогда
			НоваяСтрока.СтоимостьПоРезультатамИнвентаризации = НоваяСтрока.СтоимостьПоДаннымУчета;
		КонецЕсли;
		Если ЭтоИнвентарноеОС(СтрокаОС.ОсновноеСредство) Тогда
			Если СтрокаОС.КоличествоПоУчету = 1 Тогда 
				НоваяСтрока.НаличиеПоДаннымУчета    = Истина;
				НоваяСтрока.НаличиеФактическое      = Истина;
			Иначе
				НоваяСтрока.НаличиеПоДаннымУчета    = Ложь;
				НоваяСтрока.НаличиеФактическое      = Ложь;
			КонецЕсли;
        Иначе
			НоваяСтрока.СтоимостьПоУчетуЗаЕдиницу = СтрокаОС.СтоимостьПоУчетуЗаЕдиницу;
		КонецЕсли;
		НоваяСтрока.КоличествоПоДаннымУчета = СтрокаОС.КоличествоПоУчету;
		НоваяСтрока.КоличествоФактическое 	= СтрокаОС.КоличествоПоУчету;
		НоваяСтрока.СтоимостьФактическая    = НоваяСтрока.СтоимостьПоДаннымУчета;
		РассчитатьВычисляемыеПоляПоСтроке(НоваяСтрока, ВедетсяУчетГрупповыхОС);
	КонецЦикла;
	
	ЗаполнитьРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеУчетаИФактическиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеУчетаИФактическиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборСервер(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьРеквизитыТЧ();

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область Штрихкодирование

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	Штрихкод = "";
	ВводШтрихкода = Новый ОписаниеОповещения("ВводШтрихкодаЗавершение", ЭтаФорма);
	ПоказатьВводСтроки(ВводШтрихкода, Штрихкод, "Введите штрихкод или инв № основного средства");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФакт(Команда)
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл
		СтрокаОС.НаличиеФактическое = Ложь;
		СтрокаОС.КоличествоФактическое = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ЭтоШтрихкод = Ложь;
	
	Если Не Штрихкод = Неопределено Тогда
		ДлинаИнвентарногоНомера = ПолучитьДлинуКодаСправочникаОС();
		Если СтрДлина(Штрихкод) >= 12 И Лев(Штрихкод, 6) = "299000" Тогда
			Штрихкод = Лев(Штрихкод, 12);
			ЧастьКодаОС = Прав(Штрихкод, 6);
			ЭтоШтрихкод = Истина;
		ИначеЕсли СтрДлина(Штрихкод) = ДлинаИнвентарногоНомера И СтрНайти(Штрихкод, "-") > 0 Тогда
			ЧастьКодаОС = Штрихкод;	
		Иначе
			ПоказатьПредупреждение(,"Указанная строка не является штрихкодом или инвентарным номером основного средства", ,"Проверка штрихкода");
			Возврат;
		КонецЕсли;
		ДобавитьПоКодуОСНаСервере(ЧастьКодаОС, ЭтоШтрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДлинуКодаСправочникаОС()
	
	Возврат Метаданные.Справочники.ОсновныеСредства.ДлинаКода;
	
КонецФункции

&НаСервере
Функция ПолучитьШтрихкодПоИнвентарномуНомеру(Знач КодИнвентарныйНомер)
	
	Результат = "";
	ИнвентарныйНомер = Прав(КодИнвентарныйНомер, ПолучитьДлинуКодаСправочникаОС()-3);
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ИнвентарныйНомер) Или СтрДлина(ИнвентарныйНомер) < 6 Тогда
		Возврат Результат;
	КонецЕсли;
	Результат = "299000" + СокрЛП(ИнвентарныйНомер);
	КонтрольныйСимвол = РегистрыСведений.ШтрихкодыНоменклатуры.КонтрольныйСимволEAN(Результат, 13);
	Штрихкод = Результат + КонтрольныйСимвол;
	
	Возврат Штрихкод;
		
КонецФункции

&НаСервере
Процедура ДобавитьПоКодуОСНаСервере(КодОС, ЭтоШтрихкод = Ложь)
	
	Если ЭтоШтрихкод Тогда
		ОС = ПолучитьОСПочастиКода(КодОС);
	Иначе
		ОС = Справочники.ОсновныеСредства.НайтиПоКоду(КодОС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОС) Тогда
		ПараметрыПоиска = Новый Структура("ОсновноеСредство", ОС);
		СтрокиОС = Объект.ОС.НайтиСтроки(ПараметрыПоиска);
		Если СтрокиОС.Количество() = 0 Тогда
			ДополнительныеПараметры = Новый Структура("Дата, Организация, ПодразделениеОрганизации, ОтветственноеЛицо");
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект);
			СписокОС = Новый Массив;
			СписокОС.Добавить(ОС);
			Таб = Документы.ИнвентаризацияОС.ОстаткиОС(ДополнительныеПараметры, СписокОС);
			Если Таб.Количество()>0 Тогда
				СтрокаОС = Таб[0];
				НоваяСтрока = Объект.ОС.Добавить();
				НоваяСтрока.ОсновноеСредство        = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.СтоимостьПоДаннымУчета  = СтрокаОС.ВосстановительнаяСтоимость;
				НоваяСтрока.ИнвентарныйНомер		= СтрокаОС.ОсновноеСредство.Код;
				НоваяСтрока.КоличествоПоДаннымУчета = СтрокаОС.КоличествоПоУчету;
				НоваяСтрока.КоличествоФактическое 	= 1;
				Если ЭтоИнвентарноеОС(СтрокаОС.ОсновноеСредство) Тогда
					Если СтрокаОС.КоличествоПоУчету = 1 Тогда 
						НоваяСтрока.НаличиеПоДаннымУчета    = Истина;
						НоваяСтрока.НаличиеФактическое      = Истина;
					Иначе
						НоваяСтрока.НаличиеПоДаннымУчета    = Ложь;
						НоваяСтрока.НаличиеФактическое      = Истина;
					КонецЕсли;
					НоваяСтрока.СтоимостьПоУчетуЗаЕдиницу = СтрокаОС.СтоимостьПоУчетуЗаЕдиницу;
					НоваяСтрока.СтоимостьПоРезультатамИнвентаризации = СтрокаОС.ВосстановительнаяСтоимость;
				Иначе
					НоваяСтрока.СтоимостьПоРезультатамИнвентаризации = СтрокаОС.СтоимостьПоУчетуЗаЕдиницу;
				КонецЕсли;
				НоваяСтрока.СтоимостьФактическая    = НоваяСтрока.СтоимостьПоРезультатамИнвентаризации;
				РассчитатьВычисляемыеПоляПоСтроке(НоваяСтрока, ВедетсяУчетГрупповыхОС);
		    КонецЕсли;
		Иначе
			СтрокаТЧ = СтрокиОС[0]; 
			Если ЭтоИнвентарноеОС(СтрокаТЧ.ОсновноеСредство) Тогда
				СтрокаТЧ.НаличиеФактическое = Истина;
				СтрокаТЧ.СтоимостьФактическая = СтрокаТЧ.СтоимостьПоДаннымУчета;
            Иначе
				СтрокаТЧ.КоличествоФактическое = СтрокаТЧ.КоличествоФактическое + 1;
				СтрокаТЧ.СтоимостьФактическая = СтрокаТЧ.СтоимостьПоУчетуЗаЕдиницу * СтрокаТЧ.КоличествоФактическое;
			КонецЕсли;
			СтрокаТЧ.СтоимостьПоРезультатамИнвентаризации = СтрокаТЧ.СтоимостьФактическая;
			РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ, ВедетсяУчетГрупповыхОС);
		КонецЕсли;
	
		ЗаполнитьРеквизитыТЧ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОСПоЧастиКода(ЧастьКодаОС)
	
	ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ПОДСТРОКА(ОсновныеСредства.Код, 4, 6) = &ЧастьКодаОС";
	
	Запрос.УстановитьПараметр("ЧастьКодаОС",ЧастьКодаОС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОсновноеСредство = Выборка.ОсновноеСредство;
	КонецЕсли;
	
	Возврат ОсновноеСредство;
	
КонецФункции

#КонецОбласти

#Область ТСД

&НаСервере
Процедура УстановитьВидимостьГруппыКнопокТСД()
	
	Элементы.ГруппаОСТСД.Видимость = МенеджерОборудованияБП.ИспользуетсяОборудование("ТерминалСбораДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(,НСтр("ru = 'Работа с торговым оборудованием не поддерживается в режиме веб-клиента.
					|Для использования терминала сбора данных запустите программу в режиме тонкого клиента.'"), 15);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные по основным средствам не выгружены'"));
	Возврат;
	#КонецЕсли

	Если Объект.ОС.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Табличная часть ОС не заполнена.
								|Отсутствуют данные для выгрузки в ТСД");
		Возврат;
	КонецЕсли;

	ТаблицаТСД = ПолучитьТаблицуОСДляТСД();
	Если ТаблицаТСД.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Отсуствуют данные для выгрузки в терминал");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВТСД_ВыполнитьВыгрузку(ТаблицаТСД);

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуОСДляТСД()
	
	ОбъектФормы 	= РеквизитФормыВЗначение("Объект");
	ТаблицаОС 		= ОбъектФормы.ОС.Выгрузить();
	ТаблицаДляТСД 	= Новый Массив;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОсновныеСредства.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ОсновныеСредства.СтоимостьПоРезультатамИнвентаризации КАК ЧИСЛО(15, 2)) КАК Стоимость,
	|	0 КАК Количество
	|ПОМЕСТИТЬ втОсновныеСредства
	|ИЗ
	|	&ОсновныеСредства КАК ОсновныеСредства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеСредства.ОсновноеСредство КАК Номенклатура,
	|	втОсновныеСредства.ОсновноеСредство.Код КАК КодОС,
	|	втОсновныеСредства.Стоимость КАК Цена,
	|	втОсновныеСредства.Количество КАК Количество,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(13)) КАК Штрихкод
	|ИЗ
	|	втОсновныеСредства КАК втОсновныеСредства";
	
	Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС);
	ОсновныеСредства = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОсновноеСредство Из ОсновныеСредства Цикл
		СтрокаОсновноеСредство.Штрихкод = ПолучитьШтрихкодПоИнвентарномуНомеру(СтрокаОсновноеСредство.КодОС);
		НоваяСтрока = Новый Структура("Номенклатура, Цена, Количество, Штрихкод");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОсновноеСредство);
		ТаблицаДляТСД.Добавить(НоваяСтрока);
	КонецЦикла;
	 
	Возврат ТаблицаДляТСД;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД_ВыполнитьВыгрузку(ТаблицаТСД) Экспорт
	
	ОповещениеПослеВыгрузки = Новый ОписаниеОповещения("ПослеВыгрузкиВТСД", ЭтаФорма, Неопределено);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(ОповещениеПослеВыгрузки, ЭтаФорма.УникальныйИдентификатор, ТаблицаТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыгрузкиВТСД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ПоказатьОповещениеПользователя("Данные успешно выгружены", ,"Выгрузка данных  в ТСД"
			,БиблиотекаКартинок.ВыгрузитьВТСД,СтатусОповещенияПользователя.Информация);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(,НСтр("ru = 'Работа с торговым оборудованием не поддерживается в режиме веб-клиента.
					|Для использования терминала сбора данных запустите программу в режиме тонкого клиента.'"), 15);
	Возврат;
	#КонецЕсли

	Если Объект.ОС.Количество() = 0 Тогда
		ЗаполнитьДанныеУчетаИФактические(Неопределено);
	КонецЕсли;
	СброситьФакт(Неопределено);
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
	СворачиватьДанные    = Истина; // Флаг определяет, будет ли сворачиваться загружаемая таблица (группировка по штрихкоду).
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор, СворачиватьДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если Результат.Результат Тогда
		ТаблицаТСД = Результат.ТаблицаТоваров;
		ЗаполнитьПоДаннымИзТСДНаСервере(ТаблицаТСД);
		Элементы.ОС.Обновить();
		ПоказатьПредупреждение(, Нстр("ru = 'Данные загружены'"));
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымИзТСДНаСервере(ДанныеТСД)
	
	ТаблицаТСД = Новый ТаблицаЗначений;
	ТаблицаТСД.Колонки.Добавить("Штрихкод"	, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(13)));
	ТаблицаТСД.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,1)));
	
	Для Каждого СтруктураДанных Из ДанныеТСД Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаТСД.Добавить(), СтруктураДанных);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТСД.Штрихкод КАК Штрихкод,
	|	ВЫРАЗИТЬ(ТаблицаТСД.Количество КАК ЧИСЛО(10, 1)) КАК Количество
	|ПОМЕСТИТЬ втДанныеТСД
	|ИЗ
	|	&ТаблицаТСД КАК ТаблицаТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА втДанныеТСД.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаличиеФактическое,
	|	втДанныеТСД.Количество КАК КоличествоФактическое
	|ИЗ
	|	втДанныеТСД КАК втДанныеТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО (ПОДСТРОКА(втДанныеТСД.Штрихкод, 7, 6) ПОДОБНО ПРАВ(ОсновныеСредства.Код, 6))";
	
	Запрос.УстановитьПараметр("ТаблицаТСД", ТаблицаТСД);
	Таб = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		СтрокаТаблицы = Таб.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
		Если Не СтрокаТаблицы = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы, "НаличиеФактическое,КоличествоФактическое", "ОсновноеСредство");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок()
	
	Если ВедетсяУчетГрупповыхОС Тогда
		Элементы.ОС.ПодчиненныеЭлементы.ОСКоличествоПоДаннымУчета.Видимость = Истина;
		Элементы.ОС.ПодчиненныеЭлементы.ОСКоличествоФактическое.Видимость 	= Истина;
		Элементы.ОС.ПодчиненныеЭлементы.ОСНаличиеПоДаннымУчета.Видимость 	= Ложь;
		Элементы.ОС.ПодчиненныеЭлементы.ОСНаличиеФактическое.Видимость 		= Ложь;
	Иначе
		Элементы.ОС.ПодчиненныеЭлементы.ОСКоличествоПоДаннымУчета.Видимость = Ложь;
		Элементы.ОС.ПодчиненныеЭлементы.ОСКоличествоФактическое.Видимость 	= Ложь;
		Элементы.ОС.ПодчиненныеЭлементы.ОСНаличиеПоДаннымУчета.Видимость 	= Истина;
		Элементы.ОС.ПодчиненныеЭлементы.ОСНаличиеФактическое.Видимость 		= Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УчетГрупповыхОС

&НаСервереБезКонтекста
Функция ЭтоИнвентарноеОС(ОсновноеСредство)
	
	ИнвентарноеОС = Ложь;
	Если ОсновноеСредство.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ИнвентарныйОбъект Тогда
		ИнвентарноеОС = Истина;
	КонецЕсли;
	
	Возврат ИнвентарноеОС;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПодразделениеМОЛ_ПриИзменении()
	
	Если Объект.ОС.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОПерезаполнении", ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Табличная часть будет перезаполнена, продолжить?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да, "Перезаполнение табличной части");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПерезаполнении(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да ТОгда
		ЗаполнитьДанныеУчетаИФактическиеСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти