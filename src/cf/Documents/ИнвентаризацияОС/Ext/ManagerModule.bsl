#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

// Обработчик обновления
Процедура УстановитьПроведен(ПараметрыОтложенногоОбновления = Неопределено) Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПроведен(Метаданные.Документы.ИнвентаризацияОС, ПараметрыОтложенногоОбновления);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Инвентаризационная опись ОС (ИНВ-1)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ1";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризационная опись ОС (ИНВ-1)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Сличительная ведомость (ИНВ-18)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ18";
	КомандаПечати.Представление = НСтр("ru = 'Сличительная ведомость (ИНВ-18)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Приказ о проведении инвентаризации (ИНВ-22)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ22";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о проведении инвентаризации (ИНВ-22)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Инвентаризация ОС""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ1") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ1", НСтр("ru = 'ИНВ-1 (Инвентаризационная опись)'"), 
			ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ1");
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ18") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ18", НСтр("ru = 'ИНВ-18 (Сличительная ведомость)'"), 
			ПечатьИНВ18(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ18");
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ22") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ22",НСтр("ru = 'ИНВ-22 (Приказ о проведении инвентаризации)'"), 
			ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "ОбщийМакет.ПФ_MXL_ИНВ22");
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ПричинаПроведенияИнвентаризации");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрослеживаемыхТоваровПоОснованию() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(1) КАК Количество,
		|	СУММА(ИнвентаризацияОСОС.СтоимостьФактическая) КАК Сумма,
		|	ИнвентаризацияОС.Организация КАК Организация,
		|	ИнвентаризацияОС.Дата КАК ПериодСобытия,
		|	СУММА(1) КАК КоличествоУчет,
		|	СУММА(ИнвентаризацияОСОС.СтоимостьПоДаннымУчета) КАК СуммаУчет,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА РегистрацияПрослеживаемыхТоваров.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СчитатьОстаток
		|ПОМЕСТИТЬ ВТ_ТаблицаОСВременная
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|		ПО ИнвентаризацияОСОС.Ссылка = ИнвентаризацияОС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияПрослеживаемыхТоваров КАК РегистрацияПрослеживаемыхТоваров
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = РегистрацияПрослеживаемыхТоваров.ОсновноеСредство
		|			И ИнвентаризацияОСОС.Ссылка = РегистрацияПрослеживаемыхТоваров.Основание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&КонецПериода, ) КАК СостоянияОСОрганизацийСрезПоследних
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
		|			И (СостоянияОСОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Основание
		|	И ИнвентаризацияОС.Проведен
		|	И ИнвентаризацияОСОС.ОсновноеСредство.ПрослеживаемыйТовар
		|	И ВЫБОР
		|			КОГДА НЕ РегистрацияПрослеживаемыхТоваров.ОсновноеСредство ЕСТЬ NULL
		|				ТОГДА РегистрацияПрослеживаемыхТоваров.Номенклатура = &ПустоеЗначениеНоменклатуры
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И СостоянияОСОрганизацийСрезПоследних.ДатаСостояния <= &НачалоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияОСОС.ОсновноеСредство,
		|	ИнвентаризацияОС.Организация,
		|	ИнвентаризацияОС.Дата,
		|	ВЫБОР
		|		КОГДА РегистрацияПрослеживаемыхТоваров.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство КАК ОсновноеСредство,
		|	ИСТИНА КАК ОСИмеетКомплектующие
		|ПОМЕСТИТЬ ВТ_ТаблицаУведомленийОСсКомлектующими
		|ИЗ
		|	ВТ_ТаблицаОСВременная КАК ВТ_ТаблицаТоваровВСоставеОСВременная
		|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
		|			ПО УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
		|		ПО ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство = УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.ОсновноеСредство
		|ГДЕ
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийУведомленияОбОстаткахПрослеживаемыхОбъектов.КомплектующиеОС)
		|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен
		|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(РегистрацияПрослеживаемыхТоваров.ВсегоКоличествоКомплектующих) КАК Количество,
		|	СУММА(РегистрацияПрослеживаемыхТоваров.ВсегоКомлектующихНаСумму) КАК Сумма,
		|	ИнвентаризацияОС.Организация КАК Организация,
		|	ИнвентаризацияОС.Дата КАК ПериодСобытия,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура КАК Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.ТНВЭД КАК ТНВЭД,
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации КАК ВидОперации,
		|	РегистрацияПрослеживаемыхТоваров.СтранаПроисхождения КАК СтранаПроисхождения
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровВСоставеОСВременная
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|		ПО ИнвентаризацияОСОС.Ссылка = ИнвентаризацияОС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияПрослеживаемыхТоваров КАК РегистрацияПрослеживаемыхТоваров
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = РегистрацияПрослеживаемыхТоваров.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Основание
		|	И ИнвентаризацияОС.Проведен
		|	И ИнвентаризацияОСОС.ОсновноеСредство.ПрослеживаемыйТовар
		|	И РегистрацияПрослеживаемыхТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииПрослеживаемыхТоваров.ИнвентаризацияОС)
		|	И НЕ РегистрацияПрослеживаемыхТоваров.Номенклатура = &ПустоеЗначениеНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияОСОС.ОсновноеСредство,
		|	ИнвентаризацияОС.Организация,
		|	ИнвентаризацияОС.Дата,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.ТНВЭД,
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации,
		|	РегистрацияПрослеживаемыхТоваров.СтранаПроисхождения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацияОСОС.ОсновноеСредство,
		|	СУММА(РегистрацияПрослеживаемыхТоваров.ВсегоКоличествоКомплектующих),
		|	СУММА(РегистрацияПрослеживаемыхТоваров.ВсегоКомлектующихНаСумму),
		|	ИнвентаризацияОС.Организация,
		|	ИнвентаризацияОС.Дата,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.ТНВЭД,
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации,
		|	РегистрацияПрослеживаемыхТоваров.СтранаПроисхождения
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|		ПО ИнвентаризацияОСОС.Ссылка = ИнвентаризацияОС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияПрослеживаемыхТоваров КАК РегистрацияПрослеживаемыхТоваров
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = РегистрацияПрослеживаемыхТоваров.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Основание
		|	И ИнвентаризацияОС.Проведен
		|	И ИнвентаризацияОСОС.ОсновноеСредство.ПрослеживаемыйТовар
		|	И РегистрацияПрослеживаемыхТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииПрослеживаемыхТоваров.РегистрацияКомплектующихОС)
		|	И НЕ РегистрацияПрослеживаемыхТоваров.Номенклатура = &ПустоеЗначениеНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияОСОС.ОсновноеСредство,
		|	ИнвентаризацияОС.Организация,
		|	ИнвентаризацияОС.Дата,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.ТНВЭД,
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации,
		|	РегистрацияПрослеживаемыхТоваров.СтранаПроисхождения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодСобытия,
		|	Организация,
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрацияПрослеживаемыхТоваров.Организация КАК Организация,
		|	РегистрацияПрослеживаемыхТоваров.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура КАК Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.Основание КАК Основание,
		|	РегистрацияПрослеживаемыхТоваров.ПериодСобытия КАК ПериодСобытия
		|ПОМЕСТИТЬ ВТ_ОСРегистрируемыеВПрослеживаемостиРанее
		|ИЗ
		|	РегистрСведений.РегистрацияПрослеживаемыхТоваров КАК РегистрацияПрослеживаемыхТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОСВременная КАК ВТ_ТаблицаОС
		|		ПО РегистрацияПрослеживаемыхТоваров.Организация = ВТ_ТаблицаОС.Организация
		|			И РегистрацияПрослеживаемыхТоваров.ПериодСобытия <= ВТ_ТаблицаОС.ПериодСобытия
		|			И РегистрацияПрослеживаемыхТоваров.ОсновноеСредство <= ВТ_ТаблицаОС.ОсновноеСредство
		|ГДЕ
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииПрослеживаемыхТоваров.ИнвентаризацияОС)
		|	И РегистрацияПрослеживаемыхТоваров.Основание <> &Основание
		|	И РегистрацияПрослеживаемыхТоваров.Номенклатура = &ПустоеЗначениеНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрацияПрослеживаемыхТоваров.Организация,
		|	РегистрацияПрослеживаемыхТоваров.ОсновноеСредство,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.Основание,
		|	РегистрацияПрослеживаемыхТоваров.ПериодСобытия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодСобытия,
		|	Организация,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрацияПрослеживаемыхТоваров.Организация КАК Организация,
		|	РегистрацияПрослеживаемыхТоваров.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура КАК Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.Основание КАК Основание,
		|	РегистрацияПрослеживаемыхТоваров.ПериодСобытия КАК ПериодСобытия,
		|	РегистрацияПрослеживаемыхТоваров.Основание.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_ТоварыВСоставеОСРегистрируемыеВПрослеживаемостиРанее
		|ИЗ
		|	РегистрСведений.РегистрацияПрослеживаемыхТоваров КАК РегистрацияПрослеживаемыхТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТоваровВСоставеОСВременная КАК ВТ_ТаблицаОС
		|		ПО РегистрацияПрослеживаемыхТоваров.Организация = ВТ_ТаблицаОС.Организация
		|			И РегистрацияПрослеживаемыхТоваров.ПериодСобытия <= ВТ_ТаблицаОС.ПериодСобытия
		|			И РегистрацияПрослеживаемыхТоваров.ОсновноеСредство = ВТ_ТаблицаОС.ОсновноеСредство
		|			И РегистрацияПрослеживаемыхТоваров.Номенклатура = ВТ_ТаблицаОС.Номенклатура
		|ГДЕ
		|	РегистрацияПрослеживаемыхТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииПрослеживаемыхТоваров.РегистрацияКомплектующихОС)
		|	И РегистрацияПрослеживаемыхТоваров.Основание <> &Основание
		|	И НЕ РегистрацияПрослеживаемыхТоваров.Номенклатура = &ПустоеЗначениеНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрацияПрослеживаемыхТоваров.ОсновноеСредство,
		|	РегистрацияПрослеживаемыхТоваров.Номенклатура,
		|	РегистрацияПрослеживаемыхТоваров.Организация,
		|	РегистрацияПрослеживаемыхТоваров.Основание,
		|	РегистрацияПрослеживаемыхТоваров.ПериодСобытия,
		|	РегистрацияПрослеживаемыхТоваров.Основание.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодСобытия,
		|	Организация,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ ВТ_ОсновныеСредства
		|ИЗ
		|	ВТ_ТаблицаОСВременная КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК Сумма,
		|	1 КАК Количество,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВТ_ДетальнаяТаблицаОстатковОС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ОсновныеСредства.СчетУчета
		|				ИЗ
		|					ВТ_ОсновныеСредства КАК ОсновныеСредства),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОсновныеСредства.ОсновноеСредство
		|					ИЗ
		|						ВТ_ОсновныеСредства КАК ОсновныеСредства)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокКт, 0),
		|	1,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.ОсновныеСредства)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ОсновныеСредства.СчетНачисленияАмортизации
		|				ИЗ
		|					ВТ_ОсновныеСредства КАК ОсновныеСредства),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОсновныеСредства.ОсновноеСредство
		|					ИЗ
		|						ВТ_ОсновныеСредства КАК ОсновныеСредства)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ДетальнаяТаблицаОстатковОС.Сумма) КАК Сумма,
		|	ДетальнаяТаблицаОстатковОС.Количество КАК Количество,
		|	ДетальнаяТаблицаОстатковОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВТ_ТаблицаОстатковОС
		|ИЗ
		|	ВТ_ДетальнаяТаблицаОстатковОС КАК ДетальнаяТаблицаОстатковОС
		|
		|СГРУППИРОВАТЬ ПО
		|	ДетальнаяТаблицаОстатковОС.Количество,
		|	ДетальнаяТаблицаОстатковОС.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.Номенклатура КАК Номенклатура,
		|	ТаблицаОС.Количество КАК Количество,
		|	ВТ_ТаблицаОстатковОС.Сумма КАК Сумма,
		|	ТаблицаОС.Организация КАК Организация,
		|	ТаблицаОС.ПериодСобытия КАК ПериодСобытия,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииПрослеживаемыхТоваров.ИнвентаризацияОС) КАК ВидОперации,
		|	ТаблицаОС.КоличествоУчет КАК КоличествоУчет,
		|	ОсновныеСредстваСправочник.КодТНВЭД КАК ТНВЭД,
		|	НЕ ВТ_ОСРегистрируемыеВПрослеживаемостиРанее.Номенклатура ЕСТЬ NULL КАК РанееРегистрировалсяВПрослеживаемости,
		|	ТаблицаОС.СуммаУчет КАК СуммаУчет,
		|	"""" КАК СтранаПроисхождения,
		|	ТаблицаОС.СчитатьОстаток КАК СчитатьОстаток
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровРазмеченный
		|ИЗ
		|	ВТ_ТаблицаОСВременная КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОСРегистрируемыеВПрослеживаемостиРанее КАК ВТ_ОСРегистрируемыеВПрослеживаемостиРанее
		|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ОСРегистрируемыеВПрослеживаемостиРанее.ОсновноеСредство
		|			И ТаблицаОС.Организация = ВТ_ОСРегистрируемыеВПрослеживаемостиРанее.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредстваСправочник
		|		ПО ТаблицаОС.ОсновноеСредство = ОсновныеСредстваСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОстатковОС КАК ВТ_ТаблицаОстатковОС
		|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ТаблицаОстатковОС.ОсновноеСредство
		|ГДЕ
		|	ОсновныеСредстваСправочник.ПрослеживаемыйТовар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПоОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВТ_ТаблицаПоОС.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаПоОС.Количество КАК Количество,
		|	ВТ_ТаблицаПоОС.Сумма КАК Сумма,
		|	ВТ_ТаблицаПоОС.ТНВЭД КАК ТНВЭД,
		|	ВТ_ТаблицаПоОС.ВидОперации КАК ВидОперации,
		|	ВТ_ТаблицаПоОС.Организация КАК Организация,
		|	ВТ_ТаблицаПоОС.ПериодСобытия КАК ПериодСобытия,
		|	ВТ_ТаблицаПоОС.СтранаПроисхождения КАК СтранаПроисхождения
		|ПОМЕСТИТЬ ВТ_ТаблицаОС
		|ИЗ
		|	ВТ_ТаблицаТоваровРазмеченный КАК ВТ_ТаблицаПоОС
		|ГДЕ
		|	НЕ ВТ_ТаблицаПоОС.РанееРегистрировалсяВПрослеживаемости
		|	И ВТ_ТаблицаПоОС.Количество > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрослеживаемыеОСОбороты.Организация КАК Организация,
		|	ПрослеживаемыеОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
		|	ПрослеживаемыеОСОбороты.Комплектующие КАК Номенклатура,
		|	СУММА(ПрослеживаемыеОСОбороты.КоличествоПриход - ПрослеживаемыеОСОбороты.КоличествоРасход) КАК ОстатокТовараСРНПТ
		|ПОМЕСТИТЬ ВТ_ПрослеживаемыеТоварыСРНПТ
		|ИЗ
		|	РегистрНакопления.ПрослеживаемыеОсновныеСредства.Обороты(&НачалоПериода, &КонецПериода, Запись, Организация = &Организация) КАК ПрослеживаемыеОСОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрослеживаемыеОСОбороты.Комплектующие,
		|	ПрослеживаемыеОСОбороты.Организация,
		|	ПрослеживаемыеОСОбороты.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ТНВЭД КАК ТНВЭД,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаУведомленийОСсКомлектующими.ОСИмеетКомплектующие ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаОС.Количество - ЕСТЬNULL(ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ, 0)
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаУведомленийОСсКомлектующими.ОСИмеетКомплектующие ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ, 0) = 0
		|				ИЛИ ТаблицаОС.Количество = 0
		|			ТОГДА ТаблицаОС.Сумма
		|		ИНАЧЕ ТаблицаОС.Сумма - ТаблицаОС.Сумма / ТаблицаОС.Количество * ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОС.Организация КАК Организация,
		|	ТаблицаОС.ВидОперации КАК ВидОперации,
		|	ТаблицаОС.ПериодСобытия КАК ПериодСобытия,
		|	ТаблицаОС.СтранаПроисхождения КАК СтранаПроисхождения,
		|	&ПустаяСсылкаРнпт КАК РНПТ,
		|	0 КАК ВсегоКоличествоКомплектующих,
		|	0 КАК ВсегоКомлектующихНаСумму,
		|	NULL КАК ПервичныйДокумент
		|ПОМЕСТИТЬ ВТ_ТоварыПоОснованию
		|ИЗ
		|	ВТ_ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрослеживаемыеТоварыСРНПТ КАК ВТ_ПрослеживаемыеТоварыСРНПТ
		|		ПО ТаблицаОС.Организация = ВТ_ПрослеживаемыеТоварыСРНПТ.Организация
		|			И ТаблицаОС.ОсновноеСредство = ВТ_ПрослеживаемыеТоварыСРНПТ.ОсновноеСредство
		|			И ТаблицаОС.Номенклатура = ВТ_ПрослеживаемыеТоварыСРНПТ.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТоваровВСоставеОСВременная КАК ВТ_ТаблицаТоваровВСоставеОСВременная
		|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаУведомленийОСсКомлектующими КАК ТаблицаУведомленийОСсКомлектующими
		|		ПО ТаблицаОС.ОсновноеСредство = ТаблицаУведомленийОСсКомлектующими.ОсновноеСредство
		|ГДЕ
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ТНВЭД,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.Номенклатура,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.Количество - ЕСТЬNULL(ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ, 0),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ, 0) = 0
		|				ИЛИ ВТ_ТаблицаТоваровВСоставеОСВременная.Количество = 0
		|			ТОГДА ВТ_ТаблицаТоваровВСоставеОСВременная.Сумма
		|		ИНАЧЕ ВТ_ТаблицаТоваровВСоставеОСВременная.Сумма - ВТ_ТаблицаТоваровВСоставеОСВременная.Сумма / ВТ_ТаблицаТоваровВСоставеОСВременная.Количество * ВТ_ПрослеживаемыеТоварыСРНПТ.ОстатокТовараСРНПТ
		|	КОНЕЦ,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.Организация,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ВидОперации,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.ПериодСобытия,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.СтранаПроисхождения,
		|	&ПустаяСсылкаРнпт,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.Количество,
		|	ВТ_ТаблицаТоваровВСоставеОСВременная.Сумма,
		|	NULL
		|ИЗ
		|	ВТ_ТаблицаТоваровВСоставеОСВременная КАК ВТ_ТаблицаТоваровВСоставеОСВременная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрослеживаемыеТоварыСРНПТ КАК ВТ_ПрослеживаемыеТоварыСРНПТ
		|		ПО ВТ_ТаблицаТоваровВСоставеОСВременная.Организация = ВТ_ПрослеживаемыеТоварыСРНПТ.Организация
		|			И ВТ_ТаблицаТоваровВСоставеОСВременная.Номенклатура = ВТ_ПрослеживаемыеТоварыСРНПТ.Номенклатура
		|			И ВТ_ТаблицаТоваровВСоставеОСВременная.ОсновноеСредство = ВТ_ПрослеживаемыеТоварыСРНПТ.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаОСВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОСРегистрируемыеВПрослеживаемостиРанее";
		
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Период,
	|	ИнвентаризацияОС.Организация КАК Организация
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Основание,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Результат = Запрос.Выполнить();
	
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаТаблицыДокумента(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ОстаткиОС(Объект, Знач СписокОС = Неопределено) Экспорт
	
	ВыводитьГрупповыеОС = Ложь;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаОстатков"	, Объект.Дата);
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение"	, Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СписокОС"		, СписокОС);
	Запрос.УстановитьПараметр("МОЛ"				, Объект.ОтветственноеЛицо);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС") И Не ЗначениеЗаполнено(Объект.ОтветственноеЛицо) Тогда
		ВыводитьГрупповыеОС = Истина;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, ) КАК МестонахождениеОСБухгалтерскийУчет
	|ГДЕ
	|	МестонахождениеОСБухгалтерскийУчет.Организация = &Организация
	|	И &УсловиеОС
	|	И &УсловиеПоМОЛ
	|	И &УсловиеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Местонахождение КАК ПодразделениеОрганизации,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ
	|	МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаОстатков,
	|				Организация = &Организация
	|					И &УсловиеОС) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО МестонахождениеОСБУ.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
	|	ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Счет КАК СчетУчета,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК СтоимостьПоУчетуЗаЕдиницу,
	|	1 КАК КоличествоПоУчету
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОсновныеСредства.СчетУчета
	|				ИЗ
	|					ОсновныеСредства),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОсновныеСредства.ОсновноеСредство
	|					ИЗ
	|						ОсновныеСредства)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость";
	
	УсловиеОС = ?(ЗначениеЗаполнено(СписокОС), "ОсновноеСредство В(&СписокОС)", "ИСТИНА");
	УсловиеПоМОЛ = ?(ЗначениеЗаполнено(Объект.ОтветственноеЛицо), "МОЛ = &МОЛ", "ИСТИНА");
	УсловиеПодразделение = ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "Местонахождение = &Подразделение", "ИСТИНА");
    УсловиеСубконто = ?(ЗначениеЗаполнено(СписокОС), "ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства) В (&СписокОС)", "ИСТИНА");
	
	Если ВыводитьГрупповыеОС Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапросаГрупповыхОС();
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОС"			, УсловиеОС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоМОЛ"		, УсловиеПоМОЛ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПодразделение", УсловиеПодразделение);
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСубконто"		, УсловиеСубконто);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("КоличествоФактическоеПрописью");
	ТаблицаИтогов.Колонки.Добавить("СтоимостьФактическаяПрописью");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("МОЛ",                  НСтр("ru = 'Лицо(а), ответственное(ые) за сохранность основных средств:'"));
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'"));
	ЗаголовокРазделаПодписей.Вставить("Проверяющий",          НСтр("ru = 'Указанные в настоящей описи данные и расчеты проверил'"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ПолеСлева		          = 10;
	ТабличныйДокумент.ПолеСправа    	      = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Расписка         = Макет.ПолучитьОбласть("Расписка");
	Примечание       = Макет.ПолучитьОбласть("Примечание");
	Подпись          = Макет.ПолучитьОбласть("Подпись");
	ПолеДаты         = Макет.ПолучитьОбласть("ПолеДаты");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ИтогоПоОписи     = Макет.ПолучитьОбласть("ИтогоПоОписи");
	Итоги            = Макет.ПолучитьОбласть("Итоги");
	Подсчеты         = Макет.ПолучитьОбласть("Подсчеты");
	Претензии        = Макет.ПолучитьОбласть("Претензии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВестиУчетГрупповыхОС", ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСОС.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.Ссылка.Организация КАК Организация,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	СУММА(ВЫБОР
	|			КОГДА &ВестиУчетГрупповыхОС
	|				ТОГДА ИнвентаризацияОСОС.КоличествоПоДаннымУчета
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК НаличиеПоДаннымУчета,
	|	СУММА(ВЫБОР
	|			КОГДА &ВестиУчетГрупповыхОС
	|				ТОГДА ИнвентаризацияОСОС.КоличествоФактическое
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИнвентаризацияОСОС.НаличиеФактическое
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК НаличиеФактическое,
	|	ИнвентаризацияОСОС.ОсновноеСредство.Код КАК ОсновноеСредствоКод
	|ПОМЕСТИТЬ ОСИОрганизации
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка,
	|	ИнвентаризацияОСОС.ОсновноеСредство,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая,
	|	ИнвентаризацияОСОС.НомерСтроки,
	|	ИнвентаризацияОСОС.Ссылка.Организация,
	|	ИнвентаризацияОСОС.Ссылка.Дата,
	|	ИнвентаризацияОСОС.ОсновноеСредство.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация,
	|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчетСрезПоследних.Период) КАК МестонахождениеПериод,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ втМестонахождение
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ОСИОрганизации.ОсновноеСредство КАК ОсновноеСредство
	|				ИЗ
	|					ОСИОрганизации КАК ОСИОрганизации)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период) КАК Период,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация,
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер) КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ втСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ОСИОрганизации.ОсновноеСредство КАК ОсновноеСредство
	|				ИЗ
	|					ОСИОрганизации КАК ОСИОрганизации)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОСИОрганизации.Ссылка КАК Ссылка,
	|	ОСИОрганизации.Дата КАК Дата,
	|	ОСИОрганизации.НомерСтроки КАК НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ОСИОрганизации.Организация КАК Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая КАК СтоимостьФактическая,
	|	МАКСИМУМ(ЕСТЬNULL(втМестонахождение.МОЛ, НЕОПРЕДЕЛЕНО)) КАК МОЛ,
	|	ВЫБОР
	|		КОГДА втСведенияОС.ИнвентарныйНомер <> """"
	|			ТОГДА втСведенияОС.ИнвентарныйНомер
	|		ИНАЧЕ ОСИОрганизации.ОсновноеСредствоКод
	|	КОНЕЦ КАК ИнвентарныйНомер,
	|	СУММА(ОСИОрганизации.НаличиеПоДаннымУчета) КАК НаличиеПоДаннымУчета,
	|	СУММА(ОСИОрганизации.НаличиеФактическое) КАК НаличиеФактическое
	|ПОМЕСТИТЬ ОСИСведения
	|ИЗ
	|	ОСИОрганизации КАК ОСИОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождение КАК втМестонахождение
	|		ПО ОСИОрганизации.Организация = втМестонахождение.Организация
	|			И ОСИОрганизации.ОсновноеСредство = втМестонахождение.ОсновноеСредство
	|			И ОСИОрганизации.Дата >= втМестонахождение.МестонахождениеПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОС КАК втСведенияОС
	|		ПО ОСИОрганизации.Организация = втСведенияОС.Организация
	|			И ОСИОрганизации.ОсновноеСредство = втСведенияОС.ОсновноеСредство
	|			И ОСИОрганизации.Дата >= втСведенияОС.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОСИОрганизации.Ссылка,
	|	ОСИОрганизации.Дата,
	|	ОСИОрганизации.НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство,
	|	ОСИОрганизации.Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА втСведенияОС.ИнвентарныйНомер <> """"
	|			ТОГДА втСведенияОС.ИнвентарныйНомер
	|		ИНАЧЕ ОСИОрганизации.ОсновноеСредствоКод
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОСИОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОСИСведения.Ссылка КАК Ссылка,
	|	ОСИСведения.Дата КАК Дата,
	|	ОСИСведения.МОЛ КАК МОЛ
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОСИСведения.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ОСИСведения.ОсновноеСредство) КАК КоличествоОС
	|ПОМЕСТИТЬ ВТ_КоличествоОСВДокументеИнвентаризации
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|
	|СГРУППИРОВАТЬ ПО
	|	ОСИСведения.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОС.Организация.КодОКВЭД2 = """"
	|			ТОГДА ИнвентаризацияОС.Организация.КодОКВЭД
	|		ИНАЧЕ ИнвентаризацияОС.Организация.КодОКВЭД2
	|	КОНЕЦ КАК ВидДеятельности,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ОСИСведения.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(КоличествоОСДокументе.КоличествоОС, 0) КАК КоличествоОС,
	|	ОСИСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОСИСведения.ОсновноеСредство.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОСИСведения.ОсновноеСредство.Наименование
	|		ИНАЧЕ ОСИСведения.ОсновноеСредство.НаименованиеПолное
	|	КОНЕЦ КАК ОсновноеСредствоНаименованиеПолное,
	|	ОСИСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ОСИСведения.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОСИСведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ОСИСведения.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ОСИСведения.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ОСИСведения.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИСведения.НаличиеФактическое КАК НаличиеФактическое
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоОСВДокументеИнвентаризации КАК КоличествоОСДокументе
	|		ПО ОСИСведения.Ссылка = КоличествоОСДокументе.Ссылка
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ПО ОСИСведения.Ссылка = ИнвентаризацияОС.Ссылка
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ОСИСведения.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОСИСведения.Дата КАК Дата,
	|	ОСИСведения.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ИнвентаризацияОСИнвентаризационнаяКомиссия.НомерСтроки, 0) КАК НомерСтроки,
	|	ЕСТЬNULL(ИнвентаризацияОСИнвентаризационнаяКомиссия.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицо,
	|	ЕСТЬNULL(ИнвентаризацияОСИнвентаризационнаяКомиссия.Председатель, ИСТИНА) КАК Председатель
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС.ИнвентаризационнаяКомиссия КАК ИнвентаризацияОСИнвентаризационнаяКомиссия
	|		ПО ОСИСведения.Ссылка = ИнвентаризацияОСИнвентаризационнаяКомиссия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	Председатель УБЫВ,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМОЛ = РезультатЗапроса[5].Выбрать();
	Док = РезультатЗапроса[7].Выбрать();
	ИнвентаризационнаяКомиссия = РезультатЗапроса[8].Выбрать();

	ПервыйДокумент = Истина;
	
	ОбработаныОбъекты = Ложь;
	Пока Док.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОбработаныОбъекты = Истина;
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаИтогов.Очистить();
		
		РежимСобственности = НСтр("ru = 'в собственности'");
		
		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.РежимСобственности   = РежимСобственности;
		Шапка.Параметры.Подразделение        = Док.ПодразделениеПредставление;
		Шапка.Параметры.Местонахождение      = Док.ПодразделениеПредставление;
		
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.Номер, Истина, Ложь);
		Шапка.Параметры.ДатаДокумента  = Док.Дата;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выведем расписку МОЛов 
		ТабличныйДокумент.Вывести(Расписка);
		
		// Выборка по МОЛ обходится синхронно с выборкой документов
		ВыборкаМОЛ.СледующийПоЗначениюПоля("Ссылка");
		МассивМОЛ = Новый Массив;
		Пока ВыборкаМОЛ.Следующий() Цикл
			Если МассивМОЛ.Найти(ВыборкаМОЛ.МОЛ) = Неопределено Тогда
				МассивМОЛ.Добавить(ВыборкаМОЛ.МОЛ);
			КонецЕсли;
		КонецЦикла;
		
		// Выведем подписи МОЛов
		ВыводитьЗаголовок  = Истина; // Флаг вывода заголовка набора подписей
		ВыводитьПримечание = Истина; // Флаг вывода примечания-звездочки
		
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛиц(Док.Организация, МассивМОЛ, Док.Дата);
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			ПодписьСПримечанием = Новый Массив;
			ПодписьСПримечанием.Добавить(Подпись);
			ПодписьСПримечанием.Добавить(Примечание);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
				
				// Выведем примечание
				ТабличныйДокумент.Вывести(Примечание);
				ВыводитьПримечание = Ложь;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 3 Тогда
			
			ПодписьСПримечанием = Новый Массив;
			ПодписьСПримечанием.Добавить(Подпись);
			ПодписьСПримечанием.Добавить(Примечание);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
				
				// Выведем примечание
				ТабличныйДокумент.Вывести(Примечание);
				ВыводитьПримечание = Ложь;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = ДанныеМОЛ.Количество() + 1 По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем примечание
		Если ВыводитьПримечание Тогда
			ТабличныйДокумент.Вывести(Примечание);
		КонецЕсли;
		
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//////////////////////////////////////////////////////////////////////
		// 2-я страница формы
		
		// Выведем заголовок таблицы	
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
		
		НаличиеФактическоеПоСтранице          = 0;
		СтоимостьФактическаяПоСтранице        = 0;
		НаличиеПоДаннымУчетаПоСтранице        = 0;
		СтоимостьПоДаннымУчетаПоСтранице      = 0;
		КоличествоПорядковыхНомеровНаСтранице = 0;
		
		НаличиеФактическоеПоОписи          = 0;
		СтоимостьФактическаяПоОписи        = 0;
		КоличествоПорядковыхНомеровПоОписи = 0;
		
		// Выведем строки таблицы
		
		Если Док.КоличествоОС > 0 Тогда
		
			Пока Док.Следующий() Цикл
				
				СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
				
				СтрокаТаблицы.Параметры.Заполнить(Док);
				
				// Присвоим имена с номерами строк областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое"        + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
				СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
				СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
				СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета"    + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
				
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ИтогоПоСтранице);
				СтрокаСПодвалом.Добавить(Итоги);
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
					
					ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
					
					// Присвоим имена с порядковыми номерами итогов областям таблицы.
					// Номера потребуются для включения/отключения видимости значений в ячейках.
					ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					
					// Выведем заголовок итогов по странице
					ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
					ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
					ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
					ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
					
					ТабличныйДокумент.Вывести(ИтогоПоСтранице);
					
					Итоги = Макет.ПолучитьОбласть("Итоги");
					
					// Присвоим имена с порядковыми номерами итогов областям таблицы.
					// Номера потребуются для включения/отключения видимости значений в ячейках.
					Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью"  + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
					
					КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,, ",,,ж,,,,,0");
					СтоимостьФактическаяПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета);
					
					// Выведем итоговые строки
					Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,, ",,,м,,,,,0");
					Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
					Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
					
					ТабличныйДокумент.Вывести(Итоги);
					
					// Добавим значения итогов по странице в таблицу итогов.
					// Они потребуются при включении видимости значений ячеек.
					НоваяСтрока = ТаблицаИтогов.Добавить();
					НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
					НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
					НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
					НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
					НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
					НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
					НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
					
					ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Выведем заголовок таблицы	
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
					НаличиеФактическоеПоСтранице          = 0;
					СтоимостьФактическаяПоСтранице        = 0;
					НаличиеПоДаннымУчетаПоСтранице        = 0;
					СтоимостьПоДаннымУчетаПоСтранице      = 0;
					КоличествоПорядковыхНомеровНаСтранице = 0;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(СтрокаТаблицы);
				
				НаличиеФактическоеПоСтранице          = НаличиеФактическоеПоСтранице          + Док.НаличиеФактическое;
				СтоимостьФактическаяПоСтранице        = СтоимостьФактическаяПоСтранице        + Док.СтоимостьФактическая;
				НаличиеПоДаннымУчетаПоСтранице        = НаличиеПоДаннымУчетаПоСтранице        + Док.НаличиеПоДаннымУчета;
				СтоимостьПоДаннымУчетаПоСтранице      = СтоимостьПоДаннымУчетаПоСтранице      + Док.СтоимостьПоДаннымУчета;
				КоличествоПорядковыхНомеровНаСтранице = КоличествоПорядковыхНомеровНаСтранице + 1;
				
				НаличиеФактическоеПоОписи          = НаличиеФактическоеПоОписи + Док.НаличиеФактическое;
				СтоимостьФактическаяПоОписи        = СтоимостьФактическаяПоОписи + Док.СтоимостьФактическая;
				КоличествоПорядковыхНомеровПоОписи = КоличествоПорядковыхНомеровПоОписи + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		
		// Выведем заголовок итогов по странице
		ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
		
		ТабличныйДокумент.Вывести(ИтогоПоСтранице);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");	
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + ПорядковыйНомерИтогов;
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью" + ПорядковыйНомерИтогов;
		
		КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,, ",,,ж,,,,,0");
		СтоимостьФактическаяПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета);
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,, ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
		Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
		
		ТабличныйДокумент.Вывести(Итоги);
		
		// Добавим значения итогов по странице в таблицу итогов.
		// Они потребуются при включении видимости значений ячеек.
		НоваяСтрока = ТаблицаИтогов.Добавить();
		НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
		НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
		НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
		НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
		НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
		НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
		НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
		
		ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
		
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//////////////////////////////////////////////////////////////////////
		// 3-я страница формы
		
		// Выведем заголовок итогов по описи
		ТабличныйДокумент.Вывести(ИтогоПоОписи);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописьюПоОписи";
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописьюПоОписи";
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровПоОписи,, ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(НаличиеФактическоеПоОписи,, ",,,ж,,,,,0");
		Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоОписи, ВалютаРегламентированногоУчета);
		
		ТабличныйДокумент.Вывести(Итоги);
		
		// Выведем фразу о подсчетах
		ТабличныйДокумент.Вывести(Подсчеты);
		
		ИнвентаризационнаяКомиссия.СледующийПоЗначениюПоля("Ссылка");
		
		ВыводитьЗаголовок = Истина;
		КоличествоЧленовКомиссии = 0;

		Пока ИнвентаризационнаяКомиссия.Следующий() Цикл
			
			Если КоличествоЧленовКомиссии > 0 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			Иначе
				Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Док.Организация, ИнвентаризационнаяКомиссия.ФизЛицо, Док.Дата);
			
			Подпись.Параметры.Должность          = ДанныеЧленаКомиссии.Должность;
			Подпись.Параметры.РасшифровкаПодписи = ДанныеЧленаКомиссии.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если КоличествоЧленовКомиссии < 4 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = КоличествоЧленовКомиссии + 1 По 4 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Перед выводом следующего набора подписей, нужно проверить, поместится ли он
		// на страницу целиком. Если нет, нужно начать вывод со следующей страницы.
		
		// Создаем массив строк для проверки, помещаются ли они на страницу
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Претензии);
		Для Итератор = 1 По ДанныеМОЛ.Количество() Цикл
			СтрокаСПодвалом.Добавить(Подпись);
		КонецЦикла;
		СтрокаСПодвалом.Добавить(ПолеДаты);
		СтрокаСПодвалом.Добавить(Подпись);
		СтрокаСПодвалом.Добавить(ПолеДаты);
		
		// Если планируемый набор подписей не помещается, начинаем новую страницу
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		// Выведем раздел об отсутствии претензий МОЛов
		Если Док.Количество() > 0 Тогда
			Претензии.Параметры.НомерСтрокиНачальный = 1;
			Претензии.Параметры.НомерСтрокиКонечный  = Док.КоличествоОС;
		Иначе	
			Претензии.Параметры.НомерСтрокиНачальный = "______";
			Претензии.Параметры.НомерСтрокиКонечный  = "______";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Претензии);
		
		// Выведем подписи МОЛов
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 3 Тогда
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеМОЛ.Количество() + 1) По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = Формат(Док.Дата, "ДЛФ=DD");
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		// Проверим, поместится ли проверяющий, если нет, то начнем новую страницу
		ПодписьСДатой = Новый Массив;
		ПодписьСДатой.Добавить(Подпись);
		ПодписьСДатой.Добавить(ПолеДаты);
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		// Выведем подпись проверяющего
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.Проверяющий;
		
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = НСтр("ru = '""______"" ___________________________ _______ г.'");
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ОбработаныОбъекты Тогда 
		Шаблон = МассивОбъектов[0];
		
		ТабличныйДокумент.Вывести(Шапка);
		ТабличныйДокумент.Вывести(Расписка);
		ТабличныйДокумент.Вывести(Итоги);	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, Шаблон);
	КонецЕсли;

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьИНВ18(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ПолеСлева          	  = 10;
	ТабличныйДокумент.ПолеСправа         	  = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ18";;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ18");
	
	// Получаем области макета для вывода в табличный документ
	Шапка                     = Макет.ПолучитьОбласть("Шапка");
	СекцияМОЛ                 = Макет.ПолучитьОбласть("СекцияМОЛ");
	СтрокаНадТаблицей         = Макет.ПолучитьОбласть("СтрокаНадТаблицей");
	ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ШапкаПодписейМОЛ          = Макет.ПолучитьОбласть("ШапкаПодписейМОЛ");
	Подпись                   = Макет.ПолучитьОбласть("Подпись");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВестиУчетГрупповыхОС", ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСОС.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.Ссылка.Организация КАК Организация,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА &ВестиУчетГрупповыхОС
	|			ТОГДА ИнвентаризацияОСОС.КоличествоПоДаннымУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА &ВестиУчетГрупповыхОС
	|			ТОГДА ИнвентаризацияОСОС.КоличествоФактическое
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НаличиеФактическое,
	|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК МаксПериодМеста,
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК МаксПериодБУ
	|ПОМЕСТИТЬ ОСИОрганизации
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&МассивОбъектов)
	|	И ВЫБОР
	|			КОГДА &ВестиУчетГрупповыхОС
	|				ТОГДА ИнвентаризацияОСОС.КоличествоПоДаннымУчета <> ИнвентаризацияОСОС.КоличествоФактическое
	|			ИНАЧЕ ИнвентаризацияОСОС.НаличиеПоДаннымУчета <> ИнвентаризацияОСОС.НаличиеФактическое
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка,
	|	ИнвентаризацияОСОС.ОсновноеСредство,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая,
	|	ИнвентаризацияОСОС.НомерСтроки,
	|	ИнвентаризацияОСОС.Ссылка.Организация,
	|	ИнвентаризацияОСОС.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА &ВестиУчетГрупповыхОС
	|			ТОГДА ИнвентаризацияОСОС.КоличествоПоДаннымУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ВестиУчетГрупповыхОС
	|			ТОГДА ИнвентаризацияОСОС.КоличествоФактическое
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация,
	|	Ссылка,
	|	МаксПериодМеста,
	|	МаксПериодБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОСИОрганизации.Ссылка КАК Ссылка,
	|	ОСИОрганизации.Дата КАК Дата,
	|	ОСИОрганизации.НомерСтроки КАК НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ОСИОрганизации.Организация КАК Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИОрганизации.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИОрганизации.НаличиеФактическое КАК НаличиеФактическое,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ВестиУчетГрупповыхОС
	|				ТОГДА ОСИОрганизации.ОсновноеСредство.Код
	|			ИНАЧЕ ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчет.МОЛ, НЕОПРЕДЕЛЕНО)
	|		КОНЕЦ) КАК МОЛ
	|ПОМЕСТИТЬ ОСИСведения
	|ИЗ
	|	ОСИОрганизации КАК ОСИОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодМеста = МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодБУ = ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОСИОрганизации.Ссылка,
	|	ОСИОрганизации.Дата,
	|	ОСИОрганизации.НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство,
	|	ОСИОрганизации.Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая,
	|	ОСИОрганизации.НаличиеПоДаннымУчета,
	|	ОСИОрганизации.НаличиеФактическое,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОСИОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОСИСведения.Ссылка КАК Ссылка,
	|	ОСИСведения.Дата КАК Дата,
	|	ОСИСведения.МОЛ КАК МОЛ
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ОСИСведения.НомерСтроки КАК НомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МинНомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МаксНомерСтроки,
	|	ОСИСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОСИСведения.ОсновноеСредство.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОСИСведения.ОсновноеСредство.Наименование
	|		ИНАЧЕ ОСИСведения.ОсновноеСредство.НаименованиеПолное
	|	КОНЕЦ КАК ОсновноеСредствоНаименованиеПолное,
	|	ОСИСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ОСИСведения.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОСИСведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ОСИСведения.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ОСИСведения.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИСведения.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИСведения.НаличиеФактическое КАК НаличиеФактическое,
	|	ОСИСведения.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ПО (ИнвентаризацияОС.Ссылка = ОСИСведения.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ОСИСведения.НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМОЛ = РезультатЗапроса[3].Выбрать();
	Док = РезультатЗапроса[4].Выбрать();
	
	
	ПервыйДокумент = Истина;
	
	ОбработанныхОбъектов = Ложь;

	Пока Док.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОбработанныхОбъектов = Истина;
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Подразделение        = Строка(Док.ПодразделениеОрганизации);
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.Номер, Истина, Ложь);
		Шапка.Параметры.ДатаДокумента  = Док.Дата;
		Шапка.Параметры.ДатаОкончанияИнвентаризацииЛокальныйФормат = "По состоянию на " + Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=ДД") +
			" проведена инвентаризация фактического наличия ценностей, находящихся на ответственном хранении"; 
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выборка по МОЛ обходится синхронно с выборкой документов
		ВыборкаМОЛ.СледующийПоЗначениюПоля("Ссылка");
		МассивМОЛ = Новый Массив;
		Пока ВыборкаМОЛ.Следующий() Цикл
			Если МассивМОЛ.Найти(ВыборкаМОЛ.МОЛ) = Неопределено Тогда
				МассивМОЛ.Добавить(ВыборкаМОЛ.МОЛ);
			КонецЕсли;
		КонецЦикла;
		
		// Выведем подписи МОЛов
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛиц(Док.Организация, МассивМОЛ, Док.Дата);
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СекцияМОЛ) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			СекцияМОЛ.Параметры.Должность = СтрокаМОЛ.Должность;
			СекцияМОЛ.Параметры.ФИО       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(СекцияМОЛ);
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 2 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СекцияМОЛ) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			Для Итератор = ДанныеМОЛ.Количество() + 1 По 2 Цикл
				
				СекцияМОЛ.Параметры.Должность = "";
				СекцияМОЛ.Параметры.ФИО       = "";
				
				ТабличныйДокумент.Вывести(СекцияМОЛ);
				
			КонецЦикла;
		
		КонецЕсли;
		
		// Проверим, помещаются ли строка над таблицей, заголовок и первая строка.
		ШапкаТаблицы = Новый Массив;
		ШапкаТаблицы.Добавить(СтрокаНадТаблицей);
		ШапкаТаблицы.Добавить(ЗаголовокТаблицы);
		ШапкаТаблицы.Добавить(СтрокаТаблицы);
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ШапкаТаблицы) Тогда
				
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;
		
		// Выведем строку над таблицей
		ТабличныйДокумент.Вывести(СтрокаНадТаблицей);
		
		// Выведем заголовок таблицы	
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		// Создадим переменные для накопления итогов по каждой странице
		ИтогИзлишекКоличество   = 0;
		ИтогИзлишекСтоимость    = 0;
		ИтогНедостачаКоличество = 0;
		ИтогНедостачаСтоимость  = 0;
		
		// Выведем строки таблицы
		Пока Док.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(Док);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			Если Док.МаксНомерСтроки = Док.Количество() Тогда  // если последняя строка, должна
				СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера); // помещаться и подпись гл.бухгалтера
			КонецЕсли;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы
				ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
				ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
				ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
				ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
				
				ТабличныйДокумент.Вывести(ПодвалТаблицы);
				
				// Обнулим переменные для накопления итогов по каждой странице
				ИтогИзлишекКоличество   = 0;
				ИтогИзлишекСтоимость    = 0;
				ИтогНедостачаКоличество = 0;
				ИтогНедостачаСтоимость  = 0;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы	
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			РазницаПоНаличию   = Док.НаличиеФактическое - Док.НаличиеПоДаннымУчета;
			РазницаПоСтоимости = Док.СтоимостьФактическая - Док.СтоимостьПоДаннымУчета;
			
			ИзлишекКоличество   = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
			ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
			НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
			НедостачаСтоимость  = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);
			
			ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
			ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость + ИзлишекСтоимость;
			ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
			ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость + НедостачаСтоимость;
			
			СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
			СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
			СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
			СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
			
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем подвал таблицы
		ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
		ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
		ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
		ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
		
		ТабличныйДокумент.Вывести(ПодвалТаблицы);
		
		// Выведем подпись бухгалтера
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Док.Организация, Док.Дата, Док.ПодразделениеОрганизации);
		
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтерПредставление;
		
		ТабличныйДокумент.Вывести(ПодписьГлавногоБухгалтера);
		
		// Проверим, помещаются ли шапка подписей и одна подпись
		Подписи = Новый Массив;
		Подписи.Добавить(ШапкаПодписейМОЛ);
		Подписи.Добавить(Подпись);
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подписи) Тогда
				
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;
		
		// Выведем шапку подписей МОЛ
		ТабличныйДокумент.Вывести(ШапкаПодписейМОЛ);
		
		// Выведем подписи МОЛов
		ЗаголовокРазделаПодписей = НСтр("ru = 'Материально ответственное(ые) лицо(а)'");
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 2 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Для Итератор = (ДанныеМОЛ.Количество() + 1) По 2 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ОбработанныхОбъектов Тогда 
		Шаблон = МассивОбъектов[0];

		ТабличныйДокумент.Вывести(Шапка);
		ТабличныйДокумент.Вывести(СекцияМОЛ);
		ТабличныйДокумент.Вывести(СтрокаНадТаблицей);
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);	
		ТабличныйДокумент.Вывести(ПодвалТаблицы);
		ТабличныйДокумент.Вывести(ПодписьГлавногоБухгалтера);	
		ТабличныйДокумент.Вывести(ШапкаПодписейМОЛ);
		ТабличныйДокумент.Вывести(Подпись);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, Шаблон);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.ПолеСлева               = 20;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ22";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОС.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ИнвентаризацияОС.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ИнвентаризацияОС.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК Подразделение,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОС.ДокументОснованиеДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИнвентаризацияОС.Дата
	|		ИНАЧЕ ИнвентаризацияОС.ДокументОснованиеДата
	|	КОНЕЦ КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.Ссылка.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.Председатель КАК Председатель,
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.ФизЛицо
	|ИЗ
	|	Документ.ИнвентаризацияОС.ИнвентаризационнаяКомиссия КАК ИнвентаризацияОСИнвентаризационнаяКомиссия
	|ГДЕ
	|	ИнвентаризацияОСИнвентаризационнаяКомиссия.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	Председатель УБЫВ,
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Док = РезультатЗапроса[0].Выбрать();
	ИнвентаризационнаяКомиссия = РезультатЗапроса[1].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Док.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Подразделение        = Строка(Док.ПодразделениеОрганизации);
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		
		Шапка.Параметры.НомерДокумента = Док.ДокументОснованиеНомер;
		Шапка.Параметры.ДатаДокумента  = Док.ДокументОснованиеДата;
		
		Шапка.Параметры.НаименованиеИмуществаОбязательств = НСтр("ru = 'основных средств'");
		
		ТабличныйДокумент.Вывести(Шапка);
		
		ИнвентаризационнаяКомиссия.СледующийПоЗначениюПоля("Ссылка");
		
		ВыводитьЗаголовок = Истина;
		КоличествоЧленовКомиссии = 0;

		СтруктураПараметровПодписи = Новый Структура("ЗаголовокРазделаПодписей, Должность, НаименованиеЧленаКомиссии");
		Пока ИнвентаризационнаяКомиссия.Следующий() Цикл
			
			Если КоличествоЧленовКомиссии > 0 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				СтруктураПараметровПодписи.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			Иначе
				СтруктураПараметровПодписи.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Док.Организация, ИнвентаризационнаяКомиссия.ФизЛицо, Док.Дата);
			
			СтруктураПараметровПодписи.Должность                 = ДанныеЧленаКомиссии.Должность;
			СтруктураПараметровПодписи.НаименованиеЧленаКомиссии = ДанныеЧленаКомиссии.Представление;
			
			Подпись.Параметры.Заполнить(СтруктураПараметровПодписи);
			
			ТабличныйДокумент.Вывести(Подпись);
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если КоличествоЧленовКомиссии < 4 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = КоличествоЧленовКомиссии + 1 По 4 Цикл
				
				СтруктураПараметровПодписи.ЗаголовокРазделаПодписей  = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				СтруктураПараметровПодписи.Должность                 = "";
				СтруктураПараметровПодписи.НаименованиеЧленаКомиссии = "";
				
				Подпись.Параметры.Заполнить(СтруктураПараметровПодписи);
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем подвал приказа
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подвал) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Подвал.Параметры.НаименованиеИмуществаОбязательств = НСтр("ru = 'основные средства'");
		Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Док.ДатаНачалаИнвентаризации, "ДЛФ=DD");
		Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
		Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Док.ПричинаПроведенияИнвентаризации;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Док.Организация, Док.Дата, Док.ПодразделениеОрганизации);
		
		Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжностьПредставление;
		Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.РуководительПредставление;
		
		ТабличныйДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Ссылка КАК Основание,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаГрупповыхОС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК ВосстановительнаяСтоимость,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток > 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток / ХозрасчетныйОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПоУчетуЗаЕдиницу,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоПоУчету 
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГрупповыеОбъектыОС),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА Подразделение = &Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И &УсловиеСубконто) КАК ХозрасчетныйОстатки";
	
	Возврат ТекстЗапроса;

КонецФункции 

#КонецОбласти

#Область ОбработчикиОбновления

// Отложенный обработчик обновления: заполняет в табличной части реквизиты КоличествоПоУчету и КоличествоФактическое,
// используемых в новых версиях программы по данным реквизитов  НаличиеПоУчету и НаличиеФактическое
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура РеструктуризацияТабличнойЧасти(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|ГДЕ
	|	НЕ ИнвентаризацияОСОС.Ссылка.ПометкаУдаления
	|	И (ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета
	|					ТОГДА ИнвентаризацияОСОС.КоличествоПоДаннымУчета = 0
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ИнвентаризацияОСОС.НаличиеФактическое
	|					ТОГДА ИнвентаризацияОСОС.КоличествоФактическое = 0
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = Результат.Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ИнвентаризацияОС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Или Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияОС") Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;

			
			Для Каждого СтрокаОС Из ДокументОбъект.ОС Цикл
				Если СтрокаОС.НаличиеПоДаннымУчета Тогда
					СтрокаОС.КоличествоПоДаннымУчета = 1;
				КонецЕсли;
				Если СтрокаОС.НаличиеФактическое Тогда
					СтрокаОС.КоличествоФактическое = 1;
				КонецЕсли;
			КонецЦикла;
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию(); 
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ИнвентаризацияОС.РеструктуризацияТабличнойЧасти() не удалось обработать документ ""ИнвентаризацияОС"" по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ИнвентаризацияОС, Выборка.Ссылка, ТекстСообщения);

		КонецПопытки;
	КонецЦикла;
	
	ПараметрыОбработчика.ОбработкаЗавершена = ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0;

КонецПроцедуры

#КонецОбласти


#КонецЕсли