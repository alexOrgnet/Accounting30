
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	ПолучитьНачислениеПоУмолчанию();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
		
		// Заполним дату приема
		Если Не ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
			Объект.ДатаПриема = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		// Очистим реквизит Сотрудник, если он уже принят.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
			Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		
		// Заполним реквизиты из значений заполнения.
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		Если Параметры.Свойство("ДатаПриема") И ЗначениеЗаполнено(Параметры.ДатаПриема) Тогда 
			Объект.ДатаПриема = Параметры.ДатаПриема;
		КонецЕсли;
		Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			Объект.Подразделение = Параметры.Подразделение;
		КонецЕсли;
		Если Параметры.Свойство("Должность") И ЗначениеЗаполнено(Параметры.Должность) Тогда 
			Объект.Должность = Параметры.Должность;
		КонецЕсли;
		Если Параметры.Свойство("Начисления") И Параметры.Начисления.Количество() > 0 Тогда 
			Объект.Начисления.Загрузить(Параметры.Начисления.Выгрузить());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "Владелец");
			ИначеЕсли ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ГоловнаяОрганизация");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Начисления.Количество() = 0 Тогда
			УстановитьОсновноеНачисление();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДатаПриема)
			И ЗначениеЗаполнено(Объект.Сотрудник)
			И Объект.ДатаПриема >= '20210101' Тогда
			Объект.НачалоТрудовойДеятельности = Истина;
			НачалоТрудовойДеятельности = Объект.НачалоТрудовойДеятельности;
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			ЗаполнитьДанныеСвязанныеССотрудником(Истина);
			УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
			
			УстановитьВидЗанятостиНовогоСотрудника(ЭтотОбъект);
			
		Иначе
			УстановитьУсловияПриема(ЭтотОбъект);
		КонецЕсли;
		
		УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
		УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(ЭтотОбъект);
		
		ВидЗанятостиПредыдущий = Объект.ВидЗанятости;
		КоличествоСтавокПредыдущее = Объект.КоличествоСтавок;
		
		РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтотОбъект);
		
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "ПриемНаРаботу");
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		
		Если Не ЗначениеЗаполнено(Объект.НаименованиеДокумента) Тогда
			Объект.НаименованиеДокумента = НСтр("ru='Приказ'");
		КонецЕсли;
		
		Если Объект.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа
			И Объект.Аванс = 0 Тогда
			Объект.Аванс = РазмерАвансаВПроцентахПоУмолчанию;
		КонецЕсли;
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
		УправлениеФормой();
		
	КонецЕсли;
	
	ЭтотОбъект.РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
	
	УстановитьОсновноеНачисление();
	
	УстановитьПредупреждениеРедактированияНомера();
	СервисЭлектронныхТрудовыхКнижек.ПриемНаРаботу_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьСостояниеДокумента();
	
	ПредупреждениеНерезидентАУСН =
		УправлениеПредупреждениямиАУСНВызовСервера.ТекстПредупрежденияНерезидент();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПриемНаРаботу",
		"ФормаДокумента",
		НСтр("ru='Новости: Прием на работу'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД" Тогда
		Если Источник <> Неопределено Тогда
			Если Параметр.Организация = Объект.Организация
				И Параметр.Сотрудники.Найти(Объект.Сотрудник) <> Неопределено Тогда
				ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(ТекущийОбъект.Организация);
	
	ПолучитьНачислениеПоУмолчанию();
	УстановитьПараметрыВыбораНачислений();
	ЗаполнитьДанныеСвязанныеССотрудником();
	УстановитьФункциональныеОпцииФормы();
	
	ВидЗанятостиПредыдущий = ТекущийОбъект.ВидЗанятости;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтотОбъект, Объект.Организация);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	РеквизитВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
		ТекущийОбъект.Аванс, ТекущийОбъект.Организация, ТекущийОбъект.СпособРасчетаАванса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтотОбъект);
	
	Если НЕ ПредупреждениеПоказано Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
			ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
				ЭтотОбъект, Объект.Организация);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли;
	
	Если Не ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
	Оповестить("Запись_ПриемНаРаботу", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УстановитьПредупреждениеРедактированияНомера();
	УправлениеФормой();
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОчиститьСообщения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НомерПриказа)) Тогда
		Объект.НомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаПриема)
		И Объект.ДатаПриема < '20210101' Тогда
		
		Объект.НачалоТрудовойДеятельности = Ложь;
		НачалоТрудовойДеятельности = Объект.НачалоТрудовойДеятельности;
		
	КонецЕсли;
	
	ДатаПриемаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоТрудовойДеятельностиПриИзменении(Элемент)
	
	Объект.НачалоТрудовойДеятельности = НачалоТрудовойДеятельности;
	
	Если Объект.НачалоТрудовойДеятельности Тогда
		
		СпособВеденияТрудовойКнижкиВыбранныйПоПрежнемуМестуРаботы = Ложь;
		
		Объект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки = Неопределено;
		Объект.ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки = '00010101';
		
	КонецЕсли;
	
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗаполнитьДанныеСвязанныеССотрудником(Истина);
	УстановитьСвязиПараметровВыбораОрганизации();
	УстановитьВидЗанятостиНовогоСотрудника(ЭтотОбъект);
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиКлиент.ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(
		Объект.Сотрудник,
		Объект.ФизическоеЛицо,
		Объект.Организация,
		Объект.ВидЗанятости,
		Объект.ДатаПриема);
		
	УстановитьУсловияПриема(ЭтотОбъект);
	ВидЗанятостиПредыдущий = Объект.ВидЗанятости;
	ПриИзмененииВидаЗанятости(ЭтотОбъект);
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтавокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Другая" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КоличествоСтавок", Объект.КоличествоСтавок);
		Оповещение = Новый ОписаниеОповещения("ВводКоличестваСтавокЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ВводСтавкиСотрудника",
			ПараметрыОткрытия,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		КоличествоСтавокПредыдущее    = Объект.КоличествоСтавок;
		Объект.КоличествоСтавок       = ВыбранноеЗначение;
		КоличествоСтавокПредставление = Окр(Объект.КоличествоСтавок, 5);
		УстановитьУсловияПриема(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтотОбъект);
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ОтразитьВТрудовойКнижкеПриИзменении(Элемент)
	
	Если Не (Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы")
		Или Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство")) Тогда
		
		ЭлектронныеТрудовыеКнижкиВызовСервера.ЗапомнитьОтражениеВТрудовойКнижкеСовместительств(Объект.ОтразитьВТрудовойКнижке);
	КонецЕсли;
	
	УправлениеСпособомВеденияНаПрежнемМестеРаботы();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	
	ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаНачислений", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "ПриемНаРаботу", Объект.НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "ПриемНаРаботу", Объект.НаименованиеВторогоДокументаОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеВторогоДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижкиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки) Тогда
		Объект.ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = "";
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаписиТрудовойКнижки.Количество() = 0 Тогда
		Возврат
	ИначеЕсли ЗаписиТрудовойКнижки.Количество() = 1 Тогда
		ПоказатьЗначение(, ЗаписиТрудовойКнижки[0].ЗаписьЭлектроннойТрудовойКнижки)
	Иначе
		СписокЗаписей = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ЗаписиТрудовойКнижки Цикл
			СписокЗаписей.Добавить(СтрокаТаблицы.ЗаписьЭлектроннойТрудовойКнижки);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокЗаписей, Элемент);
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВторойДокументОснованиеПриИзменении(Элемент)
	
	Если ЕстьВторойДокументОснование Тогда
		Элементы.ВторойДокументОснованиеГруппа.Видимость = Истина;
	Иначе
		Элементы.ВторойДокументОснованиеГруппа.Видимость = Ложь;
		
		Объект.НаименованиеВторогоДокументаОснования = "";
		Объект.СерияВторогоДокументаОснования        = "";
		Объект.НомерВторогоДокументаОснования        = "";
		Объект.ДатаВторогоДокументаОснования         = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// БлокировкаИзмененияОбъектов

&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец БлокировкаИзмененияОбъектов

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЗаписьЭлектроннойТрудовойКнижки(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Нельзя оформить запись электронной трудовой книжки на основании документа, помеченного на удаление.'"));
		Возврат;
	Иначе
		Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Вставить(0, КодВозвратаДиалога.Да,     НСтр("ru = 'Провести'"));
			Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередРегистрациейСледуетПровестиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед регистрацией записи электронной трудовой книжки документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
		Иначе
			СоздатьЗаписьЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	СпособВеденияТрудовойКнижкиВыбранныйПоПрежнемуМестуРаботы = ДоступноЗаполнениеЗаявления И (ЗначениеЗаполнено(Объект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки)
		Или ЗначениеЗаполнено(Объект.ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки));
	
	Если Не СпособВеденияТрудовойКнижкиВыбранныйПоПрежнемуМестуРаботы Тогда
		
		ТекущийОбъект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки =
			Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка();
		
		ТекущийОбъект.ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНачислениеПоУмолчанию()
	
	ОплатаПоОкладу = УчетЗарплаты.ОплатаПоОкладу(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Объект.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Объект.Аванс = 0;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.ДатаПриема);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриемаПриИзмененииНаСервере()
	
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	ПолучитьНачислениеПоУмолчанию();
	УстановитьОсновноеНачисление();
	УстановитьПараметрыВыбораНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	ПолучитьНачислениеПоУмолчанию();
	УстановитьОсновноеНачисление();
	УстановитьПараметрыВыбораНачислений();
	УстановитьФункциональныеОпцииФормы();
	УстановитьВидЗанятостиНовогоСотрудника(ЭтотОбъект);
	РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.Организация);
	ПрименитьИзменениеРасчетаАванса(ЭтотОбъект);
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "ПриемНаРаботу");
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УчетЗарплаты.СформироватьСписокСтавок(Элементы.КоличествоСтавокПредставление);
	КоличествоСтавокПредставление = Окр(Объект.КоличествоСтавок, 5);
	
	ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования =
		ЭлектронныеТрудовыеКнижкиВызовСервера.ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования();
		
	ЕстьВторойДокументОснование = ЗначениеЗаполнено(Объект.НаименованиеВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.ДатаВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.СерияВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.НомерВторогоДокументаОснования);
		
	НачалоТрудовойДеятельности = Объект.НачалоТрудовойДеятельности;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидЗанятостиНовогоСотрудника(Форма)
	
	Форма.Объект.ВидЗанятости = СотрудникиВызовСервера.ПолучитьВидЗанятостиДляНовогоСотрудника(Форма.Объект.Сотрудник, Форма.Объект.Организация);
	ПриИзмененииВидаЗанятости(Форма);
	УстановитьУсловияПриема(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловияПриема(Форма)
	
	УсловияПриема = УсловияПриемаПоВидуЗанятостиИСтавке(Форма.Объект.ВидЗанятости, Форма.Объект.КоличествоСтавок);
	
	УсловияПриемаПриОткрытии = УсловияПриемаПоВидуЗанятостиИСтавке(Форма.ВидЗанятостиПредыдущий, Форма.КоличествоСтавокПредыдущее);
	
	Если ПустаяСтрока(Форма.Объект.УсловияПриема) 
		ИЛИ УсловияПриемаПриОткрытии = Форма.Объект.УсловияПриема Тогда
		
		Форма.Объект.УсловияПриема = УсловияПриема;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УсловияПриемаПоВидуЗанятостиИСтавке(ВидЗанятости, КоличествоСтавок)
	
	ОписаниеВидаЗанятости = "";
	
	Если ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы") Тогда
		ОписаниеВидаЗанятости = НСтр("ru='Основное место работы'");
		Если КоличествоСтавок = 1 Тогда
			ОписаниеВидаЗанятости = СтрШаблон(НСтр("ru='%1, %2'"), ОписаниеВидаЗанятости, НСтр("ru='полная занятость'"));
		Иначе
			ОписаниеВидаЗанятости = СтрШаблон(НСтр("ru='%1, %2'"), ОписаниеВидаЗанятости, НСтр("ru='сокращенная рабочая неделя'"));
		КонецЕсли;
	Иначе
		ОписаниеВидаЗанятости = НСтр("ru='Работа по совместительству, сокращенная рабочая неделя'");
	КонецЕсли;
	
	Возврат ОписаниеВидаЗанятости;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСвязанныеССотрудником(ЗаполнитьФизическоеЛицоОбъекта = Ложь)
	
	ИменаКадровыхДанных = "ГоловнаяОрганизация,ВидЗастрахованногоЛица";
	Если ЗаполнитьФизическоеЛицоОбъекта Тогда
		ИменаКадровыхДанных = ИменаКадровыхДанных + "," + "ФизическоеЛицо";
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, ИменаКадровыхДанных, Объект.ДатаПриема);
	
	ДоступноЗаполнениеЗаявления = Истина;
	
	ДанныеЗаявления = Новый Структура("Дата,ВидЗаявления");
	Если КадровыеДанные.Количество() > 0 Тогда
		
		ГоловнаяОрганизацияСотрудника = КадровыеДанные[0].ГоловнаяОрганизация;
		ВидЗастрахованногоЛица = КадровыеДанные[0].ВидЗастрахованногоЛица;
		
		Если ЗаполнитьФизическоеЛицоОбъекта Тогда
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
		КонецЕсли;
		
		ДанныеЗаявления = ЭлектронныеТрудовыеКнижки.ПоследнееЗаявлениеОВеденииТрудовойКнижки(
			КадровыеДанные[0].ФизическоеЛицо, Объект.ДатаПриема, Объект.Ссылка);
			
		ДоступноЗаполнениеЗаявления = Не ЭлектронныеТрудовыеКнижки.ЗаявлениеОВеденииТрудовойКнижкиОформлялось(
			КадровыеДанные[0].ФизическоеЛицо, Объект.Ссылка);
			
		ЭтоНачалоТрудовойДеятельности = КадровыйУчет.ЭтоНачалоТрудовойДеятельности(
			КадровыеДанные[0].ФизическоеЛицо, Объект.ДатаПриема, Объект.Ссылка);
		
		Если ЗаполнитьФизическоеЛицоОбъекта
			И (Объект.ДатаПриема >= '20210101'
				Или Не ЗначениеЗаполнено(Объект.ДатаПриема))Тогда
			
			Объект.НачалоТрудовойДеятельности = ЭтоНачалоТрудовойДеятельности;
			НачалоТрудовойДеятельности = Объект.НачалоТрудовойДеятельности;
		КонецЕсли;
		
	Иначе
		
		ГоловнаяОрганизацияСотрудника = Неопределено;
		ВидЗастрахованногоЛица = Неопределено;
		
		Если ЗаполнитьФизическоеЛицоОбъекта Тогда
			Объект.ФизическоеЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(ЭтотОбъект);
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(Форма)
	
	ВидимостьПолей = ЗначениеЗаполнено(Форма.ВидЗастрахованногоЛица)
		И Форма.ВидЗастрахованногоЛица <> ПредопределенноеЗначение("Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"УсловияРаботыИПроживанияИностранныхГраждан",
		"Видимость",
		ВидимостьПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязиПараметровВыбораОрганизации()
	
	СотрудникЗаполнен = ЗначениеЗаполнено(Объект.Сотрудник);
	СвязиПараметровВыбораОрганизацииУстановлены = Элементы.Организация.СвязиПараметровВыбора.Количество() > 0;
	
	НеобходимоПереустановитьСвязиПараметровВыбораОрганизации = 
		СотрудникЗаполнен И НЕ СвязиПараметровВыбораОрганизацииУстановлены
		ИЛИ НЕ СотрудникЗаполнен И СвязиПараметровВыбораОрганизацииУстановлены;
		
	Если НеобходимоПереустановитьСвязиПараметровВыбораОрганизации Тогда
			
		УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораОрганизацииНаСервере()
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизацияСотрудника) Тогда
		Связь = Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизацияСотрудника");
		СвязиПараметровВыбора.Добавить(Связь);
	КонецЕсли; 
		
	Элементы.Организация.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВидаЗанятости(Форма)
	
	Если Форма.ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
		Форма.Объект.ОтразитьВТрудовойКнижке = Истина;
	ИначеЕсли Не (Форма.Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы")
		Или Форма.Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство")) Тогда
		
		Форма.Объект.ОтразитьВТрудовойКнижке = ЭлектронныеТрудовыеКнижкиВызовСервера.ОтражениеВТрудовойКнижкеСовместительств();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		
		Объект.ТрудоваяФункция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Должность, "ТрудоваяФункция");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкладПриИзменении(Элемент)
	
	ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
	Если ОсновныеНачисления.Количество() = 0 Тогда
		ОсновноеНачисление = Объект.Начисления.Добавить();
		ОсновноеНачисление.Начисление = ОплатаПоОкладу;
	Иначе
		ОсновноеНачисление = ОсновныеНачисления[0];
	КонецЕсли;
	ОсновноеНачисление.Размер = Оклад;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура ВводКоличестваСтавокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Модифицированность            = Истина;
		КоличествоСтавокПредыдущее    = Объект.КоличествоСтавок;
		Объект.КоличествоСтавок       = Результат;
		КоличествоСтавокПредставление = Окр(Объект.КоличествоСтавок, 5);
		УстановитьУсловияПриема(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			МассивСтрок.Добавить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	ПередаваемыеСведения = Новый Структура;
	ПередаваемыеСведения.Вставить("Организация",                      Объект.Организация);
	ПередаваемыеСведения.Вставить("Дата",                             Объект.Дата);
	ПередаваемыеСведения.Вставить("УникальныйИдентификаторВладельца", УникальныйИдентификатор);
	ПередаваемыеСведения.Вставить("МассивСтрок",                      Новый ФиксированныйМассив(МассивСтрок));
	
	Возврат ПоместитьВоВременноеХранилище(ПередаваемыеСведения, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		Если РезультатРедактирования.Свойство("УникальныйИдентификаторВладельца")
			И РезультатРедактирования.УникальныйИдентификаторВладельца = УникальныйИдентификатор Тогда
			ЗаполнитьТаблицуНачислений(РезультатРедактирования.АдресМассиваСтрок);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений(АдресМассиваСтрок)
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			МассивСтрокКУдалению.Добавить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачисления ИЗ МассивСтрокКУдалению Цикл
		Объект.Начисления.Удалить(СтрокаНачисления);
	КонецЦикла;
	
	МассивСтрок = ПолучитьИзВременногоХранилища(АдресМассиваСтрок);

	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
	КонецЦикла;
	
	ОписаниеДоплат();
	
КонецПроцедуры

&НаСервере
Функция ОписаниеДоплат()
	
	КоличествоДоплат = Объект.Начисления.Количество();
	Если КоличествоДоплат > 0 Тогда
		ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
		КоличествоДоплат = КоличествоДоплат - ОсновныеНачисления.Количество();
	КонецЕсли;
	Если КоличествоДоплат <= 0 Тогда
		НадписьДоплаты = НСтр("ru = 'Доплаты'");
	Иначе
		СуммаДоплат = 0;
		Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
			Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
				СуммаДоплат = СуммаДоплат + СтрокаНачисления.Размер;
			КонецЕсли;
		КонецЦикла;
		НадписьДоплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доплаты: %1'"),
			Формат(СуммаДоплат, "ЧЦ=15; ЧДЦ=2; ЧН="));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросПередРегистрациейСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если НЕ ДокументПроведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьЭлектроннойТрудовойКнижки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьЭлектроннойТрудовойКнижки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", Объект.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Объект.Организация));
	
	ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатиеЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Объект.НаименованиеДокумента = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПоказатьЗначение(, ВыбранныйЭлемент.Значение)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки()
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, Объект.Ссылка, Новый Структура);
	// Конец БлокировкаИзмененияОбъектов
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СтатусЗаписиЭлектроннойТрудовойКнижки()
	
	УчетЗарплаты.СтатусЗаписиЭлектроннойТрудовойКнижки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	УчетЗарплаты.УправлениеФормойКадровогоМероприятия(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЕстьВторойДокументОснование",
		"Видимость",
		ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВторойДокументОснованиеГруппа",
		"Видимость",
		ЕстьВторойДокументОснование
		И ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования);
		
	Элементы.ГруппаПредупреждениеНерезидентАУСН.Видимость = УчетЗарплаты.ЭтоНерезидент(Объект.ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеРедактированияНомера()
	
	Если ПустаяСтрока(Объект.НомерПриказа) Тогда
		ПредупреждениеПриРедактированииРеквизита = НСтр("ru = 'Номер заполняется при записи автоматически'");
	Иначе
		ПредупреждениеПриРедактированииРеквизита = "";
	КонецЕсли;
	
	Элементы.НомерПриказа.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактированииРеквизита;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеНачисление()
	
	Если Объект.Начисления.Количество() = 0 Тогда
		ОтборНачислений = Новый Структура;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ДополнитьОтборНачислений(ОтборНачислений, Объект.Организация, Объект.Дата);
		КонецЕсли;
		ПовременныеНачисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
			Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда, ОтборНачислений);
		
		
		
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Начисление = ОплатаПоОкладу;
	Иначе
		ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
		Если ОсновныеНачисления.Количество() <> 0 Тогда
			Оклад = ОсновныеНачисления[0].Размер;
		КонецЕсли;
	КонецЕсли;
	ОписаниеДоплат();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСпособомВеденияНаПрежнемМестеРаботы()
	
	Если НЕ Объект.ОтразитьВТрудовойКнижке Тогда
		Объект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки  ="";
		Объект.ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки = '00010101';
	КонецЕсли;
	УстановитьДоступностьОтображенияВТрудовойКнижке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОтображенияВТрудовойКнижке(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЗаявлениеОВыбореСпособаВеденияТрудовойКнижкиГруппа",
		"Доступность",
		Форма.Объект.ОтразитьВТрудовойКнижке
		И Не Форма.Объект.НачалоТрудовойДеятельности);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЗаявлениеОВыбореСпособаВеденияТрудовойКнижкиГруппа",
		"Видимость",
		Форма.ДоступноЗаполнениеЗаявления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаЗаявленияОВыбореСпособаВеденияТрудовойКнижки",
		"Видимость",
		ЗначениеЗаполнено(Форма.Объект.ВидЗаявленияОВыбореСпособаВеденияТрудовойКнижки));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачалоТрудовойДеятельности",
		"Доступность",
		Форма.Объект.ОтразитьВТрудовойКнижке);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачалоТрудовойДеятельности",
		"Видимость",
		(Не ЗначениеЗаполнено(Форма.Объект.ДатаПриема) Или Форма.Объект.ДатаПриема >= '20210101')
			И (Форма.ЭтоНачалоТрудовойДеятельности Или Форма.Объект.НачалоТрудовойДеятельности));
		
КонецПроцедуры

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

&НаСервере
Процедура УстановитьПараметрыВыбораНачислений()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ФормаДокументаУстановитьПараметрыВыбораНачислений(
			ЭтотОбъект, Объект.Организация, Объект.ДатаПриема);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти

