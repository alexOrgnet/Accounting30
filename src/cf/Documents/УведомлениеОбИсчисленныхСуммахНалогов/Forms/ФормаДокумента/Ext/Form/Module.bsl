#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И КонтекстныйВызов Тогда
			Объект.Организация = Параметры.Организация;
			ПараметрыАвтозаполнения = "КонтекстныйВызов, АдресХранилищаТаблицыНалоги, ПериодСобытия, Правило, РегистрацияВНалоговомОргане";
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, ПараметрыАвтозаполнения);
			ЗаполнитьТаблицуНалоги();
		КонецЕсли;
		Объект.Уведомление = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьСсылку();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(
		ЭтотОбъект, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Уведомление);
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НалогиСчетУчета"));
	Элементы.НалогиВидНалогаНДС.Видимость = Не ПоказыватьСчетаУчетаВДокументах;
	
	#Область СтандартныеПодсистемы

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
	ОбновитьИнформационнуюПанельБРО();
	
	НастроитьФормуПриОткрытииИзПомощника();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодключитьОбработчикОжидания("Подключаемый_ПровестиДокументПриОткрытииИзПомощника", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнениеЗадачБухгалтера.УстановитьСвойстваУведомленияПриРегистрации(
		ТекущийОбъект,
		Правило,
		ПериодСобытия,
		,
		РегистрацияВНалоговомОргане);
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Уведомление);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Период",      Объект.Дата);
	
	Оповестить("Запись_УведомлениеОбИсчисленныхСуммахНалогов", ПараметрыОповещения, Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("КлючСтроки") Тогда
			Модифицированность = Истина;
			Если ВыбранноеЗначение.Свойство("АдресТаблицыНалоговыйАгентНДСВХранилище") Тогда
				ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение);
				ОбновитьИтоги();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма",          Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	СтруктураПараметров.Вставить("ЭтоОтчет",       Ложь);
	СтруктураПараметров.Вставить("НовСтатус",      Форма.Элементы.НаименованиеЭтапа.Заголовок);
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиНалоги

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Или Копирование Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.НачалоПериода)
			Или Не ЗначениеЗаполнено(ТекущиеДанные.КонецПериода) Тогда
			ТекущиеДанные.НачалоПериода = НачалоМесяца(Объект.Дата);
			ТекущиеДанные.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		Если НоваяСтрока И Не Копирование Тогда
			ТекущиеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			ПараметрыСтроки = ОписаниеСтрокиДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
			РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
		ИначеЕсли Копирование Тогда
			Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
				ТекущиеДанные.Сумма = 0;
			КонецЕсли;
		КонецЕсли;
		ПараметрыСтроки = ОписаниеСтрокиДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
		ТекущиеДанные.СрокУплаты = СрокУплаты(ПараметрыСтроки,
			СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено);
		ТекущиеДанные.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ТекущиеДанные.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя = "НалогиСумма" Тогда
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ОткрытьФормуРедактированияАгентскогоНДС(ВыбраннаяСтрока, "Налоги");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли Поле.Имя = "НалогиПредставлениеПериода" Тогда
		СтандартнаяОбработка = Ложь;
		НачалоПериода = НачалоМесяца(ТекущиеДанные.НачалоПериода);
		КонецПериода  = КонецМесяца(ТекущиеДанные.КонецПериода);
		Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
			НачалоПериода = НачалоМесяца(Объект.Дата);
			КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		МинимальныйПериод = НачалоГода(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1));
		ИмяФормыПериода = "ВыборСтандартногоПериодаМесяц";
		ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода, ОграничениеСнизу, МинимальныйПериод",
			НачалоМесяца(НачалоПериода), КонецМесяца(КонецПериода),
			МинимальныйПериод, МинимальныйПериод);
		Если НалогиУплачиваемыеПоквартально.Найти(ТекущиеДанные.Налог) <> Неопределено Тогда
			ИмяФормыПериода = "ВыборСтандартногоПериодаКвартал";
		ИначеЕсли НалогиУплачиваемыеЕжемесячно.Найти(ТекущиеДанные.Налог) = Неопределено Тогда
			ПараметрыВыбораПериода.Вставить("ВыборКварталов", Истина);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтандартногоПериодаЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма." + ИмяФормыПериода,
			ПараметрыВыбораПериода,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиНалогПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	НалогПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ТекущиеДанные.СчетУчета Тогда 
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	ЗаполнитьДобавленнуюКолонкуТаблицы(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиРегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиСуммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
		ОткрытьФормуРедактированияАгентскогоНДС(ТекущиеДанные, "Налоги");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СчетУчета = ТекущиеДанные.ВидНалогаНДС;
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ТекущиеДанные.СчетУчета Тогда
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	СписокНалоговДляЗаполнения = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru='Для заполнения документа необходимо выбрать организацию.'");
		Заголовок = НСтр("ru = 'Ошибка заполнения'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , Заголовок);
		Возврат;
	КонецЕсли;
	
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОчиститьСообщения();
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьВыгрузкуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьПроверитьВИнтернетеЗавершение", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьПроверитьВИнтернетеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношения(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьКонтрольныеСоотношенияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	Объект.РазрешитьВыгружатьСОшибками = Не Объект.РазрешитьВыгружатьСОшибками;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Объект.РазрешитьВыгружатьСОшибками;
	Модифицированность = Истина;
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417() Экспорт
	
	ОчиститьСообщения();
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПоказатьСДвухмернымШтрихкодомPDF417Завершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПоказатьСДвухмернымШтрихкодомPDF417Завершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	СтруктураВыгрузки = Новый Структура("ТестВыгрузки,КодировкаВыгрузки", 
			Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки);
	СтруктураВыгрузки.Вставить("Данные", УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетДвоичныхДанных(УведомлениеОбъект.ИмяОтчета, "TIFF_2023_1"));
	СтруктураВыгрузки.Вставить("ИмяФайла", "1110355_5.02000_02.tif");
	Возврат СтруктураВыгрузки;
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоказыватьСчетаУчетаВДокументах = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах");
	
	СписокСчетовАгентскогоНДС = УчетНДСБП.СписокСчетовАгентскогоНДС();
	СписокОписанийСчетовНДС   = УчетНДСБП.СписокОписанийСчетовНДС();
	Налог_НДС = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	СписокСчетовАгентскогоНДФЛ = УчетЗарплаты.СписокСчетовАгентскогоНДФЛ();
	НалогиУплачиваемыеЕжемесячно = Новый ФиксированныйМассив(
		ЕдиныйНалоговыйСчет.НалогиПоВиду(ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеЕжемесячно(), Объект.Дата));
	НалогиУплачиваемыеПоквартально = Новый ФиксированныйМассив(
		ЕдиныйНалоговыйСчет.НалогиПоВиду(ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеПоквартально(), Объект.Дата));
	ВидыАгентскогоНДФЛ = Новый ФиксированныйМассив(
		ЕдиныйНалоговыйСчет.НалогиПоВиду(ЕдиныйНалоговыйСчетПовтИсп.ВидыАгентскогоНДФЛ(), Объект.Дата));
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ = УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ();
	
	Для Каждого ЗначениеВыбора Из СписокОписанийСчетовНДС Цикл
		Элементы.НалогиВидНалогаНДС.СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
	КонецЦикла;
	
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Объект.РазрешитьВыгружатьСОшибками;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьРеквизитыОрганизации();
	
	ЗаполнитьОграничениеСчетовУчета();
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриОткрытииИзПомощника()
	
	Если Не КонтекстныйВызов Тогда
		Возврат;
	КонецЕсли;
	
	ПодключенаОтчетность = Подключена1СОтчетность(Объект.Организация);
	СостояниеОтправкиДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Объект.Уведомление);
	ТолькоПросмотр = СостояниеОтправкиДокумента.Отправлено;
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КоманднаяПанельКонтекстПомощника", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "Видимость", ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "Доступность", Не СостояниеОтправкиДокумента.Отправлено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "КнопкаПоУмолчанию", ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПровестиИЗакрытьКонтекстПомощника", "Видимость", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПровестиИЗакрытьКонтекстПомощника", "КнопкаПоУмолчанию", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ЗаписатьНаДискКонтекстПомощника", "Видимость", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКоманднаяПанельНалоги", "Видимость", Ложь);
	
	Элементы.Переместить(Элементы.ПодменюПечать, Элементы.КоманднаяПанельКонтекстПомощника, Элементы.ЗаписатьНаДискКонтекстПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПровестиДокументПриОткрытииИзПомощника()
	
	Если Не КонтекстныйВызов Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПериодПримененияЕНП =
		Объект.Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПроверитьКонтрольныеСоотношения",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиПредставлениеПериода",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиСрокУплатыПериода",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиСрокУплаты",
		"Видимость",
		Не ПериодПримененияЕНП);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграничениеСчетовУчета()
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.НалогиСчетУчета,
		ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчета(Объект.Дата),
		Ложь,
		Ложь,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНалоги()
	
	Если ЗначениеЗаполнено(АдресХранилищаТаблицыНалоги) Тогда
		ТаблицыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыНалоги);
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоги) Тогда
			Объект.Налоги.Загрузить(ТаблицыЗаполнения.ТаблицаНалоги);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС) Тогда
			Объект.НалоговыйАгентНДС.Загрузить(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиДокумента()
	
	ОписаниеСтроки = Новый Структура("НомерСтроки, Налог, КодБК, СчетУчета, КлючСтроки,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, Сумма, СрокУплаты,
		|НачалоПериода, КонецПериода, ПредставлениеПериода, ПоказыватьСчетУчета, ВидНалогаНДС,
		|ВидПлатежаВГосБюджет, УровеньБюджета, ЕстьВидПлатежаВГосБюджет, ЕстьУровеньБюджета");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ЭтоЮрЛицо           = Истина;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
		ЭтоЮрЛицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	КонецЕсли;
	
	Если Не КонтекстныйВызов Тогда
		РегистрацияВНалоговомОргане = "";
	ИначеЕсли Объект.Организация <> Параметры.Организация Тогда
		РегистрацияВНалоговомОргане = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане)  И ЗначениеЗаполнено(Объект.Организация) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.Налог) Тогда
		ПараметрыСтроки.КодБК     = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ПараметрыСтроки.Налог, , Объект.Дата);
		ПараметрыСтроки.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(ПараметрыСтроки.Налог, Объект.Дата);
		
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСтроки.Налог, "ВидНалога");
		Если ЗначениеЗаполнено(ВидНалога) Тогда
			
			ПорядокУплаты = Неопределено;
			Если Объект.Дата < ДатаПереходаНаЕдиныйНалоговыйПлатеж
				Или (Объект.Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж И ВидыАгентскогоНДФЛ.Найти(ПараметрыСтроки.Налог) = Неопределено) Тогда
				ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
					Объект.Организация,
					ВидНалога,
					Объект.Дата);
			КонецЕсли;
			
			Если ПорядокУплаты <> Неопределено Тогда
				ПараметрыСтроки.СрокУплаты = ПорядокУплаты.Срок;
			Иначе
				ПараметрыСтроки.СрокУплаты = СрокУплаты(ПараметрыСтроки,
					СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено);
			КонецЕсли;
			
			Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
				Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовСвышеПредела(ПараметрыСтроки.СрокУплаты);
				ПараметрыСтроки.НачалоПериода = НачалоМесяца(ПараметрыСтроки.СрокУплаты);
				ПараметрыСтроки.КонецПериода  = КонецМесяца(ПараметрыСтроки.СрокУплаты);
			ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф Тогда
				ПараметрыСтроки.КонецПериода  = КонецГода(ПараметрыСтроки.СрокУплаты);
				ПараметрыСтроки.НачалоПериода = НачалоМесяца(ПараметрыСтроки.КонецПериода);
				Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовЕдиныйТариф(ПараметрыСтроки.СрокУплаты);
			ИначеЕсли ЗначениеЗаполнено(ПараметрыСтроки.СрокУплаты) Тогда
				Если НалогиУплачиваемыеПоквартально.Найти(ПараметрыСтроки.Налог) <> Неопределено Тогда
					ПараметрыСтроки.НачалоПериода = НачалоКвартала(ДобавитьМесяц(ПараметрыСтроки.СрокУплаты, -3));
					ПараметрыСтроки.КонецПериода  = КонецКвартала(ПараметрыСтроки.НачалоПериода);
				ИначеЕсли ВидыАгентскогоНДФЛ.Найти(ПараметрыСтроки.Налог) <> Неопределено Тогда
					ПараметрыСтроки.НачалоПериода = НачалоМесяца(ПараметрыСтроки.СрокУплаты);
					ПараметрыСтроки.КонецПериода  = КонецМесяца(ПараметрыСтроки.СрокУплаты);
				Иначе
					ПараметрыСтроки.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ПараметрыСтроки.СрокУплаты, -1));
					ПараметрыСтроки.КонецПериода  = КонецМесяца(ПараметрыСтроки.НачалоПериода);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		ПараметрыСтроки.СрокУплаты = СрокУплаты(ПараметрыСтроки,
			СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено);
	КонецЕсли;
		
	Если Объект.Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
		Если ЗначениеЗаполнено(ПараметрыСтроки.СрокУплаты) Тогда
			ПараметрыСтроки.СрокУплаты = НачалоДня(ПараметрыСтроки.СрокУплаты);
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат(ПроизводственныйКалендарь);
			ПараметрыПолучения.ПолучатьДатыЕслиКалендарьНеЗаполнен = Истина;
			ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
				ПроизводственныйКалендарь,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСтроки.СрокУплаты),
				ПараметрыПолучения);
			НовыйСрокУплаты = ГрафикПереноса[ПараметрыСтроки.СрокУплаты];
			Если ЗначениеЗаполнено(НовыйСрокУплаты) Тогда
				ПараметрыСтроки.СрокУплаты = НовыйСрокУплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ПараметрыСтроки.СчетУчета Тогда
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ПараметрыСтроки.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено Тогда
			ПараметрыСтроки.Сумма = 0;
		КонецЕсли;
	Иначе
		ПараметрыСтроки.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ПараметрыСтроки.НомерСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ПараметрыСтроки.СчетУчета;
	
	Если ПараметрыСтроки.Налог = Налог_НДС Тогда
		ПараметрыСтроки.ВидНалогаНДС = ПараметрыСтроки.СчетУчета;
	КонецЕсли;
	
	ЗаполнитьДобавленнуюКолонкуТаблицы(ПараметрыСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.РегистрацияВНалоговомОргане) Тогда
		ПараметрыСтроки.КодПоОКТМО =
			Справочники.РегистрацииВНалоговомОргане.КодТерритории(ПараметрыСтроки.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияАгентскогоНДС(ВыбранноеЗначение, ИмяТаблицы)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ДанныеСтроки = Объект[ИмяТаблицы].НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПроверятьСрокУплаты = Объект.Дата < ДатаПереходаНаЕдиныйНалоговыйПлатеж;
	
	Если (ПроверятьСрокУплаты И (ЗначениеЗаполнено(ДанныеСтроки.СрокУплаты) И ДанныеСтроки.СрокУплаты < НачалоДня(Объект.Дата)))
		Или Не ЗначениеЗаполнено(ДанныеСтроки.СрокУплаты) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"":
			| - срок уплаты должен быть указан и быть больше даты документа'"),
			ДанныеСтроки.НомерСтроки);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Налоги", ДанныеСтроки.НомерСтроки, "СрокУплаты"),
			"Объект");
		РазблокироватьДанныеФормыДляРедактирования();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("Период",         ДанныеСтроки.СрокУплаты);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("СчетУчета",      ДанныеСтроки.СчетУчета);
	ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючСтроки",     ДанныеСтроки.КлючСтроки);
	ПараметрыФормы.Вставить("АдресТаблицыНалоговыйАгентНДСВХранилище", АдресТаблицыНалоговыйАгентНДС(ДанныеСтроки.КлючСтроки));
	
	ОткрытьФорму("ОбщаяФорма.ПодборДокументовНалоговогоАгента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыНалоговыйАгентНДС(КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить(Новый Структура("КлючСтроки", КлючСтроки));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНалоговыйАгентНДС, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение)
	
	ТаблицаНалоговыйАгентНДС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыНалоговыйАгентНДСВХранилище);
	МассивСтрок = Объект.НалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", ВыбранноеЗначение.КлючСтроки));
	Для Каждого Строка ИЗ МассивСтрок Цикл
		Объект.НалоговыйАгентНДС.Удалить(Строка);
	КонецЦикла;
	
	ИтогСуммаЗаписей     = ТаблицаНалоговыйАгентНДС.Итог("Сумма");
	Если Объект.Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
		ИтогСуммаУведомления = ИтогСуммаЗаписей;
	Иначе
		ИтогСуммаУведомления = Окр(ИтогСуммаЗаписей, 0, РежимОкругления.Окр15как10);
	КонецЕсли;
	Разница = ИтогСуммаЗаписей - ИтогСуммаУведомления;
	
	ТаблицаНалоговыйАгентНДС.Сортировать("Сумма");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговыйАгентНДС Цикл
		СуммаСтроки = СтрокаТаблицы.Сумма;
		Если Разница <> 0 Тогда
			СуммаСтроки = Макс(0, СуммаСтроки - Разница);
			Разница = Разница - (СтрокаТаблицы.Сумма - СуммаСтроки);
		КонецЕсли;
		СтрокаТаблицы.Сумма = СуммаСтроки;
	КонецЦикла;
	
	ТаблицаНалоговыйАгентНДС.Сортировать("Контрагент, Договор, ДокументРасчетов, Сумма");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговыйАгентНДС Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.НалоговыйАгентНДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КлючСтроки = ВыбранноеЗначение.КлючСтроки;
	КонецЦикла;
	
	СтрокиТаблицы = Объект.Налоги.НайтиСтроки(Новый Структура("КлючСтроки", ВыбранноеЗначение.КлючСтроки));
	СтрокиТаблицы[0].Сумма = ИтогСуммаУведомления;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйАгентНДСОчистить(Форма, КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Форма.Объект.НалоговыйАгентНДС;
	
	МассивСтрок = ТаблицаНалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ТаблицаНалоговыйАгентНДС.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалоговыйАгентНДСРассчитать(Форма, КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Форма.Объект.НалоговыйАгентНДС;
	
	СуммаСтроки = 0;
	
	МассивСтрок = ТаблицаНалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		СуммаСтроки = СуммаСтроки + СтрокаМассива.Сумма;
	КонецЦикла;
	
	Возврат СуммаСтроки;
	
КонецФункции

&НаКлиенте
Процедура ВыборСтандартногоПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные.НачалоПериода = РезультатВыбора.НачалоПериода;
	ТекущиеДанные.КонецПериода  = РезультатВыбора.КонецПериода;
		
	Если СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено
		И (РезультатВыбора.НачалоПериода = НачалоМесяца(КонецГода(РезультатВыбора.НачалоПериода))
			Или РезультатВыбора.НачалоПериода >= ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ) Тогда
		
		СписокУточненияПериода = Новый СписокЗначений;
		
		НачалоПериода = Дата(Год(ТекущиеДанные.НачалоПериода), Месяц(ТекущиеДанные.НачалоПериода), 23);
		КонецПериода  = Дата(Год(ТекущиеДанные.КонецПериода), Месяц(ТекущиеДанные.КонецПериода), День(ТекущиеДанные.КонецПериода));
		
		НазваниеМесяца = НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(НачалоПериода, 2, Ложь));
		
		НачалоОтчетногоМесяца = СтрШаблон(НСтр("ru = 'Начало %1: до %2'"),
			НазваниеМесяца, Формат(НачалоПериода, "ДФ=dd.MM.yyyy"));
			
		КонецОтчетногоМесяца  = СтрШаблон(НСтр("ru = 'Конец %1: %2'"),
			НазваниеМесяца, Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
		
		СписокУточненияПериода.Добавить(1, НачалоОтчетногоМесяца);
		СписокУточненияПериода.Добавить(2, КонецОтчетногоМесяца);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеПериодаЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокУточненияПериода, "НалогиПредставлениеПериода");
		
	Иначе
		ПараметрыСтроки = ОписаниеСтрокиДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
		ТекущиеДанные.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
		ТекущиеДанные.СрокУплаты = СрокУплаты(ПараметрыСтроки,
			СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// Уточнение описание периода для неполного месяца
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонецОтчетногоМесяца = Ложь;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		КонецОтчетногоМесяца = РезультатВыбора.Значение = 2;
		Если КонецОтчетногоМесяца Тогда
			ТекущиеДанные.НачалоПериода = Дата(Год(ТекущиеДанные.НачалоПериода), Месяц(ТекущиеДанные.НачалоПериода), 23);
			ТекущиеДанные.КонецПериода  = Дата(Год(ТекущиеДанные.КонецПериода), Месяц(ТекущиеДанные.КонецПериода), День(ТекущиеДанные.КонецПериода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не КонецОтчетногоМесяца И ТекущиеДанные.НачалоПериода >= ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ Тогда
		ТекущиеДанные.НачалоПериода = Дата(Год(ТекущиеДанные.НачалоПериода), Месяц(ТекущиеДанные.НачалоПериода), День(ТекущиеДанные.НачалоПериода));
		ТекущиеДанные.КонецПериода  = Дата(Год(ТекущиеДанные.КонецПериода), Месяц(ТекущиеДанные.КонецПериода), 22);
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
			
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	ТекущиеДанные.СрокУплаты = СрокУплаты(ПараметрыСтроки,
		Истина,
		КонецОтчетногоМесяца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода)
	
	ПредставлениеПериода = "";
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Если НачалоМесяца(НачалоПериода) <> НачалоПериода Или КонецМесяца(КонецПериода) <> КонецДня(КонецПериода) Тогда
			ПредставлениеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
		Иначе
			Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			Иначе
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
			ПредставлениеПериода =
				ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода);
				
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

&НаСервере
Функция СрокУплаты(ПараметрыСтроки, ЭтоНДФЛ, КонецОтчетногоМесяца = Ложь)
	
	Возврат ЕдиныйНалоговыйСчет.ОпределитьСрокУплаты(Объект.Организация, ПараметрыСтроки, ЭтоНДФЛ, КонецОтчетногоМесяца);
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Объект.СуммаДокумента = Объект.Налоги.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиСумма");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.СчетУчета", ВидСравненияКомпоновкиДанных.ВСписке, СписокСчетовАгентскогоНДС);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,Истина));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиПредставлениеПериода");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ПредставлениеПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заполнить>'"));
	
	Если Не ПоказыватьСчетаУчетаВДокументах Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.Налог", ВидСравненияКомпоновкиДанных.НеРавно, Налог_НДС);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Для Каждого ОписаниеСчета Из СписокОписанийСчетовНДС Цикл
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"Объект.Налоги.ВидНалогаНДС", ВидСравненияКомпоновкиДанных.Равно, ОписаниеСчета.Значение);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеСчета.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидПлатежаВГосБюджет");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ВидПлатежаВГосБюджет", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидПлатежаВГосБюджет");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ЕстьВидПлатежаВГосБюджет", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиУровеньБюджета");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.УровеньБюджета", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиУровеньБюджета");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ЕстьУровеньБюджета", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.Налоги Цикл
		ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы)
	
	ПоказыватьСчетУчета = Ложь;
	Если ПоказыватьСчетаУчетаВДокументах Тогда
		ПоказыватьСчетУчета = Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			ПоказыватьСчетУчета = Истина;
		Иначе
			ПоказыватьСчетУчета =
				СтрокаТаблицы.Налог <> Налог_НДС
				И СтрокаТаблицы.СчетУчета <> Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаТаблицы.Налог, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	Если СтрокаТаблицы.Налог = Налог_НДС Тогда
		СтрокаТаблицы.ВидНалогаНДС = СтрокаТаблицы.СчетУчета;
	КонецЕсли;
	СтрокаТаблицы.ПоказыватьСчетУчета = ПоказыватьСчетУчета;
	СтрокаТаблицы.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
	СтрокаТаблицы.ЕстьВидПлатежаВГосБюджет = ЕдиныйНалоговыйСчет.НомерВидаСубконтоНаСчете(СвойстваСчета, "ВидыПлатежейВГосБюджет") > 0;
	СтрокаТаблицы.ЕстьУровеньБюджета       = ЕдиныйНалоговыйСчет.НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов") > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНалогиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено
		Или РезультатВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНалоговДляЗаполнения = РезультатВыбора;
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокумент()
	
	ЕстьДанные = Объект.Налоги.Количество() > 0
		ИЛИ Объект.НалоговыйАгентНДС.Количество() > 0;
		
	Если ЕстьДанные Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДокументПоОстаткамРасчетов();
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументПоОстаткамРасчетов();
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоОстаткамРасчетов()
	
	ТаблицаНалоговДляЗаполнения = ЕдиныйНалоговыйСчет.ТаблицаНалоговДляАвтоматическогоЗаполнения(Истина, Объект.Дата);
	СписокНалоговДляЗаполнения.ЗагрузитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалоговДляЗаполнения, "Ссылка", Истина));
	
	Объект.Налоги.Очистить();
	Объект.НалоговыйАгентНДС.Очистить();
	
	ПараметрыДокумента = ЕдиныйНалоговыйСчет.ПараметрыПолученияОстатковРасчетов();
	ПараметрыДокумента.Организация         = Объект.Организация;
	ПараметрыДокумента.Дата                = Объект.Дата;
	ПараметрыДокумента.ВидОперации         = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов");
	ПараметрыДокумента.СписокНалогов       = СписокНалоговДляЗаполнения;
	ПараметрыДокумента.ВводНачальныхДанных = Истина;
	
	ТабицыОстатков = ЕдиныйНалоговыйСчет.ПолучитьОстаткиРасчетовПоНалогам(ПараметрыДокумента);
	
	Для Каждого ДанныеТаблицы Из ТабицыОстатков Цикл
		ИмяТаблицы = СтрЗаменить(ДанныеТаблицы.Ключ, "Таблица", "");
		Если Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов.ТабличныеЧасти.Найти(ИмяТаблицы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ДанныеТаблицы.Значение Цикл
			НоваяСтрока = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой();
	
КонецПроцедуры

#Область РаботаСУведомлениемКакСОтчетом

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ДокументСсылка, УникальныйИдентификатор)
	
	Возврат Документы.УведомлениеОбИсчисленныхСуммахНалогов.ВыгрузитьУведомлениеОбИсчисленныхСуммахНалогов(
		ДокументСсылка,
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, , , Ложь, Объект.Уведомление);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(Отказ = Ложь, ЕстьКритичныеОшибки = Ложь, ТаблицаОшибок, НеблокирующиеПроверки = Истина)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьОбязательныеПоля(ЕстьКритичныеОшибки);
	Если ЕстьКритичныеОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ, НеблокирующиеПроверки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	ТаблицаОшибок = УведомлениеОбъект.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	Отказ = ТаблицаОшибок.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Ложь);
	ПроверитьКонтрольныеСоотношенияЗавершение(Ответ, ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если ЕстьОшибкиПроверкиКонтрольныхСоотношений Тогда
		ТекстВопроса = НСтр("ru = 'При проверке контрольных соотношений обнаружены ошибки.
			|Наличие ошибок может привести к отказу в приеме уведомления.
			|Продолжить (не рекомендуется)?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок, Ложь);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'В уведомлении обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ТаблицаОшибок") Тогда
			Если ДополнительныеПараметры.ТаблицаОшибок.Количество() > 0 Тогда
				ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
					Новый Структура("ТаблицаОшибок", ДополнительныеПараметры.ТаблицаОшибок),
					ЭтотОбъект,
					Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок, Ложь);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПроверитьВИнтернетеЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417Завершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("СообщениеПриОтсутствииОшибок") Тогда
		ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Записать", Объект.Уведомление.Пустая());
	
	КлючУникальности = Объект.Уведомление;
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	РезультатПроверки = КонтрольныеСоотношенияИсчисленныеСуммыНалогов.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтотОбъект, Объект.Уведомление);
	ЕстьОшибкиПроверкиКонтрольныхСоотношений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "ЧислоОшибок", 0) > 0;
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	Возврат ВыполнитьДокументированиеНаСервере();
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	Возврат КонтрольныеСоотношенияИсчисленныеСуммыНалогов.ВыполнитьДокументированиеНаСервере(ЭтотОбъект, Объект.Уведомление);
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "СумИсчНалог_2023" Тогда
		НомерСтроки = Число(СокрЛП(СтрЗаменить(Ячейка.Страница, "Стр. ", "")));
		Для Каждого СтрокаДокумента Из Объект.Налоги Цикл
			Если НомерСтроки = СтрокаДокумента.НомерСтроки Тогда
				Элементы.Налоги.ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт 
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция Подключена1СОтчетность(Организация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация,
		Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
КонецФункции

#КонецОбласти
