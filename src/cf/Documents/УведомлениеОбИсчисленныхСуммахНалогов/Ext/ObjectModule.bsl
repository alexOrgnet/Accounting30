#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                        = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный               = Пользователи.ТекущийПользователь();
	Уведомление                 = Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка();
	ДокументОснование           = Неопределено;
	РазрешитьВыгружатьСОшибками = Ложь;
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СведенияОбУдержанномНДФЛ") Тогда
		ЗаполнитьДокументДаннымиНДФЛ(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Организация, Дата) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация %1 не является плательщиком единого налогового платежа'"),
			Организация);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			,
			"Организация",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	ПроверятьОтчетныйНалоговыйПериод = Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж;
	ГлубинаОсмотра = НачалоГода(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1));
	ДальностьОсмотра = КонецГода(ДобавитьМесяц(Дата, 12));
	
	Если ПроверятьОтчетныйНалоговыйПериод Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.СрокУплаты");
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		// С момента всеобщего перехода на ЕНС требуется проверять отчетный период
		Если ПроверятьОтчетныйНалоговыйПериод Тогда
			ПериодКорректен = Истина;
			
			Если Не ЗначениеЗаполнено(СтрокаДокумента.НачалоПериода)
				Или Не ЗначениеЗаполнено(СтрокаДокумента.КонецПериода)
				Или СтрокаДокумента.НачалоПериода > СтрокаДокумента.КонецПериода
				Или СтрокаДокумента.НачалоПериода < ГлубинаОсмотра
				Или СтрокаДокумента.КонецПериода > ДальностьОсмотра Тогда
				
				Поле = Префикс + "ПредставлениеПериода";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректно указан отчетный (налоговый) период в строке %1 списка ""Налоги""'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
					
					
			КонецЕсли;
			
			Если ПериодКорректен Тогда
				
				Если СтрокаДокумента.СрокУплаты < ГлубинаОсмотра Тогда
					Поле = Префикс + "СрокУплаты";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Некорректно указан срок уплаты в строке %1 списка ""Налоги"": указанно значение до перехода на ЕНС'"),
						СтрокаДокумента.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
						ЭтотОбъект,
						Поле,
						"Объект",
						Отказ);
				КонецЕсли;
				
				Если СтрокаДокумента.СрокУплаты > ДальностьОсмотра Тогда
					Поле = Префикс + "СрокУплаты";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Некорректно указан срок уплаты в строке %1 списка ""Налоги"": уведомления по данному сроку уплаты не сдаются'"),
						СтрокаДокумента.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
						ЭтотОбъект,
						Поле,
						"Объект",
						Отказ);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Уведомления по налогам и взносам подается до наступления срока платежа.
			// Исключение - НДФЛ, по которому сведения подаются после уплаты.
			// В остальных случаях - сообщаем пользователю о возможной ошибке.
			Если ЗначениеЗаполнено(СтрокаДокумента.СрокУплаты)
				И (СтрокаДокумента.СрокУплаты < НачалоДня(Дата)
					И (СтрокаДокумента.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ)
					И СтрокаДокумента.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины))) Тогда
					
				Поле = Префикс + "СрокУплаты";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Вероятно, некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"": указанное значение меньше даты уведомления'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Для уведомлений по УСН и ЕСХН разрешено отправлять отрицательные суммы
		Если СтрокаДокумента.Сумма < 0
			И Не ЕдиныйНалоговыйСчет.МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаДокумента.Налог) Тогда
			
				Поле = Префикс + "Сумма";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректно заполнена колонка ""Сумма"" в строке %1 списка ""Налоги"": указанное значение должно быть больше нуля'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Проверка уникальности записей в самом документе
	ПроверитьУникальностьДанныхВДокументе(Отказ);
	
	Если Не Отказ Тогда
		// Проверка реквизитов на правильность заполнения
		ПроверитьКорректностьЗаполненияРеквизитов();
		// Проверка уникальности записей в документе (наличие других документов)
		ПроверитьУникальностьДанныхДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		Если ПустаяСтрока(СтрокаДокумента.КлючСтроки) Тогда
			СтрокаДокумента.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	СуммаДокумента = Налоги.Итог("Сумма");
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьУведомлениеОСпецрежимахНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Налоги.Количество() <> 0 Тогда
		ВыполнениеЗадачБухгалтера.ПриЗаписиУведомления(ЭтотОбъект);
	КонецЕсли;
	
	ЕдиныйНалоговыйСчет.СинхронизироватьСостояниеУведомлений(ЭтотОбъект);
	
	Если Не ЭтотОбъект.Проведен Тогда
		РегистрыСведений.ЗадачиБухгалтераУведомления.УдалитьЗапись(Организация, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если Дата >= НачалоПростогоУчета Тогда
		Возврат; // Документ не формирует движений
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПодготовитьПараметрыПроведения(
		Ссылка,
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Бухгалтерский учет
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНачислениеНалогов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УведомлениеОбИсчисленныхСуммахНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНалоговыйАгентНДС(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НалоговыйАгентНДС,
		Движения,
		Отказ);
	
	// Движения по налогам на ЕНС
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УведомлениеОбИсчисленныхСуммахНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.ЗачетАвансаПоЕдиномуНалоговомуСчетуПоУведомлению(
		ПараметрыПроведения,
		Движения,
		Отказ);
		
	ЕдиныйНалоговыйСчет.ЗарегистрироватьЗачислениеНаЕдиныйНалоговыйСчет(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УведомлениеОбИсчисленныхСуммахНалогов,
		Движения,
		Отказ);
		
	// Сторнирование предыдущих документов
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНачислениеНалогов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ДублирующиеЗаписиДокумента,
		Движения,
		Отказ);
		
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ДублирующиеЗаписиДокумента,
		Движения,
		Отказ,
		Истина);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокументДаннымиНДФЛ(Основание)
	
	ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ = УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ();
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ТаблицаНДФЛ = УчетЗарплаты.УдержанныйНДФЛПоДокументу(Основание.Организация, Основание);
	Если ТаблицаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокументОснование = Основание;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
		
		НоваяСтрока = Налоги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.КодБК      = СтрокаТаблицы.КБК;
		НоваяСтрока.КодПоОКТМО = СтрокаТаблицы.ОКАТО;
		НоваяСтрока.СчетУчета  = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(НоваяСтрока.Налог, НоваяСтрока.СрокУплаты);
		
		Если КонецДня(НоваяСтрока.СрокУплаты) <> КонецДня(КонецГода(НоваяСтрока.СрокУплаты)) Тогда
			Если Дата >= ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ Тогда
				МесяцУдержания = НачалоМесяца(?(День(СтрокаТаблицы.ИсходныйСрокУплаты) > 5, СтрокаТаблицы.ИсходныйСрокУплаты, ДобавитьМесяц(СтрокаТаблицы.ИсходныйСрокУплаты, -1)));
				Если МесяцУдержания = НачалоМесяца(НоваяСтрока.СрокУплаты) Тогда
					НоваяСтрока.НачалоПериода = НачалоМесяца(МесяцУдержания);
					НоваяСтрока.КонецПериода  = Дата(Год(МесяцУдержания), Месяц(МесяцУдержания), 22);
				Иначе
					НоваяСтрока.НачалоПериода = Дата(Год(МесяцУдержания), Месяц(МесяцУдержания), 23);
					НоваяСтрока.КонецПериода  = КонецМесяца(МесяцУдержания);
				КонецЕсли;
			Иначе
				НоваяСтрока.НачалоПериода = НачалоМесяца(НоваяСтрока.СрокУплаты);
				НоваяСтрока.КонецПериода  = КонецМесяца(НоваяСтрока.СрокУплаты);
			КонецЕсли;
		Иначе
			НоваяСтрока.НачалоПериода = Дата(Год(НоваяСтрока.СрокУплаты), Месяц(НоваяСтрока.СрокУплаты), 23);
			НоваяСтрока.КонецПериода  = КонецГода(НоваяСтрока.СрокУплаты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОбязательныеПоля(Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация.'"), ЭтотОбъект, "Организация", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДокумента(Отказ, НеблокирующиеПроверки = Истина) Экспорт
	
	ДополнительныеСвойства.Вставить("НеблокирующиеПроверки", НеблокирующиеПроверки);
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Ошибки = Неопределено;
	ДополнительныеСвойства.Свойство("Ошибки", Ошибки);
	
КонецПроцедуры

Функция ТребуетсяАктуализация(ТекущийОбъект)
	
	ТребуетсяАктуализация = Ложь;
	Если Ссылка.Пустая() Или ТекущийОбъект.ДополнительныеСвойства.Свойство("Актуализировать") Тогда
		ТребуетсяАктуализация = Истина;
	Иначе
		ОбъектДоИзменения    = Ссылка.ПолучитьОбъект();
		ОбъектПослеИзменения = ТекущийОбъект;
		Если ОбъектДоИзменения.Дата <> ОбъектПослеИзменения.Дата
			Или ОбъектДоИзменения.Комментарий <> ОбъектПослеИзменения.Комментарий
			Или ОбъектДоИзменения.СуммаДокумента <> ОбъектПослеИзменения.СуммаДокумента
			Или ОбъектДоИзменения.РазрешитьВыгружатьСОшибками <> ОбъектПослеИзменения.РазрешитьВыгружатьСОшибками
			Или ОбъектДоИзменения.Налоги.Количество() <> ОбъектПослеИзменения.Налоги.Количество() Тогда
			ТребуетсяАктуализация = Истина;
		Иначе
			СписокКолонок = ТекущийОбъект.Метаданные().ТабличныеЧасти.Налоги.Реквизиты;
			Для ИндексСтроки = 0 По ОбъектДоИзменения.Налоги.Количество() - 1 Цикл
				СтрокаДоИзменения    = ОбъектДоИзменения.Налоги[ИндексСтроки];
				СтрокаПослеИзменения = ОбъектПослеИзменения.Налоги[ИндексСтроки];
				Для Каждого Колонка Из СписокКолонок Цикл
					Если СтрокаДоИзменения[Колонка.Имя] <> СтрокаПослеИзменения[Колонка.Имя] Тогда
						ТребуетсяАктуализация = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяАктуализация;
	
КонецФункции

Процедура АктуализироватьУведомлениеОСпецрежимахНалогообложения(ТекущийОбъект)
	
	Если Не ТребуетсяАктуализация(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация         = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ТекущийОбъект.Организация);
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "РегистрацияВНалоговомОргане");
	ЭтоЮЛ                       = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ГоловнаяОрганизация);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		СсылкаОбъекта = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
	Иначе
		СсылкаОбъекта = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	// Титульный
	ДанныеУведомленияТитульный = Новый Структура;
	
	Если ЭтоЮЛ Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации,ФамилияРук,ИмяРук,ОтчествоРук";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеУведомленияТитульный.Вставить("КПП",     СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ФИО,ИННФЛ,ТелСлуж,ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.ФИО);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелСлуж);
		ДанныеУведомленияТитульный.Вставить("КПП",     "");
	КонецЕсли;
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ",     ТекущийОбъект.Дата);
	ДанныеУведомленияТитульный.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(РегистрацияВНалоговомОргане);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП",   Реквизиты.КПП);
	
	ПодписантФамилия  = "";
	ПодписантИмя      = "";
	ПодписантОтчество = "";
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			ТекущийОбъект.Организация,
			ДанныеУведомленияТитульный["КодНО"], 
			ДанныеУведомленияТитульный["КПП"]);
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПодписантСтр);
			ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			ПодписантИмя = СокрЛП(ФИО.Имя);
			ПодписантОтчество = СокрЛП(ФИО.Отчество);
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(
				Реквизиты.Представитель,
				,
				ТекущийОбъект.Дата);
			ПодписантФамилия  = СокрЛП(ДанныеПредставителя.Фамилия);
			ПодписантИмя      = СокрЛП(ДанныеПредставителя.Имя);
			ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		КонецЕсли;
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("НаимОргПред",                    СведенияОПредставителе.НаименованиеОрганизацииПредставителя);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "2");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        Реквизиты.ДокументПредставителя);
	Иначе
		Если ЭтоЮЛ Тогда
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияРук;
			ПодписантИмя      = СведенияОбОрганизации.ИмяРук;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоРук;
		Иначе
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияИП;
			ПодписантИмя      = СведенияОбОрганизации.ИмяИП;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоИП;
		КонецЕсли;
		ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "1");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        "");
	КонецЕсли;
	
	МассивРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.Налоги, "РегистрацияВНалоговомОргане", Истина);
	РеквизитыРегистраций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивРегистраций, "КПП");
	
	ВидыНалоговНаИмущество         = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНаИмущество();
	ВидыНалоговНДФЛПредпринимателя = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛПредпринимателя();
	
	// СумИсчНалог
	ДанныеУведомленияРезультат = Новый Массив;
	Для Каждого ТекущаяСтрока Из ТекущийОбъект.Налоги Цикл
		
		Если ВидыНалоговНаИмущество.Найти(ТекущаяСтрока.Налог) <> Неопределено Тогда
			КППДекл = Реквизиты.КПП;
		Иначе
			КППДекл = РеквизитыРегистраций[ТекущаяСтрока.РегистрацияВНалоговомОргане];
		КонецЕсли;
		ОсобыйПериод = ВидыНалоговНДФЛПредпринимателя.Найти(ТекущаяСтрока.Налог) <> Неопределено;
		
		СтруктураДанныхНалог = Новый Структура;
		СтруктураДанныхНалог.Вставить("КППДекл",       КППДекл);
		СтруктураДанныхНалог.Вставить("ОКТМО",         СокрЛП(ТекущаяСтрока.КодПоОКТМО));
		СтруктураДанныхНалог.Вставить("КБК",           ТекущаяСтрока.КодБК);
		СтруктураДанныхНалог.Вставить("СумНалогАванс", ТекущаяСтрока.Сумма);
		СтруктураДанныхНалог.Вставить("СрокУпл",       ТекущаяСтрока.СрокУплаты);
		
		СоставПериода = РазложитьПериод(ТекущаяСтрока.НачалоПериода, ТекущаяСтрока.КонецПериода, ОсобыйПериод);
		СтруктураДанныхНалог.Вставить("Период",        СоставПериода.Период);
		СтруктураДанныхНалог.Вставить("НомерМесКварт", СоставПериода.НомерМесКварт);
		СтруктураДанныхНалог.Вставить("Год",           СоставПериода.Год);
		
		ДанныеУведомленияРезультат.Добавить(СтруктураДанныхНалог);
		
	КонецЦикла;
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация",                 ГоловнаяОрганизация);
	ПараметрыЗаявления.Вставить("РегистрацияВИФНС",            РегистрацияВНалоговомОргане);
	ПараметрыЗаявления.Вставить("Титульная",                   ДанныеУведомленияТитульный);
	ПараметрыЗаявления.Вставить("СумИсчНалог",                 ДанныеУведомленияРезультат);
	ПараметрыЗаявления.Вставить("ПодписантФамилия",            ПодписантФамилия);
	ПараметрыЗаявления.Вставить("ПодписантИмя",                ПодписантИмя);
	ПараметрыЗаявления.Вставить("ПодписантОтчество",           ПодписантОтчество);
	ПараметрыЗаявления.Вставить("ДокументОснование",           СсылкаОбъекта);
	ПараметрыЗаявления.Вставить("ДатаОснования",               Дата);
	ПараметрыЗаявления.Вставить("КомментарийОснования",        Комментарий);
	ПараметрыЗаявления.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	Если ЗначениеЗаполнено(ТекущийОбъект.Уведомление) И ОбщегоНазначения.СсылкаСуществует(ТекущийОбъект.Уведомление) Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", ТекущийОбъект.Уведомление);
	КонецЕсли;
	
	ТекущийОбъект.Уведомление = Отчеты.РегламентированноеУведомлениеИсчисленныеСуммыНалогов.СформироватьНовоеУведомление(
			Отчеты.РегламентированноеУведомлениеИсчисленныеСуммыНалогов.ДействующаяРедакцияФормы(ТекущийОбъект.Дата),
			ПараметрыЗаявления);
	
КонецПроцедуры

Функция РазложитьПериод(НачалоПериода, КонецПериода, ОсобыйПериод)
	
	// Год:
	//    год отчетного периода
	// Период:
	//    21 - первый квартал
	//    31 - полугодие
	//    33 - 9 месяцев
	//    34 - год
	// НомерМесКварт:
	//    01 - первый месяц квартала/первый квартал (для 34)
	//    02 - второй месяц квартала/второй квартал (для 34)
	//    03 - третий месяц квартала/третий квартал (для 34)
	//    04 - конец декабря/четвертый квартал (для 34)
	//    Дополнительно для агентского НДФЛ в 2024 г.
	//       11 - вторая половина первого месяца квартала
	//       12 - вторая половина второго месяца квартала
	//       13 - вторая половина третьего месяца квартала
	//
	// Если особый период, тогда всегда 21/04, 31/04, 32/04, 33/04
	
	ПередаютсяПромежуточныеУведомления = Год(НачалоПериода) >= Год(УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ());
	
	СоставПериода = Новый Структура("Период, НомерМесКварт, Год");
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		СоставПериода.Год = Формат(Год(НачалоПериода), "ЧГ=");
		
		НомерМесяца = Месяц(КонецПериода);
		НомерКвартала = Цел((НомерМесяца - 1) / 3 + 1);
		Если (Не ПередаютсяПромежуточныеУведомления
			И НачалоМесяца(НачалоПериода) <> НачалоПериода
			И КонецМесяца(НачалоПериода) = КонецГода(НачалоПериода))
			Или ОсобыйПериод Тогда
			// Особый период для декабря или переданный явно
			СоставПериода.НомерМесКварт = "04";
		ИначеЕсли ПередаютсяПромежуточныеУведомления
			И (НачалоМесяца(НачалоПериода) <> НачалоПериода
				Или КонецДня(КонецПериода) <> КонецМесяца(КонецПериода)) Тогда
			// Особый порядок для периодов по НДФЛ 2024 г.
			// Получим номер месяца и сделаем поправку
			НомерМесКварт = НомерМесяца - Цел((НомерМесяца - 1)/3) * 3;
			ПерваяПоловинаМесяца = НачалоМесяца(НачалоПериода) = НачалоПериода
				И КонецДня(КонецПериода) <> КонецМесяца(КонецПериода);
			Если Не ПерваяПоловинаМесяца Тогда
				НомерМесКварт = 10 + НомерМесКварт;
			КонецЕсли;
			СоставПериода.НомерМесКварт = Формат(НомерМесКварт, "ЧЦ=2; ЧН=00; ЧВН=");
		ИначеЕсли НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда 
			// Получим номер месяца
			НомерМесКварт = НомерМесяца - Цел((НомерМесяца - 1)/3) * 3;
			СоставПериода.НомерМесКварт = Формат(НомерМесКварт, "ЧЦ=2; ЧН=00; ЧВН=");
		ИначеЕсли Не ОсобыйПериод Тогда
			// Получим номер квартала
			СоставПериода.НомерМесКварт = Формат(НомерКвартала, "ЧЦ=2; ЧН=00; ЧВН=");
			СоставПериода.Период = "34";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СоставПериода.Период) Тогда
			Если НомерКвартала = 1 Тогда
				СоставПериода.Период = "21";
			ИначеЕсли НомерКвартала = 2 Тогда
				СоставПериода.Период = "31";
			ИначеЕсли НомерКвартала = 3 Тогда
				СоставПериода.Период = "33";
			Иначе
				СоставПериода.Период = "34";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставПериода;
	
КонецФункции

Процедура ПроверитьУникальностьДанныхВДокументе(Отказ)
	
	ТаблицаНалоги = Налоги.Выгрузить();
	КолонкиСверки = "Налог, КодБК, СчетУчета, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты";
	Если Дата >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		КолонкиСверки = КолонкиСверки + ", " + "НачалоПериода, КонецПериода";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСверки);
	Если ТаблицаНалоги.Количество() <> Налоги.Количество() Тогда
		ОтборСтрок = Новый Структура(КолонкиСверки);
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
			МассивСтрок = Налоги.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомераСтрок = "";
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок <> "", ", ", "") + СтрокаМассива.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Дублируются ключевые значения в строках %1 списка ""Налоги""'"),
				НомераСтрок);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				,
				"Налоги",
				"Объект",
				Отказ);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияРеквизитов()
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НеблокирующиеПроверки", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		РезультатПроверки = ПлатежиВБюджетКлиентСервер.УведомлениеПроверитьКБК(СтрокаДокумента.КодБК, Дата);
		Если Не ПустаяСтрока(РезультатПроверки) Тогда
			Поле = Префикс + "КодБК";
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Вероятно, некорректно заполнен КБК в строке %1 списка ""Налоги"": %2'"),
				СтрокаДокумента.НомерСтроки,
				РезультатПроверки);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект,
				Поле,
				"Объект");
		КонецЕсли;
		
		РезультатПроверки = ПлатежиВБюджетКлиентСервер.УведомлениеПроверитьКодТерритории(СтрокаДокумента.КодПоОКТМО, Дата);
		Если Не ПустаяСтрока(РезультатПроверки) Тогда
			Поле = Префикс + "КодПоОКТМО";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Вероятно, некорректно заполнен код по ОКТМО в строке %1 списка ""Налоги"": %2'"),
				СтрокаДокумента.НомерСтроки,
				РезультатПроверки);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект,
				Поле,
				"Объект");
		КонецЕсли;
		
		РезультатПроверки = АдресныйКлассификатор.СведенияПоОКМТО(СтрокаДокумента.КодПоОКТМО);
		Если Не ЗначениеЗаполнено(РезультатПроверки)
			Или Не ЗначениеЗаполнено(РезультатПроверки.ОКТМО) Тогда
			Поле = Префикс + "КодПоОКТМО";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Вероятно, некорректно заполнен код по ОКТМО в строке %1 списка ""Налоги"": ОКТМО не найден в адресном классификаторе'"),
				СтрокаДокумента.НомерСтроки,
				РезультатПроверки);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект,
				Поле,
				"Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьДанныхДокумента()
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НеблокирующиеПроверки", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ДублирующиеЗаписиДокумента = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ДублирующиеЗаписиДокумента(ЭтотОбъект);
	
	Если Не ДублирующиеЗаписиДокумента.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Обратите внимание! Обнаружено дублирование данных о налогах в ранее подготовленных уведомлениях.
		|Подача повторного уведомления считается исправлением и вытесняет ранее поданные сведения.'");
		
		Если Дата > Документы.УведомлениеОбИсчисленныхСуммахНалогов.ДатаНачалаСторнированияДублирующихУведомлений() Тогда
			ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, НСтр("ru = 'Начисления в ранее подготовленных уведомлениях будут сторнированы.'"));
		КонецЕсли;
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ВыборкаДетальныеЗаписи = ДублирующиеЗаписиДокумента.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Префикс = "Налоги[" + Формат(ВыборкаДетальныеЗаписи.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Поле = Префикс + "НомерСтроки";
			ТекстСообщения = НСтр("ru = 'Организация: %1, документ %2'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,
					ВыборкаДетальныеЗаписи.Организация,
					ВыборкаДетальныеЗаписи.Ссылка),
				ВыборкаДетальныеЗаписи.Ссылка,
				Поле,
				"Объект");
			
			ТекстСообщения = НСтр("ru = '   Строка %1: %2 (КБК %3, ОКТМО %4, срок уплаты %5) на сумму %6'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, 
					ВыборкаДетальныеЗаписи.НомерСтроки,
					ВыборкаДетальныеЗаписи.Налог,
					ВыборкаДетальныеЗаписи.КодБК,
					ВыборкаДетальныеЗаписи.КодПоОКТМО,
					Формат(ВыборкаДетальныеЗаписи.СрокУплаты, "ДФ=dd.MM.yyyy"),
					ВыборкаДетальныеЗаписи.Сумма),
				ВыборкаДетальныеЗаписи.Ссылка,
				Поле,
				"Объект");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли