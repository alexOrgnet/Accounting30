#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 21, 0);
	
КонецФункции

// Сумма фактически оплаченных налогов в заданном периоде на основании данных личного кабинета ФНС.
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - налогоплательщик.
//  НачалоПериода	 - Дата - начало периода оплат.
//  КонецПериода	 - Дата - конец периода оплат.
//  СчетаУчета		 - Массив из ПланСчетовСсылка.Хозрасчетный - счета учета налогов.
// 
// Возвращаемое значение:
//   - Число - общая сумма оплаченных налогов.
//
Функция СуммаЗаПериод(Организация, НачалоПериода, КонецПериода, СчетаУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сведения.Ссылка.Организация КАК Организация,
	|	СУММА(Сведения.Сумма) КАК Сумма
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов.Сведения КАК Сведения
	|ГДЕ
	|	Сведения.Ссылка.Организация = &Организация
	|	И Сведения.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Сведения.СчетУчета В(&СчетаУчета)
	|	И Сведения.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Сведения.Ссылка.Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_СведенияОбУплатеНалогов";
	Набор.Идентификатор = Новый УникальныйИдентификатор("590d741f-5927-40df-857b-1844a31cc296");
	Набор.Используется  = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСлужебные

Функция ДатаПоследнегоДокумента(Организация, ТолькоЗагруженные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СведенияОбУплатеНалогов.Дата КАК Дата
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов КАК СведенияОбУплатеНалогов
	|ГДЕ
	|	СведенияОбУплатеНалогов.Организация = &Организация
	|	И СведенияОбУплатеНалогов.Проведен
	|	И (СведенияОбУплатеНалогов.СозданАвтоматически ИЛИ НЕ &ТолькоЗагруженные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТолькоЗагруженные", ТолькоЗагруженные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.Дата);
	КонецЕсли;
	
	Возврат '0001-01-01';
	
КонецФункции

Процедура ЗагрузитьИзДанныхЛичногоКабинета(Организация, ТаблицаУплат) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаУплат) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУплат.Сортировать("ДатаОперации");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбУплатеНалогов.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(СведенияОбУплатеНалогов.Дата, ДЕНЬ) КАК Дата,
	|	ЛОЖЬ КАК ЕстьВДанныхЗагрузки
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов КАК СведенияОбУплатеНалогов
	|ГДЕ
	|	СведенияОбУплатеНалогов.Организация = &Организация
	|	И СведенияОбУплатеНалогов.Дата >= &ПерваяДата
	|	И СведенияОбУплатеНалогов.СозданАвтоматически";
	Запрос.УстановитьПараметр("Организация", Организация);
	ПерваяДата = ТаблицаУплат[0].ДатаОперации;
	Запрос.УстановитьПараметр("ПерваяДата", НачалоДня(ПерваяДата));
	
	РанееЗагруженныеДокументы = Запрос.Выполнить().Выгрузить();
	РанееЗагруженныеДокументы.Индексы.Добавить("Дата");
	
	ДатаДокумента = '0001-01-01';
	ДокументОбъект = Неопределено;
	ТаблицаВидыНалогов = Справочники.ВидыНалоговыхОбязательств.ТаблицаСоответствияВидовНалогов();
	ТаблицаВидыНалогов.Индексы.Добавить("ВидНалоговогоОбязательства");
	
	Для каждого СтрокаДанных Из ТаблицаУплат Цикл
		
		ДатаСтроки = НачалоДня(СтрокаДанных.ДатаОперации);
		Если ДатаСтроки <> ДатаДокумента Тогда
			ЗаписатьЗагружаемыйДокумент(ДокументОбъект);
			СтрокаДокумента = РанееЗагруженныеДокументы.Найти(ДатаСтроки, "Дата");
			Если СтрокаДокумента <> Неопределено Тогда
				СтрокаДокумента.ЕстьВДанныхЗагрузки = Истина;
				ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Сведения.Очистить();
			Иначе
				ДокументОбъект = Документы.СведенияОбУплатеНалогов.СоздатьДокумент();
				ДокументОбъект.Дата = ДатаСтроки;
				ДокументОбъект.Организация = Организация;
			КонецЕсли;
			ДатаДокумента = НачалоДня(ДокументОбъект.Дата);
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.Сведения.Добавить();
		НоваяСтрока.КБК = СтрокаДанных.КБК;
		НоваяСтрока.Сумма = СтрокаДанных.Сумма;
		
		ОтборСтрок = Новый Структура("ВидНалоговогоОбязательства", СтрокаДанных.ВидНалога);
		СтрокиВидаНалога = ТаблицаВидыНалогов.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаТаблицы Из СтрокиВидаНалога Цикл
			НалогПоВиду = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
				СтрокаТаблицы.ВидНалога, Ложь, ДатаСтроки);
			Если Не ЗначениеЗаполнено(НалогПоВиду) Тогда
				Продолжить;
			КонецЕсли;
			НалогПоКБК = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаДанных.КБК, Ложь);
			Если НалогПоВиду <> НалогПоКБК Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока.Налог = НалогПоВиду;
			Прервать;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Налог) Тогда
			НоваяСтрока.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
		КонецЕсли;
		
		НоваяСтрока.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(
			НоваяСтрока.Налог, ДатаСтроки);
			
		НоваяСтрока.Основание = СтрокаДанных.ПредставлениеОснования;
		
	КонецЦикла;
	
	ЗаписатьЗагружаемыйДокумент(ДокументОбъект);
	
	ОтборНетВДанныхЗагрузки = Новый Структура("ЕстьВДанныхЗагрузки", Ложь);
	СведенияКУдалению = РанееЗагруженныеДокументы.НайтиСтроки(ОтборНетВДанныхЗагрузки);
	Для каждого СтрокаКУдалению Из СведенияКУдалению Цикл
		УдаляемыйДокумент = СтрокаКУдалению.Ссылка.ПолучитьОбъект();
		ЗаписатьЗагружаемыйДокумент(УдаляемыйДокумент, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйДокумент(ДокументОбъект, РежимУдаления = Ложь)
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	
	Попытка
		
		Если РежимУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			ДокументОбъект.СозданАвтоматически = Истина;
			ДокументОбъект.Комментарий = НСтр("ru='<Создан автоматически по данным Личного кабинета ЕНС>'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.СведенияОбУплатеНалогов,
			ДокументОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаВременнаяТаблицаРеквизиты(НомераТаблиц)
		+ ТекстЗапросаВременнаяТаблицаСведения(НомераТаблиц)
		+ ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаНалоги(НомераТаблиц)
		+ ТекстЗапросаУплатаВзносовФОТ(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаРеквизиты(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТРеквизиты
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаСведения(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСведения", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сведения.Ссылка КАК Регистратор,
	|	Сведения.НомерСтроки КАК НомерСтроки,
	|	Сведения.Налог КАК Налог,
	|	Сведения.Сумма КАК Сумма,
	|	Сведения.СчетУчета КАК СчетУчета,
	|	Сведения.Основание КАК Основание
	|ПОМЕСТИТЬ ВТСведения
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов.Сведения КАК Сведения
	|ГДЕ
	|	Сведения.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТРеквизиты.Регистратор КАК Регистратор,
	|	ВТРеквизиты.Период КАК Период,
	|	ВТРеквизиты.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчета,
	|	ВТРеквизиты.Регистратор КАК ПлатежныйДокумент,
	|	ВТРеквизиты.Период КАК ДатаВходящегоДокумента,
	|	"""" КАК НомерВходящегоДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету) КАК ВидОперации
	|ИЗ
	|	ВТРеквизиты КАК ВТРеквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНалоги(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНалоги", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТСведения.Налог КАК Налог,
	|	ВТСведения.НомерСтроки КАК НомерСтроки,
	|	ВТСведения.Сумма КАК Сумма,
	|	ВТСведения.СчетУчета КАК СчетУчета,
	|	ВТРеквизиты.Регистратор КАК ПлатежныйДокумент,
	|	ВТРеквизиты.Период КАК СрокУплаты
	|ИЗ
	|	ВТСведения КАК ВТСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеквизиты КАК ВТРеквизиты
	|		ПО ВТСведения.Регистратор = ВТРеквизиты.Регистратор";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаУплатаВзносовФОТ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеречислениеНалогаИП", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСведения.СчетУчета КАК СчетДт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоДт1,
	|	ВТСведения.Сумма КАК СуммаРуб
	|ИЗ
	|	ВТСведения КАК ВТСведения";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти

#КонецЕсли