#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.СтепеньГотовностиУказанаВШапке = Истина;
			Объект.СтепеньГотовности = 50;
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// Если отложенный обработчик обновления, заполняющий вид операции, еще не завершен, заполним его в форме документа.
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = "ПроведениеИнвентаризацияНЗП";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Оповестить("Запись_ИнвентаризацияНезавершенногоПроизводства");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики" И Параметр = Объект.Организация Тогда
		УправлениеФормой();
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтключеноУчетнойПолитикойОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключеноУчетнойПолитикойСчетЗатратПриИзменении(Элемент)
	СчетЗатратПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтключеноУчетнойПолитикойДатаПриИзменении(Элемент)
	ДатаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтепеньГотовностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НадписьСтепеньГотовностиНажатиеЗавершение",ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтепеньГотовности", Объект.СтепеньГотовности);
	ПараметрыФормы.Вставить("СтепеньГотовностиУказанаВШапке", Объект.СтепеньГотовностиУказанаВШапке);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Не ВидОперацииСоответствуетУчетнойПолитике Или ТолькоПросмотр);
	ОткрытьФорму("Документ.ИнвентаризацияНЗП.Форма.ФормаСтепеньГотовности", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставПоПродукции

&НаКлиенте
Процедура СоставПоПродукцииПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставПоПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ТекущиеДанные.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Продукция) Или ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяГруппа) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатурныеГруппыПоПродукции = НоменклатурныеГруппыПоПродукции(
		ТекущиеДанные.Продукция,
		ИспользоватьОднуНоменклатурнуюГруппу,
		ОсновнаяНоменклатурнаяГруппа,
		Объект.Дата);
		
	ТекущиеДанные.НоменклатурнаяГруппа = НоменклатурныеГруппыПоПродукции[ТекущиеДанные.Продукция];
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПоПродукцииСтепеньГотовностиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СоставПоПродукции.ТекущиеДанные;
	Если ТекущиеДанные.СтепеньГотовности > 100 Тогда
		ТекущиеДанные.СтепеньГотовности = 100;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаСостав" Тогда
		
		ИмяТаблицы = "Состав";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаСоставПоПродукции" Тогда
		
		ИмяТаблицы = "СоставПоПродукции";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
КонецФункции

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	НоменклатурныеГруппыПоПродукции = НоменклатурныеГруппыПоПродукции(
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"),
		ИспользоватьОднуНоменклатурнуюГруппу,
		ОсновнаяНоменклатурнаяГруппа,
		Объект.Дата);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокаТабличнойЧасти.Продукция = СтрокаТовара.Номенклатура;
		
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = НоменклатурныеГруппыПоПродукции[СтрокаТабличнойЧасти.Продукция];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Продукция");
	СписокСвойств.Добавить("НоменклатурнаяГруппа");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("СтепеньГотовности");
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	СписокПродукции = Объект[ИмяТаблицы].Выгрузить();
	СписокПродукции.Очистить();
	СписокПродукции.Колонки.Добавить("Номенклатура");

	Для Каждого ИдентификаторСтроки Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
		КопируемаяСтрока = Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		НоваяСтрока = СписокПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КопируемаяСтрока);
		НоваяСтрока.Номенклатура = КопируемаяСтрока.Продукция;
	КонецЦикла;

	ОбщегоНазначения.СкопироватьВБуферОбмена(СписокПродукции, Объект.Ссылка.Метаданные().Имя);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОрганизацияПриИзмененииКлиент()
	ОчиститьСообщения();
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииКлиент()
	
	ОчиститьСообщения();
	// Общие проверки условий по датам.
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзмененииКлиент()
	ОчиститьСообщения();
	СчетЗатратПриИзмененииСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатурныеГруппыПоПродукции(СписокПродукции, ИспользоватьОднуНоменклатурнуюГруппу, ОсновнаяНоменклатурнаяГруппа, ДатаДокумента)
	
	НоменклатурныеГруппыПоПродукции = Документы.ИнвентаризацияНЗП.НоменклатурныеГруппыПоПродукции(
		СписокПродукции,
		ИспользоватьОднуНоменклатурнуюГруппу,
		ОсновнаяНоменклатурнаяГруппа,
		ДатаДокумента);
	
	Возврат НоменклатурныеГруппыПоПродукции;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();

	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
		
	УстановитьФункциональныеОпцииФормы();

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
		
	СчетаПрямыхЗатрат = НастроитьОтборСчетаЗатрат();

	Если СчетаПрямыхЗатрат.Количество() >0
		И (Не ЗначениеЗаполнено(Объект.СчетЗатрат)
		Или СчетаПрямыхЗатрат.Найти(Объект.СчетЗатрат) = Неопределено) Тогда
		Объект.СчетЗатрат = СчетаПрямыхЗатрат[0];
	КонецЕсли;
		
	ВидОперацииУчетнойПолитики = Справочники.НастройкиУчетаЗатрат.ИспользованиеДокументаИнвентаризацияНезавершенногоПроизводства(
			Объект.Дата,
			Объект.СчетЗатрат,
			Объект.Организация);
			
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВидОперации = ВидОперацииУчетнойПолитики;
	КонецЕсли;
	
	ВидОперацииСоответствуетУчетнойПолитике = (Объект.ВидОперации = ВидОперацииУчетнойПолитики) И ЗначениеЗаполнено(ВидОперацииУчетнойПолитики);
	
	КоманднаяПанель.Видимость = ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаСтраницы.Доступность = ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаОднаНоменклатурнаяГруппа.ТолькоПросмотр = Не ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаПодвал.ТолькоПросмотр = Не ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаНесовместимосСУчетнойПолитикой.Видимость = Не ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаНомерДата.Видимость = ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.Организация.Видимость = ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.СчетЗатрат.Видимость = ВидОперацииСоответствуетУчетнойПолитике;
	Элементы.ГруппаШапка.ТолькоПросмотр = Не ВидОперацииСоответствуетУчетнойПолитике;
	
	Если Не ЗначениеЗаполнено(ВидОперацииУчетнойПолитики)
		Или Не ВидОперацииСоответствуетУчетнойПолитике Тогда
		
		ЧастиЗаголовка = Новый Массив;
		Если Не ЗначениеЗаполнено(ВидОперацииУчетнойПолитики) Тогда
			ЧастиЗаголовка.Добавить(
				НСтр("ru = 'Редактирование документа невозможно: для счета %1 учет незавершенного производства по результатам инвентаризации отключен в <a href = ""e1cib/list/РегистрСведений.УчетнаяПолитика"">учетной политике</a>.'"));
		ИначеЕсли Не ВидОперацииСоответствуетУчетнойПолитике Тогда
			ЧастиЗаголовка.Добавить(
				НСтр("ru = 'Редактирование документа невозможно: для счета %1 в <a href = ""e1cib/list/РегистрСведений.УчетнаяПолитика"">учетной политике</a> задан другой порядок учета незавершенного производства.'"));
			Если ВидОперацииУчетнойПолитики = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка Тогда
				ЧастиЗаголовка.Добавить(НСтр("ru = '
				|В документе вручную введены суммы незавершенного производства в разрезе номенклатурных групп.
				|В учетной политике установлено, что вводятся данные о количестве и степени готовности наименований продукции.'"));
			Иначе
				ЧастиЗаголовка.Добавить(НСтр("ru = '
				|В документе введены данные о количестве и степени готовности наименований продукции.
				|В учетной политике установлено, что суммы незавершенного производства вводятся вручную в разрезе номенклатурных групп.'"));
			КонецЕсли;
		КонецЕсли;
		Если Не Объект.Ссылка.Пустая() Тогда
			Если ВидОперацииУчетнойПолитики = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка
				Или (Не ЗначениеЗаполнено(ВидОперацииУчетнойПолитики) И Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка) Тогда
				ЧастиЗаголовка.Добавить(НСтр("ru = '
					|Чтобы отредактировать ранее введенные данные, выполните одно из следующих действий:
					| - измените настройки счета в учетной политике,
					| - укажите в документе счет, на котором ведется суммовая оценка незавершенного производства,
					| - измените дату документа на ту, в которой действует настройка с суммовой оценкой незавершенного производства.'"));
			Иначе
				ЧастиЗаголовка.Добавить(НСтр("ru = '
					|Чтобы отредактировать ранее введенные данные, выполните одно из следующих действий:
					| - измените настройки счета в учетной политике,
					| - укажите в документе счет, для которого установлена количественная оценка незавершенного производства,
					| - измените дату документа на ту, в которой действует настройка с количественной оценкой незавершенного производства.'"));
			КонецЕсли;
		КонецЕсли;
		Элементы.ОтключеноУчетнойПолитикой.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(ЧастиЗаголовка), ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(Объект.СчетЗатрат));
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСоставПоПродукции;
		Элементы.СоставПоПродукцииСтепеньГотовности.Видимость = Не Объект.СтепеньГотовностиУказанаВШапке;
		
		Если Объект.СтепеньГотовностиУказанаВШапке Тогда
			НадписьСтепеньГотовности = Формат(Объект.СтепеньГотовности, "ЧН='0%'; ЧФ='Ч%';");
		Иначе
			НадписьСтепеньГотовности = Нстр("ru = 'В списке'");
		КонецЕсли;
		
	ИначеЕсли Не ИспользоватьОднуНоменклатурнуюГруппу Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСостав;
		Элементы.СоставНоменклатурнаяГруппа.Видимость = Не БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
		
	Иначе
		Элементы.СуммаНУ.Видимость   = Не (ПрименениеУСН И Не УменьшатьРасходыНаОстатокНЗП);
		Элементы.РасходыНУ.Видимость = ПрименениеУСН И УменьшатьРасходыНаОстатокНЗП;
	КонецЕсли;
	Элементы.ГруппаОднаНоменклатурнаяГруппа.Видимость =
		(Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка И ИспользоватьОднуНоменклатурнуюГруппу);
	Элементы.ГруппаСтраницы.Видимость =
		(Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка) Или Не ИспользоватьОднуНоменклатурнуюГруппу;
	Элементы.НадписьСтепеньГотовности.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;

	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		
		СтрокаСостава = ?(Объект.Состав.Количество() = 0, Объект.Состав.Добавить(), Объект.Состав[0]);
		СтрокаСостава.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
		ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
		
	КонецЕсли;
	УправлениеФормой();
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПрименениеУСН                = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	УменьшатьРасходыНаОстатокНЗП =
		(УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Объект.Организация, Объект.Дата) = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// СоставСуммаНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСуммаНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УменьшатьРасходыНаОстатокНЗП", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// СоставОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставОтражениеВУСН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УменьшатьРасходыНаОстатокНЗП", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// СоставПоПродукцииНоменклатурнаяГруппа
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставПоПродукцииНоменклатурнаяГруппа");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция НастроитьОтборСчетаЗатрат()
	
	СписокСчетов = Новый Массив;
	
	// Включим предопределенные счета и их субсчета
	ПоляСчетЗатрат = Новый Массив;
	ПоляСчетЗатрат.Добавить(Элементы.СчетЗатрат);
	ПоляСчетЗатрат.Добавить(Элементы.ОтключеноУчетнойПолитикойСчетЗатрат);
	Для Каждого Поле Из ПоляСчетЗатрат Цикл
		СписокСчетов = УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Поле, Объект.Организация, Объект.Дата);
	КонецЦикла;
	
	// Установленный отбор одинаковый для обоих полей, поэтому можно возвращать любой список счетов, в том числе последний.
	Возврат СписокСчетов;
	
КонецФункции

&НаКлиенте
Процедура СчетЗатратПриИзмененииСервер()
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтепеньГотовностиНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	СтепеньГотовностиУказанаВШапкеДоИзменения = Объект.СтепеньГотовностиУказанаВШапке;
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	Если Не Объект.СтепеньГотовностиУказанаВШапке И СтепеньГотовностиУказанаВШапкеДоИзменения Тогда
		Для Каждого СтрокаСостава Из Объект.СоставПоПродукции Цикл
			СтрокаСостава.СтепеньГотовности = Объект.СтепеньГотовности;
		КонецЦикла;
	КонецЕсли;
	УправлениеФормой();

КонецПроцедуры


#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.СоставПоПродукцииВставитьСтроки.Доступность                = Доступность;
	Элементы.СоставПоПродукцииКонтекстноеМенюВставитьСтроки.Доступность = Доступность;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

