#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает время документа по умолчанию.
// Требуется если пользователь используется опцию:
// "Время документов устанавливать автоматически".
// 
// Возвращаемое значение:
//  Структура -  Время документа по умолчанию:
//   * Часы - Число
//   * Минуты - Число
//
Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//  Ограничение - См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиОбновления

Процедура УстановитьПроведен(ПараметрыОтложенногоОбновления = Неопределено) Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПроведен(Метаданные.Документы.ИнвентаризацияНЗП, ПараметрыОтложенногоОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьВидОперации(ПараметрыОбработчика) Экспорт
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ИнвентаризацияНЗП.Ссылка КАК Ссылка,
	|	ИнвентаризацияНЗП.МоментВремени КАК Курсор
	|ИЗ
	|	Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|ГДЕ
	|	ИнвентаризацияНЗП.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИнвентаризацияНЗП.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курсор УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		Запрос = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "ИнвентаризацияНЗП");
		Запрос.Оператор.Отбор.Добавить("ИнвентаризацияНЗП.МоментВремени < &Курсор");
		ТекстЗапроса = Запрос.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ИнвентаризацияНЗП");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Или ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка;
		
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение = СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении обработчика Документы.ИнвентаризацияНЗП.ЗаполнитьВидОперации.
                      |%1'"),
				ПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ИнвентаризацияНЗП,
				Выборка.Ссылка,
				Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Инвентаризация незавершенного производства""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ПодразделениеОрганизации");
	
	Возврат Результат;
	
КонецФункции

// В документе "Инвентаризация незавершенного производства" с видом операции "КоличественнаяОценка" незавершенное
// производство указывается в разрезе изготавливаемой продукции. Также в документе требуется указать,
// к какой номенклатурной группе относится продукция, так как одна и та же продукция может относиться к разным номенклатурным группам.
// Но на практике часто бывает, что можно автоматически достаточно точно определить к какой номенклатурной относится продукция.
// Например, когда используется только одна номенклатурная группа "Основная номенклатурная группа", которая заполняется
// автоматически и пользователю даже не предоставляется ее выбор.
// Метод возвращает номенклатурные группы для списка продукции, чтобы автоматически заполнить их в табличной части документа.
// Номенклатурная группа для каждой продукции определяется по следующему алгоритму (в порядке убывания приоритета):
// 1. Если используется одна номенклатурная группа, то возвращается основная номенклатурная группа;
// 2. Если в оборотах по регистру Хозрасчетный для всех организаций по счетам, на которых есть одновременно субконто
// "Продукция" и "Номенклатурная группа", для заданной продукции встречается единственная непустая номенклатурная группа,
// то возвращается эта номенклатурная группа;
// 3. Номенклатурная группа, заданная в карточке справочника Номенклатура, соответствующей продукции.
// 
// Параметры:
//  СписокПродукции - СправочникСсылка.Номенклатура
//                  - Массив из СправочникСсылка.Номенклатура
//  ИспользоватьОднуНоменклатурнуюГруппу - Булево
//  ОсновнаяНоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Номенклатурные группы, соответствующие заданной продукции:
//    * Ключ - СправочникСсылка.Номенклатура
//    * Значение - СправочникСсылка.НоменклатурныеГруппы
//
Функция НоменклатурныеГруппыПоПродукции(Знач СписокПродукции, ИспользоватьОднуНоменклатурнуюГруппу, ОсновнаяНоменклатурнаяГруппа, ДатаДокумента) Экспорт

	НоменклатурныеГруппыПоПродукции = Новый Соответствие;
	
	Если ТипЗнч(СписокПродукции) <> Тип("Массив") Тогда
		СписокПродукции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокПродукции);
	Иначе
		СписокПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПродукции);
	КонецЕсли;
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		Для Каждого Продукция Из СписокПродукции Цикл
			НоменклатурныеГруппыПоПродукции.Вставить(Продукция, ОсновнаяНоменклатурнаяГруппа);
		КонецЦикла;
		Возврат НоменклатурныеГруппыПоПродукции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Запрос состоит из двух частей, одна из которых выполняется в привилегированном режиме, чтобы получить данные по всем
	// организациям, а не только по тем, которые доступны пользователю.
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокПродукции", СписокПродукции);
	Запрос.УстановитьПараметр("НачалоПрошлогоГода", НачалоГода(ДобавитьМесяц(ДатаДокумента, -12)));
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.НоменклатурныеГруппы)) КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ИспользуемыеНоменклатурныеГруппы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПрошлогоГода, , , , &ВидыСубконто, Субконто1 В (&СписокПродукции), , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.НоменклатурныеГруппы)) <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОбороты.Субконто2) = 1";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Поскольку первая часть выполняется в привилегированном режиме, результат может содержать ссылки на номенклатурные группы,
	// недоступные пользователю из-за ограничения по ролям. В интерфейсе они будут отображаться как "Объект не найден...".
	// Чтобы избежать этого, в запросе делаем явное соединение со справочником "НоменклатурныеГруппы".
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИспользуемыеНоменклатурныеГруппы.Продукция КАК Продукция,
	|	ИспользуемыеНоменклатурныеГруппы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВариантыНоменклатурныхГрупп
	|ИЗ
	|	ИспользуемыеНоменклатурныеГруппы КАК ИспользуемыеНоменклатурныеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ПО ИспользуемыеНоменклатурныеГруппы.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.НоменклатурнаяГруппа,
	|	2
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокПродукции)
	|	И Номенклатура.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Продукция,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыНоменклатурныхГрупп.Продукция КАК Продукция,
	|	МИНИМУМ(ПриоритетыНоменклатурныхГрупп.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ПриоритетыНоменклатурныхГрупп
	|ИЗ
	|	ВариантыНоменклатурныхГрупп КАК ПриоритетыНоменклатурныхГрупп
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыНоменклатурныхГрупп.Продукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Продукция,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыНоменклатурныхГрупп.Продукция КАК Продукция,
	|	ВариантыНоменклатурныхГрупп.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	ВариантыНоменклатурныхГрупп КАК ВариантыНоменклатурныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетыНоменклатурныхГрупп КАК ПриоритетыНоменклатурныхГрупп
	|		ПО ВариантыНоменклатурныхГрупп.Приоритет = ПриоритетыНоменклатурныхГрупп.Приоритет
	|			И ВариантыНоменклатурныхГрупп.Продукция = ПриоритетыНоменклатурныхГрупп.Продукция";

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоменклатурныеГруппыПоПродукции.Вставить(Выборка.Продукция, Выборка.НоменклатурнаяГруппа)
	КонецЦикла;
	
	Возврат НоменклатурныеГруппыПоПродукции;
	
КонецФункции

#КонецОбласти

#КонецЕсли