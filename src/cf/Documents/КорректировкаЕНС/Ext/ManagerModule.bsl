#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 1, 0);
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_КорректировкаЕНС";
	Набор.Идентификатор = Новый УникальныйИдентификатор("e57b4531-9252-40de-9a9b-47564aee61ac");
	Набор.Используется  = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Налог КАК Налог,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СчетУчета КАК СчетУчета,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ВидПлатежаВГосБюджет КАК ВидПлатежаВГосБюджет,
	|	Реквизиты.УровеньБюджета КАК УровеньБюджета,
	|	Реквизиты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Реквизиты.Основание КАК Основание,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.Субконто1 КАК Субконто1,
	|	Реквизиты.Субконто2 КАК Субконто2,
	|	Реквизиты.Субконто3 КАК Субконто3
	|ИЗ
	|	Документ.КорректировкаЕНС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура СформироватьПроводки(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ВидОперации = Реквизиты.ВидОперации;
	СвойстваСчетаУчета = СвойстваСчета(Реквизиты.СчетУчета);
	ЕстьУровниБюджетов = СвойстваСчетаУчета.ЕстьУровниБюджетов;
	ЕстьРегистрацияВНалоговомОргане = СвойстваСчетаУчета.ЕстьРегистрацияВНалоговомОргане;
	ЕстьУчетПоПодразделениям = СвойстваСчетаУчета.ЕстьУчетПоПодразделениям;
	ЕстьНалоговыйУчет = СвойстваСчетаУчета.СвойстваСчета.НалоговыйУчет
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	КоличествоСубконто = СвойстваСчетаУчета.СвойстваСчета.КоличествоСубконто;
	
	ВсеСубконто = Новый Соответствие;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеПени Тогда
		ВсеСубконто.Вставить(
			"ПрочиеДоходыИРасходы", 
			Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ПениПоНалогам"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеШтрафа Тогда
		ВсеСубконто.Вставить(
			"ПрочиеДоходыИРасходы", 
			Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ШтрафыПоНалогам"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеПроцентов Тогда
		ВсеСубконто.Вставить(
			"ПрочиеДоходыИРасходы", 
			Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ПроцентыПоНалогамКУплате"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеГосПошлины Тогда
		ВсеСубконто.Вставить(
			"ПрочиеДоходыИРасходы", 
			Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ГосПошлиныПоСудебнымСпорам"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеПроцентовОтНалоговогоОргана Тогда
		ВсеСубконто.Вставить(
			"ПрочиеДоходыИРасходы", 
			Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ПроцентыПоНалогамКПолучению"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПереводСредствТретьемуЛицу
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеСредствОтТретьегоЛица Тогда
		ВсеСубконто.Вставить("Контрагенты", Реквизиты.Контрагент);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеНалога
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ВозмещениеНалога Тогда
		ВсеСубконто.Вставить("ВидыПлатежейВГосБюджет", Реквизиты.ВидПлатежаВГосБюджет);
		ВсеСубконто.Вставить("ВидыНалогов", Реквизиты.Налог);
		Если ЕстьУровниБюджетов Тогда
			ВсеСубконто.Вставить("УровниБюджетов", Реквизиты.УровеньБюджета);
		КонецЕсли;
		Если ЕстьРегистрацияВНалоговомОргане Тогда
			ВсеСубконто.Вставить("РегистрацияВНалоговомОргане", Реквизиты.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПрочееУвеличениеСальдо
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПрочееУменьшениеСальдо Тогда
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			ВсеСубконто.Вставить(НомерСубконто, Реквизиты["Субконто" + НомерСубконто]);
		КонецЦикла;
		
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Период = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Если Не ПустаяСтрока(Реквизиты.Основание) Тогда
		Проводка.Содержание = СтрШаблон("Единый налоговый счет: %1. %2", 
			Строка(Реквизиты.ВидОперации), 
			Реквизиты.Основание);
	Иначе
		Проводка.Содержание = СтрШаблон("Единый налоговый счет: %1", 
			Строка(Реквизиты.ВидОперации));
	КонецЕсли;
	
	Проводка.Сумма = Реквизиты.СуммаДокумента;
	
	ЭтоУвеличениеСальдоЕНС = ВидыОперацийУвеличениеСальдоЕНС().Найти(ВидОперации) <> Неопределено;
	
	Если ЭтоУвеличениеСальдоЕНС Тогда
		
		// Дт 68.90 Кт <СчетУчета>
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		
		Проводка.СчетКт = Реквизиты.СчетУчета;
		Для каждого КоррСубконто Из ВсеСубконто Цикл
			Если ЗначениеЗаполнено(КоррСубконто.Значение) Тогда
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, КоррСубконто.Ключ, КоррСубконто.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если ЕстьНалоговыйУчет Тогда
			Проводка.СуммаНУКт = Реквизиты.СуммаДокумента;
		КонецЕсли;
		
	Иначе
		
		// Дт <СчетУчета> Кт 68.90
		
		Проводка.СчетДт = Реквизиты.СчетУчета;
		Для каждого КоррСубконто Из ВсеСубконто Цикл
			Если ЗначениеЗаполнено(КоррСубконто.Значение) Тогда
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, КоррСубконто.Ключ, КоррСубконто.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		Если ЕстьНалоговыйУчет Тогда
			Проводка.СуммаНУДт = Реквизиты.СуммаДокумента;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ДанныеСчета(ВидОперации, Налог, Дата) Экспорт
	
	Счет = Неопределено;
	УровеньБюджета = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеНалога
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ВозмещениеНалога Тогда
		Счет = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, Дата);
		УровеньБюджета = Справочники.ВидыНалоговИПлатежейВБюджет.УровеньБюджета(Налог);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеПени
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеШтрафа
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеПроцентов
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.НачислениеГосПошлины Тогда
		Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеПроцентовОтНалоговогоОргана Тогда
		Счет = ПланыСчетов.Хозрасчетный.ПрочиеДоходы; // 91.01
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПереводСредствТретьемуЛицу
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеСредствОтТретьегоЛица Тогда
		Счет = ПланыСчетов.Хозрасчетный.РасчетыПоНалогамСТретьимиЛицами; // 76.51
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета", Счет);
	Результат.Вставить("УровеньБюджета", УровеньБюджета);
	Свойства = СвойстваСчета(Счет);
	Результат.Вставить("СвойстваСчета", Свойства.СвойстваСчета);
	Результат.Вставить("ЕстьУровниБюджетов", Свойства.ЕстьУровниБюджетов);
	Результат.Вставить("ЕстьРегистрацияВНалоговомОргане", Свойства.ЕстьРегистрацияВНалоговомОргане);
	Результат.Вставить("ЕстьУчетПоПодразделениям", Свойства.ЕстьУчетПоПодразделениям);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСчета(Счет) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("СвойстваСчета", Неопределено);
	Свойства.Вставить("ЕстьУровниБюджетов", Ложь);
	Свойства.Вставить("ЕстьРегистрацияВНалоговомОргане", Ложь);
	Свойства.Вставить("ЕстьУчетПоПодразделениям", Ложь);
	
	Если ЗначениеЗаполнено(Счет) Тогда
		Свойства.СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Для каждого Элемент Из Свойства.СвойстваСчета.ИдентификаторыСубконто Цикл
			Если Элемент.Ключ.ИмяПредопределенныхДанных = "УровниБюджетов" Тогда
				Свойства.ЕстьУровниБюджетов = Истина;
			ИначеЕсли Элемент.Ключ.ИмяПредопределенныхДанных = "РегистрацияВНалоговомОргане" Тогда
				Свойства.ЕстьРегистрацияВНалоговомОргане = Истина;
			КонецЕсли;
		КонецЦикла;
		Свойства.ЕстьУчетПоПодразделениям = Свойства.СвойстваСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ВидыОперацийУвеличениеСальдоЕНС() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыОперацийКорректировкиЕНС.ВозмещениеНалога);
	Результат.Добавить(Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеСредствОтТретьегоЛица);
	Результат.Добавить(Перечисления.ВидыОперацийКорректировкиЕНС.ПоступлениеПроцентовОтНалоговогоОргана);
	Результат.Добавить(Перечисления.ВидыОперацийКорректировкиЕНС.ПрочееУвеличениеСальдо);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли