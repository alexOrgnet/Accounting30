#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПринятиеКУчетуОС",
		"ФормаДокумента",
		НСтр("ru='Новости: Принятие к учету ОС'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПринятиеКУчетуОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ТекущийОбъект.ОбъектСтроительства = Неопределено;
	ИначеЕсли ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ТекущийОбъект.Номенклатура = Неопределено;
	ИначеЕсли ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды Тогда
		ТекущийОбъект.ОбъектСтроительства = Неопределено;
		ТекущийОбъект.Номенклатура = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) отличается от амортизации, очищаются некоторые параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
		ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		ТекущийОбъект.СпособНачисленияАмортизацииБУ = Неопределено;
		ТекущийОбъект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) не подразумевает начисление амортизации (износа), очищаются все параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
			ИЛИ ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ТекущийОбъект.СрокПолезногоИспользованияБУ = 0;
		ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		ТекущийОбъект.НачислятьАмортизациюБУ = 0;
		ТекущийОбъект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	// В зависимости от выбранного способа амортизации (БУ) нужно очистить неиспользуемые параметры амортизации (БУ)
	Если ЗначениеЗаполнено(ТекущийОбъект.СпособНачисленияАмортизацииБУ) Тогда

		// зависимость объема работ от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
			ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		КонецЕсли;
	
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
			ТекущийОбъект.СрокПолезногоИспользованияБУ = 0;
			ТекущийОбъект.НачислятьАмортизациюБУ = Ложь;
		КонецЕсли;

	КонецЕсли;

	// Если вариант включения в состав расходов (НУ) отличается от амортизации, параметры амортизации (НУ) очищаются
	Если ТекущийОбъект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		ТекущийОбъект.НачислятьАмортизациюНУ        = Ложь;
		ТекущийОбъект.СпособНачисленияАмортизацииНУ = Неопределено;
		ТекущийОбъект.СрокПолезногоИспользованияНУ  = 0;
		ТекущийОбъект.СпециальныйКоэффициентНУ      = 0;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
	Оповестить("Запись_ПринятиеКУчетуОС", ПараметрыЗаписи, Объект.Ссылка);
	
	Для Каждого Строка Из Объект.ОС Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, Строка);;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		УстановитьФункциональныеОпцииФормы();
	КонецЕсли;
	
	ОбновитьПризнакПрослеживаемости();
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();
	
	УправлениеФормой(ЭтаФорма);
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииНаСервере();
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ОС Цикл
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийГруппыСтраницы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ГруппаНалоговыйУчетУСН Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыВнеоборотныйАктив

&НаКлиенте
Процедура СпособПоступленияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СпособПоступления) Тогда
		
		Если ЭтоПредметыАренды(ЭтотОбъект) Или ЭтоЛизинг(ЭтотОбъект) Тогда
			
			Объект.ПорядокВключенияСтоимостиВСоставРасходовУСН = ПредопределенноеЗначение(
				"Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов");
				
			Если ПлательщикНДФЛ Тогда
				Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение(
					"Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
			КонецЕсли;
				
		КонецЕсли;
		
		УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ(ЭтотОбъект);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЭтоПредметыАренды(ЭтотОбъект) И Не ЭтоЛизинг(ЭтотОбъект) Тогда
		
		Объект.Контрагент = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
		Объект.ПервоначальнаяСтоимостьНУ = Неопределено;
		Объект.СпособОтраженияРасходовПоАренднымПлатежам = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);
	Иначе
		Объект.СчетУчетаВнеоборотногоАктива = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредметАрендыПриИзменении(Элемент)
	
	ПредметАрендыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПоступленияПредметыАрендыПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Контрагент)
		Или Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		Или Не ЗначениеЗаполнено(Объект.ПредметАренды) Тогда
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	СпособПоступленияПредметыАрендыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВнеоборотногоАктиваПриИзменении(Элемент)
	
	СчетУчетаВнеоборотногоАктиваОбработкаИзменения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыБухгалтерскийУчет

&НаКлиенте
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)

	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);

КонецПроцедуры

&НаКлиенте
Процедура ГодоваяНормаАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоЕНАОФНа1000кмПробега = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	
	СтандартнаяОбработка = Ложь;
	Список     = Новый СписокЗначений();
	СписокНорм = ПолучитьСписокВыбораГодовыхНормАмортизации(ПоЕНАОФНа1000кмПробега);
	Список.ЗагрузитьЗначения(СписокНорм);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(Оповещение, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ГодоваяНормаАмортизацииБУ = Результат.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчет

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)

	Объект.СпециальныйКоэффициентНУ = 1;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьПервоначальнуюСтоимостьПриИзменении(Элемент)
	
	УказатьПервоначальнуюСтоимостьОбработкаИзменения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если НЕ Объект.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ") Тогда
		Объект.КоэффициентАмортизацииНУ = 0;
		Объект.СпециальныйКоэффициентНУ = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);

КонецПроцедуры

&НаКлиенте
Процедура СпособСписанияОСНаРасходыНУПриИзменении(Элемент)
	
	Если СпособСписанияОСНаРасходыНУ = "АналогичноАмортизации" Тогда
		Объект.СпособОтраженияРасходовПриВключенииВСтоимость = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчетУСН

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыАмортизационнаяПремия

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)

	Если НЕ ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		Если ПараметрыАмортизационнойПремииЗаполнены(Объект) Тогда
			ТекстВопроса = НСтр("ru = 'Установленные параметры амортизационной премии будут очищены.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УправлениеФормой(ЭтаФорма);
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
				ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СпособыОтраженияРасходовПоАмортизации) Тогда
			СтруктураПараметровАмортизационнойПремии = 
				УчетОСВызовСервера.ПолучитьПараметрыНачисленияАмортизационнойПремии(Объект.СпособыОтраженияРасходовПоАмортизации);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметровАмортизационнойПремии);
			СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		Объект.СчетУчетаЗатратПоАмортизационнойПремии = Неопределено;
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии1 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии2 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии3 = Неопределено;
		СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
	Иначе
		ВключитьАмортизационнуюПремиюВСоставРасходов = Истина;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	СписокОСИзменен = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)

	// Есть ли оплаты для этого ОС?
	МассивОплат = Объект.Оплата.НайтиСтроки(Новый Структура("ОсновноеСредство", Элемент.ТекущиеДанные.ОсновноеСредство));
	Если МассивОплат.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах.
			|Продолжить?'");
			
		// Удалим строку в описании оповещения
		Отказ = Истина;
		
		ЭлементКоллекции = Объект.ОС.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ИндексСтроки = Объект.ОС.Индекс(ЭлементКоллекции);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивОплат", МассивОплат);
		ДополнительныеПараметры.Вставить("ИндексСтроки", ИндексСтроки);
		Оповещение = Новый ОписаниеОповещения("ВопросОСПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОСПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаОплат Из ДополнительныеПараметры.МассивОплат Цикл
			Объект.Оплата.Удалить(СтрокаОплат);
		КонецЦикла;
		Объект.ОС.Удалить(ДополнительныеПараметры.ИндексСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	ЭлементКоллекции = Элементы.ОС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ПолучитьКод(ЭлементКоллекции.ОсновноеСредство);
		ЭлементКоллекции.СпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Распределяется"); 
	КонецЕсли;
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		ЭлементКоллекции.ПрослеживаемыйТовар = ПрослеживаемостьФормыВызовСервераПереопределяемый.ПолучитьПризнакПрослеживаемости(ЭлементКоллекции.ОсновноеСредство, Объект.Дата);
	КонецЕсли;

	Если ЭлементКоллекции <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ЭлементКоллекции.ИдентификаторСтроки;
	КонецЕсли;
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле.Имя = "ОСРНПТ" Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			
			ПринятиеКУчетуПослеИнвентаризации = 
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации");
			Если ПринятиеКУчетуПослеИнвентаризации И Объект.ОтражатьВПрослеживаемости Тогда
				
				ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ОС", ПараметрыФормыПодбора);
			ИначеЕсли ПринятиеКУчетуПослеИнвентаризации И Не Объект.ОтражатьВПрослеживаемости Тогда
				СтандартнаяОбработка = Ложь;
			Иначе
				ПараметрыФормыПодбора.ЭтоПоступление = Ложь;
				ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ОС", ПараметрыФормыПодбора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ОСПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если СписокОСИзменен = Истина Тогда
		ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммыПоОбъектуСтроительства(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Объект строительства'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОбъектСтроительства", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаВнеоборотногоАктива) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Счет учета внеоборотного актива'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаВнеоборотногоАктива", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УчетОСВызовСервера.РассчитатьСтоимостьОбъектаСтроительства(Объект.Организация,
		Объект.ПодразделениеОрганизации, КонецМесяца(Объект.Дата), Объект.СчетУчетаВнеоборотногоАктива,
		Объект.ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)

	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюНаСервере(ОсновноеСредство);
	КонецЕсли;
	
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюНаСервере(Знач ОсновноеСредство)

	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ(ЭтотОбъект);
	Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаВнеоборотногоАктива(Объект.ВидОперации);
	СчетУчетаВнеоборотногоАктиваОбработкаИзменения(ЭтотОбъект);
	
	Если ЭтоПредметыАренды(ЭтотОбъект) Тогда
		ПредметАрендыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетУчетаЗатратПоАмортизационнойПремии

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗатратПоАмортизационнойПремии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ОСРНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВПрослеживаемости", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветШрифтаОшибки);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));
	
	
	// Оформление колонки РНПТ <Не получен>
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВПрослеживаемости", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не получен>'"));

		
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	МассивОсновныхСредств = Объект.ОС.Выгрузить(ДобавленныеСтроки, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");	
	ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код");
	
	Для каждого Строка Из ДобавленныеСтроки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
		КонецЕсли;
		
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			Строка.ПрослеживаемыйТовар = ПрослеживаемостьФормыВызовСервераПереопределяемый.ПолучитьПризнакПрослеживаемости(Строка.ОсновноеСредство, Объект.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ИнвентарныйНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКоды = ОсновныеСредстваКоды.Получить(Строка.ОсновноеСредство);
		Если СтруктураКоды <> Неопределено Тогда 
			Строка.ИнвентарныйНомер = СтруктураКоды.Код;
		КонецЕсли;
		
	КонецЦикла;

	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости();

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ОтражатьВПрослеживаемости = Истина;
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента = Объект.Дата;
	
	ВключитьАмортизационнуюПремиюВСоставРасходов = ПараметрыАмортизационнойПремииЗаполнены(Объект);
	
	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);
	
	Если ЗначениеЗаполнено(Объект.СпособОтраженияРасходовПриВключенииВСтоимость) Тогда
		СпособСписанияОСНаРасходыНУ = "ДругойСпособ";
	Иначе
		СпособСписанияОСНаРасходыНУ = "АналогичноАмортизации";
	КонецЕсли;
	
	НалоговыйУчетИмуществаВедетЛизингополучатель = ?(Объект.НалоговыйУчетИмуществаВедетЛизингополучатель, 1, 0);
	
	УправлениеФормой(ЭтаФорма);
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	НастроитьВидимостьПризнакаОтраженияВПрослеживаемости(Истина);
	Для Каждого Строка Из Объект.ОС Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, Строка);;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СчетУчетаЗатратПоАмортизационнойПремии");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАмортизационнойПремииЗаполнены(Знач Объект)

	Если Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0
			И НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатратПоАмортизационнойПремии)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии1)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии2)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии3) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыВыбораОСДляОплатУСН()

	СписокОС.ЗагрузитьЗначения(Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));
	Если СписокОС.Количество() = 0 Тогда
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
	Иначе
		ПараметрВыбораПоОС = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокОС.ВыгрузитьЗначения()));
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
		ПараметрыВыбораОСДляОплатУСН.Добавить(ПараметрВыбораПоОС);
	КонецЕсли;
	Элементы.ОплатаОсновноеСредство.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОСДляОплатУСН);
	СписокОСИзменен = Ложь;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДФЛ            = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ВестиУчетПоДоговорам      = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ПрименяетсяФСБУ6          = УчетнаяПолитика.ПрименяетсяФСБУ6(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(Форма)

	СтоимостьНеПогашается = 
		ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается");
	СтоимостьНеВключаетсяВРасходы = 
		ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");

	Если Форма.Объект.ПорядокПогашенияСтоимостиБУ = СтоимостьНеПогашается
		И Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> СтоимостьНеВключаетсяВРасходы Тогда

		Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = СтоимостьНеВключаетсяВРасходы;
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
		Форма.Модифицированность = Истина;

		ШаблонСообщения = 
			НСтр("ru = 'В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение ""%1""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы"));
		#Если Клиент Тогда
		ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Оборудование = ЭтоОборудование(Форма);
	ОбъектыСтроительства = ЭтоОбъектыСтроительства(Форма);
	ПредметыАренды = ЭтоПредметыАренды(Форма);
	ПоРезультатамИнвентаризации = ЭтоРезультатыИнвентаризации(Форма);
	ПоДоговоруЛизинга = ЭтоЛизинг(Форма);
	
	// Страница ВнеоборотныйАктив
	Если Оборудование Тогда
		Элементы.ГруппаВнеоборотныйАктив.Заголовок = НСтр("ru='Оборудование'");
	ИначеЕсли ОбъектыСтроительства Тогда
		Элементы.ГруппаВнеоборотныйАктив.Заголовок = НСтр("ru='Объект строительства'");
	ИначеЕсли ПредметыАренды Тогда
		Элементы.ГруппаВнеоборотныйАктив.Заголовок = НСтр("ru='Предмет аренды'");
	Иначе
		Элементы.ГруппаВнеоборотныйАктив.Заголовок = НСтр("ru='Результат инвентаризации'");
	КонецЕсли;
	
	Элементы.СпособПоступления.Видимость = Не ПредметыАренды;
	Элементы.СпособПоступленияПредметыАренды.Видимость = ПредметыАренды;
	Элементы.Контрагент.Видимость = ПредметыАренды Или ПоДоговоруЛизинга И Не ПоРезультатамИнвентаризации;
	Элементы.ДоговорКонтрагента.Видимость = ПредметыАренды Или ПоДоговоруЛизинга И Не ПоРезультатамИнвентаризации;
	Элементы.Номенклатура.Видимость = Оборудование;
	Элементы.ОбъектСтроительства.Видимость = ОбъектыСтроительства;
	Элементы.ПредметАренды.Видимость = ПредметыАренды;
	Элементы.ГруппаКтоВедетНалоговыйУчетИмущества.Видимость = ПредметыАренды И ПоДоговоруЛизинга;
	Элементы.ГруппаКтоВедетНалоговыйУчетИмущества.Доступность = 
		Не БухгалтерскийУчетКлиентСервер.УчетИмуществаВедетЛизингодатель(Объект.Дата);
	Элементы.Склад.Видимость = Оборудование;
	Элементы.СтатьяДоходов.Видимость = ПоРезультатамИнвентаризации;
	Элементы.СчетУчетаВнеоборотногоАктива.Видимость = Оборудование Или ОбъектыСтроительства Или ПредметыАренды;
	Элементы.РассчитатьСуммыПоОбъектуСтроительства.Видимость = ОбъектыСтроительства;
	Элементы.СтоимостьБУ.Видимость = ОбъектыСтроительства ИЛИ ПоРезультатамИнвентаризации;
	Элементы.СтоимостьНУ.Видимость = ОбъектыСтроительства ИЛИ ПоРезультатамИнвентаризации;
	Элементы.СтоимостьПР.Видимость = ОбъектыСтроительства;
	Элементы.СтоимостьВР.Видимость = ОбъектыСтроительства;
	
	// Страница Основные средства
	
	Элементы.ГруппаОсновныеСредства.Видимость = Не ПредметыАренды;
	
	// Страница Бухгалтерский учет
	
	НачислениеАмортизации = Объект.ПорядокПогашенияСтоимостиБУ
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		
	Элементы.ГруппаПараметрыНачисленияАмортизации.Видимость = НачислениеАмортизации;
	
	Если НачислениеАмортизации Тогда
		Линейный = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
		ПоСуммеЧиселЛетИспользования = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
		УменьшаемогоОстатка = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
		ПропорциональноОбъемуПродукции = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
		ПоЕНАОФ = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
		ПоЕНАОФНа1000кмПробега = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега") ;
		ЕдиновременноПриПринятииКУчету = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету") ;
			
		Элементы.КоэффициентУскоренияБУ.Видимость = УменьшаемогоОстатка;
		Элементы.ГруппаГодоваяНормаАмортизацииБУ.Видимость = ПоЕНАОФ ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ПараметрВыработкиБУ.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ГруппаОбъемРаботБУ.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ГрафикАмортизацииПоГодуБУ.Видимость = Линейный 
			ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования ИЛИ ПоЕНАОФ;
		Элементы.НачислятьАмортизациюБУ.Видимость = НЕ ЕдиновременноПриПринятииКУчету;
		Элементы.ГруппаСрокИспользованияБУ.Видимость = НЕ ЕдиновременноПриПринятииКУчету;
		Элементы.ЛиквидационнаяСтоимость.Видимость = Форма.ПрименяетсяФСБУ6;
	КонецЕсли;
	
	// Страница Налоговый учет
	
	Элементы.ГруппаНалоговыйУчет.Видимость = Форма.ПлательщикНалогаНаПрибыль
		Или Форма.ПлательщикНДФЛ И Не ПредметыАренды;
	
	НУВедетЛизингополучатель = ПоДоговоруЛизинга 
		И (Не ПредметыАренды 
		Или ПредметыАренды И Объект.НалоговыйУчетИмуществаВедетЛизингополучатель);
		
	Элементы.ПодсказкаНалоговыйУчет.Видимость = Не (ПредметыАренды И Не НУВедетЛизингополучатель);
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Не ПредметыАренды Или НУВедетЛизингополучатель;
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.ТолькоПросмотр = Не НачислениеАмортизации;
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.КнопкаВыпадающегоСписка = НачислениеАмортизации;
	
	НачислениеАмортизацииНУ = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	ВключениеВРасходыПриПринятииКУчету = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
	СтоимостьНеВключаетсяВРасходы = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
	
	Элементы.УказатьПервоначальнуюСтоимость.Видимость = Объект.СчетУчетаВнеоборотногоАктива =
		ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств");
	Элементы.ПервоначальнаяСтоимостьНУ.Видимость = Форма.ПлательщикНДФЛ И Объект.УказатьПервоначальнуюСтоимость;
	Элементы.РеквизитыДокументаОплаты.Видимость = Объект.УказатьПервоначальнуюСтоимость;
	
	Элементы.СпособСписанияОСНаРасходыНУ.Видимость = ВключениеВРасходыПриПринятииКУчету;
	Элементы.СпособСписанияОСНаРасходыНУ.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.СпособОтраженияРасходовПриВключенииВСтоимость.Видимость = ВключениеВРасходыПриПринятииКУчету
		И Форма.СпособСписанияОСНаРасходыНУ = "ДругойСпособ";
	Элементы.СтатьяПрочихРасходов.Видимость = ВключениеВРасходыПриПринятииКУчету;
	
	Элементы.ГруппаНУАренда.Видимость = НЕ Форма.ПлательщикНДФЛ;
	Элементы.ГруппаНУАренда.ОтображатьЗаголовок = Не ПредметыАренды Или НУВедетЛизингополучатель;
	Элементы.ПервоначальнаяСтоимостьНУЛизинг.Видимость = Не ПредметыАренды И НУВедетЛизингополучатель;
	Элементы.ГруппаРасходыЛизингодателяПредметАренды.Видимость = ПредметыАренды И НУВедетЛизингополучатель;
	Элементы.СпособОтраженияРасходовПоАренднымПлатежам.Видимость = ПредметыАренды Или ПоДоговоруЛизинга;
	
	Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Видимость = НачислениеАмортизацииНУ;
	
	Если НачислениеАмортизацииНУ Тогда
		ПоЕНАОФНУ = Объект.СпособНачисленияАмортизацииНУ 
			= ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ");
		
		Элементы.КоэффициентАмортизацииНУ.Видимость = ПоЕНАОФНУ;
		Элементы.СпециальныйКоэффициентНУ.Видимость = НЕ Форма.ПлательщикНДФЛ ИЛИ ПоЕНАОФНУ;
	КонецЕсли;
	
	// Страница Налоговый учет (УСН)
	
	Элементы.ГруппаНалоговыйУчетУСН.Видимость = Не ПредметыАренды;
	
	Элементы.Оплата.ТолькоПросмотр = Объект.ОС.Количество() = 0;
	
	// Страница Амортизационная премия
	
	Элементы.ГруппаАмортизационнаяПремия.Видимость = Не ПредметыАренды И Не ПоРезультатамИнвентаризации И НачислениеАмортизацииНУ;
	
	Элементы.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
	
	Элементы.ГруппаСчетСубконтоАмортизационнойПремии.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
	
	Элементы.ОСРНПТ.Видимость = Форма.ВедетсяУчетПрослеживаемыхТоваров;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаВнеоборотногоАктива(Знач ВидОперации)
	
	Возврат Документы.ПринятиеКУчетуОС.СчетУчетаВнеоборотногоАктива(ВидОперации);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если ЭтоПредметыАренды(Форма) Или ЭтоЛизинг(Форма) Тогда
			Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества");
		Иначе
			Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПредметыАренды(Форма) Или ЭтоЛизинг(Форма) Тогда
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АрендованноеИмущество");
	Иначе
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ИмяТабличнойЧасти", "ОС");
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКод(Знач ОС)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОС, "Код");
	
КонецФункции

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаНоменклатуры(Знач Организация, Знач Номенклатура, Знач Склад)
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
	Возврат СчетаУчета.СчетУчета;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораГодовыхНормАмортизации(Знач На1000КмПробега = Ложь)
	
	Если На1000КмПробега Тогда
		ИмяРеквизита = "ПроцентОтСтоимостиМашины";
	Иначе
		ИмяРеквизита = "НормаАмортизационныхОтчислений";
	КонецЕсли;
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ." + ИмяРеквизита + " КАК Норма
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	(НЕ ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ.Ссылка ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Норма";
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Норма");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СчетУчетаВнеоборотногоАктиваОбработкаИзменения(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.СчетУчетаВнеоборотногоАктива <> ПредопределенноеЗначение(
			"ПланСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств")
		И Объект.СчетУчетаВнеоборотногоАктива <> ПредопределенноеЗначение(
			"ПланСчетов.Хозрасчетный.ПриобретениеОсновныхСредств") Тогда
		
		Объект.УказатьПервоначальнуюСтоимость = Истина;
		УказатьПервоначальнуюСтоимостьОбработкаИзменения(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УказатьПервоначальнуюСтоимостьОбработкаИзменения(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Объект.УказатьПервоначальнуюСтоимость Тогда
		Объект.ПервоначальнаяСтоимостьНУ = 0;
		Объект.РеквизитыДокументаОплаты  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОборудование(Форма)
	
	Возврат Форма.Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОбъектыСтроительства(Форма)
	
	Возврат Форма.Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПредметыАренды(Форма)
	
	Возврат Форма.Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРезультатыИнвентаризации(Форма)
	
	Возврат Форма.Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЛизинг(Форма)
	
	Возврат Форма.Объект.СпособПоступления = ПредопределенноеЗначение(
		"Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
	
КонецФункции

&НаСервере
Процедура ПредметАрендыПриИзмененииНаСервере()
	
	Если Объект.ОС.Количество() <> 1 Тогда
		Объект.ОС.Очистить();
		Объект.ОС.Добавить();
	КонецЕсли;
	Объект.ОС[0].ОсновноеСредство = Объект.ПредметАренды;
	
	Если Не ЗначениеЗаполнено(Объект.ПредметАренды) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС[0].ИнвентарныйНомер = ПолучитьКод(Объект.ПредметАренды);
	Объект.ОС[0].СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен; 
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Контрагент)
		Или Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОПоступлении = ДанныеОПоступленииПредметаАренды(ЭтотОбъект);
	Объект.СпособПоступления = ДанныеОПоступлении.СпособПоступления;
	Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = ДанныеОПоступлении.НалоговыйУчетИмуществаВедетЛизингополучатель;
	НалоговыйУчетИмуществаВедетЛизингополучатель = ?(Объект.НалоговыйУчетИмуществаВедетЛизингополучатель, 1, 0);
	Объект.ПервоначальнаяСтоимостьНУ = ДанныеОПоступлении.РасходыЛизингодателя;
	
	ОбработатьИзменениеНалоговыйУчетИмуществаВедетЛизингополучатель(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СпособПоступленияПредметыАрендыПриИзмененииНаСервере()
	
	Если Не ЭтоЛизинг(ЭтотОбъект) Тогда
		Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = Ложь;
		НалоговыйУчетИмуществаВедетЛизингополучатель = 0;
	КонецЕсли;
	
	ОбработатьИзменениеНалоговыйУчетИмуществаВедетЛизингополучатель(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КтоВедетНалоговыйУчетИмуществаПриИзменении(Элемент)
	
	Объект.НалоговыйУчетИмуществаВедетЛизингополучатель = НалоговыйУчетИмуществаВедетЛизингополучатель = 1;
	ОбработатьИзменениеНалоговыйУчетИмуществаВедетЛизингополучатель(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеНалоговыйУчетИмуществаВедетЛизингополучатель(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Объект.НалоговыйУчетИмуществаВедетЛизингополучатель Тогда
		Объект.ПервоначальнаяСтоимостьНУ = 0;
	КонецЕсли;
	
	Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = ?(Объект.НалоговыйУчетИмуществаВедетЛизингополучатель,
		ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации"),
		ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуРасходовЛизингодателя(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru='Организация'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Организация", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru='Контрагент'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Контрагент", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru='Договор'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.ДоговорКонтрагента", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПредметАренды) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru='Предмет аренды'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.ПредметАренды", Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОПоступлении = ДанныеОПоступленииПредметаАренды(ЭтотОбъект);
	
	Если Не ДанныеОПоступлении.ЕстьДанныеОПоступлении Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не найдены данные о поступлении основного средства ""%1"".'"), 
			Объект.ПредметАренды);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Объект.ПредметАренды");
	Иначе
		Объект.ПервоначальнаяСтоимостьНУ = ДанныеОПоступлении.РасходыЛизингодателя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОПоступленииПредметаАренды(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыПоступления = Новый Структура;
	ПараметрыПоступления.Вставить("ДатаСведений", 
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, КонецДня(Объект.Дата)));
	ПараметрыПоступления.Вставить("Организация", Объект.Организация);
	ПараметрыПоступления.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПоступления.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыПоступления.Вставить("ПредметАренды", Объект.ПредметАренды);
	
	Данные = ДанныеОПоступленииПредметаАрендыНаСервере(ПараметрыПоступления);
	Возврат Данные;
	
КонецФункции


&НаСервереБезКонтекста
Функция ДанныеОПоступленииПредметаАрендыНаСервере(ПараметрыПоступления)
	
	Данные = РегистрыСведений.ДанныеПредметовАренды.ДанныеПредмета(ПараметрыПоступления);
	Возврат Данные;
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.ОС, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, СтрокаТабличнойЧасти);;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	Если ТаблицаУдаленныхСтрок.Количество() > 0 Тогда
		УдалитьСвязанныеЗаписиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.ОС.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из СтрокиТоваров Цикл
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, Строка);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВПрослеживаемостиПриИзменении(Элемент)
	Если Не Объект.ОтражатьВПрослеживаемости Тогда
		Для Каждого Строка Из Объект.ОС Цикл
			Если Строка.ПрослеживаемыйТовар Тогда
				НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
				НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
		ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПризнакаОтраженияВПрослеживаемости(ПриСозданииФормы = Ложь)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		ЕстьПрослеживаемыйТоварДоИзменения = ЕстьПрослеживаемыйТовар;
		
		ПрослеживаемыйТоварВТЧ = Объект.ОС.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
		
		Если ПрослеживаемыйТоварВТЧ.Количество() > 0 И ВедетсяУчетПрослеживаемыхТоваров Тогда 
			ЕстьПрослеживаемыйТовар = Истина;
		Иначе
			ЕстьПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		
		Элементы.ОтражатьВПрослеживаемости.Видимость = ЕстьПрослеживаемыйТовар И ВедетсяУчетПрослеживаемыхТоваров;
		Если Не ЕстьПрослеживаемыйТоварДоИзменения И ЕстьПрослеживаемыйТовар И НЕ ПриСозданииФормы Тогда
			Объект.ОтражатьВПрослеживаемости = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ОтражатьВПрослеживаемости.Видимость = Ложь;
		Объект.ОтражатьВПрослеживаемости = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти