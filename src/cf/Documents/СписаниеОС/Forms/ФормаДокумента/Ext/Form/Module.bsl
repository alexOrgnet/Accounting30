#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборКодаОперацииПрослеживаемости" Тогда
		ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСписаниеОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбновитьПризнакПрослеживаемости();
	УстановитьПараметрыПоПрослеживаемости();
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДоходовИРасходовНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("Подключаемый_ЗавершениеВыбораСчетовДоходовРасходов", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура(ИменаПолейСчетовДоходовРасходов());
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьДоходы", Объект.ОсталисьМатериальныеЦенностиОтВыбытия);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.СписаниеОС.Форма.ФормаДоходыРасходы", ПараметрыФормы,
		ЭтотОбъект, УникальныйИдентификатор, , , ОповещениеОЗакрытииФормыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступилиЦенностиОтЛиквидацииПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОписаниеДоходовРасходов(ЭтотОбъект);
	УстановитьВидимостьЭлементовЦенностейОтВыбытия(ЭтотОбъект);
	Если Объект.ОсталисьМатериальныеЦенностиОтВыбытия Тогда
		ЗаполнитьЦенностиОтВыбытия();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеОС = Элементы.ОС.ТекущиеДанные;
		ТекущиеДанныеОС.ОписаниеЦенностейОтВыбытия = НаименованиеНазаполненныхЦенностей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
		СтрокаТЧ.ЕдиницаУчета = Неопределено;
		СтрокаТЧ.МОЛ = Неопределено;
		СтрокаТЧ.Количество = 1;
	Иначе
		СтруктураСведений = РеквизитыОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСведений);
		МаксПериодПервоначальныхСведенийОС = Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
		Если СтрокаТЧ.ЕдиницаУчета <> ПредопределенноеЗначение("Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект") Тогда
			СтрокаТЧ.Количество = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТЧ.ПрослеживаемыйТовар = ПрослеживаемостьФормыВызовСервераПереопределяемый.ПолучитьПризнакПрослеживаемости(СтрокаТЧ.ОсновноеСредство, Объект.Дата);
	КонецЕсли;
	
	Если СтрокаТЧ.ПрослеживаемыйТовар И ВедетсяУчетГрупповыхОС Тогда
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("ОсновноеСредство",                  СтрокаТЧ.ОсновноеСредство);
		ПараметрыЗаполнения.Вставить("КлючСтроки",                        СтрокаТЧ.КлючСтроки);
		ПараметрыЗаполнения.Вставить("РНПТ",                              СтрокаТЧ.РНПТ);
		ПараметрыЗаполнения.Вставить("ЕдиницаУчета",                      СтрокаТЧ.ЕдиницаУчета);
		
		ЗаполнитьРеквизитыПоПрослеживаемости(ПараметрыЗаполнения);
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Если СтрокаТЧ <> Неопределено
		И СтрокаТЧ.ЕдиницаУчета = ПредопределенноеЗначение("Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект") Тогда
		
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = СтрокаТЧ.КлючСтроки;
	КонецЕсли;
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОСЦенностиОтВыбытия" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяСтрока = Элементы.ОС.ТекущиеДанные;
		ОткрытьСписокЦенностей(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Если Поле.Имя = "ОСПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	
	Если Поле.Имя = "ОСРНПТ" Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление = 
				ТекущиеДанные.ЕдиницаУчета = ПредопределенноеЗначение("Перечисление.ЕдиницыУчетаОС.ИнвентарныйОбъект");
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ОС", ПараметрыФормыПодбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
КонецПроцедуры

&НаКлиенте
Процедура ОСКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОС Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ОС.НайтиПоИдентификатору(СтрокаОС);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
		
	КонецЕсли;
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	ПараметрыФормы.Вставить("ПоказыватьГрупповыеОС", Истина);
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	ВедетсяУчетГрупповыхОС = ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС");
		
	УстановитьПараметрыПоПрослеживаемости();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьОписаниеДоходовРасходов(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьЭлементовЦенностейОтВыбытия(ЭтотОбъект);
	
	ЗаполнитьЦенностиОтВыбытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ПричиныИзменения = Новый Массив();
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Склад", Объект));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство, ПрослеживаемыйТовар");
	
	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
		
	МассивОС = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
			МассивОС.Добавить(СтрокаТаблицы.ОсновноеСредство);
		КонецЕсли;
	КонецЦикла;
	ЕдиницыУчета = ЕдиницыУчетаОС(МассивОС);
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл
		
		СтрокаОС.ЕдиницаУчета = ЕдиницыУчета[СтрокаОС.ОсновноеСредство];
		
		Если СтрокаОС.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
			СтрокаОС.ИнвентарныйНомер = "";
		Иначе
			СтрокаНомера = ТаблицаНомеров.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
			Если СтрокаНомера <> Неопределено Тогда
				СтрокаОС.ИнвентарныйНомер = СтрокаНомера.ИнвентарныйНомер;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницыУчетаОС(Знач МассивОС)
	
	Если Не ЗначениеЗаполнено(МассивОС) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОС, "ЕдиницаУчета");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЦенностиОтВыбытия()
	
	Если Не Объект.ОсталисьМатериальныеЦенностиОтВыбытия Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияЦенностей = ОписанияЦенностейОтВыбытия(Объект.ЦенностиОтВыбытия);
	
	НаименованиеНезаполненныхЦенностей = НаименованиеНазаполненныхЦенностей();
	
	Для Каждого СтрокаОС ИЗ Объект.ОС Цикл
		
		СтрокаОС.ОписаниеЦенностейОтВыбытия = НаименованиеНезаполненныхЦенностей;
		
		Если Не ЗначениеЗаполнено(СтрокаОС.КлючСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЦенностейСтроки = ОписанияЦенностей.Получить(СтрокаОС.КлючСтроки);
		Если ОписаниеЦенностейСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОС.ОписаниеЦенностейОтВыбытия = СтрСоединить(ОписаниеЦенностейСтроки, ", ");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеЦенностейСтроки(ЦенностиОтВыбытияСтроки)
	
	НаименованияЦенностей = НаименованияЦенностей(ЦенностиОтВыбытияСтроки);
	
	Если Не ЗначениеЗаполнено(НаименованияЦенностей) Тогда
		Возврат НаименованиеНазаполненныхЦенностей();
	КонецЕсли;
	
	НаименованияНоменклатур = Новый Массив;
	Для Каждого КлючЗначение Из НаименованияЦенностей Цикл
		НаименованияНоменклатур.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(НаименованияНоменклатур, ", ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписанияЦенностейОтВыбытия(ЦенностиОтВыбытия)
	
	НаименованияЦенностей = НаименованияЦенностей(ЦенностиОтВыбытия);
	
	ОписанияЦенностейОтВыбытия = Новый Соответствие;
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаЦенности Из ЦенностиОтВыбытия Цикл
		
		НаименованиеЦенности = НаименованияЦенностей.Получить(СтрокаЦенности.Номенклатура);
		Если НаименованиеЦенности = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеДляКлючаСтроки = ОписанияЦенностейОтВыбытия.Получить(СтрокаЦенности.КлючСтроки);
		Если ОписаниеДляКлючаСтроки = Неопределено Тогда
			ОписаниеДляКлючаСтроки = Новый Массив;
			ОписанияЦенностейОтВыбытия.Вставить(СтрокаЦенности.КлючСтроки, ОписаниеДляКлючаСтроки);
		КонецЕсли;
		
		ОписаниеДляКлючаСтроки.Добавить(НаименованиеЦенности);
		
	КонецЦикла;
	
	Возврат ОписанияЦенностейОтВыбытия;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаименованияЦенностей(ЦенностиОтВыбытия)
	
	ТаблицаНоменклатуры = ЦенностиОтВыбытия.Выгрузить(,"Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	НаименованияЦенностей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"), "Наименование");
	
	Возврат НаименованияЦенностей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеНазаполненныхЦенностей()
	
	Возврат НСтр("ru = 'Нет'");
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыОС(ОсновноеСредство, Организация, Дата)
	
	Результат = Новый Структура;
	ЕдиницаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеСредство, "ЕдиницаУчета");
	Результат.Вставить("ЕдиницаУчета", ЕдиницаУчета);
	Результат.Вставить("ИнвентарныйНомер", "");
	Результат.Вставить("Период", '0001-01-01');
	Если ЕдиницаУчета <> Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
		СведенияОНомере = УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);
		ЗаполнитьЗначенияСвойств(Результат, СведенияОНомере);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	Если УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство) Тогда
		ЗаполнитьЦенностиОтВыбытия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		МассивОС = Новый Массив;
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			МассивОС.Добавить(Строка.ОсновноеСредство);
		КонецЦикла;
		ИсторияПрослеживаемостиОС = Справочники.ОсновныеСредства.ПризнакПрослеживаемостиНаДатуИзИстории(МассивОС, Объект.Дата);
		РеквизитыОС = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОС, "ПрослеживаемыйТовар");
	КонецЕсли;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		ДобавленнаяСтрока.ОписаниеЦенностейОтВыбытия = НаименованиеНазаполненныхЦенностей();
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			РеквизитыТекущегоОС = ИсторияПрослеживаемостиОС[ДобавленнаяСтрока.ОсновноеСредство];
			Если РеквизитыТекущегоОС <> Неопределено Тогда
				ДобавленнаяСтрока.ПрослеживаемыйТовар = РеквизитыТекущегоОС.ПрослеживаемыйТовар;
			Иначе
				ДобавленнаяСтрока.ПрослеживаемыйТовар = РеквизитыОС[ДобавленнаяСтрока.ОсновноеСредство];
			КонецЕсли;
			
			Если ДобавленнаяСтрока.ПрослеживаемыйТовар И ВедетсяУчетГрупповыхОС Тогда
				
				ЗаполнитьРеквизитыПоПрослеживаемости(ДобавленнаяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаПолейСчетовДоходовРасходов()
	Возврат "СчетСписания,Субконто,СчетУчетаДоходов,СубконтоДоходов";
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗавершениеВыбораСчетовДоходовРасходов(РезультатВыбораСчетов, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбораСчетов) Тогда
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбораСчетов, ИменаПолейСчетовДоходовРасходов());
		УстановитьОписаниеДоходовРасходов(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОписанияСчетовДоходовРасходов(Форма)
	
	Если Форма.Объект.ОсталисьМатериальныеЦенностиОтВыбытия Тогда
		Возврат НСтр("ru = 'Доходы и расходы'");
	Иначе
		Возврат НСтр("ru = 'Расходы'");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеСчетовДоходовРасходов(СчетаАналитика, ОсталисьМатериальныеЦенностиОтВыбытия)
	
	ЧастиОписания = Новый Массив;
	Если ОсталисьМатериальныеЦенностиОтВыбытия Тогда
		ЧастиОписания.Добавить(Строка(СчетаАналитика.СчетУчетаДоходов));
		Если ЗначениеЗаполнено(СчетаАналитика.СубконтоДоходов) Тогда
			ЧастиОписания.Добавить(Строка(СчетаАналитика.СубконтоДоходов));
		Иначе
			ЧастиОписания.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
		КонецЕсли;
	КонецЕсли;
	ЧастиОписания.Добавить(Строка(СчетаАналитика.СчетСписания));
	Если ЗначениеЗаполнено(СчетаАналитика.Субконто) Тогда
		ЧастиОписания.Добавить(Строка(СчетаАналитика.Субконто));
	Иначе
		ЧастиОписания.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	КонецЕсли;
	Возврат СтрСоединить(ЧастиОписания, ", ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СчетаАналитикаДоходовРасходов(Форма)
	
	СчетаАналитика = Новый Структура(ИменаПолейСчетовДоходовРасходов());
	ЗаполнитьЗначенияСвойств(СчетаАналитика, Форма.Объект);
	Возврат СчетаАналитика;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОписаниеДоходовРасходов(Форма)
	
	Форма.Элементы.ОписаниеДоходовИРасходов.Заголовок = ЗаголовокОписанияСчетовДоходовРасходов(Форма);
	Форма.ОписаниеДоходовИРасходов = ОписаниеСчетовДоходовРасходов(
		СчетаАналитикаДоходовРасходов(Форма), Форма.Объект.ОсталисьМатериальныеЦенностиОтВыбытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЦенностей(ВыбраннаяСтрока)
	
	АдресВременногоХранилища = ПоместитьЦенностиВоВременноеХранилище(ВыбраннаяСтрока.КлючСтроки);
	
	ПараметрыЗакрытияФормы = Новый Структура;
	ПараметрыЗакрытияФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресХранилищаЦенностей", АдресВременногоХранилища);
	ПараметрыОткрытияФормы.Вставить("Склад",                   Объект.Склад);
	ПараметрыОткрытияФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	ПараметрыОткрытияФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыОткрытияФормы.Вставить("ОсновноеСредство",        ВыбраннаяСтрока.ОсновноеСредство);
	ПараметрыОткрытияФормы.Вставить("ВедетсяУчетПрослеживаемыхТоваров", ВедетсяУчетПрослеживаемыхТоваров и ВыбраннаяСтрока.ПрослеживаемыйТовар);
	
	ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("Подключаемый_ПослеРедактированияСпискаЦенностейСтроки",
		ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	ОткрытьФорму("Документ.СписаниеОС.Форма.ФормаЦенностиОтВыбытия", ПараметрыОткрытияФормы, ЭтотОбъект, , , ,
		ОповещениеОЗакрытииФормыВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЦенностиВоВременноеХранилище(КлючСтроки);
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		Отбор = Новый Структура("ИдентификаторСтроки", КлючСтроки);
		ТаблицаСведенийПрослеживаемости = Объект.СведенияПрослеживаемости.Выгрузить(Отбор);
	Иначе
		ТаблицаСведенийПрослеживаемости = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючСтроки) Тогда
		Отбор = Новый Структура("КлючСтроки", КлючСтроки);
		ТаблицаЦенностей = Объект.ЦенностиОтВыбытия.Выгрузить(Отбор);
	Иначе
		ТаблицаЦенностей = Неопределено;
	КонецЕсли;
	
	ТаблицыПараметров = Новый Структура;
	ТаблицыПараметров.Вставить("ТаблицаЦенностей", ТаблицаЦенностей);
	ТаблицыПараметров.Вставить("ТаблицаСведенияПрослеживаемости", ТаблицаСведенийПрослеживаемости);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицыПараметров, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеРедактированияСпискаЦенностейСтроки(РезультатЗакрытия, ПараметрыЗакрытияФормы) Экспорт
	
	ВыбраннаяСтрока = ПараметрыЗакрытияФормы.ВыбраннаяСтрока;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		ЗаполнитьОписаниеЦенностейОтВыбытияСтроки(ВыбраннаяСтрока, РезультатЗакрытия.ЦенностиОтВыбытия);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеЦенностейОтВыбытияСтроки(ВыбраннаяСтрока, ЦенностиОтВыбытияСтроки)
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.КлючСтроки) Тогда
		УдалитьЦенностиСтроки(ВыбраннаяСтрока.КлючСтроки);
	Иначе
		ВыбраннаяСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Для Каждого СтрокаЦенности Из ЦенностиОтВыбытияСтроки Цикл
		СтрокаЦенностиОбъекта = Объект.ЦенностиОтВыбытия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЦенностиОбъекта, СтрокаЦенности, 
			"Номенклатура,Количество,Цена,Сумма,СчетУчета,ПрослеживаемыйТовар,СтранаПроисхождения,РНПТ,КоличествоПрослеживаемости");
		СтрокаЦенностиОбъекта.КлючСтроки = ВыбраннаяСтрока.КлючСтроки;
	КонецЦикла;
	
	ВыбраннаяСтрока.ОписаниеЦенностейОтВыбытия = ОписаниеЦенностейСтроки(ЦенностиОтВыбытияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦенностиСтроки(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиНаУдаление = Объект.ЦенностиОтВыбытия.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиНаУдаление Цикл
		Объект.ЦенностиОтВыбытия.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовЦенностейОтВыбытия(Форма)
	
	Элементы = Форма.Элементы;
	ОсталисьМатериальныеЦенностиОтВыбытия = Форма.Объект.ОсталисьМатериальныеЦенностиОтВыбытия;
	Элементы.Склад.Видимость = ОсталисьМатериальныеЦенностиОтВыбытия;
	Элементы.ОСЦенностиОтВыбытия.Видимость = ОсталисьМатериальныеЦенностиОтВыбытия;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	Элементы.ОписаниеДоходовИРасходов.Видимость = ПользовательУправляетСчетамиУчета;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура КодОперацииПрослеживаемостиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодОперацииПрослеживаемости", Объект.КодОперацииПрослеживаемости);
	СтруктураПараметров.Вставить("ЭтоОС",                       Истина);
	СтруктураПараметров.Вставить("ТекущийДокумент",             Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ВыборКодаОперацииПрослеживаемости", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьНадписиКодаОперацииПрослеживаемости()
	
	ПрослеживаемыйТоварВТЧ = Объект.ОС.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	
	Если ПрослеживаемыйТоварВТЧ.Количество() > 0 И ВедетсяУчетПрослеживаемыхТоваров Тогда
		ЕстьПрослеживаемыйТовар = Истина;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	Иначе
		Объект.КодОперацииПрослеживаемости =
		ПредопределенноеЗначение("Справочник.КодыОперацийПрослеживаемости.ПустаяСсылка");
		ЕстьПрослеживаемыйТовар = Ложь;
	КонецЕсли;
	
	Элементы.НадписьКодОперации.Видимость = ЕстьПрослеживаемыйТовар;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКодаОперацииПрослеживаемости()
	
	Если ЗначениеЗаполнено(Объект.КодОперацииПрослеживаемости) Тогда 
		НадписьКодОперации = СтрШаблон("%1 - %2",
		Объект.КодОперацииПрослеживаемости, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОперацииПрослеживаемости, "Наименование"));
		
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		НадписьКодОперации = НСтр("ru='<Выбрать>'");
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ВажноеСобытие;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.ОС, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение)
	
	Если Объект.КодОперацииПрослеживаемости <> ВыбранноеЗначение Тогда
		Модифицированность = Истина;
		Объект.КодОперацииПрослеживаемости = ВыбранноеЗначение;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоПрослеживаемости()
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
		
	Если ВедетсяУчетПрослеживаемыхТоваров И ВедетсяУчетГрупповыхОС Тогда
		Для Каждого Строка Из Объект.ОС Цикл
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, Строка);
		КонецЦикла;
	КонецЕсли;

	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Для обычных ОС делаем недоступным количество
	УчетГрупповыхОС.ДобавитьУсловноеОформлениеКоличества(УсловноеОформление, "ОС");
	
	// "Не требуется" и недоступность инвентарного номера для групповых ОС
	УчетГрупповыхОС.ДобавитьУсловноеОформлениеИнвентарногоНомера(УсловноеОформление, "ОС");
	
	// ОСРНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетГрупповыхОС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));

	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтруктураОтбора = Новый Структура("КлючСтроки", СтрокаКлюча.ИдентификаторСтроки);
		СтрокиТоваров = Объект.ОС.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из СтрокиТоваров Цикл
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, Строка);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	Если ТаблицаУдаленныхСтрок.Количество() > 0 Тогда
		УдалитьСвязанныеЗаписиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(КлючСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, КлючСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоПрослеживаемости(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ПустаяСсылка() Тогда
		ПараметрыЗаполнения.ЕдиницаУчета = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.ОсновноеСредство, "ЕдиницаУчета");
	КонецЕсли;

	Если ПараметрыЗаполнения.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ИнвентарныйОбъект Тогда
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.КлючСтроки) Тогда
			//ПараметрыЗаполнения.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			ПараметрыЗаполнения.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ЗаполнитьРНПТПоОС(ПараметрыЗаполнения.КлючСтроки, ПараметрыЗаполнения.ОсновноеСредство);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРНПТПоОС(ИдентификаторСтроки, ОС)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Организация", Объект.Организация);
	ПараметрыЗапроса.Вставить("Дата", Объект.Дата);
	ПараметрыЗапроса.Вставить("ОС", ОС);
	ПараметрыЗапроса.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ТаблицаСВеденияПрослеживаемости = ПрослеживаемостьБП.ДанныеРНПТПоОС(ПараметрыЗапроса);
	
	Для Каждого Строка Из ТаблицаСведенияПрослеживаемости Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСтроки) Тогда
			СтрокаТабличнойЧасти.КлючСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.КлючСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТОС(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти