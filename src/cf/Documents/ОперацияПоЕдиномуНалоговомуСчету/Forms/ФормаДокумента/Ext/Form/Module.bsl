#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоНоваяСтрока;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И КонтекстныйВызов Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
			Объект.Организация = Параметры.Организация;
			ПараметрыАвтозаполнения = "КонтекстныйВызов, АдресХранилищаТаблицыНалоги, ПериодСобытия, Правило, РегистрацияВНалоговомОргане";
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, ПараметрыАвтозаполнения);
			ЗаполнитьТаблицуНалоги();
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	#Область СтандартныеПодсистемы

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнениеЗадачБухгалтера.УстановитьСвойстваУведомленияПриРегистрации(
		ТекущийОбъект,
		Правило,
		ПериодСобытия,
		,
		РегистрацияВНалоговомОргане);
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Период",      Объект.Дата);
	
	Оповестить("Запись_ОперацияПоЕдиномуНалоговомуСчету", ПараметрыОповещения, ЭтотОбъект);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаРедактированияСтроки" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("КлючСтроки") Тогда
			Модифицированность = Истина;
			Если ВыбранноеЗначение.Свойство("АдресТаблицыНалоговыйАгентНДСВХранилище") Тогда
				ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение);
				ОбновитьИтоги();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата >= НачалоПростогоУчета Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ не используется после %1'"),
			Формат(НачалоДня(НачалоПростогоУчета) - 1, "ДЛФ=DD"));
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиНалоги

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		Если НоваяСтрока И Не Копирование Тогда
			ТекущиеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			ПараметрыСтроки = ОписаниеСтрокиДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
			ЗаполнитьДанныеСтрокиЗначениямиПоУмолчаниюНаСервере(ПараметрыСтроки);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
		ИначеЕсли Копирование Тогда
			Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
				ТекущиеДанные.Сумма = 0;
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		ТекущиеДанные.АналитикаУчета = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиНалогПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	НалогПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ТекущиеДанные.СчетУчета Тогда
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиРегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрока = Элементы.Налоги.ТекущаяСтрока;
	ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Налоги");
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиСуммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов") Тогда
		Если ТекущиеДанные <> Неопределено
			И СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ОткрытьФормуРедактированияАгентскогоНДС(ТекущиеДанные, "Налоги");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Налоги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Налоги.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "НалогиАналитикаУчета"
			И НЕ Элементы.Налоги.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Налоги.ТекущаяСтрока;
			ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Налоги");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НалогиАналитикаУчета" Тогда
		ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Налоги");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Если Поле.Имя = "НалогиСумма" Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов") Тогда
			ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено
				И СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
				ОткрытьФормуРедактированияАгентскогоНДС(ВыбраннаяСтрока, "Налоги");
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СчетУчета = ТекущиеДанные.ВидНалогаНДС;
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ТекущиеДанные.СчетУчета Тогда
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ТекущиеДанные.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено Тогда
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиКорректировкаЕНСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КорректировкаЕНС Тогда
		ТекущиеДанные.СчетЗатрат = "";
		ТекущиеДанные.Субконто1 = "";
		ТекущиеДанные.Субконто2 = "";
		ТекущиеДанные.Субконто3 = "";
		ТекущиеДанные.ОтражениеВУСН = "";
		ТекущиеДанные.Подразделение = "";
		ТекущиеДанные.АналитикаУчета = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСанкции

&НаКлиенте
Процедура СанкцииАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Санкции.ТекущаяСтрока;
	ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Санкции");
	
КонецПроцедуры

&НаКлиенте
Процедура СанкцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкцииПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Санкции.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Санкции.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "СанкцииАналитикаУчета"
			И НЕ Элементы.Санкции.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Санкции.ТекущаяСтрока;
			ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Санкции");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Санкции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АналитикаУчета = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СанкцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СанкцииАналитикаУчета" Тогда
		ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "Санкции");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкцииПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиЕдиныйСчет

&НаКлиенте
Процедура ЕдиныйСчетАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Санкции.ТекущаяСтрока;
	ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "ЕдиныйСчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСчетПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ЕдиныйСчет.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.ЕдиныйСчет.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ЕдиныйСчетАналитикаУчета"
			И НЕ Элементы.ЕдиныйСчет.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.ЕдиныйСчет.ТекущаяСтрока;
			ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "ЕдиныйСчет");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЕдиныйСчет.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АналитикаУчета = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЕдиныйСчетАналитикаУчета" Тогда
		ОткрытьФормуРедактированияАналитикиУчета(ВыбраннаяСтрока, "ЕдиныйСчет");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСчетПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	СписокНалоговДляЗаполнения = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru='Для заполнения документа необходимо выбрать организацию.'");
		Заголовок = НСтр("ru = 'Ошибка заполнения'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , Заголовок);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период",      Объект.Дата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНалогиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаВыбораНалогов",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьФорму(Команда)
	
	Объект.СозданАвтоматически = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

Процедура УстановитьЗаголовокФормы() Экспорт
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Операция по ЕНС: %1'"), Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоказыватьСчетаУчетаВДокументах = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах");
	
	СписокСчетовАгентскогоНДС = УчетНДСБП.СписокСчетовАгентскогоНДС();
	СписокОписанийСчетовНДС   = УчетНДСБП.СписокОписанийСчетовНДС();
	Налог_НДС = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	
	Для Каждого ЗначениеВыбора Из СписокОписанийСчетовНДС Цикл
		Элементы.НалогиВидНалогаНДС.СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
	КонецЦикла;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьРеквизитыОрганизации();
	
	ЗаполнитьОграничениеСчетовУчета();
	
	ЗаполнитьУсловияПроверкиАналитики();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграничениеСчетовУчета()
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.НалогиСчетУчета,
		ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчета(Объект.Дата),
		Ложь,
		Ложь,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПроверкиАналитики()
	
	СчетаУчетаФиксированныхВзносов =
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СчетаУчетаВзносовПоУсловиямТруда = Новый ФиксированныйМассив(МассивСчетов);
	
	МассивСчетов               = Новый Массив;
	МассивСчетовНалоговВзносов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовНалоговВзносов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовНалоговВзносов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию));
	ТипЗначенияУровниБюджетов = Новый ОписаниеТипов("ПеречислениеСсылка.УровниБюджетов");
	Для Каждого ЗаписьМассива Из МассивСчетовНалоговВзносов Цикл
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ЗаписьМассива);
		Для Индекс = 1 По 3 Цикл
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			Если ТипЗначенияСубконто = ТипЗначенияУровниБюджетов Тогда
				МассивСчетов.Добавить(ЗаписьМассива);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		ИмяТаблицы = "Налоги";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов Тогда
		ИмяТаблицы = "Санкции";
	Иначе
		ИмяТаблицы = "ЕдиныйСчет";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ДанныеСтроки)
	
	АналитикаУчетаТекст     = "";
	АналитикаУчетаЗаполнена = Ложь;

	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СтроковыеПредставленияСубконто = Новый Структура();
	
	Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
			АналитикаУчетаЗаполнена = Истина;
			Если ЗначениеЗаполнено(ДанныеСтроки.Подразделение) Тогда
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ДанныеСтроки.Подразделение;
			КонецЕсли;
			СвойстваСчета       = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
			АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.Подразделение) Тогда
					ТекстСтроки         = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Подразделение, "Наименование");
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ТекстСтроки;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЕсли;
			
			Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
				ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ПредставлениеСубконто = "";
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Продолжить;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ЗначениеСубконто);
					КонецЕсли;
					
					СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
					СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
					
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЦикла;
			
			Если ПрименяетсяУСНДоходыМинусРасходы
				И ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ДанныеСтроки.ОтражениеВУСН;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если АналитикаУчетаЗаполнена Тогда
		ДанныеСтроки.АналитикаУчета = Сред(АналитикаУчетаТекст, 3);
	Иначе
		ДанныеСтроки.АналитикаУчета =  "<...>";
	КонецЕсли;
	ДанныеСтроки.АналитикаУчетаЗаполнена = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	
	Если ДанныеСтроки.Свойство("ПоказыватьСчетУчета") Тогда
		ПоказыватьСчетУчета = Ложь;
		Если ПоказыватьСчетаУчетаВДокументах Тогда
			ПоказыватьСчетУчета = Истина;
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Налог) Тогда
			Если Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
				ПоказыватьСчетУчета = Истина;
			Иначе
				ПоказыватьСчетУчета =
					ДанныеСтроки.Налог <> Налог_НДС
					И ДанныеСтроки.СчетУчета <> Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(ДанныеСтроки.Налог, Объект.Дата);
			КонецЕсли;
		КонецЕсли;
		Если ДанныеСтроки.Налог = Налог_НДС Тогда
			ДанныеСтроки.ВидНалогаНДС = ДанныеСтроки.СчетУчета;
		КонецЕсли;
		ДанныеСтроки.ПоказыватьСчетУчета = ПоказыватьСчетУчета;
	КонецЕсли;
	Если ДанныеСтроки.Свойство("УровеньБюджета") Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
		ДанныеСтроки.ЕстьВидПлатежаВГосБюджет = ЕдиныйНалоговыйСчет.НомерВидаСубконтоНаСчете(СвойстваСчета, "ВидыПлатежейВГосБюджет") > 0;
		ДанныеСтроки.ЕстьУровеньБюджета       = ЕдиныйНалоговыйСчет.НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов") > 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНалоги()
	
	Если ЗначениеЗаполнено(АдресХранилищаТаблицыНалоги) Тогда
		ТаблицыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыНалоги);
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоги) Тогда
			Объект.Налоги.Загрузить(ТаблицыЗаполнения.ТаблицаНалоги);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС) Тогда
			Объект.НалоговыйАгентНДС.Загрузить(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиДокумента()
	
	ОписаниеСтроки = Новый Структура("НомерСтроки, Налог, КодБК, СчетУчета, КлючСтроки,
		|ВидПлатежа, РегистрацияВНалоговомОргане,
		|КодПоОКТМО, Сумма, СрокУплаты,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|ОтражениеВУСН, Подразделение,
		|АналитикаУчета, АналитикаУчетаЗаполнена,
		|ПоказыватьСчетУчета, ВидНалогаНДС,
		|ВидПлатежаВГосБюджет, УровеньБюджета,
		|ЕстьВидПлатежаВГосБюджет, ЕстьУровеньБюджета");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	Если Не КонтекстныйВызов Тогда
		РегистрацияВНалоговомОргане = "";
	ИначеЕсли Объект.Организация <> Параметры.Организация Тогда
		РегистрацияВНалоговомОргане = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) И ЗначениеЗаполнено(Объект.Организация) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;
	
	ЭтоЮрЛицо = Истина;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПараметрыСтроки)
	
	Документы.ОперацияПоЕдиномуНалоговомуСчету.ЗаполнитьДанныеНалогаВСтрокеТабличнойЧасти(ПараметрыСтроки, Объект.Организация, Объект.Дата);
	
	Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) = Неопределено
		Или ТекущийСчетУчета <> ПараметрыСтроки.СчетУчета Тогда 
		НалоговыйАгентНДСОчистить(ЭтотОбъект, ПараметрыСтроки.КлючСтроки);
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено Тогда
			ПараметрыСтроки.Сумма = 0;
		КонецЕсли;
	Иначе
		ПараметрыСтроки.Сумма = НалоговыйАгентНДСРассчитать(ЭтотОбъект, ПараметрыСтроки.КлючСтроки);
	КонецЕсли;
	ТекущийСчетУчета = ПараметрыСтроки.СчетУчета;
	
	Если ПараметрыСтроки.Налог = Налог_НДС Тогда
		ПараметрыСтроки.ВидНалогаНДС = ПараметрыСтроки.СчетУчета;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ПараметрыСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.РегистрацияВНалоговомОргане) Тогда
		ПараметрыСтроки.КодПоОКТМО =
			Справочники.РегистрацииВНалоговомОргане.КодТерритории(ПараметрыСтроки.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиЗначениямиПоУмолчаниюНаСервере(ПараметрыСтроки)
	
	Документы.ОперацияПоЕдиномуНалоговомуСчету.ЗаполнитьДанныеСтрокиТабличнойЧастиНалогиЗначениямиПоУмолчанию(
		ПараметрыСтроки, Объект.Организация, Объект.Дата, РегистрацияВНалоговомОргане);
	
	// В режиме интеграции с банком по умолчанию указывает вид налога - УСН (доходы)
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПараметрыСтроки.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы);
		НалогПриИзмененииНаСервере(ПараметрыСтроки);
		Если ЗначениеЗаполнено(ПараметрыСтроки.Налог) Тогда
			Элементы.Налоги.ТекущийЭлемент = Элементы.НалогиСумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияАналитикиУчета(ВыбранноеЗначение, ИмяТаблицы)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ДанныеСтроки = Объект[ИмяТаблицы].НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",           Объект.Дата);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	
	ПараметрыФормы.Вставить("Подразделение",  ДанныеСтроки.Подразделение);
	ПараметрыФормы.Вставить("СчетЗатрат",     ДанныеСтроки.СчетЗатрат);
	ПараметрыФормы.Вставить("Субконто1",      ДанныеСтроки.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",      ДанныеСтроки.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",      ДанныеСтроки.Субконто3);
	ПараметрыФормы.Вставить("ОтражениеВУСН",  ДанныеСтроки.ОтражениеВУСН);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаРедактированияСтроки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияАгентскогоНДС(ВыбранноеЗначение, ИмяТаблицы)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ДанныеСтроки = Объект[ИмяТаблицы].НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПроверятьСрокУплаты = Объект.Дата < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	Если (ПроверятьСрокУплаты И (ЗначениеЗаполнено(ДанныеСтроки.СрокУплаты) И ДанныеСтроки.СрокУплаты < НачалоДня(Объект.Дата)))
		Или Не ЗначениеЗаполнено(ДанныеСтроки.СрокУплаты) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"":
			| - срок уплаты должен быть указан и быть больше даты документа'"),
			ДанныеСтроки.НомерСтроки);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Налоги", ДанныеСтроки.НомерСтроки, "СрокУплаты"),
			"Объект");
		РазблокироватьДанныеФормыДляРедактирования();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("Период",         ДанныеСтроки.СрокУплаты);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("СчетУчета",      ДанныеСтроки.СчетУчета);
	ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючСтроки",     ДанныеСтроки.КлючСтроки);
	ПараметрыФормы.Вставить("АдресТаблицыНалоговыйАгентНДСВХранилище", АдресТаблицыНалоговыйАгентНДС(ДанныеСтроки.КлючСтроки));
	
	ОткрытьФорму("ОбщаяФорма.ПодборДокументовНалоговогоАгента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыНалоговыйАгентНДС(КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить(Новый Структура("КлючСтроки", КлючСтроки));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНалоговыйАгентНДС, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение)
	
	ТаблицаНалоговыйАгентНДС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыНалоговыйАгентНДСВХранилище);
	МассивСтрок = Объект.НалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", ВыбранноеЗначение.КлючСтроки));
	Для Каждого Строка ИЗ МассивСтрок Цикл
		Объект.НалоговыйАгентНДС.Удалить(Строка);
	КонецЦикла;
	
	ИтогСуммаЗаписей     = ТаблицаНалоговыйАгентНДС.Итог("Сумма");
	Если Объект.Дата >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		ИтогСуммаУведомления = ИтогСуммаЗаписей;
	Иначе
		ИтогСуммаУведомления = Окр(ИтогСуммаЗаписей, 0, РежимОкругления.Окр15как10);
	КонецЕсли;
	Разница = ИтогСуммаЗаписей - ИтогСуммаУведомления;
	
	ТаблицаНалоговыйАгентНДС.Сортировать("Сумма");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговыйАгентНДС Цикл
		СуммаСтроки = СтрокаТаблицы.Сумма;
		Если Разница <> 0 Тогда
			СуммаСтроки = Макс(0, СуммаСтроки - Разница);
			Разница = Разница - (СтрокаТаблицы.Сумма - СуммаСтроки);
		КонецЕсли;
		СтрокаТаблицы.Сумма = СуммаСтроки;
	КонецЦикла;
	
	ТаблицаНалоговыйАгентНДС.Сортировать("Контрагент, Договор, ДокументРасчетов, Сумма");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговыйАгентНДС Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.НалоговыйАгентНДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КлючСтроки = ВыбранноеЗначение.КлючСтроки;
	КонецЦикла;
	
	СтрокиТаблицы = Объект.Налоги.НайтиСтроки(Новый Структура("КлючСтроки", ВыбранноеЗначение.КлючСтроки));
	СтрокиТаблицы[0].Сумма = ИтогСуммаУведомления;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйАгентНДСОчистить(Форма, КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Форма.Объект.НалоговыйАгентНДС;
	
	МассивСтрок = ТаблицаНалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ТаблицаНалоговыйАгентНДС.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалоговыйАгентНДСРассчитать(Форма, КлючСтроки)
	
	ТаблицаНалоговыйАгентНДС = Форма.Объект.НалоговыйАгентНДС;
	
	СуммаСтроки = 0;
	
	МассивСтрок = ТаблицаНалоговыйАгентНДС.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		СуммаСтроки = СуммаСтроки + СтрокаМассива.Сумма;
	КонецЦикла;
	
	Возврат СуммаСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов") Тогда
		ИмяТаблицы = "Налоги";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов") Тогда
		ИмяТаблицы = "Санкции";
	Иначе
		ИмяТаблицы = "ЕдиныйСчет";
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗначенияВыбранныеВФормеАналитикиУчета);
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Объект.СуммаДокумента = Объект.Налоги.Итог("Сумма")
		+ Объект.Санкции.Итог("Сумма")
		+ Объект.ЕдиныйСчет.Итог("Сумма");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаВидыОпераций",
		"ТолькоПросмотр",
		Форма.Объект.СозданАвтоматически);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"РазблокироватьФорму",
		"Видимость",
		Форма.Объект.СозданАвтоматически);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаСозданАвтоматически",
		"Видимость",
		Форма.Объект.СозданАвтоматически);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаНалоги",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов")
			Или Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиЗаполнить",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов")
			И НЕ Форма.Объект.СозданАвтоматически);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиПлатежныйДокумент",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиСчетУчета",
		"Видимость",
		Форма.ПоказыватьСчетаУчетаВДокументах);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиВидПлатежаВГосБюджет",
		"Видимость",
		Форма.ПоказыватьСчетаУчетаВДокументах
			И Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиУровеньБюджета",
		"Видимость",
		Форма.ПоказыватьСчетаУчетаВДокументах
			И Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиВидНалогаНДС",
		"Видимость",
		Не Форма.ПоказыватьСчетаУчетаВДокументах);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаСанкции",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов")
			Или Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"СанкцииЗаполнить",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов")
			И НЕ Форма.Объект.СозданАвтоматически);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"СанкцииПлатежныйДокумент",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"НалогиАналитикаУчета",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаЕдиныйСчет",
		"Видимость",
		Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаИтоги",
		"Видимость",
		Форма.Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета"));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиСумма");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.СчетУчета", ВидСравненияКомпоновкиДанных.ВСписке, СписокСчетовАгентскогоНДС);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,Истина));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		
		Если Не ПоказыватьСчетаУчетаВДокументах Тогда
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"Объект.Налоги.Налог", ВидСравненияКомпоновкиДанных.НеРавно, Налог_НДС);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
			Для Каждого ОписаниеСчета Из СписокОписанийСчетовНДС Цикл
				ЭлементУО = УсловноеОформление.Элементы.Добавить();
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
					"Объект.Налоги.ВидНалогаНДС", ВидСравненияКомпоновкиДанных.Равно, ОписаниеСчета.Значение);
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеСчета.Представление);
			КонецЦикла;
		КонецЕсли;
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидПлатежаВГосБюджет");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.ВидПлатежаВГосБюджет", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидПлатежаВГосБюджет");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.ЕстьВидПлатежаВГосБюджет", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиУровеньБюджета");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.УровеньБюджета", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиУровеньБюджета");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.ЕстьУровеньБюджета", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиАналитикаУчета");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.КорректировкаЕНС", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕдиныйСчетПлатежныйДокумент");
		
		ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ЕдиныйСчет.ВидДвижения", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ЕдиныйСчет.ПлатежныйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕдиныйСчетПлатежныйДокумент");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЕдиныйСчет.ПлатежныйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЕдиныйСчет.ВидДвижения", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНалогиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено
		Или РезультатВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНалоговДляЗаполнения = РезультатВыбора;
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокумент()
	
	ЕстьДанные = Объект.Налоги.Количество() > 0
		ИЛИ Объект.Санкции.Количество() > 0
		ИЛИ Объект.НалоговыйАгентНДС.Количество() > 0
		ИЛИ Объект.ЕдиныйСчет.Количество() > 0;
		
	Если ЕстьДанные Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДокументПоОстаткамРасчетов();
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументПоОстаткамРасчетов();
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоОстаткамРасчетов()
	
	Объект.Налоги.Очистить();
	Объект.Санкции.Очистить();
	Объект.НалоговыйАгентНДС.Очистить();
	Объект.ЕдиныйСчет.Очистить();
	
	ПараметрыДокумента = ЕдиныйНалоговыйСчет.ПараметрыПолученияОстатковРасчетов();
	ПараметрыДокумента.Организация         = Объект.Организация;
	ПараметрыДокумента.Дата                = Объект.Дата;
	ПараметрыДокумента.ВидОперации         = Объект.ВидОперации;
	ПараметрыДокумента.СписокНалогов       = СписокНалоговДляЗаполнения;
	ПараметрыДокумента.ВводНачальныхДанных = Истина;
	
	ТабицыОстатков = ЕдиныйНалоговыйСчет.ПолучитьОстаткиРасчетовПоНалогам(ПараметрыДокумента);
		
	Для Каждого ДанныеТаблицы Из ТабицыОстатков Цикл
		ИмяТаблицы = СтрЗаменить(ДанныеТаблицы.Ключ, "Таблица", "");
		Если Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету.ТабличныеЧасти.Найти(ИмяТаблицы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ДанныеТаблицы.Значение Цикл
			НоваяСтрока = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

ЭтоНоваяСтрока = Ложь;
