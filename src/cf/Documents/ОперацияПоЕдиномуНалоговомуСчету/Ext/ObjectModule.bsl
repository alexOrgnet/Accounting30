#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный       = Пользователи.ТекущийПользователь();
	Уведомление         = Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка();
	ДокументОснование   = Неопределено;
	СозданАвтоматически = Ложь;
	
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если Дата >= НачалоПростогоУчета Тогда
		Дата = НачалоДня(НачалоПростогоУчета - 1);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СведенияОбУдержанномНДФЛ") Тогда
		ЗаполнитьДокументДаннымиНДФЛ(ДанныеЗаполнения);
	КонецЕсли;
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если Дата >= НачалоПростогоУчета Тогда
		Дата = НачалоДня(НачалоПростогоУчета - 1);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Организация, Дата) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация %1 не является плательщиком единого налогового платежа'"),
			Организация);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			,
			"Организация",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		Если ВводНачальныхДанных Или СозданАвтоматически Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Налоги");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.ПлатежныйДокумент");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.Субконто1");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.Субконто2");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.Субконто3");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("Санкции");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		Если ВводНачальныхДанных Или СозданАвтоматически Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Налоги");
		КонецЕсли;
		Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Налоги.ОтражениеВУСН");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Санкции");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
		Если ВводНачальныхДанных Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Санкции");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Санкции.ПлатежныйДокумент");
		МассивНепроверяемыхРеквизитов.Добавить("Налоги");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов Тогда
		Если ВводНачальныхДанных Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Санкции");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Налоги");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		Если ВводНачальныхДанных Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет");
		КонецЕсли;
		Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиныйСчет.ОтражениеВУСН");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Налоги");
		МассивНепроверяемыхРеквизитов.Добавить("Санкции");
		Для Каждого ТекущаяСтрока Из ЕдиныйСчет Цикл
			Если ТекущаяСтрока.ВидДвижения Тогда
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПлатежныйДокумент) Тогда
					Поле = "ЕдиныйСчет[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ПлатежныйДокумент";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не заполнена колонка ""Платежный документ"" в строке %1 списка ""Единый счет""'"),
						ТекущаяСтрока.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьУникальностьДанныхДокумента(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		Если ПустаяСтрока(СтрокаДокумента.КлючСтроки) Тогда
			СтрокаДокумента.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ЕдиныйСчетПриход = ЕдиныйСчет.Выгрузить(Новый Структура("ВидДвижения", Ложь), "Сумма");
	ЕдиныйСчетРасход = ЕдиныйСчет.Выгрузить(Новый Структура("ВидДвижения", Истина), "Сумма");
	СуммаДокумента = Налоги.Итог("Сумма")
		+ Санкции.Итог("Сумма")
		+ (ЕдиныйСчетПриход.Итог("Сумма") - ЕдиныйСчетРасход.Итог("Сумма"));
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Налоги.Количество() <> 0 Тогда
		ВыполнениеЗадачБухгалтера.ПриЗаписиУведомления(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЭтотОбъект.Проведен Тогда
		РегистрыСведений.ЗадачиБухгалтераУведомления.УдалитьЗапись(Организация, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	НачалоПростогоУчета = ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	Если Дата >= НачалоПростогоУчета Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ ""%1"" не используется после %2'"),
			Метаданные().Синоним,
			Формат(НачалоДня(НачалоПростогоУчета) - 1, "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ОперацияПоЕдиномуНалоговомуСчету.ПодготовитьПараметрыПроведения(
		Ссылка,
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Бухгалтерский учет
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНачислениеНалогов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НачислениеНалогов,
		Движения,
		Отказ);
		
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНалоговыйАгентНДС(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НалоговыйАгентНДС,
		Движения,
		Отказ);
		
	ЕдиныйНалоговыйСчет.СформироватьПроводкиУплатаНалогов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УплатаНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНачислениеПенейШтрафов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НачислениеПенейШтрафов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиПогашениеПенейШтрафов(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПогашениеПенейШтрафов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиПополнениеСчета(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПополнениеСчета,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиСписаниеСоСчета(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.СписаниеСоСчета,
		Движения,
		Отказ);
	
	// Движения по налогам на ЕНС
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НачислениеНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УплатаНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоСанкциямНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.НачислениеПенейШтрафов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияПоСанкциямНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПогашениеПенейШтрафов,
		Движения,
		Отказ);
	
	// Движения по ЕНС (сводно)
	ЕдиныйНалоговыйСчет.СформироватьДвиженияНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УплатаНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПогашениеПенейШтрафов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПополнениеСчета,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьДвиженияНаЕдиномНалоговомСчете(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.СписаниеСоСчета,
		Движения,
		Отказ);
		
	// Погашение налога
	ЕдиныйНалоговыйСчет.ЗачетАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.УплатаНалогов,
		Движения,
		Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокументДаннымиНДФЛ(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
	
	ТаблицаНДФЛ = УчетЗарплаты.УдержанныйНДФЛПоДокументу(Основание.Организация, Основание);
	Если ТаблицаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокументОснование = Основание;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
		
		НоваяСтрока = Налоги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.КодБК      = СтрокаТаблицы.КБК;
		НоваяСтрока.КодПоОКТМО = СтрокаТаблицы.ОКАТО;
		НоваяСтрока.СчетУчета  = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(НоваяСтрока.Налог, НоваяСтрока.СрокУплаты);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьДанныхДокумента(Отказ)
	
	ТаблицаНалоги = Налоги.Выгрузить();
	КолонкиСверки = "Налог, КодБК, СчетУчета, ВидПлатежаВГосБюджет, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты";
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		КолонкиСверки = КолонкиСверки + ", ПлатежныйДокумент";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСверки);
	Если ТаблицаНалоги.Количество() <> Налоги.Количество() Тогда
		ОтборСтрок = Новый Структура(КолонкиСверки);
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
			МассивСтрок = Налоги.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомераСтрок = "";
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок <> "", ", ", "") + СтрокаМассива.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Дублируются ключевые значения в строках %1 списка ""Налоги""'"),
				НомераСтрок);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				,
				"Налоги",
				"Объект",
				Отказ);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли