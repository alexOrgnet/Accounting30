#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 21, 0);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Заполняет данные строки табличной части "Налоги" значениями по умолчанию.
//
// Параметры:
//  Строка						 - СтрокаТабличнойЧасти или Структура - Строка табличной части
//  Организация					 - СправочникСсылка.Организации - Организация
//  Период						 - Дата - Период получения данных
//  РегистрацияВНалоговомОргане	 - СправочникСсылка.РегистрацияВНалоговомОргане - Регистрация в налоговом органе (необязательный)
//
Процедура ЗаполнитьДанныеСтрокиТабличнойЧастиНалогиЗначениямиПоУмолчанию(Строка, Организация, Период, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Строка.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		Строка.РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, Период);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.РегистрацияВНалоговомОргане) Тогда
		Строка.КодПоОКТМО = Справочники.РегистрацииВНалоговомОргане.КодТерритории(Строка.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные налога в строке табличной части.
//
// Параметры:
//  Строка		 - СтрокаТабличнойЧасти или Структура - Строка табличной части
//  Организация	 - СправочникСсылка.Организации - Организация
//  Период		 - Дата - Период для получения данных о налоге
//
Процедура ЗаполнитьДанныеНалогаВСтрокеТабличнойЧасти(Строка, Организация, Период) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Налог) Тогда
		Строка.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Строка.Налог,, Период);
		Строка.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Строка.Налог, Период);
		
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Налог, "ВидНалога");
		Если ЗначениеЗаполнено(ВидНалога) Тогда
			
			ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
				Организация,
				ВидНалога,
				Период);
			
			Если ТипЗнч(ПорядокУплаты) = Тип("Структура") Тогда
				Строка.СрокУплаты = ПорядокУплаты.Срок;
			КонецЕсли;
			
			Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
				Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовСвышеПредела(Строка.СрокУплаты);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
			Если ЗначениеЗаполнено(Строка.СрокУплаты) Тогда
				ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
				ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
					ПроизводственныйКалендарь,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.СрокУплаты));
				Строка.СрокУплаты = ГрафикПереноса[Строка.СрокУплаты];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ОперацияПоЕдиномуНалоговомуСчету";
	Набор.Идентификатор = Новый УникальныйИдентификатор("a9ef5e86-78b4-424c-b1b5-b51f3048aa0c");
	Набор.Используется  = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокумента";
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокумента";
	ИначеЕсли Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект.
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

Функция ОписаниеДокумента(ДокументСсылка) Экспорт
	
	ОписаниеДокумента = Новый Структура("Наименование, Сумма");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
			"Номер, Дата, СуммаДокумента");
		
		НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
		НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
		ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
		
		ШаблонПредставления = НСтр("ru = '%1 %2 от %3 на сумму %4'");
		
		ОписаниеДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НаименованиеДокумента, НомерДокумента, ДатаДокумента, Формат(РеквизитыДокумента.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"));
		ОписаниеДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	КонецЕсли;
	
	Возврат ОписаниеДокумента;
	
КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ДокументСсылка", ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",                    ДокументСсылка);
	Запрос.УстановитьПараметр("СписокСчетовАгентскогоНДС", УчетНДСБП.СписокСчетовАгентскогоНДС());
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Для Каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаНачислениеНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаУплатаНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНачислениеПенейШтрафов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеПенейШтрафов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНалоговыйАгентНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПополнениеСчета(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеСоСчета(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ВводНачальныхДанных КАК ВводНачальныхДанных
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ВводНачальныхДанных КАК ВводНачальныхДанных
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВводНачальныхДанных КАК ВводНачальныхДанных,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНачислениеНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		ПараметрыПроведения.Вставить("НачислениеНалогов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НачислениеНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог КАК Налог,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КодБК КАК КодБК,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СчетУчета КАК СчетУчета,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.ВидПлатежаВГосБюджет КАК ВидПлатежаВГосБюджет,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.УровеньБюджета КАК УровеньБюджета,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КодПоОКТМО КАК КодПоОКТМО,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СрокУплаты КАК СрокУплаты,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КорректировкаЕНС КАК КорректировкаЕНС
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаУплатаНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		ПараметрыПроведения.Вставить("УплатаНалогов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("УплатаНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог КАК Налог,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КодБК КАК КодБК,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СчетУчета КАК СчетУчета,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КодПоОКТМО КАК КодПоОКТМО,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СрокУплаты КАК СрокУплаты,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СчетЗатрат КАК СчетЗатрат,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Субконто1 КАК Субконто1,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Субконто2 КАК Субконто2,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Субконто3 КАК Субконто3,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.КорректировкаЕНС КАК КорректировкаЕНС
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНачислениеПенейШтрафов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
		ПараметрыПроведения.Вставить("НачислениеПенейШтрафов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НачислениеПенейШтрафов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ВидПлатежа КАК ВидПлатежа,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.СчетЗатрат КАК СчетЗатрат,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто1 КАК Субконто1,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто2 КАК Субконто2,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто3 КАК Субконто3,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Санкции КАК ОперацияПоЕдиномуНалоговомуСчетуСанкции
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПогашениеПенейШтрафов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов Тогда
		ПараметрыПроведения.Вставить("ПогашениеПенейШтрафов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПогашениеПенейШтрафов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ВидПлатежа КАК ВидПлатежа,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.СчетЗатрат КАК СчетЗатрат,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто1 КАК Субконто1,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто2 КАК Субконто2,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Субконто3 КАК Субконто3,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Санкции КАК ОперацияПоЕдиномуНалоговомуСчетуСанкции
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуСанкции.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНалоговыйАгентНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		ПараметрыПроведения.Вставить("НалоговыйАгентНДС", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НалоговыйАгентНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Контрагент КАК Контрагент,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Договор КАК Договор,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.ДокументРасчетов КАК ДокументРасчетов,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.СчетУчета КАК СчетУчета,
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог КАК Налог
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.НалоговыйАгентНДС КАК ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|		ПО ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.КлючСтроки = ОперацияПоЕдиномуНалоговомуСчетуНалоги.КлючСтроки
	|			И ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Ссылка = ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоговыйАгентНДС.Ссылка = &Ссылка
	|	И ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПополнениеСчета(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		ПараметрыПроведения.Вставить("ПополнениеСчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПополнениеСчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ПлатежныйДокумент = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Ссылка
	|		ИНАЧЕ ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ПлатежныйДокумент
	|	КОНЕЦ КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.СчетЗатрат КАК СчетЗатрат,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто1 КАК Субконто1,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто2 КАК Субконто2,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто3 КАК Субконто3,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.ЕдиныйСчет КАК ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Ссылка = &Ссылка
	|	И НЕ ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ВидДвижения";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеСоСчета(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		ПараметрыПроведения.Вставить("СписаниеСоСчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеСоСчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Ссылка КАК Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.НомерСтроки КАК НомерСтроки,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Сумма КАК Сумма,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.СчетЗатрат КАК СчетЗатрат,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто1 КАК Субконто1,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто2 КАК Субконто2,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Субконто3 КАК Субконто3,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.ЕдиныйСчет КАК ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.Ссылка = &Ссылка
	|	И ОперацияПоЕдиномуНалоговомуСчетуЕдиныйСчет.ВидДвижения";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьПризнакКорректировкаЕНС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|		ПО ОперацияПоЕдиномуНалоговомуСчету.Ссылка = ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка
	|ГДЕ
	|	НЕ ОперацияПоЕдиномуНалоговомуСчетуНалоги.КорректировкаЕНС
	|	И ОперацияПоЕдиномуНалоговомуСчетуНалоги.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И ОперацияПоЕдиномуНалоговомуСчету.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы Из ДокументОбъект.Налоги Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.КорректировкаЕНС = Истина;
			КонецЕсли;
		КонецЦикла;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ %1
									|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Операция по единому налоговому счету: обновление'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли