
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("Комментарий");
	МассивРеквизитов.Добавить("ВалютаДокумента");
	МассивРеквизитов.Добавить("КурсВзаиморасчетов");
	МассивРеквизитов.Добавить("КратностьВзаиморасчетов");
	МассивРеквизитов.Добавить("СуммаСкидки");
	МассивРеквизитов.Добавить("СуммаВключаетНДС");
	МассивРеквизитов.Добавить("ДокументБезНДС");
	МассивРеквизитов.Добавить("ТипЦен");
	МассивРеквизитов.Добавить("Руководитель");
	МассивРеквизитов.Добавить("ЗаРуководителяНаОсновании");
	МассивРеквизитов.Добавить("ДополнительныеУсловия");
	МассивРеквизитов.Добавить("СрокДействия");
	МассивРеквизитов.Добавить("НомерВерсии");
	МассивРеквизитов.Добавить("ДатаВерсии");
	МассивРеквизитов.Добавить("РеквизитыВерсий.НомерВерсии");
	МассивРеквизитов.Добавить("Товары.НомерВерсии");
	
	Возврат МассивРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "КоммерческоеПредложение";
	КомандаПечати.Представление  = НСтр("ru = 'Коммерческое предложение'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Коммерческое предложение""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//  КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "КоммерческоеПредложение";
	КомандаОтправки.Представление = НСтр("ru = 'Коммерческое предложение'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	КомандаОтправки.Порядок       = 10;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложение") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"КоммерческоеПредложение","Коммерческое предложение",
			ПечатьКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, "КоммерческоеПредложение", ПараметрыПечати), ,
				"Документ.КоммерческоеПредложение.ПФ_MXL_КоммерческоеПредложение");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "КонтактноеЛицо");
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление документа в печатной форме.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка.КоммерческоеПредложение - документ
//
// Возвращаемое значение:
//   Строка - содержит название документа, номер и дату
Функция ПредставлениеДокументаНаПечать(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата, НомерВерсии, ДатаВерсии");
	
	ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь);
	ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ДатаВерсии), РеквизитыДокумента.ДатаВерсии, РеквизитыДокумента.Дата);
	
	Если РеквизитыДокумента.НомерВерсии <> 1 Тогда
		ПредставлениеНомера = СтрШаблон("%1-%2", ПредставлениеНомера, Формат(РеквизитыДокумента.НомерВерсии, "ЧГ="));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Коммерческое предложение № %1 от %2 г.'"),
		ПредставлениеНомера,
		Формат(ДатаДокумента, "ДФ='дд ММММ гггг'"));
	
КонецФункции

Функция ОпределитьПодписантов(СписокДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылки", СписокДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоммерческоеПредложение.Ссылка КАК Ссылка,
	|	КоммерческоеПредложение.Руководитель КАК Руководитель
	|ИЗ
	|	Документ.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ГДЕ
	|	КоммерческоеПредложение.Ссылка В(&Ссылки)";
	
	ПодписантыДокументов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписиДокумента = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.Руководитель) Тогда
			ПодписиДокумента.Вставить("Руководитель", Выборка.Руководитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписиДокумента) Тогда
			ПодписантыДокументов.Вставить(Выборка.Ссылка, ПодписиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписантыДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СрокДействияПоУмолчанию(Дата) Экспорт
	
	ДлинаСуток = 86400;
	
	Возврат Дата + ДлинаСуток;

КонецФункции

// Возвращает предыдущие темы коммерческого предложения для выпадающего списка.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для отбора документов
//  Ответственный - СправочникСсылка.Пользователи,Неопределено - автор для отбора документа
//  Тема - Строка - если передана тема, то она исключается из отбора
//
// Возвращаемое значение:
//  Массив - список тем.
Функция ПредыдущиеТемы(Организация, Ответственный = Неопределено, Тема = "") Экспорт
	
	СписокТем = Новый Массив;
	
	// Для производительности просматриваем последние 100 документов.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
	|	КоммерческоеПредложение.Ссылка КАК Ссылка,
	|	КоммерческоеПредложение.Дата КАК Дата,
	|	КоммерческоеПредложение.Тема КАК Тема
	|ИЗ
	|	Документ.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ГДЕ
	|	НЕ КоммерческоеПредложение.ПометкаУдаления
	|	И КоммерческоеПредложение.Организация = &Организация
	|	И НЕ КоммерческоеПредложение.Тема ПОДОБНО """"
	|	И &УсловиеОтветственный
	|	И &УсловиеТема
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтветственный", "КоммерческоеПредложение.Ответственный = &Ответственный");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтветственный", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тема) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТема", "НЕ КоммерческоеПредложение.Тема ПОДОБНО &Тема");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТема", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("Тема", Тема);
	
	Запрос.Текст = ТекстЗапроса;
	
	МаксимальноеКоличество = ?(ЗначениеЗаполнено(Тема), 6, 7);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СписокТем.Количество() = МаксимальноеКоличество Тогда
			Прервать;
		КонецЕсли;
		Если СписокТем.Найти(Выборка.Тема) = Неопределено Тогда
			СписокТем.Добавить(Выборка.Тема);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокТем;
	
КонецФункции

Функция ПечатьКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, НазваниеМакета, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	СведенияКоммерческогоПредложения = ТаблицаСведенийКоммерческогоПредложения(МассивОбъектов);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если Не ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб          = Истина;
	ТабличныйДокумент.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КоммерческоеПредложение_КоммерческоеПредложение";
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияКоммерческогоПредложения Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложение.ПФ_MXL_КоммерческоеПредложение");

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		ЕстьСкидка = (СведенияОДокументе.ТаблицаДокумента.Итог("СуммаСкидки") <> 0) И Макет.Области.Найти("Скидка") <> Неопределено;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//Расчет сумм по документу
		Сумма       = СведенияОДокументе.ТаблицаДокумента.Итог("Сумма");
		СуммаНДС    = СведенияОДокументе.ТаблицаДокумента.Итог("СуммаНДС");
		ВсегоСкидок = СведенияОДокументе.ТаблицаДокумента.Итог("СуммаСкидки");
		
		// скидка по документу
		Если СведенияОДокументе.СуммаСкидки <> 0 Тогда
			ДанныеОбъекта = Новый Структура("СуммаСкидки, СуммаВключаетНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, СведенияОДокументе);
			ТаблицаТовары = СведенияОДокументе.ТаблицаДокумента.Скопировать();
			
			ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТовары, ДанныеОбъекта);
			
			Всего    = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
			СуммаНДС = ТаблицаТовары.Итог("СуммаНДС");
			Сумма    = Всего - СведенияОДокументе.СуммаСкидки - ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ИначеЕсли ВсегоСкидок <> 0 Тогда
			Сумма = Сумма - ВсегоСкидок;
		КонецЕсли;
		
		СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОДокументе.ТаблицаДокумента, "СтавкаНДС", Истина);
		ДанныеПечатиИтоговНДС = ПечатьТорговыхДокументов.ДанныеПечатиИтоговНДС(
			СуммаНДС, СтавкиНДС, СведенияОДокументе.СуммаВключаетНДС, ":");
		
		ДанныеОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
		
		ФайлЛоготип = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			СведенияОДокументе.Организация, "ФайлЛоготип");
		ЕстьЛоготип = ЗначениеЗаполнено(ФайлЛоготип);
		
		ПредставлениеОрганизация = ?(ПустаяСтрока(ДанныеОрганизации.НаименованиеДляПечатныхФорм), "",
			СтрШаблон(НСтр("ru = 'Организация: %1'"), ДанныеОрганизации.НаименованиеДляПечатныхФорм));
		
		ПредставлениеАдрес = ?(ПустаяСтрока(ДанныеОрганизации.ЮридическийАдрес), "",
			СтрШаблон(НСтр("ru = 'Адрес: %1'"), ДанныеОрганизации.ЮридическийАдрес));
		
		ПредставлениеТелефон = ?(ПустаяСтрока(ДанныеОрганизации.Телефоны), "",
			СтрШаблон(НСтр("ru = 'Телефон: %1'"), ДанныеОрганизации.Телефоны));
		
		ПредставлениеEmail = ?(ПустаяСтрока(ДанныеОрганизации.Email), "",
			СтрШаблон(НСтр("ru = 'Email: %1'"), ДанныеОрганизации.Email));
		
		ДанныеЗаголовка = Новый Структура;
		ДанныеЗаголовка.Вставить("ПредставлениеОрганизация", ПредставлениеОрганизация);
		ДанныеЗаголовка.Вставить("ПредставлениеАдрес", ПредставлениеАдрес);
		ДанныеЗаголовка.Вставить("ПредставлениеТелефон", ПредставлениеТелефон);
		ДанныеЗаголовка.Вставить("ПредставлениеEmail", ПредставлениеEmail);
		
		Если ЕстьЛоготип И Макет.Области.Найти("ДанныеОрганизацииСЛоготипом") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДанныеОрганизацииСЛоготипом");
			
			// В случае "битой" картинки формирование счета не должно прерваться
			Попытка
				ОбластьМакета.Рисунки.КартинкаЛоготип.Картинка = Новый Картинка(ФайлЛоготип);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать коммерческого предложения'"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.КоммерческоеПредложение,СведенияОДокументе.Документ,
					НСтр("ru = 'Не удалось получить логотип'"));
			КонецПопытки;
		
			ОбластьМакета.Параметры.Заполнить(ДанныеЗаголовка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли Макет.Области.Найти("ДанныеОрганизацииБезЛоготипа") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДанныеОрганизацииБезЛоготипа|СтрокаОрганизации");
			
			Для Каждого ТекущиеДанныеЗаголовка Из ДанныеЗаголовка Цикл
				Если Не ПустаяСтрока(ТекущиеДанныеЗаголовка.Значение) Тогда
					ОбластьМакета.Параметры.Заполнить(Новый Структура("ДанныеСтроки", ТекущиеДанныеЗаголовка.Значение));
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ДанныеОрганизацииБезЛоготипа|Отступ"));
			
		КонецЕсли;
		
		Если Макет.Области.Найти("Заголовок") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			Если СведенияОДокументе.НомерВерсии = 1 Тогда
				ПредставлениеНомера = СведенияОДокументе.НомерДокумента;
			Иначе
				ПредставлениеНомера = СтрШаблон("%1-%2",
					СведенияОДокументе.НомерДокумента,
					Формат(СведенияОДокументе.НомерВерсии, "ЧГ="));
			КонецЕсли;
			
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Коммерческое предложение № %1 от %2 г.'"),
				ПредставлениеНомера, Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если Макет.Области.Найти("Покупатель") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
			ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
			
			ПредставлениеПокупателя = СокрЛП(СведенияОДокументе.ПредставлениеПокупателя);
			
			Если ЗначениеЗаполнено(СведенияОДокументе.Контрагент) Тогда
				СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СведенияОДокументе.Контрагент, СведенияОДокументе.ДатаДляПолученияСведений);
				
				ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
					СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм");
				ПредставлениеПокупателя = СтрШаблон("%1, %2", ПредставлениеПокупателя, ПредставлениеКонтрагента);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПокупателя", ПредставлениеПокупателя));
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если Не ПустаяСтрока(СведенияОДокументе.Тема)
			И Макет.Области.Найти("Тема") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Тема");
			ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		// Начало фиксации формата таблицы документа
		НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ОбластьКодов.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидка Тогда
			ОбластьСкидки  = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ТабличныйДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если Не ЕстьСкидка И Макет.Области.Найти("Скидка") <> Неопределено Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("Скидка").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		НомерСтроки = 0;
		Для каждого Строка Из СведенияОДокументе.ТаблицаДокумента Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));

			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", Строка.НоменклатураАртикул));
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ДанныеПечатиСтрокаОбластьДанных = Новый Структура;
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Товар", СокрЛП(Строка.НоменклатураНаименование));
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Количество", Строка.Количество);
			ДанныеПечатиСтрокаОбластьДанных.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмеренияНаименование);
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Цена", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.Цена));
			ОбластьДанных.Параметры.Заполнить(ДанныеПечатиСтрокаОбластьДанных);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидка Тогда
				ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
				ОбластьСкидки.Параметры.Заполнить(Новый Структура("СуммаСкидки",
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.СуммаСкидки)));
				ТабличныйДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(Новый Структура("Сумма",
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.Сумма - Строка.СуммаСкидки)));
			
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
		КонецЦикла;
		
		ТабличныйДокумент.Область(НачалоНовогоФормата + 1, , ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
		// Конец фиксации формата таблицы документа
		
		Если Макет.Области.Найти("Подвал") <> Неопределено Тогда
			ОбластьПодвал  = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли; 
		
		Если СведенияОДокументе.СуммаСкидки <> 0 
			И Макет.Области.Найти("СкидкаПоДокументу") <> Неопределено Тогда
			
			ОбластьСкидки = Макет.ПолучитьОбласть("СкидкаПоДокументу");
			ОбластьСкидки.Параметры.Заполнить(Новый Структура("СуммаСкидки",
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(СведенияОДокументе.СуммаСкидки)));
			ТабличныйДокумент.Вывести(ОбластьСкидки);
		КонецЕсли; 
		
		ДанныеЗаполненияИтого = Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма));
		
		СуммаПоДокументу = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ИтогоПоДокументу = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаПоДокументу);
		ДанныеЗаполненияИтогоПоДокументу = Новый Структура("ИтогоПоДокументу", ИтогоПоДокументу);
		
		Если Макет.Области.Найти("Скидка") <> Неопределено Тогда
			
			ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
			ОбластьИтого.Параметры.Заполнить(ДанныеЗаполненияИтого);
			
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			// Вывести ИтогоНДС
			ОбластьИтогоНДС  = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьИтогоНДС.Параметры.Заполнить(ДанныеПечатиИтоговНДС);
			
			ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
			
			// Вывести ИтогоКОплате
			ОбластьИтогоПоДокументу = Макет.ПолучитьОбласть("ИтогоПоДокументу");
			ОбластьИтогоПоДокументу.Параметры.Заполнить(ДанныеЗаполненияИтогоПоДокументу);
			
			ТабличныйДокумент.Вывести(ОбластьИтогоПоДокументу);
			
		Иначе
			// В случае если используется пользовательский макет - используем вертикальные названия областей.
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
			ОбластьСумма  = Макет.ПолучитьОбласть("Итого|Сумма");

			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			ОбластьСумма.Параметры.Заполнить(ДанныеЗаполненияИтого);
			ТабличныйДокумент.Присоединить(ОбластьСумма);
			
			// Вывести ИтогоНДС
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Заполнить(ДанныеПечатиИтоговНДС);
			ОбластьСуммы.Параметры.Заполнить(ДанныеПечатиИтоговНДС);
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			// Вывести ИтогоКОплате
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ДанныеЗаполненияИтогоПоДокументу);
			
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		
		// Выводим Сумму прописью
		Если Макет.Области.Найти("СуммаПрописью") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
			СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
			
			ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего наименований %1, на сумму %2'"),
				НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
			ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СуммаКПрописи, СведенияОДокументе.Валюта);
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Дополнительные условия
		Если Не ПустаяСтрока(СведенияОДокументе.ТекстДополнительныхУсловий)
			И Макет.Области.Найти("ДополнительныеУсловия") <> Неопределено Тогда
			
			// Добавим отступ перед текстом
			Если Макет.Области.Найти("ДополнительныеУсловияОтступ") <> Неопределено Тогда
				ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
				ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
			КонецЕсли;
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ТекстДополнительныхУсловий = СведенияОДокументе.ТекстДополнительныхУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий",
					СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// Срок действия
		Если СведенияОДокументе.СрокДействия <> Дата(1, 1, 1)
			И Макет.Области.Найти("СрокДействия") <> Неопределено Тогда
			
			// Добавим отступ перед текстом
			Если Макет.Области.Найти("ДополнительныеУсловияОтступ") <> Неопределено Тогда
				ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
				ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("СрокДействия");
			СтруктураПараметров = Новый Структура("СрокДействия", Формат(СведенияОДокументе.СрокДействия, "ДФ=dd.MM.yyyy"));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если Макет.Области.Найти("РазделительКП") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("РазделительКП");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ДанныеПечатиПодвалКП = Новый Структура;
		СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(
			СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
		ЭтоСамозанятый = СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый;
		СчетВыставленЛичноПредпринимателем = Не ЗначениеЗаполнено(СведенияОДокументе.РуководительФИО) Или
			СведенияОДокументе.Руководитель = ДанныеОрганизации.ИндивидуальныйПредприниматель;
		ВыводитьПодготовил = Ложь;
		// В случае если счет выставляет предприниматель, который свои полномочия никому не делегировал -
		// выводим специальный подвал документа
		Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И СчетВыставленЛичноПредпринимателем Или ЭтоСамозанятый Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалКППредприниматель");
			ДанныеПечатиПодвалКП.Вставить("ФИОПредпринимателя", ДанныеОрганизации.ФамилияИнициалыФизлица);
			ДанныеПечатиПодвалКП.Вставить("Предприниматель",
				?(ЭтоСамозанятый, НСтр("ru = 'Подготовил'"), НСтр("ru = 'Предприниматель'")));
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалКП");
			ДанныеПечатиПодвалКП.Вставить("ФИОРуководителя", СведенияОДокументе.РуководительФИО);
			ДанныеПечатиПодвалКП.Вставить("ЗаРуководителяПоПриказу", СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
			ВыводитьПодготовил = ЗначениеЗаполнено(СведенияОДокументе.ОтветственныйФизическоеЛицо)
				И СведенияОДокументе.ОтветственныйФизическоеЛицо <> СведенияОДокументе.Руководитель;
		КонецЕсли;
		
		Если ВыводитьПодготовил И Макет.Области.Найти("ПодвалКППодготовил") <> Неопределено Тогда
			ОбластьМакетаПодготовил = Макет.ПолучитьОбласть("ПодвалКППодготовил");
			ОбластьМакетаПодготовил.Параметры.Заполнить(СведенияОДокументе);
			
			Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(
				СведенияОДокументе.ОтветственныйФизическоеЛицо,
				СведенияОДокументе.Организация,
				СведенияОДокументе.ДатаДляПолученияСведений);
			ОбластьМакетаПодготовил.Параметры.Заполнить(Новый Структура("ФИОИсполнителя", Полномочия.ФИО.Представление));
			
			ТабличныйДокумент.Вывести(ОбластьМакетаПодготовил);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодвалКП);
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
		УправлениеПечатьюБП.НастроитьСтарыйВариантПодписиИПечати(ТабличныйДокумент, ОбъектыПечати,
			СведенияОДокументе.Организация, СведенияОДокументе.Документ);
		
		УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати,
			СведенияОДокументе.Организация, СведенияОДокументе.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ТекстЗапросаСведенийКоммерческогоПредложения()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("КоммерческоеПредложениеТовары");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументКоммерческоеПредложение.Ссылка КАК Документ,
	|	ДокументКоммерческоеПредложение.ДатаВерсии КАК ДатаВерсии,
	|	ДокументКоммерческоеПредложение.НомерВерсии КАК НомерВерсии,
	|	ДокументКоммерческоеПредложение.ВалютаДокумента КАК Валюта,
	|	ДокументКоммерческоеПредложение.ВалютаДокумента.Код КАК ВалютаКод,
	|	ДокументКоммерческоеПредложение.ВалютаДокумента.Наименование КАК ВалютаНаименование,
	|	ДокументКоммерческоеПредложение.СуммаДокумента КАК СуммаДокумента,
	|	ДокументКоммерческоеПредложение.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДокументКоммерческоеПредложение.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДокументКоммерческоеПредложение.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументКоммерческоеПредложение.Организация КАК Организация,
	|	ДокументКоммерческоеПредложение.Организация КАК Руководители,
	|	ДокументКоммерческоеПредложение.КонтактноеЛицо КАК Покупатель,
	|	ДокументКоммерческоеПредложение.Контрагент КАК Контрагент,
	|	ДокументКоммерческоеПредложение.Руководитель КАК Руководитель,
	|	ДокументКоммерческоеПредложение.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	|	ДокументКоммерческоеПредложение.Тема КАК Тема,
	|	ДокументКоммерческоеПредложение.СуммаСкидки КАК СуммаСкидки,
	|	ДокументКоммерческоеПредложение.ДополнительныеУсловия КАК ДополнительныеУсловия,
	|	ДокументКоммерческоеПредложение.СрокДействия КАК СрокДействия,
	|	ДокументКоммерческоеПредложение.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_ДанныеКоммерческоеПредложение
	|ИЗ
	|	Документ.КоммерческоеПредложение КАК ДокументКоммерческоеПредложение
	|ГДЕ
	|	ДокументКоммерческоеПредложение.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументКоммерческоеПредложение.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКоммерческоеПредложение.Документ КАК Документ,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеКоммерческоеПредложение.ДатаВерсии КАК ДатаДокумента,
	|	ДанныеКоммерческоеПредложение.НомерВерсии КАК НомерВерсии,
	|	ДанныеКоммерческоеПредложение.ДатаВерсии КАК ДатаДляПолученияСведений,
	|	ДанныеКоммерческоеПредложение.Валюта КАК Валюта,
	|	ДанныеКоммерческоеПредложение.ВалютаКод КАК ВалютаКод,
	|	ДанныеКоммерческоеПредложение.ВалютаНаименование КАК ВалютаНаименование,
	|	ДанныеКоммерческоеПредложение.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеКоммерческоеПредложение.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДанныеКоммерческоеПредложение.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеКоммерческоеПредложение.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеКоммерческоеПредложение.Организация КАК Организация,
	|	ДанныеКоммерческоеПредложение.Руководители КАК Руководители,
	|	ДанныеКоммерческоеПредложение.Покупатель КАК Покупатель,
	|	КонтактныеЛица.Фамилия + "" "" + КонтактныеЛица.Имя + "" "" + КонтактныеЛица.Отчество КАК ПредставлениеПокупателя,
	|	ДанныеКоммерческоеПредложение.Контрагент КАК Контрагент,
	|	ДанныеКоммерческоеПредложение.Руководитель КАК Руководитель,
	|	ДанныеКоммерческоеПредложение.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	|	ДанныеКоммерческоеПредложение.Тема КАК Тема,
	|	ДанныеКоммерческоеПредложение.СуммаСкидки КАК СуммаСкидки,
	|	ЕСТЬNULL(СправочникДополнительныеУсловия.ТекстУсловий, """") КАК ТекстДополнительныхУсловий,
	|	ДанныеКоммерческоеПредложение.ДополнительныеУсловия КАК ДополнительныеУсловия,
	|	ДанныеКоммерческоеПредложение.СрокДействия КАК СрокДействия,
	|	ДанныеКоммерческоеПредложение.ОтветственныйФизическоеЛицо КАК ОтветственныйФизическоеЛицо
	|ИЗ
	|	ВТ_ДанныеКоммерческоеПредложение КАК ДанныеКоммерческоеПредложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеКоммерческоеПредложение.Документ = ДанныеПервичныхДокументов.Документ
	|			И ДанныеКоммерческоеПредложение.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеУсловия КАК СправочникДополнительныеУсловия
	|		ПО ДанныеКоммерческоеПредложение.ДополнительныеУсловия = СправочникДополнительныеУсловия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО ДанныеКоммерческоеПредложение.Покупатель = КонтактныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеТовары.Ссылка КАК Документ,
	|	ДанныеКоммерческоеПредложение.ДатаВерсии КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	КоммерческоеПредложениеТовары.НомерСтроки КАК НомерСтроки,
	|	КоммерческоеПредложениеТовары.Номенклатура КАК Номенклатура,
	|	КоммерческоеПредложениеТовары.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КоммерческоеПредложениеТовары.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КоммерческоеПредложениеТовары.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураАртикул,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК НоменклатураНаименование,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Содержание,
	|	ЕСТЬNULL(КоммерческоеПредложениеТовары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КоммерческоеПредложениеТовары.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КоммерческоеПредложениеТовары.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(КоммерческоеПредложениеТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	КоммерческоеПредложениеТовары.Количество КАК Количество,
	|	КоммерческоеПредложениеТовары.Цена КАК Цена,
	|	КоммерческоеПредложениеТовары.Сумма КАК Сумма,
	|	КоммерческоеПредложениеТовары.СуммаСкидки КАК СуммаСкидки,
	|	КоммерческоеПредложениеТовары.СтавкаНДС КАК СтавкаНДС,
	|	КоммерческоеПредложениеТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ДанныеКоммерческоеПредложение КАК ДанныеКоммерческоеПредложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложение.Товары КАК КоммерческоеПредложениеТовары
	|		ПО ДанныеКоммерческоеПредложение.Документ = КоммерческоеПредложениеТовары.Ссылка
	|			И ДанныеКоммерческоеПредложение.НомерВерсии = КоммерческоеПредложениеТовары.НомерВерсии
	|ГДЕ
	|	НЕ КоммерческоеПредложениеТовары.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
	
КонецФункции

Функция ОписаниеКоммерческогоПредложения()
	
	ОписаниеДаты = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОписаниеСтроки = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений", ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ДатаДокумента", ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерВерсии", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Таблица.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ВалютаНаименование", ОписаниеСтроки);
	Таблица.Колонки.Добавить("КурсВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	Таблица.Колонки.Добавить("КратностьВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Таблица.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", Новый ОписаниеТипов("Булево"));

	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
	Таблица.Колонки.Добавить("ПредставлениеПокупателя", ОписаниеСтроки);
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Тема", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ТекстДополнительныхУсловий", ОписаниеСтроки);
	Таблица.Колонки.Добавить("СрокДействия", ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Руководитель", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО", ОписаниеСтроки);
	Таблица.Колонки.Добавить("РуководительСтруктураФИО", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяНаОсновании", Новый ОписаниеТипов("СправочникСсылка.ОснованияПраваПодписи"));
	Таблица.Колонки.Добавить("ЗаРуководителяНаОснованииНаименование", ОписаниеСтроки);
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", ОписаниеСтроки);
	Таблица.Колонки.Добавить("РуководительДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	Таблица.Колонки.Добавить("ОтветственныйФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Таблица.Колонки.Добавить("ИмяОбластиПечати", ОписаниеСтроки);
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ОписаниеТаблицыКоммерческогоПредложения()
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеСтроки = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТабличнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 2));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ЭтоУслуга", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НоменклатураАртикул", ОписаниеСтроки);
	Таблица.Колонки.Добавить("НоменклатураНаименование", ОписаниеСтроки);
	Таблица.Колонки.Добавить("Содержание", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПолное", ОписаниеСтроки);
	Таблица.Колонки.Добавить("Коэффициент", ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Количество", ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена", ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма", ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСкидки", ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло15_2);
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаСведенийКоммерческогоПредложения(Знач МассивДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСведений = ОписаниеКоммерческогоПредложения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов",
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ТекстЗапросаСведенийКоммерческогоПредложения();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	СтрокиДокументов = РезультатЗапроса[2].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		ТаблицаДокумента = ОписаниеТаблицыКоммерческогоПредложения();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
		
		Если Не ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Организация, "ЮридическоеФизическоеЛицо")
				= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = "Индивидуальный предприниматель";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

#КонецОбласти

#КонецЕсли
