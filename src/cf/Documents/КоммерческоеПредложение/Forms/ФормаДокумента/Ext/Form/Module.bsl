#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	РазместитьВерсии();
	
	Если Параметры.Ключ.Пустая() Тогда
		АвторасчетСрокаДействия = Истина;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КоммерческоеПредложение.Форма.ФормаПодписи" Тогда
		ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ПрочитатьСтатусДокумента();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Тогда
		ОбработкаОповещенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НомерВерсии = ТекущийНомерВерсии Тогда
		СохранитьТекущуюВерсию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	СтруктураРеквизитовПодписи = Новый Структура;
	СтруктураРеквизитовПодписи.Вставить("Руководитель", "ЗаРуководителяНаОсновании");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
	КалькуляцииРасходов.ПередЗаписьюНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСтатусДокумента(ТекущийОбъект.Ссылка, СтатусДокумента);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВариантРасчетаИсходящегоНДС",
		?(Объект.СуммаВключаетНДС, Перечисления.ВариантыРасчетаНДС.НДСВСумме, Перечисления.ВариантыРасчетаНДС.НДССверху));
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	КалькуляцииРасходов.ЗаполнитьКалькуляциюРасходов(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_КоммерческоеПредложение", ПараметрыЗаписи, Объект.Ссылка);
	
	// Явно разблокируем данные для редактирования, чтобы была возможность
	// записать коммерческое предложение из счета покупателю
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ПроверкаЗаполнения(ЭтотОбъект,
		Объект.Организация, ТекущаяДатаВерсии, Ложь, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	НастройкиНалоговИОтчетовПредупреждениеФормыКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(ТекущаяДатаДокумента) = ДатаВерсии Тогда
		ДатаВерсии = Объект.Дата;
		ПриИзмененииДатыВерсии();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КонтактноеЛицоПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьОтборКонтактногоЛица();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВерсииПриИзменении(Элемент)
	
	ПриИзмененииДатыВерсии();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	АвторасчетСрокаДействия = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодписиНажатие(Элемент)
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или НомерВерсии <> ТекущийНомерВерсии);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента", ТекущаяДатаВерсии);
	ПараметрыФормы.Вставить("Руководитель", Руководитель);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", ЗаРуководителяНаОсновании);
	
	ОткрытьФорму("Документ.КоммерческоеПредложение.Форма.ФормаПодписи", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаВерсииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриСменеСтраницыВерсииНаСервере(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	
	Если ВидСкидки <> ВидСкидкиПоДокументу() Тогда
		СуммаСкидки = 0;
	КонецЕсли;
	
	Если ВидСкидки <> ВидСкидкиНаОтдельныеПозиции() Тогда
		ТоварыВерсии = ИдентификаторыТоваровВерсии();
		Для Каждого СтрокаВерсии Из ТоварыВерсии Цикл
			Строка = Объект.Товары.НайтиПоИдентификатору(СтрокаВерсии);
			Если Строка.СуммаСкидки <> 0 Или Строка.ПроцентСкидки <> 0 Тогда
				Строка.СуммаСкидки = 0;
				Строка.ПроцентСкидки = 0;
				
				ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПоДокументуПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтотОбъект);
	
	ЗаполнитьНомерСтрокиВерсии();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыРасходНаЕдиницу" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяСтрока = Элементы.Товары.ТекущиеДанные;
		АдресСРасчетамиКалькуляции = АдресВременногоХранилищаСРасчетамиКалькуляции(ВыбраннаяСтрока.КлючКалькуляцииРасходов);
		КалькуляцииРасходовКлиент.ОткрытьКалькуляциюРасходов(ЭтотОбъект, ВыбраннаяСтрока,
			АдресСРасчетамиКалькуляции, ДатаВерсии, НомерВерсии <> ТекущийНомерВерсии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
		
		Если Не Копирование Тогда
			ТекущиеДанныеСтроки.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПользователя(ДатаВерсии, ПлательщикНДС);
			ТекущиеДанныеСтроки.ЭтоУслуга = Истина;
			ТекущиеДанныеСтроки.НомерВерсии = НомерВерсии;
			ТекущиеДанныеСтроки.РасходыНаЕдиницу = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Иначе
			Если ЗначениеЗаполнено(ТекущиеДанныеСтроки.КлючКалькуляцииРасходов) Тогда
				СтарыйКлючКалькуляцииРасходов = ТекущиеДанныеСтроки.КлючКалькуляцииРасходов;
				ТекущиеДанныеСтроки.КлючКалькуляцииРасходов = Новый УникальныйИдентификатор;
				СкопироватьКалькуляциюРасходов(СтарыйКлючКалькуляцииРасходов, ТекущиеДанныеСтроки.КлючКалькуляцииРасходов);
			КонецЕсли;
		КонецЕсли;
		ТекущийНомерСтрокиТовары = ТекущийНомерСтрокиТовары + 1;
		ТекущиеДанныеСтроки.НомерСтрокиВерсии = ТекущийНомерСтрокиТовары;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
		ТекущийНомерСтрокиТовары = ТекущийНомерСтрокиТовары - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТекущийНомерСтрокиТовары = ТекущийНомерСтрокиТовары - 1;
	
	УдалитьНесвязанныеКлючиКалькуляцииРасходов();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТоварыНоменклатураПриИзмененииНаКлиенте(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РаботаСНоменклатуройКлиентБП.СодержаниеПриИзменении(ТекущиеДанные, ДатаВерсии);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьОтрицательноеЗначениеСтрокиТовары(Строка, "Количество");
	
	ПересчитатьСуммуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьОтрицательноеЗначениеСтрокиТовары(Строка, "Цена");
	
	ПересчитатьСуммуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьОтрицательноеЗначениеСтрокиТовары(Строка, "Сумма");
	
	Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
	
	ПересчитатьЦенуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ПроцентСкидки = ?(СтрокаТабличнойЧасти.Сумма = 0, 0, СтрокаТабличнойЧасти.СуммаСкидки / СтрокаТабличнойЧасти.Сумма * 100);
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДСТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьОтрицательноеЗначениеСтрокиТовары(Строка, "СуммаНДС");
	
	ПересчитатьВсегоТовары();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВерсию(Команда)
	
	ДобавитьВерсиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВерсию(Команда)
	
	УдалитьВерсиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьТекущей(Команда)
	
	СделатьТекущейНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора();
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
		ЭтотОбъект, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
		ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзВнешнихФайловКлиент.НовыйПараметрыЗагрузкиВТабЧасть();
	
	ПараметрыЗагрузки.ИмяТабличнойЧасти = "Документ.КоммерческоеПредложение.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка товаров из файла'");
	ПараметрыЗагрузки.Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект);
	ПараметрыЗагрузки.Пояснение = НСтр("ru = 'Укажите названия реквизитов в заголовках колонок, которые хотите загрузить. <span style=""color: НезаполненныйРеквизит"">Ненайденная</span> номенклатура не будет загружена.'");
	
	
	ПараметрыЗагрузки.ПрикладнаяЗагрузка = Истина;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.Период = ДатаВерсии;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.Организация = Объект.Организация;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.ИмяМакета = "ЗагрузкаИзФайла";
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.ОбъектДляЗагрузки = ПредопределенноеЗначение(
		"Документ.КоммерческоеПредложение.ПустаяСсылка");
	
	РеквизитыДляСопоставления = Новый СписокЗначений;
	РеквизитыДляСопоставления.Добавить("Номенклатура_Артикул");
	РеквизитыДляСопоставления.Добавить("Номенклатура_Наименование");
	ПараметрыЗагрузки.РеквизитыДляСопоставления = ПоместитьВоВременноеХранилище(
		РеквизитыДляСопоставления, УникальныйИдентификатор);

	ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
		"Обработка.ЗагрузкаДанныхВТабличнуюЧасть.Форма",
		УникальныйИдентификатор,
		ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииНаКлиенте(СтрокаТаблицы)

	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС,
		|ЭтоУслуга, СуммаСкидки, ПроцентСкидки, ЕдиницаИзмерения, Артикул, Код");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ДокументБезНДС, Реализация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	Если Не ИспользоватьТипыЦенНоменклатуры Тогда
		ПараметрыОбъекта.ТипЦен = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	ПараметрыОбъекта.Реализация = Истина;
	ПараметрыОбъекта.Дата = ДатаВерсии;
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокаТаблицы);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.КлючКалькуляцииРасходов) Тогда
		УдалитьСтарыеДанныеКалькуляцииРасходов(СтрокаТаблицы.КлючКалькуляцииРасходов);
		СтрокаТаблицы.КлючКалькуляцииРасходов = Неопределено;
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) - СтрокаТаблицы.СуммаСкидки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект, ТекущаяДатаВерсии);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Отметка незаполненного поля ТоварыНоменклатура
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Товары.Содержание", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Видимость поля ТоварыСодержание
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыСодержание");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отметка незаполненного поля ТоварыКоличество
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Видимость полей ТоварыСтавкаНДС и ТоварыСуммаНДС
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыСуммаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Просмотр и отметка незаполненного поля ТоварыСуммаНДС

	Элемент = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Видимость поля ТоварыВсего
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыВсего");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		Элемент.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ВидСкидки",
		ВидСравненияКомпоновкиДанных.НеРавно,
		ВидСкидкиНаОтдельныеПозиции());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость полей ТоварыПроцентСкидки, ТоварыСуммаСкидки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыПроцентСкидки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "ТоварыСуммаСкидки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.НеРавно, ВидСкидкиНаОтдельныеПозиции());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Условное оформление полей калькуляции расходов
	
	КалькуляцииРасходов.УстановитьУсловноеОформление(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ПрочитатьСтатусДокумента();
	
	УстановитьТекущуюВерсию();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьОтборКонтактногоЛица();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	УправлениеФормой(ЭтотОбъект);
	
	Элементы.ТоварыРасходНаЕдиницу.Видимость = ИспользуетсяКалькуляцияРасходов;
	
	УстановитьСпособВводаТемы(ЭтотОбъект);
	
	КалькуляцииРасходов.ЗаполнитьКалькуляциюРасходов(ЭтотОбъект, "Товары");
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаВерсии);
	
	ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры")
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	
	ЕстьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	
	КалькуляцииРасходов.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ИмяЭлемента = ИмяЭлементаВерсии("ИтогиСкидка", Форма.НомерВерсии, Форма.ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Видимость = Форма.ВидСкидки = ВидСкидкиНаОтдельныеПозиции();
	
	ИмяЭлемента = ИмяЭлементаВерсии("ИтогиВсего", Форма.НомерВерсии, Форма.ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Заголовок = ?(Форма.ВидСкидки = ВидСкидкиНеПредоставлена(),
		НСтр("ru = 'Всего'"),
		НСтр("ru = 'Всего со скидкой'"));
	
	ИмяЭлемента = ИмяЭлементаВерсии("ИтогиВсегоНДС", Форма.НомерВерсии, Форма.ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Видимость = Не Форма.ДокументБезНДС;
	
	ИмяЭлемента = ИмяЭлементаВерсии("СкидкаПоДокументу", Форма.НомерВерсии, Форма.ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Видимость = Форма.ВидСкидки = ВидСкидкиПоДокументу();
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ВыбранноеЗначение, ИсточникВыбора)

	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",    ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",               КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",          КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсДокумента",      КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",   СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",     ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",         Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",        Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",      ДатаВерсии);
	СтруктураПараметров.Вставить("ТипЦен",             ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",     ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры Или ЕстьВалютныйУчет Тогда
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ТоварыЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, , , , , ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС = Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС = Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС = Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС = Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены", Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены", Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			Или ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			Или ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения = ВалютаДокумента;
		КурсДоИзменения = КурсВзаиморасчетов;
		КратностьДоИзменения = КратностьВзаиморасчетов;
		
		ТипЦен = СтруктураЦеныИВалюта.ТипЦен;
		ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		КурсВзаиморасчетов = СтруктураЦеныИВалюта.Курс;
		КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		ДокументБезНДС = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены
			Или СтруктураЦеныИВалюта.ПересчитатьЦены
			Или СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	ТоварыВерсии = ТоварыВерсии();
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТоварыВерсии, "Номенклатура", Истина);
		
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры,
				ТипЦен,
				ДатаВерсии);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, ДатаВерсии);
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого Строка Из ТоварыВерсии Цикл
		ЗначениеПустогоКоличества = ?(Строка.ЭтоУслуга, 1, 0);
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
			ПересчитатьЦены, ПересчитатьНДС, Истина, ЗначениеПустогоКоличества);
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)
	
	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ВалютаДокумента, НайденнаяСтрока.Курс,
				КурсВзаиморасчетов, НайденнаяСтрока.Кратность, КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, ВалютаДокумента, СтруктураКурса.Курс,
				КурсВзаиморасчетов, СтруктураКурса.Кратность, КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, Не СуммаВключаетНДС, СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Если ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
			
		ЦенаИзменилась = Цена <> Строка.Цена;
		
		Если ЦенаИзменилась Тогда
			Строка.Цена        = Цена;
			Строка.Сумма       = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
			Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
		КонецЕсли;
		
		Если ЦенаИзменилась Или ПересчитатьНДС Тогда
			Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма - Строка.СуммаСкидки, СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				
			Строка.Всего = Строка.Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС) - Строка.СуммаСкидки;
		КонецЕсли;
		
	ИначеЕсли Цена <> Строка.Цена Тогда
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаВерсииПриИзмененииНаСервере(ТребуетсяВызовСервера)
	
	Если ТребуетсяВызовСервера Тогда
		ДатаВерсииОбработатьИзменение();
		РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(ТоварыВерсии(), ДатаВерсии, ТекущаяДатаВерсии);
		
		УправлениеФормой(ЭтотОбъект);
		
		ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект, ДатаВерсии);
	КонецЕсли;
	
	Если АвторасчетСрокаДействия Тогда
		УстановитьСрокДействия();
	КонецЕсли;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ДатаВерсии, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДатаВерсииОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();

	Если ПлательщикНДС Тогда 
		ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаВерсии);
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект, ТекущаяДатаВерсии);
	
	Если ПлательщикНДС Тогда 
		ДокументБезНДС = Ложь;
	КонецЕсли;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ТекущаяДатаВерсии, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииНаСервере()
	
	КонтрагентКонтакта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "ОбъектВладелец");
	Если Объект.Контрагент <> КонтрагентКонтакта Тогда
		Объект.Контрагент = КонтрагентКонтакта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКонтактногоЛица()
	
	ПараметрыВыбораКонтакта = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	ПараметрыВыбораКонтакта.Добавить(ПараметрВыбора);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ОбъектВладелец", Объект.Контрагент);
		ПараметрыВыбораКонтакта.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.КонтактноеЛицо.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораКонтакта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСкидки()
	
	Если СуммаСкидки <> 0 Тогда
		ВидСкидки = ВидСкидкиПоДокументу();
	Иначе
		ИтогиВерсии = ИтогиВерсии(Объект.Товары, НомерВерсии, "СуммаСкидки");
		Если ИтогиВерсии.СуммаСкидки <> 0 Тогда
			ВидСкидки = ВидСкидкиНаОтдельныеПозиции();
		Иначе
			ВидСкидки = ВидСкидкиНеПредоставлена();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуТовары()

	Строка = Элементы.Товары.ТекущиеДанные;
	
	ЗначениеПустогоКоличества = ?(Строка.ЭтоУслуга, 1, 0);
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(Строка, СуммаВключаетНДС, ЗначениеПустогоКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуТовары()

	Строка = Элементы.Товары.ТекущиеДанные;
	
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДСТовары()
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсегоТовары()

	Строка = Элементы.Товары.ТекущиеДанные;
	Строка.Всего = Строка.Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС) - Строка.СуммаСкидки;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ПараметрыОбъекта)

	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Вставить("Содержание", "");
		СтрокаТабличнойЧасти.ЭтоУслуга = Истина;
	Иначе
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура,
			"Наименование, НаименованиеПолное, ПериодичностьУслуги, Услуга, ЕдиницаИзмерения, Артикул, Код");
		
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", РеквизитыНоменклатуры.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("Код", РеквизитыНоменклатуры.Код);
		СтрокаТабличнойЧасти.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		
		Если Не РеквизитыНоменклатуры.Услуга Тогда
			Содержание = "";
		Иначе
			Если ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
				Содержание = РеквизитыНоменклатуры.Наименование;
			Иначе
				Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
			КонецЕсли;
			Содержание = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
				Содержание,
				РеквизитыНоменклатуры.ПериодичностьУслуги,
				ПараметрыОбъекта.Дата);
		КонецЕсли;
		СтрокаТабличнойЧасти.Вставить("Содержание", Содержание);
		СтрокаТабличнойЧасти.ЭтоУслуга = РеквизитыНоменклатуры.Услуга;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ТипЦен) Тогда
		ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ПараметрыОбъекта,
		Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
		
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(
			СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	Объект = Форма.Объект;
	
	ИтогиВерсии = ИтогиВерсии(Объект.Товары, Форма.НомерВерсии, "Всего,СуммаСкидки,СуммаНДС");
	
	// Скидка по документу считается в итогах 
	Если Форма.ВидСкидки = ВидСкидкиПоДокументу() И ИтогиВерсии.Всего > 0 Тогда
		ДанныеОбъекта = Новый Структура("СуммаСкидки, СуммаВключаетНДС, НомерВерсии");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Форма);
		
		Итоги = ИтогиСУчетомСкидки(Объект.Товары, ДанныеОбъекта);
		
		Форма.ИтогиВсего    = Итоги.ИтогиВсего;
		Форма.ИтогиСкидка   = Итоги.ИтогиСкидка;
		Форма.ИтогиВсегоНДС = Итоги.ИтогиВсегоНДС;
	Иначе
		Форма.ИтогиВсего    = ИтогиВерсии.Всего;
		Форма.ИтогиСкидка   = ИтогиВерсии.СуммаСкидки;
		Форма.ИтогиВсегоНДС = ИтогиВерсии.СуммаНДС;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(СтруктураНадписи, Объект);
	ЗаполнитьЗначенияСвойств(СтруктураНадписи, Форма);
	СтруктураНадписи.Курс = Форма.КурсВзаиморасчетов;
	СтруктураНадписи.Кратность = Форма.КратностьВзаиморасчетов;
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Форма.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(ДатаВерсии = НачалоДня(ТекущаяДата()), Неопределено, ДатаВерсии);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ПараметрыФормы.Вставить("ПоказыватьОстатки",     Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен",         ТипЦен);
	ПараметрыФормы.Вставить("Валюта",         ВалютаДокумента);
	ПараметрыФормы.Вставить("Контрагент",     Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора",     "");
	ПараметрыФормы.Вставить("ИмяТаблицы",     "Товары");
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		ПараметрыФормы.Вставить("Реализация", Истина);
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ТоварыВерсии = ТоварыВерсии();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Дата = ДатаВерсии;

	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТоварыВерсии, "Номенклатура", Истина),
		ДанныеОбъекта,
		Ложь,  // Не требуется определять счета учета
		Ложь); // Не требуется определять цены
	
	Для каждого СтрокаТаблицы Из ТоварыВерсии Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) - СтрокаТаблицы.СуммаСкидки;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.ЭтоУслуга = Истина;
		Иначе
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.ЭтоУслуга        = СведенияОНоменклатуре.Услуга;
				СтрокаТаблицы.ЕдиницаИзмерения = СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТаблицы.Код              = СведенияОНоменклатуре.Код;
				СтрокаТаблицы.Артикул          = СведенияОНоменклатуре.Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	ТоварыВерсии = ТоварыВерсии(Истина);
	Возврат ПоместитьВоВременноеХранилище(ТоварыВерсии, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары",     ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке",   Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка",           Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата",             ДатаВерсии);
	ПараметрыОбработки.Вставить("ДокументОрганизация",      Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта",           ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс",             КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность",        КратностьВзаиморасчетов); 
	ПараметрыОбработки.Вставить("ДокументБезНДС",           ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен",           ТипЦен);
	
	ИменаТаблицИсточников = Новый СписокЗначений;
	ИменаТаблицИсточников.Добавить("Товары");

	ПараметрыОбработки.Вставить("ИмяТаблицы",               "Товары");
	ПараметрыОбработки.Вставить("РазрешитьУслуги",          Истина);
	ПараметрыОбработки.Вставить("ПоказыватьСкидку",         ВидСкидки = ВидСкидкиНаОтдельныеПозиции());
	ПараметрыОбработки.Вставить("ИменаТаблицИсточников",    ИменаТаблицИсточников);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	ТоварыВерсии = ТоварыВерсии();
	
	Для Каждого СтрокаТаблицы Из ТоварыВерсии Цикл
		Объект.Товары.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаОбработки Из ТаблицаОбработки Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбработки);
		НоваяСтрока.НомерВерсии = НомерВерсии;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Экспорт
	
	Возврат ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		Или ИмяСобытия = "ИзменениеПатента";
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ТекущаяДатаВерсии, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, НеиспользуемыйПараметр) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или Не ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НоменклатураБезЦены = ЗагруженныеДанные.Скопировать(Новый Структура("Цена", 0), "Номенклатура");
	Если НоменклатураБезЦены.Количество() > 0 Тогда 
		
		СписокНоменклатуры = НоменклатураБезЦены.ВыгрузитьКолонку("Номенклатура");
		Если ИспользоватьТипыЦенНоменклатуры И ЗначениеЗаполнено(ТипЦен) Тогда
			ЦеныНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦен, ДатаВерсии);
		Иначе
			ЦеныНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(
				СписокНоменклатуры, Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам, ДатаВерсии);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагруженныеДанные.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого ЗагруженнаяСтрока Из ЗагруженныеДанные Цикл 
		
		Если ЗагруженнаяСтрока.Цена = 0 Тогда 
			СведенияОЦенеНоменклатуры = ЦеныНоменклатуры.Найти(ЗагруженнаяСтрока.Номенклатура, "Номенклатура");
			Если СведенияОЦенеНоменклатуры <> Неопределено Тогда
				ЗагруженнаяСтрока.Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СведенияОЦенеНоменклатуры.Цена,
					СведенияОЦенеНоменклатуры.Валюта, ВалютаДокумента,
					СведенияОЦенеНоменклатуры.Курс, КурсВзаиморасчетов,
					СведенияОЦенеНоменклатуры.Кратность, КратностьВзаиморасчетов);
				
				Если ЗначениеЗаполнено(ТипЦен) И (СведенияОЦенеНоменклатуры.Валюта <> ВалютаДокумента) Тогда
					ЗагруженнаяСтрока.Цена = Ценообразование.ОкруглитьЦену(ЗагруженнаяСтрока.Цена, ТипЦен);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ЗагруженнаяСтрока);
		
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
		ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(СтруктураЗагруженныхДанных, "Товары");
	
КонецПроцедуры

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусДокумента(Ссылка, Статус)
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = Статус;
		
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Ссылка, СтатусыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтатусДокумента()
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Цена") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("РасходыНаЕдиницу") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("РасходыНаЕдиницу", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	ДанныеОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = СуммаВключаетНДС;
	КонецЕсли;

	КоличествоДобавленныхСтрок = 0;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
			Цена = СтрокаТовара.Цена;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовара, ДанныеОбъекта, "Товары", МетаданныеДокумента);
			
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТовара.Цена, ЦенаВключаетНДС, СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
		КонецЕсли;
			
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура, Цена, НомерВерсии",
				СтрокаТовара.Номенклатура, Окр(Цена, 2, 1), НомерВерсии);
			СтрокаТабличнойЧасти = Неопределено;

			МассивНайденныхСтрок = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
			КонецЕсли;
			
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
			
		Иначе
			
			НоваяСтрока = Объект[ИмяТаблицы].Добавить();
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, СписокСвойств);
			НоваяСтрока.НомерВерсии = НомерВерсии;
			
			ТекущийНомерСтрокиТовары = ТекущийНомерСтрокиТовары + 1;
			НоваяСтрока.НомерСтрокиВерсии = ТекущийНомерСтрокиТовары;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполняем реквизиты табличной части.
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура,
				"Наименование, НаименованиеПолное, Услуга, ПериодичностьУслуги");
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
				
				Если Не РеквизитыНоменклатуры.Услуга Тогда
					Содержание = "";
				Иначе
					Если ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
						Содержание = РеквизитыНоменклатуры.Наименование;
					Иначе
						Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
					КонецЕсли;
					
					Содержание = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
						Содержание,
						РеквизитыНоменклатуры.ПериодичностьУслуги,
						ДатаВерсии);
				КонецЕсли;
				
				НоваяСтрока.Содержание = Содержание;
				
			КонецЕсли;
			НоваяСтрока.ЭтоУслуга = РеквизитыНоменклатуры.Услуга;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ДанныеОбъекта, "Товары", МетаданныеДокумента);
			
			ЗначениеПустогоКоличества = ?(ЭтоВставкаИзБуфера И НоваяСтрока.ЭтоУслуга, 1, 0);
			
			// Рассчитываем реквизиты табличной части.
			Если ЦенаВключаетНДС <> СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
				НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					НоваяСтрока.Цена, ЦенаВключаетНДС, СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, ЗначениеПустогоКоличества);
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
			
			Если ЗначениеЗаполнено(СтрокаТовара.РасходыНаЕдиницу)
				И СтрокаТовара.РасходыНаЕдиницу <> ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения() Тогда
				НоваяСтрока.КлючКалькуляцииРасходов = Новый УникальныйИдентификатор;
				НоваяСтрока.РасходыНаЕдиницу = СтрокаТовара.РасходыНаЕдиницу;
				СкопироватьКалькуляциюРасходов(СтрокаТовара.КлючКалькуляцииРасходов, НоваяСтрока.КлючКалькуляцииРасходов);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтотОбъект);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
		
	КонецЕсли;

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Содержание");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("ПроцентСкидки");
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;

КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ИтогиСУчетомСкидки(Знач ТабличнаяЧасть, ДанныеОбъекта)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", ДанныеОбъекта.НомерВерсии);
	ТоварыВерсии = ТабличнаяЧасть.Выгрузить(Отбор);
	
	ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТоварыВерсии, ДанныеОбъекта);
	
	Результат = Новый Структура;
	Результат.Вставить("ИтогиВсего",    ТоварыВерсии.Итог("Сумма") + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, ТоварыВерсии.Итог("СуммаНДС")));
	Результат.Вставить("ИтогиСкидка",   ДанныеОбъекта.СуммаСкидки);
	Результат.Вставить("ИтогиВсегоНДС", ТоварыВерсии.Итог("СуммаНДС"));
	
	Возврат Результат;
КонецФункции 

&НаСервере
Процедура УстановитьСрокДействия()
	
	АвторасчетСрокаДействия = Истина;
	
	СрокДействия = Документы.КоммерческоеПредложение.СрокДействияПоУмолчанию(ДатаВерсии);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыВерсии()
	
	Если ДатаВерсии = ТекущаяДатаВерсии Тогда
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(ДатаВерсии, 
		ТекущаяДатаВерсии, ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Или АвторасчетСрокаДействия Тогда
		ДатаВерсииПриИзмененииНаСервере(ТребуетсяВызовСервера);
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаВерсии = ДатаВерсии;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДатаВерсии);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#Область КалькуляцияРасходов

&НаКлиенте
Процедура ПерезаполнитьКалькуляциюРасходов(РезультатЗакрытия, ПараметрыЗакрытияФормы) Экспорт
	
	Если РезультатЗакрытия = "ОК" Тогда
		
		ВыбраннаяСтрока = ПараметрыЗакрытияФормы.ВыбраннаяСтрока;
		
		ПерезаполнитьКалькуляциюРасходовНаСервере(ПараметрыЗакрытияФормы.АдресВременногоХранилища,
			ПараметрыЗакрытияФормы.КлючКалькуляцииРасходов,
			ВыбраннаяСтрока.НомерСтроки);
		
		ПересчитатьСуммуТовары();
		ОбновитьИтоги(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКалькуляциюРасходовНаСервере(АдресВременногоХранилища, КлючКалькуляцииРасходов, НомерСтрокиТовары)
	
	КалькуляцииРасходов.ПерезаполнитьКалькуляциюРасходов(ЭтотОбъект,
		АдресВременногоХранилища,
		КлючКалькуляцииРасходов,
		"Товары",
		НомерСтрокиТовары);
	
КонецПроцедуры

&НаСервере
Функция АдресВременногоХранилищаСРасчетамиКалькуляции(КлючКалькуляцииРасходов)
	
	Возврат КалькуляцииРасходовВызовСервера.АдресВременногоХранилищаСРасчетамиКалькуляции(
		ЭтотОбъект, КлючКалькуляцииРасходов);
	
КонецФункции

&НаСервере
Процедура УдалитьСтарыеДанныеКалькуляцииРасходов(КлючКалькуляцииРасходов)
	
	КалькуляцииРасходов.УдалитьСтарыеДанныеКалькуляцииРасходов(ЭтотОбъект, КлючКалькуляцииРасходов);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьКалькуляциюРасходов(СтарыйКлючКалькуляцииРасходов, НовыйКлючКалькуляцииРасходов)
	
	КалькуляцииРасходов.СкопироватьКалькуляциюРасходов(ЭтотОбъект,
		СтарыйКлючКалькуляцииРасходов, НовыйКлючКалькуляцииРасходов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеКлючиКалькуляцииРасходов()
	
	КалькуляцииРасходов.УдалитьНесвязанныеКлючиКалькуляцииРасходов(ЭтотОбъект, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область ВерсииДокумента

&НаСервере
Процедура УстановитьВерсию(ОбновитьРеквизиты = Истина)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	
	Если ОбновитьРеквизиты Тогда
		РеквизитыВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
		Если РеквизитыВерсии.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВерсии[0]);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Товары.ТекущаяСтрока = Неопределено;
	
	ФиксированныйОтбор = Новый ФиксированнаяСтруктура("НомерВерсии", НомерВерсии);
	Элементы.Товары.ОтборСтрок = ФиксированныйОтбор;
	
	// Установим текущей первую строку версии.
	ТоварыВерсии = Объект.Товары.НайтиСтроки(Отбор);
	Если ТоварыВерсии.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ТоварыВерсии[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	УстановитьВидСкидки();

	Если НомерВерсии = ТекущийНомерВерсии Тогда
		СтраницаВерсии = Элементы.ГруппаВерсияТекущая;
	Иначе
		ИмяСтраницы = СтрШаблон("ГруппаВерсия%1", Формат(НомерВерсии, "ЧГ="));
		СтраницаВерсии = Элементы.Найти(ИмяСтраницы);
	КонецЕсли;
	
	ЕдинственнаяВерсия = ЭтоЕдинственнаяВерсия();
	Элементы.ГруппаВерсии.ОтображениеСтраниц = ?(ЕдинственнаяВерсия,
		ОтображениеСтраницФормы.Нет,
		ОтображениеСтраницФормы.ЗакладкиСверху);
	
	ИмяЭлемента = ИмяЭлементаВерсии("ГруппаДанныеВерсии", НомерВерсии, ТекущийНомерВерсии);
	ГруппаДанныеВерсии = Элементы[ИмяЭлемента];
	
	ИмяЭлемента = ИмяЭлементаВерсии("ГруппаПодвал", НомерВерсии, ТекущийНомерВерсии);
	ГруппаПодвал = Элементы[ИмяЭлемента];

	Элементы.Переместить(Элементы.Товары, ГруппаДанныеВерсии, ГруппаПодвал);
	
	ИмяЭлемента = ИмяЭлементаВерсии("ДатаВерсии", НомерВерсии, ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Видимость = Не ЕдинственнаяВерсия;
	
	ДоступностьТекущейВерсии = НомерВерсии = ТекущийНомерВерсии;
	
	СтраницаВерсии.ТолькоПросмотр = Не ДоступностьТекущейВерсии;
	
	ИмяЭлемента = ИмяЭлементаВерсии("УдалитьВерсию", НомерВерсии, ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Доступность = ДоступностьТекущейВерсии И Не ЕдинственнаяВерсия;
	Элементы[ИмяЭлемента].Видимость = ДоступностьТекущейВерсии;
	
	ИмяЭлемента = ИмяЭлементаВерсии("СделатьТекущей", НомерВерсии, ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Доступность = Не ДоступностьТекущейВерсии И Не ЕдинственнаяВерсия;
	Элементы[ИмяЭлемента].Видимость = Не ДоступностьТекущейВерсии;
	
	ИмяЭлемента = ИмяЭлементаВерсии("ТоварыЦеныИВалюта", НомерВерсии, ТекущийНомерВерсии);
	Элементы[ИмяЭлемента].Доступность = ДоступностьТекущейВерсии;
	
	Элементы.Товары.ПоложениеКоманднойПанели = ?(ДоступностьТекущейВерсии,
		ПоложениеКоманднойПанелиЭлементаФормы.Авто,
		ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	
	ТекущийНомерСтрокиТовары = ПоследнийНомерСтрокиТовары();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюВерсию()
	
	РеквизитыВерсии = Объект.РеквизитыВерсий.Выгрузить(, "НомерВерсии,ДатаВерсии,ТекущаяВерсия");
	РеквизитыВерсии.Сортировать("ТекущаяВерсия Убыв, НомерВерсии Убыв");
	
	Если РеквизитыВерсии.Количество() > 0 Тогда
		ЗначенияРеквизитовВерсии = РеквизитыВерсии[0];
	Иначе
		ЗначенияРеквизитовВерсии = Объект.РеквизитыВерсий.Добавить();
		ЗначенияРеквизитовВерсии.НомерВерсии = 1;
		ЗначенияРеквизитовВерсии.ДатаВерсии = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитовВерсии);
	
	ТекущийНомерВерсии = ЗначенияРеквизитовВерсии.НомерВерсии;
	ТекущаяДатаВерсии = ЗначенияРеквизитовВерсии.ДатаВерсии;
	
	Если Не ЗначенияРеквизитовВерсии.ТекущаяВерсия Тогда
		ЗначенияРеквизитовВерсии.ТекущаяВерсия = Истина;
	КонецЕсли;
	
	УстановитьВерсию();
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ТекущаяДатаВерсии, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущуюВерсию()
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", ТекущийНомерВерсии);
	
	ВсеРеквизиты = Объект.РеквизитыВерсий;
	
	РеквизитыВерсии = ВсеРеквизиты.НайтиСтроки(Отбор);
	Если РеквизитыВерсии.Количество() > 0 Тогда
		ЗначенияРеквизитовВерсии = РеквизитыВерсии[0];
	Иначе
		ЗначенияРеквизитовВерсии = ВсеРеквизиты.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовВерсии, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитовВерсии);
	ЗначенияРеквизитовВерсии.ТекущаяВерсия = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьВерсии()
	
	ВсеВерсии = Объект.РеквизитыВерсий.Выгрузить(, "НомерВерсии,ТекущаяВерсия");
	ВсеВерсии.Сортировать("ТекущаяВерсия Убыв, НомерВерсии Убыв");
	
	ВсегоВерсий = ВсеВерсии.Количество() - 1;
	
	Для Индекс = 0 По ВсегоВерсий Цикл
		
		Версия = ВсеВерсии[Индекс].НомерВерсии;
		
		Если Индекс = 0 Тогда
			ЭлементВерсии = Элементы.ГруппаВерсияТекущая;
			ЭлементВерсии.Заголовок = ЗаголовокТекущейВерсии(Версия);
		Иначе
			ДобавитьЭлементыВерсии(Версия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВерсиюНаСервере()
	
	Если НомерВерсии = ТекущийНомерВерсии Тогда
		СохранитьТекущуюВерсию();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	
	РеквизитыВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
	ТоварыВерсии = Объект.Товары.НайтиСтроки(Отбор);
	
	НомерВерсии = НомерПоследнейВерсии() + 1;
	ДатаВерсии = ОбщегоНазначения.ТекущаяДатаПользователя();
	Комментарий = "";
	
	ДатаВерсииОбработатьИзменение();
	
	УстановитьСрокДействия();
	
	Если НомерВерсии = ТекущийНомерВерсии Тогда
		РеквизитыТекущейВерсии = РеквизитыВерсии;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("НомерВерсии", ТекущийНомерВерсии);
		РеквизитыТекущейВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
	КонецЕсли;
	Если РеквизитыТекущейВерсии.Количество() > 0 Тогда
		РеквизитыТекущейВерсии[0].ТекущаяВерсия = Ложь;
	КонецЕсли;
		
	НовыеРеквизиты = Объект.РеквизитыВерсий.Добавить();
	Если РеквизитыВерсии.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НовыеРеквизиты, РеквизитыВерсии[0]);
	КонецЕсли;
	НовыеРеквизиты.НомерВерсии = НомерВерсии;
	НовыеРеквизиты.ТекущаяВерсия = Истина;
	
	Для Каждого СтрокаТаблицы Из ТоварыВерсии Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.НомерВерсии = НомерВерсии;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КлючКалькуляцииРасходов) Тогда
			НоваяСтрока.КлючКалькуляцииРасходов = Новый УникальныйИдентификатор;
			СкопироватьКалькуляциюРасходов(СтрокаТаблицы.КлючКалькуляцииРасходов, НоваяСтрока.КлючКалькуляцииРасходов);
		КонецЕсли;
	КонецЦикла;
	
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(ТоварыВерсии(), ДатаВерсии, ТекущаяДатаВерсии);
	
	Элементы.ГруппаВерсияТекущая.Заголовок = ЗаголовокТекущейВерсии(НомерВерсии);
	
	// Нужно создать для текущего номера версии свою группу и переместить ее в место по порядку
	
	ЭлементВпереди = Неопределено;
	КоличествоЭлементов = Элементы.ГруппаВерсии.ПодчиненныеЭлементы.Количество();
	Если КоличествоЭлементов > 1 Тогда
		ВерсияВпереди = ВерсияПредшествующаяТекущейВерсииПоПорядку();
		Если ВерсияВпереди > 0 Тогда
			ИмяЭлементаВпереди = СтрШаблон("ГруппаВерсия%1", Формат(ВерсияВпереди, "ЧГ="));
			ЭлементВпереди = Элементы.Найти(ИмяЭлементаВпереди);
			Если ЭлементВпереди = Неопределено Тогда
				ЭлементВпереди = Элементы.ГруппаВерсии.ПодчиненныеЭлементы[1];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЭлементыВерсии(ТекущийНомерВерсии, ЭлементВпереди);
	
	Элементы.ГруппаВерсии.ТекущаяСтраница = Элементы.ГруппаВерсияТекущая;
	
	ТекущийНомерВерсии = НомерВерсии;
	ТекущаяДатаВерсии = ДатаВерсии;
	
	УстановитьВерсию(Ложь);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ТекущаяДатаВерсии, Ложь);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВерсиюНаСервере()
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	
	РеквизитыВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из РеквизитыВерсии Цикл
		Объект.РеквизитыВерсий.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	КлючиКалькуляцииРасходовКУдалению = Новый Массив;
	
	ТоварыВерсии = Объект.Товары.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из ТоварыВерсии Цикл
		КлючиКалькуляцииРасходовКУдалению.Добавить(СтрокаТаблицы.КлючКалькуляцииРасходов);
		Объект.Товары.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого КлючКалькуляцииРасходов Из КлючиКалькуляцииРасходовКУдалению Цикл
		УдалитьСтарыеДанныеКалькуляцииРасходов(КлючКалькуляцииРасходов);
	КонецЦикла;
	
	Если НомерВерсии = ТекущийНомерВерсии Тогда
		УстановитьТекущуюВерсию();
		// Удаляем предыдущую страницу после того, как установили текущую версию.
		КоличествоЭлементов = Элементы.ГруппаВерсии.ПодчиненныеЭлементы.Количество();
		Если КоличествоЭлементов > 1 Тогда
			ЭлементВпереди = Элементы.ГруппаВерсии.ПодчиненныеЭлементы[1];
			Элементы.Удалить(ЭлементВпереди);
		КонецЕсли;
		Элементы.ГруппаВерсияТекущая.Заголовок = ЗаголовокТекущейВерсии(ТекущийНомерВерсии);
	Иначе
		
		ИмяЭлемента = СтрШаблон("ГруппаВерсия%1", Формат(НомерВерсии, "ЧГ="));
		
		НомерВерсии = ТекущийНомерВерсии;
		УстановитьВерсию();
		
		// Удаляем страницу после того, как установили текущую версию.
		ЭлементВерсии = Элементы.Найти(ИмяЭлемента);
		Если ЭлементВерсии <> Неопределено Тогда
			Элементы.Удалить(ЭлементВерсии);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СделатьТекущейНаСервере()
	
	// Нужно создать для текущего номера версии свою группу и переместить ее в место по порядку
	ЭлементВпереди = Неопределено;
	КоличествоЭлементов = Элементы.ГруппаВерсии.ПодчиненныеЭлементы.Количество();
	Если КоличествоЭлементов > 1 Тогда
		ВерсияВпереди = ВерсияПредшествующаяТекущейВерсииПоПорядку();
		Если ВерсияВпереди > 0 Тогда
			ИмяЭлементаВпереди = СтрШаблон("ГруппаВерсия%1", Формат(ВерсияВпереди, "ЧГ="));
			ЭлементВпереди = Элементы.Найти(ИмяЭлементаВпереди);
			Если ЭлементВпереди = Неопределено Тогда
				ЭлементВпереди = Элементы.ГруппаВерсии.ПодчиненныеЭлементы[1];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЭлементыВерсии(ТекущийНомерВерсии, ЭлементВпереди);
	
	Элементы.ГруппаВерсии.ТекущаяСтраница = Элементы.ГруппаВерсияТекущая;
	
	ИмяЭлемента = СтрШаблон("ГруппаВерсия%1", Формат(НомерВерсии, "ЧГ="));
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", ТекущийНомерВерсии);
	
	РеквизитыТекущейВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
	Если РеквизитыТекущейВерсии.Количество() > 0 Тогда
		РеквизитыТекущейВерсии[0].ТекущаяВерсия = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	
	РеквизитыВерсии = Объект.РеквизитыВерсий.НайтиСтроки(Отбор);
	Если РеквизитыВерсии.Количество() > 0 Тогда
		РеквизитыВерсии[0].ТекущаяВерсия = Истина;
	КонецЕсли;
	
	ТекущийНомерВерсии = НомерВерсии;
	ТекущаяДатаВерсии = ДатаВерсии;
	
	УстановитьВерсию(Ложь);
	
	// Удаляем страницу после того, как установили текущую версию.
	ЭлементВерсии = Элементы.Найти(ИмяЭлемента);
	Если ЭлементВерсии <> Неопределено Тогда
		Элементы.Удалить(ЭлементВерсии);
	КонецЕсли;
	Элементы.ГруппаВерсияТекущая.Заголовок = ЗаголовокТекущейВерсии(ТекущийНомерВерсии);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, ТекущаяДатаВерсии, Ложь);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЭтоЕдинственнаяВерсия()
	
	Возврат Объект.РеквизитыВерсий.Количество() = 1;
	
КонецФункции

&НаСервере
Функция ТоварыВерсии(ВТаблицуЗначений = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	Если ВТаблицуЗначений Тогда
		ТоварыВерсии = Объект.Товары.Выгрузить(Отбор);
	Иначе
		ТоварыВерсии = Объект.Товары.НайтиСтроки(Отбор);
	КонецЕсли;
	Возврат ТоварыВерсии;
	
КонецФункции

&НаСервере
Функция ИдентификаторыТоваровВерсии()
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	ТоварыВерсии = Объект.Товары.НайтиСтроки(Отбор);
	
	ИдентификаторыВерсии = Новый Массив;
	
	Для Каждого Строка Из ТоварыВерсии Цикл
		ИдентификаторыВерсии.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат ИдентификаторыВерсии;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИтогиВерсии(Знач ТабличнаяЧасть, НомерВерсии, ИменаКолонок)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерВерсии", НомерВерсии);
	ТоварыВерсии = ТабличнаяЧасть.Выгрузить(Отбор);
	
	Результат = Новый Структура;
	
	КолонкиИтогов = СтрРазделить(ИменаКолонок, ",");
	Для Каждого Колонка Из КолонкиИтогов Цикл
		Результат.Вставить(Колонка, ТоварыВерсии.Итог(Колонка));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНомерСтрокиВерсии()

	ТоварыВерсии = ТоварыВерсии();
	
	НомерСтрокиВерсии = 1;
	
	Для каждого СтрокаТаблицы Из ТоварыВерсии Цикл
		
		СтрокаТаблицы.НомерСтрокиВерсии = НомерСтрокиВерсии;
		НомерСтрокиВерсии = НомерСтрокиВерсии + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НомерПоследнейВерсии()
	
	ВсеВерсии = Объект.РеквизитыВерсий.Выгрузить(, "НомерВерсии");
	ВсеВерсии.Сортировать("НомерВерсии Убыв");
	
	Если ВсеВерсии.Количество() > 0 Тогда
		Возврат ВсеВерсии[0].НомерВерсии;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВерсияПредшествующаяТекущейВерсииПоПорядку()
	
	ВсеВерсии = Объект.РеквизитыВерсий.Выгрузить(Новый Структура("ТекущаяВерсия", Ложь), "НомерВерсии");
	
	ВерсииПоПорядку = Новый СписокЗначений;
	ВерсииПоПорядку.ЗагрузитьЗначения(ВсеВерсии.ВыгрузитьКолонку("НомерВерсии"));
	
	ВерсииПоПорядку.Добавить(ТекущийНомерВерсии);
	
	ВерсииПоПорядку.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	ТекущаяВерсия = ВерсииПоПорядку.НайтиПоЗначению(ТекущийНомерВерсии);
	ИндексЭлемента = ВерсииПоПорядку.Индекс(ТекущаяВерсия);
	
	ИндексПредшествующегоЭлемента = ИндексЭлемента - 1;
	Если ИндексПредшествующегоЭлемента = -1 Тогда
		Возврат 0;
	Иначе
		Возврат ВерсииПоПорядку[ИндексПредшествующегоЭлемента].Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокТекущейВерсии(НомерТекущейВерсии)

	Возврат СтрШаблон(НСтр("ru = 'Версия %1 (текущая)'"), Формат(НомерТекущейВерсии, "ЧГ="));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокВерсии(НомерВерсии)

	Возврат СтрШаблон(НСтр("ru = 'Версия %1'"), Формат(НомерВерсии, "ЧГ="));
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементыВерсии(Версия, Местоположение = Неопределено)
	
	ИмяЭлемента = СтрШаблон("ГруппаВерсия%1", Формат(Версия, "ЧГ="));
	Если Местоположение <> Неопределено Тогда
		ЭлементВерсии = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаВерсии, Местоположение);
	Иначе
		ЭлементВерсии = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаВерсии);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭлементВерсии, Элементы.ГруппаВерсияТекущая, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
	ЭлементВерсии.Заголовок = ЗаголовокВерсии(Версия);
	
	КопироватьЭлементВерсииСПодчиненными(Элементы.ГруппаДанныеВерсии, ЭлементВерсии, Формат(Версия, "ЧГ=")); // Обход ошибки платформы 60008488
	
КонецПроцедуры

&НаСервере
Процедура ПриСменеСтраницыВерсииНаСервере(ИмяТекущейСтраницы)
	
	Если НомерВерсии = ТекущийНомерВерсии И Модифицированность Тогда
		СохранитьТекущуюВерсию();
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = Элементы.ГруппаВерсияТекущая.Имя Тогда
		НомерВерсии = ТекущийНомерВерсии;
	Иначе
		ИмяВерсии = СтрЗаменить(ИмяТекущейСтраницы, "ГруппаВерсия", "");
		НомерВерсии = Число(ИмяВерсии);
	КонецЕсли;
	
	УстановитьВерсию();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьНомерСтрокиВерсии();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьЭлементВерсииСПодчиненными(Источник, Владелец, Номер)
	
	ТипИсточника = ТипЗнч(Источник);
	
	ИмяПриемника = Источник.Имя + Номер;
	Приемник = Элементы.Добавить(ИмяПриемника, ТипИсточника, Владелец);
	
	Если ТипИсточника = Тип("ГруппаФормы") Тогда
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
		Для Каждого ПодчиненныйЭлемент Из Источник.ПодчиненныеЭлементы Цикл
			КопироватьЭлементВерсииСПодчиненными(ПодчиненныйЭлемент, Приемник, Номер);
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("ПолеФормы")
		И Источник.Вид = ВидПоляФормы.ПолеВвода Тогда
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ВыделенныйТекст");
		Если Источник.РежимВыбораИзСписка Тогда
			Для Каждого ЗначениеВыбора Из Источник.СписокВыбора Цикл
				Приемник.СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("ДекорацияФормы") И Источник.Гиперссылка Тогда
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
		ДействиеНажатие = Источник.ПолучитьДействие("Нажатие");
		Приемник.УстановитьДействие("Нажатие", ДействиеНажатие);
	ИначеЕсли ТипИсточника <> Тип("ТаблицаФормы") Тогда
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаВерсии(ИмяЭлемента, НомерВерсии, ТекущийНомерВерсии)
	
	Если НомерВерсии = ТекущийНомерВерсии Тогда
		Возврат ИмяЭлемента;
	Иначе
		Возврат СтрШаблон("%1%2", ИмяЭлемента, Формат(НомерВерсии, "ЧГ="));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПоследнийНомерСтрокиТовары()
	
	ТоварыВерсии = ТоварыВерсии();
	Возврат ТоварыВерсии.Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСпособВводаТемы(Форма)
	
	Объект = Форма.Объект;
	
	Элементы = Форма.Элементы;
	
	СписокВыбора = Элементы.Тема.СписокВыбора;
	СписокВыбора.Очистить();
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Организация", Объект.Организация);
	ДанныеОбъекта.Вставить("Ответственный", Объект.Ответственный);
	ДанныеОбъекта.Вставить("Тема", Объект.Тема);
	ЗаполнитьСписокВыбораТемы(СписокВыбора, ДанныеОбъекта);
	
	Элементы.Тема.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораТемы(СписокВыбора, ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Тема) Тогда
		СписокВыбора.Добавить(ДанныеОбъекта.Тема);
	КонецЕсли;
	
	СписокТем = Документы.КоммерческоеПредложение.ПредыдущиеТемы(ДанныеОбъекта.Организация,
		ДанныеОбъекта.Ответственный, ДанныеОбъекта.Тема);
	
	Для Каждого Тема Из СписокТем Цикл
		СписокВыбора.Добавить(Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидСкидкиПоДокументу()
	
	Возврат "ПоДокументу";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидСкидкиНаОтдельныеПозиции()
	
	Возврат "НаОтдельныеПозиции";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидСкидкиНеПредоставлена()
	
	Возврат "НеПредоставлена";
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОтрицательноеЗначениеСтрокиТовары(ТекущаяСтрока, ИмяРеквизита)
	
	Если Не ТекущаяСтрока.ЭтоУслуга И ТекущаяСтрока[ИмяРеквизита] < 0 Тогда
		ТекущаяСтрока[ИмяРеквизита] = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
