#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
			"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И (ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")) Тогда
		Документы.ПередачаОС.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПередачаОС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	УчетОС.ПроверитьСоответствиеОСОрганизации(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьСоответствиеМестонахожденияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьЗаполнениеСчетаУчетаОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьВозможностьИзмененияСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансов, Отказ);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблица,
		ТаблицаВзаиморасчетов,
		УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары(),
		ПараметрыПроведения.Реализация,
		Отказ);
	Документы.ПередачаОС.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	ПараметрыВыбытия = УчетОС.ПодготовитьТаблицыСведенийПоВыбытиюОС(
		ПараметрыПроведения.ВыбытиеОСТаблица,
		ПараметрыПроведения.ВыбытиеОС,
		Отказ);

	ПараметрыПроведения.ВосстановлениеАмортизационнойПремии.Колонки.Добавить(
		"СуммаКапитальныхВложенийВключаемыхВРасходы");
	ПараметрыПроведения.ВосстановлениеАмортизационнойПремии.ЗаполнитьЗначения(
		ПараметрыВыбытия.СуммаКапитальныхВложенийВключаемыхВРасходы,
		"СуммаКапитальныхВложенийВключаемыхВРасходы");

	ТаблицаСтоимости = УчетОС.ПодготовитьТаблицуОстаточнойСтоимости(
		ПараметрыПроведения.СписаниеОстаточнойСтоимостиТаблица,
		ПараметрыПроведения.СписаниеОстаточнойСтоимости,
		ПараметрыВыбытия, Отказ);
		
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	ТаблицыСписанияОСИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияОСиНМА(
		ПараметрыПроведения.СписаниеОСиНМАИПТаблица,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
		
	ДанныеУчетаГрупповыхОС = УчетГрупповыхОС.ДанныеУчетаГрупповыхОС(
		ПараметрыПроведения.ГрупповыеОС,
		ПараметрыПроведения.ПередачаГрупповыхОС,
		Отказ);
	
	ДанныеУчетаЗатратНаРемонт = Неопределено;
	УчетРемонтовОС.РассчитатьВыбытие(
		ДанныеУчетаЗатратНаРемонт, 
		ПараметрыПроведения.ЗатратыНаРемонтОС, 
		ПараметрыПроведения.ЗатратыНаРемонтОСТаблица, 
		Отказ); 
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
		
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансов,
		Движения, Отказ);
		
	ТаблицаСобственныеТоварыИУслуги = ?(ТаблицыРеализация.СобственныеТоварыУслуги = Неопределено, Неопределено, ТаблицыРеализация.СобственныеТоварыУслуги.Скопировать());
	Если ТаблицаСобственныеТоварыИУслуги <> Неопределено Тогда
		ТаблицаСобственныеТоварыИУслуги.Индексы.Добавить("Номенклатура");
	КонецЕсли;
	Документы.ПередачаОС.ПодготовитьТаблицуСобственныеТоварыИУслугиДляУчетаДоходов(ПараметрыПроведения.Реализация, ТаблицаСобственныеТоварыИУслуги);
	
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыИУслуги,
		ТаблицыРеализация.ТоварыУслугиКомитентов,
		ТаблицыРеализация.РеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реализация,
		Движения, Отказ);
		
	// Движения регистра "Рублевые суммы документов в валюте"
	Если ТаблицыРеализация.СобственныеТоварыУслуги = Неопределено
		ИЛИ ТаблицыРеализация.СобственныеТоварыУслуги.Количество() = 0 Тогда
		УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументовВВалюте, 
			ПараметрыПроведения.Реализация, Движения, Отказ);
	Иначе
		УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.СобственныеТоварыУслуги, 
			ПараметрыПроведения.Реализация, Движения, Отказ);
	КонецЕсли;

	УчетОС.ОпределитьСчетаУчетаОС(ТаблицыРеализация.СобственныеТоварыУслуги, Дата, Организация, "Номенклатура");
	УчетОС.ОпределитьСчетаУчетаОС(ПараметрыПроведения.НДСТоварыОтгрузка, Дата, Организация, "Номенклатура");
	
	УчетОС.СформироватьДвиженияВосстановлениеАмортизационнойПремии(
		ПараметрыПроведения.ОсновныеСредства,
		ТаблицаСтоимости,
		ПараметрыПроведения.ВосстановлениеАмортизационнойПремии,
		ПараметрыВыбытия.НачислениеАмортизации.СправкаРасчет,
		Движения, Отказ);
	
	УчетОС.СформироватьДвиженияВыбытиеОС(
		ПараметрыПроведения.ВыбытиеОС,
		ПараметрыВыбытия,
		Движения, Отказ);
	
	УчетОС.СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыПроведения.СобытияОСТаблица,
		ПараметрыПроведения.СобытияОС,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС,
		Движения, Отказ);
	
	УчетОС.СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(
		ТаблицаСтоимости,
		ПараметрыПроведения.СписаниеОстаточнойСтоимости,
		Движения, Отказ);
	
	УчетГрупповыхОС.СформироватьДвиженияРасходГрупповыхОС(
		ПараметрыПроведения.ГрупповыеОС,
		Неопределено,
		ПараметрыПроведения.ПередачаГрупповыхОС, 
		ДанныеУчетаГрупповыхОС, 
		Движения, Отказ);
		
	УчетРемонтовОС.ОтразитьВыбытиеВУчете(
		ДанныеУчетаЗатратНаРемонт, 
		ПараметрыПроведения.ЗатратыНаРемонтОС, 
		Движения, 
		Отказ);
	
	УчетНДС.СформироватьДвиженияПередачаОС(
		ПараметрыПроведения.НДСТоварыОтгрузка,
		ТаблицыРеализация.СобственныеТоварыУслуги,
		ПараметрыПроведения.РеализацияНДС,
		Движения,
		Отказ);
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	УчетОС.СформироватьДвиженияУбытокОтРеализацииОС(ПараметрыПроведения.ВыбытиеОС, ПараметрыВыбытия,
		ТаблицаСобственныеТоварыИУслуги, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеОСиНМА(
		ТаблицыСписанияОСИП,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПередачаОСиНМА(
		ТаблицыСписанияОСИП,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		ТаблицаВзаиморасчетов, 
		ПараметрыПроведения.ЗачетАвансов, Движения, Отказ);
	
	ПрослеживаемыеОперации = ПараметрыПроведения.ПрослеживаемыеОперации;
	
	ПрослеживаемостьБП.РассчитатьТаблицуПрослеживаемыеОперацииВРублях(
		ПрослеживаемыеОперации,
		ТаблицыРеализация.СобственныеТоварыУслуги,
		ПараметрыПроведения.РеализацияНДС,
		Истина,
		Ложь);

	ПрослеживаемостьБП.СформироватьДвиженияСписанияОС(
		ПараметрыПроведения.ПрослеживаемыеТовары,
		ПрослеживаемыеОперации,
		ПараметрыПроведения.РеализацияНДС,
		Движения);
		
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		УстановитьСтатусСчетаНаОплату(ПараметрыПроведения.ВыбытиеОС);
	КонецЕсли;
	
	РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(ЭтотОбъект, Отказ, Ложь);
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
		
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	// В формах документа счет расчетов и счет авансов редактируются в специальной форме.
	// В случае, если они не заполнены, покажем сообщение возле соответствующей гиперссылки.
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	КонтролироватьЗаполнениеКодаТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
			НСтр("ru = 'Счет учета расчетов с контрагентом'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
				НСтр("ru = 'Счет учета расчетов по авансам'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
				"ПорядокУчетаРасчетов", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНДСПоРеализации");
	МассивНепроверяемыхРеквизитов.Добавить("ОС.КодТНВЭД");
	
	// Количество и единица измерения должны быть заполнены для групповых объектов
	МассивНепроверяемыхРеквизитов.Добавить("ОС.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ОС.ЕдиницаИзмерения");
	ПроверитьЗаполненоЕдиницаИзмеренияКоличествоГрупповыхОС(Отказ);
	
	Для каждого СтрокаТЧ Из ОС Цикл

		Префикс = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Основные средства'");
		
		Если СтрокаТЧ.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
			И СтрокаТЧ.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда

			Если СтрокаТЧ.СуммаНДС = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
					НСтр("ru = 'Сумма НДС'"), СтрокаТЧ.НомерСтроки, ИмяСписка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				Префикс + "СуммаНДС", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ.СуммаНДС <> 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
			НСтр("ru = 'Счет учета НДС по реализации'"), СтрокаТЧ.НомерСтроки, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			Префикс+"СчетУчетаНДСПоРеализации", "Объект", Отказ);
			
		КонецЕсли;
		
		// Проверка кода ТН ВЭД.
		Если КонтролироватьЗаполнениеКодаТНВЭД 
			И СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.КодТНВЭД) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка);
			Поле = Префикс + "КодТНВЭД";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;

	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу
		ИЛИ ПравоСобственностиПереходитПослеГосРегистрации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	ЗаполнятьКодТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	Если НЕ ЗаполнятьКодТНВЭД Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.ОС Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД)Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);

	Для Каждого Строка Из ОС Цикл
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		Если Строка.ПрослеживаемыйТовар = Ложь И ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокиСРНПТ = СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПрослеживаемыеОС = ОС.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемоеОС = ПрослеживаемыеОС.Количество() <> 0;
	
	Если ЕстьПрослеживаемоеОС Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьБП.СверитьИПодобратьОстаткиРНПТПоОС(ЭтотОбъект, Отказ, "ОС");
		КонецЕсли;
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
	
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);		
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерЧекаККМ = 0;
	ЗачетАвансов.Очистить();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
		
	Если ОС.Количество() > 0 Тогда
		МассивОС = Новый Массив(ОС.Количество());
		ОС.ЗагрузитьКолонку(МассивОС, "ИдентификаторСтроки");
	КонецЕсли;
		
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(ОС, ВедетсяУчетПрослеживаемыхТоваров, Дата, Истина);
	
	СведенияПрослеживаемости.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусСчетаНаОплату(ВыбытиеОС)
	
	Параметры = ВыбытиеОС[0];
	
	Если ЗначениеЗаполнено(Параметры.ДокументОснование) 
		И ТипЗнч(Параметры.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ДокументОснование), Параметры.Организация);
		
		Если ТекущиеСтатусы[Параметры.ДокументОснование].ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.Отгружен Тогда
			Возврат
		КонецЕсли;
		
		ТаблицаСтатусов = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		ТаблицаСтатусов.Колонки.Добавить("ОтправитьОповещениеОбИзмененииСтатуса", Новый ОписаниеТипов("Булево"));
		ТаблицаСтатусов.Колонки.Удалить("Организация");
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СУММА(ЕСТЬNULL(ПередачаОС.Количество, 0)) КАК КоличествоРеализация,
		|	СУММА(СчетНаОплатуПокупателюТовары.Количество) КАК КоличествоСчёт,
		|	СчетНаОплатуПокупателюТовары.Номенклатура КАК ОсновноеСредство
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОС
		|		ПО СчетНаОплатуПокупателюТовары.Номенклатура = ПередачаОС.ОсновноеСредство
		|			И СчетНаОплатуПокупателюТовары.Ссылка = ПередачаОС.Ссылка.ДокументОснование
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетНаОплатуПокупателюТовары.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ПередачаОС.Количество, 0)) < СУММА(СчетНаОплатуПокупателюТовары.Количество)";
		
		Запрос.УстановитьПараметр("ДокументОснование", Параметры.ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		СтрокаСтатуса = ТаблицаСтатусов.Добавить();
		СтрокаСтатуса.Документ = Параметры.ДокументОснование;
		СтрокаСтатуса.Статус   = ТекущиеСтатусы[Параметры.ДокументОснование].Статус;
		СтрокаСтатуса.ДополнительныйСтатус =
			?(РезультатЗапроса.Пустой(), Перечисления.СтатусыОтгрузки.Отгружен, Перечисления.СтатусыОтгрузки.ОтгруженЧастично);
		
		Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
			СостояниеИнтеграции = 
			РегистрыСведений.ДокументыИнтеграцииCRM.СостояниеИнтеграцииДокумента(Параметры.ДокументОснование);
			СтрокаСтатуса.ОтправитьОповещениеОбИзмененииСтатуса = (СостояниеИнтеграции <> Неопределено);
		КонецЕсли;
		
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусов, ВыбытиеОС);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполненоЕдиницаИзмеренияКоличествоГрупповыхОС(Отказ)
	
	МассивОС = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОС Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство)
			Или МассивОС.Найти(СтрокаТаблицы.ОсновноеСредство) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОС.Добавить(СтрокаТаблицы.ОсновноеСредство);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивОС) Тогда
		Возврат;
	КонецЕсли;
		
	ИмяСписка = НСтр("ru = 'Основные средства'");
	ЕдиницыУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОС, "ЕдиницаУчета");
	
	// Количество и единица измерения количества - взаимоувязанные в правилах реквизиты.
	// Не может быть количества без единицы измерения. Должны быть заполнены оба реквизита.
	Для Каждого СтрокаТаблицы Из ОС Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕдиницаУчета = ЕдиницыУчета[СтрокаТаблицы.ОсновноеСредство];
		
		Если ЕдиницаУчета <> Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , НСтр("ru = 'Количество'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
				
			Поле = "ОС[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , НСтр("ru = 'Единица измерения'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
				
			Поле = "ОС[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ЕдиницаИзмерения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
	И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		Если Основание.ЭтоГруппа Тогда
			
			ТекстСообщения = НСтр("ru = 'Ввод Передачи ОС на основании группы ОС невозможен!
			|Выберите ОС. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз'");
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата,
		|		ОсновноеСредство = &ОсновноеСредство
		|	) КАК ПервоначальныеСведенияОС
		|";
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ОсновноеСредство", Основание);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Организация = Выборка.Организация;
		КонецЕсли;
		
		ЗаполнитьСведенияОПрослеживаемости(ВедетсяУчетПрослеживаемыхТоваров, СтрокаТабличнойЧасти);
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДоговорКонтрагента, ДоговорКонтрагента.ВидДоговора");
		ДокументОснование = Основание;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ДоговорКонтрагента) 
			И РеквизитыДоговора.ДоговорКонтрагентаВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		ЕдиницыУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Основание.Товары.ВыгрузитьКолонку("Номенклатура"), "ЕдиницаУчета");
		
		Для Каждого Строка Из Основание.Товары Цикл
			
			НоваяСтрока = ОС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ОсновноеСредство = Строка.Номенклатура;
			
			ЗаполнитьСведенияОПрослеживаемости(ВедетсяУчетПрослеживаемыхТоваров, НоваяСтрока,
				Истина, ЕдиницыУчета.Получить(НоваяСтрока.ОсновноеСредство) = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСведенияОПрослеживаемости(ВедетсяУчетПрослеживаемыхТоваров, СтрокаТабличнойЧасти, СчетОснование = Ложь, ЭтоГрупповойОбъект = Ложь)
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		
		ДатаСведений = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		ПрослеживаемыйТовар = Справочники.ОсновныеСредства.ПризнакПрослеживаемостиНаДату(СтрокаТабличнойЧасти.ОсновноеСредство, ДатаСведений);
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ПрослеживаемыйТовар;
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			
			Если ЭтоГрупповойОбъект И СчетОснование Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("Организация",         Организация);
			ПараметрыЗапроса.Вставить("Дата",                НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()));
			ПараметрыЗапроса.Вставить("ОС",                  СтрокаТабличнойЧасти.ОсновноеСредство);
			ПараметрыЗапроса.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки);
			
			ТаблицаСВеденияПрослеживаемости = ПрослеживаемостьБП.ДанныеРНПТПоОС(ПараметрыЗапроса);
			
			Для Каждого Строка Из ТаблицаСведенияПрослеживаемости Цикл
				НоваяСтрока = СведенияПрослеживаемости.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли