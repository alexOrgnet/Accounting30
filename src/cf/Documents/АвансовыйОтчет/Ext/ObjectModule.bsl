
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	// Суточные имеют смысл только в авансовом отчете по командировке	
	Если ВидОперации <> Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		Суточные.Очистить();
	КонецЕсли; 	
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ВозвратнаяТара, ЭтотОбъект);
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ОплатаПоставщикам, ЭтотОбъект);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ ОплатаПоставщикам.Итог("Сумма") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее")
		+ Суточные.Итог("Сумма");
					
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьНередактируемыеРеквизитыДляКомандировки();
	
	СформироватьСчетаФактуры(Отказ);
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ ЭтоНовый()
		И НЕ РучнаяКорректировка Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц();

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	СуммаВключаетНДС = Истина;

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Ложь);

	// Суточные
	Если ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		Документы.АвансовыйОтчет.УстановитьРасчетСуточныхПоУмолчанию(ЭтотОбъект);
	КонецЕсли;	
	
	// Выданные авансы
	ВыданныеАвансы.Очистить();	
	
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(Дата)
		И ЗначениеЗаполнено(ФизЛицо)
		И ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		НайденныеДокументыОплаты = УчетКомандировок.ДокументыВыплатыПодотчетномуЛицу(
			Организация,
			Дата,
			ФизЛицо,
			ВалютаДокумента,
			Ссылка,
			1,
			Истина);
			
		Для Каждого ДокументАванса Из НайденныеДокументыОплаты Цикл
			НовыйАванс = ВыданныеАвансы.Добавить();
			НовыйАванс.ДокументАванса = ДокументАванса.Ссылка;
		КонецЦикла;		
			
	КонецЕсли;	
	
	// Билеты
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(ДатаНачалаКомандировки)
		И ЗначениеЗаполнено(ДатаОкончанияКомандировки)
		И ЗначениеЗаполнено(ФизЛицо) Тогда
					
		Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
			Организация,
			ДатаНачалаКомандировки,
			ДатаОкончанияКомандировки,
			,
			ФизЛицо,
			Ссылка,
			Истина));
		
		Для Каждого СтрокаБилета Из Билеты Цикл
			УчетНДСКлиентСервер.УстановитьНастройкиУчетаНДСВСтрокеБилетаПоУмолчанию(СтрокаБилета);
		КонецЦикла;				
			
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Билеты, "Билеты", ЭтотОбъект, Документы.АвансовыйОтчет);
				
	КонецЕсли;	
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.АвансовыйОтчет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(
		ПараметрыПроведения.СтруктураТаблицДокумента.ПоступлениеТоваровТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеПрочее(
		ПараметрыПроведения.СтруктураТаблицДокумента.ПоступлениеПрочееТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.ПоступлениеТарыТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеОплата(
		ПараметрыПроведения.СтруктураТаблицДокумента.ПогашениеЗадолженностиТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.СтруктураТаблицДокументаНДС.ТоварыНДС);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеПрочее(ПараметрыПроведения.СтруктураТаблицДокументаНДС.УслугиНДС);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.НомераГТД);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеБилеты(ПараметрыПроведения.Билеты);
	
	// Таблица валютных авансов
	ВалютныеАвансыПодотчетногоЛица = УчетВзаиморасчетов.ПодготовитьТаблицуВалютныеАвансыПодотчетногоЛица(
		ПараметрыПроведения.ВалютныеАвансыПодотчетногоЛицаТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов,
		ПараметрыПроведения.ВалютныеАвансыПодотчетногоЛицаРеквизиты,
		Отказ);
	
	// Таблицы документа с корректировкой сумм по курсу авансов
	СтруктураТаблицДокумента = УчетДоходовРасходов.ПодготовитьТаблицыАвансовогоОтчетаПоКурсуАвансов(
		ПараметрыПроведения.СтруктураТаблицДокумента,
		ВалютныеАвансыПодотчетногоЛица,
		ПараметрыПроведения.ВалютныеАвансыПодотчетногоЛицаРеквизиты);
	
	СтруктураТаблицДокументаНДС = УчетДоходовРасходов.ПодготовитьТаблицыАвансовогоОтчетаПоКурсуАвансов(
		ПараметрыПроведения.СтруктураТаблицДокументаНДС,
		ВалютныеАвансыПодотчетногоЛица,
		ПараметрыПроведения.ВалютныеАвансыПодотчетногоЛицаРеквизиты);
	
	ТаблицаВзаиморасчетов     = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		СтруктураТаблицДокумента.ПогашениеЗадолженностиТаблица, ПараметрыПроведения.ПогашениеЗадолженности, Отказ);
	
	ТаблицаСуммовыхРазниц     = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	// Учет доходов и расходов ИП
	ТаблицаТоваровИП          = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаТоваров,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаПрочееИП           = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаПрочее,
		ПараметрыПроведения.Реквизиты);
	
	СтруктураТаблицМПЗ        = Новый Структура("ТаблицаТоваров, ТаблицаПрочее",
		ТаблицаТоваровИП, ТаблицаПрочееИП);
	
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.ПогашениеЗадолженности);
		
	ТаблицаОплатыОСиНМА = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыОСиНМА(
		ТаблицыОплатыПоставщикуИП, 
		ПараметрыПроведения.ПогашениеЗадолженности);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Алгоритмы формирования проводок этого документа учитывают малоценку
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ДвиженияПоМалоценнымОбъектамСформированы", Истина);
	
	// Поступление товаров
	УчетТоваров.СформироватьДвиженияПоступлениеТоваров(
		СтруктураТаблицДокумента.ПоступлениеТоваровТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Поступление возвратной тары
	УчетТоваров.СформироватьДвиженияПоступлениеТарыНесколькоКонтрагентов(
		ПараметрыПроведения.ПоступлениеТарыТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Поступление прочее
	УчетДоходовРасходов.СформироватьДвиженияПоступлениеУслуг(
		СтруктураТаблицДокумента.ПоступлениеПрочееТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Суточные
	Документы.АвансовыйОтчет.СформироватьРасходыНаСуточные(ПараметрыПроведения.Реквизиты, Движения);
		
	// Билеты
	Документы.АвансовыйОтчет.СформироватьРасходыПоИспользованнымБилетам(
		ПараметрыПроведения.Билеты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(
		СтруктураТаблицДокумента.ПоступлениеТоваровТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(СтруктураТаблицДокумента.ПогашениеЗадолженностиТаблица, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Табличная часть "Прочее"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(
		СтруктураТаблицДокумента.ПоступлениеПрочееТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// НДС
	УчетНДС.СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(
		СтруктураТаблицДокументаНДС.ТоварыНДС, СтруктураТаблицДокументаНДС.УслугиНДС, ПараметрыПроведения.НомераГТД,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(
		СтруктураТаблицДокументаНДС.ТоварыНДС, СтруктураТаблицДокументаНДС.УслугиНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
				
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияИспользованиеБилетов(
		ПараметрыПроведения.Билеты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСРаздельный.СформироватьДвиженияИспользованиеБилетов(
		ПараметрыПроведения.Билеты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Оплата
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ПогашениеЗадолженности, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов, 
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);
		
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов, ТаблицаБилетов", ТаблицаВзаиморасчетов, ПараметрыПроведения.Билеты);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП,
		ПараметрыПроведения.ПогашениеЗадолженности, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаОплатыОСиНМА, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	Документы.АвансовыйОтчет.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, ПараметрыПроведения, Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект)
	 Или ВалютаДокумента <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();

	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;
	
	ОтражатьВНалоговомУчете                = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ОтражатьВНалоговомУчетеУСН             = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	ОтражатьВНалоговомУчетеУСНДоходы       = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата);
	ОтражатьВНалоговомУчетеПредпринимателя = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	РаздельныйУчетНДСНа19Счете			   = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	ПлательщикНДС 						   = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ВестиУчетПоДоговорам                   = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Если Товары.Количество() = 0 
		И (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ ВозвратнаяТара.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	// Проверка табличной части "Товары"
	Если НЕ ОтражатьВНалоговомУчетеУСН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ОтражениеВУСН");
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Поставщик");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерСФ");
	
	Если КурсРассчитывается Тогда
		СуммаРасходов = Товары.Итог("Сумма") + ОплатаПоставщикам.Итог("Сумма") + Прочее.Итог("Сумма");
		Если Не СуммаВключаетНДС Тогда
			СуммаРасходов = СуммаРасходов + Товары.Итог("СуммаНДС") + Прочее.Итог("СуммаНДС");
		КонецЕсли;
		СуммаЗачтенныхАвансов = ВыданныеАвансы.Итог("СуммаИзрасходованногоАванса");
		Если СуммаЗачтенныхАвансов > СуммаРасходов Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Авансы'"),
				НСтр("ru = 'Сумма зачтенных авансов %1 больше суммы расходов по отчету %2'"));
			ТекстСообщения = СтрШаблон(ТекстСообщения, СуммаЗачтенныхАвансов, СуммаРасходов);
			Поле = "ВыданныеАвансы";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Для Каждого Аванс Из ВыданныеАвансы Цикл
			Если ЗначениеЗаполнено(Аванс.ДокументАванса) Тогда
				РеквизитыАванса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Аванс.ДокументАванса, "СуммаДокумента, ВалютаДокумента");
				Если Аванс.СуммаИзрасходованногоАванса > РеквизитыАванса.СуммаДокумента Тогда
					Префикс = "ВыданныеАвансы[" + Формат(Аванс.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					КолонкаЗачтено = СтрШаблон(НСтр("ru = 'Зачтено (%1)'"), РеквизитыАванса.ВалютаДокумента);
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", КолонкаЗачтено,
						Аванс.НомерСтроки, НСтр("ru = 'Авансы'"),
						НСтр("ru = 'Сумма зачтенного аванса %1 больше суммы выданного аванса по документу %2'"));
					ТекстСообщения = СтрШаблон(ТекстСообщения, Аванс.СуммаИзрасходованногоАванса, РеквизитыАванса.СуммаДокумента);
					Поле = Префикс + "СуммаИзрасходованногоАванса";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ВыданныеАвансы.СуммаИзрасходованногоАванса");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");
		
		Если СтрокаТаблицы.ПредъявленСФ Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Поставщик'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Поставщик";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Дата счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если ПустаяСтрока(СтрокаТаблицы.НомерСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Номер счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "НомерСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.ДоговорКонтрагента");
		
	КонецЕсли;
	
	Если НЕ ВестиУчетПоДоговорам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.ДоговорКонтрагента");
	КонецЕсли;
	
	// Проверять надо только по доп.условиям
	МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.Сделка"); // доп.условие - СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
	
	// Проверка табличной части "Оплата поставщикам"
	Для каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
		Префикс = "ОплатаПоставщикам[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Оплата поставщикам'");
		
		Если СтрокаТаблицы.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Документ расчетов'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "Сделка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Поле = Префикс + "ДоговорКонтрагента";
			ТекстСообщения = "";
			ПроведениеВозможно = УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
				ЭтотОбъект, СтрокаТаблицы.ДоговорКонтрагента, ТекстСообщения);
			Если НЕ ПроведениеВозможно Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Договор'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ВестиУчетПоДоговорам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.ДоговорКонтрагента");
	КонецЕсли;
	
	Если НЕ ОтражатьВНалоговомУчетеУСН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.ОтражениеВУСН");
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.Поставщик");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.НомерСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.НомерДокументаОплаты");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДатаДокументаОплаты");
		
	Если ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		
		Если Не НДСВключенВСтоимость Или РаздельныйУчетНДСНа19Счете Тогда
			
			ИмяСписка = НСтр("ru = 'Расходы сотрудника'");
			
			Для Каждого СтрокаТаблицы Из Прочее Цикл
				
				Поле = "Прочее[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].УчетНДС";
				
				Если СтрокаТаблицы.ПредъявленСФ И Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка",
						, 
						?(СтрокаТаблицы.ВидДокументаРасхода = Перечисления.ВидыДокументовПодтверждающихКомандировочныеРасходы.Билет, 
							НСтр("ru = 'Перевозчик'"), 
							НСтр("ru = 'Поставщик'")),
						СтрокаТаблицы.НомерСтроки, 
						ИмяСписка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
				КонецЕсли;
				
				// Для вычета НДС требуется счет-фактура. Исключение - авиа и ж/д билеты.
				Если СтрокаТаблицы.ПредъявленСФ И ЗначениеЗаполнено(СтрокаТаблицы.ВидДокументаРасхода) 
					 И СтрокаТаблицы.ВидДокументаРасхода <> Перечисления.ВидыДокументовПодтверждающихКомандировочныеРасходы.Билет
					 И (Не ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Или Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ)) Тогда
					
					ШаблонСообщения = Нстр("ru='Не заполнены реквизиты счета-фактуры в строке %1 списка ""%2""'");
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ШаблонСообщения, СтрокаТаблицы.НомерСтроки, ИмяСписка),
						,
						Поле,
						"Объект",
						Отказ);
						
				КонецЕсли;
				
				// Для вычета НДС требуется документ оплаты. Исключение - чек, т.к. сам по себе является таким документом.
				Если СтрокаТаблицы.ПредъявленСФ И ЗначениеЗаполнено(СтрокаТаблицы.ВидДокументаРасхода) 
					 И СтрокаТаблицы.ВидДокументаРасхода <> Перечисления.ВидыДокументовПодтверждающихКомандировочныеРасходы.Чек
					 И (Не ЗначениеЗаполнено(СтрокаТаблицы.НомерДокументаОплаты) Или Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты)) Тогда
					
					ШаблонСообщения = Нстр("ru='Не заполнены реквизиты документа оплаты (чека) в строке %1 списка ""%2""'");
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ШаблонСообщения, СтрокаТаблицы.НомерСтроки, ИмяСписка),
						,
						Поле,
						"Объект",
						Отказ);
						
				КонецЕсли;
					
			КонецЦикла;
									
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Суточные) И ЗначениеЗаполнено(ДатаНачалаКомандировки) И ЗначениеЗаполнено(ДатаОкончанияКомандировки) Тогда
			
			ТаблицаСуточных = Суточные.Выгрузить(,"ДатаНачала, ДатаОкончания");
			
			// Проверяем, что минимальная дата начала сегмента командировки не выходит за начало периода командировки
			ТаблицаСуточных.Сортировать("ДатаНачала");
			Если ЗначениеЗаполнено(ТаблицаСуточных[0].ДатаНачала)
				И ТаблицаСуточных[0].ДатаНачала < ДатаНачалаКомандировки Тогда
				
				ШаблонСообщения = Нстр("ru='Дата отправления в расчете суточных (%1) раньше даты начала командировки (%2)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(ШаблонСообщения,
						Формат(ТаблицаСуточных[0].ДатаНачала, "ДЛФ=D"),
						Формат(ДатаНачалаКомандировки, "ДЛФ=D")),
					Ссылка,
					"Объект.Суточные.ИтогСумма",
					,
					Отказ);
					
			КонецЕсли;		
				
			// Проверяем, что максимальная дата окончания сегмента командировки не выходит за окончание периода командировки
			ТаблицаСуточных.Сортировать("ДатаОкончания Убыв");
			Если ЗначениеЗаполнено(ТаблицаСуточных[0].ДатаОкончания)
				И ТаблицаСуточных[0].ДатаОкончания > ДатаОкончанияКомандировки Тогда
								
				ШаблонСообщения = Нстр("ru='Дата возвращения в расчете суточных (%1) позже даты окончания командировки (%2)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(ШаблонСообщения, 
						Формат(ТаблицаСуточных[0].ДатаОкончания, "ДЛФ=D"),
						Формат(ДатаОкончанияКомандировки, "ДЛФ=D")),
					Ссылка,
					"Объект.Суточные.ИтогСумма",
					,
					Отказ);					
					
			КонецЕсли;			
						
		КонецЕсли;	
		
		// Т.к. привязать сообщение об ошибке к полю итога ТЧ нельзя, то СчетЗатрат, "спрятанный" за ссылкой,
		// проверим здесь: в тексте укажем, где нужно заполнить реквизит
		Если ЗначениеЗаполнено(Суточные) 
			 И НЕ ЗначениеЗаполнено(СчетЗатрат) 
			 И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Нстр("ru='В форме суточных не указан счет затрат'"),
				,
				"Объект.Суточные.ИтогСумма",
				,
				Отказ);					
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее Тогда
		
		Для каждого СтрокаТаблицы Из Прочее Цикл
			Префикс = "Прочее[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'Прочее'");
			
			Если СтрокаТаблицы.ПредъявленСФ Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Поставщик'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "Поставщик";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Дата счета-фактуры'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "ДатаСФ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				Если ПустаяСтрока(СтрокаТаблицы.НомерСФ) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Номер счета-фактуры'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "НомерСФ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ВидОперации <> Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее Тогда
		
		// Реквизиты, скрытые от пользователя.
		// Для вида операции Командировка заполняются перед записью.
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.СчетУчетаНДС");
		
		// Реквизит Содержание скрыт от пользователя
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.Содержание");
		
		// Вид документа расхода нужен только для настройки учета НДС по командировочным расходам
		Если НДСВключенВСтоимость Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Прочее.ВидДокументаРасхода");
		КонецЕсли;	
					
	КонецЕсли;	
	
	Если ВидОперации <> Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаНачалаКомандировки");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОкончанияКомандировки");
		
		// В АО по командировке номер и дата входящего документа используются как номер и дата счет-фактуры 
		// (если вид документа - билет), либо как номер и дата чека (если вид документа - чек). 
		// Поэтому для командировки вид и реквизиты входящего документа обязательные.
		// В ином случае пользователю доступны отдельные колонки даты и номера СФ, поэтому реквизиты входящего документа необязательны.
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.НомерВходящегоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДатаВходящегоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.ВидДокументаРасхода");
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	РеквизитыЗаСсылками = Документы.АвансовыйОтчет.РеквизитыЗаСсылками(ВидОперации);
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ОбрабатываемыеТабличныеЧасти = Новый Массив;
	ОбрабатываемыеТабличныеЧасти.Добавить(Товары);
	ОбрабатываемыеТабличныеЧасти.Добавить(Прочее);
	
	Для каждого ТабличнаяЧасть Из ОбрабатываемыеТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.ПредъявленСФ	= Ложь;
			СтрокаТЧ.ДатаСФ 		= '00010101';
			СтрокаТЧ.НомерСФ 		= "";
			СтрокаТЧ.СчетФактура	= Документы.СчетФактураВыданный.ПустаяСсылка();
			СтрокаТЧ.КассовыйЧек	= Документы.КассовыйЧекПодотчетногоЛица.ПустаяСсылка();
			Если ТабличнаяЧасть = Товары Тогда
				СтрокаТЧ.Описание = "";
			ИначеЕсли ТабличнаяЧасть = Прочее И ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
			// Для табличной части "Прочее" и вида операции "Закупка, расходы" поле "Содержание" можно не очищать,
			// т.к. оно всегда доступно для редактирования.
				СтрокаТЧ.Содержание = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Перезаполним выданные авансы на дату документа
	ВыданныеАвансы.Очистить();	
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(Дата)
		И ЗначениеЗаполнено(ФизЛицо)
		И ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		НайденныеДокументыОплаты = УчетКомандировок.ДокументыВыплатыПодотчетномуЛицу(
			Организация,
			Дата,
			ФизЛицо,
			ВалютаДокумента,
			Ссылка,
			1,
			Истина);
				
		Для Каждого ДокументАванса Из НайденныеДокументыОплаты Цикл
			НовыйАванс = ВыданныеАвансы.Добавить();
			НовыйАванс.ДокументАванса = ДокументАванса.Ссылка;
		КонецЦикла;		
						
	КонецЕсли;	
	
	// Перезаполним билеты - выберем только неиспользованные
	Билеты.Очистить();
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(ДатаНачалаКомандировки)
		И ЗначениеЗаполнено(ДатаОкончанияКомандировки)
		И ЗначениеЗаполнено(ФизЛицо) Тогда
					
		Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
			Организация,
			ДатаНачалаКомандировки,
			ДатаОкончанияКомандировки,
			,
			ФизЛицо,
			Ссылка,
			Истина));
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Билеты, "Билеты", ЭтотОбъект, Документы.АвансовыйОтчет);
		
		Для Каждого СтрокаБилета Из Билеты Цикл
			УчетНДСКлиентСервер.УстановитьНастройкиУчетаНДСВСтрокеБилетаПоУмолчанию(СтрокаБилета);
		КонецЦикла;		
		
	КонецЕсли;	
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьСчетаФактуры(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	ПроверитьРазныеЗначенияБланкаСтрогойОтчетности(ДанныеСчетовФактур, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.АвансовыйОтчет.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = ЭтотОбъект.Прочее.ВыгрузитьКолонки("Поставщик,НомерСФ,ДатаСФ,СчетФактура,БланкСтрогойОтчетности");
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Прочее Цикл
		
		Если Не СтрокаТабличнойЧасти.ПредъявленСФ Или 
			 ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка И СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			Продолжить;
		КонецЕсли;	
				
		НоваяСтрока = ДанныеСчетовФактур.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	КонецЦикла;
	
	РеквизитыБилетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭтотОбъект.Билеты.ВыгрузитьКолонку("Билет"), "Код, ДатаПокупки, Перевозчик");
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Билеты Цикл
		
		Если Не СтрокаТабличнойЧасти.ПредъявленСФ Или СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			Продолжить;
		КонецЕсли;	
		
		РеквизитыБилета = РеквизитыБилетов[СтрокаТабличнойЧасти.Билет];
		НоваяСтрока = ДанныеСчетовФактур.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.Поставщик 	= РеквизитыБилета.Перевозчик;
		НоваяСтрока.НомерСФ 	= СокрЛП(РеквизитыБилета.Код);
		НоваяСтрока.ДатаСФ 		= РеквизитыБилета.ДатаПокупки;
		НоваяСтрока.БланкСтрогойОтчетности = Истина;
		
	КонецЦикла;
	
	ДанныеСчетовФактур.Свернуть("Поставщик,НомерСФ,ДатаСФ,СчетФактура,БланкСтрогойОтчетности");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Процедура ПроверитьРазныеЗначенияБланкаСтрогойОтчетности(ДанныеСчетовФактур, Отказ)

	ТаблицаДублей = ДанныеСчетовФактур.Скопировать(, 
		"Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
	ТаблицаДублей.Свернуть("Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
	ТаблицаДублей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	ТаблицаДублей.ЗаполнитьЗначения(1, "Количество");
	ТаблицаДублей.Свернуть("Поставщик,ДатаСФ,НомерСФ", "Количество");
	Для каждого СтрокаТаблицы Из ТаблицаДублей Цикл
		Если СтрокаТаблицы.Количество > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для счета-фактуры № %1 от %2 (поставщик: %3) из списка ""Прочее"" 
				|указаны разные значения флажка ""Бланк строгой отчетности"".'"),
				СтрокаТаблицы.НомерСФ,
				Формат(СтрокаТаблицы.ДатаСФ, "ДЛФ=D"),
				СтрокаТаблицы.Поставщик);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПрочееБланкСтрогойОтчетности", "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			ПараметрыСчетаФактуры = Новый Структура("Организация, Контрагент, ДоговорКонтрагента",
					Организация, СтрокаТаблицы.Поставщик, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ПараметрыСчетаФактуры.Вставить("НомерСчетаФактурыПолученного", СтрокаТаблицы.НомерСФ);
			ПараметрыСчетаФактуры.Вставить("ДатаСчетаФактурыПолученного", СтрокаТаблицы.ДатаСФ);
			ПараметрыСчетаФактуры.Вставить("БланкСтрогойОтчетности", СтрокаТаблицы.БланкСтрогойОтчетности);
			
			ДокументСФ = УчетНДСПереопределяемый.НайтиСчетФактуруПолученный(ПараметрыСчетаФактуры);
			
			Если ДокументСФ = Неопределено Тогда
				
				Если НЕ СтрокаТаблицы.БланкСтрогойОтчетности
				   И НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(СтрокаТаблицы.Поставщик, "Полученный", Ложь) Тогда
					Продолжить;
				КонецЕсли;
					
				ДокументСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				ДокументСФ.Дата            = ЭтотОбъект.Дата;
				ДокументСФ.Организация     = ЭтотОбъект.Организация;
				ДокументСФ.Контрагент      = СтрокаТаблицы.Поставщик;
				ДокументСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				ДокументСФ.Ответственный   = Пользователи.ТекущийПользователь();
				ДокументСФ.Комментарий     = "Создан автоматически на основании авансового отчета";
				ДокументСФ.НомерВходящегоДокумента = СтрокаТаблицы.НомерСФ;
				ДокументСФ.ДатаВходящегоДокумента  = СтрокаТаблицы.ДатаСФ;
				ДокументСФ.НДСПредъявленКВычету    = НЕ РаздельныйУчетНДС И (ДокументСФ.Дата >= '20120101'); 
				ДокументСФ.КодВидаОперации         = "01";
				ДокументСФ.КодСпособаПолучения     = 1;
				ЗаполнитьЗначенияСвойств(ДокументСФ, СтрокаТаблицы);
			Иначе
				ДокументСФ = ДокументСФ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
				ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
					ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
			КонецЕсли;
			ДокументСФ.Записать();
			
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		Иначе
			
			Если СтрокаСФ.БланкСтрогойОтчетности <> СтрокаТаблицы.БланкСтрогойОтчетности Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.БланкСтрогойОтчетности = СтрокаТаблицы.БланкСтрогойОтчетности;
				ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
					ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
						ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
				КонецЕсли;
				ДокументСФ.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе()

	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Прочее Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыБилетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭтотОбъект.Билеты.ВыгрузитьКолонку("Билет"), "Код, ДатаПокупки, Перевозчик");
	ПараметрыСФ = Новый Структура("НомерСФ, ДатаСФ, Поставщик, СчетФактура");
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Билеты Цикл
		
		Если Не СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			Продолжить;
		КонецЕсли;	
		
		РеквизитыБилета = РеквизитыБилетов[СтрокаТабличнойЧасти.Билет];
		
		ПараметрыСФ.НомерСФ 	= СокрЛП(РеквизитыБилета.Код);
		ПараметрыСФ.ДатаСФ 		= РеквизитыБилета.ДатаПокупки;
		ПараметрыСФ.Поставщик 	= РеквизитыБилета.Перевозчик;
		ПараметрыСФ.СчетФактура = СтрокаТабличнойЧасти.СчетФактура;
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, ПараметрыСФ);
		Если СтрокаСФ <> Неопределено Тогда
			СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
			СтрокаСФ.Использован = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	Перем РегистрыТребующиеОчисткиПоДокументам;
	
	Если Не УчетНДСБП.УстановитьУправляемуюБлокировку("СчетФактураПолученный", ПодчиненныеСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект);
	ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам", РегистрыТребующиеОчисткиПоДокументам);
		
	ОтборПоДокументуОснованию = Новый Структура("ДокументОснование", Ссылка);
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
		
		СФНеНужен = (ПометкаУдаления Или Не СтрокаСФ.Использован);
		
		Если СФНеНужен И СтрокаСФ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ГрупповоеПерепроведение);
		Если РегистрыТребующиеОчисткиПоДокументам <> Неопределено Тогда
			ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
				РегистрыТребующиеОчисткиПоДокументам);
		КонецЕсли;
		
		Если СФНеНужен И ДокументСФ.ДокументыОснования.Количество() <= 1 Тогда
			ДокументСФ.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
		Если СФНеНужен Тогда
			
			СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(ОтборПоДокументуОснованию);
			Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
				ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
			КонецЦикла;
			РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
		Иначе
			
			// Если в счете-фактуре несколько оснований, счет-фактура проводится, только если все основания проведены.
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ДокументСФ.ДокументыОснования.Количество() > 1 
				И УчетНДСБП.ЕстьНепроведеныеОснованияСчетаФактуры(ДокументСФ.ДокументыОснования, Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
		КонецЕсли;
		ДокументСФ.Записать(РежимЗаписиСФ);
	
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСФ,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСФ,
	|	СчетФактураПолученный.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности,
	|	СчетФактураПолученный.Проведен КАК Проведен,
	|	СчетФактураПолученный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументСсылка)
	|			И СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаСФ;

КонецФункции

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ, Ссылка",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ, СтрокаДокумента.СчетФактура);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ЗаполнитьНередактируемыеРеквизитыДляКомандировки()
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина);
	
	Для Каждого СтрокаБилета Из Билеты Цикл
		
		Если Не СтрокаБилета.ПредъявленСФ Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаБилета.НомерДокументаОплаты) Тогда
			СтрокаБилета.НомерДокументаОплаты = НомерДокумента;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаБилета.ДатаДокументаОплаты) Тогда	
			СтрокаБилета.ДатаДокументаОплаты = Дата;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ВидОперации <> Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам; // 19.04
	
	Для каждого СтрокаРасхода Из Прочее Цикл
		
		// Для билета дополнительно устанавливается признак БСО - 
		// нужен для установки правильного кода вида операции в книге покупок
		СтрокаРасхода.БланкСтрогойОтчетности = СтрокаРасхода.ПредъявленСФ 
			И СтрокаРасхода.ВидДокументаРасхода = Перечисления.ВидыДокументовПодтверждающихКомандировочныеРасходы.Билет;
						
		// Для билета (БСО) реквизиты счет-фактуры - это реквизиты билета
		Если СтрокаРасхода.БланкСтрогойОтчетности Тогда
			СтрокаРасхода.НомерСФ = СтрокаРасхода.НомерВходящегоДокумента;
			СтрокаРасхода.ДатаСФ = СтрокаРасхода.ДатаВходящегоДокумента;			
		КонецЕсли;	
		
		// Для чека реквизиты документа оплаты - это реквизиты чека
		Если СтрокаРасхода.ВидДокументаРасхода = Перечисления.ВидыДокументовПодтверждающихКомандировочныеРасходы.Чек Тогда
			СтрокаРасхода.НомерДокументаОплаты = СтрокаРасхода.НомерВходящегоДокумента;
			СтрокаРасхода.ДатаДокументаОплаты = СтрокаРасхода.ДатаВходящегоДокумента;			
		КонецЕсли;	
		
		СтрокаРасхода.СчетУчетаНДС = СчетУчетаНДС;
		СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				
	КонецЦикла;
			
КонецПроцедуры

Процедура ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.КассовыйЧек КАК КассовыйЧек
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &Ссылка
	|	И АвансовыйОтчетТовары.КассовыйЧек <> ЗНАЧЕНИЕ(Документ.КассовыйЧекПодотчетногоЛица.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетПрочее.КассовыйЧек
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка = &Ссылка
	|	И АвансовыйОтчетПрочее.КассовыйЧек <> ЗНАЧЕНИЕ(Документ.КассовыйЧекПодотчетногоЛица.ПустаяСсылка)";
	
	РегистрыСведений.ДокументыПоКассовымЧекамПодотчетныхЛиц.ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц(ТекстЗапроса, Ссылка);
	
КонецПроцедуры

#КонецЕсли
