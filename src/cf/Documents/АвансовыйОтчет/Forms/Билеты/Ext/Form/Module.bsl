
#Область ОписаниеПеременных

&НаКлиенте
Перем ДействиеВыбрано;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация               = Параметры.Организация;
	НДСВключенВСтоимость      = Параметры.НДСВключенВСтоимость;
	ФизЛицо                   = Параметры.ФизЛицо;
	ДатаНачалаКомандировки    = Параметры.ДатаНачалаКомандировки; 
	ДатаОкончанияКомандировки = Параметры.ДатаОкончанияКомандировки; 
	ВалютаДокумента           = Параметры.ВалютаДокумента;
	ДатаДокумента             = Параметры.ДатаДокумента;
	ТекущийДокумент	          = Параметры.ТекущийДокумент;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокумент, "Номер"), 
			Истина,
			Истина);
	КонецЕсли;		
	
	Билеты.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыБилеты));
				
	ОбновитьИтоги(ЭтотОбъект);
	
	// Значения для подстановки по умолчанию
	СчетЗатрат = УчетКомандировок.СчетЗатратКомандировочныеРасходы(Организация, ДатаДокумента);
	СтатьяЗатрат = УчетКомандировок.СтатьяЗатратКомандировочныеРасходы();
		
	Элементы.БилетыСуммаНДС.Видимость      = Не Параметры.НДСНеВыделять;
	Элементы.БилетыСуммаНДСВсего.Видимость = Не Параметры.НДСНеВыделять;
	Элементы.БилетыУчетНДС.Видимость       = Не НДСВключенВСтоимость;
	
	РаздельныйУчетНДСНаСчете19 = Параметры.РаздельныйУчетНДСНаСчете19;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Билеты,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьСчетовУчета();
	
	Элементы.ГруппаБилетыСчетЗатратПодразделениеЗатрат.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"),
		НСтр("ru = 'Счет затрат / Подразделение'"), НСтр("ru = 'Счет затрат'"));
	
	// Организация и дата не меняются на форме, поэтому установим ФО один раз при создании формы
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ДатаДокумента);
	
	Перевозчики = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Билеты.Выгрузить(, "Билет").ВыгрузитьКолонку("Билет"),
		"Перевозчик");	
	
	Для Каждого СтрокаБилета Из Билеты Цикл
		СтрокаБилета.Перевозчик = Перевозчики.Получить(СтрокаБилета.Билет);
		Если Не НДСВключенВСтоимость Тогда
			АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(СтрокаБилета, "Билеты", РаздельныйУчетНДСНаСчете19);
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьВидимостьБаннераУчетБилетовИПнаОСНО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.УчетНДС") Тогда
	
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаВыбораУчетНДСНаКлиенте(ВыбранноеЗначение);
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если ДействиеВыбрано <> Истина Тогда
		ОповеститьОВыборе(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБилеты

&НаКлиенте
Процедура БилетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "БилетыУчетНДС" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;	
		
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	ТекущиеДанные.СчетЗатрат = СчетЗатрат;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
	УчетНДСКлиентСервер.УстановитьНастройкиУчетаНДСВСтрокеБилетаПоУмолчанию(ТекущиеДанные);
	Если Не НДСВключенВСтоимость Тогда
		АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(ТекущиеДанные, "Билеты", РаздельныйУчетНДСНаСчете19);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыБилетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Билет) Тогда
		ЗаполнитьБилетыНаСервере(Элементы.Билеты.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.СуммаНДС = 0;
		ТекущиеДанные.Перевозчик = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСуммаПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Билеты.ТекущиеДанные);
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БилетыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
			
	РассчитатьСуммуНДС(ТекущиеДанные);
	ОбновитьИтоги(ЭтотОбъект);
	
	Если ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда
		ТекущиеДанные.ПредъявленСФ = Ложь;
		ТекущиеДанные.СпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Списывается");
	КонецЕсли;
	АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(ТекущиеДанные, "Билеты", РаздельныйУчетНДСНаСчете19);				
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСуммаНДСПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БилетыУчетНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Билеты.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура БилетыСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	ЗначенияСубконтоПоУмолчанию = Новый Соответствие;
	ЗначенияСубконтоПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		СтатьяЗатрат);
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	СкрытьБаннерУчетБилетовИПнаОСНО();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьБилеты(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗаполнитьБилетыЗавершение", ЭтотОбъект); 
	
	Если Билеты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением таблица билетов будет очищена. Продолжить?'");
		ПоказатьВопрос(ОбработкаЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(ПоместитьТаблицуБилетовВоВременноеХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьБилетыЗавершение(Ответ, Параметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБилетыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБилетыНаСервере(ИдентификаторСтроки = Неопределено)
	
	ЗначенияСубконтоПоУмолчанию = Новый Соответствие;
	ЗначенияСубконтоПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		СтатьяЗатрат);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
			Организация, 
			ДатаНачалаКомандировки, 
			ДатаОкончанияКомандировки, 
			, 
			ФизЛицо, 
			ТекущийДокумент,
			Истина));
		
		Перевозчики = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			Билеты.Выгрузить(, "Билет").ВыгрузитьКолонку("Билет"),
			"Перевозчик");
			
		Для Каждого СтрокаБилета Из Билеты Цикл
			ЗаполнитьАналитикуЗатратВСтрокеБилета(ЭтотОбъект, СтрокаБилета, ЗначенияСубконтоПоУмолчанию);
			СтрокаБилета.Перевозчик = Перевозчики.Получить(СтрокаБилета.Билет);
			УчетНДСКлиентСервер.УстановитьНастройкиУчетаНДСВСтрокеБилетаПоУмолчанию(СтрокаБилета);
			Если Не НДСВключенВСтоимость Тогда
				АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(СтрокаБилета, "Билеты", РаздельныйУчетНДСНаСчете19);
			КонецЕсли;	
		КонецЦикла;
		
	Иначе
		СтрокаБилета = Билеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаБилетов = Справочники.Билеты.СуммыБилетов(
			Организация, 
			ДатаНачалаКомандировки, 
			ДатаОкончанияКомандировки,
			СтрокаБилета.Билет,
			ФизЛицо, 
			ТекущийДокумент,
			Истина);
		
		СтрокаБилета.Перевозчик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаБилета.Билет, "Перевозчик");		
		Если ТаблицаБилетов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБилета, ТаблицаБилетов[0],, "Билет");
			УчетНДСКлиентСервер.УстановитьНастройкиУчетаНДСВСтрокеБилетаПоУмолчанию(СтрокаБилета);		
		Иначе
			СтрокаБилета.Сумма = 0;
			СтрокаБилета.СуммаНДС = 0;
		КонецЕсли;
		
		ЗаполнитьАналитикуЗатратВСтрокеБилета(ЭтотОбъект, СтрокаБилета, ЗначенияСубконтоПоУмолчанию); 			
		Если Не НДСВключенВСтоимость Тогда
			АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(СтрокаБилета, "Билеты", РаздельныйУчетНДСНаСчете19);
		КонецЕсли;	
		
	КонецЕсли;
		
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.БилетыСуммаВсего    = Форма.Билеты.Итог("Сумма");
	Форма.БилетыСуммаНДСВсего = Форма.Билеты.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуБилетовВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Билеты.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Билеты.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Билеты.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("БилетыСчетЗатрат");
	ЭлементыСчетов.Добавить("БилетыПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("БилетыСубконто1");
	ЭлементыСчетов.Добавить("БилетыСубконто2");
	ЭлементыСчетов.Добавить("БилетыСубконто3");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Билет
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыБилет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.Билет",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Ставка НДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСтавкаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Билеты.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'н/д'"));
		
	// Если отсуствует "входящий" НДС, то настройку учета НДС скрываем
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыУчетНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Билеты.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ""); 
	
	// Если организация - плательщик НДС, то перевозчик выводится в тексте колонки УчетНДС, поэтому отделная колонка не нужна.
	// В ином случае пользователь может вывести колонку с перевозчиком просто для информации (по умолчанию скрыта).
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыПеревозчик");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Счет затрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСчетЗатрат");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.СчетЗатрат",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Субконто БУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	// Субконто БУ скроем если не используется
	
	Для Сч = 2 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// Подразделение затрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыПодразделениеЗатрат");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.ПодразделениеЗатратДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
			
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуЗатратВСтрокеБилета(Форма, СтрокаБилета, ЗначенияПоУмолчанию)
	
	Если ЗначениеЗаполнено(СтрокаБилета.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;	
		
	СтрокаБилета.СчетЗатрат = Форма.СчетЗатрат;
		
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		Форма,
		СтрокаБилета,
		ПараметрыУстановкиСвойствСубконтоТаблицы(Форма));	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоТаблицы(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"БилетыСубконто", "БилетыПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		Форма.СтатьяЗатрат);
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДС(ТекущиеДанные)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;	
				
	ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки = Билеты.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТЧ",                "Билеты");
	ПараметрыФормы.Вставить("РаздельныйУчетНДСНаСчете19", РаздельныйУчетНДСНаСчете19);
	ПараметрыФормы.Вставить("ПредъявленСФ",         ДанныеСтроки.ПредъявленСФ);
	ПараметрыФормы.Вставить("ДатаДокументаОплаты",  ДанныеСтроки.ДатаДокументаОплаты);
	ПараметрыФормы.Вставить("НомерДокументаОплаты", ДанныеСтроки.НомерДокументаОплаты);
	ПараметрыФормы.Вставить("СпособУчетаНДС",       ДанныеСтроки.СпособУчетаНДС);
	ПараметрыФормы.Вставить("Поставщик",            ДанныеСтроки.Перевозчик);
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.УчетНДС", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУчетНДСНаКлиенте(ВыбранноеЗначение)

	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение, "ПредъявленСФ, ДатаДокументаОплаты, НомерДокументаОплаты, СпособУчетаНДС");
	
	АвансовыйОтчетФормыКлиентСервер.УстановитьТекстУчетНДС(ТекущиеДанные, "Билеты", РаздельныйУчетНДСНаСчете19);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область БаннерУчетБилетовИПнаОСНО

&НаСервере
Процедура УстановитьВидимостьБаннераУчетБилетовИПнаОСНО()
	
	Элементы.ГруппаБаннерУчетБилетовИПнаОСНО.Видимость = 
		УчетДоходовИРасходовПредпринимателя.ВидимостьБаннераУчетБилетовИПнаОСНО(
			Организация,
			ДатаДокумента,
			"Билеты");
	
КонецПроцедуры

&НаСервере
Процедура СкрытьБаннерУчетБилетовИПнаОСНО()

	УчетДоходовИРасходовПредпринимателя.СохранитьНастройкуБаннераУчетБилетовИПнаОСНО(Ложь, Организация, "Билеты");
	УстановитьВидимостьБаннераУчетБилетовИПнаОСНО();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти