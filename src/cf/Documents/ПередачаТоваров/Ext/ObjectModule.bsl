#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Признак для передачи в счет-фактуру для того, чтобы не устанавливать статус повторно.
Перем УстановленСтатусДокумента; 

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполнятьСчетаУчета = Ложь;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Основание")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("БезвозмезднаяПередача") Тогда
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			ЗаполнятьСчетаУчета = Истина;
		КонецЕсли;
		
		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") 
			И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
				Если ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
					СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
				Иначе
					СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
						"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
				КонецЕсли;
				ЗаполнятьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, ЗаполнятьСчетаУчета);
	
	Если ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		// Заполнение реквизитов, специфичных для документа:
		Если ЗначениеЗаполнено(Организация)
			И ЗначениеЗаполнено(Контрагент)
			И (ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")) Тогда
			Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ТекущаяДата   = Дата;
	Дата          = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	ТоварыЗакупленыДоНачалаПрослеживаемости = Ложь;
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
	
	СведенияПрослеживаемости.Очистить();
	ШтрихкодыУпаковок.Очистить();
	ПроверитьИзменитьАдресДоставки(ТекущаяДата);
	СтранаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Товары, ВедетсяУчетПрослеживаемыхТоваров, Дата);
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	
	// Проверка табличной части "Товары"
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчета");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетПередачи");
	
	// Получаем содержимое табличных частей объекта с вспомогательными реквизитами:
	СтруктураРезультатов = Новый Структура;
	ТаблицыДокумента =  ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов);
	
	Если Товары.Количество() > 0 Тогда
		
		ВыборкаТоваров = ТаблицыДокумента[СтруктураРезультатов.Товары].Выбрать();
		
		ИмяСписка = НСтр("ru = 'Товары'");
		
		Пока ВыборкаТоваров.Следующий() Цикл
			
			Префикс = "Товары[" + Формат(ВыборкаТоваров.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
				
				// Проверка на наличие услуг в таблице.
				Если ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаТоваров.Номенклатура, "Услуга") Тогда
					ТекстСообщения = НСтр("ru = 'Указана номенклатура, являющаяся услугой.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
						НСтр("ru = 'Номенклатура'"), ВыборкаТоваров.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Номенклатура";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ВыборкаТоваров.ПрослеживаемыйТовар 
					И НЕ ЗначениеЗаполнено(ВыборкаТоваров.СтранаПроисхождения) Тогда
					
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Страна происхождения'"), ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, ЭтотОбъект, Префикс + "СтранаПроисхождения", "Объект", Отказ);
					
				КонецЕсли;
				
				Если ВыборкаТоваров.ПрослеживаемыйКомплект Тогда
					СуммаБезНДС = ?(СуммаВключаетНДС, ВыборкаТоваров.Сумма - ВыборкаТоваров.СуммаНДС, ВыборкаТоваров.Сумма);
					Отбор = Новый Структура("ИдентификаторСтроки", ВыборкаТоваров.ИдентификаторСтроки);
					СтрокиСРНПТ = СведенияПрослеживаемости.Выгрузить(Отбор);
					Если СуммаБезНДС < СтрокиСРНПТ.Итог("Сумма") Тогда 
						ТекстСообщения = НСтр("ru = 'Сумма без НДС по прослеживаемым комплектующим больше суммы без НДС по товару'");
						
						Поле = "" + ИмяСписка + "["+ Формат(ВыборкаТоваров.НомерСтроки-1,"ЧГ=") + "].РНПТ";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Номенклатура'"),
					ВыборкаТоваров.НомерСтроки, ИмяСписка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, ЭтотОбъект, Префикс + "Номенклатура", "Объект", Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.Количество) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Количество'"),
					ВыборкаТоваров.НомерСтроки, ИмяСписка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, ЭтотОбъект, Префикс + "Количество", "Объект", Отказ);
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.СчетУчета) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Счет учета'"), ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ЭтотОбъект, Префикс + "СчетУчета", "Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.СчетПередачи) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Счет передачи'"), ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ЭтотОбъект, Префикс + "СчетПередачи", "Объект", Отказ);
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту  Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.СчетУчета) Тогда
					
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Счет учета'"), ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ЭтотОбъект, Префикс + "СчетУчета", "Объект", Отказ);
					
				ИначеЕсли НЕ ВыборкаТоваров.СчетУчетаЗабалансовый Тогда
					
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Корректность", НСтр("ru = 'Счет учета'"),ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ЭтотОбъект, Префикс + "СчетУчета", "Объект", Отказ);
					
				КонецЕсли;
				
				// Для прослеживаемого товара обязательно указывается страна происхождения.
				Если ВыборкаТоваров.ПрослеживаемыйТовар 
					И НЕ ЗначениеЗаполнено(ВыборкаТоваров.СтранаПроисхождения) 
					И НЕ ТоварыЗакупленыДоНачалаПрослеживаемости Тогда
					
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Страна происхождения'"), ВыборкаТоваров.НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ЭтотОбъект, Префикс + "СтранаПроисхождения", "Объект", Отказ);
						
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
	ИначеЕсли ВозвратнаяТара.Количество() = 0
		ИЛИ УчетнаяПолитика.УчитыватьТаруЗаБалансом(Организация, Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача 
		И ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
		УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли; 
	КонецЦикла;
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата)
		И НЕ ТоварыЗакупленыДоНачалаПрослеживаемости;
	Если Не ВедетсяУчетПрослеживаемыхТоваров Тогда
		РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Товары, ВедетсяУчетПрослеживаемыхТоваров, Дата);
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь Тогда
				СтрокиСРНПТ = СведенияПрослеживаемости.НайтиСтроки(
				Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
				Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
					СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПрослеживаемыйТовар = Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьБП.ПодобратьРНПТ(ЭтотОбъект, Отказ);
		КонецЕсли;
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из ПрослеживаемыйТовар Цикл
		Строка.НомерГТД = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(
				ЭтотОбъект,,,НЕ УстановленСтатусДокумента);
		КонецЕсли;
	Иначе
		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись 
			ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			//Если есть счет фактура с отличным от вида операции: безвозмездная передача, то пометим на удаление.
			ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
			ПараметрыДействия.СостояниеФлага = Истина;
			УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПередачаТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТаблицаТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	
	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТарыТаблицаТара,
		ПараметрыПроведения.СписаниеТарыРеквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
	
	// Учет доходов и расходов ИП
	ТаблицаБезвозмезднойПередачиИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуБезвозмезднаяПередачаМПЗ(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Списание товаров и тары
	УчетТоваров.СформироватьДвиженияПеремещениеТоваров(
		ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты,
		Движения,
		Отказ);
	
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(
		ПараметрыПроведения.СписаниеТарыТаблицаТара,
		ТаблицаСписаннаяТара,
		ПараметрыПроведения.СписаниеТарыРеквизиты, 
		Движения,
		Отказ);
	
	// Корректировка стоимости тары
	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТары(
		ПараметрыПроведения.КорректировкаСтоимостиТарыТаблицаТара, ТаблицаСписаннаяТара,
		ПараметрыПроведения.КорректировкаСтоимостиТарыРеквизиты, Движения, Отказ);
	
	// Учет НДС
	// Отражается как внутреннее перемещение только передача материалов переработчику
	УчетНДСБП.СформироватьДвиженияПеремещениеТоваров(ПараметрыПроведения.ТоварыНДС,
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеквизитыНДС, Неопределено, Движения, Отказ);
	
	// Учет НДС
	//отражается только при безвозмездной передаче
	Документы.ПередачаТоваров.СформироватьДвиженияБезвозмезднаяПередача(ПараметрыПроведения.ТоварыНДСБезвозмезднаяПередача,
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеквизитыНДСБезвозмезднаяПередача, Неопределено, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияБезвозмезднаяПередачаМПЗ(ТаблицаБезвозмезднойПередачиИП,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	// Учет прослеживаемых товаров
	ПрослеживаемостьБП.СформироватьДвиженияРеализацияТоваров(
		ПараметрыПроведения.ПрослеживаемыеТовары,
		ПараметрыПроведения.ПрослеживаемыеОперации,
		ПараметрыПроведения.СписаниеТоваровРеквизиты,
		Движения);
	
	// Отложенные расчеты с контрагентами.
	Если ТаблицаСписаннаяТара.Количество() > 0 Тогда
		УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
			ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	КонецЕсли;
	
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ,,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара));
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);
		УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ, НЕ УстановленСтатусДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);
		ПараметрыДействия.СостояниеФлага = Ложь;
		УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	Конецесли;	
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
			
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
			
			ВидОперации	= Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту;
			
			Если ДанныеЗаполнения.Проведен Тогда
				
				ЗаполнитьТоварыПоОснованию(ДанныеЗаполнения);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения =
				НСтр("ru = 'Передача товаров комитенту вводятся на основании документа ""Отчет комитенту""
					|с видом отчета ""Отчет о закупках""'");
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			// Заполним реквизиты из стандартного набора по документу основанию.
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, 
				"ВалютаДокумента, ПодразделениеОрганизации, Организация, Склад, СуммаВключаетНДС, Склад.ТипСклада");
		
			Организация              = ДанныеОснования.Организация;
			ПодразделениеОрганизации = ДанныеОснования.ПодразделениеОрганизации;
			ВидОперации              = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача;
			СуммаВключаетНДС         = ДанныеОснования.СуммаВключаетНДС;
		
			Если ДанныеОснования.СкладТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Склад = ДанныеОснования.Склад;
			КонецЕсли;
		
			ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
			
			Если ДанныеЗаполнения.Проведен Тогда
		
				Документы.ПередачаТоваров.ЗаполнитьПоПоступлениюТовары(ЭтотОбъект, ДанныеЗаполнения);
			
			КонецЕсли;
		
		Иначе
		
			ВызватьИсключение НСтр("ru = 'Безвозмездная передача может быть введена только на основании документа ""Поступление (акт, накладная, УПД)"",
				|с видом операции: ""Товары"".'");


		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ОтчетКомитентуОПродажахТовары.НомерСтроки) КАК НомерСтроки,
		|	ОтчетКомитентуОПродажахТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ОтчетКомитентуОПродажахТовары.Количество) КАК Количество,
		|	ОтчетКомитентуОПродажахТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетКомитентуОПродажахТовары.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажахТовары.ПрослеживаемыйТовар
		|			ТОГДА ОтчетКомитентуОПродажахТовары.СтранаПроисхождения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтранаПроисхождения,
		|	ОтчетКомитентуОПродажахТовары.ПрослеживаемыйКомплект КАК ПрослеживаемыйКомплект
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
		|ГДЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка = &ДокументОснование
		|	И ОтчетКомитентуОПродажахТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках)
		|	И НЕ ОтчетКомитентуОПродажахТовары.Номенклатура.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомитентуОПродажахТовары.Номенклатура,
		|	ОтчетКомитентуОПродажахТовары.ИдентификаторСтроки,
		|	ОтчетКомитентуОПродажахТовары.ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажахТовары.ПрослеживаемыйТовар
		|			ТОГДА ОтчетКомитентуОПродажахТовары.СтранаПроисхождения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ОтчетКомитентуОПродажахТовары.ПрослеживаемыйКомплект
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.Количество КАК Количество,
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.СведенияПрослеживаемости КАК ОтчетКомитентуОПродажахСведенияПрослеживаемости
		|ГДЕ
		|	ОтчетКомитентуОПродажахСведенияПрослеживаемости.Ссылка = &ДокументОснование
		|	И ОтчетКомитентуОПродажахСведенияПрослеживаемости.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках)";
		
		Выборка = Запрос.ВыполнитьПакет();
		ВыборкаТовары = Выборка[0].Выбрать();
		ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата)
			И НЕ ТоварыЗакупленыДоНачалаПрослеживаемости;

		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Выборка[0].Выгрузить(), "Номенклатура", Истина);
			РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
			МассивНоменклатуры, Дата);
		КонецЕсли;

		// Для документа создаем новые идентификаторы строк, запоминаем идентификаторы строк основания 
		// для перепривязки сведений о прослеживаемости.
		СоответствиеИдентификаторовСтрок = Новый Соответствие;
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			Если ВедетсяУчетпрослеживаемыхТоваров Тогда
				РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[НоваяСтрока.Номенклатура];
				Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
					НоваяСтрока.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
					Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
					НоваяСтрока.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			Если ЗначениеЗаполнено(ВыборкаТовары.ИдентификаторСтроки) И НоваяСтрока.ПрослеживаемыйТовар Тогда
				СоответствиеИдентификаторовСтрок.Вставить(ВыборкаТовары.ИдентификаторСтроки, НоваяСтрока.ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаСведенияПрослеживаемости = Выборка[1].Выбрать();
		Пока ВыборкаСведенияПрослеживаемости.Следующий() Цикл
			ИдентификаторСтроки = СоответствиеИдентификаторовСтрок.Получить(ВыборкаСведенияПрослеживаемости.ИдентификаторСтроки);
			Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
				НоваяСтрока = СведенияПрослеживаемости.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСведенияПрослеживаемости);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
		
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Товары");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоОстаткам(СчетУчета) Экспорт
	
	Товары.Очистить();
	
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	
	НомерСубконтоНоменклатура	= 0;
	НомерСубконтоКонтрагенты	= 0;
	
	Для Позиция = 1 По СвойстваСчетаУчета.КоличествоСубконто Цикл
		
		НомерСубконто	= СвойстваСчетаУчета.КоличествоСубконто - Позиция + 1;
		
		Если СвойстваСчетаУчета["ВидСубконто" + НомерСубконто] =
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			
				НомерСубконтоНоменклатура	= НомерСубконто;
			
		ИначеЕсли СвойстваСчетаУчета["ВидСубконто" + НомерСубконто] =
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
			
			НомерСубконтоКонтрагенты	= НомерСубконто;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если НомерСубконтоНоменклатура = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерСубконтоКонтрагенты > 0 Тогда
		МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДок",			Новый Граница(Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("Счет",				СчетУчета);
	Запрос.УстановитьПараметр("МассивВидыСубконто",	МассивВидыСубконто);
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
	Запрос.УстановитьПараметр("ВедетсяУчетПрослеживаемыхТоваров", ВедетсяУчетПрослеживаемыхТоваров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СубконтоНоменклатура КАК Номенклатура,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиПредварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаДок,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета.Ссылка
	|				ИЗ
	|					ВТ_Счета),
	|			&МассивВидыСубконто,
	|			Организация = &Организация
	|				И &УсловиеПоКонтрагентам) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПредварительная.Номенклатура КАК Номенклатура,
	|	ОстаткиПредварительная.СчетУчета КАК СчетУчета,
	|	ОстаткиПредварительная.Количество КАК Количество,
	|	ЕСТЬNULL(НоменклатураСправочник.ПрослеживаемыйТовар, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(НоменклатураСправочник.ПрослеживаемыйКомплект, ЛОЖЬ) КАК ПрослеживаемыйТовар,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ПрослеживаемыйТовар, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(НоменклатураСправочник.ПрослеживаемыйКомплект, ЛОЖЬ)
	|			ТОГДА ЕСТЬNULL(НоменклатураСправочник.СтранаПроисхождения, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	ЕСТЬNULL(НоменклатураСправочник.ПрослеживаемыйКомплект, ЛОЖЬ) КАК ПрослеживаемыйКомплект
	|ИЗ
	|	ОстаткиПредварительная КАК ОстаткиПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО (&ВедетсяУчетПрослеживаемыхТоваров)
	|			И ОстаткиПредварительная.Номенклатура = НоменклатураСправочник.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СубконтоНоменклатура", "ХозрасчетныйОстатки.Субконто" + НомерСубконтоНоменклатура);
	
	Если НомерСубконтоКонтрагенты > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтрагентам",
			"Субконто" + НомерСубконтоКонтрагенты + " = &Контрагент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтрагентам", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОстатков = Результат.Выгрузить();
		Товары.Загрузить(ТаблицаОстатков);
	КонецЕсли;
	
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Дата);
		
		Для Каждого Строка Из Товары Цикл
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[Строка.Номенклатура];
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				Строка.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
				Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				Строка.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменитьАдресДоставки(ПредыдущаяДата)

	СписокАдресов = СписокАдресовДоставки(Контрагент, Грузополучатель, ПредыдущаяДата);
	Если (СписокАдресов.Количество() > 0 И АдресДоставки = СписокАдресов[0].Значение) 
		ИЛИ НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
	
		СписокАдресов = СписокАдресовДоставки(Контрагент, Грузополучатель, Дата);
		Если СписокАдресов.Количество() > 0 Тогда
			АдресДоставки = СписокАдресов[0].Значение;
		Иначе
			АдресДоставки = "";
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Функция СписокАдресовДоставки(Контрагент, Грузополучатель, Дата)

	КонтрагентДоставки = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Контрагент);
	Возврат УправлениеКонтактнойИнформациейБП.СписокАдресовОбъекта(КонтрагентДоставки, Дата);
	
КонецФункции

// Функция готовит пакетный запрос для ОбработкиПроверкиЗаполнения.
//	Табличные части объекта (еще не сохраненного в информационной базе) выгружаются во временные таблицы,
//	соединяются с другими нужными талицами.
//
//Параметры:
//	СтруктураРезультатов - <Структура> - описание пакета запросов. Ключ - имя результата запроса, значение - индекс этого результата
//
//Возвращает массив результатов запроса
Функция ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов)
	
	Запрос	= Новый Запрос;
	Запрос.Текст	= "";
	
	Если Товары.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
		
		СтруктураРезультатов.Вставить("ТаблицаТовары", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Товары",        СтруктураРезультатов.Количество());
		
		Запрос.Текст	= Запрос.Текст +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Количество,
		|	ВремТаблица.СчетУчета,
		|	ВремТаблица.СчетПередачи,
		|	ВремТаблица.ПрослеживаемыйТовар,
		|	ВремТаблица.СтранаПроисхождения,
		|	ВремТаблица.НомерГТД,
		|	ВремТаблица.ПрослеживаемыйКомплект,
		|	ВремТаблица.ИдентификаторСтроки,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СуммаНДС
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВремТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВремТаблица.Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.СчетУчета,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
		|	ТаблицаДокумента.СчетПередачи,
		|	ТаблицаДокумента.ПрослеживаемыйТовар,
		|	ТаблицаДокумента.СтранаПроисхождения,
		|	ТаблицаДокумента.НомерГТД,
		|	ТаблицаДокумента.ПрослеживаемыйКомплект,
		|	ТаблицаДокумента.ИдентификаторСтроки,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СуммаНДС
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Инициализация

УстановленСтатусДокумента = Ложь;

#КонецОбласти

#КонецЕсли

