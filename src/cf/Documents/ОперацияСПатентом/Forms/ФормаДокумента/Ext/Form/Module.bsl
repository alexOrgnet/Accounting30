
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НалогПоПатенту > 0 И Не ЗначениеЗаполнено(Объект.КБК) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'КБК'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.КБК", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.ПометкаУдаления
		И Прав(ТекущийОбъект.КБК, 3) = "110" Тогда
		
		КатегорияПодчинения = Сред(ТекущийОбъект.КБК, 9, 3);
		КатегорииПодчинения = УсловияПримененияТребованийЗаконодательства.КатегорииПодчиненияПатентовПоВидамНалогов();
		Если КатегорииПодчинения.Найти(КатегорияПодчинения) = Неопределено Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ПоявиласьНоваяКатегорияПодчиненияПоВидуНалога", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(
		УникальныйИдентификатор, ТекущийОбъект.Организация, Ложь, Истина);
	ПараметрыЗаписи.Вставить("РезультатВыполненияЗаданияКалендаряБухгалтера", РезультатВыполнения);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СтруктураПараметров = Новый Структура("Организация, Ссылка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	Если ПараметрыЗаписи.Свойство("РезультатВыполненияЗаданияКалендаряБухгалтера") Тогда
		КалендарьБухгалтераКлиент.ОжидатьЗавершениеЗаполненияВФоне(
			ПараметрыЗаписи.РезультатВыполненияЗаданияКалендаряБухгалтера);
	КонецЕсли;
	
	Оповестить("ИзменениеПатента", СтруктураПараметров, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания)
		Или Объект.ДатаНачала > Объект.ДатаОкончания
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала) Тогда
		
		Объект.ДатаОкончания = КонецГода(Объект.ДатаНачала);
		
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьРасчетНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала)
		Или Объект.ДатаНачала > Объект.ДатаОкончания
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала) Тогда
		
		Объект.ДатаНачала = НачалоГода(Объект.ДатаОкончания);
		
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьРасчетНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальноВозможныйГодовойДоходПриИзменении(Элемент)
	
	ОбновитьРасчетНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавкаПриИзменении(Элемент)
	
	ОбновитьРасчетНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	УстановитьДоступностьНалоговогоОргана(ЭтотОбъект);
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНалоговомОргане();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	
	НалоговыйОрганПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборКода("КБК", "КБК");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьРасчетНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	
	Если Не Объект.ПометкаУдаления И Не Объект.Проведен Или Модифицированность Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
		Оповещение = Новый ОписаниеОповещения("ВопросПередОплатойСледуетСохранитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Перед оплатой необходимо сохранить изменения'"),
			Кнопки, ,
			КодВозвратаДиалога.Да);
	Иначе
		ОплатитьПатент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередОплатойСледуетСохранитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если ДокументПроведен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить изменения'"));
		Возврат;
	КонецЕсли;
	
	ОплатитьПатент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Элементы.Оплатить.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.ПомощникОплатыПатента);
	
	УстановитьСостояниеДокумента();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьДоступностьНалоговогоОргана(ЭтотОбъект);
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНалоговомОргане();
	
	ПересчитатьСуммуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтотОбъект, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	УстановитьПредставлениеКоличестваДнейДействия(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеОплаты()
	
	ШаблонОплаты = НСтр("ru = 'Оплатить <b>%1 руб.</b> не позднее %2'");
	ШаблонПодсказкиОплаты = НСтр("ru = 'Сумма налога указана в строке 040 на оборотной стороне патента.
                                  |%1'");
	
	ВыводитьПервыйПлатеж = Ложь;
	ВыводитьВторойПлатеж = Ложь;
	
	ОдинПлатеж = УчетПСНКлиентСервер.УплачиваетсяОдинПлатеж(Объект.ДатаНачала, Объект.ДатаОкончания);
	
	Если Объект.СуммаПервогоПлатежа > 0 И ЗначениеЗаполнено(Объект.ДатаПервогоПлатежа) Тогда
		ВыводитьПервыйПлатеж = Истина;
		Элементы.НадписьОплатаПервыйПлатеж.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			СтрШаблон(ШаблонОплаты, Объект.СуммаПервогоПлатежа, Формат(Объект.ДатаПервогоПлатежа, "ДЛФ=D")));
	КонецЕсли;
	
	Если Объект.СуммаВторогоПлатежа > 0 И ЗначениеЗаполнено(Объект.ДатаВторогоПлатежа) Тогда
		ВыводитьВторойПлатеж = Истина;
		Элементы.НадписьОплатаВторойПлатеж.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			СтрШаблон(ШаблонОплаты, Объект.СуммаВторогоПлатежа, Формат(Объект.ДатаВторогоПлатежа, "ДЛФ=D")));
	КонецЕсли;
	
	Если ОдинПлатеж Тогда
		ТекстПодсказкиОплаты = НСтр("ru = 'Патент сроком менее 6 месяцев, нужно оплатить до конца действия патента'");
	Иначе
		ТекстПодсказкиОплаты = НСтр("ru = 'Патент сроком от 6 до 12 месяцев, нужно оплатить:
                                     |1/3 суммы - не позднее 90 дней после начала действия патента
                                     |2/3 суммы - до конца действия патента'");
	КонецЕсли;
	
	Элементы.НалогПоПатентуРасширеннаяПодсказка.Заголовок = СтрШаблон(ШаблонПодсказкиОплаты, ТекстПодсказкиОплаты);
	
	Элементы.НадписьОплатаПервыйПлатеж.Видимость = ВыводитьПервыйПлатеж;
	Элементы.НадписьОплатаВторойПлатеж.Видимость = ВыводитьВторойПлатеж;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговогоОргана(Форма)
	
	Объект = Форма.Объект;
	
	ПостановкаНаУчетВНалоговомОргане = Объект.ПостановкаНаУчетВНалоговомОргане;
	
	ПостановкаВДругомНалоговомОргане = 
		ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане");
	
	Форма.Элементы.ГруппаРеквизиты.Видимость = ПостановкаВДругомНалоговомОргане;
	Если Не ПостановкаВДругомНалоговомОргане Тогда
		Объект.КодПоОКТМО = "";
		Объект.НалоговыйОрган = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНалоговомОргане()
	
	ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru='Налоговая инспекция: <...>'");
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации Тогда
		
		ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru = 'Налоговая инспекция: по месту жительства'");
		
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		
		Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
			Шаблон = НСтр("ru = 'Налоговая инспекция: %1 %2'");
			РеквизитыИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НалоговыйОрган, "Код, Наименование");
			ТекстПостановкаНаУчетВНалоговомОргане = СтрШаблон(Шаблон, РеквизитыИФНС.Код, РеквизитыИФНС.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПостановкаНаУчетВНалоговомОргане.ЗаголовокСвернутогоОтображения = ТекстПостановкаНаУчетВНалоговомОргане;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеКоличестваДнейДействия(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала)
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Форма.Элементы.НадписьКоличествоДнейДействия.Видимость = Ложь;
	Иначе
		Форма.Элементы.НадписьКоличествоДнейДействия.Видимость = Истина;
		
		КоличествоДнейДействия = УчетПСНКлиентСервер.КоличествоДней(Объект.ДатаНачала, Объект.ДатаОкончания);
		
		Форма.Элементы.НадписьКоличествоДнейДействия.Заголовок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 день;;%1 дня;%1 дней;%1 дня'"), КоличествоДнейДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборКода(ИмяКода, НазваниеМакета)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Патенты");
	ПараметрыФормы.Вставить("НазваниеМакета",  НазваниеМакета);
	ПараметрыФормы.Вставить("ТекущийПериод",   Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ТекущийКод",      Объект[ИмяКода]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКода", ИмяКода);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборКодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт
	
	ИмяКода = ДополнительныеПараметры.ИмяКода;
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект[ИмяКода] = ВыбранныйКод;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда 
		Объект.КодПоОКТМО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НалоговыйОрган, "КодПоОКТМО");
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНалоговомОргане();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасчетНалога()
	
	НалогПоПатенту = УчетПСНКлиентСервер.НалогПоПатенту(
		Объект.ПотенциальноВозможныйГодовойДоход,
		Объект.ДатаНачала,
		Объект.ДатаОкончания,
		Объект.НалоговаяСтавка);
	
	ПересчитатьСуммыПлатежей();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПлатежей()
	
	РасчетПлатежей = УчетПСНКлиентСервер.РасчетПлатежейПоПатенту(НалогПоПатенту, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьЗначенияСвойств(Объект, РасчетПлатежей);
	
	УстановитьПредставлениеОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуНалога()
	
	НалогПоПатенту = Объект.СуммаПервогоПлатежа + Объект.СуммаВторогоПлатежа;
	
	УстановитьПредставлениеОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПатент()
	
	ДанныеПатента = ДанныеПатента(Объект.Ссылка);
	
	ОписаниеПараметровОплаты = ОписаниеОплатыПатента(ДанныеПатента);
	
	ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеПараметровОплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПатента(ДокументПатент)
	
	Возврат Документы.ОперацияСПатентом.ДанныеПатентаДляОплаты(ДокументПатент);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеОплатыПатента(ДанныеПатента)
	
	Возврат Документы.ОперацияСПатентом.ОписаниеОплатыПатента(ДанныеПатента);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды 

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
