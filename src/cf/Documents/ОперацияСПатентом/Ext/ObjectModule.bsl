#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если Не ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
			Если ДанныеЗаполнения.Свойство("ДатаОкончания") Тогда
				ДатаНачала = НачалоГода(ДанныеЗаполнения.ДатаОкончания);
			Иначе
				ДатаНачала = НачалоГода(ОбщегоНазначения.ТекущаяДатаПользователя());
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДанныеЗаполнения.Свойство("ДатаОкончания") Тогда
			ДатаОкончания = КонецГода(ДатаНачала);
		КонецЕсли;
		
	КонецЕсли;
	
	НалоговаяСтавка = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СуммаОсвобожденияОтНалога = 0;
	
	Дата          = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ОперацияСПатентом.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица начисления налога
	ТаблицаНачисленияНалога = УчетПСН.ПодготовитьТаблицуНачисленияНалога(ПараметрыПроведения.Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Бухгалтерский учет
	УчетПСН.СформироватьПроводкиПоНалогу(
		ПараметрыПроведения.Реквизиты,
		ТаблицаНачисленияНалога,
		Движения,
		Отказ);
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		ДатаНачалаДействияПСН = УчетПСН.ДатаНачалаДействияПатентнойСистемы();
		
		Если ДатаНачала >= ДатаОкончания Тогда
			ТекстОшибки = НСтр("ru = 'Неверно задан период'");
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", "Дата окончания", , , ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ДатаОкончания", "Объект", Отказ);
		ИначеЕсли ДатаНачала > ДатаНачалаДействияПСН И Год(ДатаНачала) <> Год(ДатаОкончания) Тогда
			ТекстОшибки = НСтр("ru = 'Патент выдается на период от одного до двенадцати месяцев включительно в пределах календарного года'");
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", "Дата окончания", , , ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ДатаОкончания", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПересечениеПатентовПоВидуДеятельности(Отказ);
	
	Если ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации Тогда
		НепроверяемыеРеквизиты.Добавить("НалоговыйОрган");
		НепроверяемыеРеквизиты.Добавить("КодПоОКТМО");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПоявиласьНоваяКатегорияПодчиненияПоВидуНалога") Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Организация не применяет ПСН в выбранном периоде'"), , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	// Необходимо, чтобы дата документа была датой начала действия патента
	Дата = ДатаНачала;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПересечениеПатентовПоВидуДеятельности(Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийПатент",   Ссылка);
	Запрос.УстановитьПараметр("ВидДеятельности", Патент);
	Запрос.УстановитьПараметр("ДатаНачала",      ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",   ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Патент = &ВидДеятельности
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.Ссылка <> &ТекущийПатент
	|	И (ОперацияСПатентом.ДатаНачала <= &ДатаНачала
	|				И ОперацияСПатентом.ДатаОкончания >= &ДатаНачала
	|			ИЛИ ОперацияСПатентом.ДатаНачала <= &ДатаОкончания
	|				И ОперацияСПатентом.ДатаОкончания >= &ДатаОкончания
	|			ИЛИ ОперацияСПатентом.ДатаНачала > &ДатаНачала
	|				И ОперацияСПатентом.ДатаОкончания < &ДатаОкончания)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сроки действия патентов, полученных на один вид деятельности, не должны пересекаться.'"), ,
			"ДатаНачала", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли