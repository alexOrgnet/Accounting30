// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		УстановитьДеятельностьНаТорговомСборе();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение();
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		СсылкаНаСчетФактуру = ?(СчетФактура = Неопределено, Документы.СчетФактураПолученный.ПустаяСсылка(), СчетФактура);
		СчетФактураРедактирование = Элементы.СчетФактураПолученный;
	ИначеЕсли Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда 
		СсылкаНаСчетФактуру = ?(СчетФактура = Неопределено, Документы.СчетФактураВыданный.ПустаяСсылка(), СчетФактура);
		СчетФактураРедактирование = Элементы.СчетФактураВыданный;
	Иначе
		СсылкаНаСчетФактуру = Неопределено;
	КонецЕсли;
	
	Если СсылкаНаСчетФактуру <> Неопределено Тогда
		УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
			СсылкаНаСчетФактуру,
			Элементы.СчетФактураПросмотр,
			СчетФактураРедактирование);
	КонецЕсли; 
		
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Объект.Сделка)
		И (ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		Или ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
		РНПТПодбираетсяПоОстаткам = Истина;
	Иначе
		РНПТПодбираетсяПоОстаткам = Ложь;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	//ИнтеграцияГИСМ
	Элементы.ФормаВыгрузитьВГИСМ.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
	//Конец ИнтеграцияГИСМ
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	// Конец ГОСИС

	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ВозвратТоваровОтПокупателя",
		"ФормаДокументаОбщая",
		НСтр("ru='Новости: Возврат товаров от покупателя'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Патенты.Форма.ФормаЭлемента" Тогда
		
		ЗаполнитьПатентОбработкаВыбора(ВыбранноеЗначение);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданныйКорректировочный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбОстаткахПрослеживаемыхТоваров" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ПервичныйДокумент") 
		И Объект.Ссылка = Параметр.ПервичныйДокумент  Тогда
		
		УстановитьПредставлениеНадписиУведомление();
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Подсистема ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец подсистемы ГОСИС
	
	Если ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Тогда
		ОбработкаОповещенияНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ГосИС

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеВозвратТоваровОтПокупателя";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПокупателюВыставляетсяКорректировочныйСчетФактура 
		И (ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
			ИЛИ ЕстьПодчиненныеСчетаФактурыВыданныеНаРеализацию(ТекущийОбъект.Ссылка)) Тогда
			
		Для каждого СтрокаТовары Из ТекущийОбъект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.ИсправляемыйДокумент) Тогда
				Префикс = "Товары[" + Формат(СтрокаТовары.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				
				ТекстСообщения = НСтр("ru = 'Номенклатуры %1 по цене %2 нет в документе %3 и корректировках к нему. 
					|Для изменения цены используйте документ ""Корректировка реализации"".'");
					
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					СтрокаТовары.Номенклатура, 
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаТовары.Цена), 
					ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ТекущийОбъект.Сделка));
					
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Номенклатура'"),
					СтрокаТовары.НомерСтроки, "Товары", ТекстСообщения);
					
				Поле = Префикс + "Номенклатура";
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект.Ссылка, Поле, "Объект", Отказ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ТекущийОбъект.Ссылка);
	СчетаФактурыНеТребуются = Документы.ВозвратТоваровОтПокупателя.СчетаФактурыНеТребуются(МассивДокументов);
	
	Если ТекущийОбъект.ЭтоУниверсальныйДокумент
	   И СчетаФактурыНеТребуются.Количество() = 0 Тогда
		ПараметрыЗаписи.Вставить("ВыписатьСчетФактуру", Истина);
	КонецЕсли;
	
	Если ТекущийОбъект.ПокупателюВыставляетсяКорректировочныйСчетФактура 
		И ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") Тогда
		
		ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
		ПараметрыСоздания.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСоздания.ЭтоУниверсальныйДокумент = ТекущийОбъект.ЭтоУниверсальныйДокумент;
		ПараметрыСоздания.КодВидаОперации = КодВидаОперации;
		ПараметрыСоздания.УникальныйИдентификатор = УникальныйИдентификатор;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
		
		Если Не УчетНДСБП.НужноОжидатьОкончаниеАктуализации(Результат, ПараметрыЗаписи) Тогда
			ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ТекущийОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат 
		И ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру")
		И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
		ПараметрыСозданияСчетаФактуры.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = НомерСчетаФактурыПолученного;
		ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ДатаСчетаФактурыПолученного;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	ОтобразитьПолеУКД(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ГосИС

	РаботаСДоговорамиКонтрагентовБП.СохранитьСпособВыставленияДокументов(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиент.ОжидатьОкончаниеАктуализации(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ВозвратТоваровОтПокупателя", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		РаботаСНоменклатуройКлиентБП.ПослеЗаписи_ФормаДокумента();
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ГосИС
	СобытияФормИСКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ГосИС
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ПроверкаЗаполнения(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект), Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	НастройкиНалоговИОтчетовПредупреждениеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	// ГосИС
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// Конец ГосИС
	
КонецПроцедуры


#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	ОбновитьСрокОтправкиУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
	КонтрагентПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДоговорКонтрагентаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	
	ВведенноеЗначение = ?(Элемент.ТекстРедактирования = Строка(Объект.ДоговорКонтрагента),
		"", Элемент.ТекстРедактирования);
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорСоздание(
		Элемент, ВведенноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	Иначе
		ТипЦенСклада = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСклада    = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)

	УстановитьРеквизитыПримененияПрослеживаемости();

	УстановитьРеквизитыСделки(ЭтаФорма);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
	Если (НЕ ЗначениеЗаполнено(Объект.Сделка) И ПрименяетсяУСНПатент) 
		ИЛИ РаздельныйУчетТорговыйСборПриУСН Тогда
		
		УстановитьДеятельностьНаТорговомСборе();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сделка) 
		И ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		И Объект.Товары.Количество() = 0 Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыСделки(Объект.Сделка));
		ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Заполнить");
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сделка)
		И (ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		Или ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
		РНПТПодбираетсяПоОстаткам = Истина;
	Иначе
		РНПТПодбираетсяПоОстаткам = Ложь;
	КонецЕсли;

	СделкаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	Иначе
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВКнигеПокупокПриИзменении()

	ПокупателемВыставляетсяСчетФактураНаВозвратПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаТорговомСбореПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаТорговомСборе И Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		ДеятельностьНаПатентеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеПриИзменении(Элемент)
	
	УчетПСНКлиент.ПатентПриИзменении(ЭтотОбъект, Объект.Патент, ПатентПредставление);
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетПСНКлиент.ПатентОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеНДССчетФактураПоставщикаПриИзменении(Элемент)
	СпособРегистрацииСчетФактурыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура УКДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУКДНажатие(Элемент, СтандартнаяОбработка)
	
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПДВыданный(ЭтотОбъект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеНДСКорректировочныйПриИзменении(Элемент)
	СпособРегистрацииСчетФактурыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеНДСПриИзменении(Элемент)
	СпособРегистрацииСчетФактурыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	ЕстьТоварыОблагаемыеНДСПоСтавке0 = Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтаФорма);

	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Копирование И ИспользоватьКонтрольныеЗнакиГИСМ Тогда
		Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
	КонецЕсли;
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		
		Если Элемент.ТекущиеДанные.ПрослеживаемыйТовар Тогда
			Элемент.ТекущиеДанные.РНПТ = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ТоварыПриОкончанииРедактированияНаСервере();
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, КоличествоДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, КоличествоПослеИзменения, СуммаПослеИзменения, СуммаНДСПослеИзменения,
		|НомерГТД, СтранаПроисхождения, ОтражениеВУСН,
		|Всего, СчетДоходовВедетсяУчетПоНоменклатурнымГруппам,
		|ПродукцияМаркируемаяДляГИСМ, ПрослеживаемыйТовар, ИдентификаторСтроки, РНПТ, ПодсказкаРНПТ, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ДеятельностьНаПатенте, Реализация, Сделка, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ТекущиеДанные.ИсправляемыйДокумент = Неопределено;
	
	ОтобразитьСубконтоСчетаДоходов = ОтобразитьСубконтоСчетаДоходов ИЛИ НЕ ТекущиеДанные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	Элементы.ТоварыСубконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетДоходов)
		ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетДоходов).КоличествоСубконто = 0));
		
	СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТабличнойЧасти.СчетДоходов);
		
	Если ИспользоватьОднуНоменклатурнуюГруппу И СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам Тогда
		
		СтрокаТабличнойЧасти.Субконто = ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходов = ОтобразитьСубконтоСчетаДоходов ИЛИ НЕ СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И (ЭтоКомиссия Или РНПТПодбираетсяПоОстаткам) Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСебестоимостьПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ИсправляемыйДокумент = Неопределено;
	
	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТоварыРНПТ" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			Если ЭтоВозвратОтРозничногоПокупателя Тогда
				ПараметрыФормыПодбора.ЭтоПоступление = Ложь;
				ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
				ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
			Иначе
				ПараметрыФормыПодбора.ЭтоПоступление = Не ЭтоКомиссия;
				ПараметрыФормыПодбора.ЭтоКомиссия = ЭтоКомиссия ИЛИ ЭтоВозвратНаКомиссию;
				ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
				ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	
	Если ЭтоВозвратОтРозничногоПокупателя Тогда
		ПараметрыФормыПодбора.ЭтоПоступление = Ложь;
		ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
		ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
	Иначе
		ПараметрыФормыПодбора.ЭтоПоступление = Не ЭтоКомиссия;
		ПараметрыФормыПодбора.ЭтоКомиссия = ЭтоКомиссия Или ЭтоВозвратНаКомиссию;
		ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
		ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ДеятельностьНаПатенте");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма);
	
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРеализации(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализации(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРеализацииТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("ВозвратнаяТара", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализацииТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("ВозвратнаяТара", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВГИСМ(Команда)
	ИнтеграцияГИСМКлиентБП.КомандаВыгрузитьВГИСМ(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДокументОтгрузкиСодержитНДС(Знач ДокументОтгрузки)
	
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		
		ДокументОтгрузки = Документы.ВозвратТоваровОтПокупателя.ИсходныйДокументОтгрузки(ДокументОтгрузки);
		
		Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", ДокументОтгрузки.Метаданные()) Тогда
			Возврат Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ДокументБезНДС");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыСделки(Знач ДокументОтгрузки)
	
	ДокументОтгрузки = Документы.ВозвратТоваровОтПокупателя.ИсходныйДокументОтгрузки(ДокументОтгрузки);
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, "СуммаВключаетНДС");
	
КонецФункции


// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// Процедура добавляет группу условий УО при которых заполнение сделки не является необходимым.
// Также см. ОбработкаПроверкиЗаполнения() для документа.
&НаСервереБезКонтекста
Процедура ДобавитьГруппуУсловийНеобходимостьСделки(ГруппаРодитель, ТипГруппы)
	
	ГруппаУсловий = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаРодитель.Элементы, ТипГруппы);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаУсловий,
		"ПлательщикНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаУсловий,
		"ВидДоговора", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	ГруппаУсловийИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаУсловий.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаУсловийИЛИ,
			"Объект.ПокупателемВыставляетсяСчетФактураНаВозврат", ВидСравненияКомпоновкиДанных.Равно, ЛОЖЬ);
		
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаУсловийИЛИ.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНЕ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				"ВидДоговора", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				"ЕстьТоварыОблагаемыеНДСПоСтавке0", ВидСравненияКомпоновкиДанных.Равно, ЛОЖЬ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Сделка 
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Сделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ДобавитьГруппуУсловийНеобходимостьСделки(ЭлементУО.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Сделка");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Сделка", ВидСравненияКомпоновкиДанных.Заполнено);
		
		ДобавитьГруппуУсловийНеобходимостьСделки(ГруппаОтбора1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНЕ);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УказанаПартия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

    //НомерЗаказа
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерЗаказа");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтчетМаркетплейса", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поля не используются при комиссии на продажу.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыПереданныеСчетУчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПереданныеСчетУчета");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// Возврат отгруженных товаров: скрываются счета выручки, расходов, НДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

	// СчетУчетаРасчетовПоТаре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСчетУчетаНДСПоРеализации, ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ТоварыНомерГТД
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);  
	
	// ТоварыСтранаПроисхождения
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	// ТоварыОтражениеВУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УказанаПартия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходов", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто", ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходов", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);



	// ТоварыСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, '20190101');

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПодсказкаРНПТ");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВозвратИзЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РНПТ заполняется Авто
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РНПТПодбираетсяПоОстаткам", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	// РНПТ заполняется вручную
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));
	
	// Заполнение РНПТ не требуется
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РНПТПодбираетсяПоОстаткам", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// КиЗ_ГИСМ только для товаров
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
		ОтобразитьСубконтоСчетаДоходов = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Товары);
	Иначе
		ОтобразитьСубконтоСчетаДоходов = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары Тогда
		Элементы.Склад.Видимость = Ложь;
		Элементы.ГруппаВозвратнаяТара.Видимость = Ложь;
		
	КонецЕсли;
	
	ЭтоПродажаКомиссия = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
			
		ТипЦенСклада = РеквизитыСклада.ТипЦенРозничнойТорговли;
		ТипСклада    = РеквизитыСклада.ТипСклада;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		УказанаПартия = ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
			И ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС");
		ЭтоВозвратОтРозничногоПокупателя = ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
			"ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВидДоговора          = РеквизитыДоговора.ВидДоговора;
		ЭтоКомиссия          = (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		РасчетыВУЕ           = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		
	Иначе
		
		Если НЕ ЭтоВозвратОтРозничногоПокупателя
			и НЕ УказанаПартия
			и ЗначениеЗаполнено(Объект.Контрагент) 
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
		КонецЕсли;
		РасчетыВУЕ        = Ложь;
		
	КонецЕсли;
	
	ЭтоВозвратНаКомиссию = (Объект.ВидОперации =
			ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары"));
	
	// Переключать способ отражения в учете НДС можно лишь есть есть права на редактирование обоих видов документов
	ЕстьПравоРедактированияСчетаФактуры = ПравоДоступа("Редактирование", Метаданные.Документы.СчетФактураВыданный) 
		И ПравоДоступа("Редактирование", Метаданные.Документы.СчетФактураПолученный);
		
	ДокументОтгрузкиСодержитНДС = ДокументОтгрузкиСодержитНДС(Объект.Сделка);
	ВозвратОтгруженныхТоваров = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары
								ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары);
	ВозвратБезВычета = ВозвратОтгруженныхТоваров 
		И Не УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);

	ТребуетсяСчетФактура = Не ЭтоКомиссия 
		И Не ЭтоВозвратОтРозничногоПокупателя 
		И (ПлательщикНДС ИЛИ ДокументОтгрузкиСодержитНДС)
		И Не ВозвратБезВычета;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	Элементы.ГруппаТовары.Заголовок =
		?(Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование,
		НСтр("ru='Оборудование'"), НСтр("ru='Товары'"));
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	ЕстьТоварыОблагаемыеНДСПоСтавке0 = Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
	УстановитьСпособРегистрацииСчетФактуры(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости = 
		СравнитьДатуРеализацииСДатойНачалаУчетаПрослеживаемостиТоваров(Объект.Сделка);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовокФормы();
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
	// Для заполненного документа сразу выводим напоминание о корректировочном уведомлении в подвале документа если требуется.
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОбУведомлении();
	УстановитьПредставлениеНадписиУведомление();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСпособРегистрацииСчетФактуры(Форма)

	Объект = Форма.Объект;
	Если Объект.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда 
		Форма.СпособРегистрацииСчетФактуры = 0;
	ИначеЕсли Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		ФОрма.СпособРегистрацииСчетФактуры = 1;
	Иначе
		Форма.СпособРегистрацииСчетФактуры = 2;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	СпособОценкиТоваровВРознице    = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = 
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	РеализацияВЕАЭС                  = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	УпрощенныйУчетНДС                = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДС                    = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ                   = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент             = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент       = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет                 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	РаздельныйУчетТорговыйСборПриУСН = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата);
	ИспользоватьКонтрольныеЗнакиГИСМ = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ") 
									 И ИнтеграцияГИСМКлиентСерверБП.МожноИспользоватьКонтрольныеЗнакиГИСМ(Объект.Дата);
	УчитыватьТаруЗаБалансом          = УчетнаяПолитика.УчитыватьТаруЗаБалансом(Объект.Организация, Объект.Дата);
	УстановитьРеквизитыПримененияПрослеживаемости();
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = УчетПСН.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	ВедетсяУчетПрослеживаемыхТоваров = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
		
	РасчетВозвратаСУчетомРекомендацийПоНДС = УчетВзаиморасчетов.ПрименяетсяРасчетКорректировокВВалютеПоКурсуНаДатуОтгрузки(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

// Внешний вид, содержание надписей и т.п.
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Шапка
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность             = НЕ Форма.ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ВозвратОтгруженныхТоваров = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары")
								ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары"));
	
	Элементы.Сделка.Заголовок = ?(ВозвратОтгруженныхТоваров, НСтр("ru='Документ отгрузки'"), НСтр("ru='Документ реализации'"));
	
	// Управление видимостью патента.
	
	Элементы.ГруппаДеятельностьНаПатенте.Видимость = Не ЗначениеЗаполнено(Объект.Сделка);
	Элементы.Патент.Доступность     = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость       = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступШапка.Видимость  = Не ЗначениеЗаполнено(Объект.Сделка) И Форма.ПрименяетсяУСНПатент И НЕ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступПодвал.Видимость = Не ЗначениеЗаполнено(Объект.Сделка) И Форма.ПрименяетсяУСНПатент И НЕ Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ДеятельностьНаТорговомСборе.Видимость = Форма.РаздельныйУчетТорговыйСборПриУСН И Не ЗначениеЗаполнено(Объект.Сделка);
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Товары
	
	ТоварыНоменклатураПараметрыВыбора = Новый Массив;
	ТоварыНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь)); 
	ТоварыНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Заголовок", Элементы.ГруппаТовары.Заголовок)); 
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ТоварыНоменклатураПараметрыВыбора);
	
	Элементы.ТоварыКиЗ_ГИСМ.Видимость      = Форма.ИспользоватьКонтрольныеЗнакиГИСМ И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Товары");
	Элементы.ФормаВыгрузитьВГИСМ.Видимость = Форма.ИспользоватьКонтрольныеЗнакиГИСМ И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Товары");
	
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров 
			ИЛИ (Форма.ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости И НЕ Форма.ЭтоКомиссия) Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.ТоварыГруппаРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	
	// Расчеты
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.СчетУчетаРасчетовСКонтрагентом.Доступность = НЕ Форма.ЭтоКомиссия;
	Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость   = ПользовательУправляетСчетамиУчета И Не ВозвратОтгруженныхТоваров;
	Элементы.СчетУчетаРасчетовПоАвансам.Доступность     = НЕ Форма.ЭтоКомиссия;
	
	Элементы.СчетУчетаРасчетовПоТаре.Видимость = НЕ Форма.УчитыватьТаруЗаБалансом;
	
	Элементы.ГруппаРасчеты.Видимость                  = ПользовательУправляетСчетамиУчета ИЛИ Форма.ЭтоВозвратОтРозничногоПокупателя;
	Элементы.НомерРасходноКассовогоОрдера.Доступность = Форма.ЭтоВозвратОтРозничногоПокупателя;
	Элементы.ДатаРасходноКассовогоОрдера.Доступность  = Форма.ЭтоВозвратОтРозничногоПокупателя;
	
	// НДС
	
	Элементы.ГруппаНДС.Видимость = Форма.ЕстьПравоРедактированияСчетаФактуры И Форма.ТребуетсяСчетФактура;
	
	Элементы.ОтразитьВКнигеПокупок.Доступность =  НЕ Объект.ПокупателемВыставляетсяСчетФактураНаВозврат;
	Элементы.РеквизитыНДС.Видимость = НЕ Форма.ИспользуетсяПостановлениеНДС1137;
	
	Элементы.СчетФактураПросмотр.Видимость = Форма.ТребуетсяСчетФактура 
		И (Объект.ПокупателемВыставляетсяСчетФактураНаВозврат ИЛИ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
	Элементы.СчетФактураВыданный.Видимость = Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	Элементы.СчетФактураПолученный.Видимость = Объект.ПокупателемВыставляетсяСчетФактураНаВозврат;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.ЭтоУниверсальныйДокумент И Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	ОтобразитьПолеУКД(Форма);
		
	Элементы.НомерСчетаФактурыПолученного.Доступность = Объект.ПокупателемВыставляетсяСчетФактураНаВозврат;
	Элементы.ДатаСчетаФактурыПолученного.Доступность  = Объект.ПокупателемВыставляетсяСчетФактураНаВозврат;
	Элементы.ЗарегистрироватьСчетФактуру.Доступность  = Объект.ПокупателемВыставляетсяСчетФактураНаВозврат;
	
	Если Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		ТекстЗаголовка = НСтр("ru='Корр. счет-фактура'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Счет-фактура'");
	КонецЕсли;
	
	Элементы.НадписьСчетФактура.Заголовок = ТекстЗаголовка;
	
	Форма.ПатентПредставление = УчетПСНКлиентСервер.ВыбранныйПатентПредставление(
		Объект.Патент, УчетПСНКлиентСервер.СписокПатентов(Форма));
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьПолеУКД(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.УКД.Видимость = Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	Элементы.ПредставлениеУКД.Видимость = Объект.ЭтоУниверсальныйДокумент И Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	
	Если Не Объект.ЭтоУниверсальныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	НадписьСчетФактураПредставление = "";
	КодВидаОперацииПредставление = НСтр("ru='01'");
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		НадписьСчетФактураПредставление = СтрШаблон("%1, ",
			Форма.НадписьСчетФактура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.КодВидаОперации) Тогда
		КодВидаОперацииПредставление = Форма.КодВидаОперации;
	КонецЕсли;
	
	Форма.ПредставлениеУКД = СтрШаблон("%1код вида операции %2",
		НадписьСчетФактураПредставление,
		КодВидаОперацииПредставление);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Возврат'");
	
	Если ЭтоВозвратНаКомиссию Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' товаров: Выкупленные комиссионером'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтруктураНадписи = Новый Структура(
	"СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	ЗапретитьКорректироватьКурсВалютыВФорме = Форма.РасчетВозвратаСУчетомРекомендацийПоНДС
		И ЗначениеЗаполнено(Объект.Сделка)
		И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
	Если НЕ ЗапретитьКорректироватьКурсВалютыВФорме Тогда
		СтруктураНадписи.Вставить("ВалютаДокумента",                Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("Курс",                           Объект.КурсВзаиморасчетов);
		СтруктураНадписи.Вставить("Кратность",                      Объект.КратностьВзаиморасчетов);
		СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
		
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;

	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	

	Если Форма.ИспользоватьТипыЦенНоменклатуры
		ИЛИ (((Форма.ЕстьВалютныйУчет И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета)
		ИЛИ Форма.РасчетыВУЕ) И НЕ ЗапретитьКорректироватьКурсВалютыВФорме) Тогда
		
		Элементы.ЦеныИВалюта.Гиперссылка = Истина;
		
	Иначе
		Элементы.ЦеныИВалюта.Гиперссылка = НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	КонецЕсли;
	
КонецПроцедуры 

// Обслуживание счета-фактуры:

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)
	Объект = Форма.Объект;
	
	Если Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда 
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(Форма, РеквизитыСФ, Форма.ТребуетсяСчетФактура);
	ИначеЕсли Объект.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда 
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(Форма, РеквизитыСФ, Форма.ТребуетсяСчетФактура);
	КонецЕсли; 

КонецПроцедуры

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()
	
	ЗапретитьКорректироватьКурсВалютыВФорме = РасчетВозвратаСУчетомРекомендацийПоНДС
		И ЗначениеЗаполнено(Объект.Сделка)
		И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
		
	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен"              , Объект.ТипЦен);
	СтруктураПараметров.Вставить("ЗапретитьКорректироватьКурсВалютыВФорме", ЗапретитьКорректироватьКурсВалютыВФорме);
	Если НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ЭтоПоступление"      , Истина);
	СтруктураПараметров.Вставить("ТолькоПросмотр"      , ТолькоПросмотр);

	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (((ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ) И НЕ ЗапретитьКорректироватьКурсВалютыВФорме) Тогда
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС = СуммаВключаетНДСДоИзменения
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 	= Объект.ВалютаДокумента;
		КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
		КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Если НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
			Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Иначе
			СтруктураЦеныИВалюта.ПересчитатьНДС = Ложь;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры,
				Объект.ТипЦен,
				Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		Префикс = "Товары[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
									   ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Префикс, ЦенаВключаетНДС);
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		Префикс = "ВозвратнаяТара[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
									   ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Префикс, ЦенаВключаетНДС);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС,
										ЕстьНДС, ЗначениеПустогоКоличества, Префикс, ЦенаВключаетНДС)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
								ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
								УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("ВидОперации");
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары
		И Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		Объект.Патент                = Неопределено;
	КонецЕсли;
	
	УстановитьДеятельностьНаТорговомСборе();
	
	МассивВидовДоговоров = ПолучитьМассивВидовДоговоров(Объект.ВидОперации);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Объект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
			Объект.ВозвратнаяТара.Очистить();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
	
	УстановитьПараметрыВыбора(ЭтаФорма);

	УстановитьЗаголовокФормы();
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Товары, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	
	Если Не ЗначениеЗаполнено(Объект.Сделка) Тогда
		ОбновитьПризнакПрослеживаемости();
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.ОтразитьВКнигеПокупок = Истина;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	УчетПСН.ДатаПриИзменении(Объект);
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	УстановитьДеятельностьНаТорговомСборе();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	УстановитьДеятельностьНаТорговомСборе();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения);
	КонецЕсли;
	
	ВозвратОтгруженныхТоваров = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары
								ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары);
	ВозвратБезВычета = ВозвратОтгруженныхТоваров 
		И Не УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	
	ТребуетсяСчетФактура = Не ЭтоКомиссия 
		И Не ЭтоВозвратОтРозничногоПокупателя 
		И (ПлательщикНДС ИЛИ ДокументОтгрузкиСодержитНДС)
		И Не ВозвратБезВычета;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ВидДеятельностиПоПатентуПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если ЭтоКомиссия Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		
	Иначе
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
		
		Если Не Объект.ДеятельностьНаТорговомСборе Тогда
			УстановитьДеятельностьНаТорговомСборе();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыВыбора(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	СкладОбработатьИзменение();	
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкладОбработатьИзменение()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Склад");
	
	СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
	ТипСклада      = СвойстваСклада.ТипСклада;
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	
	Если ЗначениеЗаполнено(Объект.Сделка)
		И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		И УчетПоПродажнойСтоимости Тогда
		
		СкладОтчетаОРозничныхПродажах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "Склад");
		
		Если СкладОтчетаОРозничныхПродажах <> Объект.Склад
			И ЗначениеЗаполнено(Объект.Склад)
			И ЗначениеЗаполнено(СкладОтчетаОРозничныхПродажах) Тогда
			
			Объект.Сделка = Неопределено;
			УстановитьРеквизитыСделки(ЭтаФорма);

		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДеятельностьНаТорговомСборе();
	
	ЗаполнитьСчетаУчета("Склад", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СделкаПриИзмененииНаСервере()
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
	ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости = 
		СравнитьДатуРеализацииСДатойНачалаУчетаПрослеживаемостиТоваров(Объект.Сделка);
		
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДеятельностьНаТорговомСборе()
	
	Документы.ВозвратТоваровОтПокупателя.УстановитьДеятельностьНаТорговомСборе(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
		
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения)

	ПричиныИзменения.Добавить("Контрагент");
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если ВедетсяУчетПрослеживаемыхТоваров 
			И Объект.СведенияПрослеживаемости.Итог("Сумма") <> 0 Тогда
			ПрослеживаемостьФормыБП.ПересчитатьСуммыВВалютеПоКомплектам(ЭтотОбъект);
		КонецЕсли;
		
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;

	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ВедетсяУчетПрослеживаемыхТоваров 
		И Объект.СведенияПрослеживаемости.Итог("Сумма") <> 0 Тогда
			ПрослеживаемостьФормыБП.ПересчитатьСуммыВВалютеПоКомплектам(ЭтотОбъект);
	КонецЕсли;

	ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ДоговорКонтрагента");
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	// Отчет о розн. продажах не должен очищаться при выборе физлица, которое возвращает товар
	Если ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Объект.Сделка = Неопределено;
		УстановитьРеквизитыСделки(ЭтаФорма);
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, РасчетыВУсловныхЕдиницах");
	
	ПараметрыДоговора        = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(Объект.ДоговорКонтрагента);
	Объект.ЭтоУниверсальныйДокумент = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");;
	КонецЕсли;
	
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	ВидДоговора = РеквизитыДоговора.ВидДоговора;
	ЭтоКомиссия = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ТребуетсяСчетФактура = Не ЭтоКомиссия 
		И Не ЭтоВозвратОтРозничногоПокупателя 
		И (ПлательщикНДС ИЛИ ДокументОтгрузкиСодержитНДС)
		И Не ВозвратБезВычета;
		
	Если ЭтоКомиссия Тогда
		Объект.ДеятельностьНаПатенте	= Ложь;
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	РасчетыВУЕ = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	
	ЗаполнитьСчетаУчета("ДоговорКонтрагента", ПричиныИзменения);
	
	УстановитьПараметрыВыбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыСделки(Форма)
	
	Объект = Форма.Объект;

	Форма.УказанаПартия = ЗначениеЗаполнено(Объект.Сделка) 
		И ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		И ТипЗнч(Объект.Сделка) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС");
	Форма.ЭтоВозвратОтРозничногоПокупателя = ЗначениеЗаполнено(Объект.Сделка)
		И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	Форма.ТребуетсяСчетФактура = Не Форма.ЭтоКомиссия 
		И Не Форма.ЭтоВозвратОтРозничногоПокупателя 
		И (Форма.ПлательщикНДС ИЛИ Форма.ДокументОтгрузкиСодержитНДС)
		И Не Форма.ВозвратБезВычета;
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		Если Форма.ЭтоВозвратОтРозничногоПокупателя Тогда
			Объект.ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;
			Форма.НомерСчетаФактурыПолученного = "";
			Форма.ДатаСчетаФактурыПолученного = '00010101';
			
			// Подставим склад из отчета о розничных продажах
			Если Форма.УчетПоПродажнойСтоимости Тогда
				Форма.УстановитьСкладРозничнаяПродажа();
			КонецЕсли;
		Иначе
			Объект.НомерРасходногоКассовогоОрдера = "";
			Объект.ДатаРасходногоКассовогоОрдера = '00010101';
		КонецЕсли;
		Форма.ДокументОтгрузкиСодержитНДС = ДокументОтгрузкиСодержитНДС(Объект.Сделка);
		Если НЕ Форма.ДокументОтгрузкиСодержитНДС Тогда
			Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьСпособРегистрацииСчетФактуры(Форма);
	ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	УправлениеФормой(Форма);
КонецПроцедуры 

&НаСервере
Процедура УстановитьСкладРозничнаяПродажа() Экспорт
	Объект.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "Склад");
	СкладОбработатьИзменение();
КонецПроцедуры

&НаКлиенте
Процедура ПокупателемВыставляетсяСчетФактураНаВозвратПриИзмененииНаКлиенте()
	
	Если НЕ Объект.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		ЭтаФорма.НомерСчетаФактурыПолученного = "";
		ЭтаФорма.ДатаСчетаФактурыПолученного = '00010101';
	Иначе
		Объект.ОтразитьВКнигеПокупок = Истина;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровОтПокупателя,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	ДатаДокумента = ДанныеОбъекта.Дата;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Сделка) Тогда
		ДанныеОбъекта.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Сделка, "Дата");
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, 
		ДанныеОбъекта, 
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
			
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ	= СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
		Если СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли;
		Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда 
			СведенияПрослеживаемости = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДату(
				СтрокаТабличнойЧасти.Номенклатура, ДатаДокумента);
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияПрослеживаемости.ПрослеживаемыйТовар
			Или СведенияПрослеживаемости.ПрослеживаемыйКомплект;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияПрослеживаемости.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

	КонецЕсли;
	
	// ГОСИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтрокаТабличнойЧасти);
	// Конец ГОСИС
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении( 
		Документы.ВозвратТоваровОтПокупателя,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ВозвратнаяТара",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	РассчитатьПоказателиПослеИзменения(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Количество") Тогда
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.Цена = 0;
		Иначе
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	РассчитатьПоказателиПослеИзменения(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	РассчитатьПоказателиПослеИзменения(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	РассчитатьПоказателиПослеИзменения(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказателиПослеИзменения(СтрокаТаблицы)
	Если НЕ СтрокаТаблицы.Свойство("КоличествоПослеИзменения") Тогда
		Возврат;
	КонецЕсли; 

	СтрокаТаблицы.КоличествоПослеИзменения = СтрокаТаблицы.КоличествоДоИзменения - СтрокаТаблицы.Количество;
	СтрокаТаблицы.СуммаПослеИзменения      = СтрокаТаблицы.СуммаДоИзменения      - СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СуммаНДСПослеИзменения   = СтрокаТаблицы.СуммаНДСДоИзменения   - СтрокаТаблицы.СуммаНДС;

КонецПроцедуры 

// Заполнение документа данными документов-оснований:

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)
	
	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран договор контрагента!'"));
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбрана валюта взаиморасчетов по договору!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ДополнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ДоговорКонтрагента, Проведен", Объект.ДоговорКонтрагента, Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
		
	Иначе
		
		ДокументРеализации = Объект.Сделка;
		
		ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		Если ДополнительныеПараметры.ТабличнаяЧасть = "Товары" Тогда
			Объект.СведенияПрослеживаемости.Очистить();
		КонецЕсли;
		ДополнитьТабличнуюЧастьПоРеализации(ДополнительныеПараметры.ТабличнаяЧасть, ДополнительныеПараметры.СпособЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументРеализации = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;
	
	ТабличнаяЧасть   = ДополнительныеПараметры.ТабличнаяЧасть;
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения)
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя заполнять на основании документа расчетов с контрагентом.'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле",
			"Корректность",
			НСтр("ru = 'Документ отгрузки'"),
			,
			,
			ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Сделка", "Объект", Истина);
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполнитьТабличнуюЧастьПоРеализацииНаСервере(ДокументРеализации, СпособЗаполнения, ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииНаСервере(ДокументРеализации, СпособЗаполнения, ТабличнаяЧасть)
	
	ДокументРеализации = Документы.ВозвратТоваровОтПокупателя.ИсходныйДокументОтгрузки(ДокументРеализации);
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда
		
		Если ТабличнаяЧасть = "Товары" Тогда
			ЗаполнитьТоварыПоОснованию(ДокументРеализации);
		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
			ЗаполнитьВозвратнуюТаруПоРеализации(ДокументРеализации);
		КонецЕсли;
		
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору
		
		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, ТабличнаяЧасть);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(Знач ДокументОснование)
	
	ТоварыПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументОснование);
	Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
		Объект.Товары.Загрузить(ТоварыПоДаннымОснования);
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратнуюТаруПоРеализации(ДокументОснование)
	
	ВозратнаяТараПоДаннымРеализации = Документы.ВозвратТоваровОтПокупателя.ВозратнаяТараПоДаннымРеализации(Объект, ДокументОснование);
	Если ВозратнаяТараПоДаннымРеализации.Количество() > 0 Тогда
		Объект.ВозвратнаяТара.Загрузить(ВозратнаяТараПоДаннымРеализации);
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, ТабличнаяЧасть)
	
	Если ТабличнаяЧасть = "Товары" Тогда
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументРеализации);
	ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ВозратнаяТараПоДаннымРеализации(Объект, ДокументРеализации);
	Иначе
		// Остальные таб.части не обрабатываем
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	
	Для каждого СтрокаРеализации Из ТаблицаРеализации Цикл
		
		// Ищем текущую позицию основания в табличной части документа возврата.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", СтрокаРеализации.Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаРеализации.Количество;
			
			Если ТабличнаяЧасть = "Товары" Тогда
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаРеализации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

// Прочий функционал:

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)
	
	Возврат РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(
		ВидОперации, Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	НовыйМассивПараметров = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование") Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.ТоварыСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив();
	
	Если Форма.УчетПоПродажнойСтоимости Тогда
		МассивСкладов = Новый Массив;
		
		МассивСкладов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад"));
		МассивСкладов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин"));
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Новый ФиксированныйМассив(МассивСкладов)));
	КонецЕсли; 
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	Элементы.Склад.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	
	НовыйМассивПараметров = Новый Массив();
	МассивВидовОпераций = Новый Массив;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары") Тогда
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности"));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Новый ФиксированныйМассив(МассивВидовОпераций)));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары") Тогда
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаТоваров"));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Новый ФиксированныйМассив(МассивВидовОпераций)));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары") Тогда
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером"));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Новый ФиксированныйМассив(МассивВидовОпераций)));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование") Тогда
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование"));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Новый ФиксированныйМассив(МассивВидовОпераций)));
		
	Иначе
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"));
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах"));
		МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах"));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Новый ФиксированныйМассив(МассивВидовОпераций)));
		
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Сделка.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Объект.Товары, ИспользоватьКонтрольныеЗнакиГИСМ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего                    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.КоличествоДоИзменения    = СтрокаТаблицы.КоличествоПослеИзменения  + СтрокаТаблицы.Количество;
	СтрокаТаблицы.СуммаДоИзменения         = СтрокаТаблицы.СуммаПослеИзменения + СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СуммаНДСДоИзменения      = СтрокаТаблицы.СуммаНДСПослеИзменения + СтрокаТаблицы.СуммаНДС;
	
	Если СтрокаТаблицы.Свойство("СчетДоходов") И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
			БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
	КонецЕсли;
		
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Товары, ИспользоватьКонтрольныеЗнакиГИСМ)
	
	Если Не ИспользоватьКонтрольныеЗнакиГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеМаркируемаяПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина), "ПродукцияМаркируемаяДляГИСМ");
	Для Каждого СтрокаТаблицы Из Товары Цикл
		ПродукцияМаркируемаяДляГИСМ = СоответствиеМаркируемаяПродукция.Получить(СтрокаТаблицы.Номенклатура);
		СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = ?(ПродукцияМаркируемаяДляГИСМ <> Неопределено, ПродукцияМаркируемаяДляГИСМ, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		ЕстьСтроки = ЕстьСтроки ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Параметрыформы.Вставить("ПоказыватьЦены", НЕ ЭтоКомиссия);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		
		ПараметрыФормы.Вставить("ЕстьЦена", НЕ ЭтоКомиссия);
		
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");

		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Параметрыформы.Вставить("ПоказыватьЦены", Истина);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		
		ПараметрыФормы.Вставить("ЕстьЦена", Истина);
		
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад") Тогда
			ПараметрыФормы.Вставить("ТипЦен", ТипЦенСклада);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыФормы.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Кратность"			, Объект.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("Курс"        		, Объект.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ?(ЭтоКомиссия, "Комиссионер", ""));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) И ПараметрыФормы.Свойство("ЕстьЦена") 
		И ПараметрыФормы.ЕстьЦена = Истина Тогда
		
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("ДеятельностьНаПатенте"		, Объект.ДеятельностьНаПатенте);
		ПараметрыФормы.Вставить("Реализация"				, Истина);
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ПараметрыФормы.Вставить("СуммаВключаетНДС", Истина);
		Иначе
			ПараметрыФормы.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ДобавленныеСтроки = Новый Массив;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), 
		ДанныеОбъекта, 
		Ложь, 
		Ложь);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ЦенаВключаетНДС = Истина;
		Иначе
			ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
			
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора = Новый Структура("Номенклатура, КиЗ_ГИСМ, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.КиЗ_ГИСМ, СтрокаТовара.Цена);
			Иначе
				СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
			КонецЕсли;
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			Если ИмяТаблицы = "Товары" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				ОтобразитьСубконтоСчетаДоходов = ОтобразитьСубконтоСчетаДоходов ИЛИ НЕ СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
			
				Продолжить;
			
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			ДобавленныеСтроки.Добавить(СтрокаТабличнойЧасти);
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				Если ВедетсяУчетПрослеживаемыхТоваров Тогда
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар
					Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				Иначе
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				Если НЕ ЦенаВключаетНДС Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
					
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(
		ДобавленныеСтроки, 
		ИмяТаблицы, 
		Объект, 
		Документы.ВозвратТоваровОтПокупателя);
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = ДобавленныеСтроки.Количество();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);

	СчетаУчетаВДокументах.ЗаполнитьСтроки(
		СтрокиДляДополнительнойОбработки,
		"Товары", 
		Объект, 
		Документы.ВозвратТоваровОтПокупателя,
		Истина); // ВключаяЗаполненные
		
	Для Каждого СтрокаТабличнойЧасти ИЗ СтрокиДляДополнительнойОбработки Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(СтрокиДляДополнительнойОбработки, ИспользоватьКонтрольныеЗнакиГИСМ);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПатентОбработкаВыбора(ВыбранныйПатент)
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если Не УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		ДеятельностьНаПатентеПриИзмененииНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверятьПатент(Форма)
	
	Возврат Форма.ЭтоПродажаКомиссия И Не ЗначениеЗаполнено(Форма.Объект.Сделка);
	
КонецФункции

&НаКлиенте
Функция ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Экспорт
	
	Возврат ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		Или ИмяСобытия = "ИзменениеПатента";
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(ЭтотОбъект, Объект.Организация, Объект.Дата, ПроверятьПатент(ЭтотОбъект));
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#КонецОбласти 

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыПереданныеСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходов");
	ЭлементыСчетов.Добавить("ТоварыСчетРасходов");
	ЭлементыСчетов.Добавить("ТоварыСубконто");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	Если НЕ УчитыватьТаруЗаБалансом Тогда
		ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетУчетаНДС");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВозвратТоваровОтПокупателя",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// ДеятельностьНаПатенте
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДеятельностьНаПатенте") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Товары.СчетУчета
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
	КонецЕсли;

	// Товары.СчетДоходов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// ВозвратнаяТара.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// ДеятельностьНаПатенте
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДеятельностьНаПатенте") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Товары.СчетУчета
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
		КонецЕсли;

		// Товары.СчетДоходов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
		КонецЕсли;

		// ВозвратнаяТара.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДеятельностьНаПатенте");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("ПереданныеСчетУчета");
			СписокСвойств.Добавить("СчетДоходов");
			СписокСвойств.Добавить("СчетРасходов");
			СписокСвойств.Добавить("Субконто");
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставитьСчетФактуру(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
		ТекстСообщения = НСтр(
			"ru = 'Перед добавлением корректировочного счета-фактуры укажите документ-основание'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Сделка", "Объект");
		
		Возврат;
	ИначеЕсли Не ЕстьПодчиненныеСчетаФактурыВыданныеНаРеализацию(Объект.Сделка) Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Сделка", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПодчиненныеСчетаФактурыВыданныеНаРеализацию(Сделка)
	
	ОснованиеСчетаФактуры = Сделка;
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сделка, "Организация, Дата");
		
		// Если установлен флаг "Начислять НДС по отгрузке" то получаем исходный документ отгрузки
		Если УчетнаяПолитика.НачислятьНДСПоОтгрузке(РеквизитыОснования.Организация, РеквизитыОснования.Дата) Тогда
			ОснованиеСчетаФактуры = Документы.ВозвратТоваровОтПокупателя.ИсходныйДокументОтгрузки(Сделка);
		КонецЕсли;
	КонецЕсли; 
	
	СчетФактураВыданный = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ОснованиеСчетаФактуры);
	
	Возврат ЗначениеЗаполнено(СчетФактураВыданный);
	
КонецФункции

&НаКлиенте
Процедура СпособРегистрацииСчетФактурыПриИзменении()
	
	Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура = (СпособРегистрацииСчетФактуры = 1);
	Объект.ПокупателемВыставляетсяСчетФактураНаВозврат       = (СпособРегистрацииСчетФактуры = 0);
	
	ВыставленаСчетФактура = ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный");
	ЗарегистрированаСчетФактура = ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный");
	
	Если (Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура <> ВыставленаСчетФактура)
		ИЛИ (Объект.ПокупателемВыставляетсяСчетФактураНаВозврат <> ЗарегистрированаСчетФактура)
		ИЛИ (НЕ Объект.ПокупателемВыставляетсяСчетФактураНаВозврат 
			И НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура) Тогда
		
		СчетФактура = Неопределено;
	КонецЕсли;
	
	Если Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		Объект.ЭтоУниверсальныйДокумент = Ложь;
	КонецЕсли;
	
	ПокупателемВыставляетсяСчетФактураНаВозвратПриИзмененииНаКлиенте();
	
КонецПроцедуры 

#КонецОбласти 

#Область БЭД

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПримененияПрослеживаемости()
	Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "ДокументОтгрузки");
	Иначе
		ДокументРеализации = Объект.Сделка;
	КонецЕсли;
	
	ВедетсяУчетПрослеживаемыхТоваров = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
		
	Если Не ВедетсяУчетПрослеживаемыхТоваров И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		
		РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Товары, Истина, Объект.Дата);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Товары, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, ДополнительныеПараметры);
	// Конец ГОСИС
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()

	// ГОСИС
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	// Конец ГОСИС

КонецПроцедуры 

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьБаннерУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомлениях", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКорректировочноеУведомлениеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПрослеживаемостьФормыКлиентБП.СоздатьПоказатьУведомления(
		ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

&НаСервере
Функция ТребуетсяНапоминаниеОбУведомлении()
	
	ПрослеживаемыеТовары     = Объект.Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыеТовары = ПрослеживаемыеТовары.Количество() > 0;
	
	Возврат ЕстьПрослеживаемыеТовары
		И ((ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости И Не ЭтоКомиссия)
			ИЛИ РеализацияВЕАЭС);

КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаУведомление.Видимость = 
		ТребуетсяНапоминание И 
		(?(ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости, 
			ПрослеживаемостьВызовСервера.МожноДобавлятьУведомленияОбОстатках(), 
			ПрослеживаемостьВызовСервера.МожноДобавлятьУведомленияОПеремещении()));
	
КонецПроцедуры

&НаСервере
Процедура НапоминатьОбУведомлениях()
	
	УстановитьВидимость();
	Если ПоказыватьБаннер Тогда
		// Дата отсчета срока - 2 дня со дня возврата товара.
		СрокУведомления = ПрослеживаемостьБП.СрокПодачиУведомления(Объект.Дата, Истина); 
		
		ШаблонТекста = 
				НСтр(
					"ru = 'В документе присутствуют прослеживаемые товары. До %1 необходимо создать и отправить %3 уведомление %2 в налоговую инспекцию.'"
					);
				
		Элементы.ДекорацияУведомление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, Формат(СрокУведомления, "ДФ='дд ММММ'"), 
			?(ДатаДокументаРеализацииРаньшеДатыНачалаУчетаПрослеживаемости, 
				НСтр("ru = 'об остатках'"), 
				НСтр("ru = 'о перемещении'")), 
			?(РеализацияВЕАЭС, НСтр("ru = 'корректировочное'"), ""));
			
		Элементы.ГруппаБаннерУведомление.Видимость = Истина;
	Иначе
		Элементы.ГруппаБаннерУведомление.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНадписиУведомление()
	
	ПрослеживаемостьФормыБП.УстановитьПредставлениеНадписиУведомлениеОбОстаткахВВозвратеОтПокупателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НапоминатьОбУведомлениях()
	
	ТребуетсяНапоминаниеДо = ТребуетсяНапоминание;
	ПоказыватьБаннерДо     = ПоказыватьБаннер;
	
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОбУведомлении();
	
	ПоказыватьБаннер = ТребуетсяНапоминание 
		И СписокУведомлений.Количество() = 0 И НЕ ОтключитьБаннерУведомлений;
	
	Если ТребуетсяНапоминаниеДо <> ТребуетсяНапоминание
		ИЛИ ПоказыватьБаннерДо <> ПоказыватьБаннер 
		ИЛИ ОбновитьСрокОтправкиУведомлений Тогда
		
		НапоминатьОбУведомлениях();
		ОбновитьСрокОтправкиУведомлений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СравнитьДатуРеализацииСДатойНачалаУчетаПрослеживаемостиТоваров(Сделка)
	
	Возврат ?(ЗначениеЗаполнено(Сделка),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Дата") 
			< ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров(), Ложь);
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияНовогоДоговора()
	
	Возврат РаботаСДоговорамиКонтрагентовБП.ПараметрыСозданияНовогоДоговора(ЭтотОбъект);
	
КонецФункции

#КонецОбласти