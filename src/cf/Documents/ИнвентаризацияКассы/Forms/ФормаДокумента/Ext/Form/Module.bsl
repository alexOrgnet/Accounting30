#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьСчетовУчета();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ИнвентаризацияКассы",
		"ФормаДокумента",
		НСтр("ru='Новости: Инвентаризация кассы'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Организация <> ВыбранноеЗначение И Объект.Ценности.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Организация", ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопросОчиститьЦенности(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ПодразделениеОрганизации <> ВыбранноеЗначение И Объект.Ценности.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("ПодразделениеОрганизации", ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодразделениеОрганизацииОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопросОчиститьЦенности(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКассыПриИзменении(Элемент)
	
	Если Объект.Ценности.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидКассыПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопросОчиститьЦенности(ОписаниеОповещения);
	Иначе
		Объект.ЭтоКассаПлатежногоАгента = ВидКассы;
		ВидКассыПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПоПодразделениюПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НомерПКОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПКО) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Объект.ПКО);
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРКОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.РКО) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Объект.РКО);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦенности

&НаКлиенте
Процедура ЦенностиВидЦенностейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ВидЦенностиПредставлениеСтрокой().ДенежныйДокумент Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДенежныеДокументы.Форма.ФормаВыбора", , Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦенностиВидЦенностейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ценности.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Валюта) Тогда
			ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		ДанныеСтрокиТаблицы = ДанныеСтрокиТаблицы(ТекущиеДанные);
		ДанныеОбъекта = ДанныеОбъектаДляЗаполненияСчетаУчета();
		
		ПричинаИзменения = "Ценности.ВидЦенностей";
		ПараметрыЗаполненияСчетовУчета = ПараметрыЗаполненияСчетовУчета(ДанныеОбъекта, ДанныеСтрокиТаблицы, ТекущиеДанные, ПричинаИзменения);
		
		ЦенностиВидЦенностейПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗаполненияСчетовУчета(ДанныеОбъекта, ДанныеСтрокиТаблицы, ТекущиеДанные, ПричинаИзменения)
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		ПричинаИзменения,
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	Возврат ПараметрыЗаполненияСчетовУчета;

КонецФункции

&НаКлиенте
Процедура ЦенностиВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ценности.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеОбъекта = ДанныеОбъектаДляЗаполненияСчетаУчета();
		
		ДанныеСтрокиТаблицы = ДанныеСтрокиТаблицы(ТекущиеДанные);
		
		ПричинаИзменения = "Ценности.Валюта";
		ПараметрыЗаполненияСчетовУчета = ПараметрыЗаполненияСчетовУчета(ДанныеОбъекта, ДанныеСтрокиТаблицы, ТекущиеДанные, ПричинаИзменения);
		
		ЦенностиВалютаПриИзмененииСервер(
			ДанныеСтрокиТаблицы,
			ДанныеОбъекта,
			ВалютаРегламентированногоУчета,
			ПараметрыЗаполненияСчетовУчета.КЗаполнению);
			
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенностиПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьВидимостьИтогов", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЦенностиВалютнаяСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ценности.ТекущиеДанные;
	ДанныеСтрокиТаблицы = ДанныеСтрокиТаблицы(ТекущиеДанные);
	ПересчитатьСуммыПоКурсу(ДанныеСтрокиТаблицы, Объект.Дата, ВалютаРегламентированногоУчета);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		РассчитатьОтклонение(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.ИнвентаризационнаяКомиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.ИнвентаризационнаяКомиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже подобрано!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
		ПоказатьПредупреждение( , ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.ИнвентаризационнаяКомиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже включено в состав комиссии!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение( , ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьОтклонение(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.ВалютнаяСумма - СтрокаТабличнойЧасти.ВалютнаяСуммаУчет;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,ВыборГруппИЭлементов,РежимВыбора", Ложь, ИспользованиеГруппИЭлементов.Элементы, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Если Объект.Ценности.Количество() <> 0 Тогда 
		ТекстВопроса = НСтр("ru = 'При заполнении существующие данные будут пересчитаны!
		|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;

	УстановитьСостояниеДокумента();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	НастроитьВидимостьОбособленныхПодразделений();
	
	// Неявное преобразование к типу Число.
	ВидКассы = Объект.ЭтоКассаПлатежногоАгента;
	
	ЗаполнитьНомераОрдеровСервер();

	УстановитьСписокВыбораВидаЦенностей();

	УправлениеФормой(ЭтотОбъект);
	УстановитьОтборСчетовУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	Если ИспользоватьВалютныйУчет Тогда
		УстановитьВидимостьИтоговСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераОрдеровСервер()
	
	НомерПКО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПКО, "Номер");
	НомерРКО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РКО, "Номер");
	
	НомерПКО = ?(ЗначениеЗаполнено(НомерПКО), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПКО, Истина, Ложь), "-");
	НомерРКО = ?(ЗначениеЗаполнено(НомерРКО), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерРКО, Истина, Ложь), "-");
	
	Элементы.НомерПКО.Гиперссылка = ЗначениеЗаполнено(Объект.ПКО);
	Элементы.НомерРКО.Гиперссылка = ЗначениеЗаполнено(Объект.РКО);

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВидаЦенностей()
	
	СписокЗначений = Элементы.ЦенностиВидЦенностей.СписокВыбора;
	СписокЗначений.Очистить();
	СписокЗначений.Добавить(ВидЦенностиПредставлениеСтрокой().НаличныеДеньги);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетДенежныхДокументов") И Не Объект.ЭтоКассаПлатежногоАгента Тогда
		СписокЗначений.Добавить(ВидЦенностиПредставлениеСтрокой().ДенежныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Объект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	НастроитьВидимостьОбособленныхПодразделений();
	
	Если ИспользоватьВалютныйУчет Тогда
		УстановитьВидимостьИтоговСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Ценности.Очистить();
		Объект.Организация = ДополнительныеПараметры.Организация;
		ОрганизацияПриИзменении(Неопределено);
		Объект.ФормироватьПоПодразделению = Ложь;
		ОчиститьНомерОрдеровКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомерОрдеровКлиент()
	
	Объект.ПКО = ПредопределенноеЗначение("Документ.ПриходныйКассовыйОрдер.ПустаяСсылка");
	Объект.РКО = ПредопределенноеЗначение("Документ.РасходныйКассовыйОрдер.ПустаяСсылка");
	НомерПКО = "-";
	НомерРКО = "-";
	Элементы.НомерПКО.Гиперссылка = Ложь;
	Элементы.НомерРКО.Гиперссылка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Ценности.Очистить();
		Объект.ПодразделениеОрганизации = ДополнительныеПараметры.ПодразделениеОрганизации;
		ОчиститьНомерОрдеровКлиент();
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьВидимостьИтогов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКассыПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Ценности.Очистить();
		// Неявное преобразование к типу Булево.
		Объект.ЭтоКассаПлатежногоАгента = ВидКассы;
		ВидКассыПриИзмененииСервер();
		ОчиститьНомерОрдеровКлиент();
	Иначе
		// Если отказ от перезаполнения, то возвращаем к прежнему значению.
		ВидКассы = 1 - ВидКассы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидКассыПриИзмененииСервер()

	УстановитьОтборСчетовУчета();
	УстановитьСписокВыбораВидаЦенностей();
	Если ИспользоватьВалютныйУчет Тогда
		УстановитьВидимостьИтоговСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОчиститьЦенности(ОписаниеОповещения)
	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Перед заполнением список ценностей будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	Объект.Ценности.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РезультатЗаполнения = Документы.ИнвентаризацияКассы.ЗаполнитьПоОстаткам(ДокументОбъект);
	
	ТаблицаОстатков = РезультатЗаполнения.ТаблицаОстатков;
	
	Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		СтрокаЦенности = Объект.Ценности.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЦенности, СтрокаОстатков);
		
		ПараметрыНовогоКурса = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
		
		Если ЗначениеЗаполнено(СтрокаОстатков.Валюта) И СтрокаОстатков.Валюта <> ВалютаРегламентированногоУчета Тогда
			
			ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность");
			ЗаполнитьЗначенияСвойств(ПараметрыТекущегоКурса, СтрокаОстатков);
			
			СтрокаЦенности.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаОстатков.ВалютнаяСумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		Иначе
			СтрокаЦенности.ВалютнаяСумма = СтрокаОстатков.Сумма;
			СтрокаЦенности.Валюта = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтрокаЦенности.СуммаУчет = СтрокаЦенности.Сумма;
		СтрокаЦенности.ВалютнаяСуммаУчет = СтрокаЦенности.ВалютнаяСумма;
		
	КонецЦикла;
	
	Объект.ПКО = РезультатЗаполнения.ПКО;
	Объект.РКО = РезультатЗаполнения.РКО;
	
	УстановитьВидимостьИтоговСервер();
	ЗаполнитьНомераОрдеровСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЦенностиВалютнаяСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЦенностиВалютнаяСуммаУчет");

	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"Объект.Ценности.ВалютнаяСумма", ВидСравненияКомпоновкиДанных.Заполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"Объект.Ценности.ВалютнаяСуммаУчет", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПодразделениеОрганизации.Доступность               = Объект.ФормироватьПоПодразделению;
	Элементы.ПодразделениеОрганизации.АвтоОтметкаНезаполненного = Объект.ФормироватьПоПодразделению;
	
	Если Не Объект.ФормироватьПоПодразделению Тогда
		Объект.ПодразделениеОрганизации = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	Для каждого СтрокаТаблицы Из Объект.Ценности Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЦенности(СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЦенности(СтрокаТаблицы)
	
	Если СтрокаТаблицы <> Неопределено Тогда
		РассчитатьОтклонение(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьОбособленныхПодразделений()

	Элементы.ГруппаПодразделение.Видимость =
		Справочники.ПодразделенияОрганизаций.ИспользуютсяОбособленныеПодразделенияНеВыделенныеНаОтдельныйБаланс(Объект.Организация);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСчетовУчета()
	
	МассивИсключений = Новый Массив;
	СчетаОтбора = Новый Массив;

	Если Объект.ЭтоКассаПлатежногоАгента Тогда
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	Иначе
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
		МассивИсключений = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивИсключений);
	КонецЕсли;
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, , МассивИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.ЦенностиСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦенностиВалютаПриИзмененииСервер(ДанныеСтроки, ДанныеОбъекта, ВалютаРегламентированногоУчета, КЗаполнению)
	
	ПересчитатьСуммыПоКурсу(ДанныеСтроки, ДанныеОбъекта.Дата, ВалютаРегламентированногоУчета);
	ЗаполнитьСчетУчета(ДанныеСтроки, ДанныеОбъекта, КЗаполнению);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИтоговСервер()
	
	СоответствиеВалют = Новый Соответствие;
	ВидимостьИтогов = Истина;
	
	Для каждого СтрокаЦенности Из Объект.Ценности Цикл
		
		Если ЗначениеЗаполнено(СтрокаЦенности.Валюта) И СоответствиеВалют.Получить(СтрокаЦенности.Валюта) = Неопределено Тогда
			СоответствиеВалют.Вставить(СтрокаЦенности.Валюта, Истина);
			
			Если СоответствиеВалют.Количество() > 1 Тогда
				ВидимостьИтогов = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаИтогиСуммы.Видимость = ВидимостьИтогов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьКурсВалютыВСтроке(ДанныеСтроки, ДатаДокумента, ВалютаРегламентированногоУчета)
	
	ПараметрыНовогоКурса = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность");
	ПараметрыТекущегоКурса.Валюта = ДанныеСтроки.Валюта;
	
	ЗаполнитьЗначенияСвойств(ПараметрыТекущегоКурса, РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеСтроки.Валюта, ДатаДокумента));
	
	ДанныеСтроки.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		ДанныеСтроки.ВалютнаяСумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
	ДанныеСтроки.СуммаУчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		ДанныеСтроки.ВалютнаяСуммаУчет, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммыПоКурсу(ДанныеСтрокиТаблицы, ДатаДокумента, ВалютаРегламентированногоУчета)
	
	Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Валюта) И ДанныеСтрокиТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		ДанныеСтрокиТаблицы.Сумма = ДанныеСтрокиТаблицы.ВалютнаяСумма;
		ДанныеСтрокиТаблицы.СуммаУчет = ДанныеСтрокиТаблицы.ВалютнаяСуммаУчет;
	Иначе
		ПересчитатьКурсВалютыВСтроке(ДанныеСтрокиТаблицы, ДатаДокумента, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦенностиВидЦенностейПриИзмененииСервер(СтрокаТабличнойЧасти, ДанныеОбъекта, КЗаполнению)
	
	ЗаполнитьСчетУчета(СтрокаТабличнойЧасти, ДанныеОбъекта, КЗаполнению);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетУчета(СтрокаТабличнойЧасти, ДанныеОбъекта, КЗаполнению)
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		
		ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ИнвентаризацияКассы,
			КЗаполнению,
			ДанныеОбъекта,
			"Ценности",
			СтрокаТабличнойЧасти);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОбъектаДляЗаполненияСчетаУчета()

	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ДанныеОбъекта.Вставить("ЭтоКассаПлатежногоАгента", Объект.ЭтоКассаПлатежногоАгента);
	ДанныеОбъекта.Вставить("Дата", Объект.Дата);
	
	Возврат ДанныеОбъекта;

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Для каждого СтрокаЦенности Из Объект.Ценности Цикл
		
		Если ЗначениеЗаполнено(СтрокаЦенности.Валюта) И СтрокаЦенности.Валюта <> ВалютаРегламентированногоУчета Тогда
			ПересчитатьКурсВалютыВСтроке(СтрокаЦенности, Объект.Дата, ВалютаРегламентированногоУчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("ЦенностиСчетУчета");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидЦенностиПредставлениеСтрокой()

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НаличныеДеньги",   НСтр("ru = 'Наличные деньги'"));
	СтруктураВозврата.Вставить("ДенежныйДокумент", НСтр("ru = 'Денежный документ...'"));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСтрокиТаблицы(ТекущиеДанные)
	
	ДанныеСтрокиТаблицы = Новый Структура;
	ДанныеСтрокиТаблицы.Вставить("Валюта");
	ДанныеСтрокиТаблицы.Вставить("Сумма");
	ДанныеСтрокиТаблицы.Вставить("ВалютнаяСумма");
	ДанныеСтрокиТаблицы.Вставить("СуммаУчет");
	ДанныеСтрокиТаблицы.Вставить("ВалютнаяСуммаУчет");
	ДанныеСтрокиТаблицы.Вставить("ВидЦенностей");
	ДанныеСтрокиТаблицы.Вставить("СчетУчета");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	Возврат ДанныеСтрокиТаблицы;

КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьВидимостьИтогов()

	Если ИспользоватьВалютныйУчет Тогда
		УстановитьВидимостьИтоговСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено,
									КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ИнвентаризацияКассы",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Ценности.Валюта
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Ценности.Валюта") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Ценности.СчетУчета");
	КонецЕсли;

	// ЭтоКассаПлатежногоАгента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ЭтоКассаПлатежногоАгента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Ценности.СчетУчета");
	КонецЕсли;

	// Ценности.ВидЦенностей
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Ценности.ВидЦенностей") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Ценности.СчетУчета");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Ценности.Валюта
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Ценности.Валюта") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Валюта");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ЭтоКассаПлатежногоАгента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидЦенностей");
		КонецЕсли;

		// ЭтоКассаПлатежногоАгента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ЭтоКассаПлатежногоАгента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ЭтоКассаПлатежногоАгента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Валюта");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидЦенностей");
		КонецЕсли;

		// Ценности.ВидЦенностей
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Ценности.ВидЦенностей") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидЦенностей");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Валюта");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ЭтоКассаПлатежногоАгента");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти

#КонецОбласти