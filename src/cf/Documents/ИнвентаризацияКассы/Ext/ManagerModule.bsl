#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает время документа по умолчанию.
// Требуется если пользователь используется опцию:
// "Время документов устанавливать автоматически".
//
// Возвращаемое значение:
//    Структура - Структура с ключами "Часы" и "Минуты".
//
Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

#Область СчетаУчета

// Заполняет правила, используемые при определении счетов учета документа.
//
// Параметры:
//  Правила - Структура - Коллекция правил для заполнения.
//
// Возвращаемое значение:
//  Структура - Заполненная коллекция правил.
//
Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Ценности
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Ценности", "СчетУчета", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидЦенностей", "ВидЦенностей");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВалютаДокумента", "Валюта");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЭтоДенежныйДокумент");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Ценности", "СчетУчета", "ДенежныеДокументы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидЦенностей", "ВидЦенностей");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВалютаДокумента", "Валюта");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЭтоДенежныйДокумент");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ЭтоКассаПлатежногоАгента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ДеятельностьПлатежногоАгента", "ЭтоКассаПлатежногоАгента");

	Возврат Правила;
	
КонецФункции

// Заполняет дополнительные данные в правилах заполнения счетов учета.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Дополнительные данные для заполнения.
//
Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	Если ДанныеЗаполнения.Свойство("ДеятельностьПлатежногоАгента") Тогда
		ДанныеЗаполнения.ДеятельностьПлатежногоАгента = ДанныеЗаполнения.ЭтоКассаПлатежногоАгента;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Свойства

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ИнвентаризацияКассы";
	Набор.Идентификатор = Новый УникальныйИдентификатор("20bcc873-9f5b-4308-a6b9-d91b4a54fad1");
	Набор.Используется  = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт инвентаризации наличных денежных средств (ИНВ-15)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ15";
	КомандаПечати.Представление = НСтр("ru = 'Акт инвентаризации наличных денежных средств (ИНВ-15)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	// Приказ о проведении инвентаризации (ИНВ-22)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ22";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о проведении инвентаризации (ИНВ-22)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ15", НСтр("ru = 'ИНВ-15 (Акт инвентаризации)'"),
			ПечатьИНВ15(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияКассы.ПФ_MXL_ИНВ15");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ22") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ22", НСтр("ru = 'ИНВ-22 (Приказ о проведении инвентаризации)'"),
		ПечатьИНВ22(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_ИНВ22");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьИНВ15(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб             = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.ПолеСлева               = 20;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ15";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияКассы.ПФ_MXL_ИНВ15");
	
	// Получаем области макета для вывода в табличный документ
	Шапка               = ОбластьМакета(Макет, "Шапка");
	СтрокаНаличныхДенег = ОбластьМакета(Макет, "СтрокаНаличныхДенег");
	Итоги               = ОбластьМакета(Макет, "Итоги");
	ПоследниеНомера     = ОбластьМакета(Макет, "ПоследниеНомера");
	ЧленыКомиссии       = ОбластьМакета(Макет, "ЧленыКомиссии");
	Подвал              = ОбластьМакета(Макет, "Подвал");
	Страница2           = ОбластьМакета(Макет, "Страница2");
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("НаличныеДеньги", НСтр("ru = 'Наличные деньги'"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияКассы.Ссылка КАК Ссылка,
	|	ИнвентаризацияКассы.Дата КАК ДатаДокумента,
	|	ИнвентаризацияКассы.Номер КАК НомерДокумента,
	|	ИнвентаризацияКассы.Организация КАК Организация,
	|	ИнвентаризацияКассы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК Подразделение,
	|	ИнвентаризацияКассы.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации,
	|	ИнвентаризацияКассы.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	ИнвентаризацияКассы.Организация.КодОКВЭД КАК ОрганизацияКодОКВЭД,
	|	ЕСТЬNULL(ИнвентаризацияКассыЦенности.Валюта, &ВалютаРегламентированногоУчета) КАК Валюта,
	|	СУММА(ЕСТЬNULL(ИнвентаризацияКассыЦенности.ВалютнаяСуммаУчет, 0)) КАК СуммаПоУчету,
	|	СУММА(ЕСТЬNULL(ИнвентаризацияКассыЦенности.ВалютнаяСумма, 0)) КАК СуммаПоФакту,
	|	СУММА(ЕСТЬNULL(ИнвентаризацияКассыЦенности.Сумма, 0)) КАК СуммаРублиПоФакту,
	|	СУММА(ЕСТЬNULL(ИнвентаризацияКассыЦенности.СуммаУчет, 0)) КАК СуммаРублиПоУчету,
	|	ИнвентаризацияКассы.ПКО.Номер КАК НомерПКО,
	|	ИнвентаризацияКассы.РКО.Номер КАК НомерРКО,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ИнвентаризацияКассыЦенности.ВидЦенностей ССЫЛКА Справочник.ДенежныеДокументы
	|				ТОГДА ИнвентаризацияКассыЦенности.ВидЦенностей.Наименование
	|			ИНАЧЕ ИнвентаризацияКассыЦенности.ВидЦенностей
	|		КОНЕЦ, &НаличныеДеньги) КАК НаименованиеЦенности,
	|	ИнвентаризацияКассы.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияКассы.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияКассы.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	МИНИМУМ(ИнвентаризацияКассыЦенности.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ИнвентаризацияКассы КАК ИнвентаризацияКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияКассы.Ценности КАК ИнвентаризацияКассыЦенности
	|		ПО ИнвентаризацияКассы.Ссылка = ИнвентаризацияКассыЦенности.Ссылка
	|ГДЕ
	|	ИнвентаризацияКассы.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияКассы.Ссылка,
	|	ИнвентаризацияКассы.Дата,
	|	ИнвентаризацияКассы.Номер,
	|	ИнвентаризацияКассы.Организация,
	|	ИнвентаризацияКассы.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ,
	|	ИнвентаризацияКассы.ПричинаПроведенияИнвентаризации,
	|	ИнвентаризацияКассы.Организация.КодПоОКПО,
	|	ИнвентаризацияКассы.Организация.КодОКВЭД,
	|	ИнвентаризацияКассы.ПКО.Номер,
	|	ИнвентаризацияКассы.РКО.Номер,
	|	ИнвентаризацияКассы.ДокументОснованиеВид,
	|	ИнвентаризацияКассы.ДокументОснованиеНомер,
	|	ИнвентаризацияКассы.ДокументОснованиеДата,
	|	ЕСТЬNULL(ИнвентаризацияКассыЦенности.Валюта, &ВалютаРегламентированногоУчета),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ИнвентаризацияКассыЦенности.ВидЦенностей ССЫЛКА Справочник.ДенежныеДокументы
	|				ТОГДА ИнвентаризацияКассыЦенности.ВидЦенностей.Наименование
	|			ИНАЧЕ ИнвентаризацияКассыЦенности.ВидЦенностей
	|		КОНЕЦ, &НаличныеДеньги)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияКассы.Дата КАК Дата,
	|	ИнвентаризацияКассы.Ссылка КАК Ссылка,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.Председатель КАК Председатель,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ИнвентаризацияКассы КАК ИнвентаризацияКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияКассы.ИнвентаризационнаяКомиссия КАК ИнвентаризацияКассыИнвентаризационнаяКомиссия
	|		ПО (ИнвентаризацияКассыИнвентаризационнаяКомиссия.Ссылка = ИнвентаризацияКассы.Ссылка)
	|ГДЕ
	|	ИнвентаризацияКассы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияКассы.Дата,
	|	ИнвентаризацияКассы.Ссылка,
	|	Председатель УБЫВ,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДокумента = РезультатЗапроса[0].Выбрать();
	ИнвентаризационнаяКомиссия = РезультатЗапроса[1].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			ДанныеДокумента.Организация, ДанныеДокумента.ДатаДокумента);
		
		Если Шапка <> Неопределено Тогда
			Шапка.Параметры.Заполнить(ДанныеДокумента);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("Организация",          ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации));
		ПараметрыШапки.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		
		ПараметрыШапки.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.НомерДокумента, Истина, Ложь));
		ПараметрыШапки.Вставить("ДатаДокумента",  Формат(ДанныеДокумента.ДатаДокумента, "ДЛФ=DD"));
		
		ДанныеОтветственныхЛиц  = ОтветственныеЛицаБП.ОтветственныеЛица(
			ДанныеДокумента.Организация, ДанныеДокумента.ДатаДокумента, ДанныеДокумента.ПодразделениеОрганизации);
		
		ПараметрыШапки.Вставить("КассирДолжность", ДанныеОтветственныхЛиц.КассирДолжность);
		ПараметрыШапки.Вставить("ФИОКассира",      ДанныеОтветственныхЛиц.КассирПредставление);
		
		ПараметрыПодвала = Новый Структура;
		ПараметрыПодвала.Вставить("КассирДолжность", ДанныеОтветственныхЛиц.КассирДолжность);
		ПараметрыПодвала.Вставить("ФИОКассира",      ДанныеОтветственныхЛиц.КассирПредставление);
		ПараметрыПодвала.Вставить("ДатаДокумента",   ДанныеДокумента.ДатаДокумента);

		ПараметрыОборотнойСтраницы = Новый Структура;
		ПараметрыОборотнойСтраницы.Вставить("КассирДолжность", ДанныеОтветственныхЛиц.КассирДолжность);
		ПараметрыОборотнойСтраницы.Вставить("ФИОКассира",      ДанныеОтветственныхЛиц.КассирПредставление);

		ПараметрыОборотнойСтраницы.Вставить("РуководительДолжность", ДанныеОтветственныхЛиц.РуководительДолжность);
		ПараметрыОборотнойСтраницы.Вставить("ФИОРуководителя",       ДанныеОтветственныхЛиц.РуководительПредставление);
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Шапка, ПараметрыШапки);
		
		СуммаПоФактуРублиИтог = 0;
		СуммаПоУчетуРублиИтог = 0;
		СуммаИзлишек = 0;
		СуммаНедостача = 0;

		НомерПоПорядку = 1;
		Пока ДанныеДокумента.Следующий() Цикл
			Если СтрокаНаличныхДенег <> Неопределено Тогда
				СтрокаНаличныхДенег.Параметры.Заполнить(ДанныеДокумента);
			КонецЕсли;
			СуммаПоФактуСтрока    = ДанныеДокумента.СуммаРублиПоФакту;
			СуммаПоУчетуСтрока    = ДанныеДокумента.СуммаРублиПоУчету;
			СуммаПоФактуРублиИтог = СуммаПоФактуРублиИтог + СуммаПоФактуСтрока;
			СуммаПоУчетуРублиИтог = СуммаПоУчетуРублиИтог + СуммаПоУчетуСтрока;
			
			Если СуммаПоФактуРублиИтог > СуммаПоУчетуРублиИтог Тогда
				СуммаИзлишек = СуммаИзлишек + (СуммаПоФактуСтрока - СуммаПоУчетуСтрока);
			Иначе
				СуммаНедостача = СуммаНедостача + (СуммаПоУчетуСтрока - СуммаПоФактуСтрока);
			КонецЕсли;
			ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, СтрокаНаличныхДенег, Новый Структура("НомерПоПорядку", НомерПоПорядку));
			НомерПоПорядку = НомерПоПорядку + 1;
		КонецЦикла;
		
		ДанныеИтогов = Новый Структура;
		ДанныеИтогов.Вставить("СуммаПоФактуРубли",     ФорматРублей(СуммаПоФактуРублиИтог));
		ДанныеИтогов.Вставить("СуммаПоФактуКопейки",   ФорматКопеек(СуммаПоФактуРублиИтог));
		
		ДанныеИтогов.Вставить("СуммаПоУчетуРубли",     ФорматРублей(СуммаПоУчетуРублиИтог));
		ДанныеИтогов.Вставить("СуммаПоУчетуКопейки",   ФорматКопеек(СуммаПоУчетуРублиИтог));
		
		ДанныеИтогов.Вставить("СуммаИзлишекРубли",     ФорматРублей(СуммаИзлишек));
		ДанныеИтогов.Вставить("СуммаИзлишекКопейки",   ФорматКопеек(СуммаИзлишек));

		ДанныеИтогов.Вставить("СуммаНедостачаРубли",   ФорматРублей(СуммаНедостача));
		ДанныеИтогов.Вставить("СуммаНедостачаКопейки", ФорматКопеек(СуммаНедостача));
		
		ДанныеИтогов.Вставить("СуммаПоФактуРеглПрописью",
			ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаПоФактуРублиИтог, ВалютаРегламентированногоУчета));

		ДанныеИтогов.Вставить("СуммаПоУчетуРеглПрописью",
			ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаПоУчетуРублиИтог, ВалютаРегламентированногоУчета));
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Итоги, ДанныеИтогов, Истина);
		
		НомерПКО = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.НомерПКО, Истина, Ложь);
		НомерРКО = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.НомерРКО, Истина, Ложь);
		
		СтруктураПоследнихНомеров = Новый Структура;
		СтруктураПоследнихНомеров.Вставить("НомерПКО", ?(ЗначениеЗаполнено(НомерПКО), НомерПКО, "-"));
		СтруктураПоследнихНомеров.Вставить("НомерРКО", ?(ЗначениеЗаполнено(НомерРКО), НомерРКО, "-"));
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, ПоследниеНомера, СтруктураПоследнихНомеров, Истина);
		
		ИнвентаризационнаяКомиссия.СледующийПоЗначениюПоля("Ссылка");
		
		ВыводитьЗаголовок = Истина;
		КоличествоЧленовКомиссии = 0;

		ПараметрыЧленовКомиссии = Новый Структура("ЗаголовокЧленаКомиссии, Должность, НаименованиеЧленаКомиссии");
		Пока ИнвентаризационнаяКомиссия.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ИнвентаризационнаяКомиссия.НомерСтроки) Тогда
				Прервать;
			КонецЕсли;
			
			Если КоличествоЧленовКомиссии > 0 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ЧленыКомиссии) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				ПараметрыЧленовКомиссии.ЗаголовокЧленаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			Иначе
				ПараметрыЧленовКомиссии.ЗаголовокЧленаКомиссии = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
				ДанныеДокумента.Организация, ИнвентаризационнаяКомиссия.ФизЛицо, ДанныеДокумента.ДатаДокумента);
			
			ПараметрыЧленовКомиссии.Должность                = ДанныеЧленаКомиссии.Должность;
			ПараметрыЧленовКомиссии.НаименованиеЧленаКомиссии = ДанныеЧленаКомиссии.Представление;
			
			ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, ЧленыКомиссии, ПараметрыЧленовКомиссии);
			
		КонецЦикла;
		//
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если КоличествоЧленовКомиссии < 4 Тогда
			
			Для Итератор = КоличествоЧленовКомиссии + 1 По 4 Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ЧленыКомиссии) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				ПараметрыЧленовКомиссии.ЗаголовокЧленаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				ПараметрыЧленовКомиссии.Должность                = "";
				ПараметрыЧленовКомиссии.НаименованиеЧленаКомиссии = "";
				
				ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, ЧленыКомиссии, ПараметрыЧленовКомиссии);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подвал) Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Подвал, ПараметрыПодвала, Истина);

		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Страница2, ПараметрыОборотнойСтраницы);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ПечатьИНВ22(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.ПолеСлева               = 20;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ22";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = ОбластьМакета(Макет, "Шапка");
	Подпись = ОбластьМакета(Макет, "Подпись");
	Подвал  = ОбластьМакета(Макет, "Подвал");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияКассы.Ссылка КАК Ссылка,
	|	ИнвентаризацияКассы.Дата КАК Дата,
	|	ИнвентаризацияКассы.Номер КАК Номер,
	|	ИнвентаризацияКассы.Организация КАК Организация,
	|	ИнвентаризацияКассы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ИнвентаризацияКассы.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ИнвентаризацияКассы.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК Подразделение,
	|	ИнвентаризацияКассы.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияКассы.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияКассы.ДокументОснованиеДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИнвентаризацияКассы.Дата
	|		ИНАЧЕ ИнвентаризацияКассы.ДокументОснованиеДата
	|	КОНЕЦ КАК ДокументОснованиеДата,
	|	ИнвентаризацияКассы.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияКассы.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияКассы КАК ИнвентаризацияКассы
	|ГДЕ
	|	ИнвентаризацияКассы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияКассы.Дата КАК Дата,
	|	ИнвентаризацияКассы.Ссылка КАК Ссылка,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.Председатель КАК Председатель,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияКассыИнвентаризационнаяКомиссия.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ИнвентаризацияКассы КАК ИнвентаризацияКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияКассы.ИнвентаризационнаяКомиссия КАК ИнвентаризацияКассыИнвентаризационнаяКомиссия
	|		ПО (ИнвентаризацияКассыИнвентаризационнаяКомиссия.Ссылка = ИнвентаризацияКассы.Ссылка)
	|ГДЕ
	|	ИнвентаризацияКассы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияКассы.Дата,
	|	ИнвентаризацияКассы.Ссылка,
	|	Председатель УБЫВ,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Док = РезультатЗапроса[0].Выбрать();
	ИнвентаризационнаяКомиссия = РезультатЗапроса[1].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Док.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Если Шапка <> Неопределено Тогда
			Шапка.Параметры.Заполнить(Док);
		КонецЕсли;
	
		ПараметрыПечатнойФормы = Новый Структура;
		ПараметрыПечатнойФормы.Вставить("Подразделение",        Строка(Док.ПодразделениеОрганизации));
		
		ПараметрыПечатнойФормы.Вставить("Организация",          ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации));
		ПараметрыПечатнойФормы.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		
		ПараметрыПечатнойФормы.Вставить("НомерДокумента",       Док.ДокументОснованиеНомер);
		ПараметрыПечатнойФормы.Вставить("ДатаДокумента",        Док.ДокументОснованиеДата);
		
		ПараметрыПечатнойФормы.Вставить("НаименованиеИмуществаОбязательств",
			НСтр("ru = 'денежных средств, разных ценностей и документов, находящихся в кассе'"));
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Шапка, ПараметрыПечатнойФормы);
		
		ИнвентаризационнаяКомиссия.СледующийПоЗначениюПоля("Ссылка");
		
		ВыводитьЗаголовок = Истина;
		КоличествоЧленовКомиссии = 0;

		ПараметрыЧленыКомиссии = Новый Структура();

		Пока ИнвентаризационнаяКомиссия.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ИнвентаризационнаяКомиссия.НомерСтроки) Тогда
				Прервать;
			КонецЕсли;
			
			Если КоличествоЧленовКомиссии > 0 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				ПараметрыЧленыКомиссии.Вставить("ЗаголовокРазделаПодписей", ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, ""));
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			Иначе
				ПараметрыЧленыКомиссии.Вставить("ЗаголовокРазделаПодписей", ЗаголовокРазделаПодписей.ПредседательКомиссии);
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Док.Организация, ИнвентаризационнаяКомиссия.ФизЛицо, Док.Дата);
			
			ПараметрыЧленыКомиссии.Вставить("Должность",                ДанныеЧленаКомиссии.Должность);
			ПараметрыЧленыКомиссии.Вставить("НаименованиеЧленаКомиссии", ДанныеЧленаКомиссии.Представление);
			
			ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Подпись, ПараметрыЧленыКомиссии);
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если КоличествоЧленовКомиссии < 4 Тогда
			
			Для Итератор = КоличествоЧленовКомиссии + 1 По 4 Цикл
			
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				ПараметрыЧленыКомиссии.Вставить("ЗаголовокРазделаПодписей", ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, ""));
				ПараметрыЧленыКомиссии.Вставить("Должность", "");
				ПараметрыЧленыКомиссии.Вставить("НаименованиеЧленаКомиссии", "");
				
				ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Подпись, ПараметрыЧленыКомиссии);
		
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем подвал приказа
		
		ПараметрыПодвала = Новый Структура;
		
		ПараметрыПодвала.Вставить("НаименованиеИмуществаОбязательств", НСтр("ru = 'денежные средства, разные ценности и документы, находящиеся в кассе'"));
		ПараметрыПодвала.Вставить("ДатаНачалаИнвентаризации", Формат(Док.ДатаНачалаИнвентаризации, "ДЛФ=DD"));
		ПараметрыПодвала.Вставить("ДатаОкончанияИнвентаризации", Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=DD"));
		ПараметрыПодвала.Вставить("ПричинаПроведенияИнвентаризации", Док.ПричинаПроведенияИнвентаризации);
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Док.Организация, Док.Дата, Док.ПодразделениеОрганизации);
		
		ПараметрыПодвала.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
		ПараметрыПодвала.Вставить("РасшифровкаПодписиРуководителя", Руководители.РуководительПредставление);
		
		ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Подвал, ПараметрыПодвала, Истина);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Проверяет есть ли в макете область с заданным именем и возвращает ее.
//
// Параметры:
//  Макет      - Табличный документ - Макет, область которого необходимо получить.
//  ИмяОбласти - Строка - Получаемая область.
//
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - Область макета, если она существует.
Функция ОбластьМакета(Макет, ИмяОбласти)

	Если Макет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Макет.ПолучитьОбласть(ИмяОбласти);
	
КонецФункции

Процедура ЗаполнитьПараметрыИВывестиОбласть(ТабличныйДокумент, Область, СтруктураПараметров, ПроверитьВывод = Ложь)

	Если Область = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьВывод И НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Область) Тогда
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураПараметров);
	
	ТабличныйДокумент.Вывести(Область);

КонецПроцедуры

// Получает данные заполнения остатками субсчетов счета "Касса", а также последние ПКО, РКО и их номера.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект.ИнвентаризацияКассы - документ, данные которого заполняются.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//     *ТаблицаОстатков - ТаблицаЗначений для заполнения табличной части "Ценности".
//     *ПКО - ДокументСсылка.ПриходныйКассовыйОрдер - Последний документ ПКО.
//     *НомерПКО- Строка - Номер последнего ПКО.
//     *РКО - ДокументСсылка.РасходыйКассовыйОрдер - Последний документ РКО.
//     *НомерРКО - Строка - Номер последнего РКО.
//
Функция ЗаполнитьПоОстаткам(ДокументОбъект) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ТаблицаОстатков", Новый ТаблицаЗначений);
	РезультатЗаполнения.Вставить("ПКО");
	РезультатЗаполнения.Вставить("НомерПКО");
	РезультатЗаполнения.Вставить("РКО");
	РезультатЗаполнения.Вставить("НомерРКО");

	
	УсловиеОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловиеОтбора.ИспользоватьВПроводках = Истина;
	
	Если ДокументОбъект.ЭтоКассаПлатежногоАгента Тогда
		СчетаКассыПлатежногоАгента = Новый Массив;
		СчетаКассыПлатежногоАгента.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
		СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаКассыПлатежногоАгента, УсловиеОтбора);
	Иначе
		УсловиеОтбора.СчетаИсключения = БухгалтерскийУчет.СформироватьМассивСубсчетов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента));
		СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(ПланыСчетов.Хозрасчетный.Касса, УсловиеОтбора);
	КонецЕсли;
	
	// Сформируем список подразделений, остатки по которым будут учтены при заполнении.
	СписокПодразделений = Неопределено;
	
	ЗапросПодразделения = Новый Запрос;
	ЗапросПодразделения.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	ЗапросПодразделения.УстановитьПараметр("ПодразделениеОрганизации", ДокументОбъект.ПодразделениеОрганизации);

	Если ДокументОбъект.ФормироватьПоПодразделению Тогда
		
		СписокПодразделений = Новый Массив;
		СписокПодразделений.Добавить(ДокументОбъект.ПодразделениеОрганизации);
		
	ИначеЕсли Справочники.ПодразделенияОрганизаций.ИспользуютсяОбособленныеПодразделенияНеВыделенныеНаОтдельныйБаланс(
		ДокументОбъект.Организация) Тогда
		
		ЗапросПодразделения.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Организация
		|	И НЕ ПодразделенияОрганизаций.ОбособленноеПодразделение";
		
		СписокПодразделений = ЗапросПодразделения.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		СписокПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_СчетаДенежныеДокументы
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = &СубконтоДенежныеДокументы)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаКассы)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_СчетаБезДенежныхДокументов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаДенежныеДокументы КАК ВТ_СчетаДенежныеДокументы
	|		ПО Хозрасчетный.Ссылка = ВТ_СчетаДенежныеДокументы.СчетУчета
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаКассы)
	|	И ВТ_СчетаДенежныеДокументы.СчетУчета ЕСТЬ NULL
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Наличные деньги"" КАК ВидЦенностей,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Кратность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаБезДенежныхДокументов.СчетУчета КАК СчетУчета
	|				ИЗ
	|					ВТ_СчетаБезДенежныхДокументов КАК ВТ_СчетаБезДенежныхДокументов),
	|			,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделениюРегистр) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалютСрезПоследних.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1),
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаДенежныеДокументы.СчетУчета КАК СчетУчета
	|				ИЗ
	|					ВТ_СчетаДенежныеДокументы КАК ВТ_СчетаДенежныеДокументы),
	|			&СубконтоДенежныеДокументы,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделениюРегистр) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("СчетаКассы", СчетаКассы);
	Запрос.УстановитьПараметр("СубконтоДенежныеДокументы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеДокументы);

	УстановитьУсловиеПоПодразделению(Запрос, СписокПодразделений);

	Результат = Запрос.Выполнить();
	
	РезультатЗаполнения.ТаблицаОстатков = Результат.Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйКассовыйОрдер.Номер КАК НомерПКО,
	|	НАЧАЛОПЕРИОДА(ПриходныйКассовыйОрдер.Дата, ДЕНЬ) КАК Дата,
	|	ПриходныйКассовыйОрдер.Ссылка КАК ПКО
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаБезДенежныхДокументов КАК ВТ_СчетаБезДенежныхДокументов
	|		ПО ПриходныйКассовыйОрдер.СчетКасса = ВТ_СчетаБезДенежныхДокументов.СчетУчета
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Дата < &Дата
	|	И ПриходныйКассовыйОрдер.Проведен
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И &УсловиеПоПодразделениюДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	НомерПКО УБЫВ";
	
	УстановитьУсловиеПоПодразделению(Запрос, СписокПодразделений);

	РезультатПКО = Запрос.Выполнить();
	ВыборкаПКО = РезультатПКО.Выбрать();
	
	Если ВыборкаПКО.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатЗаполнения, ВыборкаПКО);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Номер КАК НомерРКО,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, ДЕНЬ) КАК Дата,
	|	РасходныйКассовыйОрдер.Ссылка КАК РКО
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаБезДенежныхДокументов КАК ВТ_СчетаБезДенежныхДокументов
	|		ПО РасходныйКассовыйОрдер.СчетКасса = ВТ_СчетаБезДенежныхДокументов.СчетУчета
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата < &Дата
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И &УсловиеПоПодразделениюДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	НомерРКО УБЫВ";
	
	УстановитьУсловиеПоПодразделению(Запрос, СписокПодразделений);

	РезультатРКО = Запрос.Выполнить();
	ВыборкаРКО = РезультатРКО.Выбрать();
	
	Если ВыборкаРКО.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатЗаполнения, ВыборкаРКО);
	КонецЕсли;
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Процедура УстановитьУсловиеПоПодразделению(Запрос, СписокПодразделений)
	
	Если СписокПодразделений <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделениюРегистр", "Подразделение В (&СписокПодразделений)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделениюДокумент", "ПодразделениеОрганизации В (&СписокПодразделений)");
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоПодразделениюРегистр", Истина);
		Запрос.УстановитьПараметр("УсловиеПоПодразделениюДокумент", Истина);
	КонецЕсли;

КонецПроцедуры

// Возвращает отформатированное представление целого количества рублей для печатной формы.
//
// Параметры:
//  Сумма - Число - Реквизит, для которого необходимо получить суму целых рублей.
//
// Возвращаемое значение:
//  Строка - Отформатированная строка.
//
Функция ФорматРублей(Сумма)
	
	Возврат Формат(Цел(Сумма), "ЧЦ=15; ЧДЦ=0; ЧН=0");

КонецФункции

// Возвращает отформатированное представление количества копеек для печатной формы.
//
// Параметры:
//  Сумма - Число - Реквизит, для которого необходимо получить количество копеек,
//                  оставшихся после вычитания целого количества рублей.
//
// Возвращаемое значение:
//  Строка - Отформатированная строка.
//
Функция ФорматКопеек(Сумма)
	
	Копейки = (Сумма - Цел(Сумма)) * 100;
	
	Возврат Формат(Копейки, "ЧЦ=2; ЧДЦ=0; ЧН=00");
	
КонецФункции

#КонецОбласти

#КонецЕсли