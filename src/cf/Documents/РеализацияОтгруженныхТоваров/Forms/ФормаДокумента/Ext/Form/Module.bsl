#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ЭтоНоваяСтрока;

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РеализацияОтгруженныхТоваров",
		"ФормаСписка",
		НСтр("ru='Новости: Реализация отгруженных товаров'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеРеализацияОтгруженныхТоваров";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
		ПараметрыСоздания.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСоздания.УникальныйИдентификатор = УникальныйИдентификатор;
		
		РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
		
		Если Не УчетНДСБП.НужноОжидатьОкончаниеАктуализации(РеквизитыСФ, ПараметрыЗаписи) Тогда
			ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицыТовары();
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УчетНДСКлиент.ОжидатьОкончаниеАктуализации(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("Запись_РеализацияОтгруженныхТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();
	
	Если НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ЭтотОбъект.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",     ЭтотОбъект.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",               Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация",        Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты",     "Кт");
	
	ТипыДокументов = "Метаданные.Документы.РеализацияОтгруженныхТоваров.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип";
	ПараметрыФормы.Вставить("ТипыДокументов",                   ТипыДокументов);
	ПараметрыФормы.Вставить("РежимОтбораДокументов",            ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов",       АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов",              Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом",   Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам",       Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("ВсегдаОтображатьСчетаУчета",       Истина);
	
	ОсобенностиЗачетаАванса = ОсобенностиЗачетаАванса(Объект.ДоговорКонтрагента,
		Объект.ДокументОтгрузки,
		Объект.СпособЗачетаАвансов,
		НачислятьНДСПоОтгрузке);
	ПараметрыФормы.Вставить("ДоступенВыборСпособаЗачетаАванса", ОсобенностиЗачетаАванса.ДоступенВыборСпособаЗачетаАванса);
	ПараметрыФормы.Вставить("СкрытьСчетАванса",                 ОсобенностиЗачетаАванса.СкрытьСчетАванса);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтгрузкиПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ДокументОтгрузки) 
		ИЛИ ТипЗнч(Объект.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		Объект.Товары.Очистить();
		Объект.ЧастичнаяПродажа = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		ДокументОтгрузкиПриИзмененииНаСервере();
		Если Объект.ЧастичнаяПродажа Тогда
			ЗаполнитьТаблицуТоваров();
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичнаяПродажаПриИзменении(Элемент = Неопределено)
	
	Если Объект.ЧастичнаяПродажа
		И ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		ЗаполнитьТаблицуТоваров();
	Иначе
		Объект.Товары.Очистить();
		Если ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
			ДокументОтгрузкиПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ТоварыАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаУчета"
			И НЕ Элементы.Товары.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	СтрокаТаблицы.АналитикаУчета = "<...>";

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, 
		|Цена, Сумма, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|Реализация, ДокументБезНДС, РеализацияВЕАЭС, 
		|ВедетсяУчетНДСПоФЗ150, ВедетсяУчетНДСПоФЗ335, ПокупательНалоговыйАгентПоНДС, ВедетсяУчетПрослеживаемыхТоваров");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 = ВедетсяУчетНДСПоФЗ335;
	ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = ПокупательНалоговыйАгентПоНДС;
	ДанныеОбъекта.Реализация  = Истина;
	ДанныеОбъекта.ДокументБезНДС  = Ложь;
	ДанныеОбъекта.СуммаВключаетНДС = СуммаВключаетНДС;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров  = Ложь;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	 ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		 ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполненияСчетовУчета.КЗаполнению);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета", ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбработки.ДанныеОбъекта);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	//Дополним данные объекта данными отгрузки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") Тогда
		ДанныеОбъекта.Вставить("ТипЦен");
	КонецЕсли;
	РеквизитыОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОтгрузки, "ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ТипЦен");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, РеквизитыОтгрузки);
	
	ДанныеОбъекта.РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	
	СчетаУчетаДляНоменклатуры = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияОтгруженныхТоваров,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчетаДляНоменклатуры);
		
	Если Не ДанныеОбъекта.Свойство("ТипЦен") Или Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена                    = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
		// Дополнительно устанавливаем ставку 0%.
		Если ДанныеОбъекта.РеализацияВЕАЭС
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 
			И НЕ ДанныеОбъекта.ДокументБезНДС Тогда 
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 Тогда 
			// Если покупатель исполняет обязанности налогового агента, то устанавливаем общую ставку НДС и очищаем сумму НДС.
			СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДанныеОбъекта.Дата);
			СтрокаТабличнойЧасти.СуммаНДС  = 0;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Если НЕ (ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335) Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, ДанныеОбъекта, ПредставленияСубконто);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 0);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СуммаВключаетНДС, Ложь);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 0);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СуммаВключаетНДС, Ложь);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Количество);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СуммаВключаетНДС, Ложь);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СуммаВключаетНДС, Ложь);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЗаполнитьПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДокументОтгрузки", ВидСравненияКомпоновкиДанных.Заполнено, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//НомерЗаказа
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерЗаказа");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтчетМаркетплейса", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ДанныеОтгрузки = ПолучитьДанныеДокументаОтгрузки(Объект.ДокументОтгрузки, Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеОтгрузки);
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	Иначе
		ПокупательНалоговыйАгентПоНДС = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		ЗаполнитьДобавленныеКолонкиТаблицыТовары();
	КонецЕсли;
			
	ОсобенностиВзаиморасчетов = ОсобенностиЗачетаАванса(Объект.ДоговорКонтрагента,
		Объект.ДокументОтгрузки,
		Объект.СпособЗачетаАвансов,
		НачислятьНДСПоОтгрузке);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС         = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ        = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ВестиУчетПоДоговорам  = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОтгрузки, "Дата");
	
	НачислятьНДСПоОтгрузке = ?(ТипЗнч(Объект.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"),
		УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости(Объект.Организация, ДатаОснования),
		(УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, ДатаОснования)
		И УчетНДСПереопределяемый.ПолучитьНДСДокумента(Объект.ДокументОтгрузки, "Услуги")=0));
		
	ТребуетсяСчетФактура = НЕ НачислятьНДСПоОтгрузке;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаЧастичнаяПродажа.Видимость = ЗначениеЗаполнено(Объект.ДокументОтгрузки) 
		И ТипЗнч(Объект.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
	Элементы.Товары.Видимость = Объект.ЧастичнаяПродажа;
	Элементы.Товары.Доступность = ЗначениеЗаполнено(Объект.ДокументОтгрузки);
		
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ДокументОтгрузки.Доступность = 
		(НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент) 
		ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента));
	
	// Расчеты
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		Форма.ДокументБезНДС,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	НалоговыйАгентПоФЗ335 = Форма.ПокупательНалоговыйАгентПоНДС = Истина И Форма.ВедетсяУчетНДСПоФЗ335;
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не (Форма.ДокументБезНДС ИЛИ НалоговыйАгентПоФЗ335);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыАналитикаУчета");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
		Форма,
		РеквизитыСФ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ДатаОбработатьИзменение();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если НЕ ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	Документы.РеализацияОтгруженныхТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Объект.ЗачетАвансов.Очистить();
	ОсобенностиВзаиморасчетов = ОсобенностиЗачетаАванса(Объект.ДоговорКонтрагента, Объект.ДокументОтгрузки, Объект.СпособЗачетаАвансов, НачислятьНДСПоОтгрузке);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
			
КонецПроцедуры

&НаСервере
Процедура ДокументОтгрузкиПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ДанныеОтгрузки = ПолучитьДанныеДокументаОтгрузки(Объект.ДокументОтгрузки, Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОтгрузки);
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ОсобенностиВзаиморасчетов = ОсобенностиЗачетаАванса(Объект.ДоговорКонтрагента, Объект.ДокументОтгрузки, Объект.СпособЗачетаАвансов, НачислятьНДСПоОтгрузке);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Получает валюту и итоговые суммы документа отгрузки с учетом установленных признаков учета НДС и проч.
//
// Параметры
//  <ДокументОтгрузки>  - <ДокументСсылка.РеализацияТоваровУслуг> - документ, итоги которого нужно рассчитать
//
// Возвращаемое значение: структура
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаОтгрузки(Знач ДокументОтгрузки, Знач ДокументРеализации)
	
	ДанныеОтгрузки = Новый Структура("ВалютаОтгрузки,СуммаОтгрузки,СуммаНДСОтгрузки,ДокументБезНДС,СуммаВключаетНДС", Неопределено, 0, 0, Ложь);
	Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		Возврат ДанныеОтгрузки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ИмяТабЧасти = "ОС";
	Иначе
		ИмяТабЧасти = "Товары";
	КонецЕсли;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, "ВалютаДокумента, ДокументБезНДС, СуммаВключаетНДС");
	ДанныеОтгрузки.ВалютаОтгрузки   = РеквизитыОбъекта.ВалютаДокумента;
	ДанныеОтгрузки.ДокументБезНДС   = РеквизитыОбъекта.ДокументБезНДС;
	ДанныеОтгрузки.СуммаВключаетНДС = РеквизитыОбъекта.СуммаВключаетНДС;
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		ТаблицаТоваров = Документы.РеализацияОтгруженныхТоваров.ОстатокОтгруженныхТоваров(ДокументОтгрузки, ДокументРеализации);
		
		ДанныеОтгрузки.СуммаОтгрузки    = ТаблицаТоваров.Итог("Сумма") 
										  + ?(ДанныеОтгрузки.СуммаВключаетНДС, 0, ТаблицаТоваров.Итог("СуммаНДС")) 
										  + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, "Услуги");
		ДанныеОтгрузки.СуммаНДСОтгрузки = ТаблицаТоваров.Итог("СуммаНДС") 
		                                  + УчетНДСПереопределяемый.ПолучитьНДСДокумента(ДокументОтгрузки, "Услуги");
		
	Иначе
		ДанныеОтгрузки.СуммаОтгрузки    = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, ИмяТабЧасти);
		ДанныеОтгрузки.СуммаНДСОтгрузки = УчетНДСПереопределяемый.ПолучитьНДСДокумента(ДокументОтгрузки, ИмяТабЧасти);
	КонецЕсли;
			
	Возврат ДанныеОтгрузки;

КонецФункции

&НаСервереБезКонтекста
Функция ОсобенностиЗачетаАванса(Знач ДоговорКонтрагента, Знач ДокументОтгрузки, Знач СпособЗачетаАвансов, Знач НачислятьНДСПоОтгрузке)
	
	Результат = Новый Структура("ДоступенВыборСпособаЗачетаАванса,СкрытьСчетАванса", Истина, Ложь);
	
	ЭтоРеализацияТоваровУслуг = ЗначениеЗаполнено(ДокументОтгрузки) И ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	РасчетыВУсловныхЕдиницах  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	
	Если ЭтоРеализацияТоваровУслуг Тогда
		СпособЗачетаАвансовПриОтгрузке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "СпособЗачетаАвансов");
		ПриОтгрузкеЗачтенАванс = СпособЗачетаАвансовПриОтгрузке <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	Иначе
		ПриОтгрузкеЗачтенАванс = Ложь;
	КонецЕсли;
	
	НалогИсчисленПриОтгрузке = ЭтоРеализацияТоваровУслуг И НачислятьНДСПоОтгрузке;
	АвтоматическийЗачетАвансов = СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПриОтгрузкеНДСИсчисленСУчетомАвансов = НалогИсчисленПриОтгрузке И (ПриОтгрузкеЗачтенАванс ИЛИ РасчетыВУсловныхЕдиницах);
	
	Результат.ДоступенВыборСпособаЗачетаАванса = НЕ (ПриОтгрузкеНДСИсчисленСУчетомАвансов И АвтоматическийЗачетАвансов);
	Результат.СкрытьСчетАванса = ПриОтгрузкеНДСИсчисленСУчетомАвансов;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));

	Возврат МассивВидовДоговоров;

КонецФункции

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетов.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

#КонецОбласти
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаСервере
Процедура ЗаполнитьТаблицуТоваров()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	РеализацияПоОтгрузке = Документы.РеализацияТоваровУслуг.РеализацияПоОтгрузке(Объект.ДокументОтгрузки);
	Если РеализацияПоОтгрузке <> Неопределено
		И РеализацияПоОтгрузке <> Объект.Ссылка Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='На основании документа %1 уже введена полная %2'"),
			Объект.ДокументОтгрузки,
			РеализацияПоОтгрузке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , );
		Объект.ЧастичнаяПродажа = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Результат = Документы.РеализацияОтгруженныхТоваров.ОстатокОтгруженныхТоваров(Объект.ДокументОтгрузки, Объект.Ссылка);
	Объект.Товары.Загрузить(Результат);
	
	ЗаполнитьДобавленныеКолонкиТаблицыТовары();
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыТовары()
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
		
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, ПараметрыОбъекта, ПредставленияСубконто);
	КонецЦикла;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализации(Команда)
	Если Объект.ЧастичнаяПродажа
		И ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		ЗаполнитьТаблицуТоваров();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата", 			Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТаблицы",		"Товары");
	ПараметрыФормы.Вставить("ДокументБезНДС", 	Ложь);
	
	ПараметрыФормы.Вставить("СчетУчета", 	ДанныеСтроки.ПереданныеСчетУчета);
	ПараметрыФормы.Вставить("СчетДоходов", 	ДанныеСтроки.СчетДоходов);
	ПараметрыФормы.Вставить("Субконто", 	ДанныеСтроки.Субконто);
	ПараметрыФормы.Вставить("СчетРасходов", ДанныеСтроки.СчетРасходов);
	ПараметрыФормы.Вставить("СчетУчетаНДСПоРеализации", ДанныеСтроки.СчетУчетаНДСПоРеализации);
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("СуммаНДС", 	ДанныеСтроки.СуммаНДС);
		
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	СтрокаТабличнойЧасти.ПереданныеСчетУчета = ЗначенияВыбранныеВФормеАналитикиУчета.СчетУчета;
	
	Модифицированность = Истина;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если СтрокаТабличнойЧасти.Свойство("АналитикаУчета") И ПользовательУправляетСчетамиУчета Тогда
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
		ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") 
		ИЛИ НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	// При вызове с сервера: функциональная опция может скрыть эти поля
	ДанныеЗаполнения = Новый Структура("ПереданныеСчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(
		ДанныеЗаполнения,
		Истина,
		ПараметрыОбъекта.ПлательщикНДФЛ,
		ПредставленияСубконто);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ЗаполнятьНДС, Знач ЗаполнятьНДФЛ, ПредставленияСубконто)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("СчетУчетаЗабалансовый",   Ложь);
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
	
	ВидСубконтоНГ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// СчетУчета
	Если ЗначениеЗаполнено(ДанныеСтроки.ПереданныеСчетУчета) Тогда
		СвойстваСчета                   = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.ПереданныеСчетУчета);
		Результат.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		Результат.АналитикаУчета        = СвойстваСчета.Код;
	Иначе
		Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена  = Ложь;
	КонецЕсли;
	
	// Счета дохода, расхода и НДС учитываются, если счет учета товара незабалансовый
	Если НЕ Результат.СчетУчетаЗабалансовый Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
			
			СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
					ЭлементСписка = ПредставленияСубконто.НайтиПоЗначению(ДанныеСтроки.Субконто);
					Если ЭлементСписка <> НЕОПРЕДЕЛЕНО Тогда
						ПредставлениеСубконто = ЭлементСписка.Представление;
					Иначе
						ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
						Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) 
							ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
							
							ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
						Иначе
							ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
						КонецЕсли; 
						ПредставленияСубконто.Добавить(ДанныеСтроки.Субконто, ПредставлениеСубконто);
					КонецЕсли;
					
					Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
					КонецЕсли;
				Иначе
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
					
					// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
					Если ЗаполнятьНДФЛ
						И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
						Результат.АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
	    	
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
	    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
	    	СвойстваСчета 		              = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
		Если ЗаполнятьНДС Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
				СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",                  Форма.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС",                    Ложь);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ",                    Форма.ПлательщикНДФЛ);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом",    Объект.СчетУчетаРасчетовСКонтрагентом);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СуммаОтгрузки    = Объект.Товары.Итог("Всего");
	Форма.СуммаНДСОтгрузки = Объект.Товары.Итог("СуммаНДС");
	
КонецПроцедуры

#Область СчетаУчета

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РеализацияОтгруженныхТоваров",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;
	
	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// СпособЗачетаАвансов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СпособЗачетаАвансов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;

	// Товары.СчетДоходов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");			
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// СпособЗачетаАвансов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СпособЗачетаАвансов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Товары.СчетДоходов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТабличнойЧасти, Знач ПараметрыОбъекта, ПредставленияСубконто)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрока = Ложь;

#КонецОбласти 

