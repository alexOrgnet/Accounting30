#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Очистим реквизит Сотрудник, если он уже принят.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
			Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		Объект.ДатаУвольнения = ТекущаяДатаСеанса();
		
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		Если Параметры.Свойство("СтатьяТКРФ") И ЗначениеЗаполнено(Параметры.СтатьяТКРФ) Тогда 
			Объект.СтатьяТКРФ = Параметры.СтатьяТКРФ;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СтатьяТКРФ) Тогда
			Объект.СтатьяТКРФ = Справочники.ОснованияУвольнения.Статья77п3;
			Объект.ОснованиеУвольнения = НСтр("ru = 'Заявление сотрудника'");
		КонецЕсли;
		Если Параметры.Свойство("ДатаУвольнения") И ЗначениеЗаполнено(Параметры.ДатаУвольнения) Тогда 
			Объект.ДатаУвольнения = Параметры.ДатаУвольнения;
		КонецЕсли;
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
		"Объект.Организация",
		"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "Увольнение");
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		
		Если Не ЗначениеЗаполнено(Объект.НаименованиеДокумента) Тогда
			Объект.НаименованиеДокумента = НСтр("ru='Приказ'");
		КонецЕсли;
		
		УправлениеФормой();
		
	КонецЕсли;
	
	ПолучитьТекстДляПриказа();
	УстановитьПредупреждениеРедактированияНомера();
	СервисЭлектронныхТрудовыхКнижек.Увольнение_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.Увольнение",
		"ФормаДокумента",
		НСтр("ru='Новости: Увольнение'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
	Если ИмяСобытия = "Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД" Тогда
		Если Источник <> Неопределено Тогда
			Если Параметр.Организация = Объект.Организация
				И Параметр.Сотрудники.Найти(Объект.Сотрудник) <> Неопределено Тогда
				ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ОснованияУвольнения" Тогда
		Если Источник = Объект.СтатьяТКРФ Тогда
			ПолучитьТекстДляПриказа();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтотОбъект);
	Оповестить("Запись_Увольнение", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УстановитьПредупреждениеРедактированияНомера();
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НомерПриказа)) Тогда
		Объект.НомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяТКРФПриИзменении(Элемент)
	
	ПолучитьТекстДляПриказа();
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ОтразитьВТрудовойКнижкеПриИзменении(Элемент)
	
	УправлениеФормой();
	ОбновитьИнформациюОБудущихМероприятиях();
	
	Если Не УвольнениеСОсновногоМестаРаботы Тогда
		ЭлектронныеТрудовыеКнижкиВызовСервера.ЗапомнитьОтражениеВТрудовойКнижкеСовместительств(Объект.ОтразитьВТрудовойКнижке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "Увольнение", Объект.НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "Увольнение", Объект.НаименованиеВторогоДокументаОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеВторогоДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОБудущихМероприятияхТекстВторогоВариантаДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииБудущихМероприятий", ЭтотОбъект);
	ЭлектронныеТрудовыеКнижкиКлиент.ОткрытьРегистрациюОтменыМероприятий(
		Объект.Организация, ДанныеРегистраторовБудущихМероприятий, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОБудущихМероприятияхТекстПервогоВариантаДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииБудущихМероприятий", ЭтотОбъект);
	ЭлектронныеТрудовыеКнижкиКлиент.ОткрытьРегистраторМероприятия(ДанныеРегистраторовБудущихМероприятий, Оповещение);
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура НаименованиеДокументаНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = "";
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаписиТрудовойКнижки.Количество() = 0 Тогда
		Возврат
	ИначеЕсли ЗаписиТрудовойКнижки.Количество() = 1 Тогда
		ПоказатьЗначение(, ЗаписиТрудовойКнижки[0].ЗаписьЭлектроннойТрудовойКнижки)
	Иначе
		СписокЗаписей = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ЗаписиТрудовойКнижки Цикл
			СписокЗаписей.Добавить(СтрокаТаблицы.ЗаписьЭлектроннойТрудовойКнижки);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокЗаписей, Элемент);
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВторойДокументОснованиеПриИзменении(Элемент)
	
	Если ЕстьВторойДокументОснование Тогда
		Элементы.ВторойДокументОснованиеГруппа.Видимость = Истина;
	Иначе
		Элементы.ВторойДокументОснованиеГруппа.Видимость = Ложь;
		
		Объект.НаименованиеВторогоДокументаОснования = "";
		Объект.СерияВторогоДокументаОснования        = "";
		Объект.НомерВторогоДокументаОснования        = "";
		Объект.ДатаВторогоДокументаОснования         = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяТКРФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КадровыйУчетКлиент.ОбработкаВыбораОснованиеУвольнения(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// БлокировкаИзмененияОбъектов

&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец БлокировкаИзмененияОбъектов

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗарегистрироватьЗаписьЭлектроннойТрудовойКнижки(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Нельзя оформить запись электронной трудовой книжки на основании документа, помеченного на удаление.'"));
		Возврат;
	Иначе
		Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Вставить(0, КодВозвратаДиалога.Да,     НСтр("ru = 'Провести'"));
			Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередРегистрациейСледуетПровестиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед регистрацией записи электронной трудовой книжки документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
		Иначе
			СоздатьЗаписьЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "Увольнение");
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования =
		ЭлектронныеТрудовыеКнижкиВызовСервера.ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования();
		
	ЕстьВторойДокументОснование = ЗначениеЗаполнено(Объект.НаименованиеВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.ДатаВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.СерияВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.НомерВторогоДокументаОснования);
	
	ПрочитатьДанныеСотрудника();
	
	УстановитьТипОснованияУвольнения();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПрочитатьДанныеСотрудника();
	
	Если ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
		Объект.ОтразитьВТрудовойКнижке = Истина;
	ИначеЕсли Не УвольнениеСОсновногоМестаРаботы Тогда
		Объект.ОтразитьВТрудовойКнижке = ЭлектронныеТрудовыеКнижкиВызовСервера.ОтражениеВТрудовойКнижкеСовместительств();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСотрудника()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ВидЗанятости", Объект.ДатаУвольнения);
		Если КадровыеДанные.Количество() > 0 Тогда
			
			УвольнениеСОсновногоМестаРаботы = (КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
				Или КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнформациюОБудущихМероприятиях();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОБудущихМероприятиях()
	
	ЭлектронныеТрудовыеКнижки.ОбновитьГруппуИнформацииОБудущихМероприятиях(ЭтотОбъект, Объект.ДатаУвольнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииБудущихМероприятий(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьИнформациюОБудущихМероприятиях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипОснованияУвольнения()
	
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ОснованияУвольнения");
	КадровыйУчет.УстановитьОграничениеТиповПолюВводаОснованияУвольнения(
		ЭтотОбъект, "СтатьяТКРФ", ОграничениеТипа, ТипЗнч(Объект.СтатьяТКРФ));
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередРегистрациейСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если НЕ ДокументПроведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьЭлектроннойТрудовойКнижки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьЭлектроннойТрудовойКнижки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник",   Объект.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Объект.Организация));
	
	ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатиеЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Объект.НаименованиеДокумента = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПоказатьЗначение(, ВыбранныйЭлемент.Значение)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки()
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, Объект.Ссылка, Новый Структура);
	// Конец БлокировкаИзмененияОбъектов
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СтатусЗаписиЭлектроннойТрудовойКнижки()
	
	УчетЗарплаты.СтатусЗаписиЭлектроннойТрудовойКнижки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстДляПриказа()
	
	ТекстДляПриказа = "";
	Если ЗначениеЗаполнено(Объект.СтатьяТКРФ) Тогда
		ПредставлениеОбъекта = РегистрыСведений.ПредставленияОснованийУвольнения.СоздатьМенеджерЗаписи();
		ПредставлениеОбъекта.Объект = Объект.СтатьяТКРФ;
		ПредставлениеОбъекта.Прочитать();
		Если ПустаяСтрока(ПредставлениеОбъекта.Наименование) Тогда
			ТекстДляПриказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяТКРФ, "ТекстОснования");
		Иначе
			ТекстДляПриказа = ПредставлениеОбъекта.ТекстОснования;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	УчетЗарплаты.УправлениеФормойКадровогоМероприятия(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЕстьВторойДокументОснование",
		"Видимость",
		ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВторойДокументОснованиеГруппа",
		"Видимость",
		ЕстьВторойДокументОснование
		И ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеРедактированияНомера()
	
	Если ПустаяСтрока(Объект.НомерПриказа) Тогда
		ПредупреждениеПриРедактированииРеквизита = НСтр("ru = 'Номер заполняется при записи автоматически'");
	Иначе
		ПредупреждениеПриРедактированииРеквизита = "";
	КонецЕсли;
	
	Элементы.НомерПриказа.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактированииРеквизита;
	
КонецПроцедуры

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

#КонецОбласти
