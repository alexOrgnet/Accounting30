
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И НЕ СчетНаОплатуПокупателюТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц) Экспорт
	
	ИменаТаблиц.Добавить("ВТ_ОплачиваемыеСчета");
	ИменаТаблиц.Добавить("ОплачиваемаяНоменклатура");
	ИменаТаблиц.Добавить("ОплачиваемыеДокументы");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_РасшифровкаПлатежа.Сделка КАК Документ,
	|	ДокументСчетНаОплатуПокупателю.Организация КАК Организация,
	|	ДокументСчетНаОплатуПокупателю.Дата КАК Дата,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС, ИСТИНА) КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаСкидки, 0) КАК СуммаСкидкиПоДокументу,
	|	ВТ_РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.ВалютаДокумента, &ВалютаРегламентированногоУчета) КАК ВалютаДокумента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаПлатежа,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаПлатежа) КАК СуммаОплаты,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	ВТ_РеквизитыШапки.ЭтоВозврат КАК ЭтоВозврат
	|ПОМЕСТИТЬ ВТ_ОплачиваемыеДокументы
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК ВТ_РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки
	|		ПО ВТ_РасшифровкаПлатежа.Ссылка = ВТ_РеквизитыШапки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК ДокументСчетНаОплатуПокупателю
	|		ПО ВТ_РасшифровкаПлатежа.Сделка = ДокументСчетНаОплатуПокупателю.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_РасшифровкаПлатежа.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ВТ_РасшифровкаПлатежа.Сделка ССЫЛКА Документ.СчетНаОплатуПокупателю
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС,
	|	ВТ_РеквизитыШапки.ЭтоВозврат,
	|	ДокументСчетНаОплатуПокупателю.Организация,
	|	ДокументСчетНаОплатуПокупателю.Дата,
	|	ВТ_РасшифровкаПлатежа.Сделка,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС, ИСТИНА),
	|	ВТ_РеквизитыШапки.ВалютаДокумента,
	|	ВТ_РасшифровкаПлатежа.ДоговорКонтрагента,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.ВалютаДокумента, &ВалютаРегламентированногоУчета),
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаСкидки, 0),
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплачиваемыеДокументы.Документ КАК Документ,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.КодНоменклатурнойКлассификацииККТ.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаНоменклатурнойКлассификации,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.КодВидаТРУ, НЕОПРЕДЕЛЕНО) КАК КодВидаТРУ,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Артикул, НЕОПРЕДЕЛЕНО) КАК Артикул,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения.Код, НЕОПРЕДЕЛЕНО) КАК КодЕдиницыИзмерения,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Наименование,
	|	СУММА(ВЫБОР
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|					И ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА)
	|				ТОГДА 1
	|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Цена
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
	|			ИНАЧЕ (СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС) / СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	СУММА(СчетНаОплатуПокупателюТовары.СуммаСкидки) КАК СуммаСкидок,
	|	СУММА(СчетНаОплатуПокупателюТовары.СуммаНДС) КАК СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВТ_РеализованнаяНоменклатура.Количество, 0)) КАК КоличествоОтгружено,
	|	ВТ_РеализованнаяНоменклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВТ_РеализованнаяНоменклатура.ПлатежныйАгент КАК ПлатежныйАгент,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныПроисхожденияТовара,
	|	НЕОПРЕДЕЛЕНО КАК НомерТаможеннойДекларации
	|ИЗ
	|	ВТ_ОплачиваемыеДокументы КАК ВТ_ОплачиваемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|		ПО (СчетНаОплатуПокупателюТовары.Ссылка = ВТ_ОплачиваемыеДокументы.Документ)
	|			И (СчетНаОплатуПокупателюТовары.СтавкаНДС = ВТ_ОплачиваемыеДокументы.СтавкаНДС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализованнаяНоменклатура КАК ВТ_РеализованнаяНоменклатура
	|		ПО (ВТ_РеализованнаяНоменклатура.СчетНаОплату = СчетНаОплатуПокупателюТовары.Ссылка)
	|			И (ВТ_РеализованнаяНоменклатура.СтавкаНДС = СчетНаОплатуПокупателюТовары.СтавкаНДС)
	|			И (ВТ_РеализованнаяНоменклатура.Номенклатура = СчетНаОплатуПокупателюТовары.Номенклатура)
	|			И (ВТ_РеализованнаяНоменклатура.Содержание = СчетНаОплатуПокупателюТовары.Содержание)
	|ГДЕ
	|	(СчетНаОплатуПокупателюТовары.Количество <> 0
	|			ИЛИ ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА))
	|	И НЕ ВТ_ОплачиваемыеДокументы.Документ ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплачиваемыеДокументы.Документ,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.КодНоменклатурнойКлассификацииККТ.Код, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.КодВидаТРУ, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Артикул, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения.Код, НЕОПРЕДЕЛЕНО),
	|	СчетНаОплатуПокупателюТовары.Ссылка.Дата,
	|	ВТ_РеализованнаяНоменклатура.ДоговорПлатежногоАгента,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Цена
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
	|			ИНАЧЕ (СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС) / СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	СчетНаОплатуПокупателюТовары.Номенклатура,
	|	ВТ_РеализованнаяНоменклатура.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплачиваемыеСчета.Документ КАК Документ,
	|	ОплачиваемыеСчета.Организация КАК Организация,
	|	ОплачиваемыеСчета.Дата КАК Дата,
	|	ОплачиваемыеСчета.СуммаСкидкиПоДокументу КАК СуммаСкидкиПоДокументу,
	|	ОплачиваемыеСчета.РасчетыВУсловныхЕдиницах
	|		И ОплачиваемыеСчета.ВалютаДокумента <> ОплачиваемыеСчета.ВалютаПлатежа КАК РасчетыВУсловныхЕдиницах,
	|	ОплачиваемыеСчета.СтавкаНДС КАК СтавкаНДС,
	|	ОплачиваемыеСчета.СуммаНДС КАК СуммаНДС,
	|	ОплачиваемыеСчета.СуммаОплаты КАК СуммаОплаты,
	|	ОплачиваемыеСчета.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СУММА(ЕСТЬNULL(ОплатаСчетов.Сумма * ОплачиваемыеСчета.СуммаОплаты / ОплачиваемыеСчета.СуммаВзаиморасчетов, ОплачиваемыеСчета.СуммаОплаты)) КАК СуммаОплатыВсего
	|ИЗ
	|	ВТ_ОплачиваемыеДокументы КАК ОплачиваемыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетов КАК ОплатаСчетов
	|		ПО ОплачиваемыеСчета.Документ = ОплатаСчетов.СчетНаОплату
	|			И ОплачиваемыеСчета.СтавкаНДС = ОплатаСчетов.СтавкаНДС
	|			И ОплачиваемыеСчета.Организация = ОплатаСчетов.Организация
	|			И (НЕ ОплачиваемыеСчета.ЭтоВозврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемыеСчета.СтавкаНДС,
	|	ОплачиваемыеСчета.СуммаНДС,
	|	ОплачиваемыеСчета.Документ,
	|	ОплачиваемыеСчета.Организация,
	|	ОплачиваемыеСчета.Дата,
	|	ОплачиваемыеСчета.СуммаОплаты,
	|	ОплачиваемыеСчета.СуммаВзаиморасчетов,
	|	ОплачиваемыеСчета.РасчетыВУсловныхЕдиницах
	|		И ОплачиваемыеСчета.ВалютаДокумента <> ОплачиваемыеСчета.ВалютаПлатежа,
	|	ОплачиваемыеСчета.СуммаСкидкиПоДокументу";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплатуПокупателюТовары");
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияПолучатель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ОплаченнаяСуммаСчета(Организация, СчетНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаСчетовОбороты.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетовОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ОплатаСчетов.Обороты(, , , Организация = &Организация И СчетНаОплату = &СчетНаОплату) КАК ОплатаСчетовОбороты";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#Область ОплатаСервиса

Функция Представление(Ссылка) Экспорт
	
	Представление = "";
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Номер, Дата");
		Представление = СтрШаблон(НСтр("ru='Счет № %1 от %2'", КодОсновногоЯзыка),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Ссылка.Номер, Истина),
			Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПоСсылочномуИдентификатору(СсылочныйИдентификатор) Экспорт
	
	Счет = Документы.СчетНаОплатуПокупателю.НайтиПоРеквизиту("СсылочныйИдентификатор", СсылочныйИдентификатор);
	
	Если Счет.Пустая() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Не найден счет со ссылочным идентификатором %1'"), СсылочныйИдентификатор);
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

Процедура СделатьОплаченным(Счет) Экспорт
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Организация, СсылочныйИдентификатор");
	
	СтатусыСчета = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Счет, РеквизитыСчета.Организация);
	
	НомерСчета = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Счет.Номер, Истина);
	ДатаСчета = Формат(Счет.Дата, "ДФ=dd.MM.yyyy");
	СуммаСчета = Счет.СуммаДокумента;
	
	Если СтатусыСчета.Статус = Перечисления.СтатусОплатыСчета.Оплачен Тогда
		ВызватьИсключение СтрШаблон("ru='Счет со ссылочным идентификатором %1 (%2 от %3 на сумму %4) отмечен как оплаченный ранее'",
			РеквизитыСчета.СсылочныйИдентификатор,
			НомерСчета,
			ДатаСчета,
			СуммаСчета);
	КонецЕсли;
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = Перечисления.СтатусОплатыСчета.Оплачен;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Счет, СтатусыДокумента);
	
КонецПроцедуры

Процедура СделатьОтгруженным(Счет) Экспорт
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Организация, СсылочныйИдентификатор");
	
	СтатусыСчета = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Счет, РеквизитыСчета.Организация);
	
	НомерСчета = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Счет.Номер, Истина);
	ДатаСчета = Формат(Счет.Дата, "ДФ=dd.MM.yyyy");
	СуммаСчета = Счет.СуммаДокумента;
	
	Если СтатусыСчета.ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.Отгружен Тогда
		ВызватьИсключение СтрШаблон("ru='Счет со ссылочным идентификатором %1 (%2 от %3 на сумму %4) отмечен как отгруженный ранее'",
			РеквизитыСчета.СсылочныйИдентификатор,
			НомерСчета,
			ДатаСчета,
			СуммаСчета);
	КонецЕсли;
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.Отгружен;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Счет, СтатусыДокумента);
	
КонецПроцедуры

Функция XML(Ссылка) Экспорт
	
	МассивСчетовВXML = Документы.СчетНаОплатуПокупателю.СформироватьСчетаНаОплатуПокупателюВXML(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
	АдресДанных = МассивСчетовВXML[0].АдресВоВременномХранилище;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

Функция PDF(Ссылка) Экспорт
	
	Возврат ФайлПечатнойФормы(Ссылка, ТипФайлаТабличногоДокумента.PDF);
	
КонецФункции

Функция MXL(Ссылка) Экспорт
	
	Возврат ФайлПечатнойФормы(Ссылка, ТипФайлаТабличногоДокумента.MXL);
	
КонецФункции

Функция XLS(Ссылка) Экспорт
	
	Возврат ФайлПечатнойФормы(Ссылка, ТипФайлаТабличногоДокумента.XLS);
	
КонецФункции

#КонецОбласти

Функция РеализацииПоСчетам(СчетаНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаНаОплату", СчетаНаОплату);
	
	Запрос.Текст = Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчетам() 
		+ Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС 
		+ Документы.РозничнаяПродажа.ТекстЗапросаРеализацииПоСчетам();
	
	// Считаем, что если у пользователя есть доступ к счетам на оплату, то к реализациям тоже должен быть.
	// Поэтому для оптимизации вкючаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции 

Функция РеализацииПоСчету(СчетНаОплату) Экспорт
	СчетаНаОплату = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетНаОплату);
	Возврат РеализацииПоСчетам(СчетаНаОплату);
КонецФункции 


Функция ТоварыУслугиКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчету, ЗаполнятьПризнакПрослеживаемости = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("РеализацииПоСчету", РеализацииПоСчету);
	Запрос.УстановитьПараметр("ЗаполнятьПризнакПрослеживаемости", ЗаполнятьПризнакПрослеживаемости);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
		+ ТекстЗапросаРеализованнаяНоменклатура(НомераТаблиц)
		+ ТекстЗапросаТоварыУслугиКРеализацииПоСчету(НомераТаблиц);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Результат.Вставить(НомерТаблицы.Ключ, РезультатЗапроса[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	РеализованнаяНоменклатура = Результат.РеализованнаяНоменклатура;
	
	ПоляОтбора = "ЭтоУслуга, Номенклатура, Цена, Содержание";
	РеализованнаяНоменклатура.Индексы.Добавить(ПоляОтбора);
	Отбор = Новый Структура(ПоляОтбора);
	
	РеквизитыСчета = Новый Структура("СуммаВключаетНДС, СуммаСкидки", Истина, 0);
	Если Результат.РеквизитыСчета.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчета, Результат.РеквизитыСчета[0]);
	КонецЕсли;
	
	ТоварыУслугиКРеализацииПоСчету = Результат.ТоварыУслуги;
	Если РеквизитыСчета.СуммаСкидки <> 0 Или ТоварыУслугиКРеализацииПоСчету.Итог("СуммаСкидки") <> 0 Тогда
		ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТоварыУслугиКРеализацииПоСчету, РеквизитыСчета);
	КонецЕсли;
	
	// первый проход по цене, второй - без цены
	Для Проход = 0 По 1 Цикл
		КоличествоСтрок = ТоварыУслугиКРеализацииПоСчету.Количество();
		Для Поз = 1 По КоличествоСтрок Цикл
			СтрокаКРеализации = ТоварыУслугиКРеализацииПоСчету[КоличествоСтрок-Поз];
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаКРеализации);
			СтрокиРеализовано = РеализованнаяНоменклатура.НайтиСтроки(Отбор);
			
			Для каждого СтрокаРеализовано Из СтрокиРеализовано Цикл
				Если СтрокаРеализовано.Количество < СтрокаКРеализации.КоличествоКРеализации Тогда
					// Частичная отгрузка - уменьшим количество в итоговой таблице
					СтрокаКРеализации.КоличествоКРеализации = СтрокаКРеализации.КоличествоКРеализации - СтрокаРеализовано.Количество;
					// Количесто услуг в счете может быть равно 0. В этом случае в итоговый доумент также надо передавать "0"
					СтрокаКРеализации.Количество = Мин(СтрокаКРеализации.Количество, СтрокаКРеализации.КоличествоКРеализации);
					СтрокаРеализовано.Количество = 0;
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаКРеализации, РеквизитыСчета.СуммаВключаетНДС);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаКРеализации, РеквизитыСчета.СуммаВключаетНДС);
				Иначе
					// Строка реализована полность - удалим ее из итоговой таблицы
					СтрокаРеализовано.Количество = СтрокаРеализовано.Количество - СтрокаКРеализации.Количество;
					ТоварыУслугиКРеализацииПоСчету.Удалить(СтрокаКРеализации);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Отбор.Удалить("Цена");
		РеализованнаяНоменклатура.Свернуть("ЭтоУслуга, Номенклатура, Содержание", "Количество");
	КонецЦикла;
	
	// Удалим служебную колонку
	ТоварыУслугиКРеализацииПоСчету.Колонки.Удалить("КоличествоКРеализации");
	
	Возврат ТоварыУслугиКРеализацииПоСчету;
КонецФункции

#КонецОбласти

#Область ЧекиНПД

Функция ТаблицаУслугПродукцииНПД(Документ) Экспорт
	
	СчетаГотоваяПродукция = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.Номенклатура КАК Ссылка,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Номенклатура.Услуга КАК ЭтоУслугаИлиПродукция
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Склад КАК Склад,
	|	СчетНаОплатуПокупателю.Дата КАК Дата
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Документ";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = Результат[0].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаТовары, "НомерСтроки");
	
	ОтборНеУслуги = Новый Структура("ЭтоУслугаИлиПродукция", Ложь);
	СписокТоваров = ТаблицаТовары.Скопировать(ОтборНеУслуги).ВыгрузитьКолонку("Ссылка");
	
	Выборка = Результат[1].Выбрать();
	Если СписокТоваров.Количество() > 0 И Выборка.Следующий() = 1 Тогда
		СчетаУчетаНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Выборка.Организация,
			СписокТоваров,
			Выборка.Склад,
			Выборка.Дата);
		Для Каждого Товар Из ТаблицаТовары Цикл
			СчетаУчетаТовара = СчетаУчетаНоменклатуры[Товар.Ссылка];
			Если СчетаУчетаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Товар.ЭтоУслугаИлиПродукция = Товар.ЭтоУслугаИлиПродукция
				Или СчетаГотоваяПродукция.Найти(СчетаУчетаТовара.СчетУчета) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	ОтборУслугиПродукция = Новый Структура("ЭтоУслугаИлиПродукция", Истина);
	
	ТаблицаУслугПродукцииНПД = ТаблицаТовары.Скопировать(ОтборУслугиПродукция);
	ТаблицаУслугПродукцииНПД.Сортировать("НомерСтроки Возр");
	ТаблицаУслугПродукцииНПД.Колонки.Удалить("НомерСтроки");
	ТаблицаУслугПродукцииНПД.Колонки.Удалить("ЭтоУслугаИлиПродукция");
	ТаблицаУслугПродукцииНПД.Колонки.Ссылка.Имя = "УслугаНПД";
	
	Возврат ТаблицаУслугПродукцииНПД;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	СписокУсловий = Новый Массив;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 51
		|	СчетНаОплатуПокупателю.Номер,
		|	СчетНаОплатуПокупателю.Дата КАК Дата,
		|	СчетНаОплатуПокупателю.Ссылка,
		|	СчетНаОплатуПокупателю.СуммаДокумента
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
		|		ПО СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	СтрокаПоиска = "%";
	ЕстьСпецсимвол = Ложь;
	// Символы %_[] являются служебными в языке запросов. В случае наличия их в поисковой строке необходимо использовать спецсимвол
	Для Позиция = 1 По СтрДлина(Параметры.СтрокаПоиска) Цикл
		
		ТекущийСимвол = Сред(Параметры.СтрокаПоиска, Позиция, 1);
		
		Если СтрНайти("_%[]~", ТекущийСимвол) > 0 Тогда
			СтрокаПоиска = СтрокаПоиска + "~"+ТекущийСимвол;
			ЕстьСпецСимвол = Истина;
		Иначе 
			СтрокаПоиска = СтрокаПоиска + ТекущийСимвол;
		КонецЕсли;
	
	КонецЦикла;
	
	СтрокаПоиска = СтрокаПоиска+"%";
	
	СписокУсловий.Добавить("СчетНаОплатуПокупателю.Номер ПОДОБНО &Номер"+?(ЕстьСпецсимвол, " СПЕЦСИМВОЛ ""~"" ", ""));
	Запрос.УстановитьПараметр("Номер", СтрокаПоиска);
	
	Для каждого ПараметрОтбора Из Параметры.Отбор Цикл
		
		ИмяРеквизита      = ПараметрОтбора.Ключ;
		ЗначениеРеквизита = ПараметрОтбора.Значение;
		
		Если  ИмяРеквизита = "Оплата" Тогда
			ПутьКРеквизиту = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Перечисление.СтатусОплатыСчета)";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Метаданные.Документы.СчетНаОплатуПокупателю) Тогда
			ПутьКРеквизиту = "СчетНаОплатуПокупателю."+ИмяРеквизита;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ДоговорКонтрагента" Тогда
			ДополнитьОтборПоДоговору(ЗначениеРеквизита);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ФиксированныйМассив") Тогда
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 В (&%2)", ПутьКРеквизиту, ИмяРеквизита);
		Иначе
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 = &%2", ПутьКРеквизиту, ИмяРеквизита);
		КонецЕсли;
		
		СписокУсловий.Добавить(Условие);
		Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условия", СтрСоединить(СписокУсловий, " И "));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Количество() < 51 Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 от %2 (%3)",
				Выборка.Номер,
				Формат(Выборка.Дата, "ДЛФ=D"),
				Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
		
			ДанныеВыбора.Добавить(Выборка.Ссылка,ПредставлениеДокумента);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", "Счет на оплату", 
			ПечатьТорговыхДокументов.ПечатьПредварительныйПросмотрСчетаНаОплату(ПараметрыПечати.Организация, ОбъектыПечати, "СчетЗаказ"));
		ЗаполнитьПараметрыЭлектроннойПочты = Ложь;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриложениеКДоговору") Тогда
		ТаблицаСведенийСчетНаОплату = ПолучитьТаблицуСведенийСчетаНаОплату(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриложениеКДоговору", "Приложение к договору", 
			ПечатьТорговыхДокументов.ПечатьПриложенияКДоговору(ТаблицаСведенийСчетНаОплату, ОбъектыПечати, ПараметрыПечати),,"Документ.СчетНаОплатуПокупателю.ПФ_MXL_ПриложениеКДоговору");

		// Установим имя файла приложения к договору по реквизитам самого договора, 
		// посколько ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати() 
		// устанавливает имя файла по реквизитам объекта печати (счета на оплату).
		УстановитьИмяСохраняемогоФайлаПриложениеКДоговору(ТаблицаСведенийСчетНаОплату, КоллекцияПечатныхФорм);
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетаНаОплату";
	КомандаПечати.Идентификатор  = "СчетЗаказ";
	КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок        = 10;
	
	// Текст договора
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Договора";
	КомандаПечати.Представление = НСтр("ru = 'Договор'");
	КомандаПечати.Обработчик    = "ПечатьДоговоровКлиент.ВыполнитьКомандуПечатиТекстаДоговора";
	КомандаПечати.СписокФорм    = "ФормаДокумента";
	КомандаПечати.Порядок       = 30;
	КомандаПечати.ФункциональныеОпции = "ВестиУчетПоДоговорам";

	// Приложение к договору (спецификация)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиПриложенияКДоговору";
	КомандаПечати.СписокФорм    = "ФормаДокумента";
	КомандаПечати.Порядок       = 40;
	КомандаПечати.ФункциональныеОпции = "ВестиУчетПоДоговорам";

	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Реестр";
		КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Счет покупателю""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм    = "ФормаСписка";
		КомандаПечати.Порядок       = 100;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСведенийСчетаНаОплату(Знач МассивДокументов, СоответствиеДокументовИСчетов = Неопределено, ДокументыБезСчетовНаОплату = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	СтрокиДокументов = РезультатЗапроса[2].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	ДополнительныеРеквизиты = РезультатЗапроса[3].Выгрузить();
	ДополнительныеРеквизиты.Индексы.Добавить("Документ");
	
	РеквизитыQRКода = Справочники.РеквизитыКодаДляОплаты.СписокРеквизитов();
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыСчетаНаОплату();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		СведенияОДокументе.ДополнительныеРеквизитыQRКода = Новый Структура;
		
		СтрокиДополнительныеРеквизиты = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиДополнительныеРеквизиты Цикл
			СведенияОДокументе.ДополнительныеРеквизитыQRКода.Вставить(РеквизитыQRКода[Строка.Реквизит].Идентификатор, Строка.Значение);
		КонецЦикла; 
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
		
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Получатель, "ЮридическоеФизическоеЛицо")
				= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = "Индивидуальный предприниматель";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплатуТовары");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументСчетНаОплатуПокупателю.Ссылка КАК Документ,
	|	ДокументСчетНаОплатуПокупателю.Дата КАК ДатаДокумента,
	|	ДокументСчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта,
	|	ДокументСчетНаОплатуПокупателю.ВалютаДокумента.Код КАК ВалютаКод,
	|	ДокументСчетНаОплатуПокупателю.ВалютаДокумента.Наименование КАК ВалютаНаименование,
	|	ДокументСчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
	|	ДокументСчетНаОплатуПокупателю.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДокументСчетНаОплатуПокупателю.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументСчетНаОплатуПокупателю.Организация КАК Организация,
	|	ДокументСчетНаОплатуПокупателю.ПодразделениеОрганизации КАК Подразделение,
	|	ДокументСчетНаОплатуПокупателю.Организация КАК Поставщик,
	|	ДокументСчетНаОплатуПокупателю.Организация КАК Руководители,
	|	ДокументСчетНаОплатуПокупателю.ОрганизацияПолучатель КАК Получатель,
	|	ДокументСчетНаОплатуПокупателю.Контрагент КАК Покупатель,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.ГосударственныйКонтракт.Код КАК ГосударственныйКонтракт,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.Руководитель КАК ФИОИсполнителя,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.ДолжностьРуководителя КАК ДолжностьИсполнителя,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.РуководительКонтрагента КАК ФИОЗаказчика,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.ДолжностьРуководителяКонтрагента КАК ДолжностьЗаказчика,
	|	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента.УчетАгентскогоНДСПокупателем КАК НДСИсчисляетсяНалоговымАгентом,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница КАК БанковскийСчетПродавца,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ДокументСчетНаОплатуПокупателю.Руководитель КАК Руководитель,
	|	ДокументСчетНаОплатуПокупателю.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДокументСчетНаОплатуПокупателю.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	|	ДокументСчетНаОплатуПокупателю.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Наименование + "" "" + ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.НомерСчета + "" в "" + ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Наименование + "" "" + ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	ДокументСчетНаОплатуПокупателю.СуммаСкидки КАК СуммаСкидки,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.НомерСчета КАК НомерСчета,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.ЦифровойСчет КАК ЦифровойСчет,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Наименование КАК БанкНаименование,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.Код КАК БИК,
	|	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница.Банк.КоррСчет КАК КоррСчет,
	|	ДокументСчетНаОплатуПокупателю.ДополнительныеУсловия КАК ДополнительныеУсловия,
	|	ДокументСчетНаОплатуПокупателю.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_ДанныеСчетНаОплатуПокупателю
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ДокументСчетНаОплатуПокупателю
	|ГДЕ
	|	ДокументСчетНаОплатуПокупателю.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСчетНаОплатуПокупателю.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетНаОплатуПокупателю.Документ КАК Документ,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаИнтеграцииСБП,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокОплаты,
	|	ДанныеСчетНаОплатуПокупателю.ДатаДокумента КАК ДатаДляПолученияСведений,
	|	ДанныеСчетНаОплатуПокупателю.Валюта КАК Валюта,
	|	ДанныеСчетНаОплатуПокупателю.ВалютаКод КАК ВалютаКод,
	|	ДанныеСчетНаОплатуПокупателю.ВалютаНаименование КАК ВалютаНаименование,
	|	ДанныеСчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеСчетНаОплатуПокупателю.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДанныеСчетНаОплатуПокупателю.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеСчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеСчетНаОплатуПокупателю.Организация КАК Организация,
	|	ДанныеСчетНаОплатуПокупателю.Подразделение КАК Подразделение,
	|	ДанныеСчетНаОплатуПокупателю.Поставщик КАК Поставщик,
	|	ДанныеСчетНаОплатуПокупателю.Руководители КАК Руководители,
	|	ДанныеСчетНаОплатуПокупателю.Получатель КАК Получатель,
	|	ДанныеСчетНаОплатуПокупателю.Покупатель КАК Покупатель,
	|	ДанныеСчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеСчетНаОплатуПокупателю.НомерДоговора КАК НомерДоговора,
	|	ДанныеСчетНаОплатуПокупателю.ГосударственныйКонтракт КАК ГосударственныйКонтракт,
	|	ДанныеСчетНаОплатуПокупателю.ДатаДоговора КАК ДатаДоговора,
	|	ДанныеСчетНаОплатуПокупателю.ФИОИсполнителя КАК ФИОИсполнителя,
	|	ДанныеСчетНаОплатуПокупателю.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
	|	ДанныеСчетНаОплатуПокупателю.ФИОЗаказчика КАК ФИОЗаказчика,
	|	ДанныеСчетНаОплатуПокупателю.ДолжностьЗаказчика КАК ДолжностьЗаказчика,
	|	ДанныеСчетНаОплатуПокупателю.НДСИсчисляетсяНалоговымАгентом КАК НДСИсчисляетсяНалоговымАгентом,
	|	ДанныеСчетНаОплатуПокупателю.БанковскийСчетПродавца КАК БанковскийСчетПродавца,
	|	ДанныеСчетНаОплатуПокупателю.ТекстКорреспондента КАК ТекстКорреспондента,
	|	ДанныеСчетНаОплатуПокупателю.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ДанныеСчетНаОплатуПокупателю.Руководитель КАК Руководитель,
	|	ДанныеСчетНаОплатуПокупателю.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеСчетНаОплатуПокупателю.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	|	ДанныеСчетНаОплатуПокупателю.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
	|	ДанныеСчетНаОплатуПокупателю.НаименованиеБанкаПолучателя КАК НаименованиеБанкаПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.БанкПолучателя КАК БанкПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.БикБанкаПолучателя КАК БикБанкаПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.СчетБанкаПолучателя КАК СчетБанкаПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.ГородБанкаПолучателя КАК ГородБанкаПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.НомерСчетаПолучателя КАК НомерСчетаПолучателя,
	|	ДанныеСчетНаОплатуПокупателю.БанкТекстКорресподента КАК БанкТекстКорресподента,
	|	ДанныеСчетНаОплатуПокупателю.СуммаСкидки КАК СуммаСкидки,
	|	ДанныеСчетНаОплатуПокупателю.НомерСчета КАК НомерСчета,
	|	ДанныеСчетНаОплатуПокупателю.ЦифровойСчет КАК ЦифровойСчет,
	|	ДанныеСчетНаОплатуПокупателю.БанкНаименование КАК БанкНаименование,
	|	ДанныеСчетНаОплатуПокупателю.БИК КАК БИК,
	|	ДанныеСчетНаОплатуПокупателю.КоррСчет КАК КоррСчет,
	|	ЕСТЬNULL(СправочникДополнительныеУсловия.ТекстУсловий, """") КАК ТекстДополнительныхУсловий,
	|	ДанныеСчетНаОплатуПокупателю.ДополнительныеУсловия КАК ДополнительныеУсловия,
	|	ДанныеСчетНаОплатуПокупателю.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТ_ДанныеСчетНаОплатуПокупателю КАК ДанныеСчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеСчетНаОплатуПокупателю.Документ = ДанныеПервичныхДокументов.Документ
	|			И ДанныеСчетНаОплатуПокупателю.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО ДанныеСчетНаОплатуПокупателю.Документ = СрокиОплатыДокументов.Документ
	|			И ДанныеСчетНаОплатуПокупателю.Организация = СрокиОплатыДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеУсловия КАК СправочникДополнительныеУсловия
	|		ПО ДанныеСчетНаОплатуПокупателю.ДополнительныеУсловия = СправочникДополнительныеУсловия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуТовары.Ссылка КАК Документ,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаИнтеграцииСБП,
	|	ДанныеСчетНаОплатуПокупателю.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	СчетНаОплатуТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуТовары.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА СчетНаОплатуТовары.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА СчетНаОплатуТовары.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураАртикул,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК НоменклатураНаименование,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Содержание,
	|	ЕСТЬNULL(СчетНаОплатуТовары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СчетНаОплатуТовары.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(СчетНаОплатуТовары.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СчетНаОплатуТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	СчетНаОплатуТовары.Количество КАК Количество,
	|	СчетНаОплатуТовары.Цена КАК Цена,
	|	СчетНаОплатуТовары.Сумма КАК Сумма,
	|	СчетНаОплатуТовары.СуммаСкидки КАК СуммаСкидки,
	|	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ДанныеСчетНаОплатуПокупателю КАК ДанныеСчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|		ПО ДанныеСчетНаОплатуПокупателю.Документ = СчетНаОплатуТовары.Ссылка
	|ГДЕ
	|	НЕ СчетНаОплатуТовары.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетНаОплатуПокупателю.Документ КАК Документ,
	|	ЗначенияРеквизитовКодаДляОплаты.РеквизитКодаДляОплаты.Код КАК Реквизит,
	|	ЗначенияРеквизитовКодаДляОплаты.Значение КАК Значение
	|ИЗ
	|	ВТ_ДанныеСчетНаОплатуПокупателю КАК ДанныеСчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.РеквизитыКодаДляОплаты КАК ЗначенияРеквизитовКодаДляОплаты
	|		ПО ДанныеСчетНаОплатуПокупателю.Документ = ЗначенияРеквизитовКодаДляОплаты.Ссылка
	|ГДЕ
	|	НЕ ЗначенияРеквизитовКодаДляОплаты.РеквизитКодаДляОплаты ЕСТЬ NULL";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
	
КонецФункции
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с перечнем полей, которые могут быть поставлены в текст 
// договора по данным из документа.
//
Функция ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаДокумент) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация", 		Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("БанковскийСчет", 	Справочники.БанковскиеСчета.ПустаяСсылка());
	Результат.Вставить("ВалютаДокумента", 	Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("СуммаСНДС", 		0);
	Результат.Вставить("СуммаНДС", 			0);


	РеквизитыДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, 
		"Организация, СтруктурнаяЕдиница, СуммаДокумента, СуммаВключаетНДС, ВалютаДокумента");

	Результат.Организация 		= РеквизитыДокумента.Организация;
	Результат.БанковскийСчет	= РеквизитыДокумента.СтруктурнаяЕдиница;
	Результат.СуммаСНДС			= РеквизитыДокумента.СуммаДокумента;
	Результат.ВалютаДокумента	= РеквизитыДокумента.ВалютаДокумента;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТЧТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧТовары
	|
	|	ГДЕ
	|		ТЧТовары.Ссылка = &СсылкаНаДокумент";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаНДС = Выборка.СуммаНДС;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура УстановитьИмяСохраняемогоФайлаПриложениеКДоговору(ТаблицаСведенийСчетНаОплату, КоллекцияПечатныхФорм)

	// Приложение к договору печатается из счета на оплату покупателю.
	// Стандартный механизм сохранения печатной формы в файл присвоит имя файла,
	// исходя из реквизитов счета на оплату.
	// Но в случае приложения к договору корректнее назначать имя файла, исходя из реквизитов самого договора.

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПриложениеКДоговору");
	Если ПечатнаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСведенийСчетНаОплату Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерДоговора) И ЗначениеЗаполнено(СтрокаТаблицы.ДатаДоговора) Тогда
			ПредставлениеДокументаДляПечатнойФормы = СтрШаблон(НСтр("ru = 'Приложение к договору № %1'"),
				ПечатьДоговоровКлиентСервер.РеквизитыДоговораСтрокой(СтрокаТаблицы.НомерДоговора, СтрокаТаблицы.ДатаДоговора));
		Иначе
			ПредставлениеДокументаДляПечатнойФормы = СтрШаблон(НСтр("ru = 'Приложение к договору по счету № %1 от %2'"),
				СтрокаТаблицы.НомерДокумента, Формат(СтрокаТаблицы.ДатаДокумента, "ДЛФ=D"));
		КонецЕсли;
		ПредставлениеДокументаДляПечатнойФормы = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПредставлениеДокументаДляПечатнойФормы, " ");
		ИмяФайлаПечатнойФормы.Вставить(СтрокаТаблицы.Документ, ПредставлениеДокументаДляПечатнойФормы);
	КонецЦикла;
	
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;

КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	// Счет на оплату
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.МенеджерПечати  = "Обработка.ПечатьСчетаНаОплату";
	КомандаОтправки.Идентификатор = "СчетЗаказ";
	КомандаОтправки.Представление = НСтр("ru='Счет на оплату'");
	КомандаОтправки.Порядок       = 10;
	
КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Формирует пакеты электронных документов вида счет на оплату стандарта CML 2.08
// 
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на документы СчетаНаОплатуПокупателю
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование электронного счета
//    * АдресВоВременномХранилище - Строка - адрес данных электронного счета во временном хранилище
//
Функция СформироватьСчетаНаОплатуПокупателюВXML(МассивОбъектов) Экспорт
	
	ФайлыКОтправке          = Новый Массив;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивКОбработке        = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
	|	СчетНаОплатуПокупателю.Контрагент.ИНН,
	|	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуПокупателю.Ссылка) КАК СчетНаОплатуПредставление,
	|	СчетНаОплатуПокупателю.Организация.ИНН,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	ВЫБОР СчетНаОплатуПокупателю.Организация.ЮридическоеФизическоеЛицо
	|		КОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЮрЛицо
	|ПОМЕСТИТЬ СчетаНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаНаОплату.СчетНаОплату,
	|	СчетаНаОплату.КонтрагентИНН,
	|	СчетаНаОплату.СчетНаОплатуПредставление,
	|	СчетаНаОплату.ОрганизацияИНН,
	|	СчетаНаОплату.ЭтоЮрЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель
	|ИЗ
	|	СчетаНаОплату КАК СчетаНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				,
	|				ВЫРАЗИТЬ(СтруктурнаяЕдиница КАК Справочник.Организации) В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СчетаНаОплату.Организация
	|						ИЗ
	|							СчетаНаОплату КАК СчетаНаОплату)
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ПО (СчетаНаОплату.Организация = (ВЫРАЗИТЬ(ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК Справочник.Организации)))");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДанных.КонтрагентИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН контрагента.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаДанных.ОрганизацияИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН организации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
				
			Продолжить;
			
		КонецЕсли;
		Если ВыборкаДанных.ЭтоЮрЛицо И НЕ ЗначениеЗаполнено(ВыборкаДанных.Руководитель) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен руководитель организации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
				
			Продолжить;
			
		КонецЕсли;
		
		МассивКОбработке.Добавить(ВыборкаДанных.СчетНаОплату);
		
	КонецЦикла;
	
	ШаблонИмениФайла = Нстр("ru='Электронный счет на оплату № %1 от %2.zip'");
	
	Если МассивКОбработке.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);			
		ОписанияОбъектовУчета = ОбменСКонтрагентами.ОписанияОбъектовУчета(МассивКОбработке);
		ПараметрыВизуализации = ОбменСКонтрагентами.НовыеПараметрыВизуализацииЭлектронногоДокумента();
		ПараметрыВизуализации.ВыводитьДопДанные           = Ложь;
		ПараметрыВизуализации.ВыводитьКопияВерна          = Ложь;
		ДанныеДокументовДляВыгрузки = ОбменСКонтрагентами.СформироватьДанныеДляВыгрузкиЭлектронныхДокументов(ОписанияОбъектовУчета);
		Для Каждого ДанныеДокумента Из ДанныеДокументовДляВыгрузки Цикл
			ОписаниеФайла = Новый Структура;
			ДвоичныеДанныеПакета = ПодготовитьДанныеСчетаНаОплатуКОтправке(ДанныеДокумента.ДвоичныеДанныеПакета);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета, УникальныйИдентификатор);
			СтрокиПредставленияСчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка(ДанныеДокумента.ОбъектУчета), " ");
			ПредставлениеСчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокиПредставленияСчета[2], Истина),
				Формат(СтрокиПредставленияСчета[4], "ДЛФ=DD"));
			ОписаниеФайла.Вставить("Представление"            , ПредставлениеСчета);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресХранилища);
			ФайлыКОтправке.Добавить(ОписаниеФайла);
		КонецЦикла;
			
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
	Возврат ФайлыКОтправке;
	
КонецФункции

// Изменим структуру папок в архиве электронного документа для обратной совместимости.
Функция ПодготовитьДанныеСчетаНаОплатуКОтправке(ДвоичныеДанные)
	
	Чтение = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
	ПапкаДляРаспаковки = ФайловаяСистема.СоздатьВременныйКаталог();
	Чтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	
	Запись = Новый ЗаписьZipФайла;
	Запись.Добавить(ПапкаДляРаспаковки + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
		РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		
	Файлы = НайтиФайлы(ПапкаДляРаспаковки, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Попытка
			Запись.Добавить(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ДвоичныеДанныеАрхива = Запись.ПолучитьДвоичныеДанные();
	
	ОбщегоНазначения.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
	
	Возврат ДвоичныеДанныеАрхива;
	
КонецФункции

// Читает данные электронных документов вида счет на оплату стандарта CML 2.08
//
// Параметры:
//  АдресаXMLФайлов - Массив - массив строк с адресами данных электронных счетов во временном хранилище
//
// Возвращаемое значение:
//  ДанныеСчетов - ТаблицаЗначений - таблица значений с колонками:
//    * ИНН - Строка - ИНН контрагента
//    * НомерСчета - Строка - номер электронного счета на оплату
//    * ДанныеСчета - Структура - содержит структуру заполненную данными электронного счета, см. ЗаполнитьСтруктуруДанныхСчета()
//
Функция РазобратьСчетаНаОплатуПокупателюXML(АдресаXMLФайлов) Экспорт
	
	ДанныеСчетов = Новый ТаблицаЗначений;
	ДанныеСчетов.Колонки.Добавить("Показывать"       , Новый ОписаниеТипов("Булево"));
	ДанныеСчетов.Колонки.Добавить("Наименование"     , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеСчетов.Колонки.Добавить("ИНН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДанныеСчетов.Колонки.Добавить("НомерСчета"       , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ДанныеСчетов.Колонки.Добавить("ДатаСчета"        , Новый ОписаниеТипов("Дата"));
	ДанныеСчетов.Колонки.Добавить("СуммаДокумента"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеСчетов.Колонки.Добавить("ДанныеДокумента"  , Новый ОписаниеТипов("Структура"));
	ДанныеСчетов.Колонки.Добавить("ТабличныйДокумент", Новый ОписаниеТипов("ТабличныйДокумент"));
	
	ДанныеСчетов.Индексы.Добавить("ИНН, НомерСчета");
	
	Для Каждого АдресXMLФайла Из АдресаXMLФайлов Цикл
		
		СтруктураРеквизитовСчета = ПрочитатьЭлектронныйСчет(АдресXMLФайла);
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовСчета) Тогда
			
			Отбор = Новый Структура("ИНН, НомерСчета",
				СтруктураРеквизитовСчета.РеквизитыКонтрагента.ИНН,
				СтруктураРеквизитовСчета.ШапкаДокумента.Номер);
			
			Если ДанныеСчетов.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныхСчета                   = ДанныеСчетов.Добавить();
			СтрокаДанныхСчета.Показывать        = Истина;
			СтрокаДанныхСчета.Наименование      = СтруктураРеквизитовСчета.РеквизитыКонтрагента.Наименование;
			СтрокаДанныхСчета.ИНН               = СтруктураРеквизитовСчета.РеквизитыКонтрагента.ИНН;
			СтрокаДанныхСчета.НомерСчета        = СтруктураРеквизитовСчета.ШапкаДокумента.Номер;
			СтрокаДанныхСчета.ДатаСчета         = СтруктураРеквизитовСчета.ШапкаДокумента.Дата;
			СтрокаДанныхСчета.СуммаДокумента    = СтруктураРеквизитовСчета.ШапкаДокумента.СуммаДокумента;
			СтрокаДанныхСчета.ДанныеДокумента   = СтруктураРеквизитовСчета;
			СтрокаДанныхСчета.ТабличныйДокумент = СтруктураРеквизитовСчета.ТабличныйДокумент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСчетов;
	
КонецФункции

Функция ПрочитатьЭлектронныйСчет(АдресВХранилище)
	
	ДанныеЭД = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если ТипЗнч(ДанныеЭД) = Тип("Структура") Тогда
		ДвоичныеДанные = ДанныеЭД.ДвоичныеДанные;
	Иначе
		ДвоичныеДанные = ДанныеЭД;
	КонецЕсли;
	
	Результат = Неопределено;
	Попытка
		ДанныеКонтейнера = ОбменСКонтрагентами.ОписаниеКонтейнераЭлектронногоДокумента(ДвоичныеДанные);
		
		ПараметрыВизуализации = ОбменСКонтрагентами.НовыеПараметрыВизуализацииЭлектронногоДокумента();
		ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Истина;
		ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
		ПредставлениеДокумента = ОбменСКонтрагентами.ПредставлениеЭлектронногоДокументаПоФайлу(ДанныеКонтейнера.Содержание.ВидДокумента,
			ДанныеКонтейнера.ДанныеОсновногоФайла.ДвоичныеДанные,, ПараметрыВизуализации);
		
		ДанныеДокумента = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеКонтейнера.ДанныеОсновногоФайла.ДвоичныеДанные);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru='Получение данных электронного документа'"),
			ТекстОшибки);
	
		Возврат Результат;
	КонецПопытки;
	
	Если ДанныеКонтейнера.Содержание.ТипДокумента <> ОбменСКонтрагентами.ТипыДокументов().СчетНаОплату Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеСчета = ЗаполнитьСтруктуруДанныхСчета(ДанныеДокумента.НовыйЭД, ДанныеДокумента.ДеревоРазбора);
	ДанныеСчета.Вставить("ДеревоРазбора", ДанныеДокумента.ДеревоРазбора);
	ДанныеСчета.Вставить("ФайлДанных", ДанныеКонтейнера.ДанныеОсновногоФайла.ДвоичныеДанные);
	ДанныеСчета.Вставить("ДанныеРазбора", Неопределено);
	ДанныеСчета.Вставить("СтрокаОбъекта", Неопределено);
		
	Если ТипЗнч(ПредставлениеДокумента) = Тип("ТабличныйДокумент") Тогда
		ДанныеСчета.Вставить("ТабличныйДокумент", ПредставлениеДокумента);
	КонецЕсли;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ЗаполнитьСтруктуруДанныхСчета(СтрокаОбъекта, ДеревоРазбора)
	
	РеквизитыКонтрагента = Новый Структура;
	
	ЮрФизЛицо = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта,
		"Контрагент.ЮрФизЛицо");
	
	ПолноеНаименованиеКонтрагента = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование");
	РеквизитыКонтрагента.Вставить("Наименование", Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(ПолноеНаименованиеКонтрагента));
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		РеквизитыКонтрагента.Вставить("НаименованиеПолное", ПолноеНаименованиеКонтрагента);
	Иначе
		Фамилия = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Фамилия");
		Имя = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Имя");
		Отчество = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Отчество");
		РеквизитыКонтрагента.Вставить("НаименованиеПолное", Фамилия + " " + Имя + " " + Отчество);
	КонецЕсли;
	РеквизитыКонтрагента.Вставить("ИНН", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	РеквизитыКонтрагента.Вставить("КПП", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	РеквизитыКонтрагента.Вставить("КодПоОКПО", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	
	АдресСтруктурой = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.АдресСтруктурой");
	ФактическийАдрес = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
	
	Если ЗначениеЗаполнено(АдресСтруктурой) Тогда
		ПредставлениеАдреса = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление");
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ФактическийАдрес.КонтактнаяИнформация = Обработки.ПрямойОбменЭД.ПолучитьXMLПредставлениеАдреса(
			АдресСтруктурой, ВидАдреса, ПредставлениеАдреса);
		ФактическийАдрес.Представление = ПредставлениеАдреса;
		ФактическийАдресЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ФактическийАдрес.КонтактнаяИнформация, ВидАдреса);
	Иначе
		ФактическийАдрес.КонтактнаяИнформация = Неопределено;
		ФактическийАдрес.Представление = "";
		ФактическийАдресЗначениеJSON = "";
	КонецЕсли;
	
	РеквизитыКонтрагента.Вставить("ФактическийАдрес", ФактическийАдрес);
	РеквизитыКонтрагента.Вставить("ФактическийАдресЗначениеJSON", ФактическийАдресЗначениеJSON);
	
	Контакты = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Контакты");
		
	Если ЗначениеЗаполнено(Контакты) Тогда
		Для Каждого Контакт Из Контакты Цикл
			ЭлементКонтактнойИнформации = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
			Если Контакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ЭлементКонтактнойИнформации.Представление = Контакт.Представление;
				РеквизитыКонтрагента.Вставить("ТелефонЗначениеJSON",
					УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Контакт.Представление, ВидКонтактнойИнформации));
				ЭлементКонтактнойИнформации.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					РеквизитыКонтрагента.ТелефонЗначениеJSON, Контакт.Представление , ВидКонтактнойИнформации);
				РеквизитыКонтрагента.Вставить("Телефон", ЭлементКонтактнойИнформации);
			ИначеЕсли Контакт.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
				ЭлементКонтактнойИнформации.Представление = Контакт.Представление;
				РеквизитыКонтрагента.Вставить("АдресЭлектроннойПочтыЗначениеJSON", 
					УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Контакт.Представление, ВидКонтактнойИнформации));
				ЭлементКонтактнойИнформации.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					РеквизитыКонтрагента.АдресЭлектроннойПочтыЗначениеJSON, Контакт.Представление, ВидКонтактнойИнформации);
				РеквизитыКонтрагента.Вставить("АдресЭлектроннойПочты", ЭлементКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	РеквизитыКонтрагента.Вставить("БИК", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	РеквизитыКонтрагента.Вставить("Банк", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	РеквизитыКонтрагента.Вставить("КоррСчет", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	РеквизитыКонтрагента.Вставить("НомерСчета", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетовБИК", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетов", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетовКоррСчет", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
		
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Организация", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(
		СтрокаОбъекта, "Организация", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("ИННОрганизации",
		ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументуСумма"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
		
	Товары = Новый Массив;
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	СуммаНДСПоСтавкам = Новый ТаблицаЗначений;
	СуммаНДСПоСтавкам.Колонки.Добавить("СтавкаНДС");
	СуммаНДСПоСтавкам.Колонки.Добавить("СуммаНДС");
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		Товар = Новый Структура;
		РеквизитыИзСопоставления = СтрокаТЧ.Строки.Найти("Сопоставление").ЗначениеРеквизита;
		Товар.Вставить("Наименование", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "Описание"));
		Товар.Вставить("Количество", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "Количество"));
		Товар.Вставить("СтавкаНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "СтавкаНДС"));
		Товар.Вставить("СуммаНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "СуммаНДС"));
		Товар.Вставить("Цена", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "Цена"));
		Товар.Вставить("Сумма", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "Сумма"));
		Товар.Вставить("Идентификатор", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "Ид"));
		Товар.Вставить("Артикул", РеквизитыИзСопоставления.Артикул);
		Товар.Вставить("ЕдиницаИзмерения", РеквизитыИзСопоставления.ЕдиницаИзмерения);
		Товар.Вставить("НоменклатураИБ", РеквизитыИзСопоставления.НоменклатураИБ);
		Товары.Добавить(Товар);
		
		ДанныеОСуммеСтавкеНДС = СуммаНДСПоСтавкам.Добавить();
		ДанныеОСуммеСтавкеНДС.СтавкаНДС = Товар.СтавкаНДС;
		ДанныеОСуммеСтавкеНДС.СуммаНДС = Товар.СуммаНДС;
	КонецЦикла;
	
	СуммаНДСПоСтавкам.Свернуть("СтавкаНДС", "СуммаНДС");
	
	Если СуммаНДСПоСтавкам.Количество() = 1 Тогда
		СтавкаНДС = СуммаНДСПоСтавкам[0].СтавкаНДС;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("СтавкаНДС", СтавкаНДС);
	
	ТекстНДС = "";
	Для Каждого СтрокаНДС ИЗ СуммаНДСПоСтавкам Цикл
		ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
		Если СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = ТекстНДС + "Без налога (НДС)";
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Тогда
			ТекстНДС = "";
		Иначе
			ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
	ТекстНДС = ?(ПустаяСтрока(ТекстНДС), "", "В т.ч. ") + ТекстНДС;
	
	ШаблонНазначенияПлатежа = Нстр("ru='Оплата по счету №%1 от %2
		|Сумма %3'");
	НазначениеПлатежа = СтрШаблон(ШаблонНазначенияПлатежа,
		ДанныеЗаполненияШапки.Номер,
		Формат(ДанныеЗаполненияШапки.Дата, "ДФ=dd.MM.yyyy"),
		Формат(Число(ДанныеЗаполненияШапки.СуммаДокумента), "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ТекстНДС;
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("ШапкаДокумента"      , ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
	ДанныеДляОбъекта.Вставить("Товары",               Товары);
	
	ДанныеДляОбъекта.Вставить("ИдентификаторДокумента",
		ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта,
			"ИдентификаторДокумента"));
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ОбработатьТаблицуУслуги(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетНаОплатуПокупателюУдалитьУслуги.Ссылка КАК СчетНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.УдалитьУслуги КАК СчетНаОплатуПокупателюУдалитьУслуги";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.СчетНаОплату) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.СчетНаОплату.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.УдалитьУслуги.Количество() > 0 Тогда
				ТаблицаУслуг = ДокументОбъект.УдалитьУслуги.Выгрузить();
				
				Для Каждого СтрокаТЧ Из ТаблицаУслуг Цикл
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				КонецЦикла;
				
				ДокументОбъект.УдалитьУслуги.Очистить();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось объединить товары и услуги в ""%1"" по причине:
			|%2'"), 
			Выборка.СчетНаОплату,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
			Выборка.СчетНаОплату, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре СчетНаОплатуПокупателю.ОбработатьТаблицуУслуги
			|не удалось объединить товары и услуги в %1 документах Счет покупателю'"),
			ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура СчетНаОплатуПокупателю.ОбработатьТаблицуУслуги
			|обработала очередную порцию документов Счет покупателю: %1 элементов'"),
			ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОтборПоДоговору(ЗначениеОтбора) Экспорт

	Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
		ОтборПоДоговору = Новый Массив(ЗначениеОтбора);
	Иначе
		ОтборПоДоговору = Новый Массив;
		ОтборПоДоговору.Добавить(ЗначениеОтбора);
	КонецЕсли;
	
	ОтборПоДоговору.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	ЗначениеОтбора = Новый ФиксированныйМассив(ОтборПоДоговору);

КонецПроцедуры

Процедура УстановитьВидимостьСоздаваемыхНаОсновании(ГруппаСоздатьНаОсновании, ЭтоТоварыИУслуги) Экспорт
	
	Если ГруппаСоздатьНаОсновании = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Элемент Из ГруппаСоздатьНаОсновании.ПодчиненныеЭлементы Цикл
			Если ЭтоТоварыИУслуги Тогда
				Если СтрНайти(Элемент.Имя, "ПередачаОС") Тогда
					Элемент.Видимость = Ложь;
				КонецЕсли;
			Иначе
				Если СтрНайти(Элемент.Имя, "РеализацияТоваровУслуг") Или
					 СтрНайти(Элемент.Имя, "РозничнаяПродажа") Или
					 СтрНайти(Элемент.Имя, "АктОбОказанииПроизводственныхУслуг") Тогда
						Элемент.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры

#Область Биллинг

Функция ФайлПечатнойФормы(Ссылка, ТипФайла)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	ПолноеИмяФормы = МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
	СписокОбъектов = Новый Массив();
	СписокОбъектов.Добавить(МетаданныеОбъекта);
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ПолноеИмяФормы, СписокОбъектов);
	НайденнаяКоманда = КомандыПечати.Найти("СчетЗаказ", "Идентификатор"); 
	
	Если НайденнаяКоманда = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КомандаПечатиВФайл = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяКоманда);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Ссылка);
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайла);
	НастройкиСохранения.ПодписьИПечать = Истина;
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивДокументов, НастройкиСохранения);
	
	Если Не ЗначениеЗаполнено(РезультатПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатПечати[0].ДвоичныеДанные;
	
КонецФункции

// Процедура - обработчик обновления
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьВидОперацииПоУмолчанию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетаПокупателю.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено ИЛИ
			ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			ОбъектовОбработано = ОбъектовОбработано - 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСчетаПокупателю.ТоварыИУслуги;
		КонецЕсли;
		
		Попытка
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре Документы.СчетНаОплатуПокупателю.ЗаполнитьВидОперацииПоУмолчанию() не удалось обработать документ ""Счет покупателю"" по причине:
			|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.СчетНаОплатуПокупателю, Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки; 
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В процедуре Документы.СчетНаОплатуПокупателю.ЗаполнитьВидОперацииПоУмолчанию() не удалось обработать документ ""Счет покупателю"": в %1 из %2 возникли ошибки'"),
		ПроблемныхОбъектов,
		ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.СчетНаОплатуПокупателю,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура Документы.СчетНаОплатуПокупателю.ЗаполнитьВидОперацииПоУмолчанию() обработала очередную порцию документов ""Счет покупателю"": %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

Функция ОпределитьПодписантов(СписокДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылки", СписокДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Руководитель КАК Руководитель,
	|	СчетНаОплатуПокупателю.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&Ссылки)";
	
	ПодписантыДокументов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписиДокумента = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.Руководитель) Тогда
			ПодписиДокумента.Вставить("Руководитель", Выборка.Руководитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ГлавныйБухгалтер) Тогда
			ПодписиДокумента.Вставить("ГлавныйБухгалтер", Выборка.ГлавныйБухгалтер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписиДокумента) Тогда
			ПодписантыДокументов.Вставить(Выборка.Ссылка, ПодписиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписантыДокументов;
	
КонецФункции

Функция ТекстЗапросаРеквизитыСчета(НомераТаблиц)
	НомераТаблиц.Вставить("ВТ_РеализацииПоСчету", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыСчета", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТоварыУслуги", НомераТаблиц.Количество());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацииПоСчету.Реализация КАК РеализацияТоваров,
	|	РеализацииПоСчету.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	&РеализацииПоСчету КАК РеализацииПоСчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСчета.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеквизитыСчета.СуммаСкидки КАК СуммаСкидки
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК РеквизитыСчета
	|ГДЕ
	|	РеквизитыСчета.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА) КАК ЭтоУслуга,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СправочникНоменклатура.НомерГТД, НЕОПРЕДЕЛЕНО) КАК НомерГТД,
	|	ЕСТЬNULL(СправочникНоменклатура.СтранаПроисхождения, НЕОПРЕДЕЛЕНО) КАК СтранаПроисхождения,
	|	ЕСТЬNULL(СправочникНоменклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО) КАК КодТНВЭД,
	|	ТоварыУслуги.Содержание КАК Содержание,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|				И ТоварыУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТоварыУслуги.Количество
	|	КОНЕЦ КАК КоличествоКРеализации,
	|	ТоварыУслуги.Количество КАК Количество,
	|	ТоварыУслуги.Цена КАК Цена,
	|	ТоварыУслуги.Сумма КАК Сумма,
	|	ТоварыУслуги.ПроцентСкидки КАК ПроцентСкидки,
	|	ТоварыУслуги.СуммаСкидки КАК СуммаСкидки,
	|	ТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыУслуги.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ЗаполнятьПризнакПрослеживаемости
	|			ТОГДА ЕСТЬNULL(СправочникНоменклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрослеживаемыйТовар
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТоварыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыУслуги.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТоварыУслуги.Ссылка = &СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаРеализованнаяНоменклатура(НомераТаблиц) Экспорт
	НомераТаблиц.Вставить("ВТ_РеализованнаяНоменклатура", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВТ_РеализованныеТоварыПоДокументам.ЭтоУслуга КАК ЭтоУслуга,
	|	ВТ_РеализованныеТоварыПоДокументам.Номенклатура КАК Номенклатура,
	|	ВТ_РеализованныеТоварыПоДокументам.Содержание КАК Содержание,
	|	ВТ_РеализованныеТоварыПоДокументам.Цена КАК Цена,
	|	СУММА(ВТ_РеализованныеТоварыПоДокументам.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_РеализованнаяНоменклатура
	|ИЗ
	|	(&ТекстыЗапросовРеализованныеТовары) КАК ВТ_РеализованныеТоварыПоДокументам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализованныеТоварыПоДокументам.Номенклатура,
	|	ВТ_РеализованныеТоварыПоДокументам.ЭтоУслуга,
	|	ВТ_РеализованныеТоварыПоДокументам.Содержание,
	|	ВТ_РеализованныеТоварыПоДокументам.Цена";
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализованнаяНоменклатураПоСчету());
	ТекстыЗапроса.Добавить(Документы.РозничнаяПродажа.ТекстЗапросаРеализованнаяНоменклатураПоСчету());
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстыЗапросовРеализованныеТовары", 
		СтрСоединить(ТекстыЗапроса, Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС));
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаТоварыУслугиКРеализацииПоСчету(НомераТаблиц)
	НомераТаблиц.Вставить("РеализованнаяНоменклатура", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_РеализованнаяНоменклатура.ЭтоУслуга КАК ЭтоУслуга,
	|	ВТ_РеализованнаяНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТ_РеализованнаяНоменклатура.Содержание КАК Содержание,
	|	ВТ_РеализованнаяНоменклатура.Цена КАК Цена,
	|	СУММА(ВТ_РеализованнаяНоменклатура.Количество) КАК Количество
	|ИЗ
	|	ВТ_РеализованнаяНоменклатура КАК ВТ_РеализованнаяНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализованнаяНоменклатура.ЭтоУслуга,
	|	ВТ_РеализованнаяНоменклатура.Содержание,
	|	ВТ_РеализованнаяНоменклатура.Цена,
	|	ВТ_РеализованнаяНоменклатура.Номенклатура";
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

#КонецОбласти

#КонецЕсли
