#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	// Выделяем в форме списка строки тех документов, которые только что были созданы из ранее запланированных.
	// Используется при работе с функциональностью периодических счетов покупателям.
	СписокВыделенияПериодическихСчетов = Неопределено;
	Если Параметры.Свойство("СписокВыделения", СписокВыделенияПериодическихСчетов)
		И ЗначениеЗаполнено(СписокВыделенияПериодическихСчетов) Тогда
		СписокВыделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокВыделенияПериодическихСчетов.Ссылка);
		УстановитьУсловноеОформление(СписокВыделения);
	КонецЕсли;
		
	НадписьЗапланировано = НадписьЗапланировано();
	Элементы.НадписьЗапланировано.Видимость = ЗначениеЗаполнено(НадписьЗапланировано);
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОтгрузкиПоУмолчанию", Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаСписка(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если Не РазделениеВключено Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_Подключение1СЭДО");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ВидОперации") Тогда
		ВидОперации = Параметры.Отбор.ВидОперации;
		АвтоЗаголовок = Ложь;
		Заголовок = "Счета покупателям основных средств";
		Элементы.ФормаЗагрузитьИзИнтернетМагазина.Видимость = Ложь;
	Иначе
		ВидыОпераций = Новый Массив;
		ВидыОпераций.Добавить(Перечисления.ВидыОперацийСчетаПокупателю.ПустаяСсылка());
		ВидыОпераций.Добавить(Перечисления.ВидыОперацийСчетаПокупателю.ТоварыИУслуги);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВидОперации", ВидыОпераций);
	КонецЕсли;
	
	// Переопределим команду меню формы
	ГруппаСоздатьНаОсновании = Элементы.ГруппаГлобальныеКоманды.ПодчиненныеЭлементы.Найти("ФормаСоздатьНаОсновании");
	Если ГруппаСоздатьНаОсновании <> Неопределено Тогда
		КнопкаСозданиеСчетаНаОплату = ГруппаСоздатьНаОсновании.ПодчиненныеЭлементы.Найти("ФормаДокументРеализацияТоваровУслугСоздатьНаОсновании");
		Если КнопкаСозданиеСчетаНаОплату <> Неопределено Тогда
			
			КнопкаСозданиеСчетаНаОплату.Видимость = Ложь;
			Элементы.ФормаСоздатьНаОснованииРеализацияТоваровУслуг.Видимость = Истина;
			Элементы.Переместить(Элементы.ФормаСоздатьНаОснованииРеализацияТоваровУслуг, ГруппаСоздатьНаОсновании, КнопкаСозданиеСчетаНаОплату);
			
		КонецЕсли; 
		
		Документы.СчетНаОплатуПокупателю.УстановитьВидимостьСоздаваемыхНаОсновании(ГруппаСоздатьНаОсновании,
			ВидОперации <> Перечисления.ВидыОперацийСчетаПокупателю.ОсновныеСредства);
		
	КонецЕсли; 
	
	
	// Переопределим команду контекстного меню
	ГруппаКонтекстноеМенюСоздатьНаОсновании = Элементы.Список.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("СписокКонтекстноеМенюСоздатьНаОсновании");
	Если ГруппаКонтекстноеМенюСоздатьНаОсновании <> Неопределено Тогда
		КомандаСоздатьНаОсновании = ГруппаКонтекстноеМенюСоздатьНаОсновании.ПодчиненныеЭлементы.Найти("СписокКонтекстноеМенюДокументРеализацияТоваровУслугСоздатьНаОсновании");
		Если КомандаСоздатьНаОсновании <> Неопределено Тогда
			
			КомандаСоздатьНаОсновании.Видимость = Ложь;
			Элементы.СписокКонтекстноеМенюСоздатьНаОснованииРеализацияТоваровУслуг.Видимость = Истина;
			Элементы.Переместить(Элементы.СписокКонтекстноеМенюСоздатьНаОснованииРеализацияТоваровУслуг, ГруппаКонтекстноеМенюСоздатьНаОсновании, КомандаСоздатьНаОсновании);
		КонецЕсли; 
		
		Документы.СчетНаОплатуПокупателю.УстановитьВидимостьСоздаваемыхНаОсновании(ГруппаКонтекстноеМенюСоздатьНаОсновании,
			ВидОперации <> Перечисления.ВидыОперацийСчетаПокупателю.ОсновныеСредства);
		
	КонецЕсли; 
	
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеБП.НастроенОбменЭДО();
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетНаОплатуПокупателю",
		"ФормаСписка",
		НСтр("ru='Новости: Счета покупателям'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ИспользоватьОнлайнОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты");
	
	ДоступнаИнтеграцияССБП = СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна();
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	Элементы.ФормаЗагрузитьИзИнтернетМагазина.Видимость = ОбменСИнтернетМагазином.ДоступенОбменСИнтернетМагазином();
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_ПравилаРегулярныхСчетовПокупателям"
		Или ИмяСобытия = "Запись_РегулярныеСчетаПокупателям"
		Или ИмяСобытия = "Запись_СчетПокупателю" И Параметр.Свойство("ВведенДокументПоПравилу") Тогда
		
		НадписьЗапланировано = НадписьЗапланировано();
		Элементы.НадписьЗапланировано.Видимость = (НадписьЗапланировано <> "");
		
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда

		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ОнлайнОплатыБПКлиент.ОбработкаОповещения_ФормаСписка(Элементы.Список, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
	Если ОтображатьСтатусыДокументов Тогда
		
		// Подсистема "ОбменСКонтрагентами"
		ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
		// Конец Подсистема "ОбменСКонтрагентами"
		
	КонецЕсли;
	
	Если ИспользоватьОнлайнОплаты Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьОперацииОнлайнОплат", 1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьОперацииПоСБП", 1, Истина);
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстРезультатОбменаСИнтернетМагазиномОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСИнтернетМагазиномКлиент.ПоказатьРезультатВыполненияОбмена(РезультатОбменаСИнтернетМагазином);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	КлючеваяОперация = "СозданиеФормыСчетНаОплатуПокупателям";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыСчетНаОплатуПокупателям";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ОтборыСписков.СброситьИспользованиеПользовательскихОтборовВНастройке(Настройки);
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "Обмен с контрагентами"
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	//Конец Подсистема "Обмен с контрагентами"
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРезультатОбменаСИнтернетМагазиномНажатие(Элемент)
	Элементы.ГруппаРезультатОбменаСИнтернетМагазином.Видимость = Ложь;
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СостояниеЭДО Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ВыбраннаяСтрока, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			СписокДокументов.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ИзменитьСтатус",
		Новый Структура("СписокДокументов", СписокДокументов),
		ЭтотОбъект,
		КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзИнтернетМагазина(Команда)
	
	Элементы.ГруппаРезультатОбменаСИнтернетМагазином.Видимость = Ложь;
	
	ОбработчикПослеВыполненияОбмена = Новый ОписаниеОповещения("ОбработатьПослеВыполненияОбменаСИнтернетМагазином", ЭтотОбъект);
	ОбменСИнтернетМагазиномКлиент.ВыполнитьОбменСИнтернетМагазином(ЭтотОбъект, ОбработчикПослеВыполненияОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(ВыделяемыеЗначения = Неопределено)
	
	УсловноеОформление.Элементы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ВыделяемыеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыделенияЗначений = Новый СписокЗначений();
	СписокВыделенияЗначений.ЗагрузитьЗначения(ВыделяемыеЗначения);
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокВыделенияЗначений);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт(),,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если УправлениеПечатьюБПКлиентСервер.ЭтоИмяКомандыРеестрДокументов(Команда.Имя) Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	Если Не РазделениеВключено Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_Подключение1СЭДО");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

#Область ИнтернетМагазин
&НаКлиенте
Процедура ОбработатьПослеВыполненияОбменаСИнтернетМагазином(Результат, ДопПараметры) Экспорт
	
	ПослеВыполненияОбменаСИнтернетМагазиномНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияОбменаСИнтернетМагазиномНаСервере(Результат)
	
	СписокВыделенияИнтернетМагазин = Новый Массив;
	
	РезультатОбменаСИнтернетМагазином = Результат;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(Результат);
	
	Если РезультатЗагрузки.Успешно Тогда
		Обработано = РезультатЗагрузки.СтатистикаЗагрузки.Заказы.Обработано;
		Если Обработано > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Загрузка выполнена успешно.'");
			ТекстСообщения = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ШаблонСообщения),
				Новый ФорматированнаяСтрока("Подробнее",,,, "#Подробнее"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыделенияИнтернетМагазин, РезультатЗагрузки.СтатистикаЗагрузки.Заказы.Создано);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыделенияИнтернетМагазин, РезультатЗагрузки.СтатистикаЗагрузки.Заказы.Обновлено, Истина);
		Иначе
			ТекстСообщения = НСтр("ru = 'В интернет-магазине нет заказов к загрузке'")
		КонецЕсли;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить обмен с интернет-магазином.'");
		ТекстСообщения = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ШаблонСообщения),
			Новый ФорматированнаяСтрока("Подробнее",,,, "#Подробнее"));
	КонецЕсли;
	
	Элементы.ТекстРезультатОбменаСИнтернетМагазином.Заголовок = ТекстСообщения;
	Элементы.ГруппаРезультатОбменаСИнтернетМагазином.Видимость = Истина;
	
	УстановитьУсловноеОформление(СписокВыделенияИнтернетМагазин);

КонецПроцедуры

#КонецОбласти

#Область РегулярныеСчета

&НаКлиенте
Процедура НадписьЗапланированоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхСчетовПокупателям.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НадписьЗапланировано()
	
	ДанныеДляНадписи = Справочники.ПравилаРегулярныхСчетовПокупателям.ДанныеДляНадписиЗапланировано();
	
	КоличествоЗапланировано = ДанныеДляНадписи.КоличествоЗапланировано;
	КоличествоПросрочено    = ДанныеДляНадписи.КоличествоПросрочено;
	ДатаСледующего          = ДанныеДляНадписи.ДатаСледующего;
	ОсталосьДней            = ДанныеДляНадписи.ОсталосьДней;
	
	Если КоличествоЗапланировано = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементыНадписи = Новый Массив;
	
	Если КоличествоПросрочено > 0 Тогда
		ЦветСсылки = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе 
		ЦветСсылки = ЦветаСтиля.ЦветГиперссылки;
	КонецЕсли;
	
	ЭлементыНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Периодические счета'"),, ЦветСсылки,, "Ссылка"));
	ЭлементыНадписи.Добавить(": ");
	
	Если КоличествоЗапланировано <> КоличествоПросрочено Тогда
		
		ПредметИсчисления = НСтр("ru = 'запланирован, запланировано, запланировано'");
		
		ЭлементыНадписи.Добавить(
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗапланировано, ПредметИсчисления));
		
		Если КоличествоПросрочено > 0 Тогда
			ЭлементыНадписи.Добавить(", из них ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоПросрочено > 0 Тогда
		
		ПредметИсчисления = НСтр("ru = 'просрочен, просрочено, просрочено'");
		
		ЭлементыНадписи.Добавить(
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоПросрочено, ПредметИсчисления));
		
	Иначе
		
		ЭлементыНадписи.Добавить(", ");
		
		Если КоличествоЗапланировано <> 1 Тогда
			ЭлементыНадписи.Добавить(НСтр("ru = 'следующий '"));
		КонецЕсли;
		
		ЭлементыНадписи.Добавить(Формат(ДатаСледующего, "ДЛФ=DD"));
		
		Если ОсталосьДней = 0 Тогда
			
			ЭлементыНадписи.Добавить(Нстр("ru = ' (Сегодня)'"));
			
		ИначеЕсли ОсталосьДней = 1 Тогда
			
			ЭлементыНадписи.Добавить(Нстр("ru = ' (Завтра)'"));
			
		ИначеЕсли ОсталосьДней < 8 Тогда
			
			ПараметрыПредметаИсчисления = НСтр("ru = 'день, дня, дней'");
			НадписьДней = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОсталосьДней, ПараметрыПредметаИсчисления);
			
			ЭлементыНадписи.Добавить(СтрШаблон(Нстр("ru = ' (осталось %1)'"), НадписьДней));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыНадписи);
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияССБП

&НаКлиенте
Процедура ЗагрузитьОперацииПоСБП(ВыводитьОкноОжидания = Истина)
	
	Если Не ДоступнаИнтеграцияССБП Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка статусов операций.'");
	
	РезультатВыполнения = ЗагрузитьСтатусыОплатыЗапускЗадания(УникальныйИдентификатор);
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ЗагрузитьСтатусыОплатыЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьСтатусыОплатыЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьОперацииПоСБП()
	
	ЗагрузитьОперацииПоСБП();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьСтатусыОплатыЗапускЗадания(ИдентификаторЗадания)
	
	// Возможно, что фоновое задание было запущено раньше,
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторЗадания);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка статусов операций.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = "ПолучитьСтатусыОперацияC2B";
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияССБПБП.ПолучитьСтатусыОперацияC2B",
		,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСтатусыОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВыполнененыеОплаты = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		КоличествоОплат = ?(ЗначениеЗаполнено(ВыполнененыеОплаты), ВыполнененыеОплаты.Количество(), 0);
		Если КоличествоОплат > 0 Тогда
			КоличествоОплатСтр = СтрокаСЧислом(НСтр("ru = '; %1 оплата;; %1 оплаты; %1 оплат; %1 оплат'"),
				КоличествоОплат, ВидЧисловогоЗначения.Количественное, "L=ru");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Загружено из СБП: %1'"), КоличествоОплатСтр);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),
				"e1cib/list/Документ.ОплатаПлатежнойКартой",
				ТекстСообщения,,, "СБП");
		КонецЕсли;
		
		Элементы.Список.Обновить();
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОповещениеПользователя(
			Результат.КраткоеПредставлениеОшибки,
			,
			,
			БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОнлайнОплаты

&НаКлиенте
Процедура Подключаемый_ЗагрузитьОперацииОнлайнОплат()
	
	ОнлайнОплатыБПКлиент.НачатьЗагрузкуОперацийОнлайнОплат(Ложь);
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьОперацииОнлайнОплат", 300, Истина); // Каждые 5 минут.
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокДокументовОснований(ВыделенныеДокументы)
	СтруктураОтбора = Новый Структура;
	СписокСчетов = Новый Массив;

	РеквизитыСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВыделенныеДокументы, "Организация, Контрагент");
	Для каждого РеквизитыСчета Из РеквизитыСчетов Цикл
		Если НЕ СтруктураОтбора.Свойство("Организация") Тогда
		
			СтруктураОтбора.Вставить("Организация", РеквизитыСчета.Значение.Организация);
			СтруктураОтбора.Вставить("Контрагент",  РеквизитыСчета.Значение.Контрагент);
			
			СписокСчетов.Добавить(РеквизитыСчета.Ключ);
		
		ИначеЕсли СтруктураОтбора.Организация = РеквизитыСчета.Значение.Организация 
			И СтруктураОтбора.Контрагент = РеквизитыСчета.Значение.Контрагент Тогда
		
			СписокСчетов.Добавить(РеквизитыСчета.Ключ);
		
		КонецЕсли; 
	КонецЦикла; 

	Возврат Новый ФиксированныйМассив(СписокСчетов);
КонецФункции
 

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		СписокСчетовПоКонтрагентам = СписокДокументовОснований(ВыделенныеСтроки);
		
		Если СписокСчетовПоКонтрагентам.Количество() > 0 Тогда
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Основание", СписокСчетовПоКонтрагентам);
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыЗаполнения, ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО() Экспорт
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО() Экспорт
	
	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.СостояниеЭДО);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
