#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Процедура заполняет рассчитываемые реквизиты переданного документа заявки.
//
// Параметры:
//	Объект - ДокументОбъект, ДанныеФормыКоллекция - Документ заявки.
//
Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт

	Объект.Банки.Очистить();
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса()); // Заявку заполняем всегда по состоянию "на сегодня".
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.КонтактноеЛицо = Неопределено;
		
	Иначе

		РеквизитыОрганизации = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, 
			"ЮридическоеФизическоеЛицо,ИндивидуальныйПредприниматель");
		
		ЭтоЮрЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Если ЭтоЮрЛицо Тогда
			ОтветственныеЛица     = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
			Объект.КонтактноеЛицо = ОтветственныеЛица.Руководитель;
		Иначе
			Объект.КонтактноеЛицо = РеквизитыОрганизации.ИндивидуальныйПредприниматель;		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеКонтактногоЛица(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтактногоЛица(Объект) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Объект.ТелефонКонтактногоЛица = "";
		Объект.ТелефонКонтактногоЛицаПодробно = "";
		Возврат;
	КонецЕсли;
	
	Объект.ДолжностьКонтактногоЛица = УчетЗарплаты.ДолжностьФизическогоЛица(
		Объект.КонтактноеЛицо, Объект.Организация, Объект.Дата);

	// Проверим контакты из справочника физических лиц.
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.КонтактноеЛицо), , ВидыКИ);
	
	ТелефонМобильныйКонтактногоЛица = Неопределено;	
	ТелефонРабочийКонтактногоЛица = Неопределено;	

	ТелефонРабочийКонтактногоЛицаПодробно = Неопределено;	
	ТелефонМобильныйКонтактногоЛицаПодробно = Неопределено;
	
	Объект.АдресЭПКонтактногоЛица = "";
	
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица Тогда
			ТелефонРабочийКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
			ТелефонРабочийКонтактногоЛицаПодробно = СтрокаКонтактнойИнформации.Значение;
		ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица Тогда
			ТелефонМобильныйКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
			ТелефонМобильныйКонтактногоЛицаПодробно = СтрокаКонтактнойИнформации.Значение;
		ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица Тогда
			Объект.АдресЭПКонтактногоЛица = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТелефонМобильныйКонтактногоЛица) Тогда
		Объект.ТелефонКонтактногоЛица = ТелефонМобильныйКонтактногоЛица;
		Объект.ТелефонКонтактногоЛицаПодробно = ТелефонМобильныйКонтактногоЛицаПодробно;
	ИначеЕсли ЗначениеЗаполнено(ТелефонРабочийКонтактногоЛица) Тогда
		Объект.ТелефонКонтактногоЛица = ТелефонРабочийКонтактногоЛица;
		Объект.ТелефонКонтактногоЛицаПодробно = ТелефонРабочийКонтактногоЛицаПодробно;
	Иначе
		Объект.ТелефонКонтактногоЛица = "";
		Объект.ТелефонКонтактногоЛицаПодробно = "";
	КонецЕсли;

КонецПроцедуры



// Проверяет корректность и полноту заполнения полей заявки.
// Если указано имя страницы, то проверяются только поля, расположенные на указанной странице.
//
// Параметры:
//	ОбъектИлиФорма - ДокументОбъект, ФормаКлиентскогоПриложения - Документ заявки или его форма.
//	ИмяСтраницы - Строка - Имя страницы заявки для проверки. Может принимать одно из значений:
//		"" (пустая строка) - весь документ целиком;
//		"Начало" - первая страница с выбором организации;
//		"Банки" - страница с выбором банков;
//		"КлиентИП" - страница реквизитов клиента ИП;
//		"КлиентЮЛ" - страница реквизитов клиента юридического лица.
//
// Возвращаемое значение:
//	Булево - Истина, если поля заполнены корректно, иначе Ложь.
//
Функция ПроверитьЗаполнение(ОбъектИлиФорма, ИмяСтраницы = "", ОбязательныеРеквизиты = Неопределено) Экспорт

	Отказ = Ложь;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект               = ОбъектИлиФорма.Объект;
		РеквизитыОрганизации = ОбъектИлиФорма.Организация;
	Иначе
		Объект               = ОбъектИлиФорма;
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
			"Ссылка, ЮридическоеФизическоеЛицо, ИндивидуальныйПредприниматель,
			|ДатаРегистрации, ОГРН, ИНН,
			|КодОКОПФ, НаименованиеОКОПФ,
			|КодОКВЭД2, НаименованиеОКВЭД2,
			|НаименованиеСокращенное, НаименованиеПолное");
	КонецЕсли;

	// Организация
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Организация", , Отказ);
			
			// Остальные поля не проверяем, пока не заполнят организацию.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ОбязательныеРеквизиты, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ОбязательныеРеквизиты, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДополнительныеПоказатели(ОбъектИлиФорма, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДополнительныеФайлы(ОбъектИлиФорма, ИмяСтраницы, Отказ);
	
	Возврат НЕ Отказ;

КонецФункции

// Возвращает структуру с подробной информацией из заявки для выгрузки.
//
// Параметры:
//	ЗаявкаНаОткрытиеСчета - ДокументСсылка.ЗаявкаНаОткрытиеСчета - Заполненная заявка.
//
// Возвращаемое значение:
//	Структура - содержит ключи:
//		* Продукт     - Структура - поля из документа Заявка на открытие счета.
//		* Отправитель - Структура - поля из организации. 
//		* КонтактноеЛицо - Структура - поля контактного лица.
//
Функция СведенияОЗаявке(ЗаявкаНаОткрытиеСчета) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаОткрытиеСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Заявка",         Новый Структура);
	Результат.Вставить("Отправитель",    Новый Структура);
	Результат.Вставить("КонтактноеЛицо", Новый Структура);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчета.Дата КАК Дата,
	|	ЗаявкаНаОткрытиеСчета.ВидСчета КАК ВидСчета,
	|	ЗаявкаНаОткрытиеСчета.Организация КАК Организация,
	|	ЗаявкаНаОткрытиеСчета.Организация.НаименованиеСокращенное КАК Наименование,
	|	ЗаявкаНаОткрытиеСчета.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	ЗаявкаНаОткрытиеСчета.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ЗаявкаНаОткрытиеСчета.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявкаНаОткрытиеСчета.Организация.КодОКВЭД2 КАК КодОКВЭД2,
	|	ЗаявкаНаОткрытиеСчета.Организация.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2,
	|	ЗаявкаНаОткрытиеСчета.Организация.КодОКОПФ КАК КодОКОПФ,
	|	ЗаявкаНаОткрытиеСчета.Организация.НаименованиеОКОПФ КАК НаименованиеОКОПФ,
	|	ЗаявкаНаОткрытиеСчета.Организация.ИНН КАК ИНН,
	|	ЗаявкаНаОткрытиеСчета.Организация.КПП КАК КПП,
	|	ЗаявкаНаОткрытиеСчета.Организация.ДатаРегистрации КАК ДатаРегистрации,
	|	ЗаявкаНаОткрытиеСчета.Организация.ИностраннаяОрганизация КАК ИностраннаяОрганизация,
	|	ЗаявкаНаОткрытиеСчета.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаявкаНаОткрытиеСчета.ДолжностьКонтактногоЛица КАК ДолжностьКонтактногоЛица,
	|	ЗаявкаНаОткрытиеСчета.ТелефонКонтактногоЛица КАК ТелефонКонтактногоЛица,
	|	ЗаявкаНаОткрытиеСчета.АдресЭПКонтактногоЛица КАК АдресЭПКонтактногоЛица,
	|	ЗаявкаНаОткрытиеСчета.Валюты.(
	|		Валюта КАК Валюта,
	|		Валюта.Наименование КАК Наименование,
	|		Валюта.Код КАК Код
	|	) КАК Валюты
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета КАК ЗаявкаНаОткрытиеСчета
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчета.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаОткрытиеСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоФизлицо = (Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	// Описание банковского продукта.
	Описание = Результат.Заявка;
	Описание.Вставить("Ссылка",            ЗаявкаНаОткрытиеСчета);
	Описание.Вставить("Дата",              Выборка.Дата);
	Описание.Вставить("ВидСчета",          Выборка.ВидСчета);
	
	Валюты = Новый Массив;
	ВыборкаВалют = Выборка.Валюты.Выбрать();
	Пока ВыборкаВалют.Следующий() Цикл
		
		СтруктураВалюты = Новый Структура;
		СтруктураВалюты.Вставить("Ссылка",       ВыборкаВалют.Валюта);
		СтруктураВалюты.Вставить("Наименование", ВыборкаВалют.Наименование);
		СтруктураВалюты.Вставить("Код",          ВыборкаВалют.Код);
		
		Валюты.Добавить(СтруктураВалюты);
		
	КонецЦикла;
	
	Описание.Вставить("Валюты", Валюты);
	
	// Описание организации.
	Описание = Результат.Отправитель;
	Описание.Вставить("Организация",                   Выборка.Организация);
	Описание.Вставить("Наименование",                  Выборка.Наименование);
	Описание.Вставить("НаименованиеПолное",            Выборка.НаименованиеПолное);
	Описание.Вставить("ЮридическоеФизическоеЛицо",     Выборка.ЮридическоеФизическоеЛицо);
	Описание.Вставить("КодОКВЭД2",                     Выборка.КодОКВЭД2);
	Описание.Вставить("НаименованиеОКВЭД2",            Выборка.НаименованиеОКВЭД2);
	Описание.Вставить("КодОКОПФ",                      Выборка.КодОКОПФ);
	Описание.Вставить("НаименованиеОКОПФ",             Выборка.НаименованиеОКОПФ);
	Описание.Вставить("ИНН",                           Выборка.ИНН);
	Описание.Вставить("КПП",                           Выборка.КПП);
	Описание.Вставить("ДатаРегистрации",               Выборка.ДатаРегистрации);
	Описание.Вставить("ИностраннаяОрганизация",        Выборка.ИностраннаяОрганизация);
	Описание.Вставить("ИндивидуальныйПредприниматель", Выборка.ИндивидуальныйПредприниматель);
	
	АдресОрганизации = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Выборка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Выборка.Дата);
		
	СтруктураАдресаОрганизации = РаботаСАдресами.СведенияОбАдресе(АдресОрганизации.Значение);
	Регион = РаботаСАдресами.РегионАдресаКонтактнойИнформации(АдресОрганизации.Значение);
	НаселенныйПункт = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(АдресОрганизации.Значение);
	
	ЭтоГородФедеральногоЗначения = РаботаСАдресами.ЭтоГородФедеральногоЗначения(Регион);
	
	Если ЭтоГородФедеральногоЗначения ИЛИ Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
		ГородПредставление = Регион + НСтр("ru = '.'");
		НаселенныйПункт = ГородПредставление;
	ИначеЕсли ЗначениеЗаполнено(Регион) И ЗначениеЗаполнено(НаселенныйПункт) Тогда
		ГородПредставление = СтрШаблон(НСтр("ru = '%1., %2'"), Регион, НаселенныйПункт);
	Иначе
		ГородПредставление = НаселенныйПункт;
	КонецЕсли;

	Описание.Вставить("ГородПредставление", ГородПредставление);
	Описание.Вставить("Город",              НаселенныйПункт);
	Описание.Вставить("КодРегиона",         СтруктураАдресаОрганизации.КодРегиона);
		
	// Идентификатор для образования имени файлов.
	ИдентификаторОтправителя = СокрЛП(Выборка.ИНН);
	Если Не ЭтоФизлицо Тогда
		ИдентификаторОтправителя = ИдентификаторОтправителя + СокрЛП(Выборка.КПП);
	КонецЕсли;
	Описание.Вставить("ИдентификаторОтправителя",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИдентификаторОтправителя));
	
	// Описание контактного лица.
	ОтветственныеЛицаОрганизации = Неопределено;
	
	Описание = Результат.КонтактноеЛицо;
	Описание.Вставить("КонтактноеЛицо",           Выборка.КонтактноеЛицо);
	Описание.Вставить("ДолжностьКонтактногоЛица", Выборка.ДолжностьКонтактногоЛица);
	Описание.Вставить("ТелефонКонтактногоЛица",   Выборка.ТелефонКонтактногоЛица);
	Описание.Вставить("АдресЭПКонтактногоЛица",   Выборка.АдресЭПКонтактногоЛица);
	
	Если Не ЭтоФизлицо Тогда
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Выборка.Организация, Выборка.Дата);
	КонецЕсли;
	// Подбираем контактное лицо.
	Если Не ЗначениеЗаполнено(Описание.КонтактноеЛицо) Тогда
		Описание.КонтактноеЛицо = ?(ЭтоФизлицо, Выборка.ИндивидуальныйПредприниматель, ОтветственныеЛицаОрганизации.Руководитель);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Описание.КонтактноеЛицо) Тогда
		Описание.КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	КонецЕсли;
	Если ЗначениеЗаполнено(Описание.КонтактноеЛицо) Тогда // подбираем реквизиты контактного лица
		// Должность.
		Если ЭтоФизлицо И Описание.КонтактноеЛицо = Выборка.ИндивидуальныйПредприниматель Тогда 
			Описание.ДолжностьКонтактногоЛица = НСтр("ru = 'Индивидуальный предприниматель'");
		КонецЕсли;
		
		// Телефон.
		Если Не ЗначениеЗаполнено(Описание.ТелефонКонтактногоЛица) Тогда
			Описание.ТелефонКонтактногоЛица = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
				Выборка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Выборка.Дата).Представление;
		КонецЕсли;
		// Адрес.
		Если Не ЗначениеЗаполнено(Описание.АдресЭПКонтактногоЛица) Тогда
			Описание.АдресЭПКонтактногоЛица = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
				Выборка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Выборка.Дата).Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Описание.Вставить("ФИОКонтактногоЛица", "");
	Описание.Вставить("Фамилия", "");
	Описание.Вставить("Имя", "");
	Описание.Вставить("Отчество", "");
	Если ЗначениеЗаполнено(Описание.КонтактноеЛицо) Тогда
		
		ПредставлениеФизЛица = УчетЗарплаты.ПредставлениеФизическогоЛица(Описание.КонтактноеЛицо, Выборка.Дата);
		Описание.ФИОКонтактногоЛица = ПредставлениеФизЛица.ФИОПолные;
		Описание.Фамилия            = ПредставлениеФизЛица.Фамилия;
		Описание.Имя                = ПредставлениеФизЛица.Имя;
		Описание.Отчество           = ПредставлениеФизЛица.Отчество;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает структуру с заполненными полями для формирования текста согласия.
//
// Параметры:
//	ЗаявкаНаОткрытиеСчета - ДокументСсылка.ЗаявкаНаОткрытиеСчета, Структура - заполненная заявка или готовое описание из СведенияОЗаявке()
//
// Возвращаемое значение:
//	Структура - см. ЗаявкиНаОткрытиеСчета.ПараметрыСогласия().
// 
Функция ПараметрыСогласия(ЗаявкаНаОткрытиеСчета) Экспорт

	СведенияОЗаявке = ?(ТипЗнч(ЗаявкаНаОткрытиеСчета) = Тип("ДокументСсылка.ЗаявкаНаОткрытиеСчета"),
		СведенияОЗаявке(ЗаявкаНаОткрытиеСчета), ЗаявкаНаОткрытиеСчета);
	
	ЭтоЮрЛицо = СведенияОЗаявке.Отправитель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;

	Результат = ЗаявкиНаОткрытиеСчета.ПараметрыСогласия(ЭтоЮрЛицо);
	
	// Заполняем поля
	Результат.Организация          = СведенияОЗаявке.Отправитель.Организация;
	Результат.ДатаСогласия         = СведенияОЗаявке.Заявка.Дата;
	Результат.ЭтоЮридическоеЛицо   = ЭтоЮрЛицо;
	
	// Общие поля согласия.
	Результат.ИНН = СведенияОЗаявке.Отправитель.ИНН;
		
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбращениеКСервису

// Выполняет формирование пакета заявок в несколько банков на сервере для дальнейшего подписания на клиенте.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* СервисОбменаСБанками - ПеречислениеСсылка.СервисОбменаСБанками - Сервис обмена.
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодготовитьФайлыДляОтправки(Параметры, АдресХранилища) Экспорт

	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(Параметры.СервисОбменаСБанками);

	Если Параметры.ТипТранзакции = ТипыТранзакций.Заявка Тогда

		Результат = ПодготовитьЗаявкуДляОтправки(
			Параметры.ПредметОбмена, Параметры.ФинансовыеПродукты, Параметры.ПредставленияДополнительныхФайлов, Истина);

	Иначе
		
		Результат = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, "");
		
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет формирование архива с файлами заявки на открытие на сервере для дальнейшего сохранения на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на открытие.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//	АдресАрхива - Строка - Адрес дополнительного хранилища, куда поместить данные zip-архива.
//
Процедура ПодготовитьФайлыДляСохранения(Параметры, АдресХранилища, АдресАрхива) Экспорт

	ФинансовыеПродукты = ВыбранныеФинансовыеПродукты(Параметры.ПредметОбмена);

	УстановитьПривилегированныйРежим(Истина);
	Результат = ПодготовитьЗаявкуДляОтправки(Параметры.ПредметОбмена, ФинансовыеПродукты, Параметры.ПредставленияДополнительныхФайлов, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	Если Не Результат.Выполнено Тогда
		
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиФормы.СоздатьАрхивПоДаннымТранзакций(
		Результат.ИдентификаторВременногоХранилищаТранзакций, АдресАрхива, Строка(Параметры.ПредметОбмена));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет отправку в несколько банков пакета заявок, ранее подготовленных на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками.
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета,
//							ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//		* ИдентификаторВременногоХранилищаТранзакций - Строка - местонахождение подписанных файлов.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ОтправитьПодготовленныеФайлы(Параметры, АдресХранилища) Экспорт
	
	Результат = ОтправитьФайлы(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборБанков

// Возвращает структуру для параметра СведенияОЗаявителе функции СведенияОБанках().
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция НовыеСведенияОЗаявителе() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Результат.Вставить("Нерезидент",                Ложь);
	Результат.Вставить("ДатаРождения",              '0001-01-01');
	Результат.Вставить("ДатаРегистрации",           '0001-01-01');
	Результат.Вставить("КодОКВЭД2",                 "");
	Результат.Вставить("КодОКОПФ",                  "");
	Результат.Вставить("ЮрАдресОрганизации",        ""); //  Значения полей в формате XML/JSON подсистемы КонтактнаяИнформация БСП.
	Результат.Вставить("ДатаФактическогоНачалаВеденияБизнеса", '0001-01-01');
	Результат.Вставить("СреднемесячноеПоступлениеНаСчет", 0);  // в рублях
	Результат.Вставить("МинимальноеЕжемесячноеПоступлениеНаСчет", 0);  // в рублях
	Результат.Вставить("ДатаНачалаУчетаВПрограмме", '0001-01-01');
	Результат.Вставить("СуммаВыручки", 0);  // в рублях
	
	// Параметры, которые не требуется заполнять, они будут рассчитаны автоматически.
	Результат.Вставить("ВозрастИП",                      0); // полных лет
	Результат.Вставить("СрокОтДатыРегистрации",          0); // в месяцах
	Результат.Вставить("СрокФактическогоВеденияБизнеса", 0); // в месяцах
	Результат.Вставить("СрокВеденияУчетаВПрограмме",     0); // в месяцах
	Результат.Вставить("КодРегиона",                     "");
	
	// Вспомогательная структура для кэширования временных данных при обработке разных банков.
	Результат.Вставить("ДополнительныеСвойства",         Новый Структура());
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу с данными о банках, которые требуются для подбора подходящих предложений.
//
// Параметры:
//	СведенияОЗаявителе - Структура - см. НовыеСведенияОЗаявителе(), структура модифицируется в процессе работы процедуры.
//	ДатаЗаявки - Дата - Дата, по состоянию на которую возвращаются данные.
//  ВозвращатьНеактивные - Булево - Если Истина, то возвращаются все банки, которые когда-либо были зарегистрированы в сервисе,
//									вне зависимости от текущей активности.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. переменную Результат.
//
Функция СведенияОБанкахИСтопФакторах(СведенияОЗаявителе, ДатаЗаявки, ВозвращатьНеактивные) Экспорт

	МетаданныеЗаявки = Метаданные.Документы.ЗаявкаНаОткрытиеСчета;

	ТипЦелое     = ОбщегоНазначения.ОписаниеТипаЧисло(4);
	ТипСтрока    = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево    = Новый ОписаниеТипов("Булево");

	ТаблицаБанков = Новый ТаблицаЗначений;
	ТаблицаБанков.Колонки.Добавить("Банк",         МетаданныеЗаявки.ТабличныеЧасти.Банки.Реквизиты.Банк.Тип);
	ТаблицаБанков.Колонки.Добавить("Наименование", ТипСтрока);
	ТаблицаБанков.Колонки.Добавить("АдресЛоготипа",ТипСтрока); // Адрес хранилища с картинкой, загружаем ее не сразу, а по требованию, чтобы не занимать лишнюю память.
	ТаблицаБанков.Колонки.Добавить("СтопФакторыПройдены",        ТипБулево); // Истина, если клиент удовлетворяет первичным стоп-факторам банка.
	ТаблицаБанков.Колонки.Добавить("ПорядокСортировки",          ТипЦелое);  // Порядок сортировки продукта в общем списке.
	ТаблицаБанков.Колонки.Добавить("ПорядокСортировкиБанка",     ТипЦелое);  // Порядок сортировки банка в общем списке.
	ТаблицаБанков.Колонки.Добавить("СтепеньСоответствия",        ТипЦелое);
	
	// Идентификаторы допустимых видов счетов для банка.
	ТаблицаБанков.Колонки.Добавить("БелыйСписокВидовСчетов", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("ВидыСчетовБанка", Новый ОписаниеТипов("Массив"));
	
	// Валюты банка.
	ТаблицаБанков.Колонки.Добавить("БелыйСписокВалют", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("ВалютыБанка", Новый ОписаниеТипов("Массив"));
	
	// Продукт
	ТаблицаБанков.Колонки.Добавить("НаименованиеПродукта", ТипСтрока);
	ТаблицаБанков.Колонки.Добавить("ИдентификаторПродукта", ТипСтрока);
	ТаблицаБанков.Колонки.Добавить("КраткоеОписание", ТипСтрока);
	ТаблицаБанков.Колонки.Добавить("ПодробноеОписание", ТипСтрока);
	
	ТаблицаБанков.Колонки.Добавить("ПроцентНаОстаток", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("ПодписаниеВ1СДиректБанк", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("Доступен1СДиректБанк", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("ИнтеграцияССервисомАУСН", ТипБулево);
	ТаблицаБанков.Колонки.Добавить("УслугаАктивна", ТипБулево);
	
	ТаблицаБанков.Колонки.Добавить("ФорматИменованияФайлов", ТипСтрока);
	ТаблицаБанков.Колонки.Добавить("ПрефиксФайла", ТипСтрока);
	
	ТаблицаБанков.Колонки.Добавить("СсылкаНаТаблицуТарифа", ТипСтрока);
	
	ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаявителе, ДатаЗаявки);
	
	// Получим условия банков-партнеров сервиса.
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	УсловияОбслуживания = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.УсловияОбслуживания,
		,
		ВозвращатьНеактивные);
		
	КомпонентыСоответствияПродукту = Новый Структура;
	
	// Эти стоп-факторы считаем более значимыми, поэтому при соответствии им, степень соответствия продукта для 
	// клиента увеличиваем на 10 за каждый пункт.
	КомпонентыСоответствияПродукту.Вставить("МинСуммаВыручки", 10);
	КомпонентыСоответствияПродукту.Вставить("СреднемесячноеПоступлениеНаСчет", 10);
	КомпонентыСоответствияПродукту.Вставить("МинимальноеЕжемесячноеПоступлениеНаСчет", 10);
	КомпонентыСоответствияПродукту.Вставить("ГруппыКонтрагентов", 10);
	
	//Белые списки считаем более значимыми, т.к. таких клиентов предположительно меньше, совпадения будут более точными.
 	КомпонентыСоответствияПродукту.Вставить("РегионыБелыйСписок", 10);
	КомпонентыСоответствияПродукту.Вставить("ОКОПФБелыйСписок", 10);
	КомпонентыСоответствияПродукту.Вставить("ВидыДеятельностиБелыйСписок", 10);
	
	// Эти стоп-факторы считаем менее значимыми, поэтому при соответствии им, степень соответствия продукта для 
	// клиента увеличиваем на 1 за каждый пункт.
	КомпонентыСоответствияПродукту.Вставить("Нерезидент", 1);
	КомпонентыСоответствияПродукту.Вставить("ЮрФизЛицо", 1);
	КомпонентыСоответствияПродукту.Вставить("ВозрастИП", 1);
	КомпонентыСоответствияПродукту.Вставить("ДатаРегистрации", 1);
	КомпонентыСоответствияПродукту.Вставить("СрокФактическогоВеденияБизнеса", 1);
	КомпонентыСоответствияПродукту.Вставить("ДатаНачалаВеденияУчетаВПрограмме", 1);
	КомпонентыСоответствияПродукту.Вставить("СрокВеденияУчетаВПрограмме", 1);
	
	//Черные списки считаем менее значимыми, т.к. таких клиентов больше, совпадения будут более частыми и менее точными.
	КомпонентыСоответствияПродукту.Вставить("РегионыЧерныйСписок", 1);
	КомпонентыСоответствияПродукту.Вставить("ОКОПФЧерныйСписок", 1);
	КомпонентыСоответствияПродукту.Вставить("ВидыДеятельностиЧерныйСписок", 1);
		
	ОбязательныеРеквизитыОрганизации = Новый Структура();

	ПорядокСортировкиБанков = Новый Соответствие;
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	Для Каждого СтрокаТаблицы Из УсловияОбслуживания Цикл
		
		УслугаАктивна = СтрокаТаблицы.НачалоДействия <= ДатаЗаявки И (СтрокаТаблицы.КонецДействия = Дата(1,1,1)
			Или СтрокаТаблицы.КонецДействия >= ДатаЗаявки);
		
		Если ВозвращатьНеактивные Или УслугаАктивна Тогда
			
			ПрочитатьУсловияОбслуживанияБанка(
				СведенияОЗаявителе,
				НачалоДня(ДатаЗаявки),
				СтрокаТаблицы.Банк,
				СтрокаТаблицы.Значение,
				ТаблицаБанков,
				ОбязательныеРеквизитыОрганизации, 
				КомпонентыСоответствияПродукту,
				ПорядокСортировкиБанков,
				ГСЧ,
				УслугаАктивна);
				
		КонецЕсли;
	КонецЦикла;
	
	// Индексируем таблицу после заполнения для быстрого поиска банков и продуктов.
	ТаблицаБанков.Индексы.Добавить("Банк, ИдентификаторПродукта");
	
	ЗаполнитьНаименованияБанков(ТаблицаБанков);
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТаблицаБанков", ТаблицаБанков);
	Результат.Вставить("ОбязательныеРеквизиты", ОбязательныеРеквизитыОрганизации);
	
	Возврат Результат;

КонецФункции

// Возвращает массив банков, в которые необходимо отправить заявку.
//
// Параметры:
//	ЗаявкаНаОткрытиеСчета - ДокументСсылка.ЗаявкаНаОткрытиеСчета - Заполненная заявка.
//
// Возвращаемое значение:
//	Массив - Содержит ссылки на справочник БанкиУниверсальногоОбмена.
//
Функция ВыбранныеБанки(ЗаявкаНаОткрытиеСчета) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаОткрытиеСчета) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаОткрытиеСчета.Банк
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ЗаявкаНаОткрытиеСчета
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчета.Ссылка = &ЗаявкаНаОткрытиеСчета";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Банк");

КонецФункции

// Заполняем наименование банков в переданной таблице сведений о банках.
//
// Параметры:
//	СведенияОБанках - ТаблицаЗначений - см. СведенияОБанках().
//
Процедура ЗаполнитьНаименованияБанков(СведенияОБанках) Экспорт

	// Получим названия банков.
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		СведенияОБанках.ВыгрузитьКолонку("Банк"),
		"Наименование");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанков = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", СтрокаТаблицы.Банк));
		Если ДанныеБанков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ДанныеБанка Из ДанныеБанков Цикл
			ДанныеБанка.Наименование = СтрокаТаблицы.Наименование;
		КонецЦикла;
	КонецЦикла;

	// Упорядочиваем согласно порядку сортировки.
	СведенияОБанках.Сортировать("ПорядокСортировкиБанка, ПорядокСортировки, СтепеньСоответствия УБЫВ");

КонецПроцедуры

// Загружает двоичные данные логотипов банков из базы и заполняет их адреса временных хранилищ.
//
// Параметры:
//	Банки - Массив - Массив ссылок банков, для которых загрузить логотипы.
//	СведенияОБанках - ТаблицаЗначений - см. результат функции СведенияОБанках().
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, во временное хранилище которой будет помещены данные логотипа.
//
Процедура ЗагрузитьЛоготипыБанков(Банки, СведенияОБанках, ИдентификаторФормы) Экспорт

	Если Банки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		Банки, "Логотип");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанков = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", СтрокаТаблицы.Банк));
		Если ДанныеБанков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		АдресЛоготипа = ПоместитьВоВременноеХранилище(СтрокаТаблицы.Логотип, ИдентификаторФормы);
		Для каждого ДанныеБанка Из ДанныеБанков Цикл
			ДанныеБанка.АдресЛоготипа = АдресЛоготипа;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ВыбранныеФинансовыеПродукты(ЗаявкаНаОткрытиеСчета) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаОткрытиеСчета) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчета.Банк КАК Банк,
	|	ЗаявкаНаОткрытиеСчета.ИдентификаторПродукта КАК ИдентификаторПродукта
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.Банки КАК ЗаявкаНаОткрытиеСчета
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчета.Ссылка = &ЗаявкаНаОткрытиеСчета";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		// Открываем существующую заявку сразу в стандартной форме.
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	СведенияОСервисе = УниверсальныйОбменСБанками.СведенияОСервисе(СервисОбменаСБанками);
	
	// Если требуется подключение к интернет-поддержке, то для новой заявки
	// не открываем форму, пока не подключится.
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ВыбраннаяФорма = "ПодключениеИПП";
	Иначе
		// Чтобы второй раз не делать проверку доступности сервиса, передадим в параметре.
		Параметры.Вставить("СведенияОСервисе", СведенияОСервисе);
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записывает данные о гражданстве физлица, указанные в менеджере записи регистра.
//
// Параметры:
//	МенеджерЗаписи - РегистрСведенийМенеджерЗаписи.ГражданствоФизическихЛиц - Менеджер записи регистра. 
//
Процедура ЗаписатьГражданствоФизЛица(МенеджерЗаписи) Экспорт

	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	// Записываем через набор записей, чтобы обойти дату запрета изменений.
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(МенеджерЗаписи.ФизическоеЛицо);
	НаборЗаписей.Отбор.Период.Установить(МенеджерЗаписи.Период);

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, МенеджерЗаписи);

	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

КонецПроцедуры

#Область ДополнительныеФайлы

Функция ПорядокВыводаФайлов() Экспорт
	
	ПорядокФайлов = Новый Массив;
	ПорядокФайлов.Добавить("ВнешниеФайлы");
	ПорядокФайлов.Добавить("ЗаявкаНаОткрытиеСчета");
	
	Возврат ПорядокФайлов;
	
КонецФункции

Функция ГруппаФайловПоПризнаку(ПризнакГруппы = Неопределено) Экспорт
	
	ГруппаФайлов = "ВнешниеФайлы";
	Если ТипЗнч(ПризнакГруппы) = Тип("ПеречислениеСсылка.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета") Тогда
		
		Если ПризнакГруппы = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета Тогда
			ГруппаФайлов = "ЗаявкаНаОткрытиеСчета";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПризнакГруппы) = Тип("Строка") Тогда
		
		ГруппаФайлов = ПризнакГруппы;
		
	КонецЕсли;
	
	Возврат ГруппаФайлов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

#Область УсловияОбслуживания

Процедура ПрочитатьУсловияОбслуживанияБанка(СведенияОЗаявителе, ДатаЗаявки, Банк, ХранилищеXML, СведенияОБанках, 
	ОбязательныеРеквизитыОрганизации, КомпонентыСоответствияПродукту, ПорядокСортировкиБанков, ГСЧ, УслугаАктивна = Истина);

	УсловияОбслуживания = ЗаявкиНаОткрытиеСчета.ОбъектXDTOХарактеристики(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, ХранилищеXML);
		
	Если УсловияОбслуживания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсияСервиса = УниверсальныйОбменСБанками.ВерсияСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);

	Организация = СведенияОЗаявителе.Организация;
	
	ПараметрыПроверкиПоГруппамКонтрагентов = РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.НовыеПараметрыПроверки();
	ПараметрыПроверкиПоГруппамКонтрагентов.Организация = Организация; 
	ПараметрыПроверкиПоГруппамКонтрагентов.Банк        = Банк; 
	ПараметрыПроверкиПоГруппамКонтрагентов.ДатаЗаявки  = ДатаЗаявки; 
	
	// Найдем актуальные предложения банка.
	Для Каждого ФинансовыйПродукт Из УсловияОбслуживания.ФинансовыйПродукт Цикл
		Если ФинансовыйПродукт.ДатаНачала > ДатаЗаявки
			Или ФинансовыйПродукт.ДатаОкончания < ДатаЗаявки Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(ФинансовыйПродукт.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ФинансовыйПродукт.МинВерсияСервиса) < 0 Тогда
			// Продукт может быть корректно отображен только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФинансовыйПродукт.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ФинансовыйПродукт.МаксВерсияСервиса) > 0 Тогда
			// Продукт предназначен для отображения на предыдущих версиях программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;

		СтрокаТаблицы = СведенияОБанках.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ФинансовыйПродукт);
		СтрокаТаблицы.Банк = Банк;
		ИдентификаторБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Идентификатор");
		
		ПорядокСортировкиБанка = ПорядокСортировкиБанков[Банк];
		
		Если ПорядокСортировкиБанка = Неопределено Тогда
			Если ЗначениеЗаполнено(ФинансовыйПродукт.СлучайныйПорядокСортировкиОт)
				И ЗначениеЗаполнено(ФинансовыйПродукт.СлучайныйПорядокСортировкиДо) Тогда
				
				ПорядокСортировкиБанка = ГСЧ.СлучайноеЧисло(ФинансовыйПродукт.СлучайныйПорядокСортировкиОт, ФинансовыйПродукт.СлучайныйПорядокСортировкиДо);
				ПорядокСортировкиБанков.Вставить(Банк, ПорядокСортировкиБанка);
				
			Иначе
				ПорядокСортировкиБанка = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.ПорядокСортировкиБанка = ПорядокСортировкиБанка;
		СтрокаТаблицы.ИдентификаторПродукта = ФинансовыйПродукт.Идентификатор;
		СтрокаТаблицы.НаименованиеПродукта = ФинансовыйПродукт.Наименование;
		
		СтрокаТаблицы.ПрефиксФайла = ФинансовыйПродукт.ПрефиксФайла;
		
		СтрокаТаблицы.ПроцентНаОстаток = ФинансовыйПродукт.ПроцентНаОстаток;
		СтрокаТаблицы.ПодписаниеВ1СДиректБанк = ФинансовыйПродукт.ПодписаниеВ1СДиректБанк;
		СтрокаТаблицы.Доступен1СДиректБанк = ФинансовыйПродукт.Доступен1СДиректБанк;
		
		СтрокаТаблицы.СсылкаНаТаблицуТарифа = ФинансовыйПродукт.СсылкаНаТаблицуТарифа;
		
		ЗаполнитьВидыСчетовБанка(СтрокаТаблицы, ДатаЗаявки, ФинансовыйПродукт.Идентификатор, УсловияОбслуживания);
		ЗаполнитьВалютыБанка(СтрокаТаблицы, ДатаЗаявки, ФинансовыйПродукт.Идентификатор, УсловияОбслуживания);
		
		СтрокаТаблицы.УслугаАктивна = УслугаАктивна;
		
		// Проверяем первичные стоп-факторы.
		СтрокаТаблицы.СтопФакторыПройдены = Истина; // Первоначально считаем, что клиент удовлетворяет стоп-факторам банка.
		
		СтрокаТаблицы.СтепеньСоответствия = 0;
		ЭтоПервыйСтопФактор = Истина;
		
		Если Не ПроверитьЮрФизЛицоКлиента(СведенияОЗаявителе, ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия,
			КомпонентыСоответствияПродукту["ЮрФизЛицо"]) Тогда
			// При не прохождении хотя бы одного из стоп-факторов, дальнейшую проверку не выполняем.
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ЮрФизЛицоКлиента");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФинансовыйПродукт.МинВозрастИП) ИЛИ ЗначениеЗаполнено(ФинансовыйПродукт.МаксВозрастИП) Тогда
			ОбязательныеРеквизитыОрганизации.Вставить("ДатаРождения", Истина);
		
			Если Не ПроверитьВозрастКлиента(СведенияОЗаявителе, ДатаЗаявки, ФинансовыйПродукт) Тогда
				СтрокаТаблицы.СтопФакторыПройдены = Ложь;
				Если ЭтоПервыйСтопФактор Тогда
					ЭтоПервыйСтопФактор = Ложь;
					ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ВозрастИП");
				КонецЕсли;
			Иначе
				СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["ВозрастИП"];
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСрокОтДатыРегистрации) Тогда
			ОбязательныеРеквизитыОрганизации.Вставить("ДатаРегистрации", Истина);
			
			Если Не ПроверитьСрокОтДатыРегистрации(СведенияОЗаявителе, ДатаЗаявки, ФинансовыйПродукт) Тогда
				СтрокаТаблицы.СтопФакторыПройдены = Ложь;
				Если ЭтоПервыйСтопФактор Тогда
					ЭтоПервыйСтопФактор = Ложь;
					ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокОтДатыРег");
				КонецЕсли;
			Иначе
				СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["ДатаРегистрации"];
			КонецЕсли;
		КонецЕсли;

		Если Не ПроверитьСрокФактическогоВеденияБизнеса(СведенияОЗаявителе, ДатаЗаявки, 
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["СрокФактическогоВеденияБизнеса"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокФактВеденияБизнеса");
			КонецЕсли;
		КонецЕсли;

		Если Не ПроверитьДатуНачалаВеденияУчетаВПрограмме(СведенияОЗаявителе, 
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["ДатаНачалаВеденияУчетаВПрограмме"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинДатаНачалаВеденияУчетаВПрограмме");
			КонецЕсли;
		КонецЕсли;

		Если Не ПроверитьСрокВеденияУчетаВПрограмме(СведенияОЗаявителе, ДатаЗаявки,
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["СрокВеденияУчетаВПрограмме"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрокУчетаВПрограмме");
			КонецЕсли;
		КонецЕсли;

		Если НЕ ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОЗаявителе, ДатаЗаявки,
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["СреднемесячноеПоступлениеНаСчет"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.СрМесПоступНаСчет");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПроверитьМинимальноеЕжемесячноеПоступлениеНаСчет(СведенияОЗаявителе, ДатаЗаявки,
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["МинимальноеЕжемесячноеПоступлениеНаСчет"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинЕжемесПоступНаСчет");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПроверитьМинСуммаВыручки(СведенияОЗаявителе, ДатаЗаявки,
			ФинансовыйПродукт, СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["МинСуммаВыручки"]) Тогда
			
			СтрокаТаблицы.СтопФакторыПройдены = Ложь;
			Если ЭтоПервыйСтопФактор Тогда
				ЭтоПервыйСтопФактор = Ложь;
				ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.МинСуммаВыручки");
			КонецЕсли;
		КонецЕсли;
		
		Если ФинансовыйПродукт.ВозможноОбслуживаниеНерезидентов <> Истина Тогда
			ОбязательныеРеквизитыОрганизации.Вставить("ГражданствоФизЛица", Истина);
			ОбязательныеРеквизитыОрганизации.Вставить("Адрес", Истина);

			Если Не ПроверитьРезидентство(СведенияОЗаявителе, ДатаЗаявки, ФинансовыйПродукт,
				СтрокаТаблицы.СтепеньСоответствия, КомпонентыСоответствияПродукту["Нерезидент"]) Тогда
				СтрокаТаблицы.СтопФакторыПройдены = Ложь;
				Если ЭтоПервыйСтопФактор Тогда
					ЭтоПервыйСтопФактор = Ложь;
					ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Нерезидент");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Списки регионов.
		Если УсловияОбслуживания.Регионы.Количество() > 0 Тогда
			
			АктуальныйСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ФинансовыйПродукт.Идентификатор, УсловияОбслуживания.Регионы); 
			Если АктуальныйСписок <> Неопределено Тогда
				ОбязательныеРеквизитыОрганизации.Вставить("Адрес", Истина);
				
				Если Не ПроверитьКодПоСписку(СведенияОЗаявителе.КодРегиона, АктуальныйСписок, "КодРегиона", Ложь) Тогда
					СтрокаТаблицы.СтопФакторыПройдены = Ложь;
					Если ЭтоПервыйСтопФактор Тогда
						ЭтоПервыйСтопФактор = Ложь;
						ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Регион");
					КонецЕсли;
				ИначеЕсли АктуальныйСписок.БелыйСписок Тогда
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
						+ КомпонентыСоответствияПродукту["РегионыБелыйСписок"];
				Иначе
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["РегионыЧерныйСписок"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Списки организационно-правовых форм.
		Если УсловияОбслуживания.ОрганизационноПравовыеФормы.Количество() > 0 Тогда
			
			АктуальныйСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ФинансовыйПродукт.Идентификатор, УсловияОбслуживания.ОрганизационноПравовыеФормы); 
			Если АктуальныйСписок <> Неопределено Тогда
				ОбязательныеРеквизитыОрганизации.Вставить("КодОКОПФ", Истина);
				ОбязательныеРеквизитыОрганизации.Вставить("НаименованиеОКОПФ", Истина);
				
				Если Не ПроверитьКодПоСписку(СведенияОЗаявителе.КодОКОПФ, АктуальныйСписок, "КодОКОПФ", Истина) Тогда
					СтрокаТаблицы.СтопФакторыПройдены = Ложь;
					Если ЭтоПервыйСтопФактор Тогда
						ЭтоПервыйСтопФактор = Ложь;
						ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ОКОПФ");
					КонецЕсли;
				ИначеЕсли АктуальныйСписок.БелыйСписок Тогда
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
						+ КомпонентыСоответствияПродукту["ОКОПФБелыйСписок"];
				Иначе
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["ОКОПФЧерныйСписок"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// Списки виды деятельности - этот список потенциально самый большой, его проверяем в последнюю очередь.
		Если УсловияОбслуживания.ВидыДеятельности.Количество() > 0 Тогда
			
			АктуальныйСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ФинансовыйПродукт.Идентификатор, УсловияОбслуживания.ВидыДеятельности); 
			Если АктуальныйСписок <> Неопределено Тогда
				ОбязательныеРеквизитыОрганизации.Вставить("КодОКВЭД2", Истина);
				ОбязательныеРеквизитыОрганизации.Вставить("НаименованиеОКВЭД2", Истина);
				
				Если Не ПроверитьКодПоСписку(СведенияОЗаявителе.КодОКВЭД2, АктуальныйСписок, "КодОКВЭД2", Истина) Тогда
					СтрокаТаблицы.СтопФакторыПройдены = Ложь;
					Если ЭтоПервыйСтопФактор Тогда
						ЭтоПервыйСтопФактор = Ложь;
						ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.ОКВЭД");
					КонецЕсли;
				ИначеЕсли АктуальныйСписок.БелыйСписок Тогда
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
						+ КомпонентыСоответствияПродукту["ВидыДеятельностиБелыйСписок"];
				Иначе
					СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
						+ КомпонентыСоответствияПродукту["ВидыДеятельностиЧерныйСписок"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Проверяем обороты с определенными группами контрагентов.
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиПоГруппамКонтрагентов, ФинансовыйПродукт, 
			"ГруппаКонтрагентов,
			|КоличествоМесяцевПоГруппеКонтрагентов,
			|МинСреднемесячноеПоГруппеКонтрагентов,
			|МинЕжемесячноеПоГруппеКонтрагентов");
		
		Если РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.ЕстьСтопФактор(ПараметрыПроверкиПоГруппамКонтрагентов) Тогда
			Если Не РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.СтопФакторПройден(ПараметрыПроверкиПоГруппамКонтрагентов) Тогда
					
				СтрокаТаблицы.СтопФакторыПройдены = Ложь;
				Если ЭтоПервыйСтопФактор Тогда
					ЭтоПервыйСтопФактор = Ложь;
					ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(
						ИдентификаторБанка, "СтопФактор.ГруппыКонтрагентов" + "." + ФинансовыйПродукт.ГруппаКонтрагентов);
				КонецЕсли;
				
			Иначе
				СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["ГруппыКонтрагентов"];
			КонецЕсли;
		КонецЕсли;
		
		// Проверяем обороты с определенными группами поставщиков.
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиПоГруппамКонтрагентов, ФинансовыйПродукт, 
			"ГруппаПоставщиков,
			|КоличествоМесяцевПоГруппеПоставщиков,
			|МинСреднемесячноеПоГруппеПоставщиков,
			|МинЕжемесячноеПоГруппеПоставщиков");
		
		Если РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.ЕстьСтопФактор(ПараметрыПроверкиПоГруппамКонтрагентов, Истина) Тогда
			Если Не РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.СтопФакторПройден(ПараметрыПроверкиПоГруппамКонтрагентов, Истина) Тогда
					
				СтрокаТаблицы.СтопФакторыПройдены = Ложь;
				Если ЭтоПервыйСтопФактор Тогда
					ЭтоПервыйСтопФактор = Ложь;
					ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(
						ИдентификаторБанка, "СтопФактор.ГруппыКонтрагентов" + "." + ФинансовыйПродукт.ГруппаКонтрагентов);
				КонецЕсли;
				
			Иначе
				СтрокаТаблицы.СтепеньСоответствия = СтрокаТаблицы.СтепеньСоответствия 
					+ КомпонентыСоответствияПродукту["ГруппыКонтрагентов"];
			КонецЕсли;
		КонецЕсли;
		
		ЗаявкиНаОткрытиеСчета.ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, "СтопФактор.Нет");
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает по данным о клиенте показатели для проверки стоп-факторов.
//
Процедура ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаявителе, ДатаЗаявки)

	Если СведенияОЗаявителе.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		СведенияОЗаявителе.ВозрастИП = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхЛет(СведенияОЗаявителе.ДатаРождения, ДатаЗаявки);
	КонецЕсли;

	СведенияОЗаявителе.СрокОтДатыРегистрации = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаявителе.ДатаРегистрации, ДатаЗаявки);

	СведенияОЗаявителе.СрокФактическогоВеденияБизнеса = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаявителе.ДатаФактическогоНачалаВеденияБизнеса, ДатаЗаявки);

	СведенияОЗаявителе.СрокВеденияУчетаВПрограмме = ОбщегоНазначенияБПКлиентСервер.КоличествоЦелыхМесяцев(
		СведенияОЗаявителе.ДатаНачалаУчетаВПрограмме, ДатаЗаявки);

	КодРегиона = "";
	Если ЗначениеЗаполнено(СведенияОЗаявителе.ЮрАдресОрганизации) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОЗаявителе.ЮрАдресОрганизации);
		КодРегиона = СведенияОбАдресе.КодРегиона;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		// Если из адреса определить код региона не получилось, то ищем через регистрацию в налоговом органе.
		ОсновнаяРегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(
			СведенияОЗаявителе.Организация, ДатаЗаявки);
		Если ЗначениеЗаполнено(ОсновнаяРегистрацияВНалоговомОргане) Тогда
			РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнаяРегистрацияВНалоговомОргане, "КодРегиона");
			Если ЗначениеЗаполнено(РеквизитыРегистрации.КодРегиона) Тогда
				// В настройках сервиса код региона задан в виде строки с лидирующем нулем.
				КодРегиона = Формат(РеквизитыРегистрации.КодРегиона, "ЧЦ=2;ЧВН=");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОЗаявителе.КодРегиона = СокрЛП(КодРегиона);
	
	// Исключим лишние пробелы из кодов.
	СведенияОЗаявителе.КодОКВЭД2 = СокрЛП(СведенияОЗаявителе.КодОКВЭД2);
	СведенияОЗаявителе.КодОКОПФ  = СокрЛП(СведенияОЗаявителе.КодОКОПФ);

КонецПроцедуры

Функция ПроверитьЮрФизЛицоКлиента(СведенияОКлиенте, ДействующийФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия) 
	
	// В значениях может быть Неопределено, если условия были получены в версии, 
	// когда такого стоп-фактора еще не было.
	ВозможноОбслуживаниеИП = ДействующийФинансовыйПродукт.ВозможноОбслуживаниеИП <> Ложь;
	ВозможноОбслуживаниеЮЛ = ДействующийФинансовыйПродукт.ВозможноОбслуживаниеЮЛ <> Ложь;

	Если СведенияОКлиенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ВозможноОбслуживание = ВозможноОбслуживаниеИП;
	Иначе
		ВозможноОбслуживание = ВозможноОбслуживаниеЮЛ;
	КонецЕсли;
	
	Если ВозможноОбслуживание Тогда
		
		// Степень соответствия не добавляем для продуктов, предназначенных для ИП и ЮЛ одновременно.
		Если НЕ (ВозможноОбслуживаниеИП	И ВозможноОбслуживаниеЮЛ) Тогда
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ПроверитьВозрастКлиента(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт)

	Если СведенияОКлиенте.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Не является физлицом, не проверяем условие по возрасту совсем.
		Возврат Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинВозрастИП) Тогда
		Если СведенияОКлиенте.ВозрастИП < ФинансовыйПродукт.МинВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФинансовыйПродукт.МаксВозрастИП) Тогда
		Если СведенияОКлиенте.ВозрастИП > ФинансовыйПродукт.МаксВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокОтДатыРегистрации(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСрокОтДатыРегистрации) Тогда
		Если СведенияОКлиенте.СрокОтДатыРегистрации < ФинансовыйПродукт.МинСрокОтДатыРегистрации Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокФактическогоВеденияБизнеса(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСрокФактическойДеятельности) Тогда
		Если СведенияОКлиенте.СрокФактическогоВеденияБизнеса < ФинансовыйПродукт.МинСрокФактическойДеятельности Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокВеденияУчетаВПрограмме(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСрокВеденияУчетаВПрограмме) Тогда
		Если СведенияОКлиенте.СрокВеденияУчетаВПрограмме < ФинансовыйПродукт.МинСрокВеденияУчетаВПрограмме Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСреднемесячноеПоступлениеНаСчет) Тогда
		Если СведенияОКлиенте.СреднемесячноеПоступлениеНаСчет < ФинансовыйПродукт.МинСреднемесячноеПоступлениеНаСчет Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьМинимальноеЕжемесячноеПоступлениеНаСчет(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинЕжемесячноеПоступлениеНаСчет) Тогда
		Если СведенияОКлиенте.МинимальноеЕжемесячноеПоступлениеНаСчет < ФинансовыйПродукт.МинЕжемесячноеПоступлениеНаСчет Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьРезидентство(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	// ВозможноОбслуживаниеНерезидентов может быть Неопределено, если условия были получены в старой версии.
	Если ФинансовыйПродукт.ВозможноОбслуживаниеНерезидентов <> Истина
		И СведенияОКлиенте.Нерезидент Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Степень соответствия не добавляем для продуктов, предназначенных для резидентов и для клиентов-резидентов,
	// т.к. таких клиентов большинство и эта степень соответствия для них незначительная.
	Если ФинансовыйПродукт.ВозможноОбслуживаниеНерезидентов = Истина 
		И СведенияОКлиенте.Нерезидент Тогда
		СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьКодПоСписку(ИскомыйКод, ДействующийСписок, ИмяПоля, ПоискПоПервымСимволам)
	
	ЭтоБелыйСписок = (ДействующийСписок.БелыйСписок = Истина);
	
	// Проверим код.
	СписокКодов = ДействующийСписок[ИмяПоля];
	Для Каждого ТекущийКод Из СписокКодов Цикл
		Если ПоискПоПервымСимволам И СтрНачинаетсяС(ИскомыйКод, СокрЛП(ТекущийКод)) Тогда
			Возврат ЭтоБелыйСписок;
		ИначеЕсли СокрЛП(ТекущийКод) = ИскомыйКод Тогда
			Возврат ЭтоБелыйСписок;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Не ЭтоБелыйСписок;

КонецФункции

Функция ПроверитьДатуНачалаВеденияУчетаВПрограмме(СведенияОКлиенте, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинДатаНачалаВеденияУчетаВПрограмме) Тогда
		Если НачалоДня(СведенияОКлиенте.ДатаНачалаУчетаВПрограмме) > НачалоДня(ФинансовыйПродукт.МинДатаНачалаВеденияУчетаВПрограмме) Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ЗаполнитьВидыСчетовБанка(СведенияОБанке, ДатаЗаявки, ИдентификаторПродукта, УсловияОбслуживания)
	
	Если УсловияОбслуживания.ВидыСчетовБанка = Неопределено Тогда
		// Банк не задал явных ограничений по видам счетов, считаем, что готов рассматривать любые.
		Возврат;
	КонецЕсли;
	
	// Найдем подходящий список для конкретного текущего продукта.
	ДействующийСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторПродукта, УсловияОбслуживания.ВидыСчетовБанка);
	Если ДействующийСписок = Неопределено Тогда
		СведенияОБанке.БелыйСписокВидовСчетов = Истина;
		Возврат;
	КонецЕсли;

	СведенияОБанке.БелыйСписокВидовСчетов = ДействующийСписок.БелыйСписок;

	Для каждого СтрокаВидСчета Из ДействующийСписок.ВидСчета Цикл
		СведенияОБанке.ВидыСчетовБанка.Добавить(СтрокаВидСчета.Идентификатор);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВалютыБанка(СведенияОБанке, ДатаЗаявки, ИдентификаторПродукта, УсловияОбслуживания)
	
	Если УсловияОбслуживания.Валюты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем подходящий список для конкретного текущего продукта.
	ДействующийСписок = НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторПродукта, УсловияОбслуживания.Валюты);
	Если ДействующийСписок = Неопределено Тогда
		СведенияОБанке.БелыйСписокВалют = Истина;
		Возврат;
	КонецЕсли;

	СведенияОБанке.БелыйСписокВалют = ДействующийСписок.БелыйСписок;

	Для каждого КодВалюты Из ДействующийСписок.Код Цикл
		СведенияОБанке.ВалютыБанка.Добавить(КодВалюты);
	КонецЦикла;

КонецПроцедуры

Функция НайтиАктуальнуюНастройку(ДатаЗаявки, ИдентификаторПродукта, СписокXDTO)

	Если СписокXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем актуальный список для указанного продукта.
	Результат = Неопределено;
	Для Каждого ТекущиеДанные Из СписокXDTO Цикл
		Если ТекущиеДанные.Свойства().Получить("ИдентификаторПродукта") <> Неопределено
			И ТекущиеДанные.ИдентификаторПродукта = ИдентификаторПродукта
			И ТекущиеДанные.ДатаНачала <= ДатаЗаявки
			И ТекущиеДанные.ДатаОкончания >= ДатаЗаявки Тогда
			Результат = ТекущиеДанные;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если список для указанного продукта не найден,
	// найдем актуальный список, общий для всех продуктов.
	Если Результат = Неопределено Тогда
		Для Каждого ТекущиеДанные Из СписокXDTO Цикл
			Если (ТекущиеДанные.Свойства().Получить("ИдентификаторПродукта") = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПродукта))
				И ТекущиеДанные.ДатаНачала <= ДатаЗаявки
				И ТекущиеДанные.ДатаОкончания >= ДатаЗаявки Тогда
				Результат = ТекущиеДанные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПроверитьМинСуммаВыручки(СведенияОКлиенте, ДатаЗаявки, ФинансовыйПродукт, СтепеньСоответствия, КомпонентСоответствия)

	Если ЗначениеЗаполнено(ФинансовыйПродукт.МинСуммаВыручки) Тогда
		Если СведенияОКлиенте.СуммаВыручки < ФинансовыйПродукт.МинСуммаВыручки Тогда
			Возврат Ложь;
		Иначе
			СтепеньСоответствия = СтепеньСоответствия + КомпонентСоответствия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитов

Функция ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, ИмяРеквизита)
	
	Если Не ЭтОбязательныйРеквизит(ОбязательныеРеквизиты, ИмяРеквизита) Тогда
		Возврат Истина;
	Иначе
		Возврат ЗначениеЗаполнено(РеквизитыОрганизации[ИмяРеквизита]);
	КонецЕсли;

КонецФункции

Функция ЭтОбязательныйРеквизит(ОбязательныеРеквизиты, ИмяРеквизита)
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбязательныеРеквизиты, ИмяРеквизита, Ложь);

КонецФункции

Процедура ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ОбязательныеРеквизиты,  ИмяСтраницы = "", Отказ = Ложь)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект       = ОбъектИлиФорма.Объект;
		КлючДанных   = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		НачалоПутиКДанным = "Организация.";
		
		// Контактную информацию берем из реквизитов формы.
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект       = ОбъектИлиФорма;
		КлючДанных   = РеквизитыОрганизации.Ссылка;
		НачалоПутиКДанным = "";

		ПроверкаИзФормы   = Ложь;
		
		ПроверяемыеВидыКонтактнойИнформации = Новый Массив;
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыОрганизации.Ссылка),
			,
			ПроверяемыеВидыКонтактнойИнформации,
			Объект.Дата);
		
	КонецЕсли;

	ЭтоЮрЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	// Дата регистрации
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если Не ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, "ДатаРегистрации") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата регистрации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРегистрации", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, "КодОКОПФ") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, "НаименованиеОКОПФ") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, "КодОКВЭД2") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗаполненОбязательныйРеквизит(РеквизитыОрганизации, ОбязательныеРеквизиты, "НаименованиеОКВЭД2") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// ЮрАдресОрганизации - не даем его изменять непосредственно в форме заявки,
	// т.к. от него зависят регистрации в налоговой, ПРФ, ФСС и др. органах.
	// Смены юр.адреса поддерживается в карточке организации, отправляем пользователя туда.
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
	
		Если ПроверкаИзФормы Тогда
			Адрес = ОбъектИлиФорма.КонтактнаяИнформацияПолеЮрАдресОрганизации;
		Иначе
			Адрес = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Адрес = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Адрес)
			ИЛИ Адрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
			ИЛИ Адрес = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки()
			И ЭтОбязательныйРеквизит(ОбязательныеРеквизиты, "Адрес") Тогда

			Если ЭтоЮрЛицо Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Юридический адрес'"));
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес места жительства'"));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция РеквизитыФизическогоЛица(ФизЛицо, Дата)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = УчетЗарплаты.ДанныеФизическихЛиц(, ФизЛицо, Дата, Ложь, Ложь);
	
	// Для совместимости с типом СправочникОбъект.ФизическиеЛица добавим ключ Ссылка.
	Результат.Вставить("Ссылка", ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "КлиентИП" И ИмяСтраницы <> "КлиентЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Объект     = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
	Иначе
		Объект     = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Контактное лицо'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.КонтактноеЛицо", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТелефонКонтактногоЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон контактного лица'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ТелефонКонтактногоЛица", , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДополнительныеФайлы(ОбъектИлиФорма, ИмяСтраницы, Отказ)
	
	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "КлиентИП" И ИмяСтраницы <> "КлиентЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый контекст вызова проверки доп.файлов'");
	КонецЕсли;
	
	ОписаниеДополнительныхФайлов = ОбъектИлиФорма.ОписаниеДополнительныхФайлов;
	ДополнительныеФайлы = ОбъектИлиФорма.Объект.ДополнительныеФайлы;

	ТекстыСообщений = Новый СписокЗначений;
	
	ИмяЭлемента = ?(ОбъектИлиФорма.Элементы.СтраницаКлиентИП.Видимость, "ГруппаДополнительныеФайлыИП", "ГруппаДополнительныеФайлыЮЛ");
	НазваниеГруппыДопФайлов = ОбъектИлиФорма.Элементы[ИмяЭлемента].Заголовок;
	ШаблонСообщения = НСтр("ru = 'В группе ""%1"" приложите файл ""%2"".'");
	
	ПредыдущийИдентификатор = "";
  	Для Каждого ДопФайл Из ДополнительныеФайлы Цикл
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			// Если по идентификатору можно приложить группу из нескольких файлов, то достаточно, чтобы был приложен хотя бы первый.
			// Тогда наличие других файлов в этой группе проверять уже не требуется.
			Продолжить;
		КонецЕсли;
		ПредыдущийИдентификатор = ДопФайл.Идентификатор;
		
		Если ДопФайл.ДанныеОтсутствуют
		 Или ЗначениеЗаполнено(ДопФайл.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Истина;
		ОписанияДопФайла = ОписаниеДополнительныхФайлов.НайтиСтроки(Новый Структура("Идентификатор", ДопФайл.Идентификатор));
		Если ОписанияДопФайла.Количество() > 0 Тогда
			
			КраткоеПредставление = ОписанияДопФайла[0].КраткоеПредставление;
			
		Иначе
			
			КраткоеПредставление = ДопФайл.Идентификатор;
			
		КонецЕсли;
		
		ИмяРеквизитаФормы = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор));
			
		ТекстыСообщений.Добавить(
			ИмяРеквизитаФормы, СтрШаблон(ШаблонСообщения, НазваниеГруппыДопФайлов, КраткоеПредставление));
		
	КонецЦикла;
	
	Для инд = 0 По ТекстыСообщений.Количество() - 1 Цикл
		
		СообщениеОНезаполненности = ТекстыСообщений[инд];
		Если Не ПустаяСтрока(СообщениеОНезаполненности.Значение) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОНезаполненности.Представление, , СообщениеОНезаполненности.Значение, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДополнительныеПоказатели(ОбъектИлиФорма, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "КлиентИП" И ИмяСтраницы <> "КлиентЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	ЭтоФорма = ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения");
	
	Если ЭтоФорма Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		ДополнительныеПоказатели = Объект.ДополнительныеПоказатели;
		РеквизитыФормы = ОбъектИлиФорма.ПолучитьРеквизиты();
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаДополнительныеПоказатели.Идентификатор КАК Идентификатор,
		|	ЗаявкаДополнительныеПоказатели.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
		|	ЗаявкаДополнительныеПоказатели.Значение КАК Значение
		|ИЗ
		|	Документ.ЗаявкаНаОткрытиеСчета.ДополнительныеПоказатели КАК ЗаявкаДополнительныеПоказатели
		|ГДЕ
		|	ЗаявкаДополнительныеПоказатели.Ссылка = &Ссылка";
		
		ДополнительныеПоказатели = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для каждого Показатель Из ДополнительныеПоказатели Цикл
		
		Если НЕ Показатель.ДанныеОтсутствуют И НЕ ЗначениеЗаполнено(Показатель.Значение) Тогда
			ИмяРеквизитаЗначения = СтрШаблон("ДополнительныйПоказатель_%1", Показатель.Идентификатор);
			ИмяРеквизитаПредставления = СтрШаблон("ДополнительныйПоказатель_%1_Представление", Показатель.Идентификатор);
			
			ИмяРеквизита = ИмяРеквизитаЗначения;
			ТекстСообщения = СтрШаблон(НСтр("ru='Не заполнен дополнительный показатель ""%1""'"), Показатель.Идентификатор);
			
			Если ЭтоФорма Тогда
				ТекстСообщения = НСтр("ru='Не заполнен дополнительный показатель'");
				Для каждого Реквизит Из РеквизитыФормы Цикл
					Если Реквизит.Имя = ИмяРеквизитаПредставления Тогда
						ИмяРеквизита = ИмяРеквизитаПредставления;
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Реквизит.Заголовок);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для каждого Реквизит Из РеквизитыФормы Цикл
					Если Реквизит.Имя = ИмяРеквизитаЗначения Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Реквизит.Заголовок);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				ИмяРеквизита,,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ОбязательныеРеквизиты, ИмяСтраницы = "", Отказ = Ложь)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		РеквизитыФизЛица = ОбъектИлиФорма.ФизическоеЛицо;
	Иначе
		Объект           = ОбъектИлиФорма;
		РеквизитыФизЛица = РеквизитыФизическогоЛица(РеквизитыОрганизации.ИндивидуальныйПредприниматель, Объект.Дата);
	КонецЕсли;

	// ИндивидуальныйПредприниматель
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИндивидуальныйПредприниматель) Тогда
			Подстроки = Новый Массив;
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Индивидуальный предприниматель'"));
			Подстроки.Добавить(ТекстСообщения);
			Подстроки.Добавить(НСтр("ru = 'Нарушена связь между данными справочников ""Организации"" и ""Физические лица"".'"));
			Подстроки.Добавить(НСтр("ru = 'Для исправления откройте форму организации и перезапишите ее.'"));
			Подстроки.Добавить(НСтр("ru = 'После чего повторите создание заявки на кредит еще раз.'"));
			
			ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				РеквизитыОрганизации.Ссылка,
				"Объект.ИндивидуальныйПредприниматель",
				,
				Отказ);
			
			// Остальные поля не проверяем, пока не заполнят индивидуального предпринимателя в организации.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ОбязательныеРеквизиты, ИмяСтраницы, Отказ);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ОбязательныеРеквизиты, ИмяСтраницы, Отказ)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных        = Неопределено;
		НачалоПутиКДанным = "ФизическоеЛицо.";
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект            = ОбъектИлиФорма;
		КлючДанных        = РеквизитыФизЛица.Ссылка;
		НачалоПутиКДанным = "";
		ПроверкаИзФормы   = Ложь;
		
	КонецЕсли;

	ЭтоСамИП = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И РеквизитыОрганизации.ИндивидуальныйПредприниматель = РеквизитыФизЛица.Ссылка;
		
	ТребуетсяПроверка = ЭтоСамИП И (НЕ ЗначениеЗаполнено(ИмяСтраницы) ИЛИ ИмяСтраницы = "КлиентИП");
		
	// Личные данные из справочника ФизическиеЛица.
		
	// Фамилия
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Фамилия", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Имя
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Имя) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Имя", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	// Дата рождения - для самого ИП располагается на самой первой странице,
	Если ЭтоСамИП И (НЕ ЗначениеЗаполнено(ИмяСтраницы)
		ИЛИ ИмяСтраницы = "Начало") Тогда
		Если НЕ ЗаполненОбязательныйРеквизит(РеквизитыФизЛица, ОбязательныеРеквизиты, "ДатаРождения") Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРождения", , Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбращениеКСервису

// Отправляет подписанные файлы.
//
Функция ОтправитьФайлы(Параметры)

	КлючеваяОперация = "";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета Тогда
		КлючеваяОперация = "ОтправкаЗаявкаНаОткрытиеСчета";
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Транзакции");
	Результат.Вставить("НеОтправленныеТранзакции");
	
	СостояниеПрогресса = ЗаявкиНаОткрытиеСчета.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "транзакции";
	СостояниеПрогресса.КоличествоДействий = ?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество() + 1, 33);
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Формирование транзакций отправки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);

	// Создание транзакций обмена с банками.
	ПараметрыТранзакций = УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();
	ПараметрыТранзакций.ИдентификаторВоВременномХранилище = Параметры.ИдентификаторВременногоХранилищаТранзакций;
	ПараметрыТранзакций.Сервис              = Параметры.СервисОбменаСБанками;
	ПараметрыТранзакций.ТипДокументооборота = Перечисления.ДокументооборотыОбменаСБанками.ЗаявкаНаОткрытиеСчета;
	ПараметрыТранзакций.ПараметрыПрогрессаВыполнения = СостояниеПрогресса.ДополнительныеПараметры;
	
	ПараметрыТранзакций.Предмет                     = Параметры.ПредметОбмена; // предмет обмена с банками
	ПараметрыТранзакций.ДокументооборотыПолучателей = Параметры.ДокументооборотыПолучателей;
	ПараметрыТранзакций.ТипТранзакции               = Параметры.ТипТранзакции;
	ПараметрыТранзакций.Организация =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПредметОбмена, "Организация"); // организация-абонент

	РезультатОперации = УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(ПараметрыТранзакций);
	Если Не РезультатОперации.Выполнено Тогда
			
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
		
	// Отправка подготовленных транзакций.
	СостояниеПрогресса = ЗаявкиНаОткрытиеСчета.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "отправка";
	СостояниеПрогресса.КоличествоДействий = РезультатОперации.Транзакции.Количество() + 1;
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Отправка файлов...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	Результат.Транзакции = РезультатОперации.Транзакции;

	РезультатОперации = УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(
		Параметры.СервисОбменаСБанками,
		РезультатОперации.Транзакции,
		СостояниеПрогресса.ДополнительныеПараметры);
	Результат.НеОтправленныеТранзакции = РезультатОперации.НеОтправленныеТранзакции;
	Если Не РезультатОперации.Выполнено Тогда
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;

	Результат.Выполнено = Истина;
	
	Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			КлючеваяОперация,
			ВремяНачала,
			?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество(), 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные с XML-текстом заявки на открытие счета.
//
Функция ВыгрузитьЗаявкуXML(ИмяФайлаЗаявки, СведенияОЗаявке, ФинансовыйПродукт, СведенияОБанке,
									ДополнительныеПоказатели, ДополнительныеФайлы)

	Заявка         = СведенияОЗаявке.Заявка;
	Отправитель    = СведенияОЗаявке.Отправитель;
	КонтактноеЛицо = СведенияОЗаявке.КонтактноеЛицо;
	
	ПараметрыВыгрузки = ЗаявкиНаОткрытиеСчета.НовыеСведенияЗаявкиНаОткрытиеСчета();
	// Технические реквизиты.
	ПараметрыВыгрузки.ИдентификаторФайла        = ИмяФайлаЗаявки;
	ПараметрыВыгрузки.ИдентификаторЗаявки       = XMLСтрока(Заявка.Ссылка);
	ПараметрыВыгрузки.Дата                      = Заявка.Дата;
	ПараметрыВыгрузки.ЮридическоеФизическоеЛицо = Отправитель.ЮридическоеФизическоеЛицо;
	
	// Описание банковского продукта.
	Описание = ПараметрыВыгрузки.Заявка;
	Описание.ИдентификаторПродукта  = ФинансовыйПродукт.ИдентификаторПродукта;
	Описание.ВидСчета               = Заявка.ВидСчета;
	Описание.ПодключитьКСервисуАУСН = ФинансовыйПродукт.ПодключитьКСервисуАУСН;
	Для Каждого Валюта Из Заявка.Валюты Цикл
		Описание.Валюты.Добавить(Валюта.Код);
	КонецЦикла;
	
	// Описание организации.
	Описание = ПараметрыВыгрузки.Отправитель;
	Описание.Наименование        = Отправитель.НаименованиеПолное;
	Описание.ИНН                 = Отправитель.ИНН;
	Описание.ДатаРегистрации     = Отправитель.ДатаРегистрации;
	Описание.КодОКВЭД2           = Отправитель.КодОКВЭД2;
	Описание.КодОКОПФ            = Отправитель.КодОКОПФ;
	Описание.КодРегиона          = Отправитель.КодРегиона;
	Описание.Город               = Отправитель.Город;
	
	Если Отправитель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Описание.Нерезидент      = ?(Отправитель.ИностраннаяОрганизация, 1, 0);
	КонецЕсли;
	
	// Описание контактного лица.
	Описание = ПараметрыВыгрузки.КонтактноеЛицо;
	Описание.ФИО.Фамилия   = КонтактноеЛицо.Фамилия;
	Описание.ФИО.Имя       = КонтактноеЛицо.Имя;
	Описание.ФИО.Отчество  = КонтактноеЛицо.Отчество;
	Описание.Должность     = КонтактноеЛицо.ДолжностьКонтактногоЛица;
	Описание.Телефон       = КонтактноеЛицо.ТелефонКонтактногоЛица;
	Описание.ЭлПочта       = КонтактноеЛицо.АдресЭПКонтактногоЛица;
	
	// Реквизиты банка-получателя.
	Банк = ПараметрыВыгрузки.Банк;
	Банк.ИНН = СведенияОБанке.ИННБанка;
	Банк.Наименование = СведенияОБанке.Наименование;
	
	ПараметрыВыгрузки.ДополнительныеПоказатели = ДополнительныеПоказатели;
	ПараметрыВыгрузки.ДополнительныеФайлы      = ДополнительныеФайлы;
	
	Возврат ЗаявкиНаОткрытиеСчета.ЭлектронноеПредставлениеСообщения("Заявка", ПараметрыВыгрузки);

КонецФункции

// Возвращает двоичные данные заявки в формате MS Excel.
//
Функция ВыгрузитьЗаявкуExcel(СведенияОЗаявке, ФинансовыйПродукт, СведенияОБанке,
										ДополнительныеПоказатели, ДополнительныеФайлы)

	Заявка         = СведенияОЗаявке.Заявка;
	Отправитель    = СведенияОЗаявке.Отправитель;
	КонтактноеЛицо = СведенияОЗаявке.КонтактноеЛицо;
	ЭтоФизЛицо = (Отправитель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Макет = ПолучитьМакет("Анкета");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	//////////////////////////////
	// Шапка
	Область = Макет.ПолучитьОбласть("Шапка");
	Если СведенияОБанке.Логотип.Размер() > 0 Тогда
		Область.Рисунки.Логотип.Картинка = Новый Картинка(СведенияОБанке.Логотип);
	КонецЕсли;
	
	// Реквизиты банка
	ОписаниеБанка = Новый Массив;
	ОписаниеБанка.Добавить(СведенияОБанке.ПолноеНаименованиеБанка);
	КодыБанка = Новый Массив;
	Если ЗначениеЗаполнено(СведенияОБанке.ИННБанка) И ЗначениеЗаполнено(СведенияОБанке.КППБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ИНН / КПП %1 / %2'"), СведенияОБанке.ИННБанка, СведенияОБанке.КППБанка));
	ИначеЕсли ЗначениеЗаполнено(СведенияОБанке.ИННБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ИНН %1'"), СведенияОБанке.ИННБанка));
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОБанке.ОГРНБанка) Тогда
		КодыБанка.Добавить(СтрШаблон(НСтр("ru = 'ОГРН %1'"), СведенияОБанке.ОГРНБанка));
	КонецЕсли;
	Если КодыБанка.Количество() > 0 Тогда
		ОписаниеБанка.Добавить(СтрСоединить(КодыБанка, " "));
	КонецЕсли;
	ОписаниеБанка.Добавить(СведенияОБанке.ЮридическийАдресБанка);
	Область.Параметры.Банк = СтрСоединить(ОписаниеБанка, Символы.ПС);
	
	// Сервис
	Область.Параметры.СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	// Дата заявки
	Область.Параметры.ДатаЗаявки = Формат(Заявка.Дата, "ДЛФ=D");
	
	ТабличныйДокумент.Вывести(Область);
	
	//////////////////////////////
	// Банковский продукт
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПродуктШапка"));
	Если Не ПустаяСтрока(ФинансовыйПродукт.Наименование) Тогда
		
		Область = Макет.ПолучитьОбласть("ПродуктИдентификатор");
		Область.Параметры.ИдентификаторПродукта = ФинансовыйПродукт.Наименование;
		ТабличныйДокумент.Вывести(Область);
		
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ПродуктПараметры");
	ВидСчетаСписокВыбора = ЗаявкиНаОткрытиеСчета.ВидыСчетов(Истина);
	ВидСчетаСПредставлением = ВидСчетаСписокВыбора.НайтиПоЗначению(Заявка.ВидСчета);
	Если ВидСчетаСПредставлением <> Неопределено Тогда
		Область.Параметры.ВидСчета = ВидСчетаСПредставлением.Представление;
	КонецЕсли;
	
	Валюты = Новый Массив;
	Для Каждого Валюта Из Заявка.Валюты Цикл
		Валюты.Добавить(Валюта.Наименование);
	КонецЦикла;
	Область.Параметры.Валюты = СтрСоединить(Валюты, ", ");
	
	ТабличныйДокумент.Вывести(Область);
	
	Если ФинансовыйПродукт.ПодключитьКСервисуАУСН Тогда
		Область = Макет.ПолучитьОбласть("ИнтеграцияАУСН");
		Область.Параметры.ПодключитьКСервисуАУСН = Формат(ФинансовыйПродукт.ПодключитьКСервисуАУСН, "БЛ=Нет; БИ=Да");
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Отбивка
	Область = Макет.ПолучитьОбласть("ПродуктОтступ");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(?(ЭтоФизЛицо, "РеквизитыИП", "РеквизитыЮЛ"));
	ЗаполнитьЗначенияСвойств(Область.Параметры, Отправитель);
	
	ТабличныйДокумент.Вывести(Область);
	
	// Дополнительные показатели, если они есть в заявке.
	Если ДополнительныеПоказатели.Количество() > 0 Тогда
	
		// Прочитаем настройки для банка про дополнительные показатели для продукта из заявки.
		ДополнительныеПоказателиXDTO = НайтиДополнительныеПоказателиXDTOПродукта(
			СведенияОБанке.Банк, ФинансовыйПродукт.ИдентификаторПродукта, Заявка.Дата);

		Если ДополнительныеПоказателиXDTO <> Неопределено Тогда
		
			Область = Макет.ПолучитьОбласть("ДопПоказателиШапка");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("ДопПоказателиСтрока");
			
			// Выводим дополнительные показатели в том порядке, как они заданы в настройках для банка в сервисе.
			Для каждого ДополнительныйПоказательXDTO  Из ДополнительныеПоказателиXDTO.Показатель Цикл
				
				// Найдем фактическое значение показателя, указанное в заявке.
				ДополнительныйПоказатель = Неопределено;
				Для каждого ТекущийДополнительныйПоказатель Из ДополнительныеПоказатели Цикл
					Если ТекущийДополнительныйПоказатель.Идентификатор = ДополнительныйПоказательXDTO.Идентификатор Тогда
						ДополнительныйПоказатель = ТекущийДополнительныйПоказатель;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДополнительныйПоказатель = Неопределено Тогда
					// По какой-то причине дополнительный показатель из настроек банка не включен в текущую заявку, ничего не выводим.
					Продолжить;
				КонецЕсли;

				// Обнулим старые параметры области макета.
				Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
					Область.Параметры.Установить(Индекс, Неопределено);
				КонецЦикла;
			
				// Выводим представление для показателя и его значения в настройках банка.
				Область.Параметры.Показатель = ДополнительныйПоказательXDTO.КраткоеПредставление;

				Если ДополнительныйПоказатель.ДанныеОтсутствуют Тогда
					Область.Параметры.Значение = НСтр("ru = 'Данные отсутствуют'");
				Иначе
					Если ДополнительныйПоказательXDTO.ТипПоказателя = "Перечисление" Тогда
						// Найдем представление для выбранного значения перечисления.
						ВыбранноеЗначение = ВРег(ДополнительныйПоказатель.Значение);
						ВыбраннноеЗначениеПеречисленияXDTO = Неопределено;
						Для каждого ЗначениеПеречисленияXDTO Из ДополнительныйПоказательXDTO.ЗначенияПеречисления Цикл
							Если ВыбранноеЗначение = ВРег(ЗначениеПеречисленияXDTO.Идентификатор) Тогда
								ВыбраннноеЗначениеПеречисленияXDTO = ЗначениеПеречисленияXDTO;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ВыбраннноеЗначениеПеречисленияXDTO <> Неопределено Тогда
							Область.Параметры.Значение = ВыбраннноеЗначениеПеречисленияXDTO.КраткоеПредставление;
						Иначе
							// В списке значений перечисления не нашли подходящего, выводим просто его идентификатор.
							Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
						КонецЕсли;

					ИначеЕсли ДополнительныйПоказательXDTO.ТипПоказателя = "Булево" Тогда
						// Булево  может сохраняться в виде числа или строк, при выводе в файл показываем его все равно как булево.
						ФорматнаяСтрока = "БЛ='Нет'; БИ='Да'";
						Если ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Число") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение <> 0, ФорматнаяСтрока);
						ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Строка") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение <> "0", ФорматнаяСтрока);
						ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Булево") Тогда
							Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение, ФорматнаяСтрока);
						Иначе
							// Выводим "как есть".
							Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
						КонецЕсли;

					ИначеЕсли ТипЗнч(ДополнительныйПоказатель.Значение) = Тип("Дата") Тогда
						Область.Параметры.Значение = Формат(ДополнительныйПоказатель.Значение, "ДФ=дд.ММ.гггг");
						
					Иначе
						// Строки и числа выводим "как есть".
						Область.Параметры.Значение = ДополнительныйПоказатель.Значение;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Область);
			
			КонецЦикла;
			
			// Отбивка
			Область = Макет.ПолучитьОбласть("ДопПоказателиПодвал");
			ТабличныйДокумент.Вывести(Область);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Контактное лицо
	Область = Макет.ПолучитьОбласть("КонтактноеЛицо");
	ЗаполнитьЗначенияСвойств(Область.Параметры, КонтактноеЛицо);
    ТабличныйДокумент.Вывести(Область);
	
	// Файлы, которые прикладываются к заявке.
	ШапкаУжеВыведена = Ложь;
	Область = Макет.ПолучитьОбласть("ДопФайлыСтрока");
	
	ГруппаАнкета = Документы.ЗаявкаНаОткрытиеСчета.ГруппаФайловПоПризнаку(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета);
	ГруппаПоУмолчанию = Документы.ЗаявкаНаОткрытиеСчета.ГруппаФайловПоПризнаку();
	ПорядокВывода = Документы.ЗаявкаНаОткрытиеСчета.ПорядокВыводаФайлов();
	Для Каждого Идентификатор Из ПорядокВывода Цикл
		
		Если Идентификатор = ГруппаАнкета Тогда
			Продолжить;
		ИначеЕсли Идентификатор = ГруппаПоУмолчанию Тогда
			ЭтоВнешниеФайлы = Истина;
		Иначе
			ЭтоВнешниеФайлы = Ложь;
		КонецЕсли;
		ГруппаФайлов = ДополнительныеФайлы[Идентификатор];
		
		ПредыдущееКраткоеПредставление = "";
		Если ЭтоВнешниеФайлы Тогда
		
			ПредыдущийИдентификатор = "";
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				КраткоеПредставление = СтрШаблон(НСтр("ru = '%1:'"), ДопФайл.КраткоеПредставление);
				Если ПредыдущийИдентификатор <> ДопФайл.Идентификатор Тогда
					
					Область.Параметры.КраткоеПредставление = КраткоеПредставление;
					ПредыдущийИдентификатор = ДопФайл.Идентификатор;
					
				Иначе
					
					Область.Параметры.КраткоеПредставление = "";
					
				КонецЕсли;
				ПредыдущееКраткоеПредставление = КраткоеПредставление;
				
				Область.Параметры.ИмяФайла = ?(ДопФайл.ДанныеОтсутствуют, НСтр("ru = 'Данные отсутствуют'"), ДопФайл.ИмяФайла);
				Если Не ШапкаУжеВыведена Тогда
					ШапкаУжеВыведена = Истина;
					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ДопФайлыШапка"));
				КонецЕсли;
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
		Иначе
			
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				КраткоеПредставление = СтрШаблон(НСтр("ru = '%1:'"), ДопФайл.КраткоеПредставление);
				Область.Параметры.КраткоеПредставление = ?(ПредыдущееКраткоеПредставление <> КраткоеПредставление, КраткоеПредставление, "");
				ПредыдущееКраткоеПредставление = КраткоеПредставление;
				
				Область.Параметры.ИмяФайла = ДопФайл.ИмяФайла;
				Если Не ШапкаУжеВыведена Тогда
					ШапкаУжеВыведена = Истина;
					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ДопФайлыШапка"));
				КонецЕсли;
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отбивка
	Область = Макет.ПолучитьОбласть("ДопПоказателиПодвал");
	ТабличныйДокумент.Вывести(Область);
	
	// Сохраняем в Excel и передаем двоичные данные.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанные;

КонецФункции

Функция ПодготовитьЗаявкуДляОтправки(ЗаявкаНаОткрытиеСчета, ФинансовыеПродукты, ПредставленияДополнительныхФайлов, УнифицироватьИменаПоБанку)
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИдентификаторВременногоХранилищаТранзакций", Строка(Новый УникальныйИдентификатор()));
	
	СведенияОЗаявке = СведенияОЗаявке(ЗаявкаНаОткрытиеСчета);
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(ФинансовыеПродукты, "Банк", Истина);
	СостояниеПрогресса = ЗаявкиНаОткрытиеСчета.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
	// Заявка в каждый банк (xml и Excel).
	СостояниеПрогресса.КоличествоДействий = 3 * Банки.Количество();
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(
		СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Подготовка информации заявки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
		
	ОписаниеСохраняемыхДанных = Новый Структура;
	ОписаниеСохраняемыхДанных.Вставить("СведенияОЗаявке",             СведенияОЗаявке);
	ОписаниеСохраняемыхДанных.Вставить("ДополнительныеФайлы",         ДополнительныеФайлыПоВидам());
	// Будет дополнена колонками при вызове ОписаниеФорматовФайловЗаявки().
	ОписаниеСохраняемыхДанных.Вставить("ФинансовыеПродукты",           ФинансовыеПродукты);
	ОписаниеСохраняемыхДанных.Вставить("УнифицироватьИменаПоБанку",    УнифицироватьИменаПоБанку);
	
	// Информация для присвоения имен файлам, входящим в пакет заявки.
	// В ДополнительныеФайлы будут добавлены файлы анкеты.
	ОписаниеФорматов = ОписаниеФорматовФайловЗаявки(ОписаниеСохраняемыхДанных, Результат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В ДополнительныеФайлы будут добавлены имена (но пока не данные) внешних файлов (загруженных с диска
	// или присоединенных к другим объектом базы).
	ДобавитьОписанияДополнительныхФайлов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, ПредставленияДополнительныхФайлов);
	
	// Заявка в каждый банк (xml и Excel) + Каждый внешний файл.
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	СостояниеПрогресса.КоличествоДействий = 3 * Банки.Количество() + ДополнительныеФайлы.Количество();
	
	// Дополнительные файлы.
	// Только сейчас извлекаются данные внешних файлов и помещаются в регистр сведений для отправки.
	ПодготовитьФайлыДляОтправки_ДополнительныеФайлы(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	
	// Текст заявки.
	// Имена всех подготовленных файлов попадут в Excel и xml в порядке, задаваемом функцией ПорядокВыводаФайлов().
	ПодготовитьФайлыДляОтправки_Анкета(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса);
	
	// Если не зафиксировано ошибок, то считаем, что все прошло успешно.
	Результат.Выполнено = НЕ ЗначениеЗаполнено(Результат.ОписаниеОшибки);
	
	Если Не Результат.Выполнено И ЗначениеЗаполнено(Результат.ИдентификаторВременногоХранилищаТранзакций) Тогда
		УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Результат.ИдентификаторВременногоХранилищаТранзакций);
	КонецЕсли;
		
	КлючеваяОперация = "ПодготовкаФайловДляОтправкиЗаявкаНаОткрытиеСчета";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, Банки.Количество());
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеФорматовФайловЗаявки(ОписаниеСохраняемыхДанных, Результат)
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаВыгружаемыхФорматов = Новый ТаблицаЗначений;
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("ПрефиксФайла", ТипСтрока);
	ТаблицаВыгружаемыхФорматов.Колонки.Добавить("Банки",        Новый ОписаниеТипов("Массив"));
	
	УникальныеИменаФайловВПакете = Новый Соответствие;
	ПакетыСУникальнымиИменами    = Новый Соответствие;
	ИдентификаторыАрхива         = Новый Соответствие;
	
	ОписаниеФорматов = Новый Структура;
	ОписаниеФорматов.Вставить("ТаблицаВыгружаемыхФорматов",   ТаблицаВыгружаемыхФорматов);
	ОписаниеФорматов.Вставить("УникальныеИменаФайловВПакете", УникальныеИменаФайловВПакете);
	ОписаниеФорматов.Вставить("ПакетыСУникальнымиИменами",    ПакетыСУникальнымиИменами);
	ОписаниеФорматов.Вставить("ИдентификаторыАрхива",    ИдентификаторыАрхива);
	
	СведенияОЗаявке = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	ЗаявкаНаОткрытиеСчета = СведенияОЗаявке.Заявка.Ссылка;
	
	УнифицироватьИменаПоБанку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеСохраняемыхДанных,
		"УнифицироватьИменаПоБанку", Ложь);
	
	// Дополняем существующую таблицу колонками с информацией в разрезе продуктов.
	ФинансовыеПродукты = ОписаниеСохраняемыхДанных.ФинансовыеПродукты;
	ФинансовыеПродукты.Колонки.Добавить("Наименование",           ТипСтрока);
	ФинансовыеПродукты.Колонки.Добавить("ПрефиксФайла",           ТипСтрока);
	ФинансовыеПродукты.Колонки.Добавить("ПодключитьКСервисуАУСН", ТипБулево);
	ФинансовыеПродукты.Индексы.Добавить("ИдентификаторПродукта");
	
	// Для каждого банка подготавливаем информацию по его продукту.
	Для Каждого ФинансовыйПродукт Из ФинансовыеПродукты Цикл
		
		ИдентификаторАрхива = ?(УнифицироватьИменаПоБанку, Строка(Новый УникальныйИдентификатор), "");
		ИдентификаторыАрхива.Вставить(ФинансовыйПродукт.Банк, ИдентификаторАрхива);
		
		УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
			Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета,
			Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.УсловияОбслуживания,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФинансовыйПродукт.Банк),
			Истина);
		Если УслугиБанка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УсловияОбслуживанияXDTO = ЗаявкиНаОткрытиеСчета.ОбъектXDTOХарактеристики(
			Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, УслугиБанка[0].Значение);

		ФинансовыйПродуктXDTO = ЗаявкиНаОткрытиеСчета.НайтиФинансовыйПродукт(
			Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета,
			УсловияОбслуживанияXDTO,
			ФинансовыйПродукт.ИдентификаторПродукта,
			СведенияОЗаявке.Заявка.Дата);
		Если ФинансовыйПродуктXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ФинансовыйПродукт.Наименование = ФинансовыйПродуктXDTO.Наименование;
		ФинансовыйПродукт.ПрефиксФайла = ?(ЗначениеЗаполнено(ФинансовыйПродуктXDTO.ПрефиксФайла), ФинансовыйПродуктXDTO.ПрефиксФайла, "");
		ФинансовыйПродукт.ПодключитьКСервисуАУСН = ?(ФинансовыйПродуктXDTO.ИнтеграцияССервисомАУСН = Истина, Истина, Ложь);
		
		СтрокаВыгружаемыхФорматов = ТаблицаВыгружаемыхФорматов.Найти(ФинансовыйПродукт.ПрефиксФайла, "ПрефиксФайла");
		Если СтрокаВыгружаемыхФорматов = Неопределено Тогда
			
			СтрокаВыгружаемыхФорматов = ТаблицаВыгружаемыхФорматов.Добавить();
			СтрокаВыгружаемыхФорматов.ПрефиксФайла = ФинансовыйПродукт.ПрефиксФайла; 
			СтрокаВыгружаемыхФорматов.Банки = Новый Массив;
			
		КонецЕсли;
		СтрокаВыгружаемыхФорматов.Банки.Добавить(ФинансовыйПродукт.Банк);
		
		УникальныеИменаПоБанку = ПакетыСУникальнымиИменами[ФинансовыйПродукт.Банк];
		
		Если УникальныеИменаПоБанку = Неопределено Тогда
			УникальныеИменаПоБанку = Новый Соответствие;
			ПакетыСУникальнымиИменами.Вставить(ФинансовыйПродукт.Банк, УникальныеИменаПоБанку);
		КонецЕсли;
		
		// Запоминаем имена будущих файлов.
		// Анкета клиента.
		
		ПараметрыФайлаЗаявки = ЗаявкиНаОткрытиеСчета.НовыеПараметрыИмениФайлаЗаявки();
		ПараметрыФайлаЗаявки.ТипДокумента           = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета;
		ПараметрыФайлаЗаявки.ТипСодержимого         = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
		ПараметрыФайлаЗаявки.СведенияОЗаявке        = СведенияОЗаявке;
		ПараметрыФайлаЗаявки.ПрефиксФайла           = СтрокаВыгружаемыхФорматов.ПрефиксФайла;
		
		Если УнифицироватьИменаПоБанку Тогда
			ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = УникальныеИменаПоБанку;
		Иначе
			ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете = УникальныеИменаФайловВПакете;
		КонецЕсли;
		
		ИмяФайлаЗаявки = ЗаявкиНаОткрытиеСчета.ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки);
		
		ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку(ПараметрыФайлаЗаявки.ТипДокумента)];
		ОписаниеФайла = ДополнительныеФайлы.Добавить();
		ОписаниеФайла.Банк                 = ФинансовыйПродукт.Банк;
		ОписаниеФайла.КраткоеПредставление = Строка(ПараметрыФайлаЗаявки.ТипДокумента);
		ОписаниеФайла.Наименование         = СтрЗаменить(ИмяФайлаЗаявки, ".xml", "");
		ОписаниеФайла.Расширение           = "xlsx";
		ОписаниеФайла.ИмяФайла             = СтрЗаменить(ИмяФайлаЗаявки, ".xml", ".xlsx"); // Excel-файл самой заявки
		ОписаниеФайла.ИмяФайлаXML          = ИмяФайлаЗаявки;                               // xml-файл самой заявки
		
	КонецЦикла;
		
	Возврат ОписаниеФорматов;
	
КонецФункции

// Список дополнительных файлов в разбивке по банкам.
//
// Параметры:
//  ОписаниеСохраняемыхДанных - Структура - содержит ключи СведенияОЗаявке и ДополнительныеФайлы.
//  ОписаниеФорматов - Структура - см. ОписаниеФорматовФайловЗаявки()
//  ПредставленияДополнительныхФайлов - СписокЗначений - как доп.файлы названы в интерфейсе формы.
//
Процедура ДобавитьОписанияДополнительныхФайлов(ОписаниеСохраняемыхДанных, ОписаниеФорматов, ПредставленияДополнительныхФайлов)
	
	УнифицироватьИменаПоБанку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеСохраняемыхДанных, 
		"УнифицироватьИменаПоБанку", Ложь);
	
	ПакетыСУникальнымиИменами = ОписаниеФорматов.ПакетыСУникальнымиИменами;

	ПрефиксыБанков = Новый Соответствие;
	
	Для каждого ВыгружаемыйФормат Из ОписаниеФорматов.ТаблицаВыгружаемыхФорматов Цикл
		
		Для каждого ВыгружаемыйБанк Из ВыгружаемыйФормат.Банки Цикл
			
			ПрефиксыБанков.Вставить(ВыгружаемыйБанк, ВыгружаемыйФормат.ПрефиксФайла);
		
		КонецЦикла;	
	
	КонецЦикла;
	
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ОписаниеСохраняемыхДанных.СведенияОЗаявке.Заявка.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.Идентификатор КАК Идентификатор,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.КлючСтрокиФайла КАК КлючСтрокиФайла,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.Значение КАК ДопФайл,
	|	ЛОЖЬ КАК ХранитсяВТабличнойЧасти,
	|	ЗаявкаНаОткрытиеСчетаПолучателиДополнительнойИнформации.Банк КАК Банк
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.ДополнительныеФайлы КАК ЗаявкаНаОткрытиеСчетаДополнительныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеСчета.ПолучателиДополнительнойИнформации КАК ЗаявкаНаОткрытиеСчетаПолучателиДополнительнойИнформации
	|		ПО ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.Ссылка = ЗаявкаНаОткрытиеСчетаПолучателиДополнительнойИнформации.Ссылка
	|			И ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.КлючСтрокиФайла = ЗаявкаНаОткрытиеСчетаПолучателиДополнительнойИнформации.КлючСтрокиДопИнформации
	|			И (НЕ ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.ДанныеОтсутствуют)
	|			И (ЗаявкаНаОткрытиеСчетаПолучателиДополнительнойИнформации.ЭтоФайл)
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчетаДополнительныеФайлы.Ссылка = &ЗаявкаНаОткрытиеСчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	КлючСтрокиФайла";

	ПредыдущийИдентификатор = "";
	ДопФайлы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ДанныеОтсутствуют Тогда
		
			Если ПредыдущийИдентификатор <> Выборка.Идентификатор Тогда // только первые из группы
				
				СохраненныйФайл = ДополнительныеФайлы.Добавить();
				ЗаполнитьЗначенияСвойств(СохраненныйФайл, Выборка);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ДопФайл) Тогда
				
				СохраненныйФайл = ДополнительныеФайлы.Добавить();
				ЗаполнитьЗначенияСвойств(СохраненныйФайл, Выборка);
				
				ДопФайлы.Добавить(Выборка.ДопФайл);
				
			ИначеЕсли ПредыдущийИдентификатор <> Выборка.Идентификатор Тогда
				// Хотя бы первый файл в группе должен быть заполнен. Появление незаполненных должно быть исключено на этапе проверки заполнения.
				ВызватьИсключение НСтр("ru = 'Файл требуется, но не приложен'");
				
			КонецЕсли;
			
		КонецЕсли;
		ПредыдущийИдентификатор = СохраненныйФайл.Идентификатор;
		
	КонецЦикла;
	ДопФайлы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДопФайлы, "Наименование,Расширение", Истина);
	
	// Дополняем таблицу, заполняя колонки и копируя список банков из первого файла группы в последующие файлы.
	ДлинаНаименования = ДополнительныеФайлы.Колонки.ИмяФайла.ТипЗначения.КвалификаторыСтроки.Длина;
	ИндексСтроки = 0;
	КоличествоСтрок = ДополнительныеФайлы.Количество();
	Пока ИндексСтроки < КоличествоСтрок Цикл
		
		СохраненныйФайл = ДополнительныеФайлы[ИндексСтроки];
		Если СохраненныйФайл.ДанныеОтсутствуют Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		ДопФайлИнформация = ДопФайлы[СохраненныйФайл.ДопФайл];
		Если ДопФайлИнформация <> Неопределено Тогда
			
			СохраненныйФайл.Наименование = ДопФайлИнформация.Наименование;
			СохраненныйФайл.Расширение = ДопФайлИнформация.Расширение;
			
		КонецЕсли;
		
		Если ИндексСтроки > 0 Тогда
			
			ПредыдущийФайл = ДополнительныеФайлы[ИндексСтроки - 1];
			ЭтоПрежнийДопФайл = ИндексСтроки > 0
				И ПредыдущийФайл.КлючСтрокиФайла = СохраненныйФайл.КлючСтрокиФайла
				И ПредыдущийФайл.Идентификатор = СохраненныйФайл.Идентификатор;
				
		Иначе
			
			ПредыдущийФайл = СохраненныйФайл;
			ЭтоПрежнийДопФайл = Ложь;
			
		КонецЕсли;
				
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СохраненныйФайл.Наименование);
		// Гарантируем, что имя файла будет всегда не длинее заранее определенного количества символов.
		Если ПустаяСтрока(СохраненныйФайл.Расширение) Тогда
			ИмяФайла = Лев(ИмяФайла, ДлинаНаименования);
		Иначе
			ИмяФайла = Лев(ИмяФайла, ДлинаНаименования - 4) + "." + СохраненныйФайл.Расширение;
		КонецЕсли;
		
		СохраненныйФайл.ИмяФайла = ИмяФайла;
		
		// Гарантируем, что имя файла будет всегда уникальным.
		// Даже если в конце будет добавлен номер для уникальности, то длина имени файла позволит его записать в любой ОС.
		
		Если УнифицироватьИменаПоБанку Тогда
			УникальныеИменаПоБанку = ПакетыСУникальнымиИменами[СохраненныйФайл.Банк];
				
			Если УникальныеИменаПоБанку = Неопределено Тогда
				УникальныеИменаПоБанку = Новый Соответствие;
				ПакетыСУникальнымиИменами.Вставить(СохраненныйФайл.Банк, УникальныеИменаПоБанку);
			КонецЕсли;
			УникальныеИменаФайловВПакете = УникальныеИменаПоБанку;
		Иначе
			УникальныеИменаФайловВПакете = ОписаниеФорматов.УникальныеИменаФайловВПакете;
		КонецЕсли;
		
		ПрефиксБанка = ПрефиксыБанков[СохраненныйФайл.Банк];
		
		СохраненныйФайл.ИмяФайла = УниверсальныйОбменСБанкамиОбщегоНазначения.УнифицироватьИмяФайлаКВыгрузке(
			ИмяФайла, УниверсальныйОбменСБанкамиОбщегоНазначения.СокращенныйПериодБезУИД(), ПрефиксБанка, УникальныеИменаФайловВПакете);

		// Может быть несколько файлов в группе.
		ДопФайлОписание = ПредставленияДополнительныхФайлов.НайтиПоЗначению(СохраненныйФайл.КлючСтрокиФайла);
		ДопФайлПредставление = ?(ДопФайлОписание = Неопределено, Неопределено, ДопФайлОписание.Представление);
		
		СохраненныйФайл.КраткоеПредставление = ДопФайлПредставление;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_ДополнительныеФайлы(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	Перем Вложение;
	
	СведенияОЗаявке = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	
	ОтборВнешнихФайлов = Новый Структура("ДанныеОтсутствуют", Ложь);
	ДополнительныеФайлы = ОписаниеСохраняемыхДанных.ДополнительныеФайлы[ГруппаФайловПоПризнаку()];
	ДополнительныеФайлы = ДополнительныеФайлы.НайтиСтроки(ОтборВнешнихФайлов);
	
	ПредыдущийДопФайл = Неопределено;
	Для каждого ДопФайл Из ДополнительныеФайлы Цикл
		
		Если ПредыдущийДопФайл = Неопределено
		 Или ПредыдущийДопФайл.Идентификатор <> ДопФайл.Идентификатор
		 Или ПредыдущийДопФайл.КлючСтрокиФайла <> ДопФайл.КлючСтрокиФайла Тогда
			
		    // Помещаем предыдущий.
			Если Вложение <> Неопределено Тогда
				РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
				Если НЕ РезультатОперации.Выполнено Тогда
					Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Начинаем добавлять банки по новому.
			Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
			Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
			Вложение.Организация      = СведенияОЗаявке.Отправитель.Организация;
			Вложение.Предмет          = СведенияОЗаявке.Заявка.Ссылка;
			Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
			Вложение.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ДопФайл.ИмяФайла);
			Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ПроизвольныйФайл;
			Вложение.ИсходноеИмяФайла = ДопФайл.ИмяФайла;
			Вложение.ИсходныеДанные   = РаботаСФайлами.ДвоичныеДанныеФайла(ДопФайл.ДопФайл);
			Вложение.Сжать            = Истина;
			
			ПредыдущийДопФайл = ДопФайл;
			
		КонецЕсли;
		
	 	Вложение.БанкиПолучатели.Добавить(ДопФайл.Банк);
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			НСтр("ru = 'Дополнительный файл'"),
			СостояниеПрогресса.ДополнительныеПараметры);
		
	КонецЦикла;
	Если Вложение <> Неопределено Тогда
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПодготовитьФайлыДляОтправки_Анкета(ОписаниеСохраняемыхДанных, ОписаниеФорматов, Результат, СостояниеПрогресса)
	
	СведенияОЗаявке        = ОписаниеСохраняемыхДанных.СведенияОЗаявке;
	ЗаявкаНаОткрытиеСчета  = СведенияОЗаявке.Заявка.Ссылка;
	ФинансовыеПродукты      = ОписаниеСохраняемыхДанных.ФинансовыеПродукты;
	
	Банки = ФинансовыеПродукты.ВыгрузитьКолонку("Банк");
	ДополнительныеПоказатели = ДополнительныеПоказателиБанков(ЗаявкаНаОткрытиеСчета, Банки);
	ДополнительныеПоказатели.Индексы.Добавить("Банк");
	
	ПараметрыСогласия = ПараметрыСогласия(СведенияОЗаявке);
	ИнформацияОБанках = ЗаявкиНаОткрытиеСчета.ПодготовитьИнформациюОБанкахДляСогласий(ФинансовыеПродукты, ПараметрыСогласия);
	
	// Для каждого банка вкладываем в пакет заявки:
	Для каждого ФинансовыйПродукт Из ФинансовыеПродукты Цикл
		
		СведенияОБанке = ИнформацияОБанках.Найти(ФинансовыйПродукт.Банк, "Банк");
		Если СведенияОБанке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПоказателиБанка = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Банк", ФинансовыйПродукт.Банк));
		ДополнительныеФайлы = ДополнительныеФайлыДляБанка(ОписаниеСохраняемыхДанных.ДополнительныеФайлы, ФинансовыйПродукт.Банк);
		
		Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		Вложение.ИдентификаторАрхива = ОписаниеФорматов.ИдентификаторыАрхива[ФинансовыйПродукт.Банк]; 
		Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
		Вложение.Организация      = СведенияОЗаявке.Отправитель.Организация;
		Вложение.Предмет          = ЗаявкаНаОткрытиеСчета;
		Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
		Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета;
		Вложение.БанкиПолучатели.Добавить(ФинансовыйПродукт.Банк);
		Вложение.Сжать            = Истина;
		
		// 1. XML-файл самой заявки.
		ГруппаФайлов = ГруппаФайловПоПризнаку(Вложение.ТипДокумента);
		Если ДополнительныеФайлы[ГруппаФайлов].Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Среди прикладываемых файлов отсутствует анкета клиента'");
		КонецЕсли;
		ОписаниеФайла = ДополнительныеФайлы[ГруппаФайлов][0];
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
		Вложение.ИсходноеИмяФайла = ОписаниеФайла.ИмяФайлаXML;
		Вложение.ИсходныеДанные   = ВыгрузитьЗаявкуXML(ОписаниеФайла.ИмяФайлаXML,
			СведенияОЗаявке, ФинансовыйПродукт, СведенияОБанке, ДополнительныеПоказателиБанка, ДополнительныеФайлы);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если Не РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
  			СтрШаблон(НСтр("ru = 'Заявка в %1'"), ФинансовыйПродукт.Банк),
			СостояниеПрогресса.ДополнительныеПараметры);

		// 2. Excel-файл самой заявки.
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_spreadsheet;
		Вложение.ИсходноеИмяФайла = ОписаниеФайла.ИмяФайла;
		Вложение.ИсходныеДанные   = ВыгрузитьЗаявкуExcel(
			СведенияОЗаявке, ФинансовыйПродукт, СведенияОБанке, ДополнительныеПоказателиБанка, ДополнительныеФайлы);
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			СтрШаблон(НСтр("ru = 'Заявка в %1'"), ФинансовыйПродукт.Банк),
			СостояниеПрогресса.ДополнительныеПараметры);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоказатели

Функция ТребуемыеДополнительныеПоказатели(СервисОбменаСБанками, ДатаЗаявки, Банки, ИдентификаторыПродуктов) Экспорт
	
	ДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
	ДополнительныеПоказатели.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	ДополнительныеПоказатели.Колонки.Добавить("ИдентификаторПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ДополнительныеПоказатели,
		Банки,
		Истина); // При открытии ранее отправленной заявки необходимо отображать дополнительные показатели как они были на момент сохранения.
	
	Для каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
		ПрочитатьДополнительныеПоказатели(
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			СтрокаТаблицы.Значение,
			ДополнительныеПоказатели);
	КонецЦикла;
	
	// Оставим уникальные дополнительные показатели.
	УникальныеДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
	Для каждого ДополнительныйПоказатель Из ДополнительныеПоказатели Цикл
		// Пропускаем дополнительные показатели, если они относятся к продукту, не выбранному пользователем.
		Если ЗначениеЗаполнено(ДополнительныйПоказатель.ИдентификаторПродукта)
			И ИдентификаторыПродуктов.Найти(ДополнительныйПоказатель.ИдентификаторПродукта) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = УникальныеДополнительныеПоказатели.Найти(ДополнительныйПоказатель.Идентификатор, "Идентификатор");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = УникальныеДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныйПоказатель);
			НоваяСтрока.Банки.Добавить(ДополнительныйПоказатель.Банк);
			НоваяСтрока.КоличествоБанков = 1;
		Иначе // Показатель с таким идентификтатором уже добавлен.
			Если НайденнаяСтрока.Банки.Найти(ДополнительныйПоказатель.Банк) = Неопределено Тогда
				НайденнаяСтрока.Банки.Добавить(ДополнительныйПоказатель.Банк);
				НайденнаяСтрока.КоличествоБанков = НайденнаяСтрока.КоличествоБанков + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УникальныеДополнительныеПоказатели;
	
КонецФункции

Процедура ПрочитатьДополнительныеПоказатели(ДатаЗаявки, Банк, ХранилищеXML, ДополнительныеПоказатели)

	УсловияОбслуживания = ЗаявкиНаОткрытиеСчета.ОбъектXDTOХарактеристики(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, ХранилищеXML);
		
	Если УсловияОбслуживания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого НаборДополнительныхПоказателей Из УсловияОбслуживания.ДополнительныеПоказатели Цикл
		Если НаборДополнительныхПоказателей.ДатаНачала > ДатаЗаявки
			ИЛИ НаборДополнительныхПоказателей.ДатаОкончания < ДатаЗаявки Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ДополнительныйПоказатель Из НаборДополнительныхПоказателей.Показатель Цикл
			СтрокаТаблицы = ДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДополнительныйПоказатель);
			
			СтрокаТаблицы.ЗначенияПеречисления = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаЗначенияПеречисления();
			Для каждого Значение Из ДополнительныйПоказатель.ЗначенияПеречисления Цикл
				ЗначениеПеречисления = СтрокаТаблицы.ЗначенияПеречисления.Добавить();
				ЗаполнитьЗначенияСвойств(ЗначениеПеречисления, Значение);
			КонецЦикла;
			
			СтрокаТаблицы.Банк = Банк;
			
			Если НаборДополнительныхПоказателей.Свойства().Получить("ИдентификаторПродукта") <> Неопределено Тогда
				СтрокаТаблицы.ИдентификаторПродукта = НаборДополнительныхПоказателей.ИдентификаторПродукта;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеПоказателиБанков(ЗаявкаНаОткрытиеСчета, Банки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Банки", Банки);
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаОткрытиеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.Банк КАК Банк,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.Идентификатор КАК Идентификатор,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеСчета.ПолучателиДополнительнойИнформации КАК ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеСчета.ДополнительныеПоказатели КАК ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели
	|		ПО ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.Ссылка = ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.Ссылка
	|			И ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.КлючСтрокиДопИнформации = ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.КлючСтрокиПоказателя
	|ГДЕ
	|	ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.Банк В(&Банки)
	|	И ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.Ссылка = &Ссылка
	|	И НЕ ЗаявкаНаОткрытиеСчетаПолучателиДополнительныхПоказателей.ЭтоФайл
	|
	|УПОРЯДОЧИТЬ ПО
	|	Банк,
	|	ЗаявкаНаОткрытиеСчетаДополнительныеПоказатели.Идентификатор";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиДополнительныеПоказателиXDTOПродукта(Банк, Знач ИдентификаторПродукта, Знач Дата)

	УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета,
		Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ДополнительныеПоказатели,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк),
		Истина);
	Если УслугиБанка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УсловияОбслуживанияXDTO = ЗаявкиНаКредит.ОбъектXDTOХарактеристики(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, УслугиБанка[0].Значение);
	Если УсловияОбслуживанияXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИдентификаторПродукта = ВРег(ИдентификаторПродукта);
	Дата                            = НачалоДня(Дата);
	
	ДополнительныеПоказателиXDTOПоУмолчанию = Неопределено;
	
	Для каждого ДополнительныеПоказателиXDTO Из УсловияОбслуживанияXDTO.ДополнительныеПоказатели Цикл
		// Проверяем период действий
		Если ДополнительныеПоказателиXDTO.ДатаНачала > Дата
			ИЛИ ДополнительныеПоказателиXDTO.ДатаОкончания < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем принадлежность продукту
		Если НЕ ЗначениеЗаполнено(ДополнительныеПоказателиXDTO.ИдентификаторПродукта) Тогда
			// У дополнительных показателей не задан конкретный продукт, т.е. они действует для всех продуктов,
			// для которых нет собственных (явно назначенных дополнительных показателей).
			// Запомним ссылку на такие дополнительные показатели, если для продукта не найдем персональный, то вернем этот.
			ДополнительныеПоказателиXDTOПоУмолчанию = ДополнительныеПоказателиXDTO;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторПродукта)
			И ВРег(ДополнительныеПоказателиXDTO.ИдентификаторПродукта) = ИдентификаторПродукта Тогда
			Возврат ДополнительныеПоказателиXDTO;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ДополнительныеПоказателиXDTOПоУмолчанию;

КонецФункции

#КонецОбласти

#Область ДополнительныеФайлы

Функция ДополнительныеФайлыПоВидам()
	
	ДлинаНаименования = 150;
	
	ДополнительныеФайлы = Новый ТаблицаЗначений;
	КолонкиДопФайлов = ДополнительныеФайлы.Колонки;
	КолонкиДопФайлов.Добавить("ДопФайл",                 Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	КолонкиДопФайлов.Добавить("Банк",                    Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	КолонкиДопФайлов.Добавить("КраткоеПредставление",    ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("Наименование",            ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("Расширение",              ОбщегоНазначения.ОписаниеТипаСтрока(10));
	КолонкиДопФайлов.Добавить("ИмяФайла",                ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	КолонкиДопФайлов.Добавить("ИмяФайлаXML",             ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНаименования));
	
	ДопФайлыВнешние = ДополнительныеФайлы.СкопироватьКолонки();
	КолонкиДопФайловВнешних = ДопФайлыВнешние.Колонки;
	КолонкиДопФайловВнешних.Добавить("Идентификатор",           ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КолонкиДопФайловВнешних.Добавить("КлючСтрокиФайла",         ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиДопФайловВнешних.Добавить("ДанныеОтсутствуют",       Новый ОписаниеТипов("Булево"));
	
	// Для удобства использования в алгоритмах храним в структуре, а не в списке с фиксированным порядком.
	// Но в анкету будут выводиться в заранее заданном порядке.
	ВидыДополнительныхФайлов = Новый Структура;
	ПорядокФайлов = ПорядокВыводаФайлов();
	Для Каждого ГруппаФайлов Из ПорядокФайлов Цикл
		
		КолонкиГруппыФайлов = ?(ГруппаФайлов = "ВнешниеФайлы", ДопФайлыВнешние, ДополнительныеФайлы.СкопироватьКолонки());
		ВидыДополнительныхФайлов.Вставить(ГруппаФайлов, КолонкиГруппыФайлов);
			
	КонецЦикла;
	
	Возврат ВидыДополнительныхФайлов;
	
КонецФункции

Функция ДополнительныеФайлыДляБанка(ДополнительныеФайлы, Банк)
	
	ОтборПоБанку = Новый Структура("Банк", Банк);
	
	ВидыДополнительныхФайлов = Новый Структура;
	Для Каждого ГруппаФайлов Из ДополнительныеФайлы Цикл
		ВидыДополнительныхФайлов.Вставить(ГруппаФайлов.Ключ, ГруппаФайлов.Значение.НайтиСтроки(ОтборПоБанку));
	КонецЦикла;
	
	Возврат ВидыДополнительныхФайлов;
	
КонецФункции

// Заполняет таблицу формы из характеристик сервиса для банков.
//
// Параметры:
//  СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - тип сервиса обмена с банками.
//  ДатаЗаявки   - Дата - на какую дату получить характеристику.
//  Банки        - Массив из СправочникСсылка.БанкиУниверсальногоОбмена - для каких банков получить характеристики.
//  ИдентификаторыПродуктов - Массив из Строка - продукты, для которых получаем характеристики.
//  ТребуемыеФайлы - ТаблицаЗначений - информация в формате, который будет использован на форме.
//
Процедура ТребуемыеДополнительныеФайлы(СервисОбменаСБанками, ДатаЗаявки, Банки, ИдентификаторыПродуктов, ТребуемыеФайлы) Экспорт
	
	// Дополняем колонками, необходимыми на момент выбора из альтернативных продуктов.
	ТребуемыеФайлы.Колонки.Добавить("ИдентификаторПродукта", Новый ОписаниеТипов("Строка"));
	
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		СервисОбменаСБанками,
		Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ДополнительныеФайлы,
		Банки,
		Истина); // При открытии ранее отправленной заявки необходимо отображать дополнительные файлы, как они были на момент сохранения.
		
	ДатаЗаявкиНачалоДня = НачалоДня(ДатаЗаявки);
	Для каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
		
		УсловияОбслуживания = ЗаявкиНаОткрытиеСчета.ОбъектXDTOХарактеристики(
			Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, СтрокаТаблицы.Значение);
			
		Если УсловияОбслуживания = Неопределено Тогда // не заданы условия
			Продолжить;
		КонецЕсли;
		
		Для каждого НаборДополнительныхФайлов Из УсловияОбслуживания.ДополнительныеФайлы Цикл
			
			Если НаборДополнительныхФайлов.ДатаНачала > ДатаЗаявкиНачалоДня
			 Или НаборДополнительныхФайлов.ДатаОкончания < ДатаЗаявкиНачалоДня Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваНабора = НаборДополнительныхФайлов.Свойства();
			ИдентификаторПродукта = ?(СвойстваНабора.Получить("ИдентификаторПродукта") = Неопределено,
												"", НаборДополнительныхФайлов.ИдентификаторПродукта);

			Для каждого ДополнительныйФайл Из НаборДополнительныхФайлов.Файл Цикл
				
				ТребуемыйФайл = ТребуемыеФайлы.Добавить();
				ЗаполнитьОписаниеДополнительногоФайла(ТребуемыйФайл, ДополнительныйФайл, СтрокаТаблицы.Банк, ИдентификаторПродукта);
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(ТребуемыйФайл.Идентификатор, 1)) Тогда
					// Последним символом идентификатора не должна быть цифра.
					ТребуемыйФайл.Идентификатор = ТребуемыйФайл.Идентификатор + "__";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;
	
	// Сортируем, чтобы оставить только одно описание для каждого идентификатора.
	// В первую очередь обязательные. Во вторую очередь, чем больше Приоритет, тем важнее его использование.
	// В третью очередь, с одинаковым приоритетом чем больше количество, тем важнее.
	ТребуемыеФайлы.Сортировать("Идентификатор Возр, Предопределенный Убыв, Обязательный Убыв, Приоритет Убыв, Количество Убыв");	
	
	// Оставим уникальные дополнительные показатели.
	СтрокаОписанияДопФайла = Неопределено;
	ТекущийИндекс = 0;
	КоличествоФайлов = ТребуемыеФайлы.Количество();
	Пока ТекущийИндекс < КоличествоФайлов Цикл
		
		ДополнительныйФайл = ТребуемыеФайлы[ТекущийИндекс];
		
		// Пропускаем дополнительные файлы, если они относятся к продукту, невыбранному пользователем.
		Если ЗначениеЗаполнено(ДополнительныйФайл.ИдентификаторПродукта)
		   И ИдентификаторыПродуктов.Найти(ДополнительныйФайл.ИдентификаторПродукта) = Неопределено Тогда
		   
			ТребуемыеФайлы.Удалить(ДополнительныйФайл);
			КоличествоФайлов = КоличествоФайлов - 1;
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаОписанияДопФайла = Неопределено
		 Или СтрокаОписанияДопФайла.Идентификатор <> ДополнительныйФайл.Идентификатор Тогда // описание нового доп.файла
		 
			СтрокаОписанияДопФайла = ДополнительныйФайл;
			ТекущийИндекс = ТекущийИндекс + 1;
			
		Иначе // продолжение описания доп.файла (другой банк с меньшим приоритетом)
			
			Если СтрокаОписанияДопФайла.Банки.НайтиПоЗначению(ДополнительныйФайл.Банки[0].Значение) = Неопределено Тогда
				СтрокаОписанияДопФайла.Банки.Добавить(ДополнительныйФайл.Банки[0].Значение);
			КонецЕсли;
			ТребуемыеФайлы.Удалить(ДополнительныйФайл);
			КоличествоФайлов = КоличествоФайлов - 1;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Сортируем для вывода в документ.
	// Сначала выводятся обязательные, затем необязательные. Внутри этих классов сортировка по наименованию.
	ТребуемыеФайлы.Сортировать("Предопределенный Убыв, Обязательный Убыв, КраткоеПредставление Возр, Идентификатор Возр");
	
	ТребуемыеФайлы.Колонки.Удалить("ИдентификаторПродукта");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеДополнительногоФайла(ОписаниеФайла, ДополнительныйФайл, Банк, ИдентификаторПродукта = "")
	
	ЗаполнитьЗначенияСвойств(ОписаниеФайла, ДополнительныйФайл, , "ПараметрыВыбораФайла");
	
	СвойстваВыборФайла = ДополнительныйФайл.ПараметрыВыбораФайла.Свойства();
	ПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	Для Каждого ПараметрВыбора Из СвойстваВыборФайла Цикл
		
		ИмяПараметра = ?(ПараметрВыбора.Имя = "МаксРазмер", "МаксимальныйРазмер", ПараметрВыбора.Имя);
		ПараметрыВыбораФайла.Вставить(ИмяПараметра, ДополнительныйФайл.ПараметрыВыбораФайла[ПараметрВыбора.Имя]);
		
	КонецЦикла;
	ОписаниеФайла.ПараметрыВыбораФайла = ПараметрыВыбораФайла;
	
	ОписаниеФайла.Банки.Добавить(Банк);
	
	Если Не ПустаяСтрока(ИдентификаторПродукта) Тогда
		ОписаниеФайла.ИдентификаторПродукта = ИдентификаторПродукта;
	КонецЕсли;
	
	Если ОписаниеФайла.Количество = 0 Тогда
		ОписаниеФайла.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
