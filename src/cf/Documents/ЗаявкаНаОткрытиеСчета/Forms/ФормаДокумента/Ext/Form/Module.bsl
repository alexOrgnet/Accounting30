
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрыватьФормуБезусловно;

&НаКлиенте
Перем ИсточникОбработкиОповещенияЗаписьФизическогоЛица;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаОткрытиеСчета);
	
	// Если заявка уже отправлена, то открываем ее только на просмотр.
	Если РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ЗаявкаОтправлена(Объект.Ссылка) Тогда
		ЗаявкаОтправлена = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ТребуетсяИнтеграцияССервисомАУСН =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТребуетсяИнтеграцияССервисомАУСН", Ложь);
	
	// Сразу запускаем обновление данных из сервиса, чтобы к моменту перехода к шагу с банками,
	// они успели закэшироваться.
	СведенияОДлительнойОперации = Новый Структура();
	СведенияОДлительнойОперации.Вставить("Имя", "");
	СведенияОДлительнойОперации.Вставить("ДлительнаяОперация");

	ОбновитьСведенияОСервисе();
	
	ПрочитатьОсновныеДанныеОрганизации(Ложь);

	ИнициализироватьФорму();
	
	ОтметкиСнятыеПользователем = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	УстановитьТекущийШагПомощника();
	
	ИнициализацияСписковВалют();
	
	Заголовок = СформироватьЗаголовок(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьИнтернетПоддержкуПользователей", 0.5, Истина);
	Иначе
		ОжидатьЗавершениеОбновленияДанныхСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрыватьФормуБезусловно Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СохранитьЗаявку",      Ложь);
	ДополнительныеПараметры.Вставить("СохранитьОрганизацию", Ложь);
	ДополнительныеПараметры.Вставить("СохранитьФизЛицо",     Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Организация)
		И НЕ Модифицированность Тогда
		// Если создали новый документ и в нем все сразу заполнилось из базы так, 
		// что не потребовалось ничего изменять, то форма останется немодифицированной.
		// В этом случае все равно спросим, хотят ли сохранить заявку.
		ТекстВопроса = НСтр("ru = 'Сохранить заявку?'");
		ДополнительныеПараметры.СохранитьЗаявку = Истина;
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ЗакрыватьФормуБезусловно = Ложь;

		Если ДополнительныеПараметры.СохранитьЗаявку Тогда
			// При записи заявки сохраняются и изменения в организации и физлице.
			Если ПроверитьИЗаписать() Тогда
				ЗакрыватьФормуБезусловно = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗакрыватьФормуБезусловно Тогда
			Закрыть();
		КонецЕсли;

	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗакрыватьФормуБезусловно = Истина;
		Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// При закрытии формы явно снимаем все блокировки на реквизиты формы, которые могли быть установлены.
	РазблокироватьДанныеДляРедактированияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_Организации"
		И Источник = Объект.Организация Тогда
		
		// Обновим данные организации на форме.
		// Вызываем не сразу, а через обработчик ожидания, чтобы не тормозить запись самой организации.
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьДанныеОрганизации", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ГражданствоФизЛица"	
		И Источник = ФизическоеЛицо.Ссылка Тогда
		
		// Обновим гражданство физического лица на форме.
		ПодключитьОбработчикОжидания("Подключаемый_ПеречитатьГражданствоФизЛица", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
         МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
         МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.Валюты.Очистить();
	
	Для каждого ЭлементСписка Из Валюты Цикл
		
		НоваяСтрока = ТекущийОбъект.Валюты.Добавить();
		НоваяСтрока.Валюта = ЭлементСписка.Значение;
	
	КонецЦикла;
	
	// Если заявка меняется, то считаем, что ее отправляем "сегодня".
	ТекущийОбъект.Дата = ТекущаяДатаСеанса();
	
	ЗаписатьВыбранныеБанки(ТекущийОбъект);
	
	ЗаписатьИзмененияДанныхОрганизации();
	
	ЗаписатьИзмененияДанныхФизЛица();
	
	ЗаписатьДополнительныеПоказатели(ТекущийОбъект);
	
	Если ПараметрыЗаписи.Свойство("СинхронизироватьПрисоединенныеФайлы") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьПрисоединенныеФайлы", ПараметрыЗаписи.СинхронизироватьПрисоединенныеФайлы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьФункциональныеОпцииФормы();
	
	СохранитьТекущийШагПомощника();
	
	// После записи может измениться дата, поэтому обновим заголовок.
	УправлениеФормой();	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновленоСостояниеЗаявкиНаОткрытиеСчета");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьИзменениеШага(НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Навигация

&НаКлиенте
Процедура Шаг1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг1");

КонецПроцедуры

&НаКлиенте
Процедура Шаг2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг2");

КонецПроцедуры

&НаКлиенте
Процедура Шаг3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзменениеШага("Шаг3");

КонецПроцедуры

#КонецОбласти

#Область СтраницаНачало

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОрганизациюНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ОднаОрганизацияНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПредставлениеИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель) Тогда
		ОткрытьФормуГражданстваФизЛица();
	ИначеЕсли ЗначениеЗаполнено(Организация.Ссылка) Тогда
		// Организация-ИП есть, а физлица-ИП нет.
		// Выведем сообщение про нарушение связи между справочниками Организация и ФизическиеЛица.
		ПроверитьЗаполнениеСтраницы("Начало");
	Иначе
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект.Организация");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияИППриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФизическогоЛица();

	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;

	Организация.НаименованиеОКОПФ = НаименованиеОКОПФ(Организация.КодОКОПФ);
	
	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("КодОКОПФНачалоВыбораЗавершение", ЭтотОбъект);

	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКОПФ",
		"КодОКОПФ",
		"НаименованиеОКОПФ",
		ЭтотОбъект,
		Организация,
		СтандартнаяОбработка,
		ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОКОПФПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)

	Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииФормыДляОтчетностиКлиентСервер.ИзменениеКодаОКВЭД2(ЭтотОбъект, Организация);

	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОКВЭД2ПриИзменении(Элемент)
	ПриИзмененииРеквизитаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработчикВыбора = Новый ОписаниеОповещения("КодОКВЭД2НачалоВыбораЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКВЭД2",
		"КодОКВЭД2",
		"НаименованиеОКВЭД2",
		ЭтотОбъект,
		Организация,
		СтандартнаяОбработка,
		ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОрганизацииФормыДляОтчетностиКлиентСервер.УстановитьВидимостьПодсказкиОКВЭД2(ЭтотОбъект);

	ПриИзмененииРеквизитаОрганизации();

	// При изменении в ключевых реквизитах клиента необходимо обновить список подходящих банков.
	БанкиИнициализированы = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОрганизации();

КонецПроцедуры

#КонецОбласти

#Область Банки

&НаКлиенте
Процедура ОрганизацияБанкиПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ВсеОбязательныеРеквизитыЗаполнены = ИзменитьОрганизациюНаСервере();
	
	Если ВсеОбязательныеРеквизитыЗаполнены Тогда
	
		ОбновитьДоступныеБанкиНаКлиенте();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоБанковскимСчетамОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	ПараметрыОтчета = Новый Структура;   
	ПараметрыОтчета.Вставить("Организация",            Объект.Организация);     
	ПараметрыОтчета.Вставить("НачалоПериода",          НачалоМесяца(ДобавитьМесяц(Объект.Дата, -12)));
	ПараметрыОтчета.Вставить("КонецПериода",           КонецМесяца(ДобавитьМесяц(Объект.Дата, -1)));	
	
	ПараметрыФормы = Новый Структура("ПараметрыОтчета, СформироватьПриОткрытии", ПараметрыОтчета, Истина);
	
	ОткрытьФорму("Отчет.ОтчетПоБанковскимОперациям.Форма.ФормаОтчета", ПараметрыФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСчетаПриИзменении(Элемент)
	
	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОтмеченныеВалюты	= Валюты;
	ОбщийСписокВалют	= ПолучитьСписокВсехВалют(Валюты, ВалютаРубль);
	
	ЗаголовокФормыСФлажками = НСтр("ru = 'Валюты'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", ОтмеченныеВалюты);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", ОбщийСписокВалют);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ПараметрыФормы.Вставить("Представление", ЗаголовокФормыСФлажками);
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Контекст = Новый Структура();
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВалюты", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВалюты(СписокРезультата, Контекст) Экспорт
	
	Если ТипЗнч(СписокРезультата) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютыДокумента = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокРезультата);
	
	Если ВалютыДокумента.Количество() = 0 Тогда
		ВалютыДокумента.Добавить(ВалютаРубль);
	КонецЕсли;
	
	Валюты.ЗагрузитьЗначения(ВалютыДокумента);
	ВалютыПредставление = "" + Валюты; 
	
	Модифицированность = Истина;
	
	ОбновитьДоступныеБанкиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентНаОстатокПриИзменении(Элемент)
	
	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПодписаниеВ1СДиректБанкПриИзменении(Элемент)
	
	ОбновитьДоступныеБанкиНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеБанки(Команда)

	ИзменитьОтметкиБанков(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуУВсехБанков(Команда)

	ИзменитьОтметкиБанков(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДоступныйБанкОтметкаПриИзменении(Элемент)
	
	// Запомним, если пользователь снял отметку с банка, чтобы в следующий раз не предлагать.
	НомерГруппы = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(Элемент.Имя));
	НоваяОтметкаБанка = ЭтотОбъект[Элемент.Имя];
	ЗапомнитьЧтоПользовательИзменилОтметкуБанка(НомерГруппы, НоваяОтметкаБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТарифовДоступныйБанкНажатие(Элемент)
	
	НомерГруппы = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(Элемент.Имя));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НомерГруппы",			НомерГруппы);
	ПараметрыФормы.Вставить("БанкиАдресХранилища",	БанкиАдресХранилища);
	
	ОбработкаВыбораПункта = Новый ОписаниеОповещения("ОбработкаВыбораПункта", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.Форма.ПодробноОТарифах", ПараметрыФормы, ЭтотОбъект, Ложь,,, ОбработкаВыбораПункта);
	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПункта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НайденныеСтроки = ИзображенныеБанковскиеПродукты.НайтиСтроки(Новый Структура("Банк", Результат.Банк));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ИзображенныйБанковскийПродукт = НайденныеСтроки[0];
			
			ИзображенныйБанковскийПродукт.ИдентификаторПродукта	= Результат.ИдентификаторПродукта;
			ИзображенныйБанковскийПродукт.БанкДоступен 			= Истина;
			ИзображенныйБанковскийПродукт.СтопФакторыПройдены	= Истина;
			ИзображенныйБанковскийПродукт.ИндексСведений		= Результат.ИндексСведений;
			
			ИзображенныйБанковскийПродукт.Отметка = Истина;
		    ЗапомнитьЧтоПользовательИзменилОтметкуБанка(Результат.НомерГруппы, Истина);

			ОбновитьПредставлениеПункта(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПункта(Параметры);
	
	СведенияОБанках = ПолучитьИзВременногоХранилища(БанкиАдресХранилища);
	
	СтрокиБанка = СведенияОБанках.НайтиСтроки(Новый Структура("Банк", Параметры.Банк));
	
	Для каждого СтрокаБанка Из СтрокиБанка Цикл
	
		Если СтрокаБанка.ИдентификаторПродукта = Параметры.ИдентификаторПродукта Тогда
			СтрокаВыбранногоПродукта = СтрокаБанка;	
		Иначе
			СтрокаБанка.НомерГруппы = 0;
		КонецЕсли;	
	
	КонецЦикла;
	
	ОтметкаБанка = Истина;
	НомерГруппы = Параметры.НомерГруппы;
	
	СтрокаВыбранногоПродукта.НомерГруппы = НомерГруппы; // Запоминаем номер группы, в которой выведен банк.
	СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
	
	// Флажок
	ЭтотОбъект["ДоступныйБанкОтметка" + СуффиксГруппы] = ОтметкаБанка;
	
	// Наименование продукта
	НаименованиеПродукта = Элементы["НаименованиеПродуктаДоступныйБанк" + СуффиксГруппы];
	НаименованиеПродукта.Заголовок = СтрокаВыбранногоПродукта.НаименованиеПродукта;
	НаименованиеПродукта.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.НаименованиеПродукта);
	
	// Описание краткое и подробное
	КраткоеОписание = Элементы["КраткоеОписаниеДоступныйБанк" + СуффиксГруппы];
	КраткоеОписание.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрокаВыбранногоПродукта.КраткоеОписание);
	КраткоеОписание.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.КраткоеОписание);
	
	ПодробныеУсловия = Элементы["ПодробныеУсловияДоступныйБанк" + СуффиксГруппы];
	ПодробныеУсловия.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрокаВыбранногоПродукта.ПодробноеОписание);
	ПодробныеУсловия.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.ПодробноеОписание);
	
	ПоместитьВоВременноеХранилище(СведенияОБанках, БанкиАдресХранилища);
	
КонецПроцедуры
		
#КонецОбласти

#Область РеквизитыКлиента

#Область Общие

&НаКлиенте
Процедура НадписьСогласиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ ПроверитьИЗаписать() Тогда
		Возврат;
	КонецЕсли;

	ОбъектыСогласия = Новый Массив;
	Для каждого Банк Из Объект.Банки Цикл
		ОбъектСогласия = Новый Структура;
		ОбъектСогласия.Вставить("Банк", Банк.Банк);
		ОбъектСогласия.Вставить("ИдентификаторПродукта", Банк.ИдентификаторПродукта);
		ОбъектыСогласия.Добавить(ОбъектСогласия);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сервис",            ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета"));
	ПараметрыФормы.Вставить("ПараметрыСогласия", ПараметрыСогласия(Объект.Ссылка));
	ПараметрыФормы.Вставить("ОбъектыСогласия",   ОбъектыСогласия);
	
	ОткрытьФорму("ОбщаяФорма.СогласиеНаОбработкуДанныхСервисыОбменаСБанками", ПараметрыФормы, ЭтотОбъект, ОбъектыСогласия[0]);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСогласия(Знач Заявка) Экспорт
	
	Возврат Документы.ЗаявкаНаОткрытиеСчета.ПараметрыСогласия(Заявка);
	
КонецФункции

&НаКлиенте
Процедура СохранитьФайлыНаДиск(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ЗаявкаГотоваКСохранению = ПроверитьИЗаписать();
	Иначе
		ЗаявкаГотоваКСохранению = ПроверитьЗаполнениеСтраницы("");
	КонецЕсли;
	
	Если НЕ ЗаявкаГотоваКСохранению Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьАрхивДляСохранения();
	
КонецПроцедуры

#КонецОбласти

#Область КонтактноеЛицо

&НаКлиенте
Процедура КонтактноеЛицоПоЗаявкеПриИзменении(Элемент)

	КонтактноеЛицоПоЗаявкеПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ЗначениеРеквизитаКонтактноеЛицоПоЗаявке();
	ЗаполнитьДанныеКонтактногоЛица();

КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица");
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, Объект.ТелефонКонтактногоЛицаПодробно, Объект.ТелефонКонтактногоЛица);
	
	ПараметрыОповещения = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораКИ", ЭтотОбъект, ПараметрыОповещения);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораКИ(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(РезультатОткрытияФормы) <> Тип("Структура") Тогда
		// не было изменений в данных
		Возврат;
	КонецЕсли;
	
	Объект.ТелефонКонтактногоЛицаПодробно = РезультатОткрытияФормы.Значение;
	Объект.ТелефонКонтактногоЛица = РезультатОткрытияФормы.Представление;
	
	КомментарийКТелефону = РезультатОткрытияФормы.Комментарий;
	
	Элементы.ТелефонКонтактногоЛицаИП.РасширеннаяПодсказка.Заголовок = КомментарийКТелефону;
	Элементы.ТелефонКонтактногоЛицаЮЛ.РасширеннаяПодсказка.Заголовок = КомментарийКТелефону;
	
	JSONИзСтроки = ПреобразоватьТелефонИзСтрокиВJSON(Объект.ТелефонКонтактногоЛица, КомментарийКТелефону);
    ОбновитьТекстОшибкиНомераТелефона(ЭтотОбъект, Не ЗначениеЗаполнено(JSONИзСтроки));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаИПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТелефонКонтактногоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаЮЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТелефонКонтактногоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаПриИзменении()
	
	JSONИзСтроки = ПреобразоватьТелефонИзСтрокиВJSON(Объект.ТелефонКонтактногоЛица, КомментарийКТелефону);
    ОбновитьТекстОшибкиНомераТелефона(ЭтотОбъект, Не ЗначениеЗаполнено(JSONИзСтроки));

	Объект.ТелефонКонтактногоЛицаПодробно = JSONИзСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаИППриИзменении(Элемент)
	
	ТелефонКонтактногоЛицаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтактногоЛицаЮЛПриИзменении(Элемент)
	
	ТелефонКонтактногоЛицаПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДалееВыборБанков(Команда)
	
	НачатьЗамерВремениПодборБанков();

	ДалееВыборБанковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееПодтверждениеОтправки(Команда)

	СтатистикаПоБанкам = СтатистикаПоБанкам();
	
	Если СтатистикаПоБанкам.КоличествоДоступных = 0 Тогда
		ПоказатьПредупреждение(, Элементы.НадписьПредложенияБанковНеНайдены.Заголовок);
		Возврат;
	КонецЕсли;
	
	Если СтатистикаПоБанкам.КоличествоОтмеченных = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите партнеров сервиса, которым хотите отправить заявку'"));
		Возврат;
	КонецЕсли;
	
	ДалееПодтверждениеОтправкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НазадНачало(Команда)

	НазадНачалоНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НазадВыборБанков(Команда)

	УстановитьВидимостьСтраницыБанки();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявку(Команда)
	
	Если НЕ ПроверитьИЗаписать() Тогда
		Возврат;
	КонецЕсли;

	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");

	СведенияОСервисе = ЗаявкиНаОткрытиеСчетаВызовСервера.СведенияОСервисе(СервисОбменаСБанками);
	
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("Отправить_ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);	
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	Иначе
		ПроверитьЗавершениеДлительнойОперацииПередОтправкой()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить_ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявок необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПроверитьЗавершениеДлительнойОперацииПередОтправкой();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперацииПередОтправкой() Экспорт
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено Тогда
		Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаКлиентИП
			И Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаКлиентЮЛ Тогда
			УстановитьВидимостьСтраницыРеквизитыКлиента();
		КонецЕсли;
		НачатьОтправку();
	Иначе                                   
		ТекстПоясненияОжидания = НСтр("ru = 'Проверка информации'");
		УстановитьВидимостьСтраницыОжидания();
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеДлительнойОперацииПередОтправкой", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДопустимаОтправка(ПараметрыПроверки) 

	ТелефонТолькоЦифры = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" +()-", 
		СокрЛП(ПараметрыПроверки.Телефон), "");
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТелефонТолькоЦифры) ИЛИ СтрДлина(ТелефонТолькоЦифры) <> 11 Тогда
		
		ПараметрыПроверки.Результат = Ложь;
		ПараметрыПроверки.ОписаниеОшибки = НСтр("ru = 'Некорректно заполнен телефон контактного лица'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заявка_Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаОткрытиеСчета КАК Заявка_Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
		|		ПО Заявка_Документ.Ссылка = СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета
		|ГДЕ
		|	СостояниеЗаявокНаОткрытиеСчета.Состояние В(&СписокСостояний)
		|	И СостояниеЗаявокНаОткрытиеСчета.Организация = &Организация
		|	И СостояниеЗаявокНаОткрытиеСчета.ДатаИзменения МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета <> &Ссылка";
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено);
	СписокСостояний.Добавить(Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения);
	СписокСостояний.Добавить(Перечисления.СостоянияЗаявокНаОткрытиеСчета.НеОтправлено);
	
	Запрос.УстановитьПараметр("Дата", ПараметрыПроверки.Дата);
	Запрос.УстановитьПараметр("Организация", ПараметрыПроверки.Организация);
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПроверки.Ссылка);
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	КоличествоЗаявокПоОрганизации = ВыборкаДетальныеЗаписи.Количество();
	
	Если КоличествоЗаявокПоОрганизации >= 3 Тогда
		
		КоличествоЗаявокПоОрганизацииСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';отправлена %1 заявка;;отправлено %1 заявки;отправлено %1 заявок;отправлено %1 заявки'"),
			КоличествоЗаявокПоОрганизации,,"ЧН=0");

		ПараметрыПроверки.Результат = Ложь;
		ПараметрыПроверки.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Сегодня %1 от организации %2. 
			|Дождитесь ответа от банка или повторите отправку завтра.'"),
			КоличествоЗаявокПоОрганизацииСтрока,
			ПараметрыПроверки.Организация);
		Возврат Ложь;
	
	КонецЕсли;

	ПараметрыПроверки.Результат = Истина;
	ПараметрыПроверки.ОписаниеОшибки = "";
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура НачатьОтправку()

	Если ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		// Если в обновление данных сервиса завершилось неуспешно, то отправлять заявку не нужно.
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиОтправкиТелефона = Новый Структура;
	ПараметрыПроверкиОтправкиТелефона.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПроверкиОтправкиТелефона.Вставить("Организация", Объект.Организация);
	ПараметрыПроверкиОтправкиТелефона.Вставить("Дата", Объект.Дата);
	ПараметрыПроверкиОтправкиТелефона.Вставить("Телефон", Объект.ТелефонКонтактногоЛица);
	ПараметрыПроверкиОтправкиТелефона.Вставить("ОписаниеОшибки", "");
	ПараметрыПроверкиОтправкиТелефона.Вставить("Результат", Ложь);
	
	Если Не ДопустимаОтправка(ПараметрыПроверкиОтправкиТелефона) Тогда
			
		ПоказатьПредупреждение(, ПараметрыПроверкиОтправкиТелефона.ОписаниеОшибки);
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьВыбранныеБанки() Тогда
		ПоказатьПредупреждениеОбИзмененииУсловийБанков();
		Возврат;
	КонецЕсли;

	Банки = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.Банки Цикл
		ОписаниеБанка = Новый Структура;
		ОписаниеБанка.Вставить("Банк", СтрокаТаблицы.Банк);
		ОписаниеБанка.Вставить("ИдентификаторПродукта", СтрокаТаблицы.ИдентификаторПродукта);
		Банки.Добавить(ОписаниеБанка);
	КонецЦикла;
	
	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");
	
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(СервисОбменаСБанками);
	
	ПараметрыОтправки = ЗаявкиНаОткрытиеСчетаКлиент.ПараметрыОтправкиБезПодписания(СервисОбменаСБанками);
	ПараметрыОтправки.ЗаявкаНаОткрытиеСчета = Объект.Ссылка;
	ПараметрыОтправки.Организация    = Объект.Организация;
	ПараметрыОтправки.Банки          = Банки;
	ПараметрыОтправки.ТипТранзакции  = ТипыТранзакций.Заявка;
	ПараметрыОтправки.ПредставленияДополнительныхФайлов = ПредставленияДополнительныхФайлов();
	
	// Параметры, которые доступны только в клиентском контексте.
	ПараметрыОтправки.ПараметрыНаКлиенте.ВладелецФормы = ЭтотОбъект;
	ПараметрыОтправки.ПараметрыНаКлиенте.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОтправитьЗавершение", ЭтотОбъект);
	
	ЗаявкиНаОткрытиеСчетаКлиент.ОткрытьФормуОтправки(ПараметрыОтправки);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Выполнено = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Выполнено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Выполнено", Ложь);
	КонецЕсли;
	
	Если НЕ Выполнено Тогда
		Возврат;
	КонецЕсли;

	// При успешной отправке оповестим форму списка.
	КлючЗаявки = Новый Структура;
	КлючЗаявки.Вставить("Организация",    Объект.Организация);
	КлючЗаявки.Вставить("ЗаявкаНаОткрытиеСчета", Объект.Ссылка);
	КлючЗаявки.Вставить("Банк",           Объект.Банки[0].Банк);
	Оповестить("ОбновленоСостояниеЗаявкиНаОткрытиеСчета", КлючЗаявки);
	
	// Запустим автоматическую проверку входящих сообщений от банков.
	ЗаявкиНаОткрытиеСчетаКлиент.ПерезапуститьПроверкуСообщенийОтБанков();
	
	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");

	// Сообщим пользователю о том, что успешно отправлена.
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Заявка успешно отправлена.'"));
	Подстроки.Добавить(НСтр("ru = 'Обычно партнеры сервиса рассматривают заявки за один рабочий день.'"));
	Подстроки.Добавить(СтрШаблон(НСтр("ru = 'Просмотр статуса заявки: меню %1'"), ЗаявкиНаОткрытиеСчетаВызовСервера.ПутьВИнтерфейсеКСпискуЗаявок()));
	
	ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокЗаявокПослеУспешнойОтправки", ЭтотОбъект, КлючЗаявки);
	
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаявокПослеУспешнойОтправки(КлючЗаявки) Экспорт

	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СервисОбменаСБанками", СервисОбменаСБанками);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ЗаявкиНаОткрытиеСчетаВызовСервера.КлючЗаписиСостоянияЗаявки(КлючЗаявки));

	ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.СостояниеЗаявокНаОткрытиеСчета", ПараметрыОткрытия);
	Закрыть();

КонецПроцедуры

&НаСервере
Функция ПроверитьВыбранныеБанки()
	
	Если Объект.Банки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	СведенияОБанках = СведенияОБанках();
	
	Для каждого ВыбранныйБанк Из Объект.Банки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Банк", ВыбранныйБанк.Банк);
		Отбор.Вставить("ИдентификаторПродукта", ВыбранныйБанк.ИдентификаторПродукта);
		
		НайденныеФинансовыеПродукты = СведенияОБанках.НайтиСтроки(Отбор);
		
		Если НайденныеФинансовыеПродукты.Количество() = 0 Тогда
			// Выбранный банк не найден среди банков в сервисе.
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого ФинансовыйПродукт Из НайденныеФинансовыеПродукты Цикл
			Если НЕ БанкДоступен(ФинансовыйПродукт) Тогда
				// Условия банка изменились и не соответствуют заявке.
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзмененииУсловийБанков()
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		// Если возника ошибка обновления данных сервиса, то не показываем сообщения про изменение условий банков,
		// т.к. и те условия, которые сейчас загружены в базу могут быть неактуальны, 
		// когда соединение с сервером восстановится, тогда проверим условия еще раз.
		Возврат;
	КонецЕсли;

	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Условия изменились.'"));
	Подстроки.Добавить(НСтр("ru = 'Перед отправкой необходимо проверить список выбранных партнеров сервиса.'"));
	ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиНаСтраницуБанки", ЭтотОбъект);
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуБанки(ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьСтраницыБанки();
	
КонецПроцедуры

// Сохраняет в архив и передает на клиент файлы, прикладываемые к заявке.
//
&НаКлиенте
Процедура ПодготовитьАрхивДляСохранения()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПодготовкуАрхиваДляСохранения(Объект.Ссылка, ПредставленияДополнительныхФайлов(), УникальныйИдентификатор);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовитьАрхивДляСохраненияЗавершение", ЭтотОбъект);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьАрхивДляСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда // остается только закрыть форму
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Выполнено") // прямой вызов обработчика
	 Или Не Результат.Свойство("Статус") Тогда // это не результат вызова фонового задания из БСП
		Возврат;
	КонецЕсли;
	   
	Если Результат.Статус <> "Выполнено"
	 Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		Если Результат.Статус <> "Ошибка" Или ПустаяСтрока(Результат.ПодробноеПредставлениеОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(Результат.ПодробноеПредставлениеОшибки, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	АдресАрхива = Результат.АдресДополнительногоРезультата;
	
	// Передаем результат отправки из фонового задания.
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Или Не Результат.Свойство("Выполнено") Тогда
		Возврат;
	КонецЕсли;

	Если Не Результат.Выполнено Тогда
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			// отмена создания архива
		Иначе
			ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(Результат.ОписаниеОшибки, ЭтотОбъект);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить("ACCAPP_");
	
	ЧастиИмениФайла.Добавить(Формат(Объект.Дата, "ДФ=ггММдд"));
	ЧастиИмениФайла.Добавить(".zip");
	
	ПолучитьФайл(АдресАрхива, СтрСоединить(ЧастиИмениФайла), Истина);	
	
КонецПроцедуры

// Запускает фоновое задание, которое сохраняет в архив для передачи на клиент файлы, прикладываемые к заявке.
//
// Параметры:
//  ЗаявкаНаОткрытиеСчета - ДокументСсылка.ЗаявкаНаОткрытиеСчета - заявка, по которой формируются файлы.
//  ПредставленияДополнительныхФайлов - СписокЗначений - как названы на форме дополнительные файлы.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - форма, откуда вызвано фоновое задание.
//
// Возвращаемое значение:
//   ДлительнаяОперация - Структура - см. ДлительныеОперации.ВыполнитьВФоне() . 
//
&НаСервереБезКонтекста
Функция НачатьПодготовкуАрхиваДляСохранения(ЗаявкаНаОткрытиеСчета, ПредставленияДополнительныхФайлов, УникальныйИдентификаторФормы)
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка файлов заявки'");
	ИмяПроцедурыФоновогоЗадания = "Документы.ЗаявкаНаОткрытиеСчета.ПодготовитьФайлыДляСохранения";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПредметОбмена", ЗаявкаНаОткрытиеСчета);
	ПараметрыПроцедуры.Вставить("ПредставленияДополнительныхФайлов", ПредставленияДополнительныхФайлов);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		ИмяПроцедурыФоновогоЗадания,
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСписокЗаявок(Команда)
	
	КлючЗаявки = Новый Структура;
	КлючЗаявки.Вставить("Организация",    Объект.Организация);
	КлючЗаявки.Вставить("ЗаявкаНаОткрытиеСчета", Объект.Ссылка);
	
	Если ТолькоПросмотр ИЛИ Объект.Банки.Количество() = 1 Тогда
		КлючЗаявки.Вставить("Банк", Объект.Банки[0].Банк);
	Иначе
		КлючЗаявки.Вставить("Банк", Неопределено);
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ЗаявкиНаОткрытиеСчетаВызовСервера.КлючЗаписиСостоянияЗаявки(КлючЗаявки));

	ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.СостояниеЗаявокНаОткрытиеСчета", ПараметрыОткрытия);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)

	Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;

	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)

	Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;

    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию(Результат)

	// Перед вызовом стандартных процедур БСП проверим необходимость блокировки владельца-контактной информации.
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ИмяРеквизита")  Тогда
		
		Если НЕ ЗаблокироватьВладельцаКонтактнойИнформации(Результат.ИмяРеквизита) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Подключаемый_ОбновитьКонтактнуюИнформациюНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформациюНаСервере(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ДанныеОрганизации

&НаСервере
Функция ИзменитьОрганизациюНаСервере()
	
	Документы.ЗаявкаНаОткрытиеСчета.ЗаполнитьПоУмолчанию(Объект);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Объект.Организация, Объект.Дата);
	
	ПрочитатьОсновныеДанныеОрганизации();

	ЗначениеРеквизитаКонтактноеЛицоПоЗаявке();
	
	ВсеОбязательныеРеквизитыЗаполнены = УстановитьСвойстваРеквизитовНачало();
	
	Если Не ВсеОбязательныеРеквизитыЗаполнены Тогда
	
		УстановитьВидимостьСтраницыНачало();
		
	Иначе
		
		УправлениеФормой();
		
	КонецЕсли;
	
	Возврат ВсеОбязательныеРеквизитыЗаполнены;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновныеДанныеОрганизации(ОчищатьЗакэшированныеДанные = Истина)
	// Синхронизируем реквизит формы для единственной организации в базе с данными объекта.
	ОднаОрганизация = Объект.Организация;

	// Запомним организацию, по которой считали данные.
	ОрганизацияДоИзменения = Объект.Организация;

	// Очистим все закэшированные данные по организации.
	Если ОчищатьЗакэшированныеДанные Тогда
		ОчиститьЗакэшированныеДанные();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
	    Возврат;
	КонецЕсли;
	
	// Загружаем информацию по организации из базы.
	ЗначениеВРеквизитФормы(Объект.Организация.ПолучитьОбъект(), "Организация");
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПрочитатьОсновныеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	ПроверитьИНН(ЭтотОбъект);
	
	// Юридический адрес организации / адрес места жительства ИП.
	ДанныеЮрАдресаОрганизации = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Объект.Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Объект.Дата);
	
	Если ЗначениеЗаполнено(ДанныеЮрАдресаОрганизации.Представление) Тогда
		КонтактнаяИнформацияПолеЮрАдресОрганизации = ДанныеЮрАдресаОрганизации.Представление;
	Иначе
		// Редактирование юр.адреса организации в заявке не поддерживаем,
		// т.к. при его изменении может потребоваться перерегистрация в гос.органах.
		// Это обслуживает форме самого справочника Организации.
		// В заявке просто показываем факт незаполненного адреса.
		КонтактнаяИнформацияПолеЮрАдресОрганизации = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки();
	КонецЕсли;
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда	
		
		ПрочитатьРеквизитыИП();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОТелефоне()
	
	СведенияОТелефоне = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Объект.ТелефонКонтактногоЛицаПодробно);

	КомментарийКТелефону = СведенияОТелефоне.Комментарий;
	
	Элементы.ТелефонКонтактногоЛицаИП.РасширеннаяПодсказка.Заголовок = КомментарийКТелефону;
	Элементы.ТелефонКонтактногоЛицаЮЛ.РасширеннаяПодсказка.Заголовок = КомментарийКТелефону;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗакэшированныеДанные()

	РазблокироватьОрганизацию();

	// Заполняем поля пустыми значениями.
	Если Не Организация.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗначениеВРеквизитФормы(Справочники.Организации.СоздатьЭлемент(), "Организация");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	НаименованиеСокращенноеДоИзменения          = "";
	КонтактнаяИнформацияПолеЮрАдресОрганизации  = "";
	СистемаНалогообложенияПредставление         = "";
	КонтактнаяИнформацияОрганизацииПрочитана    = Ложь;
	БанкиИнициализированы                       = Ложь;
	
	// Также очистим кэши для физлица (ИП или руководителя)
	ОчиститьЗакэшированныеДанныеФизЛица();

	// Инициализируем служебные реквизиты организации.
	НастроитьСлужебныеРеквизитыОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьДанныеОрганизации()
	ИзменитьОрганизациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастроитьСлужебныеРеквизитыОрганизации()

	// Содержит признаки изменения данных, относящихся к организации.
	ИзменениеДанныхОрганизации = Новый Структура();
	ИзменениеДанныхОрганизации.Вставить("ОрганизацияЗаблокирована",     Ложь); // Признак блокировки ссылки организации.
	ИзменениеДанныхОрганизации.Вставить("ОрганизацияМодифицированность",Ложь); // Признак изменении в реквизите Организация.

КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииРеквизитаОрганизации()

	Если ЗаблокироватьОрганизацию() Тогда
		ИзменениеДанныхОрганизации.ОрганизацияМодифицированность = Истина;
	КонецЕсли;
	
	Возврат ИзменениеДанныхОрганизации.ОрганизацияМодифицированность;

КонецФункции

&НаКлиенте
Функция ЗаблокироватьОрганизацию()
	
	Если НЕ ТребуетсяБлокировкаОрганизации(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаблокироватьОрганизациюНаСервере() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Сообщим, что не получилось заблокировать.
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Организация ""%1"" уже заблокирована. Возможно, уже открыта форма с реквизитами организации или ее реквизиты редактируются другим пользователем.'"),
		Организация.Наименование);

	ПоказатьПредупреждение(, ТекстСообщения);
	
	// Перечитаем данные организации заново.
	ИзменитьОрганизациюНаСервере();
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяБлокировкаОрганизации(Форма)

	Если Форма.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована Тогда
		// Ранее уже было вызвана блокировка.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация.Ссылка) Тогда
		// Пустую организацию не блокируем.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаблокироватьОрганизациюНаСервере()

	Если НЕ ТребуетсяБлокировкаОрганизации(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;

	Успешно = Истина;

	Попытка
		ЗаблокироватьДанныеДляРедактирования(Организация.Ссылка, Организация.ВерсияДанных, УникальныйИдентификатор);
		ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована = Истина;
	Исключение
		// Запись в журнал регистрации не требуется.
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

&НаСервере
Процедура РазблокироватьОрганизацию()

	Если ЗначениеЗаполнено(Организация.Ссылка) И ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована Тогда
		// Снимем блокировку с ранее выбранной организации.
		РазблокироватьДанныеДляРедактирования(Организация.Ссылка, УникальныйИдентификатор);
		ИзменениеДанныхОрганизации.ОрганизацияЗаблокирована = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияДанныхОрганизации()

	ЗаписатьОрганизацию();

	// Снимаем блокировку после записи всех данных по организации.
	РазблокироватьОрганизацию();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОрганизацию()

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ИзменениеДанныхОрганизации.ОрганизацияМодифицированность Тогда
		Возврат;
	КонецЕсли;

	// Изменены данные самой организации.
	ОрганизацияОбъект = РеквизитФормыВЗначение("Организация");
	
	Если КонтактнаяИнформацияОрганизацииПрочитана Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ОрганизацияОбъект);
	КонецЕсли;
	
	ОрганизацияОбъект.Записать();
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");

	// Снимаем признак изменения.
	ИзменениеДанныхОрганизации.ОрганизацияМодифицированность = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеОКОПФ(Знач КодОКОПФ)

	Возврат РегистрыСведений.КлассификаторОКОПФ.НаименованиеПоКоду(КодОКОПФ);

КонецФункции

&НаСервере
Функция УстановитьСвойстваРеквизитовНачало()
	
	ИнициализироватьБанки();
	
	ОбязательнаДатаРождения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "ДатаРождения", Ложь);
	ОбязательнаДатаРегистрации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "ДатаРегистрации", Ложь);
	ОбязательноГражданствоФизЛица = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "ГражданствоФизЛица", Ложь);
	ОбязателенАдрес = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "Адрес", Ложь);
	ОбязателенКодОКОПФ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "КодОКОПФ", Ложь);
	ОбязателенКодОКВЭД2 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "КодОКВЭД2", Ложь);
	ОбязательноНаименованиеОКОПФ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "НаименованиеОКОПФ", Ложь);
	ОбязательноНаименованиеОКВЭД2 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОбязательныеРеквизитыОрганизации, "НаименованиеОКВЭД2", Ложь);
	
	// Юридический адрес или адрес места жительства ИП
	АдресПустой = (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресОрганизации)
		ИЛИ КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
		ИЛИ КонтактнаяИнформацияПолеЮрАдресОрганизации = УниверсальныйОбменСБанкамиФормыКлиентСервер.ТекстПустогоЮрАдресаВВидеГиперссылки());
	
	ЭтоФизЛицо = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	ВидимостьАдреса = ОбязателенАдрес
		И ЗначениеЗаполнено(Объект.Организация)
		И АдресПустой;
	
	Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость = ВидимостьАдреса;
	
	Если ЭтоФизЛицо Тогда
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок = НСтр("ru = 'Адрес места жительства'");
	Иначе
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок = НСтр("ru = 'Юридический адрес'");
	КонецЕсли;
	
	ОрганизацииФормыКлиентСервер.НастроитьСвойстваЭлементаДатаРегистрации(
		Элементы.ДатаРегистрации, ЭтоФизЛицо);
	
	Если НЕ АдресПустой Тогда
		ЮридическийАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Объект.Дата);
	КонецЕсли;	
	
	// Сведения о гражданстве физлица-ИП в регистре могут быть не заполнены.
	// В этом случае по общему правилу БЗК считается, что физлицо-гражданин РФ.
	// Но, возможно, что для физлица-ИП пользователи просто не заполнили фактические сведения о гражданстве.
	// Чтобы передавать банкам достоверную информацию, покажем пользователю
	// подставленное по умолчанию значение (страна Россия), чтобы он подтвердил, что это правильно,
	// и при записи заявки явно запишем строку в регистр, чтобы в следующий раз не спрашивать пользователя.
	
	ГражданствоФизЛицаВидимость = ОбязательноГражданствоФизЛица
		И ЗначениеЗаполнено(Объект.Организация)
		И ЭтоФизЛицо
		И НЕ ГражданствоФизЛицаЗаполнено;
	Элементы.ГражданствоПредставлениеИП.Видимость = ГражданствоФизЛицаВидимость;
	
	ДатаРожденияВидимость = ОбязательнаДатаРождения
		И ЗначениеЗаполнено(Объект.Организация)
		И ЭтоФизЛицо
		И НЕ ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения);
	Элементы.ДатаРожденияИП.Видимость = ДатаРожденияВидимость;
	
	ДатаРегистрацииВидимость = ОбязательнаДатаРегистрации
		И ЗначениеЗаполнено(Объект.Организация)
		И НЕ ЗначениеЗаполнено(Организация.ДатаРегистрации);
	Элементы.ДатаРегистрации.Видимость = ДатаРегистрацииВидимость;
	
	КодОКОПФВидимость = ОбязателенКодОКОПФ 
		И ЗначениеЗаполнено(Объект.Организация)
		И (НЕ ЗначениеЗаполнено(Организация.КодОКОПФ)
			ИЛИ НЕ ЗначениеЗаполнено(Организация.НаименованиеОКОПФ));
	Элементы.ГруппаОКОПФ.Видимость = КодОКОПФВидимость; 
	
	КодОКВЭД2Видимость = ОбязателенКодОКВЭД2 
		И ЗначениеЗаполнено(Объект.Организация)
		И (НЕ ЗначениеЗаполнено(Организация.КодОКВЭД2)
			ИЛИ НЕ ЗначениеЗаполнено(Организация.НаименованиеОКВЭД2));
	Элементы.ГруппаОКВЭД2.Видимость = КодОКВЭД2Видимость; 
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = Элементы.ГражданствоПредставлениеИП.Видимость
		ИЛИ Элементы.ДатаРожденияИП.Видимость
		ИЛИ Элементы.ДатаРегистрации.Видимость
		ИЛИ Элементы.ГруппаОКОПФ.Видимость
		ИЛИ Элементы.ГруппаОКВЭД2.Видимость
		ИЛИ Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость;
	
	Если Элементы.ГражданствоПредставлениеИП.Видимость Тогда
		ТекущийЭлемент = Элементы.ГражданствоПредставлениеИП;
	ИначеЕсли Элементы.ДатаРожденияИП.Видимость Тогда
		ТекущийЭлемент = Элементы.ДатаРожденияИП;
	ИначеЕсли Элементы.ДатаРегистрации.Видимость Тогда
		ТекущийЭлемент = Элементы.ДатаРегистрации;
	ИначеЕсли Элементы.ГруппаОКОПФ.Видимость Тогда
		ТекущийЭлемент = Элементы.ГруппаОКОПФ;
	ИначеЕсли Элементы.ГруппаОКВЭД2.Видимость Тогда
		ТекущийЭлемент = Элементы.ГруппаОКВЭД2;
	ИначеЕсли Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Видимость Тогда
		ТекущийЭлемент = Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации;
	КонецЕсли;
	
	ВсеОбязательныеРеквизитыЗаполнены = ЗначениеЗаполнено(Объект.Организация) 
		И Не ВидимостьАдреса 
		И Не ДатаРожденияВидимость
		И Не ДатаРегистрацииВидимость 
		И Не ГражданствоФизЛицаВидимость 
		И Не КодОКОПФВидимость
		И Не КодОКВЭД2Видимость;
		
	Возврат ВсеОбязательныеРеквизитыЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОрганизации()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;

	// Сначала запишем организацию, если пользователь ее правил, и снимем с нее блокировку,
	// а потом откроем стандартную форму элемента, чтобы можно было редактировать в ней.
	ЗаписатьИзмененияДанныхОрганизации();
	
	Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		// Т.к. при изменении организации-ИП может быть изменено и связанное физлицо,
		// то запишем физлицо-ИП тоже.
		ЗаписатьИзмененияДанныхФизЛица();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Объект.Организация);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область ДанныеФизЛица

&НаСервере
Процедура ПрочитатьРеквизитыИП()

	ПрочитатьОсновныеДанныеФизЛица(Организация.ИндивидуальныйПредприниматель);

КонецПроцедуры

&НаСервере
Процедура ЗначениеРеквизитаКонтактноеЛицоПоЗаявке()

	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо)
		И (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
			ИЛИ	Объект.КонтактноеЛицо = Организация.ИндивидуальныйПредприниматель) Тогда
		КонтактноеЛицоПоЗаявке = "Руководитель";
	Иначе
		КонтактноеЛицоПоЗаявке = "ДругойСотрудник";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновныеДанныеФизЛица(ФизЛицо)

	Если ФизическоеЛицо.Ссылка = ФизЛицо Тогда
		// Данные объекта уже загружены ранее, ничего делать не требуется.
		Возврат;
	КонецЕсли;

	ОчиститьЗакэшированныеДанныеФизЛица();

	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ФизЛицо.ПолучитьОбъект(), "ФизическоеЛицо");
	
	Если Организация.ИндивидуальныйПредприниматель = ФизЛицо Тогда
		// Считаем сразу данные о гражданстве предпринимателя, чтобы показать их на первой странице.
		ПрочитатьГражданствоФизЛица(ФизЛицо);

	КонецЕсли;
	
	ПроверитьИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГражданствоФизЛица(ФизЛицо)

	Если ГражданствоФизическихЛиц.ФизическоеЛицо = ФизЛицо Тогда
		// Данные уже прочитаны ранее, повторно не требуется.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата",    Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГражданствоФизическихЛиц.Период,
	|	ГражданствоФизическихЛиц.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ГражданствоФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ГражданствоФизическихЛиц");
		ГражданствоФизЛицаЗаполнено = Истина;
	Иначе	
		// Заполним по умолчанию страну Россию и установим признак, что фактически гражданство не заполнено,
		// чтобы по нему запомнить, что это новая запись и ее надо будет записать в базу,
		// чтобы в следующий раз не требовать у пользователя подтверждения сведений о гражданстве.
		ГражданствоФизическихЛиц.ФизическоеЛицо = ФизЛицо;
		ГражданствоФизическихЛиц.Страна         = Справочники.СтраныМира.Россия;
		ГражданствоФизЛицаЗаполнено             = Ложь;
	КонецЕсли;

	СформироватьПредставлениеГражданстваФизЛица(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеГражданстваФизЛица(Форма)

	Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
		Форма.ГражданствоПредставление = Форма.ГражданствоФизическихЛиц.Страна;
	Иначе
		Форма.ГражданствоПредставление = НСтр("ru = 'Лицо без гражданства'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗакэшированныеДанныеФизЛица()

	РазблокироватьФизическоеЛицо();
	
	// Заполняем поля пустыми значениями.
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(),                           "ФизическоеЛицо");
	ЗначениеВРеквизитФормы(РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи(),     "ГражданствоФизическихЛиц");
	УстановитьПривилегированныйРежим(Ложь);

	ГражданствоПредставление      = Справочники.СтраныМира.Россия;
	ГражданствоФизЛицаЗаполнено   = Ложь;
	КонтактнаяИнформацияРуководителяПрочитана = Ложь;
	КонтактнаяИнформацияФизЛицаПрочитана = Ложь;
	КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	
	// Инициализируем служебные реквизиты физлица.
	НастроитьСлужебныеРеквизитыФизЛица();

КонецПроцедуры

&НаСервере
Процедура ПеречитатьГражданствоФизЛица()

	ФизЛицоСсылка = ФизическоеЛицо.Ссылка;
	
	ПрочитатьГражданствоФизЛица(ФизЛицоСсылка);

	УстановитьСвойстваРеквизитовНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПеречитатьГражданствоФизЛица()

	ПеречитатьГражданствоФизЛица();

КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеФизЛица()

	// Перечитаем данные физлица заново.
	ФизЛицоСсылка = ФизическоеЛицо.Ссылка;
	
	ОчиститьЗакэшированныеДанныеФизЛица();
	
	ПрочитатьОсновныеДанныеФизЛица(ФизЛицоСсылка);
	
	ПрочитатьГражданствоФизЛица(ФизЛицоСсылка);

	УстановитьСвойстваРеквизитовНачало();

КонецПроцедуры

&НаСервере
Процедура НастроитьСлужебныеРеквизитыФизЛица()

	// Содержит признаки изменения данных, относящихся к физлицу.
	ИзменениеДанныхФизЛица = Новый Структура();
	ИзменениеДанныхФизЛица.Вставить("ФизическоеЛицоЗаблокировано",      Ложь); // Признак блокировки ссылки физического лица.
	ИзменениеДанныхФизЛица.Вставить("ФизическоеЛицоМодифицированность", Ложь); // Признак изменении в реквизите ФизическоеЛицо.

КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииРеквизитаФизическогоЛица()

	Если ЗаблокироватьФизическоеЛицо() Тогда
		ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность = Истина;
	КонецЕсли;
	
	Возврат ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность;

КонецФункции

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицо()
	
	Если НЕ ТребуетсяБлокировкаФизическогоЛица(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаблокироватьФизическоеЛицоНаСервере() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Сообщим, что не получилось заблокировать.
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Физическое лицо ""%1"" уже заблокировано. Возможно, уже открыта форма с личными данными или личные данные редактируются другим пользователем.'"),
		ФизическоеЛицо.Наименование);

	ПоказатьПредупреждение(, ТекстСообщения);
	
	// Перечитаем данные физлица заново.
	ПеречитатьДанныеФизЛица();
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяБлокировкаФизическогоЛица(Форма)

	Если Форма.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано Тогда
		// Ранее уже было вызвана блокировка.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ФизическоеЛицо.Ссылка) Тогда
		// Пустое физлицо не блокируем.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаблокироватьФизическоеЛицоНаСервере()

	Если НЕ ТребуетсяБлокировкаФизическогоЛица(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;

	Успешно = Истина;

	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, ФизическоеЛицо.ВерсияДанных, УникальныйИдентификатор);
		ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано = Истина;
	Исключение
		// Запись в журнал регистрации не требуется.
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

&НаСервере
Процедура РазблокироватьФизическоеЛицо()

	Если ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) И ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано Тогда
		// Снимем блокировку с ранее выбранного физического лица.
		РазблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, УникальныйИдентификатор);
		ИзменениеДанныхФизЛица.ФизическоеЛицоЗаблокировано = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияДанныхФизЛица()

	ЗаписатьФизическоеЛицо();

	ЗаписатьГражданствоФизЛица();

	// Снимаем блокировку после записи всех данных по физлицу.
	РазблокироватьФизическоеЛицо();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизическоеЛицо()

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность Тогда
		Возврат;
	КонецЕсли;

	// Изменены данные самого физлица.
	ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	ЭтоНовый = ФизЛицоОбъект.ЭтоНовый();
	
	ФизЛицоОбъект.Наименование = СокрЛП(ФизЛицоОбъект.Фамилия) + " " + СокрЛП(ФизЛицоОбъект.Имя)
		+ ?(ЗначениеЗаполнено(ФизЛицоОбъект.Отчество), " " + СокрЛП(ФизЛицоОбъект.Отчество), "");
	ФизЛицоОбъект.ФИО = ФизЛицоОбъект.Наименование;

	Если КонтактнаяИнформацияРуководителяПрочитана
	 ИЛИ КонтактнаяИнформацияФизЛицаПрочитана Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);
	КонецЕсли;
	
	ФизЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	ФизЛицоОбъект.Записать();

	// Освободим объект, т.к. при записи ФИО может он может быть изменен.
	РазблокироватьФизическоеЛицо();
	
	// Снимаем признак изменения.
	ИзменениеДанныхФизЛица.ФизическоеЛицоМодифицированность = Ложь;
		
	// Обновляем ФИО в регистре.
	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
	
	Если НЕ ЭтоНовый Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоОбъект.Ссылка);
		Запрос.УстановитьПараметр("Дата",    Объект.Дата);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФИОФизическихЛиц.Период
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизическихЛиц";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Период = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
		МенеджерЗаписи.Период         = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	// Записываем только, если фактически что-то было изменено.
	УстановитьЗначение(МенеджерЗаписи, "Фамилия",  ФизЛицоОбъект.Фамилия);
	УстановитьЗначение(МенеджерЗаписи, "Имя",      ФизЛицоОбъект.Имя);
	УстановитьЗначение(МенеджерЗаписи, "Отчество", ФизЛицоОбъект.Отчество);
	
	Если МенеджерЗаписи.Модифицированность() Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// Обновляем реквизит формы.
	ФизЛицоОбъект.Прочитать();
	ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицо");

КонецПроцедуры

&НаСервере
Процедура ЗаписатьГражданствоФизЛица()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ГражданствоФизЛицаЗаполнено Тогда
		// Гражданство уже было заполнено на момент открытия заявки,
		// оно редактируется в отдельной форме, здесь ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		// Физлицо не записано, поэтому нет ссылки для записи регистра.
		Возврат;
	КонецЕсли;
	
	// Гражданство на момент открытия заявки не было заполнено в регистре,
	// по умолчанию была подставлена Россия и пользователь против этого не возражал (не менял), 
	// запишем ее явно в регистр, чтобы в следующий раз не спрашивать.
	
	МенеджерЗаписи = РеквизитФормыВЗначение("ГражданствоФизическихЛиц");
	
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо.Ссылка;

	Документы.ЗаявкаНаОткрытиеСчета.ЗаписатьГражданствоФизЛица(МенеджерЗаписи);
	
	// Обновляем реквизит формы.
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "ГражданствоФизическихЛиц");
	
	ГражданствоФизЛицаЗаполнено = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГражданстваФизЛица()

	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	ПараметрыФормы.Вставить("Дата",           Объект.Дата);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуГражданстваФизЛицаЗавершение", ЭтотОбъект);

	// Используем упрощенную форму для редактирования гражданства,
	// т.к. стандартная форма БЗК ориентирована на работу в связке с формой элемента справочников Сотрудники или ФизЛица.
	ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.Форма.ГражданствоФизЛица",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГражданстваФизЛицаЗавершение(ВыбраннаяСтрана, ДополнительныеПараметры) Экспорт

	Если ВыбраннаяСтрана = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГражданствоФизЛицаЗаполнено = Истина;
	
	ГражданствоФизическихЛиц.Страна = ВыбраннаяСтрана;

	СформироватьПредставлениеГражданстваФизЛица(ЭтотОбъект);

	ОбновитьОтображениеДанных();
	
	Заголовок = СформироватьЗаголовок(Объект);
	
	Если Организация.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
		И ФизическоеЛицо.Ссылка = Организация.ИндивидуальныйПредприниматель Тогда
		// При изменении в гражданстве клиента ИП необходимо обновить список подходящих банков.
		БанкиИнициализированы = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтактноеЛицо

&НаСервере
Процедура УстановитьКонтактноеЛицоПользователя()

	// Подставим по умолчанию данные текущего пользователя.
	ТекущийПользователь = Пользователи.ТекущийПользователь();

	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			Объект.КонтактноеЛицо = ФизЛицоПользователя;
			ЗаполнитьДанныеКонтактногоЛица();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПоЗаявкеПриИзмененииНаСервере()

	Если КонтактноеЛицоПоЗаявке = "ДругойСотрудник" Тогда
		 УстановитьКонтактноеЛицоПользователя();
	ИначеЕсли Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Объект.КонтактноеЛицо = Организация.ИндивидуальныйПредприниматель;
	Иначе
		Объект.КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	ЗаполнитьДанныеКонтактногоЛица();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтактногоЛица()
	
	Документы.ЗаявкаНаОткрытиеСчета.ЗаполнитьДанныеКонтактногоЛица(Объект);
	
	JSONИзСтроки = ПреобразоватьТелефонИзСтрокиВJSON(Объект.ТелефонКонтактногоЛица, "");
    ОбновитьТекстОшибкиНомераТелефона(ЭтотОбъект, Не ЗначениеЗаполнено(JSONИзСтроки));

	ЗаполнитьСведенияОТелефоне();

КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерТелефонаТолькоЦифры(ПредставлениеТелефона)
	
	ТелефонТолькоЦифры = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" +()-", СокрЛП(ПредставлениеТелефона), "");
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТелефонТолькоЦифры) ИЛИ СтрДлина(ТелефонТолькоЦифры) <> 11 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ТелефонТолькоЦифры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьТелефонИзСтрокиВJSON(ТелефонСтрокой, Комментарий)
	
	ТелефонТолькоЦифры = НомерТелефонаТолькоЦифры(ТелефонСтрокой);
	
	Если ТелефонТолькоЦифры = Неопределено Тогда

		Возврат Неопределено;
		
	КонецЕсли;
		
	СтруктураПолейТелефона = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураПолейТелефона();
	
	СтруктураПолейТелефона.КодСтраны     = "+" + Лев(ТелефонТолькоЦифры,1);
	СтруктураПолейТелефона.КодГорода     = Сред(ТелефонТолькоЦифры,2,3);
	СтруктураПолейТелефона.НомерТелефона = Сред(ТелефонТолькоЦифры,5);
	СтруктураПолейТелефона.Представление = СтрШаблон("%1 (%2) %3-%4-%5", 
		СтруктураПолейТелефона.КодСтраны, 
		СтруктураПолейТелефона.КодГорода,
		Сред(ТелефонТолькоЦифры, 5, 3), 
		Сред(ТелефонТолькоЦифры, 8, 2), 
		Сред(ТелефонТолькоЦифры, 10, 2));
		
	СтруктураПолейТелефона.Комментарий = Комментарий;
	
	КонтактнаяИнформацияВJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(СтруктураПолейТелефона, 
		Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);
		
	Возврат КонтактнаяИнформацияВJSON;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполнения

&НаСервере
Функция ПроверитьЗаполнениеСтраницы(ИмяСтраницы)

	Если ТолькоПросмотр Тогда
		// Заполнение недоступной для заполнения заявки проверять не нужно.
		Возврат Истина;
	КонецЕсли;

	Если ПустаяСтрока(ИмяСтраницы) ИЛИ ИмяСтраницы = "КлиентИП" ИЛИ ИмяСтраницы = "КлиентЮЛ" Тогда
		ЗаписатьДополнительныеПоказатели(Объект);
	КонецЕсли;
	
	Возврат Документы.ЗаявкаНаОткрытиеСчета.ПроверитьЗаполнение(ЭтотОбъект, ИмяСтраницы, ОбязательныеРеквизитыОрганизации);

КонецФункции

#КонецОбласти

#Область НавигацияПоСтраницам

&НаСервере
Процедура УстановитьВидимостьСтраницы(ОтображаемаяСтраница)

	// Чтобы не отрастали лишние скролл-бары по высоте из-за разного числа элементов
	// на разных страницах, оставляем видимость только у одной - отображаемой страницы.
	
	Для каждого СтраницаЗаявки Из Элементы.СтраницыПомощника.ПодчиненныеЭлементы Цикл
		СтраницаЗаявки.Видимость = (СтраницаЗаявки = ОтображаемаяСтраница);
	КонецЦикла;

	Элементы.СтраницыПомощника.ТекущаяСтраница  = ОтображаемаяСтраница;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийШагПомощника()
	
	Если ТолькоПросмотр Тогда
	
		УстановитьВидимостьСтраницыРеквизитыКлиента();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекущийШагПомощника = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ДокументЗаявкаНаОткрытиеСчетаТекущийШагПомощника"),
			Объект.Ссылка.УникальныйИдентификатор(),
			"");
		
		Если ТекущийШагПомощника = "Банки" Тогда
			
			УстановитьВидимостьСтраницыБанки();
			
		ИначеЕсли ТекущийШагПомощника = "РеквизитыКлиента" Тогда

			ОбновитьДоступныеБанки();
			УстановитьВидимостьСтраницыРеквизитыКлиента();
			
		Иначе
			
			УстановитьВидимостьСтраницыНачало();
			
		КонецЕсли;

	Иначе
		
		УстановитьВидимостьСтраницыНачало();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущийШагПомощника()
	
	Если ТолькоПросмотр ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ДокументЗаявкаНаОткрытиеСчетаТекущийШагПомощника"),
		Объект.Ссылка.УникальныйИдентификатор(), НавигацияПараметрФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыНачало()

	УстановитьВидимостьСтраницы(Элементы.СтраницаНачало);
	
	// Назначить кнопку Далее кнопкой по умолчанию.
	Элементы.ДалееВыборБанков.КнопкаПоУмолчанию = Истина;
	// Активируем первый элемент на странице, чтобы из-за прокрутки не оказался за экраном.
	Если ИспользоватьНесколькоОрганизаций Тогда
		ТекущийЭлемент = Элементы.Организация;
	Иначе
		ТекущийЭлемент = Элементы.ДалееВыборБанков;
	КонецЕсли;
	
	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	УстановитьСвойстваРеквизитовНачало();
	
	РазместитьНавигацию("Начало");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыБанки()
	
	УстановитьВидимостьСтраницы(Элементы.СтраницаБанки);
	// Включить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ;
	// Назначить кнопку Далее кнопкой по умолчанию.
	Элементы.ДалееПодтверждениеОтправки.КнопкаПоУмолчанию = Истина;
	
	// Активируем первый элемент на странице, чтобы из-за прокрутки не оказался за экраном.
	ТекущийЭлемент = Элементы.ВидСчета;
	
	ЗаполнитьСписокВидовСчетов();
	
	ОбновитьДоступныеБанки();
	
	РазместитьНавигацию("Банки");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();
	
	Элементы.ОткрытьСписокЗаявок.Видимость = Не ТолькоПросмотр И ЕстьДругиеЗаявки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыРеквизитыКлиента()
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда	
		
		УстановитьВидимостьСтраницы(Элементы.СтраницаКлиентИП);
		Элементы.ОтправитьИП.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ФамилияИП;

	Иначе
		
		УстановитьВидимостьСтраницы(Элементы.СтраницаКлиентЮЛ);
		Элементы.ОтправитьЮЛ.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.НаименованиеСокращенное;
		
	КонецЕсли;
	
	ЗаписатьВыбранныеБанки(Объект);
	
	ДополнительныеПоказателиАктуальны = Ложь;
	ДополнительныеФайлыАктуальны = Ложь;

	НастроитьДополнительныеПоказатели();
	НастроитьДополнительныеФайлы();
	
	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	РазместитьНавигацию("РеквизитыКлиента");
	
	СохранитьТекущийШагПомощника();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыОжидания()

	УстановитьВидимостьСтраницы(Элементы.СтраницаОжидание);
	Элементы.НадписьОжиданиеПояснение.Заголовок = ТекстПоясненияОжидания;

	// Выключить видимость командной панели
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
КонецПроцедуры

&НаСервере
Процедура НазадНачалоНаСервере()
	
	УстановитьВидимостьСтраницыНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗамерВремениПодборБанков()

	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		// Сведения о банках еще не обновлены, необходимо сначала дождаться завершения фонового задания.
		Возврат;
	КонецЕсли;

	КлючеваяОперация = "ПодборБанковЗаявкаНаОткрытиеСчета";

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаСервере
Процедура ДалееВыборБанковНаСервере()

	Если НЕ ПроверитьЗаполнениеСтраницы("Начало") Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		// В настоящее время еще выполняется фоновое задание по обновлению данных из сервиса,
		// дождемся его завершения и потом только перейдем к шагу выбора банков.
		ТекстПоясненияОжидания = НСтр("ru = 'Поиск предложений банков'");
		УстановитьВидимостьСтраницыОжидания();
		ПерейтиКСтраницеБанковПослеОбновления = Истина;
	Иначе
		УстановитьВидимостьСтраницыБанки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДалееПодтверждениеОтправкиНаСервере()

	УстановитьВидимостьСтраницыРеквизитыКлиента();

КонецПроцедуры

&НаСервере
Функция ИмяПомощника()

	Возврат "ЗаявкаНаОткрытиеСчета";

КонецФункции

&НаСервере
Функция НавигацияПомощника()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаНачало(1));
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаБанки(2));
	СтруктураНавигации.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаРеквизитыКлиента(3));
	
	Возврат СтруктураНавигации;
	
КонецФункции

&НаСервере
Функция СтруктураШагаНачало(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = ТекстНавигацииНачало();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Начало";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Функция ТекстНавигацииНачало()

	Возврат НСтр("ru='Начало'");

КонецФункции

&НаСервере
Функция СтруктураШагаБанки(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Партнеры сервиса'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Банки";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Функция СтруктураШагаРеквизитыКлиента(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = ИмяПомощника();
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ТекстНавигации = НСтр("ru='Реквизиты'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "РеквизитыКлиента";
	Возврат СтруктураШага;
	
КонецФункции

&НаСервере
Процедура РазместитьНавигацию(ИмяТекущейСтраницы)

	НавигацияПараметрФормы = ИмяТекущейСтраницы;

	СтруктураНавигацииПомощника = НавигацияПомощника();
	НавигацияПомощников.РазместитьНавигацию(ЭтотОбъект, СтруктураНавигацииПомощника, Параметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеШага(ИмяШага)
	
	Если ИмяШага = "Шаг1" Тогда
		УстановитьВидимостьСтраницыНачало();
	ИначеЕсли ИмяШага = "Шаг2" Тогда
		УстановитьВидимостьСтраницыБанки();
	ИначеЕсли ИмяШага = "Шаг3" Тогда
		УстановитьВидимостьСтраницыРеквизитыКлиента();
	Иначе
		УстановитьВидимостьСтраницыОжидания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийВид

&НаСервере
Процедура ИнициализироватьФорму()

	УстановитьФункциональныеОпцииФормы();

	// Начальная страница
	Элементы.ДекорацияЗаголовок.Заголовок = СтрШаблон(Элементы.ДекорацияЗаголовок.Заголовок, 
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);

	// Страница банки
	Элементы.ГруппаОпции.Видимость = Истина;

	// Первоначально на форме 1 предопределенных ячеек для отображения доступных/недоступных банков.
	// В дальнейшем их число будет программно увеличено, если банков для отображения окажется больше.
	ДоступныйБанкМаксКоличество  = 1;
	ДругойБанкМаксКоличество  = 1;
	
	// Покажем организацию в виде гиперссылки на форме,
	// поле ввода Организация будет скрыто автоматически по ФО.
	Элементы.ОднаОрганизация.Видимость = НЕ ИспользоватьНесколькоОрганизаций;
	Элементы.ОднаОрганизацияБанки.Видимость = НЕ ИспользоватьНесколькоОрганизаций;
	Элементы.ОрганизацияБанки.Видимость = ИспользоватьНесколькоОрганизаций;
		
	ГражданствоПредставление = Справочники.СтраныМира.Россия; // Значение по умолчанию для незаполненного гражданства.
	
	// Отправка доступны только для заявки, которую еще не отправляли, и у пользователя есть права на это.
	Элементы.ОтправитьИП.Доступность = НЕ ТолькоПросмотр; 
	Элементы.ОтправитьЮЛ.Доступность = НЕ ТолькоПросмотр;
	
	// Выгрузка заявки доступна только при наличии прав на изменение.
	Элементы.СохранитьФайлыНаДискЮЛ.Доступность = ЕстьПравоИзменения;
	Элементы.СохранитьФайлыНаДискИП.Доступность = ЕстьПравоИзменения;
	
	НастроитьСлужебныеРеквизитыОрганизации();
	НастроитьСлужебныеРеквизитыФизЛица();
	
	ЗначениеРеквизитаКонтактноеЛицоПоЗаявке();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовок(Объект)

	Результат = СтрШаблон(НСтр("ru = 'Заявка %1 %2 от %3'"),
		ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета"), Объект.Номер,
		Формат(Объект.Дата, "ДЛФ=D"));
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УправлениеФормой()

	Заголовок = СформироватьЗаголовок(Объект);
	ЭтоФизЛицо = (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаКлиентИП Тогда
		// Контактное лицо отображаем, если оно отличается от самого ИП.
		Элементы.ГруппаДругоеКонтактноеЛицоИП.Видимость = (КонтактноеЛицоПоЗаявке = "ДругойСотрудник");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИНН(Форма)

	Объект         = Форма.Объект;
	Организация    = Форма.Организация;
	ФизическоеЛицо = Форма.ФизическоеЛицо;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовСчетов()

	СписокВыбора = Элементы.ВидСчета.СписокВыбора;
	
	Если СписокВыбора.Количество() > 0 Тогда
		// Список уже заполнен.
		Возврат;
	КонецЕсли;
	
	ВидСчетаСписокВыбора = ЗаявкиНаОткрытиеСчета.ВидыСчетов(ТолькоПросмотр);
	Для каждого ЭлементСписка Из ВидСчетаСписокВыбора Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если НЕ ТолькоПросмотр И СписокВыбора.НайтиПоЗначению(Объект.ВидСчета) = Неопределено Тогда
		Если ВидСчетаСписокВыбора.Количество() > 0 Тогда
			Объект.ВидСчета = ВидСчетаСписокВыбора[0].Значение;
		Иначе
			Объект.ВидСчета = "";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстОшибкиНомераТелефона(Форма, ЕстьОшибка)
	Если ЕстьОшибка Тогда
		Форма.ПроверкаТелефона = НСтр("ru = 'Мобильный телефон должен иметь формат +7 (XXX) XXX-XX-XX'");
		Форма.Элементы.ТелефонКонтактногоЛицаИП.ОтметкаНезаполненного = Истина;
		Форма.Элементы.ТелефонКонтактногоЛицаЮЛ.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.ПроверкаТелефона = "";
		Форма.Элементы.ТелефонКонтактногоЛицаИП.ОтметкаНезаполненного = Ложь;
		Форма.Элементы.ТелефонКонтактногоЛицаЮЛ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Банки

&НаСервере
Функция СведенияОЗаявителе()

	// Заполним сведения о клиенте для подбора банков по текущим условиям.
	Результат = Документы.ЗаявкаНаОткрытиеСчета.НовыеСведенияОЗаявителе();
	Результат.Организация               = Организация.Ссылка;
	Результат.ЮридическоеФизическоеЛицо = Организация.ЮридическоеФизическоеЛицо;

	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Результат.Нерезидент = ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна)
			И ГражданствоФизическихЛиц.Страна <> Справочники.СтраныМира.Россия;

		Результат.ДатаРождения = ФизическоеЛицо.ДатаРождения;
	Иначе
		Результат.Нерезидент  = Организация.ИностраннаяОрганизация;
	КонецЕсли;

	Результат.ДатаРегистрации   = Организация.ДатаРегистрации;
	Результат.КодОКВЭД2         = Организация.КодОКВЭД2;
	Результат.КодОКОПФ          = Организация.КодОКОПФ;
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Организация.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Объект.Дата);
	Если ЗначениеЗаполнено(КонтактнаяИнформацияОбъекта) Тогда
		Результат.ЮрАдресОрганизации = КонтактнаяИнформацияОбъекта.Значение;
	КонецЕсли;
	
	ПоказателиДеятельности = УниверсальныйОбменСБанкамиФормы.ПоказателиДеятельности(Организация.Ссылка, Объект.Дата);
	Результат.ДатаФактическогоНачалаВеденияБизнеса    = ПоказателиДеятельности.ДатаФактическогоНачалаВеденияБизнеса;
	Результат.СреднемесячноеПоступлениеНаСчет         = ПоказателиДеятельности.СреднемесячноеПоступлениеНаСчет;
	Результат.МинимальноеЕжемесячноеПоступлениеНаСчет = ПоказателиДеятельности.МинимальноеЕжемесячноеПоступлениеНаСчет;
	Результат.ДатаНачалаУчетаВПрограмме               = ПоказателиДеятельности.ДатаНачалаУчетаВПрограмме;
	Результат.СуммаВыручки                            = ПоказателиДеятельности.СуммаВыручки;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ИнициализироватьБанки()

	Если БанкиИнициализированы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(БанкиАдресХранилища) Тогда
		// Удалим предыдущую информацию о банках, если она есть.
		УдалитьИзВременногоХранилища(БанкиАдресХранилища);
		БанкиАдресХранилища = "";
	КонецЕсли;
	
	// Получаем банки-партнеры сервиса.
	// Если заявка уже была отправлена ранее и теперь доступна только на просмотр,
	// то выбираем информацию о всех банках вне зависимости от их активности,
	// т.к. ранее они могли быть активны в момент создания заявки.
	// Для еще не отправленной заявки показываем только активные банки.
	ВозвращатьНеактивные = ЗаявкаОтправлена;
	СведенияОБанкахИСтопФакторах = Документы.ЗаявкаНаОткрытиеСчета.СведенияОБанкахИСтопФакторах(СведенияОЗаявителе(),
		Объект.Дата, ВозвращатьНеактивные);

	СведенияОБанках = СведенияОБанкахИСтопФакторах.ТаблицаБанков;	   
	
	ОбязательныеРеквизитыОрганизации = Новый ФиксированнаяСтруктура(СведенияОБанкахИСтопФакторах.ОбязательныеРеквизиты);
	
	// Добавим дополнительную колонку для связи с элементами формы.
	// Номер группы в области доступных банков, в которой выводится логотип текущего банка.
	СведенияОБанках.Колонки.Добавить("НомерГруппы",  ОбщегоНазначения.ОписаниеТипаЧисло(4));
	
	// Признак того, что пользователь явно снял отметку у банка, чтобы не предлагать при изменениях условий.
	СведенияОБанках.Колонки.Добавить("ОтметкаСнятаПользователем", Новый ОписаниеТипов("Булево")); 
	
	// Признак, что параметры заявки соответствуют параметрам продукта.
	СведенияОБанках.Колонки.Добавить("БанкДоступен",        Новый ОписаниеТипов("Булево")); 
	
	// Признак, что банк уже был выбран в отправленной ранее заявке.
	СведенияОБанках.Колонки.Добавить("ЗаявкаОтправлена", Новый ОписаниеТипов("Булево")); 
	
	// Признак, что пользователь поставил отметку.
	СведенияОБанках.Колонки.Добавить("Отметка",        		Новый ОписаниеТипов("Булево")); 
	
	Если ЗаявкаОтправлена Тогда

		// Если открыта форма ранее отправленной заявки, которая теперь доступна только для чтения,
		// то может быть, что в момент ее отправки какие-то банки были доступны, а сейчас уже нет,
		// либо их условия поменялись.
		// Поэтому добавляем банки из табличной части документа, чтобы на форме их все равно показать.
		
		Если СведенияОБанках.Количество() > 0 Тогда
			МаксПорядокСортировкиБанка = СведенияОБанках[СведенияОБанках.Количество() - 1].ПорядокСортировкиБанка;
		Иначе
			МаксПорядокСортировкиБанка = 0;
		КонецЕсли;

		Для каждого СтрокаТЧ Из Объект.Банки Цикл

			СведенияОБанке = СведенияОБанках.Найти(СтрокаТЧ.Банк, "Банк");
			Если СведенияОБанке = Неопределено Тогда
				СведенияОБанке      = СведенияОБанках.Добавить();
				СведенияОБанке.Банк = СтрокаТЧ.Банк;

				// Добавляем в конец общего списка.
				МаксПорядокСортировкиБанка = МаксПорядокСортировкиБанка + 1;
				
				СведенияОБанке.ПорядокСортировки = 1;
				СведенияОБанке.МаксПорядокСортировкиБанка = МаксПорядокСортировкиБанка;
				
				СведенияОБанке.СтопФакторыПройдены = Истина;

				СведенияОБанке.ИдентификаторПродукта = СтрокаТЧ.ИдентификаторПродукта;
				СведенияОБанке.ЗаявкаОтправлена = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем наименование банков.
		Документы.ЗаявкаНаОткрытиеСчета.ЗаполнитьНаименованияБанков(СведенияОБанках);
		
	КонецЕсли;

	// Запоминаем изменения в таблице сведений о банках.
	ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках);

	БанкиИнициализированы    = Истина;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияСписковВалют()

	ВалютаРубль = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютыДокумента = Объект.Валюты.Выгрузить().ВыгрузитьКолонку("Валюта");
	
	Если ВалютыДокумента.Количество() = 0 Тогда
		ВалютыДокумента.Добавить(ВалютаРубль);
	КонецЕсли;
	
	Валюты.ЗагрузитьЗначения(ВалютыДокумента);
	ВалютыПредставление = "" + Валюты; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВсехВалют(ВыбранныеВалюты, ВалютаРубль)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Валюты.Ссылка = &ВалютаРубль
		|			ТОГДА 0
		|		КОГДА Валюты.Ссылка В (&ВыбранныеВалюты)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ПорядокСортировки,
		|	Валюты.Ссылка КАК Ссылка,
		|	Валюты.Код КАК Код
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	(НЕ Валюты.ПометкаУдаления
		|			ИЛИ Валюты.Ссылка В (&ВыбранныеВалюты)
		|			ИЛИ Валюты.Ссылка = &ВалютаРубль)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСортировки,
		|	Код";
	
	Запрос.УстановитьПараметр("ВыбранныеВалюты",	ВыбранныеВалюты);
	Запрос.УстановитьПараметр("ВалютаРубль",		ВалютаРубль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВалют = РезультатЗапроса.Выгрузить();
	
	Результат = Новый СписокЗначений;
	
	Результат.ЗагрузитьЗначения(ТаблицаВалют.ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция СведенияОБанках()

	ИнициализироватьБанки();
	
	Возврат ПолучитьИзВременногоХранилища(БанкиАдресХранилища);

КонецФункции

&НаСервере
Процедура ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках)

	Документы.ЗаявкаНаОткрытиеСчета.ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках, УникальныйИдентификатор);
	
	// Поместим обновленную таблицу со сведениями о банках обратно во временное хранилище.
	ПоместитьВоВременноеХранилище(СведенияОБанках, БанкиАдресХранилища);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеБанкиНаКлиенте()

	НачатьЗамерВремениПодборБанков();

	ОбновитьДоступныеБанки();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеБанки()
	
	СведенияОБанках = СведенияОБанках();
	
	// Сформировать изображенные банковские продукты.
	
	ИнициализироватьСнятыеПользователем = Ложь;
	
	Если ИзображенныеБанковскиеПродукты.Количество() = 0 И Объект.Банки.Количество() > 0 Тогда
		ИнициализироватьСнятыеПользователем = Истина;
			
		Для каждого СтрокаТЧ Из Объект.Банки Цикл
			ИзображенныйБанковскийПродукт = ИзображенныеБанковскиеПродукты.Добавить();
			ИзображенныйБанковскийПродукт.Банк					= СтрокаТЧ.Банк;
			ИзображенныйБанковскийПродукт.ИдентификаторПродукта = СтрокаТЧ.ИдентификаторПродукта;
			ИзображенныйБанковскийПродукт.Отметка				= Истина;
			ИзображенныйБанковскийПродукт.БанкДоступен			= Истина;
		КонецЦикла;
	КонецЕсли;

	ПредИзображенныеПродукты = ИзображенныеБанковскиеПродукты.Выгрузить().Скопировать();
	
	ТекущиеОтметкиСнятыеПользователем = Новый Соответствие(ОтметкиСнятыеПользователем);
	
	ИзображенныеБанковскиеПродукты.Очистить();
	
	ОтборПредИзображенныеПродукты = Новый Структура("Банк, ИдентификаторПродукта");
	
	БанкиДляЗагрузкиЛоготипов = Новый Массив;
	
	ДоступныеБанки = Новый Соответствие;
	НедоступныеБанки = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		// Подсчитаем количество доступных и других банков.
		Если БанкДоступен(СтрокаТаблицы) Тогда
			ДоступныеБанки.Вставить(СтрокаТаблицы.Банк, Истина);
		Иначе
			НедоступныеБанки.Вставить(СтрокаТаблицы.Банк, Истина);
		КонецЕсли;
	КонецЦикла;

	КоличествоДоступныхБанков = ДоступныеБанки.Количество();
	КоличествоДругихБанков = НедоступныеБанки.Количество();
	
	ОтборПоИдентификатору = Новый Структура("Банк, ИдентификаторПродукта");
	ОбработанныеБанки = Новый Соответствие;
				
	СведенияОБанках.Сортировать("БанкДоступен Убыв, СтопФакторыПройдены Убыв, ПорядокСортировкиБанка, ПорядокСортировки, СтепеньСоответствия Убыв");
	Для Каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		Если ОбработанныеБанки[СтрокаТаблицы.Банк] = Истина Тогда
			Продолжить;
		КонецЕсли;

		ОбработанныеБанки.Вставить(СтрокаТаблицы.Банк, Истина);
		
		ИзображенныйБанковскийПродукт = ИзображенныеБанковскиеПродукты.Добавить();
		ИзображенныйБанковскийПродукт.Банк = СтрокаТаблицы.Банк; 
		
		ИндексТекущейСтроки = СведенияОБанках.Индекс(СтрокаТаблицы);
		ПредИзображенныйПродукт = ПредИзображенныеПродукты.Найти(СтрокаТаблицы.Банк, "Банк");

		Если Не ИнициализироватьСнятыеПользователем Тогда
			ОтметкаСнятаПользователем = (ТекущиеОтметкиСнятыеПользователем[СтрокаТаблицы.Банк] = Истина);
			ОтметкаПродукта = Не ОтметкаСнятаПользователем;
		Иначе
			ОтметкаПродукта = ПредИзображенныйПродукт <> Неопределено И ПредИзображенныйПродукт.Отметка;
			ОтметкаСнятаПользователем = Не ОтметкаПродукта;
			ТекущиеОтметкиСнятыеПользователем.Вставить(СтрокаТаблицы.Банк, ОтметкаСнятаПользователем);
		КонецЕсли;
		
		ИзображенныйБанковскийПродукт.Отметка = ОтметкаПродукта;
		
		Если ПредИзображенныйПродукт <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ОтборПоИдентификатору, ПредИзображенныйПродукт);
			
			СтрокиПредПродукта = СведенияОБанках.НайтиСтроки(ОтборПоИдентификатору);
			Если СтрокиПредПродукта.Количество() = 0 Тогда
				СтрокаПредПродукта = Неопределено;
			Иначе
				СтрокаПредПродукта = СтрокиПредПродукта[0];
			КонецЕсли;
			
			// Если ранее изображенный продукт теперь не существует или недоступен, но 
			// продукт в текущей строке доступен, то забываем ранее изображенный продукт. 
			Если СтрокаПредПродукта = Неопределено
				ИЛИ (СтрокаТаблицы.БанкДоступен И Не БанкДоступен(СтрокаПредПродукта)) Тогда
			
				ПредИзображенныйПродукт = Неопределено;
			
			КонецЕсли;
		КонецЕсли;
		
		Если ПредИзображенныйПродукт <> Неопределено Тогда
		
			ИзображенныйБанковскийПродукт.ИдентификаторПродукта	= СтрокаПредПродукта.ИдентификаторПродукта;
			ИзображенныйБанковскийПродукт.БанкДоступен 			= СтрокаПредПродукта.БанкДоступен;
			ИзображенныйБанковскийПродукт.СтопФакторыПройдены	= СтрокаПредПродукта.СтопФакторыПройдены;
			ИзображенныйБанковскийПродукт.ИндексСведений		= СведенияОБанках.Индекс(СтрокаПредПродукта);
		
		Иначе	
		
			ИзображенныйБанковскийПродукт.ИдентификаторПродукта	= СтрокаТаблицы.ИдентификаторПродукта;
			ИзображенныйБанковскийПродукт.БанкДоступен 			= СтрокаТаблицы.БанкДоступен;
			ИзображенныйБанковскийПродукт.СтопФакторыПройдены	= СтрокаТаблицы.СтопФакторыПройдены;
			ИзображенныйБанковскийПродукт.ИндексСведений		= СведенияОБанках.Индекс(СтрокаТаблицы);
		
		КонецЕсли;
			
		// Догрузим недостающие логотипы.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АдресЛоготипа) Тогда
			БанкиДляЗагрузкиЛоготипов.Добавить(СтрокаТаблицы.Банк);
		КонецЕсли;
	КонецЦикла;
	
	Если ИнициализироватьСнятыеПользователем Тогда
		ОтметкиСнятыеПользователем = Новый ФиксированноеСоответствие(ТекущиеОтметкиСнятыеПользователем);
	КонецЕсли;
	
	Если БанкиДляЗагрузкиЛоготипов.Количество() > 0 Тогда
		ЗагрузитьЛоготипыБанков(БанкиДляЗагрузкиЛоготипов, СведенияОБанках);
	КонецЕсли;
	
	ДобавитьНедостающиеГруппыБанков("ДоступныйБанк", КоличествоДоступныхБанков);
	ДобавитьНедостающиеГруппыБанков("ДругойБанк", КоличествоДругихБанков);
	
	ОтобразитьДоступныеБанки(СведенияОБанках);
	ОтобразитьДругиеБанки(СведенияОБанках);
	
	// Отобразим сообщение, что ни один банк не найден, если доступных банков нет.
	Элементы.ГруппаБанкиПредложенияНеНайдены.Видимость = КоличествоДоступныхБанков = 0
		ИЛИ ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса);

	Если СведенияОБанках.Количество() = 0 ИЛИ ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса)  Тогда
		// Если вообще не найден ни один банк, вероятно, проблема с доступностью сервиса.
		Элементы.НадписьПредложенияБанковНеНайдены.Заголовок = 
			УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(ОписаниеОшибкиОбновленияДанныхСервиса);
	Иначе
		Элементы.НадписьПредложенияБанковНеНайдены.Заголовок = 
			НСтр("ru = 'Подходящие предложения у банков не найдены. Попробуйте изменить требования к счету.'");
	КонецЕсли;
	
	УникальныеБанки = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОБанках, "Банк", Истина);
	
	// Запоминаем изменения в таблице сведений о банках.
	ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДоступныеБанки(СведенияОБанках)
	
	НомерГруппы = 0;
	ОтборБанк   = Новый Структура("Банк, ИдентификаторПродукта");
	ОтборВыбранныйБанк   = Новый Структура("Банк");
	
	ВыведенныеБанки = Новый Массив;
	
	ОтображатьДоступныеБанки = Ложь;
	
	СведенияОБанках.ЗаполнитьЗначения(0, "НомерГруппы");
	
	Для каждого СтрокаПродукта Из ИзображенныеБанковскиеПродукты Цикл
		
		СтрокаТаблицы = СведенияОБанках[СтрокаПродукта.ИндексСведений];
		
		Если НЕ СтрокаТаблицы.БанкДоступен Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		Иначе
			Продолжить; // Один продукт данного банка уже был выведен.
		КонецЕсли;
		
		ДругиеПродуктыДанногоБанка = 
			СведенияОБанках.НайтиСтроки(Новый Структура("Банк, БанкДоступен", СтрокаТаблицы.Банк, Истина));
		
		ОтображатьДоступныеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ОтметкаБанка = СтрокаПродукта.Отметка;
		ОтборВыбранныйБанк.Банк = СтрокаТаблицы.Банк;
		
		СтрокаВыбранногоПродукта = СтрокаТаблицы;
		
		СтрокаВыбранногоПродукта.НомерГруппы = НомерГруппы; // Запоминаем номер группы, в которой выведен банк.
		СтрокаПродукта.НомерГруппы = НомерГруппы; 
		
		ГруппаБанка = Элементы["ГруппаДоступныйБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДоступныйБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДоступныйБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Флажок
		ЭтотОбъект["ДоступныйБанкОтметка" + СуффиксГруппы] = ОтметкаБанка;
		
		// Наименование продукта
		НаименованиеПродукта = Элементы["НаименованиеПродуктаДоступныйБанк" + СуффиксГруппы];
		НаименованиеПродукта.Заголовок = СтрокаВыбранногоПродукта.НаименованиеПродукта;
		НаименованиеПродукта.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.НаименованиеПродукта);
		
		// Описание краткое и подробное
		КраткоеОписание = Элементы["КраткоеОписаниеДоступныйБанк" + СуффиксГруппы];
		КраткоеОписание.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрокаВыбранногоПродукта.КраткоеОписание);
		КраткоеОписание.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.КраткоеОписание);
		
		ПодробныеУсловия = Элементы["ПодробныеУсловияДоступныйБанк" + СуффиксГруппы];
		ПодробныеУсловия.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрокаВыбранногоПродукта.ПодробноеОписание);
		ПодробныеУсловия.Видимость = ЗначениеЗаполнено(СтрокаВыбранногоПродукта.ПодробноеОписание);
		
		ОткрытьСписокТарифов =  Элементы["ОткрытьСписокТарифовДоступныйБанк" + СуффиксГруппы];
		ОткрытьСписокТарифов.Видимость = (ДругиеПродуктыДанногоБанка.Количество() > 1);
		ОткрытьСписокТарифов.Доступность = ЕстьПравоИзменения
		
	КонецЦикла;
	
	// Все невостребованные группы банков скроем.
	Пока НомерГруппы < ДоступныйБанкМаксКоличество Цикл
		НомерГруппы   = НомерГруппы + 1;
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		ГруппаБанка   = Элементы["ГруппаДоступныйБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Ложь;
	КонецЦикла;
	
	Элементы.ГруппаДоступныеБанки.Видимость = ОтображатьДоступныеБанки;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДругиеБанки(СведенияОБанках)
	
	НомерГруппы = 0;
	
	// Построим список банков, по которым доступны продукты.
	ДоступныеБанки = Новый Массив;
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		Если СтрокаТаблицы.БанкДоступен
			И ДоступныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ДоступныеБанки.Добавить(СтрокаТаблицы.Банк);
		КонецЕсли;
	КонецЦикла;
	
	ВыведенныеБанки = Новый Массив;
	
	ОтображатьДругиеБанки = Ложь;
	
	// Сначала отображаем банки, которые прошли по стоп-факторам.
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		// Если доступен другой продукт банка, не выводим банк в списке недоступных.
		Если ДоступныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.БанкДоступен Тогда
			ДоступныеБанки.Добавить(СтрокаТаблицы.Банк);
			Продолжить;
		КонецЕсли;

		Если НЕ СтрокаТаблицы.СтопФакторыПройдены Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		Иначе
			Продолжить; // Один продукт данного банка уже был выведен.
		КонецЕсли;
		
		ОтображатьДругиеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		СтрокаТаблицы.НомерГруппы = 0;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ГруппаБанка = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДругойБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДругойБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Наименование продукта отображается если стоп-факторы пройдены.
		НаименованиеПродукта = Элементы["НаименованиеПродуктаДругойБанк" + СуффиксГруппы];
		НаименованиеПродукта.Заголовок = СтрокаТаблицы.НаименованиеПродукта;
		НаименованиеПродукта.Видимость = Ложь;
		
		// Описание краткое
		КраткоеОписание = Элементы["КраткоеОписаниеДругойБанк" + СуффиксГруппы];
		КраткоеОписание.Заголовок = НСтр("ru = 'Попробуйте изменить условия заявки, чтобы увидеть доступные предложения'");
		КраткоеОписание.Видимость = ЗначениеЗаполнено(СтрокаТаблицы.КраткоеОписание);
		
	КонецЦикла;
	
	// Потом отображаем банки, которые не прошли по стоп-факторам.
	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл
		
		// Если доступен другой продукт банка, не выводим банк в списке недоступных.
		Если ДоступныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.БанкДоступен Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СтопФакторыПройдены Тогда
			Продолжить;
		КонецЕсли;

		Если ВыведенныеБанки.Найти(СтрокаТаблицы.Банк) <> Неопределено Тогда
			Продолжить; // Банк был выведен в этом списке ранее.
		КонецЕсли;
		
		ВыведенныеБанки.Добавить(СтрокаТаблицы.Банк);
		
		ОтображатьДругиеБанки = Истина;
		
		НомерГруппы = НомерГруппы + 1;
		СтрокаТаблицы.НомерГруппы = 0;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		ГруппаБанка = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Истина;
		
		// Название банка и адрес его логотип.
		ПолеЛоготипа  = Элементы["ДругойБанк" + СуффиксГруппы];
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ТекстНевыбраннойКартинки = СтрокаТаблицы.Наименование;
		ПолеЛоготипа.Подсказка                = СтрокаТаблицы.Наименование;
		ЭтотОбъект["ДругойБанкАдресЛоготипа" + СуффиксГруппы] = СтрокаТаблицы.АдресЛоготипа;
		
		// Наименование продукта отображается если стоп-факторы банка пройдены.
		НаименованиеПродукта = Элементы["НаименованиеПродуктаДругойБанк" + СуффиксГруппы];
		НаименованиеПродукта.Видимость = Ложь;
		
		// Описание краткое
		КраткоеОписание = Элементы["КраткоеОписаниеДругойБанк" + СуффиксГруппы];
		КраткоеОписание.Заголовок = НСтр("ru = 'Пока не принимает заявки'");
		КраткоеОписание.Видимость = Истина;
		
	КонецЦикла;
	
	// Все невостребованные группы банков скроем.
	Пока НомерГруппы < ДругойБанкМаксКоличество Цикл
		НомерГруппы   = НомерГруппы + 1;
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		ГруппаБанка   = Элементы["ГруппаДругойБанкСтрока" + СуффиксГруппы];
		ГруппаБанка.Видимость = Ложь;
	КонецЦикла;
	
	Элементы.ГруппаДругиеБанки.Видимость = ОтображатьДругиеБанки;
	
КонецПроцедуры

&НаСервере
Функция БанкДоступен(СведенияОБанке, ПричиныНедоступности = Неопределено)
	
	Если СведенияОБанке.ЗаявкаОтправлена Тогда

		СведенияОБанке.БанкДоступен = Истина;
		Возврат Истина;
	
	КонецЕсли;
	
	Если Объект.ТребуетсяИнтеграцияССервисомАУСН <> СведенияОБанке.ИнтеграцияССервисомАУСН Тогда
		СведенияОБанке.БанкДоступен = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	// Если интересуют причины недоступности, то выполняем все проверки и записываем их результат в переданный массив.
	// Если причины не интересны, то выходим сразу, как найдем первую причину.
	Если ТипЗнч(ПричиныНедоступности) = Тип("Массив") Тогда
		ПричиныНедоступности.Очистить();
		ДетализироватьПоПричинам = Истина;
	Иначе
		ДетализироватьПоПричинам = Ложь;
	КонецЕсли;
	
	СведенияОБанке.БанкДоступен = Ложь;

	Если НЕ СведенияОБанке.СтопФакторыПройдены Тогда
		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("СтопФакторы");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОБанке.ВидыСчетовБанка.Количество() > 0 Тогда
		ЕстьВСписке = СведенияОБанке.ВидыСчетовБанка.Найти(Объект.ВидСчета) <> Неопределено;
		Если СведенияОБанке.БелыйСписокВидовСчетов И НЕ ЕстьВСписке
			ИЛИ НЕ СведенияОБанке.БелыйСписокВидовСчетов И ЕстьВСписке Тогда
			
			Если ДетализироватьПоПричинам Тогда
				ПричиныНедоступности.Добавить("ВидСчета");
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Если в перечне валют банка нет валюты Рубль, то считаем что он там все равно есть,
	// т.к. рублевые счета открывают по умолчанию всеми банками РФ. 
	// Если перечень валют банка пуст, то считаем что счет открывается только в рублях.
	// Банк должен открывать счета во всех валютах, указанных в списке на форме.
	ПоВалютеДоступен = Истина;
	
	Для каждого Валюта Из Валюты Цикл
		Если Валюта.Значение = ВалютаРубль Тогда
			Продолжить;	
		КонецЕсли;
		
		НетВСписке = СведенияОБанке.ВалютыБанка.Найти(Валюта.Значение.Код) = Неопределено;
		ЕстьВСписке = Не НетВСписке;
		
		Если СведенияОБанке.БелыйСписокВалют И НетВСписке ИЛИ 
			Не СведенияОБанке.БелыйСписокВалют И ЕстьВСписке Тогда
			
			ПоВалютеДоступен = Ложь;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПоВалютеДоступен Тогда
		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("Валюта");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ПроцентНаОстаток И Не СведенияОБанке.ПроцентНаОстаток Тогда

		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("ПроцентНаОстаток");
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПодписаниеВ1СДиректБанк И Не СведенияОБанке.ПодписаниеВ1СДиректБанк Тогда

		Если ДетализироватьПоПричинам Тогда
			ПричиныНедоступности.Добавить("ПодписаниеВ1СДиректБанк");
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализироватьПоПричинам И ПричиныНедоступности.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		СведенияОБанке.БанкДоступен = Истина;
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ДобавитьНедостающиеГруппыБанков(ПрефиксГруппы, Количество)
	
	МаксКоличествоБанков = ЭтотОбъект[ПрефиксГруппы + "МаксКоличество"];
	
	// Сначала определим количество недостающих ячеек для вывода всех банков.
	ДобавляемыеРеквизиты = Новый Массив;
	НомерГруппы = 0;
	НомерПервойДобавленнойГруппы = 0;
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Для Счетчик = 1 По Количество Цикл
		
		НомерГруппы = НомерГруппы + 1;
		Если НомерГруппы <= МаксКоличествоБанков Тогда
			// Размещаем банк в существующей группе.
			Продолжить;
		КонецЕсли;
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		Если НомерПервойДобавленнойГруппы = 0 Тогда
			// Запоминаем, начиная с какой группы добавляем новые реквизиты.
			НомерПервойДобавленнойГруппы = НомерГруппы;
		КонецЕсли;
		
		// Отметка добавляется только для доступных банков.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			НовыйРеквизит = Новый РеквизитФормы(ПрефиксГруппы + "Отметка" + СуффиксГруппы, ТипБулево, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(ПрефиксГруппы + "АдресЛоготипа" + СуффиксГруппы, ТипСтрока, , , Ложь); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
		// Увеличиваем макс. количество групп доступных банков.
		МаксКоличествоБанков = МаксКоличествоБанков + 1;
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() = 0 Тогда
		// Все банки можно разместить в существующих группах, новые добавлять не требуется.
		Возврат;
	КонецЕсли;
	
	// Сохраняем максимальное количество банков.
	ЭтотОбъект[ПрефиксГруппы + "МаксКоличество"] = МаксКоличествоБанков;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем элементы на форму.
	Для НомерГруппы = НомерПервойДобавленнойГруппы По МаксКоличествоБанков Цикл
		
		СуффиксГруппы = Формат(НомерГруппы, "ЧГ=");
		
		// Группа для объединения описания банка с разделителем.
		ГруппаСтрока = Элементы.Добавить("Группа" + ПрефиксГруппы + "Строка" + СуффиксГруппы, Тип("ГруппаФормы"),
			Элементы["Группа" + ПрефиксГруппы + "Строки"]);
		ГруппаСтрока.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрока.ОтображатьЗаголовок              = Ложь;
		ГруппаСтрока.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтрока.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// Объемлющая группа для единообразного выравнивания.
		ОсновнаяГруппаБанка = Элементы.Добавить("ГруппаОсновная" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаСтрока);
		ОсновнаяГруппаБанка.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ОсновнаяГруппаБанка.ОтображатьЗаголовок              = Ложь;
		ОсновнаяГруппаБанка.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ОсновнаяГруппаБанка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		ОсновнаяГруппаБанка.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ОсновнаяГруппаБанка.Ширина                           = 87;
		
		// Разделитель - линия.
		Разделитель = Элементы.Добавить("ДекорацияРазделитель" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаСтрока);
		Разделитель.Вид                      = ВидДекорацииФормы.Картинка;
		Разделитель.Картинка                 = БиблиотекаКартинок.ГоризонтальныйРазделитель;
		Разделитель.РазмерКартинки           = РазмерКартинки.Черепица;
		Разделитель.Ширина                   = 87;
		
		// Флажок с отметкой выводится только для доступного банка.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			ПолеФлажка = Элементы.Добавить(ПрефиксГруппы + "Отметка" + СуффиксГруппы, Тип("ПолеФормы"), ОсновнаяГруппаБанка);
			ПолеФлажка.Вид                            = ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.ПоложениеЗаголовка             = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФлажка.ПутьКДанным                    = ПрефиксГруппы + "Отметка" + СуффиксГруппы;
			ПолеФлажка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "ДоступныйБанкОтметкаПриИзменении");
		КонецЕсли;
		
		// Группа для описания банка.
		ГруппаОписаниеБанка = Элементы.Добавить("ГруппаОписание" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ОсновнаяГруппаБанка);
		ГруппаОписаниеБанка.Вид                            = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОписаниеБанка.Группировка                    = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаОписаниеБанка.ОтображатьЗаголовок            = Ложь;
		ГруппаОписаниеБанка.Отображение                    = ОтображениеОбычнойГруппы.Нет;
		ГруппаОписаниеБанка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаОписаниеБанка.Группировка                    = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОписаниеБанка.Ширина                         = 83;
		
		// Поле картинки с логотипом банка.
		ПолеЛоготипа = Элементы.Добавить(ПрефиксГруппы + СуффиксГруппы, Тип("ПолеФормы"), ГруппаОписаниеБанка);
		ПолеЛоготипа.Вид                      = ВидПоляФормы.ПолеКартинки;
		ПолеЛоготипа.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЛоготипа.ПутьКДанным              = ПрефиксГруппы + "АдресЛоготипа" + СуффиксГруппы;
		ПолеЛоготипа.РазмерКартинки           = РазмерКартинки.Растянуть;
		ПолеЛоготипа.Ширина                   = 14;
		ПолеЛоготипа.Высота                   = 4;
		ПолеЛоготипа.РастягиватьПоВертикали   = Ложь;
		ПолеЛоготипа.РастягиватьПоГоризонтали = Ложь;
		ПолеЛоготипа.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		// Группа для условий банка.
		ГруппаБанка = Элементы.Добавить("Группа" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаОписаниеБанка);
		ГруппаБанка.Вид                              = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБанка.Группировка                      = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаБанка.ОтображатьЗаголовок              = Ложь;
		ГруппаБанка.Отображение                      = ОтображениеОбычнойГруппы.Нет;
		ГруппаБанка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаБанка.ГоризонтальноеПоложениеВГруппе   = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаБанка.Ширина                           = 65;
		ГруппаБанка.РастягиватьПоГоризонтали         = Ложь;
		
		// Декорация для наименования продукта.
		НаименованиеПродукта = Элементы.Добавить(
			"НаименованиеПродукта" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
		НаименованиеПродукта.Вид        = ВидДекорацииФормы.Надпись;
		НаименованиеПродукта.ЦветТекста = ЦветаСтиля.ЦветАкцента;
		
		// Декорация для подробного описания.
		КраткоеОписание = Элементы.Добавить("КраткоеОписание" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
		КраткоеОписание.Вид = ВидДекорацииФормы.Надпись;
		КраткоеОписание.АвтоМаксимальнаяШирина = Ложь;
		
		// Кнопка Подробнее.
		Если ПрефиксГруппы = "ДоступныйБанк" Тогда
			ГруппаПодробныеУсловия = Элементы.Добавить(
				"ГруппаПодробныеУсловия" + ПрефиксГруппы + СуффиксГруппы, Тип("ГруппаФормы"), ГруппаБанка);
			
			ГруппаПодробныеУсловия.Вид                   = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПодробныеУсловия.ОтображатьЗаголовок   = Истина;
			ГруппаПодробныеУсловия.Заголовок             = НСтр("ru = 'Подробнее'");
			ГруппаПодробныеУсловия.Отображение           = ОтображениеОбычнойГруппы.Нет;
			ГруппаПодробныеУсловия.Поведение             = ПоведениеОбычнойГруппы.Свертываемая;
			ГруппаПодробныеУсловия.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
			
			ГруппаПодробныеУсловия.Скрыть();
			
			ОткрытьСписокТарифов = Элементы.Добавить(
				"ОткрытьСписокТарифов" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаБанка);
			
			ОткрытьСписокТарифов.Вид         = ВидДекорацииФормы.Надпись;
			ОткрытьСписокТарифов.Гиперссылка = Истина;
			ОткрытьСписокТарифов.Заголовок   = НСтр("ru = 'Другие тарифы'");
			ОткрытьСписокТарифов.УстановитьДействие("Нажатие", "ОткрытьСписокТарифовДоступныйБанкНажатие");
			
			ПодробныеУсловия = Элементы.Добавить(
				"ПодробныеУсловия" + ПрефиксГруппы + СуффиксГруппы, Тип("ДекорацияФормы"), ГруппаПодробныеУсловия);
			ПодробныеУсловия.Вид = ВидДекорацииФормы.Надпись;
			ПодробныеУсловия.АвтоМаксимальнаяШирина = Ложь;
			ПодробныеУсловия.Ширина = 64;
			ПодробныеУсловия.МаксимальнаяШирина = 64;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметкиБанков(НоваяОтметка)

	ТекущиеОтметкиСнятыеПользователем = Новый Соответствие(ОтметкиСнятыеПользователем);
	Для каждого ИзображенныйБанковскийПродукт Из ИзображенныеБанковскиеПродукты Цикл
		
		Если ИзображенныйБанковскийПродукт.БанкДоступен Тогда
		
			ИзображенныйБанковскийПродукт.Отметка = НоваяОтметка;
			ТекущиеОтметкиСнятыеПользователем.Вставить(ИзображенныйБанковскийПродукт.Банк, (НоваяОтметка = Ложь));

			СуффиксГруппы = Формат(ИзображенныйБанковскийПродукт.НомерГруппы, "ЧГ=");
			
			ЭтотОбъект["ДоступныйБанкОтметка" + СуффиксГруппы] = НоваяОтметка;
		КонецЕсли;
	КонецЦикла;
	ОтметкиСнятыеПользователем = Новый ФиксированноеСоответствие(ТекущиеОтметкиСнятыеПользователем);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыбранныеБанки(ОбъектЗаявки)

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	ОбъектЗаявки.Банки.Очистить();

	Для каждого ИзображенныйБанковскийПродукт Из ИзображенныеБанковскиеПродукты Цикл
		
		Если ИзображенныйБанковскийПродукт.БанкДоступен И ИзображенныйБанковскийПродукт.Отметка Тогда
		
			НоваяСтрока      = ОбъектЗаявки.Банки.Добавить();
			НоваяСтрока.Банк = ИзображенныйБанковскийПродукт.Банк;
			НоваяСтрока.ИдентификаторПродукта = ИзображенныйБанковскийПродукт.ИдентификаторПродукта;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтатистикаПоБанкам()

	Результат = Новый Структура();
	Результат.Вставить("КоличествоОтмеченных", 0);
	Результат.Вставить("КоличествоДоступных",  0);

	// Переносим данные из реквизитов формы в документ.
	СведенияОБанках = СведенияОБанках();

	Для каждого СтрокаТаблицы Из СведенияОБанках Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГруппы) Тогда
			// Банк не доступен для выбора.
			Продолжить;
		КонецЕсли;
		
		Результат.КоличествоДоступных = Результат.КоличествоДоступных + 1;
		
		ОтметкаБанка = ЭтотОбъект["ДоступныйБанкОтметка" + Формат(СтрокаТаблицы.НомерГруппы, "ЧГ=")];
		Если ОтметкаБанка Тогда
			Результат.КоличествоОтмеченных = Результат.КоличествоОтмеченных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗапомнитьЧтоПользовательИзменилОтметкуБанка(НомерГруппы, НоваяОтметкаБанка)
	
	ОтборПоНомеруГруппы = Новый Структура("НомерГруппы", НомерГруппы);

	ИзображеннаяСтрокаМассив = ИзображенныеБанковскиеПродукты.НайтиСтроки(ОтборПоНомеруГруппы);
	
	Если ИзображеннаяСтрокаМассив.Количество() > 0 Тогда
		ИзображеннаяСтрока = ИзображеннаяСтрокаМассив[0];
		ИзображеннаяСтрока.Отметка = НоваяОтметкаБанка;
		
		ТекущиеОтметкиСнятыеПользователем = Новый Соответствие(ОтметкиСнятыеПользователем);
		ТекущиеОтметкиСнятыеПользователем.Вставить(ИзображеннаяСтрока.Банк, (НоваяОтметкаБанка = Ложь));
		ОтметкиСнятыеПользователем = Новый ФиксированноеСоответствие(ТекущиеОтметкиСнятыеПользователем);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеСведенияОБанках(СведенияОБанках)

	Если ЭтоАдресВременногоХранилища(БанкиАдресХранилища) Тогда
		// Размещаем по ранее полученному адресу.
		БанкиАдресХранилища = ПоместитьВоВременноеХранилище(СведенияОБанках, БанкиАдресХранилища);
	Иначе
		// Первая инициализация адреса хранилища.
		БанкиАдресХранилища = ПоместитьВоВременноеХранилище(СведенияОБанках, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоказатели

&НаСервере
Процедура ЗаписатьДополнительныеПоказатели(ОбъектЗаявки)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЗаявки.ДополнительныеПоказатели.Очистить();
	ОтборПоПризнаку = Новый Структура("ЭтоФайл", Ложь);
	Получатели = ОбъектЗаявки.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоПризнаку);
	Для Каждого Получатель Из Получатели Цикл
		ОбъектЗаявки.ПолучателиДополнительнойИнформации.Удалить(Получатель);
	КонецЦикла;
	
	ДополнительныеПоказатели = ПолучитьДополнительныеПоказатели();
	
	Если ДополнительныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючСтроки = 0;
	Для каждого Показатель Из ДополнительныеПоказатели Цикл

		КлючСтроки = КлючСтроки + 1;
		ИмяРеквизитаПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
		ЗначениеПоказателя = ЭтотОбъект[ИмяРеквизитаПоказателя];
		
		НоваяСтрокаПоказатель = ОбъектЗаявки.ДополнительныеПоказатели.Добавить();
		НоваяСтрокаПоказатель.КлючСтрокиПоказателя = КлючСтроки;
		НоваяСтрокаПоказатель.Идентификатор = Показатель.Идентификатор;
		
		Если Показатель.Обязательный Тогда
			НоваяСтрокаПоказатель.Значение = ЗначениеПоказателя;
			НоваяСтрокаПоказатель.ДанныеОтсутствуют = Ложь;
		Иначе
			ИмяПереключателяПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаПоказателя);
			ПоказательУказан = ЭтотОбъект[ИмяПереключателяПоказателя];
			НоваяСтрокаПоказатель.ДанныеОтсутствуют = НЕ ПоказательУказан;
			Если ПоказательУказан Тогда
				НоваяСтрокаПоказатель.Значение = ЗначениеПоказателя;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Банк Из Показатель.Банки Цикл
			НоваяСтрокаПолучатель = ОбъектЗаявки.ПолучателиДополнительнойИнформации.Добавить();
			НоваяСтрокаПолучатель.КлючСтрокиДопИнформации = КлючСтроки;
			НоваяСтрокаПолучатель.Банк = Банк;
			НоваяСтрокаПолучатель.ЭтоФайл = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительныеПоказатели()
	
	Если ЭтоАдресВременногоХранилища(ДополнительныеПоказателиАдресХранилища) Тогда
		ДополнительныеПоказатели = ПолучитьИзВременногоХранилища(ДополнительныеПоказателиАдресХранилища);
	Иначе
		ДополнительныеПоказатели = УниверсальныйОбменСБанкамиФормы.НовыйТаблицаДополнительныеПоказатели();
		ДополнительныеПоказателиАдресХранилища = ПоместитьВоВременноеХранилище(ДополнительныеПоказатели, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ДополнительныеПоказатели;
	
КонецФункции

&НаСервере
Процедура НастроитьДополнительныеПоказатели()
	
	Если ДополнительныеПоказателиАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	ИдентификаторыПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "ИдентификаторПродукта", Истина);
	
	ДополнительныеПоказатели = ПолучитьДополнительныеПоказатели();
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	ТребуемыеПоказатели = Документы.ЗаявкаНаОткрытиеСчета.ТребуемыеДополнительныеПоказатели(
		СервисОбменаСБанками, Объект.Дата, Банки, ИдентификаторыПродуктов);
	
	// Изменение состава показателей и реквизитов формы.
	ДобавляемыеПоказатели = Новый Массив;
	ДобавляемыеРеквизитыФормы = Новый Массив;
	Для каждого ТребуемыйПоказатель Из ТребуемыеПоказатели Цикл
		СуществующийПоказатель = ДополнительныеПоказатели.Найти(ТребуемыйПоказатель.Идентификатор, "Идентификатор");
		Если СуществующийПоказатель = Неопределено Тогда
			ДобавляемыеПоказатели.Добавить(ТребуемыйПоказатель);
			
			НовыйПоказатель = ДополнительныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПоказатель, ТребуемыйПоказатель);
			
			НовыеРеквизиты = УниверсальныйОбменСБанкамиФормы.ПолучитьДобавляемыеРеквизитыФормы(НовыйПоказатель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавляемыеРеквизитыФормы, НовыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеПоказатели = Новый Массив;
	УдаляемыеРеквизитыФормы = Новый Массив;
	Для каждого Показатель Из ДополнительныеПоказатели Цикл
		Если ТребуемыеПоказатели.Найти(Показатель.Идентификатор, "Идентификатор") = Неопределено Тогда
			УдаляемыеПоказатели.Добавить(Показатель);
			
			УдяляемыеРеквизиты = УниверсальныйОбменСБанкамиФормы.ПолучитьУдаляемыеРеквизитыФормы(Показатель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеРеквизитыФормы, УдяляемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Показатель Из УдаляемыеПоказатели Цикл
		ДополнительныеПоказатели.Удалить(ДополнительныеПоказатели.Индекс(Показатель));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы, УдаляемыеРеквизитыФормы);
	
	УниверсальныйОбменСБанкамиФормы.ИнициализироватьДобавляемыеРеквизитыФормы(ЭтотОбъект, ДобавляемыеПоказатели);
	
	// Отрисовка элементов формы.
	ДополнительныеПоказатели.Сортировать("Обязательный Убыв, КраткоеПредставление");
	
	УниверсальныйОбменСБанкамиФормы.УдалитьПодчиненныеЭлементы(ЭтотОбъект, Элементы.ГруппаДополнительныеПоказателиЮЛ.ПодчиненныеЭлементы);
	УниверсальныйОбменСБанкамиФормы.УдалитьПодчиненныеЭлементы(ЭтотОбъект, Элементы.ГруппаДополнительныеПоказателиИП.ПодчиненныеЭлементы);
	
	ГруппаЭлементов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		Элементы.ГруппаДополнительныеПоказателиИП,
		Элементы.ГруппаДополнительныеПоказателиЮЛ);
	
	КоличествоРазличныхБанков = УниверсальныйОбменСБанкамиФормы.КоличествоРазличныхБанковТребующихПоказатели(ДополнительныеПоказатели);
	ГруппаЭлементов.Заголовок = ?(КоличествоРазличныхБанков = 1,
		СтрШаблон(НСтр("ru='Дополнительная информация для %1'"), ДополнительныеПоказатели[0].Банки[0]),
		НСтр("ru='Дополнительная информация для отдельных получателей заявки'"));
	
	ОбязательныеПоказатели = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Обязательный", Истина));
	НеобязательныеПоказатели = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Обязательный", Ложь));
	
	Для каждого Показатель Из ОбязательныеПоказатели Цикл	
		
		УниверсальныйОбменСБанкамиФормы.ДобавитьПоле(ЭтотОбъект, ГруппаЭлементов, Показатель,
			?(КоличествоРазличныхБанков > 1, ПредставлениеБанковДополнительногоПоказателя(Показатель.Банки), Неопределено));
				
	КонецЦикла;
			
	Если НеобязательныеПоказатели.Количество() > 0 Тогда
		ГруппаПоказателей = УниверсальныйОбменСБанкамиФормы.ДобавитьГруппуНеобязательныхДополнительныхПоказателей(ЭтотОбъект, ГруппаЭлементов);
		
		Для каждого Показатель Из НеобязательныеПоказатели Цикл
			УниверсальныйОбменСБанкамиФормы.ДобавитьПоле(ЭтотОбъект, ГруппаПоказателей, Показатель,
				?(КоличествоРазличныхБанков > 1, ПредставлениеБанковДополнительногоПоказателя(Показатель.Банки), Неопределено));
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значений показателей из сохраненных данных.
	// Производится только один раз в сеансе работы с формой.
	Если НЕ ДополнительныеПоказателиПрочитаны Тогда
		Для каждого Показатель Из ДополнительныеПоказатели Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Показатель.Идентификатор);
			НайденныеСтроки = Объект.ДополнительныеПоказатели.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ИмяРеквизитаПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
				НайденныйПоказатель = НайденныеСтроки[0];
				ЗначениеПоказателя = НайденныеСтроки[0].Значение;
				
				ЭтотОбъект[ИмяРеквизитаПоказателя] = ЗначениеПоказателя;
				
				Если УниверсальныйОбменСБанкамиФормы.ИспользоватьФормуВыбораПеречисления(Показатель) Тогда
					ИмяПредставленияПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизитаПоказателя);
					НайденноеЗначение = Показатель.ЗначенияПеречисления.Найти(ЗначениеПоказателя, "Идентификатор");
					Если НайденноеЗначение <> Неопределено Тогда
						ЭтотОбъект[ИмяПредставленияПоказателя] = НайденноеЗначение.КраткоеПредставление;
					Иначе
						ЭтотОбъект[ИмяПредставленияПоказателя] = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Показатель.Обязательный Тогда
					ИмяПереключателяПоказателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаПоказателя);
					ЭтотОбъект[ИмяПереключателяПоказателя] = НЕ НайденныйПоказатель.ДанныеОтсутствуют;
					Элементы[ИмяРеквизитаПоказателя].Видимость = ЭтотОбъект[ИмяПереключателяПоказателя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДополнительныеПоказателиПрочитаны = Истина;
	КонецЕсли;
	
	ДополнительныеПоказателиАдресХранилища = ПоместитьВоВременноеХранилище(ДополнительныеПоказатели, УникальныйИдентификатор);
	
	ДополнительныеПоказателиАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеБанковДополнительногоПоказателя(Банки)
	
	Возврат ?(Банки.Количество() > 1,
		Новый ФорматированнаяСтрока(
			НСтр("ru='Показатель'"),
			" ",
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru=';требует;;требуют;требуют;требуют'"),
				Банки.Количество()
			),
			" ",
			Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru=';%1 партнер сервиса;;%1 партнера сервиса;%1 партнеров сервиса;%1 партнеров сервиса'"),
					Банки.Количество()
				),,,,
				СтрШаблон("ПолучателиОтчета:%1", СтрСоединить(Банки, УниверсальныйОбменСБанкамиФормыКлиентСервер.РазделительЭлементовСтроки()))
			)
		),
		Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Показатель требует %1'"), Банки[0]))
	);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПеречисления(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.НачалоВыбораПеречисления(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПеречисления(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ВыборПеречисления(ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПеречисления(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.АвтоПодборПеречисления(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаПеречисления(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОкончаниеВводаТекстаПеречисления(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПеречисления(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбработкаВыбораПеречисления(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаПеречисления(Элемент, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОчисткаПеречисления(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПереключателяДополнительногоПоказателя(Элемент) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ПриИзмененииПереключателяДополнительногоПоказателя(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоПоказателя(Элемент) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбновитьПереключательДополнительногоПоказателя(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиДополнительногоПоказателя(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеФайлы

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСНомеромВГруппе(Идентификатор, НомерВГруппе)
	
	Если Не ЗначениеЗаполнено(НомерВГруппе) Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Возврат Идентификатор + Формат(НомерВГруппе, "ЧГ=0");
	
КонецФункции

&НаСервере
Процедура НастроитьДополнительныеФайлы()
	
	Если ДополнительныеФайлыАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	ИдентификаторыПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "ИдентификаторПродукта", Истина);
	
	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	ТребуемыеФайлы = ОписаниеДополнительныхФайлов.Выгрузить().СкопироватьКолонки();
	Документы.ЗаявкаНаОткрытиеСчета.ТребуемыеДополнительныеФайлы(
		СервисОбменаСБанками, Объект.Дата, Банки, ИдентификаторыПродуктов, ТребуемыеФайлы);
		
	ОбновитьОписаниеДополнительныхФайлов(ТребуемыеФайлы);
	
	ОбновитьСписокРеквизитовФормыПоОписаниямФайлов();
	
	ДобавитьЭлементыФормыПоОписаниямФайлов();
	
	ДополнительныеФайлыАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеДополнительныхФайлов(ТребуемыеФайлы)
	
	// На основании списка описаний файлов, полученного из настроек (характеристики банков из сервиса), мы должны подготовить таблицы:
	// * ОписаниеДополнительныхФайлов - реквизит формы, хранящий сведения для построения элементов формы, связанных с дополнительными файлами.
	// * Объект.ДополнительныеФайлы - хранит ссылки на присоединенные файлы.
	// * Объект.ПолучателиДополнительнойИнформации - хранит список банков-получателей для каждого файла.
	//
	// Может быть две ситуации:
	// 1) первоначальное заполнение при открытии формы;
	// 2) обновление настроек после изменения списка получателей.
	
	ТребуемыеФайлы.Индексы.Добавить("Идентификатор");
	
	ВосстановитьОписания = Ложь;
	Если Объект.ДополнительныеФайлы.Количество() > 0
	   И ОписаниеДополнительныхФайлов.Количество() = 0 Тогда
	   
		ВосстановитьОписания = Истина;
		
	КонецЕсли;
	
	ДопФайл = Неопределено;
	МаксимальныйКлюч = 0;
	ОтборПоИдентификатору = Новый Структура("Идентификатор", "");
	Для Каждого СохраненныйДопФайл Из Объект.ДополнительныеФайлы Цикл
		
		МаксимальныйКлюч = Макс(МаксимальныйКлюч, СохраненныйДопФайл.КлючСтрокиФайла);
		
		Если ОтборПоИдентификатору.Идентификатор = СохраненныйДопФайл.Идентификатор Тогда
			// Нужны только первые из ключей в группе файлов по одному идентификатору.
			Если ВосстановитьОписания Тогда
				ДопФайл.Количество = ДопФайл.Количество + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Переносим ключи строк из сохраненных значений.
		ОтборПоИдентификатору.Идентификатор = СохраненныйДопФайл.Идентификатор;
		ОписаниеДопФайла = ТребуемыеФайлы.НайтиСтроки(ОтборПоИдентификатору);
		Если ОписаниеДопФайла.Количество() <> 0 Тогда
			ОписаниеДопФайла[0].КлючСтрокиФайла = СохраненныйДопФайл.КлючСтрокиФайла;
		КонецЕсли;
		
		Если Не ВосстановитьОписания Тогда
			Продолжить;
		КонецЕсли;
		
		// Восстанавливаем ранее существовавшие описания.
		ДопФайл = ОписаниеДополнительныхФайлов.Добавить();
		ДопФайл.КлючСтрокиФайла      = СохраненныйДопФайл.КлючСтрокиФайла;
		ДопФайл.Идентификатор        = СохраненныйДопФайл.Идентификатор;
		ДопФайл.Обязательный         = Не СохраненныйДопФайл.ДанныеОтсутствуют; // по-умолчанию
		ДопФайл.Количество           = 1;
		
	КонецЦикла;
	
	// Обрабатываем добавляемые или удаляемые описания файлов.
	МаксимальныйКлюч = МаксимальныйКлюч + 1;
	Для Каждого ДопФайл Из ТребуемыеФайлы Цикл
		
		ОтборПоИдентификатору.Идентификатор = ДопФайл.Идентификатор;
		ИсточникиКлючей = ОписаниеДополнительныхФайлов.НайтиСтроки(ОтборПоИдентификатору);
		Если ИсточникиКлючей.Количество() = 0 Тогда // присваиваем новый ключ строки
			
			ДопФайл.КлючСтрокиФайла = МаксимальныйКлюч; // первый из диапазона, определяемого от Количество
			
			Для инд = 1 По ДопФайл.Количество Цикл
				
				НовСтр = Объект.ДополнительныеФайлы.Добавить();
				НовСтр.ДанныеОтсутствуют    = Ложь;
				НовСтр.КлючСтрокиФайла      = МаксимальныйКлюч;
				НовСтр.Идентификатор        = ДопФайл.Идентификатор;
				
				МаксимальныйКлюч = МаксимальныйКлюч + 1;
				
			КонецЦикла;
			
		ИначеЕсли ИсточникиКлючей[0].Количество < ДопФайл.Количество Тогда
			// Диапазон ключей для этого доп.файла нужно расширить. Делаем это, перенося в конец таблицы, где они хранятся.
			
			ДопФайл.КлючСтрокиФайла = МаксимальныйКлюч; // первый из диапазона, определяемого от Количество
			
			СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
			СохранитьРанееВведенные = (ВосстановитьОписания Или ДопФайл.Приоритет <= ИсточникиКлючей[0].Приоритет);
			КоличествоСохраненных = СохраненныеДопФайлы.Количество();
			ПризнакДанныеОтсутствуют = СохранитьРанееВведенные И КоличествоСохраненных > 0
									И Не ДопФайл.Обязательный И СохраненныеДопФайлы[0].ДанныеОтсутствуют;
			
			Для инд = 1 По ДопФайл.Количество Цикл
				
				НовСтр = Объект.ДополнительныеФайлы.Добавить();
				НовСтр.ДанныеОтсутствуют    = ПризнакДанныеОтсутствуют;
				НовСтр.КлючСтрокиФайла      = МаксимальныйКлюч;
				НовСтр.Идентификатор        = ДопФайл.Идентификатор;
				Если инд <= КоличествоСохраненных Тогда
					
					Если СохранитьРанееВведенные Тогда
						СохраненныйДопФайл = СохраненныеДопФайлы[инд - 1];
						НовСтр.ДанныеОтсутствуют = Не ДопФайл.Обязательный И СохраненныйДопФайл.ДанныеОтсутствуют;
						НовСтр.Значение = СохраненныйДопФайл.Значение;
					КонецЕсли;
					
					Объект.ДополнительныеФайлы.Удалить(СохраненныйДопФайл);
					
				КонецЕсли;
				
				МаксимальныйКлюч = МаксимальныйКлюч + 1;
				
			КонецЦикла;
			
		Иначе // нужно лишь скопировать КлючСтрокиПоказателя из имеющихся в ТребуемыеФайлы
			
			// Мы это уже сделали в самом начале процедуры, перенеся из "Объект.ДополнительныеФайлы". Если при отладке здесь ключи разные,
			// то произошла коллизия между ДополнительныеФайлы и ОписаниеДополнительныхФайлов. Однако исключение ради этого вызывать не будем.
			ДопФайл.КлючСтрокиФайла = ИсточникиКлючей[0].КлючСтрокиФайла;
			
			// Возможно более приоритетная настройка содержит более строгие требования. Предложим пользователю перезаполнить.
			ОчиститьЗначения = (Не ВосстановитьОписания И ДопФайл.Приоритет > ИсточникиКлючей[0].Приоритет);
			
			СохраненныеДопФайлы = Неопределено;
			Если ДопФайл.Обязательный И Не ИсточникиКлючей[0].Обязательный // файл стал обязательным
			 Или ОчиститьЗначения Тогда // все значения будут очищены

				СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
				Для Каждого СохраненныйДопФайл Из СохраненныеДопФайлы Цикл
					
					СохраненныйДопФайл.ДанныеОтсутствуют = Ложь;
					Если ОчиститьЗначения Тогда
						СохраненныйДопФайл.Значение = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИсточникиКлючей[0].Количество > ДопФайл.Количество Тогда
				// Удалим лишние.
				Если СохраненныеДопФайлы = Неопределено Тогда
					СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
				КонецЕсли;
				Если СохраненныеДопФайлы.Количество() > 0 Тогда
					Для инд = ДопФайл.Количество По ИсточникиКлючей[0].Количество - 1 Цикл
						Объект.ДополнительныеФайлы.Удалить(СохраненныеДопФайлы[инд]);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Обновляем список банков-получателей.
		Если ИсточникиКлючей.Количество() = 0 Тогда
			
			Для Каждого БанкПолучатель Из ДопФайл.Банки Цикл
				
				НовСтр = Объект.ПолучателиДополнительнойИнформации.Добавить();
				НовСтр.ЭтоФайл = Истина;
				НовСтр.КлючСтрокиДопИнформации = ДопФайл.КлючСтрокиФайла;
				НовСтр.Банк = БанкПолучатель.Значение;
				
			КонецЦикла;
			
		Иначе
			
			ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ИсточникиКлючей[0].КлючСтрокиФайла, Истина);
			СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
			
			// Удаляем те, которые теперь отсутствуют.
			инд = СохраненныеПолучатели.Количество();
			Пока Инд > 0 Цикл
				
				инд = инд - 1;
				БанкПолучатель = СохраненныеПолучатели[инд];
				Если ДопФайл.Банки.НайтиПоЗначению(БанкПолучатель.Банк) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Объект.ПолучателиДополнительнойИнформации.Удалить(БанкПолучатель);
				СохраненныеПолучатели.Удалить(инд);
				
			КонецЦикла;
			
			// Добавляем те, которые появились.
			Для Каждого БанкДопФайла Из ДопФайл.Банки Цикл
					
				БанкПолучательУжеЕсть = Ложь;
				Для Каждого БанкПолучатель Из СохраненныеПолучатели Цикл
					Если БанкПолучатель.Банк = БанкДопФайла.Значение Тогда
						БанкПолучательУжеЕсть = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если БанкПолучательУжеЕсть Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтр = Объект.ПолучателиДополнительнойИнформации.Добавить();
				НовСтр.ЭтоФайл = Истина;
				НовСтр.КлючСтрокиДопИнформации = ДопФайл.КлючСтрокиФайла;
				НовСтр.Банк = БанкДопФайла.Значение;
				
			КонецЦикла;
			
			// Удаляем из исходной таблицы строки, которые уже обработаны. Целевой таблицей сейчас является ТребуемыеФайлы.
			// Затем ИсточникиКлючей будет полностью перезаполнена из ТребуемыеФайлы.
			Для Каждого СохраненныйДопФайл Из ИсточникиКлючей Цикл
				ОписаниеДополнительныхФайлов.Удалить(СохраненныйДопФайл);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем ключи строк, которые уже не будут использоваться.
	ОтборПоКлючуИПризнаку = Новый Структура("ЭтоФайл, КлючСтрокиДопИнформации", Истина);
	КоличествоДопФайлов = ОписаниеДополнительныхФайлов.Количество();
	Для инд = 1 По КоличествоДопФайлов Цикл
		
		ДопФайл = ОписаниеДополнительныхФайлов[0];
		ОтборПоИдентификатору.Идентификатор = ДопФайл.Идентификатор;
		
		СохраненныеДопФайлы = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоИдентификатору);
		Для Каждого СохраненныйДопФайл Из СохраненныеДопФайлы Цикл
			
			Объект.ДополнительныеФайлы.Удалить(СохраненныйДопФайл);
			
			ОтборПоКлючуИПризнаку.КлючСтрокиДопИнформации = СохраненныйДопФайл.КлючСтрокиФайла;
			СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючуИПризнаку);
			Для Каждого БанкПолучатель Из СохраненныеПолучатели Цикл
				Объект.ПолучателиДополнительнойИнформации.Удалить(БанкПолучатель);
			КонецЦикла;
			
		КонецЦикла; 
		
		ОписаниеДополнительныхФайлов.Удалить(0);
		
	КонецЦикла;
	
	ОписаниеДополнительныхФайлов.Загрузить(ТребуемыеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРеквизитовФормыПоОписаниямФайлов()
	
	// Получим список реквизитов формы-флажков для необязательных файлов.

	ПроверенныеФлаги = Новый Структура;
	ПроверенныеЭлементы = Новый Структура;
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		// Хранить название действия.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
		ПроверенныеЭлементы.Вставить(ИмяЭлемента);
		Для НомерВГруппе = 1 По ДопФайл.Количество - 1 Цикл
			
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ПроверенныеЭлементы.Вставить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизитаСНомером));
			
		КонецЦикла;
		
		// Хранить значение флага.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
		// Создаем реквизиты даже для флагов обязательных файлов, чтобы было к чему привязать невидимые элементы-флаги.
		ПроверенныеФлаги.Вставить(ИмяЭлемента);
		ПроверенныеЭлементы.Вставить(ИмяЭлемента);
		Для НомерВГруппе = 2 По ДопФайл.Количество - 1 Цикл
			
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ПроверенныеЭлементы.Вставить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизитаСНомером));
			
		КонецЦикла;
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ПроверенныеФлаги, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПроверенныеЭлементы, ЭтотОбъект);
	
	СуффиксПереключателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя("");
	СуффиксДействия = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия("");
	
	ДобавляемыеИдентификаторы = Новый Массив;
	Для Каждого ИмяЭлемента Из ПроверенныеЭлементы Цикл
		Если ИмяЭлемента.Значение = Неопределено
		   И СтрЗаканчиваетсяНа(ИмяЭлемента.Ключ, СуффиксДействия) Тогда
			ДобавляемыеИдентификаторы.Добавить(
				Новый РеквизитФормы(
					ИмяЭлемента.Ключ, Новый ОписаниеТипов("Строка"), ,, Истина));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИмяЭлемента Из ПроверенныеФлаги Цикл
		Если ИмяЭлемента.Значение = Неопределено Тогда
			ДобавляемыеИдентификаторы.Добавить(
				Новый РеквизитФормы(
					ИмяЭлемента.Ключ, Новый ОписаниеТипов("Булево"), ,, Истина));
		КонецЕсли;
	КонецЦикла;		
	
	УдаляемыеИдентификаторы = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	ПрефиксЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла("");
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		ИмяЭлемента = ЭлементФормы.Имя;
		Если Не СтрНачинаетсяС(ИмяЭлемента, ПрефиксЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЗаканчиваетсяНа(ИмяЭлемента, СуффиксДействия) Тогда
			// Реквизит для действия есть всегда, когда нужен файл. Именно по его отсутствию добавляем элементы в группу удаляемых.
			Если ПроверенныеЭлементы.Свойство(ИмяЭлемента) Тогда
				Продолжить;
			КонецЕсли;
			
			УдаляемыеИдентификаторы.Добавить(ИмяЭлемента);
			
			УдаляемаяГруппа = ЭлементФормы.Родитель;
			Для Каждого ЭлементГруппы Из УдаляемаяГруппа.ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементГруппы);
			КонецЦикла;
			УдаляемыеЭлементы.Добавить(УдаляемаяГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого ЭлементГруппы Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(ЭлементГруппы);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеИдентификаторы, УдаляемыеИдентификаторы);
	
	// Проставляем ранее сохраненные значения.
	Для Каждого ДобавленныйРеквизит Из ДобавляемыеИдентификаторы Цикл
		
		Если СтрЗаканчиваетсяНа(ДобавленныйРеквизит.Имя, СуффиксДействия) Тогда
			ЭтотОбъект[ДобавленныйРеквизит.Имя] = НСтр("ru = 'Выбрать'");
		ИначеЕсли СтрЗаканчиваетсяНа(ДобавленныйРеквизит.Имя, СуффиксПереключателя) Тогда
			ЭтотОбъект[ДобавленныйРеквизит.Имя] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	ПредыдущийИдентификатор = "";
	Для Каждого ДопФайл Из Объект.ДополнительныеФайлы Цикл
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			
			НомерВГруппе = НомерВГруппе + 1;
			ИмяРеквизитаСНомером = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизитаСНомером);
			
		Иначе
			
			НомерВГруппе = 0;
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
			
		КонецЕсли;
		Если ПроверенныеЭлементы.Свойство(ИмяЭлемента) Тогда
			ЭтотОбъект[ИмяЭлемента] = ?(ДопФайл.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайл.Значение), НСтр("ru = 'Выбрать'"), НСтр("ru = 'Открыть'"));
		КонецЕсли;
		
		Если ПредыдущийИдентификатор = ДопФайл.Идентификатор Тогда
			// Нужны только первые из ключей в группе файлов по одному идентификатору.
			Продолжить;
		КонецЕсли;
		ПредыдущийИдентификатор = ДопФайл.Идентификатор;
		
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
		
		Если ПроверенныеФлаги.Свойство(ИмяЭлемента) Тогда
			ЭтотОбъект[ИмяЭлемента] = Не ДопФайл.ДанныеОтсутствуют;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыПоОписаниямФайлов()
	
	// Ранее были удалены лишние реквизиты и элементы, а также добавлены новые реквизиты для флажков необязательных файлов.
	// Остается только добавить элементы формы для доп.файлов.
	
	ГруппаДляПрочихДопФайлов = ?(Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		Элементы.ГруппаДополнительныеФайлыИП, Элементы.ГруппаДополнительныеФайлыЮЛ);
		
	БанкиПолучатели = Объект.ПолучателиДополнительнойИнформации.Выгрузить(Новый Структура("ЭтоФайл", Истина), "Банк");
	БанкиПолучатели.Свернуть("Банк");
	ГруппаДляПрочихДопФайлов.Заголовок = ?(БанкиПолучатели.Количество() = 1,
		СтрШаблон(НСтр("ru='Дополнительные файлы для %1'"), БанкиПолучатели[0].Банк),
		НСтр("ru='Дополнительные файлы для отдельных получателей заявки'"));
		
	// Анализируем, есть ли необязательные файлы среди выводящихся в списке.
	ДелатьОтступыПередОписанием = Ложь;
	Если Не ТолькоПросмотр Тогда
		Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
			
			Если ДопФайл.Обязательный Тогда // обязательный файл не требует отступа
				Продолжить;
			КонецЕсли;
			
			ДелатьОтступыПередОписанием = Не ДопФайл.Предопределенный;
			Если ДелатьОтступыПередОписанием Тогда // нашли файл, для которого нужен флаг или отступ
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОтборПоКлючуСтроки = Новый Структура("КлючСтрокиФайла");
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		
		ГруппаРодительДопФайлов = ГруппаДляПрочихДопФайлов;
		
		ОтборПоКлючуСтроки.КлючСтрокиФайла = ДопФайл.КлючСтрокиФайла;
		ДопФайлЗначения = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоКлючуСтроки);
		ДопФайлЗначение = ?(ДопФайлЗначения.Количество() = 0,
			Новый Структура("ДанныеОтсутствуют,Значение", Истина, Неопределено), ДопФайлЗначения[0]);
		Если ТолькоПросмотр
		   И (ДопФайлЗначение.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Группа для строки элементов.
		ИмяЭлемента = "Группа" + ДопФайл.Идентификатор;
		ГруппаЭлементов = Элементы.Найти(ИмяЭлемента);
		Если ГруппаЭлементов = Неопределено Тогда
			ГруппаЭлементов = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаРодительДопФайлов);
		КонецЕсли;
		ГруппаЭлементов.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Отображение          = ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементов.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ГруппаЭлементов.Видимость = Истина;
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ДопФайл.Идентификатор);
		
		ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяРеквизита, ДопФайл, ДопФайлЗначение, Истина, ДелатьОтступыПередОписанием);
		
		Если ДопФайл.Количество < 2 Или ДопФайлЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ДопФайлЗначение);
		Для НомерВГруппе = 1 По ДопФайл.Количество - 1 Цикл
			
			ДопФайлЗначение = Объект.ДополнительныеФайлы[ИндексЗначения + НомерВГруппе];
			Если ТолькоПросмотр
			   И (ДопФайлЗначение.ДанныеОтсутствуют Или Не ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
				Продолжить;
			КонецЕсли;
			
			// Группа для строки элементов.
			ИмяЭлемента = ИдентификаторСНомеромВГруппе("Группа" + ДопФайл.Идентификатор, НомерВГруппе);
			ГруппаЭлементов = Элементы.Найти(ИмяЭлемента);
			Если ГруппаЭлементов = Неопределено Тогда
				ГруппаЭлементов = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаРодительДопФайлов);
			КонецЕсли;
			ГруппаЭлементов.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементов.Отображение          = ОтображениеОбычнойГруппы.Нет;
			ГруппаЭлементов.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементов.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			
			ГруппаЭлементов.Видимость = (ДопФайл.Обязательный Или Не ДопФайлЗначение.ДанныеОтсутствуют);			
			ИмяЭлемента = ИдентификаторСНомеромВГруппе(ИмяРеквизита, НомерВГруппе);
			ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяЭлемента, ДопФайл, ДопФайлЗначение, Ложь, ДелатьОтступыПередОписанием);
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлВНаборе(ГруппаЭлементов, ИмяРеквизита, ДопФайл, ДопФайлЗначение, ПервыйВГруппе, ДелатьОтступыПередОписанием)
	
	ШиринаПредставления = 17;
	ШиринаПереключателя = 2;
	ШиринаОписания      = 7;
	ШиринаДействия      = 6;
	ШиринаЗаглушки      = 1;
	ШиринаШаблона       = ?(ПервыйВГруппе, 11, 5);

	// Краткое представление доп.файла.
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
	НужныйЭлемент.Ширина    = ШиринаПредставления;
	НужныйЭлемент.Заголовок = ?(ПервыйВГруппе, ДопФайл.КраткоеПредставление, "");
	
	Если Не ТолькоПросмотр Тогда
		// Переключатель или пустота. Создаем оба элемента, но видим будет только один.
		Если ПервыйВГруппе Тогда
			
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
			НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
			Если НужныйЭлемент = Неопределено Тогда
				НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
				НужныйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				НужныйЭлемент.ПутьКДанным = ИмяЭлемента;
			КонецЕсли;
			НужныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НужныйЭлемент.УстановитьДействие("ПриИзменении", "ДополнительныйФайл_ПереключательПриИзменении");
			НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			НужныйЭлемент.Видимость = Не ДопФайл.Обязательный И (ДелатьОтступыПередОписанием Или ДопФайл.Предопределенный);
			Если НужныйЭлемент.Видимость Тогда
				ЭтотОбъект[ИмяЭлемента] = Не ДопФайлЗначение.ДанныеОтсутствуют;
			КонецЕсли;	
			
		КонецЕсли;
		
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита + "Отбивка");
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
			НужныйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		КонецЕсли;
		НужныйЭлемент.Ширина = ШиринаПереключателя;
		Если ПервыйВГруппе Тогда
			НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		НужныйЭлемент.Видимость = ДелатьОтступыПередОписанием И (Не ПервыйВГруппе Или ДопФайл.Обязательный);
			
	КонецЕсли;
	
	// Описание
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОписания(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид         = ВидДекорацииФормы.Надпись;
	НужныйЭлемент.Ширина      = ШиринаОписания;
	НужныйЭлемент.Заголовок   = ?(ПервыйВГруппе, "Описание", "");
	НужныйЭлемент.ГоризонтальноеПоложение = ?(ТолькоПросмотр Или ДопФайл.Обязательный Или Не ПервыйВГруппе,
		ГоризонтальноеПоложениеЭлемента.Лево, ГоризонтальноеПоложениеЭлемента.Центр);
	Если ПервыйВГруппе Тогда
		
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ОписаниеНажатие");
	
	КонецЕсли;
	
	ВидимостьЭлементов = ПервыйВГруппе И (ДопФайл.Обязательный Или Не ДопФайлЗначение.ДанныеОтсутствуют);
	
	// Действие
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
		НужныйЭлемент.Вид         = ВидПоляФормы.ПолеНадписи;
		НужныйЭлемент.ПутьКДанным = ИмяЭлемента;
	КонецЕсли;
	НужныйЭлемент.АвтоМаксимальнаяШирина       = Ложь;
	НужныйЭлемент.МаксимальнаяШирина           = ШиринаДействия;
	НужныйЭлемент.Ширина                       = ШиринаДействия;
	НужныйЭлемент.Гиперссылка                  = Истина;
	НужныйЭлемент.ПоложениеЗаголовка           = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НужныйЭлемент.ГоризонтальноеПоложение = ?(ТолькоПросмотр Или ДопФайл.Обязательный Или Не ПервыйВГруппе,
		ГоризонтальноеПоложениеЭлемента.Лево, ГоризонтальноеПоложениеЭлемента.Центр);
	НужныйЭлемент.ЦветТекста              = ?(ЗначениеЗаполнено(ДопФайлЗначение.Значение), Новый Цвет, ЦветаСтиля.НезаполненныйРеквизит);
	Если ПервыйВГруппе Тогда
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ДействиеНажатие");
	НужныйЭлемент.Видимость = ВидимостьЭлементов Или Не ПервыйВГруппе;

	// Очистка
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита);
	НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НужныйЭлемент = Неопределено Тогда
		НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
	КонецЕсли;
	НужныйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
	НужныйЭлемент.Ширина      = ШиринаПереключателя;
	НужныйЭлемент.Высота      = ШиринаЗаглушки;
	Если Не ТолькоПросмотр
	   И (Не ПервыйВГруппе Или ЗначениеЗаполнено(ДопФайлЗначение.Значение)) Тогда
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.Картинка = БиблиотекаКартинок.ПолеВводаОчистить;
	Иначе	
		НужныйЭлемент.Гиперссылка = Ложь;
		НужныйЭлемент.Картинка = Новый Картинка;
	КонецЕсли;
	Если ПервыйВГруппе Тогда
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ОчисткаНажатие");
	НужныйЭлемент.Видимость = ВидимостьЭлементов
		Или Не ПервыйВГруппе И ЗначениеЗаполнено(ДопФайлЗначение.Значение);
		
	Если Не ПервыйВГруппе Тогда
		Возврат;
	КонецЕсли;
		
	// Шаблон.
	Если ЗначениеЗаполнено(ДопФайл.ИмяФайлаШаблона) Тогда
		
		// Пустота.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
		КонецЕсли;
		НужныйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
		НужныйЭлемент.Ширина    = ШиринаПереключателя;
		НужныйЭлемент.Видимость = ВидимостьЭлементов;
		
		// Ссылка на шаблон.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент = Неопределено Тогда
			НужныйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
		КонецЕсли;
		НужныйЭлемент.Вид         = ВидДекорацииФормы.Надпись;
		НужныйЭлемент.Ширина      = ШиринаШаблона;
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НужныйЭлемент.Заголовок   = "Скачать шаблон";
		НужныйЭлемент.Подсказка   = ДопФайл.ИмяФайлаШаблона;
		НужныйЭлемент.УстановитьДействие("Нажатие", "ДополнительныйФайл_ШаблонНажатие");
		НужныйЭлемент.Видимость = ВидимостьЭлементов;
		
	Иначе
		// Может быть две ситуации:
		// * В подавляющем большинстве случаев элементы формы для шаблона не создавались и не должны быть созданы.
		// * Редкая ситуация, когда на форме для этого идентификатора уже были созданы элементы для шаблона, но изменился набор банков,
		//   и согласно новым настройкам шаблон уже не нужен. Тогда мы просто скрываем элементы.
		
		// Ссылка на шаблон.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент <> Неопределено Тогда
			НужныйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		// Пустота.
		ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
		НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
		Если НужныйЭлемент <> Неопределено Тогда
			НужныйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для указанного элемента формы возращает информацию о дополнительном файле, связанном с ним.
//
// Параметры:
//  ИмяЭлемента  - элемент, связанный с доп.файлом.
//  ПолучитьЗначение - получить не только описание, но и строку таблицы, хранящей значение файла.
//
// Возвращаемое значение:
//   Структура   - описание дополнительного файла:
//                * Идентификатор - Строка - идентификатор описания файла.
//                * НомерВГруппе - Число - если по одному описанию можно ввести несколько файлов.
//                * Описание - ДанныеФормыЭлементКоллекции - строка из реквизита формы ОписаниеДополнительныхФайлов.
//                * Значение - ДанныеФормыЭлементКоллекции - строка из табличной части ДополнительныеФайлы.
//
&НаКлиенте
Функция ИнформацияОДополнительномФайле(ИмяЭлемента, ПолучитьЗначение = Ложь)
	
	ИнформацияОДопФайле = Новый Структура;
	ИнформацияОДопФайле.Вставить("Идентификатор", "");
	ИнформацияОДопФайле.Вставить("НомерВГруппе", "");
	ИнформацияОДопФайле.Вставить("Описание");
	ИнформацияОДопФайле.Вставить("Значение");
	
	// Имена элементов формы, связанных с дополнительными файлами, состоят из трех частей, разделенных "_".
	// <ПризнакФункциональности>_<ИдентификаторФайла>_<ТипЭлемента> , где:
	//  <ПризнакФункциональности> = см. УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла()
	//  <ИдентификаторФайла> = "Идентификатор" с таблице ОписаниеДополнительныхФайлов
	//  <ТипЭлемента> = см. в модуле УниверсальныйОбменСБанкамиФормыКлиентСервер функции вида "Имя..."
	
	ПозицияДоИдентификатора = СтрНайти(ИмяЭлемента, "_");
	ПозицияПослеИдентификатора = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца);
	Если ПозицияПослеИдентификатора = 0 Или ПозицияДоИдентификатора = ПозицияПослеИдентификатора Тогда
		ПозицияПослеИдентификатора = СтрДлина(ИмяЭлемента) + 1;
	КонецЕсли;

	НомерВГруппеСимволы = Новый Массив;
	Для Сдвиг = 1 По ПозицияПослеИдентификатора - ПозицияДоИдентификатора Цикл
		
		АнализируемыйСимвол = Сред(ИмяЭлемента, ПозицияПослеИдентификатора - Сдвиг, 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АнализируемыйСимвол) Тогда
			НомерВГруппеСимволы.Вставить(0, АнализируемыйСимвол);
		Иначе
			ИнформацияОДопФайле.Идентификатор = Сред(ИмяЭлемента,
											ПозицияДоИдентификатора + 1,
											ПозицияПослеИдентификатора - Сдвиг - ПозицияДоИдентификатора);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	НомерВГруппеСтрокой = СтрСоединить(НомерВГруппеСимволы);
	
	ИнформацияОДопФайле.НомерВГруппе = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерВГруппеСтрокой);
	Если ИнформацияОДопФайле.НомерВГруппе = Неопределено Тогда
		ИнформацияОДопФайле.НомерВГруппе = 0;
	КонецЕсли;
					
	Если ПустаяСтрока(ИнформацияОДопФайле.Идентификатор) Тогда
		Возврат ИнформацияОДопФайле;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура("Идентификатор", ИнформацияОДопФайле.Идентификатор);
	ОписаниеФайла = ОписаниеДополнительныхФайлов.НайтиСтроки(ОтборПоиска);
	Если ОписаниеФайла.Количество() > 0 Тогда
		ИнформацияОДопФайле.Описание = ОписаниеФайла[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Отсутствует описание вводимого файла'");
	КонецЕсли;
	
	Если Не ПолучитьЗначение Тогда
		Возврат ИнформацияОДопФайле;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура("КлючСтрокиФайла",
		ИнформацияОДопФайле.Описание.КлючСтрокиФайла + ИнформацияОДопФайле.НомерВГруппе);
	ОписаниеФайла = Объект.ДополнительныеФайлы.НайтиСтроки(ОтборПоиска);
	Если ОписаниеФайла.Количество() > 0 Тогда
		ИнформацияОДопФайле.Значение = ОписаниеФайла[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Ввод значения доп.файла не предусмотрен'");
	КонецЕсли;
	
	Возврат ИнформацияОДопФайле;
	
КонецФункции

&НаКлиенте
Процедура ДополнительныйФайл_ПереключательПриИзменении(Элемент)
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	Если ИнформацияОДопФайле.Описание.Обязательный Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя изменять доступность ввода данных для обязательного файла'");
	КонецЕсли;
	
	ДоступенВводФайла = ИнформацияОДопФайле.Значение.ДанныеОтсутствуют; // флаг на форме уже инвертирован
	
	НомерВГруппе = -1;
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение);
	Для инд = ИндексЗначения По ИндексЗначения + ИнформацияОДопФайле.Описание.Количество - 1 Цикл
		
		НомерВГруппе = НомерВГруппе + 1;
		
		ДопФайл = Объект.ДополнительныеФайлы[инд];
		ДопФайл.ДанныеОтсутствуют = Не ДоступенВводФайла;
		
		Если ДоступенВводФайла Тогда // дать возможность ввести доп.файлы по данному идентификатору
			
			Если НомерВГруппе > 0 Тогда
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе("Группа" + ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				Элементы[ИмяСНомером].Видимость = ДоступенВводФайла;
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла;
				
			Иначе // первая строка по данному файлу
				
				ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИнформацияОДопФайле.Идентификатор);
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла;
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
				НужныйЭлемент.Видимость = ДоступенВводФайла; // пустая картинка, но элемент занимает свое место
				
				Если ЗначениеЗаполнено(ИнформацияОДопФайле.Описание.ИмяФайлаШаблона) Тогда
					
					НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита)];
					НужныйЭлемент.Видимость = ДоступенВводФайла;
					
					НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита)];
					НужныйЭлемент.Видимость = ДоступенВводФайла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // скрыть ввод доп.файла и нижележащих строк
			
			ДопФайл.Значение = Неопределено;
			Модифицированность = Истина;
			
			ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
			ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
			НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
			ДополнительныйФайл_ОчисткаНажатие(НужныйЭлемент);
			
			Если НомерВГруппе > 0 Тогда
				
				ИмяСНомером = ИдентификаторСНомеромВГруппе("Группа" + ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
				Элементы[ИмяСНомером].Видимость = Ложь;
				
			Иначе // оставляем представление и описание
				
				Если ЗначениеЗаполнено(ИнформацияОДопФайле.Описание.ИмяФайлаШаблона) Тогда
					
					ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяШаблона(ИмяРеквизита);
					НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
					Если НужныйЭлемент <> Неопределено Тогда
						НужныйЭлемент.Видимость = ДоступенВводФайла;
					КонецЕсли;
					
					ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяРеквизита);
					НужныйЭлемент = Элементы.Найти(ИмяЭлемента);
					Если НужныйЭлемент <> Неопределено Тогда
						НужныйЭлемент.Видимость = ДоступенВводФайла;
					КонецЕсли;
					
				КонецЕсли;
				
				НужныйЭлемент.Видимость = Ложь; // очистка
				
				НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита)];
				НужныйЭлемент.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ОписаниеНажатие(Элемент)
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя);
	ОткрытьОписаниеПрисоединенногоФайла(ИнформацияОДопФайле.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОписаниеПрисоединенногоФайла(ОписаниеДопФайла)
	
	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");
	
	ПараметрыФормы = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыФормы.Сервис = СервисОбменаСБанками;
	ПараметрыФормы.Характеристика = ПредопределенноеЗначение("Перечисление.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ШаблоныФайлов");
	
	ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ОписаниеДопФайла.КлючСтрокиФайла, Истина);
	СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
	Для Каждого ПолучательДопФайла Из СохраненныеПолучатели Цикл
		ПараметрыФормы.Банки.Добавить(ПолучательДопФайла.Банк);
	КонецЦикла;

	ПараметрыФормы.Заголовок         = ОписаниеДопФайла.КраткоеПредставление;
	ПараметрыФормы.ПодробноеОписание = ?(ПустаяСтрока(ОписаниеДопФайла.ПодробноеПредставление),
		ОписаниеДопФайла.КраткоеПредставление, ОписаниеДопФайла.ПодробноеПредставление);
	Если Не ПустаяСтрока(ОписаниеДопФайла.ИмяФайлаШаблона) Тогда
		ПараметрыФормы.ИмяФайлаШаблона = ОписаниеДопФайла.ИмяФайлаШаблона;
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиФормыКлиент.ОткрытьОписаниеПрисоединенногоФайла(ЭтотОбъект, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ДействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	Если ЗначениеЗаполнено(ИнформацияОДопФайле.Значение.Значение) Тогда // открыть ранее введенный файл
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ИнформацияОДопФайле.Значение.Значение, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		Возврат;
		
	КонецЕсли;
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Если среди предыдущих в группе есть незаполненные, то заполняем именно их.
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение);
	ИндексПредыдущегоЗначения = ИндексЗначения - ИнформацияОДопФайле.НомерВГруппе;
	Пока ИндексПредыдущегоЗначения < ИндексЗначения Цикл
		
		Если Не ЗначениеЗаполнено(Объект.ДополнительныеФайлы[ИндексПредыдущегоЗначения].Значение) Тогда
			
			НомерВГруппе = ИндексПредыдущегоЗначения - ИндексЗначения + ИнформацияОДопФайле.НомерВГруппе;
			ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, НомерВГруппе);
			ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером));
			ИнформацияОДопФайле = ИнформацияОДополнительномФайле(ИмяЭлемента, Истина);
			Прервать;
			
		КонецЕсли;
		
		ИндексПредыдущегоЗначения = ИндексПредыдущегоЗначения + 1;
		
	КонецЦикла;
	
	ВывестиВариантыВыбораФайла(ИнформацияОДопФайле, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВариантыВыбораФайла(ИнформацияОДопФайле, Элемент)
	
	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФайлСДиска",         НСтр("ru = 'Файл с диска...'"));
	СписокВариантов.Добавить("ПрисоединенныйФайл", НСтр("ru = 'Присоединенный файл...'"));
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВывестиВариантыВыбораФайлаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);
	ПоказатьВыборИзМеню(ОповещениеОВыборе, СписокВариантов, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВариантыВыбораФайлаЗавершение(ВыбранныйВариант, ИнформацияОДопФайле) Экспорт
	
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;                                                                                                                  
	КонецЕсли;
	
	// Запишем документ, чтобы к нему можно было прикреплять файлы.
	Если Не ПроверитьИЗаписать(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокДиалога = ИнформацияОДопФайле.Описание.КраткоеПредставление;
	ПараметрыВыбораФайла = ИнформацияОДопФайле.Описание.ПараметрыВыбораФайла;
	Если Не ЗначениеЗаполнено(ПараметрыВыбораФайла) Тогда
		ПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	КонецЕсли;
	
	Если ВыбранныйВариант.Значение = "ПрисоединенныйФайл" Тогда
		
		ПараметрыДиалогаВыбора = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
		ПараметрыДиалогаВыбора.Заголовок           = ЗаголовокДиалога;
		ПараметрыДиалогаВыбора.МаксимальныйРазмер  = ПараметрыВыбораФайла.МаксимальныйРазмер;
		ПараметрыДиалогаВыбора.ФильтрДиалогаВыбора = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;
		
		ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборПрисоединенногоФайлаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);
		ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенногоФайла", ПараметрыДиалогаВыбора, ЭтотОбъект, ,,, ОповещениеОВыборе);
		
	ИначеЕсли ВыбранныйВариант.Значение = "ФайлСДиска" Тогда
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок  = ЗаголовокДиалога;
		ДиалогВыбора.Фильтр     = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;
		ДиалогВыбора.Расширение = ПараметрыВыбораФайла.Расширение;

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСДискаЗавершение", ЭтотОбъект, ИнформацияОДопФайле);

		ПараметрыДобавления = Новый Структура;
		// Максимальный размер в настройках банка хранится в Кб, в БСП требуется передавать в Мб.
		ПараметрыДобавления.Вставить("МаксимальныйРазмер",  ПараметрыВыбораФайла.МаксимальныйРазмер / 1024);
		ПараметрыДобавления.Вставить("ФильтрДиалогаВыбора", ПараметрыВыбораФайла.ФильтрДиалогаВыбора);
		ПараметрыДобавления.Вставить("НеОткрыватьКарточку", Истина);

		РаботаСФайламиКлиент.ДобавитьФайл(ОписаниеОповещения,
			Объект.Ссылка,
			ЭтотОбъект,
			2, // Режим создания - с диска (из файловой системы клиента)
			ПараметрыДобавления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПрисоединенногоФайлаЗавершение(Результат, ИнформацияОДопФайле) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;
	
	ЗапомнитьВыбранныйФайл(Результат, ИнформацияОДопФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСДискаЗавершение(Результат, ИнформацияОДопФайле) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Результат.ФайлСсылка) Тогда
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗапомнитьВыбранныйФайл(Результат.ФайлСсылка, ИнформацияОДопФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьВыбранныйФайл(ФайлСсылка, ИнформацияОДопФайле)
	
	ИнформацияОДопФайле.Значение.Значение = ФайлСсылка;
	Модифицированность = Истина;
	
	ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, ИнформацияОДопФайле.НомерВГруппе);
	ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
	ЭтотОбъект[ИмяЭлемента] = НСтр("ru = 'Открыть'");
	Элементы[ИмяЭлемента].ЦветТекста = Новый Цвет;
	
	НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
	Если ИнформацияОДопФайле.НомерВГруппе = 0 Тогда
		НужныйЭлемент.Гиперссылка = Истина;
		НужныйЭлемент.Картинка    = БиблиотекаКартинок.ПолеВводаОчистить;
	Иначе
		НужныйЭлемент.Видимость   = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ОчисткаНажатие(Элемент)
	
	// Заполненные файлы должны быть расположены подряд.
	// Например, имеем по одному идентификатору четыре строки с прикрепленными файлами: "Альфа", "Бета", "Гамма" и <пусто>.
	// Пользователь удаляет "Бета". Остаются строки: "Альфа", "Гамма", <пусто> и <пусто>.
	
	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя, Истина);
	
	// Если следующий в группе заполнен, то очищаем именно его.
	ИндексЗначения = Объект.ДополнительныеФайлы.Индекс(ИнформацияОДопФайле.Значение) + 1;
	ПоследнийВГруппе = ИндексЗначения + ИнформацияОДопФайле.Описание.Количество - ИнформацияОДопФайле.НомерВГруппе - 2;
	Пока ИндексЗначения <= ПоследнийВГруппе Цикл
		
		Если ЗначениеЗаполнено(Объект.ДополнительныеФайлы[ИндексЗначения].Значение) Тогда
			
			Объект.ДополнительныеФайлы[ИндексЗначения - 1].Значение = Объект.ДополнительныеФайлы[ИндексЗначения].Значение;
			Объект.ДополнительныеФайлы[ИндексЗначения].Значение = Неопределено;
			
			ИнформацияОДопФайле.Значение = Объект.ДополнительныеФайлы[ИндексЗначения];
			ИнформацияОДопФайле.НомерВГруппе = ИнформацияОДопФайле.НомерВГруппе + 1;
			
		Иначе
			// Текущее значение в ИнформацияОДопФайле.Значение - это то, которое нужно очистить.
			Прервать;
			
		КонецЕсли;
		
		ИндексЗначения = ИндексЗначения + 1;
		
	КонецЦикла;
	
	ИнформацияОДопФайле.Значение.Значение = Неопределено;
	Модифицированность = Истина;
	
	ИмяСНомером = ИдентификаторСНомеромВГруппе(ИнформацияОДопФайле.Идентификатор, ИнформацияОДопФайле.НомерВГруппе);
	ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизитаФайла(ИмяСНомером);
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяДействия(ИмяРеквизита);
	ЭтотОбъект[ИмяЭлемента] = "Выбрать";
	Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("НезаполненныйРеквизит");
	
	НужныйЭлемент = Элементы[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяОчистки(ИмяРеквизита)];
	Если ИнформацияОДопФайле.НомерВГруппе = 0 Тогда
		НужныйЭлемент.Гиперссылка = Ложь;
		НужныйЭлемент.Картинка = Новый Картинка;
	Иначе
		НужныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайл_ШаблонНажатие(Элемент)

	ИнформацияОДопФайле = ИнформацияОДополнительномФайле(Элемент.Имя);
	
	СервисОбменаСБанками = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета");
	
	ПараметрыШаблона = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыШаблона.Сервис = СервисОбменаСБанками;
	ПараметрыШаблона.Характеристика = ПредопределенноеЗначение("Перечисление.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ШаблоныФайлов");
	ПараметрыШаблона.ИмяФайлаШаблона = ИнформацияОДопФайле.Описание.ИмяФайлаШаблона;
	
	ОтборПоКлючу = Новый Структура("КлючСтрокиДопИнформации, ЭтоФайл", ИнформацияОДопФайле.Описание.КлючСтрокиФайла, Истина);
	СохраненныеПолучатели = Объект.ПолучателиДополнительнойИнформации.НайтиСтроки(ОтборПоКлючу);
	Для Каждого ПолучательДопФайла Из СохраненныеПолучатели Цикл
		ПараметрыШаблона.Банки.Добавить(ПолучательДопФайла.Банк);
	КонецЦикла;

	УниверсальныйОбменСБанкамиФормыКлиент.СохранитьФайлШаблона(ПараметрыШаблона);
	
КонецПроцедуры

// Названия файлов, как они названы в интерфейсе.
//
&НаКлиенте
Функция ПредставленияДополнительныхФайлов()

	ПредставленияФайлов = Новый СписокЗначений;
	
	Для Каждого ДопФайл Из ОписаниеДополнительныхФайлов Цикл
		ПредставленияФайлов.Добавить(ДопФайл.КлючСтрокиФайла, ДопФайл.КраткоеПредставление, ДопФайл.Обязательный);
	КонецЦикла;
	
	Возврат ПредставленияФайлов;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура Подключаемый_ПодключитьИнтернетПоддержкуПользователей()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);	

	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторно получаем данные о сервисе и запускаем обновление данных.
		ОбновитьСведенияОСервисе();
		ОжидатьЗавершениеОбновленияДанныхСервиса();
	Иначе
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявки необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);

		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// Закрываем текущую заявку, если она новая, т.к. работать с сервисом нельзя.
			ЗакрыватьФормуБезусловно = Истина;
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОСервисе()

	СервисОбменаСБанками = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	Если Параметры.Свойство("СведенияОСервисе") Тогда
		СведенияОСервисе = Параметры.СведенияОСервисе;
	Иначе
		СведенияОСервисе = УниверсальныйОбменСБанками.СведенияОСервисе(СервисОбменаСБанками);
	КонецЕсли;
	
	ЗаявкиНаОткрытиеСчета.НачатьОбновлениеДанныхСервиса(СервисОбменаСБанками, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхСервиса

&НаКлиенте
Процедура ОжидатьЗавершениеОбновленияДанныхСервиса()
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		
		// В настоящее время еще выполняется фоновое задание по обновлению данных из сервиса,
		// дождемся его завершения и потом только перейдем к шагу выбора банков.
		ТекстПоясненияОжидания = НСтр("ru = 'Поиск предложений банков'");
		УстановитьВидимостьСтраницыОжидания();
		ПерейтиКСтраницеБанковПослеОбновления = Не ЗначениеЗаполнено(Объект.Ссылка);
		
	ИначеЕсли Объект.ТребуетсяИнтеграцияССервисомАУСН Тогда
		
		Если Не ПроверитьЗаполнениеСтраницы("Начало") Тогда
			УстановитьВидимостьСтраницыНачало();
		Иначе
			УстановитьВидимостьСтраницыБанки();
			ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
			Если ТекущаяСтраница <> Элементы.СтраницаКлиентИП
				И ТекущаяСтраница <> Элементы.СтраницаКлиентЮЛ Тогда
				УстановитьВидимостьСтраницыРеквизитыКлиента();
			КонецЕсли;
		КонецЕсли;
		Возврат;
		
	Иначе
		
		// Фоновое задание не запущено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещенияОЗавершении = Новый ОписаниеОповещения("ОбновлениеДанныхСервисаЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперация,
		ОповещенияОЗавершении,
		ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;	
	КонецЕсли;
	
	СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено; // Сбросим признак выполнения.
	
	// Запомним, что текущее фоновое задание завершилось, чтобы можно было переходить к следующим шагам.
	ОписаниеОшибкиОбновленияДанныхСервиса = "";
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус", "") = "Ошибка" Тогда
		// Сохраним и отобразим описание ошибки.
		ОписаниеОшибкиОбновленияДанныхСервиса = Результат.КраткоеПредставлениеОшибки;
		
		ТекстПредупреждения = УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(
			ОписаниеОшибкиОбновленияДанныхСервиса);
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// В случае ошибки доступа к сервису для новой заявки остаемся на первой странице.
			ПерейтиКСтраницеБанковПослеОбновления = Ложь;
		КонецЕсли;
			
		// Выводим предупреждение возле кнопки Далее.
		Элементы.ГруппаСообщениеОбОшибкеНачало.Видимость  = Истина;
		Элементы.НадписьСообщениеОбОшибкеНачало.Заголовок = ТекстПредупреждения;

		// Выводим предупреждения возле кнопок отправки на последней странице.
		Элементы.ГруппаСообщениеОбОшибкеИП.Видимость  = Истина;
		Элементы.НадписьСообщениеОбОшибкеИП.Заголовок = ТекстПредупреждения;

		Элементы.ГруппаСообщениеОбОшибкеЮЛ.Видимость  = Истина;
		Элементы.НадписьСообщениеОбОшибкеЮЛ.Заголовок = ТекстПредупреждения;
		
		// Заблокируем возможность отправки.
		Элементы.ОтправитьИП.Доступность = Ложь;
		Элементы.ОтправитьЮЛ.Доступность = Ложь;
		
	Иначе
		
		Элементы.ГруппаСообщениеОбОшибкеНачало.Видимость  = Ложь;
		Элементы.ГруппаСообщениеОбОшибкеИП.Видимость  = Ложь;
		Элементы.ГруппаСообщениеОбОшибкеЮЛ.Видимость  = Ложь;
		Элементы.ОтправитьИП.Доступность = Истина;
		Элементы.ОтправитьЮЛ.Доступность = Истина;
		
	КонецЕсли;

	ОбновитьФормуПослеОбновленияДанныхСервиса();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПослеОбновленияДанныхСервиса()
	
	БанкиИнициализированы = Ложь;
	
	ВсеОбязательныеРеквизитыЗаполнены = УстановитьСвойстваРеквизитовНачало();
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ВсеОбязательныеРеквизитыЗаполнены Тогда
	
		УстановитьВидимостьСтраницыНачало();
	
	ИначеЕсли НЕ ПроверитьВыбранныеБанки() Тогда
		
		ПоказатьПредупреждениеОбИзмененииУсловийБанков();
		
	ИначеЕсли ПерейтиКСтраницеБанковПослеОбновления Тогда

		ПерейтиКСтраницеБанковПослеОбновления = Ложь;
		
		НачатьЗамерВремениПодборБанков();
		УстановитьВидимостьСтраницыБанки();
		
	ИначеЕсли ТолькоПросмотр ИЛИ НавигацияПараметрФормы = "РеквизитыКлиента" Тогда

		ОбновитьДоступныеБанки();
		УстановитьВидимостьСтраницыРеквизитыКлиента();

	ИначеЕсли НавигацияПараметрФормы = "Банки" Тогда
		
		УстановитьВидимостьСтраницыБанки();
		
	Иначе
		
		УстановитьВидимостьСтраницыНачало();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьИЗаписать(ЗаписыватьТолькоНовый = Ложь)

	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗаписыватьТолькоНовый Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Не ПроверитьЗаполнениеСтраницы("") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не Модифицированность Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗаписи.Вставить("СинхронизироватьПрисоединенныеФайлы", Ложь);
		
		Если Не ЗаписыватьТолькоНовый И Не ПроверитьЗаполнениеСтраницы("") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ПометкаУдаления = Ложь;
	
	Возврат Записать(ПараметрыЗаписи);

КонецФункции

&НаКлиенте
Функция ЗаблокироватьВладельцаКонтактнойИнформации(ИмяЭлемента)

	// Заблокируем физлицо или организацию, есть сейчас меняется их контактная информация.
	Если СтрНайти(ИмяЭлемента, "ФизическиеЛица") > 0 Тогда
		Если НЕ ПриИзмененииРеквизитаФизическогоЛица() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(ИмяЭлемента, "Организации") > 0 Тогда
		Если НЕ ПриИзмененииРеквизитаОрганизации() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура РазблокироватьДанныеДляРедактированияНаСервере()

	РазблокироватьФизическоеЛицо();
	
	РазблокироватьОрганизацию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначение(Коллекция, ИмяПоля, НовоеЗначение)

	Если Коллекция[ИмяПоля] <> НовоеЗначение Тогда
		Коллекция[ИмяПоля] = НовоеЗначение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьДругиеЗаявки()
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
		|ГДЕ
		|	СостояниеЗаявокНаОткрытиеСчета.Организация В(&ДоступныеОрганизации)";
	
	Запрос.УстановитьПараметр("ДоступныеОрганизации", ДоступныеОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ЗакрыватьФормуБезусловно = Ложь;

#КонецОбласти
