#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ДенежныеДокументы.Итог("Стоимость");
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ЭтотОбъект, ПараметрыУСН);
	Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ВыдачаДенежныхДокументов.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПрочееИП		= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаПрочее,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
		
	СтруктураТаблицМПЗ	= Новый Структура("ТаблицаПрочее", ТаблицаПрочееИП);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Таблица взаиморасчетов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Зачет аванса
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	Документы.ВыдачаДенежныхДокументов.СформироватьДвиженияВыдачаДенежныхДокументов(ПараметрыПроведения.ВыдачаДенежныхДокументов, ПараметрыПроведения.Реквизиты, Движения, Отказ);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов, ,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Если Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Специфические для конкретного документа действия
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу Тогда

		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходовИРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасходов");

		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		// Заменить стандартное сообщение о невыбранном поле
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Подотчетное лицо'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, 
				"Контрагент", "Объект", Отказ);
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда

		ЕстьРазницы = Ложь;
		Для каждого СтрокаДенежногоДокумента Из ДенежныеДокументы Цикл
			Если СтрокаДенежногоДокумента.Стоимость <> СтрокаДенежногоДокумента.Сумма Тогда
				ЕстьРазницы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЕстьРазницы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходовИРасходов");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаДоходов");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасходов");
		КонецЕсли;

		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ТекстСообщения = "";
			Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(ЭтотОбъект, 
				ДоговорКонтрагента, ТекстСообщения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", 
					НСтр("ru = 'Договор'"),,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача Тогда

		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходовИРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасходов");

		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		// Заменить стандартное сообщение о невыбранном поле
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Счет дебета'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, 
				"СчетУчетаРасчетовСКонтрагентом", "Объект", Отказ);
		КонецЕсли;

	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ДокументОснование = Основание;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ИнвентаризацияКассы") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача;
		
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
		
		// Количество в строках документа "Инвентаризация кассы" не указывается. Считаем, что на каждый денежный 
		// документ заполняется отдельная строка.

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияКассыЦенности.СчетУчета КАК СчетУчетаДенежныхДокументов,
		|	СУММА(ИнвентаризацияКассыЦенности.ВалютнаяСуммаУчет - ИнвентаризацияКассыЦенности.ВалютнаяСумма) КАК Сумма,
		|	СУММА(ИнвентаризацияКассыЦенности.ВалютнаяСуммаУчет - ИнвентаризацияКассыЦенности.ВалютнаяСумма) КАК Стоимость,
		|	ИнвентаризацияКассыЦенности.Валюта КАК ВалютаДокумента,
		|	ИнвентаризацияКассыЦенности.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ИнвентаризацияКассыЦенности.ВидЦенностей КАК ДенежныйДокумент,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияКассы.Ценности КАК ИнвентаризацияКассыЦенности
		|ГДЕ
		|	ИнвентаризацияКассыЦенности.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументыВал))
		|	И ИнвентаризацияКассыЦенности.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияКассыЦенности.СчетУчета,
		|	ИнвентаризацияКассыЦенности.Валюта,
		|	ИнвентаризацияКассыЦенности.Ссылка.ПодразделениеОрганизации,
		|	ИнвентаризацияКассыЦенности.ВидЦенностей
		|
		|ИМЕЮЩИЕ
		|	СУММА(ИнвентаризацияКассыЦенности.ВалютнаяСуммаУчет - ИнвентаризацияКассыЦенности.ВалютнаяСумма) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВалютаДокумента,
		|	СчетУчетаДенежныхДокументов,
		|	ДенежныйДокумент
		|ИТОГИ
		|	МАКСИМУМ(ПодразделениеОрганизации)
		|ПО
		|	ВалютаДокумента,
		|	СчетУчетаДенежныхДокументов";
		
		Запрос.УстановитьПараметр("Основание", Основание);
		
		РезультатРасхождений = Запрос.Выполнить();
		
		ВыборкаВалюта = РезультатРасхождений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Валюта и счет учета денежных документов заполняются в шапке, обычно это рубль и счет 50.03.
		// Если есть расхождение по нескольким счетам и/или валютам, то в документе "Выдача денежных документов"
		// отражаем только первое из них.

		Если ВыборкаВалюта.Следующий() Тогда
			ВыборкаСчетУчета = ВыборкаВалюта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСчетУчета.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаСчетУчета);
				ВыборкаРасхождений = ВыборкаСчетУчета.Выбрать();
				Пока ВыборкаРасхождений.Следующий() Цикл
					СтрокаДенежныхСредств = ДенежныеДокументы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДенежныхСредств, ВыборкаРасхождений);
					ВалютаДокумента = ВыборкаРасхождений.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#КонецЕсли