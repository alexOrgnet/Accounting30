
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И КонтекстныйВызов Тогда
			Объект.Организация    = Параметры.Организация;
			Объект.НалоговыйОрган = Параметры.НалоговыйОрган;
			Объект.СуммаРасходов  = Параметры.СуммаРасходов;
			ДанныеПомощника       = Параметры.ДанныеПомощника;
			АдресДанных           = Параметры.АдресДанных;
			ЗаполнитьТаблицуПатенты();
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	НастроитьФормуПриОткрытииИзПомощника();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключитьОбработчикОжидания("Подключаемый_ПровестиДокументПриОткрытииИзПомощника", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеПомощника", ДанныеПомощника);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     Объект.Организация);
	
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Уведомление);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация",      Объект.Организация);
	ПараметрыОповещения.Вставить("РегистрацияВИФНС", Объект.НалоговыйОрган);
	ПараметрыОповещения.Вставить("ВладелецФормы",    ВладелецФормы);
	ПараметрыОповещения.Вставить("ВидУведомления",
		ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы"));
	
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыОповещения, Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеЗаполненоВПомощникеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПомощникЗаполнения" Тогда
		ОткрытьФорму(
			"Обработка.ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма",
			Новый Структура("Ключ", Объект.Уведомление),
			ВладелецФормы);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьУведомлениеЗаполненоВПомощникеНажатие(Элемент)
	
	УведомлениеЗаполненоВПомощнике = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	
	НайденныйНалоговыйОрган = Элемент.СписокВыбора.НайтиПоЗначению(Объект.НалоговыйОрган);
	Если НайденныйНалоговыйОрган <> Неопределено Тогда
		НалоговыйОрганПредставление = НайденныйНалоговыйОрган.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.НалоговыйОрган);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма",          Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	СтруктураПараметров.Вставить("ЭтоОтчет",       Ложь);
	СтруктураПараметров.Вставить("НовСтатус",      Форма.Элементы.НаименованиеЭтапа.Заголовок);
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПатенты

&НаКлиенте
Процедура ПатентыДокументПатентПриИзменении(Элемент)
	
	ОбработатьИзменениеПатентаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентыСуммаПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОчиститьСообщения();
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
		ПоказатьВопросОНеобходимостиПроведенияДокумента(Оповещение);
	Иначе
		ПроверитьВыгрузкуЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьПроверитьВИнтернетеЗавершение", ЭтотОбъект);
		ПоказатьВопросОНеобходимостиПроведенияДокумента(Оповещение);
	Иначе
		ПроверитьПроверитьВИнтернетеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СтруктураПараметров = Объект.Уведомление.ДанныеУведомления.Получить();
		ДанныеУведомления = СтруктураПараметров.ДанныеУведомления;
		Если ДанныеУведомления.Свойство("ДанныеПомощника")
			И ТипЗнч(ДанныеУведомления.ДанныеПомощника) = Тип("Структура") Тогда
			ДанныеПомощника = ДанныеУведомления.ДанныеПомощника;
			УведомлениеЗаполненоВПомощнике = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     Объект.Организация);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	НесколькоНалоговых = Элементы.НалоговыйОрган.СписокВыбора.Количество() > 1;
	
	Элементы.НалоговыйОрган.Видимость = НесколькоНалоговых;
	Элементы.НалоговыйОрганПредставление.Видимость = Не НесколькоНалоговых;
	
	Элементы.ГруппаУведомлениеИзПомощника.Видимость = Форма.УведомлениеЗаполненоВПомощнике;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	СуммаВсего = Объект.Патенты.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	Если Не КонтекстныйВызов
		Или Объект.Организация <> Параметры.Организация Тогда
		Объект.НалоговыйОрган = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НалоговыйОрган) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.НалоговыйОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПатенты()
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		ТаблицаЗаполнения = ПолучитьИзВременногоХранилища(АдресДанных);
		Если ЗначениеЗаполнено(ТаблицаЗаполнения) Тогда
			Для Каждого СтрокаЗаполнения Из ТаблицаЗаполнения Цикл
				Если СтрокаЗаполнения.Уменьшить = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПатента = Объект.Патенты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПатента, СтрокаЗаполнения);
				СтрокаПатента.СуммаУменьшеноРанее = СтрокаЗаполнения.УменьшеноРанее;
				СтрокаПатента.Сумма = СтрокаЗаполнения.Уменьшить;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПатентаНаКлиенте()
	
	ТекущиеДанные = Элементы.Патенты.ТекущиеДанные;
	
	ПараметрыСтроки = ОписаниеСтрокиПатента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	ЗаполнитьДобавленнуюКолонкуТаблицы(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
	ЗаполнитьСведенияОНалоговыхОрганах();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговыхОрганах()
	
	ТаблицаПатенты = Объект.Патенты.Выгрузить();
	
	ДанныеОНалоговых = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПатенты, "РегистрацияВНалоговомОргане", Истина);
	НаименованияНалоговыхОрганов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДанныеОНалоговых, "Наименование");
	
	Элементы.НалоговыйОрган.СписокВыбора.Очистить();
	Для Каждого Элемент Из НаименованияНалоговыхОрганов Цикл
		Элементы.НалоговыйОрган.СписокВыбора.Добавить(
			Элемент.Ключ,
			Элемент.Значение);
	КонецЦикла;
	
	Если НаименованияНалоговыхОрганов.Количество() = 0 Тогда
		НалоговыйОрганПредставление = "";
	ИначеЕсли Не ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		Объект.НалоговыйОрган = Элементы.НалоговыйОрган.СписокВыбора[0].Значение;
		НалоговыйОрганПредставление = Элементы.НалоговыйОрган.СписокВыбора[0].Представление;
	Иначе
		НайденныйНалоговыйОрган = Элементы.НалоговыйОрган.СписокВыбора.НайтиПоЗначению(Объект.НалоговыйОрган);
		Если НайденныйНалоговыйОрган <> Неопределено Тогда
			НалоговыйОрганПредставление = НайденныйНалоговыйОрган.Представление;
		Иначе
			НалоговыйОрганПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НалоговыйОрган, "Наименование");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.Патенты Цикл
		ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы);
	КонецЦикла;
	
	ЗаполнитьСведенияОНалоговыхОрганах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы)
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПатент) Тогда
		ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ДокументПатент,
			"ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган");
		
		Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане = 
			Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации Тогда
			РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.Организация, "РегистрацияВНалоговомОргане");
		Иначе
			РегистрацияВНалоговомОргане = ДанныеПатента.НалоговыйОрган;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицы.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиПатента()
	
	ОписаниеСтроки = Новый Структура("ДокументПатент, РегистрацияВНалоговомОргане, СуммаУменьшеноРанее, Сумма");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

#Область РаботаСУведомлениемКакСОтчетом

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайлаНаСервере(УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		ЭтотОбъект, , , Ложь, Объект.Уведомление);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(ТаблицаОшибок, Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	ТаблицаОшибок = УведомлениеОбъект.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	
	Отказ = ТаблицаОшибок.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопросОНеобходимостиПроведенияДокумента(Оповещение);
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ         = Ложь;
	ТаблицаОшибок = Новый СписокЗначений;
	
	ПроверитьНаСервере(ТаблицаОшибок, Отказ);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'В уведомлении обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(
			Оповещение,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Предупреждение.'"));
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ТаблицаОшибок")
			И ДополнительныеПараметры.ТаблицаОшибок.Количество() > 0 Тогда
			ОткрытьФорму(
				"Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
				Новый Структура("ТаблицаОшибок", ДополнительныеПараметры.ТаблицаОшибок),
				ЭтотОбъект,
				Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ         = Ложь;
	ТаблицаОшибок = Новый СписокЗначений;
	
	ПроверитьНаСервере(ТаблицаОшибок, Отказ);
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибок не обнаружено'"));
	Иначе
		ОткрытьФорму(
			"Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПроверитьВИнтернетеЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417() Экспорт
	
	ОчиститьСообщения();
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Оповещение =
			Новый ОписаниеОповещения("ПоказатьСДвухмернымШтрихкодомPDF417Завершение", ЭтотОбъект);
		ПоказатьВопросОНеобходимостиПроведенияДокумента(Оповещение);
	Иначе
		ПоказатьСДвухмернымШтрихкодомPDF417Завершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417Завершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ         = Ложь;
	ТаблицаОшибок = Новый СписокЗначений;
	
	ПроверитьНаСервере(ТаблицаОшибок, Отказ);
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
	Иначе
		ОткрытьФорму(
			"Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	
	Выгрузка = ДанныеФайлаНаСервере(УникальныйИдентификатор);
	Если Не ЗначениеЗаполнено(Выгрузка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выгрузка = Выгрузка[0];
	
	СтруктураВыгрузки = Новый Структура("ТестВыгрузки, КодировкаВыгрузки",
		Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки);
	СтруктураВыгрузки.Вставить("Данные",
		УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетДвоичныхДанных(УведомлениеОбъект.ИмяОтчета, "TIFF_2021_1"));
	СтруктураВыгрузки.Вставить("ИмяФайла", "1112021_5.02000_02.tif");
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

&НаСервере
Функция ДанныеФайлаНаСервере(УникальныйИдентификатор)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОНеобходимостиПроведенияДокумента(Оповещение)
	
	ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
		|Выполнить проведение документа и продолжить?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьФормуПриОткрытииИзПомощника()
	
	Если Не КонтекстныйВызов Тогда
		Возврат;
	КонецЕсли;
	
	ПодключенаОтчетность = Подключена1СОтчетность(Объект.Организация);
	СостояниеОтправкиДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Объект.Уведомление);
	ТолькоПросмотр = СостояниеОтправкиДокумента.Отправлено;
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КоманднаяПанельКонтекстПомощника", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "Видимость", ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "Доступность", Не СостояниеОтправкиДокумента.Отправлено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОтправитьВКонтролирующийОрганКонтекстПомощника", "КнопкаПоУмолчанию", ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПровестиИЗакрытьКонтекстПомощника", "Видимость", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПровестиИЗакрытьКонтекстПомощника", "КнопкаПоУмолчанию", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ЗаписатьНаДискКонтекстПомощника", "Видимость", Не ПодключенаОтчетность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКоманднаяПанельПатенты", "Видимость", Ложь);
	
	Элементы.Переместить(
		Элементы.ПодменюПечать, Элементы.КоманднаяПанельКонтекстПомощника, Элементы.ЗаписатьНаДискКонтекстПомощника);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Подключена1СОтчетность(Организация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПровестиДокументПриОткрытииИзПомощника()
	
	Если Не КонтекстныйВызов Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти