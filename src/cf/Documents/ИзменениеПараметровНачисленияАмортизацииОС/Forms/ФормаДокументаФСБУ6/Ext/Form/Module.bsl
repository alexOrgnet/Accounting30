#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьПредыдущиеЗначения", 0.1, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "ВыполненаЗаписьДокумента" И Параметр.ДокументСсылка = Объект.Ссылка Тогда
		// Заполним предыдущие значения при записи документа, так как форма заново перечитывается.
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьПредыдущиеЗначения", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КомпонентыКУдалению = Новый Массив;
	
	Для каждого Компонент Из ТекущийОбъект.КомпонентыАмортизации Цикл
		Если ТекущийОбъект.ОС.Найти(Компонент.КлючСтроки, "КлючСтроки") = Неопределено Тогда
			КомпонентыКУдалению.Добавить(Компонент);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Компонент Из КомпонентыКУдалению Цикл
		ТекущийОбъект.КомпонентыАмортизации.Удалить(Компонент);
	КонецЦикла;
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
	ДлительнаяОперация = ЗаполнитьПредыдущиеЗначенияВФоне();
	ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
	
	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = Истина;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то перечитаем предыдущие значения.
	Если ТребуетсяВызовСервера Тогда
		ДлительнаяОперация = ЗаполнитьПредыдущиеЗначенияВФоне();
		ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация);
		НастроитьПоДате();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	УстановитьПериодДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУчетеПриИзменении(Элемент)
	
	ИзменитьОтражениеВУчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДлительнаяОперация = ЗаполнитьПредыдущиеЗначенияВФоне();
		ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация);
		ПрименитьУчетнуюПолитику();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаИзмененияПриИзменении(Элемент)
	
	УстановитьПериодДействия(ЭтотОбъект);
	
	ПроверитьОбязательноОтражениеБУ(ЭтотОбъект);
	
	ДлительнаяОперация = ЗаполнитьПредыдущиеЗначенияВФоне();
	ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	УдалитьКомпонентыАмортизации(СтрокаТЧ.КлючСтроки);
	УдалитьКомпонентыАмортизацииПредыдущееЗначение(Элементы.ОС.ТекущаяСтрока);
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		// Очистим колонки, при очистке основного средства
		Для Каждого ИмяКолонки Из КолонкиТабличнойЧастиОС() Цикл
			СтрокаТЧ[ИмяКолонки] = Неопределено;
			СтрокаТЧ[ИмяКолонки + "ПредыдущееЗначение"] = Неопределено;
		КонецЦикла;
	Иначе
		ОСОсновноеСредствоПриИзмененииНаСервере(ОсновноеСредство);
		Если Не ПрименяетсяФСБУ6 Тогда
			// Если не применяется ФСБУ 6, то менять способ начисления амортизации нельзя.
			СтрокаТЧ.СпособНачисленияАмортизации = СтрокаТЧ.СпособНачисленияАмортизацииПредыдущееЗначение;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДополнительныеКолонки(СтрокаТЧ);
	ЗаполнитьПолеКомпонентыАмортизации();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = Неопределено;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
		
		ЗаполнитьДобавленныеКолонкиСтроки(ТекущиеДанные, ПараметрыОбъекта);
		ОсновноеСредство = ТекущиеДанные.ОсновноеСредство;
	КонецЕсли;
	
	ОСПриИзмененииНаСервере(ОсновноеСредство);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОСКомпонентыАмортизации" Тогда
		Если СпособыНачисленияАмортизацииПоКомпонентам().Найти(Элементы.ОС.ТекущиеДанные.СпособНачисленияАмортизации) <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьСписокКомпонентовАмортизации(Элементы.ОС.ТекущиеДанные);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ОСКомпонентыАмортизацииПредыдущееЗначение" Тогда
		Если СпособыНачисленияАмортизацииПоКомпонентам().Найти(Элементы.ОС.ТекущиеДанные.СпособНачисленияАмортизацииПредыдущееЗначение) <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьСписокКомпонентовАмортизацииПредыдущееЗначение(Элементы.ОС.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		СкопироватьКомпонентыАмортизации(Элементы.ОС.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)
	
	Для каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = Объект.ОС.НайтиПоИдентификатору(ИдентификаторСтроки);
		УдалитьКомпонентыАмортизации(Строка.КлючСтроки);
		УдалитьКомпонентыАмортизацииПредыдущееЗначение(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОстатокСрокаПолезногоИспользованияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	РассчитатьСвязанныеЭлементы(ТекущиеДанные, "ОстатокСрокаПолезногоИспользованияБУ");
	ЗаполнитьДополнительныеКолонки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	РассчитатьСвязанныеЭлементы(ТекущиеДанные, "СрокПолезногоИспользованияБУ");
	ЗаполнитьДополнительныеКолонки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОбъемПродукцииРаботБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	РассчитатьСвязанныеЭлементы(ТекущиеДанные, "ОбъемПродукцииРаботБУ");
	ЗаполнитьДополнительныеКолонки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОстатокОбъемПродукцииРаботБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	РассчитатьСвязанныеЭлементы(ТекущиеДанные, "ОстатокОбъемПродукцииРаботБУ");
	ЗаполнитьДополнительныеКолонки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССпособНачисленияАмортизацииПриИзменении(Элемент)
	
	УстановитьПараметрыФормы();
	
	УдалитьКомпонентыАмортизации(Элементы.ОС.ТекущиеДанные.КлючСтроки);
	ЗаполнитьПолеКомпонентыАмортизации();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьОстатки", Истина);
	ПараметрыФормы.Вставить("ДатаОстатков", Объект.Дата);
	ПараметрыФормы.Вставить("Организация",  Объект.Организация);
	
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОСИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзВнешнихФайловКлиент.НовыйПараметрыЗагрузкиВТабЧасть();
	ПараметрыЗагрузки.ИмяТабличнойЧасти = "Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка основных средств из файла'");
	ПараметрыЗагрузки.Оповещение = Новый ОписаниеОповещения("ЗагрузитьОСИзФайлаЗавершение", ЭтотОбъект);
	ПараметрыЗагрузки.Пояснение = Нстр("ru = 'Укажите названия реквизитов в заголовках колонок, которые хотите загрузить. <span style=""color: НезаполненныйРеквизит"">Ненайденные</span> основные средства не будут загружены.'");
	
	ПараметрыЗагрузки.ПрикладнаяЗагрузка = Истина;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.Период = Объект.Дата;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.Организация = Объект.Организация;
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.ИмяМакета = "ЗагрузкаИзФайла";
	ПараметрыЗагрузки.ПараметрыПрикладнойЗагрузки.ОбъектДляЗагрузки = ПредопределенноеЗначение(
		"Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПустаяСсылка");
	
	РеквизитыДляСопоставления = Новый СписокЗначений;
	РеквизитыДляСопоставления.Добавить("ОсновноеСредство_Наименование");
	РеквизитыДляСопоставления.Добавить("ОсновноеСредство_ИнвентарныйНомер");
	
	ПараметрыЗагрузки.РеквизитыДляСопоставления = ПоместитьВоВременноеХранилище(
		РеквизитыДляСопоставления, УникальныйИдентификатор);
	
	ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
		"Обработка.ЗагрузкаДанныхВТабличнуюЧасть.Форма",
		УникальныйИдентификатор,
		ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиКолонок(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете Тогда
		Элементы.ОСГруппаСрокПолезногоИспользованияБУ.Заголовок = НСтр("ru='Срок полезного использования, мес. (БУ)'");
		Элементы.ОСГруппаОстатокСПИ.Заголовок = НСтр("ru='Остаток срока, мес (БУ)'");
		Элементы.ОСГруппаСрокПолезногоИспользованияНУ.Заголовок = НСтр("ru='Срок полезного использования, мес. (НУ)'");
	ИначеЕсли Объект.ОтражатьВНалоговомУчете Тогда
		Элементы.ОСГруппаСрокПолезногоИспользованияНУ.Заголовок = НСтр("ru='Срок полезного использования, мес.'");
	Иначе
		Элементы.ОСГруппаСрокПолезногоИспользованияБУ.Заголовок = НСтр("ru='Срок полезного использования, мес.'");
		Элементы.ОСГруппаОстатокСПИ.Заголовок = НСтр("ru='Остаток срока, мес'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ОСГруппаОбъемВыработкиБУ.Видимость = Форма.ПоказатьВыработку И Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаОстатокРаботБУ.Видимость = Форма.ПоказатьВыработку И Объект.ОтражатьВБухгалтерскомУчете;
		
	Элементы.ОСГруппаСрокПолезногоИспользованияБУ.Видимость = Форма.ПоказатьСрокИспользования И Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаОстатокСПИ.Видимость = Форма.ПоказатьОстатокСрокаИспользования И Объект.ОтражатьВБухгалтерскомУчете;
	
	Элементы.ОСГруппаКоэффициентУскорения.Видимость = Форма.ПоказатьКоэффициентУскорения И Объект.ОтражатьВБухгалтерскомУчете;
	
	Элементы.ОСГруппаСрокПолезногоИспользованияНУ.Видимость = Объект.ОтражатьВНалоговомУчете;
	
	Элементы.ОСГруппаЛиквидационнаяСтоимость.Видимость = Объект.ОтражатьВБухгалтерскомУчете И Форма.ПрименяетсяФСБУ6;
	Элементы.ОСГруппаСпособНачисленияАмортизации.Видимость =
		Объект.ОтражатьВБухгалтерскомУчете И Форма.ПрименяетсяФСБУ6 И Форма.ПоказатьСпособАмортизации;
	
	ОтображениеКомпонентовАмортизации = Форма.ПоддерживаетсяРасчетАмортизацииПоКомпонентамАмортизации
		И Форма.ПоказатьКомпонентыАмортизации
		И Объект.ОтражатьВБухгалтерскомУчете
		И Форма.ПрименяетсяФСБУ6;
	
	Элементы.ОСКомпонентыАмортизации.Видимость = ОтображениеКомпонентовАмортизации;
	Элементы.ОСКомпонентыАмортизацииПредыдущееЗначение.Видимость = ОтображениеКомпонентовАмортизации;
	Элементы.ОСГруппаКомпонентыАмортизации.Видимость = ОтображениеКомпонентовАмортизации;
	
	УстановитьЗаголовкиКолонок(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// "Не требуется" для сроков полезного использования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОстатокСрокаПолезногоИспользованияБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКоэффициентУскоренияБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
	// Видимость для предыдущих значений срока полезного использования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКоэффициентУскоренияБУПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУПредыдущееЗначение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// "Не требуется" для объемов продукции
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОбъемПродукцииРаботБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОстатокОбъемПродукцииРаботБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
	// Видимость для предыдущих значений объема продукции
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОбъемПродукцииРаботБУПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСОстатокОбъемПродукцииРаботБУПредыдущееЗначение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// "Не требуется" для коэффициента ускорения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКоэффициентУскоренияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
	// Видимость для предыдущих значений для коэффициента ускорения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКоэффициентУскоренияБУПредыдущееЗначение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Компоненты амортизации
	СпособыНачисленияАмортизацииПоКомпонентам = Новый СписокЗначений;
	СпособыНачисленияАмортизацииПоКомпонентам.ЗагрузитьЗначения(СпособыНачисленияАмортизацииПоКомпонентам());
	СпособыНачисленияАмортизацииПоКомпонентам.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка());
	
	// Пустое значение для предыдущих значений компонентов амортизации (для отображения колонки)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииГрупповойОбъект");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизации", ВидСравненияКомпоновкиДанных.НеВСписке, СпособыНачисленияАмортизацииПоКомпонентам);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Видимость для предыдущих значений компонентов амортизации
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииПредыдущееЗначениеГрупповойОбъект");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.СпособНачисленияАмортизацииПредыдущееЗначение", ВидСравненияКомпоновкиДанных.НеВСписке, СпособыНачисленияАмортизацииПоКомпонентам);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Для групповых ОС делаем недоступным способ начисления амортизации
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССпособНачисленияАмортизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// "Не требуется" для срока полезного использования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
	// Для групповых ОС компоненты амортизации отображаем без гиперссылок
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииПредыдущееЗначениеГрупповойОбъект");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииГрупповойОбъект");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// "Не требуется" и недоступность инвентарного номера, компонентов амортизации и СПИ для групповых ОС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСИнвентарныйНомер");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУПредыдущееЗначение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССрокПолезногоИспользованияБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииПредыдущееЗначениеГрупповойОбъект");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСКомпонентыАмортизацииГрупповойОбъект");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.ЕдиницаУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтражениеВУчете(Форма)
	
	Если Форма.ОтразитьВУчете = "БУНУ" Тогда
		
		Форма.Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Форма.Объект.ОтражатьВНалоговомУчете     = Истина;
		
	ИначеЕсли Форма.ОтразитьВУчете = "НУ" Тогда
		
		Форма.Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		Форма.Объект.ОтражатьВНалоговомУчете     = Истина;
		
		Форма.Объект.НакоплениеИнформацииЗаГод = Ложь; // Только для БУ
		
	Иначе
		
		Форма.Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Форма.Объект.ОтражатьВНалоговомУчете     = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОбязательноОтражениеБУ(Форма)
	
	ОбязательноОтражениеБУ = Форма.Объект.НакоплениеИнформацииЗаГод;
	
	Если ОбязательноОтражениеБУ И Форма.ОтразитьВУчете = "НУ" Тогда
		Форма.ОтразитьВУчете = "БУНУ";
		ИзменитьОтражениеВУчете(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособыНачисленияАмортизацииПоКомпонентам()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьПоДате()
	
	ДоступнаФункциональностьПересчетаАмортизации = Ложь;
	АмортизацияАктивовПересчет.ОпределитьФункциональностьДоступна(ДоступнаФункциональностьПересчетаАмортизации);
	
	Если ДоступнаФункциональностьПересчетаАмортизации Тогда
		ДоступенПересчетАмортизации = Документы.ИзменениеПараметровНачисленияАмортизацииОС.ДоступенПересчетАмортизации(Объект.Дата);
		Элементы.ПричинаИзменения.ТолькоПросмотр = Не ДоступенПересчетАмортизации;
		Если Не ДоступенПересчетАмортизации Тогда
			Объект.НакоплениеИнформацииЗаГод = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПрименитьУчетнуюПолитику();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУчетнуюПолитику()
	
	Если УчетОС.ПрименяетсяПБУ6(Объект.Дата, Объект.Организация) Тогда
		ЗадерживатьПериодДействия = Истина;
		// Документ начинает действие со следующего месяца, поэтому и право применения запрашиваем на следующий месяц
		ДатаДействия = ДобавитьМесяц(Объект.Дата, 1);
		ПрименяетсяФСБУ6 = УчетнаяПолитика.ПрименяетсяФСБУ6(Объект.Организация, ДатаДействия);
	Иначе
		ПрименяетсяФСБУ6 = Истина;
		ЗадерживатьПериодДействия = Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(Объект.Дата, Объект.Организация);
	КонецЕсли;
	
	НастроитьПодсказкуПричинаИзменения(Элементы.ПричинаИзмененияРасширеннаяПодсказка.Заголовок, ЗадерживатьПериодДействия);
	
	УстановитьПериодДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьПодсказкуПричинаИзменения(Заголовок, ЗадерживатьАмортизацию)
	
	ШаблонЗаголовка = НСтр("ru = 'Изменение срока полезного использования (и других элементов амортизации) может быть вызвано:
                            |1. Конкретным <b>разовым событием</b>, таким как изменение режима работы или утверждение планов замены
                            |2. Постепенным <b>накоплением информации</b> об использовании основных средств, позволяющей уточнить прогноз сроков использования по результатам года.
                            |
                            |В первом случае измененный срок применяется с %1.
                            |
                            |Во втором случае измененный срок распространяется и на весь отчетный год:
                            |- в ходе закрытия года амортизация за год пересчитывается с учетом измененного срока
                            |- суммы возникших корректировок относятся на финансовый результат, без включения в стоимость запасов.
                            |
                            |Документы, связанные с разовыми событиями, можно ввести в любом месяце года, связанные с накоплением информации за год - только в декабре.
                            |
                            |<a href=""%2"">Подробнее</a>'");
	
	ПериодНачисленияАмортизации = НСтр("ru = 'месяца события'");
	Если ЗадерживатьАмортизацию Тогда
		ПериодНачисленияАмортизации = НСтр("ru = 'месяца, следующего за этим разовым событием'");
	КонецЕсли;
	
	ГиперссылкаМетодическийМатериал = "https://buh.ru/articles/documents/137768/";
	
	Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаголовка, ПериодНачисленияАмортизации, ГиперссылкаМетодическийМатериал);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФормы()
	
	НастроитьПоДате();
	
	ПоказатьСпособАмортизации = Истина;
	
	Если Объект.ОС.Количество() = 0 Тогда
		ПоказатьСрокИспользования = Истина;
		ПоказатьОстатокСрокаИспользования = Истина;
		ПоказатьВыработку = Ложь;
		ПоказатьКоэффициентУскорения = Ложь;
	Иначе
		ТаблицаОС = Объект.ОС.Выгрузить( , "СпособНачисленияАмортизации");
		ТаблицаОС.Индексы.Добавить("СпособНачисленияАмортизации");
		
		// Линейный способ
		Отбор = Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
		ПоказатьСрокИспользования = (ТаблицаОС.НайтиСтроки(Отбор).Количество() > 0);
		
		// По объему выработки
		Отбор = Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
		ПоказатьВыработку = (ТаблицаОС.НайтиСтроки(Отбор).Количество() > 0);
		
		// Уменьшаемого остатка
		Отбор = Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		Если ТаблицаОС.НайтиСтроки(Отбор).Количество() > 0 Тогда
			ПоказатьКоэффициентУскорения = Истина;
			ПоказатьСрокИспользования = Истина;
		Иначе
			ПоказатьКоэффициентУскорения = Ложь;
		КонецЕсли;
		
		// Если какой-то экзотический способ, то покажем только сроки
		Если Не ПоказатьВыработку И Не ПоказатьКоэффициентУскорения Тогда
			ПоказатьСрокИспользования = Истина;
		КонецЕсли;
		
		ПоказатьОстатокСрокаИспользования = ПоказатьСрокИспользования;
		
		// Если в табличной части только групповые ОС, то не будем показывать способ амортизации и СПИ. Покажем только остаток СПИ.
		ТаблицаОС = Объект.ОС.Выгрузить( , "ЕдиницаУчета");
		Отбор = Новый Структура("ЕдиницаУчета", Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
		Если (ТаблицаОС.НайтиСтроки(Отбор).Количество() = ТаблицаОС.Количество()) Тогда
			ПоказатьСпособАмортизации = Ложь;
			ПоказатьСрокИспользования = Ложь;
			ПоказатьОстатокСрокаИспользования = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Компоненты амортизации
	ПоказатьКомпонентыАмортизации = ПоказатьСрокИспользования Или ПоказатьВыработку;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	ПроверитьОбязательноОтражениеБУ(ЭтотОбъект);
	
	ТекущаяДатаДокумента = Объект.Дата;
	УстановитьПериодДействия(ЭтотОбъект);
	
	НастроитьПоДате();
	
	ЗаполнитьДобавленныеКолонки();
	
	УстановитьПараметрыФормы();
	
	ЗаполнитьПолеКомпонентыАмортизации();
	
	Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете Тогда
		ОтразитьВУчете = "БУНУ";
	ИначеЕсли Объект.ОтражатьВБухгалтерскомУчете Тогда
		ОтразитьВУчете = "БУ";
	ИначеЕсли Объект.ОтражатьВНалоговомУчете Тогда
		ОтразитьВУчете = "НУ";
	КонецЕсли;
	
	ПоддерживаетсяРасчетАмортизацииПоКомпонентамАмортизации = ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПериодДействия(Форма)
	
	ДатаНачалаПрименения = УправлениеВнеоборотнымиАктивамиКлиентСервер.ДатаНачалаПримененияИзмененийЭлементовАмортизации(
		Форма.Объект.Дата,
		Форма.Объект.НакоплениеИнформацииЗаГод,
		Форма.ЗадерживатьПериодДействия);
	
	Форма.ПериодДействия = Формат(ДатаНачалаПрименения, "ДФ='MMMM yyyy'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницыУчетаОС(Знач МассивОС)
	
	Если Не ЗначениеЗаполнено(МассивОС) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОС, "ЕдиницаУчета");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	МассивОС = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.ОС Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
			МассивОС.Добавить(СтрокаТаблицы.ОсновноеСредство);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбъекта.Вставить("ЕдиницыУчета", ЕдиницыУчетаОС(МассивОС));
	
КонецПроцедуры

&НаСервере
Процедура ОСПриИзмененииНаСервере(ОсновноеСредство)
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьУстаревшиеКолонки(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредство));
	КонецЕсли;
	УстановитьПараметрыФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(ОсновноеСредство)
	
	МассивОсновныеСредства = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредство);
	ЗаполнитьПредыдущиеЗначенияВФоне(МассивОсновныеСредства);
	ЗаполнитьУстаревшиеКолонки(МассивОсновныеСредства);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеКолонки(Строка)
	
	// Реквизиты "СрокПолезногоИспользованияБУ" и "СрокИспользованияДляВычисленияАмортизацииБУ" используются в разных сценариях:
	// 1. СрокИспользованияДляВычисленияАмортизацииБУ - используется при расчете амортизации в УчетОС
	// 2. СрокПолезногоИспользованияБУ - используется в карточках ОС и некоторых отчетах.
	// Случаи, когда эти сроки различаются скорее экзотические, поэтому в новых документах предлагается использовать одинаковое значение.
	// В дальнейшем предлагается оставить только один вариант.
	Строка.СрокИспользованияДляВычисленияАмортизацииБУ   = Строка.СрокПолезногоИспользованияБУ;
	Строка.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = Строка.ОбъемПродукцииРаботБУ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиТабличнойЧастиОС()
	
	Колонки = Новый Массив;
	Колонки.Добавить("СпособНачисленияАмортизации");
	Колонки.Добавить("СрокПолезногоИспользованияБУ");
	Колонки.Добавить("ОстатокСрокаПолезногоИспользованияБУ");
	Колонки.Добавить("ОбъемПродукцииРаботБУ");
	Колонки.Добавить("ОстатокОбъемПродукцииРаботБУ");
	Колонки.Добавить("КоэффициентУскоренияБУ");
	Колонки.Добавить("ЛиквидационнаяСтоимость");
	Колонки.Добавить("СрокПолезногоИспользованияНУ");
	Возврат Колонки;
	
КонецФункции

#Область Подбор

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	// Обработаем добавленные строки
	МассивОсновныхСредств = ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "ОсновноеСредство");
	ЗаполнитьПредыдущиеЗначенияВФоне();
	ЗаполнитьНовыеЗначения(ДобавленныеСтроки);
	ЗаполнитьУстаревшиеКолонки(МассивОсновныхСредств);
	ЗаполнитьДобавленныеКолонки();
	ЗаполнитьПолеКомпонентыАмортизации();
	
	УстановитьПараметрыФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПредыдущиеЗначения()
	
	ДлительнаяОперация = ЗаполнитьПредыдущиеЗначенияВФоне();
	ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПредыдущиеЗначенияВФоне(ОсновныеСредства = Неопределено)
	
	Если Объект.ОС.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение значений предыдущих элементов амортизации'");
	
	Если ОсновныеСредства = Неопределено Тогда
		ОсновныеСредства = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ОС, "ОсновноеСредство");
	КонецЕсли;
	
	МаксимальноеКоличествоОСБезФона = 10;
	Если ОсновныеСредства.Количество() < МаксимальноеКоличествоОСБезФона Тогда
		// Если заполняем по небольшому количеству строк, то запускаем получение информации не в фоне
		ПараметрыЗапуска.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	ДатаНачалаПрименения = УправлениеВнеоборотнымиАктивамиКлиентСервер.ДатаНачалаПримененияИзмененийЭлементовАмортизации(
		Объект.Дата,
		Объект.НакоплениеИнформацииЗаГод,
		ЗадерживатьПериодДействия);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Организация",           Объект.Организация);
	ПараметрыВыполнения.Вставить("Ссылка",                Объект.Ссылка);
	ПараметрыВыполнения.Вставить("МассивОсновныхСредств", ОсновныеСредства);
	ПараметрыВыполнения.Вставить("ПериодСведений",        Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	ПараметрыВыполнения.Вставить("ДатаНачалаПрименения",  ДатаНачалаПрименения);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ИзменениеПараметровНачисленияАмортизацииОС.ПредыдущиеЗначенияЭлементовАмортизации",
		ПараметрыВыполнения,
		ПараметрыЗапуска);
	
	Если ДлительнаяОперация <> Неопределено И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗаполнитьПредыдущиеЗначенияПослеПолученияВФоне(ДлительнаяОперация);
		
		Возврат Неопределено;
	Иначе
		Элементы.ГруппаОжиданиеЗаполненияПредыдущихЗначений.Видимость = Истина;
		Элементы.ОС.ТолькоПросмотр = Истина;
		Возврат ДлительнаяОперация;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредыдущиеЗначенияПослеПолученияВФоне(Результат)
	
	Элементы.ГруппаОжиданиеЗаполненияПредыдущихЗначений.Видимость = Ложь;
	Элементы.ОС.ТолькоПросмотр = Ложь;
	
	Если Результат = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	ДанныеРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПредыдущиеЗначения = ДанныеРезультата.ПредыдущиеЗначения;
	КомпонентыАмортизацииПредыдущиеЗначения = ДанныеРезультата.КомпонентыАмортизацииПредыдущиеЗначения;
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		ПредыдущееЗначение = ПредыдущиеЗначения.Найти(СтрокаТаблицы.ОсновноеСредство, "ОсновноеСредство");
		Если ПредыдущееЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредыдущееЗначение);
			
			Если ПредыдущееЗначение.ГрупповойОбъектОС Тогда
				СтрокаТаблицы.СпособНачисленияАмортизации = СтрокаТаблицы.СпособНачисленияАмортизацииПредыдущееЗначение;
			КонецЕсли;
		
			// Рассчитаем остаток срока и объема выработки
			Дельта = СтрокаТаблицы.СрокПолезногоИспользованияБУПредыдущееЗначение
				- СтрокаТаблицы.ОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение;
			СтрокаТаблицы.ОстатокСрокаПолезногоИспользованияБУ = СтрокаТаблицы.СрокПолезногоИспользованияБУ - Дельта;
			Дельта = СтрокаТаблицы.ОбъемПродукцииРаботБУПредыдущееЗначение
				- СтрокаТаблицы.ОстатокОбъемПродукцииРаботБУПредыдущееЗначение;
			СтрокаТаблицы.ОстатокОбъемПродукцииРаботБУ = СтрокаТаблицы.ОбъемПродукцииРаботБУ - Дельта;
		КонецЕсли;
		
		// Добавим компоненты
		Если КомпонентыАмортизацииПредыдущиеЗначения <> Неопределено Тогда
			Отбор = Новый Структура("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
			КомпонентыАмортизацииОсновногоСредства = КомпонентыАмортизацииПредыдущиеЗначения.НайтиСтроки(Отбор);
			Если КомпонентыАмортизацииОсновногоСредства.Количество() > 0 Тогда
				ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
				УдалитьКомпонентыАмортизацииПредыдущееЗначение(ИдентификаторСтроки);
				Для каждого Компонент Из КомпонентыАмортизацииОсновногоСредства Цикл
					НоваяСтрока = КомпонентыАмортизацииПредыдущееЗначение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Компонент);
					НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПолеКомпонентыАмортизацииПредыдущееЗначение();
	
КонецПроцедуры

&НаСервере 
Процедура УдалитьКомпонентыАмортизацииПредыдущееЗначение(ИдентификаторСтроки)
	
	Отбор = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	УдаляемыеСтроки = КомпонентыАмортизацииПредыдущееЗначение.НайтиСтроки(Отбор);
	
	Для каждого Строка Из УдаляемыеСтроки Цикл
		КомпонентыАмортизацииПредыдущееЗначение.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуФоновогоЗаданияПредыдущиеЗначения(ДлительнаяОперация)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьПредыдущиеЗначенияЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредыдущиеЗначенияЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		ЗаполнитьПредыдущиеЗначенияПослеПолученияВФоне(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСвязанныеЭлементы(Строка, ИзменяемаяКолонка)
	
	Если ИзменяемаяКолонка = "ОбъемПродукцииРаботБУ" Тогда
		ВычисляемаяКолонка = "ОстатокОбъемПродукцииРаботБУ";
	ИначеЕсли ИзменяемаяКолонка = "ОстатокОбъемПродукцииРаботБУ" Тогда	
		ВычисляемаяКолонка = "ОбъемПродукцииРаботБУ";
	ИначеЕсли ИзменяемаяКолонка = "ОстатокСрокаПолезногоИспользованияБУ" Тогда
		ВычисляемаяКолонка = "СрокПолезногоИспользованияБУ";
	ИначеЕсли  ИзменяемаяКолонка = "СрокПолезногоИспользованияБУ" Тогда
		ВычисляемаяКолонка = "ОстатокСрокаПолезногоИспользованияБУ";
	Иначе
		Возврат;
	КонецЕсли;
	
	Дельта = Строка[ИзменяемаяКолонка] - Строка[ИзменяемаяКолонка + "ПредыдущееЗначение"];
	Строка[ВычисляемаяКолонка] = Строка[ВычисляемаяКолонка + "ПредыдущееЗначение"] + Дельта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовыеЗначения(ДобавленныеСтроки = Неопределено)
	
	Если ДобавленныеСтроки = Неопределено Тогда
		ДобавленныеСтроки = Объект.ОС;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки Цикл
		Для Каждого ИмяКолонки Из КолонкиТабличнойЧастиОС() Цикл
			СтрокаТаблицы[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки + "ПредыдущееЗначение"];
		КонецЦикла;
		ЗаполнитьДополнительныеКолонки(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.НадписьПредыдущееЗначение = НСтр("ru='до изменения'");
	СтрокаТаблицы.НадписьНовоеЗначение = НСтр("ru='после изменения'");
	СтрокаТаблицы.ЕдиницаУчета = ПараметрыОбъекта.ЕдиницыУчета[СтрокаТаблицы.ОсновноеСредство];
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗагрузитьОСИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	ОСДобавлены = Ложь;
	СписокДобавленныхОС = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользованияБУ = СтрокаТаблицы.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРаботБУ = СтрокаТаблицы.ОбъемПродукцииРаботБУ;
		НоваяСтрока.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		ЗаполнитьДополнительныеКолонки(НоваяСтрока);
		СписокДобавленныхОС.Добавить(СтрокаТаблицы.ОсновноеСредство);
		ОСДобавлены = Истина;
	КонецЦикла;
	Если ОСДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	ЗаполнитьПредыдущиеЗначенияВФоне(СписокДобавленныхОС);
	ЗаполнитьУстаревшиеКолонки(СписокДобавленныхОС);
	ЗаполнитьДобавленныеКолонки();
	Для Каждого Строка Из Объект.ОС Цикл
		Строка.СпособНачисленияАмортизации = Строка.СпособНачисленияАмортизацииПредыдущееЗначение;
	КонецЦикла;
	УстановитьПараметрыФормы();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстаревшиеКолонки(ОсновныеСредства = Неопределено)
	
	Если Объект.ОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновныеСредства = Неопределено Тогда
		ОсновныеСредства = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ОС, "ОсновноеСредство");
	КонецЕсли;
	
	// Дозаполним данные, которые нужны для совместимости расчетов с ПБУ6
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОсновныхСредств", ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних";
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	ТаблицаОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл
		СтрокаДанных = ТаблицаОС.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ = СтрокаДанных.СтоимостьДляВычисленияАмортизации;
		СтрокаОС.КоэффициентАмортизацииБУ            = СтрокаДанных.КоэффициентАмортизации;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентыАмортизацииОС

&НаСервере
Процедура ЗаполнитьПолеКомпонентыАмортизации()
	
	Для каждого СтрокаОС ИЗ Объект.ОС Цикл
		Отбор = Новый Структура("КлючСтроки", СтрокаОС.КлючСтроки);
		НайденныеСтроки = Объект.КомпонентыАмортизации.НайтиСтроки(Отбор);
		СпособНачисленияАмортизацииПоддерживаетКомпоненты =
			СпособыНачисленияАмортизацииПоКомпонентам().Найти(СтрокаОС.СпособНачисленияАмортизации) <> Неопределено;
		СтрокаОС.КомпонентыАмортизации = ?(СпособНачисленияАмортизацииПоддерживаетКомпоненты,
			ОписаниеКомпонентовАмортизации(НайденныеСтроки.Количество()),
			"");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеКомпонентыАмортизацииПредыдущееЗначение()
	
	Для каждого СтрокаОС ИЗ Объект.ОС Цикл
		Отбор = Новый Структура("ИдентификаторСтроки", СтрокаОС.ПолучитьИдентификатор());
		НайденныеСтроки = КомпонентыАмортизацииПредыдущееЗначение.НайтиСтроки(Отбор);
		СпособНачисленияАмортизацииПоддерживаетКомпоненты =
			СпособыНачисленияАмортизацииПоКомпонентам().Найти(СтрокаОС.СпособНачисленияАмортизацииПредыдущееЗначение) <> Неопределено;
		СтрокаОС.КомпонентыАмортизацииПредыдущееЗначение = ?(СпособНачисленияАмортизацииПоддерживаетКомпоненты,
			ОписаниеКомпонентовАмортизации(НайденныеСтроки.Количество()),
			"");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКомпонентовАмортизации(ВыбраннаяСтрока)
	
	АдресВременногоХранилища = ПоместитьКомпонентыАмортизацииВоВременноеХранилище(ВыбраннаяСтрока.КлючСтроки);
	
	ОткрытьФормуКомпонентыАмортизации(ВыбраннаяСтрока, АдресВременногоХранилища,
		ВыбраннаяСтрока.СпособНачисленияАмортизации, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКомпонентовАмортизацииПредыдущееЗначение(ВыбраннаяСтрока)
	
	АдресВременногоХранилища = ПоместитьКомпонентыАмортизацииПредыдущееЗначениеВоВременноеХранилище(ВыбраннаяСтрока.ПолучитьИдентификатор());
	
	ОткрытьФормуКомпонентыАмортизации(ВыбраннаяСтрока, АдресВременногоХранилища,
		ВыбраннаяСтрока.СпособНачисленияАмортизацииПредыдущееЗначение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКомпонентыАмортизации(ВыбраннаяСтрока, АдресХранилищаКомпонентовАмортизации, СпособНачисленияАмортизации, ТолькоПросмотр)
	
	ПараметрыЗакрытияФормы = Новый Структура;
	ПараметрыЗакрытияФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресХранилищаКомпонентовАмортизации", АдресХранилищаКомпонентовАмортизации);
	ПараметрыОткрытияФормы.Вставить("Организация",                          Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("Дата",                                 Объект.Дата);
	ПараметрыОткрытияФормы.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("ОсновноеСредство",                     ВыбраннаяСтрока.ОсновноеСредство);
	ПараметрыОткрытияФормы.Вставить("СпособНачисленияАмортизации",          СпособНачисленияАмортизации);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",                       ТолькоПросмотр);
	
	ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("Подключаемый_ПослеРедактированияКомпонентовАмортизации",
		ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	ОткрытьФорму("Документ.ИзменениеПараметровНачисленияАмортизацииОС.Форма.КомпонентыАмортизации",
		ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОповещениеОЗакрытииФормыВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьКомпонентыАмортизацииВоВременноеХранилище(КлючСтроки);
	
	Если ЗначениеЗаполнено(КлючСтроки) Тогда
		Отбор = Новый Структура("КлючСтроки", КлючСтроки);
		ТаблицаКомпонентыАмортизации = Объект.КомпонентыАмортизации.Выгрузить(Отбор);
	Иначе
		ТаблицаКомпонентыАмортизации = Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаКомпонентыАмортизации, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьКомпонентыАмортизацииПредыдущееЗначениеВоВременноеХранилище(ИдентификаторСтроки);
	
	Отбор = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаКомпонентыАмортизации = КомпонентыАмортизацииПредыдущееЗначение.Выгрузить(Отбор);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаКомпонентыАмортизации, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеРедактированияКомпонентовАмортизации(РезультатЗакрытия, ПараметрыЗакрытияФормы) Экспорт
	
	ВыбраннаяСтрока = ПараметрыЗакрытияФормы.ВыбраннаяСтрока;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) И РезультатЗакрытия.Модифицированность Тогда
		ЗаполнитьКомпонентыАмортизации(ВыбраннаяСтрока, РезультатЗакрытия.КомпонентыАмортизации);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКомпонентыАмортизации(ВыбраннаяСтрока, КомпонентыАмортизации)
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.КлючСтроки) Тогда
		УдалитьКомпонентыАмортизации(ВыбраннаяСтрока.КлючСтроки);
	Иначе
		ВыбраннаяСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Для каждого ДанныеКомпонентаАмортизации Из КомпонентыАмортизации Цикл
		СтрокаКомпонентАмортизации = Объект.КомпонентыАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКомпонентАмортизации, ДанныеКомпонентаАмортизации,
			"КомпонентАмортизации,Стоимость,ОстаточнаяСтоимость,СрокПолезногоИспользования,
			|ОстатокСрокаПолезногоИспользования,ОбъемПродукцииРабот,ОстатокОбъемаПродукцииРабот");
		СтрокаКомпонентАмортизации.КлючСтроки = ВыбраннаяСтрока.КлючСтроки;
	КонецЦикла;
	
	ВыбраннаяСтрока.КомпонентыАмортизации = ОписаниеКомпонентовАмортизации(КомпонентыАмортизации.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомпонентыАмортизации(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	УдаляемыеСтроки = Объект.КомпонентыАмортизации.НайтиСтроки(Отбор);
	
	Для каждого Строка Из УдаляемыеСтроки Цикл
		Объект.КомпонентыАмортизации.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКомпонентовАмортизации(КоличествоКомпонентов)
	
	Если КоличествоКомпонентов = 0 Тогда
		Возврат НСтр("ru = 'Нет'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 компонент;;%1 компонента;%1 компонентов;%1 компонентов'"),
			КоличествоКомпонентов);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьКомпонентыАмортизации(СтрокаТаблицы)
	
	Отбор = Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки);
	КопируемыеСтроки = Объект.КомпонентыАмортизации.НайтиСтроки(Отбор);
	
	СтрокаТаблицы.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	
	Для каждого Строка Из КопируемыеСтроки Цикл
		НоваяСтрока = Объект.КомпонентыАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Строка.КлючСтроки = СтрокаТаблицы.КлючСтроки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗаданияИДлительныеОперации

&НаКлиенте
Процедура СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	ШаблонСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:
							|%1
							|Подробности в журнале регистрации.'");
	Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Иначе
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти