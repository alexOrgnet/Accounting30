#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Организация,Дата,Ссылка,ОсновноеСредство");
	
	Если ЗначениеЗаполнено(Параметры.АдресХранилищаКомпонентовАмортизации)
		И ЭтоАдресВременногоХранилища(Параметры.АдресХранилищаКомпонентовАмортизации) Тогда
		
		КомпонентыАмортизацииИзПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаКомпонентовАмортизации);
		// Нам эти данные больше не нужны - удалим их.
		УдалитьИзВременногоХранилища(Параметры.АдресХранилищаКомпонентовАмортизации);
		
		Если ЗначениеЗаполнено(КомпонентыАмортизацииИзПараметров) Тогда
			КомпонентыАмортизации.Загрузить(КомпонентыАмортизацииИзПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.КомпонентыАмортизации.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	КонецЕсли;
	
	СпособНачисленияАмортизации = Параметры.СпособНачисленияАмортизации;
	
	Элементы.КомпонентыАмортизации.ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.КомпонентыАмортизации.ИзменятьСоставСтрок = НЕ Параметры.ТолькоПросмотр;
	Элементы.КомпонентыАмортизации.ИзменятьПорядокСтрок = НЕ Параметры.ТолькоПросмотр;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыТабличнойЧастиЦенностиОтВыбытия = Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС.ТабличныеЧасти.КомпонентыАмортизации.Реквизиты;
	
	ЭлементыИМетаданные = Новый Структура;
	ЭлементыИМетаданные.Вставить("КомпонентАмортизации", РеквизитыТабличнойЧастиЦенностиОтВыбытия.КомпонентАмортизации);
	ЭлементыИМетаданные.Вставить("Стоимость", РеквизитыТабличнойЧастиЦенностиОтВыбытия.Стоимость);
	Если СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
		ЭлементыИМетаданные.Вставить("СрокПолезногоИспользования", РеквизитыТабличнойЧастиЦенностиОтВыбытия.СрокПолезногоИспользования);
	ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
		ЭлементыИМетаданные.Вставить("ОбъемПродукцииРабот", РеквизитыТабличнойЧастиЦенностиОтВыбытия.ОбъемПродукцииРабот);
	КонецЕсли;
	
	ПроверяемыйСписок = РедактированиеВПодчиненныхФормах.НовыйПроверяемыйСписок();
	ПроверяемыйСписок.Таблица = КомпонентыАмортизации;
	ПроверяемыйСписок.Имя = "КомпонентыАмортизации";
	ПроверяемыйСписок.Синоним = СинонимТабличнойЧасти();
	
	РедактированиеВПодчиненныхФормах.ВыполнитьПроверкуЗаполненияТаблицыПоРеквизитамМетаданных(
		ПроверяемыйСписок, ЭлементыИМетаданные, Отказ);
	
	ПроверитьОтсутствиеДублей(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
	Если Не Отказ И Модифицированность Тогда
		Отказ = Не ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыКомпонентыАмортизации

&НаКлиенте
Процедура КомпонентыАмортизацииСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КомпонентыАмортизации.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстаточнаяСтоимость = 0 Тогда
		ТекущиеДанные.ОстаточнаяСтоимость = ТекущиеДанные.Стоимость;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпонентыАмортизацииСрокПолезногоИспользованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КомпонентыАмортизации.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокСрокаПолезногоИспользования = 0 Тогда
		ТекущиеДанные.ОстатокСрокаПолезногоИспользования = ТекущиеДанные.СрокПолезногоИспользования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпонентыАмортизацииОбъемПродукцииРаботПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КомпонентыАмортизации.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокОбъемаПродукцииРабот = 0 Тогда
		ТекущиеДанные.ОстатокОбъемаПродукцииРабот = ТекущиеДанные.ОбъемПродукцииРабот;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ЗакрытьФормуИВернутьРезультат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗакрытьФормуИВернутьРезультат(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если КомпонентыАмортизации.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	СпособНачисленияАмортизацииПропорциональноОбъемуПродукции = СпособНачисленияАмортизации =
		Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции;
	
	Элементы.КомпонентыАмортизацииСрокПолезногоИспользования.Видимость = НЕ СпособНачисленияАмортизацииПропорциональноОбъемуПродукции;
	Элементы.КомпонентыАмортизацииОстатокСрокаПолезногоИспользования.Видимость = НЕ СпособНачисленияАмортизацииПропорциональноОбъемуПродукции;
	Элементы.КомпонентыАмортизацииОбъемПродукцииРабот.Видимость = СпособНачисленияАмортизацииПропорциональноОбъемуПродукции;
	Элементы.КомпонентыАмортизацииОстатокОбъемаПродукцииРабот.Видимость = СпособНачисленияАмортизацииПропорциональноОбъемуПродукции;
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: %2'"), СинонимТабличнойЧасти(), ОсновноеСредство);
	
	УстановитьОграниченияЭлементовФормыИзМетаданных();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция СинонимТабличнойЧасти()
	
	Возврат НСтр("ru = 'Компоненты амортизации'");
	
КонецФункции

&НаСервере
Процедура УстановитьОграниченияЭлементовФормыИзМетаданных()
	
	ЭлементыИМетаданные = Новый Соответствие;
	
	ЭлементыИМетаданные.Вставить(Элементы.КомпонентыАмортизацииКомпонентАмортизации,
		Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС.ТабличныеЧасти.КомпонентыАмортизации.Реквизиты.КомпонентАмортизации);
	
	ЭлементыИМетаданные.Вставить(Элементы.КомпонентыАмортизацииСтоимость,
		Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС.ТабличныеЧасти.КомпонентыАмортизации.Реквизиты.Стоимость);
	
	Если СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
		ЭлементыИМетаданные.Вставить(Элементы.КомпонентыАмортизацииСрокПолезногоИспользования,
			Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС.ТабличныеЧасти.КомпонентыАмортизации.Реквизиты.СрокПолезногоИспользования);
	ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
		ЭлементыИМетаданные.Вставить(Элементы.КомпонентыАмортизацииОбъемПродукцииРабот,
			Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС.ТабличныеЧасти.КомпонентыАмортизации.Реквизиты.ОбъемПродукцииРабот);
	КонецЕсли;
	
	РедактированиеВПодчиненныхФормах.УстановитьСвойстваЭлементовПоРеквизитамМетаданных(ЭлементыИМетаданные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуИВернутьРезультат(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФормуИВернутьРезультат(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуИВернутьРезультат(ПередатьВладельцуРезультат)
	
	РезультатЗаполнения = Неопределено;
	
	Если ПередатьВладельцуРезультат Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		РезультатЗаполнения = Новый Структура;
		РезультатЗаполнения.Вставить("Модифицированность", Модифицированность);
		РезультатЗаполнения.Вставить("КомпонентыАмортизации", КомпонентыАмортизации);
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть(РезультатЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиВсего = Форма.КомпонентыАмортизации.Итог("Стоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Период = Новый МоментВремени(Дата, Ссылка);
	
	ДанныеКомпонентов = Документы.ИзменениеПараметровНачисленияАмортизацииОС.ПредыдущиеЗначенияЭлементовКомпонентыАмортизации(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредство),
		Период,
		Организация);
	
	КомпонентыАмортизации.Очистить();
	Для Каждого ДанныеКомпонента Из ДанныеКомпонентов Цикл
		ЗаполнитьЗначенияСвойств(КомпонентыАмортизации.Добавить(), ДанныеКомпонента);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтсутствиеДублей(Отказ)
	
	ТаблицаКомпонентов = КомпонентыАмортизации.Выгрузить(, "КомпонентАмортизации");
	ТаблицаКомпонентов.Колонки.Добавить("__КоличествоВхождений", ОбщегоНазначения.ОписаниеТипаЧисло(32));
	ТаблицаКомпонентов.ЗаполнитьЗначения(1, "__КоличествоВхождений");
	ТаблицаКомпонентов.Свернуть("КомпонентАмортизации", "__КоличествоВхождений");
	
	НайденыДубли = Ложь;
	
	Для каждого Строка Из ТаблицаКомпонентов Цикл
		Если Строка.__КоличествоВхождений > 1 Тогда
			НайденыДубли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденыДубли Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			СинонимТабличнойЧасти(), НСтр("ru = 'Значения в колонке ""Компонент"" не должны повторяться.'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

