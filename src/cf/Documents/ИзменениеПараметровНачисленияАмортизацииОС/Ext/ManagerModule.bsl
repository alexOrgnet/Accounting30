#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

// Определяет период, в котором доступен пересчет амортизации за год.
//
// Параметры:
//  Год - Дата - идентифицирует год
// 
// Возвращаемое значение:
//  Структура - период, ключи
//   * Начало - Дата
//   * Конец  - Дата
//
Функция ПериодДоступенПересчетАмортизации(Год) Экспорт
	
	НомерГода = Год(Год);
	
	Период = Новый Структура;
	Период.Вставить("Начало", Дата(НомерГода, 12, 1));
	Период.Вставить("Конец",  КонецГода(Период.Начало));
	
	Возврат Период;
	
	
КонецФункции

// Проверяет, доступен ли для документа, введенного указанной датой, пересчет амортизации за год.
//
// Параметры:
//  Дата - Дата - дата документа
// 
// Возвращаемое значение:
//  Булево - Истина, если пересчет доступен
//
Функция ДоступенПересчетАмортизации(Дата) Экспорт
	
	Период = ПериодДоступенПересчетАмортизации(Дата);
	Возврат Дата >= Период.Начало И Дата <= Период.Конец;
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();

	Результат = Запрос.Выполнить();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	НомераТаблиц = Новый Структура;

	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период));

	Запрос.Текст =
		ТекстЗапросаТаблицаОС(НомераТаблиц)
		+ ТекстЗапросаПараметровАмортизацииОСБУ(НомераТаблиц)
		+ ТекстЗапросаПараметровАмортизацииОСНУ(НомераТаблиц)
		+ ТекстЗапросаПараметровАмортизацииГрупповыхОС(НомераТаблиц)
		+ ТекстЗапросаСобытияОС(НомераТаблиц)
		+ ТекстЗапросаПроверкиПоОС(НомераТаблиц)
		+ ТекстЗапросаКомпонентыАмортизации(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

// Возвращает предыдущие значения элементов амортизации для переданного списка основных средств
//
// Параметры:
//  ПараметрыЗадания - Структура - Структура с ключами:
//                                 * Организация - Организация документа
//                                 * ПериодСведений - МоментВремени - включает дату документа и ссылку
//                                 * ДатаНачалаПрименения - Дата начала применения данных в документе
//                                 * МассивОсновныхСредств - Основные средства, для которых следует вернуть предыдущие значения
//  АдресХранилища - Строка - Адрес хранилища результата
//
Процедура ПредыдущиеЗначенияЭлементовАмортизации(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ТаблицаПредыдущиеЗначения = ЗначенияЭлементовАмортизации(
		ПараметрыЗадания.Организация,
		ПараметрыЗадания.ПериодСведений,
		ПараметрыЗадания.ДатаНачалаПрименения,
		ПараметрыЗадания.МассивОсновныхСредств);
	ТаблицаПредыдущиеЗначения.Индексы.Добавить("ОсновноеСредство");
	
	ТаблицаКомпонентыАмортизацииПредыдущиеЗначения = ПредыдущиеЗначенияЭлементовКомпонентыАмортизации(
		ПараметрыЗадания.МассивОсновныхСредств,
		ПараметрыЗадания.ПериодСведений,
		ПараметрыЗадания.Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("ПредыдущиеЗначения", ТаблицаПредыдущиеЗначения);
	Результат.Вставить("КомпонентыАмортизацииПредыдущиеЗначения", ТаблицаКомпонентыАмортизацииПредыдущиеЗначения);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Определяет предыдущие значения компонентов амортизации для заполнения документа.
//
// Параметры:
//  Отбор          - Массив - перечень основных средств, компоненты которого нужны
//  ПериодСведений - МоментВремени - момент времени документа
//  Организация    - СправочникСсылка.Организации - организация документа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. КомпонентыАмортизацииОС.НовыйАктуальныеЗначения
//  Неопределено - учет компонентов амортизации не ведется
//
Функция ПредыдущиеЗначенияЭлементовКомпонентыАмортизации(Отбор, ПериодСведений, Организация) Экспорт
	
	// Пересмотр состава компонентов амортизации в режиме "Накопление информации за год" пока не поддерживается
	
	ПредыдущиеЗначения = Неопределено;
	КомпонентыАмортизацииОС.ЗаполнитьАктуальныеЗначения(ПредыдущиеЗначения, Отбор, ПериодСведений, Организация);
	Возврат ПредыдущиеЗначения;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ЗагрузкаИзФайла

// Производит сопоставление данных, загружаемых в табличную часть ОС,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                               находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                               являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//       * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//       * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения, доступные для передачи на клиент.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	
	СтрокиПоискаОС = Новый Соответствие;
	
	Для Каждого ИсходныеДанные Из ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных) Цикл
		
		Запись = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ИсходныеДанные, "СрокПолезногоИспользованияБУ, ОбъемПродукцииРаботБУ, ЛиквидационнаяСтоимость");
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИсходныеДанные.ОС_Идентификатор) Тогда
			
			Попытка
				Идентификатор = Новый УникальныйИдентификатор(ИсходныеДанные.ОС_Идентификатор);
			Исключение
				// Приведение типа. Запись исключения не требуется.
				Идентификатор = Неопределено;
			КонецПопытки;
			
			Если Идентификатор <> Неопределено Тогда
				ОсновноеСредство  = Справочники.ОсновныеСредства.ПолучитьСсылку(Идентификатор);
				Если ОбщегоНазначения.СсылкаСуществует(ОсновноеСредство) Тогда
					Запись.ОсновноеСредство = ОсновноеСредство;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоискаОС = Новый Структура("ОсновноеСредство,ОС_ИнвентарныйНомер");
		ЗаполнитьЗначенияСвойств(СтрокаПоискаОС, ИсходныеДанные);
		
		СтрокиПоискаОС.Вставить(Результат.Индекс(Запись), СтрокаПоискаОС);
		
	КонецЦикла;
	
	Организация = ДополнительныеПараметры.Организация;
	Период      = ДополнительныеПараметры.Период;
	
	ОсновныеСредства = НайтиОсновныеСредства(СтрокиПоискаОС, Организация, Период);
	
	Для Каждого Запись Из Результат Цикл
		
		Значение = ОсновныеСредства[Результат.Индекс(Запись)];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			Запись.ОсновноеСредство = Значение;
		Иначе
			Неоднозначность = СписокНеоднозначностей.Добавить();
			Неоднозначность.Колонка       = "ОсновноеСредство";
			Неоднозначность.Идентификатор = Запись.Идентификатор;
			
			Запись.ОсновноеСредство = Значение[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//  ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ИмяКолонки             - Строка - Имя колонки, в который возникла неоднозначность. 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные, на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	// Поскольку из СопоставитьЗагружаемыеДанные нельзя получить перечень номенклатуры, вычислим его заново
	СтрокиПоискаОС = Новый Соответствие;
	
	СтрокаПоискаОС = Новый Структура("ОсновноеСредство,ОС_ИнвентарныйНомер");
	ЗаполнитьЗначенияСвойств(СтрокаПоискаОС, ЗагружаемыеЗначенияСтрока);
	
	СтрокиПоискаОС.Вставить(0, СтрокаПоискаОС);
	
	Организация = ДополнительныеПараметры.Организация;
	Период      = ДополнительныеПараметры.Период;
	
	ОсновныеСредства = НайтиОсновныеСредства(СтрокиПоискаОС, Организация, Период);
	
	Значения = ОсновныеСредства[0];
	Если Не ЗначениеЗаполнено(Значения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНеоднозначностей, Значения);
	Иначе
		СписокНеоднозначностей.Добавить(Значения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для обхода ошибки 00-00333085
//
// Параметры:
//  НеиспользуемыйПараметр - Неопределено
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(НеиспользуемыйПараметр) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Элементы амортизации
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭлементыАмортизации";
	КомандаПечати.Представление = НСтр("ru = 'Элементы амортизации'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 1;
	
	// Компоненты амортизации
	КомпонентыАмортизацииОС.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр),
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект,
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭлементыАмортизации") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭлементыАмортизации",
			НСтр("ru = 'Элементы амортизации'"),
			ПечатьПересмотрЭлементовАмортизации(МассивОбъектов, ОбъектыПечати),
			, // пиктограмма печатной формы отсутствует
			"Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_ЭлементыАмортизации");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомпонентыАмортизации") Тогда
		
		КомпонентыАмортизацииОС.ВывестиТабличныйДокументВКоллекцию(МассивОбъектов,
			КоллекцияПечатныхФорм, ОбъектыПечати);
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура - обработчик обновления
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьСпособыНачисленияАмортизацииВТабличнойЧасти(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка КАК Ссылка,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка.Организация КАК Организация,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка.Дата КАК Дата,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОбрабатываемыеОС
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ИзменениеПараметровНачисленияАмортизацииОСОС
	|ГДЕ
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяССылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК ДатаСведений,
	|	ОбрабатываемыеОС.Дата КАК Дата,
	|	ОбрабатываемыеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ОбрабатываемыеОС.Ссылка КАК Ссылка,
	|	ОбрабатываемыеОС.Организация КАК Организация
	|ПОМЕСТИТЬ ДатыСведенияОбрабатываемыхОС
	|ИЗ
	|	ОбрабатываемыеОС КАК ОбрабатываемыеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ОбрабатываемыеОС.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ОбрабатываемыеОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОбрабатываемыеОС.Дата >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбрабатываемыеОС.Дата,
	|	ОбрабатываемыеОС.ОсновноеСредство,
	|	ОбрабатываемыеОС.Ссылка,
	|	ОбрабатываемыеОС.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДатыСведенияОбрабатываемыхОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ДатыСведенияОбрабатываемыхОС.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизации
	|ИЗ
	|	ДатыСведенияОбрабатываемыхОС КАК ДатыСведенияОбрабатываемыхОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ДатыСведенияОбрабатываемыхОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ДатыСведенияОбрабатываемыхОС.ДатаСведений = ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|			И ДатыСведенияОбрабатываемыхОС.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|ГДЕ
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаОбрабатываемыхОС = РезультатЗапроса.Выгрузить();
	ТаблицаОбрабатываемыхОС.Индексы.Добавить("Ссылка");
	ТаблицаОбрабатываемыхОС.Индексы.Добавить("ОсновноеСредство");
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	// Получим обрабатываемые документы
	МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДокументов);
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ИзменениеПараметровНачисленияАмортизацииОС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ);
			Блокировка.Заблокировать();
		
			ДокументОбъект = Документ.ПолучитьОбъект();
			// Если объект ранее был удален, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		
			Для Каждого СтрокаОсновныхСредств Из ДокументОбъект.ОС Цикл
				Если ЗначениеЗаполнено(СтрокаОсновныхСредств.СпособНачисленияАмортизации) Тогда
					Продолжить;
				КонецЕсли;
			
				ПараметрыОтбора = Новый Структура("Ссылка, ОсновноеСредство", Документ, СтрокаОсновныхСредств.ОсновноеСредство);
				СтрокиТаблицы = ТаблицаОбрабатываемыхОС.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиТаблицы.Количество() = 0 Тогда
					Продолжить;
				Иначе
					СтрокаТаблицы = СтрокиТаблицы[0]; 
				КонецЕсли;
				СтрокаОсновныхСредств.СпособНачисленияАмортизации = СтрокаТаблицы.СпособНачисленияАмортизации;
			КонецЦикла;
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре Документы.ИзменениеПараметровНачисленияАмортизацииОС.ЗаполнитьСпособыНачисленияАмортизацииВТабличнойЧасти() не удалось обработать документ по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС, Документ, ТекстСообщения);
				
		КонецПопытки;
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре Документы.ИзменениеПараметровНачисленияАмортизацииОС.ЗаполнитьСпособыНачисленияАмортизацииВТабличнойЧасти() не удалось обработать документ: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.ИзменениеПараметровНачисленияАмортизацииОС.ЗаполнитьСпособыНачисленияАмортизацииВТабличнойЧасти() обработала очередную порцию документов: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения нового поля НакоплениеИнформацииЗаГод.
// Поле заполняется только если установлено расширение, добавляющее возможность перерасчета амортизации нарастающим итогом
// до выпуска версии с этим функционалом.
// Расширение публиковалось для версии 3.0.131 в https://partners.v8.1c.ru/forum/topic/2113468
// Обработка позволяет сохранить последствия соглашений, заложенных в расширение:
// документы за 31 декабря считались относящимися к накоплению информации за год.
// В остальных случаях обработка не требуется: подходит значение по умолчанию (Ложь).
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//         Добавляется поле Курсор - момент времени, до которого выполнена обработка данных.
//
Процедура ЗаполнитьНакоплениеИнформацииЗаГод(ПараметрыОбработчика) Экспорт
	
	ФункциональностьДоступна = Ложь;
	АмортизацияАктивовПересчет.ОпределитьФункциональностьДоступна(ФункциональностьДоступна);
	Если Не ФункциональностьДоступна Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УстановленоРасширениеПерерасчетАмортизацииНарастающимИтогом(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ИзменениеПараметров.Ссылка КАК Ссылка,
	|	ИзменениеПараметров.МоментВремени КАК Курсор
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК ИзменениеПараметров
	|ГДЕ
	|	ИзменениеПараметров.Дата МЕЖДУ &НачалоУсловногоПериода И &КонецУсловногоПериода
	|	И НЕ ИзменениеПараметров.НакоплениеИнформацииЗаГод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИзменениеПараметров.МоментВремени УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		Запрос = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "ИзменениеПараметров");
		Запрос.Оператор.Отбор.Добавить("ИзменениеПараметров.МоментВремени < &Курсор");
		ТекстЗапроса = Запрос.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	УсловнаяДата = Дата(2022, 12, 31); // В расширении тригером поведения был последний день года, а не весь месяц
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор", Курсор);
	Запрос.УстановитьПараметр("НачалоУсловногоПериода", УсловнаяДата);
	Запрос.УстановитьПараметр("КонецУсловногоПериода",  КонецДня(УсловнаяДата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ИзменениеПараметровНачисленияАмортизацииОС");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Или ДокументОбъект.НакоплениеИнформацииЗаГод Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.НакоплениеИнформацииЗаГод = Истина;
		
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщение = СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении обработчика Документы.ИзменениеПараметровНачисленияАмортизацииОС.ЗаполнитьНачалоПрименения.
                      |%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ИзменениеПараметровНачисленияАмортизацииОС,
				Выборка.Ссылка,
				Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, завершена ли процедура обработки данных ЗаполнитьНакоплениеИнформацииЗаГод.
//
// Параметры:
//  МетаданныеИОтбор - ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным - контекст вызова
// 
// Возвращаемое значение:
//  Булево - Истина, если расширение не было установлено или его соглашения перенесены в информационную базу.
//
Функция СброшеноРасширениеНакоплениеИнформацииЗаГод(МетаданныеИОтбор) Экспорт
	
	ФункциональностьДоступна = Ложь;
	АмортизацияАктивовПересчет.ОпределитьФункциональностьДоступна(ФункциональностьДоступна);
	Если Не ФункциональностьДоступна Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если МетаданныеИОтбор.Метаданные <> Метаданные.Документы.РегламентнаяОперация 
		Или МетаданныеИОтбор.Данные.ВидОперации <> Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УстановленоРасширениеПерерасчетАмортизацииНарастающимИтогом(Истина) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УсловнаяДата = Дата(2022, 12, 31); // В расширении тригером поведения был последний день года, а не весь месяц
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоУсловногоПериода", УсловнаяДата);
	Запрос.УстановитьПараметр("КонецУсловногоПериода",  КонецДня(УсловнаяДата));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИзменениеПараметров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК ИзменениеПараметров
	|ГДЕ
	|	ИзменениеПараметров.Дата МЕЖДУ &НачалоУсловногоПериода И &КонецУсловногоПериода
	|	И НЕ ИзменениеПараметров.НакоплениеИнформацииЗаГод";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначенияЭлементовАмортизации(Организация, ПериодСведений, ДатаНачалаПрименения, МассивОсновныхСредств)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодСведений, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаНачалаПрименения);
	Запрос.УстановитьПараметр("МассивОсновныхСредств", МассивОсновныхСредств);
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетУчетаГрупповыхОС", ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ПОМЕСТИТЬ МассивОсновныхСредств
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&МассивОсновныхСредств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК СпособНачисленияАмортизацииПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияБУПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемПродукцииРаботБУПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) - ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОстатокОбъемПродукцииРаботБУПредыдущееЗначение,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимостьПредыдущееЗначение,
	|	РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СостоянияОСОрганизацийСрезПоследних.ДатаСостояния, &ТекущаяДата), МЕСЯЦ, ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0)), МЕСЯЦ) КАК ОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение,
	|	СостоянияОСОрганизацийСрезПоследних.ДатаСостояния КАК НачалоОтсчета,
	|	СправочникОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ЛОЖЬ КАК ГрупповойОбъектОС
	|ИЗ
	|	МассивОсновныхСредств КАК СправочникОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(
	|				,
	|				&Период,
	|				,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ВыработкаОСОбороты
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК СостоянияОСОрганизацийСрезПоследних
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	СправочникОсновныеСредства.ОсновноеСредство.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""",
	|	ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ (ЕСТЬNULL(СрокиИспользованияГрупповыхОбъектовОС.СрокИспользованияОстаток, 0) - ХозрасчетныйОстатки.КоличествоОстаток) / ХозрасчетныйОстатки.КоличествоОстаток
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(ПараметрыАмортизацииГрупповыхОС.ЛиквидационнаяСтоимость, 0),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ (ЕСТЬNULL(СрокиИспользованияГрупповыхОбъектовОС.СрокИспользованияОстаток, 0) - ХозрасчетныйОстатки.КоличествоОстаток) / ХозрасчетныйОстатки.КоличествоОстаток
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	СправочникОсновныеСредства.ОсновноеСредство,
	|	ИСТИНА
	|ИЗ
	|	МассивОсновныхСредств КАК СправочникОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СрокиИспользованияГрупповыхОбъектовОС.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК СрокиИспользованияГрупповыхОбъектовОС
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = СрокиИспользованияГрупповыхОбъектовОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет = &СчетУчетаГрупповыхОС,
	|				&ВидСубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&МассивОсновныхСредств)) КАК ХозрасчетныйОстатки
	|		ПО СправочникОсновныеСредства.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлементыАмортизацииГрупповыхОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОсновныхСредств)) КАК ПараметрыАмортизацииГрупповыхОС
	|		ПО (СправочникОсновныеСредства.ОсновноеСредство = СрокиИспользованияГрупповыхОбъектовОС.ОсновноеСредство)";
	
	Значения = Запрос.Выполнить().Выгрузить();
	
	// Формула в запросе идеализирована - она подходит для случая, когда
	// сроки совпадают с числом календарных месяцев.
	// То есть, объект приобретается первого числа месяца и амортизируется сразу с этой даты.
	// В реальности, приобретаться может не первого числа, и тогда период амортизации захватывает на один месяц больше.
	// Например, купили 2 января, срок амортизации 1 год, это значит, амортизация будет начисляться 13 месяцев
	// (в первый и последний месяц - за соответствующие части месяцев).
	// Чтобы этого избежать, применяется задержка начала амортизации с месяца, следующего за приобретением.
	// Но и в этом случае получается, что последний месяц амортизации отстоит от даты покупки на один месяц дальше,
	// чем номинальное число месяцев - в примере выше последним месяцем амортизация также будет 13-ый месяц с даты покупки.
	
	ЗадерживатьАмортизацию   = Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(
		ДатаНачалаПрименения,
		Организация);
	КонецЗадержкиАмортизации = '0001-01-01';
	Если Не ЗадерживатьАмортизацию Тогда
		КонецЗадержкиАмортизации = Перечисления.АлгоритмыПериодаАмортизации.КонецЗадержкиАмортизации(
			ДатаНачалаПрименения,
			Организация);
		КонецЗадержкиАмортизации = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата).ПривестиЗначение(
			КонецЗадержкиАмортизации);
	КонецЕсли;
	
	Для Каждого ОписаниеОсновногоСредства Из Значения Цикл
		Если ЗадерживатьАмортизацию
			Или ОписаниеОсновногоСредства.НачалоОтсчета < КонецЗадержкиАмортизации
			Или НачалоДня(ОписаниеОсновногоСредства.НачалоОтсчета) <> НачалоМесяца(ОписаниеОсновногоСредства.НачалоОтсчета) Тогда
			ОписаниеОсновногоСредства.ОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение =
				ОписаниеОсновногоСредства.ОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата                        КАК Период,
	|	Реквизиты.Организация                 КАК Организация,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ОтражатьВНалоговомУчете     КАК ОтражатьВНалоговомУчете
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОС(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ГрупповыеОсновныеСредства", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Регистратор,
	|	ТаблицаОС.Ссылка.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	ТаблицаОС.Ссылка.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.ЕдиницаУчета КАК ЕдиницаУчета,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ,
	|	ТаблицаОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	ТаблицаОС.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	|	ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизацииБУ,
	|	ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскоренияБУ,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботБУ,
	|	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ТаблицаОС.КлючСтроки КАК КлючСтроки
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ЕдиницаУчета = ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаТаблицыДокумента()

Функция ТекстЗапросаПараметровАмортизацииОСБУ(НомераТаблиц)

	НомераТаблиц.Вставить("ПараметровАмортизацииОСБУ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПараметровАмортизацииОСБУТаблица", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка      КАК Регистратор,
	|	Реквизиты.Дата        КАК Период,
	|	Реквизиты.Номер       КАК Номер,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор                                   КАК Регистратор,
	|	ТаблицаОС.НомерСтроки                                   КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство                              КАК ОсновноеСредство,
	|	ТаблицаОС.КоэффициентАмортизацииБУ                      КАК КоэффициентАмортизации,
	|	ТаблицаОС.КоэффициентУскоренияБУ                        КАК КоэффициентУскорения,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ                         КАК ОбъемПродукцииРабот,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ                  КАК СрокПолезногоИспользования,
	|	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ           КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаОС.ЛиквидационнаяСтоимость                       КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.СпособНачисленияАмортизации                   КАК СпособНачисленияАмортизации
	|ИЗ
	|	ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ОтражатьВБухгалтерскомУчете = ИСТИНА // Если галочка отключена, то результат будет пустой
	|	И ТаблицаОС.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПараметровАмортизацииГрупповыхОС(НомераТаблиц)

	НомераТаблиц.Вставить("ПараметрыАмортизацииГрупповыхОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПараметрыАмортизацииГрупповыхОСТаблица", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка                   КАК Регистратор,
	|	Реквизиты.Дата                     КАК Период,
	|	Реквизиты.Номер                    КАК Номер,
	|	Реквизиты.Организация              КАК Организация,
	|	Ложь                               КАК ЭтоПеремещение
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор                                 КАК Регистратор,
	|	ТаблицаОС.НомерСтроки                                 КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ОтражатьВБухгалтерскомУчете = ИСТИНА // Если галочка отключена, то результат будет пустой
	|	И ТаблицаОС.ЕдиницаУчета = ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПараметровАмортизацииОСНУ(НомераТаблиц)

	НомераТаблиц.Вставить("ПараметровАмортизацииОСНУ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПараметровАмортизацииОСНУТаблица", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка           КАК Регистратор,
	|	Реквизиты.Дата             КАК Период,
	|	Реквизиты.Номер            КАК Номер,
	|	Реквизиты.Организация      КАК Организация,
	|	&ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор                  КАК Регистратор,
	|	ТаблицаОС.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|	ТаблицаОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользования,
	|	ТаблицаОС.ПРДляВычисленияАмортизации   КАК ПРДляВычисленияАмортизации
	|ИЗ
	|	ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ОтражатьВНалоговомУчете = ИСТИНА // Если галочка отключена, то результат будет пустой
	|	И ТаблицаОС.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСобытияОС(НомераТаблиц)

	НомераТаблиц.Вставить("СобытияОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СобытияОСТаблица", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка      КАК Регистратор,
	|	Реквизиты.Дата        КАК Период,
	|	Реквизиты.Номер       КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СобытиеОС   КАК СобытиеОС
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор      КАК Регистратор,
	|	ТаблицаОС.НомерСтроки      КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	0                          КАК СуммаЗатратБУ,
	|	0                          КАК СуммаЗатратНУ,
	|	0                          КАК СуммаЗатратУСН
	|ИЗ
	|	ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПроверкиПоОС(НомераТаблиц)

	НомераТаблиц.Вставить("ПроверкиПоОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка                   КАК Регистратор,
	|	Реквизиты.Дата                     КАК Период,
	|	Реквизиты.Организация              КАК Организация,
	|	""ОС""                             КАК ИмяСписка
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаКомпонентыАмортизации(НомераТаблиц)

	НомераТаблиц.Вставить("КомпонентыАмортизации",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КомпонентыАмортизацииТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	КомпонентыАмортизации.КомпонентАмортизации КАК КомпонентАмортизации,
	|	КомпонентыАмортизации.Стоимость КАК Стоимость,
	|	КомпонентыАмортизации.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	КомпонентыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	КомпонентыАмортизации.ОстатокСрокаПолезногоИспользования КАК ОстатокСрокаПолезногоИспользования,
	|	КомпонентыАмортизации.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	КомпонентыАмортизации.ОстатокОбъемаПродукцииРабот КАК ОстатокОбъемаПродукцииРабот
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.КомпонентыАмортизации КАК КомпонентыАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО КомпонентыАмортизации.Ссылка = ТаблицаОС.Регистратор
	|			И КомпонентыАмортизации.КлючСтроки = ТаблицаОС.КлючСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#Область ЗагрузкаИзФайла

Функция ЗапросПоискаОсновныхСредств(ТаблицаПоиска, Организация, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоиска.ОсновноеСредство КАК ОсновноеСредствоПоУИД,
	|	ТаблицаПоиска.Наименование КАК Наименование,
	|	ТаблицаПоиска.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаПоиска.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаПоиска.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПоиска.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		КОГДА НЕ ОсновныеСредства.Ссылка ЕСТЬ NULL
	|			ТОГДА ОсновныеСредства.Ссылка
	|		ИНАЧЕ ОсновныеСредстваКраткоеНаименование.Ссылка
	|	КОНЕЦ КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаПоиска.ИнвентарныйНомер, """") = ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """")
	|			ТОГДА 2
	|		КОГДА ЕСТЬNULL(ОсновныеСредстваКраткоеНаименование.НаименованиеПолное, """") = ЕСТЬNULL(ОсновныеСредства.НаименованиеПолное, """")
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесВыборки
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ТаблицаПоиска.ИнвентарныйНомер = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|			И (НЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ЭтоГруппа)
	|			И (НЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредстваКраткоеНаименование
	|		ПО ТаблицаПоиска.Наименование = ОсновныеСредстваКраткоеНаименование.Наименование
	|			И (НЕ ОсновныеСредстваКраткоеНаименование.ЭтоГруппа)
	|			И (НЕ ОсновныеСредстваКраткоеНаименование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО ТаблицаПоиска.НаименованиеПолное = ОсновныеСредства.НаименованиеПолное
	|			И (НЕ ОсновныеСредства.ЭтоГруппа)
	|			И (НЕ ОсновныеСредства.ПометкаУдаления)
	|ГДЕ
	|	(НЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ НЕ ОсновныеСредстваКраткоеНаименование.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ОсновныеСредства.Ссылка ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки УБЫВ
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Период",        Период);
	
	Возврат Запрос;
	
КонецФункции

Функция НайтиОсновныеСредства(СтрокиПоискаОС, Организация, Период)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СтрокиПоискаОС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПоиска = Новый ТаблицаЗначений;
	ДанныеПоиска.Колонки.Добавить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	ДанныеПоиска.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеПоиска.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ДанныеПоиска.Колонки.Добавить("ИнвентарныйНомер",   ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ДанныеПоиска.Колонки.Добавить("ОсновноеСредство",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого СтрокаПоискаОС Из СтрокиПоискаОС Цикл
		
		Запись = ДанныеПоиска.Добавить();
		Запись.НомерСтроки        = СтрокаПоискаОС.Ключ;
		Запись.Наименование       = СтрокаПоискаОС.Значение.ОсновноеСредство;
		Запись.НаименованиеПолное = СтрокаПоискаОС.Значение.ОсновноеСредство;
		Запись.ИнвентарныйНомер   = СтрокаПоискаОС.Значение.ОС_ИнвентарныйНомер;
		
	КонецЦикла;
	
	Запрос = ЗапросПоискаОсновныхСредств(ДанныеПоиска, Организация, Период);
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		НайденныеОсновныеСредства = Новый Массив;
		
		ВыборкаВесСтроки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВесСтроки.Следующий() Цикл
			ВыборкаОсновноеСредство = ВыборкаВесСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОсновноеСредство.Следующий() Цикл
				НайденныеОсновныеСредства.Добавить(ВыборкаОсновноеСредство.ОсновноеСредство);
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НайденныеОсновныеСредства) Тогда
			Продолжить;
		ИначеЕсли НайденныеОсновныеСредства.Количество() = 1 Тогда
			Значение = НайденныеОсновныеСредства[0];
		Иначе
			Значение = НайденныеОсновныеСредства;
		КонецЕсли;
		
		Результат.Вставить(ВыборкаНомерСтроки.НомерСтроки, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция ПечатьПересмотрЭлементовАмортизации(Ссылки, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеПараметровНачисленияАмортизацииОС.Ссылка КАК Ссылка,
	|	ИзменениеПараметровНачисленияАмортизацииОС.Дата КАК Дата,
	|	ИзменениеПараметровНачисленияАмортизацииОС.МоментВремени КАК МоментВремени,
	|	ИзменениеПараметровНачисленияАмортизацииОС.НакоплениеИнформацииЗаГод КАК НакоплениеИнформацииЗаГод,
	|	ИзменениеПараметровНачисленияАмортизацииОС.СобытиеОС КАК СобытиеОС,
	|	ИзменениеПараметровНачисленияАмортизацииОС.Организация КАК Организация,
	|	ИзменениеПараметровНачисленияАмортизацииОС.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	ИзменениеПараметровНачисленияАмортизацииОС.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо,
	|	ИзменениеПараметровНачисленияАмортизацииОС.ОС.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОсновноеСредство КАК ОсновноеСредство,
	|		СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ,
	|		ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботБУ,
	|		СтоимостьДляВычисленияАмортизацииБУ КАК СтоимостьДляВычисленияАмортизацииБУ,
	|		КоэффициентУскоренияБУ КАК КоэффициентУскоренияБУ,
	|		ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|		СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|		ОсновноеСредство.ЕдиницаУчета КАК ЕдиницаУчета
	|	) КАК ОС
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС КАК ИзменениеПараметровНачисленияАмортизацииОС
	|ГДЕ
	|	ИзменениеПараметровНачисленияАмортизацииОС.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб        = Истина;
	Результат.КлючПараметровПечати = "Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_ЭлементыАмортизации";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_ЭлементыАмортизации");
	
	ОбластиМакета = Новый Структура("Шапка, Подпись");
	Для Каждого ОписаниеОбласти Из ОбластиМакета Цикл
		ОбластиМакета[ОписаниеОбласти.Ключ] = Макет.ПолучитьОбласть(ОписаниеОбласти.Ключ);
	КонецЦикла;
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НачалоОбластиПечати = Результат.ВысотаТаблицы + 1;
		
		// Начало документа
		
		ЗадерживатьПериодДействия = Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(
			ВыборкаДокумент.Дата,
			ВыборкаДокумент.Организация);
		
		ДатаНачалаПрименения = УправлениеВнеоборотнымиАктивамиКлиентСервер.ДатаНачалаПримененияИзмененийЭлементовАмортизации(
			ВыборкаДокумент.Дата,
			ВыборкаДокумент.НакоплениеИнформацииЗаГод,
			ЗадерживатьПериодДействия);
		
		ОбластиМакета.Шапка.Параметры.Заполнить(ВыборкаДокумент);
		ФорматированныеПараметры = Новый Структура;
		ФорматированныеПараметры.Вставить("ДатаДокумента", НРег(Формат(ВыборкаДокумент.Дата, "ДЛФ=D")));
		ФорматированныеПараметры.Вставить("ДействуетС", Формат(ДатаНачалаПрименения, "ДФ='MMMM yyyy ""г.""'"));
		ОбластиМакета.Шапка.Параметры.Заполнить(ФорматированныеПараметры);
		Результат.Вывести(ОбластиМакета.Шапка);
		
		// Строки таблицы
		ТаблицаСтрокОС = ВыборкаДокумент.ОС.Выгрузить();
		ТаблицаСтрокОС = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаСтрокОС,
			ВыборкаДокумент.Организация, ВыборкаДокумент.Дата);
		МассивСпособов =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСтрокОС.ВыгрузитьКолонку("СпособНачисленияАмортизации"));
		
		ПредыдущиеЗначения = ЗначенияЭлементовАмортизации(
			ВыборкаДокумент.Организация,
			ВыборкаДокумент.МоментВремени,
			ДатаНачалаПрименения,
			ТаблицаСтрокОС.ВыгрузитьКолонку("ОсновноеСредство"));

		НастройкиКолонок = Новый Структура;
		НастройкиКолонок.Вставить("ПоказатьСрокИспользования", Ложь);
		НастройкиКолонок.Вставить("ПоказатьОстатокСрокаИспользования", Ложь);
		НастройкиКолонок.Вставить("ПоказатьВыработку", Ложь);
		НастройкиКолонок.Вставить("ПоказатьКоэффициентУскорения", Ложь);
		// Получим настройки таблицы
		НастройкиКолонок.ПоказатьСрокИспользования 
			= (МассивСпособов.Найти(Перечисления.СпособыНачисленияАмортизацииОС.Линейный) <> Неопределено);
		НастройкиКолонок.ПоказатьВыработку 
			= (МассивСпособов.Найти(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) <> Неопределено);
		Если МассивСпособов.Найти(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) <> Неопределено Тогда
			НастройкиКолонок.ПоказатьКоэффициентУскорения = Истина;
			НастройкиКолонок.ПоказатьСрокИспользования = Истина;
		Иначе
			НастройкиКолонок.ПоказатьКоэффициентУскорения = Ложь;
		КонецЕсли;
		Если Не НастройкиКолонок.ПоказатьВыработку И Не НастройкиКолонок.ПоказатьКоэффициентУскорения Тогда
			НастройкиКолонок.ПоказатьСрокИспользования = Истина;
		КонецЕсли;
		
		НастройкиКолонок.ПоказатьОстатокСрокаИспользования = НастройкиКолонок.ПоказатьСрокИспользования;
		
		// Если на печать выводятся только групповые ОС, то не выводим колонку "Срок использования"
		Отбор = Новый Структура("ЕдиницаУчета", Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
		Если (ТаблицаСтрокОС.НайтиСтроки(Отбор).Количество() = ТаблицаСтрокОС.Количество()) Тогда
			НастройкиКолонок.ПоказатьСрокИспользования = Ложь;
		КонецЕсли;
		
		// Шапка таблицы
		ВывестиКолонки(Результат, "ШапкаТаблицы", НастройкиКолонок, Макет);
		
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокОС Цикл
			// Основная часть
			СтрокаОсновнаяЧасть = Макет.ПолучитьОбласть("Строка|ОсновнаяЧасть");
			СтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
				СтрокаОсновнаяЧасть.Параметры.ИнвентарныйНомер = "-";
			КонецЕсли;
			
			Ячейки = Результат.Вывести(СтрокаОсновнаяЧасть);
			Ячейки.АвтоВысотаСтроки = Истина;
			// Сроки использования
			Если НастройкиКолонок.ПоказатьСрокИспользования Или НастройкиКолонок.ПоказатьОстатокСрокаИспользования Тогда
				
				СтрокаСрокИспользования = Макет.ПолучитьОбласть("Строка|СрокИспользования");
				СтрокаОстатокСрокаИспользования = Макет.ПолучитьОбласть("Строка|ОстатокСрокаИспользования");
				
				ЗначенияПараметров = Новый Структура;
				
				Если СтрокаТаблицы.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции 
					Или СтрокаТаблицы.ЕдиницаУчета = Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект Тогда
					ЗначенияПараметров.Вставить("СрокПолезногоИспользованияБУ", "-");
				Иначе
					ЗначенияПараметров.Вставить("СрокПолезногоИспользованияБУ",СтрокаТаблицы.СрокПолезногоИспользованияБУ);
				КонецЕсли;
				
				ПредыдущееЗначение = ПредыдущиеЗначения.Найти(СтрокаТаблицы.ОсновноеСредство, "ОсновноеСредство");
				Если ПредыдущееЗначение <> Неопределено Тогда
					
					Дельта = СтрокаТаблицы.СрокПолезногоИспользованияБУ
						- ПредыдущееЗначение.СрокПолезногоИспользованияБУПредыдущееЗначение;
				
					ЗначенияПараметров.Вставить("ОстатокСрокаПолезногоИспользованияБУ",
						ПредыдущееЗначение.ОстатокСрокаПолезногоИспользованияБУПредыдущееЗначение + Дельта);
				КонецЕсли;
				
				Если НастройкиКолонок.ПоказатьСрокИспользования Тогда
					СтрокаСрокИспользования.Параметры.Заполнить(ЗначенияПараметров);
					Результат.Присоединить(СтрокаСрокИспользования);
				КонецЕсли;
				
				СтрокаОстатокСрокаИспользования.Параметры.Заполнить(ЗначенияПараметров);
				Результат.Присоединить(СтрокаОстатокСрокаИспользования);
				
			КонецЕсли;
			// Коэффициент ускорения
			Если НастройкиКолонок.ПоказатьКоэффициентУскорения Тогда
				СтрокаКоэффициентУскорения = Макет.ПолучитьОбласть("Строка|КоэффициентУскорения");
				Если СтрокаТаблицы.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					ЗначенияПараметров = Новый Структура("КоэффициентУскоренияБУ", "-");
				Иначе
					ЗначенияПараметров = СтрокаТаблицы;
				КонецЕсли;
				СтрокаКоэффициентУскорения.Параметры.Заполнить(ЗначенияПараметров);
				Результат.Присоединить(СтрокаКоэффициентУскорения);
			КонецЕсли;
			// Выработка
			Если НастройкиКолонок.ПоказатьВыработку Тогда
				СтрокаВыработка = Макет.ПолучитьОбласть("Строка|ОбъемВыработки");
				Если СтрокаТаблицы.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					ЗначенияПараметров = Новый Структура("ОбъемПродукцииРаботБУ", "-");
				Иначе
					ЗначенияПараметров = СтрокаТаблицы;
				КонецЕсли;
				СтрокаВыработка.Параметры.Заполнить(ЗначенияПараметров);
				Результат.Присоединить(СтрокаВыработка);
			КонецЕсли;
			// Ликвидационная стоимость
			СтрокаЛиквидационнаяСтоимость = Макет.ПолучитьОбласть("Строка|ЛиквидационнаяСтоимость");
			СтрокаЛиквидационнаяСтоимость.Параметры.Заполнить(СтрокаТаблицы);
			Результат.Присоединить(СтрокаЛиквидационнаяСтоимость);
		КонецЦикла;
		
		// Конец таблицы
		ВывестиКолонки(Результат, "КонецТаблицы", НастройкиКолонок, Макет);
		
		// Конец документа
		ОбластиМакета.Подпись.Параметры.Заполнить(ВыборкаДокумент);
		
		Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(
			ВыборкаДокумент.ОтветственныйФизическоеЛицо,
			ВыборкаДокумент.Организация,
			ВыборкаДокумент.Дата);
		СведенияПодписи = Новый Структура;
		СведенияПодписи.Вставить("ДолжностьПодписавшегоЛица", Полномочия.ДолжностьПредставление);
		СведенияПодписи.Вставить("ДокументПодписал",          Полномочия.ФИО.Представление);
		ОбластиМакета.Подпись.Параметры.Заполнить(СведенияПодписи);
		
		Результат.Вывести(ОбластиМакета.Подпись);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоОбластиПечати,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиКолонки(Результат, ИмяОбласти, НастройкиКолонок, Макет)

	Результат.Вывести(Макет.ПолучитьОбласть(СтрШаблон("%1|ОсновнаяЧасть", ИмяОбласти)));
	Если НастройкиКолонок.ПоказатьСрокИспользования Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|СрокИспользования", ИмяОбласти)));
	КонецЕсли;
	Если НастройкиКолонок.ПоказатьОстатокСрокаИспользования Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|ОстатокСрокаИспользования", ИмяОбласти)));
	КонецЕсли;
	Если НастройкиКолонок.ПоказатьКоэффициентУскорения Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|КоэффициентУскорения", ИмяОбласти)));
	КонецЕсли;
	Если НастройкиКолонок.ПоказатьВыработку Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|ОбъемВыработки", ИмяОбласти)));
	КонецЕсли;
	Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|ЛиквидационнаяСтоимость", ИмяОбласти)));
	
КонецПроцедуры

#КонецОбласти

Функция УстановленоРасширениеПерерасчетАмортизацииНарастающимИтогом(ОтключитьРасширение)
	
	Отбор = Новый Структура("Имя", ИмяРасширенияПерерасчетАмортизацииНарастающимИтогом());
	Расширения = РасширенияКонфигурации.Получить(Отбор);
	Если Расширения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтключитьРасширение Тогда
		
		Расширение = Справочники.ВерсииРасширений.НайтиРасширение(Расширения[0].УникальныйИдентификатор);
		Если Расширение <> Неопределено И Расширение.Активно Тогда
			
			Попытка
				Расширение.Активно = Ложь;
				Расширение.Записать();
			Исключение
				
				ЗаписьЖурналаРегистрации(
					ИмяРасширенияПерерасчетАмортизацииНарастающимИтогом(),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					,
					НСтр("ru = 'Не удалось отключить расширение. Отключите его вручную'", ОбщегоНазначения.КодОсновногоЯзыка()));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИмяРасширенияПерерасчетАмортизацииНарастающимИтогом()
	Возврат "ПерерасчетАмортизацииНарастающимИтогом";
КонецФункции

#КонецОбласти

#КонецЕсли