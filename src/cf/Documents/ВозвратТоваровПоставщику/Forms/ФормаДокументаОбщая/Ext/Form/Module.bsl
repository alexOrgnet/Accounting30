#Область Описаниепеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, Неопределено);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
		ВидОперацииОбработатьИзменение();
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
		УстановитьЗаголовокФормы();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьЭлементыПоВидуОперации(ЭтотОбъект);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	Если Объект.КорректировочныйСчетФактураПолученОтПоставщика Тогда
		СсылкаНаСчетФактуру = ?(СчетФактура = Неопределено, Документы.СчетФактураПолученный.ПустаяСсылка(), СчетФактура);
		СчетФактураРедактирование = Элементы.СчетФактураПолученный;
	Иначе
		СсылкаНаСчетФактуру = ?(СчетФактура = Неопределено, Документы.СчетФактураВыданный.ПустаяСсылка(), СчетФактура);
		СчетФактураРедактирование = Элементы.СчетФактураВыданный;
	КонецЕсли;
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СсылкаНаСчетФактуру,
		Элементы.СчетФактураПросмотр,
		СчетФактураРедактирование);
		
		
	// Переключать способ отражения в учете НДС можно лишь есть есть права на редактирование обоих видов документов
	Элементы.ГруппаНДС.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.СчетФактураВыданный) 
		И ПравоДоступа("Редактирование", Метаданные.Документы.СчетФактураПолученный);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ВозвратТоваровПоставщику",
		"ФормаДокументаОбщая",
		НСтр("ru='Новости: Возврат товаров поставщику'"),
		ИдентификаторыСобытийПриОткрытии);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбораПоОстаткам" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_КорректировчноеУведомлениеОВвозеПрослеживаемыхТоваров" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ПервичныйДокумент") 
		И Объект.Ссылка = Параметр.ПервичныйДокумент 
		ИЛИ ИмяСобытия = "СозданыКорректировочныеУведомленияВПомощникеПолученияРНПТ" Тогда
		
		УстановитьПредставлениеНадписиКорректировочноеУведомлениеОВвозе();
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеВозвратТоваровПоставщику";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		Если Объект.КорректировочныйСчетФактураПолученОтПоставщика Тогда
			
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание = ТекущийОбъект.Ссылка;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = НомерСчетаФактурыПолученного;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ДатаСчетаФактурыПолученного;
			РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);
			
		Иначе
		
			ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
			ПараметрыСоздания.Основание = ТекущийОбъект.Ссылка;
			ПараметрыСоздания.УникальныйИдентификатор = УникальныйИдентификатор;
			РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
			
		КонецЕсли;
		
		Если Не УчетНДСБП.НужноОжидатьОкончаниеАктуализации(РеквизитыСФ, ПараметрыЗаписи) Тогда
			ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиент.ОжидатьОкончаниеАктуализации(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ВозвратТоваровПоставщику", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		РаботаСНоменклатуройКлиентБП.ПослеЗаписи_ФормаДокумента();
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если УказыватьСделкуПоСтрокам Тогда
		ТекущийОбъект.Сделка = Неопределено;
	Иначе
		ТаблицаТовары = ТекущийОбъект.Товары.Выгрузить();
		ТаблицаТовары.ЗаполнитьЗначения(Неопределено, "Сделка");
		ТекущийОбъект.Товары.Загрузить(ТаблицаТовары);
	КонецЕсли; 
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьСрокОтправкиКорректировочныхУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = СвойстваСклада(Объект.Склад);
		
		ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада      = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСклада    = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице Тогда
		ТекстВопроса = НСтр("ru = 'Свернуть табличную часть по номенклатуре?'");
		ЗаголовокВопроса = НСтр("ru = 'Свертка по номенклатуре'");
		Оповещение = Новый ОписаниеОповещения("ВопросСвернутьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	Иначе
		ТоварыСвернуты	= Ложь;
		
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	РНПТПодбираетсяПоОстаткам = ЭтоКомиссия;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	
	ВведенноеЗначение = ?(Элемент.ТекстРедактирования = Строка(Объект.ДоговорКонтрагента),
		"", Элемент.ТекстРедактирования);
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорСоздание(
		Элемент, ВведенноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)

	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УстановитьРеквизитыПримененияПрослеживаемости();
	ОбновитьПризнакПрослеживаемости();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидСчетФактуры = 
		?(Объект.КорректировочныйСчетФактураПолученОтПоставщика, "СчетФактураПолученный", "СчетФактураВыданный");
	
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, ВидСчетФактуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеНДСКорректировочныйПриИзменении(Элемент)

	СпособРегистрацииСчетФактурыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураВыданныйПоставщикуПриИзменении(Элемент)
	
	СпособРегистрацииСчетФактурыПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ЕстьСделкаПоСтрокамПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Сделка) И УказыватьСделкуПоСтрокам Тогда
		ЗаполнитьСделкуПоСтрокамКлиент();
	КонецЕсли;
	Если Не УказыватьСделкуПоСтрокам Тогда
		ОбновитьПризнакПрослеживаемости();
		Если Не ЗначениеЗаполнено(Объект.Сделка) И Не ЭтоКомиссия Тогда
			РНПТПодбираетсяПоОстаткам = Ложь;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьБаннерКорректировочныхУведомленийОВвозе = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКорректировочноеУведомлениеОВвозеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПрослеживаемостьФормыКлиентБП.СоздатьПоказатьУведомления(
		ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Копирование Тогда
		Если ИспользоватьКонтрольныеЗнакиГИСМ Тогда
			Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
		КонецЕсли;
		Элемент.ТекущиеДанные.Себестоимость = 0;
		Элемент.ТекущиеДанные.ДокументОприходования = Неопределено;
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		
		Если Элемент.ТекущиеДанные.ПрослеживаемыйТовар Тогда
			Элемент.ТекущиеДанные.РНПТ = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения,
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|Всего, СчетУчетаЗабалансовый,
		|ПродукцияМаркируемаяДляГИСМ, КодТНВЭД, Сделка,
		|Малоценка, АналитикаУчета, АналитикаУчетаЗаполнена,
		|ПрослеживаемыйТовар, ИдентификаторСтроки, РНПТ, ПодсказкаРНПТ, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия, ДокументБезНДС, Сделка,
		|ПрименяетсяМалоценка, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.РассчитыватьСуммаВРознице  = РассчитыватьСуммаВРознице;
	ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	ДанныеОбъекта.ЭтоКомиссия                = ЭтоКомиссия;
	ДанныеОбъекта.РеализацияВЕАЭС            = РеализацияВЕАЭС;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150      = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ПрименяетсяМалоценка       = ПрименяетсяМалоценка;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ?(УказыватьСделкуПоСтрокам И ЗначениеЗаполнено(ТекущиеДанные.Сделка),
		ТекущиеДанные.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре, ВедетсяУчетПрослеживаемыхТоваров);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") 
		ИЛИ Объект.ДокументБезНДС Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = неопределено Тогда
		Возврат;
	КонецЕсли;

	// Установить коэффициент
	СтрокаТабличнойЧасти.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	Если ЭтоКомиссия Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЦенаВРознице = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаВРознице/СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчета)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета).Забалансовый;
	ТекущиеДанные.Малоценка = ПрименяетсяМалоценка И ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",          Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ВозвратТоваровПоставщику.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Подготовим данные для установки договора
	КонтейнерОбъект = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(КонтейнерОбъект, Объект);
	
	КонтейнерСтрока = Новый Структура("Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	// Подготовимся заполнять счета
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Контрагент, Товары.ДоговорКонтрагента",
		Объект,
		ТекущиеДанные,
		КонтейнерОбъект,
		КонтейнерСтрока);
	
	// Получим данные с сервера	
	ЗаполненныеРеквизиты = ТоварыКонтрагентПриИзмененииНаСервере(КонтейнерОбъект, КонтейнерСтрока, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗаполненныеРеквизиты);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Товары);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.ДоговорКонтрагента",
		Объект,
		Элементы.Товары.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Элементы.Товары.ТекущиеДанные.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыРНПТ" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			Если УказыватьСделкуПоСтрокам Тогда
				ЕстьСделкаВСтроке = ЗначениеЗаполнено(ТекущиеДанные.Сделка);
			Иначе
				ЕстьСделкаВСтроке = Истина;
			КонецЕсли;
			ПараметрыФормыПодбора.ЭтоПоступление         = Не (РНПТПодбираетсяПоОстаткам И ЕстьСделкаВСтроке);
			ПараметрыФормыПодбора.ЭтоКомиссия            = ЭтоКомиссия;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(
				ЭтаФорма,
				"Товары",
				ПараметрыФормыПодбора);
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыСчетУчета" 
		И НЕ ВыбраннаяСтрока = Неопределено Тогда
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ДанныеСтроки.Малоценка Тогда
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент",     Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",          Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ВозвратТоваровПоставщику.ТабличныеЧасти.Товары.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСделкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Сделка, ПрослеживаемыйТовар, ИдентификаторСтроки,
		|РНПТ, ПодсказкаРНПТ, ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре, ПрослеживаемыйКомплект");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		ОбновитьПризнакПрослеживаемостиПоСтроке(ДанныеСтрокиТаблицы, Объект.Дата);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
		Если ТекущиеДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	КонецЕсли;
	ПересчитатьСуммуТовары = Ложь;
	
	ДанныеНоменклатуры = ЦенаНоменклатурыПоДокументу(ТекущиеДанные.Сделка, ТекущиеДанные.Номенклатура);
	НоваяСтавкаНДС = СтавкаНДСПоДокументу(ТекущиеДанные.Сделка, ТекущиеДанные.Номенклатура, ТекущиеДанные.СтавкаНДС);
	
	Если НоваяСтавкаНДС <> ТекущиеДанные.СтавкаНДС Тогда
		ПересчитатьСуммуТовары = Истина;
		ТекущиеДанные.СтавкаНДС = НоваяСтавкаНДС;
	КонецЕсли; 
	
	Если ДанныеНоменклатуры.Цена <> 0 Тогда
		
		Если ДанныеНоменклатуры.ЦенаВключаетНДС <> Объект.СуммаВключаетНДС Тогда
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				ДанныеНоменклатуры.Цена, ДанныеНоменклатуры.ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеНоменклатуры.СтавкаНДС));
		Иначе
			Цена = ДанныеНоменклатуры.Цена;
		КонецЕсли; 
		
		ТекущиеДанные.Цена = Цена;
		ПересчитатьСуммуТовары = Истина;
		
	КонецЕсли;
	
	Если ПересчитатьСуммуТовары Тогда
		ПересчитатьСуммуТовары("Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСделкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Объект);
	
	Если НЕ РеквизитыДокументаПоступленияКорректны(ВыбранноеЗначение, РеквизитыДокумента) Тогда
		ВыбранноеЗначение = Неопределено;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если УказыватьСделкуПоСтрокам Тогда
		ЕстьСделкаВСтроке = ЗначениеЗаполнено(ТекущиеДанные.Сделка);
	Иначе
		ЕстьСделкаВСтроке = Истина;
	КонецЕсли;
	
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	
	Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
		ПараметрыФормыПодбора.ЭтоПоступление         = Не (РНПТПодбираетсяПоОстаткам И ЕстьСделкаВСтроке);
		ПараметрыФормыПодбора.ЭтоКомиссия            = ЭтоКомиссия;
		ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;

		ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(
		ЭтаФорма,
		"Товары",
		ПараметрыФормыПодбора);
	Иначе
		ПараметрыФормыПодбора.ЭтоПоступление = Ложь;
		ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ВидОперации, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.СуммаВключаетНДС = Истина;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(Элементы.ВозвратнаяТара.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("ВозвратнаяТара");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Добавить");
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Заполнить");
	
	УправлениеФормой(ЭтотОбъект);

	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВГИСМ(Команда)
	ИнтеграцияГИСМКлиентБП.КомандаВыгрузитьВГИСМ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьКолонку(Знач ТаблицаТовары)

	Возврат ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТовары.Выгрузить(,"Сделка"), "Сделка", Истина);

КонецФункции 

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		МассивСделок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сделка);
	Иначе
		МассивСделок = ВыгрузитьКолонку(Объект.Товары);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСделок[0]) Тогда
		ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры укажите документ-основание'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Сделка", "Объект");
		
		Возврат;
	КонецЕсли; 
	
	РезультатПроверки = ВозможностьСозданияСчетаФактуры(МассивСделок);
	
	Если НЕ РезультатПроверки.МожноСоздать Тогда
		
		ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
		Если РезультатПроверки.ДокументБезСчетаФактуры = Объект.Сделка Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Сделка", "Объект");
		Иначе
			ПроблемныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Сделка", РезультатПроверки.ДокументБезСчетаФактуры));
			ПутьКДанным = СтрШаблон("Товары[%1].Сделка", ПроблемныеСтроки[0].НомерСтроки-1);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКДанным, "Объект");
		КонецЕсли; 
		
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтотОбъект, Ложь, Истина);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция РеквизитыДокументаПоступленияКорректны(ДокументПоступления, РеквизитыДокумента)
	МассивРеквизитов = Новый Массив;
	
	// Отберем только те реквизиты что есть в метаданных
	МетаданныеДокументаПоступления = ДокументПоступления.Метаданные().Реквизиты;
	Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
		Если МетаданныеДокументаПоступления.Найти(РеквизитДокумента.Ключ) <> Неопределено Тогда
			МассивРеквизитов.Добавить(РеквизитДокумента.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	// Проверим реквизиты
	РеквизитыДокументаПоступления =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, МассивРеквизитов);
	Для каждого РеквизитДокумента Из РеквизитыДокументаПоступления Цикл
		Если РеквизитыДокумента[РеквизитДокумента.Ключ] <> РеквизитДокумента.Значение Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
КонецФункции 

&НаСервере
Функция ВозможностьСозданияСчетаФактуры(МассивСделок)
	Результат = Новый Структура;
	Результат.Вставить("МожноСоздать", Истина);
	Результат.Вставить("ДокументБезСчетаФактуры", Неопределено);
	
	Для каждого Сделка Из МассивСделок Цикл
		ПодчиненныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Сделка);
		
		Если НЕ ЗначениеЗаполнено(ПодчиненныйСчетФактура) Тогда
			Результат.Вставить("ДокументБезСчетаФактуры", Сделка);
			Результат.Вставить("МожноСоздать",            Ложь);
			
			Возврат Результат;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СпособРегистрацииСчетФактурыПриИзменении()

	Объект.КорректировочныйСчетФактураПолученОтПоставщика = (СпособРегистрацииСчетФактуры = 1);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		ОбработатьСчетФактуруПередОчисткой(СчетФактура);
		СчетФактура = Неопределено;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбработатьСчетФактуруПередОчисткой(СчетФактура)

	СчетФактураПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "Проведен");
	
	Если СчетФактураПроведен Тогда
		ОбъектСчетФактура = СчетФактура.ПолучитьОбъект();
		ОбъектСчетФактура.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"СпособОценкиМПЗ", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СпособыОценки.ПоСредней);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ТоварыСчетУчетаСчетЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.Малоценка", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.АналитикаУчета"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,Истина));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	    ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"Объект.Товары.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"Объект.Товары.Малоценка", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ТоварыЦенаВРознице, ТоварыСуммаВРознице, ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчета, ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетУчетаРасчетовПоТаре
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетУчетаРасчетовПоПретензиям, СчетУчетаРасчетовСКонтрагентом

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоПретензиям");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовСКонтрагентом");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не используются для вида операции "Из переработки"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоМест");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Поля не используются, если по розничному складу НТТ номенклатура не вводится.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураАртикул");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураКод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделениеПоСтавкамВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыСчетУчетаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// КиЗ_ГИСМ только для товаров
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыКодТНВЭД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПодсказкаРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// ТоварыРНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ГруппаОтбораИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ТоварыРНПТ 
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	// Страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов");
		ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ЭтоКомиссия          = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) 
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
	// Для заполненного документа сразу выводим напоминание о корректировочном уведомлении в подвале документа если требуется.
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОКорректировочномУведомленииОВвозе();
	УстановитьПредставлениеНадписиКорректировочноеУведомлениеОВвозе();
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСклада = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада    = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСклада    = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	
	СпособРегистрацииСчетФактуры = ?(Объект.КорректировочныйСчетФактураПолученОтПоставщика, 1, 2);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьРеквизитыПримененияПрослеживаемости();
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС               	 = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице 	 = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	ПрименяетсяМалоценка             = УчетнаяПолитика.ПрименяетсяФСБУ5_2019(Объект.Дата);
	УчетВПродажныхЦенах         	 = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	СпособОценкиМПЗ					 = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ИспользоватьКонтрольныеЗнакиГИСМ = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ") 
									 И ИнтеграцияГИСМКлиентСерверБП.МожноИспользоватьКонтрольныеЗнакиГИСМ(Объект.Дата);
	УчитыватьТаруЗаБалансом          = УчетнаяПолитика.УчитыватьТаруЗаБалансом(Объект.Организация, Объект.Дата);
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	
	ПоставщикРезидентТаможенногоСоюза = РеализацияВЕАЭС;
	
	РасчетВозвратаСУчетомРекомендацийПоНДС = УчетВзаиморасчетов.ПрименяетсяРасчетКорректировокВВалютеПоКурсуНаДатуОтгрузки(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаВозвратнаяТара.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	
	Элементы.ГруппаРасчеты.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Оборудование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Материалы'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Товары'");
	КонецЕсли;
	
	Элементы.СчетУчетаРасчетовПоТаре.Видимость = НЕ Форма.УчитыватьТаруЗаБалансом;
	
	Если Объект.КорректировочныйСчетФактураПолученОтПоставщика Тогда
	
		ЭлементСчетФактураКнопка = Элементы.СчетФактураПолученныйКнопка;
		Элементы.СчетФактураВыданныйКнопка.Видимость = Ложь;
		Элементы.СчетФактураПолученныйКнопка.Видимость = Истина;
		
	Иначе
	
		ЭлементСчетФактураКнопка = Элементы.СчетФактураВыданныйКнопка;
		Элементы.СчетФактураПолученныйКнопка.Видимость = Ложь;
		Элементы.СчетФактураВыданныйКнопка.Видимость = Истина;
		
	КонецЕсли;
	
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.ТоварыГруппаРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	Элементы.ТоварыГруппаРНПТ.Видимость = 
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
		
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		ЭлементСчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.ДокументБезНДС,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	Если Объект.КорректировочныйСчетФактураПолученОтПоставщика Тогда
		ТекстЗаголовка = НСтр("ru='Корр. счет-фактура'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Счет-фактура'");
	КонецЕсли;
	
	Элементы.НадписьСчетФактура.Заголовок = ТекстЗаголовка;
	
	Элементы.Сделка.Видимость                 = НЕ Форма.УказыватьСделкуПоСтрокам;
	Элементы.НадписьСделка.Видимость          = Форма.УказыватьСделкуПоСтрокам;
	Элементы.ТоварыСделка.Видимость           = Форма.УказыватьСделкуПоСтрокам;
	Элементы.ЗаполнитьПоПоступлению.Видимость = НЕ Форма.УказыватьСделкуПоСтрокам;

	Элементы.ТоварыКиЗ_ГИСМ.Видимость      = Форма.ИспользоватьКонтрольныеЗнакиГИСМ;
	Элементы.ФормаВыгрузитьВГИСМ.Видимость = Форма.ИспользоватьКонтрольныеЗнакиГИСМ;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ГруппаСделка.Доступность                   = (НЕ Форма.ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента));
	
	Элементы.ТоварыКонтрагент.Доступность 		  =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");
	Элементы.ТоварыДоговорКонтрагента.Доступность =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");
	Элементы.ТоварыСчетРасчетов.Доступность 	  =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");

	Элементы.ИтогиВсегоНДС.Видимость = 
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") И Не Объект.ДокументБезНДС;
		
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Возврат товаров поставщику'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура;
	ЗапретитьКорректироватьКурсВалютыВФорме = Форма.РасчетВозвратаСУчетомРекомендацийПоНДС
		И ЕстьВозвратПоПоступлениюТоваров(Форма);
	
	Если НЕ ЗапретитьКорректироватьКурсВалютыВФорме Тогда
		СтруктураНадписи.Вставить("ВалютаДокумента",                Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("Курс",                           Объект.КурсВзаиморасчетов);
		СтруктураНадписи.Вставить("Кратность",                      Объект.КратностьВзаиморасчетов);
		СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
		
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СтруктураНадписи.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	КонецЕсли;
	
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;

	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)
	
	Объект = Форма.Объект;

	Если Объект.КорректировочныйСчетФактураПолученОтПоставщика Тогда
	
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
			Форма,
			РеквизитыСФ,
			Форма.ТребуетсяСчетФактура);
		
	Иначе
	
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
			Форма,
			РеквизитыСФ);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

// Облуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()
	
	ЗапретитьКорректироватьКурсВалютыВФорме = РасчетВозвратаСУчетомРекомендацийПоНДС И ЕстьВозвратПоПоступлениюТоваров(ЭтотОбъект);
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     ,                    Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                ,                    Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           ,                    Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          ,                    Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             ,                    Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         ,                    Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       ,                    Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен"              ,                    Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр"      ,                    ТолькоПросмотр);
	СтруктураПараметров.Вставить("ЗапретитьКорректироватьКурсВалютыВФорме", ЗапретитьКорректироватьКурсВалютыВФорме);

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	КонецЕсли;

	// 2. Открвыаем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ ((ЕстьВалютныйУчет И ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета)
		И НЕ ЗапретитьКорректироватьКурсВалютыВФорме) Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
			Если Не ПлательщикНДС Тогда
				СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
			КонецЕсли;
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		КонецЕсли;
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Префикс = "Товары[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Префикс);
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		Префикс = "ВозвратнаяТара[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Префикс);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества, Префикс)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Если Объект.ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;

		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена     = Цена;
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УстановитьРеквизитыПримененияПрослеживаемости();
	Если НЕ УказыватьСделкуПоСтрокам Тогда
		ОбновитьПризнакПрослеживаемости();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда

		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			СтрокаТовара.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		КонецЦикла;

	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
			ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;

	ТребуетсяСчетФактура = 
		Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
		
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;

	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьПризнакПрослеживаемости();
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения)
	
	УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзменения.Добавить("Контрагент");
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если ВедетсяУчетПрослеживаемыхТоваров 
			И Объект.СведенияПрослеживаемости.Итог("Сумма") <> 0 Тогда
			ПрослеживаемостьФормыБП.ПересчитатьСуммыВВалютеПоКомплектам(ЭтотОбъект);
		КонецЕсли;
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;

	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	Если ВедетсяУчетПрослеживаемыхТоваров 
		И Объект.СведенияПрослеживаемости.Итог("Сумма") <> 0 Тогда
		ПрослеживаемостьФормыБП.ПересчитатьСуммыВВалютеПоКомплектам(ЭтотОбъект);
	КонецЕсли;
	ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	ОбновитьПризнакПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ДоговорКонтрагента");

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ТипЦен, ВидДоговора");

	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ЭтоКомиссия       = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			Ложь, 
			ПересчитатьЦены, 
			ПересчитатьНДС);
	КонецЕсли;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	
	ЗаполнитьСчетаУчета("ДоговорКонтрагента", ПричиныИзменения);
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСвернутьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТоварыСвернуты = (Результат = КодВозвратаДиалога.Да);
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	Если НЕ ЕстьСтрокиВТабличныхЧастях() Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьСуммаВРознице 
		ИЛИ (НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице) Тогда
	
		РассчитатьСуммуВРознице();
	
	КонецЕсли; 
	
	Если ТоварыСвернуты Тогда
		
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.Свернуть("СтавкаНДС, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Склад", Объект));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВРознице()
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовары.Номенклатура);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассчитыватьСуммаВРознице Тогда
			СтрокаТовары.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
		КонецЕсли;
		
		Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
			СтрокаТовары.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли;
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТовары);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДатаДляПрослеживаемости = ДанныеОбъекта.Дата;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сделка) Тогда
		ДанныеОбъекта.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Сделка, "Дата");
	ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.Сделка) Тогда 
		ДанныеОбъекта.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Сделка, "Дата");
	КонецЕсли;
	Если ДанныеОбъекта.Дата < ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров() Тогда
		ДатаДляПрослеживаемости = ДанныеОбъекта.Дата;
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
			СведенияПрослеживаемости = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДату(
				СтрокаТабличнойЧасти.Номенклатура, ДатаДляПрослеживаемости);
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияПрослеживаемости.ПрослеживаемыйТовар
			Или СведенияПрослеживаемости.ПрослеживаемыйКомплект;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияПрослеживаемости.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
		Если СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли;
		
		Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
		КонецЕсли;
		
		Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		Если ДанныеОбъекта.ПрименяетсяМалоценка
			И СтрокаТабличнойЧасти.Свойство("Малоценка")
			И СтрокаТабличнойЧасти.Свойство("СчетУчета") Тогда
			СтрокаТабличнойЧасти.Малоценка = СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
		КонецЕсли;
		
		// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
		// Дополнительно устанавливаем ставку 0%.
		Если ДанныеОбъекта.РеализацияВЕАЭС
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 Тогда
			СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;

		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"ВозвратнаяТара",
		СтрокаТаблицы);
		
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыКонтрагентПриИзмененииНаСервере(Знач ДанныеОбъекта, Знач ДанныеСтроки, Знач СчетаУчетаКЗаполнению)

	Результат = Новый Структура;
	
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);

	ДоговорИзменен = РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента,
		ДанныеСтроки.Контрагент,
		ДанныеОбъекта.Организация,
		МассивВидовАгентскихДоговоров);
		
	Если ДоговорИзменен Тогда
		Результат.Вставить("ДоговорКонтрагента", ДанныеСтроки.ДоговорКонтрагента);
	КонецЕсли;
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"Товары",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчета, Истина);
	
	Возврат Результат;

КонецФункции

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПересчитатьСуммуТовары(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС);

	Если НТТ
		 И УчетВПродажныхЦенах
		 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		 И НЕ ЭтоКомиссия Тогда

		Строка.СуммаВРознице = Строка.Количество * Строка.ЦенаВРознице;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Если ИмяТабЧасти = "Товары" Тогда
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

// Заполнение документа по документам - основаниям:

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если ВестиУчетПоДоговорам И Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран договор контрагента!'"));
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена." + Символы.ПС + Символы.ПС + "Заполнить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	Если (СпособЗаполнения = "Заполнить" И Не ЗначениеЗаполнено(Объект.Сделка))
		ИЛИ (СпособЗаполнения = "Добавить") Тогда

		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("Контрагент, Проведен",Объект.Контрагент, Истина);
		Если ВестиУчетПоДоговорам Тогда
			Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Организация",Объект.Организация);
		КонецЕсли;

		СписокОпераций = Новый СписокЗначений;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
		Иначе
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
		КонецЕсли;
		Отбор.Вставить("ВидОперации", СписокОпераций);

		ПараметрыФормы.Вставить("Отбор",Отбор);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии);	
	Иначе
		ДокументПоступления = Объект.Сделка;
		ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		ДополнитьТабличнуюЧастьПоПоступлению(ДополнительныеПараметры.ТабличнаяЧасть, ДополнительныеПараметры.СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранаСделкаОтличнаяОтСделкиПоДокументу(ДокументПоступления)

	Возврат НЕ УказыватьСделкуПоСтрокам
			И ЗначениеЗаполнено(Объект.Сделка)
			И Объект.Сделка <> ДокументПоступления;

КонецФункции 

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ТабличнаяЧасть   = ДополнительныеПараметры.ТабличнаяЧасть;
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если СпособЗаполнения = "Добавить" 
		И ВыбранаСделкаОтличнаяОтСделкиПоДокументу(ДокументПоступления) Тогда 
		
		ТекстВопроса = НСтр("ru = 'Выбран документ отличный от текущего основания возврата." 
			+ Символы.ПС + Символы.ПС + "Хотите ввести возврат по нескольким основаниям?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		ДополнительныеПараметры.Вставить("ДокументПоступления", ДокументПоступления);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		Оповещение = Новый ОписаниеОповещения("ВопросПередДобавлениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе
		
		Если СпособЗаполнения = "Заполнить" Тогда
			УказыватьСделкуПоСтрокам = Ложь;
			Объект.Сделка = ДокументПоступления;
			УстановитьРеквизитыПримененияПрослеживаемости();
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередДобавлениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.Сделка = Объект.Сделка;
		КонецЦикла; 
		УказыватьСделкуПоСтрокам = Истина;
		УстановитьРеквизитыПримененияПрослеживаемости();
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(
		ДополнительныеПараметры.ДокументПоступления, 
		ДополнительныеПараметры.ТабличнаяЧасть, 
		ДополнительныеПараметры.СпособЗаполнения);
		
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения)
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = "Товары" Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
				ЗаполнитьОборудованиеПоОснованию(ДокументПоступления);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДокументПоступления);
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументПоступления);
		КонецЕсли;

	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть)

	ВидОперацииОборудование = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование"));

	Выборка = ПолучитьДанныеДляКопирования(ДокументПоступления, ТабличнаяЧасть, ВидОперацииОборудование);
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	Выборка.Следующий();
	ДатаРеализации = ?(Выборка.Дата = Неопределено, Объект.Дата, Выборка.Дата);
	Выборка.Сбросить();
	ПрослеживаемостьВедетсяПоЭтойРеализации = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДатаРеализации);
	РНПТПодбираетсяПоОстаткам = ПрослеживаемостьВедетсяПоЭтойРеализации;
	Если ВедетсяУчетПрослеживаемыхТоваров И ДатаРеализации > ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров() Тогда
		МассивНоменклатуры = Новый Массив();
		Пока Выборка.Следующий() Цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
		Выборка.Сбросить();
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Объект.Дата);
	Иначе
		РеквизитыНоменклатурыИзИстории = Неопределено;
	КонецЕсли;
	
	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура",        Выборка.Номенклатура);
		Если ТабличнаяЧасть = "Товары" Тогда
			СтруктураОтбора.Вставить("СтранаПроисхождения", Выборка.СтранаПроисхождения);
		КонецЕсли;
		
		Если Не УказыватьСделкуПоСтрокам И Не ЗначениеЗаполнено(Объект.Сделка) Тогда
			Объект.Сделка = ДокументПоступления;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если НЕ УказыватьСделкуПоСтрокам И СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество + Выборка.Количество;
 			Если ТабличнаяЧасть = "Товары" Тогда

				СтрокаТабличнойЧасти.КоличествоМест = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
											СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;

			Если ТабличнаяЧасть = "Товары" Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;

				СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
												СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
				Если ВедетсяУчетПрослеживаемыхТоваров Тогда
					Если РеквизитыНоменклатурыИзИстории = Неопределено Тогда
						СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
						СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
					Иначе
						
						РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
						Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
							СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
							Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
							СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
						Иначе
							СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Выборка.ПрослеживаемыйТовар Или Выборка.ПрослеживаемыйКомплект;
							СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Выборка.ПрослеживаемыйКомплект;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;
				Если НЕ ВидОперацииОборудование Тогда
					СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
					СтрокаТабличнойЧасти.Контрагент 		 = Выборка.Контрагент;
					СтрокаТабличнойЧасти.ДоговорКонтрагента	 = Выборка.ДоговорКонтрагента;
					СтрокаТабличнойЧасти.СчетРасчетов		 = Выборка.СчетРасчетов;
				КонецЕсли;

				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект,"Товары",МетаданныеДокумента);

				// Пересчитаем цену в валюту документа.
				Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаДокумента,    Объект.ВалютаДокумента,
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Выборка.СуммаВключаетНДС,
				                                                 Объект.СуммаВключаетНДС,
				                                                 УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
				Если УказыватьСделкуПоСтрокам Тогда
					СтрокаТабличнойЧасти.Сделка = ДокументПоступления;
					СтрокаТабличнойЧасти.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре = ПрослеживаемостьВедетсяПоЭтойРеализации;
				КонецЕсли; 

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаВзаиморасчетов, Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинаковы (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть,ВидОперацииОборудование)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Док.Ссылка.Дата,
	|	Док.Цена,";

	Если ТабличнаяЧасть = "Товары" Тогда

		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент,
		|	Док.Ссылка.ВалютаДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,
		|	Док.ПрослеживаемыйТовар,
		|	Док.ПрослеживаемыйКомплект,
		|	Док.СтранаПроисхождения,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.СтавкаНДС" +
		?(ВидОперацииОборудование, "", ",
		|	Док.НомерГТД,
		|	Док.Контрагент,
		|	Док.ДоговорКонтрагента,
		|	Док.СчетРасчетов");

	Иначе

		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов,
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг" + ?(ТабличнаяЧасть = "Товары",?(ВидОперацииОборудование, ".Оборудование",".Товары"),".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов КАК СчетРасчетов,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	ПоступлениеТоваровУслугТовары.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ПоступлениеТоваровУслугТовары.ПрослеживаемыйКомплект КАК ПрослеживаемыйКомплект
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Объект.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
											                                  КурсОсн, Курс, КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.СуммаВключаетНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
			Если УказыватьСделкуПоСтрокам Тогда
				СтрокаТабличнойЧасти.Сделка = ДокументОснование;
			КонецЕсли;
			
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
				Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
					Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	ИначеЕсли ВедетсяУчетПрослеживаемыхТоваров Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
				Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.Количество КАК Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена КАК Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслугОборудование.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ПоступлениеТоваровУслугОборудование.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугОборудование.ПрослеживаемыйКомплект КАК ПрослеживаемыйКомплект
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ВедетсяУчетПрослеживаемыхТоваров Тогда
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
		МассивНоменклатуры, Объект.Дата);
	КонецЕсли;


	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
		
		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
			
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
				Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
					Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				КонецЕсли;
			КонецЕсли;
			
			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.Цена,
			Выборка.ВалютаДокумента,
			Объект.ВалютаДокумента,
			КурсОсн,
			Курс,
			КратностьОсн,
			Кратность);
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Выборка.СуммаВключаетНДС,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		КонецЦикла;
	ИначеЕсли ВедетсяУчетПрослеживаемыхТоваров Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТабличнойЧасти.Номенклатура];
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
				Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ПоступлениеТоваровУслугВозвратнаяТара.СчетУчета,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = Объект.ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        	  = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчета  	  = Выборка.СчетУчета;
		
		Если УказыватьСделкуПоСтрокам Тогда
			СтрокаВозвратнойТары.Сделка = ДокументОснование;
		КонецЕсли; 

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		   И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
			// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
			СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
			                            	КурсОсн, Курс, КратностьОсн, Кратность);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Прочий функционал общего назначения:

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма)
	
	Объект = Форма.Объект;
	
	Форма.РассчитыватьСуммаВРознице = 
		Форма.ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад")
		И Форма.УчетВПродажныхЦенах
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		И НЕ Форма.ЭтоКомиссия;
	
	Форма.НТТ = (Форма.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

	Элементы = Форма.Элементы;

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Форма.Объект.ВидОперации));

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()
	
	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		ЕстьСтроки = ЕстьСтроки ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьСтроки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)
	
	Возврат РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(
		ВидОперации, Тип("ДокументСсылка.ВозвратТоваровПоставщику"));

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	УказыватьСделкуПоСтрокам = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
		УказыватьСделкуПоСтрокам = УказыватьСделкуПоСтрокам ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.Сделка);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Объект.Товары, ИспользоватьКонтрольныеЗнакиГИСМ);
	ЗаполнитьПризнакМалоценка(Объект.Товары, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.Свойство("СчетУчета") И СтрокаТаблицы.Свойство("СчетУчетаЗабалансовый") Тогда
		СтрокаТаблицы.СчетУчетаЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета).Забалансовый;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(СтрокаТаблицы);	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Товары, ИспользоватьКонтрольныеЗнакиГИСМ)
	
	Если Не ИспользоватьКонтрольныеЗнакиГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеМаркируемаяПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина), "ПродукцияМаркируемаяДляГИСМ");
	Для Каждого СтрокаТаблицы Из Товары Цикл
		ПродукцияМаркируемаяДляГИСМ = СоответствиеМаркируемаяПродукция.Получить(СтрокаТаблицы.Номенклатура);
		СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = ?(ПродукцияМаркируемаяДляГИСМ <> Неопределено, ПродукцияМаркируемаяДляГИСМ, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДляСчетаУчета(Форма, ВидОперации)
	
	Элементы = Форма.Элементы;
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		НовыйМассивПараметров = Новый Массив();
		Если Форма.ЭтоКомиссия Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
		КонецЕсли;
		
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад") Тогда
			ПараметрыФормы.Вставить("ТипЦен", ТипЦенСклада);
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ПоказыватьЦены"    , ЗначениеЗаполнено(ПараметрыФормы.ТипЦен));
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Кратность"         , Объект.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("Курс"              , Объект.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПокупке", Истина);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") 
			ИЛИ Объект.ДокументБезНДС Тогда
			ПараметрыФормы.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		КонецЕсли;
		
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ПараметрыФормы.Вставить("СуммаВключаетНДС", Истина);
		Иначе
			ПараметрыФормы.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ЭтоКомиссия Тогда
		ВидПодбора = "Комитент";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	ДобавленныеСтроки = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС)
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
		
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ЦенаВключаетНДС = Истина;
		Иначе
			ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		
		Если ЭтоВставкаИзБуфера
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовара, СписокСвойств);
		ДобавленныеСтроки.Добавить(СтрокаТаблицы);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяТаблицы = "Товары" Тогда
				
			СтрокаТаблицы.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения),
				СтрокаТаблицы.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
			СтрокаТаблицы.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент),
				СтрокаТаблицы.Коэффициент, СведенияОНоменклатуре.Коэффициент);
			СтрокаТаблицы.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД),
				СтрокаТаблицы.НомерГТД, СведенияОНоменклатуре.НомерГТД);
			СтрокаТаблицы.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения),
				СтрокаТаблицы.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
			Если ?(ЗначениеЗаполнено(СтрокаТаблицы.Сделка), 
				СтрокаТаблицы.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре, ВедетсяУчетПрослеживаемыхТоваров) Тогда
				СтрокаТаблицы.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
					Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаТаблицы.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТаблицы.ПрослеживаемыйТовар    = Ложь;
				СтрокаТаблицы.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			
			// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
			// Дополнительно устанавливаем ставку 0%.
			Если РеализацияВЕАЭС
				И ВедетсяУчетНДСПоФЗ150 Тогда
				СтрокаТаблицы.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
				СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			Иначе
				СтрокаТаблицы.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			КонецЕсли;
				
			Если РассчитыватьСуммаВРознице Тогда
				СтрокаТаблицы.ЦенаВРознице = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЦенаВРознице),
					СтрокаТаблицы.ЦенаВРознице, СведенияОНоменклатуре.ЦенаВРознице);
			КонецЕсли;
			
			Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
				СтрокаТаблицы.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;			
						
			// Рассчитываем реквизиты табличной части.
			Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
				СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТаблицы.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТаблицы);
			
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, Объект.СуммаВключаетНДС);
			
		ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
			Если НЕ ЦенаВключаетНДС Тогда
				СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТаблицы.Цена, ЦенаВключаетНДС, Истина,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(ДобавленныеСтроки, ИмяТаблицы, Объект, Документы.ВозвратТоваровПоставщику);
	
	Если ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из ДобавленныеСтроки Цикл
			СтрокаТаблицы.Малоценка = ПрименяетсяМалоценка И СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
			Если СтрокаТаблицы.Малоценка Тогда
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, Объект.СуммаВключаетНДС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = ДобавленныеСтроки.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Истина);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументБезНДС",               Объект.ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ВозвратТоваровПоставщику, Истина);

	Для Каждого СтрокаТабличнойЧасти ИЗ СтрокиДляДополнительнойОбработки Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(СтрокиДляДополнительнойОбработки, ИспользоватьКонтрольныеЗнакиГИСМ);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСклада(Склад)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЭлементыПоВидуОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ГруппаВыгрузитьГосИС.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
	Элементы.ЕстьСделкаПоСтрокам.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
	Элементы.Сделка.ПоложениеЗаголовка = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Авто);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыПереданныеСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходов");
	ЭлементыСчетов.Добавить("ТоварыСчетРасходов");
	ЭлементыСчетов.Добавить("ТоварыСубконто");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	Если НЕ УчитыватьТаруЗаБалансом Тогда
		ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоПретензиям");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВозвратТоваровПоставщику",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПодразделениеЗатрат");		
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
	КонецЕсли;

	// Товары.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПодразделениеЗатрат");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Товары.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// ВозвратнаяТара.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Товары.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// ВозвратнаяТара.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЦенаВРознице");
	СписокСвойств.Добавить("СтавкаНДСВРознице");
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");
			СписокСвойств.Добавить("СчетРасчетов");
			
		КонецЕсли;
		
	КонецЕсли;
	Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
		
		СписокСвойств.Добавить("ДокументОприходования");
		СписокСвойств.Добавить("Контрагент");
		СписокСвойств.Добавить("ДоговорКонтрагента");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСделкуПоСтрокамКлиент()
	// Переносим сделку в строки только если она еще не заполнена ни по одной строке.
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Сделка) Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаполнитьСделкуПоСтрокамНаСервере();
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСделкуПоСтрокамНаСервере()

	ТаблицаТовары = Объект.Товары.Выгрузить();
	ТаблицаТовары.ЗаполнитьЗначения(Объект.Сделка, "Сделка");
	ТаблицаТовары.ЗаполнитьЗначения(ВедетсяУчетПрослеживаемыхТоваров, "ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре");
	Объект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры 

#КонецОбласти

#Область БЭД

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция СтавкаНДСПоДокументу(ДокументОтгрузки, Номенклатура, ТекущаяСтавкаНДС)

	Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		Возврат ТекущаяСтавкаНДС;
	КонецЕсли;

	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "Дата");
	ВидСтавкиНДС = Справочники.Номенклатура.ВидСтавкиНДСНаДату(Номенклатура, ДатаДокумента);
	
	Возврат Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ДатаДокумента);

КонецФункции

&НаСервереБезКонтекста
Функция ЦенаНоменклатурыПоДокументу(Документ, ЦенаВключаетНДС)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",          Документ);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Номенклатура = &ЦенаВключаетНДС";
	
	Результат = Новый Структура;
	Результат.Вставить("Цена",             0);
	Результат.Вставить("СтавкаНДС",        Перечисления.СтавкиНДС.БезНДС);
	Результат.Вставить("ЦенаВключаетНДС", Ложь);
	
	Выборка =Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаКорректировочноеУведомлениеОВвозе.Видимость = ТребуетсяНапоминание;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяНапоминаниеОКорректировочномУведомленииОВвозе()
	
	ПрослеживаемыеТовары     = Объект.Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыеТовары = ПрослеживаемыеТовары.Количество() > 0;
	
	Возврат ЕстьПрослеживаемыеТовары И ПоставщикРезидентТаможенногоСоюза;

КонецФункции

&НаСервере
Процедура НапоминатьОКорректировочныхУведомленияхОВвозе()
	
	УстановитьВидимость();
	Если ПоказыватьБаннер Тогда
		// Дата отсчета срока - 2 дня со дня возврата товара.
		СрокУведомления = ПрослеживаемостьБП.СрокПодачиУведомления(Объект.Дата, Истина);
		
		ШаблонТекста = 
			НСтр(
				"ru = 'В документе присутствуют прослеживаемые товары. До %1 необходимо создать и отправить корректировочное уведомление о ввозе в налоговую инспекцию.'"
				);
				
		Элементы.ДекорацияУведомление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, Формат(СрокУведомления, "ДФ='дд ММММ'"));
		Элементы.ГруппаБаннерКорректировочноеУведомлениеОВвозе.Видимость = Истина;
	Иначе
		Элементы.ГруппаБаннерКорректировочноеУведомлениеОВвозе.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНадписиКорректировочноеУведомлениеОВвозе()
	
	ПрослеживаемостьФормыБП.УстановитьПредставлениеНадписиКорректировочныхУведомленийОВвозе(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НапоминатьОКорректировочныхУведомленияхОВвозе()
	
	ТребуетсяНапоминаниеДо = ТребуетсяНапоминание;
	ПоказыватьБаннерДо     = ПоказыватьБаннер;
	
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОКорректировочномУведомленииОВвозе();
	ПоказыватьБаннер     = ТребуетсяНапоминание И СписокУведомлений.Количество() = 0 И НЕ ОтключитьБаннерКорректировочныхУведомленийОВвозе;
	
	Если ТребуетсяНапоминаниеДо <> ТребуетсяНапоминание
		ИЛИ ПоказыватьБаннерДо <> ПоказыватьБаннер 
		ИЛИ ОбновитьСрокОтправкиКорректировочныхУведомлений Тогда
		
		НапоминатьОКорректировочныхУведомленияхОВвозе();
		ОбновитьСрокОтправкиКорректировочныхУведомлений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки 	= Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",       ТолькоПросмотр);
	ПараметрыФормы.Вставить("ДатаДокумента",        Объект.Дата);
	ПараметрыФормы.Вставить("Организация",          Объект.Организация);
	
	ПараметрыФормы.Вставить("СчетЗатрат",          ДанныеСтроки.СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", ДанныеСтроки.ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           ДанныеСтроки.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           ДанныеСтроки.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           ДанныеСтроки.Субконто3);
	ПараметрыФормы.Вставить("Номенклатура",        ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Контрагент",          Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакМалоценка(Товары, Организация, Период)
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаТаблицы.Малоценка = ПрименяетсяМалоценка И (СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(ДанныеСтроки)

	АналитикаУчетаТекст 	= "";
	АналитикаУчетаЗаполнена = Ложь;

	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СтроковыеПредставленияСубконто = Новый Структура();
	
	Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
			АналитикаУчетаЗаполнена = Истина;
			СвойстваСчета 		    = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
			АналитикаУчетаТекст     = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
					ТекстСтроки 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПодразделениеЗатрат, "Наименование");
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ТекстСтроки;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЕсли;
			
			Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
				ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ПредставлениеСубконто = "";
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Продолжить;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ЗначениеСубконто);
					КонецЕсли;
					
					СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
					СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
					
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
    Если АналитикаУчетаЗаполнена Тогда
		ДанныеСтроки.АналитикаУчета 	 = Сред(АналитикаУчетаТекст, 3);
	КонецЕсли;
	ДанныеСтроки.АналитикаУчетаЗаполнена = АналитикаУчетаЗаполнена;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)

	ДанныеСтроки = Новый Структура("СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|ПодразделениеЗатрат, АналитикаУчета, АналитикаУчетаЗаполнена");

	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(ДанныеСтроки);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Товары, ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПризнакПрослеживаемостиПоСтроке(СтрокаТабличнойЧасти, ДатаДокумента)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сделка) Тогда
		ДатаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Сделка, "Дата");
		Если ДатаРеализации > ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров() Тогда
			ДатаРеализации = ДатаДокумента;
		КонецЕсли;
	Иначе
		ДатаРеализации = ДатаДокумента;
	КонецЕсли;
	СтрокаТабличнойЧасти.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДатаРеализации);
	Если СтрокаТабличнойЧасти.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре Тогда
		ДанныеПрослеживаемости = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДату(СтрокаТабличнойЧасти.Номенклатура, ДатаРеализации);
		Если ДанныеПрослеживаемости <> Неопределено Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ДанныеПрослеживаемости.ПрослеживаемыйТовар Или ДанныеПрослеживаемости.ПрослеживаемыйКомплект;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = ДанныеПрослеживаемости.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПримененияПрослеживаемости()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ВестиУчетПрослеживаемыхТоваров = Ложь;
		Для каждого Строка Из Объект.Товары Цикл
			Строка.ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре = Ложь;
		КонецЦикла;
	Иначе
		ВестиУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров");
		
		Если Не УказыватьСделкуПоСтрокам И ЗначениеЗаполнено(Объект.Сделка) Тогда
			
			ДатаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "Дата");
			
		ИначеЕсли УказыватьСделкуПоСтрокам Тогда
			ДатаРеализации = Объект.Дата;
			
			Для Каждого Строка Из Объект.Товары Цикл
				ОбновитьПризнакПрослеживаемостиПоСтроке(Строка, Объект.Дата);
				ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Строка);
			КонецЦикла;
			
		Иначе
			ДатаРеализации = Объект.Дата;
		КонецЕсли;
		
		ВедетсяУчетПрослеживаемыхТоваров = ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДатаРеализации);
	КонецЕсли;
	
	Если УказыватьСделкуПоСтрокам Или 
		(ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ЗначениеЗаполнено(Объект.Сделка))
		Или ЭтоКомиссия Тогда
		РНПТПодбираетсяПоОстаткам = Истина;
	Иначе
		РНПТПодбираетсяПоОстаткам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовогоДоговора()
	
	Возврат РаботаСДоговорамиКонтрагентовБП.ПараметрыСозданияНовогоДоговора(ЭтотОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьВозвратПоПоступлениюТоваров(Форма)
	
	Объект = Форма.Объект;
	Если Форма.РасчетВозвратаСУчетомРекомендацийПоНДС Тогда
		Если Форма.УказыватьСделкуПоСтрокам Тогда 
			Для Каждого Строка Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(Строка.Сделка) И ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
