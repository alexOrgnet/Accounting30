// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ЭтоНоваяСтрока;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		ПриИзмененииВидаОперацииНаСервере();
		
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ОтчетКомиссионераОПродажах",
		"ФормаДокументаТовары",
		НСтр("ru='Новости: Отчет комиссионера (агента) о продажах'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионераОПродажах.Форма.ФормаПорядокУчетаРасчетов" Тогда
		
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионераОПродажах.Форма.ФормаВыбора" Тогда

		ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		ТекущиеДанные.ДокументРеализации = ВыбранноеЗначение;
		ТекущиеДанные.ИсправляемыйДокумент = "";
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионераОПродажах.Форма.ФормаРедактированияСтрокиТовары" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбораПоОстаткам" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Патенты.Форма.ФормаЭлемента" Тогда
		
		ЗаполнитьПатентОбработкаВыбора(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетКомиссионераОПродажах";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ОтчетКомиссионераОПродажах", ПараметрыЗаписи, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетФактураВыданный"));
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Проверка на изменение сроков действия патентов.
	Если Не ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
 
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"	   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"	, АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"  			, 			Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", 			Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансамПолученным", 	Объект.СчетУчетаРасчетовПоАвансамПолученным);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги", 	Объект.СчетУчетаРасчетовЗаПосредническиеУслуги);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансамВыданным", 		Объект.СчетУчетаРасчетовПоАвансамВыданным);
	ПараметрыФормы.Вставить("ПользовательУправляетСчетамиУчета", 		Истина);

	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.Форма.ФормаПорядокУчетаРасчетов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеПриИзменении(Элемент)
	
	УчетПСНКлиент.ПатентПриИзменении(ЭтотОбъект, Объект.Патент, ПатентПредставление);
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетПСНКлиент.ПатентОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;

	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	СтрокаТаблицы.АналитикаУчета = "<...>";
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
					
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, Всего,
		|СчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
		|НомерГТД, СтранаПроисхождения,
		|АналитикаУчета, АналитикаУчетаЗаполнена,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам, КодТНВЭД,
		|ПрослеживаемыйТовар, РНПТ, ПодсказкаРНПТ, ИдентификаторСтроки, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС, ДеятельностьНаПатенте,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС, ПлательщикНДФЛ, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150      = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ПлательщикНДФЛ       = ПлательщикНДФЛ;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ДанныеОбъекта.РеализацияВЕАЭС = Ложь;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "Товары");
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ОтчетКомиссионераОПродажах.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
	ПараметрыФормыПодбора.ЭтоКомиссия            = Истина;
	ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(
				Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "Товары");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыРНПТ" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ЭтоКомиссия            = Истина;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
			
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда // мб лучше Если НЕ НоваяСТрока Тогда Возврат ?
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаУчета"
			И НЕ Элементы.Товары.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "Товары");
		КонецЕсли;

		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыРНПТ" 
			И Не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.РНПТ) Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные, Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыВозвращенные

&НаКлиенте
Процедура ТоварыВозвращенныеПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ТоварыВозвращенные.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ТоварыВозвращенные Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ТоварыВозвращенные.НайтиПоИдентификатору(ТоварыВозвращенные);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтрокиТовары = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование Тогда
			ДанныеСтрокиТовары.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		КонецЕсли; 
		ДанныеСтрокиТовары.Себестоимость = 0;
	КонецЕсли; 
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;

	ДанныеСтрокиТовары.АналитикаУчета = "<...>";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, КоличествоДоИзменения, СуммаДоИзменения,
		|СуммаНДСДоИзменения, КоличествоПослеИзменения, СуммаПослеИзменения, СуммаНДСПослеИзменения, Всего,
		|СчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
		|НомерГТД, СтранаПроисхождения, СпособУчетаНДС, ОтражениеВУСН,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам,
		|АналитикаУчета, АналитикаУчетаЗаполнена,
		|ПрослеживаемыйТовар,ПодсказкаРНПТ, РНПТ, ИдентификаторСтроки, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС, ДеятельностьНаПатенте,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС, ПлательщикНДФЛ, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.ПлательщикНДФЛ       = ПлательщикНДФЛ;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ТоварыВозвращенныеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ТекущиеДанные.ИсправляемыйДокумент = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТоварыВозвращенные");
	РассчитатьПоказателиПослеИзменения("ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ТоварыВозвращенные");
	РассчитатьПоказателиПослеИзменения("ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТоварыВозвращенные");
	
	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ДанныеСтроки.ИсправляемыйДокумент = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСтавкаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "ТоварыВозвращенные");
	РассчитатьПоказателиПослеИзменения("ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "ТоварыВозвращенные");
	РассчитатьПоказателиПослеИзменения("ТоварыВозвращенные");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеДокументРеализацииАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПодготовитьДанныеВыбораДокументРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеДокументРеализацииПриИзменении(Элемент)
	
	Элементы.ТоварыВозвращенные.ЗакончитьРедактированиеСтроки(Ложь);
	ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументРеализации, ПрослеживаемыйТовар, ПрослеживаемыйКомплект");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		ОбновитьПризнакПрослеживаемостиПоСтроке(ДанныеСтрокиТаблицы, Объект.Дата);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
		Если ТекущиеДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеДокументРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		
	Если ВыбранноеЗначение = "ТекущийДокумент" Тогда
		
		ТекущиеДанные.ПоТекущемуДокументу = Истина;
		
	Иначе
		
		ТекущиеДанные.ПоТекущемуДокументу = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыВозвращенныеАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "ТоварыВозвращенные");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыВозвращенныеРНПТ" Тогда
		ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ЭтоКомиссия            = Истина;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
			
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ТоварыВозвращенные", ПараметрыФормыПодбора);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыВозвращенныеПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПриАктивизацииЯчейки(Элемент)
	
	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.ТоварыВозвращенные.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыВозвращенныеАналитикаУчета"
			И НЕ Элементы.ТоварыВозвращенные.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.ТоварыВозвращенные.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "ТоварыВозвращенные");
		КонецЕсли;

		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыВозвращенныеРНПТ" 
			И Не ЗначениеЗаполнено(Элементы.ТоварыВозвращенные.ТекущиеДанные.РНПТ) Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ТоварыВозвращенные", Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
	ПараметрыФормыПодбора.ЭтоКомиссия            = Истина;
	ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
	
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ТоварыВозвращенные", ПараметрыФормыПодбора);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеРНПТОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(
				Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСтранаПроисхожденияПриИзменении(Элемент)
		ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "ТоварыВозвращенные");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРНПТ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран контрагент! Заполнение невозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ЗаполнитьРНПТНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "СтраницаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаВозвраты" Тогда
		
		ИмяТаблицы = "ТоварыВозвращенные";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" ИЛИ ПараметрыВставки.ИмяТаблицы = "ТоварыВозвращенные" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("КоличествоМест");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчета");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
				СписокСвойств.Добавить("СчетДоходов");
				СписокСвойств.Добавить("Субконто");
				СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
				СписокСвойств.Добавить("СчетРасходов");
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетДоходов");
			СписокСвойств.Добавить("Субконто");
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			СписокСвойств.Добавить("СчетРасходов");
		
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.ВозвратыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ВозвратыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти


// Служебные процедуры и функции БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;
	
	Форма.УстановитьУсловноеОформлениеГлавное();

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("КомиссияТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеКомиссияТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ВозвратыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВозвраты Тогда

		Форма.УстановитьУсловноеОформлениеВозвраты();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьДокументОприходования", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВозвращенныеСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСебестоимость");

	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"Объект.ТоварыВозвращенные.ДокументРеализации", ВидСравненияКомпоновкиДанных.Заполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"Объект.ТоварыВозвращенные.ПоТекущемуДокументу", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// ТоварыВозвращенныеАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Реквизиты не отображаются, если документ выставлен неплательщиком НДС.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеИсправляемыйДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТовары", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	УстановитьУсловноеОформлениеВидимостьТНВЭД();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимостьТНВЭД()
	
	// ТоварыКодТНВЭД Видимость = ЛОЖЬ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыКодТНВЭД Видимость = ИСТИНА
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКомиссияТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("КомиссияТоварыПроинициализировано", Истина);

	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	//ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	//ТоварыСебестоимость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьДокументОприходования", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	// ТоварыКодТНВЭД
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ТоварыСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПодсказкаРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	 ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВозвраты() Экспорт

	НастройкиУсловногоОформления.Вставить("ВозвратыПроинициализировано", Истина);

	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВозвращенные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.Субконто", ВидСравненияКомпоновкиДанных.Заполнено,);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыВозвращенныеСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РаздельныйУчетНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВозвращенные.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ТоварыВозвращенныеДокументРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеДокументРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.ПоТекущемуДокументу", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.ДокументРеализации", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Текущий документ>'"));
	
	
	// ТоварыВозвращенныеДокументРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеДокументРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.ПоТекущемуДокументу", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.ДокументРеализации", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));
	
	
	// ТоварыВозвращенныеСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеПодсказкаРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Управление видимостью патента.
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте Или Форма.ПрименяетсяТолькоПСН;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов Или Не Форма.ПрименяетсяТолькоПСН;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоПСН;
	ВидимостьОтступа = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоПСН;
	Элементы.ОтступШапка.Видимость  = ВидимостьОтступа;
	Элементы.ОтступПодвал.Видимость = ВидимостьОтступа;
	
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.ГруппаТоварыРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	Элементы.ГруппаТоварыВозвращенныеРНПТ.Заголовок = ТекстЗаголовкаРНПТ;

	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	// Расчеты
	Элементы.ПорядокУчетаРасчетов.Доступность 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Гиперссылка 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Форма.ПатентПредставление = УчетПСНКлиентСервер.ВыбранныйПатентПредставление(
		Объект.Патент, УчетПСНКлиентСервер.СписокПатентов(Форма));
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаВзаиморасчетов()

	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(Неопределено, Истина, Объект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;		
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 0);
	КонецЦикла;
	Для Каждого Строка Из Объект.ТоварыВозвращенные Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента,
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если Объект.ДокументБезНДС Тогда 
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;	
	
	Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Строка.Сумма, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",       Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",             Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",     	  Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",               Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",           Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",         Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость",  Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр",        ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И ВалютаРасчетов <> ВалютаРегламентированногоУчета)
		ИЛИ Не РаздельныйУчетНДСНаСчете19 Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Модифицированность      = Истина;
		
		ВалютаДоИзменения	 = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	
		Объект.ТипЦен           = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента  = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения, 
				КратностьДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент          = СведенияОНоменклатуре.Коэффициент;
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена         = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.НомерГТД             = СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения  = СведенияОНоменклатуре.СтранаПроисхождения;
	
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = СведенияОНоменклатуре.ПрослеживаемыйТовар
		Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = Ложь;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтаФорма, СтрокаТабличнойЧасти, ДанныеОбъекта, ПредставленияСубконто);

КонецПроцедуры

&НаСервере
Процедура ТоварыВозвращенныеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = СведенияОНоменклатуре.ПрослеживаемыйТовар
		Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = Ложь;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ТоварыВозвращенные", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(ЭтаФорма, СтрокаТабличнойЧасти, ДанныеОбъекта, ПредставленияСубконто);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРеализации(Реализация, СпособЗаполнения = "Заполнить")

	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТовары(Реализация, 0, Ложь);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "", ДобавленныеСтроки = Неопределено)

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС, ПлательщикНДФЛ, ВедетсяУчетПрослеживаемыхТоваров");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация            = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2  = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ПлательщикНДФЛ        = ПлательщикНДФЛ;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из ?(ЗначениеЗаполнено(ДобавленныеСтроки), ДобавленныеСтроки, Объект.Товары) Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтаФорма, СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ТоварыВозвращенные" Тогда
		Для Каждого СтрокаТаблицы Из ?(ЗначениеЗаполнено(ДобавленныеСтроки), ДобавленныеСтроки, Объект.ТоварыВозвращенные) Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(ЭтаФорма, СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто)

	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	ЗаполнитьАналитикуУчета(СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(Форма, СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто)
	
	СтрокаТаблицы.КоличествоДоИзменения    = СтрокаТаблицы.КоличествоПослеИзменения  + СтрокаТаблицы.Количество;
	СтрокаТаблицы.СуммаДоИзменения         = СтрокаТаблицы.СуммаПослеИзменения + СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СуммаНДСДоИзменения      = СтрокаТаблицы.СуммаНДСПослеИзменения + СтрокаТаблицы.СуммаНДС;

	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	ЗаполнитьАналитикуУчета(СтрокаТаблицы, ДанныеОбъекта, ПредставленияСубконто);
		
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	Возврат (Объект.Товары.Количество() > 0 ИЛИ Объект.ТоварыВозвращенные.Количество() > 0);

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Объект.Товары, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТоварыВозвращенные Цикл
		ОбновитьПризнакПрослеживаемостиПоСтроке(СтрокаТабличнойЧасти, Объект.Дата);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	УчетПСН.ДатаПриИзменении(Объект);
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
		Объект.НДСВключенВСтоимость = Ложь;
	Иначе
		Объект.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.ПодразделениеЗатрат)
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Объект.ПодразделениеЗатрат, Объект.Организация)) Тогда
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
		Объект.НДСВключенВСтоимость = Ложь;
	Иначе
		Объект.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	ЗаполнитьЗначенияСвойств(Объект, УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ТоварыВозвращенные" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ТоварыВозвращенные");
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером));

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ПересчитатьВознаграждение = Ложь;
	
	РеквизитыДоговорКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ПроцентКомиссионногоВознаграждения,СпособРасчетаКомиссионногоВознаграждения,
		|ВалютаВзаиморасчетов,ТипЦен,РасчетыВУсловныхЕдиницах,НДСПоСтавкам4и2");
		
	СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);
	ПрименяютсяСтавки4и2 = РеквизитыДоговорКонтрагента.НДСПоСтавкам4и2;
	
	СтавкаНДСИзменилась = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС 
		   И Объект.СтавкаНДСВознаграждения <> Перечисления.СтавкиНДС.БезНДС Тогда
			Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС;
			СтавкаНДСИзменилась = Истина;
		ИначеЕсли СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры
			    И Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС Тогда
			Объект.СтавкаНДСВознаграждения = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата);
			СтавкаНДСИзменилась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения   	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 	 = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	Объект.ВалютаДокумента 			= РеквизитыДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов 	= СтруктураКурсаДокумента.Кратность;
	
	Если ЗначениеЗаполнено(РеквизитыДоговорКонтрагента.ТипЦен) Тогда
		РеквизитыТипЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыДоговорКонтрагента.ТипЦен, 
			"ЦенаВключаетНДС");
		
		Объект.ТипЦен           = РеквизитыДоговорКонтрагента.ТипЦен;
		Объект.СуммаВключаетНДС = РеквизитыТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	ТребуетсяСчетФактура = Истина;

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	ПересчитатьВознаграждение = ПересчитатьВознаграждение ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;

	ЗаполнитьСчетаВзаиморасчетов();

	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Объект.ЗачетАвансов.Очистить();
	УстановитьПорядокУчетаРасчетов();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	
	Если ИмяТаблицы = "Товары" Тогда
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "Комиссионер");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , Ложь);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("Реализация"				, Истина);
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"			, Объект.СуммаВключаетНДС);
		ПараметрыФормы.Вставить("ДеятельностьНаПатенте"     , Объект.ДеятельностьНаПатенте);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогНДСОтгрузки   = Объект.Товары.Итог("СуммаНДС") - Объект.ТоварыВозвращенные.Итог("СуммаНДС");
	Форма.ИтогСуммаОтгрузки = Объект.Товары.Итог("Сумма") - Объект.ТоварыВозвращенные.Итог("Сумма") 
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогНДСОтгрузки);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация, ДокументБезНДС, ТипЦен, ДеятельностьНаПатенте");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	ЗначениеПустогоКоличества = ?(ИмяТаблицы = "Услуги", 1, 0);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено И НЕ ЭтоВставкаИзБуфера Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		Иначе
			
			// Вставка из буфера и вариант, когда строк с подобными позициями еще не было
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "ТоварыВозвращенные" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавленныеСтроки.Добавить(СтрокаТабличнойЧасти);
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "ТоварыВозвращенные" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
				СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
					СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
				СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
					
				Если ВедетсяУчетПрослеживаемыхТоваров Тогда
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = СведенияОНоменклатуре.ПрослеживаемыйТовар
					Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				Иначе
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар     = Ложь;
					СтрокаТабличнойЧасти.ПрослеживаемыйКомплект  = Ложь;
				КонецЕсли;
				
				ОтобразитьСубконтоСчетаДоходовТовары = ОтобразитьСубконтоСчетаДоходовТовары ИЛИ НЕ СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
				
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС  ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				КонецЕсли;
				
				СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
				
			КонецЕсли;
			
			Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ (ЗначениеПустогоКоличества = 1 И СтрокаТабличнойЧасти.Сумма = 0) Тогда
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = ДобавленныеСтроки.Количество();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы, ДобавленныеСтроки);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ОтобразитьСубконтоСчетаДоходовТовары = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Товары);
		ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.ТоварыВозвращенные);
	Иначе
		ОтобразитьСубконтоСчетаДоходовТовары = Истина;
		ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные = Истина;
	КонецЕсли;
	
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора 	 = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);
		ВалютаРасчетов    	 = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
		ТребуетсяСчетФактура = Истина;
	Иначе
		ВалютаРасчетов    	 = ВалютаРегламентированногоУчета;
		ПрименяютсяСтавки4и2 = Ложь;
		ТребуетсяСчетФактура = Ложь;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	// Прочие подписи и реквизиты:
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПорядокУчетаРасчетов();
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// Настраиваем внешний вид формы:
	УправлениеФормой(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПоказыватьДокументОприходования = 
		УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) <> Перечисления.СпособыОценки.ПоСредней;
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19 		 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВедетсяУчетНДСПоФЗ150 = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	ВедетсяУчетПрослеживаемыхТоваров  = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	
	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоПСН = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = УчетПСН.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Используется в условном оформлении
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Объект.Дата, Объект.Организация);
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, НДСВключенВСтоимость, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		?(Объект.ДокументБезНДС, Ложь, Объект.НДСВключенВСтоимость),
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораРеализации()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоРеализацииЗавершение", ЭтотОбъект);	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораРеализации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокУчетаРасчетов()

	ПорядокУчетаРасчетов = СформироватьНадписьПорядокУчетаРасчетов();
		
	Если СтрНайти(ПорядокУчетаРасчетов, "<...>") = 0 Тогда
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Истина;
		СчетаРасчетовЗаполнены = Истина;
	Иначе
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Ложь;
		СчетаРасчетовЗаполнены = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьНадписьПорядокУчетаРасчетов()

	ТекстСчетРасчетов 	= "";
	ТекстСчетАвансов 	= "";
	ТекстЗачетАвансов 	= "";
	ТекстСчетРасчетовПоВознаграждению = "";
	ТекстСчетАвансовПоВознаграждению  = "";

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
		ТекстСчетРасчетов = СвойствоСчета.Код;
	Иначе
		ТекстСчетРасчетов = "<...>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамПолученным) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовПоАвансамПолученным);
		ТекстСчетАвансов = СвойствоСчета.Код;
	Иначе
		ТекстСчетАвансов = "<...>";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги);
		ТекстСчетРасчетовПоВознаграждению = СвойствоСчета.Код;
	Иначе
		ТекстСчетРасчетовПоВознаграждению = "<...>";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамВыданным) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовПоАвансамВыданным);
		ТекстСчетАвансовПоВознаграждению = СвойствоСчета.Код;
	Иначе
		ТекстСчетАвансовПоВознаграждению = "<...>";
	КонецЕсли;

	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'за товары %1, %2, по вознаграждению %3, %4'"), 
		ТекстСчетРасчетов, ТекстСчетАвансов,
		ТекстСчетРасчетовПоВознаграждению, ТекстСчетАвансовПоВознаграждению);
	
	Возврат ТекстНадписи;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаЗачетАвансов);
	
	Объект.ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);
	Объект.СпособЗачетаАвансов 						= ВыбранноеЗначение.СпособЗачетаАвансов;
	Объект.СчетУчетаРасчетовСКонтрагентом 			= ВыбранноеЗначение.СчетУчетаРасчетовСКонтрагентом;
	Объект.СчетУчетаРасчетовПоАвансамПолученным 	= ВыбранноеЗначение.СчетУчетаРасчетовПоАвансамПолученным;
	Объект.СчетУчетаРасчетовЗаПосредническиеУслуги 	= ВыбранноеЗначение.СчетУчетаРасчетовЗаПосредническиеУслуги;
	Объект.СчетУчетаРасчетовПоАвансамВыданным 		= ВыбранноеЗначение.СчетУчетаРасчетовПоАвансамВыданным;
	
	Модифицированность = Истина;

	УстановитьПорядокУчетаРасчетов();

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

// ПодключаемыеОбработчики

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

&НаКлиенте
Процедура РассчитатьПоказателиПослеИзменения(ИмяТаблицы)
	
	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ СтрокаТаблицы.Свойство("КоличествоПослеИзменения") Тогда
		Возврат;
	КонецЕсли; 

	СтрокаТаблицы.КоличествоПослеИзменения = СтрокаТаблицы.КоличествоДоИзменения - СтрокаТаблицы.Количество;
	СтрокаТаблицы.СуммаПослеИзменения      = СтрокаТаблицы.СуммаДоИзменения      - СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СуммаНДСПослеИзменения   = СтрокаТаблицы.СуммаНДСДоИзменения   - СтрокаТаблицы.СуммаНДС;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПодготовитьДанныеВыбораДокументРеализации()
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ШрифтВыделения = Новый Шрифт(,,,Истина,,);
	ЦветВыделения  = ЦветаСтиля.ЦветШрифтаНаименованияПоля;
	
	ПредставлениеСтроки = Новый Массив;
	
	СтрокаПредставление = НСтр("ru='Текущий документ'");
	СтрокаЗначение = "ТекущийДокумент";
	ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(СтрокаПредставление, ШрифтВыделения, ЦветВыделения));
	ДанныеВыбора.Добавить(СтрокаЗначение, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
	
	ПредставлениеСтроки = Новый Массив;
	СтрокаПредставление = НСтр("ru='<...>'");
	СтрокаЗначение = "ОтключитьТекущийДокумент";
	ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(СтрокаПредставление, ШрифтВыделения, ЦветВыделения));
	ДанныеВыбора.Добавить(СтрокаЗначение, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписиПоПрослеживаемости()
	
	УдалитьСвязанныеЗаписиПоПрослеживаемостиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИмяТаблицы)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИмяТаблицы)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(
			ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиПоПрослеживаемостиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0]);
		КонецЕсли;
		
		СтрокиВозвращенныеТовары = Объект.ТоварыВозвращенные.НайтиСтроки(СтруктураОтбора);
		Если СтрокиВозвращенныеТовары.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиВозвращенныеТовары[0]);
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРНПТНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомиссионераОПродажахТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СчетУчета В (&ТоварыПринятыеНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ТоварыОтКомитентаНаРеализацию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ОтчетКомиссионераОПродажахТовары
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйТовар = ИСТИНА
	|	И ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйКомплект = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтранаПроисхождения,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрослеживаемыеТоварыОстатки.Номенклатура КАК Номенклатура,
	|	ПрослеживаемыеТоварыОстатки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПрослеживаемыеТоварыОстатки.РНПТ КАК РНПТ,
	|	ПрослеживаемыеТоварыОстатки.Комитент КАК Комитент,
	|	ПрослеживаемыеТоварыОстатки.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(ПрослеживаемыеТоварыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток) КАК КоличествоПрослеживаемости
	|ПОМЕСТИТЬ ПрослеживаемыеТоварыОстатки
	|ИЗ
	|	РегистрНакопления.ПрослеживаемыеТовары.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И (Номенклатура, СтранаПроисхождения, ВидЗапасов) В
	|					(ВЫБРАТЬ
	|						ТаблицаТовары.Номенклатура,
	|						ТаблицаТовары.СтранаПроисхождения,
	|						ТаблицаТовары.ВидЗапасов
	|					ИЗ
	|						ТаблицаТовары КАК ТаблицаТовары)
	|				И Комиссионер = &Комиссионер) КАК ПрослеживаемыеТоварыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрослеживаемыеТоварыОстатки.Номенклатура,
	|	ПрослеживаемыеТоварыОстатки.СтранаПроисхождения,
	|	ПрослеживаемыеТоварыОстатки.РНПТ,
	|	ПрослеживаемыеТоварыОстатки.Комитент,
	|	ПрослеживаемыеТоварыОстатки.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтранаПроисхождения,
	|	РНПТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомиссионераОПродажахТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СчетУчета В (&ТоварыПринятыеНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ТоварыОтКомитентаНаРеализацию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов
	|ПОМЕСТИТЬ ТЧТовары
	|ИЗ
	|	&ТаблицаТовары КАК ОтчетКомиссионераОПродажахТовары
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйТовар = ИСТИНА
	|	И ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйКомплект = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Количество КАК Количество,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Комитент КАК Комитент,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Комитент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ТоварыОтКомитентаНаРеализацию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов
	|ПОМЕСТИТЬ ТЧСведенийОПрослеживаемости
	|ИЗ
	|	&ТаблицаСведенияОПрослеживаемости КАК ОтчетКомиссионераОПродажахСведенияПрослеживаемости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТЧСведенийОПрослеживаемости.РНПТ КАК РНПТ,
	|	СУММА(ТЧСведенийОПрослеживаемости.Количество) КАК Количество,
	|	СУММА(ТЧСведенийОПрослеживаемости.КоличествоПрослеживаемости) КАК КоличествоПрослеживаемости,
	|	ТЧСведенийОПрослеживаемости.Комитент КАК Комитент,
	|	ТЧСведенийОПрослеживаемости.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ИспользованныеВДокументеРНПТ
	|ИЗ
	|	ТЧТовары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧСведенийОПрослеживаемости КАК ТЧСведенийОПрослеживаемости
	|		ПО ТЧТовары.ИдентификаторСтроки = ТЧСведенийОПрослеживаемости.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.СтранаПроисхождения,
	|	ТЧСведенийОПрослеживаемости.РНПТ,
	|	ТЧСведенийОПрослеживаемости.Комитент,
	|	ТЧСведенийОПрослеживаемости.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтранаПроисхождения,
	|	РНПТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.РНПТ, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК РНПТ,
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.Комитент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Комитент,
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.ВидЗапасов, ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ПустаяСсылка)) КАК ВидЗапасов,
	|	СУММА(ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.Количество, 0) - ЕСТЬNULL(ИспользованныеВДокументеРНПТ.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемости, 0) - ЕСТЬNULL(ИспользованныеВДокументеРНПТ.КоличествоПрослеживаемости, 0)) КАК КоличествоПрослеживаемости
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрослеживаемыеТоварыОстатки КАК ПрослеживаемыеТоварыОстатки
	|		ПО ТаблицаТовары.Номенклатура = ПрослеживаемыеТоварыОстатки.Номенклатура
	|			И ТаблицаТовары.СтранаПроисхождения = ПрослеживаемыеТоварыОстатки.СтранаПроисхождения
	|			И ТаблицаТовары.ВидЗапасов = ПрослеживаемыеТоварыОстатки.ВидЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованныеВДокументеРНПТ КАК ИспользованныеВДокументеРНПТ
	|		ПО (ПрослеживаемыеТоварыОстатки.Номенклатура = ИспользованныеВДокументеРНПТ.Номенклатура)
	|			И (ПрослеживаемыеТоварыОстатки.СтранаПроисхождения = ИспользованныеВДокументеРНПТ.СтранаПроисхождения)
	|			И (ПрослеживаемыеТоварыОстатки.РНПТ = ИспользованныеВДокументеРНПТ.РНПТ)
	|			И (ПрослеживаемыеТоварыОстатки.ВидЗапасов = ИспользованныеВДокументеРНПТ.ВидЗапасов)
	|ГДЕ
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.Количество, 0) > ЕСТЬNULL(ИспользованныеВДокументеРНПТ.Количество, 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.РНПТ, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)),
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.ВидЗапасов, ЗНАЧЕНИЕ(Перечисление.ВидыЗапасовПрослеживаемыхТоваров.ПустаяСсылка)),
	|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.Комитент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
	
	ДатаОстатков = Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаОстатков",                     ДатаОстатков);
	Запрос.УстановитьПараметр("Организация",                      Объект.Организация);
	Запрос.УстановитьПараметр("Комиссионер",                      Объект.Контрагент);
	Запрос.УстановитьПараметр("ТаблицаТовары",                    Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСведенияОПрослеживаемости", Объект.СведенияПрослеживаемости.Выгрузить());
	Запрос.УстановитьПараметр("ТоварыПринятыеНаКомиссию",         БухгалтерскийУчетПовтИсп.СписокСчетовТоварыПринятыеНаКомиссию());

	ОстаткиПоРНПТ = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.ПрослеживаемыйКомплект Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.ПрослеживаемыйТовар и Строка.Количество > 0 Тогда
			Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
				Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;
			СтарыеРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура ("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
			Для каждого СтрокаКУдалению Из СтарыеРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаКУдалению);
			КонецЦикла;
			Отбор = Новый Структура("Номенклатура, СтранаПроисхождения",
				Строка.Номенклатура, Строка.СтранаПроисхождения);
			РНПТПоНоменклатуре = ОстаткиПоРНПТ.НайтиСтроки(Отбор);
			КоличествоОстатокПоРНПТ = 0;
			Для каждого СтрокаОстатка Из РНПТПоНоменклатуре Цикл
				КоличествоОстатокПоРНПТ = КоличествоОстатокПоРНПТ + СтрокаОстатка.Количество;
			КонецЦикла;
			Если РНПТПоНоменклатуре.Количество() = 0 Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнены РНПТ, не хватает  %1 товара %2 (%3)'"),
					Формат(Строка.Количество, "ЧЦ=15; ЧДЦ=3"),
					Строка.Номенклатура,
					Строка.СтранаПроисхождения);
				Поле = "Товары"+ "["+ Формат(Строка.НомерСтроки-1,"ЧГ=") + "].РНПТ";
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, Поле, "Объект");
				
			ИначеЕсли РНПТПоНоменклатуре.Количество() > 1 И КоличествоОстатокПоРНПТ > Строка.Количество Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По товару %1 (%2) несколько РНПТ, необходимо заполнить вручную'"),
					Строка.Номенклатура,
					Строка.СтранаПроисхождения);
					Поле = "Товары"+ "["+ Формат(Строка.НомерСтроки-1,"ЧГ=") + "].РНПТ";
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, Поле, "Объект");
				
			Иначе
				
				ОстатокПоРНПТ = РНПТПоНоменклатуре[0];
				Если Строка.Количество > КоличествоОстатокПоРНПТ Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не заполнены РНПТ, не хватает  %1 товара %2 (%3)'"),
						Формат(Строка.Количество - ОстатокПоРНПТ.Количество, "ЧЦ=15; ЧДЦ=3"),
						Строка.Номенклатура,
						Строка.СтранаПроисхождения);
					Поле = "Товары"+ "["+ Формат(Строка.НомерСтроки-1,"ЧГ=") + "].РНПТ";
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, Поле, "Объект");
					
				Иначе
					ОсталосьПодобрать = Строка.Количество;
					Для Каждого СтрокаОстатка Из РНПТПоНоменклатуре Цикл
						Если ОсталосьПодобрать >= СтрокаОстатка.Количество Тогда
							
							НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "РНПТ, Комитент, Количество, КоличествоПрослеживаемости");
							НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
							ОсталосьПодобрать = ОсталосьПодобрать - СтрокаОстатка.Количество;
							ОстаткиПоРНПТ.Удалить(СтрокаОстатка);
						Иначе
							НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "РНПТ, Комитент, Количество, КоличествоПрослеживаемости");
							НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
							НоваяСтрока.Количество = ОсталосьПодобрать;
							
							МассивКоэффициентов = Новый Массив;
							МассивКоэффициентов.Добавить(СтрокаОстатка.Количество - ОсталосьПодобрать);
							МассивКоэффициентов.Добавить(ОсталосьПодобрать);
							МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
							СтрокаОстатка.КоличествоПрослеживаемости, МассивКоэффициентов, 11);
							
							НоваяСтрока.КоличествоПрослеживаемости = МассивСумм[1];
							
							СтрокаОстатка.Количество = СтрокаОстатка.Количество - ОсталосьПодобрать;
							СтрокаОстатка.КоличествоПрослеживаемости = СтрокаОстатка.КоличествоПрослеживаемости - МассивСумм[1];
							
							ОсталосьПодобрать = 0;
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПризнакПрослеживаемостиПоСтроке(СтрокаТабличнойЧасти, ДатаДокумента)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументРеализации) Тогда
		ДатаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументРеализации, "Дата");
	Иначе
		ДатаРеализации = ДатаДокумента;
	КонецЕсли;
	ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДатаРеализации);
		
	Если ВедетсяУчетПрослеживаемыхТоваровПоНоменклатуре Тогда
		РеквизитыПрослеживаемости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаТабличнойЧасти.Номенклатура, "ПрослеживаемыйТовар, ПрослеживаемыйКомплект");
		Если РеквизитыПрослеживаемости <> Неопределено Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = РеквизитыПрослеживаемости.ПрослеживаемыйТовар Или РеквизитыПрослеживаемости.ПрослеживаемыйКомплект;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = РеквизитыПрослеживаемости.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;

	ТекстЗаголовка = НСтр("ru = 'Отчет комиссионера о розничных продажах'");
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение, ИмяТаблицы)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект[ИмяТаблицы].НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата", 			Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТаблицы",		ИмяТаблицы);
	ПараметрыФормы.Вставить("ДокументБезНДС", 	Объект.ДокументБезНДС);
	
	ПараметрыФормы.Вставить("СчетУчета", 	ДанныеСтроки.СчетУчета);
	ПараметрыФормы.Вставить("СчетДоходов", 	ДанныеСтроки.СчетДоходов);
	ПараметрыФормы.Вставить("Субконто", 	ДанныеСтроки.Субконто);
	ПараметрыФормы.Вставить("СчетРасходов", ДанныеСтроки.СчетРасходов);
	ПараметрыФормы.Вставить("СчетУчетаНДСПоРеализации", ДанныеСтроки.СчетУчетаНДСПоРеализации);
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("СуммаНДС", 	ДанныеСтроки.СуммаНДС);
	
	
	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.Форма.ФормаРедактированияСтрокиТовары", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто)
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	// При вызове с сервера: функциональная опция может скрыть эти поля
	ДанныеЗаполнения = Новый Структура("СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(
		ДанныеЗаполнения,
		Не ПараметрыОбъекта.ДокументБезНДС,
		ПараметрыОбъекта.ПлательщикНДФЛ, 
		ПредставленияСубконто);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ЗаполнятьНДС, Знач ЗаполнятьНДФЛ, ПредставленияСубконто)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("СчетУчетаЗабалансовый", Ложь);
	Результат.Вставить("СчетУчетаПартионный", Ложь);
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
	
	ВидСубконтоНГ			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// СчетУчета
	Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
		СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
		Результат.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		Результат.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		Результат.АналитикаУчета = СвойстваСчета.Код;
	Иначе
		Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена  = Ложь;
	КонецЕсли;
	
	// Счета дохода, расхода и НДС учитываются, если счет учета товара незабалансовый
	Если НЕ Результат.СчетУчетаЗабалансовый Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
			
			СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
					ЭлементСписка = ПредставленияСубконто.НайтиПоЗначению(ДанныеСтроки.Субконто);
					Если ЭлементСписка <> НЕОПРЕДЕЛЕНО Тогда
						ПредставлениеСубконто = ЭлементСписка.Представление;
					Иначе
						ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
						Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) 
							ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
							
							ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
						Иначе
							ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
						КонецЕсли; 
						ПредставленияСубконто.Добавить(ДанныеСтроки.Субконто, ПредставлениеСубконто);
					КонецЕсли; 
					
					Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
					КонецЕсли;
				Иначе
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
					
					// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
					Если ЗаполнятьНДФЛ
						И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
						Результат.АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
	    	
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
	    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
	    	СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
	    	Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
		Если ЗаполнятьНДС Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
				СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы[ЗначенияВыбранныеВФормеАналитикиУчета.ИмяТаблицы].ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	
	Модифицированность = Истина;
	
	Если СтрокаТабличнойЧасти.Свойство("АналитикаУчета") Тогда
		
		ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС, ПлательщикНДФЛ, ВедетсяУчетПрослеживаемыхТоваров");
	
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Реализация            = Истина;
		ДанныеОбъекта.ПрименяютсяСтавки4и2  = ПрименяютсяСтавки4и2;
		ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 = ВедетсяУчетНДСПоФЗ150;
		ДанныеОбъекта.ПлательщикНДФЛ        = ПлательщикНДФЛ;
		
		ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ДанныеОбъекта, ПредставленияСубконто);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыИзРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор! Добавление невозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация",        Объект.Организация);
	Отбор.Вставить("Контрагент",         Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьТоварыИзРеализацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыИзРеализацииЗавершение(РезультатЗакрытия, Дополнительныепараметры) Экспорт
	
	Результат = РезультатЗакрытия;
	
	ЗаполнитьПоРеализации(Результат, "Добавить");
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор! Заполнение невозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ОткрытьФормуВыбораРеализации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализацииЗавершение(РезультатЗакрытия, Дополнительныепараметры) Экспорт
	
	ЗаполнитьПоРеализации(РезультатЗакрытия, "Заполнить");
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОСписании Тогда
		Если Объект.Товары.Количество() >0 Тогда
			Документы.ОтчетКомиссионераОПродажах.ЗаполнитьНДСВТабличнойЧастиПриИзмененииВидаОперации(ЭтотОбъект, "Товары"); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	Если Объект.ДеятельностьНаПатенте Тогда
		Если Не ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ВидДеятельностиПоПатентуПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
	Иначе
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПатентОбработкаВыбора(ВыбранныйПатент)
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если Не УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		Объект.Патент                = ВыбранныйПатент;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрока = Ложь;

#КонецОбласти 
