
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СтавкаНДС) И ВидОперации = Перечисления.ВидыОперацийСБилетами.Доплата Тогда
		СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(Истина);
	КонецЕсли;	
	
	Документы.ОперацияСБилетом.ЗаполнитьНаОснованииПокупки(ЭтотОбъект);
		
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(Организация) Тогда
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента,
			Контрагент,
			Организация,
			Справочники.Билеты.ВидыДоговоровАгента());
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сумма) 
		И ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат 
		И ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(Билет) Тогда
		
		// Заполним сумму возврата - обычно это вся стоимость билета
		СуммыБилета = Справочники.Билеты.СуммыБилетов(Организация,,, Билет,, Ссылка);
			
		Если СуммыБилета.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыБилета[0], "Сумма, СтавкаНДС, СуммаНДС");
			
			// Рассчитаем сумму, не облагаемую НДС
			СтавкаНДСВПроцентах = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
			Если СтавкаНДСВПроцентах <> 0 Тогда
				ОблагаемаяСумма = СуммаНДС / СтавкаНДСВПроцентах * 100;
				СуммаНеОблагаемаяНДС = Сумма - ОблагаемаяСумма - СуммаНДС; 	
			КонецЕсли;	
					
		КонецЕсли;	
			
	КонецЕсли;	
		
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат 
		И ВидОперации <> Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БилетЗамена");
	КонецЕсли; 	
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	РеквизитыЗаСсылками = Документы.ОперацияСБилетом.РеквизитыЗаСсылками();
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОперацияСБилетом.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	// Зачтем сумму возврата в счет долгов в следующем порядке:
	//
	// 1. Сначала зачтем долги по возвращаемому (далее - текущему) билету. Для этого получаем таблицу зачета долгов на сумму возврата. 
	//    Первыми в ней будут долги по операциям с возвращаемым билетом. Т.е. если, например, по операции покупки билета остался долг, 
	//    то в таблице взаиморасчетов этот долг будет первым к зачету (см. сортировку в УчетВзаиморасчетов.ПолучитьОстаткиАвансов()).
	ТаблицаВзаиморасчетовВозврат = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ВозвратТаблицаДокумента, 
		Неопределено,
		ПараметрыПроведения.ВозвратРеквизиты, 
		Отказ);
		
	//    В ТаблицаВзаиморасчетовВозврат могут быть долги по другим билетам (и в общем случае долги по другим поступлениям), 
	//    а также незачтенная часть возврата (последняя ситуация возникнет, если сумма возврата превышает общий долг по договору перед поставщиком;
	//    у такого незачтенного возврата в таблице взаиморасчетов в качестве документа расчетов указан текущий документ).
	//    Наличие таких долгов в таблице означает, что часть суммы (или вся сумма) возврата восстанавливается в аванс и затем зачитывается в счет других долгов. 
	//    В зависимости от того, полностью ли возврат зачтен в счет задолженности по текущему билету, будут формироваться разные проводки по зачету суммы возврата.
	//    Так если возврат превышает задолженность по текущему билету, то
	//     - возврат будет восстановлен на счет авансов
	//     - затем частично или полностью этот аванс будет зачтен (см. формирование проводок ниже, если ЕстьВосстановлениеАванса) 
	//     - процедура ниже вернет ТаблицаВзаиморасчетовВосстановлениеАванса с зачетом других долгов (не по текущему билету)
	//     - в ТаблицаВзаиморасчетовВозврат останутся только долги по текущему билету 
	//    Если возврат НЕ превышает задолженность по возвращаемому билету, то
	//     - возврат будет зачтен со счета расчетов по билетам непосредственно в счет долгов по текущему билету, минуя счет авансов
	//       (см. Документы.ОперацияСБилетом.СформироватьДвиженияВозврат()) 
	//     - процедура ниже вернет Неопределено, т.е. нет восстановленного аванса
	ТаблицаВзаиморасчетовВосстановлениеАванса = Документы.ОперацияСБилетом.ТаблицаВзаиморасчетовВосстановлениеАванса(
		ТаблицаВзаиморасчетовВозврат, 
		ПараметрыПроведения.ДокументыРасчетовПоБилету,
		Реквизиты, 
		Отказ);	
		
	ЕстьВосстановлениеАванса = (ТаблицаВзаиморасчетовВосстановлениеАванса <> Неопределено);	
		
	// 2. Далее используем восстановленный аванс (если есть) в счет долга по текущему поступлению (штраф или новый билет).
	//    В этом случае сумма зачета других авансов (ЗачетАвансовТаблицаДокумента) уменьшается на сумму возврата, 
	//    которую можно зачесть в счет текущего поступления.
	//    Одновременно на эту же сумму корректируется ТаблицаВзаиморасчетовВосстановлениеАванса: зачет аванса перераспределяется 
	//    с других долгов на долг по текущему поступлению.
	// 3. В третью очередь восстановленный аванс зачитываем в счет других долгов. Такие долги также останутся 
	//    в ТаблицаВзаиморасчетовВосстановлениеАванса.
	ЗачетАвансовТаблицаДокумента = Документы.ОперацияСБилетом.ТаблицаЗачетАвансовСУчетомВозврата(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, 
		ТаблицаВзаиморасчетовВосстановлениеАванса,
		Реквизиты, 
		Отказ);	
		
	// Таблица зачета авансов с учетом возврата
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Отказ);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
					
	// Проводки по возврату билета
	Документы.ОперацияСБилетом.СформироватьДвиженияВозврат(
		ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.Реквизиты, 
		ЕстьВосстановлениеАванса,
		Движения, 
		Отказ);
				
	// Проводки по зачету восстановленного (при возврате билета) аванса
	Если ЕстьВосстановлениеАванса Тогда
		
		// Соберем зачеты восстановленного аванса в одну таблицу, чтобы многократно не вызывать формирование проводок  
		Если ТаблицаВзаиморасчетовВосстановлениеАванса <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВзаиморасчетовВосстановлениеАванса, ТаблицаВзаиморасчетовВозврат);
		КонецЕсли;	
		
		// Зачитываем восстановленные авансы
		УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетовВозврат,
			ПараметрыПроведения.ВозвратРеквизиты, Движения, Отказ);
			
		// Если требуется зачесть восстановленный аванс в счет текущего поступления (покупки нового билета или штрафа)
		// (проводка Дт [Счет расчетов] / Текущая операция - Кт [Счет авансов] / Текущая операция),
		// то делаем эту проводку отдельно здесь. 
		Документы.ОперацияСБилетом.СформироватьДвиженияЗачетВосстановленногоАвансаПоПоступлению(ТаблицаВзаиморасчетовВосстановлениеАванса,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	КонецЕсли;		
		
	// Проводки по зачету аванса на сумму поступления
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Движения, 
		Отказ);
				
	// Проводки по поступлению
	Документы.ОперацияСБилетом.СформироватьДвиженияХозрасчетный(
		ПараметрыПроведения.Реквизиты, 
		Движения, 
		Отказ); 
	
	// УСН
		
	// Данные для отражения в налоговом учете УСН
	СтруктураДопПараметровУСН = Новый Структура;
	
	// В ТаблицаВзаиморасчетов может быть строка с суммой поступления, для которой не нашлось авансов к зачету.
	// Такую строку нужно удалить, т.к. фактически это неоплаченная часть поступления.
	СтрокаАванса = ТаблицаВзаиморасчетов.Найти(Реквизиты.Ссылка, "ДокументРасчетов");
	Если СтрокаАванса <> Неопределено Тогда
		ТаблицаВзаиморасчетов.Удалить(СтрокаАванса);
	КонецЕсли;
		
	// Соберем все зачеты авансов в одну таблицу, чтобы можно было рассчитать статус оплаты расходов УСН.
	// Для этого в ТаблицаВзаиморасчетов добавим зачет восстановленного аванса по текущему поступлению
	// из ТаблицаВзаиморасчетовВосстановлениеАванса.
	Если ТаблицаВзаиморасчетовВосстановлениеАванса <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаВзаиморасчетовВосстановлениеАванса.Скопировать(Новый Структура("ДокументРасчетов", Реквизиты.Ссылка)),
			ТаблицаВзаиморасчетов);
	КонецЕсли;	
	
	СтруктураДопПараметровУСН.Вставить("ТаблицаРасчетов", ТаблицаВзаиморасчетов);
	
	Если ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		 Или ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 Или ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		 
		СтруктураДопПараметровУСН.Вставить("ТаблицаБилетов", ПараметрыПроведения.ТаблицаБилетов);
		
	КонецЕсли;	
		
	СуммаСторноРасхода = 0;
	// Для операций Возврат и ЗаменаВозврат таблица ПоступлениеРасходовУСНТаблицаРасходов == Неопределено,
	// поэтому фактически движений поступления расходов не создается
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов, 
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);
	
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
						
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураДопПараметровУСН);
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли