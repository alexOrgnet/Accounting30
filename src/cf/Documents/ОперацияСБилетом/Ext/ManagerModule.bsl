#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьНаОснованииПокупки(ОперацияОбъект) Экспорт 
		
	Если ОперацияОбъект.ВидОперации = Перечисления.ВидыОперацийСБилетами.Покупка Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОперацияОбъект.Билет) Тогда
		Возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Покупка.Организация КАК Организация,
	|	Покупка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Покупка.Контрагент КАК Контрагент,
	|	Покупка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Покупка.СтавкаНДС КАК СтавкаНДС,
	|	Покупка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Покупка.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацияСБилетом.Дата КАК Дата,
	|		ОперацияСБилетом.Организация КАК Организация,
	|		ОперацияСБилетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ОперацияСБилетом.Контрагент КАК Контрагент,
	|		ОперацияСБилетом.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ОперацияСБилетом.СтавкаНДС КАК СтавкаНДС,
	|		ОперацияСБилетом.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|		ОперацияСБилетом.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|	ГДЕ
	|		ОперацияСБилетом.Билет = &Билет
	|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Покупка)
	|		И ОперацияСБилетом.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперацияСБилетом.Дата,
	|		ОперацияСБилетом.Организация,
	|		ОперацияСБилетом.ПодразделениеОрганизации,
	|		ОперацияСБилетом.Контрагент,
	|		ОперацияСБилетом.ДоговорКонтрагента,
	|		ОперацияСБилетом.СтавкаНДС,
	|		ОперацияСБилетом.СчетУчетаРасчетовСКонтрагентом,
	|		ОперацияСБилетом.СчетУчетаРасчетовПоАвансам
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|	ГДЕ
	|		ОперацияСБилетом.БилетЗамена = &Билет
	|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|		И ОперацияСБилетом.Проведен) КАК Покупка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Билет", ОперацияОбъект.Билет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();  // в выборке 1 запись
	
	РеквизитыПокупки = Новый Структура;
	
	// Часть реквизитов важнее заполнить по операции покупки,
	// т.к. в большинстве случаев указанные ниже реквизиты должны быть одинаковые для всех операций с одним и тем же билетом.
	// Такие реквизиты заполняются из покупки безусловно.
	// Остальные реквизиты заполняются из покупки только в том случе, если не заполнены иными способами.
	РеквизитыЗаполняемыеИзПокупки = Новый Массив;  
	РеквизитыЗаполняемыеИзПокупки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	РеквизитыЗаполняемыеИзПокупки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		ИмяРеквизитаПокупки = Колонка.Имя;
		ЗначениеРеквизитаПокупки = Выборка[ИмяРеквизитаПокупки];
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизитаПокупки) Тогда
			Продолжить;
		КонецЕсли;	
		
		// Заполненный реквизит обновляем только если он входит в список безусловно обновляемых (см. выше)
		Если РеквизитыЗаполняемыеИзПокупки.Найти(ИмяРеквизитаПокупки) = Неопределено И ЗначениеЗаполнено(ОперацияОбъект[ИмяРеквизитаПокупки]) Тогда
			Продолжить;
		КонецЕсли;	
		
		// Если контрагент в текущем документе отличается от операции покупки, то и договор из покупки не заполняем
		Если ИмяРеквизитаПокупки = "ДоговорКонтрагента" 
			И ЗначениеЗаполнено(ОперацияОбъект.Контрагент) 
			И ОперацияОбъект.Контрагент <> Выборка.Контрагент Тогда
			Продолжить;
		КонецЕсли;	
		
		РеквизитыПокупки.Вставить(ИмяРеквизитаПокупки, ЗначениеРеквизитаПокупки); 
		
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(ОперацияОбъект, РеквизитыПокупки);
		
КонецПроцедуры	

Функция ТаблицаВзаиморасчетовВосстановлениеАванса(ТаблицаВзаиморасчетовВозврат, ТаблицаДокументыРасчетовПоБилету, Реквизиты, Отказ) Экспорт 

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетовВозврат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаДокументыРасчетовПоБилету) Тогда
		// Если отсутствуют другие операции по билету (а значит и долги по ним), то вся сумма возврата восстанавливается в авансы
		// (т.е. ТаблицаВзаиморасчетовВосстановлениеАванса == ТаблицаВзаиморасчетовВозврат).
		// В ТаблицаВзаиморасчетовВозврат после этого не должно остаться записей, т.к. все они перенесены в ТаблицаВзаиморасчетовВосстановлениеАванса
		ТаблицаВзаиморасчетовВосстановлениеАванса = ТаблицаВзаиморасчетовВозврат.Скопировать();
		ТаблицаВзаиморасчетовВозврат.Очистить();
		Возврат ТаблицаВзаиморасчетовВосстановлениеАванса;
	КонецЕсли;
	
	ТаблицаВзаиморасчетовВосстановлениеАванса = Неопределено;
	
	// Долги не по текущему билету переносим из ТаблицаВзаиморасчетовВозврат в ТаблицаВзаиморасчетовВосстановлениеАванса.
	// Идем с конца таблицы взаиморасчетов, чтобы можно было удалять из нее строки.
	// При этом порядок зачета долгов, которые переносим в ТаблицаВзаиморасчетовВосстановлениеАванса, оставляем прежним. 
	ВсегоСтрок = ТаблицаВзаиморасчетовВозврат.Количество();
	Для Шаг = 1 По ВсегоСтрок Цикл
		
		СтрокаРасчетов = ТаблицаВзаиморасчетовВозврат[ВсегоСтрок - Шаг];
			
		Если ТаблицаДокументыРасчетовПоБилету.Найти(СтрокаРасчетов.ДокументРасчетов, "ДокументРасчетов") <> Неопределено Тогда
			// Это долг по текущему билету - не трогаем
			Продолжить;
		КонецЕсли;	
		
		Если ТаблицаВзаиморасчетовВосстановлениеАванса = Неопределено Тогда
			ТаблицаВзаиморасчетовВосстановлениеАванса = ТаблицаВзаиморасчетовВозврат.СкопироватьКолонки();
		КонецЕсли;
		
		// Вставляем строку в начало таблицы, чтобы сохранять исходный порядок
		ЗаполнитьЗначенияСвойств(ТаблицаВзаиморасчетовВосстановлениеАванса.Вставить(0), СтрокаРасчетов); 
		ТаблицаВзаиморасчетовВозврат.Удалить(СтрокаРасчетов);
		
	КонецЦикла; 
		
	Возврат ТаблицаВзаиморасчетовВосстановлениеАванса;
	
КонецФункции

Функция ТаблицаЗачетАвансовСУчетомВозврата(ЗачетАвансовТаблицаДокумента, ТаблицаВзаиморасчетовВосстановлениеАванса, Реквизиты, Отказ) Экспорт 

	Если Не ЗначениеЗаполнено(ЗачетАвансовТаблицаДокумента) Тогда
		// Отсутствует поступление (например, операция "Возврат" без штрафа или операция "ЗаменаВозврат") 
		Если ЗначениеЗаполнено(ТаблицаВзаиморасчетовВосстановлениеАванса) Тогда
			// Перераспределение сумм зачета долгов не требуется, поэтому больше не нужна запись с незачтенным авансом
			СтрокаАванса = ТаблицаВзаиморасчетовВосстановлениеАванса.Найти(Реквизиты.Ссылка, "ДокументРасчетов");
			Если СтрокаАванса <> Неопределено Тогда
				ТаблицаВзаиморасчетовВосстановлениеАванса.Удалить(СтрокаАванса);
			КонецЕсли;
		КонецЕсли;	
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетовВосстановлениеАванса) Тогда
		Возврат ЗачетАвансовТаблицаДокумента;
	КонецЕсли;
		
	// Восстановленный аванс зачитываем в счет долга по текущему поступлению (штраф или новый билет).
	// Этот долг не был учтен при формировании ТаблицаВзаиморасчетовВосстановлениеАванса. Поэтому здесь
	// требуется одновременно уменьшить сумму зачета авансов в ЗачетАвансовТаблицаДокумента
	// и перераспределить суммы зачета восстановленного аванса в ТаблицаВзаиморасчетовВосстановлениеАванса в пользу текущего документа.
	// Идем с конца таблицы ТаблицаВзаиморасчетовВосстановлениеАванса, т.к. из-за зачета долга по текущему документу "пострадают",
	// в первую очередь, именно последние по порядку долги.
		
	СтрокаЗачетАвансов = ЗачетАвансовТаблицаДокумента[0]; // в таблице одна строка
		
	// Массив имен сумм, которые изменяются пропорционально изменению СуммаВзаиморасчетов 
	Свойства = Новый Массив;
	Свойства.Добавить("СуммаРуб");
	
	СуммыЗачетаАванса = Новый Структура; // суммы возврата, которые зачитывается в счет текущего поступления (штрафа или нового билета)
	СуммыЗачетаАванса.Вставить("СуммаВзаиморасчетов", 0);
	Для каждого Свойство Из Свойства Цикл
		СуммыЗачетаАванса.Вставить(Свойство, 0);
	КонецЦикла; 
	
	ВсегоСтрок = ТаблицаВзаиморасчетовВосстановлениеАванса.Количество();
	Для Шаг = 1 По ВсегоСтрок Цикл
		
		Если СтрокаЗачетАвансов.СуммаВзаиморасчетов = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаАванса = ТаблицаВзаиморасчетовВосстановлениеАванса[ВсегоСтрок - Шаг];
		
		СуммаЗачета = Мин(СтрокаЗачетАвансов.СуммаВзаиморасчетов, СтрокаАванса.СуммаВзаиморасчетов);
				
		КоэффициентыЗачета = Новый Соответствие; // для каждой коллекции пропорция изменения вторичных сумм будет своя
		
		Если СтрокаЗачетАвансов.СуммаВзаиморасчетов = 0 Тогда
			КоэффициентыЗачета.Вставить("СтрокаЗачетАвансов", 0);
		Иначе	
			КоэффициентыЗачета.Вставить("СтрокаЗачетАвансов", (СтрокаЗачетАвансов.СуммаВзаиморасчетов - СуммаЗачета) / СтрокаЗачетАвансов.СуммаВзаиморасчетов);
		КонецЕсли;
		
		Если СтрокаАванса.СуммаВзаиморасчетов = 0 Тогда
			КоэффициентыЗачета.Вставить("СтрокаАванса", 0);
		Иначе	
			КоэффициентыЗачета.Вставить("СтрокаАванса", (СтрокаАванса.СуммаВзаиморасчетов - СуммаЗачета) / СтрокаАванса.СуммаВзаиморасчетов);
		КонецЕсли;
		
		СтрокаЗачетАвансов.СуммаВзаиморасчетов = СтрокаЗачетАвансов.СуммаВзаиморасчетов - СуммаЗачета;
		СтрокаАванса.СуммаВзаиморасчетов = СтрокаАванса.СуммаВзаиморасчетов - СуммаЗачета;
		СуммыЗачетаАванса.СуммаВзаиморасчетов = СуммыЗачетаАванса.СуммаВзаиморасчетов + СуммаЗачета;
		
		// Другие суммы вычитаются пропорционально
		Для каждого Свойство Из Свойства Цикл
			
			СтрокаЗачетАвансов[Свойство] = СтрокаЗачетАвансов[Свойство] * КоэффициентыЗачета["СтрокаЗачетАвансов"];
			
			Уменьшение = СтрокаАванса[Свойство] - СтрокаАванса[Свойство] * КоэффициентыЗачета["СтрокаАванса"];
			СтрокаАванса[Свойство] = СтрокаАванса[Свойство] * КоэффициентыЗачета["СтрокаАванса"];
			
			СуммыЗачетаАванса[Свойство] = СуммыЗачетаАванса[Свойство] + Уменьшение;
			
		КонецЦикла; 
		
		// В результате пересчета долгов, некоторые строки больше не имеют смысла.
		Если СтрокаАванса.СуммаВзаиморасчетов = 0 Тогда
			ТаблицаВзаиморасчетовВосстановлениеАванса.Удалить(СтрокаАванса);
		КонецЕсли;
						
	КонецЦикла; 
	
	// Больше не нужна запись с незачтенным авансом
	СтрокаАванса = ТаблицаВзаиморасчетовВосстановлениеАванса.Найти(Реквизиты.Ссылка, "ДокументРасчетов");
	Если СтрокаАванса <> Неопределено Тогда
		ТаблицаВзаиморасчетовВосстановлениеАванса.Удалить(СтрокаАванса);
	КонецЕсли;	
	
	// ... но вместо нее в таблицу ТаблицаВзаиморасчетовВозврат добавим зачет возврата в счет текущего поступления (штрафа или нового билета).
	// При формировании движений эта запись сформирует проводку вида 
	// Дт [Счет расчетов] / Текущий документ - Кт [Счет авансов] / Текущий документ
	Если СуммыЗачетаАванса.СуммаВзаиморасчетов > 0 Тогда
		НовыйЗачетВосстановленногоАванса = ТаблицаВзаиморасчетовВосстановлениеАванса.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЗачетВосстановленногоАванса, СтрокаЗачетАвансов);
		ЗаполнитьЗначенияСвойств(НовыйЗачетВосстановленногоАванса, СуммыЗачетаАванса);
		НовыйЗачетВосстановленногоАванса.СчетАвансов = Реквизиты.СчетАвансов;
	КонецЕсли;	
	
	Если ТаблицаВзаиморасчетовВосстановлениеАванса.Количество() = 0 Тогда
		ТаблицаВзаиморасчетовВосстановлениеАванса = Неопределено;
	КонецЕсли;
				
	Возврат ЗачетАвансовТаблицаДокумента;
	
КонецФункции

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт

	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
		
КонецПроцедуры

#КонецОбласти

Функция РеквизитыЗаСсылками() Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Прячутся за "ПорядокУчетаРасчетов"
	Для Каждого ОписаниеРеквизита Из УчетВзаиморасчетовФормы.РеквизитыДокументаПорядокУчетаРасчетов() Цикл
		РеквизитыЗаСсылками.Вставить(ОписаниеРеквизита.Ключ, "ПорядокУчетаРасчетов");
	КонецЦикла;
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Организация, ВидОперации, Билет");
	
	// Для некоторых операций требуется подразделение, на которое билет приобретался.
	// Билет может быть приобретен как при обычной покупке, так и при обмене - учтем оба варианта.
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		 Или РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 Или РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		 
		Запрос.УстановитьПараметр("Билет", РеквизитыДокумента.Билет);
		 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПриобретениеБилета.ПодразделениеОрганизации) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ПодразделениеПокупки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОперацияСБилетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|	ИЗ
		|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
		|	ГДЕ
		|		ОперацияСБилетом.Билет = &Билет
		|		И ОперацияСБилетом.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Покупка), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка))
		|		И ОперацияСБилетом.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОперацияСБилетом.ПодразделениеОрганизации
		|	ИЗ
		|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
		|	ГДЕ
		|		ОперацияСБилетом.БилетЗамена = &Билет
		|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
		|		И ОперацияСБилетом.Проведен) КАК ПриобретениеБилета";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение 
		|ПОМЕСТИТЬ ВТ_ПодразделениеПокупки
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	// Операция вида "Обмен" одновременно списывает стоимость прежнего билета и приходует новый билет по указанной стоимости.
	// При этом стоимость прежнего билета явно в документе не указывается - ее нужно рассчитать по остаткам на счете учета билетов.
	// Для этого блокируем регистр бухгалтерии по счету учета билетов и по значению реквизита документа "Билет"
	// (в данном реквизите указан именно возвращаемый билет).
	// Полученную сумму билета помещаем в ВТ_ОбменБилета. Для других операций создается пустая временная таблица ВТ_ОбменБилета.
	// Для операций Возврат и ЗаменаВозврат сумма возврата указана явно - учтем ее ниже (см. запрос временной таблицы ТаблицаСуммВзаиморасчетовВозврат).
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
				
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, РеквизитыДокумента.Дата));
		ЭлементБлокировки.УстановитьЗначение("Организация", РеквизитыДокумента.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        УчетКомандировок.СчетУчетаБилетов());
		ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Билеты,
			РеквизитыДокумента.Билет);
			
		Блокировка.Заблокировать();
			
		Запрос.УстановитьПараметр("Период", РеквизитыДокумента.Дата);
		Запрос.УстановитьПараметр("СчетУчетаБилетов", УчетКомандировок.СчетУчетаБилетов());
		Запрос.УстановитьПараметр("СубконтоБилеты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Билеты);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаВозврата
		|ПОМЕСТИТЬ ВТ_ОбменБилета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетУчетаБилетов, &СубконтоБилеты, Субконто1 = &Билет) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	0 КАК СуммаВозврата 
		|ПОМЕСТИТЬ ВТ_ОбменБилета
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Билет.Сотрудник КАК Сотрудник,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.БилетЗамена.Сотрудник КАК СотрудникЗамена,
	|	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВТ_Реквизиты
	|ИЗ
	|	Документ.ОперацияСБилетом КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Сумма КАК СуммаРуб,
	|		Реквизиты.Сумма КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		НЕ Реквизиты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Штраф,
	|		Реквизиты.Штраф
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетовВозврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Сумма КАК СуммаРуб,
	|		Реквизиты.Сумма КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		Реквизиты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ОбменБилета.СуммаВозврата,
	|		ВТ_ОбменБилета.СуммаВозврата
	|	ИЗ
	|		ВТ_ОбменБилета КАК ВТ_ОбменБилета) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.СотрудникЗамена КАК СотрудникЗамена,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЕСТЬNULL(ОбменБилета.СуммаВозврата, 0) КАК СуммаВозврата,
	|	ЕСТЬNULL(ПодразделениеПокупки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеВозврата,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ТаблицаСуммВзаиморасчетовВозврат.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетовВозврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	ВТ_Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозврат КАК ТаблицаСуммВзаиморасчетовВозврат
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбменБилета КАК ОбменБилета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодразделениеПокупки КАК ПодразделениеПокупки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Реквизиты.СуммаВзаиморасчетов > 0 КАК ЕстьПоступление,
	|	Реквизиты.СуммаВзаиморасчетовВозврат > 0 КАК ЕстьВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Реквизиты";
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат[4]);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Реквизиты.Вставить("ИспользуетсяОтложенноеПроведение",
		ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период));
		
	Запрос.УстановитьПараметр("СчетУчетаБилетов", УчетКомандировок.СчетУчетаБилетов());
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
		
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.СотрудникЗамена КАК СотрудникЗамена,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СуммаВозврата КАК СуммаВозврата,
	|	Реквизиты.ПодразделениеВозврата КАК ПодразделениеВозврата
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьПоступление Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаЗачетАвансов",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ТаблицаЗачетАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТаблицаЗачетАвансов", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	ОперацияСБилетомЗачетАвансов.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.СчетАвансов КАК СчетАвансов,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ОперацияСБилетомЗачетАвансов.ДокументАванса КАК ДокументАванса,
		|	ОперацияСБилетомЗачетАвансов.СуммаЗачета КАК СуммаЗачета
		|ИЗ
		|	Документ.ОперацияСБилетом.ЗачетАвансов КАК ОперацияСБилетомЗачетАвансов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ОперацияСБилетомЗачетАвансов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		 И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		ПараметрыПроведения.Вставить("ТаблицаБилетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаБилетов", НомераТаблиц.Количество());
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Билет КАК Билет,
		|	Реквизиты.СуммаВозврата КАК Сумма
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		// Возврат, ЗаменаВозврат
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Билет КАК Билет,
		|	Реквизиты.Сумма КАК Сумма
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	КонецЕсли;	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьВозврат Тогда
		ПараметрыПроведения.Вставить("ВозвратРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратТаблицаДокумента",	Неопределено);
		ПараметрыПроведения.Вставить("ДокументыРасчетовПоБилету", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВозвратРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратТаблицаДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДокументыРасчетовПоБилету", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетовВозврат.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетовВозврат.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозврат КАК ТаблицаСуммВзаиморасчетовВозврат
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка КАК ДокументРасчетов
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ОперацияСБилетом.Организация = Реквизиты.Организация
	|			И ОперацияСБилетом.Контрагент = Реквизиты.Контрагент
	|			И ОперацияСБилетом.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента
	|			И ОперацияСБилетом.Билет = Реквизиты.Билет
	|ГДЕ
	|	ОперацияСБилетом.Проведен
	|	И ОперацияСБилетом.Ссылка <> &Ссылка
	|	И ОперацияСБилетом.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ОперацияСБилетом.Организация = Реквизиты.Организация
	|			И ОперацияСБилетом.Контрагент = Реквизиты.Контрагент
	|			И ОперацияСБилетом.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента
	|			И ОперацияСБилетом.БилетЗамена = Реквизиты.Билет
	|ГДЕ
	|	ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|	И ОперацияСБилетом.Проведен
	|	И ОперацияСБилетом.Ссылка <> &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат Тогда
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасходыПредпринимателя
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Командировки) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|			ТОГДА Реквизиты.БилетЗамена
	|		ИНАЧЕ Реквизиты.Билет
	|	КОНЕЦ КАК ЭлементРасхода,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоМатериал,
	|	&СчетУчетаБилетов КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	0 КАК Количество,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	Реквизиты КАК Реквизиты";
			
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не Реквизиты.ИспользуетсяОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Период КАК Дата
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура УпорядочитьТаблицуВзаиморасчетов(ТаблицаВзаиморасчетов, ДокументСсылка) Экспорт 
	
	Если ТаблицаВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В первую очередь "закрываем" долги по операциям с тем же билетом, что и текущая операция. Для этого по документам расчетов
	// "Операция с билетом" определим, какие относятся к тому же билету. Долги/авансы по ним закрываем первыми.
	// Упорядочивание по дате документа расчетов также выполняется, но оно вторично.
	ТаблицаВзаиморасчетов.Колонки.Добавить("РасчетыПоТекущемуБилету", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Ссылка В(&ОперацииСБилетом)
	|	И (ОперацияСБилетом.Билет = &Билет
	|			ИЛИ ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|				И ОперацияСБилетом.БилетЗамена = &Билет)");
	
	Запрос.УстановитьПараметр("ОперацииСБилетом", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДокументРасчетов"));
	Запрос.УстановитьПараметр("Билет",            ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Билет"));
	ОперацииСБилетом = Запрос.Выполнить().Выгрузить();
	Если ОперацииСБилетом.Количество() = 0 Тогда
		ОбщегоНазначенияБПВызовСервера.ЗаполнитьДатыВТаблице(ТаблицаВзаиморасчетов, "ДокументРасчетов", "ДатаДокументаРасчетов");
		Возврат;
	КонецЕсли; 
	ОперацииСБилетом.Индексы.Добавить("Ссылка");
	
	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		Если ОперацииСБилетом.Найти(СтрокаТаблицы.ДокументРасчетов, "Ссылка") <> Неопределено Тогда
			СтрокаТаблицы.РасчетыПоТекущемуБилету = Истина;
		КонецЕсли;
	КонецЦикла;
	ПоляСортировки = "РасчетыПоТекущемуБилету Убыв, ДатаДокументаРасчетов, ДокументРасчетов";
	ТаблицаВзаиморасчетов.Сортировать(ПоляСортировки, Новый СравнениеЗначений);
	
	// Есть есть незаполненные даты, то дозаполним их напрямую из документа и отсортируем.
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьДатыВТаблице(ТаблицаВзаиморасчетов,
		"ДокументРасчетов", "ДатаДокументаРасчетов", ПоляСортировки);
	
КонецПроцедуры	

#КонецОбласти

#Область ОтложенноеПроведение

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	// Таблица взаиморасчетов при возврате
	ТаблицаВзаиморасчетовВозврат = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
	    Параметры,
		ПараметрыПроведения.ВозвратТаблицаДокумента, 
		Неопределено, 
		ПараметрыПроведения.ВозвратРеквизиты, 
		Отказ);
		
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
	    Параметры,
		ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.ВозвратРеквизиты,
		Отказ);
		
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Отказ);
			
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
				
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвижений

Функция ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОперацииСБилетом
	
	СписокОбязательныхКолонок = ""
		+ "Ссылка,"            // <ДокументСсылка.ОперацияСБилетом>
		+ "Период,"            // <Дата>
		+ "Организация,"       // <СправочникСсылка.Организации>
		+ "Подразделение,"     // <Ссылка на справочник подразделений>
		+ "ВидОперации,"  	   // <ПеречислениеСсылка.ВидыОперацийСБилетами>
		+ "ВидДоговора,"  	   // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
		+ "СчетРасчетов,"      // <ПланСчетовСсылка.Хозрасчетный>
		+ "СчетАвансов,"       // <ПланСчетовСсылка.Хозрасчетный>
		+ "Сотрудник,"  	   // <СправочникСсылка.ФизическиеЛица>
		+ "СотрудникЗамена,"   // <СправочникСсылка.ФизическиеЛица>
		+ "Билет,"  	   	   // <СправочникСсылка.Билеты>
		+ "БилетЗамена,"  	   // <СправочникСсылка.Билеты>
		+ "Контрагент,"  	   // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"// <СправочникСсылка.ДоговорыКонтрагентов>
		+ "Сумма,"             // <Число,15,2>
		+ "СуммаВозврата,"     // <Число,15,2>   ПодразделениеВозврата
		+ "ПодразделениеВозврата," // <Ссылка на справочник подразделений>
		+ "Штраф";             // <Число,15,2>
	
	Параметры.Вставить("ОписаниеОперации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОписаниеОперации, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияХозрасчетный(ТаблицаОписаниеОперации, Движения, Отказ) Экспорт 
	
	Если Не ЗначениеЗаполнено(ТаблицаОписаниеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Параметры = ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации);	
	ОписаниеОперации = Параметры.ОписаниеОперации[0];
	СчетУчетаБилетов = УчетКомандировок.СчетУчетаБилетов();
	
	// У операции ЗаменаВозврат не может быть поступления.
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат 
		 Или ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат И ОписаниеОперации.Штраф = 0 Тогда
		Возврат;
	КонецЕсли; 	
		
	Проводка = Движения.Хозрасчетный.Добавить();
	
	СодержаниеПроводки = НСтр("ru='Операция с билетом: %1'");
	
	Проводка.Содержание  	= СтрШаблон(СодержаниеПроводки, ОписаниеОперации.ВидОперации);
	Проводка.СчетДт  		= СчетУчетаБилетов;
	Проводка.СчетКт  		= ОписаниеОперации.СчетРасчетов;
	Проводка.Сумма 			= ОписаниеОперации.Сумма;
	
	ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Кт", ОписаниеОперации);
	
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		// Для операции Обмен здесь выполним вторую часть: приходуем новый билет (БилетЗамена).
		// Сотрудник также может поменяться при обмене (СотрудникЗамена).
		ЗаполнитьСубконтоСчетаБилетов(Проводка, "Дт", ОписаниеОперации.СотрудникЗамена, ОписаниеОперации.БилетЗамена);
		Проводка.Содержание = НСтр("ru='Покупка нового билета при обмене'");
	ИначеЕсли ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат Тогда
		// Штраф при вовзрате билета учитываем в прочих расходах 
		Проводка.Содержание  	= НСтр("ru='Возврат билета: штраф'");
		Проводка.СчетДт  		= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ШтрафыПениНеустойки"));
		Проводка.Сумма 			= ОписаниеОперации.Штраф;
	Иначе
		// Для всех остальных операций формируем проводку по билету (Билет) и сотруднику (Сотрудник).
		ЗаполнитьСубконтоСчетаБилетов(Проводка, "Дт", ОписаниеОперации.Сотрудник, ОписаниеОперации.Билет);
	КонецЕсли;	
	
	ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
	
КонецПроцедуры

Процедура СформироватьДвиженияВозврат(ТаблицаВзаиморасчеты, ТаблицаОписаниеОперации, ЕстьВосстановлениеАванса, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) И Не ЕстьВосстановлениеАванса Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации);	
	ОписаниеОперации = Параметры.ОписаниеОперации[0];
	СчетУчетаБилетов = УчетКомандировок.СчетУчетаБилетов();
		
	// Для операций Обмен, Возврат и ЗаменаВозврат требуется списать стоимость возвращаемого билета, т.е. выполнить проводку 
	// обратную покупке. 
	
	// Если сумма возврата превышает долги по текущему билету (ЕстьВосстановлениеАванса), то формируется проводка в аванс вида
	// Дт [Счет авансов] / Текущая операция - Кт 76.14 / Возвращаемый билет.
	// Этот аванс отдельно зачитывается (см. ОбработкаПроведения()) в счет долгов по текущему билету, а также прочих долгов.
	
	// Если сумма возврата полностью зачитывается в счет долгов по тому же самому билету, то формируются проводки вида 
	// Дт [Счет расчетов] / Операция покупки - Кт 76.14 / Возвращаемый билет.
	
	Если ЕстьВосстановлениеАванса Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
			
		Проводка.Содержание = НСтр("ru='Восстановление аванса поставщику при возврате билета'");
		Проводка.СчетДт  		= ОписаниеОперации.СчетАвансов;
		Проводка.СчетКт  		= СчетУчетаБилетов;
		Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
			Проводка.Сумма = ОписаниеОперации.СуммаВозврата;
		Иначе
			Проводка.Сумма = ОписаниеОперации.Сумма;
		КонецЕсли;	
		
		ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Дт", ОписаниеОперации);
		ЗаполнитьСубконтоСчетаБилетов(Проводка, "Кт", ОписаниеОперации.Сотрудник, ОписаниеОперации.Билет);
		
		ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации,, ОписаниеОперации.ПодразделениеВозврата);
		
	Иначе
	
		Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчеты Цикл

			Проводка = Движения.Хозрасчетный.Добавить();

			Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
				Проводка.Содержание = НСтр("ru='Возврат прежнего билета при обмене'");
			Иначе
				Проводка.Содержание = НСтр("ru='Возврат билета'");
			КонецЕсли;	
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
			
			Проводка.СчетДт = ОписаниеОперации.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ОписаниеОперации.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ОписаниеОперации.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
			
			Проводка.СчетКт = СчетУчетаБилетов;
			ЗаполнитьСубконтоСчетаБилетов(Проводка, "Кт", ОписаниеОперации.Сотрудник, ОписаниеОперации.Билет);
			
			ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(
				Проводка, 
				ОписаниеОперации, 
				СтрокаВзаиморасчетов.Подразделение, 
				ОписаниеОперации.ПодразделениеВозврата);
			
		КонецЦикла;
				
	КонецЕсли;	

КонецПроцедуры

Процедура СформироватьДвиженияЗачетВосстановленногоАвансаПоПоступлению(ТаблицаВзаиморасчеты, ТаблицаОписаниеОперации, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации);	
	ОписаниеОперации = Параметры.ОписаниеОперации[0];
	
	ЗачетВосстановленногоАвансаПоПоступлению = ТаблицаВзаиморасчеты.Найти(ОписаниеОперации.Ссылка, "ДокументРасчетов");

	Если ЗачетВосстановленногоАвансаПоПоступлению = Неопределено Или ЗачетВосстановленногоАвансаПоПоступлению.СуммаРуб = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Проводка = Движения.Хозрасчетный.Добавить();
		
	Проводка.Содержание = НСтр("ru='Зачет аванса'");
	Проводка.Сумма = ЗачетВосстановленногоАвансаПоПоступлению.СуммаРуб;
	
	Проводка.СчетДт = ОписаниеОперации.СчетРасчетов;
	ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Дт", ОписаниеОперации);
	
	Проводка.СчетКт = ЗачетВосстановленногоАвансаПоПоступлению.СчетАвансов;
	ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Кт", ОписаниеОперации);
		
	ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);				

КонецПроцедуры

Процедура ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации, ПодразделениеДт = Неопределено, ПодразделениеКт = Неопределено)

	Проводка.Период      = ОписаниеОперации.Период;
	Проводка.Организация = ОписаниеОперации.Организация;
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	// В проводке устанавливаем обособленное подразделение, указанное в шапке документа.
	// Это подразделение доступно только в КОРП.
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = ?(ПодразделениеДт = Неопределено, ОписаниеОперации.Подразделение, ПодразделениеДт);
	КонецЕсли;
			
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = ?(ПодразделениеКт = Неопределено, ОписаниеОперации.Подразделение, ПодразделениеКт);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаРасчетов(Проводка, СторонаУчетаРасчетов, ОписаниеОперации)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Контрагенты", ОписаниеОперации.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Договоры", ОписаниеОперации.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"ДокументыРасчетовСКонтрагентами", ОписаниеОперации.Ссылка);

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, Сотрудник, Билет)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"РаботникиОрганизаций", Сотрудник);
		
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"Билеты", Билет);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура - обработчик обновления
// Находит операции с билетами, в которых не заполнены добавленные реквизиты взаиморасчетов
// (часть из них ранее были в справочнике билетов):
// - Контрагент
// - ДоговорКонтрагента
// - СпособЗачетаАвансов
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьРеквизитыВзаиморасчетов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОперацияСБилетом.Ссылка КАК Ссылка,
	|	ОперацияСБилетом.Дата КАК Дата,
	|	ОперацияСБилетом.Билет.УдалитьАгент КАК Контрагент,
	|	ОперацияСБилетом.Билет.УдалитьДоговорАгента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет <> ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет.УдалитьАгент <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|			ИЛИ ОперацияСБилетом.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияСБилетом.Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияСБилетом");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено ИЛИ ЗначениеЗаполнено(ДокументОбъект.Контрагент) И ЗначениеЗаполнено(ДокументОбъект.СпособЗачетаАвансов) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				ДокументОбъект.Контрагент = Выборка.Контрагент;
				ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.СпособЗачетаАвансов) Тогда
				ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;	
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() не удалось обработать операцию с билетом по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ОперацияСБилетом, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
		
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() не удалось обработать операции с билетами: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ОперацияСБилетом,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() обработала очередную порцию операций с билетами: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры	

// Функция проверяет, обработана ли операция с билетом процедурой обновления (см. ЗаполнитьРеквизитыВзаиморасчетов()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция НеТребуетсяЗаполнятьРеквизитыВзаиморасчетов(Параметры) Экспорт
	
	Документ = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка.ОперацияСБилетом") Тогда
    	Документ = Параметры.Данные;
	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("ДокументОбъект.ОперацияСБилетом")
		 ИЛИ ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Документ = Параметры.Данные.Ссылка;
    КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Ссылка = &Ссылка
	|	И (ОперацияСБилетом.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет <> ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет.УдалитьАгент <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|			ИЛИ ОперацияСБилетом.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка))";

	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Пустой();
		
КонецФункции

#КонецОбласти

#КонецЕсли