#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 13, 0);
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Результат = Запрос.Выполнить();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СинонимОС",	НСтр("ru='Основные средства'"));
	
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП",	УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",	УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("МоментСписания", Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Реквизиты.Период);

	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаТаблицаОС(НомераТаблиц)
		+ ТекстЗапросаВыбытиеОС(НомераТаблиц)
		+ ТекстЗапросаСостоянияОС(НомераТаблиц)
		+ ТекстЗапросаСписаниеОстаточнойСтоимости(НомераТаблиц)
		+ ТекстЗапросаПроверкиПоОС(НомераТаблиц)
		+ ТекстЗапросаПереводВМалоценноеОборудование(НомераТаблиц)
		+ ТекстЗапросаСписаниеОСиНМАИП(НомераТаблиц)
		+ ТекстЗапросаПрослеживаемыеОС(НомераТаблиц, ВедетсяУчетПрослеживаемыхТоваров);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если Не ВедетсяУчетПрослеживаемыхТоваров Тогда
		ПараметрыПроведения.Вставить("ПрослеживаемыеОС",     Неопределено);
		ПараметрыПроведения.Вставить("ПрослеживаемыеТовары", Неопределено);
	КонецЕсли;

	Возврат ПараметрыПроведения;

КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Перевод ОС в малоценное оборудование
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПереводОСВМалоценноеОборудование";
	КомандаПечати.Представление = НСтр("ru = 'Перевод ОС в малоценное оборудование'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Перевод ОС в малоценное оборудование""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПереводОСВМалоценноеОборудование") Тогда
	
		ИмяМакета = "ПереводОСВМалоценноеОборудование";
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПереводОСВМалоценноеОборудование",
			НСтр("ru = 'Перевод ОС в малоценное оборудование'"), 
			ПечатьПереводОСВМалоценноеОборудование(МассивОбъектов, ОбъектыПечати),, ИмяМакета);
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "СобытиеОС");
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Свойства

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ПереводОСВМалоценноеОборудование";
	Набор.Идентификатор = Новый УникальныйИдентификатор("44fd1240-e556-448e-a1dc-64aa05304195");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТаблицаОС(НомераТаблиц)

	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка                        КАК Регистратор,
	|	ТаблицаОС.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаТаблицыДокумента()

Функция ТекстЗапросаВыбытиеОС(НомераТаблиц)

	НомераТаблиц.Вставить("ВыбытиеОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка                   КАК Регистратор,
	|	Реквизиты.Дата                     КАК Период,
	|	Реквизиты.Номер                    КАК Номер,
	|	Реквизиты.Организация              КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	""ОС""                             КАК ИмяСписка,
	|	Реквизиты.СобытиеОС                КАК СобытиеОС,
	|	ИСТИНА                             КАК СписыватьТолькоЛинейныйНУ,
	|	""Перевод ОС в малоценное оборудование"" КАК Содержание
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСостоянияОС(НомераТаблиц)

	НомераТаблиц.Вставить("СостоянияОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК СостояниеОС,
	|	""ОС"" КАК ИмяСписка
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеОстаточнойСтоимости(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеОстаточнойСтоимости", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеОстаточнойСтоимостиТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	""ОС"" КАК ИмяСписка,
	|	Реквизиты.СобытиеОС,
	|	""Перевод ОС в малоценное оборудование"" КАК Содержание,
	|	ИСТИНА КАК СписыватьТолькоЛинейныйНУ
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка                                                       КАК Регистратор,
	|	ТаблицаОС.НомерСтроки                                                  КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство                                             КАК ОсновноеСредство,
	|	ЛОЖЬ                                                                   КАК Арендованное,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК Субконто,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению)       КАК СчетСписания,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК СубконтоНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению)       КАК СчетСписанияНУ
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПроверкиПоОС(НомераТаблиц)

	НомераТаблиц.Вставить("ПроверкиПоОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	""ОС"" КАК ИмяСписка,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК МОЛ
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПереводВМалоценноеОборудование(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыМалоценноеОборудование", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМалоценноеОборудование", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаМатериаловПоСотрудникам.РасходИОстатки) КАК СпособУчетаМатериаловПоСотруднику,
	|	""Перевод ОС в малоценное оборудование"" КАК Содержание
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Номенклатура КАК Номенклатура,
	|	ТаблицаОС.Сотрудник КАК Сотрудник,
	|	ТаблицаОС.Ссылка.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеОСиНМАИП(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеОСиНМАИПРеквизиты",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеОСиНМАИПТаблица",	НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	""СписаниеОС"" КАК ВидОперации
	|ИЗ
	|	Документ.СписаниеОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.Субконто
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ТаблицаОС.ОсновноеСредство КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства) КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.Субконто ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.Субконто
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.Субконто КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	Реквизиты.СчетСписания КАК СчетДоходов,
	|	0 КАК Выручка,
	|	0 КАК НДСНачисленный
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеОС КАК Реквизиты
	|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрослеживаемыеОС(НомераТаблиц, ВедетсяУчетПрослеживаемыхТоваров)
	Если Не ВедетсяУчетПрослеживаемыхТоваров Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВТ_Прослеживаемость",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ОстаткиПоПрослеживаемымОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПрослеживаемыеОС",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПрослеживаемыеТовары",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереводОСВМалоценноеОборудованиеОС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеПоОС
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ПереводОСВМалоценноеОборудованиеОС
	|ГДЕ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка = &Ссылка
	|	И ПереводОСВМалоценноеОборудованиеОС.ПрослеживаемоеОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрослеживаемыеОсновныеСредстваОстатки.Организация КАК Организация,
	|	ПрослеживаемыеОсновныеСредстваОстатки.РНПТ КАК РНПТ,
	|	ПрослеживаемыеОсновныеСредстваОстатки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПрослеживаемыеОсновныеСредстваОстатки.Комплектующие КАК Комплектующие,
	|	СУММА(ПрослеживаемыеОсновныеСредстваОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ПрослеживаемыеОсновныеСредстваОстатки.КоличествоПрослеживаемостиОстаток) КАК КоличествоПрослеживаемости,
	|	ДанныеПоОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеПоОС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеПоОССОстатками
	|ИЗ
	|	ДанныеПоОС КАК ДанныеПоОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрослеживаемыеОсновныеСредства.Остатки(&МоментСписания, Организация = &Организация) КАК ПрослеживаемыеОсновныеСредстваОстатки
	|		ПО ДанныеПоОС.ОсновноеСредство = ПрослеживаемыеОсновныеСредстваОстатки.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоОС.ОсновноеСредство,
	|	ПрослеживаемыеОсновныеСредстваОстатки.РНПТ,
	|	ПрослеживаемыеОсновныеСредстваОстатки.Организация,
	|	ПрослеживаемыеОсновныеСредстваОстатки.СтранаПроисхождения,
	|	ПрослеживаемыеОсновныеСредстваОстатки.Комплектующие,
	|	ДанныеПоОС.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоОССОстатками.Организация КАК Организация,
	|	ДанныеПоОССОстатками.РНПТ КАК РНПТ,
	|	ДанныеПоОССОстатками.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеПоОССОстатками.Комплектующие КАК Комплектующие,
	|	ДанныеПоОССОстатками.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеПоОССОстатками.Количество КАК Количество,
	|	ДанныеПоОССОстатками.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости
	|ИЗ
	|	ДанныеПоОССОстатками КАК ДанныеПоОССОстатками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоОССОстатками.Организация КАК Организация,
	|	ДанныеПоОССОстатками.РНПТ КАК РНПТ,
	|	ДанныеПоОССОстатками.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеПоОССОстатками.Номенклатура КАК Номенклатура,
	|	ДанныеПоОССОстатками.Комплектующие КАК Комплектующие,
	|	ДанныеПоОССОстатками.Количество КАК Количество,
	|	ДанныеПоОССОстатками.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Комитент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Комиссионер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеДляВозврата
	|ИЗ
	|	ДанныеПоОССОстатками КАК ДанныеПоОССОстатками";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПечатьПереводОСВМалоценноеОборудование(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереводОСВМалоценноеОборудование";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВременныеТаблицыРегистров(МВТ, МассивОбъектов);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ПереводОСВМалоценноеОборудованиеТекстЗапроса();
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПереводОСВМалоценноеОборудование.ПФ_MXL_ПереводОСВМалоценноеОборудование");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Вывод заголовка
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ВыборкаДокументов,
			НСтр("ru='Перевод основных средств
			|в малоценное оборудование'"));
		Область.Параметры.Заполнить(ВыборкаДокументов);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаДокументов.Организация, ВыборкаДокументов.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		Область.Параметры.Организация = ПредставлениеОрганизации;
		ТабДокумент.Вывести(Область);
		
		// Вывод шапки таблицы
		ОбластьОсновноеСредство = Макет.ПолучитьОбласть("ШапкаТаблицы|ОсновноеСредство");
		ОбластьКолонкаКод  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКод");
		ОбластьНоменклатура = Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
		ОбластьКолонкаСтоимость = Макет.ПолучитьОбласть("ШапкаТаблицы|Стоимость");
		ТабДокумент.Вывести(ОбластьОсновноеСредство);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКолонкаКод.Параметры.ИмяКолонкиКодов = НСтр("ru='Артикул'");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКолонкаКод.Параметры.ИмяКолонкиКодов = НСтр("ru='Код'");
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКолонкаКод);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьНоменклатура);
		ТабДокумент.Присоединить(ОбластьКолонкаСтоимость);
		
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаНоменклатура = Макет.Область("Номенклатура");
			ОбластьКолонкаНоменклатура.ШиринаКолонки = ОбластьКолонкаНоменклатура.ШиринаКолонки + Макет.Область("КолонкаКод").ШиринаКолонки;
		КонецЕсли;
		
		Итого = 0;
		
		// Вывод строк таблицы
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаСтрок.Следующий() Цикл
			ОбластьОсновноеСредство = Макет.ПолучитьОбласть("Строка|ОсновноеСредство");
			ОбластьКолонкаКод  = Макет.ПолучитьОбласть("Строка|КолонкаКод");
			ОбластьНоменклатура = Макет.ПолучитьОбласть("Строка|Номенклатура");
			ОбластьКолонкаСтоимость = Макет.ПолучитьОбласть("Строка|Стоимость");
			
			ОбластьОсновноеСредство.Параметры.Заполнить(ВыборкаСтрок);
			ТабДокумент.Вывести(ОбластьОсновноеСредство);
			
			Если ВыводитьКоды Тогда
				ОбластьКолонкаКод.Параметры.Заполнить(ВыборкаСтрок);
				ТабДокумент.Присоединить(ОбластьКолонкаКод);
			КонецЕсли;
			
			ОбластьНоменклатура.Параметры.Заполнить(ВыборкаСтрок);
			Сотрудник = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаСтрок.Сотрудник);
			ОбластьНоменклатура.Параметры.Сотрудник = Сотрудник;
			ТабДокумент.Присоединить(ОбластьНоменклатура);
			
			ОбластьКолонкаСтоимость.Параметры.Заполнить(ВыборкаСтрок);
			ТабДокумент.Присоединить(ОбластьКолонкаСтоимость);
			
			Итого = Итого + ВыборкаСтрок.Стоимость;
		КонецЦикла;
		
		// Вывод подвала
		ОбластьОсновноеСредство = Макет.ПолучитьОбласть("Подвал|ОсновноеСредство");
		ОбластьКолонкаКод  = Макет.ПолучитьОбласть("Подвал|КолонкаКод");
		ОбластьНоменклатура = Макет.ПолучитьОбласть("Подвал|Номенклатура");
		ОбластьКолонкаСтоимость = Макет.ПолучитьОбласть("Подвал|Стоимость");
		ТабДокумент.Вывести(ОбластьОсновноеСредство);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКолонкаКод);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьНоменклатура);
		ОбластьКолонкаСтоимость.Параметры.Итого = Итого;
		ТабДокумент.Присоединить(ОбластьКолонкаСтоимость);
		
		// Вывод пописи главного бухгалтера
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаДокументов.Организация,
			ВыборкаДокументов.Дата, ВыборкаДокументов.ПодразделениеОрганизации);
		Область = Макет.ПолучитьОбласть("ГлавныйБухгалтер");
		Область.Параметры.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		ТабДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПереводОСВМалоценноеОборудованиеТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка КАК Ссылка,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Номер КАК Номер,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата КАК Дата,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация КАК Организация,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПереводОСВМалоценноеОборудованиеОС.Ссылка.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПереводОСВМалоценноеОборудованиеОС.Ссылка.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ПереводОСВМалоценноеОборудованиеОС.Ссылка.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ПереводОСВМалоценноеОборудованиеОС.НомерСтроки КАК НомерСтроки,
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереводОСВМалоценноеОборудованиеОС.Сотрудник.ФИО КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПереводОСВМалоценноеОборудованиеОС.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ПереводОСВМалоценноеОборудованиеОС.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Код,
	|	ВЫБОР
	|		КОГДА ПереводОСВМалоценноеОборудованиеОС.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПереводОСВМалоценноеОборудованиеОС.Номенклатура.Наименование
	|		ИНАЧЕ ПереводОСВМалоценноеОборудованиеОС.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Номенклатура,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаОборот, 0) КАК Стоимость
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ПереводОСВМалоценноеОборудованиеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет КАК ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО (ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата МЕЖДУ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ДатаНачала И ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ДатаОкончания)
	|			И ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаБухгалтерскогоУчетаОС КАК ВТ_СчетаБухгалтерскогоУчетаОС
	|		ПО (ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата МЕЖДУ ВТ_СчетаБухгалтерскогоУчетаОС.ДатаНачала И ВТ_СчетаБухгалтерскогоУчетаОС.ДатаОкончания)
	|			И ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = ВТ_СчетаБухгалтерскогоУчетаОС.Организация
	|			И ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство = ВТ_СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьОС КАК ВТ_СтоимостьОС
	|		ПО ПереводОСВМалоценноеОборудованиеОС.Ссылка = ВТ_СтоимостьОС.Регистратор
	|			И (ВТ_СчетаБухгалтерскогоУчетаОС.СчетУчета = ВТ_СтоимостьОС.СчетКт)
	|			И ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство = ВТ_СтоимостьОС.СубконтоКт1
	|ГДЕ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка,
	|	ПереводОСВМалоценноеОборудованиеОС.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура создает временные "виртуальные" таблицы регистров сведений для дальнейшей работы с ними
//
// Параметры:
//  МВТ            - МенеджерВременныхТаблиц, где будут храниться временные таблицы
//  МассивОбъектов - Массив документов
//
Процедура СоздатьВременныеТаблицыРегистров(МВТ, МассивОбъектов)

	// 1. Определим "границы" регистров сведений - список организаций, ОС, период, ...
	//    чтобы ограничить выборку из регистров сведений
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|// 1. Период дат
	|ВЫБРАТЬ
	|	МИНИМУМ(Док.Дата)  КАК ДатаОТ,
	|	МАКСИМУМ(Док.Дата) КАК ДатаДО
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|;
	|
	|// 2. Список организаций
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Организация КАК Организация
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|;
	|
	|// 3. Список ОС
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивОбъектов)
	|
	|";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результат = Запрос.ВыполнитьПакет();
	// 1.1. Интервал дат
	Выборка = Результат[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
	Выборка.Следующий();
	ДатаОТ = Выборка.ДатаОТ;
	ДатаДО = Выборка.ДатаДО;

	// 1.2. Список организаций
	МассивОрганизаций = Результат[1].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Организация");

	// 1.3. Список ОС
	МассивОС = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ОсновноеСредство");

	// 2. Создание временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ДатаОТ",            ДатаОТ);
	Запрос.УстановитьПараметр("ДатаДО",            ДатаДО);
	Запрос.УстановитьПараметр("МассивОбъектов",    МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивОС",          МассивОС);
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// 1. Список ОС
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОС.Ссылка           КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	ВТ_ВсеОС
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка В (&МассивОбъектов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 2. Первоначальные сведения ОС
	|
	|// 2.1. Временный подзапрос, получение интервалов дат
	|ВЫБРАТЬ
	|	Рег1.Период           КАК Период,
	|	Рег1.Организация      КАК Организация,
	|	МИНИМУМ(Рег2.Период)  КАК ПервыйПериод,
	|	Рег1.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет_Рег2
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег2
	|	ПО
	|		Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|		И Рег1.Период         < Рег2.Период
	|ГДЕ
	|	Рег1.Период <= &ДатаДО
	|	И Рег1.ОсновноеСредство В (&МассивОС)
	|	И Рег2.Период <= &ДатаДО
	|	И Рег2.ОсновноеСредство В (&МассивОС)
	|СГРУППИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.Организация,
	|	Рег1.ОсновноеСредство
	|ИНДЕКСИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.Организация,
	|	Рег1.ОсновноеСредство
	|;
	|
	|// 2.2. Запрос к первоначальным сведениям ОС
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Рег2.ПервыйПериод ЕСТЬ NULL ТОГДА
	|			ДАТАВРЕМЯ(3999,12,31)
	|		ИНАЧЕ
	|			ДОБАВИТЬКДАТЕ(Рег2.ПервыйПериод, СЕКУНДА, -1)
	|	КОНЕЦ                            КАК ДатаОкончания,
	|	Рег1.Период                      КАК ДатаНачала,
	|	Рег1.ОсновноеСредство            КАК ОсновноеСредство,
	|	Рег1.Организация                 КАК Организация,
	|	Рег1.ИнвентарныйНомер            КАК ИнвентарныйНомер,
	|	Рег1.СпособПоступления           КАК СпособПоступления,
	|	Рег1.ПервоначальнаяСтоимость     КАК ПервоначальнаяСтоимость,
	|	Рег1.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	Рег1.ПараметрВыработки           КАК ПараметрВыработки,
	|	Рег1.ПорядокПогашенияСтоимости   КАК ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Рег1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет_Рег2 КАК Рег2
	|	ПО
	|		Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|		И Рег1.Период         = Рег2.Период
	|ГДЕ
	|	Рег1.Период <= &ДатаДО
	|	И Рег1.ОсновноеСредство В (&МассивОС)
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 3. Счета бухгалтерского учета ОС
	|
	|// 3.1. Временный подзапрос, получение интервалов дат
	|ВЫБРАТЬ
	|	Рег1.Период           КАК Период,
	|	МИНИМУМ(Рег2.Период)  КАК ПервыйПериод,
	|	Рег1.Организация      КАК Организация,
	|	Рег1.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	ВТ_СчетаБухгалтерскогоУчетаОС_Рег2
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег2
	|	ПО
	|		Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|		И Рег1.Организация    = Рег2.Организация
	|		И Рег1.Период         < Рег2.Период
	|ГДЕ
	|	Рег1.Период <= &ДатаДО
	|	И Рег1.Организация В (&МассивОрганизаций)
	|	И Рег1.ОсновноеСредство В (&МассивОС)
	|	И Рег2.Период <= &ДатаДО
	|	И Рег2.Организация В (&МассивОрганизаций)
	|	И Рег2.ОсновноеСредство В (&МассивОС)
	|СГРУППИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.Организация,
	|	Рег1.ОсновноеСредство
	|ИНДЕКСИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.Организация,
	|	Рег1.ОсновноеСредство
	|;
	|
	|// 3.2. Запрос к счетам бухгалтерского учета ОС
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Рег2.ПервыйПериод ЕСТЬ NULL ТОГДА
	|			ДАТАВРЕМЯ(3999,12,31)
	|		ИНАЧЕ
	|			ДОБАВИТЬКДАТЕ(Рег2.ПервыйПериод, СЕКУНДА, -1)
	|	КОНЕЦ                          КАК ДатаОкончания,
	|	Рег1.Период                    КАК ДатаНачала,
	|	Рег1.Организация               КАК Организация,
	|	Рег1.ОсновноеСредство          КАК ОсновноеСредство,
	|	Рег1.СчетУчета                 КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетНачисленияИзноса,
	|	Рег1.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	Рег1.СчетНачисленияАмортизации КАК СчетНачисленияИзносаАмортизации
	|ПОМЕСТИТЬ
	|	ВТ_СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТ_СчетаБухгалтерскогоУчетаОС_Рег2 КАК Рег2
	|	ПО
	|		Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|		И Рег1.Организация    = Рег2.Организация
	|		И Рег1.Период         = Рег2.Период
	|ГДЕ
	|	Рег1.Период <= &ДатаДО
	|	И Рег1.Организация В (&МассивОрганизаций)
	|	И Рег1.ОсновноеСредство В (&МассивОС)
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания,
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 4. СтоимостьОС, итоги по каждому документу
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.СчетКт      КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ
	|	ВТ_СтоимостьОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		ДОБАВИТЬКДАТЕ(&ДатаОТ, СЕКУНДА, -1),
	|		ДОБАВИТЬКДАТЕ(&ДатаДО, СЕКУНДА, 1),
	|		Регистратор,
	|		СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
	|		,
	|		,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|		Организация В (&МассивОрганизаций)
	|	) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.Регистратор В (&МассивОбъектов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	СчетКт,
	|	СубконтоКт1
	|;
	|
	|";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ПереместитьДвиженияВРегламентнуюОперацию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	ОбработаноДокументов = 0;
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Дата,
	|	МАКСИМУМ(РегламентнаяОперация.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ РегламентнаяОперацияАмортизация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И РегламентнаяОперация.Дата = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД)
	|	И ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация,
	|	РегламентнаяОперация.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Дата,
	|	МАКСИМУМ(РегламентнаяОперация.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ РегламентнаяОперацияПереводОСВМалоценноеОборудование
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И РегламентнаяОперация.Дата = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД)
	|	И ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация,
	|	РегламентнаяОперация.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудование.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудование.Дата, ДЕНЬ) КАК Дата,
	|	ПереводОСВМалоценноеОборудование.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПереводОСВМалоценноеОборудование
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование КАК ПереводОСВМалоценноеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО ПереводОСВМалоценноеОборудование.Организация = ПрименениеФСБУ6.Организация
	|ГДЕ
	|	ПереводОСВМалоценноеОборудование.Проведен
	|	И НЕ ПереводОСВМалоценноеОборудование.РучнаяКорректировка
	|	И ПереводОСВМалоценноеОборудование.Дата МЕЖДУ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудование.Дата, ГОД), ДЕНЬ) И КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудование.Дата, ГОД)
	|	И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудование.Дата, ДЕНЬ), СЕКУНДА, 1) >= ПрименениеФСБУ6.ДатаНачалаПрименения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудование.Организация КАК Организация,
	|	ПереводОСВМалоценноеОборудование.Дата КАК Дата,
	|	ПереводОСВМалоценноеОборудование.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РегламентнаяОперацияАмортизация.Ссылка, ЗНАЧЕНИЕ(Документ.РегламентнаяОперация.ПустаяСсылка)) КАК РегламентнаяОперацияАмортизация,
	|	ЕСТЬNULL(РегламентнаяОперацияАмортизация.Ссылка.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировкаРегламентнойОперацииАмортизация,
	|	ЕСТЬNULL(РегламентнаяОперацияПереводОСВМалоценноеОборудование.Ссылка, ЗНАЧЕНИЕ(Документ.РегламентнаяОперация.ПустаяСсылка)) КАК РегламентнаяОперацияПереводОСВМалоценноеОборудование
	|ИЗ
	|	ПереводОСВМалоценноеОборудование КАК ПереводОСВМалоценноеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегламентнаяОперацияАмортизация КАК РегламентнаяОперацияАмортизация
	|		ПО ПереводОСВМалоценноеОборудование.Организация = РегламентнаяОперацияАмортизация.Организация
	|			И ПереводОСВМалоценноеОборудование.Дата = РегламентнаяОперацияАмортизация.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегламентнаяОперацияПереводОСВМалоценноеОборудование КАК РегламентнаяОперацияПереводОСВМалоценноеОборудование
	|		ПО ПереводОСВМалоценноеОборудование.Организация = РегламентнаяОперацияПереводОСВМалоценноеОборудование.Организация
	|			И ПереводОСВМалоценноеОборудование.Дата = РегламентнаяОперацияПереводОСВМалоценноеОборудование.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПереводОСВМалоценноеОборудование.Дата
	|ИТОГИ ПО
	|	Организация,
	|	Дата";
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоДате = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДате.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				ОперацияПереводВМЦСсылка = Неопределено;
				ОперацияПереводВМЦ = Неопределено;
				ПроводкиНовойОперацииПереводВМЦ = Неопределено;
				НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ = Неопределено;
				НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ = Неопределено;
				НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ = Неопределено;
				НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ = Неопределено;
				НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ = Неопределено;
				
				ОперацияАмортизацияОССсылка = Неопределено;
				НоваяОперацияАмортизацияОС = Неопределено;
				ПроводкиОперацииАмортизацияОС = Неопределено;
				НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС = Неопределено;
				
				ИзмененияДокументовПереводВМЦ = Новый Массив;
				
				ВыборкаПоДокументам = ВыборкаПоДате.Выбрать();
				
				Пока ВыборкаПоДокументам.Следующий() Цикл
					
					// Инициализация новой рег. операции "Перевод ОС в малоценное оборудование"
					Если ОперацияПереводВМЦ = Неопределено Тогда
						ОперацияПереводВМЦСсылка = ВыборкаПоДокументам.РегламентнаяОперацияПереводОСВМалоценноеОборудование;
						Если НЕ ОперацияПереводВМЦСсылка.Пустая() Тогда
							ОперацияПереводВМЦ = ОперацияПереводВМЦСсылка.ПолучитьОбъект();
						Иначе
							НоваяСсылка = Документы.РегламентнаяОперация.ПолучитьСсылку();
							ОперацияПереводВМЦ = Документы.РегламентнаяОперация.СоздатьДокумент();
							ОперацияПереводВМЦ.УстановитьСсылкуНового(НоваяСсылка);
							ОперацияПереводВМЦ.Дата = КонецДня(ВыборкаПоДате.Дата);
							ОперацияПереводВМЦ.Организация = ВыборкаПоОрганизации.Организация;
							ОперацияПереводВМЦ.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование;
							ОперацияПереводВМЦ.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
							ОперацияПереводВМЦ.УстановитьНовыйНомер();
							ОперацияПереводВМЦСсылка = ОперацияПереводВМЦ.ПолучитьСсылкуНового();
						КонецЕсли;
						
						ПроводкиНовойОперацииПереводВМЦ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
						ПроводкиНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						ПроводкиНовойОперацииПереводВМЦ.Прочитать();
						
						НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ = РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей();
						НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ.Прочитать();
						
						НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ = РегистрыСведений.НачислениеАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей();
						НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ.Прочитать();
						
						НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ = РегистрыСведений.РасчетРасходовПоАренде.СоздатьНаборЗаписей();
						НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ.Прочитать();
						
						НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ = РегистрыСведений.СобытияОСОрганизаций.СоздатьНаборЗаписей();
						НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ.Прочитать();
						
						НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ = РегистрыСведений.СостоянияОСОрганизаций.СоздатьНаборЗаписей();
						НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦСсылка);
						НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ.Прочитать();
					КонецЕсли;
					
					// Перенос проводок
					Если ОперацияАмортизацияОССсылка = Неопределено Тогда
						Если НЕ ВыборкаПоДокументам.РегламентнаяОперацияАмортизация.Пустая() Тогда
							ОперацияАмортизацияОССсылка = ВыборкаПоДокументам.РегламентнаяОперацияАмортизация;
						ИначеЕсли НоваяОперацияАмортизацияОС = Неопределено Тогда
							// создается новая регл. операция "Амортизация и износ ОС" для переноса движений
							НоваяСсылка = Документы.РегламентнаяОперация.ПолучитьСсылку();
							НоваяОперацияАмортизацияОС = Документы.РегламентнаяОперация.СоздатьДокумент();
							НоваяОперацияАмортизацияОС.УстановитьСсылкуНового(НоваяСсылка);
							НоваяОперацияАмортизацияОС.Дата = КонецДня(ВыборкаПоДате.Дата);
							НоваяОперацияАмортизацияОС.Организация = ВыборкаПоОрганизации.Организация;
							НоваяОперацияАмортизацияОС.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС;
							НоваяОперацияАмортизацияОС.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
							НоваяОперацияАмортизацияОС.УстановитьНовыйНомер();
							ОперацияАмортизацияОССсылка = НоваяОперацияАмортизацияОС.ПолучитьСсылкуНового();
						КонецЕсли;
					КонецЕсли;
					
					Если ПроводкиОперацииАмортизацияОС = Неопределено Тогда
						ПроводкиОперацииАмортизацияОС = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
						ПроводкиОперацииАмортизацияОС.Отбор.Регистратор.Установить(ОперацияАмортизацияОССсылка);
						ПроводкиОперацииАмортизацияОС.Прочитать();
					КонецЕсли;
					
					Если НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС = Неопределено Тогда
						НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
						НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС.Отбор.Регистратор.Установить(ОперацияАмортизацияОССсылка);
						НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС.Прочитать();
					КонецЕсли;
					
					ПроводкиДокументаПереводВМЦ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
					ПроводкиДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					ПроводкиДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(ПроводкиДокументаПереводВМЦ);
					
					Для каждого ПроводкаДокумента Из ПроводкиДокументаПереводВМЦ Цикл
						
						Если ПроводкаДокумента.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеОС
							ИЛИ ПроводкаДокумента.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМЦ
							ИЛИ ПроводкаДокумента.СчетДт = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации
							ИЛИ ПроводкаДокумента.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС
							ИЛИ ПроводкаДокумента.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМЦ Тогда
							
							ПроводкаОперации = ПроводкиНовойОперацииПереводВМЦ.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаОперации, ПроводкаДокумента);
							ПроводкаОперации.Период = КонецДня(ПроводкаДокумента.Период);
							ПроводкаОперации.УточнениеПериода = БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода();
							Для каждого СтароеСубконтоДт Из ПроводкаДокумента.СубконтоДт Цикл
								ПроводкаОперации.СубконтоДт.Вставить(СтароеСубконтоДт.Ключ, СтароеСубконтоДт.Значение);
							КонецЦикла;
							Для каждого СтароеСубконтоКт Из ПроводкаДокумента.СубконтоКт Цикл
								ПроводкаОперации.СубконтоКт.Вставить(СтароеСубконтоКт.Ключ, СтароеСубконтоКт.Значение);
							КонецЦикла;
							
						Иначе // проводки по начислению амортизации
							
							ПроводкаОперации = ПроводкиОперацииАмортизацияОС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаОперации, ПроводкаДокумента);
							ПроводкаОперации.Период = КонецДня(ПроводкаДокумента.Период);
							Для каждого СтароеСубконтоДт Из ПроводкаДокумента.СубконтоДт Цикл
								ПроводкаОперации.СубконтоДт.Вставить(СтароеСубконтоДт.Ключ, СтароеСубконтоДт.Значение);
							КонецЦикла;
							Для каждого СтароеСубконтоКт Из ПроводкаДокумента.СубконтоКт Цикл
								ПроводкаОперации.СубконтоКт.Вставить(СтароеСубконтоКт.Ключ, СтароеСубконтоКт.Значение);
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ПроводкиДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра сведений "Расчет амортизации"
					НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
					НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.РасчетАмортизации);
					
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = ЗаписьОперации;
					КонецЦикла;
					
					ЗаписиКУдалению = Новый Соответствие;
					Для каждого ЗаписьДокумента Из НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						ЗаписьОперации = ИндексЗаписейОперации[Ключ];
						Если ЗаписьОперации <> Неопределено Тогда
							Если ВыборкаПоДокументам.РучнаяКорректировкаРегламентнойОперацииАмортизация Тогда
								Продолжить;
							Иначе
								ЗаписиКУдалению.Вставить(ЗаписьОперации);
							КонецЕсли;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						СтрокаНабораОперации.Период = КонецДня(ЗаписьДокумента.Период);
						СтрокаНабораОперации.ПериодРасчета = КонецДня(ЗаписьДокумента.ПериодРасчета);
					КонецЦикла;
					
					Для каждого Элемент Из ЗаписиКУдалению Цикл
						НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС.Удалить(Элемент.Ключ);
					КонецЦикла;
					
					НаборЗаписейРасчетАмортизацииДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра "Начисление амортизации ОС (бухгалтерский учет)"
					НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ = РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей();
					НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет);
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = Истина;
					КонецЦикла;
					
					Для каждого ЗаписьДокумента Из НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						Если ИндексЗаписейОперации[Ключ] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						
						СтрокаНабораОперации.Период = КонецДня(СтрокаНабораОперации.Период);
					КонецЦикла;
					
					НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра "Начисление амортизации ОС (налоговый учет)"
					НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ = РегистрыСведений.НачислениеАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей();
					НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.НачислениеАмортизацииОСНалоговыйУчет);
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = Истина;
					КонецЦикла;
					
					Для каждого ЗаписьДокумента Из НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						Если ИндексЗаписейОперации[Ключ] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						
						СтрокаНабораОперации.Период = КонецДня(СтрокаНабораОперации.Период);
					КонецЦикла;
					
					НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра "Расчет расходов по аренде"
					НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ = РегистрыСведений.РасчетРасходовПоАренде.СоздатьНаборЗаписей();
					НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.РасчетРасходаМатериаловПоДаннымПродаж);
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = Истина;
					КонецЦикла;
					
					Для каждого ЗаписьДокумента Из НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						Если ИндексЗаписейОперации[Ключ] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						
						СтрокаНабораОперации.Период = КонецДня(СтрокаНабораОперации.Период);
					КонецЦикла;
					
					НаборЗаписейРасчетРасходовПоАрендеДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра "События ОС организаций"
					НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ = РегистрыСведений.СобытияОСОрганизаций.СоздатьНаборЗаписей();
					НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.СобытияОСОрганизаций);
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = Истина;
					КонецЦикла;
					
					Для каждого ЗаписьДокумента Из НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						Если ИндексЗаписейОперации[Ключ] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						
						СтрокаНабораОперации.Период = КонецДня(СтрокаНабораОперации.Период);
					КонецЦикла;
					
					НаборЗаписейСобытияОСОрганизацийДокументаПереводВМЦ.Очистить();
					
					// Перенос записей регистра "Состояния ОС организаций"
					НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ = РегистрыСведений.СостоянияОСОрганизаций.СоздатьНаборЗаписей();
					НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
					НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ.Прочитать();
					ИзмененияДокументовПереводВМЦ.Добавить(НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ);
					
					КлючевыеИзмерения = КлючевыеИзмеренияРегистраСведений(Метаданные.РегистрыСведений.СостоянияОСОрганизаций);
					ИндексЗаписейОперации = Новый Соответствие;
					Для каждого ЗаписьОперации Из НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьОперации, КлючевыеИзмерения);
						ИндексЗаписейОперации[Ключ] = Истина;
					КонецЦикла;
					
					Для каждого ЗаписьДокумента Из НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ Цикл
						Ключ = КлючИзмерений(ЗаписьДокумента, КлючевыеИзмерения);
						Если ИндексЗаписейОперации[Ключ] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаНабораОперации = НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораОперации, ЗаписьДокумента);
						
						СтрокаНабораОперации.Период = КонецДня(СтрокаНабораОперации.Период);
						СтрокаНабораОперации.ДатаСостояния = КонецДня(СтрокаНабораОперации.ДатаСостояния);
					КонецЦикла;
					
					НаборЗаписейСостоянияОСОрганизацийДокументаПереводВМЦ.Очистить();
					
					// Приведение времени документа
					ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
					ИзмененияДокументовПереводВМЦ.Добавить(ДокументОбъект);
					
				КонецЦикла;
				
				Если ОперацияПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОперацияПереводВМЦ);
				КонецЕсли;
				Если ПроводкиНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиНовойОперацииПереводВМЦ);
				КонецЕсли;
				Если НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНачислениеАмортизацииОСБухгалтерскийУчетНовойОперацииПереводВМЦ);
				КонецЕсли;
				Если НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНачислениеАмортизацииОСНалоговыйУчетНовойОперацииПереводВМЦ);
				КонецЕсли;
				Если НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРасчетРасходовПоАрендеНовойОперацииПереводВМЦ);
				КонецЕсли;
				Если НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейСобытияОСОрганизацийНовойОперацииПереводВМЦ);
				КонецЕсли;
				Если НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейСостоянияОСОрганизацийНовойОперацииПереводВМЦ);
				КонецЕсли;
				
				Если НоваяОперацияАмортизацияОС <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперацияАмортизацияОС);
				КонецЕсли;
				
				Если ПроводкиОперацииАмортизацияОС <> Неопределено
					И ПроводкиОперацииАмортизацияОС.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиОперацииАмортизацияОС);
				КонецЕсли;
				
				Если НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС <> Неопределено
					И НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборДвиженийРасчетАмортизацииОперацииАмортизацияОС);
				КонецЕсли;
				
				Для каждого НаборДвиженийДокумента Из ИзмененияДокументовПереводВМЦ Цикл
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборДвиженийДокумента);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
				ОбработаноДокументов = ОбработаноДокументов + 1;
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ШаблонСообщения = НСтр("ru = 'Не обработан документ ""%1""
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПоДокументам.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.РегламентнаяОперация,,
					ТекстСообщения);
				
				Параметры.ОбработкаЗавершена = Ложь;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ Параметры.ОбработкаЗавершена И ОбработаноДокументов = 0 Тогда
		ВызватьИсключение НСтр("ru='При переносе проводок документа ""Перевод ОС в малоценное оборудование"" в регламентную операцию возникли ошибки. Подробности в журнале регистрации.'");
	КонецЕсли;
	
КонецПроцедуры

Функция КлючИзмерений(Запись, Измерения)
	
	ЭлементыКлюча = Новый Массив;
	
	Для каждого ИмяИзмерения Из СтрРазделить(Измерения, ",") Цикл
		ЗначениеИзмерения = Запись[СокрЛП(ИмяИзмерения)];
		Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
			ЭлементыКлюча.Добавить(ИмяИзмерения);
			ЭлементыКлюча.Добавить(XMLСтрока(ЗначениеИзмерения));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыКлюча, "");
	
КонецФункции

Функция КлючевыеИзмеренияРегистраСведений(РегистрСведений)
	
	МассивИзмерений = Новый Массив;
	Для каждого Измерение Из РегистрСведений.Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	КлючевыеИзмерения = СтрСоединить(МассивИзмерений, ",");
	
	Возврат КлючевыеИзмерения;
	
КонецФункции

#КонецОбласти

#КонецЕсли