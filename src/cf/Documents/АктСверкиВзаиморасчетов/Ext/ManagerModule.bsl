#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает время документа по умолчанию.
// Требуется если пользователь используется опцию:
// "Время документов устанавливать автоматически".
//
// Возвращаемое значение:
//    Структура - Структура с ключами "Часы" и "Минуты".
//
Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 20, 0);
	
КонецФункции

// Процедура подготавливает данные для табличных частей
// ПоДаннымОрганизации и ПоДаннымКонтрагента.
// 
// Параметры:
//    СтруктураПараметров - Структура - Структура с параметрами для заполнения.
//    АдресХранилища - Строка - Адрес во временном хранилище, куда будет помещен результат выполнения процедуры.
//
Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанныхЗаполнения = Новый Структура();
	СтруктураДанныхЗаполнения.Вставить("Успешно", Ложь);
	
	Если НЕ ПроверитьОтложенныеРасчеты(СтруктураПараметров) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Подготовим переменные
	СчетаИсключения             = СчетаИсключения();
	ТаблицаПоДаннымОрганизации = НовыйТаблицаДокументов();
	КэшМетаданных              = Новый Соответствие; // Используется для получения представления документов
	Запрос = ПодготовитьЗапрос(СтруктураПараметров, СчетаИсключения);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЭтоЭлектронныйДокумент = Ложь;
	Если СтруктураПараметров.Свойство("ЭтоЭлектронныйДокумент") Тогда
		ЭтоЭлектронныйДокумент = СтруктураПараметров.ЭтоЭлектронныйДокумент;
	КонецЕсли;
	
	// Остаток на начало
	ВыборкаОстатокНаНачало = РезультатЗапроса[1].Выбрать();
	ВыборкаОстатокНаНачало.Следующий();
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", ВыборкаОстатокНаНачало.ОстатокНаНачало);
	
	// Первоначальное заполнение таблицы по данным организации
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		РеквизитыДокумента = РеквизитыДокумента(
			СтруктураПараметров,
			Выборка,
			КэшМетаданных,
			СчетаИсключения);
			
		Если РеквизитыДокумента.НомерДокумента = "" Тогда
			ТекстПередДатой = "";
		Иначе
			ТекстПередДатой = " " + НСтр("ru='от'") + " ";
		КонецЕсли;
		
		ДатаДокументаТекст = ТекстПередДатой + Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=D; ДП='  .  .    '");
		
		НоваяСтрока.Представление  = СтрШаблон("%1 (%2%3)",
			РеквизитыДокумента.Представление,
			РеквизитыДокумента.НомерДокумента,
			ДатаДокументаТекст);
			
		Если ЭтоЭлектронныйДокумент Тогда
			Если РеквизитыДокумента.НомерДокумента = "" Тогда
				НоваяСтрока.НомерДокумента = НСтр("ru='б/н'");
			Иначе
				НоваяСтрока.НомерДокумента = РеквизитыДокумента.НомерДокумента;
			КонецЕсли;
			НоваяСтрока.ДатаДокумента  = РеквизитыДокумента.ДатаДокумента;
			НоваяСтрока.НаименованиеДокумента = Строка(ТипЗнч(Выборка.Документ));
			НоваяСтрока.НаименованиеОперации = РеквизитыДокумента.НаименованиеОперации;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополним таблицу валютной суммой
	ДополнитьТаблицуВалютнойСуммой(ТаблицаПоДаннымОрганизации, СтруктураПараметров);
	
	// Дополним таблицу счетами-фактурами
	ДополнитьТаблицуСчетамиФактурами(ТаблицаПоДаннымОрганизации, СтруктураПараметров);
	
	// Сортируем таблицу
	КолонкиДляСортировки = ?(СтруктураПараметров.РазбитьПоДоговорам, 
		"Договор, Дата, Документ, Представление, НомерДокумента, ДатаДокумента, НаименованиеДокумента, НаименованиеОперации",
		"Дата, Документ, Представление, Договор, НомерДокумента, ДатаДокумента, НаименованиеДокумента, НаименованиеОперации");
	ТаблицаПоДаннымОрганизации.Сортировать(КолонкиДляСортировки, Новый СравнениеЗначений);
	
	// Заполним возвращаемую структуру
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	Если СтруктураПараметров.ЗаполнятьДанныеКонтрагента Тогда
		СтруктураДанныхЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации));
	КонецЕсли;
	СтруктураДанныхЗаполнения.Успешно = Истина;
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает представителя организации
// 
// Параметры:
//    Организация - Справочник.Организации - Организация, по которой требуется получить представителя.
//    Дата - Дата - Дата, на которую требуется получить представителя.
//
// Возвращаемое значение:
//    ПредставительОрганизации - Справочник.ФизическоеЛицо - Представитель организации.
//
Функция ПредставительОрганизации(Организация, Дата) Экспорт
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, Дата);
	ДанныеУполномоченногоЛица = ОтветственныеЛицаБП.ДанныеУполномоченногоЛица(
		Организация, Пользователи.ТекущийПользователь());
	
	Если НЕ ЗначениеЗаполнено(ДанныеУполномоченногоЛица.Руководитель)
		ИЛИ ДанныеУполномоченногоЛица.Руководитель = ОтветственныеЛица.Руководитель Тогда
		ПредставительОрганизации = ОтветственныеЛица.Руководитель;
	Иначе
		ПредставительОрганизации = ДанныеУполномоченногоЛица.Руководитель;
	КонецЕсли;
	
	Возврат ПредставительОрганизации;
	
КонецФункции

// Функция возвращает соответствие представлений по данным контрагентам
// Используется для формирования таблицы ПоДаннымКонтрагента.
// 
// Возвращаемое значение:
//    СоответствиеПредставлений - Соответствие.
//
Функция СоответствиеПредставленийПоДаннымКонтрагента() Экспорт
	
	СоответствиеПредставлений = Новый Соответствие;
	СоответствиеПредставлений.Вставить(НСтр("ru='Передано'"),              НСтр("ru='Принято'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Принято'"),               НСтр("ru='Передано'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Продажа'"),               НСтр("ru='Приход'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Приход'"),                НСтр("ru='Продажа'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Корректировка продажи'"), НСтр("ru='Корректировка прихода'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Корректировка прихода'"), НСтр("ru='Корректировка продажи'"));
	СоответствиеПредставлений.Вставить(НСтр("ru='Поступление'"),           НСтр("ru='Передача'"));
	
	Возврат СоответствиеПредставлений;
	
КонецФункции

// Функция возвращает состояние сверки - согласована или нет, в зависимости от того подписан документ или не подписан.
// 
// Параметры:
//    Организация - Справочник.Организации - Организация, по которой составлен документ.
//    Ссылка- Документ.АктСверкиВзаиморасчетов - ссылка на проверяемый документ.
//
// Возвращаемое значение:
//    Булево - Истина если сверка согласована, Ложь, если не согласована.
//
Функция СверкаСогласована(Организация, Ссылка) Экспорт
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовРеализации.Подписан);
		
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки.
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "АктСверки";
	КомандаОтправки.Представление = НСтр("ru = 'Акт сверки'");
	КомандаОтправки.Порядок = 10;
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ПисьмоОбОплатеЗадолженности";
	КомандаОтправки.Представление = НСтр("ru = 'Письмо об оплате задолженности'");
	КомандаОтправки.Порядок = 20;

	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "КонтрольНаличияДокументов";
	КомандаОтправки.Представление = НСтр("ru = 'Контроль наличия документов'");
	КомандаОтправки.Порядок = 30;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать акта сверки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПисьмоОбОплатеЗадолженности";
	КомандаПечати.Представление = НСтр("ru = 'Письмо об оплате задолженности'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Письмо об оплате задолженности'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		// Печать конвертов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Конверт";
		КомандаПечати.Представление = НСтр("ru = 'Конверт'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКонверта";
		КомандаПечати.Порядок       = 30;
	КонецЕсли;
	
	// Печать контроля наличия документов	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КонтрольНаличияДокументов";
	КомандаПечати.Представление = НСтр("ru = 'Контроль наличия документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Контроль наличия документов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 40;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСверки", НСтр("ru = 'Акт сверки взаиморасчетов'"),
			ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КонтрольНаличияДокументов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КонтрольНаличияДокументов", НСтр("ru = 'Контроль наличия документов'"),
			ПечатьКонтрольНаличияДокументов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.АктСверкиВзаиморасчетов.ПФ_MXL_КонтрольНаличияДокументов");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПисьмоОбОплатеЗадолженности") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПисьмоОбОплатеЗадолженности",
			НСтр("ru = 'Письмо об оплате задолженности'"),
			ПечатьПисьмаОбОплатеЗадолженности(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.АктСверкиВзаиморасчетов.ПФ_MXL_ПисьмоОбОплатеЗадолженности");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеОтправителя() Экспорт
	
	Возврат 
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Номер КАК Номер,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Валюты.Код, ""643"") КАК КодВалюты
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО АктСверкиВзаиморасчетов.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет) КАК Дебет,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит) КАК Кредит
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор КАК Договор,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит КАК СуммаКредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеДокумента КАК НаименованиеДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)) КАК ВидДоговора
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	Договор";
	
КонецФункции

Функция ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеПолучателя() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.НеПодписан)) = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.Подписан) КАК СверкаСогласована
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = АктСверкиВзаиморасчетов.Ссылка)
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет) КАК Дебет,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит) КАК Кредит
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор КАК Договор,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит КАК СуммаКредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеДокумента КАК НаименованиеДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)) КАК ВидДоговора
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	Договор";
	
КонецФункции

Процедура ЗаполнитьАктСверкиПоДаннымИБ(Объект) Экспорт

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОсновноеКонтактноеЛицо");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ПредставительОрганизации = ПредставительОрганизации(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СтруктураПараметров.Вставить("ДатаНачала",                    Объект.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",                 Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация",                   Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("СОбособленнымиПодразделениями", Объект.СОбособленнымиПодразделениями);
	СтруктураПараметров.Вставить("ВыводитьСчетаФактуры",          Объект.ВыводитьСчетаФактуры);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    СверкаСогласована(Объект.Организация, Объект.Ссылка));
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СтруктураПараметров.Вставить("Валюта", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("Валюта", Объект.ВалютаДокумента);
	КонецЕсли;
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Иначе
		СтруктураПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ЭтоЭлектронныйДокумент", Объект.ЭтоЭлектронныйДокумент);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Объект.ОстатокНаНачало = 0;
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") 
		И СтруктураДанных.Успешно Тогда
		
		Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
		Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
		Если СверкаСогласована(Объект.Организация, Объект.Ссылка) Тогда
			Объект.ПоДаннымКонтрагента.Загрузить(СтруктураДанных.ПоДаннымКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьДанныеОрганизацииИКонтрагента(Объект) Экспорт
	
	Объект.Сверка.Очистить();
	
	ТаблицаСверка = Объект.Сверка.Выгрузить();
	ТаблицаСверка.Колонки.Добавить("НомерДляСортировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));

	// Сначала сопоставим строки, которые совпадают по всем реквизитам.
	ТаблицаПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Выгрузить();
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("НомерДляСортировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("НомерСтрокиПоДаннымОрганизации", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаПоДаннымКонтрагента = Объект.ПоДаннымКонтрагента.Выгрузить();
	ТаблицаПоДаннымКонтрагента.Колонки.Добавить("НомерСтрокиПоДаннымКонтрагента", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаПоДаннымКонтрагента.Колонки.Добавить("НаименованиеОперацииИнвертированное", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	
	ИнвертироватьНаименованиеОперации(ТаблицаПоДаннымКонтрагента);
	
	// Добавим начальное сальдо
	СтрокаРезультата = ТаблицаСверка.Добавить();
	СтрокаРезультата.СверяемыйДокумент = НСтр("ru='Сальдо начальное'");
	
	Если Объект.ОстатокНаНачало > 0 Тогда
		СтрокаРезультата.ДебетПоДаннымОрганизации  = Объект.ОстатокНаНачало;
		СтрокаРезультата.КредитПоДаннымОрганизации = 0;
	Иначе
		СтрокаРезультата.ДебетПоДаннымОрганизации  = 0;
		СтрокаРезультата.КредитПоДаннымОрганизации = - Объект.ОстатокНаНачало;
	КонецЕсли;
	
	Если Объект.ОстатокНаНачалоПоДаннымКонтрагента > 0 Тогда
		СтрокаРезультата.ДебетПоДаннымКонтрагента  = Объект.ОстатокНаНачалоПоДаннымКонтрагента;
		СтрокаРезультата.КредитПоДаннымКонтрагента = 0;
	Иначе
		СтрокаРезультата.ДебетПоДаннымКонтрагента  = 0;
		СтрокаРезультата.КредитПоДаннымКонтрагента = - Объект.ОстатокНаНачалоПоДаннымКонтрагента;
	КонецЕсли;
	
	СтрокаРезультата.ЕстьРасхождения = Объект.ОстатокНаНачало <> - Объект.ОстатокНаНачалоПоДаннымКонтрагента;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	Запрос.УстановитьПараметр("ТаблицаПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымОрганизации.Представление КАК Представление,
	|	ТаблицаПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТаблицаПоДаннымОрганизации.Кредит КАК Кредит,
	|	ТаблицаПоДаннымОрганизации.Договор КАК Договор,
	|	ТаблицаПоДаннымОрганизации.Документ КАК Документ,
	|	ТаблицаПоДаннымОрганизации.Дата КАК Дата,
	|	ТаблицаПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ТаблицаПервойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымОрганизации КАК ТаблицаПоДаннымОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента,
	|	ДатаДокумента,
	|	Дебет,
	|	Кредит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоДаннымКонтрагента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымКонтрагента.Представление КАК Представление,
	|	ТаблицаПоДаннымКонтрагента.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПоДаннымКонтрагента.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаПоДаннымКонтрагента.Дебет КАК Дебет,
	|	ТаблицаПоДаннымКонтрагента.Кредит КАК Кредит,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ТаблицаВторойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымКонтрагента КАК ТаблицаПоДаннымКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента,
	|	ДатаДокумента,
	|	Дебет,
	|	Кредит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПервойОрганизации.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаПервойОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПервойОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	СУММА(1) КАК КоличествоОдинаковыхСтрок,
	|	ТаблицаПервойОрганизации.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ДублиПервойОрганизацииПредвартельная
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|ГДЕ
	|	ТаблицаПервойОрганизации.НомерДокумента <> """"
	|	И ТаблицаПервойОрганизации.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПервойОрганизации.ДатаДокумента,
	|	ТаблицаПервойОрганизации.НомерДокумента,
	|	ТаблицаПервойОрганизации.НаименованиеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВторойОрганизации.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаВторойОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаВторойОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	СУММА(1) КАК КоличествоОдинаковыхСтрок,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное
	|ПОМЕСТИТЬ ДублиВторойОрганизацииПредвартельная
	|ИЗ
	|	ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|ГДЕ
	|	ТаблицаВторойОрганизации.НомерДокумента <> """"
	|	И ТаблицаВторойОрганизации.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВторойОрганизации.ДатаДокумента,
	|	ТаблицаВторойОрганизации.НомерДокумента,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиПервойОрганизацииПредвартельная.НомерСтроки КАК НомерСтроки,
	|	ДублиПервойОрганизацииПредвартельная.ДатаДокумента КАК ДатаДокумента,
	|	ДублиПервойОрганизацииПредвартельная.НомерДокумента КАК НомерДокумента,
	|	ДублиПервойОрганизацииПредвартельная.НаименованиеОперации КАК НаименованиеОперации
	|ИЗ
	|	ДублиПервойОрганизацииПредвартельная КАК ДублиПервойОрганизацииПредвартельная
	|ГДЕ
	|	ДублиПервойОрганизацииПредвартельная.КоличествоОдинаковыхСтрок > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиВторойОрганизацииПредвартельная.НомерСтроки КАК НомерСтроки,
	|	ДублиВторойОрганизацииПредвартельная.ДатаДокумента КАК ДатаДокумента,
	|	ДублиВторойОрганизацииПредвартельная.НомерДокумента КАК НомерДокумента,
	|	ДублиВторойОрганизацииПредвартельная.НаименованиеОперацииИнвертированное КАК НаименованиеОперации
	|ИЗ
	|	ДублиВторойОрганизацииПредвартельная КАК ДублиВторойОрганизацииПредвартельная
	|ГДЕ
	|	ДублиВторойОрганизацииПредвартельная.КоличествоОдинаковыхСтрок > 1";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МаксимальнаяПорцияДанныхНеТребующаяИндексации = 1000;
	МассивНомеровДублейПервойОрганизации = Новый Массив;
	Если Не РезультатЗапроса[4].Пустой() Тогда
		// Обработаем дубли первой организации.
		Отбор = Новый Структура("НомерДокумента, ДатаДокумента, НаименованиеОперации");
		Если ТаблицаПоДаннымОрганизации.Количество() > МаксимальнаяПорцияДанныхНеТребующаяИндексации Тогда
			// Добавим дополнительные индексы для поиска.
			ТаблицаПоДаннымОрганизации.Индексы.Добавить("НомерДокумента");
			ТаблицаПоДаннымОрганизации.Индексы.Добавить("ДатаДокумента");
			ТаблицаПоДаннымОрганизации.Индексы.Добавить("НаименованиеОперации");
		КонецЕсли;
		ТаблицаДублей = РезультатЗапроса[4].Выгрузить();
		Для Каждого СтрокаСДублем Из ТаблицаДублей Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСДублем);
			Отбор.НомерДокумента   = СокрЛП(Отбор.НомерДокумента);
			НайденныеСтроки = ТаблицаПоДаннымОрганизации.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
			ЭтоПерваяСтрока = Истина;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНомеровДублейПервойОрганизации.Добавить(НайденнаяСтрока.НомерСтроки);
				Если ЭтоПерваяСтрока = Истина Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					НоваяСтрока.НомерСтрокиПоДаннымОрганизации = Строка(НайденнаяСтрока.НомерСтроки);
					НоваяСтрока.НомерДляСортировки = Число(НайденнаяСтрока.НомерСтроки);
					ЭтоПерваяСтрока = Ложь;
					ТаблицаПоДаннымОрганизации.Удалить(НайденнаяСтрока);
					Продолжить;
				КонецЕсли;
				НоваяСтрока.НомерСтрокиПоДаннымОрганизации = Строка(НоваяСтрока.НомерСтрокиПоДаннымОрганизации) + ";" + Строка(НайденнаяСтрока.НомерСтроки);
				НоваяСтрока.Дебет  = НоваяСтрока.Дебет + НайденнаяСтрока.Дебет;
				НоваяСтрока.Кредит = НоваяСтрока.Кредит + НайденнаяСтрока.Кредит;
				ТаблицаПоДаннымОрганизации.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивНомеровДублейВторойОрганизации = Новый Массив;
	Если Не РезультатЗапроса[5].Пустой() Тогда
		// Обработаем дубли второй организации.
		Отбор = Новый Структура("НомерДокумента, ДатаДокумента, НаименованиеОперацииИнвертированное");
		Если ТаблицаПоДаннымКонтрагента.Количество() > МаксимальнаяПорцияДанныхНеТребующаяИндексации Тогда
			// Добавим дополнительные индексы для поиска.
			ТаблицаПоДаннымКонтрагента.Индексы.Добавить("НомерДокумента");
			ТаблицаПоДаннымКонтрагента.Индексы.Добавить("ДатаДокумента");
			ТаблицаПоДаннымКонтрагента.Индексы.Добавить("НаименованиеОперацииИнвертированное");
		КонецЕсли;
		ТаблицаДублей = РезультатЗапроса[5].Выгрузить();
		Для Каждого СтрокаСДублем Из ТаблицаДублей Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСДублем);
			Отбор.НомерДокумента   = СокрЛП(Отбор.НомерДокумента);
			Отбор.НаименованиеОперацииИнвертированное = СтрокаСДублем.НаименованиеОперации;
			НайденныеСтроки = ТаблицаПоДаннымКонтрагента.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПоДаннымКонтрагента.Добавить();
			ЭтоПерваяСтрока = Истина;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНомеровДублейВторойОрганизации.Добавить(НайденнаяСтрока.НомерСтроки);
				Если ЭтоПерваяСтрока = Истина Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					НоваяСтрока.НомерСтрокиПоДаннымКонтрагента = Строка(НайденнаяСтрока.НомерСтроки);
					ЭтоПерваяСтрока = Ложь;
					ТаблицаПоДаннымКонтрагента.Удалить(НайденнаяСтрока);
					Продолжить;
				КонецЕсли;
				НоваяСтрока.НомерСтрокиПоДаннымКонтрагента = Строка(НоваяСтрока.НомерСтрокиПоДаннымКонтрагента) + ";" + Строка(НайденнаяСтрока.НомерСтроки);
				НоваяСтрока.Дебет  = НоваяСтрока.Дебет + НайденнаяСтрока.Дебет;
				НоваяСтрока.Кредит = НоваяСтрока.Кредит + НайденнаяСтрока.Кредит;
				ТаблицаПоДаннымКонтрагента.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивНомеровДублейПервойОрганизации", МассивНомеровДублейПервойОрганизации);
	Запрос.УстановитьПараметр("МассивНомеровДублейВторойОрганизации", МассивНомеровДублейВторойОрганизации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.Представление КАК ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокумента КАК НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.Дебет КАК ДебетПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.Кредит КАК КредитПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.Договор КАК Договор,
	|	ТаблицаПервойОрганизации.Дата КАК Дата,
	|	ТаблицаПервойОрганизации.Документ КАК Документ,
	|	ТаблицаВторойОрганизации.НомерСтроки КАК НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.Представление КАК ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокумента КАК НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.Дебет КАК ДебетПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.Кредит КАК КредитПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерДляСортировки,
	|	ТаблицаВторойОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымКонтрагента
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.НомерДокумента = ТаблицаВторойОрганизации.НомерДокумента
	|			И ТаблицаПервойОрганизации.ДатаДокумента = ТаблицаВторойОрганизации.ДатаДокумента
	|			И ТаблицаПервойОрганизации.Дебет = ТаблицаВторойОрганизации.Кредит
	|			И ТаблицаПервойОрганизации.Кредит = ТаблицаВторойОрганизации.Дебет
	|			И ТаблицаПервойОрганизации.НаименованиеОперации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|ГДЕ
	|	НЕ ТаблицаПервойОрганизации.НомерСтроки В (&МассивНомеровДублейПервойОрганизации)
	|	И НЕ ТаблицаВторойОрганизации.НомерСтроки В (&МассивНомеровДублейВторойОрганизации)";
	
	ТаблицаСТочнымСовпадением = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТочногоСовпадения Из ТаблицаСТочнымСовпадением Цикл
		ИсходнаяСтрокаПервойОрганизации = ТаблицаПоДаннымОрганизации.Найти(СтрокаТочногоСовпадения.НомерСтрокиПоДаннымОрганизации, "НомерСтроки");
		ИсходнаяСтрокаВторойОрганизации = ТаблицаПоДаннымКонтрагента.Найти(СтрокаТочногоСовпадения.НомерСтрокиПоДаннымКонтрагента, "НомерСтроки");
		Если ЗначениеЗаполнено(ИсходнаяСтрокаПервойОрганизации)
			И ЗначениеЗаполнено(ИсходнаяСтрокаВторойОрганизации) Тогда
			СтрокаРезультата = ТаблицаСверка.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаТочногоСовпадения);
			СтрокаРезультата.СверяемыйДокумент = СтрокаТочногоСовпадения.Документ;
			// Удалим сопоставленные строки.
			ТаблицаПоДаннымОрганизации.Удалить(ИсходнаяСтрокаПервойОрганизации);
			ТаблицаПоДаннымКонтрагента.Удалить(ИсходнаяСтрокаВторойОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	// Соединим таблицы по разным реквизитам, объединим и отранжируем по максимальному совпадению.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоДаннымОрганизации.НомерСтрокиПоДаннымОрганизации КАК НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымОрганизации.Представление КАК ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.НомерДокумента КАК НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.Дебет КАК ДебетПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.Кредит КАК КредитПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ТаблицаПоДаннымОрганизации.НомерДляСортировки <> 0
	|			ТОГДА ТаблицаПоДаннымОрганизации.НомерДляСортировки
	|		ИНАЧЕ ТаблицаПоДаннымОрганизации.НомерСтроки
	|	КОНЕЦ КАК НомерДляСортировки,
	|	ТаблицаПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаПоДаннымОрганизации.Договор КАК Договор,
	|	ТаблицаПоДаннымОрганизации.Дата КАК Дата,
	|	ТаблицаПоДаннымОрганизации.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаПервойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымОрганизации КАК ТаблицаПоДаннымОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоДаннымКонтрагента.НомерСтрокиПоДаннымКонтрагента КАК НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымКонтрагента.Представление КАК ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.НомерДокумента КАК НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.ДатаДокумента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.Дебет КАК ДебетПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.Кредит КАК КредитПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперации КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное
	|ПОМЕСТИТЬ ТаблицаВторойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымКонтрагента КАК ТаблицаПоДаннымКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации КАК НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерСтроки1,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации КАК ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации КАК НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации КАК ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДебетПоДаннымОрганизации КАК ДебетПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.КредитПоДаннымОрганизации КАК КредитПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента КАК НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки КАК НомерСтроки2,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента КАК ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента КАК НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДебетПоДаннымКонтрагента КАК ДебетПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.КредитПоДаннымКонтрагента КАК КредитПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|				И ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			ТОГДА 5
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|				ИЛИ ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК КоличествоСовпадений,
	|	ТаблицаПервойОрганизации.НомерДляСортировки КАК НомерДляСортировки,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.Договор КАК Договор,
	|	ТаблицаПервойОрганизации.Дата КАК Дата,
	|	ТаблицаПервойОрганизации.Документ КАК Документ
	|ПОМЕСТИТЬ ПредварирительноеСопоставление
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.ДебетПоДаннымОрганизации = ТаблицаВторойОрганизации.КредитПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.КредитПоДаннымОрганизации = ТаблицаВторойОрганизации.ДебетПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДебетПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.КредитПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДебетПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.КредитПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = """"
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|					ТОГДА 3
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ТаблицаПервойОрганизации.НомерДляСортировки,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.Договор,
	|	ТаблицаПервойОрганизации.Дата,
	|	ТаблицаПервойОрганизации.Документ
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДебетПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.КредитПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДебетПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.КредитПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ТаблицаПервойОрганизации.НомерДляСортировки,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.Договор,
	|	ТаблицаПервойОрганизации.Дата,
	|	ТаблицаПервойОрганизации.Документ
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки1
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации
	|	КОНЕЦ КАК НомерСтрокиПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НомерСтроки1 КАК НомерСтроки1,
	|	ПредварирительноеСопоставление.НомерСтроки2 КАК НомерСтроки2,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымОрганизации КАК ПредставлениеПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымОрганизации КАК НомерДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымОрганизации КАК ДатаДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДебетПоДаннымОрганизации КАК ДебетПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.КредитПоДаннымОрганизации КАК КредитПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки2
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента
	|	КОНЕЦ КАК НомерСтрокиПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымКонтрагента КАК ПредставлениеПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымКонтрагента КАК НомерДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымКонтрагента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДебетПоДаннымКонтрагента КАК ДебетПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.КредитПоДаннымКонтрагента КАК КредитПоДаннымКонтрагента,
	|	МАКСИМУМ(ПредварирительноеСопоставление.КоличествоСовпадений) КАК КоличествоСовпадений,
	|	ПредварирительноеСопоставление.НомерДляСортировки КАК НомерДляСортировки,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымОрганизации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымКонтрагента КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.Договор КАК Договор,
	|	ПредварирительноеСопоставление.Дата КАК Дата,
	|	ПредварирительноеСопоставление.Документ КАК Документ
	|ИЗ
	|	ПредварирительноеСопоставление КАК ПредварирительноеСопоставление
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки1
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации
	|	КОНЕЦ,
	|	ПредварирительноеСопоставление.НомерСтроки1,
	|	ПредварирительноеСопоставление.НомерСтроки2,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДебетПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.КредитПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки2
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента
	|	КОНЕЦ,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДебетПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.КредитПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерДляСортировки,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.Договор,
	|	ПредварирительноеСопоставление.Дата,
	|	ПредварирительноеСопоставление.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСовпадений УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	Запрос.УстановитьПараметр("ТаблицаПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента);
	ТаблицаСопоставленныхСтрок = Запрос.Выполнить().Выгрузить();
	
	КоличествоСравниваемыхРеквизитов = 5; // Полное совпадение (дата, номер, Дт, Кт, вид операции).
	МинимальноеКоличествоРеквизитовДляСопоставления = 2; // 2 совпавших реквизита считаем приемлимыми.
	
	Для Каждого СтрокаСопоставленныхСтрок Из ТаблицаСопоставленныхСтрок Цикл
		Если СтрокаСопоставленныхСтрок.КоличествоСовпадений < МинимальноеКоличествоРеквизитовДляСопоставления Тогда
			Прервать;
		КонецЕсли;
		ИсходнаяСтрокаПервойОрганизации = ТаблицаПоДаннымОрганизации.Найти(СтрокаСопоставленныхСтрок.НомерСтроки1, "НомерСтроки");
		ИсходнаяСтрокаВторойОрганизации = ТаблицаПоДаннымКонтрагента.Найти(СтрокаСопоставленныхСтрок.НомерСтроки2, "НомерСтроки");
		Если ЗначениеЗаполнено(ИсходнаяСтрокаПервойОрганизации)
			И ЗначениеЗаполнено(ИсходнаяСтрокаВторойОрганизации) Тогда
			СтрокаРезультата = ТаблицаСверка.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаСопоставленныхСтрок);
			СтрокаРезультата.НомерДляСортировки = Число(СтрокаСопоставленныхСтрок.НомерДляСортировки);
			СтрокаРезультата.ЕстьРасхождения    = СтрокаСопоставленныхСтрок.КоличествоСовпадений < КоличествоСравниваемыхРеквизитов;
			СтрокаРезультата.СверяемыйДокумент  = СтрокаСопоставленныхСтрок.Документ;
			// Удалим сопоставленные строки.
			ТаблицаПоДаннымОрганизации.Удалить(ИсходнаяСтрокаПервойОрганизации);
			ТаблицаПоДаннымКонтрагента.Удалить(ИсходнаяСтрокаВторойОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСверка.Сортировать("НомерДляСортировки");
	
	Объект.Сверка.Загрузить(ТаблицаСверка);
	
	// Выводим те, которые не удалось сопоставить ни по одному реквизиту.
	Для Каждого СтрокаПервойОрганизации Из ТаблицаПоДаннымОрганизации Цикл
		СтрокаРезультата = Объект.Сверка.Добавить();
		СтрокаРезультата.НомерСтрокиПоДаннымОрганизации          = СтрокаПервойОрганизации.НомерСтроки;
		СтрокаРезультата.ПредставлениеПоДаннымОрганизации        = СтрокаПервойОрганизации.Представление;
		СтрокаРезультата.НомерДокументаПоДаннымОрганизации       = СтрокаПервойОрганизации.НомерДокумента;
		СтрокаРезультата.ДатаДокументаПоДаннымОрганизации        = СтрокаПервойОрганизации.ДатаДокумента;
		СтрокаРезультата.ДебетПоДаннымОрганизации                = СтрокаПервойОрганизации.Дебет;
		СтрокаРезультата.КредитПоДаннымОрганизации               = СтрокаПервойОрганизации.Кредит;
		СтрокаРезультата.НаименованиеОперацииПоДаннымОрганизации = СтрокаПервойОрганизации.НаименованиеОперации;
		СтрокаРезультата.Договор                                 = СтрокаПервойОрганизации.Договор;
		СтрокаРезультата.Дата                                    = СтрокаПервойОрганизации.Дата;
		СтрокаРезультата.СверяемыйДокумент                       = СтрокаПервойОрганизации.Документ;
		СтрокаРезультата.ЕстьРасхождения                         = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаВторойОрганизации Из ТаблицаПоДаннымКонтрагента Цикл
		СтрокаРезультата = Объект.Сверка.Добавить();
		СтрокаРезультата.НомерСтрокиПоДаннымКонтрагента          = СтрокаВторойОрганизации.НомерСтроки;
		СтрокаРезультата.ПредставлениеПоДаннымКонтрагента        = СтрокаВторойОрганизации.Представление;
		СтрокаРезультата.НомерДокументаПоДаннымКонтрагента       = СтрокаВторойОрганизации.НомерДокумента;
		СтрокаРезультата.ДатаДокументаПоДаннымКонтрагента        = СтрокаВторойОрганизации.ДатаДокумента;
		СтрокаРезультата.ДебетПоДаннымКонтрагента                = СтрокаВторойОрганизации.Дебет;
		СтрокаРезультата.КредитПоДаннымКонтрагента               = СтрокаВторойОрганизации.Кредит;
		СтрокаРезультата.НаименованиеОперацииПоДаннымКонтрагента = СтрокаВторойОрганизации.НаименованиеОперации;
		СтрокаРезультата.ЕстьРасхождения                         = Истина;
		СтрокаРезультата.СверяемыйДокумент                       = НСтр("ru='Отсутствует в информационной базе'");
	КонецЦикла;
	
	ОстатокНаКонец = Объект.ОстатокНаНачало
		+ Объект.ПоДаннымОрганизации.Итог("Дебет")
		- Объект.ПоДаннымОрганизации.Итог("Кредит");
		
	ОстатокНаКонецКонтрагент = Объект.ОстатокНаНачалоПоДаннымКонтрагента
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет")
		- Объект.ПоДаннымКонтрагента.Итог("Кредит");
		
	// Добавим обороты за период
	СтрокаРезультата = Объект.Сверка.Добавить();
	СтрокаРезультата.СверяемыйДокумент = НСтр("ru='Обороты за период'");

	СтрокаРезультата.ДебетПоДаннымОрганизации  = Объект.ПоДаннымОрганизации.Итог("Дебет");
	СтрокаРезультата.КредитПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Итог("Кредит");
	СтрокаРезультата.ДебетПоДаннымКонтрагента  = Объект.ПоДаннымКонтрагента.Итог("Дебет");
	СтрокаРезультата.КредитПоДаннымКонтрагента = Объект.ПоДаннымКонтрагента.Итог("Кредит");
	СтрокаРезультата.ЕстьРасхождения           = СтрокаРезультата.ДебетПоДаннымОрганизации <> СтрокаРезультата.КредитПоДаннымКонтрагента
		Или СтрокаРезультата.КредитПоДаннымОрганизации <> СтрокаРезультата.ДебетПоДаннымКонтрагента;
	
	// Добавим конечное сальдо
	СтрокаРезультата = Объект.Сверка.Добавить();
	СтрокаРезультата.СверяемыйДокумент  = НСтр("ru='Сальдо конечное'");

	Если ОстатокНаКонец > 0 Тогда
		СтрокаРезультата.ДебетПоДаннымОрганизации  = ОстатокНаКонец;
		СтрокаРезультата.КредитПоДаннымОрганизации = 0;
	Иначе
		СтрокаРезультата.ДебетПоДаннымОрганизации  = 0;
		СтрокаРезультата.КредитПоДаннымОрганизации = - ОстатокНаКонец;
	КонецЕсли;
	
	Если ОстатокНаКонецКонтрагент > 0 Тогда
		СтрокаРезультата.ДебетПоДаннымКонтрагента  = ОстатокНаКонецКонтрагент;
		СтрокаРезультата.КредитПоДаннымКонтрагента = 0;
	Иначе
		СтрокаРезультата.ДебетПоДаннымКонтрагента  = 0;
		СтрокаРезультата.КредитПоДаннымКонтрагента = - ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	
	СтрокаРезультата.ЕстьРасхождения = ОстатокНаКонец <> - ОстатокНаКонецКонтрагент;
	
	Объект.ЕстьРасхождения = Ложь;
	
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		Если СтрокаСверки.ЕстьРасхождения Тогда
			Объект.ЕстьРасхождения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьДокументыНаЗамечания(Организация, ТаблицаДокументовПоДаннымОрганизации) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументовПоДаннымОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.Текст = СформироватьЗапросПоЗамечаниям();
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();	
	
КонецФункции	

Функция СформироватьЗапросПоЗамечаниям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументовПоДаннымОрганизации.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументовПоДаннымОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Документ КАК Документ,
	|	""Документ не подписан"" КАК ТекстЗамечания,
	|	ИСТИНА КАК ЕстьЗамечание
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТаблицаДокументов.Документ = СтатусыДокументов.Документ
	|ГДЕ
	|	СтатусыДокументов.Организация = &Организация
	|	И СтатусыДокументов.Статус ССЫЛКА Перечисление.СтатусыДокументовРеализации
	|	И СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.НеПодписан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Документ,
	|	""Оригинал не получен"",
	|	ИСТИНА
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТаблицаДокументов.Документ = СтатусыДокументов.Документ
	|ГДЕ
	|	СтатусыДокументов.Организация = &Организация
	|	И СтатусыДокументов.Статус ССЫЛКА Перечисление.СтатусыДокументовПоступления
	|	И СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовПоступления.ОригиналНеПолучен)";
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

Функция ПроверитьОтложенныеРасчеты(СтруктураПараметров)

	ДатаОкончания = СтруктураПараметров.ДатаОкончания;
	Если ТипЗнч(ДатаОкончания) = Тип("Граница") Тогда
		ДатаОкончания = ДатаОкончания.Значение;
	КонецЕсли;
	
	ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураПараметров);
	ПараметрыРасчета.ДатаОкончания = ДатаОкончания;
	
	Результат = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
	
	Возврат (Результат.КоличествоДоговоровСОшибками = 0);

КонецФункции

Функция СчетаИсключения()
	
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);
	
	Возврат СчетаИсключения;
	
КонецФункции

Функция НовыйТаблицаДокументов()
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Договор",                     Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Дата",                        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументов.Колонки.Добавить("Документ",                    Документы.ТипВсеСсылки());
	ТаблицаДокументов.Колонки.Добавить("Представление",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДокументов.Колонки.Добавить("Дебет",                       ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("Кредит",                      ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("Валюта",                      Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДокументов.Колонки.Добавить("ВалютнаяСумма",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("ДатаВходящегоДокумента",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументов.Колонки.Добавить("ЭтоУниверсальныйДокумент",    Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("ЭтоКорректировочныйДокумент", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("ДатаДокумента",               ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументов.Колонки.Добавить("НомерДокумента",              ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДокументов.Колонки.Добавить("НаименованиеДокумента",       ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаДокументов.Колонки.Добавить("НаименованиеОперации",        ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция РеквизитыДокумента(СтруктураПараметров, Выборка, КэшМетаданных, СчетаИсключения)
	
	ПараметрыПредставления = Новый Структура;
	ПараметрыПредставления.Вставить("Представление", "");
	ПараметрыПредставления.Вставить("НомерДокумента", "");
	ПараметрыПредставления.Вставить("ДатаДокумента", "");
	ПараметрыПредставления.Вставить("НаименованиеОперации", "");
	
	// Представление документа
	Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		ПараметрыПредставления.Представление = МетаданныеДокумента.Представление();
		Если Выборка.ЭтоУниверсальныйДокумент Тогда
			Если Выборка.ЭтоКорректировочныйДокумент Тогда
				ПараметрыПредставления.Представление = ПараметрыПредставления.Представление + ", УКД";
			Иначе
				ПараметрыПредставления.Представление = ПараметрыПредставления.Представление + ", УПД";
			КонецЕсли;
		КонецЕсли;

	Иначе
		
		ПредставлениеОперации = ПредставлениеХозяйственнойОперации(Выборка, СчетаИсключения);
		ЗаполнитьЗначенияСвойств(ПараметрыПредставления, ПредставлениеОперации);

	КонецЕсли;
		
	Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
		Если ПараметрыПредставления.Представление = НСтр("ru='Продажа'")
			И ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
			ПараметрыПредставления.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Ложь);
		Иначе
			ПараметрыПредставления.НомерДокумента = "";
		КонецЕсли;
	Иначе
		Если (Выборка.НомерВходящегоДокумента = "" И ПараметрыПредставления.Представление = НСтр("ru='Оплата'"))
			ИЛИ СтрНайти(ПараметрыПредставления.Представление, НСтр("ru='разницы'")) > 0 Тогда
			ПараметрыПредставления.НомерДокумента = "";
		Иначе
			Если ЗначениеЗаполнено(Выборка.ЦифровойИндексОбособленногоПодразделения) Тогда
				ПараметрыПредставления.НомерДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1/%2'"),
					Формат(Выборка.НомерВходящегоДокумента, "ЧН=_______"), Выборка.ЦифровойИндексОбособленногоПодразделения);
			Иначе
				ПараметрыПредставления.НомерДокумента = Формат(Выборка.НомерВходящегоДокумента, "ЧН=_______");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Дата документа
	Если Выборка.ДатаВходящегоДокумента = Неопределено Или Выборка.ДатаВходящегоДокумента = '00010101' Тогда
		ПараметрыПредставления.ДатаДокумента = Выборка.Дата;
	Иначе
		ПараметрыПредставления.ДатаДокумента = Выборка.ДатаВходящегоДокумента;
	КонецЕсли;
	
	Возврат ПараметрыПредставления;
	
КонецФункции

Функция ПредставлениеХозяйственнойОперации(Выборка, СчетаИсключения)
	
	Представление = "";
	НаименованиеОперации = "";
	
	ЭтоРасчетыСПоставщиком = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	ЭтоРасчетыСПокупателем = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	ЭтоРасчетыСНеопределеннойСтороной = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	НаименованиеОперацииРеализация = НСтр("ru='Реализация'");
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
		
		Если Не ЗначениеЗаполнено(Выборка.ВидПрочихДоходовИРасходов) Тогда
			Представление = "";
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			Представление = НСтр("ru='Курсовые разницы'");
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
			Представление = НСтр("ru='Санкции'");
		ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы") Тогда
			Представление = НСтр("ru='Суммовые разницы'");
		ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ") Тогда
			Представление = НСтр("ru='Курсовые разницы по расчетам в у.е.'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ИзменениеУсловийАренды") Тогда
		Представление = НСтр("ru='Изменение условий'");
		НаименованиеОперации = НСтр("ru='Корректировка поступления'");
		
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПоступлениеВАренду") Тогда
		Представление = НСтр("ru='Поступление'");
		
	ИначеЕсли СчетаИсключения.Найти(Выборка.КорСчет) <> Неопределено
		И Выборка.Дебет > 0 Тогда
		Представление = НСтр("ru='Корректировка продажи'");
		НаименованиеОперации = НСтр("ru='Корректировка реализации'");
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Представление) Тогда
		// Строка уже отработана
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		
		Если Выборка.Дебет > 0 Тогда
			Представление = НСтр("ru='Возврат займа'");
		ИначеЕсли Выборка.Кредит > 0 Тогда
			Представление = НСтр("ru='Займ'");
		Иначе
			Представление = НСтр("ru='Операции по займам'");
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
		
		Представление = НСтр("ru='Претензия'");
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ДенежныеДокументы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал) Тогда
		
		Если Выборка.Кредит > 0 Тогда
			Представление = НСтр("ru='Поступление денежных документов'");
			
		ИначеЕсли Выборка.Дебет > 0 Тогда
			Представление = НСтр("ru='Выдача денежных документов'");
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ЦифровойРубль) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
		
		Если Выборка.Кредит > 0 Тогда
			
			Если ЭтоРасчетыСПоставщиком Тогда
				Представление = НСтр("ru='Возврат средств'");
				НаименованиеОперации = НСтр("ru='Возврат средств от поставщика'");
				
			ИначеЕсли ЭтоРасчетыСПокупателем Тогда
				Представление = НСтр("ru='Оплата'");
				НаименованиеОперации = НСтр("ru='Оплата от покупателя'");
				
			Иначе
				Представление = НСтр("ru='Перевод средств'");
				НаименованиеОперации = НСтр("ru='Поступление средств прочее'");
				
			КонецЕсли;
			
		ИначеЕсли Выборка.Дебет > 0 Тогда
			
			Если ЭтоРасчетыСПоставщиком Тогда
				Представление = НСтр("ru='Оплата'");
				НаименованиеОперации = НСтр("ru='Оплата поставщику'");
				
			ИначеЕсли ЭтоРасчетыСНеопределеннойСтороной Тогда
				Представление = НСтр("ru='Оплата'");
				НаименованиеОперации = НСтр("ru='Оплата прочая'");
				
			ИначеЕсли ЭтоРасчетыСПокупателем Тогда
				Представление = НСтр("ru='Возврат средств'");
				НаименованиеОперации = НСтр("ru='Возврат средств покупателю'");
				
			Иначе
				Представление = НСтр("ru='Перевод средств'");
				НаименованиеОперации = НСтр("ru='Оплата прочая'");

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Представление = НСтр("ru='Корректировка прихода'");
		НаименованиеОперации = НСтр("ru='Корректировка поступления'");

	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Представление = НСтр("ru='Корректировка продажи'");
		НаименованиеОперации = НСтр("ru='Корректировка реализации'");

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
		Представление = НСтр("ru='Продажа'");
		НаименованиеОперации = НаименованиеОперацииРеализация;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
		И НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		И Выборка.Дебет > 0 Тогда
		Представление = НСтр("ru='Продажа'");
		НаименованиеОперации = НаименованиеОперацииРеализация;

	ИначеЕсли (БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
		И Выборка.Кредит <> 0 Тогда
		Представление = НСтр("ru='Приход'");
		НаименованиеОперации = НСтр("ru='Поступление'");

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
			Представление = НСтр("ru='Продажа'");
			НаименованиеОперации = НаименованиеОперацииРеализация;

		ИначеЕсли Выборка.Кредит <> 0 Тогда
			Представление = НСтр("ru='Оплата'");
			НаименованиеОперации = НСтр("ru='Оплата от покупателя'");
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление)Тогда
		Если Выборка.Дебет > 0 Тогда
			Представление = НСтр("ru='Принято'");
		ИначеЕсли Выборка.Дебет < 0 Тогда
			Представление = НСтр("ru='Сторно: принято'");
		ИначеЕсли Выборка.Кредит > 0 Тогда
			Представление = НСтр("ru='Передано'");
		Иначе
			Представление = НСтр("ru='Сторно: передано'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеОперации) Тогда
		НаименованиеОперации = Представление; 
	КонецЕсли;
	
	ПредставлениеОперации = Новый Структура;
	ПредставлениеОперации.Вставить("Представление", Представление);
	ПредставлениеОперации.Вставить("НаименованиеОперации", НаименованиеОперации);
	
	Возврат ПредставлениеОперации;
	
КонецФункции

Функция ПодготовитьЗапрос(СтруктураПараметров, СчетаИсключения)

	МассивКонтрагентов = МассивКонтрагентов(СтруктураПараметров.Контрагент, СтруктураПараметров.СОбособленнымиПодразделениями);
	МассивДоговоров = МассивДоговоров(СтруктураПараметров.ДоговорКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачала",                            СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",                         СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",                           СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов",                    МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивДоговоров",                       МассивДоговоров);
	Запрос.УстановитьПараметр("Валюта",                                СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов",                    СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",                     СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",                    СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("РазбитьПоДоговорам",                    СтруктураПараметров.РазбитьПоДоговорам);
	Запрос.УстановитьПараметр("СчетаИсключения",                       СчетаИсключения);
	Запрос.УстановитьПараметр("СчетаНДСПоАренде", ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&СчетаНДСПоАренде)
	|				И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА 0
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 0
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&СчетаНДСПоАренде)
	|				И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт - ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт - ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоУниверсальныйДокумент, ЛОЖЬ) КАК ЭтоУниверсальныйДокумент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоКорректировочныйДокумент, ЛОЖЬ) КАК ЭтоКорректировочныйДокумент,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2 КАК КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3 КАК КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта КАК Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоУниверсальныйДокумент, ЛОЖЬ)
	|				И ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА ВЫБОР
	|									КОГДА &РазбитьПоДоговорам
	|										ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2
	|									ИНАЧЕ НЕ ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|								КОНЕЦ
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Возврат Запрос;
	
КонецФункции

Функция МассивКонтрагентов(Контрагент, СОбособленнымиПодразделениями)

	Если НЕ СОбособленнымиПодразделениями Тогда
		МассивКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ГоловнойКонтрагент = &Контрагент";
		
		ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
		МассивКонтрагентов = ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент");
		
	КонецЕсли;
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция МассивДоговоров(Договор)

	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		МассивДоговоров = Новый Массив;
	ИначеЕсли НЕ Договор.ЭтоГруппа Тогда
		МассивДоговоров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Договор);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)";
		ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
		МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	КонецЕсли;
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли;
	
	Возврат МетаданныеДокумента;
	
КонецФункции

Процедура ДополнитьТаблицуСчетамиФактурами(ТаблицаПоДаннымОрганизации, СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ВыводитьСчетаФактуры Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСчетовФактурВыставленный = Новый Массив;
	ВидыСчетовФактурВыставленный.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ВидыСчетовФактурВыставленный.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	ВидыСчетовФактурПолученный = Новый Массив;
	ВидыСчетовФактурПолученный.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ВидыСчетовФактурПолученный.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	
	ТаблицаПоДаннымОрганизации.Индексы.Добавить("ЭтоУниверсальныйДокумент");
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ЭтоУниверсальныйДокумент", Ложь);
	ТаблицаДляПоискаСчетовФактур = ТаблицаПоДаннымОрганизации.Скопировать(ПараметрыОтбора, "Документ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаДляПоискаСчетовФактур.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Запрос.УстановитьПараметр("ВидыСчетовФактурВыставленный", ВидыСчетовФактурВыставленный);
	Запрос.УстановитьПараметр("ВидыСчетовФактурПолученный", ВидыСчетовФактурПолученный);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.Исправление КАК Исправление,
	|	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураВыданный.ОтредактированНомерСчетаФактуры КАК ОтредактированНомерСчетаФактуры
	|ПОМЕСТИТЬ СписокСчетовФактурВыданных
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СписокСчетовФактурПолученных
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСчетовФактурВыданных.Ссылка КАК Ссылка,
	|	""Выданный"" КАК Вид,
	|	СписокСчетовФактурВыданных.ДокументОснование КАК ДокументОснование,
	|	СписокСчетовФактурВыданных.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СписокСчетовФактурВыданных.Исправление КАК Исправление,
	|	СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный) КАК Корректировочный,
	|	ВЫБОР
	|		КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СписокСчетовФактурВыданных.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры
	|					ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|					ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры
	|				ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры КАК НомерИсправляемогоКорректировочногоДокумента,
	|	ВЫБОР
	|		КОГДА СписокСчетовФактурВыданных.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	NULL КАК ДатаВходящегоДокумента,
	|	NULL КАК БланкСтрогойОтчетности,
	|	СписокСчетовФактурВыданных.ОтредактированНомерСчетаФактуры КАК ОтредактированНомерСчетаФактуры
	|ИЗ
	|	СписокСчетовФактурВыданных КАК СписокСчетовФактурВыданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(, Организация = &Организация) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ПО СписокСчетовФактурВыданных.Ссылка = ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	""Полученный"",
	|	СписокСчетовФактурПолученных.ДокументОснование,
	|	СчетФактураПолученный.ВидСчетаФактуры,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный),
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	СписокСчетовФактурПолученных КАК СписокСчетовФактурПолученных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СписокСчетовФактурПолученных.Ссылка = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.Организация = &Организация
	|	И СчетФактураПолученный.Проведен = ИСТИНА
	|	И СчетФактураПолученный.ВидСчетаФактуры В(&ВидыСчетовФактурПолученный)";
	ТаблицаСчетовФактур = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовФактур.Индексы.Добавить("ДокументОснование");
	
	ШаблонСчетФактуры = НСтр("ru='Счет-фактура (%1)'");

	Для Каждого СтрокаТаблицы Из ТаблицаПоДаннымОрганизации Цикл
		
		Если СтрокаТаблицы.ЭтоУниверсальныйДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСчетовФактур = ТаблицаСчетовФактур.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТаблицы.Документ));
		ПредставлениеСчетаФактуры = "";
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетовФактур Цикл
			
			Если СтрокаСчетаФактуры.Вид = "Выданный" Тогда
				СтруктураПредставленияПоРеквизитам = Документы.СчетФактураВыданный.ПолучитьПредставлениеПоРеквизитам(
					СтрокаСчетаФактуры);
			Иначе
				СтруктураПредставленияПоРеквизитам = Документы.СчетФактураПолученный.ПолучитьПредставлениеПоРеквизитам(
					СтрокаСчетаФактуры);
			КонецЕсли;
			
			ПредставлениеСчетаФактуры = ПредставлениеСчетаФактуры 
				+ Символы.ПС 
				+ СтрШаблон(ШаблонСчетФактуры, СтруктураПредставленияПоРеквизитам.ТекстПредставлениеКраткое);
			
		КонецЦикла;
		
		СтрокаТаблицы.Представление = СтрокаТаблицы.Представление + ПредставлениеСчетаФактуры;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуВалютнойСуммой(ТаблицаПоДаннымОрганизации, СтруктураПараметров)
	
	Если СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета 
		И НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
		
		ТаблицаПоДаннымОрганизации.Свернуть(
			"Дата,ДатаВходящегоДокумента,Документ,Представление,Договор,Валюта,ЭтоУниверсальныйДокумент,
			|ЭтоКорректировочныйДокумент,НомерДокумента,ДатаДокумента,НаименованиеДокумента,НаименованиеОперации",
			"Дебет, Кредит, ВалютнаяСумма");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДаннымОрганизации Цикл
			Если СтрокаТаблицы.ВалютнаяСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонСтрокиСВалютнойСуммой = "[Представление] ([ВалютнаяСумма] [Валюта])";
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Представление", СтрокаТаблицы.Представление);
			ПараметрыСтроки.Вставить("ВалютнаяСумма", 0);
			ПараметрыСтроки.Вставить("Валюта",        СтрокаТаблицы.Валюта);
			
			Если СтрокаТаблицы.ВалютнаяСумма > 0 Тогда
				ПараметрыСтроки.ВалютнаяСумма = Формат(СтрокаТаблицы.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2");
			Иначе
				Множитель = ?((СтрокаТаблицы.Дебет + СтрокаТаблицы.Кредит) > 0, -1, 1);
				ПараметрыСтроки.ВалютнаяСумма = Формат(Множитель * СтрокаТаблицы.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2");
			КонецЕсли;
			СтрокаТаблицы.Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонСтрокиСВалютнойСуммой,
				ПараметрыСтроки);
		КонецЦикла;
		
	Иначе
		ТаблицаПоДаннымОрганизации.Свернуть(
			"Дата,ДатаВходящегоДокумента,Документ,Представление,Договор,ЭтоУниверсальныйДокумент,
			|ЭтоКорректировочныйДокумент,НомерДокумента,ДатаДокумента,НаименованиеДокумента,НаименованиеОперации",
			"Дебет, Кредит");
	КонецЕсли;
	
	ПустыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаПоДаннымОрганизации Цикл
		Если СтрокаТаблицы.Дебет = 0 И СтрокаТаблицы.Кредит = 0 Тогда
			ПустыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаПоДаннымОрганизации.Удалить(ПустаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации)
	
	ТаблицаПоДаннымКонтрагента = НовыйТаблицаДокументов();
	
	Для Каждого СтрокаПоДаннымОрганизации Из ТаблицаПоДаннымОрганизации Цикл
		СтрокаПоДаннымКонтрагента = ТаблицаПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДаннымКонтрагента, СтрокаПоДаннымОрганизации);
		СтрокаПоДаннымКонтрагента.Представление =
			ПредставлениеДокументаПоДаннымКонтрагента(СтрокаПоДаннымОрганизации.Представление);
		СтрокаПоДаннымКонтрагента.Дебет  = СтрокаПоДаннымОрганизации.Кредит;
		СтрокаПоДаннымКонтрагента.Кредит = СтрокаПоДаннымОрганизации.Дебет;
		СтрокаПоДаннымКонтрагента.Дата   = ?(ЗначениеЗаполнено(СтрокаПоДаннымОрганизации.ДатаВходящегоДокумента),
			СтрокаПоДаннымОрганизации.ДатаВходящегоДокумента,
			СтрокаПоДаннымОрганизации.Дата);
	КонецЦикла;
	
	Возврат ТаблицаПоДаннымКонтрагента;
	
КонецФункции

Функция ПредставлениеДокументаПоДаннымКонтрагента(ПредставлениеДокумента) Экспорт
	
	Представление = СокрЛП(ПредставлениеДокумента);
	Для Каждого Соответствие Из СоответствиеПредставленийПоДаннымКонтрагента() Цикл
		Если СтрНачинаетсяС(Представление, Соответствие.Ключ) Тогда
			Представление = СтрЗаменить(Представление, Соответствие.Ключ, Соответствие.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

Процедура ИнвертироватьНаименованиеОперации(ТаблицаПоДаннымКонтрагента)
	
	СоответствиеНаименованийОпераций = СоответствиеНаименованийОпераций();
	Для Каждого СтрокаТаблицы Из ТаблицаПоДаннымКонтрагента Цикл
		СтрокаТаблицы.НаименованиеОперацииИнвертированное = СоответствиеНаименованийОпераций.Получить(
			СтрокаТаблицы.НаименованиеОперации);
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеНаименованийОпераций()
	
	СоответствиеОпераций = Новый Соответствие;
	
	СоответствиеОпераций.Вставить(НСтр("ru='Реализация'"),                    НСтр("ru='Поступление'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Поступление'"),                   НСтр("ru='Реализация'"));

	СоответствиеОпераций.Вставить(НСтр("ru='Корректировка реализации'"),      НСтр("ru='Корректировка поступления'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Корректировка поступления'"),     НСтр("ru='Корректировка реализации'"));
	
	СоответствиеОпераций.Вставить(НСтр("ru='Оплата поставщику'"),             НСтр("ru='Оплата от покупателя'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Оплата от покупателя'"),          НСтр("ru='Оплата поставщику'"));
	
	СоответствиеОпераций.Вставить(НСтр("ru='Возврат средств от поставщика'"), НСтр("ru='Возврат средств покупателю'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Возврат средств покупателю'"),    НСтр("ru='Возврат средств от поставщика'"));
	
	СоответствиеОпераций.Вставить(НСтр("ru='Поступление средств прочее'"),    НСтр("ru='Оплата прочая'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Оплата прочая'"),                 НСтр("ru='Поступление средств прочее'"));
	
	СоответствиеОпераций.Вставить(НСтр("ru='Передано'"),                      НСтр("ru='Принято'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Принято'"),                       НСтр("ru='Передано'"));
	
	СоответствиеОпераций.Вставить(НСтр("ru='Сторно: передано'"),              НСтр("ru='Сторно: принято'"));
	СоответствиеОпераций.Вставить(НСтр("ru='Сторно: принято'"),               НСтр("ru='Сторно: передано'"));
	
	Возврат СоответствиеОпераций;
	
КонецФункции

Функция ТаблицаПоДаннымКонтрагентаНаОсновеТаблицыПоДаннымОрганизации(ТаблицаПоДаннымОрганизации) Экспорт
	
	ТаблицаПоДаннымКонтрагента = ТаблицаПоДаннымОрганизации.СкопироватьКолонки();
	СоответствиеНаименованийОпераций = СоответствиеНаименованийОпераций();
	
	Для Каждого СтрокаПоДаннымОрганизации Из ТаблицаПоДаннымОрганизации Цикл
		СтрокаПоДаннымКонтрагента = ТаблицаПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДаннымКонтрагента, СтрокаПоДаннымОрганизации);
		СтрокаПоДаннымКонтрагента.НаименованиеОперации = СоответствиеНаименованийОпераций.Получить(
			СтрокаПоДаннымОрганизации.НаименованиеОперации);
		СтрокаПоДаннымКонтрагента.Дебет  = СтрокаПоДаннымОрганизации.Кредит;
		СтрокаПоДаннымКонтрагента.Кредит = СтрокаПоДаннымОрганизации.Дебет;
	КонецЦикла;
	
	Возврат ТаблицаПоДаннымКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы.
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧПоДаннымОрганизации.Ссылка КАК Документ,
	|	0 КАК НомерТабЧасти,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымОрганизации.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	ТЧПоДаннымОрганизации.Документ КАК Регистратор,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	NULL КАК ПредставлениеКонтр,
	|	NULL КАК ДатаКонтр,
	|	0 КАК ДебетКонтр,
	|	0 КАК КредитКонтр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|ГДЕ
	|	ТЧПоДаннымОрганизации.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧПоДаннымКонтрагента.Ссылка,
	|	1,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымКонтрагента.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|ГДЕ
	|	ТЧПоДаннымКонтрагента.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Документ,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Регистратор КАК Регистратор,
	|	ДанныеДокумента.Представление КАК Представление,
	|	ДанныеДокумента.ДатаКонтр КАК ДатаКонтр,
	|	ДанныеДокумента.ПредставлениеКонтр КАК ПредставлениеКонтр,
	|	ЕСТЬNULL(ДанныеДокумента.Дебет, 0) КАК СуммаОборотДт,
	|	ЕСТЬNULL(ДанныеДокумента.Кредит, 0) КАК СуммаОборотКт,
	|	ЕСТЬNULL(ДанныеДокумента.ДебетКонтр, 0) КАК СуммаОборотДтКонтр,
	|	ЕСТЬNULL(ДанныеДокумента.КредитКонтр, 0) КАК СуммаОборотКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	ЕСТЬNULL(АктСверкиВзаиморасчетов.ДоговорКонтрагента.ЭтоГруппа, ЛОЖЬ) КАК ДоговорКонтрагентаВШапкеЭтоГруппа,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.НеПодписан)) = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.Подписан) КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	АктСверкиВзаиморасчетов.СОбособленнымиПодразделениями КАК СОбособленнымиПодразделениями
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО (ДанныеДокумента.Документ = АктСверкиВзаиморасчетов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = АктСверкиВзаиморасчетов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаОборотДтКонтр),
	|	СУММА(СуммаОборотКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапкеЭтоГруппа),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована),
	|	МАКСИМУМ(СОбособленнымиПодразделениями)
	|ПО
	|	Документ,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой акта сверки.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// Заполняем шапку
		ПараметрыЗаголовок = Новый Структура;
		
		// Название организации
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		
		НазваниеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		
		ИННОрганизации = "";
		Если Не ПустаяСтрока(СведенияОбОрганизации.ИНН) Тогда
			ИННОрганизации = СтрШаблон(НСтр("ru='(ИНН %1)'"), СведенияОбОрганизации.ИНН);
		КонецЕсли;
		
		ПараметрыЗаголовок.Вставить("НазваниеОрганизации", НазваниеОрганизации);
		ПараметрыЗаголовок.Вставить("ИННОрганизации",      ИННОрганизации);
		
		// Наименование контрагента
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		
		НаименованиеКонтрагента = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
		
		ИННКонтрагента = "";
		Если Не ПустаяСтрока(СведенияОКонтрагенте.ИНН) Тогда
			ИННКонтрагента = СтрШаблон(НСтр("ru='(ИНН %1)'"), СведенияОКонтрагенте.ИНН);
		КонецЕсли;
		
		Если Шапка.СОбособленнымиПодразделениями Тогда
			НаименованиеКонтрагента = НаименованиеКонтрагента + " " + НСтр("ru='с обособленными подразделениями'");
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		ПараметрыЗаголовок.Вставить("ИННКонтрагента",          ИННКонтрагента);
		
		// За период
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);
		Если ЗначениеЗаполнено(ДатаНачалаОтчета) Тогда
			ЗаПериод = ПредставлениеПериода(НачалоДня(ДатаНачалаОтчета), КонецДня(Шапка.ДатаОкончания), "ФП = Истина");
			ПараметрыЗаголовок.Вставить("ЗаПериод", СтрШаблон(НСтр("ru='за период: %1'"), ЗаПериод));
		КонецЕсли;
		
		// По договору
		Если ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаВШапке) И НЕ Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа Тогда
			ПараметрыЗаголовок.Вставить("ПоДоговору",
				Символы.ПС + СтрШаблон(НСтр("ru='по договору %1'"), Шапка.ДоговорКонтрагентаВШапке));
		КонецЕсли;
		
		// Валюта документа
		ПараметрыЗаголовок.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		
		// Представитель организации
		ДанныеПредставителяОрганизации = ДанныеПредставителяОрганизации(Шапка);
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для ИП выводим только информацию об организации
			ПредставительОрганизации = НазваниеОрганизации;
		Иначе
			ПредставительОрганизации = СтрШаблон("%1 %2 %3",
				ДанныеПредставителяОрганизации.Должность,
				НазваниеОрганизации, 
				ДанныеПредставителяОрганизации.ФИОПолные);
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("ПредставительОрганизации", ПредставительОрганизации);
		
		// Представитель контрагента
		ДанныеПредставителяКонтрагента = ДанныеПредставителяКонтрагента(Шапка);
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физического лица выводим только информацию об организации
			ПредставительКонтрагента = НаименованиеКонтрагента;
		Иначе
			ПредставительКонтрагента = СтрШаблон("%1 %2 %3", 
				ДанныеПредставителяКонтрагента.Должность, 
				НаименованиеКонтрагента,
				ДанныеПредставителяКонтрагента.ФИОПолные);
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("ПредставительКонтрагента", ПредставительКонтрагента);
		
		// Выводим шапку
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Строки таблицы
		ПараметрыНачальныеОстатки = Новый Структура;
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокДт", ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0));
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокКт", ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0));
		ОбластьНачОстатки.Параметры.Заполнить(ПараметрыНачальныеОстатки);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		РазбиватьДанныеПоДоговорам = Не ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаВШапке) Или Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа = Истина;
		
		Если Шапка.РазбитьПоДоговорам Тогда 
			СальдоПоДоговорам = НачальноеСальдоПоДоговорам(Шапка);
			НачальноеСальдоПоДоговорамАкта      = СальдоПоДоговорам.ПоДоговорамАкта;
			НачальноеСальдоПоОстальнымДоговорам = СальдоПоДоговорам.ПоОстальнымДоговорам;
			
			Если РазбиватьДанныеПоДоговорам Тогда
			// Для акта сверки в электронном виде возможно формирование по выбранному договору,
			// при этом "Разбить по договорам" = Истина используется для унификации,чтобы данные по договору всегда собирать из строки табличной части.
				ВывестиСальдоПоОстальнымДоговорам(
					НачальноеСальдоПоОстальнымДоговорам,
					ОбластьДоговор,
					ОбластьДоговорИтоги,
					ТабличныйДокумент,
					Шапка);
			КонецЕсли;
		КонецЕсли;
		
		ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			// Собираем данные
			ОбходПоДокументам = ОбходПоДоговорам.Выбрать();
			
			// Создадим список документов по организации и контрагенту.
			СписокДокументов  = Новый Массив;
			СписокДокументовК = Новый Массив;
			
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата <> NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументов.Добавить(СтруктураДокумента);
				КонецЕсли;
				Если ОбходПоДокументам.ДатаКонтр <> NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента(Истина);
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументовК.Добавить(СтруктураДокумента);
				КонецЕсли;
			КонецЦикла;
			
			// Не отображаем информацию по контрагенту, если не введены документы и сверка не согласована.
			// В этом случае будут пустые строки и итоги со стороны контрагента.
			ЗаполнятьДанныеКонтрагента = (Шапка.СверкаСогласована ИЛИ (СписокДокументовК.Количество() <> 0));
			
			// Выравняем таблицы по количеству строк
			РазницаСтрок = СписокДокументов.Количество() - СписокДокументовК.Количество();
			Если РазницаСтрок > 0 Тогда
				ДополняемаяТаблица = СписокДокументовК;
				НоваяСтрока = НовыйСтруктураДокумента(Истина);
			ИначеЕсли РазницаСтрок < 0 Тогда
				РазницаСтрок = -РазницаСтрок;
				ДополняемаяТаблица = СписокДокументов;
				НоваяСтрока = НовыйСтруктураДокумента();
			КонецЕсли;
			Для Счетчик = 1 По РазницаСтрок Цикл
				ДополняемаяТаблица.Добавить(НоваяСтрока);
			КонецЦикла;
			
			ЕстьСтрокиДокументов = (СписокДокументов.Количество() <> 0);
			
			// Выводим данные в табличный документ
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов И РазбиватьДанныеПоДоговорам Тогда
				ОбластьДоговор.Параметры.Заполнить(ОбходПоДоговорам);
				НачальноеСальдоПоДоговору = НачальноеСальдоПоДоговорамАкта.Скопировать(
					Новый Структура("Договор", ОбходПоДоговорам.Договор));
				СтруктураСальдоПоДоговору = Новый Структура;
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруДт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруДт"));
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруКт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруКт"));
				ОбластьДоговор.Параметры.Заполнить(СтруктураСальдоПоДоговору);
				
				ТабличныйДокумент.Вывести(ОбластьДоговор);
			КонецЕсли;
			
			Для Счетчик = 0 По СписокДокументов.Количество() - 1 Цикл
				// Выводим обороты
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Счетчик]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Счетчик]);
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов И РазбиватьДанныеПоДоговорам Тогда
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);
				// Конечное сальдо по договору
				СтруктураКонСальдоПоДоговору = Новый Структура;
				КонОстатокПоДоговоруДт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотДт;
				КонОстатокПоДоговоруКт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотКт;
				КонОстатокПоДоговору   = КонОстатокПоДоговоруДт - КонОстатокПоДоговоруКт;
				Если КонОстатокПоДоговору < 0 Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",-КонОстатокПоДоговору);
				Иначе
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", КонОстатокПоДоговору);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт", 0);
				КонецЕсли;
				
				Если НЕ ЗаполнятьДанныеКонтрагента Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
				Иначе
					КонОстатокПоДоговоруДтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотДтКонтр;
					КонОстатокПоДоговоруКтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотКтКонтр;
					КонОстатокПоДоговоруКонтр = КонОстатокПоДоговоруДтКонтр - КонОстатокПоДоговоруКтКонтр;
					Если КонОстатокПоДоговоруКонтр < 0 Тогда
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр",-КонОстатокПоДоговоруКонтр);
					Иначе
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", КонОстатокПоДоговоруКонтр);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
					КонецЕсли;
				КонецЕсли;
				
				ОбластьДоговорИтоги.Параметры.Заполнить(СтруктураКонСальдоПоДоговору);
				ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
			КонецЕсли;
			
		КонецЦикла;
		
		// Итоги по документам
		ОбластьОборотыИтог.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		// Итоги по контрагенту
		ОстатокНаКонец = Шапка.ОстатокНаНачало + Шапка.СуммаОборотДт - Шапка.СуммаОборотКт;
		Если ЗаполнятьДанныеКонтрагента Тогда
			ОстатокНаКонецКонтр = Шапка.ОстатокНаНачало - Шапка.СуммаОборотДтКонтр + Шапка.СуммаОборотКтКонтр;
		Иначе
			ОстатокНаКонецКонтр = 0;
		КонецЕсли;
		ПараметрыИтогиПоКонтрагенту = Новый Структура;
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДт",      ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКт",      ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКтКонтр", ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДтКонтр", ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0));
		ОбластьКонОстатки.Параметры.Заполнить(ПараметрыИтогиПоКонтрагенту);
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		ПараметрыПодвала = Новый Структура;
		ПараметрыПодвала.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		ПараметрыПодвала.Вставить("НазваниеОрганизации",     НазваниеОрганизации);
		ПараметрыПодвала.Вставить("Должность",               ДанныеПредставителяОрганизации.Должность);
		ПараметрыПодвала.Вставить("ДолжностьК",              ДанныеПредставителяКонтрагента.Должность);
		ПараметрыПодвала.Вставить("ФИОПредставителя",        СтрШаблон("(%1)", ДанныеПредставителяОрганизации.Представление));
		ПараметрыПодвала.Вставить("ФИОПредставителяК",       СтрШаблон("(%1)", ДанныеПредставителяКонтрагента.Представление));
		ПараметрыПодвала.Вставить("РезультатыСверки",
			РезультатСверки(Шапка, ОстатокНаКонец, НазваниеОрганизации, НаименованиеКонтрагента));
		Если ЗаполнятьДанныеКонтрагента Тогда
			ПараметрыПодвала.Вставить("РезультатыСверкиК",
				РезультатСверки(Шапка, ОстатокНаКонецКонтр, НазваниеОрганизации, НаименованиеКонтрагента));
		КонецЕсли;
		
		// Итог сверки выводим если нашли расхождение и сверка согласована.
		Если Шапка.Расхождение <> 0 И Шапка.СверкаСогласована Тогда
			СуммаРасхождение = ?(Шапка.Расхождение > 0, Шапка.Расхождение, -Шапка.Расхождение);
			ИтогСверки = СтрШаблон(НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере %1 %2 %3'"),
				Формат(СуммаРасхождение, "ЧЦ=21; ЧДЦ=2"),
				Строка(Шапка.ВалютаДокумента),
				УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(СуммаРасхождение, Шапка.ВалютаДокумента, Ложь));
			ПараметрыПодвала.Вставить("ИтогСверки", Символы.ПС + ИтогСверки + Символы.ПС + " ");
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(ПараметрыПодвала);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Документ);
		
		УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати, Шапка.Организация, Шапка.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура ВывестиСальдоПоОстальнымДоговорам(НачальноеСальдоПоДоговорам, ОбластьДоговор, ОбластьДоговорИтоги, ТабличныйДокумент, Шапка)
	
	Для Каждого СтрокаДоговора Из НачальноеСальдоПоДоговорам Цикл
		// Выводим начальное сальдо по договору.
		ОбластьДоговор.Параметры.Заполнить(СтрокаДоговора);
		ТабличныйДокумент.Вывести(ОбластьДоговор);
		
		// Конечное сальдо равно начальному сальдо,
		// потому что по договору нет движений.
		КонечноеСальдоПоДоговору = Новый Структура;
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт",      СтрокаДоговора.НачОстатокПоДоговоруДт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",      СтрокаДоговора.НачОстатокПоДоговоруКт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", СтрокаДоговора.НачОстатокПоДоговоруКт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", СтрокаДоговора.НачОстатокПоДоговоруДт);
		
		// Выводим конечное сальдо по договору.
		ОбластьДоговорИтоги.Параметры.Заполнить(КонечноеСальдоПоДоговору);
		ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
	КонецЦикла;
	
КонецПроцедуры

Функция НачальноеСальдоПоДоговорам(Шапка)
	
	ЗапросОстаткиДоговоров = Новый Запрос;
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Шапка.Документ.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДоговоров = Шапка.Документ.ПоДаннымОрганизации.Выгрузить(,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Дополним массив договорами из табличной части контрагента.
	ТаблицаДоговоровКонтрагента = Шапка.Документ.ПоДаннымКонтрагента.Выгрузить(,"Договор");
	ТаблицаДоговоровКонтрагента.Свернуть("Договор");
	МассивДоговоровКонтрагента = ТаблицаДоговоровКонтрагента.ВыгрузитьКолонку("Договор");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДоговоров, МассивДоговоровКонтрагента, Истина);
	
	ЗапросОстаткиДоговоров.УстановитьПараметр("Организация",   Шапка.Организация);
	ЗапросОстаткиДоговоров.УстановитьПараметр("НачалоПериода", Шапка.ДатаНачала);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаРасчета",  ФильтрСписокСчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Контрагент",    Шапка.Контрагент);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Валюта",
		?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, Неопределено, Шапка.ВалютаДокумента));
	Если Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа Тогда
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Шапка.ДоговорКонтрагентаВШапке);
	Иначе
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Неопределено);
	КонецЕсли;
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("ГоловнаяОрганизация",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Шапка.Организация));
	ЗапросОстаткиДоговоров.УстановитьПараметр("АналитикаРасчетов",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры));
	ЗапросОстаткиДоговоров.УстановитьПараметр("АктСверкиВВалюте",
		Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаИсключения", СчетаИсключения());
		
	ЗапросОстаткиДоговоров.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаРасчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОстальныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.Ссылка В (&Договоры)
	|	И (&ГруппаДоговоров = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&ГруппаДоговоров))
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &ГоловнаяОрганизация
	|	И (&Валюта = Неопределено ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоДоговорамАкта
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В (&Договоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоОстальнымДоговорам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ОстальныеДоговоры.Ссылка
	|					ИЗ
	|						ОстальныеДоговоры КАК ОстальныеДоговоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДоговорамАкта.Договор КАК Договор,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоДоговорамАкта КАК ОстаткиПоДоговорамАкта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДоговорамАкта.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоОстальнымДоговорам.Договор КАК Договор,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоОстальнымДоговорам КАК ОстаткиПоОстальнымДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОстаткиПоОстальнымДоговорам.Договор = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоОстальнымДоговорам.Договор,
	|	ДоговорыКонтрагентов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Наименование";
	РезультатЗапроса = ЗапросОстаткиДоговоров.ВыполнитьПакет();
	
	НачальноеСальдоПоДоговорам = Новый Структура;
	НачальноеСальдоПоДоговорам.Вставить("ПоДоговорамАкта", РезультатЗапроса[4].Выгрузить());
	НачальноеСальдоПоДоговорам.Вставить("ПоОстальнымДоговорам", РезультатЗапроса[5].Выгрузить());

	Возврат НачальноеСальдоПоДоговорам;
	
КонецФункции

Функция НовыйСтруктураДокумента(ПоДаннымКонтрагента = Ложь)

	СтруктураДокумента = Новый Структура;
	Если ПоДаннымКонтрагента Тогда
		Суффикс = "Контр";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДокумента.Вставить("Дата" + Суффикс);
	СтруктураДокумента.Вставить("Представление" + Суффикс);
	СтруктураДокумента.Вставить("Регистратор"   + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотДт" + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотКт" + Суффикс);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция РезультатСверки(Шапка, ОстатокНаКонец, Организация, Контрагент)
	
	ШаблонРезультатСверки = НСтр("ru='на [ДатаСверки] задолженность [Заключение].'");
	ПараметрыИтогСверки = Новый Структура;
	ПараметрыИтогСверки.Вставить("ДатаСверки", Формат(Шапка.ДатаОкончания, "ДЛФ=D"));
	ПараметрыИтогСверки.Вставить("Заключение", НСтр("ru='отсутствует'"));
	
	Если ОстатокНаКонец <> 0 Тогда
		ШаблонЗаключение = НСтр("ru='в пользу [Представитель] [СуммаЦифрами] [Валюта] ([СуммаПрописью])'");
		ПараметрыЗаключение = Новый Структура("Представитель, СуммаЦифрами, Валюта, СуммаПрописью");
		ПараметрыЗаключение.Валюта = Шапка.ВалютаДокумента;
		Если ОстатокНаКонец > 0 Тогда
			ПараметрыЗаключение.Представитель = Организация;
			Множитель = 1;
		Иначе
			ПараметрыЗаключение.Представитель = Контрагент;
			Множитель = -1;
		КонецЕсли;
		
		ПараметрыЗаключение.СуммаЦифрами = Формат(Множитель * ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2");
		ПараметрыЗаключение.СуммаПрописью = УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
			Множитель * ОстатокНаКонец, Шапка.ВалютаДокумента, Ложь);
		
		ПараметрыИтогСверки.Заключение = 
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗаключение, ПараметрыЗаключение);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонРезультатСверки, ПараметрыИтогСверки);
	
КонецФункции

Функция ДанныеПредставителяКонтрагента(Шапка)
	
	ДанныеПредставителяКонтрагента = НовыеДанныеПредставителя();
	
	РеквизитыПредставителяКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Шапка.ПредставительКонтрагента, "Должность, Фамилия, Имя, Отчество");
	
	ЗаполнитьЗначенияСвойств(ДанныеПредставителяКонтрагента, РеквизитыПредставителяКонтрагента);
	
	ДанныеПредставителяКонтрагента.ДолжностьДательныйПадеж =
		СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДанныеПредставителяКонтрагента.Должность, 3);
	
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(
		ДанныеПредставителяКонтрагента.Пол, ДанныеПредставителяКонтрагента.Отчество);
	ДанныеПредставителяКонтрагента.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
		РеквизитыПредставителяКонтрагента.Фамилия,
		РеквизитыПредставителяКонтрагента.Имя,
		РеквизитыПредставителяКонтрагента.Отчество,
		Ложь);
	ДанныеПредставителяКонтрагента.Представление =
		ФизическиеЛицаКлиентСервер.ФамилияИнициалы(РеквизитыПредставителяКонтрагента);
	ДанныеПредставителяКонтрагента.ФИОДательныйПадеж =
		СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДанныеПредставителяКонтрагента.Представление, 3);
	ДанныеПредставителяКонтрагента.ИмяОтчество = СтрШаблон(
			НСтр("ru = '%1 %2'"),
			ДанныеПредставителяКонтрагента.Имя,
			ДанныеПредставителяКонтрагента.Отчество);
	
	ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителяКонтрагента);
	
	Возврат ДанныеПредставителяКонтрагента;
	
КонецФункции

Функция ДанныеПредставителяОрганизации(Шапка)
	
	ДанныеПредставителяОрганизации = НовыеДанныеПредставителя();
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаАктаСверки);
	
	Если ОтветственныеЛицаОрганизации.Руководитель = Шапка.ПредставительОрганизации Тогда
		ДанныеФизЛица = ОтветственныеЛицаОрганизации.РуководительФИО;
		ДанныеПредставителяОрганизации.Должность = ОтветственныеЛицаОрганизации.РуководительДолжность;
		ДанныеПредставителяОрганизации.ДолжностьНаименование =
			ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
		
	ИначеЕсли ОтветственныеЛицаОрганизации.ГлавныйБухгалтер = Шапка.ПредставительОрганизации Тогда
		ДанныеФизЛица = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерФИО;
		ДанныеПредставителяОрганизации.Должность = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность;
		ДанныеПредставителяОрганизации.ДолжностьНаименование =
			ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжностьПредставление;
		
	Иначе
		// Если это не ответственное лицо, тогда получим его кадровые данные
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			Шапка.Организация,
			Шапка.ПредставительОрганизации,
			Шапка.ДатаАктаСверки);
		ДанныеПредставителяОрганизации.Должность = ДанныеФизЛица.Должность;
		ДанныеПредставителяОрганизации.ДолжностьНаименование = Строка(ДанныеФизЛица.Должность);

	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПредставителяОрганизации, ДанныеФизЛица);
	
	ДанныеПредставителяОрганизации.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеФизЛица);
	
	ДанныеПредставителяОрганизации.ИмяОтчество = СтрШаблон(
			НСтр("ru = '%1 %2'"),
			ДанныеФизЛица.Имя,
			ДанныеФизЛица.Отчество);
	ДанныеПредставителяОрганизации.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
		ДанныеФизЛица.Фамилия,
		ДанныеФизЛица.Имя,
		ДанныеФизЛица.Отчество,
		Ложь);
	ДанныеПредставителяОрганизации.ФИОРодительныйПадеж =
		СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДанныеПредставителяОрганизации.Представление, 2);
		
	ДанныеПредставителяОрганизации.ДолжностьРодительныйПадеж =
		НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ДанныеПредставителяОрганизации.ДолжностьНаименование, 2));
	
	ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителяОрганизации);
	
	Возврат ДанныеПредставителяОрганизации;
	
КонецФункции

Функция НовыеДанныеПредставителя()
	
	ДанныеПредставителя = Новый Структура;
	ДанныеПредставителя.Вставить("Имя", "");
	ДанныеПредставителя.Вставить("Отчество", "");
	ДанныеПредставителя.Вставить("ИмяОтчество", "");
	ДанныеПредставителя.Вставить("ФИОПолные", "");
	ДанныеПредставителя.Вставить("ФИОРодительныйПадеж", "");
	ДанныеПредставителя.Вставить("ФИОДательныйПадеж", "");
	ДанныеПредставителя.Вставить("Представление", "");
	ДанныеПредставителя.Вставить("Должность", "");
	ДанныеПредставителя.Вставить("ДолжностьНаименование", "");
	ДанныеПредставителя.Вставить("ДолжностьРодительныйПадеж", "");
	ДанныеПредставителя.Вставить("ДолжностьДательныйПадеж", "");
	ДанныеПредставителя.Вставить("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	Возврат ДанныеПредставителя;
	
КонецФункции

Процедура ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителя)

	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.Должность) Тогда
		ДанныеПредставителя.Должность = "________________";
		ДанныеПредставителя.ДолжностьНаименование = ДанныеПредставителя.Должность;
		ДанныеПредставителя.ДолжностьРодительныйПадеж = ДанныеПредставителя.Должность;
		ДанныеПредставителя.ДолжностьДательныйПадеж = ДанныеПредставителя.Должность;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.ФИОПолные) Тогда
		ДанныеПредставителя.ФИОПолные = "_______________________";
		ДанныеПредставителя.ФИОРодительныйПадеж = ДанныеПредставителя.ФИОПолные;
		ДанныеПредставителя.ФИОДательныйПадеж = ДанныеПредставителя.ФИОПолные;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.Представление) Тогда
		ДанныеПредставителя.Представление = "_______________________";
		ДанныеПредставителя.ИмяОтчество = ДанныеПредставителя.Представление;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса для выборки данных, необходимых при формировании печатной формы
//
Функция ТекстЗапросаДляФормированияПечатнойФормыПисьмаОбОплатеЗадолженности()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Ссылка,
	|	СУММА(ЕСТЬNULL(АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет, 0)) КАК Дебет,
	|	СУММА(ЕСТЬNULL(АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит, 0)) КАК Кредит,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """") КАК НомерСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК НаименованиеБанка,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ПО (АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = АктСверкиВзаиморасчетов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО АктСверкиВзаиморасчетов.Организация.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка В(&Документы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """"),
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """"),
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """"),
	|	АктСверкиВзаиморасчетов.Контрагент,
	|	АктСверкиВзаиморасчетов.Дата,
	|	АктСверкиВзаиморасчетов.Организация,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.Ссылка,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конструктор параметров заполнения макета печатной формы "Письмо об оплате задолженности"
//
// Возвращаемое значение:
//  Структура
//
Функция НовыеПараметрыЗаполненияПисьмаОбОплатеЗадолженности()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("НаименованиеОрганизации", "");
	ПараметрыЗаполнения.Вставить("ЮридическийАдресОрганизации", "");
	ПараметрыЗаполнения.Вставить("ТелефонОрганизации", "");
	ПараметрыЗаполнения.Вставить("ИННОрганизации", "");
	ПараметрыЗаполнения.Вставить("КППОрганизации", "");
	ПараметрыЗаполнения.Вставить("ПредставительОрганизации_РодительныйПадеж", "");
	ПараметрыЗаполнения.Вставить("ДолжностьПредставителяОрганизации", "");
	ПараметрыЗаполнения.Вставить("ФИОПредставителяОрганизации", "");
	ПараметрыЗаполнения.Вставить("ТекущаяДата", "");
	ПараметрыЗаполнения.Вставить("ДатаАктаСверки", "");
	ПараметрыЗаполнения.Вставить("ПредставительКонтрагента_ДательныйПадеж", "");
	ПараметрыЗаполнения.Вставить("ИмяОтчествоПредставителяКонтрагента", "");
	ПараметрыЗаполнения.Вставить("НаименованиеКонтрагента", "");
	ПараметрыЗаполнения.Вставить("СуммаЗадолженностиЦелая", 0);
	ПараметрыЗаполнения.Вставить("СуммаЗадолженностиЦелаяПрописью", "");
	ПараметрыЗаполнения.Вставить("СуммаЗадолженностиДробная", "");
	ПараметрыЗаполнения.Вставить("НаименованиеВалюты", "");
	ПараметрыЗаполнения.Вставить("РеквизитыРасчетногоСчета", "");
	ПараметрыЗаполнения.Вставить("Обращение", "");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Формирует табличный документ с печатной формой письма об оплате задолженности
//
// Возвращаемое значение:
//  Табличный документ
//
Функция ПечатьПисьмаОбОплатеЗадолженности(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПисьмоОбОплатеЗадолженности";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_ПисьмоОбОплатеЗадолженности");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Документы", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДляФормированияПечатнойФормыПисьмаОбОплатеЗадолженности();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Область = Макет.ПолучитьОбласть("Письмо");
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			Выборка.Организация, Выборка.ДатаАктаСверки);
		
		ДанныеПредставителяОрганизации = ДанныеПредставителяОрганизации(Выборка);
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			Выборка.Контрагент, Выборка.ДатаАктаСверки);
		
		ДанныеПредставителяКонтрагента = ДанныеПредставителяКонтрагента(Выборка);
		
		СуммаЗадолженности = Выборка.ОстатокНаНачало + Выборка.Дебет - Выборка.Кредит;
		Если СуммаЗадолженности > 0 Тогда
			СуммаЗадолженностиЦелая = Цел(СуммаЗадолженности);
			СуммаЗадолженностиПрописью = ЧислоПрописью(
			СуммаЗадолженности, , "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
			СуммаЗадолженностиЦелаяПрописью = ЧислоПрописью(СуммаЗадолженностиЦелая, , " , , , , , , , , 0");
			
			НаименованиеВалюты = ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
				"рубль", "рубля", "рублей", СуммаЗадолженностиЦелая);
			
			// Выделим дробную часть из числа прописью
			ПоложениеНаименованияВалюты = СтрНайти(СуммаЗадолженностиПрописью, НаименованиеВалюты);
			ДробнаяЧасть = Сред(СуммаЗадолженностиПрописью, ПоложениеНаименованияВалюты + СтрДлина(НаименованиеВалюты) + 1);
		Иначе
			Прочерк = "_______";
			СуммаЗадолженностиЦелая = Прочерк;
			СуммаЗадолженностиПрописью = Прочерк;
			СуммаЗадолженностиЦелаяПрописью = Прочерк;
			НаименованиеВалюты = Прочерк;
			ДробнаяЧасть = Прочерк;
		КонецЕсли;
		
		// Соберем реквизиты расчетного счета
		РеквизитыСчета = Новый Массив;
		РеквизитыСчета.Добавить(СведенияОбОрганизации.СокращенноеНаименование);
		РеквизитыСчета.Добавить(СтрШаблон(НСтр("ru = 'ИНН %1 / КПП %2'"),
			СведенияОбОрганизации.ИНН, СведенияОбОрганизации.КПП));
		РеквизитыСчета.Добавить(Выборка.НаименованиеБанка);
		РеквизитыСчета.Добавить(СтрШаблон(НСтр("ru = 'БИК %1'"), Выборка.БИК));
		РеквизитыСчета.Добавить(СтрШаблон(НСтр("ru = 'р/с %1'"), Выборка.НомерСчета));
		
		ПараметрыЗаполнения = НовыеПараметрыЗаполненияПисьмаОбОплатеЗадолженности();
		
		ПараметрыЗаполнения.НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ПараметрыЗаполнения.ЮридическийАдресОрганизации = СведенияОбОрганизации.ЮридическийАдрес;
		ПараметрыЗаполнения.ТелефонОрганизации = СтрШаблон(НСтр("ru = 'Тел. %1'"), СведенияОбОрганизации.Телефоны);
		ПараметрыЗаполнения.ИННОрганизации = СведенияОбОрганизации.ИНН;
		ПараметрыЗаполнения.КППОрганизации = СведенияОбОрганизации.КПП;
		
		
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Если Выборка.ПредставительОрганизации = СведенияОбОрганизации.ИндивидуальныйПредприниматель
				Или Не ЗначениеЗаполнено(Выборка.ПредставительОрганизации) Тогда
				ПараметрыЗаполнения.ПредставительОрганизации_РодительныйПадеж =
					СтрШаблон(НСтр("ru = 'индивидуального предпринимателя
									|%1'"), ДанныеПредставителяОрганизации.ФИОРодительныйПадеж);
				ПараметрыЗаполнения.ДолжностьПредставителяОрганизации = НСтр(
					"ru = 'Индивидуальный
					|предприниматель'");
				ПараметрыЗаполнения.ФИОПредставителяОрганизации = СведенияОбОрганизации.ФамилияИнициалыФизЛица;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.ПредставительКонтрагента) Тогда
				ПараметрыЗаполнения.ПредставительКонтрагента_ДательныйПадеж =
					СтрШаблон(НСтр(
						"ru = 'Индивидуальному предпринимателю
						|%1'"),
						СклонениеПредставленийОбъектов.ПросклонятьПредставление(СведенияОКонтрагенте.ФамилияИнициалыФизлица, 3));
				ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОКонтрагенте.Представление);
				ПараметрыЗаполнения.ИмяОтчествоПредставителяКонтрагента = СтрШаблон(НСтр("ru = '%1 %2'"),
					ЧастиИмени.Имя,
					ЧастиИмени.Отчество);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ПредставительКонтрагента_ДательныйПадеж) Тогда
			ПараметрыЗаполнения.ПредставительКонтрагента_ДательныйПадеж = СтрШаблон(НСтр(
				"ru = '%1
				|%2
				|%3'"),
				ДанныеПредставителяКонтрагента.ДолжностьДательныйПадеж,
				СведенияОКонтрагенте.НаименованиеДляПечатныхФорм,
				ДанныеПредставителяКонтрагента.ФИОДательныйПадеж);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ПредставительОрганизации_РодительныйПадеж) Тогда
			ПараметрыЗаполнения.ПредставительОрганизации_РодительныйПадеж = СтрШаблон(НСтр(
				"ru = '%1
				|%2
				|%3'"),
				ДанныеПредставителяОрганизации.ДолжностьРодительныйПадеж,
				СведенияОбОрганизации.СокращенноеНаименование,
				ДанныеПредставителяОрганизации.ФИОРодительныйПадеж);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ДолжностьПредставителяОрганизации) Тогда
			ПараметрыЗаполнения.ДолжностьПредставителяОрганизации = ДанныеПредставителяОрганизации.ДолжностьНаименование;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ФИОПредставителяОрганизации) Тогда
			ПараметрыЗаполнения.ФИОПредставителяОрганизации = ДанныеПредставителяОрганизации.Представление;
		КонецЕсли;
		ПараметрыЗаполнения.ТекущаяДата = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
		ПараметрыЗаполнения.ДатаАктаСверки = Формат(Выборка.ДатаАктаСверки, "ДЛФ=D");
		Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.ИмяОтчествоПредставителяКонтрагента) Тогда
			ПараметрыЗаполнения.ИмяОтчествоПредставителяКонтрагента = ДанныеПредставителяКонтрагента.ИмяОтчество;
		КонецЕсли;
		ПараметрыЗаполнения.Обращение = ?(ДанныеПредставителяКонтрагента.Пол = Перечисления.ПолФизическогоЛица.Женский,
			"Уважаемая", "Уважаемый");
		ПараметрыЗаполнения.НаименованиеКонтрагента = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
		ПараметрыЗаполнения.СуммаЗадолженностиЦелая = СуммаЗадолженностиЦелая;
		ПараметрыЗаполнения.СуммаЗадолженностиЦелаяПрописью = СокрЛП(СуммаЗадолженностиЦелаяПрописью);
		ПараметрыЗаполнения.СуммаЗадолженностиДробная = ДробнаяЧасть;
		ПараметрыЗаполнения.НаименованиеВалюты = НаименованиеВалюты;
		ПараметрыЗаполнения.РеквизитыРасчетногоСчета = СтрСоединить(РеквизитыСчета, Символы.ПС);
		
		Область.Параметры.Заполнить(ПараметрыЗаполнения);
		
		ТабличныйДокумент.Вывести(Область);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
		УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати,
			Выборка.Организация, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы.
//
// Возвращаемое значение:
//  Текст - Текст сформированного запроса.
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыКонтрольНаличияДокументов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧПоДаннымОрганизации.Ссылка КАК Регистратор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымОрганизации.Дебет > 0
	|			ТОГДА ТЧПоДаннымОрганизации.Дебет
	|		ИНАЧЕ ТЧПоДаннымОрганизации.Кредит
	|	КОНЕЦ КАК Сумма,
	|	""Неподписанные документы"" КАК Замечание,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТЧПоДаннымОрганизации.Документ = СтатусыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТЧПоДаннымОрганизации.Документ = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ТЧПоДаннымОрганизации.Ссылка В(&МассивДокументов)
	|	И СтатусыДокументов.Статус ССЫЛКА Перечисление.СтатусыДокументовРеализации
	|	И СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.НеПодписан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧПоДаннымОрганизации.Ссылка,
	|	ТЧПоДаннымОрганизации.НомерСтроки,
	|	ДанныеПервичныхДокументов.Дата,
	|	ТЧПоДаннымОрганизации.Документ,
	|	ТЧПоДаннымОрганизации.Представление,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымОрганизации.Дебет > 0
	|			ТОГДА ТЧПоДаннымОрганизации.Дебет
	|		ИНАЧЕ ТЧПоДаннымОрганизации.Кредит
	|	КОНЕЦ,
	|	""Документы без оригиналов"",
	|	ДанныеПервичныхДокументов.Номер
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТЧПоДаннымОрганизации.Документ = СтатусыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТЧПоДаннымОрганизации.Документ = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ТЧПоДаннымОрганизации.Ссылка В(&МассивДокументов)
	|	И СтатусыДокументов.Статус ССЫЛКА Перечисление.СтатусыДокументовПоступления
	|	И СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовПоступления.ОригиналНеПолучен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Документ,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	ДанныеДокумента.Замечание КАК Замечание,
	|	ДанныеДокумента.Сумма КАК СуммаДокумента,
	|	ДанныеДокумента.Документ КАК ДокументСтрока,
	|	АктСверкиВзаиморасчетов.Номер КАК НомерАктаСверки,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.Номер КАК Номер
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО (ДанныеДокумента.Регистратор = АктСверкиВзаиморасчетов.Ссылка)
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	СУММА(СуммаДокумента),
	|	МАКСИМУМ(ДокументСтрока),
	|	МАКСИМУМ(НомерАктаСверки),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(Номер)
	|ПО
	|	Документ,
	|	Замечание";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой контроля наличия документов.
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ОбъектыПечати   - Массив    - Массив ссылок на объекты
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// Возвращаемое значение:
//  Табличный документ - печатная форма контроля наличия документов.
//
Функция ПечатьКонтрольНаличияДокументов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КонтрольНаличияДокументов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_КонтрольНаличияДокументов");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКонтрольНаличияДокументов();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки		   = Макет.ПолучитьОбласть("Строка");
		ОбластьГруппыЗамечания = Макет.ПолучитьОбласть("Группа");
		
		// Заполняем шапку
		ПараметрыЗаголовок = Новый Структура;
		
		// Название организации
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		
		НазваниеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		
		ПараметрыЗаголовок.Вставить("НазваниеОрганизации", НазваниеОрганизации);
		
		// Наименование контрагента
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		
		НаименованиеКонтрагента = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;

		ПараметрыЗаголовок.Вставить("НаименованиеКонтрагента", 
			СтрШаблон(НСтр("ru='Контрагент:%1'"), НаименованиеКонтрагента));
		
		ПараметрыЗаголовок.Вставить("ТекстЗаголовка", 
			СтрШаблон(НСтр("ru='Контроль наличия документов по акту сверки №%1 от %2'"), 
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерАктаСверки, Истина, Ложь), 
				Формат(Шапка.ДатаАктаСверки, "ДФ=dd.MM.yyyy")));
			
		// Выводим шапку
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		Замечания = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Замечание");
		
		Пока Замечания.Следующий() Цикл
		
			ОбластьГруппыЗамечания.Параметры.Заполнить(Замечания); 
			ТабличныйДокумент.Вывести(ОбластьГруппыЗамечания);

			Строки = Замечания.Выбрать();  
		
			Пока Строки.Следующий() Цикл 
				Если НЕ ЗначениеЗаполнено(Строки.ДокументСтрока) Тогда
					Продолжить;
				КонецЕсли;	
			
				ОбластьСтроки.Параметры.Заполнить(Строки); 
				ОбластьСтроки.Параметры.ПредставлениеДокумента = Строки.ДокументСтрока.Метаданные().Синоним;
				ОбластьСтроки.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строки.Номер, Истина, Ложь);
				ТабличныйДокумент.Вывести(ОбластьСтроки);
			
			КонецЦикла;	
			
		КонецЦикла;
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Документ);
		
		УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати,
			Шапка.Организация, Шапка.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция ОпределитьПодписантов(СписокДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылки", СписокДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Ссылка,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК Исполнитель,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка В(&Ссылки)";
	
	ПодписантыДокументов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписиДокумента = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			ПодписиДокумента.Вставить("Исполнитель", Выборка.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписиДокумента) Тогда
			ПодписантыДокументов.Вставить(Выборка.Ссылка, ПодписиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписантыДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьПризнакПодписан(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	АктСверкиВзаиморасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	АктСверкиВзаиморасчетов.УдалитьСверкаСогласована = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
			
			СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
			СтатусыДокумента.Статус = Перечисления.СтатусыДокументовРеализации.Подписан;
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Выборка.Ссылка, СтатусыДокумента);
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.АктСверкиВзаиморасчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено ИЛИ
					НЕ ДокументОбъект.УдалитьСверкаСогласована Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.УдалитьСверкаСогласована = Ложь;
		
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре АктСверкиВзаиморасчетов.УстановитьПризнакПодписан() не удалось обработать документ ""Акт сверки расчетов с контрагентом"" по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.АктСверкиВзаиморасчетов, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов > 0 Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре АктСверкиВзаиморасчетов.УстановитьПризнакПодписан() не удалось обработать документ ""Акт сверки расчетов с контрагентом"": в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.АктСверкиВзаиморасчетов,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура АктСверкиВзаиморасчетов.УстановитьПризнакПодписан() обработала очередную порцию документов ""Акт сверки расчетов с контрагентом"": %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
