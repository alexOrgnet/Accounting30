
#Область ОписаниеПеременных

&НаКлиенте
Перем УИДЗамераЗаполнения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ЕстьОбособленныеПодразделения = ЕстьОбособленныеПодразделения(Объект.Контрагент);
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Объект.ЭтоЭлектронныйДокумент = НастроенДокументооборотСКонтрагентом(Объект.Организация, Объект.Контрагент);
		УстановитьПараметрыДляЭлектронногоДокумента();
	КонецЕсли;
	
	ИзменитьДоступностьПоСогласованиюСверки(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	ПоказатьБаннерЗаполнение();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБП.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.АктСверкиВзаиморасчетов",
		"ФормаДокумента",
		НСтр("ru='Новости: Акт сверки расчетов с контрагентом'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеАктСверкиВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьДокументов();
	УстановитьСостояниеДокумента();
	УстановитьЗаголовокФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма                  = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка         = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// Упаковать в процедуру
	Если Объект.ЭтоЭлектронныйДокумент И Объект.Сверка.Количество() = 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПоДаннымОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма                  = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка         = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	Если ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		ИЛИ ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
		ИЛИ ИмяСобытия = "Запись_АктОбОказанииПроизводственныхУслуг"
		ИЛИ ИмяСобытия = "Запись_ПоступлениеДопРасходов" Тогда
		
		Если Параметр <> Неопределено 
			И Параметр.Свойство("Контрагент") 
			И Параметр.Контрагент = Объект.Контрагент Тогда 
			
			ОбновитьЗамечанияНаСервере();
			
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_АктСверкиВзаиморасчетов", ПараметрыЗаписи, Объект.Ссылка);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНашейОрганизацииИПоКонтрагенту(Команда)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаполнятьДанныеКонтрагента", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоДаннымУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Текст = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТолькоПоНашейОрганизации(Команда)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаполнятьДанныеКонтрагента", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоДаннымУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации(Команда)
	
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеКонтрагентаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетамиПоУмолчанию(Команда)
	
	Если Объект.СписокСчетов.Количество()>0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть <Счета учета расчетов> будет очищена. Заполнить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Сверить(Команда)
	
	Если Объект.Сверка.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСверитьЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перезаполнить данные по нашей организации перед сверкой?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		СопоставитьДанныеОрганизацииИКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если Объект.Организация <> ТекущаяОрганизация Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
			Текст = НСтр("ru = 'При изменении организации табличные части будут очищены. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииОрганизацииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если Объект.Контрагент <> ТекущийКонтрагент Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииКонтрагентаЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении контрагента табличные части будут очищены. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииКонтрагентаСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СОбособленнымиПодразделениямиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = Неопределено;
		// Обновим текущее значение договора.
		ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если Объект.ДоговорКонтрагента <> ПараметрыДоговора.Ссылка Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииДоговораЗавершение", ЭтотОбъект);
			Если Объект.ЭтоЭлектронныйДокумент Тогда
				Текст = НСтр("ru='При изменении договора табличная часть ""По данным организации"" будет очищена. Продолжить?'");
			Иначе
				Текст = НСтр("ru='При изменении договора табличные части будут очищены. Продолжить?'");
			КонецЕсли;
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииДоговораСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПоДоговорамПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРазбитьПоДоговорамЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении флага ""Разбить по договорам"" табличные части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыводитьПолныеНазванияДокументовЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьСчетаФактурыПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыводитьСчетаФактурыЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа вывода документов табличные части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстатокНаНачалоПриИзменении(Элемент)
	
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерЗаполнениеНажатие(Элемент)
	ЗакрытьБаннерЗаполнение();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаРасчеты");
	ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСоставленияПриИзменении(Элемент)
	
	Если Не Объект.ЭтоЭлектронныйДокумент Тогда
		Объект.РазбитьПоДоговорам = Ложь;
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнены = Объект.ПоДаннымОрганизации.Количество() > 0
		Или Объект.ПоДаннымКонтрагента.Количество() > 0;
		
	Если ДанныеЗаполнены Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВЭлектронномВидеЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа выставления документа табличные части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УстановитьПараметрыДляЭлектронногоДокумента();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПоДаннымКонтрагента

&НаКлиенте
Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииДокументПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПоДаннымОрганизации.ТекущиеДанные; 
	
	ПриВыбореДокументаНаСервере(ДанныеСтроки.Документ, ДанныеСтроки.Дата, ДанныеСтроки.Договор, 
		ДанныеСтроки.ЕстьЗамечание, ДанныеСтроки.ТекстЗамечания);
	
	ДанныеСтроки.НаименованиеДокумента = Строка(ТипЗнч(ДанныеСтроки.Документ));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПоДаннымКонтрагента

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ПоДаннымОрганизацииДоговор, ПоДаннымКонтрагентаДоговор

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДоговор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаДоговор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазбитьПоДоговорам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПоДаннымОрганизацииДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыводитьПолныеНазванияДокументов", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	// ПоДаннымОрганизацииДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПоДаннымОрганизации.ДокументНедоступен", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<недоступно>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// ПоДаннымОрганизации НомерДокумента,ДатаДокумента,НаименованиеОперации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииНомерДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДатаДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииНаименованиеОперации");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоЭлектронныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ПоДаннымОрганизации Представление
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоЭлектронныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// ПоДаннымКонтрагентаДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПоДаннымКонтрагента.ДокументНедоступен", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<недоступно>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ПоДаннымКонтрагента НомерДокумента,ДатаДокумента,НаименованиеОперации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаНомерДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаДатаДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаНаименованиеОперации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоЭлектронныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ПоДаннымКонтрагента Представление,Документ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаПредставление");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоЭлектронныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	// СверкаЕстьРасхождения
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаСверяемыйДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНадписьПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНадписьПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерДокументаПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерДокументаПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДатаДокументаПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДатаДокументаПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНаименованиеОперацииПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНаименованиеОперацииПоДаннымКонтрагента");

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДебетПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаКредитПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДебетПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаКредитПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаЕстьРасхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерСтрокиПоДаннымКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерСтрокиПоДаннымОрганизации");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДата");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДоговор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаОтступ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ЕстьРасхождения", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НекорректныйКонтрагентЦветФонаВСписке);
	
	// СверкаНомерДокументаПоДаннымОрганизации, СверкаНомерДокументаПоДаннымКонтрагента
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерДокументаПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаНомерДокументаПоДаннымКонтрагента");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ЕстьРасхожденияНомерДокумента", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// СверкаДатаДокументаПоДаннымОрганизации, СверкаДатаДокументаПоДаннымКонтрагента
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДатаДокументаПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДатаДокументаПоДаннымКонтрагента");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ЕстьРасхожденияДатаДокумента", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);

	
	// СверкаДебетПоДаннымОрганизации, СверкаКредитПоДаннымКонтрагента
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДебетПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаКредитПоДаннымКонтрагента");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ЕстьРасхожденияДтОрганизации", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// СверкаКредитПоДаннымОрганизации, СверкаДебетПоДаннымКонтрагента
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаКредитПоДаннымОрганизации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаДебетПоДаннымКонтрагента");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ЕстьРасхожденияКтОрганизации", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// СверкаСверяемыйДокумент
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СверкаСверяемыйДокумент");
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Сверка.СверяемыйДокумент", ВидСравненияКомпоновкиДанных.Равно, "Сальдо начальное");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Сверка.СверяемыйДокумент", ВидСравненияКомпоновкиДанных.Равно, "Отсутствует в информационной базе");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Сверка.СверяемыйДокумент", ВидСравненияКомпоновкиДанных.Равно, "Обороты за период");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Сверка.СверяемыйДокумент", ВидСравненияКомпоновкиДанных.Равно, "Сальдо конечное");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЗаголовкиСтрокШрифт);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаВхНомерДата.Видимость = Объект.ЭтоДокументКонтрагента;
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И Не Объект.СОбособленнымиПодразделениями
		И Не Форма.СтатусДокумента;
		
	ДоговорНеУказан = Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		Или Форма.ПараметрыДоговора.ЭтоГруппа;
		
	Элементы.РазбитьПоДоговорам.Доступность = ДоговорНеУказан
		И Не Форма.СтатусДокумента
		И Не Объект.ЭтоЭлектронныйДокумент;
		
	Элементы.ВыводитьПолныеНазванияДокументов.Доступность      = Не Форма.СтатусДокумента И Не Объект.ЭтоЭлектронныйДокумент;
	Элементы.ВыводитьСчетаФактуры.Доступность                  = Не Форма.СтатусДокумента И Не Объект.ЭтоЭлектронныйДокумент;
	Элементы.СОбособленнымиПодразделениями.Видимость           = Форма.ЕстьОбособленныеПодразделения И Не Объект.ЭтоЭлектронныйДокумент;
	Элементы.ГруппаПоДаннымОрганизацииЗаполнить.Видимость      = Не Объект.ЭтоЭлектронныйДокумент;
	Элементы.ПоДаннымКонтрагентаДействия.Видимость             = Не Объект.ЭтоЭлектронныйДокумент;
	Элементы.ЗаполнитьПоДаннымОрганизации.Видимость            = Объект.ЭтоЭлектронныйДокумент;
	Элементы.Сверка.Видимость                                  = Объект.ЭтоЭлектронныйДокумент И Объект.ПоДаннымКонтрагента.Количество() > 0;
	
	Элементы.ПоДаннымКонтрагента.ТолькоПросмотр                   = Объект.ЭтоЭлектронныйДокумент;
	Элементы.ДекорацияДанныеКонтрагентаНеРедактируются.Видимость  = Объект.ЭтоЭлектронныйДокумент И Объект.ПоДаннымКонтрагента.Количество() = 0;
	Элементы.ДекорацияДанныеКонтрагентаОтветныйТитул.Видимость    = Объект.ЭтоЭлектронныйДокумент И Объект.ПоДаннымКонтрагента.Количество() > 0 И Не Объект.ЭтоДокументКонтрагента;
	Элементы.ДекорацияДанныеКонтрагентаВходящийДокумент.Видимость = Объект.ЭтоЭлектронныйДокумент И Объект.ПоДаннымКонтрагента.Количество() > 0 И Объект.ЭтоДокументКонтрагента;
	
	СверкаПроведенаИРасхожденийНет = Объект.ЭтоЭлектронныйДокумент 
		И Не Объект.ЕстьРасхождения
		И Объект.ПоДаннымКонтрагента.Количество() > 0
		И Объект.ПоДаннымОрганизации.Количество() > 0;
		
	НетРасхожденийПоРасчетам = Объект.ОстатокНаНачало = - Объект.ОстатокНаНачалоПоДаннымКонтрагента И Объект.Расхождение = 0;
		
	СверкаПроведенаИНетРасхожденийПоРасчетам = Объект.ЭтоЭлектронныйДокумент 
		И Объект.ЕстьРасхождения
		И НетРасхожденийПоРасчетам
		И Объект.ПоДаннымКонтрагента.Количество() > 0
		И Объект.ПоДаннымОрганизации.Количество() > 0;
		
	Элементы.ДекорацияРасхожденийНеОбнаружено.Видимость  = СверкаПроведенаИРасхожденийНет;
	Элементы.ДекорацияНетРасхожденийПоРасчетам.Видимость = СверкаПроведенаИНетРасхожденийПоРасчетам И Не Форма.СтатусДокумента;
	Элементы.ДекорацияНетРасхожденийПоРасчетамСверкаСогласована.Видимость = СверкаПроведенаИНетРасхожденийПоРасчетам И Форма.СтатусДокумента;
	
	Если Объект.ЭтоЭлектронныйДокумент Тогда
		Элементы.ПоДаннымКонтрагента.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Иначе
		Элементы.ПоДаннымКонтрагента.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	КонецЕсли;
	
	Элементы.ГруппаСписокСчетов.Видимость = Форма.ПользовательУправляетСчетамиУчета;
	
	НадписьДебет = НСтр("ru='Дебет'");
	НадписьКредит = НСтр("ru='Кредит'");
	НадписьДолгКонтрагента = НСтр("ru='Долг контрагента'");
	НадписьДолгОрганизации = НСтр("ru='Долг организации'");
	
	Если Форма.ПользовательУправляетСчетамиУчета Тогда
		
		Элементы.СверкаДебетПоДаннымОрганизации.Заголовок =  НадписьДебет;
		Элементы.СверкаКредитПоДаннымОрганизации.Заголовок = НадписьКредит;
		Элементы.СверкаДебетПоДаннымКонтрагента.Заголовок =  НадписьДебет;
		Элементы.СверкаКредитПоДаннымКонтрагента.Заголовок = НадписьКредит;
		
		Элементы.ПоДаннымОрганизацииДебет.Заголовок =  НадписьДебет;
		Элементы.ПоДаннымОрганизацииКредит.Заголовок = НадписьКредит;
		
		Элементы.ПоДаннымКонтрагентаДебет.Заголовок =  НадписьДебет;
		Элементы.ПоДаннымКонтрагентаКредит.Заголовок = НадписьКредит;

	Иначе
		Элементы.СверкаДебетПоДаннымОрганизации.Заголовок =  НадписьДолгКонтрагента;
		Элементы.СверкаКредитПоДаннымОрганизации.Заголовок = НадписьДолгОрганизации;
		Элементы.СверкаДебетПоДаннымКонтрагента.Заголовок =  НадписьДолгОрганизации;
		Элементы.СверкаКредитПоДаннымКонтрагента.Заголовок = НадписьДолгКонтрагента;
		
		Элементы.ПоДаннымОрганизацииДебет.Заголовок =  НадписьДолгКонтрагента;
		Элементы.ПоДаннымОрганизацииКредит.Заголовок = НадписьДолгОрганизации;
		
		Элементы.ПоДаннымКонтрагентаДебет.Заголовок =  НадписьДолгОрганизации;
		Элементы.ПоДаннымКонтрагентаКредит.Заголовок = НадписьДолгКонтрагента;
		
	КонецЕсли;
	
	Элементы.ОстатокНаНачало.ТолькоПросмотр = Форма.ВестиУчетРасчетовСКонтрагентами;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДоступностьПоСогласованиюСверки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Организация.Доступность                         = НЕ Форма.СтатусДокумента;
	Элементы.Контрагент.Доступность                          = НЕ Форма.СтатусДокумента;
	Элементы.СОбособленнымиПодразделениями.Доступность       = НЕ Форма.СтатусДокумента;
	Элементы.ВалютаДокумента.Доступность                     = НЕ Форма.СтатусДокумента;
	Элементы.ГруппаПериодСверки.Доступность                  = НЕ Форма.СтатусДокумента;
	Элементы.СпособСоставления.Доступность                   = НЕ Форма.СтатусДокумента;
	
	Элементы.ПоДаннымКонтрагента.ТолькоПросмотр              = Форма.СтатусДокумента;
	Элементы.ПоДаннымОрганизации.ТолькоПросмотр              = Форма.СтатусДокумента;
	Элементы.СписокСчетов.ТолькоПросмотр                     = Форма.СтатусДокумента;
	Элементы.Сверка.ТолькоПросмотр                           = Форма.СтатусДокумента;
	
	Элементы.ПоДаннымКонтрагента.КоманднаяПанель.Доступность = НЕ Форма.СтатусДокумента;
	Элементы.ПоДаннымОрганизации.КоманднаяПанель.Доступность = НЕ Форма.СтатусДокумента;
	Элементы.СписокСчетов.КоманднаяПанель.Доступность        = НЕ Форма.СтатусДокумента;
	
	Если Форма.СтатусДокумента Тогда
		Элементы.Сверка.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Иначе
		Элементы.Сверка.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПересчитатьОстатки(ЭтотОбъект);
	УстановитьДоступностьДокументов();
	ЗапомнитьТекущиеЗначенияРеквизитов();
	УстановитьСостояниеДокумента();
	УстановитьЗаголовокФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОпределитьСтатусСверки();
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСтатусСверки()
	
	Если Не Объект.ЭтоЭлектронныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоРасхождений = 0;
	
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		Если СтрокаСверки.ЕстьРасхождения Тогда
			КоличествоРасхождений = КоличествоРасхождений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоРасхождений > 0 Тогда
		НадписьКоличествоРасхождений = КоличествоРасхождений;
	Иначе
		НадписьКоличествоРасхождений = НСтр("ru='расхождений нет'"); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДокументов()
	
	Если Объект.ПоДаннымОрганизации.Количество() = 0 И Объект.ПоДаннымКонтрагента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыОрганизации = Объект.ПоДаннымОрганизации.Выгрузить(,"Документ").ВыгрузитьКолонку("Документ");
	ДокументыКонтрагента = Объект.ПоДаннымКонтрагента.Выгрузить(,"Документ").ВыгрузитьКолонку("Документ");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыОрганизации, ДокументыКонтрагента, Истина);
	
	// Сохраним массив, чтобы сравнить с обработанным.
	ИсходныйМассив = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДокументыОрганизации);
	УправлениеДоступомБП.УдалитьНедоступныеЭлементыИзМассива(ДокументыОрганизации);
	
	Если ОбщегоНазначения.КоллекцииИдентичны(ИсходныйМассив, ДокументыОрганизации) Тогда
		// Все документы доступны, ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.ПоДаннымОрганизации Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) 
			И ДокументыОрганизации.Найти(СтрокаТаблицы.Документ) = Неопределено Тогда
			СтрокаТаблицы.ДокументНедоступен = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ПоДаннымКонтрагента Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) 
			И ДокументыОрганизации.Найти(СтрокаТаблицы.Документ) = Неопределено Тогда
			СтрокаТаблицы.ДокументНедоступен = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()
	
	ТекущаяОрганизация              = Объект.Организация;
	ТекущийКонтрагент               = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ТекущийПериод.ДатаНачала        = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания     = Объект.ДатаОкончания;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОстатки(Форма)

	Объект = Форма.Объект;
	
	Форма.ОстатокНаКонец = Объект.ОстатокНаНачало
		+ Объект.ПоДаннымОрганизации.Итог("Дебет")
		- Объект.ПоДаннымОрганизации.Итог("Кредит");
		
	Если Объект.ОстатокНаНачало > 0 Тогда
		Форма.ОстатокНаНачалоПояснение = НСтр("ru='(долг контрагента)'");
	ИначеЕсли Объект.ОстатокНаНачало < 0 Тогда 
		Форма.ОстатокНаНачалоПояснение = НСтр("ru='(долг организации)'");
	КонецЕсли;
		
	Если Форма.ОстатокНаКонец > 0 Тогда
		Форма.ОстатокНаКонецПояснение = НСтр("ru='(долг контрагента)'");
	ИначеЕсли Форма.ОстатокНаКонец < 0 Тогда 
		Форма.ОстатокНаКонецПояснение = НСтр("ru='(долг организации)'");
	КонецЕсли;
	
	Если Объект.ЭтоЭлектронныйДокумент Тогда
		Форма.ОстатокНаНачалоКонтрагент = Объект.ОстатокНаНачалоПоДаннымКонтрагента;
	Иначе
		Форма.ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	КонецЕсли;
	Форма.ОстатокНаКонецКонтрагент = Форма.ОстатокНаНачалоКонтрагент
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет")
		- Объект.ПоДаннымКонтрагента.Итог("Кредит");
		
	Если Форма.ОстатокНаНачалоКонтрагент < 0 Тогда
		Форма.ОстатокНаНачалоКонтрагентПояснение = НСтр("ru='(долг контрагента)'");
	ИначеЕсли Форма.ОстатокНаНачалоКонтрагент > 0 Тогда 
		Форма.ОстатокНаНачалоКонтрагентПояснение = НСтр("ru='(долг организации)'");
	КонецЕсли;
		
	Если Форма.ОстатокНаКонецКонтрагент < 0 Тогда
		Форма.ОстатокНаКонецКонтрагентПояснение = НСтр("ru='(долг контрагента)'");
	ИначеЕсли Форма.ОстатокНаКонецКонтрагент > 0 Тогда 
		Форма.ОстатокНаКонецКонтрагентПояснение = НСтр("ru='(долг организации)'");
	КонецЕсли;
	
	Объект.Расхождение = Форма.ОстатокНаКонец + Форма.ОстатокНаКонецКонтрагент;
	Форма.РасхождениеКонтрагент = - Объект.Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Объект.ЭтоДокументКонтрагента Тогда
		ТекстЗаголовка = НСтр("ru = 'Акт сверки расчетов с контрагентом (полученный)'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Акт сверки расчетов с контрагентом'");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru='%1 %2 от %3'"), ТекстЗаголовка, Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДляЭлектронногоДокумента()
	
	Если Не Объект.ЭтоЭлектронныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = Неопределено;
	Объект.РазбитьПоДоговорам = Истина;
	Объект.ВыводитьПолныеНазванияДокументов = Ложь;
	Объект.ВыводитьСчетаФактуры = Ложь;
	Объект.СОбособленнымиПодразделениями = Ложь;
	
	УстановитьПериодСверки();
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ТекущаяОрганизация = Объект.Организация;
	Объект.ПредставительОрганизации = ПредставительОрганизации(Объект.Организация, Объект.Дата);
	
	ОбработатьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	Если ТекущийКонтрагент <> Объект.Контрагент Тогда
		Объект.СОбособленнымиПодразделениями = Ложь;
	КонецЕсли;
	
	ТекущийКонтрагент = Объект.Контрагент;
	
	ЕстьОбособленныеПодразделения = ЕстьОбособленныеПодразделения(Объект.Контрагент);
	
	Объект.ПредставительКонтрагента = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, "ОсновноеКонтактноеЛицо");
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	
	ОбработатьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере

Функция НастроенДокументооборотСКонтрагентом(Организация, Контрагент)
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("Организация",  Организация);
	ПараметрыЭД.Вставить("Контрагент",   Контрагент);
	ПараметрыЭД.Вставить("ТипДокумента", ОбменСКонтрагентами.ТипыДокументов().АктСверкиВзаиморасчетов);
	ПараметрыЭД.Вставить("Направление",  Перечисления.НаправленияЭДО.Исходящий);
	
	Возврат ОбменСКонтрагентами.ДокументооборотНастроен(ПараметрыЭД);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОбособленныеПодразделения(Знач Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &Контрагент
	|	И Контрагенты.Ссылка <> &Контрагент";
	Возврат НЕ Запрос.Выполнить().Пустой()
	
КонецФункции

&НаСервере
Процедура ОбработатьСвязанныеРеквизиты()
	
	Объект.ЭтоЭлектронныйДокумент = НастроенДокументооборотСКонтрагентом(Объект.Организация, Объект.Контрагент);
	УстановитьПараметрыДляЭлектронногоДокумента();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") И Не Объект.СОбособленнымиПодразделениями
		И Не Объект.ЭтоЭлектронныйДокумент Тогда
		
		// Установим договор по новой организации.
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			Объект.ДоговорКонтрагента,
			Объект.Контрагент,
			Объект.Организация);
		
		// Обновим текущее значение договора.
		ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
		
	КонецЕсли;
	// очищаем табличные части документа
	ОчиститьДанные(ЭтотОбъект, Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()

	// Обновим текущее значение:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
	// очищаем табличные части документа:
	ОчиститьДанные(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И Не ПараметрыДоговора.ЭтоГруппа
		И Не Объект.ЭтоЭлектронныйДокумент Тогда
		Объект.РазбитьПоДоговорам = Ложь;
	КонецЕсли;
	
	// Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Если (ТекущийПериод.ДатаНачала <> Объект.ДатаНачала
		ИЛИ ТекущийПериод.ДатаОкончания <> КонецДня(Объект.ДатаОкончания))
		И Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииПериодаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении периода сверки табличная часть будет очищена. Изменить период?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодСверки()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Или ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.НеПодписан)) = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.Подписан) КАК СверкаСогласована
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = АктСверкиВзаиморасчетов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Организация = &Организация
	|	И АктСверкиВзаиморасчетов.Контрагент = &Контрагент
	|	И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктСверкиВзаиморасчетов.Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	ТриДня = 3 * 24 * 60 * 60;// Компенсация разницы между самым длинным и самым коротким месяцем.
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		// Ориентируемся на последний по дате составления акт
		Если Результат.СверкаСогласована Тогда
			// Последний акт подписан, сформируем акт за следующий аналогичный период
			РазностьДат = Результат.ДатаОкончания + 24 * 60 * 60 - Результат.ДатаНачала;
			Объект.ДатаНачала = Результат.ДатаНачала + РазностьДат;
			Объект.ДатаОкончания = КонецМесяца(Результат.ДатаОкончания + РазностьДат - ТриДня);
		Иначе
			// Акт не подпсиан, формируем акт за аналогичный период
			Объект.ДатаНачала = Результат.ДатаНачала;
			Объект.ДатаОкончания = Результат.ДатаОкончания;
			
		КонецЕсли;
	Иначе
		// Если ранее акты не вводились - ориентируемся на дату документа
		НачалоТекущегоКвартала = НачалоКвартала(Объект.Дата);
		НачалоТекущегоМесяца   = НачалоМесяца(Объект.Дата);
		Если НачалоТекущегоМесяца = НачалоТекущегоКвартала Тогда
			// Акт за предыдущий квартал 
			Объект.ДатаНачала = ДобавитьМесяц(НачалоТекущегоКвартала, -3);
			Объект.ДатаОкончания = КонецМесяца(ДобавитьМесяц(НачалоТекущегоКвартала, -1));
		Иначе
			// Акт за предыдущий месяц
			Объект.ДатаНачала = ДобавитьМесяц(НачалоТекущегоМесяца, -1);
			Объект.ДатаОкончания = КонецМесяца(ДобавитьМесяц(НачалоТекущегоМесяца, -1));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если ПараметрыДоговора <> Неопределено И ПараметрыДоговора.Ссылка = Договор Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоГруппа,ВалютаВзаиморасчетов,ВидДоговора");
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, РеквизитыДоговора.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить("ВалютаДоговора", РеквизитыДоговора.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить("ВидДоговора", РеквизитыДоговора.ВидДоговора);
		КонецЕсли;
	Иначе
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) И (НЕ ПараметрыДоговора.ЭтоГруппа) Тогда
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Ложь);
	Иначе
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента, ЕстьЗамечание, ТекстЗамечания)
	
	ТаблицаДокументовПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Выгрузить(,"Документ");
	Организация = Объект.Организация;
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДатаВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата")
		Иначе
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйДокумент, "Дата,ДоговорКонтрагента");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли; 
	
	ТаблицаЗамечаний = Документы.АктСверкиВзаиморасчетов.ПроверитьДокументыНаЗамечания(Организация, ТаблицаДокументовПоДаннымОрганизации);
	Отбор = Новый Структура("Документ");
	Отбор.Документ = ВыбранныйДокумент;
	
	НайденныеСтроки = ТаблицаЗамечаний.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ЕстьЗамечание = НайденныеСтроки[0].ЕстьЗамечание;	 
		ТекстЗамечания = НайденныеСтроки[0].ТекстЗамечания;	 
	Иначе
		ЕстьЗамечание = Ложь;
		ТекстЗамечания = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанные(Форма, ОчищатьДанныеКонтрагентаБезусловно = Ложь)
	
	Объект = Форма.Объект;
	
	Объект.ОстатокНаНачало = 0;
	Объект.ПоДаннымОрганизации.Очистить();
	Если Не Объект.ЭтоЭлектронныйДокумент Или ОчищатьДанныеКонтрагентаБезусловно Тогда
		Объект.ПоДаннымКонтрагента.Очистить();
	КонецЕсли;
	Объект.Сверка.Очистить();
	ПересчитатьОстатки(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

// Заполняет массив счетами, которые будут использоваться по умолчанию.
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы "ТаблицаСчетовПоУмолчанию".
//
&НаСервере
Процедура ЗаполнитьСчетамиПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета.
&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета(ЗаполнятьДанныеКонтрагента)
	
	// проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачала",                    Объект.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",                 Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация",                   Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("СОбособленнымиПодразделениями", Объект.СОбособленнымиПодразделениями);
	СтруктураПараметров.Вставить("ВыводитьСчетаФактуры",          Объект.ВыводитьСчетаФактуры);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    ЗаполнятьДанныеКонтрагента);
	СтруктураПараметров.Вставить("Валюта", ?((Объект.ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, Объект.ВалютаДокумента));
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, Объект.ДоговорКонтрагента));
		
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ЭтоЭлектронныйДокумент", Объект.ЭтоЭлектронныйДокумент);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания 	= "ЗаполнитьПоДаннымОрганизации";
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер()
	
	ПоДаннымКонтрагента = Объект.ПоДаннымОрганизации.Выгрузить();
	
	ПоДаннымКонтрагента.Колонки.Дебет.Имя  = "КредитК";
	ПоДаннымКонтрагента.Колонки.Кредит.Имя = "Дебет";
	ПоДаннымКонтрагента.Колонки.КредитК.Имя= "Кредит";
	
	СоответствиеПредставлений = Документы.АктСверкиВзаиморасчетов.СоответствиеПредставленийПоДаннымКонтрагента();
	
	Для каждого СтрокаДвижений Из ПоДаннымКонтрагента Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Для Каждого Соответствие Из СоответствиеПредставлений Цикл
			Если СтрНачинаетсяС(Представление, Соответствие.Ключ) Тогда
				Представление = СтрЗаменить(Представление, Соответствие.Ключ, Соответствие.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ОбновитьЗамечанияНаСервере();
	
	Объект.ПоДаннымКонтрагента.Загрузить(ПоДаннымКонтрагента);
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по данным бухгалтерского учета
//
&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(ЗаполнятьДанныеКонтрагента = Ложь)

	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ЗаполнениеАктаСверкиВзаиморасчетов");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета(ЗаполнятьДанныеКонтрагента);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДаннымиБухгалтерскогоУчетаЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ЗагрузитьПодготовленныеДанные(Результат);
	ПоказатьРезультатВыполненияЗадания(РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(Результат)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("Успешно", Ложь);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Успешно = СтруктураДанных.Успешно;
	
	Если СтруктураДанных.Успешно Тогда
	
		Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
		Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
		Если СтруктураДанных.Свойство("ПоДаннымКонтрагента") Тогда
			Объект.ПоДаннымКонтрагента.Загрузить(СтруктураДанных.ПоДаннымКонтрагента);
		КонецЕсли;  
		
		УстановитьДоступностьДокументов();
		ПересчитатьОстатки(ЭтотОбъект);
		
		ОбновитьЗамечанияНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗамечанияНаСервере()
	
	ТаблицаДокументовПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Выгрузить(,"Документ");
	
	ТаблицаЗамечаний = Документы.АктСверкиВзаиморасчетов.ПроверитьДокументыНаЗамечания(
		Объект.Организация, ТаблицаДокументовПоДаннымОрганизации);

	Отбор = Новый Структура("Документ"); 
		
	Для Каждого ТекущаяСтрока Из Объект.ПоДаннымОрганизации Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		НайденныеСтроки = ТаблицаЗамечаний.НайтиСтроки(Отбор);	
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НайденныеСтроки[0]);
		Иначе
			ТекущаяСтрока.ЕстьЗамечание = Ложь;
			ТекущаяСтрока.ТекстЗамечания = "";
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьРезультатВыполненияЗадания(РезультатВыполнения)

	Если НЕ РезультатВыполнения.Успешно Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставительОрганизации(Знач Организация, Знач Дата)
	
	Возврат Документы.АктСверкиВзаиморасчетов.ПредставительОрганизации(Организация, Дата);
	
КонецФункции

&НаСервере
Процедура СопоставитьДанныеОрганизацииИКонтрагента()
	
	Документы.АктСверкиВзаиморасчетов.СопоставитьДанныеОрганизацииИКонтрагента(Объект);
	ОпределитьСтатусСверки();
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.Сверка Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСверка(СтрокаТаблицы);
	КонецЦикла;
	
	ОбновитьЗамечанияНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСверка(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьПоДаннымКонтрагента = НСтр("ru='по данным контрагента'");
	СтрокаТаблицы.НадписьПоДаннымОрганизации = НСтр("ru='по данным организации'");
	
	СтрокаТаблицы.ЕстьРасхожденияНомерДокумента = СтрокаТаблицы.НомерДокументаПоДаннымОрганизации <> СтрокаТаблицы.НомерДокументаПоДаннымКонтрагента;
	СтрокаТаблицы.ЕстьРасхожденияДатаДокумента  = СтрокаТаблицы.ДатаДокументаПоДаннымОрганизации <> СтрокаТаблицы.ДатаДокументаПоДаннымКонтрагента;
	СтрокаТаблицы.ЕстьРасхожденияДтОрганизации  = СтрокаТаблицы.ДебетПоДаннымОрганизации <> СтрокаТаблицы.КредитПоДаннымКонтрагента;
	СтрокаТаблицы.ЕстьРасхожденияКтОрганизации  = СтрокаТаблицы.КредитПоДаннымОрганизации <> СтрокаТаблицы.ДебетПоДаннымКонтрагента;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОписанияОповещения

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСверитьЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПоДаннымОрганизации.Очистить();
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(Ложь);
	КонецЕсли;
	
	СопоставитьДанныеОрганизацииИКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоДаннымУчетаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ПоДаннымОрганизации.Очистить();
		Если ДополнительныеПараметры.ЗаполнятьДанныеКонтрагента Тогда
			Объект.ПоДаннымКонтрагента.Очистить();
		КонецЕсли;
		Объект.Сверка.Очистить();
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(ДополнительныеПараметры.ЗаполнятьДанныеКонтрагента);  
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// проверим заполненность обязательных реквизитов:
		Если Объект.ПоДаннымОрганизации.Количество() = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru='Таблица ""По данным организации"" не заполнена.'"));
			ТекущийЭлемент = Элементы.ПоДаннымОрганизации;
		Иначе
			ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.СписокСчетов.Очистить();
		
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииОрганизацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Контрагент = ТекущийКонтрагент;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
		Объект.ПредставительКонтрагента = ТекущийПредставительКонтрагента;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииКонтрагентаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииДоговораЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииДоговораСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросРазбитьПоДоговорамЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьДанные(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Объект.РазбитьПоДоговорам = НЕ Объект.РазбитьПоДоговорам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыводитьПолныеНазванияДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.ВыводитьПолныеНазванияДокументов = НЕ Объект.ВыводитьПолныеНазванияДокументов;
	Иначе
		ОчиститьДанные(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВыводитьСчетаФактурыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.ВыводитьСчетаФактуры = НЕ Объект.ВыводитьСчетаФактуры;
	Иначе
		ОчиститьДанные(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииПериодаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
		ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
		ОчиститьДанные(ЭтотОбъект);
	Иначе
		Объект.ДатаНачала    = ТекущийПериод.ДатаНачала;
		Объект.ДатаОкончания = ТекущийПериод.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВЭлектронномВидеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьДанные(ЭтотОбъект, Истина);
		УстановитьПараметрыДляЭлектронногоДокумента();
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Объект.ЭтоЭлектронныйДокумент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБПВызовСервера.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область БЭД

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗакрытьБаннерЗаполнение()
	
	Элементы.ГруппаБаннерЗаполнение.Видимость = Ложь;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АктСверкиВзаиморасчетов", "БаннерЗаполнениеСкрыт", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннерЗаполнение()
	
	Если ВестиУчетРасчетовСКонтрагентами 
		Или Не ПравоДоступа("Просмотр", Метаданные.Обработки.ФункциональностьПрограммы) Тогда
		ПоказатьБаннер = Ложь;
	Иначе
		БаннерБылСкрыт = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АктСверкиВзаиморасчетов", "БаннерЗаполнениеСкрыт");
		ПоказатьБаннер = БаннерБылСкрыт <> Истина;
	КонецЕсли;
	Элементы.ГруппаБаннерЗаполнение.Видимость = ПоказатьБаннер;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовРеализации.Подписан);
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", СтатусДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПриИзменении(Элемент)
	
	ИзменитьДоступностьПоСогласованиюСверки(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры
