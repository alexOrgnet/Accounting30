
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ЭтоНоваяСтрока;

#КонецОбласти

#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	СсылкаДляПереходаНаКарту = РеализацияТоваровУслугФормы.СтрокаСсылкиПоказатьНаКарте();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
		
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияБП.ИспользуетсяОборудование("СканерШтрихкода");
	
	ПроверкаРНПТ.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБП.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.РеализацияТоваровУслуг",
		"ФормаДокументаТовары",
		НСтр("ru='Новости: Реализация (акт, накладная, УПД)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтотОбъект);
	
	УправлениеПанельюПодсказки.ПриСозданииНаСервере(ЭтотОбъект);
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаПодписиТовары" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДоставка" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
		
		РеализацияТоваровУслугФормыКлиентСервер.ПроверитьВозможностьОформленияЭПД(ЭтотОбъект);
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Патенты.Форма.ФормаЭлемента" Тогда
		ЗаполнитьПатентОбработкаВыбора(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбораПоОстаткам" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияНалоговойБазыНДС" Тогда
		ОбработкаВыбораАналитикиНДСНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Источник = Объект.Организация Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС	
	ИначеЕсли ИмяСобытия = "Запись_ГосконтрактЕИС" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("Ссылка")
		И Параметр.Ссылка = ЭтотОбъект.ГосконтрактЕИС Тогда
		
		ОбработатьИзменениеГосконтрактаЕИС();
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" И (Объект.Контрагент = Источник ИЛИ Объект.Грузополучатель = Источник) Тогда
		
		ОбновитьСписокАдресовДоставкиНаСервере();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			ШтрихкодВBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
			
			ДобавитьПоШтрихкодуНаСервере(ШтрихкодВBase64);
		КонецЕсли;
		
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("СопроводительныеДокументы")
		И Параметр.СопроводительныеДокументы.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		УстановитьПредставлениеНадписиУведомлениеОПеремещении();
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" 
		И Источник = "ВестиУчетРасчетовСКонтрагентами" Тогда
		
		ОбновитьБаннерыВестиУчетРасчетовСКонтрагентами();
		
	ИначеЕсли ИмяСобытия = "Запись_ИспользоватьНумерациюДоговоровСПокупателями" Тогда
		
		УстановитьПредлагатьНовыйДоговорСНумерацией();
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
	УправлениеПанельюПодсказкиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если РеализацияТоваровУслугФормыКлиент.ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Тогда
		ОбработкаОповещенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	Если НЕ ТолькоПросмотр И ИспользоватьПодключаемоеОборудование Тогда
		// Попробуем подключить сканер штрихкода
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	ПроверкаРНПТКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РеализацияТоваровУслугФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтотОбъект, Отказ, ПараметрыЗаписи);
				
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	УчетНДСКлиентСервер.ОтобразитьПолеУПДВыданный(ЭтотОбъект);

	УстановитьСостояниеДокумента();
	
	Если ВедетсяУчетНДСПоФЗ335
		И ПокупательНалоговыйАгентПоНДС = Истина Тогда 
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроверкаРНПТ.ПослеЗаписиНаСервереДокумент(ЭтотОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.СохранитьСпособВыставленияДокументов(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	УстановитьВидимостьПроверкиРНПТ();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормы.ПередЗаписьНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	КоличествоРНПТДоАвтоподбора = Объект.СведенияПрослеживаемости.Итог("Количество");
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
		Объект.Организация,
		Объект.БанковскийСчетОрганизации,
		ИспользоватьНесколькоБанковскихСчетовОрганизации,
		Отказ,
		ПараметрыЗаписи,
		Ложь);
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента",      СтатусДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСчетФактура", ТребуетсяСчетФактура И НЕ Объект.ДокументБезНДС);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЕстьСчетФактура",      ЗначениеЗаполнено(СчетФактура));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НомерСчетаФактуры",    НомерСчетаФактуры);
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормы.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	СобытияФормИСКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		РаботаСНоменклатуройКлиентБП.ПослеЗаписи_ФормаДокумента();
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ЗапускатьПроверкуРНПТ = Объект.СведенияПрослеживаемости.Итог("Количество") <> КоличествоРНПТДоАвтоподбора;
	Если ЗапускатьПроверкуРНПТ Тогда
		ПроверкаРНПТКлиент.ЗапуститьПроверкуРНПТВДокументе(ЭтотОбъект);
	Иначе
		ПроверкаРНПТКлиент.СохранитьРезультатПроверкиРНПТПослеЗаписиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ИспользоватьПодключаемоеОборудование И ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	НастройкиНалоговИОтчетовПредупреждениеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеализацияТоваровУслугФормы.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы
	
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = РеализацияТоваровУслугФормыКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(ЭтотОбъект);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьСрокОтправкиУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()

	КонтрагентПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭлектронноеАктированиеБПКлиент.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ДоговорКонтрагентаПриИзмененииНаСервере();
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭлектронноеАктированиеБПКлиент.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	
	ВведенноеЗначение = ?(Элемент.ТекстРедактирования = Строка(Объект.ДоговорКонтрагента),
		"", Элемент.ТекстРедактирования);
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорСоздание(
		Элемент, ВведенноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(
		Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка, ПредлагатьНовыйДоговорСНумерацией);
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СчетНаОплатуПокупателюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(Объект.СчетНаОплатуПокупателю, "Товары");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборСчетаНаОплатуЗавершение", ЭтотОбъект);
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтотОбъект, Истина, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаНаОплатуЗавершение(МассивСчетов, ДополнительныеПараметры) Экспорт
	Если МассивСчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетов.Количество() = 1 Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(МассивСчетов[0], "Товары");
	Иначе
		ЗаполнитьПоСчетамНаСервере(МассивСчетов, "Товары");
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаТорговомСбореПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		ДеятельностьНаТорговомСбореПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеПриИзменении(Элемент)
	
	УчетПСНКлиент.ПатентПриИзменении(ЭтотОбъект, Объект.Патент, ПатентПредставление);
	
	РеализацияТоваровУслугФормыКлиент.ПатентПриИзменении(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетПСНКлиент.ПатентОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ДобавитьИзСчетаЗавершение", ЭтотОбъект, Новый Структура);
	
	РеализацияТоваровУслугФормыКлиент.ИзменитьСписокДокументовОснований(ЭтотОбъект, ОбработчикВыбора);
КонецПроцедуры

&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПДВыданный(ЭтотОбъект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Реквизиты = РеквизитыУсловияДоставки(Объект.СпособДоставки);
		
		ЕстьДоставка             = (Реквизиты.ИмяПредопределенныхДанных <> "Самовывоз");
		ЕстьНомерДляОтслеживания = Реквизиты.ИспользоватьНомерДляОтслеживания;
		Объект.Перевозчик        = Реквизиты.Контрагент;
		
		Если ЗначениеЗаполнено(Реквизиты.УслугаДоставки) Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("УсловияДоставкиЗавершение", ЭтотОбъект, Реквизиты);
			ТекстПредупреждения = НСтр("ru = 'Добавить услугу по доставке? Документ будет записан.'");
		
			ПоказатьВопрос(ОповещениеОЗавершении, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли; 
	Иначе
		ЕстьДоставка             = Ложь;
		ЕстьНомерДляОтслеживания = Ложь;
	КонецЕсли; 
	
	РеализацияТоваровУслугФормыКлиентСервер.ПроверитьВозможностьОформленияЭПД(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	Элементы.АдресДоставкиПереходНаКарту.Доступность = ЗначениеЗаполнено(Объект.АдресДоставки);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьБаннерУведомленийОПеремещении = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУведомлениеОПеремещенииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗначениеЗаполнено(УведомлениеОПеремещении) Тогда
		Записать();
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентБП.СоздатьПоказатьУведомления(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

#Область Панель_Подсказки

&НаКлиенте
Процедура СоветПоРаботе1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КартинкаЗакрытьБаннерВключитьРасчетыСКонтрагентамиНажатие(Элемент)
	
	ЗакрытьБаннерВключитьРасчетыСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВключитьРасчетыСКонтрагентамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаРасчеты");
	ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭТрННажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	РеализацияТоваровУслугФормыКлиент.СостояниеЭТрННажатие(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары
	
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтотОбъект);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ТоварыАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыАналитикаНДС" Тогда
		ОткрытьФормуРедактированияНДС(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

	Если Поле.Имя = "ТоварыРНПТ" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ЭтоКомиссия            = ЭтоВыкупТоваровКомиссионером;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаУчета"
			И НЕ Элементы.Товары.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;

		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыРНПТ" 
			И Не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.РНПТ) Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ЭтоКомиссия            = ЭтоВыкупТоваровКомиссионером;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = Элементы.Товары.ТекущиеДанные.ПрослеживаемыйКомплект;

			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
		КонецЕсли;
	
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаНДС" Тогда
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияНДС(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроверкаРНПТКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	
	Если Копирование ИЛИ НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СостояниеПроверкиРНПТ = 4;
		Если Копирование Тогда
			Элемент.ТекущиеДанные.Себестоимость = 0;
			Элемент.ТекущиеДанные.ДокументОприходования = Неопределено;
			Если ИспользоватьКонтрольныеЗнакиГИСМ Тогда
				Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
			КонецЕсли;
			Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
			Если Элемент.ТекущиеДанные.ПрослеживаемыйТовар Тогда
				Элемент.ТекущиеДанные.РНПТ = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	СтрокаТаблицы.АналитикаУчета = "<...>";
	СтрокаТаблицы.АналитикаНДС = НСтр("ru=''");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроверкаРНПТКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	
	Если ВестиУчетМаркируемойПродукцииИСМП Тогда
		ТоварыПриОкончанииРедактированияНаСервере();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()

	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ВызовУдалитьСвязанныеЗаписи = "Количество";
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияНДС(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ТоварыНомерГТДНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, ТоварыНаКомиссии");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, ТоварыНаКомиссии");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЭлектронноеАктированиеБПКлиент.НоменклатураОбработкаВыбора(ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	Если ЭлектронноеАктированиеБПКлиент.ЭтоПодборНоменклатурыЕИС(ВыбранноеЗначение) Тогда
		// При подборе номенклатуры из госконтракта ЕИС стандартная обработка отключается,
		// необходим программный вызов события ПриИзменении. 
		ТоварыНоменклатураПриИзмененииНаКлиенте();
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетНаОплатуПокупателюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РеализацияТоваровУслугФормыКлиент.ТабличнаяЧастьСчетНаОплатуПокупателюНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетНаОплатуПокупателюОткрытие(Элемент, СтандартнаяОбработка)
	РеализацияТоваровУслугФормыКлиент.ТабличнаяЧастьСчетНаОплатуПокупателюОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетНаОплатуПокупателюОчистка(Элемент, СтандартнаяОбработка)
	РеализацияТоваровУслугФормыКлиент.ТабличнаяЧастьСчетНаОплатуПокупателюОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
	ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
	ПараметрыФормыПодбора.ЭтоКомиссия            = ЭтоВыкупТоваровКомиссионером;
	ПараметрыФормыПодбора.ПрослеживаемыйКомплект = Элементы.Товары.ТекущиеДанные.ПрослеживаемыйКомплект;
	
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары", ПараметрыФормыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено
			И ЗначениеЗаполнено(ТекДанные.ИдентификаторСтроки) Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы
	
&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтотОбъект, "Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтотОбъект, "Товары", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтотОбъект, "Товары", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	АдресХранилищаТовары = ПоместитьТоварыВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ИзменитьТовары(ЭтотОбъект, Команда, АдресХранилищаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ВыписатьСчетФактуру(ЭтотОбъект, Команда);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Оповестить("Запись_СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзСчета(Команда)
	ОбработчикВыбора = Новый ОписаниеОповещения("ДобавитьИзСчетаЗавершение", ЭтотОбъект, Новый Структура);
	
	РеализацияТоваровУслугФормыКлиент.ДобавитьИзСчета(ЭтотОбъект, ОбработчикВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтражениеВУчете(Команда)
	
	ВключитьОтражениеВУчетеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектроннуюТранспортнуюНакладную(Команда)
	РеализацияТоваровУслугФормыКлиент.СоздатьЭтРННаОсновании(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
	
// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБПВызовСервера.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	
	СписокСчетов            = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "СчетНаОплатуПокупателю");
	РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетов, "Номер, Дата");

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, РеквизитыСчетовНаОплату, ПараметрыОбъекта, ПредставленияСубконто);
		КонецЦикла;
		ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Объект.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетМаркируемойПродукцииИСМП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	ДатыИзмененияОтветственныхЛиц = ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация);
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьВидимостьПроверкиРНПТ();
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОсновнойБанковскийСчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ЗначениеЗаполнено(ОсновнойБанковскийСчетОрганизации);
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДСПокупателем");
	
		ВалютаВзаиморасчетов          = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ПокупательНалоговыйАгентПоНДС = РеквизитыДоговора.УчетАгентскогоНДСПокупателем;
		ТребуетсяСчетФактура          = Истина;
		
	Иначе

		ВалютаВзаиморасчетов          = ВалютаРегламентированногоУчета;
		ПокупательНалоговыйАгентПоНДС = Ложь;
		ТребуетсяСчетФактура          = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			РеализацияТоваровУслугФормы.ПроверитьУстановитьДоговорКонтрагента(ЭтаФорма, Новый Массив);
		ИначеЕсли ВестиУчетПоДоговорам И РеализацияТоваровУслугФормы.ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
			ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоВыкупТоваровКомиссионером = Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером;
	
	УстановитьПредлагатьНовыйДоговорСНумерацией();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	// Для заполненного документа сразу выводим напоминание об уведомлении в подвале документа если требуется.
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОбУведомленииОПеремещении(ЭтотОбъект);
	УстановитьПредставлениеНадписиУведомлениеОПеремещении();

	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтотОбъект, Объект.Контрагент, Объект.Грузополучатель, Объект.Дата);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект);
	КонецЕсли;
	
	ЕстьПравоСозданиеЭТрН = ПравоДоступа("Изменение", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная);
	Если НастроенОбменЭПД Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСКонтрагентамиБП.РеквизитыЭТрН(Объект.Ссылка));
	КонецЕсли; 
	
	ЕстьПравоЧтениеПоступлениеТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоЧтениеСчетНаОплату            = ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуПокупателю);
	
	Элементы.ТоварыДобавитьИзПоступления.Видимость  = ЕстьПравоЧтениеПоступлениеТоваровУслуг;
	Элементы.ТоварыЗаполнитьПоПоступлению.Видимость = ЕстьПравоЧтениеПоступлениеТоваровУслуг;
	Элементы.СчетНаОплатуПокупателю.Видимость       = ЕстьПравоЧтениеСчетНаОплату;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером Тогда
		Элементы.Склад.Видимость = Ложь;
		Элементы.ГруппаТоварыЗаполнить.Видимость = Ложь;
	КонецЕсли;
	
	РеализацияТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	УчетПСН.НастроитьВыборПатента(ЭтотОбъект);
	
	УстановитьОтборПоОрганизации();
	
	УправлениеФормой(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ОбновитьБаннерыВестиУчетРасчетовСКонтрагентами();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ       = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	ВедетсяУчетНДСПоФЗ335        = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	ВедетсяУчетПрослеживаемыхТоваров = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	УведомлениеОПеремещенииПодаетсяВТомЧислеДоПересеченияГраницы =
			ПрослеживаемостьБРУ.УведомлениеПодаетсяДоМоментаПересеченияГраницы(Объект.Дата);

	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = УчетПСН.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	ПрименяетсяТолькоУСНПатент        = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры   = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	ЕстьВалютныйУчет                  = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейОтПокупателей");
	ВестиУчетПоДоговорам              = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ИспользоватьКонтрольныеЗнакиГИСМ  = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ")
									  И ИнтеграцияГИСМКлиентСерверБП.МожноИспользоватьКонтрольныеЗнакиГИСМ(Объект.Дата);
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	ИспользоватьДоставкуТранспортнойКомпанией = ПолучитьФункциональнуюОпцию("ИспользоватьДоставкуТранспортнойКомпанией");
	
	РаздельныйУчетТорговыйСборПриУСН = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата);
	
	СпособОценкиМПЗ          = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗПоСредней = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	ИспользоватьНачислениеНДССМежценовойРазницы = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеНДССМежценовойРазницы");
	
	ОсуществляетсяРеализацияТоваровУслугКомитентов = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
		
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") 
		И ОбменСКонтрагентами.ОрганизацияПодключена(Объект.Организация);
		
	УстановитьПараметрыДоставки();
	
	РеализацияТоваровУслугФормыКлиентСервер.ПроверитьВозможностьОформленияЭПД(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыДоставки()
	ЕстьДоставка = Ложь;
	ЕстьНомерДляОтслеживания = Ложь;
	
	Если Объект.СпособДоставки.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.СпособДоставки, 
		"ИмяПредопределенныхДанных, ИспользоватьНомерДляОтслеживания");
	
	ЕстьДоставка = (Реквизиты.ИмяПредопределенныхДанных <> "Самовывоз");
	ЕстьНомерДляОтслеживания = Реквизиты.ИспользоватьНомерДляОтслеживания;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	РеализацияТоваровУслугФормыКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"Объект.Товары.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсуществляетсяРеализацияТоваровУслугКомитентов", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// ТоварыСебестоимость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);
				
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыАналитикаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыАналитикаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДССМежценовойРазницы", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
			"ПокупательНалоговыйАгентПоНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
			"ВедетсяУчетНДСПоФЗ335", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	

	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ТоварыАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ПокупательНалоговыйАгентПоНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ВедетсяУчетНДСПоФЗ335",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДССМежценовойРазницы", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыКодТНВЭД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПодсказкаРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));

	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Номер ТД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Номер РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСостояниеПроверкиРНПТ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.ТоварыГруппаРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	
	Элементы.ГруппаАдресДоставки.Видимость  = Форма.ЕстьДоставка И Форма.ИспользоватьДоставкуТранспортнойКомпанией;
	Элементы.НомерДляОтслеживания.Видимость = Форма.ЕстьНомерДляОтслеживания И Форма.ИспользоватьДоставкуТранспортнойКомпанией;
	Элементы.АдресДоставкиПереходНаКарту.Доступность = ЗначениеЗаполнено(Объект.АдресДоставки);

	// Управление видимостью патента.
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступШапка.Видимость  = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступПодвал.Видимость = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ДеятельностьНаТорговомСборе.Видимость = Форма.РаздельныйУчетТорговыйСборПриУСН;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.ДокументБезНДС;
	КонецЕсли;
	
	Элементы.СостояниеЭТрН.Видимость = Форма.НастроенОбменЭПД;
	Элементы.СостояниеЭТрН.Гиперссылка = ЗначениеЗаполнено(Форма.ЭлектроннаяТранспортнаяНакладная) ИЛИ Форма.ЕстьПравоСозданиеЭТрН;
	
	УстановитьВидимость(Форма);

	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		НеОтображатьРеквизитыСчетаФактуры,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПДВыданный(Форма);
	
	НалоговыйАгентПоФЗ335 = Форма.ПокупательНалоговыйАгентПоНДС = Истина И Форма.ВедетсяУчетНДСПоФЗ335;
	
	Элементы.ИтогиВсегоНДС.Видимость = Не (Объект.ДокументБезНДС ИЛИ НалоговыйАгентПоФЗ335);
	
	Форма.ПатентПредставление = УчетПСНКлиентСервер.ВыбранныйПатентПредставление(
		Объект.Патент, УчетПСНКлиентСервер.СписокПатентов(Форма));
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
	
	ОбновитьИтоги(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	Элементы.ЦеныИВалюта.Видимость = НЕ НалоговыйАгентПоФЗ335;
	
КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДатаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.ОрганизацияПриИзменении(ЭтотОбъект);
	УстановитьОтборПоОрганизации();
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		РеализацияТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭлектронноеАктированиеБП.ДоговорКонтрагентаПриИзмененииНаСервере(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если ВедетсяУчетПрослеживаемыхТоваров 
			И Объект.СведенияПрослеживаемости.Итог("Сумма") <> 0 Тогда
			ПрослеживаемостьФормыБП.ПересчитатьСуммыВВалютеПоКомплектам(ЭтотОбъект);
		КонецЕсли;

		РеализацияТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭлектронноеАктированиеБП.ДоговорКонтрагентаПриИзмененииНаСервере(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.СкладПриИзменении(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработатьИзменениеДеятельностьНаПатенте(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьДеятельностьНаТорговомСборе(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаТорговомСбореПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработатьИзменениеДеятельностьНаПатенте(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоШтрихкодуНаСервере(ШтрихкодВBase64)
	
	Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ШтрихкодВBase64);
	
	РеализацияТоваровУслугФормы.ДобавитьПоШтрихкодуНаСервере(ЭтотОбъект, Штрихкод);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);	
КонецПроцедуры 

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	СписокСчетов            = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "СчетНаОплатуПокупателю");
	РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетов, "Номер, Дата");
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТабличнойЧасти, РеквизитыСчетовНаОплату, ДанныеОбъекта, ПредставленияСубконто);
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Товары.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС");
	
КонецПроцедуры

// Прочий функционал:

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТабличнойЧасти, Знач РеквизитыСчетовНаОплату, Знач ПараметрыОбъекта, ПредставленияСубконто)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетНаОплатуПокупателю) Тогда
		РеквизитыСчетаНаОплату = РеквизитыСчетовНаОплату[СтрокаТабличнойЧасти.СчетНаОплатуПокупателю];
		
		СтрокаТабличнойЧасти.СчетНаОплатуПокупателюПредставление = РеализацияТоваровУслугФормы.ПредставлениеСчетаНаОплату(РеквизитыСчетаНаОплату);
	Иначе
		СтрокаТабличнойЧасти.СчетНаОплатуПокупателюПредставление =  "";
	КонецЕсли; 
	
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто);
	ЗаполнитьАналитикуНДС(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТабличнойЧасти);
	ПроверкаРНПТ.ЗаполнитьСостояниеПроверкиРНПТПоУмолчанию(Форма, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетМаркируемойПродукцииИСМП)
	
	Если (Не ИспользоватьКонтрольныеЗнакиГИСМ)
		И (Не ВестиУчетМаркируемойПродукцииИСМП) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеМаркируемаяПродукция = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина), "ПродукцияМаркируемаяДляГИСМ, ТабачнаяПродукция");
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаНоменклатуры = СоответствиеМаркируемаяПродукция.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаНоменклатуры = Неопределено Тогда
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , Ложь, Ложь);
		Иначе
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , 
				СтрокаНоменклатуры.ПродукцияМаркируемаяДляГИСМ, СтрокаНоменклатуры.ТабачнаяПродукция);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыМаркируемойПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",                  Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС",                    Объект.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ",                    Форма.ПлательщикНДФЛ);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом",    Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("ВалютаДокумента",                   Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубонто)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") 
		ИЛИ НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	// При вызове с сервера: функциональная опция может скрыть эти поля
	ДанныеЗаполнения = Новый Структура("СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(
		ДанныеЗаполнения,
		Не ПараметрыОбъекта.ДокументБезНДС,
		ПараметрыОбъекта.ПлательщикНДФЛ,
		ПредставленияСубонто);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ЗаполнятьНДС, Знач ЗаполнятьНДФЛ, ПредставленияСубконто)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("СчетУчетаЗабалансовый", Ложь);
	Результат.Вставить("СчетУчетаПартионный", Ложь);
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
	
	ВидСубконтоНГ			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// СчетУчета
	Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
		СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
		Результат.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		Результат.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		Результат.АналитикаУчета = СвойстваСчета.Код;
	Иначе
		Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена  = Ложь;
	КонецЕсли;
	
	// Счета дохода, расхода и НДС учитываются, если счет учета товара незабалансовый
	Если НЕ Результат.СчетУчетаЗабалансовый Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
			
			СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
					ЭлементСписка = ПредставленияСубконто.НайтиПоЗначению(ДанныеСтроки.Субконто);
					Если ЭлементСписка <> НЕОПРЕДЕЛЕНО Тогда
						ПредставлениеСубконто = ЭлементСписка.Представление;
					Иначе
						ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
						Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) 
							ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
							
							ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
						Иначе
							ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
						КонецЕсли; 
						ПредставленияСубконто.Добавить(ДанныеСтроки.Субконто, ПредставлениеСубконто);
					КонецЕсли; 
					
					Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
					КонецЕсли;
				Иначе
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
					
					// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
					Если ЗаполнятьНДФЛ
						И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
						Результат.АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
	    	
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
	    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
	    	СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
	    	Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
		Если ЗаполнятьНДС Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
				СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуНДС(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС) Тогда
		
		ТекстСообщения = НСтр("ru='%1 %2 (%3)'");
		СтрокаТабличнойЧасти.АналитикаНДС = СтрШаблон(ТекстСообщения,
			СтрокаТабличнойЧасти.СуммаНДС,
			ПараметрыОбъекта.ВалютаДокумента,
			СтрокаТабличнойЧасти.СтавкаНДС);
		
	ИначеЕсли СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда
		СтрокаТабличнойЧасти.АналитикаНДС = НСтр("ru='НДС 0%'");
	ИначеЕсли СтрокаТабличнойЧасти.Сумма = 0 Тогда
		СтрокаТабличнойЧасти.АналитикаНДС = НСтр("ru=''");
	Иначе
		СтрокаТабличнойЧасти.АналитикаНДС = НСтр("ru='Без НДС'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	РеализацияТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтотОбъект);

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	РеализацияТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(МассивСчетов, ТабличнаяЧасть)
	

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПоступлению(ТабличнаяЧасть, "Добавить", МассивСчетов);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииБанковскогоСчетаИлиОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) И Объект[ТабличнаяЧасть].Количество() = 0 Тогда
	
		ЗаполнитьПоСчетамНаСервере(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение), ТабличнаяЧасть);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

	Иначе
	
		ТекстВопроса = "Заполнить документ по счету?";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть",    ТабличнаяЧасть);

		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоСчетамНаСервере(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ВыбранноеЗначение), ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПокупателю = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленииОПеремещении", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСчетамНаСервере(МассивСчетов, ТабличнаяЧасть)

	Если МассивСчетов.Количество() = 1 Тогда
		РеализацияТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтотОбъект, МассивСчетов[0], ТабличнаяЧасть);
	Иначе
		РеализацияТоваровУслугФормы.ПриДобавленииСчетов(ЭтотОбъект, МассивСчетов);
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, МассивСчетов);// Счета учета заполняются здесь
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли; 

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	РеализацияТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТовары(ЭтотОбъект, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата", 			Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТаблицы",		"Товары");
	ПараметрыФормы.Вставить("ДокументБезНДС", 	Объект.ДокументБезНДС);
	
	ПараметрыФормы.Вставить("СчетУчета", 	ДанныеСтроки.СчетУчета);
	ПараметрыФормы.Вставить("СчетДоходов", 	ДанныеСтроки.СчетДоходов);
	ПараметрыФормы.Вставить("Субконто", 	ДанныеСтроки.Субконто);
	ПараметрыФормы.Вставить("СчетРасходов", ДанныеСтроки.СчетРасходов);
	ПараметрыФормы.Вставить("СчетУчетаНДСПоРеализации", ДанныеСтроки.СчетУчетаНДСПоРеализации);
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("СуммаНДС", 	ДанныеСтроки.СуммаНДС);
	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	
	Модифицированность = Истина;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если СтрокаТабличнойЧасти.Свойство("АналитикаУчета") И ПользовательУправляетСчетамиУчета Тогда
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
		ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта, ПредставленияСубконто);
		Если СпособОценкиМПЗПоСредней И НЕ (СтрокаТабличнойЧасти.СчетУчетаЗабалансовый И СтрокаТабличнойЧасти.СчетУчетаПартионный) Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования) Тогда
				СтрокаТабличнойЧасти.Себестоимость = 0;
				СтрокаТабличнойЧасти.ДокументОприходования = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиНДСНаКлиенте(ЗначенияВыбранныеВФормеРедактированияНалоговойБазыНДС)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеРедактированияНалоговойБазыНДС);
	
	Модифицированность = Истина;
	
	Если СтрокаТабличнойЧасти.Свойство("АналитикаНДС") Тогда
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
		ЗаполнитьАналитикуНДС(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("Количество") Тогда
		Если СтрокаТабличнойЧасти.Количество = 0 Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПатентОбработкаВыбора(ВыбранныйПатент)
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если НЕ УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		ДеятельностьНаПатентеПриИзмененииНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляПереходаНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, Объект.АдресДоставки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыУсловияДоставки(УсловияДоставки)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УсловияДоставки, 
		"ИмяПредопределенныхДанных, ИспользоватьНомерДляОтслеживания, УслугаДоставки, Контрагент");
КонецФункции

&НаКлиенте
Процедура УсловияДоставкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		Записать();
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидОперации", 
			ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"));

		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИзменитьВидОперации",  Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",   ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ДобавитьНоменклатуру", ДополнительныеПараметры.УслугаДоставки);
		ПараметрыФормы.Вставить("Ключ",                 Параметры.Ключ);

		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая", ПараметрыФормы);
		
		Закрыть();
	
	КонецЕсли; 

КонецПроцедуры 

&НаСервере
Процедура ОбновитьСписокАдресовДоставкиНаСервере()
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтотОбъект, Объект.Контрагент, Объект.Грузополучатель, Объект.Дата);
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокВыбора = Новый Массив;
	СписокВыбора.Добавить(Справочники.Организации.ПустаяСсылка());
	СписокВыбора.Добавить(Объект.Организация);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Новый ФиксированныйМассив(СписокВыбора)));
	
	Элементы.СпособДоставки.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНДС(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	ПараметрыФормы.Вставить("Номенклатура",           ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Организация",            Объект.Организация);
	ПараметрыФормы.Вставить("ВалютаДокумента",        Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВалютаРеглУчета",        ЭтотОбъект.ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Сумма",                  ДанныеСтроки.Сумма);
	ПараметрыФормы.Вставить("НалоговаяБазаНДС",       ДанныеСтроки.НалоговаяБазаНДС);
	ПараметрыФормы.Вставить("СтавкаНДС",              ДанныеСтроки.СтавкаНДС);
	ПараметрыФормы.Вставить("СуммаВключаетНДС",       Объект.СуммаВключаетНДС);
	ПараметрыФормы.Вставить("СуммаНДС",               ДанныеСтроки.СуммаНДС);
	ПараметрыФормы.Вставить("Всего",                  ДанныеСтроки.Всего);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияНалоговойБазыНДС", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыАналитикаУчета");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовРеализации.Подписан);
	
КонецФункции

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияИС()
	
	СоответствиеТребованиямГИСМТКлиент.ПроверитьВыполнениеЗадания(ЭтотОбъект);
	
КонецПроцедуры


&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()

	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодписиНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 					Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("ДатаДокумента",				Объект.Дата);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", 	Объект.ЗаРуководителяНаОсновании);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераНаОсновании",Объект.ЗаГлавногоБухгалтераНаОсновании);
	ПараметрыФормы.Вставить("ОтпускПроизвел",				Объект.ОтпускПроизвел);
	ПараметрыФормы.Вставить("ДоверенностьНомер",			Объект.ДоверенностьНомер);
	ПараметрыФормы.Вставить("ДоверенностьДата",				Объект.ДоверенностьДата);
	ПараметрыФормы.Вставить("ДоверенностьВыдана",			Объект.ДоверенностьВыдана);
	ПараметрыФормы.Вставить("ДоверенностьЧерезКого",		Объект.ДоверенностьЧерезКого);
	ПараметрыФормы.Вставить("ОтветственныйЗаОформление",	Объект.ОтветственныйЗаОформление);
	ПараметрыФормы.Вставить("ЗаЗаказчикаНаОсновании",		"");
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаПодписиТовары", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДоставкаНажатие(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.ДоставкаНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	ДобавленныеСтроки = РеализацияТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтотОбъект, ВыбранноеЗначение, ИмяТаблицы);
	
	СписокСчетов = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНаОплатуПокупателю) Тогда
			СписокСчетов.Добавить(СтрокаТаблицы.СчетНаОплатуПокупателю);
		КонецЕсли; 
	КонецЦикла;
	
	РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетов, "Номер, Дата");
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, РеквизитыСчетовНаОплату, ПараметрыОбъекта, ПредставленияСубконто);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(ДобавленныеСтроки.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетМаркируемойПродукцииИСМП);
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.ПриДобавленииСчетов(ЭтотОбъект, СписокСчетов);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВГИСМ(Команда)
	ИнтеграцияГИСМКлиентБП.КомандаВыгрузитьВГИСМ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВВЕТИС(Команда)
	
	ДополнительныеПараметры = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ФормаОбъекта", ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	СписокСвойств.Добавить("СчетНаОплатуПокупателю");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетДоходов");
			СписокСвойств.Добавить("Субконто");
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			СписокСвойств.Добавить("СчетРасходов");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

#Область РаботаСоСчетамиНаОплату
	
&НаКлиенте
Процедура ДобавитьИзСчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	СписокТабличныхЧастей = "Товары";
	
	Если Результат.УдаленныеСчета.Количество() > 0 Тогда
		Если Результат.РезультатВыбора = КодВозвратаДиалога.Да Тогда
			РеализацияТоваровУслугФормыКлиент.УдалитьСчетаИзТабличныхЧастей(ЭтотОбъект, Результат.УдаленныеСчета, СписокТабличныхЧастей);
		ИначеЕсли Результат.РезультатВыбора = КодВозвратаДиалога.Нет Тогда
			РеализацияТоваровУслугФормыКлиент.ОчиститьСсылкиНаСчетаВТабличныхЧастях(ЭтотОбъект, Результат.УдаленныеСчета, СписокТабличныхЧастей);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Модифицированность = Результат.УдаленныеСчета.Количество() > 0 
		ИЛИ Результат.ДобавленныеСчета.Количество() > 0;
	
	Если Результат.ДобавленныеСчета.Количество() > 0 Тогда
		ДобавитьИзСчетаНаСервере(СписокТабличныхЧастей, Результат.ДобавленныеСчета);
	КонецЕсли; 
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзСчетаНаСервере(ТабличнаяЧасть, МассивСчетов)
	// Если есть счет по документу, и добавляем еще один, то перенесем счет в строки
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьСчетНаОплатуПоСтрокам(ЭтотОбъект, Объект.СчетНаОплатуПокупателю);
		Объект.СчетНаОплатуПокупателю = Неопределено;
	КонецЕсли; 
	
	РеализацияТоваровУслугФормы.ПриДобавленииСчетов(ЭтотОбъект, МассивСчетов);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, МассивСчетов, Ложь);// Счета учета заполняются здесь
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц(ТабличнаяЧасть);
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработкаОповещенияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяНапоминаниеОбУведомленииОПеремещении(Форма)
	
	Объект = Форма.Объект;
	
	ПрослеживаемыеТовары = Объект.Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	
	ЕстьПрослеживаемыеТовары = ПрослеживаемыеТовары.Количество() > 0;
	
	Возврат ЕстьПрослеживаемыеТовары И Форма.РеализацияВЕАЭС;
	
КонецФункции

&НаСервере
Процедура НапоминатьОбУведомленияхОПеремещении()
	
	УстановитьВидимость(ЭтотОбъект);
	Если ПоказыватьБаннер Тогда
		Если УведомлениеОПеремещенииПодаетсяВТомЧислеДоПересеченияГраницы Тогда
			Элементы.ДекорацияУведомление.Заголовок
				= НСтр("ru = 'В документе присутствуют прослеживаемые товары. Необходимо создать уведомление о перемещении в ЕАЭС и отправить в ФНС.'");
			Элементы.ДекорацияУведомление.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			// Дата отсчета срока - 5 дней со дня продажи товара.
			СрокУведомления = ПрослеживаемостьБП.СрокПодачиУведомления(Объект.Дата);
			
			ШаблонТекста = НСтр("ru = 'В документе присутствуют прослеживаемые товары. До %1 необходимо создать уведомление о перемещении в ЕАЭС и отправить в ФНС.'");
			Элементы.ДекорацияУведомление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, Формат(СрокУведомления, "ДФ='дд ММММ'"));
			Элементы.ДекорацияУведомление.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
		
		Элементы.ГруппаБаннерУведомлениеОПеремещении.Видимость = Истина;
	Иначе
		Элементы.ГруппаБаннерУведомлениеОПеремещении.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НапоминатьОбУведомленииОПеремещении()
	
	ТребуетсяНапоминаниеДо = ТребуетсяНапоминание;
	ПоказыватьБаннерДо     = ПоказыватьБаннер;
	
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОбУведомленииОПеремещении(ЭтотОбъект);
	ПоказыватьБаннер     = ТребуетсяНапоминание 
							И НЕ ЗначениеЗаполнено(УведомлениеОПеремещении) 
							И НЕ ОтключитьБаннерУведомленийОПеремещении
							И НЕ Объект.ПометкаУдаления;
	
	Если ТребуетсяНапоминаниеДо <> ТребуетсяНапоминание
		ИЛИ ПоказыватьБаннерДо <> ПоказыватьБаннер 
		ИЛИ ОбновитьСрокОтправкиУведомлений Тогда
		
		НапоминатьОбУведомленияхОПеремещении();
		ОбновитьСрокОтправкиУведомлений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()

	УдалитьСвязанныеЗаписиНаСервере();
	ПроверкаРНПТКлиент.ЗапуститьПроверкуРНПТВДокументе(ЭтотОбъект);
	
	Если Объект.Товары.Количество()>0 Тогда
		
		// Переприсваиваем текущие элементы, чтобы положение курсора было в конце поля
		
		Если ВызовУдалитьСвязанныеЗаписи = "Номенклатура"
			И Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыКоличество" Тогда
			
			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы["ТоварыЦена"];
			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы["ТоварыГруппаКоличество"].ПодчиненныеЭлементы["ТоварыКоличество"];
			Элементы.Товары.ИзменитьСтроку();
			ВызовУдалитьСвязанныеЗаписи = "";
			
		ИначеЕсли ВызовУдалитьСвязанныеЗаписи = "Количество"
			И Элементы.Товары.ТекущийЭлемент.Имя ="ТоварыЦена" Тогда
			
			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы["ТоварыСумма"]; 
			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы["ТоварыЦена"];
			Элементы.Товары.ИзменитьСтроку();
			ВызовУдалитьСвязанныеЗаписи = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
	УстановитьВидимостьПроверкиРНПТ();
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ТоварыКиЗ_ГИСМ.Видимость      = Форма.ИспользоватьКонтрольныеЗнакиГИСМ;
	Элементы.ФормаВыгрузитьВГИСМ.Видимость = Форма.ИспользоватьКонтрольныеЗнакиГИСМ;
	
	Элементы.ГруппаУведомлениеОПеремещении.Видимость = Форма.ТребуетсяНапоминание 
		И ПрослеживаемостьВызовСервера.МожноДобавлятьУведомленияОПеремещении();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНадписиУведомлениеОПеремещении()
	
	ПрослеживаемостьФормыБП.УстановитьПредставлениеНадписиУведомлениеОПеремещении(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьПодсказокНаСервере()
	
	УправлениеПанельюПодсказки.ИзменитьВидимостьПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЭлементПодсказкиНаФорме(ИмяЭлементаПодсказки) Экспорт
	
	СнятьВыделениеЭлементаПодсказкиНаФорме();
	
	Если ИмяЭлементаПодсказки = "ДобавитьИзСчета" Тогда

		ВыделенныйЭлементПодсказки = "ГруппаДобавитьИзСчета";
		Элемент = Элементы[ВыделенныйЭлементПодсказки];
		Элемент.ЦветФона = УправлениеПанельюПодсказкиКлиентСервер.ЦветФонаВыделенияЭлементаПодсказки();
		ПодключитьОбработчикОжидания("СнятьВыделениеЭлементаПодсказкиНаФорме", 1.3, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеЭлементаПодсказкиНаФорме() Экспорт
	
	ОтключитьОбработчикОжидания("СнятьВыделениеЭлементаПодсказкиНаФорме");
	
	Если ВыделенныйЭлементПодсказки = "ГруппаДобавитьИзСчета" Тогда
		Элемент = Элементы[ВыделенныйЭлементПодсказки];
		Элемент.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ВыделенныйЭлементПодсказки = "";
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		УстановитьВидимостьПроверкиРНПТ();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПроверкаРНПТКлиент.ЗапуститьПроверкуРНПТВДокументе(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБаннерыВестиУчетРасчетовСКонтрагентами()
	
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	ПоказатьБаннерВключитьРасчетыСКонтрагентами = Ложь;
	ПоказатьБаннерВключитьОтражениеВУчете = Ложь;
	ПоказатьКнопкуВключитьОтражениеВУчете = Ложь;
	
	Если Не ВестиУчетРасчетовСКонтрагентами 
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ФункциональностьПрограммы) Тогда
		БаннерБылСкрыт = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РеализацияТоваровУслуг", "БаннерВключитьРасчетыСКонтрагентамиСкрыт");
		ПоказатьБаннерВключитьРасчетыСКонтрагентами = БаннерБылСкрыт <> Истина;
	ИначеЕсли ВестиУчетРасчетовСКонтрагентами 
		И Объект.БезОтраженияВУчете Тогда
		ПоказатьБаннерВключитьОтражениеВУчете = Истина;
		ПоказатьКнопкуВключитьОтражениеВУчете = ПравоДоступа("ИнтерактивноеПроведение", 
			Метаданные.Документы.РеализацияТоваровУслуг);
	КонецЕсли;
	
	Элементы.ГруппаБаннерВключитьРасчетыСКонтрагентами.Видимость = ПоказатьБаннерВключитьРасчетыСКонтрагентами;
	Элементы.ГруппаБаннерВключитьОтражениеВУчете.Видимость = ПоказатьБаннерВключитьОтражениеВУчете;
	Элементы.КнопкаБаннерВключитьОтражениеВУчете.Видимость = ПоказатьКнопкуВключитьОтражениеВУчете;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннерВключитьРасчетыСКонтрагентами()
	
	Элементы.ГруппаБаннерВключитьРасчетыСКонтрагентами.Видимость = Ложь;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РеализацияТоваровУслуг", "БаннерВключитьРасчетыСКонтрагентамиСкрыт", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьОтражениеВУчетеНаСервере()
	
	Объект.БезОтраженияВУчете = Ложь;
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ДокументПроведен = Записать(ПараметрыЗаписи);
	Элементы.ГруппаБаннерВключитьОтражениеВУчете.Видимость = Не ДокументПроведен;
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииНаКлиенте()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтотОбъект, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета", ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаНДС", ТекущиеДанные.АналитикаНДС);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаПартионный", ТекущиеДанные.СчетУчетаПартионный);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("РНПТ", ТекущиеДанные.РНПТ);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("ПодсказкаРНПТ", ТекущиеДанные.ПодсказкаРНПТ);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбработки.ДанныеОбъекта);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ВызовУдалитьСвязанныеЗаписи = "Номенклатура";
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовогоДоговора()
	
	Возврат РаботаСДоговорамиКонтрагентовБП.ПараметрыСозданияНовогоДоговора(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура УстановитьПредлагатьНовыйДоговорСНумерацией()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьПредлагатьНовыйДоговорСНумерацией(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьПроверкиРНПТ()
	
	ОтображатьПроверкуРНПТ = ПроверкаРНПТ.ИспользованиеПроверкиВозможно()
		И ВедетсяУчетПрослеживаемыхТоваров
		И Объект.СведенияПрослеживаемости.Количество() > 0;
		
	Элементы.ГруппаПроверкаРНПТ.Видимость = ОтображатьПроверкуРНПТ;
	Элементы.ТоварыСостояниеПроверкиРНПТ.Видимость = ОтображатьПроверкуРНПТ;
	
КонецФункции

&НаСервере
Процедура ОтобразитьРезультатПроверкиРНПТ() Экспорт
	ПроверкаРНПТ.ОтобразитьРезультатПроверкиРНПТВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьПроверкуРНПТВДокументе()
	ПроверкаРНПТКлиент.ЗапуститьПроверкуРНПТВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиРНПТ()
	ПроверкаРНПТКлиент.ОбработатьРезультатПроверкиРНПТВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРНПТФоновоеЗадание() Экспорт
	ПроверкаРНПТ.ПроверитьРНПТВДокументеФоновоеЗадание(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатПроверкиРНПТПослеЗаписиДокумента() Экспорт
	ПроверкаРНПТ.СохранитьРезультатПроверкиРНПТПослеЗаписиДокумента(ЭтотОбъект);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти 

#Область ЭлектронноеАктирование

//ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

&НаКлиенте
Процедура ЗаполнениеГосконтрактаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЭтотОбъект.ГосконтрактЕИСНеЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоГосконтракту();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГосконтракту() Экспорт
	
	ЭлектронноеАктированиеБП.ЗаполнитьПоГосконтракту(Объект, ЭтотОбъект.ГосконтрактЕИС, "Товары");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеГосконтрактаЕИС()
	
	ЭлектронноеАктированиеБП.ДоговорКонтрагентаПриИзмененииНаСервере(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕИСГосзакупкиОткрытьСписокФайлов(Команда)
	
	ЭлектронноеАктированиеЕИСКлиент.ОткрытьСписокПриложенныхФайловДокумента(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрока = Ложь;

#КонецОбласти 

