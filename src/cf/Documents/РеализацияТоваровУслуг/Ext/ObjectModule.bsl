#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Признак для передачи в счет-фактуру для того, чтобы не устанавливать статус повторно.
Перем УстановленСтатусДокумента; 

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;

	// Определяем условия проведения документа:
	ЭтоКомиссия             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ВестиУчетПоДоговорам    = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	КонтролироватьЗаполнениеКодаТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Документы.РеализацияТоваровУслуг.НеИспользуемыеТабличныеЧасти(ВидОперации, ЭтоКомиссия);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
		
	// Документ без данных о реализованных товарах или услугах
	// считаем заполненным некорректно.
	
	ОсновныеСписки = Новый Массив();
	ОсновныеСписки.Добавить("Товары");
	ОсновныеСписки.Добавить("ВозвратнаяТара");
	ОсновныеСписки.Добавить("Услуги");
	ОсновныеСписки.Добавить("АгентскиеУслуги");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ОсновныеСписки, НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(
		ЭтотОбъект, 
		ОсновныеСписки, 
		ПроверяемыеРеквизиты);
		
	Если НЕ ДеятельностьНаПатенте Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Патент");
	КонецЕсли;
	
	// Проверка периода работ
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы
			И ЗначениеЗаполнено(ПериодНачалаРабот) И ЗначениеЗаполнено(ПериодОкончанияРабот)
			И ПериодНачалаРабот > ПериодОкончанияРабот Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПериодНачалаРабот", "Объект", Отказ);
	КонецЕсли;
	
	// Склад нужен только тогда, когда реализовываются материальные ценности, или на счете учета ведется учет по складам
	Если Товары.Количество() + ВозвратнаяТара.Количество() = 0 
		Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	// Проверяем корректность заполнения реквизитов шапки:
	
	Если НЕ ВестиУчетПоДоговорам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВестиУчетПоДоговорам И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодТНВЭД");
	
	// Проверяем табличную часть "Товары":
	Если Товары.Количество() > 0 Тогда
		ИмяСписка = НСтр("ru = 'Товары'");
		
		Для каждого СтрокаТовары Из Товары Цикл
			// Проверка кода ТН ВЭД.
			Если КонтролироватьЗаполнениеКодаТНВЭД 
				И СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
				И НЕ ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
					СтрокаТовары.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "КодТНВЭД");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			// Для прослеживаемого товара обязательно указывается страна происхождения.
			Если СтрокаТовары.ПрослеживаемыйТовар 
				И НЕ ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаТовары.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если СтрокаТовары.ПрослеживаемыйКомплект И Не ЭтоКомиссия Тогда
				СуммаБезНДС = ?(СуммаВключаетНДС, СтрокаТовары.Сумма - СтрокаТовары.СуммаНДС, СтрокаТовары.Сумма);
				Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
				СтрокиСРНПТ = СведенияПрослеживаемости.Выгрузить(Отбор);
				Если СуммаБезНДС < СтрокиСРНПТ.Итог("Сумма") Тогда 
					ТекстСообщения = НСтр("ru = 'Сумма без НДС по прослеживаемым комплектующим больше суммы без НДС по товару'");
					
					Поле = "" + ИмяСписка + "["+ Формат(СтрокаТовары.НомерСтроки-1,"ЧГ=") + "].РНПТ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;

	// Проверка заполнения табличной части "АгентскиеУслуги"
	ИмяСписка = НСтр("ru = 'Агентские услуги'");

	Если ЭтоКомиссия И АгентскиеУслуги.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документ передачи на комиссию не может содержать услуг.'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,,
			ИмяСписка, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "АгентскиеУслуги", "Объект", Отказ);
	КонецЕсли;

	// Проверка заполнения табличной части "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;

	// Проверка табличной части "Возвратная тара"
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Эти реквизиты проверяются в документе с помощью специального, нетипового механизма. Проверка размещена в ПроверитьЗаполнениеСубконто()
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.Субконто");
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеАктированиеВЕИС") Тогда
		ЭлектронноеАктированиеБП.ТоварыЗаполнитьИдентификаторыСтрокГосконтракта(ЭтотОбъект);
		ЭлектронноеАктированиеБП.ПроверитьИдентификаторыГосконтракта(ЭтотОбъект, Истина, Отказ);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектВыполненияРабот");
		МассивНепроверяемыхРеквизитов.Добавить("Смета");
		МассивНепроверяемыхРеквизитов.Добавить("Смета.Сумма");
	КонецЕсли;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	РеквизитыЗаСсылками = Документы.РеализацияТоваровУслуг.РеквизитыЗаСсылками(ВидОперации);
	
	Если Не СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками) Тогда
		ПроверитьЗаполнениеСубконто(Отказ);
	КонецЕсли;
	
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.РеализацияТоваровУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение статуса счетов на оплату
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(
			ПараметрыПроведения.ТаблицаСчетовНаОплату,
			ПараметрыПроведения.ОтгрузкаТоваровОказаниеУслугПоСчету,
			ПараметрыПроведения.ОтгрузкаВозвратнойТарыПоСчету,
			ПараметрыПроведения.Реквизиты);
		
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
		
	КонецЕсли;
	
	Если БезОтраженияВУчете Тогда
		ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		Движения.Записать();
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров
	ТаблицыСписанныеТоварыИВыпущеннаяПродукция = УчетТоваров.ПодготовитьТаблицыСписанныеТоварыИВыпущеннаяПродукция(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	ТаблицаСписанныеТовары = ТаблицыСписанныеТоварыИВыпущеннаяПродукция.СписанныеТовары;
	ТаблицаВыпущеннаяПродукция = ТаблицыСписанныеТоварыИВыпущеннаяПродукция.ВыпущеннаяПродукция;
	
	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТараТаблицаТовары,
		ПараметрыПроведения.ТараРеквизиты, Отказ);

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	// Таблицы расчетов по авансам с учетом зачисления платежей через посредника
	ТаблицыЗачетаАвансовКассовыйМетод = УчетВзаиморасчетов.ПодготовитьТаблицыЗачетаАвансовКассовыйМетод(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	СтруктураТаблицДляИП = 
		Документы.РеализацияТоваровУслуг.ПодготовитьСтруктуруТаблицИП(
			ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты);
			
	ТаблицаПрочихРасчетовИП = СтруктураТаблицДляИП.ТаблицаПрочихРасчетовИП;
	ТаблицаВзаиморасчетыИП  = СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП;
	
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
	ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
	ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;
	
	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги, ВидОперации);
	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ПараметрыПроведения.НДСТоварыОтгрузка, ВидОперации);
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов",
		ТаблицаСписанныеТовары,
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаВзаиморасчетов);
	
	// Таблица разметки АУСН: исключение из доходов сумм добровольно начисленного НДС по зачтенным авансам.
	ТаблицаРазметкиАУСН = РазметкаОперацийАУСН.ПодготовитьТаблицуЗачетАвансаРеализацияСНДС(
		ПараметрыПроведения.РеквизитыАУСН, ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	Если ПараметрыПроведения.Реквизиты[0].ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
		И ПараметрыПроведения.Реквизиты[0].ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
			ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.Реквизиты)
		
	КонецЕсли;
	
	СписанныеМПЗВыпущеннойПродукцииИП = Неопределено;
	Если ЗначениеЗаполнено(СписанныеМПЗ)
		И ЗначениеЗаполнено(ТаблицаВыпущеннаяПродукция) Тогда
		// Так как документ реализации выпускает продукцию, которой не хватает,
		// то нужно разделить списанные МПЗ на 2 части:
		//  - те, которые есть на момент реализации и их нужно списать со склада (а также проверить их наличие по регистрам ИП)
		//  - те, что будут выпущены этим документом. Проверять их отдельно не нужно - они заведомо будут, т.к. приход сделает этот документ.
		// В первом случае мы будем списывать их штатно из остатков, во втором случае - проверять остатки не нужно.
		
		СписаныеМПЗПоОснованиям = РасчетВыпускаПоДаннымПродаж.РазделитьСписанныеМПЗиВыпущеннуюПродукциюДляИП(СписанныеМПЗ, ТаблицаВыпущеннаяПродукция);
		СписанныеМПЗ = СписаныеМПЗПоОснованиям.СписанныеМПЗ_Остатки;
		СписанныеМПЗВыпущеннойПродукцииИП = СписаныеМПЗПоОснованиям.СписанныеМПЗ_ВыпущеннаяПродукция;
		РасчетВыпускаПоДаннымПродаж.ДобавитьВидМПЗХарактерДеятельности(
			СписанныеМПЗВыпущеннойПродукцииИП, ПараметрыПроведения.ВыпускПродукцииРеквизиты);
	КонецЕсли;
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Движения по прочим расчетам
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(ТаблицаПрочихРасчетовИП, Движения, Отказ);
	
	Если ЗначениеЗаполнено(ТаблицаВыпущеннаяПродукция) Тогда
		
		Документы.ОтчетПроизводстваЗаСмену.ДобавитьКолонкуСодержание(ТаблицаВыпущеннаяПродукция);
		
		РасчетВыпускаПоДаннымПродаж.ЗаполнитьСпособУчетаНДС(ТаблицаВыпущеннаяПродукция,
			ПараметрыПроведения.НДСТоварыРеализация, ПараметрыПроведения.РеквизитыНДСВыпускПродукции);
		
		РасчетВыпускаПоДаннымПродаж.СформироватьДвиженияВыпускПродукцииПоДаннымПродаж(
			ТаблицаВыпущеннаяПродукция, ПараметрыПроведения.ВыпускПродукцииРеквизиты, Движения);
		
		// Выпуск продукции по данным продаж
		УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущеннойПродукции(
			ТаблицаВыпущеннаяПродукция,
		ПараметрыПроведения.ВыпускПродукцииРеквизиты, Движения, Отказ);
		
		ТаблицаВыпускПродукцииУслуг = РасчетВыпускаПоДаннымПродаж.ТаблицаВыпускаПродукцииПоВыпущенойПродукции(
			ТаблицаВыпущеннаяПродукция);
		
		УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
			ТаблицаВыпускПродукцииУслуг,
			ПараметрыПроведения.ВыпускПродукцииРеквизиты, Движения, Отказ);
		
		// Учет НДС
		// Оприходование готовой продукции
		УчетНДСБП.СформироватьДвиженияОприходованияИПродажиПродукции(
			ТаблицаВыпущеннаяПродукция,
			ПараметрыПроведения.РеквизитыНДСВыпускПродукции, Движения, Отказ);
		
		ВыпущеноПродукции = УчетДоходовИРасходовПредпринимателя.ТаблицаВыпускаПродукцииИП(ТаблицаВыпущеннаяПродукция);
		
		ТаблицаПоступлениеПродукцииИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
			ВыпущеноПродукции, ПараметрыПроведения.ВыпускПродукцииРеквизиты);
		
		УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
			ТаблицаПоступлениеПродукцииИП,
			УчетДоходовИРасходовПредпринимателя.НовыйТаблицаСтоимостиПродукции(),
			ПараметрыПроведения.ВыпускПродукцииРеквизиты, Движения, Отказ);
		
		УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуСписанияМПЗВыпущеннойПродукцией(ТаблицыСписанияТоваровИП,
			СписанныеМПЗВыпущеннойПродукцииИП);
		
	КонецЕсли;
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(
		ПараметрыПроведения.ТараТаблицаТовары, ТаблицаСписаннаяТара,
		ПараметрыПроведения.ТараРеквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТары(
		ПараметрыПроведения.ТараТаблицаТовары, ТаблицаСписаннаяТара,
		ПараметрыПроведения.ТараРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияРасчетыПоЭквайрингуЗачетАвансов(
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПрочихРасчетов,
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПроводокВспомогательныеРасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Движения, Отказ);
		
	// Перенос задолженности при оплате курьеру
	ТаблицаВзаиморасчетовПереносЗадолженности = Документы.РеализацияТоваровУслуг.ПодготовитьТаблицуПереносаЗадолженности(
		ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность,
		Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетовПереносЗадолженности,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаТоваровВРознице(
		ПараметрыПроведения.ПереоценкаТоваровВРозницеТаблицаТовары, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
	// Учет НДС
	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.НДСТоварыРеализация, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияРеализацияКомиссионныхТоваров(
		ПараметрыПроведения.НДСТоварыНаКомиссииРеализация, 
		ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСБП.СформироватьДвиженияОтгрузкаКомиссионеру(
		ПараметрыПроведения.НДСТоварыОтгрузкаКомиссионеру, ТаблицаСписанныеТовары,  
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	НДСТоварыОтгрузка = Документы.РеализацияТоваровУслуг.ПодготовитьТаблицуНДСПоОтгрузкеСУчетомКурсаАвансов(
		ПараметрыПроведения.НДСТоварыОтгрузка, ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты);
		
	УчетНДС.СформироватьДвиженияОтгрузкаБезПереходаПраваСобственности(
		НДСТоварыОтгрузка, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Задолженность при отгрузке без перехода права собственности
	УчетВзаиморасчетов.СформироватьДвиженияЗадолженностьПоОтгрузке(
		ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения регистра "Рублевые суммы документов в валюте"

	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаСобственныеТоварыУслуги, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаТоварыУслугиКомитентов, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ТараТаблицаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(
		НДСТоварыОтгрузка, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументаВВалюте, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет УСН
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	РазметкаОперацийАУСН.СформироватьДвиженияРазметки(ПараметрыПроведения.ЗачетАвансовРеквизиты,
		ТаблицаРазметкиАУСН, Движения);
	
	// Учет прослеживаемых товаров
	ПрослеживаемыеОперации = ПараметрыПроведения.ПрослеживаемыеОперации;
	
	ПрослеживаемостьБП.РассчитатьТаблицуПрослеживаемыеОперацииВРублях(
		ПрослеживаемыеОперации,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
		
	ПрослеживаемостьБП.РассчитатьТаблицуПрослеживаемыеОперацииВРублях(
		ПрослеживаемыеОперации,
		ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты);
		
	ПрослеживаемостьБП.РассчитатьТаблицуПрослеживаемыеОперацииВРублях(
		ПрослеживаемыеОперации,
		НДСТоварыОтгрузка,
		ПараметрыПроведения.Реквизиты);

	ТаблицыПрослеживаемости = ПрослеживаемостьБП.ПодготовитьТаблицыПоПрослеживаемости(
		ПараметрыПроведения.Реквизиты,
		ПараметрыПроведения.ПрослеживаемыеТовары,
		ПрослеживаемыеОперации);

	ПрослеживаемостьБП.СформироватьДвиженияРеализацияТоваров(
		ПараметрыПроведения.ПрослеживаемыеТовары,
		ТаблицыПрослеживаемости.ПрослеживаемыеОперации,
		ПараметрыПроведения.Реквизиты,
		Движения);
		
	ПрослеживаемостьБП.СформироватьДвиженияПоступлениеТоваров(
		ТаблицыПрослеживаемости.ПрослеживаемыеТоварыКомиссия,
		Неопределено,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Движения);
		
	ПрослеживаемостьБП.РассчитатьТаблицуПрослеживаемыеОперацииВРублях(
		ПараметрыПроведения.ПрослеживаемыеОперацииПоРаботам,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты,
		Ложь,
		Ложь,
		Истина);
		
	ПрослеживаемостьБП.СформироватьДвиженияРеализацияТоваров(
		ПараметрыПроведения.ПрослеживаемыеТоварыВРаботах,
		ПараметрыПроведения.ПрослеживаемыеОперацииПоРаботам,
		ПараметрыПроведения.Реквизиты,
		Движения);
		
	// Движения по реализации прослеживаемых товаров в страны ЕАЭС
	ПрослеживаемостьПереопределяемый.СформироватьДвиженияПрослеживаемыхТоваровВЕАЭС(
		ПараметрыПроведения.ПрослеживаемыеТоварыРеализованные, ПараметрыПроведения.ПрослеживаемыеТоварыТаблицаДокумента,
		ПараметрыПроведения.Реквизиты,
		Движения);
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);

	// Регистрация в последовательности.
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара),
		Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);

	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ, НЕ УстановленСтатусДокумента);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполняетсяИзСтруктуры = ТипДанныхЗаполнения = Тип("Структура");
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			ВидОперации = ДанныеЗаполнения.ВидОперации;
		КонецЕсли;
		
		Если ЗаполняетсяИзСтруктуры
			И ДанныеЗаполнения.Свойство("Основание") И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ФиксированныйМассив") Тогда
				
				Если ДанныеЗаполнения.Основание.Количество() > 0 
					И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание[0].Метаданные()) Тогда
				
					ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.Основание);
					ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения.Основание[0], Истина);
					
				КонецЕсли; 
				
				Возврат;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ФиксированныйМассив") 
				И ДанныеЗаполнения.Количество() > 0 
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения[0].Метаданные()) Тогда
					
				ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
				ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения[0], Истина);
				
				Возврат;
		Иначе
			Если Не ЗаполняетсяИзСтруктуры
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
				ДокументОснование = ДанныеЗаполнения;
			ИначеЕсли ЗаполняетсяИзСтруктуры
				И ДанныеЗаполнения.Свойство("Основание")
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
				ДокументОснование = ДанныеЗаполнения.Основание;
			ИначеЕсли ЗаполняетсяИзСтруктуры
				И ДанныеЗаполнения.Свойство("ЭтоУниверсальныйДокумент") Тогда
				ЭтоУниверсальныйДокумент = ДанныеЗаполнения.ЭтоУниверсальныйДокумент;
			КонецЕсли;

			Если ДокументОснование <> Неопределено Тогда
				ЗаполнитьПоДокументуОснованию(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснование));
			ИначеЕсли ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
				СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
			Иначе
				СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
					"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
			"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СпособДоставки) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоставкуТранспортнойКомпанией") Тогда
		СпособДоставки = Справочники.СпособыДоставки.Самовывоз;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	Если ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("АдресТаблицыНоменклатуры") Тогда
		ЗаполнитьИзТаблицыНоменклатуры(ДанныеЗаполнения.АдресТаблицыНоменклатуры, СуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ТекущаяДата = Дата;
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерЧекаККМ = 0;
	
	ОтчетМаркетплейса = Документы.ОтчетМаркетплейса.ПустаяСсылка();
	СчетНаОплатуПокупателю = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	
	ЗачетАвансов.Очистить();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.ПроверитьИзменитьАдресДоставки(ЭтотОбъект, ТекущаяДата);
	СтранаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент,"СтранаРегистрации");
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Товары.Количество() > 0 Тогда
		МассивТовары = Новый Массив(Товары.Количество());
		
		Товары.ЗагрузитьКолонку(МассивТовары, "Себестоимость");
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
		Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
			Товары.ЗагрузитьКолонку(МассивТовары, "КиЗ_ГИСМ");
		КонецЕсли;
	КонецЕсли;
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
		
	СведенияПрослеживаемости.Очистить();
	ШтрихкодыУпаковок.Очистить();
	
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(Услуги, Дата);
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(АгентскиеУслуги, Дата);
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(Товары, ВедетсяУчетПрослеживаемыхТоваров, Дата);
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	ЭтоОтгрузка = ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	
	Если ЭтоОтгрузка Тогда
		// Для вида операциия "Отгрузка ..." синхронизацию счета-фактуры делаем всегда, т.к. зависит от учетной политики.
		НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Организация, Дата);
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
		Если Не НачислятьНДСПоОтгрузке Тогда
			ПараметрыДействия.СостояниеФлага = Истина;
		КонецЕсли;
		УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ФИФО 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		И Товары.Количество() > 0 Тогда
		
		МассивТовары = Новый Массив(Товары.Количество());
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
	КонецЕсли; 

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	ЭтоКомиссия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	// Почистим лишние табличные части и реквизиты.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары
		Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером Тогда
	
		Услуги.Очистить();
		АгентскиеУслуги.Очистить();
		ВозвратнаяТара.Очистить();
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		
		Товары.Очистить();
		АгентскиеУслуги.Очистить();
		ВозвратнаяТара.Очистить();
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		АгентскиеУслуги.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы Тогда
		Товары.Очистить();
		АгентскиеУслуги.Очистить();
		ВозвратнаяТара.Очистить();
		
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером)
		И Справочники.Склады.ИспользуетсяНесколькоСкладов() Тогда
			Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы Тогда
		ОбъектВыполненияРабот = Неопределено;
		ПериодНачалаРабот     = Неопределено;
		ПериодОкончанияРабот  = Неопределено;
		Смета.Очистить();
	КонецЕсли;
	
	// Если передаем товар на комиссию, то услуг не может быть
	Если ЭтоКомиссия Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");
		
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	РеализацияВЕАЭС               = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	ВедетсяУчетНДСПоФЗ150         = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	ЗаполнятьКодТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	
	// Если покупатель исполняет обязанности налогового агента, то очистим сумму НДС.
	ВедетсяУчетНДСПоФЗ335         = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
	ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	
	Если НЕ ЗаполнятьКодТНВЭД Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД)Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
			Если ПокупательНалоговыйАгентПоНДС = Истина
				И ВедетсяУчетНДСПоФЗ335 Тогда 
				СтрокаТаблицы.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТаблицы.СуммаНДС = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НДССМежценовойРазницы И Товары.Итог("НалоговаяБазаНДС") = 0 Тогда
		НДССМежценовойРазницы = Ложь;
	ИначеЕсли Не НДССМежценовойРазницы И Товары.Итог("НалоговаяБазаНДС") <> 0 Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			СтрокаТаблицы.НалоговаяБазаНДС = 0;
		КонецЦикла;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Для вида операциия "Отгрузка ..." синхронизацию счета-фактуры делаем всегда, т.к. зависит от учетной политики.
	Если НЕ ЭтоОтгрузка И ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
		Если ЭтоКомиссия Тогда 
			ПараметрыДействия.СостояниеФлага = Истина;
		КонецЕсли;
		УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) Тогда
		Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("Товары");
	ИменаТабличныхЧастей.Добавить("Услуги");
	ИменаТабличныхЧастей.Добавить("АгентскиеУслуги");

	ОбщегоНазначенияБП.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект, ИменаТабличныхЧастей);
	
	ПрослеживаемыйТовар = Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
	Если ВедетсяУчетпрослеживаемыхТоваров Тогда
		Для Каждого Строка Из Товары Цикл
			Если Строка.ПрослеживаемыйТовар = Ложь Тогда
				СтрокиСРНПТ = СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
				Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
					СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьБП.ПодобратьРНПТ(ЭтотОбъект, Отказ);
		КонецЕсли;
		Для Каждого СтрокаСТоваром ИЗ ПрослеживаемыйТовар Цикл
			СтрокаСТоваром.НомерГТД = Неопределено;
		КонецЦикла; 
	ИначеЕсли ВедетсяУчетПрослеживаемыхТоваров И ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьБП.СверитьРНПТПоРаботам(ЭтотОбъект, Отказ);
		КонецЕсли;
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоставкуТранспортнойКомпанией") 
		 И СпособДоставки = Справочники.СпособыДоставки.Самовывоз Тогда
		АдресДоставки = "";
	КонецЕсли; 
	
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
	
	ВидЭлектронногоДокумента = Документы.РеализацияТоваровУслуг.ВидЭлектронногоДокумента(ЭтотОбъект);
	
	Если ЭтоНовый() Тогда
		БезОтраженияВУчете = Не ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусДокумента();
	
	УстановитьСтатусПроверкиРНПТ();
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект,,,НЕ УстановленСтатусДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Поступление, ИмяТабЧастиИсточника = Неопределено, ЗаполнятьСчетаУчета = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	ЗаполнятьТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);

	ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ЭтоКомиссия, Реализация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Реализация	= Истина;
	ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора")
		= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
		
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Товары" Тогда
			
			Если НЕ ПлательщикНДС Тогда
				Если НЕ ЗаполнятьТНВЭД Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
				КонецЕсли;
			ИначеЕсли ПокупательНалоговыйАгентПоНДС = Истина
				И ВедетсяУчетНДСПоФЗ335 Тогда 
				СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЕсли;
			
			Если ЗаполнятьТНВЭД Тогда 
				СтрокаТабличнойЧасти.КодТНВЭД = СведенияОНоменклатуре.КодТНВЭД;
			КонецЕсли;
			
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
				Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Оборудование" Тогда
			
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ВедетсяУчетПрослеживаемыхТоваров Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
				Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Услуги" Тогда 
			
			СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(ИмяТабЧасти = "Услуги", 1, 0));
		
		Если ИмяТабЧасти <> "ВозвратнаяТара" 
			И НЕ (ПокупательНалоговыйАгентПоНДС = Истина
			И ВедетсяУчетНДСПоФЗ335)Тогда
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
			
		КонецЕсли;
		
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	Если ЗаполнятьСчетаУчета Тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			СтрокиДляЗаполненияСчетов, ИмяТабЧасти, ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусДокумента() Экспорт
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	НомерСчетаФактуры = "";
		
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		// Запись из формы документа
		СтатусДокумента = ?(ДополнительныеСвойства.СтатусДокумента,
			Перечисления.СтатусыДокументовРеализации.Подписан, 
			Перечисления.СтатусыДокументовРеализации.НеПодписан);
			
		Если Не ДополнительныеСвойства.ТребуетсяСчетФактура Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		ИначеЕсли ЭтотОбъект.ЭтоУниверсальныйДокумент Тогда
			
			Если ЗначениеЗаполнено(ДополнительныеСвойства.НомерСчетаФактуры) Тогда
				НомерСчетаФактуры = ДополнительныеСвойства.НомерСчетаФактуры;
				Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
					СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
				ИначеЕсли ПометкаУдаления Тогда
					СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
				Иначе
					СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
				КонецЕсли;
			Иначе
				// УПД в статусе "2"
				НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЭтотОбъект.Номер, Истина, Ложь);
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
			КонецЕсли;
		ИначеЕсли ДополнительныеСвойства.ЕстьСчетФактура Тогда
			НомерСчетаФактуры = ДополнительныеСвойства.НомерСчетаФактуры;
			Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
			ИначеЕсли ПометкаУдаления Тогда
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
			Иначе
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
			КонецЕсли;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
	Иначе
		// Необходимо сделать запись состояния счета-фактуры для случаев "Отсутствует", "Не требуется".
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ЭтотОбъект.Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			// Движения по статусам сформирует счет-фактура
			Возврат;
		КонецЕсли;
		
		СтатусДокумента = Неопределено;
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Организация, Дата);
		НеТребуетсяСФПриОтгрузке = НЕ НачислятьНДСПоОтгрузке 
			И ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
			ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			ИЛИ ДокументБезНДС 
			ИЛИ НеТребуетсяСФПриОтгрузке Тогда 
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановленСтатусДокумента = Истина;
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус            = СтатусДокумента;
	СтатусыДокумента.СтатусСФ          = СтатусСчетаФактуры;
	СтатусыДокумента.НомерСчетаФактуры = НомерСчетаФактуры;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ЭтотОбъект.Ссылка, СтатусыДокумента);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, СписокСчетовНаОплату, ОчищатьСтроки = Истина)
	Перем РеквизитыОснования, ВозвратнаяТараКРеализации;
	
	МассивИмен = СтрРазделить(ИменаТабличныхЧастей, ", ", Ложь);
	
	Если ОчищатьСтроки Тогда
		Для Каждого ИмяТабЧасти Из МассивИмен Цикл
			ЭтотОбъект[ИмяТабЧасти].Очистить();
		КонецЦикла;
	КонецЕсли; 
	
	СкопироватьТовары         = (МассивИмен.Найти("Товары") <> Неопределено);
	СкопироватьУслуги         = (МассивИмен.Найти("Услуги") <> Неопределено);
	СкопироватьВозвратнуюТару = (МассивИмен.Найти("ВозвратнаяТара") <> Неопределено);
	
	ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
	ЗаполнятьПризнакПрослеживаемости = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
	
	ТаблицаРеализацийПоСчету = Документы.СчетНаОплатуПокупателю.РеализацииПоСчетам(СписокСчетовНаОплату);
	РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетовНаОплату, "Контрагент, ДоговорКонтрагента, ДокументБезНДС, СуммаВключаетНДС");
	
	Для каждого СчетНаОплату Из СписокСчетовНаОплату Цикл
		
		РеквизитыСчета = РеквизитыСчетовНаОплату[СчетНаОплату];
		ЗаполнятьСчетПоСтроке = (Контрагент = РеквизитыСчета.Контрагент) 
			И (РеквизитыСчета.ДоговорКонтрагента = ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(РеквизитыСчета.ДоговорКонтрагента));
		
		РеализацииПоСчетуНаОплату = ТаблицаРеализацийПоСчету.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплату));
		
		СтрокиКУдалению = РеализацииПоСчетуНаОплату.НайтиСтроки(Новый Структура("Реализация", Ссылка));
		Для каждого Строка Из СтрокиКУдалению Цикл
			РеализацииПоСчетуНаОплату.Удалить(Строка);
		КонецЦикла;
		
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
		
		ПересчитатьСуммы = РеквизитыСчета.СуммаВключаетНДС <> СуммаВключаетНДС;
		
		ДокументБезНДС = ДокументБезНДС И РеквизитыСчета.ДокументБезНДС;

		// Товары и Услуги
		Если СкопироватьТовары Или СкопироватьУслуги Тогда
			
			ТоварыУслугиКРеализации = Документы.СчетНаОплатуПокупателю.ТоварыУслугиКРеализацииПоСчету(
				СчетНаОплату, РеализацииПоСчетуНаОплату, ЗаполнятьПризнакПрослеживаемости);
				
			Если ЗаполнятьПризнакПрослеживаемости И СкопироватьТовары Тогда
				РеквизитыПрослеживаемости = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
					ТоварыУслугиКРеализации.ВыгрузитьКолонку("Номенклатура"), Дата);
			КонецЕсли;
				
			Для Каждого СтрокаОснования Из ТоварыУслугиКРеализации Цикл
				ЭтоУслуга = СтрокаОснования.ЭтоУслуга;
				
				Если ЭтоУслуга И СкопироватьУслуги Тогда
					НоваяСтрока = Услуги.Добавить();
				ИначеЕсли НЕ ЭтоУслуга И СкопироватьТовары Тогда
					НоваяСтрока = Товары.Добавить();
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗаполнятьСчетПоСтроке Тогда
					НоваяСтрока.СчетНаОплатуПокупателю = СчетНаОплату;
				КонецЕсли; 
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
				Если ЗаполнятьПризнакПрослеживаемости И СкопироватьТовары Тогда
					ПризнакиПрослеживаемости = РеквизитыПрослеживаемости.Получить(НоваяСтрока.Номенклатура);
					Если ПризнакиПрослеживаемости <> Неопределено Тогда
						НоваяСтрока.ПрослеживаемыйТовар = ПризнакиПрослеживаемости.ПрослеживаемыйТовар
							Или ПризнакиПрослеживаемости.ПрослеживаемыйКомплект;
						НоваяСтрока.ПрослеживаемыйКомплект = ПризнакиПрослеживаемости.ПрослеживаемыйКомплект;
					КонецЕсли;
				КонецЕсли;

				Если РеквизитыСчета.ДокументБезНДС Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ПересчитатьСуммы Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, -НоваяСтрока.СуммаНДС);
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, НоваяСтрока.Сумма, НоваяСтрока.Сумма/НоваяСтрока.Количество);
				КонецЕсли;
				
				Если ПокупательНалоговыйАгентПоНДС = ИСТИНА И ВедетсяУчетНДСПоФЗ335 И НЕ ЭтоУслуга Тогда 
					НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
					НоваяСтрока.СуммаНДС = 0;
				ИначеЕсли ПересчитатьСуммы Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Возвратная тара
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И СкопироватьВозвратнуюТару Тогда
			Если ВозвратнаяТараКРеализации = Неопределено Тогда
				ВозвратнаяТараКРеализации = Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату);
			ИНаче
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату), 
					ВозвратнаяТараКРеализации);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Если ВозвратнаяТараКРеализации <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВозвратнаяТараКРеализации, ВозвратнаяТара);
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьПоСчету(ИменаТабличныхЧастей, СписокСчетовНаОплату, ОчишатьСтроки = Истина) Экспорт
	
	Если СписокСчетовНаОплату.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, СписокСчетовНаОплату, ОчишатьСтроки);
	
	МассивИмен = СтрРазделить(ИменаТабличныхЧастей, ", ", Ложь);
	Для Каждого ИмяТабЧасти Из МассивИмен Цикл
		СчетаУчетаВДокументах.ЗаполнитьСтроки(ЭтотОбъект[ИмяТабЧасти], ИмяТабЧасти, ЭтотОбъект, Документы.РеализацияТоваровУслуг);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионера(ОтчетКомиссионераСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОтчетКомиссионераСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СуммаПередачи = 0
	|			ТОГДА ОтчетКомиссионераОПродажахТовары.Цена
	|		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.ЦенаПередачи
	|	КОНЕЦ КАК Цена,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.СуммаПередачи = 0
	|				ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма
	|			ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаПередачи
	|		КОНЕЦ) КАК Сумма,
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйКомплект КАК ПрослеживаемыйКомплект,
	|	НЕ ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Ссылка ЕСТЬ NULL КАК ЕстьСведенияОПрослеживаемости
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.СведенияПрослеживаемости КАК ОтчетКомиссионераОПродажахСведенияПрослеживаемости
	|		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Ссылка
	|			И ОтчетКомиссионераОПродажахТовары.ИдентификаторСтроки = ОтчетКомиссионераОПродажахСведенияПрослеживаемости.ИдентификаторСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйТовар,
	|	ОтчетКомиссионераОПродажахТовары.ПрослеживаемыйКомплект,
	|	НЕ ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Ссылка ЕСТЬ NULL,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СуммаПередачи = 0
	|			ТОГДА ОтчетКомиссионераОПродажахТовары.Цена
	|		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.ЦенаПередачи
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТоварыВозвращенные.Номенклатура КАК Номенклатура,
	|	СУММА(ОтчетКомиссионераОПродажахТоварыВозвращенные.Количество) КАК Количество,
	|	ОтчетКомиссионераОПродажахТоварыВозвращенные.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.ТоварыВозвращенные КАК ОтчетКомиссионераОПродажахТоварыВозвращенные
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТоварыВозвращенные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахТоварыВозвращенные.Номенклатура,
	|	ОтчетКомиссионераОПродажахТоварыВозвращенные.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Количество КАК Количество,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Комитент КАК Комитент,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Номенклатура КАК Номенклатура,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СуммаПередачи = 0
	|			ТОГДА ОтчетКомиссионераОПродажахТовары.Цена
	|		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.ЦенаПередачи
	|	КОНЕЦ КАК Цена,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.СведенияПрослеживаемости КАК ОтчетКомиссионераОПродажахСведенияПрослеживаемости
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|			И ОтчетКомиссионераОПродажахСведенияПрослеживаемости.ИдентификаторСтроки = ОтчетКомиссионераОПродажахТовары.ИдентификаторСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахСведенияПрослеживаемости.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары             = РезультатЗапроса[0].Выгрузить();
	ТаблицаТоварыВозвращенные = РезультатЗапроса[1].Выгрузить();
	ТаблицаПрослеживаемость   = РезультатЗапроса[2].Выгрузить();
	
	Для каждого СтрокаТоварыРеализованные Из ТаблицаТовары Цикл
		
		ТоварыВозвращенные = ТаблицаТоварыВозвращенные.НайтиСтроки(
			Новый Структура("Номенклатура, СтавкаНДС", СтрокаТоварыРеализованные.Номенклатура, СтрокаТоварыРеализованные.СтавкаНДС));
			
		Если ТоварыВозвращенные.Количество() > 0 
				И ТоварыВозвращенные[0].Количество >= СтрокаТоварыРеализованные.Количество Тогда
		
			ТоварыВозвращенные[0].Количество = ТоварыВозвращенные[0].Количество - СтрокаТоварыРеализованные.Количество;
			
			Продолжить;
		ИначеЕсли ТоварыВозвращенные.Количество() > 0 Тогда
			
			КоличествоКПередаче = СтрокаТоварыРеализованные.Количество - ТоварыВозвращенные[0].Количество;
			ТаблицаТоварыВозвращенные.Удалить(ТоварыВозвращенные[0]);
			
		Иначе
			КоличествоКПередаче = СтрокаТоварыРеализованные.Количество;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоварыРеализованные);
		
		Если КоличествоКПередаче < СтрокаТабличнойЧасти.Количество Тогда
			СтрокаТабличнойЧасти.Сумма = 
				СтрокаТабличнойЧасти.Сумма*КоличествоКПередаче/СтрокаТабличнойЧасти.Количество;
				
			СтрокаТабличнойЧасти.Количество = КоличествоКПередаче;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
											СтрокаТоварыРеализованные.Сумма,
											Истина,
											УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
											
		Если СтрокаТоварыРеализованные.ЕстьСведенияОПрослеживаемости Тогда
			Отбор = Новый Структура("Номенклатура, Цена, СтавкаНДС");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТабличнойЧасти);
			
			Для каждого СтрокаПрослеживаемость Из ТаблицаПрослеживаемость.Скопировать(Отбор) Цикл
				СтрокаТабличнойЧастиПрослеживаемость = СведенияПрослеживаемости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиПрослеживаемость, СтрокаПрослеживаемость);
				
				Если КоличествоКПередаче < СтрокаТоварыРеализованные.Количество Тогда
					СтрокаТабличнойЧастиПрослеживаемость.Количество = 
						СтрокаТабличнойЧастиПрослеживаемость.Количество * КоличествоКПередаче / СтрокаТоварыРеализованные.Количество;
						
					СтрокаТабличнойЧастиПрослеживаемость.КоличествоПрослеживаемости = 
						СтрокаТабличнойЧастиПрослеживаемость.КоличествоПрослеживаемости * КоличествоКПередаче / СтрокаТоварыРеализованные.Количество;
						
					СтрокаТабличнойЧастиПрослеживаемость.Сумма = 
						СтрокаТабличнойЧастиПрослеживаемость.Сумма * КоличествоКПередаче / СтрокаТоварыРеализованные.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Если НЕ СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество, 2));
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(ЭтотОбъект.Товары, "Товары", ЭтотОбъект, Документы.РеализацияТоваровУслуг);
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(МассивОснований)
	
	Основание = МассивОснований[0];
	
	// Поддерживается множественный ввод на основании только для счета, для остальных документов - берется первый из списка оснований
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Если Не ЗначениеЗаполнено(ВидОперации) Тогда
			ВидОперации = Документы.РеализацияТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(МассивОснований);
		КонецЕсли;
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"АдресДоставки, СтруктурнаяЕдиница, СпособДоставки, СпособДоставки.Контрагент");
		
		СпособДоставки = ДанныеОснования.СпособДоставки;
		АдресДоставки  = ДанныеОснования.АдресДоставки;
		Перевозчик     = ДанныеОснования.СпособДоставкиКонтрагент;
		
		СчетНаОплатуПокупателю = Основание;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание, Истина);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", Основание.Метаданные()) Тогда
			ЭтотОбъект.СтранаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.Контрагент,"СтранаРегистрации");
		КонецЕсли;
		
		ПараметрыОбъекта = Новый Структура("ВидОперации, ДеятельностьНаПатенте");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ВидОперации) Тогда
			МассивВидовДоговоров = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(
				ВидОперации, Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		Иначе
			МассивВидовДоговоров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		
		Если МассивВидовДоговоров.Найти(ВидДоговораКонтрагента) = Неопределено Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		// заполним банковский счет
		Если ЗначениеЗаполнено(ДанныеОснования.СтруктурнаяЕдиница)
		   И ТипЗнч(ДанныеОснования.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
			БанковскийСчетОрганизации = ДанныеОснования.СтруктурнаяЕдиница;
		КонецЕсли;
		
		ИменаТабличныхЧастей = "Товары, Услуги, ВозвратнаяТара";
		СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, МассивОснований);
		
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеАктированиеВЕИС") Тогда
			ЭлектронноеАктированиеБП.УслугиЗаполнитьИдентификаторыСтрокГосконтракта(ЭтотОбъект);			
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"ВалютаДокумента, ПодразделениеОрганизации, ВидОперации, Организация, Склад");
			
		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Документы.РеализацияТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание));
		КонецЕсли;
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.Склад, "ТипСклада");
		Если ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Склад = ДанныеОснования.Склад;
		КонецЕсли;
		
		Организация              = ДанныеОснования.Организация;
		ВалютаДокумента          = ДанныеОснования.ВалютаДокумента;
		ПодразделениеОрганизации = ДанныеОснования.ПодразделениеОрганизации;
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		
		// Флаги включения налогов.
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		// Счета учета будут заполнены позднее, при вызове ЗаполнениеДокументов.Заполнить()
		ЗаполнитьПоПоступлению("Товары", "Заполнить", Основание, "Товары", Ложь);
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание, "ВозвратнаяТара", Ложь);
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
			ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование", Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"ВалютаДокумента, ПодразделениеОрганизации, Организация, Контрагент, ДоговорКонтрагента");
			
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаТоваров;
		
		Организация              = ДанныеОснования.Организация;
		ВалютаДокумента          = ДанныеОснования.ВалютаДокумента;
		ПодразделениеОрганизации = ДанныеОснования.ПодразделениеОрганизации;
		Контрагент               = ДанныеОснования.Контрагент;
		ДоговорКонтрагента       = ДанныеОснования.ДоговорКонтрагента;
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		
		// Флаги включения налогов.
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		ЗаполнитьПоОтчетуКомиссионера(Основание);
		
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеАктированиеВЕИС") Тогда
		ЭлектронноеАктированиеБП.ТоварыЗаполнитьИдентификаторыСтрокГосконтракта(ЭтотОбъект);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСубконто(Отказ)
	
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект, 
		"СчетДоходов", 
		"Субконто", 
		НСтр("ru = 'Субконто'"), 
		"Товары", 
		НСтр("ru = 'Товары'"), 
		Отказ);
			
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект,
		"СчетДоходов",
		"Субконто",
		НСтр("ru = 'Субконто'"),
		"Услуги",
		НСтр("ru = 'Услуги'"),
		Отказ);
			
КонецПроцедуры

Процедура ЗаполнитьИзТаблицыНоменклатуры(АдресТаблицыНоменклатуры, СуммаВключаетНДС)
	
	ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(АдресТаблицыНоменклатуры);
	ПараметрыОбъекта = РаботаСНоменклатуройБП.НовыеПараметрыОбъекта();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	ПараметрыОбъекта.Реализация = Истина;
	
	Номенклатура = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		Номенклатура, ПараметрыОбъекта);
	
	Для Каждого Элемент Из ТаблицаНоменклатуры Цикл
		НайденныеСведения = СведенияОНоменклатуре[Элемент.Номенклатура];
		Если НайденныеСведения.Услуга Тогда
			НоваяСтрока = Услуги.Добавить();
		Иначе
			НоваяСтрока = Товары.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		Если НайденныеСведения.СчетаУчета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСведения.СчетаУчета);
		КонецЕсли;
		НоваяСтрока.Субконто = НайденныеСведения.Субконто;
		НоваяСтрока.СтавкаНДС = НайденныеСведения.СтавкаНДС;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПараметрыОбъекта.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиРНПТ()
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыПроверокРНПТДокументов.УстановитьСтатусПроверкиРНПТ(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

УстановленСтатусДокумента = Ложь;

#КонецОбласти

#КонецЕсли