#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Спецодежда",   "Спецодежда");
	СписокТабличныхЧастей.Добавить("Спецоснастка", "Спецоснастка");
	СписокТабличныхЧастей.Добавить("ИнвентарьИХозяйственныеПринадлежности", "ИнвентарьИХозяйственныеПринадлежности");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборКодаОперацииПрослеживаемости" Тогда
		ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСписаниеМатериаловИзЭксплуатации";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
	Для Каждого Строка Из Объект.ИнвентарьИХозяйственныеПринадлежности Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Строка, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСписанияРасходовПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКодОперацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("КодОперацииПрослеживаемости, ТекущийДокумент", Объект.КодОперацииПрослеживаемости, Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ВыборКодаОперацииПрослеживаемости", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпецодежда

&НаКлиенте
Процедура СпецодеждаНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Спецодежда.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы  = Новый Структура(
		"Номенклатура, ПартияМатериаловВЭксплуатации,
		|Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СпецодеждаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаПартияМатериаловВЭксплуатацииПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Спецодежда.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы  = Новый Структура(
		"Номенклатура, ПартияМатериаловВЭксплуатации,
		|Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СпецодеждаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпецоснастка

&НаКлиенте
Процедура СпецоснасткаПриИзменении(Элемент)

	ОтмечатьПустоеПодразделение = Объект.Спецоснастка.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Спецоснастка.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ПартияМатериаловВЭксплуатации,
		|Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СпецоснасткаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаПартияМатериаловВЭксплуатацииПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Спецоснастка.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ПартияМатериаловВЭксплуатации,
		|Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СпецоснасткаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентарьИХозяйственныеПринадлежности

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПередУдалением(Элемент, Отказ)
	ВыделенныеСтроки = Элементы.ИнвентарьИХозяйственныеПринадлежности.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ИнвентарьИХозяйственныеПринадлежности.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПослеУдаления(Элемент)
	
		НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
		
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Элемент.ТекущиеДанные, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные, Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ИнвентарьИХозяйственныеПринадлежностиРНПТ" Тогда
		ТекущиеДанные = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПараметрыФормыПодбора = ПрослеживаемостьФормыКлиентБП.ПодготовитьСтруктуруПараметровДляФормыПодбораРНПТ();
			ПараметрыФормыПодбора.ЭтоПоступление         = Ложь;
			ПараметрыФормыПодбора.ПрослеживаемыйКомплект = ТекущиеДанные.ПрослеживаемыйКомплект;

			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ИнвентарьИХозяйственныеПринадлежности", ПараметрыФормыПодбора);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ИнвентарьИХозяйственныеПринадлежностиПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ПрослеживаемыйТовар, СтранаПроисхождения, ПрослеживаемыйКомплект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВедетсяУчетПрослеживаемыхТоваров");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров = ВедетсяУчетПрослеживаемыхТоваров;
	
	ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиЗаполнитьПоОстаткам(Команда)

	Если Объект.ИнвентарьИХозяйственныеПринадлежности.Количество() > 0 Тогда
		СИстекшимСрокомПолезногоИспользования = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполненияИнвентаряПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		ПоказатьВопрос(Оповещение,ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьЗаполнитьПоОстаткамСИстекшимСрокомПолезногоИспользования(Команда)

	Если Объект.ИнвентарьИХозяйственныеПринадлежности.Количество() > 0 Тогда
		СИстекшимСрокомПолезногоИспользования = Истина;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполненияИнвентаряПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		ПоказатьВопрос(Оповещение,ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПодбор(Команда)

	ДействиеПодбор("ИнвентарьИХозяйственныеПринадлежности");

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаЗаполнитьПоОстаткам(Команда)

	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Спецодежда.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		СИстекшимСрокомПолезногоИспользования = Ложь;
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПриЗаполненииСпецодеждыПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаЗаполнитьПоОстаткамСИстекшимСрокомПолезногоИспользования(Команда)

	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Спецодежда.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		СИстекшимСрокомПолезногоИспользования = Истина;
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПриЗаполненииСпецодеждыПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаПодбор(Команда)

	ДействиеПодбор("Спецодежда");

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаЗаполнитьПоОстаткам(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Не указано подразделение организации!
			|Заполнение невозможно!'"));
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Спецоснастка.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		СИстекшимСрокомПолезногоИспользования = Ложь;
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПриЗаполненииСпецоснасткуПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаЗаполнитьПоОстаткамСИстекшимСрокомПолезногоИспользования(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Не указано подразделение организации!
			|Заполнение невозможно!'"));
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Спецоснастка.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При заполнении табличная часть будет очищена.
			|Продолжить?'");
		СИстекшимСрокомПолезногоИспользования = Истина;
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПриЗаполненииСпецоснасткуПоОстаткамЗавершение", ЭтотОбъект, СИстекшимСрокомПолезногоИспользования);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаПодбор(Команда)

	ДействиеПодбор("Спецоснастка");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// ПодразделениеОрганизации
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодразделениеОрганизации");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ПодразделениеОрганизации", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ОтмечатьПустоеПодразделение", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//  ИнвентарьИХозяйственныеПринадлежностиСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИнвентарьИХозяйственныеПринадлежностиСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// РНПТ
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИнвентарьИХозяйственныеПринадлежностиРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>'"));
	
	
	// РНПТ по комплектам
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИнвентарьИХозяйственныеПринадлежностиРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.РНПТ", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйКомплект", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<...>'"));

	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИнвентарьИХозяйственныеПринадлежностиРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИнвентарьИХозяйственныеПринадлежности.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИнвентарьИХозяйственныеПринадлежностиПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ОтмечатьПустоеПодразделение = Объект.Спецоснастка.Количество() > 0;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	УправлениеФормой(ЭтаФорма);
	
	Для Каждого Строка Из Объект.ИнвентарьИХозяйственныеПринадлежности Цикл
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, Строка, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
 	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Элементы.ГруппаСчетСписания.Видимость = 
		Объект.СпособСписанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыСписанияРасходов.ВДебетСчетаУказанногоВДокументе");
	Элементы.ИнвентарьИХозяйственныеПринадлежностиГруппаРНПТ.Видимость = Форма.ВедетсяУчетПрослеживаемыхТоваров;
	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
	РаботаСНоменклатуройБП.ОбновитьПризнакПрослеживаемости(
		Объект.ИнвентарьИХозяйственныеПринадлежности, ЭтотОбъект.ВедетсяУчетПрослеживаемыхТоваров, Объект.Дата);
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Спецодежда" Тогда
		Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Спецоснастка" Тогда
		Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
	КонецЕсли;

КонецПроцедуры

// Обслуживание подбора

&НаКлиенте
Процедура ДействиеПодбор(ИмяТаблицы)

	Перем Команда, Валюта;

	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(,"По справочнику");

	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Спецодежда" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Спецодежда'");
	ИначеЕсли ИмяТаблицы = "Спецоснастка" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Спецоснастка'");
	ИначеЕсли ИмяТаблицы = "ИнвентарьИХозяйственныеПринадлежности" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Инвентарь и хозяйственные принадлежности'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора,
		Объект.Ссылка,
		ПредставлениеТаблицы);

	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , Неопределено);
	СтруктураПараметровПодбора.Вставить("Валюта"             , Валюта);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента" , Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент"         , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"        , Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Склад"              , Неопределено);
	СтруктураПараметровПодбора.Вставить("Подразделение"      , Объект.ПодразделениеОрганизации);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"     , Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок"          , ЗаголовокПодбора);
	СтруктураПараметровПодбора.Вставить("СписокПодборов"     , СписокЗапросов);
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы"         , ИмяТаблицы);
	СтруктураПараметровПодбора.Вставить("Услуги"             , Ложь);

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", СтруктураПараметровПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	Если ИмяТаблицы <> "ИнвентарьИХозяйственныеПринадлежности" Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина), , ДанныеОбъекта.Дата);
	КонецЕсли;
		
	Для Каждого СтрокаМатериала Из ТаблицаМатериалов Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаМатериала);
		
		Если ИмяТаблицы <> "ИнвентарьИХозяйственныеПринадлежности" Тогда
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СчетаУчета);
		Иначе
			
			ДанныеОбъекта = Новый Структура("Дата, Организация");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
			
			Если ВедетсяУчетПрослеживаемыхТоваров И СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
				Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаТабличнойЧасти.СтранаПроисхождения    = СведенияОНоменклатуре.СтранаПроисхождения;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			Иначе
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар    = Ложь;
				СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();
	
КонецПроцедуры

// Прочий функционал:

&НаСервере
Процедура ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(СИстекшимСрокомПолезногоИспользования = Ложь)

	Объект.Спецодежда.Очистить();

	УчетМатериаловВЭксплуатации.ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(
		Объект, 
		Объект.Спецодежда, 
		,
		СИстекшимСрокомПолезногоИспользования); 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(СИстекшимСрокомПолезногоИспользования = Ложь)

	Объект.Спецоснастка.Очистить();

	УчетМатериаловВЭксплуатации.ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(
		Объект,
		Объект.Спецоснастка,
		,
		СИстекшимСрокомПолезногоИспользования);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации(СИстекшимСрокомПолезногоИспользования = Ложь)

	Объект.ИнвентарьИХозяйственныеПринадлежности.Очистить();

	УчетМатериаловВЭксплуатации.ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации(
		Объект,
		Объект.ИнвентарьИХозяйственныеПринадлежности, 
		СИстекшимСрокомПолезногоИспользования);
		
	НастроитьВидимостьНадписиКодаОперацииПрослеживаемости();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СпецодеждаПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Перем Склад;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации)
		И ТипЗнч(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации, "Склад");
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Склад", Склад);
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
		ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Спецодежда", СчетаУчета);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СпецоснасткаПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Перем Склад;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации)
		И ТипЗнч(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ПартияМатериаловВЭксплуатации, "Склад");
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Склад", Склад);
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
		ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Спецоснастка", СчетаУчета);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьЗаполненияТабличнойЧасти()

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru='Заполнение возможно только в непроведенном документе.'"));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВопросПередЗаполненияИнвентаряПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриЗаполненииСпецодеждыПоОстаткамЗавершение(Результат, СИстекшимСрокомПолезногоИспользования) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(СИстекшимСрокомПолезногоИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриЗаполненииСпецоснасткуПоОстаткамЗавершение(Результат, СИстекшимСрокомПолезногоИспользования) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(СИстекшимСрокомПолезногоИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоДт", "", "СубконтоДт", "", "СчетДт");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура НастроитьВидимостьНадписиКодаОперацииПрослеживаемости()
	
	ПрослеживаемыйТоварВТЧ = Объект.ИнвентарьИХозяйственныеПринадлежности.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	
	Если ПрослеживаемыйТоварВТЧ.Количество() > 0 И ВедетсяУчетПрослеживаемыхТоваров Тогда
		Элементы.НадписьКодОперации.Видимость = Истина;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	Иначе
		Объект.КодОперацииПрослеживаемости =
		ПредопределенноеЗначение("Справочник.КодыОперацийПрослеживаемости.ПустаяСсылка");
		Элементы.НадписьКодОперации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКодаОперацииПрослеживаемости()
	
	Если ЗначениеЗаполнено(Объект.КодОперацииПрослеживаемости) Тогда 
		НадписьКодОперации = СтрШаблон("%1 - %2",
		Объект.КодОперацииПрослеживаемости, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОперацииПрослеживаемости, "Наименование"));
		
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		НадписьКодОперации = НСтр("ru='<Выбрать>'");
		Элементы.НадписьКодОперации.ЦветТекста = ЦветаСтиля.ВажноеСобытие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодаОперацииПрослеживаемости(ВыбранноеЗначение)
	
	Если Объект.КодОперацииПрослеживаемости <> ВыбранноеЗначение Тогда
		Модифицированность = Истина;
		Объект.КодОперацииПрослеживаемости = ВыбранноеЗначение;
		ОбновитьЗаголовокКодаОперацииПрослеживаемости();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.ИнвентарьИХозяйственныеПринадлежности.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТовара, Ложь);
		КонецЦикла;
	КонецЦикла;
		
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров Тогда
		СтрокаТаблицы.ПрослеживаемыйТовар    = СведенияОНоменклатуре.ПрослеживаемыйТовар
		Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
		СтрокаТаблицы.СтранаПроисхождения    = СведенияОНоменклатуре.СтранаПроисхождения;
		СтрокаТаблицы.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТаблицы.ПрослеживаемыйТовар    = Ложь;
		СтрокаТаблицы.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти, Ложь);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти