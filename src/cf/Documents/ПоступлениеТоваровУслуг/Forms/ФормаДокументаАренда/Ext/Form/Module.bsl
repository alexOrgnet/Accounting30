#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ЭтоНоваяСтрока;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаДокументаАренда",
		НСтр("ru='Новости: Поступление (акты, накладные, УПД)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
		ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка поступлений или счетов-фактур.
		Если Не Объект.Ссылка.Пустая() 
			И (Параметр.Найти(Объект.Ссылка) <> Неопределено ИЛИ Параметр.Найти(СчетФактура) <> Неопределено) Тогда
			СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
			ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
			ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтотОбъект, Отказ, ПараметрыЗаписи);
			
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.СохранитьПараметрыДоговора(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент,
		ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПоступлениеТоваровУслугФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПриЗаписиНаСервере(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
		
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерВходящегоДокументаПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиент.ДатаВходящегоДокументаПриИзменении(ЭтотОбъект);

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	
	ВведенноеЗначение = ?(Элемент.ТекстРедактирования = Строка(Объект.ДоговорКонтрагента),
		"", Элемент.ТекстРедактирования);
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорСоздание(
		Элемент, ВведенноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = ПараметрыСозданияНовогоДоговора();
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(
		Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерСчетаФактурыПолученногоПриИзменении(ЭтотОбъект, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаПродавцы = ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере();
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПД(ЭтотОбъект, СтандартнаяОбработка, АдресХранилищаПродавцы);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаАрендыПриИзменении(Элемент)
	
	СпособУчетаАрендыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентСоздание(Элемент, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, Ложь);
	СтрокаТаблицы.АналитикаУчета = "<...>";
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	Если Объект.НДСНеВыделять Тогда
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтотОбъект, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета", ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбработки.ДанныеОбъекта);
		
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиентБП.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "Услуги", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "УслугиАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)

	Если Элементы.Услуги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Услуги.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "УслугиАналитикаУчета"
			И НЕ Элементы.Услуги.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтотОбъект, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтотОбъект, Команда);	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	СпособУчетаАренды = ?(Объект.ВедетсяУчетПредметовАренды, 1, 0);
	
	УстановитьПараметрыПоДоговору();
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
	ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
	ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
	
	ПоступлениеТоваровУслугФормы.ЗаполнитьСписокВыбораУслугиОтражениеВУСН(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоДоговору()
    
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, 
			"ВидДоговора, ВалютаВзаиморасчетов, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора");
		ВидДоговора           = РеквизитыДоговора.ВидДоговора;
		ЭтоКомиссия           = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ЭтоКомиссияНаЗакупку  = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		УчетАгентскогоНДС     = РеквизитыДоговора.УчетАгентскогоНДС;
		ВидАгентскогоДоговора = РеквизитыДоговора.ВидАгентскогоДоговора;
		ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		РасчетыВУЕ            = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ПрименяютсяСтавки4и2  = РеквизитыДоговора.НДСПоСтавкам4и2;
	Иначе
		ВидДоговора           = Неопределено;
		ЭтоКомиссияНаЗакупку  = Ложь;
		УчетАгентскогоНДС     = Ложь;
		РасчетыВУЕ            = Ложь;
		ПрименяютсяСтавки4и2  = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	// В форме услуг параметры выбора счетов учета не используются.
	// Процедура необходима для совместимости с другими формами документа.
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС                    = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименениеУСН                    = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы              = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПрименяетсяАУСН                  = УчетнаяПолитика.ПрименяетсяАУСН(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице      = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры  = Ложь;
	РаздельныйУчетНДС                = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет                 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ОбратноеНачислениеНДС            = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	СпособЗаполненияСтавкиНДС        = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	НадоИнициализировать = Ложь;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
	
	Если НадоИнициализировать Тогда
		Форма.УстановитьУсловноеОформлениеДокумента();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеНаСервере() Экспорт

	Если ТипЗнч(НастройкиУсловногоОформления) = Тип("Структура") Тогда
		// При смене вида операции процедура вызывается из общего модуля 
		// ПоступлениеТоваровУслугФормы раньше, чем отработает 
		// УстановитьУсловноеОформление(). Поэтому вызываем обновление только
		// тогда, когда структура НастройкиУсловногоОформления уже была инициализирована.
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДокумента() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбщее()

	НастройкиУсловногоОформления.Вставить("ОбщееПроинициализировано", Истина);

	ПоступлениеТоваровУслугФормы.УстановитьУсловноеОформлениеРеквизитыДокумента(ЭтотОбъект);

	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

	// УслугиСчетУчетаНДС
		
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СчетУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// УслугиСпособУчетаНДС
		
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.НДСНеВыделять;
	КонецЕсли;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		НеОтображатьРеквизитыСчетаФактуры,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	Элементы.ОригиналСчетаФактуры.Видимость = Форма.ТребуетсяСчетФактура И Не НеОтображатьРеквизитыСчетаФактуры;
	
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(Форма, НеОтображатьРеквизитыСчетаФактуры);
	
	Элементы.ИтогиВсегоНДС.Видимость = Не Объект.НДСНеВыделять;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ДоговорКонтрагента.Доступность = 
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) 
		ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	Элементы.СпособУчетаАренды.Видимость =  
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	ПоступлениеТоваровУслугФормы.УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = 
		ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБП.ПриИзмененииКлючевыхРеквизитовЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
		И Не ПараметрыОбъекта.ВедетсяУчетПредметовАренды Тогда
		ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",               Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("НДСВключенВСтоимость",           Объект.НДСВключенВСтоимость);
	ПараметрыОбъекта.Вставить("ПлательщикНалогаНаПрибыль",      Форма.ПлательщикНалогаНаПрибыль);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименениеУСНДоходы",            Форма.ПрименениеУСНДоходы);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("УчетАгентскогоНДС",              Форма.УчетАгентскогоНДС);
	ПараметрыОбъекта.Вставить("РаздельныйУчетНДСНаСчете19",     Форма.РаздельныйУчетНДСНаСчете19);
	ПараметрыОбъекта.Вставить("ВидОперации",                    Объект.ВидОперации);
	ПараметрыОбъекта.Вставить("ВедетсяУчетПредметовАренды",     Объект.ВедетсяУчетПредметовАренды);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		ПрименяютсяСтавки4и2);

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	ДобавленныеСтроки = ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтотОбъект, ВыбранноеЗначение, ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение)
	
	ПоступлениеТоваровУслугФормы.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)

	ТекстВопроса = "Заполнить документ по счету?";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);

	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаЗаполненияПоСчетуНаСервере(ДополнительныеПараметры.ВыбранноеЗначение, ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПоставщика = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ПоступлениеТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтотОбъект, ВыбранноеЗначение, ТабличнаяЧасть);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтотОбъект, "Услуги");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета() Экспорт
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("УслугиСчетЗатрат");
	ЭлементыСчетов.Добавить("УслугиАналитикаУчета");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСпособУчетаНДС");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	// Показываем или отдельные колонки счетов, или одну колонку со всей аналитикой.
	
	ПоказыватьАналитику = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
		И Не Объект.ВедетсяУчетПредметовАренды;
	
	Элементы.УслугиСчетЗатрат.Видимость = Элементы.УслугиСчетЗатрат.Видимость И Не ПоказыватьАналитику;
	Элементы.УслугиСчетУчетаНДС.Видимость = Элементы.УслугиСчетУчетаНДС.Видимость И Не ПоказыватьАналитику;
	Элементы.УслугиАналитикаУчета.Видимость = Элементы.УслугиАналитикаУчета.Видимость И ПоказыватьАналитику;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция СтатусыОригиналовДокументов(Знач Ссылка, Знач СчетФактура)
	
	ДокументыДляПолученияСтатуса = Новый Массив;
	ДокументыДляПолученияСтатуса.Добавить(Ссылка);
	ДокументыДляПолученияСтатуса.Добавить(СчетФактура);
	
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(ДокументыДляПолученияСтатуса);
	
	СтатусыОригиналовДокументов = Новый Соответствие;
	СтатусПоступления  = КоллекцияСтатусов[Ссылка].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусСчетаФактуры = КоллекцияСтатусов[СчетФактура].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусыОригиналовДокументов.Вставить(Ссылка, СтатусПоступления);
	СтатусыОригиналовДокументов.Вставить(СчетФактура, СтатусСчетаФактуры);
	
	Возврат СтатусыОригиналовДокументов;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура СпособУчетаАрендыПриИзмененииНаСервере()
	
	ВедетсяУчетПредметовАренды = СпособУчетаАренды = 1;
	Если Объект.ВедетсяУчетПредметовАренды <> ВедетсяУчетПредметовАренды Тогда
		Объект.ВедетсяУчетПредметовАренды = ВедетсяУчетПредметовАренды;
		ПоступлениеТоваровУслугФормы.ВедетсяУчетПредметовАрендыПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(ДанныеСтроки, Знач ПараметрыОбъекта)

	АналитикаУчетаТекст 	= "";
	АналитикаУчетаЗаполнена = Истина;

	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СтроковыеПредставленияСубконто = Новый Структура();
	
	Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
			СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
			
			АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
					ТекстСтроки 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПодразделениеЗатрат, "Наименование");
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + ТекстСтроки;
				Иначе
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЕсли;
			
			Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
				ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ПредставлениеСубконто = "";
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Продолжить;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ЗначениеСубконто);
					КонецЕсли;
					
					СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
					СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
					
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
			АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
	КонецЕсли;

	// СчетУчетаНДС - до затрат НУ, т.к. аналитика НУ чаще всего совпадает с БУ
	Если ДанныеСтроки.Свойство("СчетУчетаНДС") Тогда
		Если ПараметрыОбъекта.НДСВключенВСтоимость
			И НЕ ПараметрыОбъекта.УчетАгентскогоНДС
			И НЕ ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
			// в этих случаях счет учета НДС не показывается
		Иначе
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС) Тогда
				СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДС);
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("СпособУчетаНДС") Тогда
		Если ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СпособУчетаНДС) Тогда
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.СпособУчетаНДС);
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СчетУчетаЗатратНУ
	Если ДанныеСтроки.Свойство("СчетЗатратНУ") Тогда
		Если ПараметрыОбъекта.ПлательщикНалогаНаПрибыль Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ) Тогда
				СвойстваСчетаНУ 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатратНУ);
				
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчетаНУ.Код;
				
				Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл
					
					ЗначениеСубконтоНУ 	= ДанныеСтроки["СубконтоНУ" + Н];
					
					Если ЗначениеЗаполнено(ЗначениеСубконтоНУ) Тогда

						ПредставлениеСубконтоНУ = "";
						
						// Если совпадает с субконто БУ, то представление выводим как для БУ.
						ЗначениеСубконтоБУ = Неопределено;
						Если СтроковыеПредставленияСубконто.Свойство("ЗначениеСубконто" + Н, ЗначениеСубконтоБУ) Тогда
							Если ЗначениеСубконтоБУ = ЗначениеСубконтоНУ Тогда
								ПредставлениеСубконтоНУ = СтроковыеПредставленияСубконто["ПредставлениеСубконто" + Н];
							КонецЕсли;
						КонецЕсли;
						
						Если ПустаяСтрока(ПредставлениеСубконтоНУ) Тогда
							ТипСубконто = ТипЗнч(ЗначениеСубконтоНУ);
							Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								Продолжить;
							ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
							ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
							Иначе
								ПредставлениеСубконтоНУ = Строка(ЗначениеСубконтоНУ);
							КонецЕсли;
						КонецЕсли;
					
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконтоНУ;
					
					Иначе
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
					КонецЕсли;
					
				КонецЦикла;

			Иначе
				АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
				АналитикаУчетаЗаполнена = Ложь;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// ОтражениеВУСН
	Если НЕ ПараметрыОбъекта.ПрименениеУСН
		ИЛИ ПараметрыОбъекта.ПрименениеУСНДоходы Тогда	
		// в этих случаях ОтражениеВУСН не требуется
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
		    АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.ОтражениеВУСН);
		Иначе
			АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
			АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
	КонецЕсли;

	ДанныеСтроки.АналитикаУчета 			= Сред(АналитикаУчетаТекст, 3);
	ДанныеСтроки.АналитикаУчетаЗаполнена 	= АналитикаУчетаЗаполнена;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Услуги.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",       ТолькоПросмотр);
	ПараметрыФормы.Вставить("ДатаДокумента",        Объект.Дата);
	ПараметрыФормы.Вставить("Организация",          Объект.Организация);
	ПараметрыФормы.Вставить("СчетУчетаНДС",         ДанныеСтроки.СчетУчетаНДС);
	ПараметрыФормы.Вставить("СпособУчетаНДС",       ДанныеСтроки.СпособУчетаНДС);
	ПараметрыФормы.Вставить("СуммаНДС",             ДанныеСтроки.СуммаНДС);
	ПараметрыФормы.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыФормы.Вставить("УчетАгентскогоНДС",    УчетАгентскогоНДС);
	
	ПараметрыФормы.Вставить("СчетЗатрат",          ДанныеСтроки.СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", ДанныеСтроки.ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           ДанныеСтроки.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           ДанныеСтроки.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           ДанныеСтроки.Субконто3);
	ПараметрыФормы.Вставить("СчетЗатратНУ",        ДанныеСтроки.СчетЗатратНУ);
	ПараметрыФормы.Вставить("СубконтоНУ1",         ДанныеСтроки.СубконтоНУ1);
	ПараметрыФормы.Вставить("СубконтоНУ2",         ДанныеСтроки.СубконтоНУ2);
	ПараметрыФормы.Вставить("СубконтоНУ3",         ДанныеСтроки.СубконтоНУ3);
	ПараметрыФормы.Вставить("Номенклатура",        ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Контрагент",          Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	ДанныеСтроки = Новый Структура("Сумма, СчетУчетаНДС, СуммаНДС, СпособУчетаНДС,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|ПодразделениеЗатрат, ОтражениеВУСН,
		|ВсегоПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу,
		|Всего, АналитикаУчета, АналитикаУчетаЗаполнена");
		
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	
	ДанныеСтроки.Сумма               = ТекущиеДанные.Сумма;
	ДанныеСтроки.СуммаНДС            = ТекущиеДанные.СуммаНДС;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ДанныеСтроки, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, , 
		"Сумма, СуммаНДС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовогоДоговора()
	
	Возврат ПоступлениеТоваровУслугФормы.ПараметрыСозданияНовогоДоговора(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

ЭтоНоваяСтрока = Ложь;
