
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Параметры.РежимОткрытияОкна) Тогда
		РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = 
			Новый Структура(
				"Организация, 
				|Ответственный, 
				|ДатаСобытия", 
				"Объект.Организация", 
				"Объект.Ответственный", 
				"Объект.ДатаДействия");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьФорму();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом

	Элементы.СпособРасчетаГруппа.Видимость        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	Элементы.РеквизитыУдержанияСтраницы.Видимость = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ИнициализироватьФорму();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ИсполнительныйЛист", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	
	СинхронизироватьРеквизитыПеречисленийПоИсполнительномуЛисту();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой") Тогда
		
		Объект.Сумма = Сумма;
		Объект.Процент = 0;
		Объект.Числитель = 0;
		Объект.Знаменатель = 0;
		
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом") Тогда
		
		Объект.Сумма = 0;
		Объект.Процент = Процент;
		Объект.Числитель = 0;
		Объект.Знаменатель = 0;
			
	Иначе
		
		Объект.Сумма = 0;
		Объект.Процент = 0;
		Объект.Числитель = Макс(Числитель, 1);
		Объект.Знаменатель = Макс(Знаменатель, 1);
			
	КонецЕсли;
	
	УстановитьНастройкиЗаполненияРазмераУдержания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	Сумма = Объект.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	Процент = Объект.Процент;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислительПриИзменении(Элемент)
	
	Числитель = Объект.Числитель;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗнаменательПриИзменении(Элемент)
	
	Знаменатель = Объект.Знаменатель;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ИнициализироватьФорму()
	
	Сумма = Объект.Сумма;
	Процент = Объект.Процент;
	Числитель = Объект.Числитель;
	Знаменатель = Объект.Знаменатель;
	
	УстановитьНастройкиЗаполненияРазмераУдержания(ЭтотОбъект);
	
	ОформитьКомандуРедактированияРеквизитовПлатежа();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНастройкиЗаполненияРазмераУдержания(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДоступностьВводаСуммы = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой");
	ДоступностьВводаПроцента = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом");
	ДоступностьВводаДолей = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазмерУдержанияСуммойГруппа",
		"Доступность",
		ДоступностьВводаСуммы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазмерУдержанияПроцентомГруппа",
		"Доступность",
		ДоступностьВводаПроцента);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазмерУдержанияДолейГруппа",
		"Доступность",
		ДоступностьВводаДолей);
		
КонецПроцедуры

#КонецОбласти

#Область ПлатежныеРеквизиты

&НаКлиенте
Процедура ПлатежныеРеквизитыНажатие(Элемент)
	
	Если Модифицированность Или Параметры.Ключ.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПлатежныеРеквизитыНажатиеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перед редактированием платежных реквизитов необходимо записать документ.
			|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуРедактированияРеквизитовПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсточникДанныхКонтекста()
	
	ГоловнойКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Получатель, "ГоловнойКонтрагент");
	
	СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГоловнойКонтрагент, "ГосударственныйОрган,ВидГосударственногоОргана");
	
	Период = Макс(Объект.Дата, ТекущаяДатаСеанса());
	
	СвойстваКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	СвойстваКонтекста.Вставить("Период",                             Период);
	СвойстваКонтекста.Вставить("Организация",                        Объект.Организация);
	СвойстваКонтекста.Вставить("РедактироватьНазначенияПлатежа",     Истина);
	СвойстваКонтекста.Вставить("ПеречислениеПоИсполнительномуЛисту", Истина);
	СвойстваКонтекста.Вставить("ГосударственныйОрган",               СведенияОКонтрагенте.ГосударственныйОрган);
	СвойстваКонтекста.Вставить("ВидГосударственногоОргана",          СведенияОКонтрагенте.ВидГосударственногоОргана);
	СвойстваКонтекста.Вставить("ПеречислениеВБюджет",                СведенияОКонтрагенте.ГосударственныйОрган);
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СвойстваКонтекста.СчетПолучателя,
		Объект.Получатель,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СвойстваКонтекста;
	
КонецФункции

&НаСервере
Функция РеквизитыПлатежаПоИсполнительномуЛисту()
	
	Возврат РегистрыСведений.РеквизитыПеречисленийПоИсполнительнымЛистам.РеквизитыПеречисленияПоИсполнительномуЛистуРаботника(
		Объект.Организация,
		Объект.ФизическоеЛицо,
		Объект.Ссылка,
		Объект.Дата);
	
КонецФункции

&НаКлиенте
Процедура ПлатежныеРеквизитыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФормуРедактированияРеквизитовПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитовПлатежа()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежаПоИсполнительномуЛисту = РеквизитыПлатежаПоИсполнительномуЛисту();
	РеквизитыПлатежа = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение() Цикл
		Если РеквизитыПлатежаПоИсполнительномуЛисту.Свойство(ОписаниеРеквизита.Значение)
			И РеквизитыПлатежа.Свойство(ОписаниеРеквизита.Ключ) Тогда
			РеквизитыПлатежа[ОписаниеРеквизита.Ключ] = РеквизитыПлатежаПоИсполнительномуЛисту[ОписаниеРеквизита.Значение];
		КонецЕсли;
	КонецЦикла;
	РеквизитыПлатежа.ПеречислениеПоИсполнительномуЛисту = Истина;
	
	// Заполним контекст
	СвойстваКонтекста = ИсточникДанныхКонтекста();
	
	Если СвойстваКонтекста.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
		РеквизитыПлатежа.Вставить("ВидПеречисления", ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж"));
	Иначе
		РеквизитыПлатежа.Вставить("ВидПеречисления", ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж"));
	КонецЕсли;
	
	Если Не РеквизитыПлатежаПоИсполнительномуЛисту.НастройкиЗаданы Тогда
		ПеречислениеВБюджет = СвойстваКонтекста.ПеречислениеВБюджет;
	Иначе
		ПеречислениеВБюджет = РеквизитыПлатежаПоИсполнительномуЛисту.ПеречислениеВБюджет;
		СвойстваКонтекста.ПеречислениеВБюджет = ПеречислениеВБюджет;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированияРеквизитовПлатежаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Реквизиты",                РеквизитыПлатежа);
	ПараметрыФормы.Вставить("СвойстваКонтекста",        СвойстваКонтекста);
	ПараметрыФормы.Вставить("ТолькоПросмотр",           ТолькоПросмотр);
	ПараметрыФормы.Вставить("Ссылка",                   Объект.Ссылка);
	ПараметрыФормы.Вставить("ПеречислениеВБюджет",      ПеречислениеВБюджет);
	
	Если Не СвойстваКонтекста.ГосударственныйОрган Тогда
		ФормаРедактирования = "РегистрСведений.РеквизитыПеречисленийПоИсполнительнымЛистам.Форма.ФормаРеквизитыПлатежа";
	Иначе
		ФормаРедактирования = "ОбщаяФорма.РеквизитыПлатежаВБюджет";
	КонецЕсли;
	
	ОткрытьФорму(
		ФормаРедактирования,
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированияРеквизитовПлатежаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьРеквизитыПлатежа(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыПлатежа(РеквизитыПлатежа);
	
	РеквизитыПеречисления = РеквизитыПлатежаПоИсполнительномуЛисту();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение() Цикл
		Если РеквизитыПеречисления.Свойство(ОписаниеРеквизита.Значение)
			И РеквизитыПлатежа.Свойство(ОписаниеРеквизита.Ключ) Тогда
			РеквизитыПеречисления[ОписаниеРеквизита.Значение] = РеквизитыПлатежа[ОписаниеРеквизита.Ключ];
		КонецЕсли;
	КонецЦикла;
	РеквизитыПеречисления.Вставить("ИсполнительныйЛист", Объект.Ссылка);
	РеквизитыПеречисления.Вставить("Организация",        Объект.Организация);
	РеквизитыПеречисления.Вставить("Сотрудник",          Объект.ФизическоеЛицо);
	
	РегистрыСведений.РеквизитыПеречисленийПоИсполнительнымЛистам.ЗаписатьРеквизитыПеречисленияПоИсполнительномуЛистуРаботника(РеквизитыПеречисления);
	
	ОформитьКомандуРедактированияРеквизитовПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьКомандуРедактированияРеквизитовПлатежа();
	
	РеквизитыЗаполнены = РегистрыСведений.РеквизитыПеречисленийПоИсполнительнымЛистам.РеквизитыЗаполнены(
		Объект.Организация,
		Объект.ФизическоеЛицо,
		Объект.Ссылка);
		
	Если РеквизитыЗаполнены Тогда
		Элементы.ГруппаПлатежныеРеквизиты.ЦветФона = ЦветаСтиля.ЦветФонаКорректныхКонтрагентов;
	Иначе
		Элементы.ГруппаПлатежныеРеквизиты.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьРеквизитыПеречисленийПоИсполнительномуЛисту()
	
	РегистрыСведений.РеквизитыПеречисленийПоИсполнительнымЛистам.СинхронизироватьЗапись(Объект.Организация,
		Объект.ФизическоеЛицо,
		Объект.Ссылка);
	ОформитьКомандуРедактированияРеквизитовПлатежа();
	
КонецПроцедуры

#КонецОбласти
